{"total_count": 81, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/215", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/215/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/215/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/215/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/215", "id": 570288927, "node_id": "MDU6SXNzdWU1NzAyODg5Mjc=", "number": 215, "title": "Incorrect driver \u2192 Data source name not found and no default driver specified", "user": {"login": "johnvorsten", "id": 47929282, "node_id": "MDQ6VXNlcjQ3OTI5Mjgy", "avatar_url": "https://avatars3.githubusercontent.com/u/47929282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnvorsten", "html_url": "https://github.com/johnvorsten", "followers_url": "https://api.github.com/users/johnvorsten/followers", "following_url": "https://api.github.com/users/johnvorsten/following{/other_user}", "gists_url": "https://api.github.com/users/johnvorsten/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnvorsten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnvorsten/subscriptions", "organizations_url": "https://api.github.com/users/johnvorsten/orgs", "repos_url": "https://api.github.com/users/johnvorsten/repos", "events_url": "https://api.github.com/users/johnvorsten/events{/privacy}", "received_events_url": "https://api.github.com/users/johnvorsten/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-25T03:36:29Z", "updated_at": "2020-02-25T03:37:09Z", "closed_at": "2020-02-25T03:37:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is not an issue with this package, but it is an issue with the azure web portal.\r\n\r\nIf you just started an azure sql server and database they might recommend a connection string like this : \r\nDriver={ODBC Driver 13 for SQL Server};Server=tcp:webapp-dbserver.database.windows.net,1433;Database=webapp-database;Uid=myself;Pwd={your_password_here};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;\r\n\r\nThis does not work.  You need to change the driver to ODBC Driver 17 for SQL Server (NOT 13)\r\n\r\nMake sure you reflect this in your database configuration dictionary in django.  Here is what worked for me : \r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'sql_server.pyodbc',\r\n        'NAME': 'webapp-database',\r\n        'USER': 'myself@webapp-dbserver',\r\n        'PASSWORD': 'n0mb34&l31134',\r\n        'HOST': 'tcp:webapp-dbserver.database.windows.net',\r\n        'PORT': '1433',\r\n        'OPTIONS': {'driver': 'ODBC Driver 17 for SQL Server',\r\n                },\r\n    }\r\n}\r\n\r\nJust an FYI for anyone else who might have this issue. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/209", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/209/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/209/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/209/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/209", "id": 497458072, "node_id": "MDU6SXNzdWU0OTc0NTgwNzI=", "number": 209, "title": "SQL Server v15 is not supported.", "user": {"login": "mythox", "id": 14196236, "node_id": "MDQ6VXNlcjE0MTk2MjM2", "avatar_url": "https://avatars0.githubusercontent.com/u/14196236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mythox", "html_url": "https://github.com/mythox", "followers_url": "https://api.github.com/users/mythox/followers", "following_url": "https://api.github.com/users/mythox/following{/other_user}", "gists_url": "https://api.github.com/users/mythox/gists{/gist_id}", "starred_url": "https://api.github.com/users/mythox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mythox/subscriptions", "organizations_url": "https://api.github.com/users/mythox/orgs", "repos_url": "https://api.github.com/users/mythox/repos", "events_url": "https://api.github.com/users/mythox/events{/privacy}", "received_events_url": "https://api.github.com/users/mythox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-09-24T05:07:04Z", "updated_at": "2020-04-03T17:22:10Z", "closed_at": "2019-09-24T07:49:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, i'm trying to connect django-pyodbc-azure to MSSQL 2017 Linux Edition via ODBC Driver 17 for SQL Server Driver, however I've got an error message: SQL Server v15 is not supported.  is it really not yet support v15?  any plan to support it?  thankyou", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/206", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/206/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/206/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/206/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/206", "id": 440546615, "node_id": "MDU6SXNzdWU0NDA1NDY2MTU=", "number": 206, "title": "problem during install on centos ", "user": {"login": "ahmadmrj", "id": 10599545, "node_id": "MDQ6VXNlcjEwNTk5NTQ1", "avatar_url": "https://avatars2.githubusercontent.com/u/10599545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmadmrj", "html_url": "https://github.com/ahmadmrj", "followers_url": "https://api.github.com/users/ahmadmrj/followers", "following_url": "https://api.github.com/users/ahmadmrj/following{/other_user}", "gists_url": "https://api.github.com/users/ahmadmrj/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmadmrj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmadmrj/subscriptions", "organizations_url": "https://api.github.com/users/ahmadmrj/orgs", "repos_url": "https://api.github.com/users/ahmadmrj/repos", "events_url": "https://api.github.com/users/ahmadmrj/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmadmrj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-06T05:38:09Z", "updated_at": "2019-05-23T05:15:55Z", "closed_at": "2019-05-23T05:15:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tryed to install with:\r\n`pip install django-pyodbc-azure`\r\nBut I got these errors:\r\n\r\n```\r\nBuilding wheels for collected packages: pyodbc\r\n  Building wheel for pyodbc (setup.py) ... error\r\n  ERROR: Complete output from command /home/ahmad/myproject/myprojectenv/bin/python3.6 -u -c 'import setuptools, tokenize;__file__='\"'\"'/tmp/pip-install-r_1y5ugp/pyodbc/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' bdist_wheel -d /tmp/pip-wheel-80yyxpbs --python-tag cp36:\r\n  ERROR: running bdist_wheel\r\n  running build\r\n  running build_ext\r\n  building 'pyodbc' extension\r\n  creating build\r\n  creating build/temp.linux-x86_64-3.6\r\n  creating build/temp.linux-x86_64-3.6/src\r\n  gcc -pthread -Wno-unused-result -Wsign-compare -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DNDEBUG -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -fPIC -DPYODBC_VERSION=4.0.26 -I/usr/include/python3.6m -c src/buffer.cpp -o build/temp.linux-x86_64-3.6/src/buffer.o -Wno-write-strings\r\n  gcc: error trying to exec 'cc1plus': execvp: No such file or directory\r\n  error: command 'gcc' failed with exit status 1\r\n  ----------------------------------------\r\n  ERROR: Failed building wheel for pyodbc\r\n  Running setup.py clean for pyodbc\r\nFailed to build pyodbc\r\nInstalling collected packages: pyodbc, Django, django-pyodbc-azure\r\n  Running setup.py install for pyodbc ... error\r\n    ERROR: Complete output from command /home/ahmad/myproject/myprojectenv/bin/python3.6 -u -c 'import setuptools, tokenize;__file__='\"'\"'/tmp/pip-install-r_1y5ugp/pyodbc/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' install --record /tmp/pip-record-nvdwexsf/install-record.txt --single-version-externally-managed --compile --install-headers /home/ahmad/myproject/myprojectenv/include/site/python3.6/pyodbc:\r\n    ERROR: running install\r\n    running build\r\n    running build_ext\r\n    building 'pyodbc' extension\r\n    creating build\r\n    creating build/temp.linux-x86_64-3.6\r\n    creating build/temp.linux-x86_64-3.6/src\r\n    gcc -pthread -Wno-unused-result -Wsign-compare -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DNDEBUG -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -fPIC -DPYODBC_VERSION=4.0.26 -I/usr/include/python3.6m -c src/buffer.cpp -o build/temp.linux-x86_64-3.6/src/buffer.o -Wno-write-strings\r\n    gcc: error trying to exec 'cc1plus': execvp: No such file or directory\r\n    error: command 'gcc' failed with exit status 1\r\n    ----------------------------------------\r\nERROR: Command \"/home/ahmad/myproject/myprojectenv/bin/python3.6 -u -c 'import setuptools, tokenize;__file__='\"'\"'/tmp/pip-install-r_1y5ugp/pyodbc/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' install --record /tmp/pip-record-nvdwexsf/install-record.txt --single-version-externally-managed --compile --install-headers /home/ahmad/myproject/myprojectenv/include/site/python3.6/pyodbc\" failed with error code 1 in /tmp/pip-install-r_1y5ugp/pyodbc/\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/203", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/203/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/203/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/203/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/203", "id": 426352481, "node_id": "MDU6SXNzdWU0MjYzNTI0ODE=", "number": 203, "title": "pyodbc.ProgrammingError: Attempt to use a closed connection.", "user": {"login": "saimahesh91", "id": 39583380, "node_id": "MDQ6VXNlcjM5NTgzMzgw", "avatar_url": "https://avatars2.githubusercontent.com/u/39583380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saimahesh91", "html_url": "https://github.com/saimahesh91", "followers_url": "https://api.github.com/users/saimahesh91/followers", "following_url": "https://api.github.com/users/saimahesh91/following{/other_user}", "gists_url": "https://api.github.com/users/saimahesh91/gists{/gist_id}", "starred_url": "https://api.github.com/users/saimahesh91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saimahesh91/subscriptions", "organizations_url": "https://api.github.com/users/saimahesh91/orgs", "repos_url": "https://api.github.com/users/saimahesh91/repos", "events_url": "https://api.github.com/users/saimahesh91/events{/privacy}", "received_events_url": "https://api.github.com/users/saimahesh91/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-28T08:08:23Z", "updated_at": "2019-03-29T07:13:31Z", "closed_at": "2019-03-29T07:13:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am getting this error in python. How can i overcome from it. \r\n\r\nError:\r\n\r\nC:\\Python\\Python36\\python.exe \"C:/Users/user/PycharmProjects/twilio sms/BULK_SMS_Eastern.py\"\r\n3\r\nin\r\n2\r\n3\r\n['{\"binding_type\": \"sms\", \"address\": \"+12673130432\"}', '{\"binding_type\": \"sms\", \"address\": \"+12673130432\"}', '{\"binding_type\": \"sms\", \"address\": \"+12673130432\"}']\r\nISc82f5f221151a4fde4574e3fd574f6f1\r\nNT45c0a0ab0d644e0e512bfb13a0a9e92d\r\n328129\r\nTraceback (most recent call last):\r\n  File \"C:/Users/user/PycharmProjects/twilio sms/BULK_SMS_Eastern.py\", line 53, in <module>\r\n    cur = cnxn.cursor()\r\npyodbc.ProgrammingError: Attempt to use a closed connection.\r\n\r\nProcess finished with exit code 1\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/200", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/200/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/200/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/200", "id": 413851848, "node_id": "MDU6SXNzdWU0MTM4NTE4NDg=", "number": 200, "title": "Segmentation fault with Sql Server ", "user": {"login": "Jasonca2", "id": 5758786, "node_id": "MDQ6VXNlcjU3NTg3ODY=", "avatar_url": "https://avatars1.githubusercontent.com/u/5758786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jasonca2", "html_url": "https://github.com/Jasonca2", "followers_url": "https://api.github.com/users/Jasonca2/followers", "following_url": "https://api.github.com/users/Jasonca2/following{/other_user}", "gists_url": "https://api.github.com/users/Jasonca2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jasonca2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jasonca2/subscriptions", "organizations_url": "https://api.github.com/users/Jasonca2/orgs", "repos_url": "https://api.github.com/users/Jasonca2/repos", "events_url": "https://api.github.com/users/Jasonca2/events{/privacy}", "received_events_url": "https://api.github.com/users/Jasonca2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-24T18:27:48Z", "updated_at": "2019-02-28T00:29:01Z", "closed_at": "2019-02-28T00:29:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I keep getting a segmentation fault when trying to query Sql Server with Python 3.4.5, Django 2.0.13 (or newer), pyodbc 4.0.25, and django-pyodbc-azure 2.0.8 (the latest version that supports Django 2.0.13). \r\n\r\nOn my local machine using Python 3.5 (on Windows using Microsoft's Sql Server drivers) and both the latest version of Django and latest version of django-pyodbc-azure (2.1.0), everything works fine. \r\n\r\nI am also using Microsoft official linux driver for Sql Server, ODBC Driver 13 for Sql Server.\r\n\r\nThe error is coming from multiple threaded connections. The program fails at line 307 in base.py when trying to instantiate a new database connection from Database.connect()\r\n\r\n\r\n`\r\n        while conn is None:\r\n            try:\r\n                conn = Database.connect(connstr,\r\n                                        unicode_results=unicode_results,\r\n                                        timeout=timeout)                           <------------- Right here is where the code fails.\r\n            except Exception as e:\r\n                for error_number in self._transient_error_numbers:\r\n                    if error_number in e.args[1]:\r\n                        if error_number in e.args[1] and retry_count < retries:\r\n                            time.sleep(backoff_time)\r\n                            need_to_retry = True\r\n                            retry_count = retry_count + 1\r\n                        else:\r\n                            need_to_retry = False\r\n                        break\r\n                if not need_to_retry:\r\n                    raise\r\n`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/170", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/170/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/170/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/170/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/170", "id": 335656714, "node_id": "MDU6SXNzdWUzMzU2NTY3MTQ=", "number": 170, "title": "Required Django version", "user": {"login": "wil", "id": 26890, "node_id": "MDQ6VXNlcjI2ODkw", "avatar_url": "https://avatars0.githubusercontent.com/u/26890?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wil", "html_url": "https://github.com/wil", "followers_url": "https://api.github.com/users/wil/followers", "following_url": "https://api.github.com/users/wil/following{/other_user}", "gists_url": "https://api.github.com/users/wil/gists{/gist_id}", "starred_url": "https://api.github.com/users/wil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wil/subscriptions", "organizations_url": "https://api.github.com/users/wil/orgs", "repos_url": "https://api.github.com/users/wil/repos", "events_url": "https://api.github.com/users/wil/events{/privacy}", "received_events_url": "https://api.github.com/users/wil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-26T04:39:40Z", "updated_at": "2018-08-22T12:45:27Z", "closed_at": "2018-08-22T05:31:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nCurrently, django-pyodbc-azure 2.0.6.* requires django >= 2.0.6.\r\nIs there any reason why it could not relax the required django version to `>=2.0` ? That way, we do not have to force developers to upgrade Django.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/164", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/164/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/164/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/164/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/164", "id": 323488991, "node_id": "MDU6SXNzdWUzMjM0ODg5OTE=", "number": 164, "title": "std::runtime_error: collate_byname<char>::collate_byname failed to construct for C/zh_CN.UTF-8", "user": {"login": "EdwardNian", "id": 3196342, "node_id": "MDQ6VXNlcjMxOTYzNDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/3196342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EdwardNian", "html_url": "https://github.com/EdwardNian", "followers_url": "https://api.github.com/users/EdwardNian/followers", "following_url": "https://api.github.com/users/EdwardNian/following{/other_user}", "gists_url": "https://api.github.com/users/EdwardNian/gists{/gist_id}", "starred_url": "https://api.github.com/users/EdwardNian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EdwardNian/subscriptions", "organizations_url": "https://api.github.com/users/EdwardNian/orgs", "repos_url": "https://api.github.com/users/EdwardNian/repos", "events_url": "https://api.github.com/users/EdwardNian/events{/privacy}", "received_events_url": "https://api.github.com/users/EdwardNian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-05-16T06:49:10Z", "updated_at": "2018-09-14T02:17:58Z", "closed_at": "2018-09-14T02:17:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I used Microsoft ODBC Driver 17 for SQL Server and django-pyodbc-azure 2.0.4.1 on Mac ,got \"libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: collate_byname<char>::collate_byname failed to construct for C/zh_CN.UTF-8/C/C/C/C\".\r\n\r\nBut switch to freetds, no issues happened.\r\n\r\nWhen I used Microsoft ODBC Driver 17 for SQL Server and django-pyodbc-azure 1.11.0 on Mac, got \r\nno issues too.\r\nCould some one help?Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/161", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/161/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/161/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/161/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/161", "id": 318788000, "node_id": "MDU6SXNzdWUzMTg3ODgwMDA=", "number": 161, "title": "The database driver doesn't support modern datatime types", "user": {"login": "Sirichakorn", "id": 30691038, "node_id": "MDQ6VXNlcjMwNjkxMDM4", "avatar_url": "https://avatars1.githubusercontent.com/u/30691038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sirichakorn", "html_url": "https://github.com/Sirichakorn", "followers_url": "https://api.github.com/users/Sirichakorn/followers", "following_url": "https://api.github.com/users/Sirichakorn/following{/other_user}", "gists_url": "https://api.github.com/users/Sirichakorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sirichakorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sirichakorn/subscriptions", "organizations_url": "https://api.github.com/users/Sirichakorn/orgs", "repos_url": "https://api.github.com/users/Sirichakorn/repos", "events_url": "https://api.github.com/users/Sirichakorn/events{/privacy}", "received_events_url": "https://api.github.com/users/Sirichakorn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-30T05:19:19Z", "updated_at": "2018-05-02T13:58:45Z", "closed_at": "2018-05-02T13:58:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm use python 3.4.3, django 2.0.4, FreeTDS v1.1.dev.20180427 on Ubuntu 14.04\r\nconnect to MSSQL 2017.\r\nwhen I run \"python manage.py migrate\" I got error message below.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"manage.py\", line 10, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"/home/dev/envdjango2/lib/python3.4/site-packages/django/core/management/__init__.py\", line 371, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/home/dev/envdjango2/lib/python3.4/site-packages/django/core/management/__init__.py\", line 365, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"/home/dev/envdjango2/lib/python3.4/site-packages/django/core/management/base.py\", line 288, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"/home/dev/envdjango2/lib/python3.4/site-packages/django/core/management/base.py\", line 335, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/home/dev/envdjango2/lib/python3.4/site-packages/django/core/management/commands/migrate.py\", line 79, in handle\r\n    executor = MigrationExecutor(connection, self.migration_progress_callback)\r\n  File \"/home/dev/envdjango2/lib/python3.4/site-packages/django/db/migrations/executor.py\", line 18, in __init__\r\n    self.loader = MigrationLoader(self.connection)\r\n  File \"/home/dev/envdjango2/lib/python3.4/site-packages/django/db/migrations/loader.py\", line 49, in __init__\r\n    self.build_graph()\r\n  File \"/home/dev/envdjango2/lib/python3.4/site-packages/django/db/migrations/loader.py\", line 206, in build_graph\r\n    self.applied_migrations = recorder.applied_migrations()\r\n  File \"/home/dev/envdjango2/lib/python3.4/site-packages/django/db/migrations/recorder.py\", line 61, in applied_migrations\r\n    if self.has_table():\r\n  File \"/home/dev/envdjango2/lib/python3.4/site-packages/django/db/migrations/recorder.py\", line 44, in has_table\r\n    return self.Migration._meta.db_table in self.connection.introspection.table_names(self.connection.cursor())\r\n  File \"/home/dev/envdjango2/lib/python3.4/site-packages/django/db/backends/base/base.py\", line 255, in cursor\r\n    return self._cursor()\r\n  File \"/home/dev/envdjango2/lib/python3.4/site-packages/django/db/backends/base/base.py\", line 232, in _cursor\r\n    self.ensure_connection()\r\n  File \"/home/dev/envdjango2/lib/python3.4/site-packages/django/db/backends/base/base.py\", line 216, in ensure_connection\r\n    self.connect()\r\n  File \"/home/dev/envdjango2/lib/python3.4/site-packages/django/db/backends/base/base.py\", line 196, in connect\r\n    self.init_connection_state()\r\n  File \"/home/dev/envdjango2/lib/python3.4/site-packages/sql_server/pyodbc/base.py\", line 365, in init_connection_state\r\n    \"The database driver doesn't support modern datatime types.\")\r\ndjango.core.exceptions.ImproperlyConfigured: The database driver doesn't support modern datatime types.\r\n```\r\n\r\nI try to fix this error for a few days but not success. Anyone know how to fix it.\r\nThank in advance.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/158", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/158/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/158/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/158/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/158", "id": 313820279, "node_id": "MDU6SXNzdWUzMTM4MjAyNzk=", "number": 158, "title": "`supports_mars` attribute error when using multiple databases. ", "user": {"login": "ScottBarkman", "id": 3855747, "node_id": "MDQ6VXNlcjM4NTU3NDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3855747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ScottBarkman", "html_url": "https://github.com/ScottBarkman", "followers_url": "https://api.github.com/users/ScottBarkman/followers", "following_url": "https://api.github.com/users/ScottBarkman/following{/other_user}", "gists_url": "https://api.github.com/users/ScottBarkman/gists{/gist_id}", "starred_url": "https://api.github.com/users/ScottBarkman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ScottBarkman/subscriptions", "organizations_url": "https://api.github.com/users/ScottBarkman/orgs", "repos_url": "https://api.github.com/users/ScottBarkman/repos", "events_url": "https://api.github.com/users/ScottBarkman/events{/privacy}", "received_events_url": "https://api.github.com/users/ScottBarkman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-12T17:29:28Z", "updated_at": "2018-04-15T03:19:02Z", "closed_at": "2018-04-15T03:19:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Ran into an issue when I was attempting to use this with multiple databases (MS sql server & postgresql) Whenever I would run a query on the sql server, followed by one on postgres - the postgresql one would fail with `DatabaseWrapper has no attribute supports_mars`\r\n\r\nI traced this back to a method (`_cursor_iter`) inside of `pyodbc/compile.py` which appeared to be running on each database connection, including the postgresql one. \r\n\r\nAdding a simple @ line 84: \r\n````\r\nif not hasattr(cursor.db, \"supports_mars\"):\r\n    cursor.db.supports_mars = False;\r\n````\r\nsolves the issue. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/154", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/154/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/154/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/154", "id": 308035037, "node_id": "MDU6SXNzdWUzMDgwMzUwMzc=", "number": 154, "title": "Inserting Decimals at max_digits Results in \"django.db.utils.DataError: ('String data, right truncation: length 22 buffer 20', '22001')\"", "user": {"login": "isosphere", "id": 163370, "node_id": "MDQ6VXNlcjE2MzM3MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/163370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/isosphere", "html_url": "https://github.com/isosphere", "followers_url": "https://api.github.com/users/isosphere/followers", "following_url": "https://api.github.com/users/isosphere/following{/other_user}", "gists_url": "https://api.github.com/users/isosphere/gists{/gist_id}", "starred_url": "https://api.github.com/users/isosphere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/isosphere/subscriptions", "organizations_url": "https://api.github.com/users/isosphere/orgs", "repos_url": "https://api.github.com/users/isosphere/repos", "events_url": "https://api.github.com/users/isosphere/events{/privacy}", "received_events_url": "https://api.github.com/users/isosphere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-23T13:46:20Z", "updated_at": "2018-03-23T14:33:42Z", "closed_at": "2018-03-23T14:33:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a confusing error I'm trying to figure out. Here's the basic setup:\r\n\r\n**System**\r\n\r\n- Windows 10, x64\r\n- Python 3.6.4 x64\r\n- django-pyodbc-azure (1.11.0.0) (e: upgraded to 1.11.11.0, no change)\r\n- pyodbc (4.0.22)\r\n- MSSQL 13.0.4001\r\n\r\n**Model definition**\r\n```\r\nclass examplemodel(models.Model):\r\n    date = models.DateField(blank=False, null=False, db_index=True)\r\n    reference_date = models.DateField(blank=False, null=False, db_index=True)\r\n    value = models.DecimalField(max_digits=10, decimal_places=4, null=True)\r\n    updated = models.DateTimeField()\r\n\r\n    class Meta:\r\n        db_table = 'examplemodel'\r\n        verbose_name = 'examplemodel'\r\n        unique_together = (('date', 'reference_date'),)\r\n```\r\n\r\n**Data Insertion**\r\n```\r\ndata_entry = examplemodel(**{'date': datetime.date(2048,12,1), 'reference_date': datetime.date(2019,2,1), 'value': 131712.5000, 'updated': '2017-03-01 15:30'})\r\ndata_entry.save()\r\n```\r\n\r\n**Error**\r\n\r\n> Traceback (most recent call last):\r\n>   File \"c:\\python36\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 64, in execute\r\n>     return self.cursor.execute(sql, params)\r\n>   File \"c:\\python36\\lib\\site-packages\\sql_server\\pyodbc\\base.py\", line 547, in execute\r\n>     return self.cursor.execute(sql, params)\r\n> pyodbc.DataError: ('String data, right truncation: length 22 buffer 20', '22001')\r\n> \r\n> The above exception was the direct cause of the following exception:\r\n> \r\n> Traceback (most recent call last):\r\n>   File \"<console>\", line 1, in <module>\r\n>   File \"c:\\python36\\lib\\site-packages\\django\\db\\models\\base.py\", line 808, in save\r\n>     force_update=force_update, update_fields=update_fields)\r\n>   File \"c:\\python36\\lib\\site-packages\\django\\db\\models\\base.py\", line 838, in save_base\r\n>     updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\r\n>   File \"c:\\python36\\lib\\site-packages\\django\\db\\models\\base.py\", line 924, in _save_table\r\n>     result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\r\n>   File \"c:\\python36\\lib\\site-packages\\django\\db\\models\\base.py\", line 963, in _do_insert\r\n>     using=using, raw=raw)\r\n>   File \"c:\\python36\\lib\\site-packages\\django\\db\\models\\manager.py\", line 85, in manager_method\r\n>     return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n>   File \"c:\\python36\\lib\\site-packages\\django\\db\\models\\query.py\", line 1076, in _insert\r\n>     return query.get_compiler(using=using).execute_sql(return_id)\r\n>   File \"c:\\python36\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py\", line 1112, in execute_sql\r\n>     cursor.execute(sql, params)\r\n>   File \"c:\\python36\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 79, in execute\r\n>     return super(CursorDebugWrapper, self).execute(sql, params)\r\n>   File \"c:\\python36\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 64, in execute\r\n>     return self.cursor.execute(sql, params)\r\n>   File \"c:\\python36\\lib\\site-packages\\django\\db\\utils.py\", line 94, in __exit__\r\n>     six.reraise(dj_exc_type, dj_exc_value, traceback)\r\n>   File \"c:\\python36\\lib\\site-packages\\django\\utils\\six.py\", line 685, in reraise\r\n>     raise value.with_traceback(tb)\r\n>   File \"c:\\python36\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 64, in execute\r\n>     return self.cursor.execute(sql, params)\r\n>   File \"c:\\python36\\lib\\site-packages\\sql_server\\pyodbc\\base.py\", line 547, in execute\r\n>     return self.cursor.execute(sql, params)\r\n> django.db.utils.DataError: ('String data, right truncation: length 22 buffer 20', '22001')\r\n\r\n\r\n**Alternative Data Insertion**\r\n\r\n```\r\ndata_entry = examplemodel(**{'date': datetime.date(2022,1,1), 'reference_date': datetime.date(2019,2,1), 'value': 2.5000, 'updated': '2017-03-01 15:30'})\r\ndata_entry.save()\r\n```\r\n(no error)\r\n```\r\ndata_entry = examplemodel(**{'date': datetime.date(2022,2,1), 'reference_date': datetime.date(2019,2,1), 'value': 100000.5000, 'updated': '2017-03-01 15:30'})\r\ndata_entry.save()\r\n```\r\n(same error)\r\n```\r\ndata_entry = examplemodel(**{'date': datetime.date(2022,2,1), 'reference_date': datetime.date(2019,2,1), 'value': 10000.5000, 'updated': '2017-03-01 15:30'})\r\ndata_entry.save()\r\n```\r\n(no error)\r\n\r\nI made a little tweak to base.py in django-pyodbc-azure to help with debugging, printing repr(sql) and repr(params) in execute.\r\n\r\nsql & params for the error condition:\r\n\r\n> 'SET NOCOUNT ON INSERT INTO [examplemodel] ([date], [reference_date], [value], [updated]) VALUES (?, ?, ?, ?); SELECT CAST(SCOPE_IDENTITY() AS bigint)'\r\n> ('2022-02-01', '2019-02-01', '100000.5000', datetime.datetime(2017, 3, 1, 20, 30))\r\n\r\nsql & params for a close, non-error condition:\r\n\r\n> \r\n> 'SET NOCOUNT ON INSERT INTO [examplemodel] ([date], [reference_date], [value], [updated]) VALUES (?, ?, ?, ?); SELECT CAST(SCOPE_IDENTITY() AS bigint)'\r\n> ('2022-03-01', '2019-02-01', '10000.5000', datetime.datetime(2017, 3, 1, 20, 30))\r\n\r\nSince I've been burned with decimal.Decimal and MSSQL before:\r\n\r\n> Decimal(float(131712.5000))\r\n> (ans) Decimal('131712.5')\r\n\r\nThe only inference I seem to be able to make from this is that I need to increase max_digits. However, I do not understand why, the above is 10 digits including the decimal places. The string error is pretty confusing, as there are no strings involved. Maybe pyodbc or django-pyodbc-azure is converting this decimal to a very long string, but I haven't been able to catch it doing that with SQL profiler since the error occurs at binding rather than execution. \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/153", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/153/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/153/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/153/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/153", "id": 306843741, "node_id": "MDU6SXNzdWUzMDY4NDM3NDE=", "number": 153, "title": "FreeTDS datetime/datetime2 support", "user": {"login": "balazs-endresz", "id": 1246848, "node_id": "MDQ6VXNlcjEyNDY4NDg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1246848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/balazs-endresz", "html_url": "https://github.com/balazs-endresz", "followers_url": "https://api.github.com/users/balazs-endresz/followers", "following_url": "https://api.github.com/users/balazs-endresz/following{/other_user}", "gists_url": "https://api.github.com/users/balazs-endresz/gists{/gist_id}", "starred_url": "https://api.github.com/users/balazs-endresz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/balazs-endresz/subscriptions", "organizations_url": "https://api.github.com/users/balazs-endresz/orgs", "repos_url": "https://api.github.com/users/balazs-endresz/repos", "events_url": "https://api.github.com/users/balazs-endresz/events{/privacy}", "received_events_url": "https://api.github.com/users/balazs-endresz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-20T12:26:16Z", "updated_at": "2018-03-21T09:16:53Z", "closed_at": "2018-03-21T09:16:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nMy problem in a nutshell is that I had to remove these lines to get things working:\r\nhttps://github.com/michiya/django-pyodbc-azure/blob/2.0.3.0/sql_server/pyodbc/base.py#L362\r\n\r\nI checked and in fact `datetime2` doesn't get converted to python, however `datetime` does.\r\n\r\nI'm using FreeTDS (`tds version = 8.0`) with SQL Server 2014 on Azure:\r\n\r\n```\r\nMicrosoft SQL Azure (RTM) - 12.0.2000.8 \r\n\tJan 30 2018 18:34:32 \r\n\tCopyright (C) 2017 Microsoft Corporation\r\n```\r\n\r\nSo, even though `datetime2` is not properly supported that doesn't seem to be a problem for me, since we use only `datetime`.\r\n\r\nWould it be possible to _not_ raise an exception upfront for the lack of `datetime2` support? Would maybe just a warning suffice?\r\n\r\nThanks\r\nBalazs", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/152", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/152/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/152/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/152/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/152", "id": 306374099, "node_id": "MDU6SXNzdWUzMDYzNzQwOTk=", "number": 152, "title": "'sql_server.pyodbc' isn't an available database backend", "user": {"login": "encore133", "id": 36755507, "node_id": "MDQ6VXNlcjM2NzU1NTA3", "avatar_url": "https://avatars2.githubusercontent.com/u/36755507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/encore133", "html_url": "https://github.com/encore133", "followers_url": "https://api.github.com/users/encore133/followers", "following_url": "https://api.github.com/users/encore133/following{/other_user}", "gists_url": "https://api.github.com/users/encore133/gists{/gist_id}", "starred_url": "https://api.github.com/users/encore133/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/encore133/subscriptions", "organizations_url": "https://api.github.com/users/encore133/orgs", "repos_url": "https://api.github.com/users/encore133/repos", "events_url": "https://api.github.com/users/encore133/events{/privacy}", "received_events_url": "https://api.github.com/users/encore133/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-03-19T08:44:01Z", "updated_at": "2020-02-27T11:31:38Z", "closed_at": "2018-03-20T05:36:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Tried to use SQL Server as the backend for Django, but I got this when debugging the web project. is there any setting missing here?\r\n\r\n`  File \"C:\\Users\\lenovo\\PycharmProjects\\untitled_django0316\\venv\\lib\\site-packages\\django\\db\\utils.py\", line 125, in load_backend\r\n    ) from e_user\r\ndjango.core.exceptions.ImproperlyConfigured: 'sql_server.pyodbc' isn't an available database backend.\r\nTry using 'django.db.backends.XXX', where XXX is one of:\r\n    'mysql', 'oracle', 'postgresql', 'sqlite3'\r\n`\r\n\r\nHere's the database setting:\r\n`\r\nDATABASES = {                                         \r\n    'default': {                                             \r\n        'ENGINE': 'sql_server.pyodbc',                       \r\n        'NAME': 'django_test',                               \r\n        'USER': 'django_test',                               \r\n        'PASSWORD': 'xxxxxx',                                \r\n        'HOST': 'xx.xx.xx.xx',                              \r\n        'PORT': ''                                           \r\n        }                                                    \r\n    }\r\n`\r\n\r\nHere's the python(3.6.3) environment:\r\nDjango (2.0.3)\r\ndjango-pyodbc-azure (2.0.3.0)\r\npyodbc (4.0.22)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/151", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/151/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/151/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/151", "id": 306051306, "node_id": "MDU6SXNzdWUzMDYwNTEzMDY=", "number": 151, "title": "Invalid Object Name", "user": {"login": "dev-brian", "id": 24846267, "node_id": "MDQ6VXNlcjI0ODQ2MjY3", "avatar_url": "https://avatars2.githubusercontent.com/u/24846267?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dev-brian", "html_url": "https://github.com/dev-brian", "followers_url": "https://api.github.com/users/dev-brian/followers", "following_url": "https://api.github.com/users/dev-brian/following{/other_user}", "gists_url": "https://api.github.com/users/dev-brian/gists{/gist_id}", "starred_url": "https://api.github.com/users/dev-brian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dev-brian/subscriptions", "organizations_url": "https://api.github.com/users/dev-brian/orgs", "repos_url": "https://api.github.com/users/dev-brian/repos", "events_url": "https://api.github.com/users/dev-brian/events{/privacy}", "received_events_url": "https://api.github.com/users/dev-brian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-03-16T19:31:40Z", "updated_at": "2018-03-16T19:35:54Z", "closed_at": "2018-03-16T19:35:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I add a new model in Django and attempt to run `python manage.py makemigrations` SQLServer throws an \"Invalid object name: module_modelname\" error. If I create the table in the database and run makemigrations, it completes but I can't migrate because the object already exists. If I delete the table in the database and run migrate, I get the same invalid object name error. \r\n\r\nSQL Server 12\r\nDjango/django-pyodbc-azuree 2.03", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/150", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/150/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/150/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/150/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/150", "id": 305548045, "node_id": "MDU6SXNzdWUzMDU1NDgwNDU=", "number": 150, "title": "I cant Connect with azure SQL in CentOS 7", "user": {"login": "tximpa91", "id": 10771626, "node_id": "MDQ6VXNlcjEwNzcxNjI2", "avatar_url": "https://avatars0.githubusercontent.com/u/10771626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tximpa91", "html_url": "https://github.com/tximpa91", "followers_url": "https://api.github.com/users/tximpa91/followers", "following_url": "https://api.github.com/users/tximpa91/following{/other_user}", "gists_url": "https://api.github.com/users/tximpa91/gists{/gist_id}", "starred_url": "https://api.github.com/users/tximpa91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tximpa91/subscriptions", "organizations_url": "https://api.github.com/users/tximpa91/orgs", "repos_url": "https://api.github.com/users/tximpa91/repos", "events_url": "https://api.github.com/users/tximpa91/events{/privacy}", "received_events_url": "https://api.github.com/users/tximpa91/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-03-15T13:15:53Z", "updated_at": "2018-03-22T23:14:43Z", "closed_at": "2018-03-22T23:14:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "When i try to write on the database i show me this error \r\nDjango 2.0.3 and Python 3.6.4\r\n('01000', \"[01000] [unixODBC][Driver Manager]Can't open lib 'ODBC Driver 13 for SQL Server' : file not found (0) (SQLDriverConnect)\")\r\n\r\nBut if i try dbshell it Connect perfect and also trying with pyodbc directly \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/142", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/142/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/142/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/142", "id": 296038092, "node_id": "MDU6SXNzdWUyOTYwMzgwOTI=", "number": 142, "title": "Ubuntu + FreeTDS + Django 2.0.1: The database driver doesn't support modern datatime types.", "user": {"login": "Belval", "id": 5399488, "node_id": "MDQ6VXNlcjUzOTk0ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5399488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Belval", "html_url": "https://github.com/Belval", "followers_url": "https://api.github.com/users/Belval/followers", "following_url": "https://api.github.com/users/Belval/following{/other_user}", "gists_url": "https://api.github.com/users/Belval/gists{/gist_id}", "starred_url": "https://api.github.com/users/Belval/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Belval/subscriptions", "organizations_url": "https://api.github.com/users/Belval/orgs", "repos_url": "https://api.github.com/users/Belval/repos", "events_url": "https://api.github.com/users/Belval/events{/privacy}", "received_events_url": "https://api.github.com/users/Belval/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-02-09T22:57:15Z", "updated_at": "2018-11-02T10:37:24Z", "closed_at": "2018-02-27T02:37:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nI installed Django 2.0.1 (and the matching django-pyodbc-azure package) on Ubuntu.\r\n\r\nI am greated with this:\r\n\r\n    File \"/var/www/belval/env/lib/python3.5/site-packages/django/db/backends/base/base.py\", line 255, in cursor\r\n    return self._cursor()\r\n    File \"/var/www/belval/env/lib/python3.5/site-packages/django/db/backends/base/base.py\", line 232, in _cursor\r\n    self.ensure_connection()\r\n    File \"/var/www/belval/env/lib/python3.5/site-packages/django/db/backends/base/base.py\", line 216, in ensure_connection\r\n    self.connect()\r\n    File \"/var/www/belval/env/lib/python3.5/site-packages/django/db/backends/base/base.py\", line 196, in connect\r\n    self.init_connection_state()\r\n    File \"/var/www/belval/env/lib/python3.5/site-packages/sql_server/pyodbc/base.py\", line 359, in init_connection_state\r\n    \"The database driver doesn't support modern datatime types.\")\r\ndjango.core.exceptions.ImproperlyConfigured: The database driver doesn't support modern datatime types.\r\n\r\nEverything worked with Django 1.10.7.\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/139", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/139/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/139/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/139", "id": 294735724, "node_id": "MDU6SXNzdWUyOTQ3MzU3MjQ=", "number": 139, "title": "Why has support for the newest LTS version of Django been removed?", "user": {"login": "beruic", "id": 724716, "node_id": "MDQ6VXNlcjcyNDcxNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/724716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beruic", "html_url": "https://github.com/beruic", "followers_url": "https://api.github.com/users/beruic/followers", "following_url": "https://api.github.com/users/beruic/following{/other_user}", "gists_url": "https://api.github.com/users/beruic/gists{/gist_id}", "starred_url": "https://api.github.com/users/beruic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beruic/subscriptions", "organizations_url": "https://api.github.com/users/beruic/orgs", "repos_url": "https://api.github.com/users/beruic/repos", "events_url": "https://api.github.com/users/beruic/events{/privacy}", "received_events_url": "https://api.github.com/users/beruic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-02-06T12:06:29Z", "updated_at": "2018-02-24T04:01:25Z", "closed_at": "2018-02-24T04:01:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using Django 1.11.10 because it is the newest LTS version, but this seam to mean that I cannot use `django-pyodbc-azure`.\r\n\r\nWhy is the newest LTS version of Django not supported?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/138", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/138/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/138/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/138", "id": 294671443, "node_id": "MDU6SXNzdWUyOTQ2NzE0NDM=", "number": 138, "title": "Uniqueidentifier", "user": {"login": "madthew", "id": 4398576, "node_id": "MDQ6VXNlcjQzOTg1NzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4398576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/madthew", "html_url": "https://github.com/madthew", "followers_url": "https://api.github.com/users/madthew/followers", "following_url": "https://api.github.com/users/madthew/following{/other_user}", "gists_url": "https://api.github.com/users/madthew/gists{/gist_id}", "starred_url": "https://api.github.com/users/madthew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/madthew/subscriptions", "organizations_url": "https://api.github.com/users/madthew/orgs", "repos_url": "https://api.github.com/users/madthew/repos", "events_url": "https://api.github.com/users/madthew/events{/privacy}", "received_events_url": "https://api.github.com/users/madthew/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-06T08:31:14Z", "updated_at": "2018-02-06T08:32:32Z", "closed_at": "2018-02-06T08:32:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any way to use Uniqueidentifiers correctly? \r\n\r\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\r\n\r\ncreates a char(32) and not a uniqueidentifier.\r\n\r\nwould be great if there was some workaround !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/137", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/137/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/137/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/137/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/137", "id": 294601935, "node_id": "MDU6SXNzdWUyOTQ2MDE5MzU=", "number": 137, "title": "Can I set 'isolation_level' as 'READ UNCOMMITTED'?", "user": {"login": "Beomi", "id": 11323660, "node_id": "MDQ6VXNlcjExMzIzNjYw", "avatar_url": "https://avatars2.githubusercontent.com/u/11323660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Beomi", "html_url": "https://github.com/Beomi", "followers_url": "https://api.github.com/users/Beomi/followers", "following_url": "https://api.github.com/users/Beomi/following{/other_user}", "gists_url": "https://api.github.com/users/Beomi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Beomi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Beomi/subscriptions", "organizations_url": "https://api.github.com/users/Beomi/orgs", "repos_url": "https://api.github.com/users/Beomi/repos", "events_url": "https://api.github.com/users/Beomi/events{/privacy}", "received_events_url": "https://api.github.com/users/Beomi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-06T01:33:23Z", "updated_at": "2018-03-10T16:26:01Z", "closed_at": "2018-03-10T16:26:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently I'm working on large-scale Database which should not be 'locked' when read(SELECT) query.\r\n\r\nOn [Django's MySQL option](https://docs.djangoproject.com/en/2.0/ref/databases/#mysql-isolation-level) there is 'isolation_level' option for select isolation level for each db settings.\r\n\r\nCan I use these options for MS-SQL too? like this:\r\n\r\n```python\r\n'MSSQL': {\r\n    'NAME': 'dbname',\r\n    'ENGINE': 'sql_server.pyodbc',\r\n    'HOST': 'ipip',\r\n    'USER': 'user',\r\n    'PASSWORD': 'password1234',\r\n    'OPTIONS': {\r\n        'isolation_level': 'READ UNCOMMITTED', # like this\r\n    },\r\n},\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/136", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/136/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/136/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/136", "id": 293558240, "node_id": "MDU6SXNzdWUyOTM1NTgyNDA=", "number": 136, "title": "django-pyodbc-azure login string not working with MS SQL Server 16", "user": {"login": "eddy-ojb", "id": 26047714, "node_id": "MDQ6VXNlcjI2MDQ3NzE0", "avatar_url": "https://avatars2.githubusercontent.com/u/26047714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddy-ojb", "html_url": "https://github.com/eddy-ojb", "followers_url": "https://api.github.com/users/eddy-ojb/followers", "following_url": "https://api.github.com/users/eddy-ojb/following{/other_user}", "gists_url": "https://api.github.com/users/eddy-ojb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddy-ojb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddy-ojb/subscriptions", "organizations_url": "https://api.github.com/users/eddy-ojb/orgs", "repos_url": "https://api.github.com/users/eddy-ojb/repos", "events_url": "https://api.github.com/users/eddy-ojb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddy-ojb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-01T14:51:07Z", "updated_at": "2019-05-15T16:32:14Z", "closed_at": "2018-02-02T17:03:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am struggling to get this library to communicate with MS SQL Server 16 in Django. I followed the instructions laid out in the documentation and consistently receive an error (see end of post) .\r\n\r\nWe receive this error when using a DSN or username and password combo. We know that the connection works when using pyodbc to connect to the server and database, as we can get it to print out information from it. We also know that the Windows systems ODBC connector is working.\r\n\r\nWhat also appears to work is to use this library with Django and to connect to the database without stating a database name in the 'NAME' variable.\r\n\r\nAgain, we know that the credentials have been setup appropriately in the database since pyodbc can connect by itself.\r\n\r\nIs anyone able to shed any light  on what we might be doing incorrect or lines of enquiry?\r\n\r\nWe are using:\r\nWindows Server 2016 Standard\r\nPython 3.6 (via Anaconda)\r\nDjango-2.0.1\r\npyodbc-4.0.22\r\ndjango_pyodbc_azure-2.0.1.0\r\n\r\nour database string is something like:\r\n\r\nDATABASES = {\r\n    'default': {\r\n        \"ENGINE\": \"sql_server.pyodbc\",\r\n        \"HOST\": \"sql_address\\INST1\",\r\n        \"DSN\" : \"SQL_DEV_13\",\r\n        \"NAME\": \"MDS\",\r\n        'OPTIONS': {\r\n            'driver': 'ODBC Driver 13 for SQL Server'\r\n    }\r\n}\r\n}\r\n\r\nThe error is:\r\n\r\ndjango.db.utils.InterfaceError: ('28000', '[28000] [Microsoft][ODBC Driver 13 for SQL Server][SQL Server]Login failed for user \\'DEV\\\\A2236-3\\'. (18456) (SQLDriverConnect); [28000] [Microsoft][ODBC Driver 13 for SQL Server][SQL Server]Cannot open database \"MDS\" requested by the login. The login failed. (4060); [28000] [Microsoft][ODBC Driver 13 for SQL Server]Invalid connection string attribute (0); [28000] [Microsoft][ODBC Driver 13 for SQL Server][SQL Server]Login failed for user \\'DEV\\\\A2236-3\\'. (18456); [28000] [Microsoft][ODBC Driver 13 for SQL Server][SQL Server]Cannot open database \"MDS\" requested by the login. The login failed. (4060); [28000] [Microsoft][ODBC Driver 13 for SQL Server]Invalid connection string attribute (0)')", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/134", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/134/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/134/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/134", "id": 292334574, "node_id": "MDU6SXNzdWUyOTIzMzQ1NzQ=", "number": 134, "title": "GET Error while call store procedure in python with SQL-server", "user": {"login": "manali0", "id": 20293479, "node_id": "MDQ6VXNlcjIwMjkzNDc5", "avatar_url": "https://avatars0.githubusercontent.com/u/20293479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/manali0", "html_url": "https://github.com/manali0", "followers_url": "https://api.github.com/users/manali0/followers", "following_url": "https://api.github.com/users/manali0/following{/other_user}", "gists_url": "https://api.github.com/users/manali0/gists{/gist_id}", "starred_url": "https://api.github.com/users/manali0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/manali0/subscriptions", "organizations_url": "https://api.github.com/users/manali0/orgs", "repos_url": "https://api.github.com/users/manali0/repos", "events_url": "https://api.github.com/users/manali0/events{/privacy}", "received_events_url": "https://api.github.com/users/manali0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-29T09:21:01Z", "updated_at": "2018-04-03T10:41:20Z", "closed_at": "2018-04-03T10:41:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n\r\n`\r\n\r\ndown votefavorite | try: sql = \"SET NOCOUNT ON;\"\\             \"DECLARE @out int;\"\\             \"DECLARE @timess time;\"\\             \"EXEC [dbo].[VSM_isTradingHour] @date = ?,@isTrading = @out OUTPUT,@timestamp = @timess OUTPUT;\"\\             \"SELECT @out,@timess As the_output;\" cnxn = pypyodbc.connect(\"Trusted_Connection=yes;\"                       \"Driver={SQL Server};\"                       \"Server=SS-88-PC;\"                       \"Database=VirtualShareMarket;\"                       \"UID=sa;PWD=icreate\") cursor = cnxn.cursor() params = ('2018-05-05',) cursor.execute(sql,params) rows= cursor.fetchall() print(rows)\r\n-- | --\r\n\r\n\r\n`\r\n\r\nError:---- %s ('24000', '[24000] [Microsoft][ODBC SQL Server Driver]Invalid cursor state')", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/130", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/130/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/130/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/130", "id": 291028389, "node_id": "MDU6SXNzdWUyOTEwMjgzODk=", "number": 130, "title": "Python 3 support", "user": {"login": "beruic", "id": 724716, "node_id": "MDQ6VXNlcjcyNDcxNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/724716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beruic", "html_url": "https://github.com/beruic", "followers_url": "https://api.github.com/users/beruic/followers", "following_url": "https://api.github.com/users/beruic/following{/other_user}", "gists_url": "https://api.github.com/users/beruic/gists{/gist_id}", "starred_url": "https://api.github.com/users/beruic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beruic/subscriptions", "organizations_url": "https://api.github.com/users/beruic/orgs", "repos_url": "https://api.github.com/users/beruic/repos", "events_url": "https://api.github.com/users/beruic/events{/privacy}", "received_events_url": "https://api.github.com/users/beruic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-23T23:15:40Z", "updated_at": "2018-02-24T03:42:19Z", "closed_at": "2018-02-24T03:42:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "django-pyodbc-azure support Python 3?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/127", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/127/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/127/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/127", "id": 285508283, "node_id": "MDU6SXNzdWUyODU1MDgyODM=", "number": 127, "title": "Can't migrate from PositiveIntegerField to PositiveSmallIntegerField", "user": {"login": "twschiller", "id": 1879821, "node_id": "MDQ6VXNlcjE4Nzk4MjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1879821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twschiller", "html_url": "https://github.com/twschiller", "followers_url": "https://api.github.com/users/twschiller/followers", "following_url": "https://api.github.com/users/twschiller/following{/other_user}", "gists_url": "https://api.github.com/users/twschiller/gists{/gist_id}", "starred_url": "https://api.github.com/users/twschiller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twschiller/subscriptions", "organizations_url": "https://api.github.com/users/twschiller/orgs", "repos_url": "https://api.github.com/users/twschiller/repos", "events_url": "https://api.github.com/users/twschiller/events{/privacy}", "received_events_url": "https://api.github.com/users/twschiller/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-02T18:53:54Z", "updated_at": "2018-04-04T13:13:53Z", "closed_at": "2018-04-04T13:13:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Migration from `PositiveIntegerField` to `PositiveSmallIntegerField` fails on MSSQL because MSSQL refuses to change the column type from `int` to `smallint` due to the positive value constraint.\r\n\r\nA workaround is to migrate from 'PositiveIntegerField' to 'IntegerField' to 'PositiveSmallIntegerField'. This drops the constraint before the migration\r\n\r\nThe migration succeeds on SQLLite and PostgreSQL. I haven't checked to see if the SQL is different for those, or if the DB behavior is different", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/126", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/126/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/126/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/126", "id": 283433462, "node_id": "MDU6SXNzdWUyODM0MzM0NjI=", "number": 126, "title": "Setting A Query Timeout ", "user": {"login": "lorddarkflare", "id": 7071262, "node_id": "MDQ6VXNlcjcwNzEyNjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/7071262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lorddarkflare", "html_url": "https://github.com/lorddarkflare", "followers_url": "https://api.github.com/users/lorddarkflare/followers", "following_url": "https://api.github.com/users/lorddarkflare/following{/other_user}", "gists_url": "https://api.github.com/users/lorddarkflare/gists{/gist_id}", "starred_url": "https://api.github.com/users/lorddarkflare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lorddarkflare/subscriptions", "organizations_url": "https://api.github.com/users/lorddarkflare/orgs", "repos_url": "https://api.github.com/users/lorddarkflare/repos", "events_url": "https://api.github.com/users/lorddarkflare/events{/privacy}", "received_events_url": "https://api.github.com/users/lorddarkflare/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-20T02:51:10Z", "updated_at": "2018-03-10T16:36:23Z", "closed_at": "2018-03-10T16:36:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Based on this post by the author: https://github.com/lionheart/django-pyodbc/issues/18 the connection timeout can be set after the connection is established and this can act as a 'Query Timeout'. \r\n\r\nI have tested this myself with the following snippet:\r\n\r\n\r\n```python\r\nimport pyodbc\r\nimport time\r\n\r\nstart = time.time()\r\ntry:\r\n    conn = pyodbc.connect(\r\n        \"DRIVER=/usr/lib64/libtdsodbc.so.0;\"\r\n        \"SERVER=10.10.10.10;\"\r\n        \"PORT=1433;\"\r\n        \"DATABASE=DEV_SERVER;\"\r\n        \"UID=user;\"\r\n        \"PWD=password;\"\r\n        \"TDS_Version=7.3;\", timeout=1)\r\n    conn.timeout = 1\r\n    cursor = conn.cursor()\r\n    cursor.execute(\"WAITFOR DELAY '00:00:05'\")\r\nexcept:\r\n    raise\r\nfinally:\r\n    stop = time.time()\r\n    print(stop - start)\r\n```\r\n\r\nKnowing this, is there a reason something like this was not implemented in this library? \r\n\r\nI am thinking of working on a PR for a 'query_timeout'. My testing has not showed any issue with this so far.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/125", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/125/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/125/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/125", "id": 281275392, "node_id": "MDU6SXNzdWUyODEyNzUzOTI=", "number": 125, "title": "Project unmaintained?", "user": {"login": "shadiakiki1986", "id": 8392324, "node_id": "MDQ6VXNlcjgzOTIzMjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/8392324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shadiakiki1986", "html_url": "https://github.com/shadiakiki1986", "followers_url": "https://api.github.com/users/shadiakiki1986/followers", "following_url": "https://api.github.com/users/shadiakiki1986/following{/other_user}", "gists_url": "https://api.github.com/users/shadiakiki1986/gists{/gist_id}", "starred_url": "https://api.github.com/users/shadiakiki1986/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shadiakiki1986/subscriptions", "organizations_url": "https://api.github.com/users/shadiakiki1986/orgs", "repos_url": "https://api.github.com/users/shadiakiki1986/repos", "events_url": "https://api.github.com/users/shadiakiki1986/events{/privacy}", "received_events_url": "https://api.github.com/users/shadiakiki1986/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-12-12T06:46:29Z", "updated_at": "2018-02-08T20:17:48Z", "closed_at": "2018-02-08T16:37:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello @michiya \r\nIs this project unmaintained anymore? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/124", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/124/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/124/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/124", "id": 279005114, "node_id": "MDU6SXNzdWUyNzkwMDUxMTQ=", "number": 124, "title": "Django 2.0 Support", "user": {"login": "fredley", "id": 270631, "node_id": "MDQ6VXNlcjI3MDYzMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/270631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fredley", "html_url": "https://github.com/fredley", "followers_url": "https://api.github.com/users/fredley/followers", "following_url": "https://api.github.com/users/fredley/following{/other_user}", "gists_url": "https://api.github.com/users/fredley/gists{/gist_id}", "starred_url": "https://api.github.com/users/fredley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fredley/subscriptions", "organizations_url": "https://api.github.com/users/fredley/orgs", "repos_url": "https://api.github.com/users/fredley/repos", "events_url": "https://api.github.com/users/fredley/events{/privacy}", "received_events_url": "https://api.github.com/users/fredley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-12-04T13:59:04Z", "updated_at": "2019-04-25T13:16:20Z", "closed_at": "2018-02-24T03:43:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Django 2.0 is not supported. Removing the version warning and trying to define pyodbc connections results in:\r\n\r\n```\r\ndjango.core.exceptions.ImproperlyConfigured: 'sql_server.pyodbc' isn't an available database backend.\r\nTry using 'django.db.backends.XXX', where XXX is one of:\r\n    'mysql', 'oracle', 'postgresql', 'sqlite3'\r\n```\r\n\r\nThe Database backend API has changed considerably in Django 2.0:\r\n\r\nhttps://docs.djangoproject.com/en/2.0/releases/2.0/#database-backend-api", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/123", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/123/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/123/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/123", "id": 278668203, "node_id": "MDU6SXNzdWUyNzg2NjgyMDM=", "number": 123, "title": "django.db.utils.ProgrammingError: ('42000', '[42000] [Microsoft][ODBC SQL Server Driver][SQL Server]\u6570\u636e\u7c7b\u578b nvarchar \u548c ntext \u5728 equal to \u8fd0\u7b97\u7b26\u4e2d\u4e0d\u517c\u5bb9\u3002 (402) (SQLExecDirectW); [42000] [Microsoft][ODBC SQL Server Driver][SQL Server]\u65e0\u6cd5\u9884\u5b9a\u4e49\u8bed\u53e5\u3002 (8180)')", "user": {"login": "bcahlit", "id": 16533474, "node_id": "MDQ6VXNlcjE2NTMzNDc0", "avatar_url": "https://avatars1.githubusercontent.com/u/16533474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bcahlit", "html_url": "https://github.com/bcahlit", "followers_url": "https://api.github.com/users/bcahlit/followers", "following_url": "https://api.github.com/users/bcahlit/following{/other_user}", "gists_url": "https://api.github.com/users/bcahlit/gists{/gist_id}", "starred_url": "https://api.github.com/users/bcahlit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bcahlit/subscriptions", "organizations_url": "https://api.github.com/users/bcahlit/orgs", "repos_url": "https://api.github.com/users/bcahlit/repos", "events_url": "https://api.github.com/users/bcahlit/events{/privacy}", "received_events_url": "https://api.github.com/users/bcahlit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-12-02T08:51:12Z", "updated_at": "2020-06-04T16:15:36Z", "closed_at": "2018-07-02T08:08:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Django==1.11.7\r\npyodbc==4.0.21\r\ndjango-pyodbc==1.1.1\r\ndjango-pyodbc-azure==1.11.0.0\r\nMicrosoft sql Server == 2008\r\n\r\nI am trying to use sql server in Django According to Django's tutorial, I created a data model. These errors were encountered while syncing. I tried to search some communities and found no solution available.\r\n\r\nIt has a part of the Chinese translation should be like this:\r\n\r\nData Type nvarchar and ntext are not compatible with equal to operator. (402) (SQLExecDirectW); [42000] [42000] [42000] [ODBC] [Microsoft] [ODBC SQL Server Driver] [SQL Server] Unable to predefine. (8180) ')\r\n\r\n\r\nThis is my error message.\r\n`\r\nD:\\django\\mysite>python manage.py makemigrations polls\r\nMigrations for 'polls':\r\n  polls\\migrations\\0001_initial.py\r\n    - Create model Choice\r\n    - Create model Question\r\n    - Add field question to choice\r\n\r\nD:\\django\\mysite>python manage.py sqlmigrate polls 0001\r\nBEGIN TRANSACTION\r\n--\r\n-- Create model Choice\r\n--\r\nCREATE TABLE [polls_choice] ([id] int IDENTITY (1, 1) NOT NULL PRIMARY KEY, [choice_text] nvarchar(200) NOT NULL, [votes] int NOT NULL);\r\n--\r\n-- Create model Question\r\n--\r\nCREATE TABLE [polls_question] ([id] int IDENTITY (1, 1) NOT NULL PRIMARY KEY, [question_text] nvarchar(200) NOT NULL, [pub_date] datetime NOT NULL);\r\n--\r\n-- Add field question to choice\r\n--\r\nALTER TABLE [polls_choice] ADD [question_id] int NOT NULL;\r\nCREATE INDEX [polls_choice_question_id_c5b4b260] ON [polls_choice] ([question_id]);\r\nALTER TABLE [polls_choice] ADD CONSTRAINT [polls_choice_question_id_c5b4b260_fk_polls_question_id] FOREIGN KEY ([question_id]) REFERENCES [polls_question] ([id]);\r\nCOMMIT;\r\n\r\nD:\\django\\mysite>python manage.py migrate\r\nOperations to perform:\r\n  Apply all migrations: admin, auth, contenttypes, polls, sessions\r\nRunning migrations:\r\n  Applying contenttypes.0002_remove_content_type_name...Traceback (most recent call last):\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 65, in execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\sql_server\\pyodbc\\base.py\", line 545, in execute\r\n    return self.cursor.execute(sql, params)\r\npyodbc.ProgrammingError: ('42000', '[42000] [Microsoft][ODBC SQL Server Driver][SQL Server]\u6570\u636e\u7c7b\u578b nvarchar and ntext \u5728 equal to \u8fd0\u7b97\u7b26\u4e2d\u4e0d\u517c\u5bb9\u3002 (402) (SQLExecDirectW); [42000] [Microsoft][ODBC SQL Server Driver][SQL Server]\u65e0\u6cd5\u9884\u5b9a\u4e49\u8bed\u53e5\u3002 (8180)')\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"manage.py\", line 22, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 364, in execute_from_command_line\r\n    utility.execute()\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 356, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\django\\core\\management\\base.py\", line 283, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\django\\core\\management\\base.py\", line 330, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\django\\core\\management\\commands\\migrate.py\", line 204, in handle\r\n    fake_initial=fake_initial,\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\django\\db\\migrations\\executor.py\", line 115, in migrate\r\n    state = self._migrate_all_forwards(state, plan, full_plan, fake=fake, fake_initial=fake_initial)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\django\\db\\migrations\\executor.py\", line 145, in _migrate_all_forwards\r\n    state = self.apply_migration(state, migration, fake=fake, fake_initial=fake_initial)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\django\\db\\migrations\\executor.py\", line 244, in apply_migration\r\n    state = migration.apply(state, schema_editor)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\django\\db\\migrations\\migration.py\", line 129, in apply\r\n    operation.database_forwards(self.app_label, schema_editor, old_state, project_state)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\django\\db\\migrations\\operations\\fields.py\", line 155, in database_forwards\r\n    schema_editor.remove_field(from_model, from_model._meta.get_field(self.name))\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\sql_server\\pyodbc\\schema.py\", line 655, in remove_field\r\n    constraints = self.connection.introspection.get_constraints(cursor, model._meta.db_table)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\sql_server\\pyodbc\\introspection.py\", line 278, in get_constraints\r\n    \"\"\", [table_name])\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 80, in execute\r\n    return super(CursorDebugWrapper, self).execute(sql, params)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 65, in execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\django\\db\\utils.py\", line 94, in __exit__\r\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\django\\utils\\six.py\", line 685, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 65, in execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\sql_server\\pyodbc\\base.py\", line 545, in execute\r\n    return self.cursor.execute(sql, params)\r\ndjango.db.utils.ProgrammingError: ('42000', '[42000] [Microsoft][ODBC SQL Server Driver][SQL Server]\u6570\u636e\u7c7b\u578b nvarchar \u548c ntext \u5728 equal to \u8fd0\u7b97\u7b26\u4e2d\u4e0d\u517c\u5bb9\u3002 (402) (SQLExecDirectW); [42000] [Microsoft][ODBC SQL Server Driver][SQL Server]\u65e0\u6cd5\u9884\u5b9a\u4e49\u8bed\u53e5\u3002 (8180)')\r\n`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/117", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/117/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/117/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/117", "id": 270679901, "node_id": "MDU6SXNzdWUyNzA2Nzk5MDE=", "number": 117, "title": "Cannot connect django 1.11.6 to MS SQL Server", "user": {"login": "jingwei218", "id": 16593093, "node_id": "MDQ6VXNlcjE2NTkzMDkz", "avatar_url": "https://avatars0.githubusercontent.com/u/16593093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jingwei218", "html_url": "https://github.com/jingwei218", "followers_url": "https://api.github.com/users/jingwei218/followers", "following_url": "https://api.github.com/users/jingwei218/following{/other_user}", "gists_url": "https://api.github.com/users/jingwei218/gists{/gist_id}", "starred_url": "https://api.github.com/users/jingwei218/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jingwei218/subscriptions", "organizations_url": "https://api.github.com/users/jingwei218/orgs", "repos_url": "https://api.github.com/users/jingwei218/repos", "events_url": "https://api.github.com/users/jingwei218/events{/privacy}", "received_events_url": "https://api.github.com/users/jingwei218/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-02T14:45:22Z", "updated_at": "2018-03-17T13:38:36Z", "closed_at": "2018-03-17T13:38:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n\r\nI am working on a django app which needs to connect to MS SQL Server 2008. I use django-pyodbc-azure backend.\r\n\r\nEnvironment:\r\n\r\n    Ubuntu 16.04\r\n    Apache 2.4\r\n    python 3.5.2\r\n    django 1.11.6\r\n    django-pyodbc 1.1.1\r\n    django-pyodbc-azure 1.11.0.0\r\n\r\nI have also installed dependents: unixodbc unixodbc-dev tdsodbc freetds-dev\r\n\r\nIn /etc/freetds/freetds.conf:\r\n\r\n    [sqlserver]  \r\n        host = mysqlserverhost.com\r\n        port = 6789\r\n        tds version = 8.0\r\n\r\nIn /etc/odbc.ini:\r\n\r\n    [sqlserverdatasource]\r\n    Driver = FreeTDS\r\n    Description = ODBC connection via FreeTDS\r\n    Servername = sqlserver\r\n    Database = test\r\n    TDS_Version = 8.0\r\n\r\nIn /etc/odbcinst.ini:\r\n\r\n    [ODBC]\r\n    Trace = Yes\r\n    TraceFile = /tmp/odbc.log\r\n\r\n    [FreeTDS]\r\n    Description = TDS driver (Sybase/MS SQL)\r\n    Driver = /usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so\r\n    Setup = /usr/lib/x86_64-linux-gnu/odbc/libtdsS.so\r\n    CPTimeout =\r\n    CPReuse =\r\n    FileUsage = 1\r\n\r\nThen I tested the connection with the following.\r\n\r\n    import pyodbc\r\n    db = pyodbc.connect('DRIVER={FreeTDS};SERVER=mysqlserverhost.com,6789;DATABASE=test;UID=admin;PWD=password;TDS_Version=8.0')\r\n    cursor = db.cursor()\r\n    cursor.execute(\"SELECT @@version;\")\r\n    row = cursor.fetchone()\r\n    while row:\r\n        print(row[0])\r\n        row = cursor.fetchone()\r\n\r\nI could see the version of SQL Server from the above codes.\r\n\r\n    Microsoft SQL Server 2008 R2 (RTM) - 10.50.1600.1 (X64) \r\n    Apr  2 2010 15:48:46 \r\n    Copyright (c) Microsoft Corporation\r\n    Enterprise Edition (64-bit) on Windows NT 6.2 <X64> (Build 9200: )\r\n\r\nIn django projects settings.py, I configured the database backend.\r\n\r\n    DATABASES = {\r\n        'default': {\r\n            'ENGINE': 'sql_server.pyodbc',\r\n            'NAME': 'test',\r\n            'USER': 'admin',\r\n            'PASSWORD': 'password',\r\n            'HOST': 'mysqlserverhost.com',\r\n            'PORT': '6789',\r\n            'OPTIONS': {\r\n                'driver': 'FreeTDS',\r\n            },\r\n        }\r\n    }\r\n\r\nHowever, when I opened my app page and saw the below error.\r\n\r\n    File \"/usr/local/lib/python3.5/dist-packages/sql_server/pyodbc/base.py\" in get_new_connection\r\n    309.                                         timeout=timeout)\r\n    Exception Type: OperationalError at /myapp/\r\n    Exception Value: ('08001', '[08001] [unixODBC][FreeTDS][SQL Server]Unable to connect to data source (0) (SQLDriverConnect)')\r\n\r\nIs there anything wrong in my settings?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/113", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/113/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/113/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/113", "id": 268596678, "node_id": "MDU6SXNzdWUyNjg1OTY2Nzg=", "number": 113, "title": "Select for Update improvement", "user": {"login": "guifran001", "id": 28606462, "node_id": "MDQ6VXNlcjI4NjA2NDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/28606462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guifran001", "html_url": "https://github.com/guifran001", "followers_url": "https://api.github.com/users/guifran001/followers", "following_url": "https://api.github.com/users/guifran001/following{/other_user}", "gists_url": "https://api.github.com/users/guifran001/gists{/gist_id}", "starred_url": "https://api.github.com/users/guifran001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guifran001/subscriptions", "organizations_url": "https://api.github.com/users/guifran001/orgs", "repos_url": "https://api.github.com/users/guifran001/repos", "events_url": "https://api.github.com/users/guifran001/events{/privacy}", "received_events_url": "https://api.github.com/users/guifran001/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-10-26T00:59:54Z", "updated_at": "2018-01-29T13:58:49Z", "closed_at": "2018-01-29T13:58:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have in our project a few select_for_update() that were blocking each other even though the rows were mutually exclusive.\r\n\r\nAfter a bit of investigation, we found out that the query optimizer will scan the table instead of seeking it by index for small tables. By scanning it, it will lock all the row it scans even if they are not part of the `SELECT` statement.\r\nThe way to avoid that is to add 'FORCESEEK' within the `WITH` hint. It has no drawback, but can help concurrent select_for_update with mutually exclusive rows that don't block themself.\r\n\r\nAlso, after investigation, I think the expected `skip_locked` behavior needs `READPAST` instead of `NOLOCK`.\r\n\r\nProposed version (I will submit a pr):\r\n\r\n```\r\ndef for_update_sql(self, nowait=False, skip_locked=False):\r\n        \"\"\"\r\n        Returns the FOR UPDATE SQL clause to lock rows for an update operation.\r\n        \"\"\"\r\n        if skip_locked:\r\n            return 'WITH (ROWLOCK, UPDLOCK, READPAST, FORCESEEK)'\r\n        elif nowait:\r\n            return 'WITH (NOWAIT, ROWLOCK, UPDLOCK, FORCESEEK)'\r\n        else:\r\n            return 'WITH (ROWLOCK, UPDLOCK, FORCESEEK)'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/109", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/109/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/109/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/109", "id": 254359141, "node_id": "MDU6SXNzdWUyNTQzNTkxNDE=", "number": 109, "title": "Drop support for SQL Server 2005 (DATETIME column type) for Django 2.0?", "user": {"login": "FlipperPA", "id": 68164, "node_id": "MDQ6VXNlcjY4MTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/68164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FlipperPA", "html_url": "https://github.com/FlipperPA", "followers_url": "https://api.github.com/users/FlipperPA/followers", "following_url": "https://api.github.com/users/FlipperPA/following{/other_user}", "gists_url": "https://api.github.com/users/FlipperPA/gists{/gist_id}", "starred_url": "https://api.github.com/users/FlipperPA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FlipperPA/subscriptions", "organizations_url": "https://api.github.com/users/FlipperPA/orgs", "repos_url": "https://api.github.com/users/FlipperPA/repos", "events_url": "https://api.github.com/users/FlipperPA/events{/privacy}", "received_events_url": "https://api.github.com/users/FlipperPA/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-31T14:42:06Z", "updated_at": "2018-01-29T01:05:49Z", "closed_at": "2018-01-29T01:05:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is discussion about switching exclusively to microsecond timestamps on the Django developers list. Since the microsecond accurate (actually, 100ns accurate!) `DATETIME2` and the stand alone `DATE` were introduced in SQL Server 2008, it might be time to consider dropping support for SQL Server 2005 and the less granular `DATETIME`. SQL Server 2005's extended support ended in April, 2016, so it no longer receives security releases or bug fixes. It would also simplify the code base of `django-pyodbc-azure` to drop 2005 support. You can see the discussion here, for reference:\r\n\r\nhttps://groups.google.com/forum/#!topic/django-developers/XXqGQH6BSpY", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/105", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/105/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/105/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/105", "id": 248539929, "node_id": "MDU6SXNzdWUyNDg1Mzk5Mjk=", "number": 105, "title": "DB connection hangs with regular intervals", "user": {"login": "Belval", "id": 5399488, "node_id": "MDQ6VXNlcjUzOTk0ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5399488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Belval", "html_url": "https://github.com/Belval", "followers_url": "https://api.github.com/users/Belval/followers", "following_url": "https://api.github.com/users/Belval/following{/other_user}", "gists_url": "https://api.github.com/users/Belval/gists{/gist_id}", "starred_url": "https://api.github.com/users/Belval/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Belval/subscriptions", "organizations_url": "https://api.github.com/users/Belval/orgs", "repos_url": "https://api.github.com/users/Belval/repos", "events_url": "https://api.github.com/users/Belval/events{/privacy}", "received_events_url": "https://api.github.com/users/Belval/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-07T21:43:05Z", "updated_at": "2017-08-11T00:37:37Z", "closed_at": "2017-08-11T00:37:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using Nginx + Gunicorn + Django 1.10.7 for the web.\r\nI am using django-pyodbc-azure + pyodbc + unixodbc + freetds to connect to my database which is MS SQL Server 2016.\r\n\r\nThe reason I am opening an issue is because the duration of the \"hanging\" moments are regular. They either last:\r\n\r\n- 3 seconds\r\n- 9 seconds\r\n- 30 seconds\r\n- 40 seconds\r\n- Indefinitely\r\n\r\nThose intervals were observed accross many requests and were always the same \u00b120ms.\r\n\r\nMy django-pyodbc-azure settings are:\r\n\r\n- AUTOCOMMIT explicitly set to True\r\n- DATABASE_CONNECTION_POOLING set to False\r\n\r\nMy gunicorn settings are:\r\n\r\n- 8 concurrent workers\r\n- max-requests 4 or 10 (both yield similar results)\r\n\r\nRemoving max requests to avoid recycling Gunicorn's workers did not change anything.\r\n\r\nSome requests use django.db.connection.close() to avoid forking the db conmection when using Python's multiprocessing pool.\r\n\r\nThe function called in the pool doesn't use the DB.\r\n\r\nThe SQL Server instance (on another machine) is stable an d works in SQL Management Studio while the hang occurs even if the hanging never stops.\r\n\r\nTwo request made at the same time are not guaranteed to get the same amount of hanging. If the hanging is indefinite, the request will never return until a timeout occurs.\r\n\r\nThe requests made to the DB range from opening a cursor to SELECTing over 10 000 rows. The latter shows a higher probability of indefinite hanging but some were observed after opening a cursor.\r\n\r\nFew errors are thrown, but I sporadically receive \"Read from server failed\" and \"Cursor's connection closed\"\r\n\r\nAny help is appreciated, I will update the issue with config and sample code as soon as I can.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/103", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/103/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/103/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/103", "id": 244457382, "node_id": "MDU6SXNzdWUyNDQ0NTczODI=", "number": 103, "title": "Error with django 1.8.3", "user": {"login": "cheves505", "id": 13157631, "node_id": "MDQ6VXNlcjEzMTU3NjMx", "avatar_url": "https://avatars2.githubusercontent.com/u/13157631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cheves505", "html_url": "https://github.com/cheves505", "followers_url": "https://api.github.com/users/cheves505/followers", "following_url": "https://api.github.com/users/cheves505/following{/other_user}", "gists_url": "https://api.github.com/users/cheves505/gists{/gist_id}", "starred_url": "https://api.github.com/users/cheves505/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cheves505/subscriptions", "organizations_url": "https://api.github.com/users/cheves505/orgs", "repos_url": "https://api.github.com/users/cheves505/repos", "events_url": "https://api.github.com/users/cheves505/events{/privacy}", "received_events_url": "https://api.github.com/users/cheves505/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-07-20T18:35:04Z", "updated_at": "2018-01-29T15:04:39Z", "closed_at": "2017-08-04T16:01:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just trying to run my project and i get this error\r\n\r\ndjango.db.utils.ProgrammingError: ('42S02', \"[42S02] [Microsoft][ODBC SQL Server Driver][SQL Server]Invalid object name 'django_migrations'. (208) (SQLExecDirectW)\")\r\n\r\nmy config is \r\n\r\nDATABASES = { \r\n    'default': { \r\n        'NAME': 'intrack',   \r\n        'ENGINE': 'sql_server.pyodbc', \r\n        'HOST': 'DESKTOP-4LF50CB',  \r\n        'USER': 'sa', #usuario de autenticacion SQL \r\n        'PASSWORD': 'passwordofdb', \r\n        'OPTIONS':{ \r\n            'unicode_results':True, \r\n            'extra_params': 'ClientCharset=utf8', \r\n             'driver': 'SQL Server',\r\n        } \r\n    } \r\n}\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/96", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/96/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/96/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/96", "id": 230850442, "node_id": "MDU6SXNzdWUyMzA4NTA0NDI=", "number": 96, "title": "Login timeout expired error HYT00", "user": {"login": "sdygert", "id": 7122830, "node_id": "MDQ6VXNlcjcxMjI4MzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/7122830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdygert", "html_url": "https://github.com/sdygert", "followers_url": "https://api.github.com/users/sdygert/followers", "following_url": "https://api.github.com/users/sdygert/following{/other_user}", "gists_url": "https://api.github.com/users/sdygert/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdygert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdygert/subscriptions", "organizations_url": "https://api.github.com/users/sdygert/orgs", "repos_url": "https://api.github.com/users/sdygert/repos", "events_url": "https://api.github.com/users/sdygert/events{/privacy}", "received_events_url": "https://api.github.com/users/sdygert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-05-23T21:20:15Z", "updated_at": "2017-10-18T08:01:22Z", "closed_at": "2017-05-23T21:50:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to connect with `python3 manage.py inspectdb` I receive the following error:\r\n\r\n```\r\ndjango.db.utils.OperationalError: ('HYT00', '[HYT00] [unixODBC][Microsoft][ODBC Driver 11 for SQL Server]Login timeout expired (0) (SQLDriverConnect)')\r\n```\r\n\r\nI can change/empty the user/password fields in my DATABASES in settings.py and I still get the same error.\r\n\r\nMy settings.py: \r\n\r\n```\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'sql_server.pyodbc',\r\n        'NAME': 'tablename',\r\n        'USER': 'myusername',\r\n        'PASSWORD': 'mypassword',\r\n        'OPTIONS': {\r\n            'driver': 'ODBC Driver 11 for SQL Server',\r\n            'DSN': 'mydsn',\r\n        },\r\n    },\r\n}\r\n```\r\n\r\nI can connect using pyodbc and get the correct response.\r\n\r\n```\r\nimport pyodbc\r\n\r\ncnxn = pyodbc.connect('DSN=mydsn;DATABASE=tablename;UID=myusername;PWD=mypassword')\r\ncursor = cnxn.cursor()\r\n\r\ncursor.execute(\"SELECT * FROM tablename WHERE pk='1'\")\r\nfor row in cursor.fetchall():\r\n    print(row)`\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/93", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/93/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/93/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/93", "id": 225585970, "node_id": "MDU6SXNzdWUyMjU1ODU5NzA=", "number": 93, "title": "Whys does DateField result in datetime column?", "user": {"login": "unformatt", "id": 157132, "node_id": "MDQ6VXNlcjE1NzEzMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/157132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unformatt", "html_url": "https://github.com/unformatt", "followers_url": "https://api.github.com/users/unformatt/followers", "following_url": "https://api.github.com/users/unformatt/following{/other_user}", "gists_url": "https://api.github.com/users/unformatt/gists{/gist_id}", "starred_url": "https://api.github.com/users/unformatt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unformatt/subscriptions", "organizations_url": "https://api.github.com/users/unformatt/orgs", "repos_url": "https://api.github.com/users/unformatt/repos", "events_url": "https://api.github.com/users/unformatt/events{/privacy}", "received_events_url": "https://api.github.com/users/unformatt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-05-02T04:09:04Z", "updated_at": "2017-05-04T18:52:17Z", "closed_at": "2017-05-04T18:52:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "My model has a DateField, like so:\r\n\r\n`timestamp = models.DateField()`\r\n\r\nI create and run migrations, I end up with a `datetime` column rather than `date`. This has never been a problem since, somehow, Django is always given a python `date` for that field even though the column is datetime. e.g.\r\n\r\n```\r\n>>> SP.objects.all()[0].timestamp\r\ndatetime.date(2017, 5, 2)\r\n```\r\n\r\nI'm using unixodbc/freetds on Ubuntu 16. My driver is set to `/usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so`\r\n\r\nWhat's interesting is I was testing with Microsoft's Linux ODBC driver (set Driver to `/opt/microsoft/msodbcsql/lib64/libmsodbcsql-13.1.so.6.0`). If I do that and recreate my DB, then the migration creates a `date` column. (Note that the migration code is exactly the same)\r\n\r\nTo make this even more confusing, if I run the migration on Windows (so that neither unixodbc/freetds or MS's Linux odbc driver is involved) using MS's Windows ODBC Driver, I get a `datetime` column. So somehow, it's ok to have a `datetime` column for a DateField, it hasn't caused me problems until now.\r\n\r\nWhy does this all matter?\r\n\r\nThe problem is that I have database that was created via unixodbc/freetds. When I try to connect to that database from Linux using MS's Linux ODBC driver, the models returns a python datetime rather than date and this causes Exceptions in code that's already written and expects a python date. For example:\r\n\r\nWith unixodbc/freetds:\r\n```\r\n>>> SP.objects.all()[0].timestamp\r\ndatetime.date(2017, 5, 2)\r\n```\r\n\r\nSame exact database but accessed with MS's Linux driver:\r\n\r\n```\r\n>>> SP.objects.all()[0].timestamp\r\ndatetime.datetime(2017, 5, 2, 0, 0)\r\n```\r\n\r\nAny idea what is going on far beneath the surface?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/92", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/92/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/92/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/92", "id": 224483256, "node_id": "MDU6SXNzdWUyMjQ0ODMyNTY=", "number": 92, "title": "Error 42000 when switching primary key field with incoming foreign keys", "user": {"login": "OskarPersson", "id": 935414, "node_id": "MDQ6VXNlcjkzNTQxNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/935414?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OskarPersson", "html_url": "https://github.com/OskarPersson", "followers_url": "https://api.github.com/users/OskarPersson/followers", "following_url": "https://api.github.com/users/OskarPersson/following{/other_user}", "gists_url": "https://api.github.com/users/OskarPersson/gists{/gist_id}", "starred_url": "https://api.github.com/users/OskarPersson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OskarPersson/subscriptions", "organizations_url": "https://api.github.com/users/OskarPersson/orgs", "repos_url": "https://api.github.com/users/OskarPersson/repos", "events_url": "https://api.github.com/users/OskarPersson/events{/privacy}", "received_events_url": "https://api.github.com/users/OskarPersson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-04-26T14:15:44Z", "updated_at": "2018-04-04T16:23:57Z", "closed_at": "2018-04-04T16:23:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "In one of my models I want to switch the primary key from one field to another and delete the old field:\r\n\r\n```\r\nclass eventType(models.Model):\r\n    - id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\r\n    - eventType = models.IntegerField(primary_key=True, default=0)\r\n    + eventType = models.IntegerField(default=0, unique=True)\r\n```\r\n\r\nThis generates this migration:\r\n\r\n```\r\nclass Migration(migrations.Migration):\r\n\r\n    operations = [\r\n        migrations.RemoveField(\r\n            model_name='eventtype',\r\n            name='id',\r\n        ),\r\n        migrations.AlterField(\r\n            model_name='eventtype',\r\n            name='eventType',\r\n            field=models.IntegerField(default=0, primary_key=True, serialize=False),\r\n        ),\r\n    ]\r\n```\r\n\r\nWhen it gets to the second operation (the `AlterField`) it stops with the following error\r\n\r\n```\r\nRunning migrations:\r\n  Applying configuration.0004_auto_20170215_1516...Traceback (most recent call last):\r\n  File \"manage.py\", line 35, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"C:\\Users\\Administrator\\Envs\\epp\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 367, in execute_from_command_line\r\n    utility.execute()\r\n  File \"C:\\Users\\Administrator\\Envs\\epp\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 359, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"C:\\Users\\Administrator\\Envs\\epp\\lib\\site-packages\\django\\core\\management\\base.py\", line 294, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"C:\\Users\\Administrator\\Envs\\epp\\lib\\site-packages\\django\\core\\management\\base.py\", line 345, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"C:\\Users\\Administrator\\Envs\\epp\\lib\\site-packages\\django\\core\\management\\commands\\migrate.py\", line 204, in handle\r\n    fake_initial=fake_initial,\r\n  File \"C:\\Users\\Administrator\\Envs\\epp\\lib\\site-packages\\django\\db\\migrations\\executor.py\", line 115, in migrate\r\n    state = self._migrate_all_forwards(state, plan, full_plan, fake=fake, fake_initial=fake_initial)\r\n  File \"C:\\Users\\Administrator\\Envs\\epp\\lib\\site-packages\\django\\db\\migrations\\executor.py\", line 145, in _migrate_all_forwards\r\n    state = self.apply_migration(state, migration, fake=fake, fake_initial=fake_initial)\r\n  File \"C:\\Users\\Administrator\\Envs\\epp\\lib\\site-packages\\django\\db\\migrations\\executor.py\", line 244, in apply_migration\r\n    state = migration.apply(state, schema_editor)\r\n  File \"C:\\Users\\Administrator\\Envs\\epp\\lib\\site-packages\\django\\db\\migrations\\migration.py\", line 129, in apply\r\n    operation.database_forwards(self.app_label, schema_editor, old_state, project_state)\r\n  File \"C:\\Users\\Administrator\\Envs\\epp\\lib\\site-packages\\django\\db\\migrations\\operations\\fields.py\", line 204, in database_forwards\r\n    schema_editor.alter_field(from_model, from_field, to_field)\r\n  File \"C:\\Users\\Administrator\\Envs\\epp\\lib\\site-packages\\django\\db\\backends\\base\\schema.py\", line 495, in alter_field\r\n    old_db_params, new_db_params, strict)\r\n  File \"C:\\Users\\Administrator\\Envs\\epp\\lib\\site-packages\\sql_server\\pyodbc\\schema.py\", line 318, in _alter_field\r\n    fragment[1],\r\n  File \"C:\\Users\\Administrator\\Envs\\epp\\lib\\site-packages\\sql_server\\pyodbc\\schema.py\", line 585, in execute\r\n    cursor.execute(sql, params)\r\n  File \"C:\\Users\\Administrator\\Envs\\epp\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 79, in execute\r\n    return super(CursorDebugWrapper, self).execute(sql, params)\r\n  File \"C:\\Users\\Administrator\\Envs\\epp\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 64, in execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"C:\\Users\\Administrator\\Envs\\epp\\lib\\site-packages\\django\\db\\utils.py\", line 94, in __exit__\r\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\r\n  File \"C:\\Users\\Administrator\\Envs\\epp\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 64, in execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"C:\\Users\\Administrator\\Envs\\epp\\lib\\site-packages\\sql_server\\pyodbc\\base.py\", line 539, in execute\r\n    return self.cursor.execute(sql, params)\r\ndjango.db.utils.ProgrammingError: ('42000', \"[42000] [Microsoft][ODBC SQL Server Driver][SQL Server]The index 'event_event_eventType_id_9db75281_uniq' is dependent on column 'eventType_id'.(5074) (SQLExecDirectW); [42000] [Microsoft][ODBC SQL Server Driver][SQL Server]ALTER TABLE ALTER COLUMN eventType_id failed because one or more objects access this column. (4922)\")\r\n```\r\n\r\nThe model referenced in the error looks like this\r\n\r\n```\r\nclass event(models.Model):\r\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\r\n    eventType = models.ForeignKey(\r\n        'configuration.EventType',\r\n        on_delete=models.CASCADE\r\n    )\r\n```\r\n\r\n---\r\n\r\nI am running SQL Server 2016 (version 13.0.4001.0) on Windows Server 2012 R2 Standard\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/91", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/91/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/91/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/91", "id": 219403675, "node_id": "MDU6SXNzdWUyMTk0MDM2NzU=", "number": 91, "title": "Support for django 1.11", "user": {"login": "LegoStormtroopr", "id": 2173174, "node_id": "MDQ6VXNlcjIxNzMxNzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2173174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LegoStormtroopr", "html_url": "https://github.com/LegoStormtroopr", "followers_url": "https://api.github.com/users/LegoStormtroopr/followers", "following_url": "https://api.github.com/users/LegoStormtroopr/following{/other_user}", "gists_url": "https://api.github.com/users/LegoStormtroopr/gists{/gist_id}", "starred_url": "https://api.github.com/users/LegoStormtroopr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LegoStormtroopr/subscriptions", "organizations_url": "https://api.github.com/users/LegoStormtroopr/orgs", "repos_url": "https://api.github.com/users/LegoStormtroopr/repos", "events_url": "https://api.github.com/users/LegoStormtroopr/events{/privacy}", "received_events_url": "https://api.github.com/users/LegoStormtroopr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-04-04T22:27:09Z", "updated_at": "2018-02-08T15:57:49Z", "closed_at": "2018-02-08T15:57:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "[Django 1.11 is now out](https://www.djangoproject.com/weblog/2017/apr/04/django-111-released/), is there a timeframe for support?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/89", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/89/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/89/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/89", "id": 217682675, "node_id": "MDU6SXNzdWUyMTc2ODI2NzU=", "number": 89, "title": "DB connection string", "user": {"login": "rosiecakes", "id": 5151675, "node_id": "MDQ6VXNlcjUxNTE2NzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5151675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rosiecakes", "html_url": "https://github.com/rosiecakes", "followers_url": "https://api.github.com/users/rosiecakes/followers", "following_url": "https://api.github.com/users/rosiecakes/following{/other_user}", "gists_url": "https://api.github.com/users/rosiecakes/gists{/gist_id}", "starred_url": "https://api.github.com/users/rosiecakes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rosiecakes/subscriptions", "organizations_url": "https://api.github.com/users/rosiecakes/orgs", "repos_url": "https://api.github.com/users/rosiecakes/repos", "events_url": "https://api.github.com/users/rosiecakes/events{/privacy}", "received_events_url": "https://api.github.com/users/rosiecakes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-28T20:28:45Z", "updated_at": "2017-03-29T12:53:12Z", "closed_at": "2017-03-29T12:53:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! First off thanks for maintaining this, it's the only thing I got to work with Django & our legacy db environment and it works well. \r\n\r\nI'm looking to implement django-environ for production and with what I've read about it so far (admittedly not too much) it uses a URL for the db connection. Could you help me figure out what the syntax would be for this? I have tried every combination I could come up with and read [here](https://github.com/mkleehammer/pyodbc/wiki/Connection) and [here](https://gist.github.com/rduplain/1293636) among many, many others, and I'm sure I'm just missing something about this implementation. \r\n\r\n> Django==1.10.5\r\n> django-pyodbc-azure==1.10.4.0\r\n> pyodbc==4.0.1\r\n\r\n```\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': \"sql_server.pyodbc\",\r\n        'HOST': \"<machine ip>,1433\",\r\n        'USER': \"domain\\user\",\r\n        'PASSWORD': \"password\",\r\n        'NAME': \"dbname\",\r\n        'OPTIONS': {\r\n           'host_is_server': True\r\n        }\r\n    }\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/82", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/82/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/82/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/82", "id": 203271265, "node_id": "MDU6SXNzdWUyMDMyNzEyNjU=", "number": 82, "title": "Support WITH (NOLOCK)", "user": {"login": "chris-nlnz", "id": 3159088, "node_id": "MDQ6VXNlcjMxNTkwODg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3159088?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-nlnz", "html_url": "https://github.com/chris-nlnz", "followers_url": "https://api.github.com/users/chris-nlnz/followers", "following_url": "https://api.github.com/users/chris-nlnz/following{/other_user}", "gists_url": "https://api.github.com/users/chris-nlnz/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-nlnz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-nlnz/subscriptions", "organizations_url": "https://api.github.com/users/chris-nlnz/orgs", "repos_url": "https://api.github.com/users/chris-nlnz/repos", "events_url": "https://api.github.com/users/chris-nlnz/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-nlnz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-26T01:28:33Z", "updated_at": "2018-07-11T11:20:02Z", "closed_at": "2018-03-10T16:29:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been asked to implement our application so any `SELECT` queries will be done with the `WITH (NOLOCK)` setting (i.e. `SELECT * FROM [TableName] WITH (NOLOCK);`).  \r\n\r\nI couldn't find any support for this in django-pyodbc-azure, and couldn't find this functionality being discussed anywhere.  \r\n\r\nFor our own purposes I'll create a fork of this repo where we can use `WITH (NOLOCK)`. Would you be interested in a pull request with this functionality?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/81", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/81/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/81/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/81", "id": 194454926, "node_id": "MDU6SXNzdWUxOTQ0NTQ5MjY=", "number": 81, "title": "Add Support for SQL Server vNext", "user": {"login": "csucla2015", "id": 3676120, "node_id": "MDQ6VXNlcjM2NzYxMjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3676120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csucla2015", "html_url": "https://github.com/csucla2015", "followers_url": "https://api.github.com/users/csucla2015/followers", "following_url": "https://api.github.com/users/csucla2015/following{/other_user}", "gists_url": "https://api.github.com/users/csucla2015/gists{/gist_id}", "starred_url": "https://api.github.com/users/csucla2015/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csucla2015/subscriptions", "organizations_url": "https://api.github.com/users/csucla2015/orgs", "repos_url": "https://api.github.com/users/csucla2015/repos", "events_url": "https://api.github.com/users/csucla2015/events{/privacy}", "received_events_url": "https://api.github.com/users/csucla2015/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-12-08T21:54:58Z", "updated_at": "2017-01-05T10:05:58Z", "closed_at": "2017-01-05T10:05:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "SQL Server vNext is using v14.x. Check out the getting started guide here: https://www.microsoft.com/en-us/sql-server/developer-get-started/python-ubuntu\r\n\r\nCan we add support for v14 in base.py? https://www.microsoft.com/en-us/sql-server/developer-get-started/python-ubuntu \r\n\r\nThanks \ud83d\udc4d \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/80", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/80/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/80/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/80", "id": 194434137, "node_id": "MDU6SXNzdWUxOTQ0MzQxMzc=", "number": 80, "title": "Query for version on every request", "user": {"login": "aergener", "id": 5935200, "node_id": "MDQ6VXNlcjU5MzUyMDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5935200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aergener", "html_url": "https://github.com/aergener", "followers_url": "https://api.github.com/users/aergener/followers", "following_url": "https://api.github.com/users/aergener/following{/other_user}", "gists_url": "https://api.github.com/users/aergener/gists{/gist_id}", "starred_url": "https://api.github.com/users/aergener/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aergener/subscriptions", "organizations_url": "https://api.github.com/users/aergener/orgs", "repos_url": "https://api.github.com/users/aergener/repos", "events_url": "https://api.github.com/users/aergener/events{/privacy}", "received_events_url": "https://api.github.com/users/aergener/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-12-08T20:19:22Z", "updated_at": "2018-01-30T00:13:23Z", "closed_at": "2018-01-30T00:13:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to switch to `django-pyodbc-azure`, but I noticed that on every request this SQL command is executed, which is causing a lot of additional latency:\r\n\r\n`QUERY = \"SELECT CAST(SERVERPROPERTY('ProductVersion') AS varchar)\"`\r\n\r\nLooks like it is due to this portion of the code: https://github.com/michiya/django-pyodbc-azure/blob/azure-1.10/sql_server/pyodbc/base.py#L390\r\n\r\nIs this the expected behavior? If so, is there a way to change this, or set the value ahead of time?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/78", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/78/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/78/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/78", "id": 189929154, "node_id": "MDU6SXNzdWUxODk5MjkxNTQ=", "number": 78, "title": "Order_by datefield desc issue", "user": {"login": "LegoStormtroopr", "id": 2173174, "node_id": "MDQ6VXNlcjIxNzMxNzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2173174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LegoStormtroopr", "html_url": "https://github.com/LegoStormtroopr", "followers_url": "https://api.github.com/users/LegoStormtroopr/followers", "following_url": "https://api.github.com/users/LegoStormtroopr/following{/other_user}", "gists_url": "https://api.github.com/users/LegoStormtroopr/gists{/gist_id}", "starred_url": "https://api.github.com/users/LegoStormtroopr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LegoStormtroopr/subscriptions", "organizations_url": "https://api.github.com/users/LegoStormtroopr/orgs", "repos_url": "https://api.github.com/users/LegoStormtroopr/repos", "events_url": "https://api.github.com/users/LegoStormtroopr/events{/privacy}", "received_events_url": "https://api.github.com/users/LegoStormtroopr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-17T03:51:53Z", "updated_at": "2016-11-17T04:28:48Z", "closed_at": "2016-11-17T04:28:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm having a weird issue where MSSQL dates are coming our in reverse order compared to postgres and sqllite when doing the same query. Is that a common problem?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/76", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/76/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/76/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/76", "id": 179873879, "node_id": "MDU6SXNzdWUxNzk4NzM4Nzk=", "number": 76, "title": "Wheel support", "user": {"login": "kevin-brown", "id": 1991850, "node_id": "MDQ6VXNlcjE5OTE4NTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1991850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevin-brown", "html_url": "https://github.com/kevin-brown", "followers_url": "https://api.github.com/users/kevin-brown/followers", "following_url": "https://api.github.com/users/kevin-brown/following{/other_user}", "gists_url": "https://api.github.com/users/kevin-brown/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevin-brown/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevin-brown/subscriptions", "organizations_url": "https://api.github.com/users/kevin-brown/orgs", "repos_url": "https://api.github.com/users/kevin-brown/repos", "events_url": "https://api.github.com/users/kevin-brown/events{/privacy}", "received_events_url": "https://api.github.com/users/kevin-brown/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-28T20:02:23Z", "updated_at": "2017-01-05T10:08:51Z", "closed_at": "2017-01-05T10:08:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "http://pythonwheels.com/\n\nRight now, only the `zip` file is being distributed on PyPI for [django-pyodbc-azure](https://pypi.python.org/pypi/django-pyodbc-azure), which isn't _that much_ of an issue, but it does add some time to installing the package.\n\nThis package should be compatible with the Wheel format, considering it doesn't appear to have any C dependencies and it is compatible with both Python 2 and 3. As a result, you should only need to generate a universal wheel and then everyone (on all systems) will get the ability to install django-pyodbc-azure with just the wheel, without having to do any extra work.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/75", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/75/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/75/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/75", "id": 174813332, "node_id": "MDU6SXNzdWUxNzQ4MTMzMzI=", "number": 75, "title": "Conversion failed when converting from a character string to unique identifier", "user": {"login": "aronroberts", "id": 1824123, "node_id": "MDQ6VXNlcjE4MjQxMjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1824123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aronroberts", "html_url": "https://github.com/aronroberts", "followers_url": "https://api.github.com/users/aronroberts/followers", "following_url": "https://api.github.com/users/aronroberts/following{/other_user}", "gists_url": "https://api.github.com/users/aronroberts/gists{/gist_id}", "starred_url": "https://api.github.com/users/aronroberts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aronroberts/subscriptions", "organizations_url": "https://api.github.com/users/aronroberts/orgs", "repos_url": "https://api.github.com/users/aronroberts/repos", "events_url": "https://api.github.com/users/aronroberts/events{/privacy}", "received_events_url": "https://api.github.com/users/aronroberts/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-09-02T17:47:05Z", "updated_at": "2019-06-06T13:57:25Z", "closed_at": "2016-09-02T21:02:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am attempting to connect to a legacy DB that I can't modify.  It appears that somewhere along the line the dashes/hyphens are being stripped from the input UUID String (But I don't know where this is happening)\n\nError is:\n\n```\npyodbc.ProgrammingError: ('42000', '[42000] [FreeTDS][SQL Server]Conversion failed when converting from a character string to uniqueidentifier. (8169) (SQLExecDirectW)')\n```\n\nDjango Debug Output\n\n``` sql\nSET NOCOUNT ON INSERT INTO [Label] ([MetadataSourceId], [MusicBrainzId], [Name], [Country], [CreatedDate], [UpdatedDate], [Disambiguation], [Weight], [IsDeleted]) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s); SELECT CAST(SCOPE_IDENTITY() AS int)' - PARAMS = (None, 'a211091a49744f079818c5162bb0355d', 'Test Label', 'US', datetime.datetime(2016, 8, 11, 13, 24, 4), datetime.datetime(2016, 8, 11, 13, 24, 4), '', 0, 0); args=(None, 'a211091a49744f079818c5162bb0355d', 'Test Label', 'US', datetime.datetime(2016, 8, 11, 13, 24, 4), datetime.datetime(2016, 8, 11, 13, 24, 4), '', 0, False)\n```\n\nThe following SQL works fine:\n\n``` sql\nINSERT INTO [Label] ([MetadataSourceId],\n                     [MusicBrainzId],\n                     [Name],\n                     [Country],\n                     [CreatedDate],\n                     [UpdatedDate],\n                     [Disambiguation],\n                     [Weight],\n                     [IsDeleted]\n) VALUES (NULL,\n          'a211091a-4974-4f07-9818-c5162bb0355d',\n          'Test Label',\n          'US',\n          '2016-08-11 13:24:04.549',\n          '2016-08-11 13:24:04.549',\n          '',\n          0,\n          0\n);\n```\n\n``` python\nclass Label(models.Model):\n    labelid = models.AutoField(db_column='LabelId', primary_key=True)\n    metadatasourceid = models.ForeignKey('Metadatasource', models.DO_NOTHING, db_column='MetadataSourceId', blank=True,\n                                         null=True)\n    musicbrainzid = models.UUIDField(db_column='MusicBrainzId', blank=True, null=True)\n    name = models.CharField(db_column='Name', max_length=500)\n    country = models.CharField(db_column='Country', max_length=2, blank=True, null=True)\n    createddate = models.DateTimeField(db_column='CreatedDate')\n    updateddate = models.DateTimeField(db_column='UpdatedDate')\n    disambiguation = models.CharField(db_column='Disambiguation', max_length=256, blank=True, null=True)\n    weight = models.IntegerField(db_column='Weight')\n    isdeleted = models.BooleanField(db_column='IsDeleted')\n\n    class Meta:\n        managed = False\n        db_table = 'Label'\n```\n\nLegacy Table\n\n``` sql\nCREATE TABLE Label\n(\n    LabelId INT PRIMARY KEY NOT NULL IDENTITY,\n    MetadataSourceId TINYINT,\n    MusicBrainzId UNIQUEIDENTIFIER,\n    Name NVARCHAR(500) NOT NULL,\n    Country VARCHAR(2),\n    CreatedDate DATETIME NOT NULL,\n    UpdatedDate DATETIME NOT NULL,\n    Disambiguation NVARCHAR(256),\n    Weight INT DEFAULT 0 NOT NULL,\n    IsDeleted BIT DEFAULT 0 NOT NULL,\n    CONSTRAINT FK_Label_MetadataSourceId FOREIGN KEY (MetadataSourceId) REFERENCES MetadataSource (MetadataSourceId)\n);\n```\n\nIf anyone has any ideas on how to fix or work around this I'd appreciate it.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/73", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/73/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/73/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/73", "id": 169758878, "node_id": "MDU6SXNzdWUxNjk3NTg4Nzg=", "number": 73, "title": "Altering a field constrained with unique_together results in error 42000", "user": {"login": "RussBaz", "id": 12103281, "node_id": "MDQ6VXNlcjEyMTAzMjgx", "avatar_url": "https://avatars3.githubusercontent.com/u/12103281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RussBaz", "html_url": "https://github.com/RussBaz", "followers_url": "https://api.github.com/users/RussBaz/followers", "following_url": "https://api.github.com/users/RussBaz/following{/other_user}", "gists_url": "https://api.github.com/users/RussBaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/RussBaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RussBaz/subscriptions", "organizations_url": "https://api.github.com/users/RussBaz/orgs", "repos_url": "https://api.github.com/users/RussBaz/repos", "events_url": "https://api.github.com/users/RussBaz/events{/privacy}", "received_events_url": "https://api.github.com/users/RussBaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-08-06T18:10:11Z", "updated_at": "2017-02-21T18:24:11Z", "closed_at": "2016-08-15T18:33:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to apply django-allauth (0.26.1) migrations and I am getting the following exception:\n\n```\nExecuting manage.py migrate\nOperations to perform:\n  Apply all migrations: account, admin, auth, contenttypes, sessions, sites, socialaccount\nRunning migrations:\n  Rendering model states... DONE\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying account.0001_initial... OK\n  Applying account.0002_email_max_length... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying auth.0008_alter_user_username_max_length... OK\n  Applying sessions.0001_initial... OK\n  Applying sites.0001_initial... OK\n  Applying sites.0002_alter_domain_unique... OK\n  Applying socialaccount.0001_initial... OK\n  Applying socialaccount.0002_token_max_lengths...Traceback (most recent call last):\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 64, in execute\n    return self.cursor.execute(sql, params)\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\sql_server\\pyodbc\\base.py\", line 538, in execute\n    return self.cursor.execute(sql, params)\npyodbc.ProgrammingError: ('42000', \"[42000] [Microsoft][ODBC SQL Server Driver][SQL Server]The object 'socialaccount_socialaccount_provider_fc810c6e_uniq' is dependent on column 'uid'. (5074) (SQLExecDirectW)\")\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"D:\\Projects\\myproject\\src/manage.py\", line 22, in <module>\n    execute_from_command_line(sys.argv)\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 367, in execute_from_command_line\n    utility.execute()\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 359, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\django\\core\\management\\base.py\", line 305, in run_from_argv\n    self.execute(*args, **cmd_options)\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\django\\core\\management\\base.py\", line 356, in execute\n    output = self.handle(*args, **options)\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\django\\core\\management\\commands\\migrate.py\", line 202, in handle\n    targets, plan, fake=fake, fake_initial=fake_initial\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\django\\db\\migrations\\executor.py\", line 97, in migrate\n    state = self._migrate_all_forwards(plan, full_plan, fake=fake, fake_initial=fake_initial)\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\django\\db\\migrations\\executor.py\", line 132, in _migrate_all_forwards\n    state = self.apply_migration(state, migration, fake=fake, fake_initial=fake_initial)\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\django\\db\\migrations\\executor.py\", line 237, in apply_migration\n    state = migration.apply(state, schema_editor)\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\django\\db\\migrations\\migration.py\", line 129, in apply\n    operation.database_forwards(self.app_label, schema_editor, old_state, project_state)\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\django\\db\\migrations\\operations\\fields.py\", line 204, in database_forwards\n    schema_editor.alter_field(from_model, from_field, to_field)\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\django\\db\\backends\\base\\schema.py\", line 495, in alter_field\n    old_db_params, new_db_params, strict)\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\sql_server\\pyodbc\\schema.py\", line 244, in _alter_field\n    params,\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\sql_server\\pyodbc\\schema.py\", line 554, in execute\n    cursor.execute(sql, params)\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 79, in execute\n    return super(CursorDebugWrapper, self).execute(sql, params)\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 64, in execute\n    return self.cursor.execute(sql, params)\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\django\\db\\utils.py\", line 94, in __exit__\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\django\\utils\\six.py\", line 685, in reraise\n    raise value.with_traceback(tb)\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 64, in execute\n    return self.cursor.execute(sql, params)\n  File \"D:\\Projects\\myproject\\env\\lib\\site-packages\\sql_server\\pyodbc\\base.py\", line 538, in execute\n    return self.cursor.execute(sql, params)\ndjango.db.utils.ProgrammingError: ('42000', \"[42000] [Microsoft][ODBC SQL Server Driver][SQL Server]The object 'socialaccount_socialaccount_provider_fc810c6e_uniq' is dependent on column 'uid'. (5074) (SQLExecDirectW)\")\nThe Python REPL process has exited\n```\n\nAnd here is the misbehaving migration from django-allauth:\n(D:\\Projects\\myproject\\env\\Lib\\site-packages\\allauth\\socialaccount\\migrations\\0002_token_max_lengths.py)\n\n``` python\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('socialaccount', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='socialaccount',\n            name='uid',\n            field=models.CharField(max_length=getattr(settings, 'SOCIALACCOUNT_UID_MAX_LENGTH', 191), verbose_name='uid'),\n        ),\n        migrations.AlterField(\n            model_name='socialapp',\n            name='client_id',\n            field=models.CharField(help_text='App ID, or consumer key', max_length=191, verbose_name='client id'),\n        ),\n        migrations.AlterField(\n            model_name='socialapp',\n            name='key',\n            field=models.CharField(help_text='Key', max_length=191, verbose_name='key', blank=True),\n        ),\n        migrations.AlterField(\n            model_name='socialapp',\n            name='secret',\n            field=models.CharField(help_text='API secret, client secret, or consumer secret', max_length=191, verbose_name='secret key'),\n        ),\n    ]\n```\n\nThis is the initial migration which the failing one depends on:\n(D:\\Projects\\myproject\\env\\Lib\\site-packages\\allauth\\socialaccount\\migrations\\0001_initial.py)\n\n``` python\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nfrom django.conf import settings\nimport allauth.socialaccount.fields\nfrom allauth.socialaccount.providers import registry\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('sites', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='SocialAccount',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('provider', models.CharField(max_length=30, verbose_name='provider', choices=registry.as_choices())),\n                ('uid', models.CharField(max_length=255, verbose_name='uid')),\n                ('last_login', models.DateTimeField(auto_now=True, verbose_name='last login')),\n                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),\n                ('extra_data', allauth.socialaccount.fields.JSONField(default='{}', verbose_name='extra data')),\n                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),\n            ],\n            options={\n                'verbose_name': 'social account',\n                'verbose_name_plural': 'social accounts',\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='SocialApp',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('provider', models.CharField(max_length=30, verbose_name='provider', choices=registry.as_choices())),\n                ('name', models.CharField(max_length=40, verbose_name='name')),\n                ('client_id', models.CharField(help_text='App ID, or consumer key', max_length=100, verbose_name='client id')),\n                ('secret', models.CharField(help_text='API secret, client secret, or consumer secret', max_length=100, verbose_name='secret key')),\n                ('key', models.CharField(help_text='Key', max_length=100, verbose_name='key', blank=True)),\n                ('sites', models.ManyToManyField(to='sites.Site', blank=True)),\n            ],\n            options={\n                'verbose_name': 'social application',\n                'verbose_name_plural': 'social applications',\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='SocialToken',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('token', models.TextField(help_text='\"oauth_token\" (OAuth1) or access token (OAuth2)', verbose_name='token')),\n                ('token_secret', models.TextField(help_text='\"oauth_token_secret\" (OAuth1) or refresh token (OAuth2)', verbose_name='token secret', blank=True)),\n                ('expires_at', models.DateTimeField(null=True, verbose_name='expires at', blank=True)),\n                ('account', models.ForeignKey(to='socialaccount.SocialAccount')),\n                ('app', models.ForeignKey(to='socialaccount.SocialApp')),\n            ],\n            options={\n                'verbose_name': 'social application token',\n                'verbose_name_plural': 'social application tokens',\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='socialtoken',\n            unique_together=set([('app', 'account')]),\n        ),\n        migrations.AlterUniqueTogether(\n            name='socialaccount',\n            unique_together=set([('provider', 'uid')]),\n        ),\n    ]\n```\n\nAlso, I am using SQL Server 2016 Express with windows 10, Python 3.5.2 (64 bit) and Django 1.10.\n\nIs this a bug of django-pyodbc-azure?\n\nThank you.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/72", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/72/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/72/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/72", "id": 169622675, "node_id": "MDU6SXNzdWUxNjk2MjI2NzU=", "number": 72, "title": "Django 1.10 support", "user": {"login": "RussBaz", "id": 12103281, "node_id": "MDQ6VXNlcjEyMTAzMjgx", "avatar_url": "https://avatars3.githubusercontent.com/u/12103281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RussBaz", "html_url": "https://github.com/RussBaz", "followers_url": "https://api.github.com/users/RussBaz/followers", "following_url": "https://api.github.com/users/RussBaz/following{/other_user}", "gists_url": "https://api.github.com/users/RussBaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/RussBaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RussBaz/subscriptions", "organizations_url": "https://api.github.com/users/RussBaz/orgs", "repos_url": "https://api.github.com/users/RussBaz/repos", "events_url": "https://api.github.com/users/RussBaz/events{/privacy}", "received_events_url": "https://api.github.com/users/RussBaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-05T14:41:26Z", "updated_at": "2016-08-05T17:09:36Z", "closed_at": "2016-08-05T16:48:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a particular reasons why this shouldn't work with 1.10?\n\nThank you.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/70", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/70/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/70/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/70", "id": 169031963, "node_id": "MDU6SXNzdWUxNjkwMzE5NjM=", "number": 70, "title": "DateTime objects from MSSQL database are not considered as datetime, but as strings", "user": {"login": "pmahata", "id": 1016052, "node_id": "MDQ6VXNlcjEwMTYwNTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1016052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmahata", "html_url": "https://github.com/pmahata", "followers_url": "https://api.github.com/users/pmahata/followers", "following_url": "https://api.github.com/users/pmahata/following{/other_user}", "gists_url": "https://api.github.com/users/pmahata/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmahata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmahata/subscriptions", "organizations_url": "https://api.github.com/users/pmahata/orgs", "repos_url": "https://api.github.com/users/pmahata/repos", "events_url": "https://api.github.com/users/pmahata/events{/privacy}", "received_events_url": "https://api.github.com/users/pmahata/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-03T02:16:05Z", "updated_at": "2017-01-05T10:25:22Z", "closed_at": "2017-01-05T10:25:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Platform details:** Django:1.9.9, pyodbc:: 3.0.10, django-pyodbc-azure:1.9.6.0 (Thanks for the package, saved me for connecting to MSSQL from Django on a windows platform).\n\n**Use case:** I am simply using django admin and tried to edit a user in the admin view. The login time and date joined time are seen in \\sql_server\\pyodbc\\operations.py\", line 106, in convert_datetimefield_value are not properly converted as Djago datetime objects, I suppose. It throws an AttributeError at /admin/ with following info:\n\n **'str' object has no attribute 'tzinfo'**\n\n**Trace**\n\nInternal Server Error: /admin/\nTraceback (most recent call last):\n  File \"C:\\Python34\\lib\\site-packages\\django\\core\\handlers\\base.py\", line 149, in get_response\n    response = self.process_exception_by_middleware(e, request)\n  File \"C:\\Python34\\lib\\site-packages\\django\\core\\handlers\\base.py\", line 147, in get_response\n    response = wrapped_callback(request, _callback_args, *_callback_kwargs)\n  File \"C:\\Python34\\lib\\site-packages\\django\\contrib\\admin\\sites.py\", line 265, in wrapper\n    return self.admin_view(view, cacheable)(_args, *_kwargs)\n  File \"C:\\Python34\\lib\\site-packages\\django\\utils\\decorators.py\", line 149, in _wrapped_view\n    response = view_func(request, _args, *_kwargs)\n  File \"C:\\Python34\\lib\\site-packages\\django\\views\\decorators\\cache.py\", line 57, in _wrapped_view_func\n    response = view_func(request, _args, *_kwargs)\n  File \"C:\\Python34\\lib\\site-packages\\django\\contrib\\admin\\sites.py\", line 233, in inner\n    if not self.has_permission(request):\n  File \"C:\\Python34\\lib\\site-packages\\django\\contrib\\admin\\sites.py\", line 173, in has_permission\n    return request.user.is_active and request.user.is_staff\n  File \"C:\\Python34\\lib\\site-packages\\django\\utils\\functional.py\", line 204, in inner\n    self._setup()\n  File \"C:\\Python34\\lib\\site-packages\\django\\utils\\functional.py\", line 351, in _setup\n    self._wrapped = self._setupfunc()\n  File \"C:\\Python34\\lib\\site-packages\\django\\contrib\\auth\\middleware.py\", line 22, in <lambda>\n    request.user = SimpleLazyObject(lambda: get_user(request))\n  File \"C:\\Python34\\lib\\site-packages\\django\\contrib\\auth\\middleware.py\", line 10, in get_user\n    request._cached_user = auth.get_user(request)\n  File \"C:\\Python34\\lib\\site-packages\\django\\contrib\\auth__init__.py\", line 174, in get_user\n    user = backend.get_user(user_id)\n  File \"C:\\Python34\\lib\\site-packages\\django\\contrib\\auth\\backends.py\", line 93, in get_user\n    return UserModel._default_manager.get(pk=user_id)\n  File \"C:\\Python34\\lib\\site-packages\\django\\db\\models\\manager.py\", line 122, in manager_method\n    return getattr(self.get_queryset(), name)(_args, *_kwargs)\n  File \"C:\\Python34\\lib\\site-packages\\django\\db\\models\\query.py\", line 381, in get\n    num = len(clone)\n  File \"C:\\Python34\\lib\\site-packages\\django\\db\\models\\query.py\", line 240, in __len__\n    self._fetch_all()\n  File \"C:\\Python34\\lib\\site-packages\\django\\db\\models\\query.py\", line 1074, in _fetch_all\n    self._result_cache = list(self.iterator())\n  File \"C:\\Python34\\lib\\site-packages\\django\\db\\models\\query.py\", line 68, in __iter__\n    for row in compiler.results_iter(results):\n  File \"C:\\Python34\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py\", line 808, in results_iter\n    row = self.apply_converters(row, converters)\n  File \"C:\\Python34\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py\", line 792, in apply_converters\n    value = converter(value, expression, self.connection, self.query.context)\n  File \"C:\\Python34\\lib\\site-packages\\sql_server\\pyodbc\\operations.py\", line 106, in convert_datetimefield_value\n    value = timezone.make_aware(value, timezone.utc)\n  File \"C:\\Python34\\lib\\site-packages\\django\\utils\\timezone.py\", line 364, in make_aware\n    return timezone.localize(value, is_dst=is_dst)\n  File \"C:\\Python34\\lib\\site-packages\\pytz__init__.py\", line 226, in localize\n    if dt.tzinfo is not None:\nAttributeError: 'str' object has no attribute 'tzinfo'\n[03/Aug/2016 12:10:53] \"GET /admin/ HTTP/1.1\" 500 150886\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/68", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/68/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/68/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/68", "id": 167688904, "node_id": "MDU6SXNzdWUxNjc2ODg5MDQ=", "number": 68, "title": "SQL Server LocalDB support?", "user": {"login": "hermanocabral", "id": 1000585, "node_id": "MDQ6VXNlcjEwMDA1ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1000585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hermanocabral", "html_url": "https://github.com/hermanocabral", "followers_url": "https://api.github.com/users/hermanocabral/followers", "following_url": "https://api.github.com/users/hermanocabral/following{/other_user}", "gists_url": "https://api.github.com/users/hermanocabral/gists{/gist_id}", "starred_url": "https://api.github.com/users/hermanocabral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hermanocabral/subscriptions", "organizations_url": "https://api.github.com/users/hermanocabral/orgs", "repos_url": "https://api.github.com/users/hermanocabral/repos", "events_url": "https://api.github.com/users/hermanocabral/events{/privacy}", "received_events_url": "https://api.github.com/users/hermanocabral/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-07-26T19:19:32Z", "updated_at": "2016-09-15T21:20:42Z", "closed_at": "2016-09-15T21:20:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Anyone ever tried running SQLS LocalDB?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/67", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/67/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/67/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/67", "id": 165588429, "node_id": "MDU6SXNzdWUxNjU1ODg0Mjk=", "number": 67, "title": "Accessing tables in a schema doesn't seem to work in legacy DB", "user": {"login": "kdazzle", "id": 1220698, "node_id": "MDQ6VXNlcjEyMjA2OTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1220698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdazzle", "html_url": "https://github.com/kdazzle", "followers_url": "https://api.github.com/users/kdazzle/followers", "following_url": "https://api.github.com/users/kdazzle/following{/other_user}", "gists_url": "https://api.github.com/users/kdazzle/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdazzle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdazzle/subscriptions", "organizations_url": "https://api.github.com/users/kdazzle/orgs", "repos_url": "https://api.github.com/users/kdazzle/repos", "events_url": "https://api.github.com/users/kdazzle/events{/privacy}", "received_events_url": "https://api.github.com/users/kdazzle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-07-14T15:23:41Z", "updated_at": "2018-01-29T16:34:17Z", "closed_at": "2016-07-22T12:42:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not too familiar with MSSQL, so let me know if any terminology is wrong, but is there a supported way to access tables within a schema? For example, say I have a legacy database and there is a schema called `Products`, and that schema contains a table `Coats`.\n\nSo I set up my Django model:\n\n```\nclass Coat(models.Model):\n\n    # attributes...\n\n    class Meta:\n        is_managed = False\n        db_table = 'Coats'  # This is the tricky part\n```\n\nThere doesn't seem like there is any good way to set the `db_table`. I've tried `Coats`, `Products.Coats`, `COATS`, `Products/Coats`, etc. etc.\n\nHowever, there is a gross way to make it work that I found [here](http://kozelj.org/django-1-6-mssql-and-schemas/), which uses some injection. So using that, we'd set `db_table = 'Products].[Coats'`. \n\nSurely someone has faced this before - is there a better way to access tables in a schema? If not, maybe I can submit a PR to institutionalize this method because it was tough to even find a workaround for.\n\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/66", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/66/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/66/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/66", "id": 164606902, "node_id": "MDU6SXNzdWUxNjQ2MDY5MDI=", "number": 66, "title": "Invalid SQL generated for select_for_update when there are joined tables", "user": {"login": "tawmas", "id": 1683273, "node_id": "MDQ6VXNlcjE2ODMyNzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1683273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tawmas", "html_url": "https://github.com/tawmas", "followers_url": "https://api.github.com/users/tawmas/followers", "following_url": "https://api.github.com/users/tawmas/following{/other_user}", "gists_url": "https://api.github.com/users/tawmas/gists{/gist_id}", "starred_url": "https://api.github.com/users/tawmas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tawmas/subscriptions", "organizations_url": "https://api.github.com/users/tawmas/orgs", "repos_url": "https://api.github.com/users/tawmas/repos", "events_url": "https://api.github.com/users/tawmas/events{/privacy}", "received_events_url": "https://api.github.com/users/tawmas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-08T20:09:43Z", "updated_at": "2017-01-05T10:21:18Z", "closed_at": "2017-01-05T10:21:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have in our project a few `select_for_update()` queries which fail with the error `Incorrect syntax near the keyword 'with'`.\n\nAfter a bit of investigation, we remarked that the generated queries have the form:\n\n``` sql\nSELECT [app_model].[id]\nFROM [app_model]\nINNER JOIN [app_othermodel] ON ( [app_model].[othermodel_id] = [app_othermodel].[id] )\nWITH (ROWLOCK, UPDLOCK)\n```\n\nIt looks like the expected syntax is instead:\n\n``` sql\nSELECT [app_model].[id]\nFROM [app_model]\nWITH (ROWLOCK, UPDLOCK)\nINNER JOIN [app_othermodel] ON ( [app_model].[othermodel_id] = [app_othermodel].[id] )\n```\n\nThat is, the `WITH` option must directly follow the table name in the `FROM` clause and not the `INNER JOIN` clause.\n\nThis was found with django 1.8.13, django-pyodbc-azure 1.8.13.0 and MS SQL Server 2014. We did not test with other SQL Server versions, but we think that the issue applies to all supported versions.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/61", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/61/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/61/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/61", "id": 159638771, "node_id": "MDU6SXNzdWUxNTk2Mzg3NzE=", "number": 61, "title": "Minimum Permissions Required for SQL Server Django User", "user": {"login": "FlipperPA", "id": 68164, "node_id": "MDQ6VXNlcjY4MTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/68164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FlipperPA", "html_url": "https://github.com/FlipperPA", "followers_url": "https://api.github.com/users/FlipperPA/followers", "following_url": "https://api.github.com/users/FlipperPA/following{/other_user}", "gists_url": "https://api.github.com/users/FlipperPA/gists{/gist_id}", "starred_url": "https://api.github.com/users/FlipperPA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FlipperPA/subscriptions", "organizations_url": "https://api.github.com/users/FlipperPA/orgs", "repos_url": "https://api.github.com/users/FlipperPA/repos", "events_url": "https://api.github.com/users/FlipperPA/events{/privacy}", "received_events_url": "https://api.github.com/users/FlipperPA/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-10T13:47:17Z", "updated_at": "2016-06-10T14:02:59Z", "closed_at": "2016-06-10T14:00:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Good morning, more of a question / investigation than an issue, admittedly, but I think this is the best place to ask.\n\nI'm running into an issue with initial migrations. We're trying to figure out what the minimum set of SQL Server permissions is for a SQL Server user to handle migrations.\n\nWhen I give the SQL auth user the 'dbowner' role, all works fine on a fresh project's initial migration.\n\nHowever, when I give the user these DB-wide permissions, no luck: SELECT, INSERT, UPDATE, DELETE, ALTER, CREATE TABLE, EXEC\n\nThe login has \"VIEW SERVER STATE\" at the server scope.\n\nWhat permission am I missing? I'm going to dig further into the actual SQL run by the migrations, but nothing stuck out to me initially. I looked through the SQL of a fairly complex Django project we have to come up with the list above, so I thought it'd be pretty thorough!\n\nThanks for any insight anyone can provide.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/60", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/60/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/60/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/60", "id": 158583886, "node_id": "MDU6SXNzdWUxNTg1ODM4ODY=", "number": 60, "title": "Support for count_big?", "user": {"login": "whelks-chance", "id": 1478359, "node_id": "MDQ6VXNlcjE0NzgzNTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1478359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whelks-chance", "html_url": "https://github.com/whelks-chance", "followers_url": "https://api.github.com/users/whelks-chance/followers", "following_url": "https://api.github.com/users/whelks-chance/following{/other_user}", "gists_url": "https://api.github.com/users/whelks-chance/gists{/gist_id}", "starred_url": "https://api.github.com/users/whelks-chance/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whelks-chance/subscriptions", "organizations_url": "https://api.github.com/users/whelks-chance/orgs", "repos_url": "https://api.github.com/users/whelks-chance/repos", "events_url": "https://api.github.com/users/whelks-chance/events{/privacy}", "received_events_url": "https://api.github.com/users/whelks-chance/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-06-06T00:39:34Z", "updated_at": "2017-01-05T10:14:12Z", "closed_at": "2017-01-05T10:14:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "('22003', '[22003] [Microsoft][ODBC SQL Server Driver][SQL Server]Arithmetic overflow error converting expression to data type int. (8115) (SQLExecDirectW)')\n\nThat's the error I'm getting while trying to use Django Admin on a table with 2.8 billion rows. As far as I can tell, a count() query is run when loading the page, in order to work out pagination, which I think is using count() instead of count_big, so the overflow occurs.\n\nhttps://msdn.microsoft.com/en-us/library/ms190317.aspx\n\nI hope that makes sense?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/58", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/58/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/58/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/58", "id": 155287500, "node_id": "MDU6SXNzdWUxNTUyODc1MDA=", "number": 58, "title": "'unicode' object has no attribute 'tzinfo'", "user": {"login": "alexsilva", "id": 2024086, "node_id": "MDQ6VXNlcjIwMjQwODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2024086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexsilva", "html_url": "https://github.com/alexsilva", "followers_url": "https://api.github.com/users/alexsilva/followers", "following_url": "https://api.github.com/users/alexsilva/following{/other_user}", "gists_url": "https://api.github.com/users/alexsilva/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexsilva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexsilva/subscriptions", "organizations_url": "https://api.github.com/users/alexsilva/orgs", "repos_url": "https://api.github.com/users/alexsilva/repos", "events_url": "https://api.github.com/users/alexsilva/events{/privacy}", "received_events_url": "https://api.github.com/users/alexsilva/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-05-17T15:21:31Z", "updated_at": "2016-06-15T01:16:01Z", "closed_at": "2016-05-17T17:43:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "django=1.9.6\ndjango-pyodbc-azure=1.9.3\npython=2.7\nOS Windows 64\n\nIt is occurring failure on the date of conversion that is not in datetime format when the conversion is necessary.\n\nThe date value is a string when it should be a datetime object.\n\n[https://docs.djangoproject.com/en/1.9/ref/utils/#django.utils.timezone.make_aware](make_aware)\n\nThere is already a solution for this problem ?\n\n```\nTraceback (most recent call last):\n  File \"...\\django\\core\\handlers\\base.py\", line 123, in get_response\n    response = middleware_method(request)\n  File \"...\\django\\middleware\\locale.py\", line 25, in process_request\n    request, check_path=self.is_language_prefix_patterns_used)\n  File \"...\\django\\utils\\translation\\__init__.py\", line 199, in get_language_from_request\n    return _trans.get_language_from_request(request, check_path)\n  File \"...\\django\\utils\\translation\\trans_real.py\", line 494, in get_language_from_request\n    lang_code = request.session.get(LANGUAGE_SESSION_KEY)\n  File \"...\\django\\contrib\\sessions\\backends\\base.py\", line 61, in get\n    return self._session.get(key, default)\n  File \"...\\django\\contrib\\sessions\\backends\\base.py\", line 201, in _get_session\n    self._session_cache = self.load()\n  File \"...\\django\\contrib\\sessions\\backends\\db.py\", line 33, in load\n    expire_date__gt=timezone.now()\n  File \"...\\django\\db\\models\\manager.py\", line 122, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File \"...\\django\\db\\models\\query.py\", line 381, in get\n    num = len(clone)\n  File \"...\\django\\db\\models\\query.py\", line 240, in __len__\n    self._fetch_all()\n  File \"...\\django\\db\\models\\query.py\", line 1074, in _fetch_all\n    self._result_cache = list(self.iterator())\n  File \"...\\django\\db\\models\\query.py\", line 68, in __iter__\n    for row in compiler.results_iter(results):\n  File \"...\\django\\db\\models\\sql\\compiler.py\", line 808, in results_iter\n    row = self.apply_converters(row, converters)\n  File \"...\\django\\db\\models\\sql\\compiler.py\", line 792, in apply_converters\n    value = converter(value, expression, self.connection, self.query.context)\n  File \"...\\sql_server\\pyodbc\\operations.py\", line 108, in convert_datetimefield_value\n    value = timezone.make_aware(value, timezone.utc)\n  File \"...\\django\\utils\\timezone.py\", line 364, in make_aware\n    return timezone.localize(value, is_dst=is_dst)\n  File \"..env\\lib\\site-packages\\pytz\\__init__.py\", line 225, in localize\n    if dt.tzinfo is not None:\nAttributeError: 'unicode' object has no attribute 'tzinfo'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/57", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/57/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/57/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/57", "id": 151549666, "node_id": "MDU6SXNzdWUxNTE1NDk2NjY=", "number": 57, "title": "How to add 'Application Name' (Program Name)", "user": {"login": "jonprasetyo", "id": 4088225, "node_id": "MDQ6VXNlcjQwODgyMjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/4088225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonprasetyo", "html_url": "https://github.com/jonprasetyo", "followers_url": "https://api.github.com/users/jonprasetyo/followers", "following_url": "https://api.github.com/users/jonprasetyo/following{/other_user}", "gists_url": "https://api.github.com/users/jonprasetyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonprasetyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonprasetyo/subscriptions", "organizations_url": "https://api.github.com/users/jonprasetyo/orgs", "repos_url": "https://api.github.com/users/jonprasetyo/repos", "events_url": "https://api.github.com/users/jonprasetyo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonprasetyo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-28T04:58:33Z", "updated_at": "2016-05-30T07:31:33Z", "closed_at": "2016-05-30T07:31:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "How do we include the 'Application Name' or 'Program Name' into the settings?\n\nWe would like to view in our logs what application has accessed our database by executing the command sq_who2 and view the column 'Program Name'\n\nThank you\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/56", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/56/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/56/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/56", "id": 150975542, "node_id": "MDU6SXNzdWUxNTA5NzU1NDI=", "number": 56, "title": "text fields should be excluded from GROUP BY", "user": {"login": "drakej", "id": 952345, "node_id": "MDQ6VXNlcjk1MjM0NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/952345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drakej", "html_url": "https://github.com/drakej", "followers_url": "https://api.github.com/users/drakej/followers", "following_url": "https://api.github.com/users/drakej/following{/other_user}", "gists_url": "https://api.github.com/users/drakej/gists{/gist_id}", "starred_url": "https://api.github.com/users/drakej/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drakej/subscriptions", "organizations_url": "https://api.github.com/users/drakej/orgs", "repos_url": "https://api.github.com/users/drakej/repos", "events_url": "https://api.github.com/users/drakej/events{/privacy}", "received_events_url": "https://api.github.com/users/drakej/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-04-25T20:42:03Z", "updated_at": "2016-04-25T21:42:55Z", "closed_at": "2016-04-25T21:42:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "When you attempt to aggregate fields, if the base object model has a field that's of type text (TextField in Django, \"text\" in SQL Server), it will cause an error when using annotation based on db compiler attempting to GROUP BY on the text field which is not allowed in SQL Server.\n\nThe result is an exception propagated from the FreeTDS stack (although it would be the native driver on windows) like the one below:\n\n_The text, ntext, and image data types cannot be compared or sorted, except when using IS NULL or LIKE operator._\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/55", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/55/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/55/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/55", "id": 149028147, "node_id": "MDU6SXNzdWUxNDkwMjgxNDc=", "number": 55, "title": "MemoryError", "user": {"login": "unformatt", "id": 157132, "node_id": "MDQ6VXNlcjE1NzEzMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/157132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unformatt", "html_url": "https://github.com/unformatt", "followers_url": "https://api.github.com/users/unformatt/followers", "following_url": "https://api.github.com/users/unformatt/following{/other_user}", "gists_url": "https://api.github.com/users/unformatt/gists{/gist_id}", "starred_url": "https://api.github.com/users/unformatt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unformatt/subscriptions", "organizations_url": "https://api.github.com/users/unformatt/orgs", "repos_url": "https://api.github.com/users/unformatt/repos", "events_url": "https://api.github.com/users/unformatt/events{/privacy}", "received_events_url": "https://api.github.com/users/unformatt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-04-18T03:11:43Z", "updated_at": "2016-04-19T02:01:09Z", "closed_at": "2016-04-19T02:01:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've added one record to the database and tried to load it and got a memory error. Any idears?\n\n```\n>>> from models import MyModel\n>>> MyModel.objects.get(id=1)\nTraceback (most recent call last):\n  File \"<console>\", line 1, in <module>\n  File \"lib/python2.7/site-packages/django/db/models/manager.py\", line 122, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File \"lib/python2.7/site-packages/django/db/models/query.py\", line 381, in get\n    num = len(clone)\n  File \"lib/python2.7/site-packages/django/db/models/query.py\", line 240, in __len__\n    self._fetch_all()\n  File \"lib/python2.7/site-packages/django/db/models/query.py\", line 1074, in _fetch_all\n    self._result_cache = list(self.iterator())\n  File \"lib/python2.7/site-packages/django/db/models/query.py\", line 52, in __iter__\n    results = compiler.execute_sql()\n  File \"lib/python2.7/site-packages/django/db/models/sql/compiler.py\", line 879, in execute_sql\n    return list(result)\n  File \"lib/python2.7/site-packages/django/db/models/sql/compiler.py\", line 1239, in cursor_iter\n    sentinel):\n  File \"lib/python2.7/site-packages/django/db/models/sql/compiler.py\", line 1238, in <lambda>\n    for rows in iter((lambda: cursor.fetchmany(GET_ITERATOR_CHUNK_SIZE)),\n  File \"lib/python2.7/site-packages/django/db/utils.py\", line 102, in inner\n    return func(*args, **kwargs)\n  File \"lib/python2.7/site-packages/sql_server/pyodbc/base.py\", line 581, in fetchmany\n    return self.format_rows(self.cursor.fetchmany(chunk))\nMemoryError\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/53", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/53/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/53/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/53", "id": 147857124, "node_id": "MDU6SXNzdWUxNDc4NTcxMjQ=", "number": 53, "title": "Problem with type DATE field", "user": {"login": "gustavo-sdo", "id": 2745118, "node_id": "MDQ6VXNlcjI3NDUxMTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2745118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gustavo-sdo", "html_url": "https://github.com/gustavo-sdo", "followers_url": "https://api.github.com/users/gustavo-sdo/followers", "following_url": "https://api.github.com/users/gustavo-sdo/following{/other_user}", "gists_url": "https://api.github.com/users/gustavo-sdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/gustavo-sdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gustavo-sdo/subscriptions", "organizations_url": "https://api.github.com/users/gustavo-sdo/orgs", "repos_url": "https://api.github.com/users/gustavo-sdo/repos", "events_url": "https://api.github.com/users/gustavo-sdo/events{/privacy}", "received_events_url": "https://api.github.com/users/gustavo-sdo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-12T19:57:39Z", "updated_at": "2016-04-13T00:34:55Z", "closed_at": "2016-04-13T00:34:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello guys,\n\nI installed the django-pyodbc-azure library on my local environment, with windows 10.\nI am using the Django 1.9.5 with Python 3.4.3 and SQL Server 2008 R2.\n\nIn my tests basically all operations are functioning properly: SELECT, INSERT, DELETE, UPDATE ...\nI found problems only with the type DATE field.\nWhen the field is DATE, it is being treated as a VARCHAR.\n\nThe format displayed on application looks like this:\n![image](https://cloud.githubusercontent.com/assets/2745118/14473443/6e1cc206-00ce-11e6-8512-f7104a58e76f.png)\n\nIf the field is the DATETIME type is displayed correctly on the application, see:\n![image](https://cloud.githubusercontent.com/assets/2745118/14473496/c9453f32-00ce-11e6-8576-07969eef284f.png)\n\nWe work with the format '%d/%m/%Y'.\n\nI tried to change the 'use_legacy_datetime': True, but gave no results.\n\nMy connection in settings.py is as follows:\n\n```\n'connection_name': {\n    'ENGINE': 'sql_server.pyodbc',\n    'NAME': 'my_db_name',\n    'USER': 'my_user',\n    'PASSWORD': 'my_pass',\n    'HOST': 'my_db_host',\n    'PORT': '',\n    'OPTIONS' : {\n        'use_legacy_datetime': True\n    },\n    'COMMAND_TIMEOUT': COMMAND_TIMEOUT,\n},\n```\n\nDoes anyone have any idea why the problem?\n\nThank you guys.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/52", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/52/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/52/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/52", "id": 147843375, "node_id": "MDU6SXNzdWUxNDc4NDMzNzU=", "number": 52, "title": "Index not properly recreated on `Null` to `Not Null` migration", "user": {"login": "tredzko", "id": 8700540, "node_id": "MDQ6VXNlcjg3MDA1NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/8700540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tredzko", "html_url": "https://github.com/tredzko", "followers_url": "https://api.github.com/users/tredzko/followers", "following_url": "https://api.github.com/users/tredzko/following{/other_user}", "gists_url": "https://api.github.com/users/tredzko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tredzko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tredzko/subscriptions", "organizations_url": "https://api.github.com/users/tredzko/orgs", "repos_url": "https://api.github.com/users/tredzko/repos", "events_url": "https://api.github.com/users/tredzko/events{/privacy}", "received_events_url": "https://api.github.com/users/tredzko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-04-12T19:02:14Z", "updated_at": "2017-01-05T10:17:30Z", "closed_at": "2017-01-05T10:17:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "When running migrations in Django 1.8, if a field is altered from being nullable to not allowing nulls, any indexes for it are not recreated or dropped, which causes an error. The exact error should look like below (with field names substituted):\n\n```\ndjango.db.utils.ProgrammingError: ('42000', \"[42000] [Microsoft][ODBC SQL Server Driver][SQL Server]The index '<INDEX_NAME>' is dependent on column '<COLUMN_NAME>'. (5074) (SQLExecDirectW)\")\n```\n\nTo work around this issue, we had to drop the index manually (using alter field and setitng `db_index` to `False`), alter the field to no longer be nullable, then alter the indexing back to true to create the index. This should, however, be handled by default.\n\n---\n\n**Old Migration:**\n\n``` python\nmigrations.AlterField(\n    model_name='<MODEL_NAME>',\n    name='<FIELD_NAME>',\n    field=models.ForeignKey(related_name='+', to='<RELATION_NAME>', null=False),\n),\n```\n\n---\n\n**New Migration:**\n\n``` python\nmigrations.AlterField(\n    model_name='<MODEL_NAME>',\n    name='<FIELD_NAME>',\n    field=models.ForeignKey(related_name='+', to='<RELATION_NAME>', null=True, db_index=False),\n),\nmigrations.AlterField(\n    model_name='<MODEL_NAME>',\n    name='<FIELD_NAME>',\n    field=models.ForeignKey(related_name='+', to='<RELATION_NAME>', null=False),\n),\nmigrations.AlterField(\n    model_name='<MODEL_NAME>',\n    name='<FIELD_NAME>',\n    field=models.ForeignKey(related_name='+', to='<RELATION_NAME>', null=False, db_index=True),\n),\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/51", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/51/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/51/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/51", "id": 135188163, "node_id": "MDU6SXNzdWUxMzUxODgxNjM=", "number": 51, "title": "The object 'UQ__core_mem__B9BE370E8A575F1B' is dependent on column", "user": {"login": "bilal414", "id": 1949892, "node_id": "MDQ6VXNlcjE5NDk4OTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1949892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bilal414", "html_url": "https://github.com/bilal414", "followers_url": "https://api.github.com/users/bilal414/followers", "following_url": "https://api.github.com/users/bilal414/following{/other_user}", "gists_url": "https://api.github.com/users/bilal414/gists{/gist_id}", "starred_url": "https://api.github.com/users/bilal414/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bilal414/subscriptions", "organizations_url": "https://api.github.com/users/bilal414/orgs", "repos_url": "https://api.github.com/users/bilal414/repos", "events_url": "https://api.github.com/users/bilal414/events{/privacy}", "received_events_url": "https://api.github.com/users/bilal414/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-02-21T10:36:56Z", "updated_at": "2016-08-18T13:45:04Z", "closed_at": "2016-08-18T13:45:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi I have following model. \n\nclass CoreMember(models.Model):\n\n```\nuser = models.OneToOneField(User, related_name='member')\n\nname = models.CharField(max_length=255, null=True)\n\nclass Meta():\n    db_table = 'core_member'\n```\n\nwhen I try to remove \"user\" field I get following error. \n\ndjango.db.utils.ProgrammingError: ('42000', \"[42000] [Microsoft][ODBC SQL Server Driver][SQL Server]The object 'UQ__core_mem__B9BE370E8A575F1B' is dependent on column 'user_id'. (5074) (SQLExecDirectW); [42000] [Microsoft][ODBC S\nQL Server Driver][SQL Server]ALTER TABLE DROP COLUMN user_id failed because one or more objects access this column. (4922)\")\n\nany idea?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/50", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/50/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/50/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/50", "id": 134366122, "node_id": "MDU6SXNzdWUxMzQzNjYxMjI=", "number": 50, "title": "('23000', \"[23000] [Microsoft][ODBC SQL Server Driver][SQL Server]Violation of UNIQUE KEY constraint 'cms_page_publisher_is_draft_8c776642_uniq'. Cannot insert duplicate key in object 'dbo.cms_page'. The duplicate key value is (1, 1, <NULL>). (2627) (SQLExecDirectW)\")", "user": {"login": "mkane848", "id": 7328780, "node_id": "MDQ6VXNlcjczMjg3ODA=", "avatar_url": "https://avatars3.githubusercontent.com/u/7328780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkane848", "html_url": "https://github.com/mkane848", "followers_url": "https://api.github.com/users/mkane848/followers", "following_url": "https://api.github.com/users/mkane848/following{/other_user}", "gists_url": "https://api.github.com/users/mkane848/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkane848/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkane848/subscriptions", "organizations_url": "https://api.github.com/users/mkane848/orgs", "repos_url": "https://api.github.com/users/mkane848/repos", "events_url": "https://api.github.com/users/mkane848/events{/privacy}", "received_events_url": "https://api.github.com/users/mkane848/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-02-17T18:51:00Z", "updated_at": "2016-02-22T18:44:55Z", "closed_at": "2016-02-22T18:44:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry, back again! Still same setup as last time: Django on a Windows Server 2012, MS SQL Server. Working with djangoCMS and having the above issue when creating new pages. Full traceback:\n\n```\n('23000', \"[23000] [Microsoft][ODBC SQL Server Driver][SQL Server]Violation of UNIQUE KEY constraint 'cms_page_publisher_is_draft_8c776642_uniq'. Cannot insert duplicate key in object 'dbo.cms_page'. The duplicate key value is (1, 1, <NULL>). (2627) (SQLExecDirectW)\")\nRequest Method: POST\nRequest URL:    http://pilweb01/en/admin/cms/page/add/?language=en&target=1&position=last-child\nDjango Version: 1.9.2\nException Type: IntegrityError\nException Value:    \n('23000', \"[23000] [Microsoft][ODBC SQL Server Driver][SQL Server]Violation of UNIQUE KEY constraint 'cms_page_publisher_is_draft_8c776642_uniq'. Cannot insert duplicate key in object 'dbo.cms_page'. The duplicate key value is (1, 1, <NULL>). (2627) (SQLExecDirectW)\")\nException Location: C:\\Python34_x86\\lib\\site-packages\\sql_server\\pyodbc\\base.py in execute, line 537\nPython Executable:  C:\\Python34_x86\\python.exe\nPython Version: 3.4.2\nPython Path:    \n['.',\n 'C:\\\\inetpub\\\\wwwroot\\\\Django\\\\masernet',\n 'C:\\\\Windows\\\\SYSTEM32\\\\python34.zip',\n 'C:\\\\Python34_x86\\\\DLLs',\n 'C:\\\\Python34_x86\\\\lib',\n 'C:\\\\Python34_x86',\n 'C:\\\\Python34_x86\\\\lib\\\\site-packages']\n```\n\nI tried to flush the database from the command line to see if it was something I did, but I also get this error when running `python manage.py flush`:\n\n```\n\nTraceback (most recent call last):\n  File \"manage.py\", line 10, in <module>\n    execute_from_command_line(sys.argv)\n  File \"C:\\Python34_x86\\lib\\site-packages\\django\\core\\management\\__init__.py\", l\nine 353, in execute_from_command_line\n    utility.execute()\n  File \"C:\\Python34_x86\\lib\\site-packages\\django\\core\\management\\__init__.py\", l\nine 345, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File \"C:\\Python34_x86\\lib\\site-packages\\django\\core\\management\\base.py\", line\n348, in run_from_argv\n    self.execute(*args, **cmd_options)\n  File \"C:\\Python34_x86\\lib\\site-packages\\django\\core\\management\\base.py\", line\n399, in execute\n    output = self.handle(*args, **options)\n  File \"C:\\Python34_x86\\lib\\site-packages\\django\\core\\management\\commands\\flush.\npy\", line 49, in handle\n    allow_cascade=allow_cascade)\n  File \"C:\\Python34_x86\\lib\\site-packages\\django\\core\\management\\sql.py\", line 1\n9, in sql_flush\n    statements = connection.ops.sql_flush(style, tables, seqs, allow_cascade)\n  File \"C:\\Python34_x86\\lib\\site-packages\\sql_server\\pyodbc\\operations.py\", line\n 352, in sql_flush\n    cursor.execute(\"SELECT COUNT(*) FROM %s\" % self.quote_name(seq[\"table\"]))\n  File \"C:\\Python34_x86\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 79,\n in execute\n    return super(CursorDebugWrapper, self).execute(sql, params)\n  File \"C:\\Python34_x86\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 64,\n in execute\n    return self.cursor.execute(sql, params)\n  File \"C:\\Python34_x86\\lib\\site-packages\\django\\db\\utils.py\", line 95, in __exi\nt__\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\n  File \"C:\\Python34_x86\\lib\\site-packages\\django\\utils\\six.py\", line 685, in rer\naise\n    raise value.with_traceback(tb)\n  File \"C:\\Python34_x86\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 62,\n in execute\n    return self.cursor.execute(sql)\n  File \"C:\\Python34_x86\\lib\\site-packages\\sql_server\\pyodbc\\base.py\", line 537,\nin execute\n    return self.cursor.execute(sql, params)\ndjango.db.utils.ProgrammingError: ('42S02', \"[42S02] [Microsoft][ODBC SQL Server\n Driver][SQL Server]Invalid object name 'django_auth_ldap_testuser'. (208) (SQLE\nxecDirectW)\")\n```\n\nThank you for the fix last time, and anything you can do to help with this!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/49", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/49/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/49/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/49", "id": 132192165, "node_id": "MDU6SXNzdWUxMzIxOTIxNjU=", "number": 49, "title": "[42000] [Microsoft][ODBC SQL Server Driver][SQL Server]The object 'cms_cmsplugin_level_0ccc318d_check' is dependent on column 'level'. (5074) (SQLExecDirectW)", "user": {"login": "mkane848", "id": 7328780, "node_id": "MDQ6VXNlcjczMjg3ODA=", "avatar_url": "https://avatars3.githubusercontent.com/u/7328780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkane848", "html_url": "https://github.com/mkane848", "followers_url": "https://api.github.com/users/mkane848/followers", "following_url": "https://api.github.com/users/mkane848/following{/other_user}", "gists_url": "https://api.github.com/users/mkane848/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkane848/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkane848/subscriptions", "organizations_url": "https://api.github.com/users/mkane848/orgs", "repos_url": "https://api.github.com/users/mkane848/repos", "events_url": "https://api.github.com/users/mkane848/events{/privacy}", "received_events_url": "https://api.github.com/users/mkane848/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-02-08T16:40:29Z", "updated_at": "2016-02-15T16:56:19Z", "closed_at": "2016-02-15T16:56:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Attempting to run DjangoCMS 3.2.1 on Django 1.9.2 with django-pyodbc-azure 1.9.1.0 on a Windows 10 desktop to connect to my MS SQL server.\n\nWhen attempting to migrate, I get the following traceback:\n\n```\nOperations to perform:\n  Apply all migrations: djangocms_snippet, djangocms_text_ckeditor, djangocms_googlemap, cms, djangocms_link, filer, sites, easy_thumbnails, reversion, sessions, admin, contenttypes, djangocms_style, auth, djangocms_inherit, menus\nRunning migrations:\n  Rendering model states... DONE\n  Applying cms.0006_auto_20140924_1110...Traceback (most recent call last):\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 64, in execute\n    return self.cursor.execute(sql, params)\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\sql_server\\pyodbc\\base.py\", line 537, in execute\n    return self.cursor.execute(sql, params)\npyodbc.ProgrammingError: ('42000', \"[42000] [Microsoft][ODBC SQL Server Driver][SQL Server]The object 'cms_cmsplugin_level_0ccc318d_check' is dependent on column 'level'. (5074) (SQLExecDirectW)\")\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"manage.py\", line 10, in <module>\n    execute_from_command_line(sys.argv)\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 353, in execute_from_command_line\n    utility.execute()\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 345, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\django\\core\\management\\base.py\", line 348, in run_from_argv\n    self.execute(*args, **cmd_options)\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\django\\core\\management\\base.py\", line 399, in execute\n    output = self.handle(*args, **options)\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\django\\core\\management\\commands\\migrate.py\", line 200, in handle\n    executor.migrate(targets, plan, fake=fake, fake_initial=fake_initial)\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\django\\db\\migrations\\executor.py\", line 92, in migrate\n    self._migrate_all_forwards(plan, full_plan, fake=fake, fake_initial=fake_initial)\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\django\\db\\migrations\\executor.py\", line 121, in _migrate_all_forwards\n    state = self.apply_migration(state, migration, fake=fake, fake_initial=fake_initial)\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\django\\db\\migrations\\executor.py\", line 198, in apply_migration\n    state = migration.apply(state, schema_editor)\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\django\\db\\migrations\\migration.py\", line 123, in apply\n    operation.database_forwards(self.app_label, schema_editor, old_state, project_state)\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\django\\db\\migrations\\operations\\fields.py\", line 121, in database_forwards\n    schema_editor.remove_field(from_model, from_model._meta.get_field(self.name))\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\sql_server\\pyodbc\\schema.py\", line 593, in remove_field\n    self.execute(sql)\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\sql_server\\pyodbc\\schema.py\", line 516, in execute\n    cursor.execute(sql, params)\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 79, in execute\n    return super(CursorDebugWrapper, self).execute(sql, params)\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 64, in execute\n    return self.cursor.execute(sql, params)\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\django\\db\\utils.py\", line 95, in __exit__\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\django\\utils\\six.py\", line 685, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 64, in execute\n    return self.cursor.execute(sql, params)\n  File \"C:\\Users\\mkane\\Envs\\mnet\\lib\\site-packages\\sql_server\\pyodbc\\base.py\", line 537, in execute\n    return self.cursor.execute(sql, params)\ndjango.db.utils.ProgrammingError: ('42000', \"[42000] [Microsoft][ODBC SQL Server Driver][SQL Server]The object 'cms_cmsplugin_level_0ccc318d_check' is dependent on column 'level'. (5074) (SQLExecDirectW)\")\n```\n\nIf this is something I have to sort out with the djangoCMS folks, I apologize, but I'm completely lost on how to go about debugging this after an hour of web searches and figured that this would be the best place to start.\n\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/47", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/47/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/47/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/47", "id": 120349728, "node_id": "MDU6SXNzdWUxMjAzNDk3Mjg=", "number": 47, "title": "SQLExecDirectW on add DateTimeFiled", "user": {"login": "GordonFreemem", "id": 3426224, "node_id": "MDQ6VXNlcjM0MjYyMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3426224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GordonFreemem", "html_url": "https://github.com/GordonFreemem", "followers_url": "https://api.github.com/users/GordonFreemem/followers", "following_url": "https://api.github.com/users/GordonFreemem/following{/other_user}", "gists_url": "https://api.github.com/users/GordonFreemem/gists{/gist_id}", "starred_url": "https://api.github.com/users/GordonFreemem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GordonFreemem/subscriptions", "organizations_url": "https://api.github.com/users/GordonFreemem/orgs", "repos_url": "https://api.github.com/users/GordonFreemem/repos", "events_url": "https://api.github.com/users/GordonFreemem/events{/privacy}", "received_events_url": "https://api.github.com/users/GordonFreemem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-12-04T07:38:20Z", "updated_at": "2015-12-07T15:28:53Z", "closed_at": "2015-12-07T15:28:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to add DateTimeFields to my models and get the following error:\n\"django.db.utils.DataError: ('22007', '[22007] [FreeTDS][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\"\n\nmigration:\n\n``` python\nmigrations.AddField(\n            model_name='entrytype',\n            name='creation_timestamp',\n            field=models.DateTimeField(default=datetime.datetime(2015, 12, 3, 12, 25, 43, 153209, tzinfo=utc), auto_now_add=True),\n            preserve_default=False,\n        ),\n```\n\nwhat the SQLServer trys to do:\n\n``` sql\nALTER TABLE [wdok_entrytype] \n    ADD [creation_timestamp] \n        datetime DEFAULT '2015-12-03 12:25:43 +00:00' NOT NULL\n```\n\nMy SQLServer-Admin says, that the query works if he removes the timezone-information. I used django.utils.timezone.now() as default-value. Should I use datetime.dateime.now() instead?\n\nThe environment:\nCentOS7\nFreeTDS 0.95\nDjango==1.8.7\ndjango-pyodbc-azure==1.8.7.0\npyodbc==3.0.10\nSQLServer 2008R2\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/46", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/46/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/46/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/46", "id": 116562294, "node_id": "MDU6SXNzdWUxMTY1NjIyOTQ=", "number": 46, "title": "rollback error with previously working configuration - line 389", "user": {"login": "FlipperPA", "id": 68164, "node_id": "MDQ6VXNlcjY4MTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/68164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FlipperPA", "html_url": "https://github.com/FlipperPA", "followers_url": "https://api.github.com/users/FlipperPA/followers", "following_url": "https://api.github.com/users/FlipperPA/following{/other_user}", "gists_url": "https://api.github.com/users/FlipperPA/gists{/gist_id}", "starred_url": "https://api.github.com/users/FlipperPA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FlipperPA/subscriptions", "organizations_url": "https://api.github.com/users/FlipperPA/orgs", "repos_url": "https://api.github.com/users/FlipperPA/repos", "events_url": "https://api.github.com/users/FlipperPA/events{/privacy}", "received_events_url": "https://api.github.com/users/FlipperPA/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2015-11-12T14:45:58Z", "updated_at": "2015-11-20T17:00:15Z", "closed_at": "2015-11-20T17:00:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "FYI: I've created an issue on Stack Overflow for this, as well as a new tag `django-pyodbc-azure`. If I get any answers there, I will update here. Link: http://stackoverflow.com/questions/33673470/django-pyodbc-azure-rollback-error-with-previously-working-configuration-line\n\nI've been using django-pyodbc-azure for a while on Linux, along with pydobc, FreeTDS and unixODBC to connect Django to SQL Server 2014. I ran into this problem with an application that had been working fine, and am having trouble debugging it. To reproduce the problem, I started a brand new Django app to keep things simple. Here's my virtualenv:\n\n```\n(azuretest)[vagrant@vagrant azuretest]$ pip freeze\nDjango==1.8.6\ndjango-pyodbc-azure==1.8.3.0\npyodbc==3.0.10\n```\n\nHere's my database config to connect to SQL Server:\n\n```\nDATABASES = {\n    'default': {\n        'ENGINE': 'sql_server.pyodbc',\n        'HOST': 'myserver.com',\n        'PORT': '1433',\n        'NAME': 'my_db',\n        'USER': 'my_db_user',\n        'PASSWORD': 'mypw',\n        'AUTOCOMMIT': True,\n        'OPTIONS': {\n            'driver': 'FreeTDS',\n            'autocommit': True,\n            'unicode_results': True,\n            'host_is_server': True,\n            'extra_params': 'tds_version=7.2',\n        },\n    },\n}\n```\n\nAnd I created a simple models.py:\n\n```\nclass TestTemp(models.Model):\n    tempdate = models.DateField()\n```\n\nThis set up has been working fine in a fairly complex Django project, which can still SELECT to this same database. However, whenever I try to do an UPDATE or migration, I've been getting this error:\n\n```\n(azuretest)[vagrant@vagrant azuretest]$ ./manage.py migrate home\nOperations to perform:\n  Apply all migrations: home\nRunning migrations:\n  Rendering model states... DONE\n  Applying home.0001_initial...Traceback (most recent call last):\n  File \"/home/vagrant/.virtualenvs/azuretest/lib/python3.4/site-packages/sql_server/pyodbc/base.py\", line 389, in _set_aut\nocommit\n    self.connection.rollback()\npyodbc.Error: ('HY000', 'The driver did not supply an error!')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"./manage.py\", line 10, in <module>\n    execute_from_command_line(sys.argv)\n  File \"/home/vagrant/.virtualenvs/azuretest/lib/python3.4/site-packages/django/core/management/__init__.py\", line 354, in\n execute_from_command_line\n    utility.execute()\n  File \"/home/vagrant/.virtualenvs/azuretest/lib/python3.4/site-packages/django/core/management/__init__.py\", line 346, in\n execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File \"/home/vagrant/.virtualenvs/azuretest/lib/python3.4/site-packages/django/core/management/base.py\", line 394, in run\n_from_argv\n    self.execute(*args, **cmd_options)\n  File \"/home/vagrant/.virtualenvs/azuretest/lib/python3.4/site-packages/django/core/management/base.py\", line 445, in exe\ncute\n    output = self.handle(*args, **options)\n  File \"/home/vagrant/.virtualenvs/azuretest/lib/python3.4/site-packages/django/core/management/commands/migrate.py\", line\n 222, in handle\n    executor.migrate(targets, plan, fake=fake, fake_initial=fake_initial)\n  File \"/home/vagrant/.virtualenvs/azuretest/lib/python3.4/site-packages/django/db/migrations/executor.py\", line 110, in m\nigrate\n    self.apply_migration(states[migration], migration, fake=fake, fake_initial=fake_initial)\n  File \"/home/vagrant/.virtualenvs/azuretest/lib/python3.4/site-packages/django/db/migrations/executor.py\", line 154, in a\npply_migration\n    self.recorder.record_applied(migration.app_label, migration.name)\n  File \"/home/vagrant/.virtualenvs/azuretest/lib/python3.4/site-packages/django/db/migrations/recorder.py\", line 67, in re\ncord_applied\n    self.migration_qs.create(app=app, name=name)\n  File \"/home/vagrant/.virtualenvs/azuretest/lib/python3.4/site-packages/django/db/models/query.py\", line 348, in create\n    obj.save(force_insert=True, using=self.db)\n  File \"/home/vagrant/.virtualenvs/azuretest/lib/python3.4/site-packages/django/db/models/base.py\", line 734, in save\n    force_update=force_update, update_fields=update_fields)\n  File \"/home/vagrant/.virtualenvs/azuretest/lib/python3.4/site-packages/django/db/models/base.py\", line 759, in save_base\n\n    with transaction.atomic(using=using, savepoint=False):\n  File \"/home/vagrant/.virtualenvs/azuretest/lib/python3.4/site-packages/django/db/transaction.py\", line 186, in __enter__\n\n    connection.set_autocommit(False)\n  File \"/home/vagrant/.virtualenvs/azuretest/lib/python3.4/site-packages/django/db/backends/base/base.py\", line 295, in se\nt_autocommit\n    self._set_autocommit(autocommit)\n  File \"/home/vagrant/.virtualenvs/azuretest/lib/python3.4/site-packages/sql_server/pyodbc/base.py\", line 390, in _set_aut\nocommit\n    self.connection.autocommit = autocommit\n  File \"/home/vagrant/.virtualenvs/azuretest/lib/python3.4/site-packages/django/db/utils.py\", line 98, in __exit__\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\n  File \"/home/vagrant/.virtualenvs/azuretest/lib/python3.4/site-packages/django/utils/six.py\", line 658, in reraise\n    raise value.with_traceback(tb)\n  File \"/home/vagrant/.virtualenvs/azuretest/lib/python3.4/site-packages/sql_server/pyodbc/base.py\", line 389, in _set_aut\nocommit\n    self.connection.rollback()\ndjango.db.utils.Error: ('HY000', 'The driver did not supply an error!')\n```\n\nThe weird part is that it successfully creates the table in SQL Server ([home_testtemp]), and seems to be erroring out on an un-necessary rollback. Any ideas on best ways to debug this further or fix the issue? When I run the SQL output by `./manage.py sqlmigrate home` directly against the database logged in with this username and password, it works fine.\n\nThanks in advance.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/45", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/45/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/45/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/45", "id": 113641075, "node_id": "MDU6SXNzdWUxMTM2NDEwNzU=", "number": 45, "title": "Cursor reuse causes 'Connection already closed' errors", "user": {"login": "dan-passaro", "id": 7405774, "node_id": "MDQ6VXNlcjc0MDU3NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/7405774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dan-passaro", "html_url": "https://github.com/dan-passaro", "followers_url": "https://api.github.com/users/dan-passaro/followers", "following_url": "https://api.github.com/users/dan-passaro/following{/other_user}", "gists_url": "https://api.github.com/users/dan-passaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/dan-passaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dan-passaro/subscriptions", "organizations_url": "https://api.github.com/users/dan-passaro/orgs", "repos_url": "https://api.github.com/users/dan-passaro/repos", "events_url": "https://api.github.com/users/dan-passaro/events{/privacy}", "received_events_url": "https://api.github.com/users/dan-passaro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-10-27T17:42:57Z", "updated_at": "2015-12-10T22:08:47Z", "closed_at": "2015-12-10T22:08:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm looking at this:\n\nhttps://github.com/michiya/django-pyodbc-azure/blob/9e74bfd3f69b4946fd0a32f970e5d4d4e4e531cb/sql_server/pyodbc/base.py#L180\n\nWe experienced errors because another package we use, Cachalot, does a database introspection operation which triggers the Django framework to open and close a new cursor if one is not given to it. This is the core Django code:\n\n```\ndef table_names(self, cursor=None, include_views=False):\n    \"\"\"\n    Returns a list of names of all tables that exist in the database.\n    The returned table list is sorted by Python's default sorting. We\n    do NOT use database's ORDER BY here to avoid subtle differences\n    in sorting order between databases.\n    \"\"\"\n    def get_names(cursor):\n        return sorted(ti.name for ti in self.get_table_list(cursor)\n                      if include_views or ti.type == 't')\n    if cursor is None:\n        with self.connection.cursor() as cursor:\n            return get_names(cursor)\n    return get_names(cursor)\n```\n\nDue to the way that django-pyodbc-azure reuses cursors, this was causing a cursor in a totally different function to be closed prematurely.\n\nI surveyed django-pyodbc as well as `django.db.backends.postgresql_psycopg2` and neither of these backends have this same cursor reuse logic. I don't understand all the layers of interacting libraries involved here, but it seems this is uncommon and perhaps buggy behavior in django-pyodbc-azure. I am going to fork and change this behavior; if you'd like a pull request please let me know!\n\nAnd thank you so much for the work on this fantastic library, our upgrade to Django 1.8 is only possible thanks to your work updating django-pyodbc!! :)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/44", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/44/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/44/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/44", "id": 107790703, "node_id": "MDU6SXNzdWUxMDc3OTA3MDM=", "number": 44, "title": "Returning Django DateTimeField() as Python datetime object?", "user": {"login": "FlipperPA", "id": 68164, "node_id": "MDQ6VXNlcjY4MTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/68164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FlipperPA", "html_url": "https://github.com/FlipperPA", "followers_url": "https://api.github.com/users/FlipperPA/followers", "following_url": "https://api.github.com/users/FlipperPA/following{/other_user}", "gists_url": "https://api.github.com/users/FlipperPA/gists{/gist_id}", "starred_url": "https://api.github.com/users/FlipperPA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FlipperPA/subscriptions", "organizations_url": "https://api.github.com/users/FlipperPA/orgs", "repos_url": "https://api.github.com/users/FlipperPA/repos", "events_url": "https://api.github.com/users/FlipperPA/events{/privacy}", "received_events_url": "https://api.github.com/users/FlipperPA/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-09-22T20:04:32Z", "updated_at": "2017-01-05T10:31:14Z", "closed_at": "2017-01-05T10:31:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "In Postgres (and other DBs), DateTimeField() fields are returned as datetime objects. I may be missing something, but here's the issue I'm having. I'm running Django 1.7.9 on Python 3.3.5 with SQL Server 2014 over FreeTDS 0.91 and pyodbc. I have a DateTimeField:\n\n```\nbegin_date = models.DateTimeField(db_column='period_begin_date')\n```\n\nAfter migrating, it appears in the database as:\n\n```\nperiod_begin_date(datetime2(7), not null)\n```\n\nSo far, so good. When I insert fields, they're getting inserted correctly into SQL Server. However, when I get an object from the Python shell:\n\n```\n----> 1 print(bt.begin_period.month)\nAttributeError: 'Period' object has no attribute 'month'\n```\n\nAny ideas why? Is it the FreeTDS version conflicting on types?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/42", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/42/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/42/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/42", "id": 106664091, "node_id": "MDU6SXNzdWUxMDY2NjQwOTE=", "number": 42, "title": "Getting started on Mac OS X Yosemite", "user": {"login": "meet-bhagdev", "id": 11928821, "node_id": "MDQ6VXNlcjExOTI4ODIx", "avatar_url": "https://avatars2.githubusercontent.com/u/11928821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meet-bhagdev", "html_url": "https://github.com/meet-bhagdev", "followers_url": "https://api.github.com/users/meet-bhagdev/followers", "following_url": "https://api.github.com/users/meet-bhagdev/following{/other_user}", "gists_url": "https://api.github.com/users/meet-bhagdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/meet-bhagdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meet-bhagdev/subscriptions", "organizations_url": "https://api.github.com/users/meet-bhagdev/orgs", "repos_url": "https://api.github.com/users/meet-bhagdev/repos", "events_url": "https://api.github.com/users/meet-bhagdev/events{/privacy}", "received_events_url": "https://api.github.com/users/meet-bhagdev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-09-15T22:50:35Z", "updated_at": "2018-04-05T12:57:20Z", "closed_at": "2018-04-05T12:57:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello all,\n\nI am trying to use this on my Mac machine and facing some trouble. Does anyone know how can i get started with a simple Django project based on this backend on my Mac.\n\nI currently have FreeTDS and pyodbc installed in my machine. Is there anyway I can make this work without changing the config files for FreeTDS?\n\nCheers,\nMeet\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/37", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/37/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/37/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/37", "id": 96852744, "node_id": "MDU6SXNzdWU5Njg1Mjc0NA==", "number": 37, "title": "Rollback transaction issue running under freetds", "user": {"login": "reggieriser", "id": 4960757, "node_id": "MDQ6VXNlcjQ5NjA3NTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4960757?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reggieriser", "html_url": "https://github.com/reggieriser", "followers_url": "https://api.github.com/users/reggieriser/followers", "following_url": "https://api.github.com/users/reggieriser/following{/other_user}", "gists_url": "https://api.github.com/users/reggieriser/gists{/gist_id}", "starred_url": "https://api.github.com/users/reggieriser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reggieriser/subscriptions", "organizations_url": "https://api.github.com/users/reggieriser/orgs", "repos_url": "https://api.github.com/users/reggieriser/repos", "events_url": "https://api.github.com/users/reggieriser/events{/privacy}", "received_events_url": "https://api.github.com/users/reggieriser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-07-23T16:27:22Z", "updated_at": "2015-12-09T15:18:48Z", "closed_at": "2015-12-09T15:18:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using freetds 0.95.18 with unixodbc 2.3.2_1 on Mac OS X 10.9.x to talk to a SQL Server 2008 R2 database.  When Django tries to save records to the database, it fails with this error (both with Django 1.7 and Django 1.8 and their corresponding django-pyodbc-azure packages):\n\ndjango.db.utils.ProgrammingError: ('25000', '[25000] [FreeTDS][SQL Server]The ROLLBACK TRANSACTION request has no corresponding BEGIN TRANSACTION. (3903) (SQLEndTran)')\n\nAs far as I can tell, it appears to be coming from the rollback call in the _set_autocommit method in base.py when autocommit is being set to False but no SQL has been issued yet.  For Django 1.7, I was able to work around this issue by overriding _set_autocommit and checking the connection's is_dirty method to prevent a rollback if the transaction wasn't \"dirty\".  But I'm in the process of upgrading to Django 1.8 and it looks like is_dirty is no longer on the base connection class.  Not sure yet what a good fix would be.\n\nWhen running under Windows and the Microsoft \"ODBC Driver 11 for SQL Server\" driver, I don't experience this problem.\n\nI also tried it on a baseline startproject/startapp project and had a similar experience, including when running the \"createsuperuser\" management command.\n\nHere's my DATABASES section for reference:\n\n```\nDATABASES = {\n    'default': {\n        'ENGINE': 'sql_server.pyodbc',\n        'NAME': '-----',\n        'USER': '-----',\n        'PASSWORD': '-----',\n        'HOST': '-----',\n        'PORT': '1433',\n        'OPTIONS': {\n            'driver': 'FreeTDS',\n            'host_is_server': True,\n            'extra_params': 'TDS_VERSION=7.3',\n        }\n    }\n}\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/34", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/34/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/34/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/34", "id": 93252621, "node_id": "MDU6SXNzdWU5MzI1MjYyMQ==", "number": 34, "title": "The column 'id' was specified multiple times for 'X'.", "user": {"login": "GordonFreemem", "id": 3426224, "node_id": "MDQ6VXNlcjM0MjYyMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3426224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GordonFreemem", "html_url": "https://github.com/GordonFreemem", "followers_url": "https://api.github.com/users/GordonFreemem/followers", "following_url": "https://api.github.com/users/GordonFreemem/following{/other_user}", "gists_url": "https://api.github.com/users/GordonFreemem/gists{/gist_id}", "starred_url": "https://api.github.com/users/GordonFreemem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GordonFreemem/subscriptions", "organizations_url": "https://api.github.com/users/GordonFreemem/orgs", "repos_url": "https://api.github.com/users/GordonFreemem/repos", "events_url": "https://api.github.com/users/GordonFreemem/events{/privacy}", "received_events_url": "https://api.github.com/users/GordonFreemem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-07-06T11:11:05Z", "updated_at": "2015-07-06T11:34:15Z", "closed_at": "2015-07-06T11:34:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nafter Upgrading to Django 1.8 I get an error in the Django adminpanel if I browse to to a sub-page on a model-admin (parameter ?p=X). This happens on every model that has more than 1 page.\n\nThe error is \"The column 'id' was specified multiple times for 'X'.\" (where 'id' changes on different models).\n\nThe query it is trying to run is for example:\n\n```\nu'SELECT * FROM (SELECT [fips_address].[id], [fips_address].[address], [fips_address].[address_hex], [fips_address].[subnet_id], [fips_address].[hostname], [fips_address].[state], [fips_address].[usage], [fips_address].[description], [fips_address].[owner_id], [fips_address].[last_change], [fips_subnet].[id], [fips_subnet].[netaddr], [fips_subnet].[netaddr_hex], [fips_subnet].[netmask], [fips_subnet].[gateway], [fips_subnet].[vlan], [fips_subnet].[dhcp], [fips_subnet].[dhcp_start], [fips_subnet].[dhcp_end], [fips_subnet].[usage], [fips_subnet].[owner_id], ROW_NUMBER() OVER (ORDER BY [fips_address].[id] DESC) AS [rn] FROM [fips_address] INNER JOIN [fips_subnet] ON ( [fips_address].[subnet_id] = [fips_subnet].[id] )) AS X WHERE X.rn BETWEEN 101 AND 200 ORDER BY X.rn'\n```\n\nFull Error is:\n\n```\ne ProgrammingError('42000', \"[42000] [FreeTDS][SQL Server]The column 'id' was specified multiple times for 'X'. (8156) (SQLExecDirectW)\")\nself <sql_server.pyodbc.base.CursorWrapper object at 0x7fef9c8c6b10>\n```\n\nSQL-Server Studio returns the same error on the query.\n\nI'm running two maschines: \n\n```\nCentOS7 x86_64\nPython 2.7.5\nDjango==1.8.2 (same with 1.8.1)\ndjango-pyodbc-azure==1.8.1.0\npyodbc==3.0.10\n\nDebian 7 x86_64\nPython 2.7.3\nDjango==1.8.2\ndjango-pyodbc-azure==1.8.1.0\npyodbc==3.0.7\n\nSQL-Server:\nMicrosoft SQL Server 2008 R2 (SP2) - 10.50.4033.0 (X64) \n    Jul  9 2014 16:04:25 \n    Copyright (c) Microsoft Corporation\n    Enterprise Edition (64-bit) on Windows NT 6.1 <X64> (Build 7601: Service Pack 1)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/32", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/32/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/32/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/32", "id": 90706884, "node_id": "MDU6SXNzdWU5MDcwNjg4NA==", "number": 32, "title": "The combination of select_related and offset produces invalid queries on MSSQL V10.50 (2008R2)", "user": {"login": "Phist0ne", "id": 8502259, "node_id": "MDQ6VXNlcjg1MDIyNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/8502259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phist0ne", "html_url": "https://github.com/Phist0ne", "followers_url": "https://api.github.com/users/Phist0ne/followers", "following_url": "https://api.github.com/users/Phist0ne/following{/other_user}", "gists_url": "https://api.github.com/users/Phist0ne/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phist0ne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phist0ne/subscriptions", "organizations_url": "https://api.github.com/users/Phist0ne/orgs", "repos_url": "https://api.github.com/users/Phist0ne/repos", "events_url": "https://api.github.com/users/Phist0ne/events{/privacy}", "received_events_url": "https://api.github.com/users/Phist0ne/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-06-24T15:19:45Z", "updated_at": "2015-06-29T02:20:20Z", "closed_at": "2015-06-29T02:20:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using select_related in combination with offset (slicing) django-pyodbc-azure tries to execute an invalid SQL statement which leads to an exception from the ODBC-driver.\n\nexample:\n\n``` python\nFoo.objects.select_related('bar')[100:200]\n```\n\nwhich will lead to the query:\n\n``` sql\nSELECT * FROM (\n    SELECT [test_foo].[id], [test_foo].[bar_id], [test_foo].[some_field],\n           [test_bar].[id], [test_bar].[some_other_field],\n           ROW_NUMBER() OVER (\n               ORDER BY [test_foo].[some_field] ASC,\n               [test_bar].[some_other_field] ASC\n       ) AS [rn] FROM [test_foo] INNER JOIN [test_bar] ON ( [test_foo].[bar_id] = [test_bar].[id] )\n)\nAS X WHERE X.rn BETWEEN 101 AND 200 ORDER BY X.rn\n```\n\nThis query can not be excecuted because its resultset has 2 columns with the name \"id\".\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/30", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/30/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/30/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/30", "id": 83527656, "node_id": "MDU6SXNzdWU4MzUyNzY1Ng==", "number": 30, "title": "Need to add keyword parameter 'timeout' in call to Database.connect", "user": {"login": "me21", "id": 807120, "node_id": "MDQ6VXNlcjgwNzEyMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/807120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/me21", "html_url": "https://github.com/me21", "followers_url": "https://api.github.com/users/me21/followers", "following_url": "https://api.github.com/users/me21/following{/other_user}", "gists_url": "https://api.github.com/users/me21/gists{/gist_id}", "starred_url": "https://api.github.com/users/me21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/me21/subscriptions", "organizations_url": "https://api.github.com/users/me21/orgs", "repos_url": "https://api.github.com/users/me21/repos", "events_url": "https://api.github.com/users/me21/events{/privacy}", "received_events_url": "https://api.github.com/users/me21/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-06-01T14:28:48Z", "updated_at": "2015-06-03T05:20:48Z", "closed_at": "2015-06-03T05:20:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "The utilized pyodbc library uses keyword parameter 'timeout' in call to 'connect' to set the timeout of connection attempt. Zero value means default timeout, just like without keyword parameter. The value is set in seconds.\n\nIt is desirable to allow the user to set the timeout optionally, perhaps by adding it in 'OPTIONS'.\nExample:\n\n``` python\n    DATABASES = {\n        'default': {\n            'ENGINE': 'sql_server.pyodbc',\n            'NAME': 'guard',\n            'USER': 'test',\n            'PASSWORD': 'test',\n            'OPTIONS': {\n                'driver': 'SQL Server Native Client 10.0',\n                'dsn': 'GuardLocal',\n                'unicode_results': True,\n                'timeout': 1,  # notice this line - one second timeout\n            },\n        },\n    }\n```\n\nThis requires one small change in Database.connect call in base.py. It should be changed from\n\n``` python\nconn = Database.connect(connstr, unicode_results=unicode_results)\n```\n\nto\n\n``` python\nconn = Database.connect(connstr, unicode_results=unicode_results, timeout=options.get('timeout', 0))\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/28", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/28/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/28/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/28", "id": 78140272, "node_id": "MDU6SXNzdWU3ODE0MDI3Mg==", "number": 28, "title": "Very minor issue: (lack of) compatibility with Micosoft ODBC Driver 11 for SQL Server for Linux", "user": {"login": "FlipperPA", "id": 68164, "node_id": "MDQ6VXNlcjY4MTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/68164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FlipperPA", "html_url": "https://github.com/FlipperPA", "followers_url": "https://api.github.com/users/FlipperPA/followers", "following_url": "https://api.github.com/users/FlipperPA/following{/other_user}", "gists_url": "https://api.github.com/users/FlipperPA/gists{/gist_id}", "starred_url": "https://api.github.com/users/FlipperPA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FlipperPA/subscriptions", "organizations_url": "https://api.github.com/users/FlipperPA/orgs", "repos_url": "https://api.github.com/users/FlipperPA/repos", "events_url": "https://api.github.com/users/FlipperPA/events{/privacy}", "received_events_url": "https://api.github.com/users/FlipperPA/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-05-19T15:40:45Z", "updated_at": "2015-09-10T19:06:22Z", "closed_at": "2015-05-25T02:59:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Re: \"Compatible with SQL Server , SQL Server Native Client , <strong>Micosoft ODBC Driver 11 for SQL Server</strong> and FreeTDS ODBC drivers\" on the README.\n\nI've tested a fair amount of drivers against SQL Server 2008 through 2014 with Django. Since Django 1.7, the <strong>Micosoft ODBC Driver 11 for SQL Server</strong> has been problematic due to multithreading features introduced in Django 1.7.\n\nTo get runserver to come up, for example, I had to use the following option:\n\n<code>./manage.py runserver --nothreading</code>\n\nAdditionally, other issues have cropped up, primary with \"SQLRowCount returns 0\" and SQLParam compatibility. More details here: http://stackoverflow.com/questions/28860521/large-select-query-hangs-using-python-and-unixodbc-connecting-to-sql-server\n\nI've switched back to FreeTDS which is working like a charm. We may want to remove the language about supporting the MS ODBC driver on the README unless a solution has been found (I'm happy to issue a PR for the minor change).\n\nThanks for the great work, everyone.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/23", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/23/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/23/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/23", "id": 62355066, "node_id": "MDU6SXNzdWU2MjM1NTA2Ng==", "number": 23, "title": "integer field rendered as decimal ", "user": {"login": "jab3z", "id": 4821049, "node_id": "MDQ6VXNlcjQ4MjEwNDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/4821049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jab3z", "html_url": "https://github.com/jab3z", "followers_url": "https://api.github.com/users/jab3z/followers", "following_url": "https://api.github.com/users/jab3z/following{/other_user}", "gists_url": "https://api.github.com/users/jab3z/gists{/gist_id}", "starred_url": "https://api.github.com/users/jab3z/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jab3z/subscriptions", "organizations_url": "https://api.github.com/users/jab3z/orgs", "repos_url": "https://api.github.com/users/jab3z/repos", "events_url": "https://api.github.com/users/jab3z/events{/privacy}", "received_events_url": "https://api.github.com/users/jab3z/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-03-17T10:24:01Z", "updated_at": "2017-01-10T09:55:37Z", "closed_at": "2017-01-10T09:55:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI'm connected remote to a mssql db using FreeTDS and I have a view with an IntegerField which is set as primary key due to django restrictions. The issue is the field value is not integer as it's supposed to be, but Decimal. Any idea why? And how I can fix this?\n\nRegards,\nDacian\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/22", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/22/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/22/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/22", "id": 57917771, "node_id": "MDU6SXNzdWU1NzkxNzc3MQ==", "number": 22, "title": "Django 1.8 compatibilty", "user": {"login": "MarcoPassanisi", "id": 1755575, "node_id": "MDQ6VXNlcjE3NTU1NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1755575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarcoPassanisi", "html_url": "https://github.com/MarcoPassanisi", "followers_url": "https://api.github.com/users/MarcoPassanisi/followers", "following_url": "https://api.github.com/users/MarcoPassanisi/following{/other_user}", "gists_url": "https://api.github.com/users/MarcoPassanisi/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarcoPassanisi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarcoPassanisi/subscriptions", "organizations_url": "https://api.github.com/users/MarcoPassanisi/orgs", "repos_url": "https://api.github.com/users/MarcoPassanisi/repos", "events_url": "https://api.github.com/users/MarcoPassanisi/events{/privacy}", "received_events_url": "https://api.github.com/users/MarcoPassanisi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-02-17T12:22:29Z", "updated_at": "2016-12-28T10:37:07Z", "closed_at": "2015-04-13T00:58:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "i try to use with django 1.8 alpha but i recived this error when run /manage.py runserver\nPerforming system checks...\n\nUnhandled exception in thread started by <function check_errors.<locals>.wrapper at 0x7fef24903c80>\nTraceback (most recent call last):\n  File \"/home/marco/env/lib/python3.4/site-packages/django/db/utils.py\", line 109, in load_backend\n    return import_module('%s.base' % backend_name)\n  File \"/usr/lib/python3.4/importlib/**init**.py\", line 109, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File \"<frozen importlib._bootstrap>\", line 2254, in _gcd_import\n  File \"<frozen importlib._bootstrap>\", line 2237, in _find_and_load\n  File \"<frozen importlib._bootstrap>\", line 2226, in _find_and_load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 1200, in _load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 1129, in _exec\n  File \"<frozen importlib._bootstrap>\", line 1471, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 321, in _call_with_frames_removed\n  File \"/home/marco/env/lib/python3.4/site-packages/sql_server/pyodbc/base.py\", line 40, in <module>\n    from sql_server.pyodbc.operations import DatabaseOperations\n  File \"/home/marco/env/lib/python3.4/site-packages/sql_server/pyodbc/operations.py\", line 5, in <module>\n    from django.db.backends import BaseDatabaseOperations\nImportError: cannot import name 'BaseDatabaseOperations'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/marco/env/lib/python3.4/site-packages/django/utils/autoreload.py\", line 225, in wrapper\n    fn(_args, *_kwargs)\n  File \"/home/marco/env/lib/python3.4/site-packages/django/core/management/commands/runserver.py\", line 111, in inner_ru\nn\n    self.validate(display_num_errors=True)\n  File \"/home/marco/env/lib/python3.4/site-packages/django/core/management/base.py\", line 465, in validate\n    return self.check(app_configs=app_configs, display_num_errors=display_num_errors)\n  File \"/home/marco/env/lib/python3.4/site-packages/django/core/management/base.py\", line 478, in check\n    include_deployment_checks=include_deployment_checks,\n  File \"/home/marco/env/lib/python3.4/site-packages/django/core/checks/registry.py\", line 72, in run_checks\n    new_errors = check(app_configs=app_configs)\n  File \"/home/marco/env/lib/python3.4/site-packages/django/core/checks/model_checks.py\", line 28, in check_all_models\n    errors.extend(model.check(**kwargs))\n  File \"/home/marco/env/lib/python3.4/site-packages/django/db/models/base.py\", line 1166, in check\n    errors.extend(cls._check_long_column_names())\n  File \"/home/marco/env/lib/python3.4/site-packages/django/db/models/base.py\", line 1567, in _check_long_column_names\n    connection = connections[db]\n  File \"/home/marco/env/lib/python3.4/site-packages/django/db/utils.py\", line 238, in __getitem__\n    backend = load_backend(db['ENGINE'])\n  File \"/home/marco/env/lib/python3.4/site-packages/django/db/utils.py\", line 127, in load_backend\n    raise ImproperlyConfigured(error_msg)\ndjango.core.exceptions.ImproperlyConfigured: 'sql_server.pyodbc' isn't an available database backend.\nTry using 'django.db.backends.XXX', where XXX is one of:\n    'base', 'mysql', 'oracle', 'postgresql_psycopg2', 'sqlite3'\nError was: cannot import name 'BaseDatabaseOperations'\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/19", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/19/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/19/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/19", "id": 56921287, "node_id": "MDU6SXNzdWU1NjkyMTI4Nw==", "number": 19, "title": "Invalid object name 'information_schema.table_constraints'", "user": {"login": "kilrogg", "id": 980899, "node_id": "MDQ6VXNlcjk4MDg5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/980899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kilrogg", "html_url": "https://github.com/kilrogg", "followers_url": "https://api.github.com/users/kilrogg/followers", "following_url": "https://api.github.com/users/kilrogg/following{/other_user}", "gists_url": "https://api.github.com/users/kilrogg/gists{/gist_id}", "starred_url": "https://api.github.com/users/kilrogg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kilrogg/subscriptions", "organizations_url": "https://api.github.com/users/kilrogg/orgs", "repos_url": "https://api.github.com/users/kilrogg/repos", "events_url": "https://api.github.com/users/kilrogg/events{/privacy}", "received_events_url": "https://api.github.com/users/kilrogg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-02-07T18:50:10Z", "updated_at": "2015-02-10T01:23:54Z", "closed_at": "2015-02-10T01:23:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\n\nI am using Django 1.7.4 with django-pyodbc-azure 1.2.4.\n\nWhen i create my database with a collation that is case sensitive (e.g. SQL_Latin1_General_CP1_CS_AS) the schema information command fails with the error above.\n\nFix would be to correctly UPPERCASE the table name.\n\nPull request follows.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/18", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/18/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/18/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/18", "id": 44258070, "node_id": "MDU6SXNzdWU0NDI1ODA3MA==", "number": 18, "title": "Document unicode_results", "user": {"login": "olivergeorge", "id": 99447, "node_id": "MDQ6VXNlcjk5NDQ3", "avatar_url": "https://avatars3.githubusercontent.com/u/99447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olivergeorge", "html_url": "https://github.com/olivergeorge", "followers_url": "https://api.github.com/users/olivergeorge/followers", "following_url": "https://api.github.com/users/olivergeorge/following{/other_user}", "gists_url": "https://api.github.com/users/olivergeorge/gists{/gist_id}", "starred_url": "https://api.github.com/users/olivergeorge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olivergeorge/subscriptions", "organizations_url": "https://api.github.com/users/olivergeorge/orgs", "repos_url": "https://api.github.com/users/olivergeorge/repos", "events_url": "https://api.github.com/users/olivergeorge/events{/privacy}", "received_events_url": "https://api.github.com/users/olivergeorge/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-09-29T05:17:18Z", "updated_at": "2014-10-07T09:53:36Z", "closed_at": "2014-10-07T09:53:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was getting errors and the `unicode_results` option resolved the problem.  I don't think it's well documented.\n\n```\nDjangoUnicodeDecodeError at /Person/1425/edit/\n'utf8' codec can't decode byte 0xd1 in position 5: invalid continuation byte. You passed in 'BRICE\\xd1O' (<type 'str'>)\n```\n\nThis is where I came across a solution:\nhttp://stackoverflow.com/a/23013914\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/16", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/16/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/16/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/16", "id": 43583345, "node_id": "MDU6SXNzdWU0MzU4MzM0NQ==", "number": 16, "title": "Trouble running tests with Django 1.7", "user": {"login": "olivergeorge", "id": 99447, "node_id": "MDQ6VXNlcjk5NDQ3", "avatar_url": "https://avatars3.githubusercontent.com/u/99447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olivergeorge", "html_url": "https://github.com/olivergeorge", "followers_url": "https://api.github.com/users/olivergeorge/followers", "following_url": "https://api.github.com/users/olivergeorge/following{/other_user}", "gists_url": "https://api.github.com/users/olivergeorge/gists{/gist_id}", "starred_url": "https://api.github.com/users/olivergeorge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olivergeorge/subscriptions", "organizations_url": "https://api.github.com/users/olivergeorge/orgs", "repos_url": "https://api.github.com/users/olivergeorge/repos", "events_url": "https://api.github.com/users/olivergeorge/events{/privacy}", "received_events_url": "https://api.github.com/users/olivergeorge/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-09-23T02:26:53Z", "updated_at": "2014-10-27T12:32:47Z", "closed_at": "2014-10-27T12:32:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello\n\nWhen I run tests on one of my apps it reports \"Programming error: attempt to use closed cursor\".  My  tests are essentially empty.  I'm running on Windows using SQL Server as the database.\n\n```\nDjango==1.7\ndjango-pyodbc-azure==1.2.0\npyodbc==3.0.7\n```\n\nI did a little exploratory debugging.  The error happens when run_tests (in django/test/runner.py) calls teardown_databases().  It seems that old_config no longer has a connection associated with the sql_server.pyodbc.base.DatabaseWrapper object at the time it calls teardown_database.  \n\nI see issues reported on django-pyodbc due to changes in 1.7 which end up with the same error which makes me suspect it's related to the latest version.  The fixes discussed there appear to be things you've already done (I think).\n\nhttps://github.com/lionheart/django-pyodbc/issues/52\n\nMy workaround is to comment out the teardown_database call in my development environment:\n\n```\n    def run_tests(self, test_labels, extra_tests=None, **kwargs):\n        \"\"\"\n        Run the unit tests for all the test labels in the provided list.\n\n        Test labels should be dotted Python paths to test modules, test\n        classes, or test methods.\n\n        A list of 'extra' tests may also be provided; these tests\n        will be added to the test suite.\n\n        Returns the number of tests that failed.\n        \"\"\"\n        self.setup_test_environment()\n        suite = self.build_suite(test_labels, extra_tests)\n        old_config = self.setup_databases()\n        result = self.run_suite(suite)\n        # HACK: self.teardown_databases(old_config) ## COMMENTED THIS OUT\n        self.teardown_test_environment()\n        return self.suite_result(suite, result)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/15", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/15/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/15/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/15", "id": 40276293, "node_id": "MDU6SXNzdWU0MDI3NjI5Mw==", "number": 15, "title": "CommandError: Unable to serialize database: 'unicode' object has no attribute 'isoformat'", "user": {"login": "sivaa", "id": 2163422, "node_id": "MDQ6VXNlcjIxNjM0MjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/2163422?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sivaa", "html_url": "https://github.com/sivaa", "followers_url": "https://api.github.com/users/sivaa/followers", "following_url": "https://api.github.com/users/sivaa/following{/other_user}", "gists_url": "https://api.github.com/users/sivaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/sivaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sivaa/subscriptions", "organizations_url": "https://api.github.com/users/sivaa/orgs", "repos_url": "https://api.github.com/users/sivaa/repos", "events_url": "https://api.github.com/users/sivaa/events{/privacy}", "received_events_url": "https://api.github.com/users/sivaa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2014-08-14T17:09:16Z", "updated_at": "2015-07-16T02:09:44Z", "closed_at": "2015-07-16T02:09:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "The dumpdata command fails with the following error when the given Model has DateField()\n\nModel Field:\n\n```\nregistered_date      =   models.DateField()\n```\n\nCommand Used:\n\n```\npython manage.py dumpdata our_app.Model\n```\n\nError Received\n\n```\nCommandError: Unable to serialize database: 'unicode' object has no attribute 'isoformat'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/13", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/13/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/13/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/13", "id": 31456529, "node_id": "MDU6SXNzdWUzMTQ1NjUyOQ==", "number": 13, "title": "Support for schema migration in upcoming Django 1.7", "user": {"login": "shlomiassaf", "id": 5377501, "node_id": "MDQ6VXNlcjUzNzc1MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/5377501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shlomiassaf", "html_url": "https://github.com/shlomiassaf", "followers_url": "https://api.github.com/users/shlomiassaf/followers", "following_url": "https://api.github.com/users/shlomiassaf/following{/other_user}", "gists_url": "https://api.github.com/users/shlomiassaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/shlomiassaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shlomiassaf/subscriptions", "organizations_url": "https://api.github.com/users/shlomiassaf/orgs", "repos_url": "https://api.github.com/users/shlomiassaf/repos", "events_url": "https://api.github.com/users/shlomiassaf/events{/privacy}", "received_events_url": "https://api.github.com/users/shlomiassaf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-04-14T12:21:22Z", "updated_at": "2014-09-07T03:04:22Z", "closed_at": "2014-09-07T03:04:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nAre you guys planning to support the native migration API implemented in Django 1.7?\n\nSince \"South\" is not longer maintained and now fully ported into native Django it means no MS-SQL support.\n\nThe new API expects the db backend to provide a set of schema change functions...\nhttps://groups.google.com/d/msg/south-users/AvtbWkIbQjk/DjOyb3eYll8J\n\nThanks,\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/12", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/12/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/12/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/12", "id": 31317019, "node_id": "MDU6SXNzdWUzMTMxNzAxOQ==", "number": 12, "title": "DjangoUnicodeDecodeError: 'utf8' codec can't decode byte", "user": {"login": "toscanelli", "id": 6474221, "node_id": "MDQ6VXNlcjY0NzQyMjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6474221?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toscanelli", "html_url": "https://github.com/toscanelli", "followers_url": "https://api.github.com/users/toscanelli/followers", "following_url": "https://api.github.com/users/toscanelli/following{/other_user}", "gists_url": "https://api.github.com/users/toscanelli/gists{/gist_id}", "starred_url": "https://api.github.com/users/toscanelli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toscanelli/subscriptions", "organizations_url": "https://api.github.com/users/toscanelli/orgs", "repos_url": "https://api.github.com/users/toscanelli/repos", "events_url": "https://api.github.com/users/toscanelli/events{/privacy}", "received_events_url": "https://api.github.com/users/toscanelli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-04-11T10:23:14Z", "updated_at": "2014-04-11T11:48:37Z", "closed_at": "2014-04-11T11:48:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use pyodbc-azure 1.1.5 to connect my django project to a SQL Server db. My client is SQL Server Native Client 11.0\n\nWhen I try to open the corresponging change_list I get this error:\n'utf8' codec can't decode byte 0xd1 in position 4: invalid continuation byte. You passed in 'ESPA\\xd1A' (<type 'str'>)\n\nThe annoying character is \u00d1. I've checked the encoding of my db and I got that is Modern_Spanish_CI_AS which, I believe, is equivalent to 'latin-1' or 'cp1252' (not sure).\n\nI have tried to modify the pyodb\\base.py replacing wherever utf-8 appears to cp1252 or latin1 (following tips described in issue 24), but the error is still referring to utf8.\n\nWhat else can I do? (other than change the backend)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/9", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/9/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/9/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/9", "id": 24919550, "node_id": "MDU6SXNzdWUyNDkxOTU1MA==", "number": 9, "title": "Select Related with slicing fails with a multiple 'id' specified error", "user": {"login": "yoavimoo", "id": 6281051, "node_id": "MDQ6VXNlcjYyODEwNTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/6281051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoavimoo", "html_url": "https://github.com/yoavimoo", "followers_url": "https://api.github.com/users/yoavimoo/followers", "following_url": "https://api.github.com/users/yoavimoo/following{/other_user}", "gists_url": "https://api.github.com/users/yoavimoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoavimoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoavimoo/subscriptions", "organizations_url": "https://api.github.com/users/yoavimoo/orgs", "repos_url": "https://api.github.com/users/yoavimoo/repos", "events_url": "https://api.github.com/users/yoavimoo/events{/privacy}", "received_events_url": "https://api.github.com/users/yoavimoo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-12-31T12:55:28Z", "updated_at": "2014-01-17T01:57:41Z", "closed_at": "2014-01-17T01:57:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Tested on tag 1.0.9\nbut should be relevant for the current master branch as well.\n\nUsing the following models as an example:\nmodels.py:\nfrom django.db import models\n\nclass Hat(models.Model):\nname = models.CharField(max_length=64)\n\nclass Head(models.Model):\nname = models.CharField(max_length=64)\nhat = models.ForeignKey(Hat)\n\ndef **unicode**(self):\n    return \"%s wearing a hat %s\" % (self.name, self.hat.name)\nexecuting the following query:\nHead.objects.select_related(\"hat\").all()[100:200]\n\nResulting error:\nDatabaseError: ('42000', \"[42000] [Microsoft][SQL Server Native Client 10.0][SQLServer]The column 'id' was specified multiple times for 'X'. (8156) (SQLExecDirectW)\")\n\nOptional fix available in:\nhttps://github.com/yoavimoo/django-pyodbc-azure/commit/dc09a3ef7063b704e7ba46b79f973e503be2b5b9\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/8", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/8/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/8/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/8", "id": 24619200, "node_id": "MDU6SXNzdWUyNDYxOTIwMA==", "number": 8, "title": "Fails to insert record into table with triggers on it", "user": {"login": "me21", "id": 807120, "node_id": "MDQ6VXNlcjgwNzEyMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/807120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/me21", "html_url": "https://github.com/me21", "followers_url": "https://api.github.com/users/me21/followers", "following_url": "https://api.github.com/users/me21/following{/other_user}", "gists_url": "https://api.github.com/users/me21/gists{/gist_id}", "starred_url": "https://api.github.com/users/me21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/me21/subscriptions", "organizations_url": "https://api.github.com/users/me21/orgs", "repos_url": "https://api.github.com/users/me21/repos", "events_url": "https://api.github.com/users/me21/events{/privacy}", "received_events_url": "https://api.github.com/users/me21/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-12-20T12:24:34Z", "updated_at": "2013-12-27T11:30:25Z", "closed_at": "2013-12-27T11:30:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I try to insert a record into table with triggers on it (SQL Server 2008), I get the following error:\nThe target table of the DML statement cannot have any enabled triggers if the statement contains an OUTPUT clause without INTO clause.\n\nA similar error has already been discussed and fixed in https://github.com/avidal/django-pyodbc/issues/1. Please merge the fix to your fork.\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/6", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/6/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/6/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/6", "id": 23558441, "node_id": "MDU6SXNzdWUyMzU1ODQ0MQ==", "number": 6, "title": "remove print(sql) from CursorWrapper.execute", "user": {"login": "kwist-sgr", "id": 4199178, "node_id": "MDQ6VXNlcjQxOTkxNzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/4199178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwist-sgr", "html_url": "https://github.com/kwist-sgr", "followers_url": "https://api.github.com/users/kwist-sgr/followers", "following_url": "https://api.github.com/users/kwist-sgr/following{/other_user}", "gists_url": "https://api.github.com/users/kwist-sgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwist-sgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwist-sgr/subscriptions", "organizations_url": "https://api.github.com/users/kwist-sgr/orgs", "repos_url": "https://api.github.com/users/kwist-sgr/repos", "events_url": "https://api.github.com/users/kwist-sgr/events{/privacy}", "received_events_url": "https://api.github.com/users/kwist-sgr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-12-02T08:37:02Z", "updated_at": "2013-12-02T15:13:05Z", "closed_at": "2013-12-02T15:13:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Or leave, but only output when debugging is enabled.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/3", "repository_url": "https://api.github.com/repos/michiya/django-pyodbc-azure", "labels_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/3/comments", "events_url": "https://api.github.com/repos/michiya/django-pyodbc-azure/issues/3/events", "html_url": "https://github.com/michiya/django-pyodbc-azure/issues/3", "id": 19302974, "node_id": "MDU6SXNzdWUxOTMwMjk3NA==", "number": 3, "title": "queryset.extra(order_by=[added_column]) doesn't work", "user": {"login": "shaib", "id": 129187, "node_id": "MDQ6VXNlcjEyOTE4Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/129187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shaib", "html_url": "https://github.com/shaib", "followers_url": "https://api.github.com/users/shaib/followers", "following_url": "https://api.github.com/users/shaib/following{/other_user}", "gists_url": "https://api.github.com/users/shaib/gists{/gist_id}", "starred_url": "https://api.github.com/users/shaib/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shaib/subscriptions", "organizations_url": "https://api.github.com/users/shaib/orgs", "repos_url": "https://api.github.com/users/shaib/repos", "events_url": "https://api.github.com/users/shaib/events{/privacy}", "received_events_url": "https://api.github.com/users/shaib/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2013-09-11T07:18:03Z", "updated_at": "2014-02-12T20:05:55Z", "closed_at": "2013-10-31T08:20:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nTake this little snippet. User is `django.contrib.auth.models.User` (I tried it on Django 1.4):\n\n``` python\nUser.objects.extra(select=dict(lname='lower(last_name)'), order_by=['lname'])\n```\n\nAccording to documentation, this should order the users by their last name, lowercased. It works as advertised on Oracle and Sqlite, but on SQL Server with current django-pyodbc-azure it explodes with\n\n```\n[42S22] [FreeTDS][SQL Server]Invalid column name 'lname'. (207) (SQLExecDirectW)\n```\n\nIt seems that the reason is that the added names are treated as if they were regular columns, which doesn't work with SQL Server. The generated query is:\n\n``` python\n>>> print User.objects.extra(select=dict(lname='lower(last_name)')).extra(order_by=['lname']).query\nSELECT (lower(last_name)) AS [lname], [auth_user].[id], [auth_user].[username], [auth_user].[first_name], [auth_user].[last_name], [auth_user].[email], [auth_user].[password], [auth_user].[is_staff], [auth_user].[is_active], [auth_user].[is_superuser], [auth_user].[last_login], [auth_user].[date_joined] FROM [auth_user] ORDER BY [lname] ASC\n```\n\nNote that things become even worse when slicing is involved:\n\n``` python\n>>> print User.objects.extra(select=dict(lname='lower(last_name)')).extra(order_by=['lname'])[0:10].query\nSELECT * FROM (SELECT (lower(last_name)) AS [lname], [auth_user].[id], [auth_user].[username], [auth_user].[first_name], [auth_user].[last_name], [auth_user].[email], [auth_user].[password], [auth_user].[is_staff], [auth_user].[is_active], [auth_user].[is_superuser], [auth_user].[last_login], [auth_user].[date_joined], (ROW_NUMBER() OVER (ORDER BY [lname] ASC)) AS [rn] FROM [auth_user]) AS X WHERE X.rn BETWEEN 1 AND 10\n```\n\nAlso, it appears that taking the order_by out to a separate `extra` call changes nothing.\n", "performed_via_github_app": null, "score": 1.0}]}