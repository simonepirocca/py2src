{"total_count": 19, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/49", "repository_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture", "labels_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/49/comments", "events_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/49/events", "html_url": "https://github.com/TvoroG/pytest-lazy-fixture/issues/49", "id": 606877956, "node_id": "MDU6SXNzdWU2MDY4Nzc5NTY=", "number": 49, "title": "SINDy defaults are instances of classes", "user": {"login": "billtubbs", "id": 7958850, "node_id": "MDQ6VXNlcjc5NTg4NTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/7958850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/billtubbs", "html_url": "https://github.com/billtubbs", "followers_url": "https://api.github.com/users/billtubbs/followers", "following_url": "https://api.github.com/users/billtubbs/following{/other_user}", "gists_url": "https://api.github.com/users/billtubbs/gists{/gist_id}", "starred_url": "https://api.github.com/users/billtubbs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/billtubbs/subscriptions", "organizations_url": "https://api.github.com/users/billtubbs/orgs", "repos_url": "https://api.github.com/users/billtubbs/repos", "events_url": "https://api.github.com/users/billtubbs/events{/privacy}", "received_events_url": "https://api.github.com/users/billtubbs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-25T23:36:40Z", "updated_at": "2020-04-26T18:42:12Z", "closed_at": "2020-04-26T18:42:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry, I posted this issue in the wrong Repo!  Please delete.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/48", "repository_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture", "labels_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/48/comments", "events_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/48/events", "html_url": "https://github.com/TvoroG/pytest-lazy-fixture/issues/48", "id": 551416656, "node_id": "MDU6SXNzdWU1NTE0MTY2NTY=", "number": 48, "title": "Broken by pytest 5.3.3", "user": {"login": "YannickJadoul", "id": 8025744, "node_id": "MDQ6VXNlcjgwMjU3NDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/8025744?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YannickJadoul", "html_url": "https://github.com/YannickJadoul", "followers_url": "https://api.github.com/users/YannickJadoul/followers", "following_url": "https://api.github.com/users/YannickJadoul/following{/other_user}", "gists_url": "https://api.github.com/users/YannickJadoul/gists{/gist_id}", "starred_url": "https://api.github.com/users/YannickJadoul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YannickJadoul/subscriptions", "organizations_url": "https://api.github.com/users/YannickJadoul/orgs", "repos_url": "https://api.github.com/users/YannickJadoul/repos", "events_url": "https://api.github.com/users/YannickJadoul/events{/privacy}", "received_events_url": "https://api.github.com/users/YannickJadoul/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-17T13:30:39Z", "updated_at": "2020-01-21T16:13:55Z", "closed_at": "2020-01-21T16:11:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I haven't had time to investigate why, but it seems that the pytest 5.3.3 release broke pytest-lazy-fixture:\r\n\r\nRunning the basic example from the README\r\n\r\n```python\r\nimport pytest\r\n\r\n@pytest.fixture(params=[1, 2])\r\ndef one(request):\r\n    return request.param\r\n\r\n@pytest.mark.parametrize('arg1,arg2', [\r\n    ('val1', pytest.lazy_fixture('one')),\r\n])\r\ndef test_func(arg1, arg2):\r\n    assert arg2 in [1, 2]\r\n```\r\n\r\nresults in the following error:\r\n\r\n```\r\n$ pytest test_lazy_fixture.py \r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.6.9, pytest-5.3.3, py-1.7.0, pluggy-0.12.0\r\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/yannick/.hypothesis/examples')\r\nrootdir: /home/yannick\r\nplugins: xonsh-0.9.6, lazy-fixture-0.6.2, hypothesis-4.34.0\r\ncollected 2 items                                                              \r\n\r\ntest_lazy_fixture.py EE                                                  [100%]\r\n\r\n==================================== ERRORS ====================================\r\n__________________ ERROR at setup of test_func[val1-arg20-1] ___________________\r\nfile /home/yannick/test_lazy_fixture.py, line 7\r\n  @pytest.mark.parametrize('arg1,arg2', [\r\n      ('val1', pytest.lazy_fixture('one')),\r\n  ])\r\n  def test_func(arg1, arg2):\r\nfile /home/yannick/test_lazy_fixture.py, line 3\r\n  @pytest.fixture(params=[1, 2])\r\n  def one(request):\r\nfile /home/yannick/.local/lib/python3.6/site-packages/_pytest/fixtures.py, line 297\r\n  def get_direct_param_fixture_func(request):\r\nE       recursive dependency involving fixture 'one' detected\r\n>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, one, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\r\n>       use 'pytest --fixtures [testpath]' for help on them.\r\n\r\n/home/yannick/.local/lib/python3.6/site-packages/_pytest/fixtures.py:297\r\n__________________ ERROR at setup of test_func[val1-arg20-2] ___________________\r\nfile /home/yannick/test_lazy_fixture.py, line 7\r\n  @pytest.mark.parametrize('arg1,arg2', [\r\n      ('val1', pytest.lazy_fixture('one')),\r\n  ])\r\n  def test_func(arg1, arg2):\r\nfile /home/yannick/test_lazy_fixture.py, line 3\r\n  @pytest.fixture(params=[1, 2])\r\n  def one(request):\r\nfile /home/yannick/.local/lib/python3.6/site-packages/_pytest/fixtures.py, line 297\r\n  def get_direct_param_fixture_func(request):\r\nE       recursive dependency involving fixture 'one' detected\r\n>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, one, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\r\n>       use 'pytest --fixtures [testpath]' for help on them.\r\n\r\n/home/yannick/.local/lib/python3.6/site-packages/_pytest/fixtures.py:297\r\n============================== 2 errors in 0.02s ===============================\r\n```\r\n\r\nIf I have time, I'll have a closer look and report back on my findings.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/46", "repository_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture", "labels_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/46/comments", "events_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/46/events", "html_url": "https://github.com/TvoroG/pytest-lazy-fixture/issues/46", "id": 551033683, "node_id": "MDU6SXNzdWU1NTEwMzM2ODM=", "number": 46, "title": "Use fixture names to generate test ids?", "user": {"login": "avirshup", "id": 9388007, "node_id": "MDQ6VXNlcjkzODgwMDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/9388007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avirshup", "html_url": "https://github.com/avirshup", "followers_url": "https://api.github.com/users/avirshup/followers", "following_url": "https://api.github.com/users/avirshup/following{/other_user}", "gists_url": "https://api.github.com/users/avirshup/gists{/gist_id}", "starred_url": "https://api.github.com/users/avirshup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avirshup/subscriptions", "organizations_url": "https://api.github.com/users/avirshup/orgs", "repos_url": "https://api.github.com/users/avirshup/repos", "events_url": "https://api.github.com/users/avirshup/events{/privacy}", "received_events_url": "https://api.github.com/users/avirshup/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-16T20:22:11Z", "updated_at": "2020-02-01T18:08:12Z", "closed_at": "2020-01-17T21:47:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "First off, thank you for writing this plugin, it fixes problems that have been bugging me for _years_.\r\n\r\nGiven the following tests:\r\n```python\r\nimport pytest\r\nfrom pytest_lazyfixture import lazy_fixture\r\n\r\n@pytest.fixture()\r\ndef foo():\r\n    return \"foo\"\r\n\r\n@pytest.fixture(params=['spam', 'eggs'])\r\ndef bar(request):\r\n    return f\"bar-{request.param}\"\r\n\r\n@pytest.mark.parametrize(\"data\", [lazy_fixture(\"foo\"),\r\n                                  lazy_fixture(\"bar\")])\r\ndef test_the_thing(data):\r\n    assert False    \r\n```\r\n\r\nPytest generates the following test names:\r\n```bash\r\n> py.test test_lazy.py --collect-only\r\n===================== test session starts =====================\r\nplatform darwin -- Python 3.7.6, pytest-5.3.2, py-1.8.1, pluggy-0.13.1\r\nrootdir: /tmp\r\nplugins: xdist-1.26.1, flask-0.14.0, lazy-fixture-0.6.2, forked-1.1.3\r\ncollected 3 items                                                                                                            \r\n<Module test_lazy.py>\r\n  <Function test_the_thing[data0]>\r\n  <Function test_the_thing[data1-spam]>\r\n  <Function test_the_thing[data1-eggs]>\r\n```\r\n\r\nWould it be possible to use the fixture name to generate these ids? It would be great to end up with these names instead:\r\n```\r\ntest_the_thing[foo]\r\ntest_the_thing[bar-spam]\r\ntest_the_thing[bar-eggs]", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/44", "repository_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture", "labels_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/44/comments", "events_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/44/events", "html_url": "https://github.com/TvoroG/pytest-lazy-fixture/issues/44", "id": 525670231, "node_id": "MDU6SXNzdWU1MjU2NzAyMzE=", "number": 44, "title": "error with pytest==5.3.0", "user": {"login": "discosultan", "id": 2970736, "node_id": "MDQ6VXNlcjI5NzA3MzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/2970736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/discosultan", "html_url": "https://github.com/discosultan", "followers_url": "https://api.github.com/users/discosultan/followers", "following_url": "https://api.github.com/users/discosultan/following{/other_user}", "gists_url": "https://api.github.com/users/discosultan/gists{/gist_id}", "starred_url": "https://api.github.com/users/discosultan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/discosultan/subscriptions", "organizations_url": "https://api.github.com/users/discosultan/orgs", "repos_url": "https://api.github.com/users/discosultan/repos", "events_url": "https://api.github.com/users/discosultan/events{/privacy}", "received_events_url": "https://api.github.com/users/discosultan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-20T09:11:48Z", "updated_at": "2019-11-20T11:03:20Z", "closed_at": "2019-11-20T11:03:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Getting the following error after updating from `pytest==5.2.4` to `pytest==5.3.0`. Using latest `pytest-lazy-fixture`. \r\n```\r\n../../.pyenv/versions/3.8.0/lib/python3.8/site-packages/pluggy/hooks.py:286: in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\n../../.pyenv/versions/3.8.0/lib/python3.8/site-packages/pluggy/manager.py:92: in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n../../.pyenv/versions/3.8.0/lib/python3.8/site-packages/pluggy/manager.py:83: in <lambda>\r\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\n../../.pyenv/versions/3.8.0/lib/python3.8/site-packages/_pytest/python.py:208: in pytest_pycollect_makeitem\r\n    res = outcome.get_result()\r\n../../.pyenv/versions/3.8.0/lib/python3.8/site-packages/aiohttp/pytest_plugin.py:155: in pytest_pycollect_makeitem\r\n    return list(collector._genfunctions(name, obj))\r\n../../.pyenv/versions/3.8.0/lib/python3.8/site-packages/_pytest/python.py:404: in _genfunctions\r\n    self.ihook.pytest_generate_tests.call_extra(methods, dict(metafunc=metafunc))\r\n../../.pyenv/versions/3.8.0/lib/python3.8/site-packages/pluggy/hooks.py:324: in call_extra\r\n    return self(**kwargs)\r\n../../.pyenv/versions/3.8.0/lib/python3.8/site-packages/pluggy/hooks.py:286: in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\n../../.pyenv/versions/3.8.0/lib/python3.8/site-packages/pluggy/manager.py:92: in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n../../.pyenv/versions/3.8.0/lib/python3.8/site-packages/pluggy/manager.py:83: in <lambda>\r\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\n../../.pyenv/versions/3.8.0/lib/python3.8/site-packages/pytest_lazyfixture.py:69: in pytest_generate_tests\r\n    normalize_metafunc_calls(metafunc, 'funcargs')\r\n../../.pyenv/versions/3.8.0/lib/python3.8/site-packages/pytest_lazyfixture.py:76: in normalize_metafunc_calls\r\n    calls = normalize_call(callspec, metafunc, valtype, used_keys)\r\n../../.pyenv/versions/3.8.0/lib/python3.8/site-packages/pytest_lazyfixture.py:111: in normalize_call\r\n    newmetafunc = copy_metafunc(metafunc)\r\n../../.pyenv/versions/3.8.0/lib/python3.8/site-packages/pytest_lazyfixture.py:85: in copy_metafunc\r\n    copied._ids = copy.copy(metafunc._ids)\r\nE   AttributeError: 'Metafunc' object has no attribute '_ids'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/42", "repository_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture", "labels_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/42/comments", "events_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/42/events", "html_url": "https://github.com/TvoroG/pytest-lazy-fixture/issues/42", "id": 506707961, "node_id": "MDU6SXNzdWU1MDY3MDc5NjE=", "number": 42, "title": "Fixture with numpy array as value fails on 0.6.0", "user": {"login": "jorisvandenbossche", "id": 1020496, "node_id": "MDQ6VXNlcjEwMjA0OTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jorisvandenbossche", "html_url": "https://github.com/jorisvandenbossche", "followers_url": "https://api.github.com/users/jorisvandenbossche/followers", "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}", "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}", "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions", "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs", "repos_url": "https://api.github.com/users/jorisvandenbossche/repos", "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}", "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-14T14:58:14Z", "updated_at": "2019-10-14T15:56:46Z", "closed_at": "2019-10-14T15:56:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "This seems related to https://github.com/pytest-dev/pytest/issues/5946 (which is already fixed on pytest master), but it is still failing with the latest lazy-fixtures (pinning to 0.5.2 fixes it).\r\n\r\nTest script (variation of the one in https://github.com/pytest-dev/pytest/issues/5946):\r\n```\r\nimport numpy as np\r\nimport pytest\r\n\r\n\r\n@pytest.mark.parametrize(\r\n    'value',\r\n    [\r\n        np.arange(10, dtype=np.int64),\r\n        np.arange(10, dtype=np.int32),\r\n    ]\r\n)\r\ndef test_bug(value):\r\n    assert isinstance(value, np.ndarray)\r\n```\r\n\r\nand this fails with:\r\n\r\n```\r\n$ pytest test_pytest_bug.py -v\r\n==================================================================== test session starts =====================================================================\r\nplatform linux -- Python 3.7.3, pytest-5.2.2.dev23+ga20880cca, py-1.8.0, pluggy-0.12.0 -- /home/joris/miniconda3/envs/arrow-dev/bin/python\r\ncachedir: .pytest_cache\r\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/joris/scipy/.hypothesis/examples')\r\nrootdir: /home/joris/scipy\r\nplugins: hypothesis-4.24.2, lazy-fixture-0.6.0\r\ncollected 2 items                                                                                                                                            \r\n\r\ntest_pytest_bug.py::test_bug[value0] ERROR                                                                                                             [ 50%]\r\ntest_pytest_bug.py::test_bug[value1] ERROR                                                                                                             [100%]\r\n\r\n=========================================================================== ERRORS ===========================================================================\r\n_____________________________________________________________ ERROR at setup of test_bug[value0] _____________________________________________________________\r\n\r\nrequest = <FixtureRequest for <Function test_bug[value0]>>\r\n\r\n    def fill(request):\r\n        item = request._pyfuncitem\r\n        fixturenames = getattr(item, \"fixturenames\", None)\r\n        if fixturenames is None:\r\n            fixturenames = request.fixturenames\r\n    \r\n        if hasattr(item, 'callspec'):\r\n>           for param, val in sorted_by_dependency(item.callspec.params, fixturenames):\r\n\r\n../miniconda3/envs/arrow-dev/lib/python3.7/site-packages/pytest_lazyfixture.py:33: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nparams = {'value': array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])}, fixturenames = ['value']\r\n\r\n    def sorted_by_dependency(params, fixturenames):\r\n        free_fm = []\r\n        non_free_fm = defaultdict(list)\r\n    \r\n        for key in _sorted_argnames(params, fixturenames):\r\n            val = params.get(key)\r\n    \r\n>           if not val or not is_lazy_fixture(val) or val.name not in params:\r\nE           ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\r\n\r\n../miniconda3/envs/arrow-dev/lib/python3.7/site-packages/pytest_lazyfixture.py:130: ValueError\r\n_____________________________________________________________ ERROR at setup of test_bug[value1] _____________________________________________________________\r\n\r\nrequest = <FixtureRequest for <Function test_bug[value1]>>\r\n\r\n    def fill(request):\r\n        item = request._pyfuncitem\r\n        fixturenames = getattr(item, \"fixturenames\", None)\r\n        if fixturenames is None:\r\n            fixturenames = request.fixturenames\r\n    \r\n        if hasattr(item, 'callspec'):\r\n>           for param, val in sorted_by_dependency(item.callspec.params, fixturenames):\r\n\r\n../miniconda3/envs/arrow-dev/lib/python3.7/site-packages/pytest_lazyfixture.py:33: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nparams = {'value': array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=int32)}, fixturenames = ['value']\r\n\r\n    def sorted_by_dependency(params, fixturenames):\r\n        free_fm = []\r\n        non_free_fm = defaultdict(list)\r\n    \r\n        for key in _sorted_argnames(params, fixturenames):\r\n            val = params.get(key)\r\n    \r\n>           if not val or not is_lazy_fixture(val) or val.name not in params:\r\nE           ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\r\n\r\n../miniconda3/envs/arrow-dev/lib/python3.7/site-packages/pytest_lazyfixture.py:130: ValueError\r\n====================================================================== 2 error in 0.09s ======================================================================\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/39", "repository_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture", "labels_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/39/comments", "events_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/39/events", "html_url": "https://github.com/TvoroG/pytest-lazy-fixture/issues/39", "id": 498149891, "node_id": "MDU6SXNzdWU0OTgxNDk4OTE=", "number": 39, "title": "lazy-fixture-0.5.2: function fixture runs before module fixture", "user": {"login": "lenvk", "id": 40741342, "node_id": "MDQ6VXNlcjQwNzQxMzQy", "avatar_url": "https://avatars3.githubusercontent.com/u/40741342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lenvk", "html_url": "https://github.com/lenvk", "followers_url": "https://api.github.com/users/lenvk/followers", "following_url": "https://api.github.com/users/lenvk/following{/other_user}", "gists_url": "https://api.github.com/users/lenvk/gists{/gist_id}", "starred_url": "https://api.github.com/users/lenvk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lenvk/subscriptions", "organizations_url": "https://api.github.com/users/lenvk/orgs", "repos_url": "https://api.github.com/users/lenvk/repos", "events_url": "https://api.github.com/users/lenvk/events{/privacy}", "received_events_url": "https://api.github.com/users/lenvk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-09-25T09:04:42Z", "updated_at": "2019-10-15T08:48:39Z", "closed_at": "2019-10-15T08:48:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "pytest-5.1.3\r\nlazy-fixture-0.5.2\r\n\r\n\r\nExample:\r\n```\r\nimport pytest\r\nfrom pytest_lazyfixture import lazy_fixture\r\n\r\n@pytest.fixture(scope=\"module\")\r\ndef module_fixture():\r\n    print('using module fixture')\r\n\r\n@pytest.fixture\r\ndef fixture1():\r\n    print(\"using fixture1\")\r\n\r\n@pytest.fixture\r\ndef fixture2():\r\n    print(\"using fixture2\")\r\n\r\n@pytest.mark.usefixtures(\"module_fixture\")\r\n@pytest.mark.parametrize(\"fixt\", [lazy_fixture(\"fixture1\"), lazy_fixture(\"fixture2\")])\r\ndef test_test(fixt):\r\n    pass\r\n```\r\noutput\r\n```\r\nsmoke/test_test.py::test_test[fixt0] using fixture1\r\nusing module fixture\r\nPASSED\r\nsmoke/test_test.py::test_test[fixt1] using fixture2\r\nPASSED\r\n```\r\nThere is strange order - **fixture1, module fixture, fixture2**\r\n\r\nSame example without using lazy_fixture:\r\n```\r\n@pytest.mark.usefixtures(\"module_fixture\")\r\ndef test_test1(fixture1):\r\n    pass\r\n\r\n\r\n@pytest.mark.usefixtures(\"module_fixture\")\r\ndef test_test2(fixture2):\r\n    pass\r\n```\r\noutput:\r\n```\r\nsmoke/test_test.py::test_test1 using module fixture\r\nusing fixture1\r\nPASSED\r\nsmoke/test_test.py::test_test2 using fixture2\r\nPASSED\r\n```\r\nExecuting order looks as designed - **module fixture, fixture1, fixture2**", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/38", "repository_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture", "labels_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/38/comments", "events_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/38/events", "html_url": "https://github.com/TvoroG/pytest-lazy-fixture/issues/38", "id": 432097265, "node_id": "MDU6SXNzdWU0MzIwOTcyNjU=", "number": 38, "title": "0.5.2 problem with pytest-asyncio ", "user": {"login": "youknowone", "id": 69878, "node_id": "MDQ6VXNlcjY5ODc4", "avatar_url": "https://avatars1.githubusercontent.com/u/69878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/youknowone", "html_url": "https://github.com/youknowone", "followers_url": "https://api.github.com/users/youknowone/followers", "following_url": "https://api.github.com/users/youknowone/following{/other_user}", "gists_url": "https://api.github.com/users/youknowone/gists{/gist_id}", "starred_url": "https://api.github.com/users/youknowone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/youknowone/subscriptions", "organizations_url": "https://api.github.com/users/youknowone/orgs", "repos_url": "https://api.github.com/users/youknowone/repos", "events_url": "https://api.github.com/users/youknowone/events{/privacy}", "received_events_url": "https://api.github.com/users/youknowone/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-11T15:48:33Z", "updated_at": "2019-04-20T04:37:59Z", "closed_at": "2019-04-12T13:06:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I made a PR to upgrade pytest-lazy-fixture 0.4.2 to 0.5.2.\r\n- PR: https://github.com/youknowone/ring/pull/106\r\n- CI: https://travis-ci.org/youknowone/ring/jobs/518829292\r\n\r\nIt worked with 0.4.2 but doesn't work with 0.5.2 anymore. Any idea?\r\n\r\nThe errors are refering about event loop\r\n\r\n```\r\nE       RuntimeError: Task <Task pending coro=<test_complicated_key() running at /Users/youknowone/Projects/ring/tests/_test_func_asyncio.py:183> cb=[_run_until_complete_cb() at ~/.pyenv/versions/3.7.0/lib/python3.7/asyncio/base_events.py:150]> got Future <Future pending cb=[BaseSelectorEventLoop._sock_connect_done(22)()]> attached to a different loop\r\n```\r\n\r\nBecause upgrading pytest-lazy-fixture triggers the problem regardless of pytest-asyncio version, I guessed this may be a regression in pytest-lazy-fixture. Please let me know if the change in pytest-lazy-fixture is not a problem. Then I should change my code to fit in new version.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/36", "repository_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture", "labels_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/36/comments", "events_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/36/events", "html_url": "https://github.com/TvoroG/pytest-lazy-fixture/issues/36", "id": 409584687, "node_id": "MDU6SXNzdWU0MDk1ODQ2ODc=", "number": 36, "title": "Add tests to source distribution", "user": {"login": "jayvdb", "id": 15092, "node_id": "MDQ6VXNlcjE1MDky", "avatar_url": "https://avatars1.githubusercontent.com/u/15092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayvdb", "html_url": "https://github.com/jayvdb", "followers_url": "https://api.github.com/users/jayvdb/followers", "following_url": "https://api.github.com/users/jayvdb/following{/other_user}", "gists_url": "https://api.github.com/users/jayvdb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayvdb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayvdb/subscriptions", "organizations_url": "https://api.github.com/users/jayvdb/orgs", "repos_url": "https://api.github.com/users/jayvdb/repos", "events_url": "https://api.github.com/users/jayvdb/events{/privacy}", "received_events_url": "https://api.github.com/users/jayvdb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-02-13T01:47:16Z", "updated_at": "2019-03-16T19:03:41Z", "closed_at": "2019-03-16T19:03:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Please include the tests in the source distribution.  See https://build.opensuse.org/request/show/673508", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/33", "repository_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture", "labels_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/33/comments", "events_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/33/events", "html_url": "https://github.com/TvoroG/pytest-lazy-fixture/issues/33", "id": 397351801, "node_id": "MDU6SXNzdWUzOTczNTE4MDE=", "number": 33, "title": "Lazy fixtures not working at all", "user": {"login": "brian-barba-hernandez", "id": 11175815, "node_id": "MDQ6VXNlcjExMTc1ODE1", "avatar_url": "https://avatars2.githubusercontent.com/u/11175815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brian-barba-hernandez", "html_url": "https://github.com/brian-barba-hernandez", "followers_url": "https://api.github.com/users/brian-barba-hernandez/followers", "following_url": "https://api.github.com/users/brian-barba-hernandez/following{/other_user}", "gists_url": "https://api.github.com/users/brian-barba-hernandez/gists{/gist_id}", "starred_url": "https://api.github.com/users/brian-barba-hernandez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brian-barba-hernandez/subscriptions", "organizations_url": "https://api.github.com/users/brian-barba-hernandez/orgs", "repos_url": "https://api.github.com/users/brian-barba-hernandez/repos", "events_url": "https://api.github.com/users/brian-barba-hernandez/events{/privacy}", "received_events_url": "https://api.github.com/users/brian-barba-hernandez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-01-09T12:35:20Z", "updated_at": "2019-01-10T09:07:53Z", "closed_at": "2019-01-10T05:41:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I had a few lazy fixtures loaded in some of my tests like this:\r\n```\r\n@pytest.mark.parametrize('user_group', [\r\n        pytest.lazy_fixture('user_group_national_manager'),\r\n        pytest.lazy_fixture('user_group_regional_manager'),\t\r\n        pytest.lazy_fixture('user_group_lwi_staff')\t\r\n    ])\r\n```\r\nNow, when the tests are being loaded it fails collecting them with:\r\n```\r\n/usr/local/lib/python3.6/dist-packages/pluggy/hooks.py:258: in __call__\r\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\n/usr/local/lib/python3.6/dist-packages/pluggy/manager.py:67: in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n/usr/local/lib/python3.6/dist-packages/pluggy/manager.py:61: in <lambda>\r\n    firstresult=hook.spec_opts.get('firstresult'),\r\n/usr/local/lib/python3.6/dist-packages/_pytest/python.py:242: in pytest_pycollect_makeitem\r\n    res = list(collector._genfunctions(name, obj))\r\n/usr/local/lib/python3.6/dist-packages/_pytest/python.py:432: in _genfunctions\r\n    self.ihook.pytest_generate_tests(metafunc=metafunc)\r\n/usr/local/lib/python3.6/dist-packages/pluggy/hooks.py:258: in __call__\r\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\n/usr/local/lib/python3.6/dist-packages/pluggy/manager.py:67: in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n/usr/local/lib/python3.6/dist-packages/pluggy/manager.py:61: in <lambda>\r\n    firstresult=hook.spec_opts.get('firstresult'),\r\n/usr/local/lib/python3.6/dist-packages/pytest_lazyfixture.py:70: in pytest_generate_tests\r\n    normalize_metafunc_calls(metafunc, 'funcargs')\r\n/usr/local/lib/python3.6/dist-packages/pytest_lazyfixture.py:77: in normalize_metafunc_calls\r\n    calls = normalize_call(callspec, metafunc, valtype, used_keys)\r\n/usr/local/lib/python3.6/dist-packages/pytest_lazyfixture.py:101: in normalize_call\r\n    _, fixturenames_closure, arg2fixturedefs = fm.getfixtureclosure([val.name], metafunc.definition.parent)\r\nE   ValueError: not enough values to unpack (expected 3, got 2)\r\n```\r\n\r\nIf I changed the code to use tuples or arrays, the tests run but the lazy fixture is not loaded making the tests fail:\r\n```\r\n@pytest.mark.parametrize('user_group', [\r\n        (pytest.lazy_fixture('user_group_national_manager'),),\r\n        (pytest.lazy_fixture('user_group_regional_manager'),),\r\n        (pytest.lazy_fixture('user_group_lwi_staff'),)\r\n    ])\r\n```\r\n```\r\n    assert response.status_code == 200\r\nE   assert 403 == 200\r\nE    +  where 403 = <HttpResponseForbidden status_code=403, \"text/html\">.status_code\r\n```\r\n\r\nThis was working properly before the upgrade to 0.5.0\r\n\r\nI tried to use the format specified in the README with no luck. I had to remove the lazy fixture and use a different approach in the meantime.\r\n\r\nAny idea of what's broken?\r\n\r\nFYI, each fixture just creates a Group and adds the user to the created group. I assert the groups the user belongs to and it belongs to none so the fixture is not loaded when the test runs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/13", "repository_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture", "labels_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/13/comments", "events_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/13/events", "html_url": "https://github.com/TvoroG/pytest-lazy-fixture/issues/13", "id": 203600871, "node_id": "MDU6SXNzdWUyMDM2MDA4NzE=", "number": 13, "title": "pytest fails on TestCase django tests", "user": {"login": "lefterisnik", "id": 6424933, "node_id": "MDQ6VXNlcjY0MjQ5MzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6424933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lefterisnik", "html_url": "https://github.com/lefterisnik", "followers_url": "https://api.github.com/users/lefterisnik/followers", "following_url": "https://api.github.com/users/lefterisnik/following{/other_user}", "gists_url": "https://api.github.com/users/lefterisnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/lefterisnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lefterisnik/subscriptions", "organizations_url": "https://api.github.com/users/lefterisnik/orgs", "repos_url": "https://api.github.com/users/lefterisnik/repos", "events_url": "https://api.github.com/users/lefterisnik/events{/privacy}", "received_events_url": "https://api.github.com/users/lefterisnik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-27T10:25:33Z", "updated_at": "2017-02-06T14:20:32Z", "closed_at": "2017-02-06T14:20:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "For example:\r\n\r\n```\r\nclass TestModels(TestCase):\r\n     def setUp(self):\r\n         ....\r\n\r\n     def test_models(self):\r\n         ....\r\n```\r\n\r\nAny ideas?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/12", "repository_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture", "labels_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/12/comments", "events_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/12/events", "html_url": "https://github.com/TvoroG/pytest-lazy-fixture/issues/12", "id": 203600344, "node_id": "MDU6SXNzdWUyMDM2MDAzNDQ=", "number": 12, "title": "pytest fails when I use pytest.mark.skip and lazy-fixture", "user": {"login": "lefterisnik", "id": 6424933, "node_id": "MDQ6VXNlcjY0MjQ5MzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6424933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lefterisnik", "html_url": "https://github.com/lefterisnik", "followers_url": "https://api.github.com/users/lefterisnik/followers", "following_url": "https://api.github.com/users/lefterisnik/following{/other_user}", "gists_url": "https://api.github.com/users/lefterisnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/lefterisnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lefterisnik/subscriptions", "organizations_url": "https://api.github.com/users/lefterisnik/orgs", "repos_url": "https://api.github.com/users/lefterisnik/repos", "events_url": "https://api.github.com/users/lefterisnik/events{/privacy}", "received_events_url": "https://api.github.com/users/lefterisnik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-27T10:22:49Z", "updated_at": "2017-02-06T14:20:45Z", "closed_at": "2017-02-06T14:20:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "For example:\r\n\r\n```\r\nclass TestModels(object):\r\n  \r\n    @pytest.mark.skip(reason='skip this')\r\n    def test_model(self):\r\n        ....\r\n        ....\r\n```\r\n\r\nAny ideas?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/11", "repository_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture", "labels_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/11/comments", "events_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/11/events", "html_url": "https://github.com/TvoroG/pytest-lazy-fixture/issues/11", "id": 203166414, "node_id": "MDU6SXNzdWUyMDMxNjY0MTQ=", "number": 11, "title": "lazy-fixture breaks all the fixtures with autouse=True", "user": {"login": "lefterisnik", "id": 6424933, "node_id": "MDQ6VXNlcjY0MjQ5MzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6424933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lefterisnik", "html_url": "https://github.com/lefterisnik", "followers_url": "https://api.github.com/users/lefterisnik/followers", "following_url": "https://api.github.com/users/lefterisnik/following{/other_user}", "gists_url": "https://api.github.com/users/lefterisnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/lefterisnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lefterisnik/subscriptions", "organizations_url": "https://api.github.com/users/lefterisnik/orgs", "repos_url": "https://api.github.com/users/lefterisnik/repos", "events_url": "https://api.github.com/users/lefterisnik/events{/privacy}", "received_events_url": "https://api.github.com/users/lefterisnik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-01-25T17:17:53Z", "updated_at": "2017-02-06T14:20:04Z", "closed_at": "2017-02-06T14:20:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In my current project I have some fixtures which they use `autouse=True`. eg:\r\n\r\n```\r\ndef setup(autouse=True):\r\n     self.var = 15\r\n```\r\n\r\nAfter installing `pytest-lazy-fixture`, my tests can't find the `self.var` variable. If I remove the `autouse=True` and pass the fixture to my tests all work fine.\r\n\r\nAny ideas? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/10", "repository_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture", "labels_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/10/comments", "events_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/10/events", "html_url": "https://github.com/TvoroG/pytest-lazy-fixture/issues/10", "id": 197487692, "node_id": "MDU6SXNzdWUxOTc0ODc2OTI=", "number": 10, "title": "mark.xfail doesn't seem to work", "user": {"login": "lycantropos", "id": 15193952, "node_id": "MDQ6VXNlcjE1MTkzOTUy", "avatar_url": "https://avatars3.githubusercontent.com/u/15193952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lycantropos", "html_url": "https://github.com/lycantropos", "followers_url": "https://api.github.com/users/lycantropos/followers", "following_url": "https://api.github.com/users/lycantropos/following{/other_user}", "gists_url": "https://api.github.com/users/lycantropos/gists{/gist_id}", "starred_url": "https://api.github.com/users/lycantropos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lycantropos/subscriptions", "organizations_url": "https://api.github.com/users/lycantropos/orgs", "repos_url": "https://api.github.com/users/lycantropos/repos", "events_url": "https://api.github.com/users/lycantropos/events{/privacy}", "received_events_url": "https://api.github.com/users/lycantropos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-25T05:07:21Z", "updated_at": "2017-01-05T15:56:19Z", "closed_at": "2017-01-05T15:56:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nimport pytest\r\ndef division(a, b):\r\n    return a / b\r\n\r\n\r\n@pytest.fixture(params=[0])\r\ndef zero(request):\r\n    return request.param\r\n\r\n\r\n@pytest.mark.parametrize(('a', 'b'), [(1, pytest.lazy_fixture('zero'))])\r\ndef test_division(a, b):\r\n    with pytest.raises(ZeroDivisionError):\r\n        division(a, b)\r\n```\r\nworks as expected, but when I try\r\n```python\r\nimport pytest\r\ndef division(a, b):\r\n    return a / b\r\n\r\n\r\n@pytest.fixture(params=[0])\r\ndef zero(request):\r\n    return request.param\r\n\r\n\r\n@pytest.mark.parametrize(('a', 'b'), [\r\n    pytest.mark.xfail((1, pytest.lazy_fixture('zero')), reason=ZeroDivisionError)\r\n])\r\ndef test_division(a, b):\r\n    division(a, b)\r\n```\r\nit raises `TypeError`, traceback\r\n```bash\r\n==================================== ERRORS ====================================\r\n_____________________ ERROR collecting tests/test_name.py ______________________\r\n/usr/local/lib/python3.5/dist-packages/_pytest/runner.py:163: in __init__\r\n    self.result = func()\r\n/usr/local/lib/python3.5/dist-packages/_pytest/main.py:464: in _memocollect\r\n    return self._memoizedcall('_collected', lambda: list(self.collect()))\r\n/usr/local/lib/python3.5/dist-packages/_pytest/main.py:335: in _memoizedcall\r\n    res = function()\r\n/usr/local/lib/python3.5/dist-packages/_pytest/main.py:464: in <lambda>\r\n    return self._memoizedcall('_collected', lambda: list(self.collect()))\r\n/usr/local/lib/python3.5/dist-packages/_pytest/python.py:412: in collect\r\n    return super(Module, self).collect()\r\n/usr/local/lib/python3.5/dist-packages/_pytest/python.py:326: in collect\r\n    res = self.makeitem(name, obj)\r\n/usr/local/lib/python3.5/dist-packages/_pytest/python.py:338: in makeitem\r\n    collector=self, name=name, obj=obj)\r\n/usr/local/lib/python3.5/dist-packages/_pytest/vendored_packages/pluggy.py:745: in __call__\r\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\n/usr/local/lib/python3.5/dist-packages/_pytest/vendored_packages/pluggy.py:339: in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n/usr/local/lib/python3.5/dist-packages/_pytest/vendored_packages/pluggy.py:334: in <lambda>\r\n    _MultiCall(methods, kwargs, hook.spec_opts).execute()\r\n/usr/local/lib/python3.5/dist-packages/_pytest/vendored_packages/pluggy.py:613: in execute\r\n    return _wrapped_call(hook_impl.function(*args), self.execute)\r\n/usr/local/lib/python3.5/dist-packages/_pytest/vendored_packages/pluggy.py:250: in _wrapped_call\r\n    wrap_controller.send(call_outcome)\r\n/usr/local/lib/python3.5/dist-packages/_pytest/python.py:197: in pytest_pycollect_makeitem\r\n    res = list(collector._genfunctions(name, obj))\r\n/usr/local/lib/python3.5/dist-packages/_pytest/python.py:358: in _genfunctions\r\n    self.ihook.pytest_generate_tests(metafunc=metafunc)\r\n/usr/local/lib/python3.5/dist-packages/_pytest/vendored_packages/pluggy.py:745: in __call__\r\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\n/usr/local/lib/python3.5/dist-packages/_pytest/vendored_packages/pluggy.py:339: in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n/usr/local/lib/python3.5/dist-packages/_pytest/vendored_packages/pluggy.py:334: in <lambda>\r\n    _MultiCall(methods, kwargs, hook.spec_opts).execute()\r\n/usr/local/lib/python3.5/dist-packages/_pytest/vendored_packages/pluggy.py:613: in execute\r\n    return _wrapped_call(hook_impl.function(*args), self.execute)\r\n/usr/local/lib/python3.5/dist-packages/_pytest/vendored_packages/pluggy.py:254: in _wrapped_call\r\n    return call_outcome.get_result()\r\n/usr/local/lib/python3.5/dist-packages/_pytest/vendored_packages/pluggy.py:279: in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n/usr/local/lib/python3.5/dist-packages/_pytest/vendored_packages/pluggy.py:265: in __init__\r\n    self.result = func()\r\n/usr/local/lib/python3.5/dist-packages/_pytest/vendored_packages/pluggy.py:614: in execute\r\n    res = hook_impl.function(*args)\r\n/usr/local/lib/python3.5/dist-packages/_pytest/python.py:110: in pytest_generate_tests\r\n    metafunc.parametrize(*marker.args, **marker.kwargs)\r\n/usr/local/lib/python3.5/dist-packages/_pytest/python.py:851: in parametrize\r\n    ids = idmaker(argnames, argvalues, idfn, ids, self.config)\r\n/usr/local/lib/python3.5/dist-packages/_pytest/python.py:962: in idmaker\r\n    for valindex, valset in enumerate(argvalues)]\r\n/usr/local/lib/python3.5/dist-packages/_pytest/python.py:962: in <listcomp>\r\n    for valindex, valset in enumerate(argvalues)]\r\n/usr/local/lib/python3.5/dist-packages/_pytest/python.py:955: in _idvalset\r\n    for val, argname in zip(valset, argnames)]\r\nE   TypeError: zip argument #1 must support iteration\r\n!!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!\r\n=========================== 1 error in 0.65 seconds ============================\r\n```\r\n\r\nReason to have this feature: to make one test suite for multiple exceptions types, because at the moment I am forced to write a test for each of them.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/9", "repository_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture", "labels_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/9/comments", "events_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/9/events", "html_url": "https://github.com/TvoroG/pytest-lazy-fixture/issues/9", "id": 195211853, "node_id": "MDU6SXNzdWUxOTUyMTE4NTM=", "number": 9, "title": "Possible to expand the fixture return value in parametrize?", "user": {"login": "schtibe", "id": 430100, "node_id": "MDQ6VXNlcjQzMDEwMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/430100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schtibe", "html_url": "https://github.com/schtibe", "followers_url": "https://api.github.com/users/schtibe/followers", "following_url": "https://api.github.com/users/schtibe/following{/other_user}", "gists_url": "https://api.github.com/users/schtibe/gists{/gist_id}", "starred_url": "https://api.github.com/users/schtibe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schtibe/subscriptions", "organizations_url": "https://api.github.com/users/schtibe/orgs", "repos_url": "https://api.github.com/users/schtibe/repos", "events_url": "https://api.github.com/users/schtibe/events{/privacy}", "received_events_url": "https://api.github.com/users/schtibe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-12-13T10:13:56Z", "updated_at": "2019-02-20T19:36:55Z", "closed_at": "2016-12-13T15:56:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to parametrize a test with the return value of a fixture.\r\n\r\nExample:\r\n```\r\n@pytest.fixture\r\ndef links(browser): // assume broser was a fixture\r\n    return browser.find_by_tag('a')\r\n\r\n@pytest.mark.parametrize(\"link\", links) // here expand the links fixture return value\r\ndef test_func(link):\r\n     // test that link here\r\n```\r\n\r\nIs this possible with pytest-lazy-fixture? (or maybe even pytest itself?) Or might it be a nice feature?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/7", "repository_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture", "labels_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/7/comments", "events_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/7/events", "html_url": "https://github.com/TvoroG/pytest-lazy-fixture/issues/7", "id": 191482878, "node_id": "MDU6SXNzdWUxOTE0ODI4Nzg=", "number": 7, "title": "Release on pypi?", "user": {"login": "patrick91", "id": 667029, "node_id": "MDQ6VXNlcjY2NzAyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/667029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patrick91", "html_url": "https://github.com/patrick91", "followers_url": "https://api.github.com/users/patrick91/followers", "following_url": "https://api.github.com/users/patrick91/following{/other_user}", "gists_url": "https://api.github.com/users/patrick91/gists{/gist_id}", "starred_url": "https://api.github.com/users/patrick91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patrick91/subscriptions", "organizations_url": "https://api.github.com/users/patrick91/orgs", "repos_url": "https://api.github.com/users/patrick91/repos", "events_url": "https://api.github.com/users/patrick91/events{/privacy}", "received_events_url": "https://api.github.com/users/patrick91/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-24T10:23:32Z", "updated_at": "2016-11-24T22:07:09Z", "closed_at": "2016-11-24T22:07:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is there a release in pypi?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/6", "repository_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture", "labels_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/6/comments", "events_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/6/events", "html_url": "https://github.com/TvoroG/pytest-lazy-fixture/issues/6", "id": 190668534, "node_id": "MDU6SXNzdWUxOTA2Njg1MzQ=", "number": 6, "title": "Make LazyFixture iterable", "user": {"login": "michael-k", "id": 152008, "node_id": "MDQ6VXNlcjE1MjAwOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/152008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michael-k", "html_url": "https://github.com/michael-k", "followers_url": "https://api.github.com/users/michael-k/followers", "following_url": "https://api.github.com/users/michael-k/following{/other_user}", "gists_url": "https://api.github.com/users/michael-k/gists{/gist_id}", "starred_url": "https://api.github.com/users/michael-k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michael-k/subscriptions", "organizations_url": "https://api.github.com/users/michael-k/orgs", "repos_url": "https://api.github.com/users/michael-k/repos", "events_url": "https://api.github.com/users/michael-k/events{/privacy}", "received_events_url": "https://api.github.com/users/michael-k/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-11-21T10:00:12Z", "updated_at": "2016-11-24T12:56:28Z", "closed_at": "2016-11-24T12:56:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "This does work now:\r\n\r\n```python\r\n@pytest.mark.parametrize('arg1', [\r\n   pytest.lazy_fixture('needs_db')\r\n])\r\n@pytest.mark.django_db\r\ndef test_some(arg1):\r\n    assert ...\r\n```\r\n\r\nBut it's not quite what I need.  The fixture `needs_db` returns a list and I'd like to parametrize `test_some` with that list:\r\n\r\n```python\r\n@pytest.mark.parametrize('arg1', pytest.lazy_fixture('needs_db'))\r\n@pytest.mark.django_db\r\ndef test_some(arg1):\r\n    assert ...\r\n```\r\n\r\nThis fails: `TypeError: 'LazyFixture' object is not iterable`\r\n\r\nIs it possible to support this use case?  I'm not familiar with pytest's internals. :/", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/3", "repository_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture", "labels_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/3/comments", "events_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/3/events", "html_url": "https://github.com/TvoroG/pytest-lazy-fixture/issues/3", "id": 190317467, "node_id": "MDU6SXNzdWUxOTAzMTc0Njc=", "number": 3, "title": "Failed: Database access not allowed, use the \"django_db\" mark to enable it.", "user": {"login": "michael-k", "id": 152008, "node_id": "MDQ6VXNlcjE1MjAwOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/152008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michael-k", "html_url": "https://github.com/michael-k", "followers_url": "https://api.github.com/users/michael-k/followers", "following_url": "https://api.github.com/users/michael-k/following{/other_user}", "gists_url": "https://api.github.com/users/michael-k/gists{/gist_id}", "starred_url": "https://api.github.com/users/michael-k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michael-k/subscriptions", "organizations_url": "https://api.github.com/users/michael-k/orgs", "repos_url": "https://api.github.com/users/michael-k/repos", "events_url": "https://api.github.com/users/michael-k/events{/privacy}", "received_events_url": "https://api.github.com/users/michael-k/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-18T13:19:29Z", "updated_at": "2016-11-21T07:14:25Z", "closed_at": "2016-11-21T07:14:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "It does not work with Django when the referenced fixture needs access to the database.\r\n\r\n```python\r\n    def pytest_runtest_setup(item):\r\n        if hasattr(item, 'callspec'):\r\n            for param, val in sorted_by_dependency(item.callspec.params):\r\n                if is_lazy_fixture(val):\r\n>                   item.callspec.params[param] = item._request.getfixturevalue(val.name)\r\n\r\n/usr/local/lib/python3.5/site-packages/pytest_lazyfixture.py:22: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\ntests/lexicon/conftest.py:9: in user\r\n    username='user', password='password', email='bar@example.org',\r\n/usr/local/lib/python3.5/site-packages/django/contrib/auth/models.py:157: in create_user\r\n    return self._create_user(username, email, password, **extra_fields)\r\n/usr/local/lib/python3.5/site-packages/django/contrib/auth/models.py:151: in _create_user\r\n    user.save(using=self._db)\r\n/usr/local/lib/python3.5/site-packages/django/contrib/auth/base_user.py:80: in save\r\n    super(AbstractBaseUser, self).save(*args, **kwargs)\r\n/usr/local/lib/python3.5/site-packages/django/db/models/base.py:796: in save\r\n    force_update=force_update, update_fields=update_fields)\r\n/usr/local/lib/python3.5/site-packages/django/db/models/base.py:821: in save_base\r\n    with transaction.atomic(using=using, savepoint=False):\r\n/usr/local/lib/python3.5/site-packages/django/db/transaction.py:158: in __enter__\r\n    if not connection.get_autocommit():\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f6b472b4da0>\r\n\r\n    def get_autocommit(self):\r\n        \"\"\"\r\n            Check the autocommit state.\r\n            \"\"\"\r\n>       self.ensure_connection()\r\nE       Failed: Database access not allowed, use the \"django_db\" mark to enable it.\r\n\r\n/usr/local/lib/python3.5/site-packages/django/db/backends/base/base.py:365: Failed\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/2", "repository_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture", "labels_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/2/comments", "events_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/2/events", "html_url": "https://github.com/TvoroG/pytest-lazy-fixture/issues/2", "id": 181266693, "node_id": "MDU6SXNzdWUxODEyNjY2OTM=", "number": 2, "title": "Fixtures with pytest.mark.fixture() with parametrize in test functions", "user": {"login": "Brachi", "id": 6393834, "node_id": "MDQ6VXNlcjYzOTM4MzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/6393834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Brachi", "html_url": "https://github.com/Brachi", "followers_url": "https://api.github.com/users/Brachi/followers", "following_url": "https://api.github.com/users/Brachi/following{/other_user}", "gists_url": "https://api.github.com/users/Brachi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Brachi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Brachi/subscriptions", "organizations_url": "https://api.github.com/users/Brachi/orgs", "repos_url": "https://api.github.com/users/Brachi/repos", "events_url": "https://api.github.com/users/Brachi/events{/privacy}", "received_events_url": "https://api.github.com/users/Brachi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-05T21:09:48Z", "updated_at": "2016-11-18T16:04:31Z", "closed_at": "2016-11-18T16:04:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently the example below doesn't work. I'd expect to produce the equivalent of the last test function.\nProbably the parametrize decorator should take precedence over the parametrized fixture, as the other parametrization is not explicit.\nHope to help in development soon.\n\n``` python\nimport pytest\n\n\n@pytest.fixture(params=[1, 2, 3])\ndef one(request):\n    return request.param\n\n\n@pytest.fixture(params=[pytest.mark.fixture('one')])\ndef as_str(request):\n    return str(request.getfixturevalue('one'))\n\n\n\n# doesn't work. Fixture 'a'/'b'/'c' not found\n@pytest.mark.parametrize('val', ('a', 'b', 'c'))\ndef test_as_str(val, as_str):\n    combined = ''.join((val, as_str))\n    assert combined in {'a1', 'a2', 'a3', 'b1', 'b2', 'b3', 'c1', 'c2', 'c3'}\n\n\n# test_as_str expected\n@pytest.mark.parametrize('val_2', ('1', '2', '3'))\n@pytest.mark.parametrize('val_1', ('a', 'b', 'c'))\ndef test_parametrize(val_1, val_2):\n    combined = ''.join((val_1, val_2))\n    assert combined in {'a1', 'a2', 'a3', 'b1', 'b2', 'b3', 'c1', 'c2', 'c3'}\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/1", "repository_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture", "labels_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/1/comments", "events_url": "https://api.github.com/repos/TvoroG/pytest-lazy-fixture/issues/1/events", "html_url": "https://github.com/TvoroG/pytest-lazy-fixture/issues/1", "id": 181227649, "node_id": "MDU6SXNzdWUxODEyMjc2NDk=", "number": 1, "title": "ValueError: duplicate 'name'", "user": {"login": "TvoroG", "id": 1325161, "node_id": "MDQ6VXNlcjEzMjUxNjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1325161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TvoroG", "html_url": "https://github.com/TvoroG", "followers_url": "https://api.github.com/users/TvoroG/followers", "following_url": "https://api.github.com/users/TvoroG/following{/other_user}", "gists_url": "https://api.github.com/users/TvoroG/gists{/gist_id}", "starred_url": "https://api.github.com/users/TvoroG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TvoroG/subscriptions", "organizations_url": "https://api.github.com/users/TvoroG/orgs", "repos_url": "https://api.github.com/users/TvoroG/repos", "events_url": "https://api.github.com/users/TvoroG/events{/privacy}", "received_events_url": "https://api.github.com/users/TvoroG/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-05T18:15:13Z", "updated_at": "2016-10-05T18:17:52Z", "closed_at": "2016-10-05T18:17:52Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Example:\n\n``` python\nimport pytest\n\n\n@pytest.fixture(params=[1, 2, 3])\ndef one(request):\n    return request.param\n\n\n@pytest.fixture(params=[pytest.mark.fixture('one')])\ndef as_str(request):\n    return str(request.getfixturevalue('one'))\n\n\n@pytest.fixture(params=[pytest.mark.fixture('one')])\ndef as_hex(request):\n    return hex(request.getfixturevalue('one'))\n\n\ndef test_as_str(as_str):\n    assert as_str in {'1', '2', '3'}\n\n\ndef test_as_hex(as_hex):\n    assert as_hex in {'0x1', '0x2', '0x3'}\n\n\n# fails at setup time, with ValueError: duplicate 'one'\ndef test_as_hex_vs_as_str(as_str, as_hex):\n    assert int(as_hex, 16) == int(as_str)\n```\n", "performed_via_github_app": null, "score": 1.0}]}