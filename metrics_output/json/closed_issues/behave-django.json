{"total_count": 45, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/behave/behave-django/issues/108", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/108/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/108/events", "html_url": "https://github.com/behave/behave-django/issues/108", "id": 634592606, "node_id": "MDU6SXNzdWU2MzQ1OTI2MDY=", "number": 108, "title": "Suggest page object module for headless testing", "user": {"login": "bittner", "id": 665072, "node_id": "MDQ6VXNlcjY2NTA3Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/665072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bittner", "html_url": "https://github.com/bittner", "followers_url": "https://api.github.com/users/bittner/followers", "following_url": "https://api.github.com/users/bittner/following{/other_user}", "gists_url": "https://api.github.com/users/bittner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bittner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bittner/subscriptions", "organizations_url": "https://api.github.com/users/bittner/orgs", "repos_url": "https://api.github.com/users/bittner/repos", "events_url": "https://api.github.com/users/bittner/events{/privacy}", "received_events_url": "https://api.github.com/users/bittner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840258, "node_id": "MDU6TGFiZWwzNDA4NDAyNTg=", "url": "https://api.github.com/repos/behave/behave-django/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-08T13:01:14Z", "updated_at": "2020-06-15T17:12:44Z", "closed_at": "2020-06-15T16:53:47Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We explicitly discourage driving the user interface with Web browser automation libraries (Selenium, Splinter, etc.) in the [Behave docs](https://behave.readthedocs.io/en/latest/practical_tips.html). Contrary to the related page title though, I think this isn't very \"practical\" advice yet. :roll_eyes: \r\n\r\nWe should come up with a _concrete_ suggestion, a suggested approach to implement user interface testing using an API approach or the [Page Object](https://www.martinfowler.com/bliki/PageObject.html) pattern. Unfortunately, most if not all Python page object module implementations typically incorporate Selenium.\r\n\r\nThis should then also be mentioned in, e.g., the [Web browser automation](https://behave-django.readthedocs.io/en/latest/usage.html) section of our docs.\r\n\r\n## Existing packages\r\n\r\n- [page-object](https://pypi.org/project/page-object/)\r\n- [page-objects](https://pypi.org/project/page-objects/)\r\n- [selenium-page-factory](https://pypi.org/project/selenium-page-factory/)\r\n\r\nImplementation suggestions:\r\n\r\n- [Page Objects](https://selenium-python.readthedocs.io/page-objects.html) (Selenium docs)\r\n\r\n@jenisys Are you aware of any page object implementation that is independent from Selenium?\r\n\r\n## Related\r\n- https://github.com/OnShift/page_object/issues/30 \u2013 see also: [code samples](https://github.com/OnShift/page_object/wiki)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/104", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/104/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/104/events", "html_url": "https://github.com/behave/behave-django/issues/104", "id": 536088414, "node_id": "MDU6SXNzdWU1MzYwODg0MTQ=", "number": 104, "title": "Replace deprecated multi_db (after 2020)", "user": {"login": "bittner", "id": 665072, "node_id": "MDQ6VXNlcjY2NTA3Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/665072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bittner", "html_url": "https://github.com/bittner", "followers_url": "https://api.github.com/users/bittner/followers", "following_url": "https://api.github.com/users/bittner/following{/other_user}", "gists_url": "https://api.github.com/users/bittner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bittner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bittner/subscriptions", "organizations_url": "https://api.github.com/users/bittner/orgs", "repos_url": "https://api.github.com/users/bittner/repos", "events_url": "https://api.github.com/users/bittner/events{/privacy}", "received_events_url": "https://api.github.com/users/bittner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840258, "node_id": "MDU6TGFiZWwzNDA4NDAyNTg=", "url": "https://api.github.com/repos/behave/behave-django/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-11T01:31:29Z", "updated_at": "2020-06-15T15:59:36Z", "closed_at": "2020-06-15T15:59:36Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The `multi_db` attribute is deprecated since Django 2.2 and should be replaced by `databases` (see [Django documentation](https://docs.djangoproject.com/en/3.0/topics/testing/tools/#django.test.TransactionTestCase.multi_db)).\r\n\r\nAs soon as we drop support for [Django 2.1](https://docs.djangoproject.com/en/2.1/topics/testing/tools/#django.test.TransactionTestCase.multi_db) we can replace the [affected code](https://github.com/behave/behave-django/search?q=multi&unscoped_q=multi) without having to support both cases.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/94", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/94/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/94/events", "html_url": "https://github.com/behave/behave-django/issues/94", "id": 429347140, "node_id": "MDU6SXNzdWU0MjkzNDcxNDA=", "number": 94, "title": "Tests using the Django test project do not work with newer versions of Django", "user": {"login": "pydolan", "id": 467780, "node_id": "MDQ6VXNlcjQ2Nzc4MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/467780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pydolan", "html_url": "https://github.com/pydolan", "followers_url": "https://api.github.com/users/pydolan/followers", "following_url": "https://api.github.com/users/pydolan/following{/other_user}", "gists_url": "https://api.github.com/users/pydolan/gists{/gist_id}", "starred_url": "https://api.github.com/users/pydolan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pydolan/subscriptions", "organizations_url": "https://api.github.com/users/pydolan/orgs", "repos_url": "https://api.github.com/users/pydolan/repos", "events_url": "https://api.github.com/users/pydolan/events{/privacy}", "received_events_url": "https://api.github.com/users/pydolan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840255, "node_id": "MDU6TGFiZWwzNDA4NDAyNTU=", "url": "https://api.github.com/repos/behave/behave-django/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-04T15:34:17Z", "updated_at": "2020-02-26T19:40:28Z", "closed_at": "2019-04-04T18:50:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When setting up my test environment to run tests, pip installed Django 2.2 (since the requirements are for Django >= 1.11).  When running the tests, Django errors about several settings being defined incorrectly.\r\n\r\n```\r\nERRORS:\r\n?: (admin.E404) 'django.contrib.messages.context_processors.messages' must be enabled in DjangoTemplates (TEMPLATES) in order to use the admin application.\r\n?: (admin.E408) 'django.contrib.auth.middleware.AuthenticationMiddleware' must be in MIDDLEWARE in order to use the admin application.\r\n?: (admin.E409) 'django.contrib.messages.middleware.MessageMiddleware' must be in MIDDLEWARE in order to use the admin application.\r\n```\r\n\r\nI'll push up a PR shortly", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/93", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/93/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/93/events", "html_url": "https://github.com/behave/behave-django/issues/93", "id": 429345928, "node_id": "MDU6SXNzdWU0MjkzNDU5Mjg=", "number": 93, "title": "Docs for running tests need updated path for manage.py", "user": {"login": "pydolan", "id": 467780, "node_id": "MDQ6VXNlcjQ2Nzc4MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/467780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pydolan", "html_url": "https://github.com/pydolan", "followers_url": "https://api.github.com/users/pydolan/followers", "following_url": "https://api.github.com/users/pydolan/following{/other_user}", "gists_url": "https://api.github.com/users/pydolan/gists{/gist_id}", "starred_url": "https://api.github.com/users/pydolan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pydolan/subscriptions", "organizations_url": "https://api.github.com/users/pydolan/orgs", "repos_url": "https://api.github.com/users/pydolan/repos", "events_url": "https://api.github.com/users/pydolan/events{/privacy}", "received_events_url": "https://api.github.com/users/pydolan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 351611309, "node_id": "MDU6TGFiZWwzNTE2MTEzMDk=", "url": "https://api.github.com/repos/behave/behave-django/labels/docs", "name": "docs", "color": "1d76db", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-04T15:31:55Z", "updated_at": "2019-04-04T23:05:00Z", "closed_at": "2019-04-04T22:53:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "On https://behave-django.readthedocs.io/en/latest/contribute.html, all commands using `manage.py` should be updated to `tests/manage.py` since it is implied that the tests be run from the root of the project.  \r\n\r\nNote: If one tries to run the tests from within the `tests` directory, the `py.test` tests fail and Behave cannot find the `steps` directory since the Behave config is not defined (since tox.ini is in the parent directory).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/92", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/92/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/92/events", "html_url": "https://github.com/behave/behave-django/issues/92", "id": 429249225, "node_id": "MDU6SXNzdWU0MjkyNDkyMjU=", "number": 92, "title": "Fixtures loaded via decorator do not always reset between scenarios", "user": {"login": "DolanMaize", "id": 38442364, "node_id": "MDQ6VXNlcjM4NDQyMzY0", "avatar_url": "https://avatars2.githubusercontent.com/u/38442364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DolanMaize", "html_url": "https://github.com/DolanMaize", "followers_url": "https://api.github.com/users/DolanMaize/followers", "following_url": "https://api.github.com/users/DolanMaize/following{/other_user}", "gists_url": "https://api.github.com/users/DolanMaize/gists{/gist_id}", "starred_url": "https://api.github.com/users/DolanMaize/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DolanMaize/subscriptions", "organizations_url": "https://api.github.com/users/DolanMaize/orgs", "repos_url": "https://api.github.com/users/DolanMaize/repos", "events_url": "https://api.github.com/users/DolanMaize/events{/privacy}", "received_events_url": "https://api.github.com/users/DolanMaize/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840255, "node_id": "MDU6TGFiZWwzNDA4NDAyNTU=", "url": "https://api.github.com/repos/behave/behave-django/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-04T12:24:43Z", "updated_at": "2019-04-05T09:20:11Z", "closed_at": "2019-04-05T09:20:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "If running two scenarios that each load different fixtures ***and*** `context.fixtures` is already defined (e.g. in `before_all` or `before_feature`), then the fixtures loaded in the first scenario remain in the context for the second scenario.\r\n\r\nFor example, in the following setup, the \"Testing 2\" scenario would have fixtures \"somedata.json\", \"test1.json\", and \"test2.json\" loaded:\r\n```\r\ndef before_all(context):\r\n    context.fixtures = ['somedata.json']\r\n\r\n############\r\n\r\n@fixtures('test1.json')\r\n@given('I have test1 data')\r\ndef step_impl(context):\r\n    pass\r\n\r\n@fixtures('test2.json')\r\n@given('I have test2 data')\r\ndef step_impl(context):\r\n    pass\r\n\r\n############\r\n\r\nScenario: Testing 1\r\n    Given I have test1 data\r\n\r\nScenario: Testing 2\r\n    Given I have test2 data\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/91", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/91/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/91/events", "html_url": "https://github.com/behave/behave-django/issues/91", "id": 423933578, "node_id": "MDU6SXNzdWU0MjM5MzM1Nzg=", "number": 91, "title": "Update documentation with minor detail about the fixtures decorator", "user": {"login": "pydolan", "id": 467780, "node_id": "MDQ6VXNlcjQ2Nzc4MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/467780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pydolan", "html_url": "https://github.com/pydolan", "followers_url": "https://api.github.com/users/pydolan/followers", "following_url": "https://api.github.com/users/pydolan/following{/other_user}", "gists_url": "https://api.github.com/users/pydolan/gists{/gist_id}", "starred_url": "https://api.github.com/users/pydolan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pydolan/subscriptions", "organizations_url": "https://api.github.com/users/pydolan/orgs", "repos_url": "https://api.github.com/users/pydolan/repos", "events_url": "https://api.github.com/users/pydolan/events{/privacy}", "received_events_url": "https://api.github.com/users/pydolan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 351611309, "node_id": "MDU6TGFiZWwzNTE2MTEzMDk=", "url": "https://api.github.com/repos/behave/behave-django/labels/docs", "name": "docs", "color": "1d76db", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-21T20:45:07Z", "updated_at": "2019-04-08T21:42:20Z", "closed_at": "2019-04-08T21:42:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While writing up [notes on settings overriding](https://github.com/behave/behave-django/issues/13#issuecomment-475392004), I was thinking about how the `fixtures` decorator works, and I realized that the order of steps doesn't matter with regards to when the fixture is loaded; it'll always be loaded before all steps.\r\n\r\nFor example, in the following, the 4th step (`Then user with pk=\"1\" has a name of \"john\"`) would fail because the fixture loading happens before step 1, even though step 3 is where the decorator is, and then step 1 sets the user's name to \"bob\", thus step 4 fails:\r\n```\r\n# Step function:\r\n@fixtures('users.json')\r\n@given('Given I load a fixture of users (including pk=1 and name=john)')\r\ndef step_impl(context):\r\n    pass\r\n\r\n# Gherkin file:\r\nScenario: User test name\r\n    Given I create a user with pk=\"1\" and name=\"bob\"\r\n    Then user with pk=\"1\" has a name of \"bob\"\r\n    Given I load a fixture of users (including pk=1 and name=john)\r\n    Then user with pk=\"1\" has a name of \"john\"\r\n```\r\n\r\nI think this is fine, but the documentation should probably have a big warning so that users are fully aware of how it works.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/87", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/87/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/87/events", "html_url": "https://github.com/behave/behave-django/issues/87", "id": 421196400, "node_id": "MDU6SXNzdWU0MjExOTY0MDA=", "number": 87, "title": "Prevent database from being flushed after each scenario?", "user": {"login": "nhill-cpi", "id": 32272907, "node_id": "MDQ6VXNlcjMyMjcyOTA3", "avatar_url": "https://avatars3.githubusercontent.com/u/32272907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhill-cpi", "html_url": "https://github.com/nhill-cpi", "followers_url": "https://api.github.com/users/nhill-cpi/followers", "following_url": "https://api.github.com/users/nhill-cpi/following{/other_user}", "gists_url": "https://api.github.com/users/nhill-cpi/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhill-cpi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhill-cpi/subscriptions", "organizations_url": "https://api.github.com/users/nhill-cpi/orgs", "repos_url": "https://api.github.com/users/nhill-cpi/repos", "events_url": "https://api.github.com/users/nhill-cpi/events{/privacy}", "received_events_url": "https://api.github.com/users/nhill-cpi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840260, "node_id": "MDU6TGFiZWwzNDA4NDAyNjA=", "url": "https://api.github.com/repos/behave/behave-django/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-14T19:09:25Z", "updated_at": "2019-03-18T20:26:01Z", "closed_at": "2019-03-18T20:26:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is there any way to prevent the database from being flushed after each scenario? Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/86", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/86/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/86/events", "html_url": "https://github.com/behave/behave-django/issues/86", "id": 420710960, "node_id": "MDU6SXNzdWU0MjA3MTA5NjA=", "number": 86, "title": "Dev-server has to already be running?", "user": {"login": "nhill-cpi", "id": 32272907, "node_id": "MDQ6VXNlcjMyMjcyOTA3", "avatar_url": "https://avatars3.githubusercontent.com/u/32272907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhill-cpi", "html_url": "https://github.com/nhill-cpi", "followers_url": "https://api.github.com/users/nhill-cpi/followers", "following_url": "https://api.github.com/users/nhill-cpi/following{/other_user}", "gists_url": "https://api.github.com/users/nhill-cpi/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhill-cpi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhill-cpi/subscriptions", "organizations_url": "https://api.github.com/users/nhill-cpi/orgs", "repos_url": "https://api.github.com/users/nhill-cpi/repos", "events_url": "https://api.github.com/users/nhill-cpi/events{/privacy}", "received_events_url": "https://api.github.com/users/nhill-cpi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-13T20:44:55Z", "updated_at": "2019-03-14T19:09:43Z", "closed_at": "2019-03-13T22:01:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI can't figure out what I'm missing. I'm just starting to use behave-django, and I'm finding that my tests run, but fail, when my Django dev-server at 127.0.0.1:8000 is not _already_ running. When it is _already_ before I start the tests, the tests pass. I thought behave-django starts a dev server in the background, so I believe I'm missing something very basic. Can you help me out?\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/81", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/81/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/81/events", "html_url": "https://github.com/behave/behave-django/issues/81", "id": 413122570, "node_id": "MDU6SXNzdWU0MTMxMjI1NzA=", "number": 81, "title": "\"FOREIGN KEY constraint failed\" exception raised in django_test_runner.teardown_test(context)", "user": {"login": "faran-mw", "id": 39059190, "node_id": "MDQ6VXNlcjM5MDU5MTkw", "avatar_url": "https://avatars1.githubusercontent.com/u/39059190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faran-mw", "html_url": "https://github.com/faran-mw", "followers_url": "https://api.github.com/users/faran-mw/followers", "following_url": "https://api.github.com/users/faran-mw/following{/other_user}", "gists_url": "https://api.github.com/users/faran-mw/gists{/gist_id}", "starred_url": "https://api.github.com/users/faran-mw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faran-mw/subscriptions", "organizations_url": "https://api.github.com/users/faran-mw/orgs", "repos_url": "https://api.github.com/users/faran-mw/repos", "events_url": "https://api.github.com/users/faran-mw/events{/privacy}", "received_events_url": "https://api.github.com/users/faran-mw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-21T21:03:22Z", "updated_at": "2020-06-15T21:07:20Z", "closed_at": "2020-06-15T21:07:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "django==2.1.7\r\npython3.7\r\nbehave_django==1.1.0\r\nbehave==1.2.6\r\n\r\nWhen I run \"./manage.py behave flipr/features\" command it runs the test with an empty step implementation but it raises an exception in django_test_runner.teardown_test(context) @ environment.py(110). Running django tests, however, is fine. Please let me know if you need any more information and any help is appreciated.\r\n\r\nThis is the full stacktrace:\r\n\r\n```\r\n(venv) \u279c  flipr git:(partnership) \u2717 ./manage.py behave  flipr/features\r\nCreating test database for alias 'default'...\r\nFeature: Partnership Tests # flipr/features/affiliate.feature:2\r\n\r\n  Scenario: Create a New Story with affiliate ID         # flipr/features/affiliate.feature:3\r\n    Given We access the endpoint \"/plans/?affiliateId=1\" # flipr/features/steps/steps.py:7 0.000s\r\nException IntegrityError: FOREIGN KEY constraint failed\r\nTraceback (most recent call last):\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/db/backends/base/base.py\", line 239, in _commit\r\n    return self.connection.commit()\r\nsqlite3.IntegrityError: FOREIGN KEY constraint failed\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"./manage.py\", line 15, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/core/management/__init__.py\", line 381, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/core/management/__init__.py\", line 375, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/core/management/base.py\", line 316, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/core/management/base.py\", line 353, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/behave_django/management/commands/behave.py\", line 128, in handle\r\n    exit_status = behave_main(args=behave_args)\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/behave/__main__.py\", line 183, in main\r\n    return run_behave(config)\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/behave/__main__.py\", line 127, in run_behave\r\n    failed = runner.run()\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/behave/runner.py\", line 804, in run\r\n    return self.run_with_paths()\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/behave/runner.py\", line 824, in run_with_paths\r\n    return self.run_model()\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/behave/runner.py\", line 626, in run_model\r\n    failed = feature.run(self)\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/behave/model.py\", line 321, in run\r\n    failed = scenario.run(runner)\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/behave/model.py\", line 758, in run\r\n    runner.run_hook(\"after_scenario\", runner.context, self)\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/behave_django/environment.py\", line 110, in run_hook\r\n    django_test_runner.teardown_test(context)\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/behave_django/environment.py\", line 87, in teardown_test\r\n    context.test._post_teardown(run=True)\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/behave_django/testcase.py\", line 20, in _post_teardown\r\n    super(BehaviorDrivenTestMixin, self)._post_teardown()\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/test/testcases.py\", line 908, in _post_teardown\r\n    self._fixture_teardown()\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/test/testcases.py\", line 943, in _fixture_teardown\r\n    inhibit_post_migrate=inhibit_post_migrate)\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/core/management/__init__.py\", line 148, in call_command\r\n    return command.execute(*args, **defaults)\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/core/management/base.py\", line 353, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/core/management/commands/flush.py\", line 80, in handle\r\n    emit_post_migrate_signal(verbosity, interactive, database)\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/core/management/sql.py\", line 51, in emit_post_migrate_signal\r\n    **kwargs\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/dispatch/dispatcher.py\", line 175, in send\r\n    for receiver in self._live_receivers(sender)\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/dispatch/dispatcher.py\", line 175, in <listcomp>\r\n    for receiver in self._live_receivers(sender)\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/contrib/auth/management/__init__.py\", line 79, in create_permissions\r\n    Permission.objects.using(using).bulk_create(perms)\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/db/models/query.py\", line 471, in bulk_create\r\n    obj_without_pk._state.db = self.db\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/db/transaction.py\", line 212, in __exit__\r\n    connection.commit()\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/db/backends/base/base.py\", line 261, in commit\r\n    self._commit()\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/db/backends/base/base.py\", line 239, in _commit\r\n    return self.connection.commit()\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/db/utils.py\", line 89, in __exit__\r\n    raise dj_exc_value.with_traceback(traceback) from exc_value\r\n  File \"/Users/fnegarestan/Documents/GitHub/flipr/venv/lib/python3.7/site-packages/django/db/backends/base/base.py\", line 239, in _commit\r\n    return self.connection.commit()\r\ndjango.db.utils.IntegrityError: FOREIGN KEY constraint failed\r\n```\r\n\r\nFeature File:\r\n```\r\nFeature: Partnership Tests\r\n  Scenario: Create a New Story with affiliate ID\r\n    Given We access the endpoint \"/plans/?affiliateId=1\"\r\n```\r\n\r\nStep File:\r\n```\r\nfrom behave import *\r\n\r\n@given('We access the endpoint \"{url}\"')\r\ndef step_impl(context, url):\r\n    pass\r\n```\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/80", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/80/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/80/events", "html_url": "https://github.com/behave/behave-django/issues/80", "id": 412146061, "node_id": "MDU6SXNzdWU0MTIxNDYwNjE=", "number": 80, "title": "Raises sqlite3.IntegrityError: FOREIGN KEY constraint failed when all tests run successfully", "user": {"login": "faran-mw", "id": 39059190, "node_id": "MDQ6VXNlcjM5MDU5MTkw", "avatar_url": "https://avatars1.githubusercontent.com/u/39059190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faran-mw", "html_url": "https://github.com/faran-mw", "followers_url": "https://api.github.com/users/faran-mw/followers", "following_url": "https://api.github.com/users/faran-mw/following{/other_user}", "gists_url": "https://api.github.com/users/faran-mw/gists{/gist_id}", "starred_url": "https://api.github.com/users/faran-mw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faran-mw/subscriptions", "organizations_url": "https://api.github.com/users/faran-mw/orgs", "repos_url": "https://api.github.com/users/faran-mw/repos", "events_url": "https://api.github.com/users/faran-mw/events{/privacy}", "received_events_url": "https://api.github.com/users/faran-mw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840259, "node_id": "MDU6TGFiZWwzNDA4NDAyNTk=", "url": "https://api.github.com/repos/behave/behave-django/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-19T22:04:29Z", "updated_at": "2019-02-20T10:01:35Z", "closed_at": "2019-02-20T10:01:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I run all tests using \"./manage.py test\" command and I have a combination of behave and non-behave tests. They all run successfully but I get the above exception in the end during the teardown step. Does anybody have any idea about a solution/workaround?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/77", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/77/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/77/events", "html_url": "https://github.com/behave/behave-django/issues/77", "id": 408230626, "node_id": "MDU6SXNzdWU0MDgyMzA2MjY=", "number": 77, "title": "[Question] Set server host and port for one scenario", "user": {"login": "adam-d-wojnarowski", "id": 39817376, "node_id": "MDQ6VXNlcjM5ODE3Mzc2", "avatar_url": "https://avatars2.githubusercontent.com/u/39817376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adam-d-wojnarowski", "html_url": "https://github.com/adam-d-wojnarowski", "followers_url": "https://api.github.com/users/adam-d-wojnarowski/followers", "following_url": "https://api.github.com/users/adam-d-wojnarowski/following{/other_user}", "gists_url": "https://api.github.com/users/adam-d-wojnarowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/adam-d-wojnarowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adam-d-wojnarowski/subscriptions", "organizations_url": "https://api.github.com/users/adam-d-wojnarowski/orgs", "repos_url": "https://api.github.com/users/adam-d-wojnarowski/repos", "events_url": "https://api.github.com/users/adam-d-wojnarowski/events{/privacy}", "received_events_url": "https://api.github.com/users/adam-d-wojnarowski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840260, "node_id": "MDU6TGFiZWwzNDA4NDAyNjA=", "url": "https://api.github.com/repos/behave/behave-django/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-08T16:37:05Z", "updated_at": "2019-02-19T16:00:08Z", "closed_at": "2019-02-19T15:59:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have one scenario inside of a feature file where the LiveServer needs to be running on port 8000 due to an external service I have no control over expecting it to be running there.\r\n\r\nI've tried setting the port value in BehaviorDrivenTestCase inside of before_scenario but that causes the scenario AFTER the current one to run on port 8000.\r\n\r\nI've also tried setting the port in before_all in the same manner and running all the tests on the same port but that causes an address in use error since the server isn't torn down before the next scenario starts.\r\n\r\nIs there a \"best practice\" to setting the port for a scenario? I can work around this by creating a scenario before the one that needs to be ran on port 8000 who's sole purpose is to set the port number but that doesn't seem like a good solution.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/76", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/76/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/76/events", "html_url": "https://github.com/behave/behave-django/issues/76", "id": 406808665, "node_id": "MDU6SXNzdWU0MDY4MDg2NjU=", "number": 76, "title": "Command behave seems to ignore verbosity argument", "user": {"login": "gabrielbiasi", "id": 9423868, "node_id": "MDQ6VXNlcjk0MjM4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/9423868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabrielbiasi", "html_url": "https://github.com/gabrielbiasi", "followers_url": "https://api.github.com/users/gabrielbiasi/followers", "following_url": "https://api.github.com/users/gabrielbiasi/following{/other_user}", "gists_url": "https://api.github.com/users/gabrielbiasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabrielbiasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabrielbiasi/subscriptions", "organizations_url": "https://api.github.com/users/gabrielbiasi/orgs", "repos_url": "https://api.github.com/users/gabrielbiasi/repos", "events_url": "https://api.github.com/users/gabrielbiasi/events{/privacy}", "received_events_url": "https://api.github.com/users/gabrielbiasi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840260, "node_id": "MDU6TGFiZWwzNDA4NDAyNjA=", "url": "https://api.github.com/repos/behave/behave-django/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-05T14:29:26Z", "updated_at": "2019-02-07T12:30:57Z", "closed_at": "2019-02-06T13:40:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting the same output regardless the value in `-v` / `--verbosity`:\r\n\r\nverbosity: 3\r\n```\r\n/code # MODE=ci python manage.py behave --verbosity 3 --no-logcapture --no-skipped --tags=\"wip\"\r\nCreating test database for alias 'default'...\r\nFeature: Provider List # features/providers/list.feature:1\r\n  I want to see the list of providers.\r\n  I should be able to access the page and see the full list.\r\n  Background:   # features/providers/list.feature:5\r\n\r\n  @wip\r\n  Scenario: Accessing the provider list page.                    # features/providers/list.feature:20\r\n    Given there are the following groups                         # features/steps/groups_steps.py:8 0.027s\r\n      | name            | permissions |\r\n      | Administradores | providers   |\r\n      | Gerentes        |             |\r\n    And there are the following users                            # features/steps/users_steps.py:8 0.652s\r\n      | username | first_name | last_name | group           |\r\n      | user1    | Gabriel    | Jesus     | Administradores |\r\n      | user2    | Elias      | Gon\u00e7alves | Gerentes        |\r\n    And there are the following providers                        # features/steps/providers_steps.py:12 1.652s\r\n      | name                | type        | host                   | hosts |\r\n      | Labrisco SUMA       | susemanager | http://labrisco.usp.br | 10    |\r\n      | ViaVarejo Saltstack | saltstack   | http://via.varejo.br   | 20    |\r\n    When accessing the page \"providers:list\" as \"user1@wise.com\" # features/steps/steps.py:37 0.791s\r\n    Then I see the following providers                           # features/steps/providers_steps.py:35 0.006s\r\n      | name                | status  | type                 | host                   | hosts_count |\r\n      | Labrisco SUMA       | Working | SuseManager Provider | http://labrisco.usp.br | 10 found    |\r\n      | ViaVarejo Saltstack | Working | Saltstack Provider   | http://via.varejo.br   | 20 found    |\r\n\r\n1 feature passed, 0 failed, 11 skipped\r\n1 scenario passed, 0 failed, 27 skipped\r\n5 steps passed, 0 failed, 119 skipped, 0 undefined\r\nTook 0m3.130s\r\nDestroying test database for alias 'default'...\r\n\r\n```\r\n\r\nverbosity: 0\r\n```\r\n/code # MODE=ci python manage.py behave --verbosity 0 --no-logcapture --no-skipped --tags=\"wip\"\r\nCreating test database for alias 'default'...\r\nFeature: Provider List # features/providers/list.feature:1\r\n  I want to see the list of providers.\r\n  I should be able to access the page and see the full list.\r\n  Background:   # features/providers/list.feature:5\r\n\r\n  @wip\r\n  Scenario: Accessing the provider list page.                    # features/providers/list.feature:20\r\n    Given there are the following groups                         # features/steps/groups_steps.py:8 0.031s\r\n      | name            | permissions |\r\n      | Administradores | providers   |\r\n      | Gerentes        |             |\r\n    And there are the following users                            # features/steps/users_steps.py:8 0.618s\r\n      | username | first_name | last_name | group           |\r\n      | user1    | Gabriel    | Jesus     | Administradores |\r\n      | user2    | Elias      | Gon\u00e7alves | Gerentes        |\r\n    And there are the following providers                        # features/steps/providers_steps.py:12 1.657s\r\n      | name                | type        | host                   | hosts |\r\n      | Labrisco SUMA       | susemanager | http://labrisco.usp.br | 10    |\r\n      | ViaVarejo Saltstack | saltstack   | http://via.varejo.br   | 20    |\r\n    When accessing the page \"providers:list\" as \"user1@wise.com\" # features/steps/steps.py:37 0.781s\r\n    Then I see the following providers                           # features/steps/providers_steps.py:35 0.007s\r\n      | name                | status  | type                 | host                   | hosts_count |\r\n      | Labrisco SUMA       | Working | SuseManager Provider | http://labrisco.usp.br | 10 found    |\r\n      | ViaVarejo Saltstack | Working | Saltstack Provider   | http://via.varejo.br   | 20 found    |\r\n\r\n1 feature passed, 0 failed, 11 skipped\r\n1 scenario passed, 0 failed, 27 skipped\r\n5 steps passed, 0 failed, 119 skipped, 0 undefined\r\nTook 0m3.094s\r\nDestroying test database for alias 'default'...\r\n```\r\n\r\nis someone getting the same behavior?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/75", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/75/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/75/events", "html_url": "https://github.com/behave/behave-django/issues/75", "id": 399203078, "node_id": "MDU6SXNzdWUzOTkyMDMwNzg=", "number": 75, "title": "How to configure where to find fixtures?", "user": {"login": "zadigus", "id": 8761254, "node_id": "MDQ6VXNlcjg3NjEyNTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/8761254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadigus", "html_url": "https://github.com/zadigus", "followers_url": "https://api.github.com/users/zadigus/followers", "following_url": "https://api.github.com/users/zadigus/following{/other_user}", "gists_url": "https://api.github.com/users/zadigus/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadigus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadigus/subscriptions", "organizations_url": "https://api.github.com/users/zadigus/orgs", "repos_url": "https://api.github.com/users/zadigus/repos", "events_url": "https://api.github.com/users/zadigus/events{/privacy}", "received_events_url": "https://api.github.com/users/zadigus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840260, "node_id": "MDU6TGFiZWwzNDA4NDAyNjA=", "url": "https://api.github.com/repos/behave/behave-django/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-15T06:17:51Z", "updated_at": "2019-01-23T00:49:13Z", "closed_at": "2019-01-23T00:15:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI am struggling letting behave know where my fixtures are. Currently, I have a `shopozor_features` folder at the root of my project containing all my features. This folder is provided in the `setup.cfg` file like this:\r\n\r\n```\r\n[behave]\r\npaths = shopozor_features\r\n```\r\nCurrently, my features folder is very small:\r\n\r\n```\r\nshopozor_features\r\n  - Authentication\r\n    - LogUserIn.feature\r\n  - fixtures\r\n    - user-data.json\r\n  - steps\r\n    - logUserIn.py\r\n  - environment.py\r\n```\r\n\r\nHere's the code of my `environment.py`: \r\n\r\n```\r\ndef before_scenario(context, scenario):\r\n    context.fixtures = ['user-data.json']\r\n\r\ndef django_ready(context):\r\n    context.test.client = ApiClient(user=AnonymousUser())\r\n    context.django = True\r\n```\r\n\r\nNow, when I use it in my step, behave looks for the fixture file at the root of my project. How do I let behave know that the fixture file is located under `shopozor_features/fixtures/user-data.json`? I could of course write this:\r\n\r\n```\r\ndef before_scenario(context, scenario):\r\n    context.fixtures = ['shopozor_features/fixtures/user-data.json']\r\n```\r\n\r\nbut my little finger tells me that there must be a way to tell behave that all the fixtures are located in the folder `shopozor_features/fixtures`. How do I achieve this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/74", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/74/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/74/events", "html_url": "https://github.com/behave/behave-django/issues/74", "id": 394801103, "node_id": "MDU6SXNzdWUzOTQ4MDExMDM=", "number": 74, "title": "Test fails if order changes", "user": {"login": "yaseralnajjar", "id": 10493809, "node_id": "MDQ6VXNlcjEwNDkzODA5", "avatar_url": "https://avatars3.githubusercontent.com/u/10493809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaseralnajjar", "html_url": "https://github.com/yaseralnajjar", "followers_url": "https://api.github.com/users/yaseralnajjar/followers", "following_url": "https://api.github.com/users/yaseralnajjar/following{/other_user}", "gists_url": "https://api.github.com/users/yaseralnajjar/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaseralnajjar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaseralnajjar/subscriptions", "organizations_url": "https://api.github.com/users/yaseralnajjar/orgs", "repos_url": "https://api.github.com/users/yaseralnajjar/repos", "events_url": "https://api.github.com/users/yaseralnajjar/events{/privacy}", "received_events_url": "https://api.github.com/users/yaseralnajjar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-29T14:43:15Z", "updated_at": "2018-12-29T14:57:28Z", "closed_at": "2018-12-29T14:57:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run this command (manage-room features first):\r\n\r\n```\r\npython manage.py behave features/manage-room.feature features/manage-reservations.feature --stop\r\n```\r\n\r\nThings go fine, but when I run it in the reverse order:\r\n\r\n```\r\npython manage.py behave features/manage-reservations.feature features/manage-room.feature --stop\r\n```\r\n\r\nIt will run into this problem:\r\n\r\n```\r\napi.engine.models.RadioOption.DoesNotExist: RadioOption matching query does not exist.\r\n```\r\n\r\nI tried to find what's happening by adding these lines:\r\n\r\n```python\r\nclass DormManagementNewRoomSerializer(serializers.Serializer):\r\n\r\n    def create(self, validated_data):\r\n\r\n        print('lololololo', models.RadioOption.objects.all())\r\n        print('lololololo', validated_data['room_type_id'])\r\n        print(qqq) # to stop it here\r\n\r\n        dormitory = models.Dormitory.objects.get(pk=self.context.get('dorm_pk'))\r\n\r\n        # ...\r\n```\r\n\r\nAnd I noticed the id (13) doesn't exist in the RadioOption created objects:\r\n\r\n```\r\n Captured stdout:\r\n      lololololo <QuerySet [<RadioOption: Spring option id: 5>, <RadioOption: Winter option id: 6>, <RadioOption: Single option id: 7>, <RadioOption: Double option id: 8>, <RadioOption: Breakfast option id: 9>, <RadioOption: Dinner option id: 10>, <RadioOption: Big Balcony option id: 11>, <RadioOption: Small Balcony option id: 12>]>\r\n      lololololo 13\r\n```\r\n\r\nThe database should be flushed in each scenario (but the ids seem to start from 5) [as mentioned in the documentation here](https://behave-django.readthedocs.io/en/stable/usage.html#simple)\r\n\r\nAnd when I use the switch `--simple`, things go fine in the two previously mentioned cases\r\n\r\nI'm not sure if this is a bug in behave-django or wrong usage from my side (since I use the same step in many scenarios).\r\n\r\nShared step implementation: https://github.com/coretabs/dorm-portal/blob/master/features/steps/manage-dorm.py#L26", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/73", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/73/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/73/events", "html_url": "https://github.com/behave/behave-django/issues/73", "id": 393748611, "node_id": "MDU6SXNzdWUzOTM3NDg2MTE=", "number": 73, "title": "Send-email testing with mail.outbox", "user": {"login": "yaseralnajjar", "id": 10493809, "node_id": "MDQ6VXNlcjEwNDkzODA5", "avatar_url": "https://avatars3.githubusercontent.com/u/10493809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaseralnajjar", "html_url": "https://github.com/yaseralnajjar", "followers_url": "https://api.github.com/users/yaseralnajjar/followers", "following_url": "https://api.github.com/users/yaseralnajjar/following{/other_user}", "gists_url": "https://api.github.com/users/yaseralnajjar/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaseralnajjar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaseralnajjar/subscriptions", "organizations_url": "https://api.github.com/users/yaseralnajjar/orgs", "repos_url": "https://api.github.com/users/yaseralnajjar/repos", "events_url": "https://api.github.com/users/yaseralnajjar/events{/privacy}", "received_events_url": "https://api.github.com/users/yaseralnajjar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840260, "node_id": "MDU6TGFiZWwzNDA4NDAyNjA=", "url": "https://api.github.com/repos/behave/behave-django/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-12-23T13:07:42Z", "updated_at": "2019-01-10T15:43:35Z", "closed_at": "2019-01-10T15:43:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've written this simple test:\r\n\r\n```python\r\n@when('asking for review and saving')\r\ndef act(self):\r\n    site = Site(domain='http://127.0.0.1:8000', name='127.0.0.1')\r\n    site.save()\r\n\r\n    request = {'SITE_ID': site.id}\r\n    self.asking_reservation = {'reservation_id': self.reservation1.id}\r\n    self.deserialized_data = AskForReviewSerializer(\r\n        data=self.asking_reservation, context={'request': request})\r\n\r\n\r\n@then('validate data and send email for review asking')\r\ndef test(self):\r\n    with freeze_time(self.reservation_creation_date_plus_two_months):\r\n        assert self.deserialized_data.is_valid() == True\r\n        assert len(mail.outbox) == 0\r\n\r\n        self.deserialized_data.save()\r\n        assert len(mail.outbox) == 1\r\n```\r\n\r\nAnd this is the serializer I'm testing which sends an email when saving:\r\n\r\n```python\r\nclass AskForReviewSerializer(serializers.Serializer):\r\n    reservation_id = serializers.IntegerField()\r\n\r\n    def save(self, *args, **kwargs):\r\n        request = self.context.get('request')\r\n\r\n        current_site = get_current_site(request)\r\n        reservation_id = self.validated_data['reservation_id']\r\n\r\n        reservation = models.Reservation.objects.get(pk=reservation_id)\r\n        if not reservation.is_reviewable:\r\n            raise serializers.ValidationError('This reservation is not reviewable')\r\n\r\n        user = reservation.user\r\n\r\n        path = f'/reservations/{reservation_id}/review'\r\n        url = settings.BASE_URL + path\r\n        context = {'current_site': current_site,\r\n                   'user': user,\r\n                   'review_url': url,\r\n                   'request': request}\r\n\r\n        get_adapter().send_mail(\r\n            'review/email/ask_for_review',\r\n            user.email,\r\n            context)\r\n\r\n    class Meta:\r\n        fields = ('reservation_id', )\r\n```\r\n\r\nBut `mail.outbox` is never affected when running the tests, its length is always zero (I ensured that my EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend')\r\n\r\nFull test: https://github.com/coretabs/dorm-portal/blob/master/features/steps/reviews.py#L117\r\n\r\nAny idea how can I test the email sending behavior using behave-django?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/71", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/71/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/71/events", "html_url": "https://github.com/behave/behave-django/issues/71", "id": 389177998, "node_id": "MDU6SXNzdWUzODkxNzc5OTg=", "number": 71, "title": "How can I see context.response.content in the browser?", "user": {"login": "YuyaNishimaki", "id": 39610500, "node_id": "MDQ6VXNlcjM5NjEwNTAw", "avatar_url": "https://avatars2.githubusercontent.com/u/39610500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YuyaNishimaki", "html_url": "https://github.com/YuyaNishimaki", "followers_url": "https://api.github.com/users/YuyaNishimaki/followers", "following_url": "https://api.github.com/users/YuyaNishimaki/following{/other_user}", "gists_url": "https://api.github.com/users/YuyaNishimaki/gists{/gist_id}", "starred_url": "https://api.github.com/users/YuyaNishimaki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YuyaNishimaki/subscriptions", "organizations_url": "https://api.github.com/users/YuyaNishimaki/orgs", "repos_url": "https://api.github.com/users/YuyaNishimaki/repos", "events_url": "https://api.github.com/users/YuyaNishimaki/events{/privacy}", "received_events_url": "https://api.github.com/users/YuyaNishimaki/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840260, "node_id": "MDU6TGFiZWwzNDA4NDAyNjA=", "url": "https://api.github.com/repos/behave/behave-django/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-12-10T07:45:53Z", "updated_at": "2019-01-23T10:09:19Z", "closed_at": "2019-01-23T10:09:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\nI'm facing a problem, hoping that someone will help me.\r\n\r\n### I'm trying to do: \r\nI want to run an authentication test of Django application using selenium in behave and behave-django. Also, I want to check the flow of execution of selenium by accessing the vnc server (vnc://localhost:5900).\r\n\r\n### My environment: \r\nmacOS(v10.14.1), Docker(v18.06.1-ce), Django(v2.1.4), behave(v1.2.6), behave-django(v1.1.0), selenium(v3.141.0)\r\n\r\n### The problem: \r\nThe vnc server refuses the access to the localhost. But, I can access the other websites, for exmaple, https://www.google.com/. Why?\r\n\r\n<img width=\"300\" alt=\"2018-12-10 15 41 07\" src=\"https://user-images.githubusercontent.com/39610500/49718005-23c4d500-fc9c-11e8-9344-4a3a42d8aa07.png\">\r\n\r\nAlso, I can probably check the error at `context.response.content.split()`, but it is very hard to see.\r\n\r\n<img width=\"450\" alt=\"2018-12-10 15 40 18\" src=\"https://user-images.githubusercontent.com/39610500/49721550-d0f01b00-fca5-11e8-99c1-9b420f0f58a1.png\">\r\n\r\nHere, I know that the status_code is 200, and pages to be accessed certainly exists.\r\n```\r\nipdb> context.response\r\n<TemplateResponse status_code=200, \"text/html; charset=utf-8\">\r\nipdb> Page.objects.all()=6\r\n```\r\n\r\n### Questions:\r\n1. How can I access to localhost?\r\n2. How can I make context.response.content more readable?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/69", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/69/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/69/events", "html_url": "https://github.com/behave/behave-django/issues/69", "id": 383250284, "node_id": "MDU6SXNzdWUzODMyNTAyODQ=", "number": 69, "title": "Django Versions for supporting behave-django", "user": {"login": "xiaoleATRI", "id": 30299672, "node_id": "MDQ6VXNlcjMwMjk5Njcy", "avatar_url": "https://avatars3.githubusercontent.com/u/30299672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaoleATRI", "html_url": "https://github.com/xiaoleATRI", "followers_url": "https://api.github.com/users/xiaoleATRI/followers", "following_url": "https://api.github.com/users/xiaoleATRI/following{/other_user}", "gists_url": "https://api.github.com/users/xiaoleATRI/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaoleATRI/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaoleATRI/subscriptions", "organizations_url": "https://api.github.com/users/xiaoleATRI/orgs", "repos_url": "https://api.github.com/users/xiaoleATRI/repos", "events_url": "https://api.github.com/users/xiaoleATRI/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaoleATRI/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 351611309, "node_id": "MDU6TGFiZWwzNTE2MTEzMDk=", "url": "https://api.github.com/repos/behave/behave-django/labels/docs", "name": "docs", "color": "1d76db", "default": false, "description": null}, {"id": 340840260, "node_id": "MDU6TGFiZWwzNDA4NDAyNjA=", "url": "https://api.github.com/repos/behave/behave-django/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-21T18:45:43Z", "updated_at": "2018-12-13T23:33:55Z", "closed_at": "2018-11-23T13:01:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, there:\r\n\r\nin README\r\n\r\n> behave-django is tested against the officially supported combinations of Python and Django (Django 1.8, 1.9, 1.10, 1.11, 2.0 on Python 2.7, 3.3, 3.4, 3.5, 3.6, excluding the aged Python 3.2).\r\n\r\nHowever, in your repo, requirements.txt enforces Django to be upgraded to 1.11\r\n`Django>=1.11`\r\n\r\nCan you clarify the Django Version? As of now, latest behave-django is working well in Django 1.9 for me\r\n\r\nThanks,", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/67", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/67/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/67/events", "html_url": "https://github.com/behave/behave-django/issues/67", "id": 380716926, "node_id": "MDU6SXNzdWUzODA3MTY5MjY=", "number": 67, "title": "Fixture loading using decorators not working ?", "user": {"login": "Exanis", "id": 3035542, "node_id": "MDQ6VXNlcjMwMzU1NDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/3035542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Exanis", "html_url": "https://github.com/Exanis", "followers_url": "https://api.github.com/users/Exanis/followers", "following_url": "https://api.github.com/users/Exanis/following{/other_user}", "gists_url": "https://api.github.com/users/Exanis/gists{/gist_id}", "starred_url": "https://api.github.com/users/Exanis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Exanis/subscriptions", "organizations_url": "https://api.github.com/users/Exanis/orgs", "repos_url": "https://api.github.com/users/Exanis/repos", "events_url": "https://api.github.com/users/Exanis/events{/privacy}", "received_events_url": "https://api.github.com/users/Exanis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840255, "node_id": "MDU6TGFiZWwzNDA4NDAyNTU=", "url": "https://api.github.com/repos/behave/behave-django/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-11-14T14:14:04Z", "updated_at": "2018-12-13T23:34:31Z", "closed_at": "2018-12-13T23:28:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI'm facing a strange bug when trying to use the @fixtures decorator to load date. Here is my step definition :\r\n```python\r\nfrom behave_django.decorators import fixtures\r\nfrom behave import given\r\n\r\n\r\n@fixtures(\"test_project.json\")\r\n@given('a default project database exist')\r\ndef project_database(context):\r\n    pass\r\n```\r\n\r\nWhen I try to check if the objects exists, they doesn't. I tryied to check where it could come from so I added this in my environment.py :\r\n\r\n```python\r\ndef django_ready(context):\r\n    print(context.test.fixtures)\r\n```\r\n\r\nI always display None, hiting that there are no fixture at all, even when I try to load them. I added a few print, changing this plugin's environment.py file to look like this:\r\n\r\n```python\r\ndef load_registered_fixtures(context):\r\n    \"\"\"\r\n    Apply fixtures that are registered with the @fixtures decorator.\r\n    \"\"\"\r\n    for step in context.scenario.all_steps:\r\n        match = step_registry.registry.find_match(step)\r\n        print(step_registry.registry.steps)\r\n        if match and hasattr(match.func, 'registered_fixtures'):\r\n            if not context.test.fixtures:\r\n                context.test.fixtures = []\r\n            context.test.fixtures.extend(match.func.registered_fixtures)\r\n```\r\n\r\nThe resulting print is a bit strange:\r\n\r\n```python\r\n{'then': [], 'step': [], 'when': [], 'given': []}\r\n{'then': [], 'step': [], 'when': [], 'given': []}\r\n{'then': [], 'step': [], 'when': [], 'given': []}\r\n{'then': [], 'step': [], 'when': [], 'given': []}\r\n{'then': [], 'step': [], 'when': [], 'given': []}\r\n{'then': [], 'step': [], 'when': [], 'given': []}\r\n{'then': [], 'step': [], 'when': [], 'given': []}\r\n```\r\n\r\nSo it looks like the steps are not recognized, but they are - the test do run well, except for the part where it needs those data. It looks like behave's step_registry is not the one used internally ? I don't exactly know why ? Anyway, the fixtures-loading function can't find any of the steps of the scenario and so it doesn't load anything...\r\n\r\nIs there some way to make it load the fixtures as it should ?\r\n\r\nThank you !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/60", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/60/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/60/events", "html_url": "https://github.com/behave/behave-django/issues/60", "id": 302393268, "node_id": "MDU6SXNzdWUzMDIzOTMyNjg=", "number": 60, "title": "Reload data migrations after flush", "user": {"login": "stereoshoots", "id": 3724558, "node_id": "MDQ6VXNlcjM3MjQ1NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3724558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stereoshoots", "html_url": "https://github.com/stereoshoots", "followers_url": "https://api.github.com/users/stereoshoots/followers", "following_url": "https://api.github.com/users/stereoshoots/following{/other_user}", "gists_url": "https://api.github.com/users/stereoshoots/gists{/gist_id}", "starred_url": "https://api.github.com/users/stereoshoots/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stereoshoots/subscriptions", "organizations_url": "https://api.github.com/users/stereoshoots/orgs", "repos_url": "https://api.github.com/users/stereoshoots/repos", "events_url": "https://api.github.com/users/stereoshoots/events{/privacy}", "received_events_url": "https://api.github.com/users/stereoshoots/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840260, "node_id": "MDU6TGFiZWwzNDA4NDAyNjA=", "url": "https://api.github.com/repos/behave/behave-django/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-03-05T17:34:39Z", "updated_at": "2018-03-08T12:34:29Z", "closed_at": "2018-03-08T12:34:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\n\r\nI have data migrations in my app. Migrations are being executed once after database creation. After scenario database is being flushed except django's data (post_migrate). What is the best way to reload my own data migrations after each scenario? \r\n\r\nThanks ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/58", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/58/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/58/events", "html_url": "https://github.com/behave/behave-django/issues/58", "id": 292509978, "node_id": "MDU6SXNzdWUyOTI1MDk5Nzg=", "number": 58, "title": "Landscape builds fail (after 27 Aug 2016)", "user": {"login": "bittner", "id": 665072, "node_id": "MDQ6VXNlcjY2NTA3Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/665072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bittner", "html_url": "https://github.com/bittner", "followers_url": "https://api.github.com/users/bittner/followers", "following_url": "https://api.github.com/users/bittner/following{/other_user}", "gists_url": "https://api.github.com/users/bittner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bittner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bittner/subscriptions", "organizations_url": "https://api.github.com/users/bittner/orgs", "repos_url": "https://api.github.com/users/bittner/repos", "events_url": "https://api.github.com/users/bittner/events{/privacy}", "received_events_url": "https://api.github.com/users/bittner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840255, "node_id": "MDU6TGFiZWwzNDA4NDAyNTU=", "url": "https://api.github.com/repos/behave/behave-django/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 340840261, "node_id": "MDU6TGFiZWwzNDA4NDAyNjE=", "url": "https://api.github.com/repos/behave/behave-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-29T18:21:21Z", "updated_at": "2019-03-12T23:00:33Z", "closed_at": "2019-03-12T23:00:25Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The Landscape badge on top of the README shows a misleading number of 96% for health.\r\n\r\nMisleading, because it doesn't refer to the current state of the code base. For some reason the last successful Landscape build was on 27 August 2016. I guess there is a permission issue. If you manually trigger the builds an error looks like this:\r\n\r\n![landscape-build-failing](https://user-images.githubusercontent.com/665072/35526756-c9dc1bb8-0528-11e8-80a7-c12edf7f413a.png)\r\n\r\n@mixxorz Can you please take a look at the settings? I would have done that, but I've never been given full access to this repo. Hence, all I can do is ask.\r\n\r\nNote that all I see in my Landscape account is tied to my GitHub user. The successful builds also happened on behalf of user @bittner, until 27 Aug 2016. Maybe that helps to lock down the issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/52", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/52/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/52/events", "html_url": "https://github.com/behave/behave-django/issues/52", "id": 287799818, "node_id": "MDU6SXNzdWUyODc3OTk4MTg=", "number": 52, "title": "New port for each scenario...", "user": {"login": "matrixise", "id": 38737, "node_id": "MDQ6VXNlcjM4NzM3", "avatar_url": "https://avatars2.githubusercontent.com/u/38737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matrixise", "html_url": "https://github.com/matrixise", "followers_url": "https://api.github.com/users/matrixise/followers", "following_url": "https://api.github.com/users/matrixise/following{/other_user}", "gists_url": "https://api.github.com/users/matrixise/gists{/gist_id}", "starred_url": "https://api.github.com/users/matrixise/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matrixise/subscriptions", "organizations_url": "https://api.github.com/users/matrixise/orgs", "repos_url": "https://api.github.com/users/matrixise/repos", "events_url": "https://api.github.com/users/matrixise/events{/privacy}", "received_events_url": "https://api.github.com/users/matrixise/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840260, "node_id": "MDU6TGFiZWwzNDA4NDAyNjA=", "url": "https://api.github.com/repos/behave/behave-django/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-11T14:13:21Z", "updated_at": "2018-01-12T00:42:39Z", "closed_at": "2018-01-12T00:42:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use Django + Behave + Selenium for the functional tests.\r\n\r\nI just execute `python manage.py behave`, for each Scenario, there is a new Django instance (I say that, but in fact, for each test, the port of the live_server changes each time, it seems strange.\r\n\r\nDo you know why?\r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/47", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/47/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/47/events", "html_url": "https://github.com/behave/behave-django/issues/47", "id": 268578173, "node_id": "MDU6SXNzdWUyNjg1NzgxNzM=", "number": 47, "title": "Stable docs not built automatically", "user": {"login": "bittner", "id": 665072, "node_id": "MDQ6VXNlcjY2NTA3Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/665072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bittner", "html_url": "https://github.com/bittner", "followers_url": "https://api.github.com/users/bittner/followers", "following_url": "https://api.github.com/users/bittner/following{/other_user}", "gists_url": "https://api.github.com/users/bittner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bittner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bittner/subscriptions", "organizations_url": "https://api.github.com/users/bittner/orgs", "repos_url": "https://api.github.com/users/bittner/repos", "events_url": "https://api.github.com/users/bittner/events{/privacy}", "received_events_url": "https://api.github.com/users/bittner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 351611309, "node_id": "MDU6TGFiZWwzNTE2MTEzMDk=", "url": "https://api.github.com/repos/behave/behave-django/labels/docs", "name": "docs", "color": "1d76db", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-10-25T23:01:37Z", "updated_at": "2019-03-15T19:30:34Z", "closed_at": "2019-03-13T01:14:35Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The \"stable\" docs don't seem to be built automatically. Only the \"latest\" reflect the current master.\r\n\r\n@mixxorz Can you take a look at the configuration on RTD? https://readthedocs.org/projects/behave-django/\r\n\r\nIs that configured to be manually triggered, maybe? The stable should be built when we push a tag.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/46", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/46/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/46/events", "html_url": "https://github.com/behave/behave-django/issues/46", "id": 268419150, "node_id": "MDU6SXNzdWUyNjg0MTkxNTA=", "number": 46, "title": "Unable to access context.test in before_scenario", "user": {"login": "craiga", "id": 76330, "node_id": "MDQ6VXNlcjc2MzMw", "avatar_url": "https://avatars3.githubusercontent.com/u/76330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/craiga", "html_url": "https://github.com/craiga", "followers_url": "https://api.github.com/users/craiga/followers", "following_url": "https://api.github.com/users/craiga/following{/other_user}", "gists_url": "https://api.github.com/users/craiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/craiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/craiga/subscriptions", "organizations_url": "https://api.github.com/users/craiga/orgs", "repos_url": "https://api.github.com/users/craiga/repos", "events_url": "https://api.github.com/users/craiga/events{/privacy}", "received_events_url": "https://api.github.com/users/craiga/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840255, "node_id": "MDU6TGFiZWwzNDA4NDAyNTU=", "url": "https://api.github.com/repos/behave/behave-django/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 25, "created_at": "2017-10-25T14:26:56Z", "updated_at": "2018-01-29T12:05:48Z", "closed_at": "2018-01-29T12:05:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "We've set up `before_scenario` to swap out Django's test client with Django Rest Framework's `APIClient`:\r\n\r\n```\r\nfrom rest_framework.test import APIClient\r\n\r\ndef before_scenario(context, scenario):\r\n    context.test.client = APIClient()\r\n```\r\n\r\nThis worked in 0.5.0. In 1.0.0, it seems that I can't access `context.test` at this point:\r\n\r\n```\r\nException AttributeError: 'PatchedContext' object has no attribute 'test'\r\nTraceback (most recent call last):\r\n  File \"manage.py\", line 30, in <module>\r\n    main()\r\n  File \"manage.py\", line 26, in main\r\n    execute_from_command_line(sys.argv)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/core/management/__init__.py\", line 364, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/usr/local/lib/python3.6/site-packages/django/core/management/__init__.py\", line 356, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/core/management/base.py\", line 283, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/core/management/base.py\", line 330, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/usr/local/lib/python3.6/site-packages/behave_django/management/commands/behave.py\", line 128, in handle\r\n    exit_status = behave_main(args=behave_args)\r\n  File \"/usr/local/lib/python3.6/site-packages/behave/__main__.py\", line 109, in main\r\n    failed = runner.run()\r\n  File \"/usr/local/lib/python3.6/site-packages/behave/runner.py\", line 672, in run\r\n    return self.run_with_paths()\r\n  File \"/usr/local/lib/python3.6/site-packages/behave/runner.py\", line 693, in run_with_paths\r\n    return self.run_model()\r\n  File \"/usr/local/lib/python3.6/site-packages/behave/runner.py\", line 471, in run_model\r\n    self.run_hook('before_all', context)\r\n  File \"/usr/local/lib/python3.6/site-packages/behave_django/environment.py\", line 91, in run_hook\r\n    behave_run_hook(self, name, context, *args)\r\n  File \"/usr/local/lib/python3.6/site-packages/behave/runner.py\", line 405, in run_hook\r\n    self.hooks[name](context, *args)\r\n  File \"features/environment.py\", line 14, in before_all\r\n    context.test.client = APIClient()\r\n  File \"/usr/local/lib/python3.6/site-packages/behave/runner.py\", line 214, in __getattr__\r\n    raise AttributeError(msg)\r\nAttributeError: 'PatchedContext' object has no attribute 'test'\r\n```\r\n\r\nAs far as I can tell, I should be able to access `context.test` here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/42", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/42/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/42/events", "html_url": "https://github.com/behave/behave-django/issues/42", "id": 263842189, "node_id": "MDU6SXNzdWUyNjM4NDIxODk=", "number": 42, "title": "Feature proposal: register fixtures for any 'step_impl'", "user": {"login": "sebastianmanger", "id": 4821396, "node_id": "MDQ6VXNlcjQ4MjEzOTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4821396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebastianmanger", "html_url": "https://github.com/sebastianmanger", "followers_url": "https://api.github.com/users/sebastianmanger/followers", "following_url": "https://api.github.com/users/sebastianmanger/following{/other_user}", "gists_url": "https://api.github.com/users/sebastianmanger/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebastianmanger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebastianmanger/subscriptions", "organizations_url": "https://api.github.com/users/sebastianmanger/orgs", "repos_url": "https://api.github.com/users/sebastianmanger/repos", "events_url": "https://api.github.com/users/sebastianmanger/events{/privacy}", "received_events_url": "https://api.github.com/users/sebastianmanger/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840257, "node_id": "MDU6TGFiZWwzNDA4NDAyNTc=", "url": "https://api.github.com/repos/behave/behave-django/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-09T10:05:29Z", "updated_at": "2017-10-24T07:05:47Z", "closed_at": "2017-10-24T07:05:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Prerequisites\r\nI am adding behave-django to an old-ish project, which provides many json-fixtures. So I am working with various fixtures, and many different steps. As fixtures are loaded in ```environment.py```, knowing which fixtures are loaded for a given ```step_impl``` is not always transparent - at least for me. I have therefore developed a decorator for fixtures, which can be applied to any ```step_impl```\r\n\r\nThe decorator accepts a list of strings that are then loaded in the ```before_scenario``` in the ```environment.py```. As I prefer callables to json-fixtures, the decorator also accepts paths to callables.\r\n\r\n# Example\r\nThis is a step:\r\n`@fixtures('languages.json', 'behave.fixtures.pages.wagtail_page')`\r\n`@when('someone does something')`\r\n`def step_impl(context):`\r\n`    ...`\r\n\r\nIn the ```environment.py``` - ```before_scenario```, callables for all steps of given scenario are executed, and all other files are appended to ```context.fixtures```\r\n\r\n# Question\r\nSo - please let me know in case you'd like me to provide a pull request, or if you consider this too specific for my project. Thanks a lot for your efforts!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/41", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/41/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/41/events", "html_url": "https://github.com/behave/behave-django/issues/41", "id": 263176853, "node_id": "MDU6SXNzdWUyNjMxNzY4NTM=", "number": 41, "title": "behave attempts to install fixtures each time and fails since they already exist", "user": {"login": "deecodameeko", "id": 321135, "node_id": "MDQ6VXNlcjMyMTEzNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/321135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deecodameeko", "html_url": "https://github.com/deecodameeko", "followers_url": "https://api.github.com/users/deecodameeko/followers", "following_url": "https://api.github.com/users/deecodameeko/following{/other_user}", "gists_url": "https://api.github.com/users/deecodameeko/gists{/gist_id}", "starred_url": "https://api.github.com/users/deecodameeko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deecodameeko/subscriptions", "organizations_url": "https://api.github.com/users/deecodameeko/orgs", "repos_url": "https://api.github.com/users/deecodameeko/repos", "events_url": "https://api.github.com/users/deecodameeko/events{/privacy}", "received_events_url": "https://api.github.com/users/deecodameeko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-05T15:52:27Z", "updated_at": "2017-10-06T23:58:29Z", "closed_at": "2017-10-06T17:44:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have a couple of scenarios, all of which need the same set of fixtures. After the first scenario finished, behave attempts to re-install the fixtures even though they've been loaded already. I've tried setup_databases and teardown_databases thinking that would flush the fixtures. I've even tried calling \"flush\" directl from django's call_command. \r\n\r\nI'm not sure the best way to manage my fixtures. As part of my django.setup() I already call initial_data to load my db...which doesn't seem to be accessible unless I use fixtures in before_scenario.\r\n\r\nHow do I remove my fixtures after each scenario and prevent the error. OR how do I only load the fixtures once?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/39", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/39/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/39/events", "html_url": "https://github.com/behave/behave-django/issues/39", "id": 261930882, "node_id": "MDU6SXNzdWUyNjE5MzA4ODI=", "number": 39, "title": "--noinput", "user": {"login": "hovi", "id": 815731, "node_id": "MDQ6VXNlcjgxNTczMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/815731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hovi", "html_url": "https://github.com/hovi", "followers_url": "https://api.github.com/users/hovi/followers", "following_url": "https://api.github.com/users/hovi/following{/other_user}", "gists_url": "https://api.github.com/users/hovi/gists{/gist_id}", "starred_url": "https://api.github.com/users/hovi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hovi/subscriptions", "organizations_url": "https://api.github.com/users/hovi/orgs", "repos_url": "https://api.github.com/users/hovi/repos", "events_url": "https://api.github.com/users/hovi/events{/privacy}", "received_events_url": "https://api.github.com/users/hovi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840257, "node_id": "MDU6TGFiZWwzNDA4NDAyNTc=", "url": "https://api.github.com/repos/behave/behave-django/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 340840258, "node_id": "MDU6TGFiZWwzNDA4NDAyNTg=", "url": "https://api.github.com/repos/behave/behave-django/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-01T17:15:33Z", "updated_at": "2018-12-19T13:16:59Z", "closed_at": "2018-12-19T13:16:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, when I run normal tests using `test` management command and test database already exists, command line asks me if I want existing database to be deleted, ex:\r\n```\r\nCreating test database for alias 'default'...\r\nGot an error creating the test database: (1007, \"Can't create database 'test_project'; database exists\")\r\nType 'yes' if you would like to try deleting the test database 'test_project', or 'no' to cancel:\r\n```\r\n\r\nSame prompt can popup for `behave` command.\r\n\r\n`test` management command (and many other) have --noinput parameter to suppress these prompts and always confirm/overwrite:\r\nhttps://docs.djangoproject.com/en/1.11/ref/django-admin/#cmdoption-test-noinput\r\n\r\nWould it be possible to add `--noinput` to `behave` command as well?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/36", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/36/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/36/events", "html_url": "https://github.com/behave/behave-django/issues/36", "id": 255691898, "node_id": "MDU6SXNzdWUyNTU2OTE4OTg=", "number": 36, "title": "Reset the sequence of table", "user": {"login": "xiaoleATRI", "id": 30299672, "node_id": "MDQ6VXNlcjMwMjk5Njcy", "avatar_url": "https://avatars3.githubusercontent.com/u/30299672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaoleATRI", "html_url": "https://github.com/xiaoleATRI", "followers_url": "https://api.github.com/users/xiaoleATRI/followers", "following_url": "https://api.github.com/users/xiaoleATRI/following{/other_user}", "gists_url": "https://api.github.com/users/xiaoleATRI/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaoleATRI/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaoleATRI/subscriptions", "organizations_url": "https://api.github.com/users/xiaoleATRI/orgs", "repos_url": "https://api.github.com/users/xiaoleATRI/repos", "events_url": "https://api.github.com/users/xiaoleATRI/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaoleATRI/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840260, "node_id": "MDU6TGFiZWwzNDA4NDAyNjA=", "url": "https://api.github.com/repos/behave/behave-django/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2017-09-06T17:59:46Z", "updated_at": "2017-10-19T03:45:19Z", "closed_at": "2017-09-07T19:25:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was using fixtures to load data in the test. \r\nThe problem I found is that the id of django \"auth_permission\" table was not starting from 1. \r\nSince the fixtures I was loading are using id of \"auth_permission\" as foreign key and the error I got is that it can not map the fixture id to the \"auth_permission\" id in the database.\r\n![edc--mdash--ipython--workplace-edc--mdash---bash--mdash--151-times-40](https://user-images.githubusercontent.com/30299672/30126879-44be0f52-92f2-11e7-9eb4-92540688d74d.jpg)\r\n![pgadmin-4](https://user-images.githubusercontent.com/30299672/30126940-6eda12ae-92f2-11e7-99b9-459e9f44e315.jpg)\r\n\r\n@jenisys ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/35", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/35/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/35/events", "html_url": "https://github.com/behave/behave-django/issues/35", "id": 221926940, "node_id": "MDU6SXNzdWUyMjE5MjY5NDA=", "number": 35, "title": "Django Timezone Change", "user": {"login": "rencesar", "id": 21995387, "node_id": "MDQ6VXNlcjIxOTk1Mzg3", "avatar_url": "https://avatars2.githubusercontent.com/u/21995387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rencesar", "html_url": "https://github.com/rencesar", "followers_url": "https://api.github.com/users/rencesar/followers", "following_url": "https://api.github.com/users/rencesar/following{/other_user}", "gists_url": "https://api.github.com/users/rencesar/gists{/gist_id}", "starred_url": "https://api.github.com/users/rencesar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rencesar/subscriptions", "organizations_url": "https://api.github.com/users/rencesar/orgs", "repos_url": "https://api.github.com/users/rencesar/repos", "events_url": "https://api.github.com/users/rencesar/events{/privacy}", "received_events_url": "https://api.github.com/users/rencesar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840259, "node_id": "MDU6TGFiZWwzNDA4NDAyNTk=", "url": "https://api.github.com/repos/behave/behave-django/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}, {"id": 340840261, "node_id": "MDU6TGFiZWwzNDA4NDAyNjE=", "url": "https://api.github.com/repos/behave/behave-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-04-15T04:55:32Z", "updated_at": "2017-06-23T15:48:59Z", "closed_at": "2017-06-23T15:48:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sometimes we need to use a timezone.now() in django for create models for exemple:\r\n`default=timezone.now()`\r\nAnd when We testing this module with time based tests, we have some problems to define this time. My propose is make a function with context to change a django's timezone.now for a timezone setted in context.date.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/34", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/34/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/34/events", "html_url": "https://github.com/behave/behave-django/issues/34", "id": 216930256, "node_id": "MDU6SXNzdWUyMTY5MzAyNTY=", "number": 34, "title": "'There is 1 other session using the database.'", "user": {"login": "Protosac", "id": 6880594, "node_id": "MDQ6VXNlcjY4ODA1OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/6880594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Protosac", "html_url": "https://github.com/Protosac", "followers_url": "https://api.github.com/users/Protosac/followers", "following_url": "https://api.github.com/users/Protosac/following{/other_user}", "gists_url": "https://api.github.com/users/Protosac/gists{/gist_id}", "starred_url": "https://api.github.com/users/Protosac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Protosac/subscriptions", "organizations_url": "https://api.github.com/users/Protosac/orgs", "repos_url": "https://api.github.com/users/Protosac/repos", "events_url": "https://api.github.com/users/Protosac/events{/privacy}", "received_events_url": "https://api.github.com/users/Protosac/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840260, "node_id": "MDU6TGFiZWwzNDA4NDAyNjA=", "url": "https://api.github.com/repos/behave/behave-django/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-03-24T23:44:34Z", "updated_at": "2019-07-27T21:18:39Z", "closed_at": "2019-07-27T21:18:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run:\r\n`python manage.py behave`\r\n\r\nDjango begins preparing for tests, but throws this error. `behave-django` appears to be complaining about it's own connection to the database (or Django is complaining about `behave-django`s use of the database). Have any ideas what's going on here?\r\n\r\nPython 2.7\r\nDjango 1.9.8\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/32", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/32/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/32/events", "html_url": "https://github.com/behave/behave-django/issues/32", "id": 215272408, "node_id": "MDU6SXNzdWUyMTUyNzI0MDg=", "number": 32, "title": "Add Python 3.6 to test matrix", "user": {"login": "mixxorz", "id": 3102758, "node_id": "MDQ6VXNlcjMxMDI3NTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/3102758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mixxorz", "html_url": "https://github.com/mixxorz", "followers_url": "https://api.github.com/users/mixxorz/followers", "following_url": "https://api.github.com/users/mixxorz/following{/other_user}", "gists_url": "https://api.github.com/users/mixxorz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mixxorz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mixxorz/subscriptions", "organizations_url": "https://api.github.com/users/mixxorz/orgs", "repos_url": "https://api.github.com/users/mixxorz/repos", "events_url": "https://api.github.com/users/mixxorz/events{/privacy}", "received_events_url": "https://api.github.com/users/mixxorz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-03-19T15:43:41Z", "updated_at": "2017-09-08T04:37:08Z", "closed_at": "2017-09-08T04:37:08Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I tried to do this earlier, but because Python 3.6 isn't included in travis' base image, I couldn't get it to work properly.\r\n\r\nRelated issue: https://github.com/travis-ci/travis-ci/issues/4990", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/31", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/31/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/31/events", "html_url": "https://github.com/behave/behave-django/issues/31", "id": 213761180, "node_id": "MDU6SXNzdWUyMTM3NjExODA=", "number": 31, "title": "no context.base_url", "user": {"login": "LetishaB", "id": 7570165, "node_id": "MDQ6VXNlcjc1NzAxNjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/7570165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LetishaB", "html_url": "https://github.com/LetishaB", "followers_url": "https://api.github.com/users/LetishaB/followers", "following_url": "https://api.github.com/users/LetishaB/following{/other_user}", "gists_url": "https://api.github.com/users/LetishaB/gists{/gist_id}", "starred_url": "https://api.github.com/users/LetishaB/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LetishaB/subscriptions", "organizations_url": "https://api.github.com/users/LetishaB/orgs", "repos_url": "https://api.github.com/users/LetishaB/repos", "events_url": "https://api.github.com/users/LetishaB/events{/privacy}", "received_events_url": "https://api.github.com/users/LetishaB/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840256, "node_id": "MDU6TGFiZWwzNDA4NDAyNTY=", "url": "https://api.github.com/repos/behave/behave-django/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}, {"id": 340840261, "node_id": "MDU6TGFiZWwzNDA4NDAyNjE=", "url": "https://api.github.com/repos/behave/behave-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-13T13:07:42Z", "updated_at": "2017-03-14T16:39:05Z", "closed_at": "2017-03-14T16:39:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have 0.4.1 behave-django with 1.2.5 behave, and splinter installed, but context has no base_url, nor get url or anything like that.\r\n\r\nit has the following:\r\n`['BEHAVE', 'USER', '__class__', '__contains__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattr__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_config', '_dump', '_emit_warning', '_mode', '_origin', '_pop', '_push', '_record', '_root', '_runner', '_set_root_attribute', '_stack', 'execute_steps', 'user_mode']`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/26", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/26/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/26/events", "html_url": "https://github.com/behave/behave-django/issues/26", "id": 196282080, "node_id": "MDU6SXNzdWUxOTYyODIwODA=", "number": 26, "title": "How to get features written for behave-django to work in PyCharm?", "user": {"login": "dschweisguth", "id": 182732, "node_id": "MDQ6VXNlcjE4MjczMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/182732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dschweisguth", "html_url": "https://github.com/dschweisguth", "followers_url": "https://api.github.com/users/dschweisguth/followers", "following_url": "https://api.github.com/users/dschweisguth/following{/other_user}", "gists_url": "https://api.github.com/users/dschweisguth/gists{/gist_id}", "starred_url": "https://api.github.com/users/dschweisguth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dschweisguth/subscriptions", "organizations_url": "https://api.github.com/users/dschweisguth/orgs", "repos_url": "https://api.github.com/users/dschweisguth/repos", "events_url": "https://api.github.com/users/dschweisguth/events{/privacy}", "received_events_url": "https://api.github.com/users/dschweisguth/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840260, "node_id": "MDU6TGFiZWwzNDA4NDAyNjA=", "url": "https://api.github.com/repos/behave/behave-django/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}, {"id": 340840261, "node_id": "MDU6TGFiZWwzNDA4NDAyNjE=", "url": "https://api.github.com/repos/behave/behave-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 23, "created_at": "2016-12-18T15:40:31Z", "updated_at": "2018-03-10T07:29:47Z", "closed_at": "2018-03-10T07:29:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "PyCharm has its own behave runner. Even with behave-django in the project, PyCharm's runner doesn't know how to hook up behave-django's database management or other features such as context.base_url. Is there a way to set up behave-django with an arbitrary runner, or would it require explicit support in behave-django or PyCharm or both?\r\n\r\nRelated:\r\n- https://youtrack.jetbrains.com/issue/PY-21979\r\n- http://stackoverflow.com/questions/41208517/how-to-run-behave-django-features-in-pycharm", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/24", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/24/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/24/events", "html_url": "https://github.com/behave/behave-django/issues/24", "id": 175028225, "node_id": "MDU6SXNzdWUxNzUwMjgyMjU=", "number": 24, "title": "Integrating with jenkins", "user": {"login": "hovi", "id": 815731, "node_id": "MDQ6VXNlcjgxNTczMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/815731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hovi", "html_url": "https://github.com/hovi", "followers_url": "https://api.github.com/users/hovi/followers", "following_url": "https://api.github.com/users/hovi/following{/other_user}", "gists_url": "https://api.github.com/users/hovi/gists{/gist_id}", "starred_url": "https://api.github.com/users/hovi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hovi/subscriptions", "organizations_url": "https://api.github.com/users/hovi/orgs", "repos_url": "https://api.github.com/users/hovi/repos", "events_url": "https://api.github.com/users/hovi/events{/privacy}", "received_events_url": "https://api.github.com/users/hovi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840260, "node_id": "MDU6TGFiZWwzNDA4NDAyNjA=", "url": "https://api.github.com/repos/behave/behave-django/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-05T09:12:32Z", "updated_at": "2016-09-05T10:08:46Z", "closed_at": "2016-09-05T09:39:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, \n\nI tried this project and it works very well with my bdd scenarios. I would like to integrate it with jenkins same way I am integrating my unit tests using django-jenkins to see the results in dashboard.\n\nIs there way to do it? If there isn't, could you point me into right direction?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/19", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/19/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/19/events", "html_url": "https://github.com/behave/behave-django/issues/19", "id": 172676975, "node_id": "MDU6SXNzdWUxNzI2NzY5NzU=", "number": 19, "title": "Landscape badge not being updated", "user": {"login": "bittner", "id": 665072, "node_id": "MDQ6VXNlcjY2NTA3Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/665072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bittner", "html_url": "https://github.com/bittner", "followers_url": "https://api.github.com/users/bittner/followers", "following_url": "https://api.github.com/users/bittner/following{/other_user}", "gists_url": "https://api.github.com/users/bittner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bittner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bittner/subscriptions", "organizations_url": "https://api.github.com/users/bittner/orgs", "repos_url": "https://api.github.com/users/bittner/repos", "events_url": "https://api.github.com/users/bittner/events{/privacy}", "received_events_url": "https://api.github.com/users/bittner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-08-23T11:37:38Z", "updated_at": "2016-08-26T05:17:36Z", "closed_at": "2016-08-24T11:20:35Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I've noticed that builds on Landscape aren't triggered anymore.\n\n@mixxorz Can you check whether you can (re)connect the GitHub repository to Landscape? There is something broken here. If you don't have the necessary permissions either @jenisys must connect the repo to Landscape.\n\nCheers!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/17", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/17/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/17/events", "html_url": "https://github.com/behave/behave-django/issues/17", "id": 170667894, "node_id": "MDU6SXNzdWUxNzA2Njc4OTQ=", "number": 17, "title": "django 1.10 compatibility", "user": {"login": "laurentsenta", "id": 1136669, "node_id": "MDQ6VXNlcjExMzY2Njk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1136669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laurentsenta", "html_url": "https://github.com/laurentsenta", "followers_url": "https://api.github.com/users/laurentsenta/followers", "following_url": "https://api.github.com/users/laurentsenta/following{/other_user}", "gists_url": "https://api.github.com/users/laurentsenta/gists{/gist_id}", "starred_url": "https://api.github.com/users/laurentsenta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laurentsenta/subscriptions", "organizations_url": "https://api.github.com/users/laurentsenta/orgs", "repos_url": "https://api.github.com/users/laurentsenta/repos", "events_url": "https://api.github.com/users/laurentsenta/events{/privacy}", "received_events_url": "https://api.github.com/users/laurentsenta/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840256, "node_id": "MDU6TGFiZWwzNDA4NDAyNTY=", "url": "https://api.github.com/repos/behave/behave-django/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-11T15:02:11Z", "updated_at": "2016-08-11T20:16:49Z", "closed_at": "2016-08-11T20:16:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\nI've started using Django, and felt like BDD for my project would be nice.\n\nIs there any plan for a 1.10 compat soon?\n\nwith `behave-django` 0.3.0:\n\n```\n\u203a python manage.py behave\nTraceback (most recent call last):\n  File \"manage.py\", line 10, in <module>\n    execute_from_command_line(sys.argv)\n  File \"/Users/laurent/.virtualenvs/proj/lib/python3.5/site-packages/django/core/management/__init__.py\", line 367, in execute_from_command_line\n    utility.execute()\n  File \"/Users/laurent/.virtualenvs/proj/lib/python3.5/site-packages/django/core/management/__init__.py\", line 359, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File \"/Users/laurent/.virtualenvs/proj/lib/python3.5/site-packages/django/core/management/__init__.py\", line 208, in fetch_command\n    klass = load_command_class(app_name, subcommand)\n  File \"/Users/laurent/.virtualenvs/proj/lib/python3.5/site-packages/django/core/management/__init__.py\", line 40, in load_command_class\n    module = import_module('%s.management.commands.%s' % (app_name, name))\n  File \"/Users/laurent/.virtualenvs/proj/lib/python3.5/importlib/__init__.py\", line 126, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File \"<frozen importlib._bootstrap>\", line 986, in _gcd_import\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\n  File \"<frozen importlib._bootstrap>\", line 958, in _find_and_load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 673, in _load_unlocked\n  File \"<frozen importlib._bootstrap_external>\", line 665, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 222, in _call_with_frames_removed\n  File \"/Users/laurent/.virtualenvs/proj/lib/python3.5/site-packages/behave_django/management/commands/behave.py\", line 69, in <module>\n    class Command(BaseCommand):\n  File \"/Users/laurent/.virtualenvs/proj/lib/python3.5/site-packages/behave_django/management/commands/behave.py\", line 71, in Command\n    option_list = BaseCommand.option_list + get_behave_options() + \\\nAttributeError: type object 'BaseCommand' has no attribute 'option_list'\n```\n\nAccording to SO, `option_list` has been deprecated for a while and removed in Django 1.10,\n\nhttp://stackoverflow.com/a/35181811/843194\n\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/16", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/16/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/16/events", "html_url": "https://github.com/behave/behave-django/issues/16", "id": 165749682, "node_id": "MDU6SXNzdWUxNjU3NDk2ODI=", "number": 16, "title": "Websocket support (django channels)", "user": {"login": "cisarik", "id": 10897701, "node_id": "MDQ6VXNlcjEwODk3NzAx", "avatar_url": "https://avatars3.githubusercontent.com/u/10897701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cisarik", "html_url": "https://github.com/cisarik", "followers_url": "https://api.github.com/users/cisarik/followers", "following_url": "https://api.github.com/users/cisarik/following{/other_user}", "gists_url": "https://api.github.com/users/cisarik/gists{/gist_id}", "starred_url": "https://api.github.com/users/cisarik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cisarik/subscriptions", "organizations_url": "https://api.github.com/users/cisarik/orgs", "repos_url": "https://api.github.com/users/cisarik/repos", "events_url": "https://api.github.com/users/cisarik/events{/privacy}", "received_events_url": "https://api.github.com/users/cisarik/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840258, "node_id": "MDU6TGFiZWwzNDA4NDAyNTg=", "url": "https://api.github.com/repos/behave/behave-django/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}, {"id": 340840260, "node_id": "MDU6TGFiZWwzNDA4NDAyNjA=", "url": "https://api.github.com/repos/behave/behave-django/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2016-07-15T09:48:11Z", "updated_at": "2017-06-22T12:31:24Z", "closed_at": "2017-04-11T09:58:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to configure behave-django to test django apps with [channels](http://channels.readthedocs.io) integrated?\n\nFor WSGI there is wsgiref used right in the documentation:\n\n``` python\nimport threading\nfrom wsgiref import simple_server\nfrom selenium import webdriver\nfrom my_application import model\nfrom my_application import web_app\n\ndef before_all(context):\n    context.server = simple_server.WSGIServer(('', 8000))\n    context.server.set_app(web_app.main(environment='test\u2019))\n    context.thread = threading.Thread(target=context.server.serve_forever) context.thread.start()\n    context.browser = webdriver.Chrome() \n```\n\nHowever Django channels is using ASGI and daphne: [http://channels.readthedocs.io/en/latest/asgi.html](http://channels.readthedocs.io/en/latest/asgi.html)\n\nCurrently I\u2019m deploying my app (for debugging) by:\n\n``` bash\n$ venv/bin/daphne <app>.asgi:channel_layer --port 80 --bind 0.0.0.0 -v2\n$ venv/bin/python manage.py runworker --settings=<app>.settings -v2\n```\n\nHow can I configure behave-django to use daphne (and use runworker..) \n\nI tried to set \"context.server\" in \"before_all\", googled a lot but I still can't figure it out. \n\nShould I override DjangoBehaveTestSuiteRunner and if so, how?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/15", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/15/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/15/events", "html_url": "https://github.com/behave/behave-django/issues/15", "id": 160124243, "node_id": "MDU6SXNzdWUxNjAxMjQyNDM=", "number": 15, "title": "Migrations data is invalid when testing", "user": {"login": "sih4sing5hong5", "id": 5996555, "node_id": "MDQ6VXNlcjU5OTY1NTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5996555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sih4sing5hong5", "html_url": "https://github.com/sih4sing5hong5", "followers_url": "https://api.github.com/users/sih4sing5hong5/followers", "following_url": "https://api.github.com/users/sih4sing5hong5/following{/other_user}", "gists_url": "https://api.github.com/users/sih4sing5hong5/gists{/gist_id}", "starred_url": "https://api.github.com/users/sih4sing5hong5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sih4sing5hong5/subscriptions", "organizations_url": "https://api.github.com/users/sih4sing5hong5/orgs", "repos_url": "https://api.github.com/users/sih4sing5hong5/repos", "events_url": "https://api.github.com/users/sih4sing5hong5/events{/privacy}", "received_events_url": "https://api.github.com/users/sih4sing5hong5/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840260, "node_id": "MDU6TGFiZWwzNDA4NDAyNjA=", "url": "https://api.github.com/repos/behave/behave-django/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}, {"id": 340840261, "node_id": "MDU6TGFiZWwzNDA4NDAyNjE=", "url": "https://api.github.com/repos/behave/behave-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-06-14T08:26:54Z", "updated_at": "2019-05-06T04:47:19Z", "closed_at": "2016-08-21T16:21:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I inserted some data in my migrations.\n\nI can use them in unittest.\n\nBut when I ran `behave`, it got `ObjectDoesNotExist` exception.\n\nI traced the code, the `main` function in `behave/__main__.py`\n\n```\n    runner = Runner(config)\n```\n\nBefore this line, they were in database.\nAfter this, got empty in my database.\n\nHow should I trace code to fix this problem?\n\nPS: pip freeze\n\n```\nbehave==1.2.5\nbehave-django==0.3.0\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/14", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/14/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/14/events", "html_url": "https://github.com/behave/behave-django/issues/14", "id": 159621679, "node_id": "MDU6SXNzdWUxNTk2MjE2Nzk=", "number": 14, "title": "AttributeError: 'NoneType' object has no attribute 'addError'", "user": {"login": "ravigadila", "id": 8197942, "node_id": "MDQ6VXNlcjgxOTc5NDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8197942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ravigadila", "html_url": "https://github.com/ravigadila", "followers_url": "https://api.github.com/users/ravigadila/followers", "following_url": "https://api.github.com/users/ravigadila/following{/other_user}", "gists_url": "https://api.github.com/users/ravigadila/gists{/gist_id}", "starred_url": "https://api.github.com/users/ravigadila/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ravigadila/subscriptions", "organizations_url": "https://api.github.com/users/ravigadila/orgs", "repos_url": "https://api.github.com/users/ravigadila/repos", "events_url": "https://api.github.com/users/ravigadila/events{/privacy}", "received_events_url": "https://api.github.com/users/ravigadila/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840259, "node_id": "MDU6TGFiZWwzNDA4NDAyNTk=", "url": "https://api.github.com/repos/behave/behave-django/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-06-10T12:10:55Z", "updated_at": "2016-07-15T10:54:29Z", "closed_at": "2016-07-15T10:54:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "`python manage.py behave estoresx/features`\n\nComplete log:\n\n``` python\nFeature: Register for new account and login # estoresx/features/account.feature:1\nTraceback (most recent call last):\n  File \"manage.py\", line 10, in <module>\n    execute_from_command_line(sys.argv)\n  File \"/home/ravi/bit/estores/env/local/lib/python2.7/site-packages/django/core/management/__init__.py\", line 354, in execute_from_command_line\n    utility.execute()\n  File \"/home/ravi/bit/estores/env/local/lib/python2.7/site-packages/django/core/management/__init__.py\", line 346, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File \"/home/ravi/bit/estores/env/local/lib/python2.7/site-packages/django/core/management/base.py\", line 394, in run_from_argv\n    self.execute(*args, **cmd_options)\n  File \"/home/ravi/bit/estores/env/local/lib/python2.7/site-packages/django/core/management/base.py\", line 445, in execute\n    output = self.handle(*args, **options)\n  File \"/home/ravi/bit/estores/env/local/lib/python2.7/site-packages/behave_django/management/commands/behave.py\", line 92, in handle\n    exit_status = behave_main(args=behave_args)\n  File \"/home/ravi/bit/estores/env/local/lib/python2.7/site-packages/behave/__main__.py\", line 111, in main\n    failed = runner.run()\n  File \"/home/ravi/bit/estores/env/local/lib/python2.7/site-packages/behave/runner.py\", line 659, in run\n    return self.run_with_paths()\n  File \"/home/ravi/bit/estores/env/local/lib/python2.7/site-packages/behave/runner.py\", line 680, in run_with_paths\n    return self.run_model()\n  File \"/home/ravi/bit/estores/env/local/lib/python2.7/site-packages/behave/runner.py\", line 481, in run_model\n    failed = feature.run(self)\n  File \"/home/ravi/bit/estores/env/local/lib/python2.7/site-packages/behave/model.py\", line 461, in run\n    failed = scenario.run(runner)\n  File \"/home/ravi/bit/estores/env/local/lib/python2.7/site-packages/behave/model.py\", line 773, in run\n    runner.run_hook('before_scenario', runner.context, self)\n  File \"/home/ravi/bit/estores/env/local/lib/python2.7/site-packages/behave_django/environment.py\", line 62, in run_hook\n    django_test_runner.before_scenario(context)\n  File \"/home/ravi/bit/estores/env/local/lib/python2.7/site-packages/behave_django/environment.py\", line 30, in before_scenario\n    context.test()\n  File \"/home/ravi/bit/estores/env/local/lib/python2.7/site-packages/django/test/testcases.py\", line 191, in __call__\n    result.addError(self, sys.exc_info())\nAttributeError: 'NoneType' object has no attribute 'addError'\n```\n\nAll my Behave tests are passing when i use`--use-existing-database` option above.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/12", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/12/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/12/events", "html_url": "https://github.com/behave/behave-django/issues/12", "id": 149509856, "node_id": "MDU6SXNzdWUxNDk1MDk4NTY=", "number": 12, "title": "Remove deprecation code (old hooks)", "user": {"login": "bittner", "id": 665072, "node_id": "MDQ6VXNlcjY2NTA3Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/665072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bittner", "html_url": "https://github.com/bittner", "followers_url": "https://api.github.com/users/bittner/followers", "following_url": "https://api.github.com/users/bittner/following{/other_user}", "gists_url": "https://api.github.com/users/bittner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bittner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bittner/subscriptions", "organizations_url": "https://api.github.com/users/bittner/orgs", "repos_url": "https://api.github.com/users/bittner/repos", "events_url": "https://api.github.com/users/bittner/events{/privacy}", "received_events_url": "https://api.github.com/users/bittner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840257, "node_id": "MDU6TGFiZWwzNDA4NDAyNTc=", "url": "https://api.github.com/repos/behave/behave-django/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-04-19T16:16:12Z", "updated_at": "2016-08-21T11:38:14Z", "closed_at": "2016-08-21T11:38:14Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "@mixxorz I plan to remove the [old hooks functions](https://github.com/behave/behave-django/blob/master/behave_django/environment.py#L72) that currently print out a deprecation warning. This is just one of the things I plan for the next version 0.4.0:\n1. Have deprecated code removed\n2. Switch from optparse to argparse\n3. Maybe add some handy, optional helpers (Selenium helpers for the moment, along with recommendations on how to use Selenium for testing Django projects)\n\nLet me know what you think about all this.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/11", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/11/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/11/events", "html_url": "https://github.com/behave/behave-django/issues/11", "id": 149007626, "node_id": "MDU6SXNzdWUxNDkwMDc2MjY=", "number": 11, "title": "Move docs to ReadTheDocs and setup automated doc builds", "user": {"login": "mixxorz", "id": 3102758, "node_id": "MDQ6VXNlcjMxMDI3NTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/3102758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mixxorz", "html_url": "https://github.com/mixxorz", "followers_url": "https://api.github.com/users/mixxorz/followers", "following_url": "https://api.github.com/users/mixxorz/following{/other_user}", "gists_url": "https://api.github.com/users/mixxorz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mixxorz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mixxorz/subscriptions", "organizations_url": "https://api.github.com/users/mixxorz/orgs", "repos_url": "https://api.github.com/users/mixxorz/repos", "events_url": "https://api.github.com/users/mixxorz/events{/privacy}", "received_events_url": "https://api.github.com/users/mixxorz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 351611309, "node_id": "MDU6TGFiZWwzNTE2MTEzMDk=", "url": "https://api.github.com/repos/behave/behave-django/labels/docs", "name": "docs", "color": "1d76db", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-04-17T23:55:40Z", "updated_at": "2017-02-07T07:03:26Z", "closed_at": "2017-02-07T07:03:26Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Currently, we're hosting our docs on pythonhosted.org. While this is fine, we can't automate the process of releasing documentation. Moving to RTD will allow us to automate doc uploading.\n\nI've actually never done something like this before. I'm assuming we setup some task on the CI server that uploads the docs to RTD?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/10", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/10/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/10/events", "html_url": "https://github.com/behave/behave-django/issues/10", "id": 145387872, "node_id": "MDU6SXNzdWUxNDUzODc4NzI=", "number": 10, "title": "Auto discover feature directories on installed Django apps", "user": {"login": "mixxorz", "id": 3102758, "node_id": "MDQ6VXNlcjMxMDI3NTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/3102758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mixxorz", "html_url": "https://github.com/mixxorz", "followers_url": "https://api.github.com/users/mixxorz/followers", "following_url": "https://api.github.com/users/mixxorz/following{/other_user}", "gists_url": "https://api.github.com/users/mixxorz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mixxorz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mixxorz/subscriptions", "organizations_url": "https://api.github.com/users/mixxorz/orgs", "repos_url": "https://api.github.com/users/mixxorz/repos", "events_url": "https://api.github.com/users/mixxorz/events{/privacy}", "received_events_url": "https://api.github.com/users/mixxorz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840257, "node_id": "MDU6TGFiZWwzNDA4NDAyNTc=", "url": "https://api.github.com/repos/behave/behave-django/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-04-02T16:00:59Z", "updated_at": "2018-12-18T18:17:17Z", "closed_at": "2018-12-18T18:17:17Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Moved from https://github.com/mixxorz/behave-django/issues/39\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/6", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/6/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/6/events", "html_url": "https://github.com/behave/behave-django/issues/6", "id": 144483864, "node_id": "MDU6SXNzdWUxNDQ0ODM4NjQ=", "number": 6, "title": "Add py and feature file in installation docs", "user": {"login": "sih4sing5hong5", "id": 5996555, "node_id": "MDQ6VXNlcjU5OTY1NTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5996555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sih4sing5hong5", "html_url": "https://github.com/sih4sing5hong5", "followers_url": "https://api.github.com/users/sih4sing5hong5/followers", "following_url": "https://api.github.com/users/sih4sing5hong5/following{/other_user}", "gists_url": "https://api.github.com/users/sih4sing5hong5/gists{/gist_id}", "starred_url": "https://api.github.com/users/sih4sing5hong5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sih4sing5hong5/subscriptions", "organizations_url": "https://api.github.com/users/sih4sing5hong5/orgs", "repos_url": "https://api.github.com/users/sih4sing5hong5/repos", "events_url": "https://api.github.com/users/sih4sing5hong5/events{/privacy}", "received_events_url": "https://api.github.com/users/sih4sing5hong5/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 351611309, "node_id": "MDU6TGFiZWwzNTE2MTEzMDk=", "url": "https://api.github.com/repos/behave/behave-django/labels/docs", "name": "docs", "color": "1d76db", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-03-30T07:12:07Z", "updated_at": "2016-04-17T23:52:43Z", "closed_at": "2016-04-17T23:52:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In https://pythonhosted.org/behave-django/installation.html, there is no exactly examples for `your_steps.py`, `environment.py` and `your-feature.feature`.\n\nI think it should be like http://pythonhosted.org/behave/tutorial.html, providing `tutorial.py` and `tutorial.feature` at least\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/4", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/4/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/4/events", "html_url": "https://github.com/behave/behave-django/issues/4", "id": 142423878, "node_id": "MDU6SXNzdWUxNDI0MjM4Nzg=", "number": 4, "title": "Are scenarios run in a database transaction?", "user": {"login": "JCapriotti", "id": 801182, "node_id": "MDQ6VXNlcjgwMTE4Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/801182?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JCapriotti", "html_url": "https://github.com/JCapriotti", "followers_url": "https://api.github.com/users/JCapriotti/followers", "following_url": "https://api.github.com/users/JCapriotti/following{/other_user}", "gists_url": "https://api.github.com/users/JCapriotti/gists{/gist_id}", "starred_url": "https://api.github.com/users/JCapriotti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JCapriotti/subscriptions", "organizations_url": "https://api.github.com/users/JCapriotti/orgs", "repos_url": "https://api.github.com/users/JCapriotti/repos", "events_url": "https://api.github.com/users/JCapriotti/events{/privacy}", "received_events_url": "https://api.github.com/users/JCapriotti/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840260, "node_id": "MDU6TGFiZWwzNDA4NDAyNjA=", "url": "https://api.github.com/repos/behave/behave-django/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2016-03-21T17:58:46Z", "updated_at": "2019-07-09T18:40:49Z", "closed_at": "2016-04-14T07:51:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\nI have some test cases that appear to be failing because of how the database is reset after each scenario. Specifically, database sequences are not being reset. I stumbled on what seems like conflicting statements in the documentation.\n\nFrom https://pythonhosted.org/behave-django/usage.html#database-transactions-per-scenario\n\n> Each scenario is run inside a database transaction, just like your regular TestCases\n\nFrom the last paragraph of https://pythonhosted.org/behave-django/usage.html#fixture-loading\n\n> This is because Django\u2019s LiveServerTestCase resets the test database after each scenario\n\nNow if you dig into `LiveServerTestCase` via https://docs.djangoproject.com/en/1.9/topics/testing/tools/...\n\n> LiveServerTestCase does basically the same as TransactionTestCase \n\nOr, `LiveServerTestCase` is a subclass of `TransactionTestCase`. And further down...\n\n> - A **TransactionTestCase resets the database after the test runs by truncating all tables**. A TransactionTestCase may call commit and rollback and observe the effects of these calls on the database.\n> - A **TestCase**, on the other hand, does not truncate tables after a test. Instead, it **encloses the test code in a database transaction** that is rolled back at the end of the test. This guarantees that the rollback at the end of the test restores the database to its initial state.\n\nMy first question is... is it correct that that behave-django is using a LiveServerTestCase, which means there is no database transaction happening?\n\nSecond, is there any way to change what happens when the database is reset? i.e. specify that the `TestCase` transaction behavior be used. Or alternatively, allow support modifying things like  [`TransactionTestCase.reset_sequences`](https://docs.djangoproject.com/en/1.9/topics/testing/advanced/#django.test.TransactionTestCase.reset_sequences)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/3", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/3/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/3/events", "html_url": "https://github.com/behave/behave-django/issues/3", "id": 142304617, "node_id": "MDU6SXNzdWUxNDIzMDQ2MTc=", "number": 3, "title": "Fix navigation drawbacks in docs", "user": {"login": "bittner", "id": 665072, "node_id": "MDQ6VXNlcjY2NTA3Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/665072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bittner", "html_url": "https://github.com/bittner", "followers_url": "https://api.github.com/users/bittner/followers", "following_url": "https://api.github.com/users/bittner/following{/other_user}", "gists_url": "https://api.github.com/users/bittner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bittner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bittner/subscriptions", "organizations_url": "https://api.github.com/users/bittner/orgs", "repos_url": "https://api.github.com/users/bittner/repos", "events_url": "https://api.github.com/users/bittner/events{/privacy}", "received_events_url": "https://api.github.com/users/bittner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 351611309, "node_id": "MDU6TGFiZWwzNTE2MTEzMDk=", "url": "https://api.github.com/repos/behave/behave-django/labels/docs", "name": "docs", "color": "1d76db", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-03-21T10:10:42Z", "updated_at": "2016-08-27T07:41:55Z", "closed_at": "2016-08-27T07:41:55Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The documentation has a substantial drawback when it comes to navigating through content.\n### Problem example\n\nSee the [Contributing](https://pythonhosted.org/behave-django/contribute.html) chapter. How do you get back to the welcome page, for example?\n\nThis issue seems to be inherent to the Alabaster theme. Other projects have the same problem, see e.g. the [behave docs](http://pythonhosted.org/behave/django.html), but it's less relevant there because the docs have the behave \"logo\" (the image with the words box) that takes you home. We should probably have something similar.\n- Can we fix the scarce navigation via some configuration switch? ([Sphinx](http://www.sphinx-doc.org/en/stable/config.html#confval-html_sidebars), [Alabaster](https://pypi.python.org/pypi/alabaster))\n- We should probably come up with a (Pony) logo and add it as a \"home link\" to the docs.\n### Logo ideas\n- [Yet unused Django mascots](http://mirskytech.com/django-iconography-pony-critter/) (Andrew Mirsky)\n- Combination of Django and behave. (A Pony and Given-When-Then)\n\n_\"Given a pony, when I run behave with behave-django, then my project has awesome tests.\"_\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave-django/issues/2", "repository_url": "https://api.github.com/repos/behave/behave-django", "labels_url": "https://api.github.com/repos/behave/behave-django/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave-django/issues/2/comments", "events_url": "https://api.github.com/repos/behave/behave-django/issues/2/events", "html_url": "https://github.com/behave/behave-django/issues/2", "id": 140686876, "node_id": "MDU6SXNzdWUxNDA2ODY4NzY=", "number": 2, "title": "Switch from optparse to argparse", "user": {"login": "bittner", "id": 665072, "node_id": "MDQ6VXNlcjY2NTA3Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/665072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bittner", "html_url": "https://github.com/bittner", "followers_url": "https://api.github.com/users/bittner/followers", "following_url": "https://api.github.com/users/bittner/following{/other_user}", "gists_url": "https://api.github.com/users/bittner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bittner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bittner/subscriptions", "organizations_url": "https://api.github.com/users/bittner/orgs", "repos_url": "https://api.github.com/users/bittner/repos", "events_url": "https://api.github.com/users/bittner/events{/privacy}", "received_events_url": "https://api.github.com/users/bittner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 340840257, "node_id": "MDU6TGFiZWwzNDA4NDAyNTc=", "url": "https://api.github.com/repos/behave/behave-django/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-03-14T14:24:39Z", "updated_at": "2018-12-13T23:35:47Z", "closed_at": "2016-08-21T11:38:14Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As Django 1.9 complains with a deprecation warning (and more and more developers start using Django 1.9) we should consider switching to [argparse](https://docs.python.org/3.4/library/argparse.html) in a backward-compatible manner. Affected code locations:\n- [behave_django/parser.py](https://github.com/behave/behave-django/blob/master/behave_django/parser.py#L1)\n- [behave_django/management/commands/behave.py](https://github.com/behave/behave-django/blob/master/behave_django/management/commands/behave.py#L2)\n## Compatibility Details\n\nUntil Django 1.7 optparse's `make_option` is used for the `option_list`. The implementation of our management command pretty much depends on that. Django 1.8 makes the switch finally to argparse. I fear an implementation change on our side will probably have to follow their approach and may need to consider the Django version in use.\n### See Also\n- https://github.com/django/django/blob/1.7/django/core/management/base.py#L184\n- https://github.com/django/django/blob/1.8/django/core/management/base.py#L224\n- [Python optparse make_option() equivalent in argparse](http://stackoverflow.com/questions/14387540/python-optparse-make-option-equivalent-in-argparse) (StackOverflow)\n## Historical Note\n\nThis issue is a continuation of [issue 24](https://github.com/mixxorz/behave-django/issues/24) in the original repository location at `mixxorz/behave-django`.\n", "performed_via_github_app": null, "score": 1.0}]}