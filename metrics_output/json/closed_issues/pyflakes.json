{"total_count": 297, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/573", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/573/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/573/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/573/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/573", "id": 679519533, "node_id": "MDU6SXNzdWU2Nzk1MTk1MzM=", "number": 573, "title": "F821 when referencing class variable", "user": {"login": "dmtucker", "id": 1817814, "node_id": "MDQ6VXNlcjE4MTc4MTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1817814?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmtucker", "html_url": "https://github.com/dmtucker", "followers_url": "https://api.github.com/users/dmtucker/followers", "following_url": "https://api.github.com/users/dmtucker/following{/other_user}", "gists_url": "https://api.github.com/users/dmtucker/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmtucker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmtucker/subscriptions", "organizations_url": "https://api.github.com/users/dmtucker/orgs", "repos_url": "https://api.github.com/users/dmtucker/repos", "events_url": "https://api.github.com/users/dmtucker/events{/privacy}", "received_events_url": "https://api.github.com/users/dmtucker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-15T07:36:35Z", "updated_at": "2020-08-15T08:46:33Z", "closed_at": "2020-08-15T08:35:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "2.2.0 Python 3.8.2 on Linux\r\n``` python\r\nfrom typing import Dict\r\n\r\n\r\nclass Foo:\r\n\r\n    _bar_type = Dict[str, int]\r\n\r\n    def __init__(self, bar: _bar_type):\r\n        self.bar = bar\r\n\r\n    @classmethod\r\n    def baz(cls) -> 'Foo':\r\n        bar: _bar_type = {}\r\n        return cls(bar)\r\n```\r\n```\r\nfoo.py:13:14 undefined name '_bar_type'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/571", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/571/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/571/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/571/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/571", "id": 678665735, "node_id": "MDU6SXNzdWU2Nzg2NjU3MzU=", "number": 571, "title": "False positive: unused import for quoted generic parameters and TypeVar bounds", "user": {"login": "rraval", "id": 373566, "node_id": "MDQ6VXNlcjM3MzU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/373566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rraval", "html_url": "https://github.com/rraval", "followers_url": "https://api.github.com/users/rraval/followers", "following_url": "https://api.github.com/users/rraval/following{/other_user}", "gists_url": "https://api.github.com/users/rraval/gists{/gist_id}", "starred_url": "https://api.github.com/users/rraval/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rraval/subscriptions", "organizations_url": "https://api.github.com/users/rraval/orgs", "repos_url": "https://api.github.com/users/rraval/repos", "events_url": "https://api.github.com/users/rraval/events{/privacy}", "received_events_url": "https://api.github.com/users/rraval/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-13T18:57:09Z", "updated_at": "2020-08-13T19:00:42Z", "closed_at": "2020-08-13T19:00:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Similar to #447, it seems that quoted types are not handled when passed as a generic parameter to a base class:\r\n\r\n```python\r\nfrom typing import TYPE_CHECKING, Generic, TypeVar\r\n\r\nif TYPE_CHECKING:\r\n    # imagine this being some module that has circular imports\r\n    from threading import Thread  # <--- pyflakes: 'threading.Thread' imported but unused\r\n\r\nT = TypeVar(\"T\")\r\n\r\nclass Base(Generic[T]):\r\n    pass\r\n\r\nclass Derived(Base[\"Thread\"]):\r\n    pass\r\n```\r\n\r\nPerhaps worth a different issue, but the same thing occurs when using a `bound` for `TypeVar`:\r\n\r\n```python\r\nfrom typing import TYPE_CHECKING, Generic, TypeVar\r\n\r\nif TYPE_CHECKING:\r\n    # imagine this being some module that has circular imports\r\n    from threading import Thread  # <--- pyflakes: 'threading.Thread' imported but unused\r\n\r\nT = TypeVar(\"T\", bound=\"Thread\")\r\n\r\nclass Base(Generic[T]):\r\n    pass\r\n```\r\n\r\nVersion information:\r\n\r\n```\r\n$ pyflakes --version\r\n2.2.0 Python 3.6.8 on Linux\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/570", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/570/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/570/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/570/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/570", "id": 678332418, "node_id": "MDU6SXNzdWU2NzgzMzI0MTg=", "number": 570, "title": "typing not working with pyflakes  google cloud shell editor ", "user": {"login": "girirajthara", "id": 24633011, "node_id": "MDQ6VXNlcjI0NjMzMDEx", "avatar_url": "https://avatars1.githubusercontent.com/u/24633011?v=4", "gravatar_id": "", "url": "https://api.github.com/users/girirajthara", "html_url": "https://github.com/girirajthara", "followers_url": "https://api.github.com/users/girirajthara/followers", "following_url": "https://api.github.com/users/girirajthara/following{/other_user}", "gists_url": "https://api.github.com/users/girirajthara/gists{/gist_id}", "starred_url": "https://api.github.com/users/girirajthara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/girirajthara/subscriptions", "organizations_url": "https://api.github.com/users/girirajthara/orgs", "repos_url": "https://api.github.com/users/girirajthara/repos", "events_url": "https://api.github.com/users/girirajthara/events{/privacy}", "received_events_url": "https://api.github.com/users/girirajthara/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-13T10:31:52Z", "updated_at": "2020-08-13T16:28:57Z", "closed_at": "2020-08-13T16:28:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "<img width=\"1003\" alt=\"Screenshot 2020-08-13 at 4 00 01 PM\" src=\"https://user-images.githubusercontent.com/24633011/90124579-3d29f880-dd7e-11ea-8b9a-cff49dcb94f9.png\">\r\n\r\nEDIT(by asottile):\r\n\r\n```python\r\nfrom typing import Type\r\nfrom typing import TypeVar\r\n\r\nTBase = TypeVar('TBase', bound='Base')\r\n\r\nclass Base:\r\n    def __init__(self, s):\r\n        self.s = s\r\n\r\n    @classmethod\r\n    def make(cls: Type[TBase], s: str) -> TBase:\r\n        return cls(s)\r\n\r\n\r\nclass C(Base):\r\n    pass\r\n\r\nreveal_type(Base.make('s'))\r\nreveal_type(C.make('s'))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/569", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/569/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/569/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/569/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/569", "id": 675965009, "node_id": "MDU6SXNzdWU2NzU5NjUwMDk=", "number": 569, "title": "false positive on import and field of same name", "user": {"login": "christianhujer", "id": 692345, "node_id": "MDQ6VXNlcjY5MjM0NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/692345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/christianhujer", "html_url": "https://github.com/christianhujer", "followers_url": "https://api.github.com/users/christianhujer/followers", "following_url": "https://api.github.com/users/christianhujer/following{/other_user}", "gists_url": "https://api.github.com/users/christianhujer/gists{/gist_id}", "starred_url": "https://api.github.com/users/christianhujer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/christianhujer/subscriptions", "organizations_url": "https://api.github.com/users/christianhujer/orgs", "repos_url": "https://api.github.com/users/christianhujer/repos", "events_url": "https://api.github.com/users/christianhujer/events{/privacy}", "received_events_url": "https://api.github.com/users/christianhujer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-10T08:37:40Z", "updated_at": "2020-08-10T09:34:06Z", "closed_at": "2020-08-10T09:33:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the following excerpt:\r\n\r\n```\r\nfrom dataclasses import dataclas\r\nfrom rules import ConwayRules\r\nimport point\r\nimport rules\r\n\r\n\r\n@dataclass(fronzen=True)\r\nclass Universe:\r\n    life:set\r\n    rules: rules = ConwayRules\r\n```\r\n\r\n`pyflakes` reports two false positive:\r\n```\r\nuniverse.py:4:1 'rules' imported but unused\r\nuniverse.py:10:5 redefinition of unused 'rules' from line 4\r\n```\r\n\r\nIn case you want to try on the full code: https://github.com/nelkinda/gameoflife-python", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/568", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/568/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/568/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/568/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/568", "id": 668264469, "node_id": "MDU6SXNzdWU2NjgyNjQ0Njk=", "number": 568, "title": "Feature Request: Check for if statements with truthy/falsey literals which determine the truth value", "user": {"login": "lucaswiman", "id": 123110, "node_id": "MDQ6VXNlcjEyMzExMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/123110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucaswiman", "html_url": "https://github.com/lucaswiman", "followers_url": "https://api.github.com/users/lucaswiman/followers", "following_url": "https://api.github.com/users/lucaswiman/following{/other_user}", "gists_url": "https://api.github.com/users/lucaswiman/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucaswiman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucaswiman/subscriptions", "organizations_url": "https://api.github.com/users/lucaswiman/orgs", "repos_url": "https://api.github.com/users/lucaswiman/repos", "events_url": "https://api.github.com/users/lucaswiman/events{/privacy}", "received_events_url": "https://api.github.com/users/lucaswiman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-30T00:53:24Z", "updated_at": "2020-07-30T17:55:26Z", "closed_at": "2020-07-30T17:55:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Add a check that alerts when the branch taken in an `if` statement is determined by a boolean clause with a falsey or truthy literal. Examples that would be cause an error:\r\n```python\r\nif True:\r\nif False:\r\nif True or ...:\r\nif False and ...:\r\nif x==\"value\" or \"other value\":\r\nif True and (False and (True or False)):  # i.e. it applies the check recursively to each clause\r\nif {} or 0 or 0.0 or [] or '' or False:\r\n```\r\nExamples that would still be allowed:\r\n```python\r\nif 1 == 1:\r\nif \"foo\" in (\"foo\", \"bar\"):\r\nif False or ...:\r\nif True and ...:\r\n\r\nx = True\r\nif x:\r\n```\r\nI would be amenable to implementing this check if it's a good fit for pyflakes/flake8, or I could make it a flake8 plugin if not. Feel free to close this issue if it's not a good fit for pyflakes.\r\n\r\n## Rationale\r\nRecently at my job, we had a bug in production due to code along the following lines\r\n```python\r\ndef foo(bar):\r\n    if bar == 'bar' or 'baz':\r\n        print('always executed')\r\n```\r\nClearly the author intended `bar == 'bar' or bar == 'baz'`. It's a bit difficult to catch this in code review, since the code _almost_ looks right, but isn't. Generally if you want deterministic behavior that does not depend on variables, you wouldn't write an if statement in the first place. I'm not aware of any valid reason for this sort of code.\r\n\r\nI also use the following sort of idioms for debugging, which I wouldn't want to accidentally check in:\r\n```python\r\nif False and ...:\r\n    # Code I want to skip, e.g. because it is not relevant to what I'm debugging and is slow.\r\nif True or ...:\r\n    # code I want to force to be executed.\r\nif False:\r\n    # indented code I don't want executed.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/565", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/565/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/565/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/565/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/565", "id": 656024224, "node_id": "MDU6SXNzdWU2NTYwMjQyMjQ=", "number": 565, "title": "False positive: F821 on `Generic[TypeVar('T')]`", "user": {"login": "zackw", "id": 325899, "node_id": "MDQ6VXNlcjMyNTg5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/325899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackw", "html_url": "https://github.com/zackw", "followers_url": "https://api.github.com/users/zackw/followers", "following_url": "https://api.github.com/users/zackw/following{/other_user}", "gists_url": "https://api.github.com/users/zackw/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackw/subscriptions", "organizations_url": "https://api.github.com/users/zackw/orgs", "repos_url": "https://api.github.com/users/zackw/repos", "events_url": "https://api.github.com/users/zackw/events{/privacy}", "received_events_url": "https://api.github.com/users/zackw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-13T17:38:06Z", "updated_at": "2020-07-24T17:11:04Z", "closed_at": "2020-07-24T17:11:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "This test case produces a spurious F821 error:\r\n\r\n```\r\nfrom typing import Generic, TypeVar\r\n\r\n\r\nclass C(Generic[TypeVar('T')]):   # F821: undefined name 'T'\r\n    pass\r\n```\r\n\r\nThis does not happen if I assign the type variable to an actual variable (even if it has a different name than the argument to TypeVar):\r\n\r\n```\r\nfrom typing import Generic, TypeVar\r\nX = TypeVar('T')\r\n\r\n\r\nclass C(Generic[X]):\r\n    pass\r\n```\r\n\r\nbut I don't think I should have to do that; this is the only place in the file where this particular type variable is used, and neither mypy nor the core interpreter cares whether TypeVar objects are bound to global names.\r\n\r\nThis is with pyflakes 2.2.0 (run via flake8 3.8.3).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/564", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/564/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/564/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/564/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/564", "id": 650728605, "node_id": "MDU6SXNzdWU2NTA3Mjg2MDU=", "number": 564, "title": "Whalrus operator gives AttributeError", "user": {"login": "8Kuula", "id": 29673474, "node_id": "MDQ6VXNlcjI5NjczNDc0", "avatar_url": "https://avatars0.githubusercontent.com/u/29673474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/8Kuula", "html_url": "https://github.com/8Kuula", "followers_url": "https://api.github.com/users/8Kuula/followers", "following_url": "https://api.github.com/users/8Kuula/following{/other_user}", "gists_url": "https://api.github.com/users/8Kuula/gists{/gist_id}", "starred_url": "https://api.github.com/users/8Kuula/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/8Kuula/subscriptions", "organizations_url": "https://api.github.com/users/8Kuula/orgs", "repos_url": "https://api.github.com/users/8Kuula/repos", "events_url": "https://api.github.com/users/8Kuula/events{/privacy}", "received_events_url": "https://api.github.com/users/8Kuula/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-03T18:45:38Z", "updated_at": "2020-07-03T22:39:51Z", "closed_at": "2020-07-03T22:39:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Code\r\n```\r\nif (x := 'test') == 'test':\r\n    print(f'x is a {x}')\r\n```\r\n\r\npyflakes\r\n```\r\n$ pyflakes3 test.py\r\nTraceback (most recent call last):\r\n  File \"/usr/bin/pyflakes3\", line 11, in <module>\r\n    load_entry_point('pyflakes==2.1.1', 'console_scripts', 'pyflakes')()\r\n  File \"/usr/lib/python3/dist-packages/pyflakes/api.py\", line 207, in main\r\n    warnings = checkRecursive(args, reporter)\r\n  File \"/usr/lib/python3/dist-packages/pyflakes/api.py\", line 156, in checkRecursive\r\n    warnings += checkPath(sourcePath, reporter)\r\n  File \"/usr/lib/python3/dist-packages/pyflakes/api.py\", line 99, in checkPath\r\n    return check(codestr, filename, reporter)\r\n  File \"/usr/lib/python3/dist-packages/pyflakes/api.py\", line 74, in check\r\n    w = checker.Checker(tree, file_tokens=file_tokens, filename=filename)\r\n  File \"/usr/lib/python3/dist-packages/pyflakes/checker.py\", line 672, in __init__\r\n    self.handleChildren(tree)\r\n  File \"/usr/lib/python3/dist-packages/pyflakes/checker.py\", line 1073, in handleChildren\r\n    self.handleNode(node, tree)\r\n  File \"/usr/lib/python3/dist-packages/pyflakes/checker.py\", line 1120, in handleNode\r\n    handler(node)\r\n  File \"/usr/lib/python3/dist-packages/pyflakes/checker.py\", line 1073, in handleChildren\r\n    self.handleNode(node, tree)\r\n  File \"/usr/lib/python3/dist-packages/pyflakes/checker.py\", line 1120, in handleNode\r\n    handler(node)\r\n  File \"/usr/lib/python3/dist-packages/pyflakes/checker.py\", line 1698, in COMPARE\r\n    self.handleChildren(node)\r\n  File \"/usr/lib/python3/dist-packages/pyflakes/checker.py\", line 1073, in handleChildren\r\n    self.handleNode(node, tree)\r\n  File \"/usr/lib/python3/dist-packages/pyflakes/checker.py\", line 1119, in handleNode\r\n    handler = self.getNodeHandler(node.__class__)\r\n  File \"/usr/lib/python3/dist-packages/pyflakes/checker.py\", line 909, in getNodeHandler\r\n    self._nodeHandlers[node_class] = handler = getattr(self, nodeType)\r\nAttributeError: 'Checker' object has no attribute 'NAMEDEXPR'\r\n```\r\nversion: 2.1.1 Python 3.8.2 on Linux\r\n\r\nCode executed\r\n```\r\n$ python3 test.py \r\nx is a test\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/563", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/563/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/563/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/563/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/563", "id": 648977919, "node_id": "MDU6SXNzdWU2NDg5Nzc5MTk=", "number": 563, "title": "Possible false negatives being thrown in F541 for Django urls.py", "user": {"login": "chocoelho", "id": 3460435, "node_id": "MDQ6VXNlcjM0NjA0MzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3460435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chocoelho", "html_url": "https://github.com/chocoelho", "followers_url": "https://api.github.com/users/chocoelho/followers", "following_url": "https://api.github.com/users/chocoelho/following{/other_user}", "gists_url": "https://api.github.com/users/chocoelho/gists{/gist_id}", "starred_url": "https://api.github.com/users/chocoelho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chocoelho/subscriptions", "organizations_url": "https://api.github.com/users/chocoelho/orgs", "repos_url": "https://api.github.com/users/chocoelho/repos", "events_url": "https://api.github.com/users/chocoelho/events{/privacy}", "received_events_url": "https://api.github.com/users/chocoelho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-01T13:22:14Z", "updated_at": "2020-07-01T16:57:51Z", "closed_at": "2020-07-01T16:57:51Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "pyflakes is throwing F541 for this chunk of code, saying that this f-string has nothing to interpolate. The approach used in the sample is consistent with PEP-0498 [raw f-strings](https://www.python.org/dev/peps/pep-0498/#raw-f-strings) section.\r\n\r\n```python\r\n    re_path(\r\n        fr\"^{VAR_X}/some-url/{VAR_Y}/$\",\r\n        MyView.as_view(),\r\n        name=\"my-view\",\r\n    ),\r\n```\r\n\r\npyflakes==2.2.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/560", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/560/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/560/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/560/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/560", "id": 641437474, "node_id": "MDU6SXNzdWU2NDE0Mzc0NzQ=", "number": 560, "title": "Too many positional arguments?", "user": {"login": "pwinston", "id": 4163446, "node_id": "MDQ6VXNlcjQxNjM0NDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4163446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pwinston", "html_url": "https://github.com/pwinston", "followers_url": "https://api.github.com/users/pwinston/followers", "following_url": "https://api.github.com/users/pwinston/following{/other_user}", "gists_url": "https://api.github.com/users/pwinston/gists{/gist_id}", "starred_url": "https://api.github.com/users/pwinston/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pwinston/subscriptions", "organizations_url": "https://api.github.com/users/pwinston/orgs", "repos_url": "https://api.github.com/users/pwinston/repos", "events_url": "https://api.github.com/users/pwinston/events{/privacy}", "received_events_url": "https://api.github.com/users/pwinston/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-18T17:45:07Z", "updated_at": "2020-06-18T18:42:06Z", "closed_at": "2020-06-18T18:01:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "On this test program:\r\n```\r\ndef func():\r\n    return 42\r\n\r\nfunc(1, 2, 3)\r\n```\r\n`pylint` says `E1121: Too many positional arguments for function call (too-many-function-args)` but `pyflakes 2.2.0` has no errors or warnings.\r\n\r\nIs this by design? Is there some technology pylint is using here that flake8 doesn't have?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/559", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/559/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/559/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/559/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/559", "id": 641316420, "node_id": "MDU6SXNzdWU2NDEzMTY0MjA=", "number": 559, "title": "False positive with .format(...) unused positional arguments / F523?", "user": {"login": "mika", "id": 115592, "node_id": "MDQ6VXNlcjExNTU5Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/115592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mika", "html_url": "https://github.com/mika", "followers_url": "https://api.github.com/users/mika/followers", "following_url": "https://api.github.com/users/mika/following{/other_user}", "gists_url": "https://api.github.com/users/mika/gists{/gist_id}", "starred_url": "https://api.github.com/users/mika/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mika/subscriptions", "organizations_url": "https://api.github.com/users/mika/orgs", "repos_url": "https://api.github.com/users/mika/repos", "events_url": "https://api.github.com/users/mika/events{/privacy}", "received_events_url": "https://api.github.com/users/mika/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-18T15:38:50Z", "updated_at": "2020-06-18T16:26:14Z", "closed_at": "2020-06-18T15:53:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Stumbled upon this with flake8 v3.8.3 (reporting it as F523), while flake8 v3.6.0 didn't show this behavior.\r\n\r\nSTR:\r\n\r\n```\r\n% cat demo.py \r\nsource = \"foo\"\r\n\r\n\r\nclass CriticalException(Exception):\r\n    \"\"\"Throw critical exception if the exact error is not known but fatal.\r\n    @Exception: message\"\"\"\r\n\r\n\r\nraise CriticalException(\r\n    (\r\n        \"Error executing mount: %s already mounted - \"\r\n        \"please unmount before invoking grml2usb\"\r\n    ).format(source)\r\n)\r\n```\r\n\r\nOld pyflakes3 wasn't reporting this:\r\n\r\n```\r\n% pyflakes3 demo.py \r\n% pyflakes3 --version\r\n2.0.0\r\n% flake8 --version\r\n3.6.0 (mccabe: 0.6.1, pycodestyle: 2.4.0, pyflakes: 2.0.0) CPython 3.7.3 on Linux\r\n```\r\n\r\nWhile recent version(s) report it as follows:\r\n\r\n```\r\n% pyflakes3 demo.py \r\ndemo.py:10:5 '...'.format(...) has unused arguments at position(s): 0\r\n% pyflakes3 --version\r\n2.2.0 Python 3.8.3 on Linux\r\n% flake8 --version\r\n3.8.3 (mccabe: 0.6.1, pycodestyle: 2.6.0, pyflakes: 2.2.0) CPython 3.8.3 on Linux\r\n```\r\n\r\nCould it be that pyflakes is parsing this wrong? FTR, code has been extracted from a project and was formatted by [black](https://github.com/psf/black) as such.\r\n\r\nThanks for pyflakes!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/556", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/556/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/556/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/556/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/556", "id": 637101091, "node_id": "MDU6SXNzdWU2MzcxMDEwOTE=", "number": 556, "title": "Missing pips", "user": {"login": "nomasprime", "id": 140855, "node_id": "MDQ6VXNlcjE0MDg1NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/140855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nomasprime", "html_url": "https://github.com/nomasprime", "followers_url": "https://api.github.com/users/nomasprime/followers", "following_url": "https://api.github.com/users/nomasprime/following{/other_user}", "gists_url": "https://api.github.com/users/nomasprime/gists{/gist_id}", "starred_url": "https://api.github.com/users/nomasprime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nomasprime/subscriptions", "organizations_url": "https://api.github.com/users/nomasprime/orgs", "repos_url": "https://api.github.com/users/nomasprime/repos", "events_url": "https://api.github.com/users/nomasprime/events{/privacy}", "received_events_url": "https://api.github.com/users/nomasprime/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-11T15:16:02Z", "updated_at": "2020-06-11T22:43:33Z", "closed_at": "2020-06-11T16:10:03Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Hi, fairly new to Python, trying to find my way around.\r\n\r\nWhen I had pylint installed it was warning me about missing pips. From quick research it looks like flake8 is more popular these days but I noticed it doesn't warn me of missing pips like pylint does. Is this something pyflakes can do?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/555", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/555/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/555/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/555/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/555", "id": 635991346, "node_id": "MDU6SXNzdWU2MzU5OTEzNDY=", "number": 555, "title": "Feature request: Detect deprecated exception classes like IOError", "user": {"login": "hannob", "id": 990588, "node_id": "MDQ6VXNlcjk5MDU4OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/990588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hannob", "html_url": "https://github.com/hannob", "followers_url": "https://api.github.com/users/hannob/followers", "following_url": "https://api.github.com/users/hannob/following{/other_user}", "gists_url": "https://api.github.com/users/hannob/gists{/gist_id}", "starred_url": "https://api.github.com/users/hannob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hannob/subscriptions", "organizations_url": "https://api.github.com/users/hannob/orgs", "repos_url": "https://api.github.com/users/hannob/repos", "events_url": "https://api.github.com/users/hannob/events{/privacy}", "received_events_url": "https://api.github.com/users/hannob/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-10T07:10:49Z", "updated_at": "2020-06-10T14:32:56Z", "closed_at": "2020-06-10T14:32:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "With Python 3.3 there has been a large restructuring of the exception classes. Several formerly existing classes are now considered deprecated and merely aliases for OSError. See:\r\nhttps://www.python.org/dev/peps/pep-3151/#step-1-coalesce-exception-types\r\n\r\nI wonder if this is something pyflakes wants to check for. I.e. when code uses IOError show a warning that it's deprecated and OSError should be used.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/554", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/554/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/554/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/554/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/554", "id": 632824225, "node_id": "MDU6SXNzdWU2MzI4MjQyMjU=", "number": 554, "title": "Complex annotation expressions yield errors", "user": {"login": "huettenhain", "id": 11869704, "node_id": "MDQ6VXNlcjExODY5NzA0", "avatar_url": "https://avatars0.githubusercontent.com/u/11869704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huettenhain", "html_url": "https://github.com/huettenhain", "followers_url": "https://api.github.com/users/huettenhain/followers", "following_url": "https://api.github.com/users/huettenhain/following{/other_user}", "gists_url": "https://api.github.com/users/huettenhain/gists{/gist_id}", "starred_url": "https://api.github.com/users/huettenhain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huettenhain/subscriptions", "organizations_url": "https://api.github.com/users/huettenhain/orgs", "repos_url": "https://api.github.com/users/huettenhain/repos", "events_url": "https://api.github.com/users/huettenhain/events{/privacy}", "received_events_url": "https://api.github.com/users/huettenhain/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-06T23:45:41Z", "updated_at": "2020-06-06T23:51:02Z", "closed_at": "2020-06-06T23:50:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider the following code:\r\n```python\r\nclass Annotation:\r\n    def __init__(self, *args, **kwargs):\r\n        pass\r\n\r\n\r\ndef test(a: Annotation('Yikes', 'This is fine.', foo=NotImplemented, bar=12)):\r\n    return a\r\n\r\n\r\nprint(test(12))\r\n```\r\nRunning this with **Python 3.8.3** works fine, and it is also valid code according to [the PEP](https://www.python.org/dev/peps/pep-3107/), quote:\r\n\r\n> Function annotations are nothing more than a way of associating arbitrary Python expressions with various parts of a function at compile-time.\r\n\r\nHowever, running **Pyflakes 2.2.0** produces the following output:\r\n```\r\n$ pyflakes test.py\r\ntest.py:6:24 undefined name 'Yikes'\r\ntest.py:6:33 syntax error in forward annotation 'This is fine.'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/553", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/553/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/553/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/553/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/553", "id": 631320114, "node_id": "MDU6SXNzdWU2MzEzMjAxMTQ=", "number": 553, "title": "When a reserved keyword appears in a f-string, the error only shows as `[flake8] E999: SyntaxError: invalid syntax` on the first line", "user": {"login": "otakutyrant", "id": 64188229, "node_id": "MDQ6VXNlcjY0MTg4MjI5", "avatar_url": "https://avatars2.githubusercontent.com/u/64188229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/otakutyrant", "html_url": "https://github.com/otakutyrant", "followers_url": "https://api.github.com/users/otakutyrant/followers", "following_url": "https://api.github.com/users/otakutyrant/following{/other_user}", "gists_url": "https://api.github.com/users/otakutyrant/gists{/gist_id}", "starred_url": "https://api.github.com/users/otakutyrant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/otakutyrant/subscriptions", "organizations_url": "https://api.github.com/users/otakutyrant/orgs", "repos_url": "https://api.github.com/users/otakutyrant/repos", "events_url": "https://api.github.com/users/otakutyrant/events{/privacy}", "received_events_url": "https://api.github.com/users/otakutyrant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-05T05:20:39Z", "updated_at": "2020-06-05T05:31:11Z", "closed_at": "2020-06-05T05:22:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "For example:\r\n\r\n```\r\n#!/usr/bin/env python\r\n\r\nprint(f\"\"\"{try}\"\"\")\r\n```\r\n\r\nI think that the error could be more readable, like showing `reserved keyword used in f-string` and locating the specific position rather than the line 1.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/552", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/552/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/552/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/552/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/552", "id": 631109873, "node_id": "MDU6SXNzdWU2MzExMDk4NzM=", "number": 552, "title": "False negatives on F541 with implicitly-joined strings", "user": {"login": "StephenBrown2", "id": 1148665, "node_id": "MDQ6VXNlcjExNDg2NjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1148665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StephenBrown2", "html_url": "https://github.com/StephenBrown2", "followers_url": "https://api.github.com/users/StephenBrown2/followers", "following_url": "https://api.github.com/users/StephenBrown2/following{/other_user}", "gists_url": "https://api.github.com/users/StephenBrown2/gists{/gist_id}", "starred_url": "https://api.github.com/users/StephenBrown2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StephenBrown2/subscriptions", "organizations_url": "https://api.github.com/users/StephenBrown2/orgs", "repos_url": "https://api.github.com/users/StephenBrown2/repos", "events_url": "https://api.github.com/users/StephenBrown2/events{/privacy}", "received_events_url": "https://api.github.com/users/StephenBrown2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-04T20:03:37Z", "updated_at": "2020-06-04T21:01:40Z", "closed_at": "2020-06-04T20:13:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please describe the problem or feature*\r\n\r\nI've experienced several strings getting through F541 because they are implicitly joined with an f-string, but do not contain any formatting elements themselves.\r\n\r\n*If this is a bug report, please explain with examples (and example code) what you expected to happen and what actually happened.*\r\n\r\n```py\r\nvar = 0\r\nstring1 = (\r\n    f\"test \"  # True positive: F541 f-string is missing placeholders\r\n    \"{var}\"\r\n)\r\nstring2 = (\r\n    \"test \"  # True negative\r\n    f\"{var}\"\r\n)\r\nstring3 = (\r\n    f\"test \"  # False negative\r\n    f\"{var}\"\r\n)\r\nstring4 = (\r\n    f\"{var}\"\r\n    f\"test \"  # False negative\r\n)\r\nstring5 = (\r\n    \"{var}\"  # True negative\r\n    \" test\"  # True negative\r\n)\r\n```\r\n\r\nIn the example above, I expected to see the first in string3 and the second in string4 to throw a warning, just as with string1.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/550", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/550/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/550/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/550/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/550", "id": 629010607, "node_id": "MDU6SXNzdWU2MjkwMTA2MDc=", "number": 550, "title": "does not track variable usage inside lambda", "user": {"login": "gaborbernat", "id": 690238, "node_id": "MDQ6VXNlcjY5MDIzOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/690238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaborbernat", "html_url": "https://github.com/gaborbernat", "followers_url": "https://api.github.com/users/gaborbernat/followers", "following_url": "https://api.github.com/users/gaborbernat/following{/other_user}", "gists_url": "https://api.github.com/users/gaborbernat/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaborbernat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaborbernat/subscriptions", "organizations_url": "https://api.github.com/users/gaborbernat/orgs", "repos_url": "https://api.github.com/users/gaborbernat/repos", "events_url": "https://api.github.com/users/gaborbernat/events{/privacy}", "received_events_url": "https://api.github.com/users/gaborbernat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-02T08:33:20Z", "updated_at": "2020-06-02T08:34:31Z", "closed_at": "2020-06-02T08:34:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Example:\r\n\r\n```python\r\ntry:\r\n    raise ValueError(\"\")\r\nexcept Exception as exception:\r\n    print(lambda a: ValueError(exception))\r\n```\r\n\r\nRunning it throws:\r\n```console\r\nmagic.py:3:1: F841 local variable 'exception' is assigned to but never used\r\nmagic.py:4:32: F821 undefined name 'exception\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/547", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/547/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/547/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/547/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/547", "id": 624236859, "node_id": "MDU6SXNzdWU2MjQyMzY4NTk=", "number": 547, "title": "False positive: F401: When quoted annotation is used a type parameter", "user": {"login": "clacke", "id": 199180, "node_id": "MDQ6VXNlcjE5OTE4MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/199180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clacke", "html_url": "https://github.com/clacke", "followers_url": "https://api.github.com/users/clacke/followers", "following_url": "https://api.github.com/users/clacke/following{/other_user}", "gists_url": "https://api.github.com/users/clacke/gists{/gist_id}", "starred_url": "https://api.github.com/users/clacke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clacke/subscriptions", "organizations_url": "https://api.github.com/users/clacke/orgs", "repos_url": "https://api.github.com/users/clacke/repos", "events_url": "https://api.github.com/users/clacke/events{/privacy}", "received_events_url": "https://api.github.com/users/clacke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-25T11:23:57Z", "updated_at": "2020-05-25T11:58:26Z", "closed_at": "2020-05-25T11:58:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have two files:\r\n\r\nasdf.py:\r\n\r\n```\r\nfrom typing import TYPE_CHECKING\r\n\r\nif TYPE_CHECKING:\r\n    from qwer import Qwer\r\n\r\n\r\nclass Asdf:\r\n    qwer: 'Qwer'\r\n```\r\n\r\nasdf2.py\r\n\r\n```\r\nfrom typing import Optional, TYPE_CHECKING\r\n\r\nif TYPE_CHECKING:\r\n    from qwer import Qwer\r\n\r\n\r\nclass Asdf:\r\n    qwer: Optional['Qwer']\r\n```\r\n\r\nExpected behavior: Both files pass `flake8`.\r\n\r\nActual behavior:\r\n\r\n    ./asdf2.py:4:5: F401 'qwer.Qwer' imported but unused\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/545", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/545/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/545/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/545/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/545", "id": 618561359, "node_id": "MDU6SXNzdWU2MTg1NjEzNTk=", "number": 545, "title": "Support mypy-style \"# type: ignore[code]\" comments", "user": {"login": "ikonst", "id": 1186084, "node_id": "MDQ6VXNlcjExODYwODQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1186084?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ikonst", "html_url": "https://github.com/ikonst", "followers_url": "https://api.github.com/users/ikonst/followers", "following_url": "https://api.github.com/users/ikonst/following{/other_user}", "gists_url": "https://api.github.com/users/ikonst/gists{/gist_id}", "starred_url": "https://api.github.com/users/ikonst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ikonst/subscriptions", "organizations_url": "https://api.github.com/users/ikonst/orgs", "repos_url": "https://api.github.com/users/ikonst/repos", "events_url": "https://api.github.com/users/ikonst/events{/privacy}", "received_events_url": "https://api.github.com/users/ikonst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-14T21:59:31Z", "updated_at": "2020-05-14T22:01:54Z", "closed_at": "2020-05-14T22:01:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "mypy has (error codes)[https://mypy.readthedocs.io/en/stable/error_codes.html] now and an extended `# type: ignore[code, ...]` syntax.\r\n\r\nRunning flake8 on\r\n```python\r\nfoo.bar  # type: ignore[attr-defined]\r\n```\r\nyields\r\n```\r\ntest.py:1: [F821] undefined name 'ignore'\r\ntest.py:1: [F821] undefined name 'attr'\r\ntest.py:1: [F821] undefined name 'defined'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/542", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/542/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/542/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/542/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/542", "id": 616465758, "node_id": "MDU6SXNzdWU2MTY0NjU3NTg=", "number": 542, "title": "False positive ForwardAnnotationSyntaxError", "user": {"login": "poofeg", "id": 586294, "node_id": "MDQ6VXNlcjU4NjI5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/586294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poofeg", "html_url": "https://github.com/poofeg", "followers_url": "https://api.github.com/users/poofeg/followers", "following_url": "https://api.github.com/users/poofeg/following{/other_user}", "gists_url": "https://api.github.com/users/poofeg/gists{/gist_id}", "starred_url": "https://api.github.com/users/poofeg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poofeg/subscriptions", "organizations_url": "https://api.github.com/users/poofeg/orgs", "repos_url": "https://api.github.com/users/poofeg/repos", "events_url": "https://api.github.com/users/poofeg/events{/privacy}", "received_events_url": "https://api.github.com/users/poofeg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-12T08:31:03Z", "updated_at": "2020-05-12T14:08:33Z", "closed_at": "2020-05-12T14:08:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "False positive ForwardAnnotationSyntaxError in this code:\r\n```\r\nfrom pydantic import BaseModel, constr\r\n\r\n\r\nclass Vehicle(BaseModel):\r\n    vin: constr(min_length=17, max_length=17, regex=r'[A-HJ-NPR-Z0-9]{17}')\r\n```\r\nflake8 output:\r\n`./false_F722.py:5:53: F722 syntax error in forward annotation '[A-HJ-NPR-Z0-9]{17}'`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/540", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/540/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/540/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/540/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/540", "id": 615535629, "node_id": "MDU6SXNzdWU2MTU1MzU2Mjk=", "number": 540, "title": "F841 doesn't work with unpacked function return", "user": {"login": "bread22", "id": 17005481, "node_id": "MDQ6VXNlcjE3MDA1NDgx", "avatar_url": "https://avatars2.githubusercontent.com/u/17005481?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bread22", "html_url": "https://github.com/bread22", "followers_url": "https://api.github.com/users/bread22/followers", "following_url": "https://api.github.com/users/bread22/following{/other_user}", "gists_url": "https://api.github.com/users/bread22/gists{/gist_id}", "starred_url": "https://api.github.com/users/bread22/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bread22/subscriptions", "organizations_url": "https://api.github.com/users/bread22/orgs", "repos_url": "https://api.github.com/users/bread22/repos", "events_url": "https://api.github.com/users/bread22/events{/privacy}", "received_events_url": "https://api.github.com/users/bread22/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-11T01:58:59Z", "updated_at": "2020-05-12T03:06:35Z", "closed_at": "2020-05-12T03:06:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Unused variables assigned from unpacked function return don't generate violations.\r\n\r\nExmaple below:\r\n\r\n```python\r\ndef new():\r\n    return 1, 2\r\n\r\n\r\ndef flake8_bug():\r\n    a, b = new()\r\n```\r\n\r\nvariables `a` and `b` are assigned but not used, it should generate F841, but flake8 didn't\r\n```\r\nC:\\temp>flake8 flake8_bug.py\r\n\r\nC:\\temp>\r\n```\r\n\r\nI can reproduce this on both Linux and Windows 10. Using latest 3.7.8 flake8 with pyflakes 2.1.1\r\n\r\nbug-report below:\r\n```json\r\n{\r\n  \"dependencies\": [\r\n    {\r\n      \"dependency\": \"entrypoints\",\r\n      \"version\": \"0.3\"\r\n    }\r\n  ],\r\n  \"platform\": {\r\n    \"python_implementation\": \"CPython\",\r\n    \"python_version\": \"2.7.16\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"plugins\": [\r\n    {\r\n      \"is_local\": false,\r\n      \"plugin\": \"mccabe\",\r\n      \"version\": \"0.6.1\"\r\n    },\r\n    {\r\n      \"is_local\": false,\r\n      \"plugin\": \"pycodestyle\",\r\n      \"version\": \"2.5.0\"\r\n    },\r\n    {\r\n      \"is_local\": false,\r\n      \"plugin\": \"pyflakes\",\r\n      \"version\": \"2.1.1\"\r\n    }\r\n  ],\r\n  \"version\": \"3.7.8\"\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/538", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/538/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/538/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/538/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/538", "id": 611690819, "node_id": "MDU6SXNzdWU2MTE2OTA4MTk=", "number": 538, "title": "Undefined name '__builtin__'", "user": {"login": "OverLordGoldDragon", "id": 16495490, "node_id": "MDQ6VXNlcjE2NDk1NDkw", "avatar_url": "https://avatars2.githubusercontent.com/u/16495490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OverLordGoldDragon", "html_url": "https://github.com/OverLordGoldDragon", "followers_url": "https://api.github.com/users/OverLordGoldDragon/followers", "following_url": "https://api.github.com/users/OverLordGoldDragon/following{/other_user}", "gists_url": "https://api.github.com/users/OverLordGoldDragon/gists{/gist_id}", "starred_url": "https://api.github.com/users/OverLordGoldDragon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OverLordGoldDragon/subscriptions", "organizations_url": "https://api.github.com/users/OverLordGoldDragon/orgs", "repos_url": "https://api.github.com/users/OverLordGoldDragon/repos", "events_url": "https://api.github.com/users/OverLordGoldDragon/events{/privacy}", "received_events_url": "https://api.github.com/users/OverLordGoldDragon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-05-04T08:23:40Z", "updated_at": "2020-05-04T20:38:47Z", "closed_at": "2020-05-04T20:38:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Migrated from [Spyder 4.1.2](https://github.com/spyder-ide/spyder/issues/12585): `__builtins__` isn't flagged, but `__builtin__` is also a default in `__main__`'s global namespace. While it isn't defined in non-main modules, the red flag does remain a false positive in `__main__`. Is this intended?\r\n\r\n![image](https://user-images.githubusercontent.com/16495490/80908376-717a2b80-8d30-11ea-822d-3f051bc44423.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/537", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/537/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/537/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/537/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/537", "id": 608584328, "node_id": "MDU6SXNzdWU2MDg1ODQzMjg=", "number": 537, "title": "Tuple object has no attribute ctx", "user": {"login": "Dreamsorcerer", "id": 2203121, "node_id": "MDQ6VXNlcjIyMDMxMjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/2203121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dreamsorcerer", "html_url": "https://github.com/Dreamsorcerer", "followers_url": "https://api.github.com/users/Dreamsorcerer/followers", "following_url": "https://api.github.com/users/Dreamsorcerer/following{/other_user}", "gists_url": "https://api.github.com/users/Dreamsorcerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dreamsorcerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dreamsorcerer/subscriptions", "organizations_url": "https://api.github.com/users/Dreamsorcerer/orgs", "repos_url": "https://api.github.com/users/Dreamsorcerer/repos", "events_url": "https://api.github.com/users/Dreamsorcerer/events{/privacy}", "received_events_url": "https://api.github.com/users/Dreamsorcerer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 24, "created_at": "2020-04-28T20:12:11Z", "updated_at": "2020-05-04T21:10:55Z", "closed_at": "2020-04-29T17:53:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "With this code:\r\n```\r\nfor i in seq_a:\r\n    for j in seq_b:\r\n        print(i, j)\r\n```\r\n\r\nRunning flake8 gives me this exception:\r\n```\r\nCRITICAL:flake8.checker:Plugin F raised an unexpected exception\r\nTraceback (most recent call last):\r\n  File \"/home/ubuntu/.local/lib/python3.6/site-packages/flake8/checker.py\", line 435, in run_check\r\n    return plugin[\"plugin\"](**arguments)\r\n  File \"/home/ubuntu/.local/lib/python3.6/site-packages/flake8/plugins/pyflakes.py\", line 94, in __init__\r\n    file_tokens=file_tokens,\r\n  File \"/home/ubuntu/.local/lib/python3.6/site-packages/pyflakes/checker.py\", line 672, in __init__\r\n    self.handleChildren(tree)\r\n  File \"/home/ubuntu/.local/lib/python3.6/site-packages/pyflakes/checker.py\", line 1073, in handleChildren\r\n    self.handleNode(node, tree)\r\n  File \"/home/ubuntu/.local/lib/python3.6/site-packages/pyflakes/checker.py\", line 1120, in handleNode\r\n    handler(node)\r\n  File \"/home/ubuntu/.local/lib/python3.6/site-packages/pyflakes/checker.py\", line 1073, in handleChildren\r\n    self.handleNode(node, tree)\r\n  File \"/home/ubuntu/.local/lib/python3.6/site-packages/pyflakes/checker.py\", line 1120, in handleNode\r\n    handler(node)\r\n  File \"/home/ubuntu/.local/lib/python3.6/site-packages/pyflakes/checker.py\", line 1541, in TUPLE\r\n    if not PY2 and isinstance(node.ctx, ast.Store):\r\nAttributeError: 'Tuple' object has no attribute 'ctx'\r\n\"pyflakes\" failed during execution due to \"'Tuple' object has no attribute 'ctx'\"\r\nRun flake8 with greater verbosity to see more details\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/536", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/536/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/536/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/536/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/536", "id": 607025666, "node_id": "MDU6SXNzdWU2MDcwMjU2NjY=", "number": 536, "title": "(flake8) Use of exclude clause on windows results in 5k files to check!", "user": {"login": "guidoavvisati", "id": 1241661, "node_id": "MDQ6VXNlcjEyNDE2NjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1241661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guidoavvisati", "html_url": "https://github.com/guidoavvisati", "followers_url": "https://api.github.com/users/guidoavvisati/followers", "following_url": "https://api.github.com/users/guidoavvisati/following{/other_user}", "gists_url": "https://api.github.com/users/guidoavvisati/gists{/gist_id}", "starred_url": "https://api.github.com/users/guidoavvisati/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guidoavvisati/subscriptions", "organizations_url": "https://api.github.com/users/guidoavvisati/orgs", "repos_url": "https://api.github.com/users/guidoavvisati/repos", "events_url": "https://api.github.com/users/guidoavvisati/events{/privacy}", "received_events_url": "https://api.github.com/users/guidoavvisati/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-26T14:28:09Z", "updated_at": "2020-04-26T15:36:42Z", "closed_at": "2020-04-26T15:36:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running python 3.7.7 on windows 7 with a virtual environment. I installed flake8 and configured it via tox.ini as per below\r\n```\r\n[flake8]\r\nexclude =\r\n    .git,\r\n    *migrations*\r\nmax-line-length = 88\r\nmax-complexity = 8\r\nignore = F401\r\n```\r\nWithout the exclude clause, it runs on the code base in few seconds. When I switch on the exclude clause, it wants to check some 4900ish files.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/528", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/528/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/528/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/528/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/528", "id": 596542640, "node_id": "MDU6SXNzdWU1OTY1NDI2NDA=", "number": 528, "title": "F821 when using cls as a function return type", "user": {"login": "SylannBin", "id": 17208592, "node_id": "MDQ6VXNlcjE3MjA4NTky", "avatar_url": "https://avatars3.githubusercontent.com/u/17208592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SylannBin", "html_url": "https://github.com/SylannBin", "followers_url": "https://api.github.com/users/SylannBin/followers", "following_url": "https://api.github.com/users/SylannBin/following{/other_user}", "gists_url": "https://api.github.com/users/SylannBin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SylannBin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SylannBin/subscriptions", "organizations_url": "https://api.github.com/users/SylannBin/orgs", "repos_url": "https://api.github.com/users/SylannBin/repos", "events_url": "https://api.github.com/users/SylannBin/events{/privacy}", "received_events_url": "https://api.github.com/users/SylannBin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-08T12:32:49Z", "updated_at": "2020-04-10T16:40:10Z", "closed_at": "2020-04-08T16:02:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I reuse the template for a flake8 issue because I really encounter this problem with flake8.\r\nBut flake8 says we should report the issue where it belongs, so here it goes.\r\n\r\n---\r\n*Please describe how you installed Flake8*\r\n\r\n```\r\n$ pip install flake8\r\n```\r\n\r\n---\r\n*Please provide the exact, unmodified output of `flake8 --bug-report`*\r\n\r\n```json\r\n{\r\n  \"dependencies\": [\r\n    {\r\n      \"dependency\": \"setuptools\",\r\n      \"version\": \"40.6.2\"\r\n    }\r\n  ],\r\n  \"platform\": {\r\n    \"python_implementation\": \"CPython\",\r\n    \"python_version\": \"3.7.2\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"plugins\": [\r\n    {\r\n      \"is_local\": false,\r\n      \"plugin\": \"mccabe\",\r\n      \"version\": \"0.6.1\"\r\n    },\r\n    {\r\n      \"is_local\": false,\r\n      \"plugin\": \"pycodestyle\",\r\n      \"version\": \"2.4.0\"\r\n    },\r\n    {\r\n      \"is_local\": false,\r\n      \"plugin\": \"pyflakes\",\r\n      \"version\": \"2.0.0\"\r\n    }\r\n  ],\r\n}\r\n```\r\n  \r\n---\r\n*Please describe the problem or feature*\r\n*If this is a bug report, please explain with examples (and example code) what you expected to happen and what actually happened.*\r\n\r\nflake8 (pyflakes) reports that `cls` is undefined in the following code example:\r\n\r\n```py\r\nclass SomeClass:\r\n    def __init__(self, whatever):\r\n        self.what = whatever\r\n\r\n    @classmethod\r\n    def from_something(cls, whatever) -> cls:\r\n        return cls(whatever)\r\n```\r\n\r\nWhen running `python3 -m flake8 path/to/file.py`, I receive the following error message:\r\n`F821 undefined name cls`\r\n\r\nSame behavior with the quotes: `'cls'`.\r\n\r\n**EDIT**: ~~The intellisense of vscode understands the return type of this classmethod~~ (but it does so without the return type as well, so not really relevant)\r\nsince cls is almost like a keyword, maybe it should not be considered undefined in this case.\r\n\r\n---\r\nThis is somewhat similar to [#259](https://github.com/PyCQA/pyflakes/issues/259).\r\nHowever I think it is not the same problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/527", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/527/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/527/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/527/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/527", "id": 595131926, "node_id": "MDU6SXNzdWU1OTUxMzE5MjY=", "number": 527, "title": "f-strings incorrectly marked as syntax error", "user": {"login": "hamdav", "id": 40766399, "node_id": "MDQ6VXNlcjQwNzY2Mzk5", "avatar_url": "https://avatars3.githubusercontent.com/u/40766399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hamdav", "html_url": "https://github.com/hamdav", "followers_url": "https://api.github.com/users/hamdav/followers", "following_url": "https://api.github.com/users/hamdav/following{/other_user}", "gists_url": "https://api.github.com/users/hamdav/gists{/gist_id}", "starred_url": "https://api.github.com/users/hamdav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hamdav/subscriptions", "organizations_url": "https://api.github.com/users/hamdav/orgs", "repos_url": "https://api.github.com/users/hamdav/repos", "events_url": "https://api.github.com/users/hamdav/events{/privacy}", "received_events_url": "https://api.github.com/users/hamdav/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-06T13:47:35Z", "updated_at": "2020-04-06T18:24:49Z", "closed_at": "2020-04-06T18:23:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am not sure whether this is a problem I should post here or on the vim-flake8 GitHub but I think it belongs here. \r\nI am running vim on a mac with syntastic and vim-flake8 installed (via vim-plug) and whenever I write something like `print(f\"The value of x is {x}\")` it says that it is a syntax error. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/526", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/526/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/526/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/526/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/526", "id": 595025593, "node_id": "MDU6SXNzdWU1OTUwMjU1OTM=", "number": 526, "title": "Nested functions", "user": {"login": "cerealkill", "id": 2923413, "node_id": "MDQ6VXNlcjI5MjM0MTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/2923413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cerealkill", "html_url": "https://github.com/cerealkill", "followers_url": "https://api.github.com/users/cerealkill/followers", "following_url": "https://api.github.com/users/cerealkill/following{/other_user}", "gists_url": "https://api.github.com/users/cerealkill/gists{/gist_id}", "starred_url": "https://api.github.com/users/cerealkill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cerealkill/subscriptions", "organizations_url": "https://api.github.com/users/cerealkill/orgs", "repos_url": "https://api.github.com/users/cerealkill/repos", "events_url": "https://api.github.com/users/cerealkill/events{/privacy}", "received_events_url": "https://api.github.com/users/cerealkill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-06T11:15:35Z", "updated_at": "2020-06-24T15:27:59Z", "closed_at": "2020-06-24T15:27:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "```py\r\n    def report_success():\r\n        ...\r\n\r\n    def report_failure():\r\n        ... \r\n       str(err)\r\n\r\n    for i in range(0, 10):\r\n        try:\r\n            rpc_request = {\r\n                ...\r\n            }\r\n            response = requests.post(**rpc_request)\r\n            response.raise_for_status()\r\n            report_success()\r\n        except requests.exceptions.RequestException as err:\r\n            report_failure()\r\n        except requests.exceptions.SSLError as err:\r\n            report_failure()\r\n        except Exception as err:\r\n            report_failure()\r\n```\r\nI get:\r\n```\r\nasd.py:99: [E] E0602 undefined name 'err' [pyflakes]\r\nasd.py:112: [W] W0612 local variable 'err' is assigned to but never used [pyflakes]\r\n```\r\n\r\nIs it possible to fix?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/525", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/525/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/525/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/525/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/525", "id": 592845630, "node_id": "MDU6SXNzdWU1OTI4NDU2MzA=", "number": 525, "title": "Named expressions support, PEP 572", "user": {"login": "opk12", "id": 40740650, "node_id": "MDQ6VXNlcjQwNzQwNjUw", "avatar_url": "https://avatars3.githubusercontent.com/u/40740650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/opk12", "html_url": "https://github.com/opk12", "followers_url": "https://api.github.com/users/opk12/followers", "following_url": "https://api.github.com/users/opk12/following{/other_user}", "gists_url": "https://api.github.com/users/opk12/gists{/gist_id}", "starred_url": "https://api.github.com/users/opk12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/opk12/subscriptions", "organizations_url": "https://api.github.com/users/opk12/orgs", "repos_url": "https://api.github.com/users/opk12/repos", "events_url": "https://api.github.com/users/opk12/events{/privacy}", "received_events_url": "https://api.github.com/users/opk12/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-02T18:38:20Z", "updated_at": "2020-04-02T18:49:29Z", "closed_at": "2020-04-02T18:49:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n$ cat test.py\r\ndef f(x):\r\n    if (y := x.upper()) :\r\n        print()\r\n```\r\n\r\n`pyflakes test.py` gives `AttributeError: 'Checker' object has no attribute 'NAMEDEXPR'`.\r\n\r\nVersion: 2.1.1 (pip), Python 3.8.2, Fedora 31", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/521", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/521/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/521/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/521/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/521", "id": 580196277, "node_id": "MDU6SXNzdWU1ODAxOTYyNzc=", "number": 521, "title": "W0611 'typing.Optional' imported but unused [pyflakes]", "user": {"login": "heckad", "id": 45011689, "node_id": "MDQ6VXNlcjQ1MDExNjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/45011689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heckad", "html_url": "https://github.com/heckad", "followers_url": "https://api.github.com/users/heckad/followers", "following_url": "https://api.github.com/users/heckad/following{/other_user}", "gists_url": "https://api.github.com/users/heckad/gists{/gist_id}", "starred_url": "https://api.github.com/users/heckad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heckad/subscriptions", "organizations_url": "https://api.github.com/users/heckad/orgs", "repos_url": "https://api.github.com/users/heckad/repos", "events_url": "https://api.github.com/users/heckad/events{/privacy}", "received_events_url": "https://api.github.com/users/heckad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-12T20:18:10Z", "updated_at": "2020-03-12T20:20:42Z", "closed_at": "2020-03-12T20:20:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Steps to reproduce\r\n\r\n```\r\nfrom typing import Optional\r\n\r\na = None  # type: Optional[str]\r\n```\r\n### Version\r\n2.1.1 Python 3.8.1 on Windows\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/520", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/520/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/520/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/520/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/520", "id": 577124188, "node_id": "MDU6SXNzdWU1NzcxMjQxODg=", "number": 520, "title": "The Next Release (pyflakes 2.2.x)", "user": {"login": "asottile", "id": 1810591, "node_id": "MDQ6VXNlcjE4MTA1OTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1810591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asottile", "html_url": "https://github.com/asottile", "followers_url": "https://api.github.com/users/asottile/followers", "following_url": "https://api.github.com/users/asottile/following{/other_user}", "gists_url": "https://api.github.com/users/asottile/gists{/gist_id}", "starred_url": "https://api.github.com/users/asottile/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asottile/subscriptions", "organizations_url": "https://api.github.com/users/asottile/orgs", "repos_url": "https://api.github.com/users/asottile/repos", "events_url": "https://api.github.com/users/asottile/events{/privacy}", "received_events_url": "https://api.github.com/users/asottile/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 23, "created_at": "2020-03-06T19:17:41Z", "updated_at": "2020-05-11T19:47:07Z", "closed_at": "2020-04-10T04:09:24Z", "author_association": "MEMBER", "active_lock_reason": null, "body": ":wave: I'd like to organize the next release of pyflakes\r\n\r\nI'll be pinning this issue and collecting feedback on things that should end up in this release\r\n\r\nDue to the number of contributions that have gone into `pyflakes` since the last release, I'm planning to do this as `2.2.0a1` first (an alpha pre-release) -- this should hopefully expand the number of people trying the release (though I suspect not all that many will use the alpha still)\r\n\r\n___\r\n\r\nHow you can help:\r\n\r\n- try out the latest master on your repositories: `pip install --force-reinstall git+https://github.com/pycqa/pyflakes`\r\n- review [open PRs](https://github.com/PyCQA/pyflakes/pulls)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/519", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/519/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/519/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/519/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/519", "id": 574956416, "node_id": "MDU6SXNzdWU1NzQ5NTY0MTY=", "number": 519, "title": "Wrong column number for f-string with formatting specifier", "user": {"login": "asmeurer", "id": 71486, "node_id": "MDQ6VXNlcjcxNDg2", "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asmeurer", "html_url": "https://github.com/asmeurer", "followers_url": "https://api.github.com/users/asmeurer/followers", "following_url": "https://api.github.com/users/asmeurer/following{/other_user}", "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}", "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions", "organizations_url": "https://api.github.com/users/asmeurer/orgs", "repos_url": "https://api.github.com/users/asmeurer/repos", "events_url": "https://api.github.com/users/asmeurer/events{/privacy}", "received_events_url": "https://api.github.com/users/asmeurer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-03T21:26:02Z", "updated_at": "2020-03-04T18:42:01Z", "closed_at": "2020-03-04T03:57:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\n$ cat test.py\r\nf\"{x!r}\"\r\nf\"{x}\"\r\n$ PYTHONPATH=. python -m pyflakes test.py\r\ntest.py:1:2 undefined name 'x'\r\ntest.py:2:4 undefined name 'x'\r\n```\r\n\r\nThe column number for the first line is wrong. In the second line it gives the correct column for x, 4. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/518", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/518/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/518/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/518/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/518", "id": 574400544, "node_id": "MDU6SXNzdWU1NzQ0MDA1NDQ=", "number": 518, "title": "Linter false red flag on try-try-finally", "user": {"login": "OverLordGoldDragon", "id": 16495490, "node_id": "MDQ6VXNlcjE2NDk1NDkw", "avatar_url": "https://avatars2.githubusercontent.com/u/16495490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OverLordGoldDragon", "html_url": "https://github.com/OverLordGoldDragon", "followers_url": "https://api.github.com/users/OverLordGoldDragon/followers", "following_url": "https://api.github.com/users/OverLordGoldDragon/following{/other_user}", "gists_url": "https://api.github.com/users/OverLordGoldDragon/gists{/gist_id}", "starred_url": "https://api.github.com/users/OverLordGoldDragon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OverLordGoldDragon/subscriptions", "organizations_url": "https://api.github.com/users/OverLordGoldDragon/orgs", "repos_url": "https://api.github.com/users/OverLordGoldDragon/repos", "events_url": "https://api.github.com/users/OverLordGoldDragon/events{/privacy}", "received_events_url": "https://api.github.com/users/OverLordGoldDragon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-03T04:01:38Z", "updated_at": "2020-03-03T04:04:59Z", "closed_at": "2020-03-03T04:04:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\ndef f():\r\n    a = \"a\"\r\n    try:\r\n        print(\"`try` executed\")\r\n    except:    \r\n        print(\"`except` executed\")\r\n        try:\r\n            pass\r\n        finally:\r\n            print(\"`finally` executed\")\r\n            del a\r\n    print(a)\r\nf()\r\n```\r\n```\r\n`try` executed\r\na\r\n```\r\n\r\n<img src=\"https://user-images.githubusercontent.com/16495490/75593452-d7cb9f00-5a9e-11ea-86ed-2f68432a3549.png\" width=\"300\">\r\n\r\n<hr>\r\n\r\nSomething like \"`a` may be undefined\" may be more appropriate. The IDE's Spyder, [Issue](https://github.com/spyder-ide/spyder/issues/11683) ported per a dev's comment.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/515", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/515/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/515/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/515/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/515", "id": 569424520, "node_id": "MDU6SXNzdWU1Njk0MjQ1MjA=", "number": 515, "title": "Spurious 'unused import' in conjunction with quoted generic stub types", "user": {"login": "jnsnow", "id": 656731, "node_id": "MDQ6VXNlcjY1NjczMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/656731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jnsnow", "html_url": "https://github.com/jnsnow", "followers_url": "https://api.github.com/users/jnsnow/followers", "following_url": "https://api.github.com/users/jnsnow/following{/other_user}", "gists_url": "https://api.github.com/users/jnsnow/gists{/gist_id}", "starred_url": "https://api.github.com/users/jnsnow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jnsnow/subscriptions", "organizations_url": "https://api.github.com/users/jnsnow/orgs", "repos_url": "https://api.github.com/users/jnsnow/repos", "events_url": "https://api.github.com/users/jnsnow/events{/privacy}", "received_events_url": "https://api.github.com/users/jnsnow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-23T02:19:38Z", "updated_at": "2020-02-23T02:31:32Z", "closed_at": "2020-02-23T02:31:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "This one's a mouthful, but I did verify that this is still an issue with 2.1.1-23-g0af480e -- current master as of writing.\r\n\r\nConsider this example:\r\n\r\n```python\r\nfrom __future__ import annotations\r\nfrom os import PathLike\r\nfrom typing import Union\r\n\r\n_PathType = Union[str, 'PathLike[str]']\r\n\r\ndef foo(arg: _PathType) -> str:\r\n    return str(arg)\r\n```\r\n\r\nFirst, note that `PathLike[str]` is a case where MyPy uses a Generic type stub, but that the runtime object here is not subscriptable. In these cases, such types *must* be string quoted, even when using delayed annotations support from PEP 563.\r\n\r\nSee here for more information on this circumstance:  https://mypy.readthedocs.io/en/stable/common_issues.html#using-classes-that-are-generic-in-stubs-but-not-at-runtime\r\n\r\nThe warning produced is:\r\n```\r\nexample.py:2:1 'os.PathLike' imported but unused\r\n```\r\n\r\nNext, even when moving this import below a TYPE_CHECKING stanza, pyflakes still warns.\r\n\r\nLastly, this is an error in pylint (https://github.com/PyCQA/pylint/issues/3299) and pycharm (As of 2019.3.2) as well. Worse, each tool has separate pragmas to silence the error.\r\n\r\nThis error appears related to #247 but that was about PEP 484 type hint *comments*, not string quoted type hints. The issue is *possibly* distinct from #510 because PEP 563 delayed annotations have no effect here: quoted types are a requisite; but these two reports may share a root cause. Pull #479 does not resolve this problem.\r\n\r\nHopefully that's good homework. :)\r\n--js", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/513", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/513/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/513/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/513/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/513", "id": 566751401, "node_id": "MDU6SXNzdWU1NjY3NTE0MDE=", "number": 513, "title": "detect as unused imports subsumed by other imports", "user": {"login": "graingert", "id": 413772, "node_id": "MDQ6VXNlcjQxMzc3Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/413772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graingert", "html_url": "https://github.com/graingert", "followers_url": "https://api.github.com/users/graingert/followers", "following_url": "https://api.github.com/users/graingert/following{/other_user}", "gists_url": "https://api.github.com/users/graingert/gists{/gist_id}", "starred_url": "https://api.github.com/users/graingert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graingert/subscriptions", "organizations_url": "https://api.github.com/users/graingert/orgs", "repos_url": "https://api.github.com/users/graingert/repos", "events_url": "https://api.github.com/users/graingert/events{/privacy}", "received_events_url": "https://api.github.com/users/graingert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-18T09:17:12Z", "updated_at": "2020-02-18T15:43:13Z", "closed_at": "2020-02-18T15:43:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please describe how you installed Flake8*\r\n\r\n```\r\npip install flake8==3.7.9 pyflakes==2.1.1\r\n```\r\n\r\n\r\n```python\r\nimport sqlalchemy  # should be detected as unused\r\nimport sqlalchemy.exc\r\n\r\n\r\ntry:\r\n    pass\r\nexcept sqlalchemy.exc.DatabaseError:\r\n    pass\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/510", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/510/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/510/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/510/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/510", "id": 559156144, "node_id": "MDU6SXNzdWU1NTkxNTYxNDQ=", "number": 510, "title": "Spurious unsued import warning for type annotation used in quoted cast", "user": {"login": "PeterJCLaw", "id": 336212, "node_id": "MDQ6VXNlcjMzNjIxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/336212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterJCLaw", "html_url": "https://github.com/PeterJCLaw", "followers_url": "https://api.github.com/users/PeterJCLaw/followers", "following_url": "https://api.github.com/users/PeterJCLaw/following{/other_user}", "gists_url": "https://api.github.com/users/PeterJCLaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterJCLaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterJCLaw/subscriptions", "organizations_url": "https://api.github.com/users/PeterJCLaw/orgs", "repos_url": "https://api.github.com/users/PeterJCLaw/repos", "events_url": "https://api.github.com/users/PeterJCLaw/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterJCLaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-02-03T15:28:16Z", "updated_at": "2020-03-17T20:53:38Z", "closed_at": "2020-03-17T20:53:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given\r\n``` python\r\n# demo.py \r\nfrom typing import Union, cast\r\n\r\nx = cast('Union[str, int]', 42)\r\nreveal_type(x)\r\n```\r\nThen I would hope that `pyflakes` would be able to see the usage of `Union` in the quoted cast, but it can't.\r\n``` shell\r\n$ pyflakes demo.py \r\ndemo.py:1: 'typing.Union' imported but unused\r\ndemo.py:4: undefined name 'reveal_type'\r\n```\r\n(`reveal_type` being undefined is correct here).\r\n\r\n`mypy` does seem happy with this usage though.\r\n``` shell\r\n$ mypy demo.py \r\ndemo.py:4: error: Revealed type is 'Union[builtins.str, builtins.int]'\r\n```\r\n\r\nI realise this example is somewhat contrived (why would you quote this), however in the case that one of the union members is a circular import for example, you need to quote at least some part of the type and it's often cleaner to quote the whole name rather than parts of it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/509", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/509/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/509/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/509/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/509", "id": 557858993, "node_id": "MDU6SXNzdWU1NTc4NTg5OTM=", "number": 509, "title": "Cut a new release?", "user": {"login": "pipermerriam", "id": 824194, "node_id": "MDQ6VXNlcjgyNDE5NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/824194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pipermerriam", "html_url": "https://github.com/pipermerriam", "followers_url": "https://api.github.com/users/pipermerriam/followers", "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}", "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}", "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions", "organizations_url": "https://api.github.com/users/pipermerriam/orgs", "repos_url": "https://api.github.com/users/pipermerriam/repos", "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}", "received_events_url": "https://api.github.com/users/pipermerriam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-31T01:34:19Z", "updated_at": "2020-01-31T05:14:39Z", "closed_at": "2020-01-31T03:28:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "It appears there has not been a release since February 28th, 2019, almost a full year ago.\r\n\r\nhttps://pypi.org/project/pyflakes/#history\r\n\r\nI'm specifically running into an issue which was fixed here: https://github.com/PyCQA/pyflakes/pull/455\r\n\r\nI'm curious if the maintainers are around and able to cut a new release or if there is anything I can do to assist in making this happen such as compiling release notes?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/507", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/507/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/507/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/507/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/507", "id": 551577243, "node_id": "MDU6SXNzdWU1NTE1NzcyNDM=", "number": 507, "title": "F401 (imported but unused) false positive on Foo when using def x(a: Foo, /, *, b: Bar)", "user": {"login": "mikeholler", "id": 1164112, "node_id": "MDQ6VXNlcjExNjQxMTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1164112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeholler", "html_url": "https://github.com/mikeholler", "followers_url": "https://api.github.com/users/mikeholler/followers", "following_url": "https://api.github.com/users/mikeholler/following{/other_user}", "gists_url": "https://api.github.com/users/mikeholler/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeholler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeholler/subscriptions", "organizations_url": "https://api.github.com/users/mikeholler/orgs", "repos_url": "https://api.github.com/users/mikeholler/repos", "events_url": "https://api.github.com/users/mikeholler/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeholler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-17T18:53:09Z", "updated_at": "2020-01-17T20:24:48Z", "closed_at": "2020-01-17T20:24:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nfrom datetime import datetime as Foo, time as Bar\r\n\r\n\r\ndef x(a: Foo, /, *, b: Bar):\r\n    pass\r\n```\r\n\r\nRunning this on the file results in:\r\n\r\n```\r\n\u203a flake8 --version  \r\n3.7.9 (mccabe: 0.6.1, pycodestyle: 2.5.0, pyflakes: 2.1.1) CPython 3.8.1 on Linux\r\n\u203a pyflakes --version\r\n2.1.1 Python 3.8.1 on Linux\r\n\u203a flake8 example.py \r\nexample.py:1:1: F401 'datetime.datetime as Foo' imported but unused\r\n\u203a pyflakes example.py\r\nexample.py:1: 'datetime.datetime as Foo' imported but unused\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/506", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/506/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/506/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/506/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/506", "id": 550077906, "node_id": "MDU6SXNzdWU1NTAwNzc5MDY=", "number": 506, "title": "Undefined Name for return annotation defined in class", "user": {"login": "nielsbuwen", "id": 9267463, "node_id": "MDQ6VXNlcjkyNjc0NjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/9267463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nielsbuwen", "html_url": "https://github.com/nielsbuwen", "followers_url": "https://api.github.com/users/nielsbuwen/followers", "following_url": "https://api.github.com/users/nielsbuwen/following{/other_user}", "gists_url": "https://api.github.com/users/nielsbuwen/gists{/gist_id}", "starred_url": "https://api.github.com/users/nielsbuwen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nielsbuwen/subscriptions", "organizations_url": "https://api.github.com/users/nielsbuwen/orgs", "repos_url": "https://api.github.com/users/nielsbuwen/repos", "events_url": "https://api.github.com/users/nielsbuwen/events{/privacy}", "received_events_url": "https://api.github.com/users/nielsbuwen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-15T09:51:30Z", "updated_at": "2020-01-15T15:30:35Z", "closed_at": "2020-01-15T15:30:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider this code:\r\n\r\n```python\r\nclass Class:\r\n    xyz = 1\r\n\r\n    def f(self, x) -> xyz:\r\n        pass\r\n```\r\n\r\nThe variable `xyz` is defined inside the class and used as a return annotation in a method.\r\n\r\n`pyflakes` reports this as an error (`flake8` too, but i hope this is the correct repo to report it?)\r\n\r\n> file.py:4: undefined name 'xyz'\r\n\r\nHowever this runs successfully with `python3.6` `python3.7` `python3.8`. The correct behaviour would be not to report anything here.\r\n\r\n_In case you are interested: This is my use case:_\r\n\r\n```python\r\nfrom typing import TypeVar, Generic\r\n\r\nT = TypeVar('T')\r\n\r\n\r\nclass MyClass(Generic[T]):\r\n    Self = TypeVar('Self', bound='MyClass[T]')\r\n\r\n    def copy(self: Self) -> Self:\r\n        return self  # implementation omitted\r\n\r\n\r\nreveal_type(MyClass[int]().copy())  # Revealed type is MyCass[int]\r\n```\r\n\r\nSo `mypy` accepts this and `python` also accepts this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/505", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/505/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/505/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/505/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/505", "id": 550061130, "node_id": "MDU6SXNzdWU1NTAwNjExMzA=", "number": 505, "title": "Support `-V` as an alias for `--version`", "user": {"login": "Ran4", "id": 5494821, "node_id": "MDQ6VXNlcjU0OTQ4MjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/5494821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ran4", "html_url": "https://github.com/Ran4", "followers_url": "https://api.github.com/users/Ran4/followers", "following_url": "https://api.github.com/users/Ran4/following{/other_user}", "gists_url": "https://api.github.com/users/Ran4/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ran4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ran4/subscriptions", "organizations_url": "https://api.github.com/users/Ran4/orgs", "repos_url": "https://api.github.com/users/Ran4/repos", "events_url": "https://api.github.com/users/Ran4/events{/privacy}", "received_events_url": "https://api.github.com/users/Ran4/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-15T09:19:56Z", "updated_at": "2020-03-17T20:47:20Z", "closed_at": "2020-03-17T20:47:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Many tools in the python ecosystem supports showing version number using the `-V` argument.\r\n\r\nExample, showing the version number of python, pip or mypy:\r\n\r\n```\r\npython -V\r\npip -V\r\nmypy -V\r\n```\r\n\r\nI suggest adding `-V` as an alias to `--version`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/504", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/504/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/504/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/504/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/504", "id": 548151159, "node_id": "MDU6SXNzdWU1NDgxNTExNTk=", "number": 504, "title": "Unhandled exception in pyflakes (python 3.8)", "user": {"login": "lukas-manduch", "id": 17749277, "node_id": "MDQ6VXNlcjE3NzQ5Mjc3", "avatar_url": "https://avatars3.githubusercontent.com/u/17749277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukas-manduch", "html_url": "https://github.com/lukas-manduch", "followers_url": "https://api.github.com/users/lukas-manduch/followers", "following_url": "https://api.github.com/users/lukas-manduch/following{/other_user}", "gists_url": "https://api.github.com/users/lukas-manduch/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukas-manduch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukas-manduch/subscriptions", "organizations_url": "https://api.github.com/users/lukas-manduch/orgs", "repos_url": "https://api.github.com/users/lukas-manduch/repos", "events_url": "https://api.github.com/users/lukas-manduch/events{/privacy}", "received_events_url": "https://api.github.com/users/lukas-manduch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-10T15:46:21Z", "updated_at": "2020-01-10T15:51:04Z", "closed_at": "2020-01-10T15:51:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey guys, while using pyflakes in my project I found out, that it crashes on new python 3.8 code (probably due to Assignment Expressions).  I know 3.8 is not supported, but imo it shouldn't crash anyway. \r\nPyflakes 2.1.1 \r\n\r\nSource code:\r\n```\r\nimport re\r\n\r\npattern = r'^\\s*'\r\nline = ''\r\nif not (match := re.match(pattern, line)):\r\n    exit(1)\r\n```\r\nException:\r\n```\r\n(testscripts2) PS C:\\Users\\lukas.manduch\\source\\repos\\testscripts> pyflakes.exe --version\r\n2.1.1 Python 3.8.0 on Windows\r\n(testscripts2) PS C:\\Users\\lukas.manduch\\source\\repos\\testscripts> pyflakes.exe C:\\Users\\lukas.manduch\\evaluators.py\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\lukas.manduch\\.pyenv\\pyenv-win\\versions\\3.8.0-amd64\\Lib\\runpy.py\", line 192, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"C:\\Users\\lukas.manduch\\.pyenv\\pyenv-win\\versions\\3.8.0-amd64\\Lib\\runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"C:\\Users\\lukas.manduch\\source\\virtualenvs\\testscripts2\\Scripts\\pyflakes.exe\\__main__.py\", line 7, in <module>\r\n  File \"c:\\users\\lukas.manduch\\source\\virtualenvs\\testscripts2\\lib\\site-packages\\pyflakes\\api.py\", line 207, in main\r\n    warnings = checkRecursive(args, reporter)\r\n  File \"c:\\users\\lukas.manduch\\source\\virtualenvs\\testscripts2\\lib\\site-packages\\pyflakes\\api.py\", line 156, in checkRecursive\r\n    warnings += checkPath(sourcePath, reporter)\r\n  File \"c:\\users\\lukas.manduch\\source\\virtualenvs\\testscripts2\\lib\\site-packages\\pyflakes\\api.py\", line 99, in checkPath\r\n    return check(codestr, filename, reporter)\r\n  File \"c:\\users\\lukas.manduch\\source\\virtualenvs\\testscripts2\\lib\\site-packages\\pyflakes\\api.py\", line 74, in check\r\n    w = checker.Checker(tree, file_tokens=file_tokens, filename=filename)\r\n  File \"c:\\users\\lukas.manduch\\source\\virtualenvs\\testscripts2\\lib\\site-packages\\pyflakes\\checker.py\", line 672, in __init__\r\n    self.handleChildren(tree)\r\n  File \"c:\\users\\lukas.manduch\\source\\virtualenvs\\testscripts2\\lib\\site-packages\\pyflakes\\checker.py\", line 1073, in handleChildren\r\n    self.handleNode(node, tree)\r\n  File \"c:\\users\\lukas.manduch\\source\\virtualenvs\\testscripts2\\lib\\site-packages\\pyflakes\\checker.py\", line 1120, in handleNode\r\n    handler(node)\r\n  File \"c:\\users\\lukas.manduch\\source\\virtualenvs\\testscripts2\\lib\\site-packages\\pyflakes\\checker.py\", line 1073, in handleChildren\r\n    self.handleNode(node, tree)\r\n  File \"c:\\users\\lukas.manduch\\source\\virtualenvs\\testscripts2\\lib\\site-packages\\pyflakes\\checker.py\", line 1120, in handleNode\r\n    handler(node)\r\n  File \"c:\\users\\lukas.manduch\\source\\virtualenvs\\testscripts2\\lib\\site-packages\\pyflakes\\checker.py\", line 1073, in handleChildren\r\n    self.handleNode(node, tree)\r\n  File \"c:\\users\\lukas.manduch\\source\\virtualenvs\\testscripts2\\lib\\site-packages\\pyflakes\\checker.py\", line 1119, in handleNode\r\n    handler = self.getNodeHandler(node.__class__)\r\n  File \"c:\\users\\lukas.manduch\\source\\virtualenvs\\testscripts2\\lib\\site-packages\\pyflakes\\checker.py\", line 909, in getNodeHandler\r\n    self._nodeHandlers[node_class] = handler = getattr(self, nodeType)\r\nAttributeError: 'Checker' object has no attribute 'NAMEDEXPR'\r\n````\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/502", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/502/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/502/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/502/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/502", "id": 546520709, "node_id": "MDU6SXNzdWU1NDY1MjA3MDk=", "number": 502, "title": "Erroneous \"undefined name\" error on un-imported quoted type annotation", "user": {"login": "andrewminer", "id": 445000, "node_id": "MDQ6VXNlcjQ0NTAwMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/445000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewminer", "html_url": "https://github.com/andrewminer", "followers_url": "https://api.github.com/users/andrewminer/followers", "following_url": "https://api.github.com/users/andrewminer/following{/other_user}", "gists_url": "https://api.github.com/users/andrewminer/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewminer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewminer/subscriptions", "organizations_url": "https://api.github.com/users/andrewminer/orgs", "repos_url": "https://api.github.com/users/andrewminer/repos", "events_url": "https://api.github.com/users/andrewminer/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewminer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-07T21:37:25Z", "updated_at": "2020-01-08T04:33:47Z", "closed_at": "2020-01-08T02:13:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm working on a pair of classes which each import the other.  For example, perhaps I have a file `alpha.py`:\r\n```python\r\nclass Alpha(object):\r\n    \r\n    def some_method(self, value: \"Bravo\"):\r\n        ....\r\n```\r\nand another file, `bravo.py`:\r\n```python\r\nfrom .alpha import Alpha\r\n\r\nclass Bravo(object):\r\n\r\n    def some_method(self, value: Alpha):\r\n        ...\r\n```\r\n\r\nIn this example, I've chosen to import `Alpha` into `bravo.py`, which, of course, means I can't import `Bravo` into `alpha.py`.  However, pyflakes is giving me an error in `alpha.py` saying: \"undefined name 'Bravo'`.  I've read through the other open issues (and a good many of the closed ones), and I don't see anything else reported for this particular problem.\r\n\r\nMy versions:\r\n```\r\n> pyflakes --version\r\n2.1.1 Python 3.7.4 on Darwin\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/501", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/501/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/501/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/501/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/501", "id": 545196257, "node_id": "MDU6SXNzdWU1NDUxOTYyNTc=", "number": 501, "title": "how do I use pep484 type hints in Python 2 while also catching for F821?", "user": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-01-03T22:53:14Z", "updated_at": "2020-04-07T00:14:38Z", "closed_at": "2020-01-04T03:40:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "hey there, SQLAlchemy guy here, I just need to know how I'm supposed to handle this.\r\n\r\nI want to enable F821 in the codebase.   But in a few places I have a pep484 type hint, written as a comment because this codebase is still supporting Python 2, like this:\r\n\r\n```\r\n    def self_group(self, against=None):\r\n        # type: (Optional[Any]) -> Union[Grouping, TextClause]\r\n        if against is operators.in_op:\r\n            return Grouping(self)\r\n        else:\r\n            return self\r\n\r\n```\r\n\r\nit's just a comment, so hooray, who can possibly complain about that?   but it looks like pyflakes has gone through all the trouble of policing these:\r\n\r\n```\r\n./lib/sqlalchemy/sql/elements.py:1883:9: F821 undefined name 'Optional'\r\n        # type: (Optional[Any]) -> Union[Grouping, TextClause]\r\n        ^\r\n./lib/sqlalchemy/sql/elements.py:1883:9: F821 undefined name 'Any'\r\n        # type: (Optional[Any]) -> Union[Grouping, TextClause]\r\n        ^\r\n./lib/sqlalchemy/sql/elements.py:1883:9: F821 undefined name 'Union'\r\n        # type: (Optional[Any]) -> Union[Grouping, TextClause]\r\n        ^\r\n\r\n```\r\n\r\nI can't define Optional, Any, or Grouping because there's no \"typing\" module in Python 2!   \r\n\r\nPer [pep484](https://www.python.org/dev/peps/pep-0484/#suggested-syntax-for-python-2-7-and-straddling-code):\r\n\r\n\"Tools that support this syntax should support it regardless of the Python version being checked. This is necessary in order to support code that straddles Python 2 and Python 3.\"\r\n\r\nit of course also says this:\r\n\r\n\"Like other type comments, any names used in the annotations must be imported or defined by the module containing the annotation.\"\r\n\r\nso....maybe this is not a flake8 problem but how on earth are type comments supposed to be useful if the most fundamental elements of the typing system like Any, Optional etc. are required to be imported but aren't available in Python 2 ?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/500", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/500/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/500/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/500/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/500", "id": 544924762, "node_id": "MDU6SXNzdWU1NDQ5MjQ3NjI=", "number": 500, "title": "type: ignore error codes incorrectly parsed", "user": {"login": "ze-phyr-us", "id": 4436927, "node_id": "MDQ6VXNlcjQ0MzY5Mjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4436927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ze-phyr-us", "html_url": "https://github.com/ze-phyr-us", "followers_url": "https://api.github.com/users/ze-phyr-us/followers", "following_url": "https://api.github.com/users/ze-phyr-us/following{/other_user}", "gists_url": "https://api.github.com/users/ze-phyr-us/gists{/gist_id}", "starred_url": "https://api.github.com/users/ze-phyr-us/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ze-phyr-us/subscriptions", "organizations_url": "https://api.github.com/users/ze-phyr-us/orgs", "repos_url": "https://api.github.com/users/ze-phyr-us/repos", "events_url": "https://api.github.com/users/ze-phyr-us/events{/privacy}", "received_events_url": "https://api.github.com/users/ze-phyr-us/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-03T09:56:50Z", "updated_at": "2020-01-03T10:00:55Z", "closed_at": "2020-01-03T10:00:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "mypy 0.730 introduced [error codes](https://mypy.readthedocs.io/en/latest/error_codes.html) and allows you to `# type: ignore[a-specific-error-code-here]`.\r\n\r\nConsider this code:\r\n\r\n```python\r\n1 + 'a' # type: ignore\r\n1 + 'a' # type: ignore[operator]\r\n\r\ndef f1() -> None:\r\n    return 1 + 'a' # type: ignore\r\n\r\ndef f2() -> None:\r\n    return 1 + 'a' # type: ignore[operator]\r\n```\r\n\r\npyflakes reports:\r\n\r\n```\r\ntest.py:8: undefined name 'ignore'\r\ntest.py:8: undefined name 'operator'\r\n```\r\n\r\nOddly, it only reports this spurious error inside a function but does not have this problem with line 2 where the error code ignore is used as well.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/496", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/496/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/496/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/496/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/496", "id": 538099511, "node_id": "MDU6SXNzdWU1MzgwOTk1MTE=", "number": 496, "title": "F821 false positive for type aliases", "user": {"login": "ammen99", "id": 6287487, "node_id": "MDQ6VXNlcjYyODc0ODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/6287487?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ammen99", "html_url": "https://github.com/ammen99", "followers_url": "https://api.github.com/users/ammen99/followers", "following_url": "https://api.github.com/users/ammen99/following{/other_user}", "gists_url": "https://api.github.com/users/ammen99/gists{/gist_id}", "starred_url": "https://api.github.com/users/ammen99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ammen99/subscriptions", "organizations_url": "https://api.github.com/users/ammen99/orgs", "repos_url": "https://api.github.com/users/ammen99/repos", "events_url": "https://api.github.com/users/ammen99/events{/privacy}", "received_events_url": "https://api.github.com/users/ammen99/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-15T20:12:36Z", "updated_at": "2019-12-15T20:16:40Z", "closed_at": "2019-12-15T20:16:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Testing this with Pyflakes 2.1.1 installed from pip and python 3.8.\r\n\r\nConsider the following snippet:\r\n```\r\nclass A:\r\n    B = int\r\n\r\n    def get(self) -> B:\r\n        return 1\r\n```\r\nPython accepts it and writing a small test `print(A().get())` returns `1`. MyPy also does not detect any errors. So I think this must be a bug in pyflakes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/495", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/495/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/495/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/495/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/495", "id": 537988185, "node_id": "MDU6SXNzdWU1Mzc5ODgxODU=", "number": 495, "title": "Improper Handling of the PEP 515 Extension", "user": {"login": "evarga", "id": 1093227, "node_id": "MDQ6VXNlcjEwOTMyMjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1093227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evarga", "html_url": "https://github.com/evarga", "followers_url": "https://api.github.com/users/evarga/followers", "following_url": "https://api.github.com/users/evarga/following{/other_user}", "gists_url": "https://api.github.com/users/evarga/gists{/gist_id}", "starred_url": "https://api.github.com/users/evarga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evarga/subscriptions", "organizations_url": "https://api.github.com/users/evarga/orgs", "repos_url": "https://api.github.com/users/evarga/repos", "events_url": "https://api.github.com/users/evarga/events{/privacy}", "received_events_url": "https://api.github.com/users/evarga/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-15T01:29:55Z", "updated_at": "2019-12-15T01:49:29Z", "closed_at": "2019-12-15T01:49:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "pyflakes reports an `invalid syntax` error when it encounters a code containing PEP 515 stuff. For example, the next valid line will trigger an error:\r\n\r\n`amount = 10_000`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/494", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/494/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/494/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/494/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/494", "id": 530940892, "node_id": "MDU6SXNzdWU1MzA5NDA4OTI=", "number": 494, "title": "New release?", "user": {"login": "bmerry", "id": 1963944, "node_id": "MDQ6VXNlcjE5NjM5NDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1963944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bmerry", "html_url": "https://github.com/bmerry", "followers_url": "https://api.github.com/users/bmerry/followers", "following_url": "https://api.github.com/users/bmerry/following{/other_user}", "gists_url": "https://api.github.com/users/bmerry/gists{/gist_id}", "starred_url": "https://api.github.com/users/bmerry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bmerry/subscriptions", "organizations_url": "https://api.github.com/users/bmerry/orgs", "repos_url": "https://api.github.com/users/bmerry/repos", "events_url": "https://api.github.com/users/bmerry/events{/privacy}", "received_events_url": "https://api.github.com/users/bmerry/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-02T07:23:07Z", "updated_at": "2019-12-03T19:35:09Z", "closed_at": "2019-12-03T19:35:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "It looks like there have been a lot of bug fixes since the last release in February. Are there any plans to create a new release?\r\n\r\nIn my case the issue is #427, which I've been working around for now by pinning an older version (before the bug was introduced), but the older version doesn't work with Python 3.8. I'm sure everyone has their own favourite issue though.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/493", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/493/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/493/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/493/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/493", "id": 528492503, "node_id": "MDU6SXNzdWU1Mjg0OTI1MDM=", "number": 493, "title": "Warning for redefined functions", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars1.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-26T05:12:46Z", "updated_at": "2019-11-26T06:44:17Z", "closed_at": "2019-11-26T06:42:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I often find myself installing Pylint for the sake of a single check:  \r\n```\r\npylint --score=no --disable=all --enable=function-redefined .\r\n```\r\n\r\nWhile I generally prefer the flake8 ecosystem, it doesn't catch the occasional problem of someone copy-pasting a test, changing it, and forgetting to change the name.  Unfortunately `pytest` doesn't catch this either, because the name is simply redefined and the first use forgotten.\r\n\r\nI don't think this needs to be too complicated - something like the existing redefined-name (`F811`) warning would be plenty \ud83d\ude04 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/492", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/492/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/492/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/492/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/492", "id": 528359707, "node_id": "MDU6SXNzdWU1MjgzNTk3MDc=", "number": 492, "title": "user manual", "user": {"login": "Phillip-M-Feldman", "id": 1065412, "node_id": "MDQ6VXNlcjEwNjU0MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1065412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phillip-M-Feldman", "html_url": "https://github.com/Phillip-M-Feldman", "followers_url": "https://api.github.com/users/Phillip-M-Feldman/followers", "following_url": "https://api.github.com/users/Phillip-M-Feldman/following{/other_user}", "gists_url": "https://api.github.com/users/Phillip-M-Feldman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phillip-M-Feldman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phillip-M-Feldman/subscriptions", "organizations_url": "https://api.github.com/users/Phillip-M-Feldman/orgs", "repos_url": "https://api.github.com/users/Phillip-M-Feldman/repos", "events_url": "https://api.github.com/users/Phillip-M-Feldman/events{/privacy}", "received_events_url": "https://api.github.com/users/Phillip-M-Feldman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-25T21:56:25Z", "updated_at": "2019-12-04T01:47:52Z", "closed_at": "2019-12-04T00:25:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be really nice to have a user manual.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/491", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/491/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/491/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/491/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/491", "id": 528134210, "node_id": "MDU6SXNzdWU1MjgxMzQyMTA=", "number": 491, "title": "pyflakes:3: ResourceWarning: unclosed file ", "user": {"login": "sabgit", "id": 29819710, "node_id": "MDQ6VXNlcjI5ODE5NzEw", "avatar_url": "https://avatars1.githubusercontent.com/u/29819710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sabgit", "html_url": "https://github.com/sabgit", "followers_url": "https://api.github.com/users/sabgit/followers", "following_url": "https://api.github.com/users/sabgit/following{/other_user}", "gists_url": "https://api.github.com/users/sabgit/gists{/gist_id}", "starred_url": "https://api.github.com/users/sabgit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sabgit/subscriptions", "organizations_url": "https://api.github.com/users/sabgit/orgs", "repos_url": "https://api.github.com/users/sabgit/repos", "events_url": "https://api.github.com/users/sabgit/events{/privacy}", "received_events_url": "https://api.github.com/users/sabgit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-25T14:45:50Z", "updated_at": "2019-11-25T14:53:02Z", "closed_at": "2019-11-25T14:53:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hitting the following warning with `pyflakes== 2.1.1`:\r\n```bash\r\n$ pycodestyle -h\r\n  File \"/tmp/pyenv/bin/pyflakes\", line 3, in <module>\r\n    import os; activate_this=os.path.join(os.path.dirname(os.path.realpath(__file__)), 'activate_this.py'); exec(compile(open(activate_this).read(), activate_this, 'exec'), { '__file__': activate_this}); del os, activate_this\r\n  File \"/tmp/pyenv/lib/python3.7/warnings.py\", line 110, in _showwarnmsg\r\n    msg.file, msg.line)\r\n  File \"/tmp/pyenv/lib/python3.7/sitecustomize.py\", line 9, in show_warning_with_traceback\r\n    traceback.print_stack(file=log)\r\n/tmp/pyenv/bin/pycodestyle:3: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pyenv/bin/activate_this.py' mode='r' encoding='UTF-8'>\r\n  import os; activate_this=os.path.join(os.path.dirname(os.path.realpath(__file__)), 'activate_this.py'); exec(compile(open(activate_this).read(), activate_this, 'exec'), { '__file__': activate_this}); del os, activate_this\r\n```\r\n\r\nIf I change it to close the file properly as in following, the warning goes away: \r\n\r\n```Python\r\nimport os; activate_this=os.path.join(os.path.dirname(os.path.realpath(__file__)), 'activate_this.py'); s=open(activate_this);exec(compile(s.read(), activate_this, 'exec'), { '__file__': activate_this}); s.close(); del os, activate_this\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/489", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/489/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/489/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/489/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/489", "id": 522448549, "node_id": "MDU6SXNzdWU1MjI0NDg1NDk=", "number": 489, "title": "Spurious \"undefined name\" with \"type: ignore\" comment for mypy", "user": {"login": "gward", "id": 51437, "node_id": "MDQ6VXNlcjUxNDM3", "avatar_url": "https://avatars2.githubusercontent.com/u/51437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gward", "html_url": "https://github.com/gward", "followers_url": "https://api.github.com/users/gward/followers", "following_url": "https://api.github.com/users/gward/following{/other_user}", "gists_url": "https://api.github.com/users/gward/gists{/gist_id}", "starred_url": "https://api.github.com/users/gward/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gward/subscriptions", "organizations_url": "https://api.github.com/users/gward/orgs", "repos_url": "https://api.github.com/users/gward/repos", "events_url": "https://api.github.com/users/gward/events{/privacy}", "received_events_url": "https://api.github.com/users/gward/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-13T20:15:16Z", "updated_at": "2019-11-13T21:31:07Z", "closed_at": "2019-11-13T21:31:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "mypy has the ability to selectively ignore type errors with special syntax in a type annotation comment. These comments confuse pyflakes and cause it to emit spurious \"undefined name\" errors.\r\n\r\nSample code using this mypy feature:\r\n```\r\ndef foo(a: str):\r\n    if a == 37:\r\n        return \"\"\r\n    return a + \"\"\r\n\r\nfoo(37)                         # type: ignore[arg-type]\r\n```\r\n(See https://mypy.readthedocs.io/en/latest/error_codes.html#silencing-errors-based-on-error-codes for more detail.)\r\n\r\npyflakes reports undefined names in that type annotation comment:\r\n```\r\n$ pyflakes pyflakes-test.py\r\npyflakes-test.py:6: undefined name 'ignore'\r\npyflakes-test.py:6: undefined name 'arg'\r\n```\r\n\r\nIf I change the type annotation comment to\r\n```\r\nfoo(37)                         # type: ignore\r\n```\r\nthen pyflakes is happy. But I'm not happy, because that will prevent mypy from finding _other_ errors in this line.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/487", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/487/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/487/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/487/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/487", "id": 514304206, "node_id": "MDU6SXNzdWU1MTQzMDQyMDY=", "number": 487, "title": "Change in behavior of F811 (redefinition of unused variable) in Python 3.8", "user": {"login": "adamjstewart", "id": 12021217, "node_id": "MDQ6VXNlcjEyMDIxMjE3", "avatar_url": "https://avatars2.githubusercontent.com/u/12021217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamjstewart", "html_url": "https://github.com/adamjstewart", "followers_url": "https://api.github.com/users/adamjstewart/followers", "following_url": "https://api.github.com/users/adamjstewart/following{/other_user}", "gists_url": "https://api.github.com/users/adamjstewart/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamjstewart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamjstewart/subscriptions", "organizations_url": "https://api.github.com/users/adamjstewart/orgs", "repos_url": "https://api.github.com/users/adamjstewart/repos", "events_url": "https://api.github.com/users/adamjstewart/events{/privacy}", "received_events_url": "https://api.github.com/users/adamjstewart/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-29T23:56:04Z", "updated_at": "2019-10-29T23:59:26Z", "closed_at": "2019-10-29T23:59:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "In Python 3.7.4, with Flake8 3.7.8, Entrypoints 0.3, McCabe 0.6.1, PyCodeStyle 2.1.1, and PyFlakes 2.1.1, the following code snippet is determined to be \"clean\" by flake8:\r\n```python\r\ndef foo(self):\r\n    pass\r\n\r\n\r\n@when('condition')  # noqa: F811\r\ndef foo(self):\r\n    pass\r\n```\r\nHowever, in Python 3.8.0, with the same versions of Flake8 and friends, it raises:\r\n```\r\n[F811] redefinition of unused 'foo'\r\n```\r\nIf I instead change the above snippet to:\r\n```python\r\ndef foo(self):\r\n    pass\r\n\r\n\r\n@when('condition')\r\ndef foo(self):  # noqa: F811\r\n    pass\r\n```\r\nflake8 is happy again. Is this a known change in the behavior of PyFlakes/Flake8, or is this a bug somewhere? I saw #482 but I think that's specific to the builtin `@overload` decorator.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/483", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/483/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/483/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/483/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/483", "id": 512107047, "node_id": "MDU6SXNzdWU1MTIxMDcwNDc=", "number": 483, "title": "python 3.8 SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?", "user": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2019-10-24T18:26:15Z", "updated_at": "2020-04-12T15:37:39Z", "closed_at": "2020-02-17T19:43:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there -\r\n\r\nI searched a bit for this but couldn't find it.   This is a warning generated by Python 3.8 and I think it's new.  It's very hard to get pytest to raise for this, so it would be better if it were in pyflakes / flake8.\r\n\r\ndemo:\r\n\r\n```\r\n\"\"\"test a syntax warning.\"\"\"\r\n\r\nx = 5\r\n\r\nif x is ():\r\n    print(\"hi\")\r\n\r\n```\r\n\r\n```\r\n$ /opt/python3.8/bin/python3 -m py_compile test.py\r\ntest.py:5: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\r\n  if x is ():\r\n\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/482", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/482/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/482/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/482/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/482", "id": 508778033, "node_id": "MDU6SXNzdWU1MDg3NzgwMzM=", "number": 482, "title": "F811 (redefinition of unused variable) incorrectly triggered with overload decorator on class methods", "user": {"login": "jmholla", "id": 23385761, "node_id": "MDQ6VXNlcjIzMzg1NzYx", "avatar_url": "https://avatars2.githubusercontent.com/u/23385761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmholla", "html_url": "https://github.com/jmholla", "followers_url": "https://api.github.com/users/jmholla/followers", "following_url": "https://api.github.com/users/jmholla/following{/other_user}", "gists_url": "https://api.github.com/users/jmholla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmholla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmholla/subscriptions", "organizations_url": "https://api.github.com/users/jmholla/orgs", "repos_url": "https://api.github.com/users/jmholla/repos", "events_url": "https://api.github.com/users/jmholla/events{/privacy}", "received_events_url": "https://api.github.com/users/jmholla/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-17T23:52:37Z", "updated_at": "2019-10-17T23:56:33Z", "closed_at": "2019-10-17T23:54:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following file results in redefinition errors:\r\n\r\n```python\r\nfrom typing import Any, overload, Sequence\r\n\r\n\r\nclass Foo(Sequence):\r\n    def __init__(self):\r\n        self.bar = []\r\n\r\n    @overload\r\n    def __getitem__(self, i: int) -> Any:\r\n        \"\"\"DOCS1\"\"\"\r\n        ...\r\n\r\n    @overload\r\n    def __getitem__(self, s: slice) -> Sequence[Any]:\r\n        \"\"\"DOCS2\"\"\"\r\n        ...\r\n\r\n    def __getitem__(self, i) -> Any:\r\n        \"\"\"DOCS\"\"\"\r\n        return self.bar[i]\r\n\r\n    def __len__(self) -> int:\r\n        return len(self.bar)\r\n\r\n    def serialize(self):\r\n        return self.bar\r\n\r\n```\r\n\r\nIt seems this has been fixed for other overload cases, but not yet for class method overloading.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/481", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/481/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/481/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/481/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/481", "id": 508766702, "node_id": "MDU6SXNzdWU1MDg3NjY3MDI=", "number": 481, "title": "Broken walrus support", "user": {"login": "canassa", "id": 288227, "node_id": "MDQ6VXNlcjI4ODIyNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/288227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canassa", "html_url": "https://github.com/canassa", "followers_url": "https://api.github.com/users/canassa/followers", "following_url": "https://api.github.com/users/canassa/following{/other_user}", "gists_url": "https://api.github.com/users/canassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/canassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canassa/subscriptions", "organizations_url": "https://api.github.com/users/canassa/orgs", "repos_url": "https://api.github.com/users/canassa/repos", "events_url": "https://api.github.com/users/canassa/events{/privacy}", "received_events_url": "https://api.github.com/users/canassa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-17T23:13:13Z", "updated_at": "2019-10-17T23:15:53Z", "closed_at": "2019-10-17T23:15:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\n\r\nThe latest release of pyflakes doesn't seem to support the walrus operator at all:\r\n\r\n```\r\n\"pyflakes\" failed during execution due to \"'FlakesChecker' object has no attribute 'NAMEDEXPR'\"\r\n```\r\n\r\nI tried to install the master version but it still doesn't work properly:\r\n\r\n```\r\nmodels.py:309:66: E231 missing whitespace after ':'\r\n        biocompatible = {m.name: \"\" for d in data[\"items\"] if (m := d[\"material\"]).biocompatible}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/480", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/480/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/480/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/480/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/480", "id": 506934391, "node_id": "MDU6SXNzdWU1MDY5MzQzOTE=", "number": 480, "title": "F811 (redefinition of unused variable) should ignore underscores", "user": {"login": "clbarnes", "id": 8995328, "node_id": "MDQ6VXNlcjg5OTUzMjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/8995328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clbarnes", "html_url": "https://github.com/clbarnes", "followers_url": "https://api.github.com/users/clbarnes/followers", "following_url": "https://api.github.com/users/clbarnes/following{/other_user}", "gists_url": "https://api.github.com/users/clbarnes/gists{/gist_id}", "starred_url": "https://api.github.com/users/clbarnes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clbarnes/subscriptions", "organizations_url": "https://api.github.com/users/clbarnes/orgs", "repos_url": "https://api.github.com/users/clbarnes/repos", "events_url": "https://api.github.com/users/clbarnes/events{/privacy}", "received_events_url": "https://api.github.com/users/clbarnes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-10-15T00:19:59Z", "updated_at": "2019-10-15T03:56:15Z", "closed_at": "2019-10-15T03:53:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is an official convention that underscores are used when you have to assign a variable but you are not going to refer to it again. For example, `[my_queue.get() for _ in range(10)]`, or `c, _ = (a, b)`.\r\n\r\nBy convention, the entire point of the underscore, therefore, is that it is A) unused, and B) can be redefined without issue. F811 should not be triggered if `_` is redefined.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/477", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/477/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/477/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/477/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/477", "id": 502998803, "node_id": "MDU6SXNzdWU1MDI5OTg4MDM=", "number": 477, "title": "Test Name Typo in Type Annotations Test", "user": {"login": "DahlitzFlorian", "id": 11705930, "node_id": "MDQ6VXNlcjExNzA1OTMw", "avatar_url": "https://avatars3.githubusercontent.com/u/11705930?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DahlitzFlorian", "html_url": "https://github.com/DahlitzFlorian", "followers_url": "https://api.github.com/users/DahlitzFlorian/followers", "following_url": "https://api.github.com/users/DahlitzFlorian/following{/other_user}", "gists_url": "https://api.github.com/users/DahlitzFlorian/gists{/gist_id}", "starred_url": "https://api.github.com/users/DahlitzFlorian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DahlitzFlorian/subscriptions", "organizations_url": "https://api.github.com/users/DahlitzFlorian/orgs", "repos_url": "https://api.github.com/users/DahlitzFlorian/repos", "events_url": "https://api.github.com/users/DahlitzFlorian/events{/privacy}", "received_events_url": "https://api.github.com/users/DahlitzFlorian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-05T18:27:37Z", "updated_at": "2019-10-05T18:31:14Z", "closed_at": "2019-10-05T18:31:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In the `test_type_annotations.py` there is a typo in a test name (line 335):\r\n\r\n`test_typeCommentsAdditionalComemnt` --> `test_typeCommentsAdditionalComment`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/475", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/475/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/475/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/475/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/475", "id": 499095936, "node_id": "MDU6SXNzdWU0OTkwOTU5MzY=", "number": 475, "title": "F821 with mypy 0.730 error code ignores", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-09-26T20:19:48Z", "updated_at": "2019-11-09T17:37:32Z", "closed_at": "2019-09-26T20:22:12Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The new [mypy 0.730 release](https://mypy-lang.blogspot.com/2019/09/mypy-730-released.html?spref=tw) allows more specific `# type: ignore` annotations such as:\r\n\r\n```python\r\n        assert value is not configutils.UNSET  # type: ignore[comparison-overlap]\r\n```\r\n\r\nHowever, this causes pyflakes to complain:\r\n\r\n```\r\nqutebrowser/config/websettings.py:96: undefined name 'ignore'\r\nqutebrowser/config/websettings.py:96: undefined name 'comparison'\r\nqutebrowser/config/websettings.py:96: undefined name 'overlap'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/473", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/473/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/473/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/473/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/473", "id": 497272859, "node_id": "MDU6SXNzdWU0OTcyNzI4NTk=", "number": 473, "title": "Falsely raise F401: imported but unused if forward reference of type annotation does not encapsulate entire type in string literal", "user": {"login": "tamias65", "id": 8967153, "node_id": "MDQ6VXNlcjg5NjcxNTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/8967153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamias65", "html_url": "https://github.com/tamias65", "followers_url": "https://api.github.com/users/tamias65/followers", "following_url": "https://api.github.com/users/tamias65/following{/other_user}", "gists_url": "https://api.github.com/users/tamias65/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamias65/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamias65/subscriptions", "organizations_url": "https://api.github.com/users/tamias65/orgs", "repos_url": "https://api.github.com/users/tamias65/repos", "events_url": "https://api.github.com/users/tamias65/events{/privacy}", "received_events_url": "https://api.github.com/users/tamias65/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-23T19:05:15Z", "updated_at": "2019-10-21T20:36:41Z", "closed_at": "2019-09-23T19:06:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using pyflakes for type annotation, pyflake recognizes import usage of type in string literals, but only if the entire type declaration is a string literal even thought both are valid forward references.\r\n\r\n```\r\nfrom typing import TYPE_CHECKING, List\r\n\r\nif TYPE_CHECKING:\r\n    from a import B\r\n\r\ndef some_function(arg: 'List[B]') -> None: # This is okay\r\n\r\ndef some_function(arg: List['B']) -> None: # This raises F401\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/471", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/471/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/471/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/471/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/471", "id": 496986737, "node_id": "MDU6SXNzdWU0OTY5ODY3Mzc=", "number": 471, "title": "F401 (imported but not used) in __init__.py", "user": {"login": "crusaderky", "id": 6213168, "node_id": "MDQ6VXNlcjYyMTMxNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6213168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusaderky", "html_url": "https://github.com/crusaderky", "followers_url": "https://api.github.com/users/crusaderky/followers", "following_url": "https://api.github.com/users/crusaderky/following{/other_user}", "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions", "organizations_url": "https://api.github.com/users/crusaderky/orgs", "repos_url": "https://api.github.com/users/crusaderky/repos", "events_url": "https://api.github.com/users/crusaderky/events{/privacy}", "received_events_url": "https://api.github.com/users/crusaderky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-23T09:27:20Z", "updated_at": "2019-09-23T12:36:20Z", "closed_at": "2019-09-23T12:36:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Virtually every medium to large library package I've encountered so far is structured as follows:\r\n\r\n- ``impl.py`` defines objects\r\n- ``__init__.py`` imports them, so that the library users don't need to know about ``impl.py``.\r\n\r\nAt the moment, the ``__init__.py`` modules of packages that use flake8 are littered with either ``# noqa: F401`` on every single line or ``# flake8: noqa`` at the top of the module which blanket disables everything.\r\n\r\nThis change request is to add a special case in pyflakes that disables F401 (only) when the file name is ``__init__.py``.\r\nAn alternative approach would be to add to flake8 the ability to suppress specific errors at module level, e.g. ``# flake8: noqa: F401``.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/470", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/470/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/470/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/470/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/470", "id": 496975939, "node_id": "MDU6SXNzdWU0OTY5NzU5Mzk=", "number": 470, "title": "@overload of async functions", "user": {"login": "crusaderky", "id": 6213168, "node_id": "MDQ6VXNlcjYyMTMxNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6213168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusaderky", "html_url": "https://github.com/crusaderky", "followers_url": "https://api.github.com/users/crusaderky/followers", "following_url": "https://api.github.com/users/crusaderky/following{/other_user}", "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions", "organizations_url": "https://api.github.com/users/crusaderky/orgs", "repos_url": "https://api.github.com/users/crusaderky/repos", "events_url": "https://api.github.com/users/crusaderky/events{/privacy}", "received_events_url": "https://api.github.com/users/crusaderky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-23T09:05:30Z", "updated_at": "2019-09-30T22:27:58Z", "closed_at": "2019-09-30T22:27:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since #435, pyflakes git tip copes with synchronous @overload'ed functions, but not with async ones:\r\n\r\n```python\r\nfrom typing import overload\r\n\r\n@overload\r\ndef f(x: int) -> int:\r\n    ...\r\n\r\n@overload\r\ndef f(x: float) -> float:\r\n    ...\r\n\r\ndef f(x):\r\n    return x\r\n\r\n@overload\r\nasync def g(x: int) -> int:\r\n    ...\r\n\r\n@overload\r\nasync def g(x: float) -> float:\r\n    ...\r\n\r\nasync def g(x):\r\n    return x\r\n```\r\n```bash\r\n$ python -m pyflakes .\r\n\r\n18:1 redefinition of unused 'g' from line 14\r\n22:1 redefinition of unused 'g' from line 18\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/469", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/469/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/469/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/469/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/469", "id": 496086772, "node_id": "MDU6SXNzdWU0OTYwODY3NzI=", "number": 469, "title": "F401 when quoting OrderedDict type hint in Union", "user": {"login": "dms-cat", "id": 45862333, "node_id": "MDQ6VXNlcjQ1ODYyMzMz", "avatar_url": "https://avatars1.githubusercontent.com/u/45862333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dms-cat", "html_url": "https://github.com/dms-cat", "followers_url": "https://api.github.com/users/dms-cat/followers", "following_url": "https://api.github.com/users/dms-cat/following{/other_user}", "gists_url": "https://api.github.com/users/dms-cat/gists{/gist_id}", "starred_url": "https://api.github.com/users/dms-cat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dms-cat/subscriptions", "organizations_url": "https://api.github.com/users/dms-cat/orgs", "repos_url": "https://api.github.com/users/dms-cat/repos", "events_url": "https://api.github.com/users/dms-cat/events{/privacy}", "received_events_url": "https://api.github.com/users/dms-cat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-09-20T00:39:35Z", "updated_at": "2019-10-21T20:36:28Z", "closed_at": "2019-09-22T21:35:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Because of a [mypy issue](https://github.com/python/mypy/issues/7539) I have to quote a type hint like `\"OrderedDict[Any, Any]\"`. This causes `flake8` to report\r\n\r\n> F401 'collections.OrderedDict' imported but unused\r\n\r\n*when the quoted type hint is part of a `Union`:*\r\n\r\n```text\r\n$ cat t.py\r\nfrom typing import TYPE_CHECKING, Any, Union\r\n\r\n\r\nif TYPE_CHECKING:\r\n    from collections import OrderedDict\r\n\r\n\r\ndef t(x: Union[Any, \"OrderedDict[Any, Any]\"]) -> None:\r\n    pass\r\n$ flake8 t.py \r\nt.py:5:5: F401 'collections.OrderedDict' imported but unused\r\n$ python --version\r\nPython 3.6.8\r\n$ flake8 --version\r\n3.7.8 (mccabe: 0.6.1, naming: 0.8.2, pycodestyle: 2.5.0, pyflakes: 2.1.1) CPython 3.6.8 on Linux\r\n```\r\n\r\nWorkarounds:\r\n\r\n- `from collections import OrderedDict  # noqa: F401`\r\n- Quote the *whole* type hint: `\"Union[Any, OrderedDict[Any, Any]]\"`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/465", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/465/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/465/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/465/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/465", "id": 482964523, "node_id": "MDU6SXNzdWU0ODI5NjQ1MjM=", "number": 465, "title": "RFE: check for missing comma in list literals containing strings", "user": {"login": "mgedmin", "id": 159967, "node_id": "MDQ6VXNlcjE1OTk2Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/159967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgedmin", "html_url": "https://github.com/mgedmin", "followers_url": "https://api.github.com/users/mgedmin/followers", "following_url": "https://api.github.com/users/mgedmin/following{/other_user}", "gists_url": "https://api.github.com/users/mgedmin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgedmin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgedmin/subscriptions", "organizations_url": "https://api.github.com/users/mgedmin/orgs", "repos_url": "https://api.github.com/users/mgedmin/repos", "events_url": "https://api.github.com/users/mgedmin/events{/privacy}", "received_events_url": "https://api.github.com/users/mgedmin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-08-20T16:32:50Z", "updated_at": "2019-08-20T18:25:15Z", "closed_at": "2019-08-20T16:51:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Recently I've found myself making this kind of error:\r\n\r\n```python\r\nsome_list = [\r\n    'a list'\r\n    'of items',\r\n    'etc.',\r\n]\r\n```\r\n\r\nwhich evaluates to `some_list == ['a listof items', 'etc.']` instead of the expected `['a list', 'of items', 'etc.']`.\r\n\r\nIt would be nice if pyflakes could warn about this sort of mistake.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/460", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/460/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/460/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/460/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/460", "id": 478542489, "node_id": "MDU6SXNzdWU0Nzg1NDI0ODk=", "number": 460, "title": "I'd like to be a maintainer :)", "user": {"login": "asottile", "id": 1810591, "node_id": "MDQ6VXNlcjE4MTA1OTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1810591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asottile", "html_url": "https://github.com/asottile", "followers_url": "https://api.github.com/users/asottile/followers", "following_url": "https://api.github.com/users/asottile/following{/other_user}", "gists_url": "https://api.github.com/users/asottile/gists{/gist_id}", "starred_url": "https://api.github.com/users/asottile/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asottile/subscriptions", "organizations_url": "https://api.github.com/users/asottile/orgs", "repos_url": "https://api.github.com/users/asottile/repos", "events_url": "https://api.github.com/users/asottile/events{/privacy}", "received_events_url": "https://api.github.com/users/asottile/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-08T15:29:22Z", "updated_at": "2019-08-08T18:08:06Z", "closed_at": "2019-08-08T18:05:22Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "@myint at least agrees -- https://github.com/PyCQA/pyflakes/pull/444#issuecomment-511077868", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/458", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/458/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/458/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/458/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/458", "id": 476586992, "node_id": "MDU6SXNzdWU0NzY1ODY5OTI=", "number": 458, "title": "`__path__` should not be a NameError in `__init__.py`", "user": {"login": "glyph", "id": 716529, "node_id": "MDQ6VXNlcjcxNjUyOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/716529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glyph", "html_url": "https://github.com/glyph", "followers_url": "https://api.github.com/users/glyph/followers", "following_url": "https://api.github.com/users/glyph/following{/other_user}", "gists_url": "https://api.github.com/users/glyph/gists{/gist_id}", "starred_url": "https://api.github.com/users/glyph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glyph/subscriptions", "organizations_url": "https://api.github.com/users/glyph/orgs", "repos_url": "https://api.github.com/users/glyph/repos", "events_url": "https://api.github.com/users/glyph/events{/privacy}", "received_events_url": "https://api.github.com/users/glyph/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-04T19:44:59Z", "updated_at": "2019-08-05T00:35:30Z", "closed_at": "2019-08-05T00:35:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "When defining a package, `__path__` exists at import time as a list, and pyflakes should know that so it doesn't report spurious errors.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/453", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/453/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/453/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/453/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/453", "id": 467762640, "node_id": "MDU6SXNzdWU0Njc3NjI2NDA=", "number": 453, "title": "Circular dependencies in Python < 3.7 string annotations", "user": {"login": "crusaderky", "id": 6213168, "node_id": "MDQ6VXNlcjYyMTMxNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6213168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusaderky", "html_url": "https://github.com/crusaderky", "followers_url": "https://api.github.com/users/crusaderky/followers", "following_url": "https://api.github.com/users/crusaderky/following{/other_user}", "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions", "organizations_url": "https://api.github.com/users/crusaderky/orgs", "repos_url": "https://api.github.com/users/crusaderky/repos", "events_url": "https://api.github.com/users/crusaderky/events{/privacy}", "received_events_url": "https://api.github.com/users/crusaderky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-07-13T20:19:45Z", "updated_at": "2019-10-22T17:43:25Z", "closed_at": "2019-09-30T22:30:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "When a function of module A needs to use and return an object of module B, but module B already imports module A, you will typically see this pattern in Python >=3.5.2, <3.7:\r\n\r\n```\r\nfrom typing import TYPE_CHECKING\r\nif TYPE_CHECKING:\r\n    # Circular dependency; module_b imports this module in its header\r\n    from module_b import SomeClass\r\n\r\ndef f() -> \"SomeClass\":\r\n    from module_b import SomeClass\r\n    return SomeClass(1, 2, 3)\r\n```\r\n\r\npyflakes 2.1.1 produces errors when parsing this file:\r\n```\r\nmodule_a.py:4: 'module_b.SomeClass' imported but unused\r\nmodule_a.py:7: redefinition of unused 'SomeClass' from line 4\r\n```\r\n\r\nNotably, pyflakes does not complain when the same is rewritten using delayed annotation, which however requires Python 3.7:\r\n\r\n```\r\nfrom __future__ import annotations\r\nfrom typing import TYPE_CHECKING\r\nif TYPE_CHECKING:\r\n    # Circular dependency; module_b imports this module in its header\r\n    from module_b import SomeClass\r\n\r\ndef f() -> SomeClass:\r\n    from module_b import SomeClass\r\n    return SomeClass(1, 2, 3)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/450", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/450/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/450/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/450/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/450", "id": 461677226, "node_id": "MDU6SXNzdWU0NjE2NzcyMjY=", "number": 450, "title": "Incorrect position reported for \"f-string: empty expression not allowed\"", "user": {"login": "haqle314", "id": 16577773, "node_id": "MDQ6VXNlcjE2NTc3Nzcz", "avatar_url": "https://avatars2.githubusercontent.com/u/16577773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haqle314", "html_url": "https://github.com/haqle314", "followers_url": "https://api.github.com/users/haqle314/followers", "following_url": "https://api.github.com/users/haqle314/following{/other_user}", "gists_url": "https://api.github.com/users/haqle314/gists{/gist_id}", "starred_url": "https://api.github.com/users/haqle314/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haqle314/subscriptions", "organizations_url": "https://api.github.com/users/haqle314/orgs", "repos_url": "https://api.github.com/users/haqle314/repos", "events_url": "https://api.github.com/users/haqle314/events{/privacy}", "received_events_url": "https://api.github.com/users/haqle314/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-27T18:14:36Z", "updated_at": "2019-08-08T19:57:35Z", "closed_at": "2019-08-08T19:57:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "For example, this is the content of the input file\r\n```\r\nfoo = f\"\"\"{}\r\nfoo\"\"\"\r\n```\r\npyflake doesn't point to the position of `{}`, it instead returns\r\n```\r\nfoo.py:2:-1: f-string: empty expression not allowed\r\nfoo\"\"\"\r\n    ^\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/449", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/449/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/449/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/449/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/449", "id": 460969694, "node_id": "MDU6SXNzdWU0NjA5Njk2OTQ=", "number": 449, "title": "Flake8 warning B010 spurious when inside lambda", "user": {"login": "madig", "id": 380829, "node_id": "MDQ6VXNlcjM4MDgyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/380829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/madig", "html_url": "https://github.com/madig", "followers_url": "https://api.github.com/users/madig/followers", "following_url": "https://api.github.com/users/madig/following{/other_user}", "gists_url": "https://api.github.com/users/madig/gists{/gist_id}", "starred_url": "https://api.github.com/users/madig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/madig/subscriptions", "organizations_url": "https://api.github.com/users/madig/orgs", "repos_url": "https://api.github.com/users/madig/repos", "events_url": "https://api.github.com/users/madig/events{/privacy}", "received_events_url": "https://api.github.com/users/madig/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-26T13:25:41Z", "updated_at": "2019-06-26T13:34:06Z", "closed_at": "2019-06-26T13:34:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "(I'm assuming flake8's B010 comes from pyflakes)\r\n\r\nI have this code snippet: \r\n\r\n```Python\r\n    glyphname = property(\r\n        lambda self: self.name, lambda self, value: setattr(self, \"name\", value)\r\n    )\r\n```\r\n\r\nFlake8 complainst about \"B010 Do not call setattr with a constant attribute value, it is not any safer than normal property access\". I can't use normal assignment inside a lambda, so this warning is spurious.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/447", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/447/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/447/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/447/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/447", "id": 449205264, "node_id": "MDU6SXNzdWU0NDkyMDUyNjQ=", "number": 447, "title": "Spurious import warning for type used in nested quoted annotation", "user": {"login": "PeterJCLaw", "id": 336212, "node_id": "MDQ6VXNlcjMzNjIxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/336212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterJCLaw", "html_url": "https://github.com/PeterJCLaw", "followers_url": "https://api.github.com/users/PeterJCLaw/followers", "following_url": "https://api.github.com/users/PeterJCLaw/following{/other_user}", "gists_url": "https://api.github.com/users/PeterJCLaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterJCLaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterJCLaw/subscriptions", "organizations_url": "https://api.github.com/users/PeterJCLaw/orgs", "repos_url": "https://api.github.com/users/PeterJCLaw/repos", "events_url": "https://api.github.com/users/PeterJCLaw/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterJCLaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-28T11:03:15Z", "updated_at": "2020-02-14T21:31:45Z", "closed_at": "2020-02-14T21:31:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is similar to #290 and #313, but seems to still be an issue.\r\n\r\nIf you import a type and then use it only within a type annotation which includes a nested quoted part, then `pyflakes` reports the import as unused.\r\n\r\n``` python\r\nfrom queue import Queue  # F401: 'queue.Queue' imported but unused\r\nfrom typing import Optional\r\n\r\ndef foo(queue: Optional['Queue[int]'] = None) -> None:\r\n    print(queue)\r\n\r\n# Revealed type is 'def (queue: Union[queue.Queue[builtins.int], None] =)'\r\nreveal_type(foo)\r\n```\r\n\r\nThis can be worked around by quoting the whole of the type annotation:\r\n``` python\r\ndef foo(queue: 'Optional[Queue[int]]' = None) -> None:\r\n    print(queue)\r\n```\r\n\r\nI'm using pyflakes 2.1.1 on Python 3.5.2 on Linux.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/446", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/446/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/446/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/446/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/446", "id": 446036002, "node_id": "MDU6SXNzdWU0NDYwMzYwMDI=", "number": 446, "title": "False positive when method return annotation is an inner class", "user": {"login": "bmerry", "id": 1963944, "node_id": "MDQ6VXNlcjE5NjM5NDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1963944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bmerry", "html_url": "https://github.com/bmerry", "followers_url": "https://api.github.com/users/bmerry/followers", "following_url": "https://api.github.com/users/bmerry/following{/other_user}", "gists_url": "https://api.github.com/users/bmerry/gists{/gist_id}", "starred_url": "https://api.github.com/users/bmerry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bmerry/subscriptions", "organizations_url": "https://api.github.com/users/bmerry/orgs", "repos_url": "https://api.github.com/users/bmerry/repos", "events_url": "https://api.github.com/users/bmerry/events{/privacy}", "received_events_url": "https://api.github.com/users/bmerry/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-20T10:18:21Z", "updated_at": "2019-05-20T15:23:26Z", "closed_at": "2019-05-20T15:23:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "This code is valid Python (or at least, both CPython and mypy are happy with it). However, pyflakes 2.1.1 on Python 3.6.6 gives the error `undefined name 'B'` on the return type annotation:\r\n\r\n```python\r\nclass A:\r\n    class B:\r\n        pass\r\n\r\n    def foo() -> B:\r\n        pass\r\n```\r\n\r\nStrangely pyflakes is also happy if `B` is used as an argument type annotation - it's only in a return type that it is unhappy.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/445", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/445/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/445/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/445/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/445", "id": 444449191, "node_id": "MDU6SXNzdWU0NDQ0NDkxOTE=", "number": 445, "title": "False positive F811 \"redefinition of unused\" involving imported symbol and class member", "user": {"login": "rec", "id": 253362, "node_id": "MDQ6VXNlcjI1MzM2Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/253362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rec", "html_url": "https://github.com/rec", "followers_url": "https://api.github.com/users/rec/followers", "following_url": "https://api.github.com/users/rec/following{/other_user}", "gists_url": "https://api.github.com/users/rec/gists{/gist_id}", "starred_url": "https://api.github.com/users/rec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rec/subscriptions", "organizations_url": "https://api.github.com/users/rec/orgs", "repos_url": "https://api.github.com/users/rec/repos", "events_url": "https://api.github.com/users/rec/events{/privacy}", "received_events_url": "https://api.github.com/users/rec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-15T13:47:08Z", "updated_at": "2019-05-15T15:34:07Z", "closed_at": "2019-05-15T15:34:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Was https://gitlab.com/pycqa/flake8/issues/540\r\n\r\nThe following code gives a false positive \"failure.py:10:5: F811 redefinition of unused 'COLORS2' from line 3\".  `COLORS2` is not actually being redefined...\r\n\r\n    COLORS1 = None\r\n    from colors import COLORS2  # noqa: F401\r\n\r\n\r\n    class Class:\r\n        def COLORS1(self):\r\n            pass\r\n\r\n        def COLORS2(self):\r\n            pass\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/442", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/442/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/442/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/442/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/442", "id": 428776440, "node_id": "MDU6SXNzdWU0Mjg3NzY0NDA=", "number": 442, "title": "pyflakes deserves a pre-commit hook definition", "user": {"login": "ssbarnea", "id": 102495, "node_id": "MDQ6VXNlcjEwMjQ5NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/102495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssbarnea", "html_url": "https://github.com/ssbarnea", "followers_url": "https://api.github.com/users/ssbarnea/followers", "following_url": "https://api.github.com/users/ssbarnea/following{/other_user}", "gists_url": "https://api.github.com/users/ssbarnea/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssbarnea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssbarnea/subscriptions", "organizations_url": "https://api.github.com/users/ssbarnea/orgs", "repos_url": "https://api.github.com/users/ssbarnea/repos", "events_url": "https://api.github.com/users/ssbarnea/events{/privacy}", "received_events_url": "https://api.github.com/users/ssbarnea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-03T13:44:03Z", "updated_at": "2019-04-03T13:51:00Z", "closed_at": "2019-04-03T13:51:00Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "It would very useful to have a pre-commit hook definition in pyflakes, which would allow user to use pyflakes with pre-commit.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/441", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/441/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/441/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/441/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/441", "id": 422657315, "node_id": "MDU6SXNzdWU0MjI2NTczMTU=", "number": 441, "title": "Class-level `TypeVar` resulting in \"undefined name\" error", "user": {"login": "K0Te", "id": 6162155, "node_id": "MDQ6VXNlcjYxNjIxNTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6162155?v=4", "gravatar_id": "", "url": "https://api.github.com/users/K0Te", "html_url": "https://github.com/K0Te", "followers_url": "https://api.github.com/users/K0Te/followers", "following_url": "https://api.github.com/users/K0Te/following{/other_user}", "gists_url": "https://api.github.com/users/K0Te/gists{/gist_id}", "starred_url": "https://api.github.com/users/K0Te/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/K0Te/subscriptions", "organizations_url": "https://api.github.com/users/K0Te/orgs", "repos_url": "https://api.github.com/users/K0Te/repos", "events_url": "https://api.github.com/users/K0Te/events{/privacy}", "received_events_url": "https://api.github.com/users/K0Te/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-19T10:38:28Z", "updated_at": "2019-07-03T01:37:23Z", "closed_at": "2019-07-03T01:37:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Minimal sample:\r\n```\r\nfrom typing import TypeVar\r\n\r\n\r\nclass IdClass:\r\n    Y = TypeVar('Y')\r\n\r\n    def id(self, x: Y) -> Y:\r\n        return x\r\n```\r\nResult:\r\n```\r\n# pyflakes t.py \r\nt.py:7: undefined name 'Y'\r\n```\r\n\r\nMyPy supports such typing annotations and does not complain about this file.\r\nProbably this issue is related to similar ones #427 and #126 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/436", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/436/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/436/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/436/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/436", "id": 413764411, "node_id": "MDU6SXNzdWU0MTM3NjQ0MTE=", "number": 436, "title": "New release?", "user": {"login": "JelleZijlstra", "id": 906600, "node_id": "MDQ6VXNlcjkwNjYwMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/906600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JelleZijlstra", "html_url": "https://github.com/JelleZijlstra", "followers_url": "https://api.github.com/users/JelleZijlstra/followers", "following_url": "https://api.github.com/users/JelleZijlstra/following{/other_user}", "gists_url": "https://api.github.com/users/JelleZijlstra/gists{/gist_id}", "starred_url": "https://api.github.com/users/JelleZijlstra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JelleZijlstra/subscriptions", "organizations_url": "https://api.github.com/users/JelleZijlstra/orgs", "repos_url": "https://api.github.com/users/JelleZijlstra/repos", "events_url": "https://api.github.com/users/JelleZijlstra/events{/privacy}", "received_events_url": "https://api.github.com/users/JelleZijlstra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-02-24T00:58:43Z", "updated_at": "2019-08-08T19:56:36Z", "closed_at": "2019-08-08T19:56:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I had to pin [flake8-pyi](http://github.com/ambv/flake8-pyi) to an earlier version of pyflakes and flake8 because #422 (which has already been fixed\u2014thanks!) broke some of our tests.\r\n\r\nWould it be possible to create a new release with the fix for #422? This would help people who are using flake8-pyi to lint stub files upgrade to the newest flake8 and pyflakes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/434", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/434/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/434/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/434/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/434", "id": 413412489, "node_id": "MDU6SXNzdWU0MTM0MTI0ODk=", "number": 434, "title": "F811 (redefinition of unused variable) incorrectly triggered with @overload decorator", "user": {"login": "smoehrle", "id": 26185187, "node_id": "MDQ6VXNlcjI2MTg1MTg3", "avatar_url": "https://avatars3.githubusercontent.com/u/26185187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoehrle", "html_url": "https://github.com/smoehrle", "followers_url": "https://api.github.com/users/smoehrle/followers", "following_url": "https://api.github.com/users/smoehrle/following{/other_user}", "gists_url": "https://api.github.com/users/smoehrle/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoehrle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoehrle/subscriptions", "organizations_url": "https://api.github.com/users/smoehrle/orgs", "repos_url": "https://api.github.com/users/smoehrle/repos", "events_url": "https://api.github.com/users/smoehrle/events{/privacy}", "received_events_url": "https://api.github.com/users/smoehrle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-22T13:51:33Z", "updated_at": "2019-03-01T12:37:21Z", "closed_at": "2019-03-01T12:37:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "This bug was fixed for functions in #320. It still occurs if the function is inside a class and/or has multiple decorators (e.g. @staticmethod, @classmethod):\r\n```python\r\nfrom typing import overload\r\n\r\n\r\nclass test:\r\n    @overload\r\n    def utf8(value: None) -> None:\r\n        pass\r\n\r\n    @overload\r\n    def utf8(value: bytes) -> bytes:\r\n        pass\r\n\r\n    @overload\r\n    def utf8(value: str) -> bytes:\r\n        pass\r\n\r\n    def utf8(value):\r\n        pass  # actual implementation\r\n```\r\n\r\n```\r\ntest.py:9:5: F811 redefinition of unused 'utf8' from line 5\r\ntest.py:13:5: F811 redefinition of unused 'utf8' from line 9\r\ntest.py:17:5: F811 redefinition of unused 'utf8' from line 13\r\n```\r\n\r\n```python\r\nfrom typing import overload\r\n\r\n\r\ndef do_nothing(func):\r\n    return func\r\n\r\n\r\n@overload\r\n@do_nothing\r\ndef utf8(value: None) -> None:\r\n    pass\r\n\r\n\r\n@overload\r\n@do_nothing\r\ndef utf8(value: bytes) -> bytes:\r\n    pass\r\n\r\n\r\n@overload\r\n@do_nothing\r\ndef utf8(value: str) -> bytes:\r\n    pass\r\n\r\n\r\ndef utf8(value):\r\n    pass  # actual implementation\r\n```\r\n\r\n```\r\ntest.py:14:1: F811 redefinition of unused 'utf8' from line 8\r\ntest.py:20:1: F811 redefinition of unused 'utf8' from line 14\r\ntest.py:26:1: F811 redefinition of unused 'utf8' from line 20\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/432", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/432/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/432/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/432/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/432", "id": 412506057, "node_id": "MDU6SXNzdWU0MTI1MDYwNTc=", "number": 432, "title": "F811 redefinition of unused line detection has changed between pyflakes 2.0.0 and 2.1.0 ? ", "user": {"login": "Nairwolf", "id": 19313639, "node_id": "MDQ6VXNlcjE5MzEzNjM5", "avatar_url": "https://avatars0.githubusercontent.com/u/19313639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nairwolf", "html_url": "https://github.com/Nairwolf", "followers_url": "https://api.github.com/users/Nairwolf/followers", "following_url": "https://api.github.com/users/Nairwolf/following{/other_user}", "gists_url": "https://api.github.com/users/Nairwolf/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nairwolf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nairwolf/subscriptions", "organizations_url": "https://api.github.com/users/Nairwolf/orgs", "repos_url": "https://api.github.com/users/Nairwolf/repos", "events_url": "https://api.github.com/users/Nairwolf/events{/privacy}", "received_events_url": "https://api.github.com/users/Nairwolf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-20T16:10:01Z", "updated_at": "2019-02-28T22:12:10Z", "closed_at": "2019-02-28T22:12:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\n\r\nI've updated my linter from pyflakes 2.0.0 to pyflakes 2.1.0 and I see a breaking changes no documented anywhere. Is this change was wanted, or not, that's the real question. \r\n\r\nWith pytest, it's usual to have a file like that.\r\n```\r\nimport pytest\r\nfrom mylib import customfixture\r\n\r\n\r\n@pytest.fixture(scope=\"session\")\r\ndef ctx(customfixture):\r\n    pass\r\n```\r\n\r\nWith pyflakes 2.0.0, we have this behaviour: \r\n\r\n```\r\n/ws # pyflakes --version\r\n2.0.0\r\n/ws # pyflakes mock.py \r\nmock.py:2: 'mylib.customfixture' imported but unused\r\nmock.py:5: redefinition of unused 'customfixture' from line 2\r\n```\r\n\r\nSo the \"redefinition of unused\" is detected at line 5.\r\n\r\nWith pyflakes 2.1.0, we have this behaviour:\r\n\r\n```\r\n/ws # pyflakes --version\r\n2.1.0 Python 3.7.2 on Linux\r\n/ws # pyflakes mock.py\r\nmock.py:2: 'mylib.customfixture' imported but unused\r\nmock.py:6: redefinition of unused 'customfixture' from line 2\r\n```\r\n\r\nIs it a breaking change intended or not ? I don't see in the release notes of 2.1.0 what caused this change.  \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/431", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/431/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/431/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/431/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/431", "id": 412499543, "node_id": "MDU6SXNzdWU0MTI0OTk1NDM=", "number": 431, "title": "noqa", "user": {"login": "Nairwolf", "id": 19313639, "node_id": "MDQ6VXNlcjE5MzEzNjM5", "avatar_url": "https://avatars0.githubusercontent.com/u/19313639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nairwolf", "html_url": "https://github.com/Nairwolf", "followers_url": "https://api.github.com/users/Nairwolf/followers", "following_url": "https://api.github.com/users/Nairwolf/following{/other_user}", "gists_url": "https://api.github.com/users/Nairwolf/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nairwolf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nairwolf/subscriptions", "organizations_url": "https://api.github.com/users/Nairwolf/orgs", "repos_url": "https://api.github.com/users/Nairwolf/repos", "events_url": "https://api.github.com/users/Nairwolf/events{/privacy}", "received_events_url": "https://api.github.com/users/Nairwolf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-20T15:57:01Z", "updated_at": "2019-02-20T16:01:23Z", "closed_at": "2019-02-20T16:01:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I will edit this issue (give me some time)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/430", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/430/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/430/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/430/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/430", "id": 409875966, "node_id": "MDU6SXNzdWU0MDk4NzU5NjY=", "number": 430, "title": "redefinition of unused 'range' from line (flake8 F811) false positive", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-13T15:59:04Z", "updated_at": "2019-08-08T19:55:56Z", "closed_at": "2019-08-08T19:55:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This could be related to #372 which describes a similar false positive.\r\n\r\nExample test case, ``fp.py`` (false positive):\r\n\r\n```python\r\n\"\"\"This is a test case for flake8 or pyflakes.\"\"\"\r\n\r\nfrom builtins import range  # noqa: F401\r\n\r\n\r\nclass Wibble(object):\r\n    \"\"\"Simple object holding a list or array of values.\"\"\"\r\n\r\n    def __init__(self, values):\r\n        \"\"\"Create object.\"\"\"\r\n        self.values = values\r\n\r\n    def range(self):\r\n        \"\"\"Return min/max of the values.\"\"\"\r\n        return min(self.values), max(self.values)\r\n\r\n\r\nw = Wibble([1, 2, 3, 4, 5])\r\nassert w.range() == (1, 5)\r\n```\r\n\r\nUsage:\r\n\r\n```\r\n$ python3 --version\r\nPython 3.7.0rc1\r\n$ python3 fp.py\r\n```\r\n\r\nWith flake8 I can disable the unused import, leaving just the false positive F811\r\n\r\n```\r\n$ flake8 --version\r\n3.6.0 (black: 0.0.1, flake8-bugbear: 18.2.0, flake8-docstrings: 1.3.0, pydocstyle: 2.1.1, mccabe: 0.6.1, pycodestyle: 2.4.0, pyflakes: 2.0.0, rst-docstrings: 0.0.8) CPython 3.7.0rc1 on Darwin\r\n$ flake8 fp.py\r\nfp.py:13:5: F811 redefinition of unused 'range' from line 3\r\n```\r\n\r\nRunning pyflakes directly,\r\n\r\n```\r\n$ pyflakes --version\r\n2.0.0\r\n$ pyflakes fp.py\r\nfp.py:3: 'builtins.range' imported but unused\r\nfp.py:13: redefinition of unused 'range' from line 3\r\n```\r\n\r\nThis test case was based on https://github.com/biopython/biopython/commit/78a73b99856b92327ecfef632781f0f5fde0f5d3 and the preceding commit, where I was importing  a ``range`` function from a compatibility library, and had a class defining an unrelated ``range`` method.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/429", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/429/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/429/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/429/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/429", "id": 409465857, "node_id": "MDU6SXNzdWU0MDk0NjU4NTc=", "number": 429, "title": "Unused imports not reported if they are in a hierarchy", "user": {"login": "timj", "id": 60622, "node_id": "MDQ6VXNlcjYwNjIy", "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-02-12T19:36:21Z", "updated_at": "2019-08-08T19:55:15Z", "closed_at": "2019-08-08T19:55:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would really expect this code to issue an F401 warning:\r\n```python\r\nimport collections\r\nimport collections.abc\r\n\r\na = collections.OrderedDict()\r\n```\r\nsince `collections.abc` is imported but unused. Unfortunately pyflakes doesn't think there is a problem and it seems that using anything from a package hierarchy quietens the warning.\r\n\r\nWe have noticed this in our project where we have lots of independent packages but we keep them in a shared root namespace (project `a` with independent packages `a.b` and `a.c.d`). We recently noticed that pyflakes is ignoring all the unused imports we have in the code because they are all in `a`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/427", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/427/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/427/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/427/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/427", "id": 408354998, "node_id": "MDU6SXNzdWU0MDgzNTQ5OTg=", "number": 427, "title": "False-positive F821 on Inner Classes", "user": {"login": "dmtucker", "id": 1817814, "node_id": "MDQ6VXNlcjE4MTc4MTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1817814?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmtucker", "html_url": "https://github.com/dmtucker", "followers_url": "https://api.github.com/users/dmtucker/followers", "following_url": "https://api.github.com/users/dmtucker/following{/other_user}", "gists_url": "https://api.github.com/users/dmtucker/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmtucker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmtucker/subscriptions", "organizations_url": "https://api.github.com/users/dmtucker/orgs", "repos_url": "https://api.github.com/users/dmtucker/repos", "events_url": "https://api.github.com/users/dmtucker/events{/privacy}", "received_events_url": "https://api.github.com/users/dmtucker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-08T22:52:46Z", "updated_at": "2019-09-11T02:49:21Z", "closed_at": "2019-09-11T02:49:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "tl;dr: #126 for type annotations\r\n\r\n``` python\r\nclass A:\r\n    class B:\r\n        pass\r\n\r\n    def do(self) -> B:\r\n        return A.B()\r\n```\r\n```\r\n$ python3.7 -m venv tmp\r\n$ tmp/bin/pip install pyflakes\r\nCollecting pyflakes\r\n  Using cached https://files.pythonhosted.org/packages/16/3b/b6a508ad148ce1ef50bd7a9a783afbb8d775616fc4ae5e3007c8815a3c85/pyflakes-2.1.0-py2.py3-none-any.whl\r\nInstalling collected packages: pyflakes\r\nSuccessfully installed pyflakes-2.1.0\r\nYou are using pip version 18.1, however version 19.0.1 is available.\r\nYou should consider upgrading via the 'pip install --upgrade pip' command.\r\n$ tmp/bin/pyflakes tmp.py\r\ntmp.py:5: undefined name 'B'\r\n```\r\n- Python 3.7.2, if it matters\r\n\r\n`mypy` has no problem with this annotation:\r\n```\r\n$ tmp/bin/pip install mypy\r\nCollecting mypy\r\n  Downloading https://files.pythonhosted.org/packages/88/11/8092fdd9cf4c507e6c799bf663e713a5418beb9fda422df810f72641224c/mypy-0.670-py3-none-any.whl (1.5MB)\r\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.5MB 5.5MB/s \r\nCollecting typed-ast<1.4.0,>=1.3.1 (from mypy)\r\n  Downloading https://files.pythonhosted.org/packages/67/da/5ab7377797ecbae3ff08eeffb8183f225bdf4b781ddb832ccf95ebd4f46e/typed_ast-1.3.1-cp37-cp37m-macosx_10_9_x86_64.whl (213kB)\r\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 215kB 9.0MB/s \r\nCollecting mypy-extensions<0.5.0,>=0.4.0 (from mypy)\r\n  Using cached https://files.pythonhosted.org/packages/4d/72/8d54e2b296631b9b14961d583e56e90d9d7fba8a240d5ce7f1113cc5e887/mypy_extensions-0.4.1-py2.py3-none-any.whl\r\nInstalling collected packages: typed-ast, mypy-extensions, mypy\r\nSuccessfully installed mypy-0.670 mypy-extensions-0.4.1 typed-ast-1.3.1\r\nYou are using pip version 18.1, however version 19.0.1 is available.\r\nYou should consider upgrading via the 'pip install --upgrade pip' command.\r\n$ tmp/bin/mypy tmp.py \r\n$ \r\n```\r\n- Note: I confirmed it would catch it by changing `-> B` to `-> C` and rerunning:\r\n  ```\r\n  $ tmp/bin/mypy tmp.py \r\n  tmp.py:5: error: Name 'C' is not defined\r\n  ```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/425", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/425/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/425/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/425/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/425", "id": 405972669, "node_id": "MDU6SXNzdWU0MDU5NzI2Njk=", "number": 425, "title": "Include colon number in the diagnostics", "user": {"login": "AmjadHD", "id": 33235928, "node_id": "MDQ6VXNlcjMzMjM1OTI4", "avatar_url": "https://avatars0.githubusercontent.com/u/33235928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AmjadHD", "html_url": "https://github.com/AmjadHD", "followers_url": "https://api.github.com/users/AmjadHD/followers", "following_url": "https://api.github.com/users/AmjadHD/following{/other_user}", "gists_url": "https://api.github.com/users/AmjadHD/gists{/gist_id}", "starred_url": "https://api.github.com/users/AmjadHD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AmjadHD/subscriptions", "organizations_url": "https://api.github.com/users/AmjadHD/orgs", "repos_url": "https://api.github.com/users/AmjadHD/repos", "events_url": "https://api.github.com/users/AmjadHD/events{/privacy}", "received_events_url": "https://api.github.com/users/AmjadHD/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-02-02T11:00:02Z", "updated_at": "2019-02-09T13:48:51Z", "closed_at": "2019-02-09T13:48:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "pyflakes only provides the line number for diagnostics, It would be very handy to include the colon number as well for more precise diagnostics.\r\nrelated issues: #417 #158 .", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/422", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/422/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/422/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/422/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/422", "id": 405011587, "node_id": "MDU6SXNzdWU0MDUwMTE1ODc=", "number": 422, "title": "2.1.0 is broken", "user": {"login": "ThomasWaldmann", "id": 356103, "node_id": "MDQ6VXNlcjM1NjEwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/356103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThomasWaldmann", "html_url": "https://github.com/ThomasWaldmann", "followers_url": "https://api.github.com/users/ThomasWaldmann/followers", "following_url": "https://api.github.com/users/ThomasWaldmann/following{/other_user}", "gists_url": "https://api.github.com/users/ThomasWaldmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThomasWaldmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThomasWaldmann/subscriptions", "organizations_url": "https://api.github.com/users/ThomasWaldmann/orgs", "repos_url": "https://api.github.com/users/ThomasWaldmann/repos", "events_url": "https://api.github.com/users/ThomasWaldmann/events{/privacy}", "received_events_url": "https://api.github.com/users/ThomasWaldmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-01-30T23:26:13Z", "updated_at": "2019-02-21T06:35:13Z", "closed_at": "2019-01-31T14:09:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://travis-ci.org/borgbackup/borg/jobs/486513787", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/421", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/421/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/421/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/421/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/421", "id": 404851071, "node_id": "MDU6SXNzdWU0MDQ4NTEwNzE=", "number": 421, "title": "2.1.0: PYFLAKES_DOCTEST=1 causes stacktrace: AttributeError: 'NoneType' object has no attribute 'parent'", "user": {"login": "asottile", "id": 1810591, "node_id": "MDQ6VXNlcjE4MTA1OTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1810591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asottile", "html_url": "https://github.com/asottile", "followers_url": "https://api.github.com/users/asottile/followers", "following_url": "https://api.github.com/users/asottile/following{/other_user}", "gists_url": "https://api.github.com/users/asottile/gists{/gist_id}", "starred_url": "https://api.github.com/users/asottile/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asottile/subscriptions", "organizations_url": "https://api.github.com/users/asottile/orgs", "repos_url": "https://api.github.com/users/asottile/repos", "events_url": "https://api.github.com/users/asottile/events{/privacy}", "received_events_url": "https://api.github.com/users/asottile/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-30T16:22:37Z", "updated_at": "2019-07-09T13:37:44Z", "closed_at": "2019-07-09T13:37:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "From https://gitlab.com/pycqa/flake8/issues/492\r\n\r\n```console\r\n$ pyflakes --version\r\n2.1.0 Python 3.6.7 on Linux\r\n```\r\n\r\n```python\r\nimport foo as _\r\n\r\ndef x():\r\n    \"\"\"doc\r\n\r\n    >>> x()\r\n    >>> x()\r\n    \"\"\"\r\n```\r\n\r\n```console\r\n$ PYFLAKES_DOCTEST=1 pyflakes t.py \r\nTraceback (most recent call last):\r\n  File \"/tmp/t/venv/bin/pyflakes\", line 10, in <module>\r\n    sys.exit(main())\r\n  File \"/tmp/t/venv/lib/python3.6/site-packages/pyflakes/api.py\", line 207, in main\r\n    warnings = checkRecursive(args, reporter)\r\n  File \"/tmp/t/venv/lib/python3.6/site-packages/pyflakes/api.py\", line 156, in checkRecursive\r\n    warnings += checkPath(sourcePath, reporter)\r\n  File \"/tmp/t/venv/lib/python3.6/site-packages/pyflakes/api.py\", line 99, in checkPath\r\n    return check(codestr, filename, reporter)\r\n  File \"/tmp/t/venv/lib/python3.6/site-packages/pyflakes/api.py\", line 74, in check\r\n    w = checker.Checker(tree, file_tokens=file_tokens, filename=filename)\r\n  File \"/tmp/t/venv/lib/python3.6/site-packages/pyflakes/checker.py\", line 665, in __init__\r\n    self.runDeferred(self._deferredFunctions)\r\n  File \"/tmp/t/venv/lib/python3.6/site-packages/pyflakes/checker.py\", line 702, in runDeferred\r\n    handler()\r\n  File \"/tmp/t/venv/lib/python3.6/site-packages/pyflakes/checker.py\", line 1410, in <lambda>\r\n    self.deferFunction(lambda: self.handleDoctests(node))\r\n  File \"/tmp/t/venv/lib/python3.6/site-packages/pyflakes/checker.py\", line 1148, in handleDoctests\r\n    self.addBinding(None, Builtin('_'))\r\n  File \"/tmp/t/venv/lib/python3.6/site-packages/pyflakes/checker.py\", line 870, in addBinding\r\n    parent_stmt = self.getParent(value.source)\r\n  File \"/tmp/t/venv/lib/python3.6/site-packages/pyflakes/checker.py\", line 808, in getParent\r\n    node = node.parent\r\nAttributeError: 'NoneType' object has no attribute 'parent'\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/419", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/419/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/419/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/419/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/419", "id": 404674736, "node_id": "MDU6SXNzdWU0MDQ2NzQ3MzY=", "number": 419, "title": "Incorrect line number for syntax error in type comment", "user": {"login": "hugovk", "id": 1324225, "node_id": "MDQ6VXNlcjEzMjQyMjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1324225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hugovk", "html_url": "https://github.com/hugovk", "followers_url": "https://api.github.com/users/hugovk/followers", "following_url": "https://api.github.com/users/hugovk/following{/other_user}", "gists_url": "https://api.github.com/users/hugovk/gists{/gist_id}", "starred_url": "https://api.github.com/users/hugovk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hugovk/subscriptions", "organizations_url": "https://api.github.com/users/hugovk/orgs", "repos_url": "https://api.github.com/users/hugovk/repos", "events_url": "https://api.github.com/users/hugovk/events{/privacy}", "received_events_url": "https://api.github.com/users/hugovk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-30T09:22:34Z", "updated_at": "2019-02-01T16:41:28Z", "closed_at": "2019-02-01T16:41:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Minor issue, pyflakes 2.1.0 (macOS High Sierra and Ubuntu Xenial) is reporting an issue at line 196 when it's really at line 208. Pyflakes 2.0.0 did not report the issue at all.\r\n\r\nTo reproduce:\r\n\r\n```console\r\n$ pip install -U pyflakes\r\nRequirement already up-to-date: pyflakes in /usr/local/lib/python3.7/site-packages (2.1.0)\r\n$ wget https://raw.githubusercontent.com/python-pillow/Pillow/a656a0bd603bcc333184ad1baf61d118925b3772/Tests/test_file_libtiff.py\r\n--2019-01-30 11:03:02--  https://raw.githubusercontent.com/python-pillow/Pillow/a656a0bd603bcc333184ad1baf61d118925b3772/Tests/test_file_libtiff.py\r\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.244.133\r\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.244.133|:443... connected.\r\nHTTP request sent, awaiting response... 200 OK\r\nLength: 23915 (23K) [text/plain]\r\nSaving to: \u2018test_file_libtiff.py\u2019\r\n\r\ntest_file_libtiff.py               100%[==============================================================>]  23.35K  --.-KB/s    in 0.001s\r\n\r\n2019-01-30 11:03:02 (15.9 MB/s) - \u2018test_file_libtiff.py\u2019 saved [23915/23915]\r\n\r\n$ pyflakes test_file_libtiff.py\r\ntest_file_libtiff.py:196: syntax error in type comment 'dummy value'\r\n$ grep --line-number \"dummy value\" test_file_libtiff.py\r\n208:        # type: dummy value\r\n```\r\n\r\nFile on GitHub:\r\n\r\nhttps://github.com/python-pillow/Pillow/blob/a656a0bd603bcc333184ad1baf61d118925b3772/Tests/test_file_libtiff.py#L208\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/417", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/417/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/417/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/417/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/417", "id": 402906388, "node_id": "MDU6SXNzdWU0MDI5MDYzODg=", "number": 417, "title": "wrong range for undefined variable diagnostics", "user": {"login": "AmjadHD", "id": 33235928, "node_id": "MDQ6VXNlcjMzMjM1OTI4", "avatar_url": "https://avatars0.githubusercontent.com/u/33235928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AmjadHD", "html_url": "https://github.com/AmjadHD", "followers_url": "https://api.github.com/users/AmjadHD/followers", "following_url": "https://api.github.com/users/AmjadHD/following{/other_user}", "gists_url": "https://api.github.com/users/AmjadHD/gists{/gist_id}", "starred_url": "https://api.github.com/users/AmjadHD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AmjadHD/subscriptions", "organizations_url": "https://api.github.com/users/AmjadHD/orgs", "repos_url": "https://api.github.com/users/AmjadHD/repos", "events_url": "https://api.github.com/users/AmjadHD/events{/privacy}", "received_events_url": "https://api.github.com/users/AmjadHD/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-01-24T21:37:58Z", "updated_at": "2019-02-01T20:05:14Z", "closed_at": "2019-01-25T12:33:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "![screenshot_1](https://user-images.githubusercontent.com/33235928/51709853-cc9a7a00-2027-11e9-8bae-e884278e612b.png)\r\n\r\nAs you can see the range of the diagnostic \"foo may be undefined or defined from star imports: mod\" does not end at the end of `WIDTH` but continues to the end of the line.\r\n\r\nNote: the screenshot is sublime text 3 with LSP.\r\nthis is the corresponding entry in the diagnostics array sent bypyls to LSP:\r\n`{'message': \"'SOUNDS_FOLDER' may be undefined, or defined from star imports: settings\", 'range': {'end': {'character': 91, 'line': 29}, 'start': {'character': 52, 'line': 29}}, 'source': 'pyflakes', 'severity': 2}`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/414", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/414/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/414/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/414/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/414", "id": 401044000, "node_id": "MDU6SXNzdWU0MDEwNDQwMDA=", "number": 414, "title": "False positive in print function options", "user": {"login": "rktanizawa", "id": 14002743, "node_id": "MDQ6VXNlcjE0MDAyNzQz", "avatar_url": "https://avatars0.githubusercontent.com/u/14002743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rktanizawa", "html_url": "https://github.com/rktanizawa", "followers_url": "https://api.github.com/users/rktanizawa/followers", "following_url": "https://api.github.com/users/rktanizawa/following{/other_user}", "gists_url": "https://api.github.com/users/rktanizawa/gists{/gist_id}", "starred_url": "https://api.github.com/users/rktanizawa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rktanizawa/subscriptions", "organizations_url": "https://api.github.com/users/rktanizawa/orgs", "repos_url": "https://api.github.com/users/rktanizawa/repos", "events_url": "https://api.github.com/users/rktanizawa/events{/privacy}", "received_events_url": "https://api.github.com/users/rktanizawa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-19T23:08:31Z", "updated_at": "2019-01-19T23:11:13Z", "closed_at": "2019-01-19T23:10:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Getting invalid syntax error on the sep/end arguments when using strip() inside print function.\r\nex.\r\n# pattern with 2 possible capture groups, link + title\r\npattern = re.findall(r'<a href=(?:\\\")([^\\\"]*).*?(?:>)([^<]+)',sometext) \r\nfor matches in pattern:\r\n   print(matches[0],matches[1].strip(),sep=',')", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/409", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/409/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/409/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/409/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/409", "id": 400254386, "node_id": "MDU6SXNzdWU0MDAyNTQzODY=", "number": 409, "title": "Link to NEWS.rst in README file should be absolute", "user": {"login": "kdebowski", "id": 2165223, "node_id": "MDQ6VXNlcjIxNjUyMjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2165223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdebowski", "html_url": "https://github.com/kdebowski", "followers_url": "https://api.github.com/users/kdebowski/followers", "following_url": "https://api.github.com/users/kdebowski/following{/other_user}", "gists_url": "https://api.github.com/users/kdebowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdebowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdebowski/subscriptions", "organizations_url": "https://api.github.com/users/kdebowski/orgs", "repos_url": "https://api.github.com/users/kdebowski/repos", "events_url": "https://api.github.com/users/kdebowski/events{/privacy}", "received_events_url": "https://api.github.com/users/kdebowski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-01-17T12:26:51Z", "updated_at": "2019-07-16T12:44:03Z", "closed_at": "2019-07-16T12:44:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Link to NEWS.rst file in README.rst section is provided as relative - which of course behaves correctly on github page, but not on [PyPI](https://pypi.org/project/pyflakes/) website.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/407", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/407/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/407/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/407/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/407", "id": 396767507, "node_id": "MDU6SXNzdWUzOTY3Njc1MDc=", "number": 407, "title": "pyflakes Does not play well with Mypy type annotations", "user": {"login": "vasanthaganeshk", "id": 9608995, "node_id": "MDQ6VXNlcjk2MDg5OTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9608995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vasanthaganeshk", "html_url": "https://github.com/vasanthaganeshk", "followers_url": "https://api.github.com/users/vasanthaganeshk/followers", "following_url": "https://api.github.com/users/vasanthaganeshk/following{/other_user}", "gists_url": "https://api.github.com/users/vasanthaganeshk/gists{/gist_id}", "starred_url": "https://api.github.com/users/vasanthaganeshk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vasanthaganeshk/subscriptions", "organizations_url": "https://api.github.com/users/vasanthaganeshk/orgs", "repos_url": "https://api.github.com/users/vasanthaganeshk/repos", "events_url": "https://api.github.com/users/vasanthaganeshk/events{/privacy}", "received_events_url": "https://api.github.com/users/vasanthaganeshk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-08T06:28:51Z", "updated_at": "2019-01-10T14:08:28Z", "closed_at": "2019-01-08T14:37:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using pyflakes `2.0.0` with flake8.\r\n\r\n**Example code for false positive error:**\r\n\r\n```\r\nfrom typing import List\r\na = foo(\r\n      a=123, b=234\r\n    ) # List[SomeObject]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/404", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/404/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/404/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/404/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/404", "id": 395191834, "node_id": "MDU6SXNzdWUzOTUxOTE4MzQ=", "number": 404, "title": "Warn about `return` inside `finally`", "user": {"login": "joaoe", "id": 461983, "node_id": "MDQ6VXNlcjQ2MTk4Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/461983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joaoe", "html_url": "https://github.com/joaoe", "followers_url": "https://api.github.com/users/joaoe/followers", "following_url": "https://api.github.com/users/joaoe/following{/other_user}", "gists_url": "https://api.github.com/users/joaoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/joaoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joaoe/subscriptions", "organizations_url": "https://api.github.com/users/joaoe/orgs", "repos_url": "https://api.github.com/users/joaoe/repos", "events_url": "https://api.github.com/users/joaoe/events{/privacy}", "received_events_url": "https://api.github.com/users/joaoe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-01-02T09:38:11Z", "updated_at": "2019-12-31T13:27:53Z", "closed_at": "2019-12-31T13:27:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\r\n\r\nThere is a feature in many programming languages (e.g. Java and python) in which a `return` from a `finally` block will silence the exception. It is a dangerous feature of the languages as errors can easily be suppressed unknowingly, e.g.\r\n```\r\ndef task(data):\r\n  try:\r\n    complex_task(data)\r\n  finally:\r\n    if not data:\r\n      return # in case of an exception, it is dropped\r\n    logger.info(\"Blah...\")\r\n    another_complex_task(data)\r\n    cleanup(data)\r\n```\r\nSilencing of exception should always be done explicitly with a proper `except ExceptionType` block with a `pass` or `return`. If you want to break from the `finally` block then you can refactor the code not to use a `return`.\r\n\r\nHence, I suggest this shall be flagged as a warning\r\n```\r\ndef anything():\r\n  raise ValueError()\r\n\r\ndef main():\r\n  try:\r\n    anything()\r\n  finally:\r\n    return\r\n\r\nmain()\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/403", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/403/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/403/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/403/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/403", "id": 395185397, "node_id": "MDU6SXNzdWUzOTUxODUzOTc=", "number": 403, "title": "Flag `return` inside generator function", "user": {"login": "joaoe", "id": 461983, "node_id": "MDQ6VXNlcjQ2MTk4Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/461983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joaoe", "html_url": "https://github.com/joaoe", "followers_url": "https://api.github.com/users/joaoe/followers", "following_url": "https://api.github.com/users/joaoe/following{/other_user}", "gists_url": "https://api.github.com/users/joaoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/joaoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joaoe/subscriptions", "organizations_url": "https://api.github.com/users/joaoe/orgs", "repos_url": "https://api.github.com/users/joaoe/repos", "events_url": "https://api.github.com/users/joaoe/events{/privacy}", "received_events_url": "https://api.github.com/users/joaoe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-01-02T09:11:06Z", "updated_at": "2019-03-04T18:38:39Z", "closed_at": "2019-03-04T18:38:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "It has happened often with me, having some big function (more than a couple screens length) that I change from a standard `return` logic to yielding a generator; or editing some generator function and putting a `return value` by accident, instead of `yield value`.\r\n\r\nPython allows `return value` inside generator functions, which is equivalent to `raise StopIteration(value)`. However, I regard this an obscure feature of the language because `StopIteration` is not an error we should be catching but instead is transparently handled during for-loops. Hence, that `value` is never read.\r\n\r\nSo, in my opinion, a `return value` error in a generator is most likely a programming error which can be quite tricky to find unless you aim for 100% test coverage, to catch that pesky if-return check that handles some uncommon error.\r\n\r\nI suggest that the following code is flagged as a warning:\r\n```\r\nanything = None # any value, really\r\n\r\ndef gen_function1():\r\n  yield 42\r\n  return anything\r\n\r\ndef gen_function2(weird_error):\r\n  if weird_error:\r\n    return anything\r\n  yield 42\r\n```\r\nwhile the following is still allowed\r\n```\r\ndef gen_function1():\r\n  yield 42\r\n  return\r\n\r\ndef gen_function2(weird_error):\r\n  if weird_error:\r\n    return\r\n  yield 42\r\n```\r\n\r\nFor the sake of backwards compatibility, and because I expect some people might disagree or have legitimate uses for `return value` inside the generator, this warning should be disableable, given there is no alternative way to do `raise StopIterator(value)` as the latter will trigger a `RuntimeError`.\r\n\r\nDiscuss :)\r\n\r\nPS: I found this https://github.com/PyCQA/pyflakes/issues/166 so this is about enabling the warning always.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/402", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/402/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/402/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/402/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/402", "id": 395119997, "node_id": "MDU6SXNzdWUzOTUxMTk5OTc=", "number": 402, "title": "TestAsync tests things that are not async, split up the test case", "user": {"login": "asottile", "id": 1810591, "node_id": "MDQ6VXNlcjE4MTA1OTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1810591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asottile", "html_url": "https://github.com/asottile", "followers_url": "https://api.github.com/users/asottile/followers", "following_url": "https://api.github.com/users/asottile/following{/other_user}", "gists_url": "https://api.github.com/users/asottile/gists{/gist_id}", "starred_url": "https://api.github.com/users/asottile/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asottile/subscriptions", "organizations_url": "https://api.github.com/users/asottile/orgs", "repos_url": "https://api.github.com/users/asottile/repos", "events_url": "https://api.github.com/users/asottile/events{/privacy}", "received_events_url": "https://api.github.com/users/asottile/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-01-01T23:18:16Z", "updated_at": "2019-01-05T20:43:36Z", "closed_at": "2019-01-05T20:43:36Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "followup from https://github.com/PyCQA/pyflakes/pull/400#discussion_r244647478", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/401", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/401/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/401/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/401/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/401", "id": 395110035, "node_id": "MDU6SXNzdWUzOTUxMTAwMzU=", "number": 401, "title": "crash: AttributeError: 'Module' object has no attribute 'parent'", "user": {"login": "joernheissler", "id": 865592, "node_id": "MDQ6VXNlcjg2NTU5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/865592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joernheissler", "html_url": "https://github.com/joernheissler", "followers_url": "https://api.github.com/users/joernheissler/followers", "following_url": "https://api.github.com/users/joernheissler/following{/other_user}", "gists_url": "https://api.github.com/users/joernheissler/gists{/gist_id}", "starred_url": "https://api.github.com/users/joernheissler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joernheissler/subscriptions", "organizations_url": "https://api.github.com/users/joernheissler/orgs", "repos_url": "https://api.github.com/users/joernheissler/repos", "events_url": "https://api.github.com/users/joernheissler/events{/privacy}", "received_events_url": "https://api.github.com/users/joernheissler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-01-01T20:31:28Z", "updated_at": "2019-01-17T19:38:16Z", "closed_at": "2019-01-17T19:38:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "9dd73ec54411a563410872b47e76f0f89f34ecfe seems to introduce a bug that causes pyflakes to crash on this code:\r\n\r\n```python3\r\nclass foo:\r\n    pass\r\n\r\n\r\nasync def func(foo: foo):\r\n    pass\r\n```\r\n\r\n**backtrace:**\r\n```\r\n$ venv/bin/pyflakes foo.py                  \r\nTraceback (most recent call last):\r\n  File \"venv/bin/pyflakes\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"venv/lib/python3.7/site-packages/pyflakes/api.py\", line 207, in main\r\n    warnings = checkRecursive(args, reporter)\r\n  File \"venv/lib/python3.7/site-packages/pyflakes/api.py\", line 156, in checkRecursive\r\n    warnings += checkPath(sourcePath, reporter)\r\n  File \"venv/lib/python3.7/site-packages/pyflakes/api.py\", line 99, in checkPath\r\n    return check(codestr, filename, reporter)\r\n  File \"venv/lib/python3.7/site-packages/pyflakes/api.py\", line 74, in check\r\n    w = checker.Checker(tree, filename)\r\n  File \"venv/lib/python3.7/site-packages/pyflakes/checker.py\", line 579, in __init__\r\n    self.runDeferred(self._deferredFunctions)\r\n  File \"venv/lib/python3.7/site-packages/pyflakes/checker.py\", line 616, in runDeferred\r\n    handler()\r\n  File \"venv/lib/python3.7/site-packages/pyflakes/checker.py\", line 1354, in runFunction \r\n    self.handleChildren(node, omit='decorator_list')\r\n  File \"venv/lib/python3.7/site-packages/pyflakes/checker.py\", line 957, in handleChildren\r\n    self.handleNode(node, tree)\r\n  File \"venv/lib/python3.7/site-packages/pyflakes/checker.py\", line 1004, in handleNode\r\n    handler(node)\r\n  File \"venv/lib/python3.7/site-packages/pyflakes/checker.py\", line 1379, in ARGUMENTS\r\n    self.handleChildren(node, omit=('defaults', 'kw_defaults'))\r\n  File \"venv/lib/python3.7/site-packages/pyflakes/checker.py\", line 957, in handleChildren\r\n    self.handleNode(node, tree)\r\n  File \"venv/lib/python3.7/site-packages/pyflakes/checker.py\", line 1004, in handleNode\r\n    handler(node)\r\n  File \"venv/lib/python3.7/site-packages/pyflakes/checker.py\", line 1388, in ARG\r\n    self.addBinding(node, Argument(node.arg, self.getScopeNode(node)))\r\n  File \"venv/lib/python3.7/site-packages/pyflakes/checker.py\", line 784, in addBinding\r\n    parent_stmt = self.getParent(value.source)\r\n  File \"venv/lib/python3.7/site-packages/pyflakes/checker.py\", line 722, in getParent\r\n    node = node.parent\r\nAttributeError: 'Module' object has no attribute 'parent'\r\n```\r\n\r\n**version:**\r\n\r\n  * debian/unstable\r\n  * python3.7 (from debian)\r\n  * pyflakes 066ba4a93c1077f9154d6ff3806fe1e3a66843a1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/395", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/395/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/395/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/395/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/395", "id": 394779910, "node_id": "MDU6SXNzdWUzOTQ3Nzk5MTA=", "number": 395, "title": "undefined name '__annotations__' when use __annotations__ in module level", "user": {"login": "Hanaasagi", "id": 9482395, "node_id": "MDQ6VXNlcjk0ODIzOTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/9482395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hanaasagi", "html_url": "https://github.com/Hanaasagi", "followers_url": "https://api.github.com/users/Hanaasagi/followers", "following_url": "https://api.github.com/users/Hanaasagi/following{/other_user}", "gists_url": "https://api.github.com/users/Hanaasagi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hanaasagi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hanaasagi/subscriptions", "organizations_url": "https://api.github.com/users/Hanaasagi/orgs", "repos_url": "https://api.github.com/users/Hanaasagi/repos", "events_url": "https://api.github.com/users/Hanaasagi/events{/privacy}", "received_events_url": "https://api.github.com/users/Hanaasagi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-29T09:41:19Z", "updated_at": "2019-01-01T13:10:34Z", "closed_at": "2019-01-01T13:10:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Environment:\r\n- Python==3.7.1\r\n- pyflakes==2.0.0\r\n\r\nWhen using pyflake to check following code:\r\n\r\n```Python3\r\n# t.py\r\na: int = 2\r\nprint(__annotations__)\r\n```\r\n\r\nIt will reported that\r\n\r\n```\r\nt.py:3: undefined name '__annotations__'\r\n```\r\nAbout `__annotations__`, please see [PEP 526 -- Syntax for Variable Annotations](https://www.python.org/dev/peps/pep-0526/)\r\n> In addition, at the module or class level, if the item being annotated is a simple name, then it and the annotation will be stored in the `__annotations__` attribute of that module or class (mangled if private) as an ordered mapping from names to evaluated annotations. \r\n\r\nAnd `__annotations__` is not a [`builtin_vars`](https://github.com/PyCQA/pyflakes/blob/master/pyflakes/checker.py#L21), so it will not found.\r\n\r\nI think this attribute should be added in [`_MAGIC_GLOBALS = ['__file__', '__builtins__', 'WindowsError']`](https://github.com/PyCQA/pyflakes/blob/master/pyflakes/checker.py#L488)\r\n\r\nIf you accept this solution, I will pull request to fix it :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/393", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/393/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/393/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/393/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/393", "id": 384035392, "node_id": "MDU6SXNzdWUzODQwMzUzOTI=", "number": 393, "title": "Ignore variables starting with underscore `_`", "user": {"login": "NickeZ", "id": 492753, "node_id": "MDQ6VXNlcjQ5Mjc1Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/492753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NickeZ", "html_url": "https://github.com/NickeZ", "followers_url": "https://api.github.com/users/NickeZ/followers", "following_url": "https://api.github.com/users/NickeZ/following{/other_user}", "gists_url": "https://api.github.com/users/NickeZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/NickeZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NickeZ/subscriptions", "organizations_url": "https://api.github.com/users/NickeZ/orgs", "repos_url": "https://api.github.com/users/NickeZ/repos", "events_url": "https://api.github.com/users/NickeZ/events{/privacy}", "received_events_url": "https://api.github.com/users/NickeZ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-11-25T00:41:31Z", "updated_at": "2018-11-27T17:53:20Z", "closed_at": "2018-11-25T14:02:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Many tools ignore unused variables starting with underscore. Typically you use this convention as a sort of \"documentation\" like so:\r\n\r\n```\r\nexcept ValueError as _err:\r\n```\r\n\r\nor\r\n```\r\n_head, tail = my_str.split(' ', 1)\r\n```\r\n\r\nIs this something you would consider implementing?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/386", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/386/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/386/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/386/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/386", "id": 377165986, "node_id": "MDU6SXNzdWUzNzcxNjU5ODY=", "number": 386, "title": "Tests fail because imp module is deprecated", "user": {"login": "dotlambda", "id": 6806011, "node_id": "MDQ6VXNlcjY4MDYwMTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/6806011?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotlambda", "html_url": "https://github.com/dotlambda", "followers_url": "https://api.github.com/users/dotlambda/followers", "following_url": "https://api.github.com/users/dotlambda/following{/other_user}", "gists_url": "https://api.github.com/users/dotlambda/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotlambda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotlambda/subscriptions", "organizations_url": "https://api.github.com/users/dotlambda/orgs", "repos_url": "https://api.github.com/users/dotlambda/repos", "events_url": "https://api.github.com/users/dotlambda/events{/privacy}", "received_events_url": "https://api.github.com/users/dotlambda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-04T15:54:20Z", "updated_at": "2019-01-03T21:32:00Z", "closed_at": "2019-01-03T21:32:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "When running the testsuite, I have 5 tests that fail because of `DeprecationWarning: the imp module is deprecated in favour of importlib`:\r\n```\r\n======================================================================\r\nFAIL: test_errors_io (pyflakes.test.test_api.IntegrationTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/build/pyflakes-2.0.0/pyflakes/test/test_api.py\", line 735, in test_errors_io\r\n    self.assertEqual(d, ('', error_msg, 1))\r\nAssertionError: Tuples differ: ('', \"/nix/store/b888dk7a2fbs1br06h996wyifbsir[297 chars]\", 1) != ('', '/build/tmp2oujp6ie/temp: No such file or directory\\n', 1)\r\n\r\nFirst differing element 1:\r\n\"/nix/store/b888dk7a2fbs1br06h996wyifbsir[293 chars]ry\\n\"\r\n'/build/tmp2oujp6ie/temp: No such file or directory\\n'\r\n\r\n- ('',\r\n-  '/nix/store/b888dk7a2fbs1br06h996wyifbsirbxj-python3.7-setuptools-40.5.0/lib/python3.7/site-packages/site.py:26: '\r\n-  'DeprecationWarning: the imp module is deprecated in favour of importlib; see '\r\n-  \"the module's documentation for alternative uses\\n\"\r\n-  '  import imp  # Avoid import loop in Python 3\\n'\r\n-  '/build/tmp2oujp6ie/temp: No such file or directory\\n',\r\n+ ('', '/build/tmp2oujp6ie/temp: No such file or directory\\n', 1)\r\n? ++++                                                        +++\r\n\r\n-  1)\r\n\r\n======================================================================\r\nFAIL: test_errors_syntax (pyflakes.test.test_api.IntegrationTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/build/pyflakes-2.0.0/pyflakes/test/test_api.py\", line 749, in test_errors_syntax\r\n    self.assertEqual(d, ('', error_msg, True))\r\nAssertionError: Tuples differ: ('', \"/nix/store/b888dk7a2fbs1br06h996wyifbsir[307 chars]\", 1) != ('', '/build/tmph9rduv46/temp:1:7: invalid syn[25 chars]True)\r\n\r\nFirst differing element 1:\r\n\"/nix/store/b888dk7a2fbs1br06h996wyifbsir[303 chars] ^\\n\"\r\n'/build/tmph9rduv46/temp:1:7: invalid syn[18 chars] ^\\n'\r\n\r\n- ('',\r\n-  '/nix/store/b888dk7a2fbs1br06h996wyifbsirbxj-python3.7-setuptools-40.5.0/lib/python3.7/site-packages/site.py:26: '\r\n-  'DeprecationWarning: the imp module is deprecated in favour of importlib; see '\r\n-  \"the module's documentation for alternative uses\\n\"\r\n-  '  import imp  # Avoid import loop in Python 3\\n'\r\n-  '/build/tmph9rduv46/temp:1:7: invalid syntax\\n'\r\n+ ('', '/build/tmph9rduv46/temp:1:7: invalid syntax\\nimport\\n      ^\\n', True)\r\n? ++++                                               +++++++++++++++++ +++++++\r\n\r\n-  'import\\n'\r\n-  '      ^\\n',\r\n-  1)\r\n\r\n======================================================================\r\nFAIL: test_fileWithFlakes (pyflakes.test.test_api.IntegrationTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/build/pyflakes-2.0.0/pyflakes/test/test_api.py\", line 724, in test_fileWithFlakes\r\n    self.assertEqual(d, (\"%s%s\" % (expected, os.linesep), '', 1))\r\nAssertionError: Tuples differ: (\"/bu[56 chars]\\n\", \"/nix/store/b888dk7a2fbs1br06h996wyifbsir[245 chars]\", 1) != (\"/bu[56 chars]\\n\", '', 1)\r\n\r\nFirst differing element 1:\r\n\"/nix/store/b888dk7a2fbs1br06h996wyifbsir[241 chars] 3\\n\"\r\n''\r\n\r\n- (\"/build/tmpmzpqas06/temp:1: 'contraband' imported but unused\\n\",\r\n+ (\"/build/tmpmzpqas06/temp:1: 'contraband' imported but unused\\n\", '', 1)\r\n?                                                                  +++++++\r\n\r\n-  '/nix/store/b888dk7a2fbs1br06h996wyifbsirbxj-python3.7-setuptools-40.5.0/lib/python3.7/site-packages/site.py:26: '\r\n-  'DeprecationWarning: the imp module is deprecated in favour of importlib; see '\r\n-  \"the module's documentation for alternative uses\\n\"\r\n-  '  import imp  # Avoid import loop in Python 3\\n',\r\n-  1)\r\n\r\n======================================================================\r\nFAIL: test_goodFile (pyflakes.test.test_api.IntegrationTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/build/pyflakes-2.0.0/pyflakes/test/test_api.py\", line 712, in test_goodFile\r\n    self.assertEqual(d, ('', '', 0))\r\nAssertionError: Tuples differ: ('', \"/nix/store/b888dk7a2fbs1br06h996wyifbsir[245 chars]\", 0) != ('', '', 0)\r\n\r\nFirst differing element 1:\r\n\"/nix/store/b888dk7a2fbs1br06h996wyifbsir[241 chars] 3\\n\"\r\n''\r\n\r\n+ ('', '', 0)\r\n- ('',\r\n-  '/nix/store/b888dk7a2fbs1br06h996wyifbsirbxj-python3.7-setuptools-40.5.0/lib/python3.7/site-packages/site.py:26: '\r\n-  'DeprecationWarning: the imp module is deprecated in favour of importlib; see '\r\n-  \"the module's documentation for alternative uses\\n\"\r\n-  '  import imp  # Avoid import loop in Python 3\\n',\r\n-  0)\r\n\r\n======================================================================\r\nFAIL: test_readFromStdin (pyflakes.test.test_api.IntegrationTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/build/pyflakes-2.0.0/pyflakes/test/test_api.py\", line 757, in test_readFromStdin\r\n    self.assertEqual(d, (\"%s%s\" % (expected, os.linesep), '', 1))\r\nAssertionError: Tuples differ: (\"<st[40 chars]\\n\", \"/nix/store/b888dk7a2fbs1br06h996wyifbsir[245 chars]\", 1) != (\"<st[40 chars]\\n\", '', 1)\r\n\r\nFirst differing element 1:\r\n\"/nix/store/b888dk7a2fbs1br06h996wyifbsir[241 chars] 3\\n\"\r\n''\r\n\r\n- (\"<stdin>:1: 'contraband' imported but unused\\n\",\r\n+ (\"<stdin>:1: 'contraband' imported but unused\\n\", '', 1)\r\n?                                                  +++++++\r\n\r\n-  '/nix/store/b888dk7a2fbs1br06h996wyifbsirbxj-python3.7-setuptools-40.5.0/lib/python3.7/site-packages/site.py:26: '\r\n-  'DeprecationWarning: the imp module is deprecated in favour of importlib; see '\r\n-  \"the module's documentation for alternative uses\\n\"\r\n-  '  import imp  # Avoid import loop in Python 3\\n',\r\n-  1)\r\n\r\n----------------------------------------------------------------------\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/377", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/377/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/377/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/377/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/377", "id": 374739197, "node_id": "MDU6SXNzdWUzNzQ3MzkxOTc=", "number": 377, "title": "Error code", "user": {"login": "jaipradeesh", "id": 4883668, "node_id": "MDQ6VXNlcjQ4ODM2Njg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4883668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaipradeesh", "html_url": "https://github.com/jaipradeesh", "followers_url": "https://api.github.com/users/jaipradeesh/followers", "following_url": "https://api.github.com/users/jaipradeesh/following{/other_user}", "gists_url": "https://api.github.com/users/jaipradeesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaipradeesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaipradeesh/subscriptions", "organizations_url": "https://api.github.com/users/jaipradeesh/orgs", "repos_url": "https://api.github.com/users/jaipradeesh/repos", "events_url": "https://api.github.com/users/jaipradeesh/events{/privacy}", "received_events_url": "https://api.github.com/users/jaipradeesh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-28T10:32:17Z", "updated_at": "2018-10-29T12:55:48Z", "closed_at": "2018-10-29T12:55:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to log an error code?\r\n\r\nInstead of - `./__init__.py:3: 'from .core import *' used; unable to detect undefined names`\r\nlog something like - `./__init__.py:3: E400 'from .core import *' used; unable to detect undefined names`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/376", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/376/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/376/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/376/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/376", "id": 374552933, "node_id": "MDU6SXNzdWUzNzQ1NTI5MzM=", "number": 376, "title": "Spurious F841 in exception even when referenced by locals()", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-26T21:25:52Z", "updated_at": "2018-11-05T21:37:37Z", "closed_at": "2018-11-05T21:37:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I recently upgraded to flake8 3.6 and pyflakes 2.0.0, and now I'm getting failures in code where `locals()` contains the only reference to a variable in the namespace.\r\n\r\n```\r\ndraft $ cat > f841fail.py\r\ntry:\r\n    raise ValueError()\r\nexcept Exception as e:\r\n    print(locals())\r\ndraft $ python f841fail.py\r\n{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader object at 0x10138c710>, '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' (built-in)>, '__file__': 'f841fail.py', '__cached__': None, 'e': ValueError()}\r\ndraft $ flake8 --version\r\n3.6.0 (mccabe: 0.6.1, pycodestyle: 2.4.0, pyflakes: 2.0.0) CPython 3.7.1 on Darwin\r\ndraft $ flake8 f841fail.py\r\nf841fail.py:3:1: F841 local variable 'e' is assigned to but never used\r\ndraft $ pip install -U pyflakes\r\nRequirement already up-to-date: pyflakes in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (2.0.0)\r\n```\r\n\r\nIn other blocks, the use of `locals()` prevents F841 from being triggered. It should in exception blocks too.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/375", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/375/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/375/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/375/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/375", "id": 373879833, "node_id": "MDU6SXNzdWUzNzM4Nzk4MzM=", "number": 375, "title": "[2.0.0] Issues with Python >=3.6 f-strings?", "user": {"login": "hartwork", "id": 1577132, "node_id": "MDQ6VXNlcjE1NzcxMzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1577132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hartwork", "html_url": "https://github.com/hartwork", "followers_url": "https://api.github.com/users/hartwork/followers", "following_url": "https://api.github.com/users/hartwork/following{/other_user}", "gists_url": "https://api.github.com/users/hartwork/gists{/gist_id}", "starred_url": "https://api.github.com/users/hartwork/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hartwork/subscriptions", "organizations_url": "https://api.github.com/users/hartwork/orgs", "repos_url": "https://api.github.com/users/hartwork/repos", "events_url": "https://api.github.com/users/hartwork/events{/privacy}", "received_events_url": "https://api.github.com/users/hartwork/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-25T10:30:32Z", "updated_at": "2018-10-25T10:37:26Z", "closed_at": "2018-10-25T10:37:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nJudging from #349 I expected pyflakes 2.0.0 to support f-strings but it doesn't seem to like mine.\r\n\r\nFor a minimal example:\r\n```\r\n# python3.6 <<<\"f'foo'\"\r\n\r\n# pyflakes <<<\"f'foo'\"\r\n<stdin>:1:6: invalid syntax\r\nf'foo'\r\n     ^\r\n\r\n# pyflakes --version\r\n2.0.0\r\n```\r\n\r\nAm I missing something? Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/373", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/373/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/373/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/373/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/373", "id": 373383476, "node_id": "MDU6SXNzdWUzNzMzODM0NzY=", "number": 373, "title": "pyflakes >2.0.0 throws `undefined name error` for annotated variables in functions", "user": {"login": "jensgustafsson", "id": 5849797, "node_id": "MDQ6VXNlcjU4NDk3OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/5849797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jensgustafsson", "html_url": "https://github.com/jensgustafsson", "followers_url": "https://api.github.com/users/jensgustafsson/followers", "following_url": "https://api.github.com/users/jensgustafsson/following{/other_user}", "gists_url": "https://api.github.com/users/jensgustafsson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jensgustafsson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jensgustafsson/subscriptions", "organizations_url": "https://api.github.com/users/jensgustafsson/orgs", "repos_url": "https://api.github.com/users/jensgustafsson/repos", "events_url": "https://api.github.com/users/jensgustafsson/events{/privacy}", "received_events_url": "https://api.github.com/users/jensgustafsson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2018-10-24T09:16:34Z", "updated_at": "2019-11-04T11:50:41Z", "closed_at": "2019-09-30T21:57:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a Python code base that is built with Python3.4 (which doesn't have type annotations) but it has annotations. In prior versions of pyflakes 2.0.0 the example file below was \"considered ok\" by `pyflakes`.\r\n\r\n*Example file:* `test.py`:\r\n```\r\ndef annotated_f(a: 'annotated'):\r\n    print(a)\r\n```\r\n\r\nWhen I run `pyflakes test.py` I get `test.py:4: undefined name 'annotated'`. Should it not be possible to use `annotations` together with pyflakes anymore?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/367", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/367/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/367/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/367/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/367", "id": 365353316, "node_id": "MDU6SXNzdWUzNjUzNTMzMTY=", "number": 367, "title": "Python 3.8: AttributeError: 'Checker' object has no attribute 'CONSTANT'", "user": {"login": "jwilk", "id": 141546, "node_id": "MDQ6VXNlcjE0MTU0Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/141546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwilk", "html_url": "https://github.com/jwilk", "followers_url": "https://api.github.com/users/jwilk/followers", "following_url": "https://api.github.com/users/jwilk/following{/other_user}", "gists_url": "https://api.github.com/users/jwilk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwilk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwilk/subscriptions", "organizations_url": "https://api.github.com/users/jwilk/orgs", "repos_url": "https://api.github.com/users/jwilk/repos", "events_url": "https://api.github.com/users/jwilk/events{/privacy}", "received_events_url": "https://api.github.com/users/jwilk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 614823459, "node_id": "MDU6TGFiZWw2MTQ4MjM0NTk=", "url": "https://api.github.com/repos/PyCQA/pyflakes/labels/help%20wanted", "name": "help wanted", "color": "128A0C", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-01T08:18:24Z", "updated_at": "2018-12-20T23:23:04Z", "closed_at": "2018-12-20T23:23:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "pyflakes is completely broken when run against Python 3.8 (not released yet, built from git master):\n\n```console\n$ echo 24 | python3.8 -m pyflakes\nTraceback (most recent call last):\n  File \".../lib/python3.8/runpy.py\", line 192, in _run_module_as_main\n    return _run_code(code, main_globals, None,\n  File \".../lib/python3.8/runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \".../lib/python3.8/site-packages/pyflakes/__main__.py\", line 5, in <module>\n    main(prog='pyflakes')\n  File \".../lib/python3.8/site-packages/pyflakes/api.py\", line 203, in main\n    warnings = check(sys.stdin.read(), '<stdin>', reporter)\n  File \".../lib/python3.8/site-packages/pyflakes/api.py\", line 73, in check\n    w = checker.Checker(tree, filename)\n  File \".../lib/python3.8/site-packages/pyflakes/checker.py\", line 533, in __init__\n    self.handleChildren(tree)\n  File \".../lib/python3.8/site-packages/pyflakes/checker.py\", line 881, in handleChildren\n    self.handleNode(node, tree)\n  File \".../lib/python3.8/site-packages/pyflakes/checker.py\", line 928, in handleNode\n    handler(node)\n  File \".../lib/python3.8/site-packages/pyflakes/checker.py\", line 881, in handleChildren\n    self.handleNode(node, tree)\n  File \".../lib/python3.8/site-packages/pyflakes/checker.py\", line 927, in handleNode\n    handler = self.getNodeHandler(node.__class__)\n  File \".../lib/python3.8/site-packages/pyflakes/checker.py\", line 749, in getNodeHandler\n    self._nodeHandlers[node_class] = handler = getattr(self, nodeType)\nAttributeError: 'Checker' object has no attribute 'CONSTANT'\n```\n\nRelevant Python bug: https://bugs.python.org/issue32892", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/365", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/365/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/365/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/365/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/365", "id": 360406633, "node_id": "MDU6SXNzdWUzNjA0MDY2MzM=", "number": 365, "title": "Consistency in declaring unused variables", "user": {"login": "AbdealiJK", "id": 2200743, "node_id": "MDQ6VXNlcjIyMDA3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/2200743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AbdealiJK", "html_url": "https://github.com/AbdealiJK", "followers_url": "https://api.github.com/users/AbdealiJK/followers", "following_url": "https://api.github.com/users/AbdealiJK/following{/other_user}", "gists_url": "https://api.github.com/users/AbdealiJK/gists{/gist_id}", "starred_url": "https://api.github.com/users/AbdealiJK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AbdealiJK/subscriptions", "organizations_url": "https://api.github.com/users/AbdealiJK/orgs", "repos_url": "https://api.github.com/users/AbdealiJK/repos", "events_url": "https://api.github.com/users/AbdealiJK/events{/privacy}", "received_events_url": "https://api.github.com/users/AbdealiJK/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-14T18:21:35Z", "updated_at": "2018-09-14T20:06:01Z", "closed_at": "2018-09-14T20:06:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nIn [56]: pyflakes.api.check(\"a = 1\\nb = 2\", 'test.py')\r\nOut[56]: 0\r\n\r\nIn [57]: pyflakes.api.check(\"def abc():\\n    a = 1\\n    b = 2\", 'test.py')\r\n    ...:\r\ntest.py:2: local variable 'a' is assigned to but never used\r\ntest.py:3: local variable 'b' is assigned to but never used\r\nOut[57]: 2\r\n\r\nIn [58]: pyflakes.api.check(\"def abc(a, b):\\n    pass\", 'test.py')\r\nOut[58]: 0\r\n\r\nIn [59]: pyflakes.api.check(\"def abc(a=1, b=2):\\n    pass\", 'test.py')\r\nOut[59]: 0\r\n```\r\n\r\nThis is confusing for me, because:\r\nIf I declare a variable globally it seems like that is not an issue.\r\nDeclaring it locally is an issue.\r\nif I pass an unused function argument it is not an issue.\r\nif I pass an unused function keyword arguments with a default value it is not an issue.\r\n\r\nIs this expected behaviour ? \r\nAll cases are declaring unused variables. 2,3,4, are doing local unused variables.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pyflakes/issues/364", "repository_url": "https://api.github.com/repos/PyCQA/pyflakes", "labels_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/364/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/364/comments", "events_url": "https://api.github.com/repos/PyCQA/pyflakes/issues/364/events", "html_url": "https://github.com/PyCQA/pyflakes/issues/364", "id": 358856125, "node_id": "MDU6SXNzdWUzNTg4NTYxMjU=", "number": 364, "title": "red highlighting difficult for some color schemes", "user": {"login": "raphaelcervantes", "id": 18469999, "node_id": "MDQ6VXNlcjE4NDY5OTk5", "avatar_url": "https://avatars3.githubusercontent.com/u/18469999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raphaelcervantes", "html_url": "https://github.com/raphaelcervantes", "followers_url": "https://api.github.com/users/raphaelcervantes/followers", "following_url": "https://api.github.com/users/raphaelcervantes/following{/other_user}", "gists_url": "https://api.github.com/users/raphaelcervantes/gists{/gist_id}", "starred_url": "https://api.github.com/users/raphaelcervantes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raphaelcervantes/subscriptions", "organizations_url": "https://api.github.com/users/raphaelcervantes/orgs", "repos_url": "https://api.github.com/users/raphaelcervantes/repos", "events_url": "https://api.github.com/users/raphaelcervantes/events{/privacy}", "received_events_url": "https://api.github.com/users/raphaelcervantes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-11T01:50:45Z", "updated_at": "2018-09-11T12:14:08Z", "closed_at": "2018-09-11T12:14:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "My color scheme makes variables purple and I have a dark background. This makes it difficult for me to see what I'm typing while pyflake is highlight an entire line in red (see attached picture).  I couldn't figure out how to change the highlighting scheme, such as how to change the highlight to a different color or make it less strong, or how to have it highlight only the beginning of a line, or to only use underlines instead. I just couldn't find any documentation. Can you point me to it?\r\n![highlighting](https://user-images.githubusercontent.com/18469999/45333325-67d3fc80-b52a-11e8-90ae-8ccbc9b8fbab.png)\r\n", "performed_via_github_app": null, "score": 1.0}]}