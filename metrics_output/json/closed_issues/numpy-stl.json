{"total_count": 108, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/138", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/138/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/138/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/138", "id": 651950346, "node_id": "MDU6SXNzdWU2NTE5NTAzNDY=", "number": 138, "title": "Can I convert a point cloud data that is .npy to .stl format?", "user": {"login": "super233", "id": 35358984, "node_id": "MDQ6VXNlcjM1MzU4OTg0", "avatar_url": "https://avatars1.githubusercontent.com/u/35358984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/super233", "html_url": "https://github.com/super233", "followers_url": "https://api.github.com/users/super233/followers", "following_url": "https://api.github.com/users/super233/following{/other_user}", "gists_url": "https://api.github.com/users/super233/gists{/gist_id}", "starred_url": "https://api.github.com/users/super233/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/super233/subscriptions", "organizations_url": "https://api.github.com/users/super233/orgs", "repos_url": "https://api.github.com/users/super233/repos", "events_url": "https://api.github.com/users/super233/events{/privacy}", "received_events_url": "https://api.github.com/users/super233/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-07T02:49:10Z", "updated_at": "2020-08-05T02:11:41Z", "closed_at": "2020-08-05T02:11:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can I convert a point cloud data that is .npy to .stl format?\r\nIf it's ok, then how?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/136", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/136/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/136/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/136", "id": 647091872, "node_id": "MDU6SXNzdWU2NDcwOTE4NzI=", "number": 136, "title": "Scale method?", "user": {"login": "lwanger", "id": 923826, "node_id": "MDQ6VXNlcjkyMzgyNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/923826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lwanger", "html_url": "https://github.com/lwanger", "followers_url": "https://api.github.com/users/lwanger/followers", "following_url": "https://api.github.com/users/lwanger/following{/other_user}", "gists_url": "https://api.github.com/users/lwanger/gists{/gist_id}", "starred_url": "https://api.github.com/users/lwanger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lwanger/subscriptions", "organizations_url": "https://api.github.com/users/lwanger/orgs", "repos_url": "https://api.github.com/users/lwanger/repos", "events_url": "https://api.github.com/users/lwanger/events{/privacy}", "received_events_url": "https://api.github.com/users/lwanger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-29T03:49:49Z", "updated_at": "2020-08-06T12:23:20Z", "closed_at": "2020-08-06T12:23:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is a rotate and a translate method on meshes. Does anyone have either a scale function or a function to transform the mesh by a transformation matrix?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/135", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/135/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/135/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/135/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/135", "id": 646938561, "node_id": "MDU6SXNzdWU2NDY5Mzg1NjE=", "number": 135, "title": "Can't open the new .stl file with the quickstart example", "user": {"login": "Occupied-Observer", "id": 67009183, "node_id": "MDQ6VXNlcjY3MDA5MTgz", "avatar_url": "https://avatars1.githubusercontent.com/u/67009183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Occupied-Observer", "html_url": "https://github.com/Occupied-Observer", "followers_url": "https://api.github.com/users/Occupied-Observer/followers", "following_url": "https://api.github.com/users/Occupied-Observer/following{/other_user}", "gists_url": "https://api.github.com/users/Occupied-Observer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Occupied-Observer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Occupied-Observer/subscriptions", "organizations_url": "https://api.github.com/users/Occupied-Observer/orgs", "repos_url": "https://api.github.com/users/Occupied-Observer/repos", "events_url": "https://api.github.com/users/Occupied-Observer/events{/privacy}", "received_events_url": "https://api.github.com/users/Occupied-Observer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-28T14:50:45Z", "updated_at": "2020-08-06T12:23:31Z", "closed_at": "2020-08-06T12:23:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi thanks for sharing the code and writing the function, I am using the quickstart example to create a new .stl file, I am able to create the new .stl file but cant open the same, maybe it is getting corrupt or so (showing 5KB file). Can someone please help to resolve the same", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/134", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/134/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/134/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/134", "id": 641438676, "node_id": "MDU6SXNzdWU2NDE0Mzg2NzY=", "number": 134, "title": "Creating Mesh objects from a list of vertices and faces fails on float Positions", "user": {"login": "SandUhrGucker", "id": 16520747, "node_id": "MDQ6VXNlcjE2NTIwNzQ3", "avatar_url": "https://avatars2.githubusercontent.com/u/16520747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandUhrGucker", "html_url": "https://github.com/SandUhrGucker", "followers_url": "https://api.github.com/users/SandUhrGucker/followers", "following_url": "https://api.github.com/users/SandUhrGucker/following{/other_user}", "gists_url": "https://api.github.com/users/SandUhrGucker/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandUhrGucker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandUhrGucker/subscriptions", "organizations_url": "https://api.github.com/users/SandUhrGucker/orgs", "repos_url": "https://api.github.com/users/SandUhrGucker/repos", "events_url": "https://api.github.com/users/SandUhrGucker/events{/privacy}", "received_events_url": "https://api.github.com/users/SandUhrGucker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-18T17:47:10Z", "updated_at": "2020-08-06T12:23:50Z", "closed_at": "2020-08-06T12:23:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "You describe on https://pypi.org/project/numpy-stl/ howto \"Creating Mesh objects from a list of vertices and faces\".\r\n\r\nThe folowing error ocurs if using float-coordinates:\r\n\r\n```\r\n    cube.vectors[i][j] = vertices[f[j],:]\r\nIndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices\r\n\r\n```\r\n**Describe the bug**\r\nDoesnt work with floats (Which is motly used in RL I think).\r\n\r\n**Expected behavior**\r\nnormal operation.\r\n\r\n**To Reproduce**\r\nJust modify some Verticses and Faces coordinates to floats.\r\n\r\n**My Platform**\r\nUbuntu 10Buster tested with python 2.7,with\r\nnumpy 1.16.6\r\n\r\nUbuntu 10Buster and  python 3.6, with\r\nnumpy 1.18.5\r\n\r\nWindows 10 python 3.8.3 with\r\nnumpy 1.18.4\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/132", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/132/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/132/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/132", "id": 630022487, "node_id": "MDU6SXNzdWU2MzAwMjI0ODc=", "number": 132, "title": "module 'stl' has no attribute 'BaseStl' issue in importing mesh", "user": {"login": "rahulsawlani22", "id": 41963601, "node_id": "MDQ6VXNlcjQxOTYzNjAx", "avatar_url": "https://avatars2.githubusercontent.com/u/41963601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rahulsawlani22", "html_url": "https://github.com/rahulsawlani22", "followers_url": "https://api.github.com/users/rahulsawlani22/followers", "following_url": "https://api.github.com/users/rahulsawlani22/following{/other_user}", "gists_url": "https://api.github.com/users/rahulsawlani22/gists{/gist_id}", "starred_url": "https://api.github.com/users/rahulsawlani22/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rahulsawlani22/subscriptions", "organizations_url": "https://api.github.com/users/rahulsawlani22/orgs", "repos_url": "https://api.github.com/users/rahulsawlani22/repos", "events_url": "https://api.github.com/users/rahulsawlani22/events{/privacy}", "received_events_url": "https://api.github.com/users/rahulsawlani22/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-03T14:02:08Z", "updated_at": "2020-06-28T23:59:40Z", "closed_at": "2020-06-28T23:59:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/131", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/131/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/131/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/131", "id": 627125909, "node_id": "MDU6SXNzdWU2MjcxMjU5MDk=", "number": 131, "title": "<frozen importlib._bootstrap>:219: FutureWarning:", "user": {"login": "nilswagner", "id": 5382885, "node_id": "MDQ6VXNlcjUzODI4ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/5382885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nilswagner", "html_url": "https://github.com/nilswagner", "followers_url": "https://api.github.com/users/nilswagner/followers", "following_url": "https://api.github.com/users/nilswagner/following{/other_user}", "gists_url": "https://api.github.com/users/nilswagner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nilswagner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nilswagner/subscriptions", "organizations_url": "https://api.github.com/users/nilswagner/orgs", "repos_url": "https://api.github.com/users/nilswagner/repos", "events_url": "https://api.github.com/users/nilswagner/events{/privacy}", "received_events_url": "https://api.github.com/users/nilswagner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 617430855, "node_id": "MDU6TGFiZWw2MTc0MzA4NTU=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/no-activity", "name": "no-activity", "color": "ffffff", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-29T09:18:18Z", "updated_at": "2020-08-08T07:43:45Z", "closed_at": "2020-08-08T07:43:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I import stl in python3.8.2 I get\r\n\r\n```\r\n>>> import stl\r\n<frozen importlib._bootstrap>:219: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\r\n>>> stl.__about__.__version__\r\n'2.11.2'\r\n```\r\n\r\nHow can I resolve the problem?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/129", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/129/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/129/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/129", "id": 617278027, "node_id": "MDU6SXNzdWU2MTcyNzgwMjc=", "number": 129, "title": "Pypi badge shows version of different project", "user": {"login": "lordi", "id": 232086, "node_id": "MDQ6VXNlcjIzMjA4Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/232086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lordi", "html_url": "https://github.com/lordi", "followers_url": "https://api.github.com/users/lordi/followers", "following_url": "https://api.github.com/users/lordi/following{/other_user}", "gists_url": "https://api.github.com/users/lordi/gists{/gist_id}", "starred_url": "https://api.github.com/users/lordi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lordi/subscriptions", "organizations_url": "https://api.github.com/users/lordi/orgs", "repos_url": "https://api.github.com/users/lordi/repos", "events_url": "https://api.github.com/users/lordi/events{/privacy}", "received_events_url": "https://api.github.com/users/lordi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-13T09:06:18Z", "updated_at": "2020-05-13T09:10:33Z", "closed_at": "2020-05-13T09:08:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "The Pypi Badge in the README currently shows version of and links to https://pypi.python.org/pypi/mt-940", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/128", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/128/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/128/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/128", "id": 606353975, "node_id": "MDU6SXNzdWU2MDYzNTM5NzU=", "number": 128, "title": "Homepage example does not work", "user": {"login": "andreasbuhr", "id": 3892222, "node_id": "MDQ6VXNlcjM4OTIyMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/3892222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreasbuhr", "html_url": "https://github.com/andreasbuhr", "followers_url": "https://api.github.com/users/andreasbuhr/followers", "following_url": "https://api.github.com/users/andreasbuhr/following{/other_user}", "gists_url": "https://api.github.com/users/andreasbuhr/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreasbuhr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreasbuhr/subscriptions", "organizations_url": "https://api.github.com/users/andreasbuhr/orgs", "repos_url": "https://api.github.com/users/andreasbuhr/repos", "events_url": "https://api.github.com/users/andreasbuhr/events{/privacy}", "received_events_url": "https://api.github.com/users/andreasbuhr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 617430855, "node_id": "MDU6TGFiZWw2MTc0MzA4NTU=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/no-activity", "name": "no-activity", "color": "ffffff", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-24T14:26:10Z", "updated_at": "2020-07-03T03:48:36Z", "closed_at": "2020-07-03T03:48:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nI just tested the example from your webpage:\r\nhttps://pypi.org/project/numpy-stl/\r\n\r\nI get the error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"meshimport.py\", line 14, in <module>\r\n    scale = your_mesh.points.flatten(-1)\r\nValueError: Non-string object detected for the array ordering. Please pass in 'C', 'F', 'A', or 'K' instead\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/127", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/127/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/127/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/127", "id": 602021180, "node_id": "MDU6SXNzdWU2MDIwMjExODA=", "number": 127, "title": "Rotation", "user": {"login": "omerenen", "id": 60857463, "node_id": "MDQ6VXNlcjYwODU3NDYz", "avatar_url": "https://avatars0.githubusercontent.com/u/60857463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omerenen", "html_url": "https://github.com/omerenen", "followers_url": "https://api.github.com/users/omerenen/followers", "following_url": "https://api.github.com/users/omerenen/following{/other_user}", "gists_url": "https://api.github.com/users/omerenen/gists{/gist_id}", "starred_url": "https://api.github.com/users/omerenen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omerenen/subscriptions", "organizations_url": "https://api.github.com/users/omerenen/orgs", "repos_url": "https://api.github.com/users/omerenen/repos", "events_url": "https://api.github.com/users/omerenen/events{/privacy}", "received_events_url": "https://api.github.com/users/omerenen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-17T14:35:09Z", "updated_at": "2020-04-18T16:17:09Z", "closed_at": "2020-04-18T16:17:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "problem was solved\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/126", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/126/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/126/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/126", "id": 594116368, "node_id": "MDU6SXNzdWU1OTQxMTYzNjg=", "number": 126, "title": "Mesh optimisation when combined", "user": {"login": "Fliens", "id": 35639879, "node_id": "MDQ6VXNlcjM1NjM5ODc5", "avatar_url": "https://avatars1.githubusercontent.com/u/35639879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Fliens", "html_url": "https://github.com/Fliens", "followers_url": "https://api.github.com/users/Fliens/followers", "following_url": "https://api.github.com/users/Fliens/following{/other_user}", "gists_url": "https://api.github.com/users/Fliens/gists{/gist_id}", "starred_url": "https://api.github.com/users/Fliens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Fliens/subscriptions", "organizations_url": "https://api.github.com/users/Fliens/orgs", "repos_url": "https://api.github.com/users/Fliens/repos", "events_url": "https://api.github.com/users/Fliens/events{/privacy}", "received_events_url": "https://api.github.com/users/Fliens/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 617430855, "node_id": "MDU6TGFiZWw2MTc0MzA4NTU=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/no-activity", "name": "no-activity", "color": "ffffff", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-04T21:45:15Z", "updated_at": "2020-07-03T03:48:35Z", "closed_at": "2020-07-03T03:48:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "When combining multiple meshes from stl files there are inner faces remaining.\r\nSo for example when placing 10 stl cupes next to eachother the combined mesh has 10 times the faces the original cube has rather than just the same amount of faces but stretched over an cuboid.\r\nIs there an option to optimise the mesh after combining, so that inner faces get removed?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/124", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/124/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/124/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/124", "id": 590826656, "node_id": "MDU6SXNzdWU1OTA4MjY2NTY=", "number": 124, "title": "failed area calculation due to normals coming back as direction vectors ", "user": {"login": "NicoAraujo80", "id": 29415624, "node_id": "MDQ6VXNlcjI5NDE1NjI0", "avatar_url": "https://avatars2.githubusercontent.com/u/29415624?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NicoAraujo80", "html_url": "https://github.com/NicoAraujo80", "followers_url": "https://api.github.com/users/NicoAraujo80/followers", "following_url": "https://api.github.com/users/NicoAraujo80/following{/other_user}", "gists_url": "https://api.github.com/users/NicoAraujo80/gists{/gist_id}", "starred_url": "https://api.github.com/users/NicoAraujo80/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NicoAraujo80/subscriptions", "organizations_url": "https://api.github.com/users/NicoAraujo80/orgs", "repos_url": "https://api.github.com/users/NicoAraujo80/repos", "events_url": "https://api.github.com/users/NicoAraujo80/events{/privacy}", "received_events_url": "https://api.github.com/users/NicoAraujo80/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-03-31T06:15:14Z", "updated_at": "2020-04-01T03:30:56Z", "closed_at": "2020-03-31T20:41:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "When calculating the area in base.py file\r\n`def update_areas(self): `\r\n`        areas = .5 * numpy.sqrt((self.normals ** 2).sum(axis=1))`\r\n`        self.areas = areas.reshape((areas.size, 1))`\r\nself.normals all have magnitudes of one causing areas to be equal to half the amount of triangles in the stl file\r\n\r\nThe code I used to test this after seeing that a calculation I was making was off  was:\r\n`from stl import mesh`\r\n`stlObject = mesh.Mesh.from_file('40mmcube.stl')`\r\n`stlObject.update_areas()`\r\n`area = stlObject.areas.sum()`\r\n\r\nwith the area coming back as 6. There are 12 normals 4 pointing in the x, y, and z axis all with a magnitude of 1. I'm assuming that for the area to be calculated properly the normals have a magnitude equal to the area of that triangle. Though I was not able to track down where the normals get calculated.  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/123", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/123/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/123/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/123", "id": 589917113, "node_id": "MDU6SXNzdWU1ODk5MTcxMTM=", "number": 123, "title": "'is_closed' giving false positives", "user": {"login": "efahl", "id": 36704995, "node_id": "MDQ6VXNlcjM2NzA0OTk1", "avatar_url": "https://avatars3.githubusercontent.com/u/36704995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/efahl", "html_url": "https://github.com/efahl", "followers_url": "https://api.github.com/users/efahl/followers", "following_url": "https://api.github.com/users/efahl/following{/other_user}", "gists_url": "https://api.github.com/users/efahl/gists{/gist_id}", "starred_url": "https://api.github.com/users/efahl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/efahl/subscriptions", "organizations_url": "https://api.github.com/users/efahl/orgs", "repos_url": "https://api.github.com/users/efahl/repos", "events_url": "https://api.github.com/users/efahl/events{/privacy}", "received_events_url": "https://api.github.com/users/efahl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-30T00:08:16Z", "updated_at": "2020-04-01T09:28:48Z", "closed_at": "2020-04-01T09:16:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "In 2.10.1, reading STL and getting mass properties was silent, suddenly getting the 'Your mesh is not closed' message when reading with 2.11.0.  Looks like it's related to #122 - normalized normals...\r\n\r\nDug into the check, and extracted its logic to see what's going on:\r\n```\r\npartMesh = mesh.Mesh.from_file(shell)\r\nprint(partMesh.normals.sum(axis=0))  # Innards of 'is_closed', base.py line 348\r\n```\r\nIn 2.10.1 this produces\r\n```\r\n[ 0.00108147 -0.00066566  0.00480509]\r\n```\r\nBut in 2.11.0 it gives very large values, triggering the message output and reporting as non-closed.\r\n```\r\n[  82.79478 -115.55531 -491.01715]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/122", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/122/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/122/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/122", "id": 588254000, "node_id": "MDU6SXNzdWU1ODgyNTQwMDA=", "number": 122, "title": "Areas of faces are all equal to 0.5", "user": {"login": "DriesAllaerts", "id": 32362467, "node_id": "MDQ6VXNlcjMyMzYyNDY3", "avatar_url": "https://avatars3.githubusercontent.com/u/32362467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DriesAllaerts", "html_url": "https://github.com/DriesAllaerts", "followers_url": "https://api.github.com/users/DriesAllaerts/followers", "following_url": "https://api.github.com/users/DriesAllaerts/following{/other_user}", "gists_url": "https://api.github.com/users/DriesAllaerts/gists{/gist_id}", "starred_url": "https://api.github.com/users/DriesAllaerts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DriesAllaerts/subscriptions", "organizations_url": "https://api.github.com/users/DriesAllaerts/orgs", "repos_url": "https://api.github.com/users/DriesAllaerts/repos", "events_url": "https://api.github.com/users/DriesAllaerts/events{/privacy}", "received_events_url": "https://api.github.com/users/DriesAllaerts/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-26T08:52:36Z", "updated_at": "2020-03-27T11:20:03Z", "closed_at": "2020-03-27T11:19:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since numpy-stl version 2.11.0, the areas of the faces of an stl mesh object are all equal to 0.5. I believe this is related to the fact that in version 2.11 the normals are normalised to have a magnitude equal to one, but the surface area is calculated based on these normals.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/121", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/121/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/121/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/121", "id": 581859665, "node_id": "MDU6SXNzdWU1ODE4NTk2NjU=", "number": 121, "title": "Name attribute is not preserved when saved.", "user": {"login": "bwoodsend", "id": 30940778, "node_id": "MDQ6VXNlcjMwOTQwNzc4", "avatar_url": "https://avatars1.githubusercontent.com/u/30940778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bwoodsend", "html_url": "https://github.com/bwoodsend", "followers_url": "https://api.github.com/users/bwoodsend/followers", "following_url": "https://api.github.com/users/bwoodsend/following{/other_user}", "gists_url": "https://api.github.com/users/bwoodsend/gists{/gist_id}", "starred_url": "https://api.github.com/users/bwoodsend/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bwoodsend/subscriptions", "organizations_url": "https://api.github.com/users/bwoodsend/orgs", "repos_url": "https://api.github.com/users/bwoodsend/repos", "events_url": "https://api.github.com/users/bwoodsend/events{/privacy}", "received_events_url": "https://api.github.com/users/bwoodsend/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-15T22:56:45Z", "updated_at": "2020-03-26T10:24:15Z", "closed_at": "2020-03-24T23:47:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here's my code.\r\n\r\n```\r\nfrom stl.mesh import Mesh\r\npath = \"my_stl.stl\"\r\n\r\n# Load a mesh\r\nmesh = Mesh.from_file(path)\r\n# Rename it\r\nmesh.name = b\"alternative_name\"\r\n# Save \r\nmesh.save(path)\r\n# then reopen it\r\nprint(Mesh.from_file(path).name)\r\n```\r\nI'd expect to get `b'alternative_name'` but instead I get the just get the numpy-stl header with the beginning of `path` (below).\r\n```\r\nb'numpy-stl (2.10.1) 2020-03-15 22:49:39.548156 e:\\\\uni\\\\comparison of 3d dental mod'\r\n```\r\nLooking at the source code I see that that header appears to be hard coded in `mesh.save()`. Is there a reason you chose to do it that way? Could it change? \r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/120", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/120/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/120/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/120", "id": 559680393, "node_id": "MDU6SXNzdWU1NTk2ODAzOTM=", "number": 120, "title": "Intertia Matrix Issue / get_mass_properties wrong", "user": {"login": "fdi438", "id": 52065945, "node_id": "MDQ6VXNlcjUyMDY1OTQ1", "avatar_url": "https://avatars2.githubusercontent.com/u/52065945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fdi438", "html_url": "https://github.com/fdi438", "followers_url": "https://api.github.com/users/fdi438/followers", "following_url": "https://api.github.com/users/fdi438/following{/other_user}", "gists_url": "https://api.github.com/users/fdi438/gists{/gist_id}", "starred_url": "https://api.github.com/users/fdi438/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fdi438/subscriptions", "organizations_url": "https://api.github.com/users/fdi438/orgs", "repos_url": "https://api.github.com/users/fdi438/repos", "events_url": "https://api.github.com/users/fdi438/events{/privacy}", "received_events_url": "https://api.github.com/users/fdi438/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-04T12:14:08Z", "updated_at": "2020-02-04T12:42:27Z", "closed_at": "2020-02-04T12:42:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n\r\nI've been trying to get an intertia matrix. The issues are:\r\n+ Values are completely off\r\n+ If they are close (e.g. for a cube), the still are off by 10e3\r\n\r\nFor verification I tried the attached STL file (created with OpenSCAD). This is a block, size 10x10x20, centered at 0,0,0.\r\n\r\nnumpy-stl gives me:\r\n```\r\nInertia matrix at expressed at the COG  = \r\n[83333.33333333    -0.            -0.        ]\r\n[   -0.         83333.33333333    -0.        ]\r\n[   -0.            -0.         33333.33333333]\r\n```\r\nHowever, based on my mechanics literature, the matrix should be:\r\n```\r\nm/12*(b\u00b2+c\u00b2) 0            0\r\n0            m/12*(c\u00b2+a\u00b2) 0\r\n0            0            m/12*(a\u00b2+b\u00b2)\r\n```\r\nwhich would result in (assuming m=1)\r\n\r\n```\r\n41.67  0      0\r\n0      41.67  0\r\n0      0      16.67\r\n```\r\n\r\nCOG is correct (for this one only, for a sphere it's always slightly off), volume is also correctly calculated at 2000.\r\n\r\n\r\nHere is the stl file (zipped so that I can upload it here).\r\n[block_10-10-20.zip](https://github.com/WoLpH/numpy-stl/files/4153180/block_10-10-20.zip)\r\n\r\nThe code to create it in OpenSCAD is \r\n`cube([10,10,20],center=true);`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/119", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/119/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/119/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/119", "id": 548683663, "node_id": "MDU6SXNzdWU1NDg2ODM2NjM=", "number": 119, "title": "Other methods to plot stl file instead of matplotlib. ", "user": {"login": "snowbugxs", "id": 54727599, "node_id": "MDQ6VXNlcjU0NzI3NTk5", "avatar_url": "https://avatars2.githubusercontent.com/u/54727599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/snowbugxs", "html_url": "https://github.com/snowbugxs", "followers_url": "https://api.github.com/users/snowbugxs/followers", "following_url": "https://api.github.com/users/snowbugxs/following{/other_user}", "gists_url": "https://api.github.com/users/snowbugxs/gists{/gist_id}", "starred_url": "https://api.github.com/users/snowbugxs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/snowbugxs/subscriptions", "organizations_url": "https://api.github.com/users/snowbugxs/orgs", "repos_url": "https://api.github.com/users/snowbugxs/repos", "events_url": "https://api.github.com/users/snowbugxs/events{/privacy}", "received_events_url": "https://api.github.com/users/snowbugxs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-01-13T03:33:01Z", "updated_at": "2020-01-26T17:35:00Z", "closed_at": "2020-01-26T17:34:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "My stl file is so large (90MB) that the plot window gets stuck. Is there any method to show the stl from  python script? I think i can save the file and the open it in another software. But is there a better way?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/118", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/118/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/118/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/118", "id": 548479563, "node_id": "MDU6SXNzdWU1NDg0Nzk1NjM=", "number": 118, "title": "Finding bounding box with slt.Dimension.X or Y or Z ", "user": {"login": "snowbugxs", "id": 54727599, "node_id": "MDQ6VXNlcjU0NzI3NTk5", "avatar_url": "https://avatars2.githubusercontent.com/u/54727599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/snowbugxs", "html_url": "https://github.com/snowbugxs", "followers_url": "https://api.github.com/users/snowbugxs/followers", "following_url": "https://api.github.com/users/snowbugxs/following{/other_user}", "gists_url": "https://api.github.com/users/snowbugxs/gists{/gist_id}", "starred_url": "https://api.github.com/users/snowbugxs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/snowbugxs/subscriptions", "organizations_url": "https://api.github.com/users/snowbugxs/orgs", "repos_url": "https://api.github.com/users/snowbugxs/repos", "events_url": "https://api.github.com/users/snowbugxs/events{/privacy}", "received_events_url": "https://api.github.com/users/snowbugxs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-11T20:59:41Z", "updated_at": "2020-01-13T03:11:36Z", "closed_at": "2020-01-13T03:11:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. In the tutorial of combining multiple stl files, the first step is to find the bounding box, i.e., the max and min coordinates in x, y and z directions. It uses the stl.Dimension.X to refer an x coordinate of the first point, as shown in the source code, stl.Dimension.X = 0 (Y=1, Z=2) and the last two points are neglected. However, i want to ask do all the points have a chance to be the first point of a facet? Because in that way only the first point's coordinates are  iterated. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/117", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/117/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/117/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/117", "id": 541231708, "node_id": "MDU6SXNzdWU1NDEyMzE3MDg=", "number": 117, "title": "Get each layer of STL file", "user": {"login": "neramas1221", "id": 17319053, "node_id": "MDQ6VXNlcjE3MzE5MDUz", "avatar_url": "https://avatars0.githubusercontent.com/u/17319053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neramas1221", "html_url": "https://github.com/neramas1221", "followers_url": "https://api.github.com/users/neramas1221/followers", "following_url": "https://api.github.com/users/neramas1221/following{/other_user}", "gists_url": "https://api.github.com/users/neramas1221/gists{/gist_id}", "starred_url": "https://api.github.com/users/neramas1221/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neramas1221/subscriptions", "organizations_url": "https://api.github.com/users/neramas1221/orgs", "repos_url": "https://api.github.com/users/neramas1221/repos", "events_url": "https://api.github.com/users/neramas1221/events{/privacy}", "received_events_url": "https://api.github.com/users/neramas1221/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-20T22:40:40Z", "updated_at": "2019-12-21T21:06:07Z", "closed_at": "2019-12-21T21:06:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to get each layer of an stl file individually in to an array, how would I go about doing this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/116", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/116/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/116/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/116", "id": 530401821, "node_id": "MDU6SXNzdWU1MzA0MDE4MjE=", "number": 116, "title": "how to convert stl to numpy array?", "user": {"login": "zhang-qiang-github", "id": 29271051, "node_id": "MDQ6VXNlcjI5MjcxMDUx", "avatar_url": "https://avatars3.githubusercontent.com/u/29271051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhang-qiang-github", "html_url": "https://github.com/zhang-qiang-github", "followers_url": "https://api.github.com/users/zhang-qiang-github/followers", "following_url": "https://api.github.com/users/zhang-qiang-github/following{/other_user}", "gists_url": "https://api.github.com/users/zhang-qiang-github/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhang-qiang-github/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhang-qiang-github/subscriptions", "organizations_url": "https://api.github.com/users/zhang-qiang-github/orgs", "repos_url": "https://api.github.com/users/zhang-qiang-github/repos", "events_url": "https://api.github.com/users/zhang-qiang-github/events{/privacy}", "received_events_url": "https://api.github.com/users/zhang-qiang-github/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 617430855, "node_id": "MDU6TGFiZWw2MTc0MzA4NTU=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/no-activity", "name": "no-activity", "color": "ffffff", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-29T15:34:00Z", "updated_at": "2020-02-04T18:40:10Z", "closed_at": "2020-02-04T18:40:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "The numpy-stl is really a good project. And I have a question. If I have a stl, how can I want to convert it to a numpy array? 1 indicate that the pixel is inside the mesh, and 0 indicate that the pixel is outside the mesh. \r\nAny suggestion is helpful!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/115", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/115/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/115/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/115", "id": 508999946, "node_id": "MDU6SXNzdWU1MDg5OTk5NDY=", "number": 115, "title": "solid names converted to lowercase", "user": {"login": "dfransos", "id": 5362984, "node_id": "MDQ6VXNlcjUzNjI5ODQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5362984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfransos", "html_url": "https://github.com/dfransos", "followers_url": "https://api.github.com/users/dfransos/followers", "following_url": "https://api.github.com/users/dfransos/following{/other_user}", "gists_url": "https://api.github.com/users/dfransos/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfransos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfransos/subscriptions", "organizations_url": "https://api.github.com/users/dfransos/orgs", "repos_url": "https://api.github.com/users/dfransos/repos", "events_url": "https://api.github.com/users/dfransos/events{/privacy}", "received_events_url": "https://api.github.com/users/dfransos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-18T10:40:20Z", "updated_at": "2019-10-21T12:10:39Z", "closed_at": "2019-10-21T12:10:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "At lines 59 and 152 of stl.py there's a lowercase conversion, to further match a substring to my understanding. \r\nThis causes in turn all the solid names to be converted to lowercase, that's an issue when rewriting the stl after manipulation.\r\nCan we just fix this by temp lowercasing only for the sake of string comparison, without changing the object in place?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/114", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/114/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/114/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/114", "id": 502442641, "node_id": "MDU6SXNzdWU1MDI0NDI2NDE=", "number": 114, "title": "STL write?", "user": {"login": "selvakarna", "id": 25522855, "node_id": "MDQ6VXNlcjI1NTIyODU1", "avatar_url": "https://avatars2.githubusercontent.com/u/25522855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/selvakarna", "html_url": "https://github.com/selvakarna", "followers_url": "https://api.github.com/users/selvakarna/followers", "following_url": "https://api.github.com/users/selvakarna/following{/other_user}", "gists_url": "https://api.github.com/users/selvakarna/gists{/gist_id}", "starred_url": "https://api.github.com/users/selvakarna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/selvakarna/subscriptions", "organizations_url": "https://api.github.com/users/selvakarna/orgs", "repos_url": "https://api.github.com/users/selvakarna/repos", "events_url": "https://api.github.com/users/selvakarna/events{/privacy}", "received_events_url": "https://api.github.com/users/selvakarna/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-04T05:56:35Z", "updated_at": "2019-10-04T09:18:13Z", "closed_at": "2019-10-04T08:26:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/113", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/113/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/113/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/113", "id": 500194690, "node_id": "MDU6SXNzdWU1MDAxOTQ2OTA=", "number": 113, "title": "How to save mesh as step using numpy-stl?", "user": {"login": "selvakarna", "id": 25522855, "node_id": "MDQ6VXNlcjI1NTIyODU1", "avatar_url": "https://avatars2.githubusercontent.com/u/25522855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/selvakarna", "html_url": "https://github.com/selvakarna", "followers_url": "https://api.github.com/users/selvakarna/followers", "following_url": "https://api.github.com/users/selvakarna/following{/other_user}", "gists_url": "https://api.github.com/users/selvakarna/gists{/gist_id}", "starred_url": "https://api.github.com/users/selvakarna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/selvakarna/subscriptions", "organizations_url": "https://api.github.com/users/selvakarna/orgs", "repos_url": "https://api.github.com/users/selvakarna/repos", "events_url": "https://api.github.com/users/selvakarna/events{/privacy}", "received_events_url": "https://api.github.com/users/selvakarna/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-30T10:41:16Z", "updated_at": "2019-10-04T08:26:28Z", "closed_at": "2019-10-04T08:26:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to save mesh as step using numpy-stl?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/112", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/112/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/112/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/112", "id": 498876822, "node_id": "MDU6SXNzdWU0OTg4NzY4MjI=", "number": 112, "title": "How to convert STL to IGES ?", "user": {"login": "selvakarna", "id": 25522855, "node_id": "MDQ6VXNlcjI1NTIyODU1", "avatar_url": "https://avatars2.githubusercontent.com/u/25522855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/selvakarna", "html_url": "https://github.com/selvakarna", "followers_url": "https://api.github.com/users/selvakarna/followers", "following_url": "https://api.github.com/users/selvakarna/following{/other_user}", "gists_url": "https://api.github.com/users/selvakarna/gists{/gist_id}", "starred_url": "https://api.github.com/users/selvakarna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/selvakarna/subscriptions", "organizations_url": "https://api.github.com/users/selvakarna/orgs", "repos_url": "https://api.github.com/users/selvakarna/repos", "events_url": "https://api.github.com/users/selvakarna/events{/privacy}", "received_events_url": "https://api.github.com/users/selvakarna/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-26T13:13:56Z", "updated_at": "2019-10-04T08:25:53Z", "closed_at": "2019-10-04T08:25:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to convert STL to IGES ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/111", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/111/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/111/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/111", "id": 489418027, "node_id": "MDU6SXNzdWU0ODk0MTgwMjc=", "number": 111, "title": "Normals don't seem to change when I rotate a mesh", "user": {"login": "nickc92", "id": 14251784, "node_id": "MDQ6VXNlcjE0MjUxNzg0", "avatar_url": "https://avatars2.githubusercontent.com/u/14251784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickc92", "html_url": "https://github.com/nickc92", "followers_url": "https://api.github.com/users/nickc92/followers", "following_url": "https://api.github.com/users/nickc92/following{/other_user}", "gists_url": "https://api.github.com/users/nickc92/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickc92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickc92/subscriptions", "organizations_url": "https://api.github.com/users/nickc92/orgs", "repos_url": "https://api.github.com/users/nickc92/repos", "events_url": "https://api.github.com/users/nickc92/events{/privacy}", "received_events_url": "https://api.github.com/users/nickc92/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 617430855, "node_id": "MDU6TGFiZWw2MTc0MzA4NTU=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/no-activity", "name": "no-activity", "color": "ffffff", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-04T21:53:47Z", "updated_at": "2019-11-11T10:08:54Z", "closed_at": "2019-11-11T10:08:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "The title says it all, basically.  When you rotate an object, shouldn't its normals change?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/110", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/110/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/110/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/110", "id": 485150818, "node_id": "MDU6SXNzdWU0ODUxNTA4MTg=", "number": 110, "title": "mesh.from_file throws Assertion Error when open normal small file", "user": {"login": "btsrkex", "id": 34084904, "node_id": "MDQ6VXNlcjM0MDg0OTA0", "avatar_url": "https://avatars3.githubusercontent.com/u/34084904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/btsrkex", "html_url": "https://github.com/btsrkex", "followers_url": "https://api.github.com/users/btsrkex/followers", "following_url": "https://api.github.com/users/btsrkex/following{/other_user}", "gists_url": "https://api.github.com/users/btsrkex/gists{/gist_id}", "starred_url": "https://api.github.com/users/btsrkex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/btsrkex/subscriptions", "organizations_url": "https://api.github.com/users/btsrkex/orgs", "repos_url": "https://api.github.com/users/btsrkex/repos", "events_url": "https://api.github.com/users/btsrkex/events{/privacy}", "received_events_url": "https://api.github.com/users/btsrkex/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 617430855, "node_id": "MDU6TGFiZWw2MTc0MzA4NTU=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/no-activity", "name": "no-activity", "color": "ffffff", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-26T09:52:44Z", "updated_at": "2019-11-01T22:14:35Z", "closed_at": "2019-11-01T22:14:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "System: Linux Mint 19.2 Cinnamon (4.2.3) in VirtualBox\r\nKernel: 4.15.0-54-generic\r\nPython version: 3.6\r\nI'm using the newest version of all related libraries (six, cython, numpy, etc.)\r\n\r\nI've found the closed (and unsolved due to non-reproducible) issues (37 and 52)that very similar, however, those happened with the ascii loader function while the binary loader function failed for me as well.\r\nDifferent from issue 52 mentioned none of the other errors was raised during the execution.\r\nI tried to alter my locale to C.UTF-8 and it doesn't change anything.\r\n\r\nException log:\r\n`Exception in Tkinter callback\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.6/tkinter/__init__.py\", line 1705, in __call__\r\n    return self.func(*args)\r\n  File \"/usr/Project/openscadProject/GUI.py\", line 218, in generateCodeFunc\r\n    ifs=c.generateCode()\r\n  File \"/usr/Project/openscadProject/feature.py\", line 111, in generateCode\r\n    txtsize=self.getminmax(mesh.Mesh.from_file(os.path.join(self.fdir,txtdxffile),speedups=False))\r\n  File \"/usr/local/lib/python3.6/dist-packages/stl/stl.py\", line 323, in from_file\r\n    fh, mode=mode, speedups=speedups)\r\n  File \"/usr/local/lib/python3.6/dist-packages/stl/stl.py\", line 93, in load\r\n    name, data = cls._load_binary(fh, header)\r\n  File \"/usr/local/lib/python3.6/dist-packages/stl/stl.py\", line 108, in _load_binary\r\n    count, MAX_COUNT)\r\nAssertionError: File too large, got 875901486 triangles which exceeds the maximum of 100000000\r\n`\r\n\r\nThe dxf file I'm trying to open is just some letters generated by solidpython via Openscad, which should have no way to contain that many triangles. Here is the file I mentioned.\r\n[e9d35e8ac9c6ee21d697aa5f38f3340b.zip](https://github.com/WoLpH/numpy-stl/files/3540552/e9d35e8ac9c6ee21d697aa5f38f3340b.zip)\r\n\r\nI'd like to measure the length and width of the generated letters but I cannot come up with a way to do so without load the file. I'd like to know if I have any other alternative solutions to achieve my goal.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/109", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/109/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/109/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/109", "id": 478282686, "node_id": "MDU6SXNzdWU0NzgyODI2ODY=", "number": 109, "title": "I have rotated the model, but the result is a little bit wired", "user": {"login": "Nightmareone", "id": 7871291, "node_id": "MDQ6VXNlcjc4NzEyOTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/7871291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nightmareone", "html_url": "https://github.com/Nightmareone", "followers_url": "https://api.github.com/users/Nightmareone/followers", "following_url": "https://api.github.com/users/Nightmareone/following{/other_user}", "gists_url": "https://api.github.com/users/Nightmareone/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nightmareone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nightmareone/subscriptions", "organizations_url": "https://api.github.com/users/Nightmareone/orgs", "repos_url": "https://api.github.com/users/Nightmareone/repos", "events_url": "https://api.github.com/users/Nightmareone/events{/privacy}", "received_events_url": "https://api.github.com/users/Nightmareone/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-08T06:47:03Z", "updated_at": "2019-08-09T09:33:18Z", "closed_at": "2019-08-09T09:33:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have tried to rotate the model in 360 degree, But the result is defferent from the result before rotating, Is there any problem with my code? or can you tell me why I got this result.....Thank you.\r\n\r\n### code\r\n```\r\n    list_x = []\r\n    list_y = []\r\n    list_z = []\r\n    your_mesh = mesh.Mesh.from_file(filename)\r\n    for v in your_mesh.data:\r\n        list_x.append(v[1][0][0])\r\n        list_x.append(v[1][1][0])\r\n        list_x.append(v[1][2][0])\r\n\r\n        list_y.append(v[1][0][1])\r\n        list_y.append(v[1][1][1])\r\n        list_y.append(v[1][2][1])\r\n    \r\n    min_x = min(list_x)\r\n    max_x = max(list_x)\r\n    min_y = min(list_y)\r\n    max_y = max(list_y)\r\n\r\n    print(\"max_x:\" + str(max_x) + \"; min_x:\" + str(min_x))\r\n    print(\"max_y:\" + str(max_y) + \"; min_y:\" + str(min_y))\r\n    print('===========================================')\r\n    angle = -360\r\n    your_mesh.rotate([0.0, 0.0, 1.0], math.radians(angle))\r\n    for v in your_mesh.data:\r\n        list_x.append(v[1][0][0])\r\n        list_x.append(v[1][1][0])\r\n        list_x.append(v[1][2][0])\r\n\r\n        list_y.append(v[1][0][1])\r\n        list_y.append(v[1][1][1])\r\n        list_y.append(v[1][2][1])\r\n    \r\n    min_x = min(list_x)\r\n    max_x = max(list_x)\r\n    min_y = min(list_y)\r\n    max_y = max(list_y)\r\n\r\n    print(\"max_x:\" + str(max_x) + \"; min_x:\" + str(min_x))\r\n    print(\"max_y:\" + str(max_y) + \"; min_y:\" + str(min_y))\r\n```\r\n### result\r\n![\u30ad\u30e3\u30d7\u30c1\u30e32](https://user-images.githubusercontent.com/7871291/62680262-c7b07d00-b9f1-11e9-866e-209a9ac14044.PNG)\r\nBy the way, I'm doing research using STL file, numpy-stl really helped me a lot.**Thank you for your job**.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/108", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/108/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/108/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/108", "id": 477614782, "node_id": "MDU6SXNzdWU0Nzc2MTQ3ODI=", "number": 108, "title": "normal vectors are not unit normals", "user": {"login": "metsean", "id": 50424550, "node_id": "MDQ6VXNlcjUwNDI0NTUw", "avatar_url": "https://avatars2.githubusercontent.com/u/50424550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/metsean", "html_url": "https://github.com/metsean", "followers_url": "https://api.github.com/users/metsean/followers", "following_url": "https://api.github.com/users/metsean/following{/other_user}", "gists_url": "https://api.github.com/users/metsean/gists{/gist_id}", "starred_url": "https://api.github.com/users/metsean/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/metsean/subscriptions", "organizations_url": "https://api.github.com/users/metsean/orgs", "repos_url": "https://api.github.com/users/metsean/repos", "events_url": "https://api.github.com/users/metsean/events{/privacy}", "received_events_url": "https://api.github.com/users/metsean/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 617430855, "node_id": "MDU6TGFiZWw2MTc0MzA4NTU=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/no-activity", "name": "no-activity", "color": "ffffff", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-08-06T22:03:56Z", "updated_at": "2019-10-19T05:20:30Z", "closed_at": "2019-10-19T05:20:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using 'update normals' option on save, normal vectors are calculated as cross product between two edges but then need to be normalised by their length (so that norm =1). Suggest using numpy.linalg.norm for this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/107", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/107/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/107/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/107", "id": 474218221, "node_id": "MDU6SXNzdWU0NzQyMTgyMjE=", "number": 107, "title": "Wrong method used in rotation_matrix", "user": {"login": "Hepheir", "id": 19310326, "node_id": "MDQ6VXNlcjE5MzEwMzI2", "avatar_url": "https://avatars0.githubusercontent.com/u/19310326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hepheir", "html_url": "https://github.com/Hepheir", "followers_url": "https://api.github.com/users/Hepheir/followers", "following_url": "https://api.github.com/users/Hepheir/following{/other_user}", "gists_url": "https://api.github.com/users/Hepheir/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hepheir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hepheir/subscriptions", "organizations_url": "https://api.github.com/users/Hepheir/orgs", "repos_url": "https://api.github.com/users/Hepheir/repos", "events_url": "https://api.github.com/users/Hepheir/events{/privacy}", "received_events_url": "https://api.github.com/users/Hepheir/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-29T19:30:39Z", "updated_at": "2019-08-07T00:47:35Z", "closed_at": "2019-08-07T00:47:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/WoLpH/numpy-stl/blob/4327bf79b2a59885651aa1a4ffd658b50ffacdc8/stl/base.py#L433-L435\r\n\r\nIn my opinion, the method **`numpy.zeros((3,3))`** should be replaced with **`numpy.identity((3,3))`** @ line 435.\r\n\r\nhttps://github.com/WoLpH/numpy-stl/blob/4327bf79b2a59885651aa1a4ffd658b50ffacdc8/stl/base.py#L491-L494\r\n\r\nZero matrix will cause of losing the original data when it is dot-producted, while indentity matrix will preserve it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/106", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/106/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/106/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/106", "id": 465899577, "node_id": "MDU6SXNzdWU0NjU4OTk1Nzc=", "number": 106, "title": "Typo in to_binary()", "user": {"login": "smgreenwood", "id": 32173886, "node_id": "MDQ6VXNlcjMyMTczODg2", "avatar_url": "https://avatars3.githubusercontent.com/u/32173886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smgreenwood", "html_url": "https://github.com/smgreenwood", "followers_url": "https://api.github.com/users/smgreenwood/followers", "following_url": "https://api.github.com/users/smgreenwood/following{/other_user}", "gists_url": "https://api.github.com/users/smgreenwood/gists{/gist_id}", "starred_url": "https://api.github.com/users/smgreenwood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smgreenwood/subscriptions", "organizations_url": "https://api.github.com/users/smgreenwood/orgs", "repos_url": "https://api.github.com/users/smgreenwood/repos", "events_url": "https://api.github.com/users/smgreenwood/events{/privacy}", "received_events_url": "https://api.github.com/users/smgreenwood/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-09T17:25:05Z", "updated_at": "2019-07-13T12:55:00Z", "closed_at": "2019-07-13T12:55:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "It looks like there is a typo here:\r\nhttps://github.com/WoLpH/numpy-stl/blob/4c6f1ba65ebfbe4160a4d671a5b318bb825aa3dc/stl/main.py#L79\r\n\r\nThe line reads:  'Convert STL files to ASCII (text) format'\r\n\r\nI believe ASCII should be changed to binary:  'Convert STL files to binary (text) format'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/105", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/105/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/105/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/105", "id": 448799568, "node_id": "MDU6SXNzdWU0NDg3OTk1Njg=", "number": 105, "title": "Subtract 2 STL files", "user": {"login": "copperwr", "id": 33694069, "node_id": "MDQ6VXNlcjMzNjk0MDY5", "avatar_url": "https://avatars3.githubusercontent.com/u/33694069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/copperwr", "html_url": "https://github.com/copperwr", "followers_url": "https://api.github.com/users/copperwr/followers", "following_url": "https://api.github.com/users/copperwr/following{/other_user}", "gists_url": "https://api.github.com/users/copperwr/gists{/gist_id}", "starred_url": "https://api.github.com/users/copperwr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/copperwr/subscriptions", "organizations_url": "https://api.github.com/users/copperwr/orgs", "repos_url": "https://api.github.com/users/copperwr/repos", "events_url": "https://api.github.com/users/copperwr/events{/privacy}", "received_events_url": "https://api.github.com/users/copperwr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 617430855, "node_id": "MDU6TGFiZWw2MTc0MzA4NTU=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/no-activity", "name": "no-activity", "color": "ffffff", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-27T11:14:14Z", "updated_at": "2019-08-02T15:55:00Z", "closed_at": "2019-08-02T15:55:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there, \r\n\r\nI already use numpy-stl to generate STL files and it works great.\r\n\r\nWhat I need to be able to do is to load up 2 STL files and substract one from the other.  \r\n\r\nCould this be supported by numpy-stl?\r\n\r\nThanks for any thoughts on this..\r\nRobert", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/104", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/104/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/104/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/104", "id": 438789213, "node_id": "MDU6SXNzdWU0Mzg3ODkyMTM=", "number": 104, "title": "Create a STL file with XYZ 2D arrays", "user": {"login": "tomyferra", "id": 11900440, "node_id": "MDQ6VXNlcjExOTAwNDQw", "avatar_url": "https://avatars0.githubusercontent.com/u/11900440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomyferra", "html_url": "https://github.com/tomyferra", "followers_url": "https://api.github.com/users/tomyferra/followers", "following_url": "https://api.github.com/users/tomyferra/following{/other_user}", "gists_url": "https://api.github.com/users/tomyferra/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomyferra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomyferra/subscriptions", "organizations_url": "https://api.github.com/users/tomyferra/orgs", "repos_url": "https://api.github.com/users/tomyferra/repos", "events_url": "https://api.github.com/users/tomyferra/events{/privacy}", "received_events_url": "https://api.github.com/users/tomyferra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-30T13:51:02Z", "updated_at": "2019-09-06T12:10:34Z", "closed_at": "2019-09-06T12:10:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need help of how to create a STL file having my X Y Z 2D arrays.\r\nI saw this example but i'm having trouble finding a way out. \r\nhttps://github.com/WoLpH/numpy-stl/issues/89\r\n\r\n![image](https://user-images.githubusercontent.com/11900440/56966573-c390db80-6b35-11e9-9854-7227aefcc8c6.png)\r\n\r\nThis is the problem in my code, where \r\nxInterp, yInterp and zInterp are 2D arrays\r\n\r\nThank you!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/103", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/103/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/103/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/103", "id": 434017503, "node_id": "MDU6SXNzdWU0MzQwMTc1MDM=", "number": 103, "title": "Installation of numpy-stl", "user": {"login": "jaskarangrover92", "id": 29415137, "node_id": "MDQ6VXNlcjI5NDE1MTM3", "avatar_url": "https://avatars1.githubusercontent.com/u/29415137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaskarangrover92", "html_url": "https://github.com/jaskarangrover92", "followers_url": "https://api.github.com/users/jaskarangrover92/followers", "following_url": "https://api.github.com/users/jaskarangrover92/following{/other_user}", "gists_url": "https://api.github.com/users/jaskarangrover92/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaskarangrover92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaskarangrover92/subscriptions", "organizations_url": "https://api.github.com/users/jaskarangrover92/orgs", "repos_url": "https://api.github.com/users/jaskarangrover92/repos", "events_url": "https://api.github.com/users/jaskarangrover92/events{/privacy}", "received_events_url": "https://api.github.com/users/jaskarangrover92/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-16T22:46:35Z", "updated_at": "2019-04-30T15:06:19Z", "closed_at": "2019-04-30T14:46:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I am getting the following error while installing numpy-stl using pip install. Any suggestions would be helpful:\r\n\r\nCollecting numpy-stl\r\n  Using cached https://files.pythonhosted.org/packages/a2/08/19caa3c20fd9a486a0a603e329b22578aca7e6f184f0575fcd0980ba3ac5/numpy-stl-2.10.1.tar.gz\r\n    Complete output from command python setup.py egg_info:\r\n    WARNING\r\n    Cython and Numpy is required for building extension.\r\n    Falling back to pure Python implementation.\r\n    Download error on https://pypi.org/simple/pytest-runner/: [SSL: TLSV1_ALERT_PROTOCOL_VERSION] tlsv1 alert protocol version (_ssl.c:645) -- Some packages may not be found!\r\n    Couldn't find index page for 'pytest-runner' (maybe misspelled?)\r\n    Download error on https://pypi.org/simple/: [SSL: TLSV1_ALERT_PROTOCOL_VERSION] tlsv1 alert protocol version (_ssl.c:645) -- Some packages may not be found!\r\n    No local packages or working download links found for pytest-runner\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/private/var/folders/b0/lv4f1rzd4vb9cz1r8582__1r0000gn/T/pip-install-ogd33n7v/numpy-stl/setup.py\", line 132, in <module>\r\n        **setup_kwargs\r\n      File \"/Users/jaskaran/Desktop/multiagent/try1/lib/python3.5/site-packages/setuptools/__init__.py\", line 144, in setup\r\n        _install_setup_requires(attrs)\r\n      File \"/Users/jaskaran/Desktop/multiagent/try1/lib/python3.5/site-packages/setuptools/__init__.py\", line 139, in _install_setup_requires\r\n        dist.fetch_build_eggs(dist.setup_requires)\r\n      File \"/Users/jaskaran/Desktop/multiagent/try1/lib/python3.5/site-packages/setuptools/dist.py\", line 717, in fetch_build_eggs\r\n        replace_conflicting=True,\r\n      File \"/Users/jaskaran/Desktop/multiagent/try1/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 782, in resolve\r\n        replace_conflicting=replace_conflicting\r\n      File \"/Users/jaskaran/Desktop/multiagent/try1/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 1065, in best_match\r\n        return self.obtain(req, installer)\r\n      File \"/Users/jaskaran/Desktop/multiagent/try1/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 1077, in obtain\r\n        return installer(requirement)\r\n      File \"/Users/jaskaran/Desktop/multiagent/try1/lib/python3.5/site-packages/setuptools/dist.py\", line 784, in fetch_build_egg\r\n        return cmd.easy_install(req)\r\n      File \"/Users/jaskaran/Desktop/multiagent/try1/lib/python3.5/site-packages/setuptools/command/easy_install.py\", line 673, in easy_install\r\n        raise DistutilsError(msg)\r\n    distutils.errors.DistutilsError: Could not find suitable distribution for Requirement.parse('pytest-runner')\r\n    \r\n    ----------------------------------------\r\nCommand \"python setup.py egg_info\" failed with error code 1 in /private/var/folders/b0/lv4f1rzd4vb9cz1r8582__1r0000gn/T/pip-install-ogd33n7v/numpy-stl/\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/102", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/102/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/102/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/102", "id": 429903093, "node_id": "MDU6SXNzdWU0Mjk5MDMwOTM=", "number": 102, "title": "Do save change original mesh points?", "user": {"login": "thiagomarinho1984", "id": 28931576, "node_id": "MDQ6VXNlcjI4OTMxNTc2", "avatar_url": "https://avatars0.githubusercontent.com/u/28931576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thiagomarinho1984", "html_url": "https://github.com/thiagomarinho1984", "followers_url": "https://api.github.com/users/thiagomarinho1984/followers", "following_url": "https://api.github.com/users/thiagomarinho1984/following{/other_user}", "gists_url": "https://api.github.com/users/thiagomarinho1984/gists{/gist_id}", "starred_url": "https://api.github.com/users/thiagomarinho1984/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thiagomarinho1984/subscriptions", "organizations_url": "https://api.github.com/users/thiagomarinho1984/orgs", "repos_url": "https://api.github.com/users/thiagomarinho1984/repos", "events_url": "https://api.github.com/users/thiagomarinho1984/events{/privacy}", "received_events_url": "https://api.github.com/users/thiagomarinho1984/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 617430855, "node_id": "MDU6TGFiZWw2MTc0MzA4NTU=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/no-activity", "name": "no-activity", "color": "ffffff", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-05T19:29:42Z", "updated_at": "2019-06-11T21:10:59Z", "closed_at": "2019-06-11T21:10:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello gents. First of all thank you so much for this package, its very useful.\r\n\r\nI am running a script that loads a mesh, rotate it and save it. For some reason the new file size is much smaller than the original (~70% of original) and the triangles are being reconstructed. Is that the expected behavior?\r\n\r\nI am wondering if its possible to do this process maintaining the original triangles by just transforming the points coordinates.\r\n\r\nThe following is a snip of the code with the function optional inputs:\r\n\r\n`for i in range(0,meshes.__len__()):\r\n\r\n    stlMesh=mesh.Mesh.from_file(meshes[i])\r\n\r\n    print(meshes[i])\r\n\r\n    # Rotate about Z\r\n\r\n    stlMesh.rotate([0.0, 0.0, 1.0], math.radians(180-yaw))\r\n\r\n    # Rotate about Y\r\n\r\n    stlMesh.rotate([1.0 * math.sin(math.radians(-yaw)), 1.0 * math.cos(math.radians(-yaw)), 0],math.radians(pitch-90))\r\n\r\n    # Save\r\n\r\n    name = meshes[i].rsplit(r'/',1)[-1]\r\n\r\n    print(name)\r\n\r\n    stlMesh.save(basedir+case+r'/constant/triSurface/'+name, mode=stl.Mode.ASCII,update_normals=True)`\r\n\r\n![image](https://user-images.githubusercontent.com/28931576/55651738-fefeeb00-57bf-11e9-9af5-448a4910b058.png)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/101", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/101/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/101/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/101", "id": 429669032, "node_id": "MDU6SXNzdWU0Mjk2NjkwMzI=", "number": 101, "title": "STL not generate 3D shape? X Y Z and faces Triangele generated properly but STL not generated 3D? ", "user": {"login": "selvakarna", "id": 25522855, "node_id": "MDQ6VXNlcjI1NTIyODU1", "avatar_url": "https://avatars2.githubusercontent.com/u/25522855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/selvakarna", "html_url": "https://github.com/selvakarna", "followers_url": "https://api.github.com/users/selvakarna/followers", "following_url": "https://api.github.com/users/selvakarna/following{/other_user}", "gists_url": "https://api.github.com/users/selvakarna/gists{/gist_id}", "starred_url": "https://api.github.com/users/selvakarna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/selvakarna/subscriptions", "organizations_url": "https://api.github.com/users/selvakarna/orgs", "repos_url": "https://api.github.com/users/selvakarna/repos", "events_url": "https://api.github.com/users/selvakarna/events{/privacy}", "received_events_url": "https://api.github.com/users/selvakarna/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 617430855, "node_id": "MDU6TGFiZWw2MTc0MzA4NTU=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/no-activity", "name": "no-activity", "color": "ffffff", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-05T09:42:21Z", "updated_at": "2019-06-15T06:04:06Z", "closed_at": "2019-06-15T06:04:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "STL not generate 3D shape? X Y Z and faces Triangele generated properly but STL not generated 3D? \r\n \r\n X Y Z vectors not forming as 3D in STL, everything formed as single dimension ? \r\n X Y Z points are from 300 dicom slides? its 3d Volume image?\r\nbut STL not forming as 3D ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/98", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/98/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/98/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/98", "id": 409379200, "node_id": "MDU6SXNzdWU0MDkzNzkyMDA=", "number": 98, "title": "please consider renaming the argument to 'vector' instead of 'matrix'", "user": {"login": "komahanb", "id": 5162934, "node_id": "MDQ6VXNlcjUxNjI5MzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/5162934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/komahanb", "html_url": "https://github.com/komahanb", "followers_url": "https://api.github.com/users/komahanb/followers", "following_url": "https://api.github.com/users/komahanb/following{/other_user}", "gists_url": "https://api.github.com/users/komahanb/gists{/gist_id}", "starred_url": "https://api.github.com/users/komahanb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/komahanb/subscriptions", "organizations_url": "https://api.github.com/users/komahanb/orgs", "repos_url": "https://api.github.com/users/komahanb/repos", "events_url": "https://api.github.com/users/komahanb/events{/privacy}", "received_events_url": "https://api.github.com/users/komahanb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-12T16:12:31Z", "updated_at": "2019-02-12T22:08:33Z", "closed_at": "2019-02-12T22:08:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/WoLpH/numpy-stl/blob/1cb4c5013c9b5a2dee0500e06b574ee0f4d19ca3/stl/base.py#L491", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/97", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/97/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/97/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/97", "id": 401037533, "node_id": "MDU6SXNzdWU0MDEwMzc1MzM=", "number": 97, "title": "Building a large stl", "user": {"login": "da4throux", "id": 4680658, "node_id": "MDQ6VXNlcjQ2ODA2NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/4680658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/da4throux", "html_url": "https://github.com/da4throux", "followers_url": "https://api.github.com/users/da4throux/followers", "following_url": "https://api.github.com/users/da4throux/following{/other_user}", "gists_url": "https://api.github.com/users/da4throux/gists{/gist_id}", "starred_url": "https://api.github.com/users/da4throux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/da4throux/subscriptions", "organizations_url": "https://api.github.com/users/da4throux/orgs", "repos_url": "https://api.github.com/users/da4throux/repos", "events_url": "https://api.github.com/users/da4throux/events{/privacy}", "received_events_url": "https://api.github.com/users/da4throux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-19T21:38:19Z", "updated_at": "2019-02-14T19:04:29Z", "closed_at": "2019-02-14T18:56:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nGreat module, really thanks a lot for that.\r\nmy script is building a large stl: doing an assembly of about 80k cubes for example.\r\nI tested two approaches:\r\n- building one big mesh, so that I can write a binary file: downside is that the script run slower and slower, because everything is in memory.\r\n- building simple mesh in ASCII, and adding them as an stl in a multiple stl file at each iteration. The script does not slow down, it handles the load. But I end up with a huge file... >100Mb which is not best for the rest of the pipeline\r\n\r\nI was wondering if there is a third approach with the best of both world ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/95", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/95/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/95/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/95", "id": 389325812, "node_id": "MDU6SXNzdWUzODkzMjU4MTI=", "number": 95, "title": "eprecationWarning: using non-Enums in containment checks will raise TypeError in Python 3.8", "user": {"login": "hroncok", "id": 2401856, "node_id": "MDQ6VXNlcjI0MDE4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2401856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hroncok", "html_url": "https://github.com/hroncok", "followers_url": "https://api.github.com/users/hroncok/followers", "following_url": "https://api.github.com/users/hroncok/following{/other_user}", "gists_url": "https://api.github.com/users/hroncok/gists{/gist_id}", "starred_url": "https://api.github.com/users/hroncok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hroncok/subscriptions", "organizations_url": "https://api.github.com/users/hroncok/orgs", "repos_url": "https://api.github.com/users/hroncok/repos", "events_url": "https://api.github.com/users/hroncok/events{/privacy}", "received_events_url": "https://api.github.com/users/hroncok/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-10T14:27:53Z", "updated_at": "2018-12-17T01:46:19Z", "closed_at": "2018-12-17T01:28:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Running 2.8.0 tests:\r\n\r\n```\r\ntests/test_mesh.py::test_duplicate_polygons[False]\r\n  /builddir/build/BUILD/numpy-stl-v2.8.0/stl/base.py:50: DeprecationWarning: using non-Enums in containment checks will raise TypeError in Python 3.8\r\n    if value and value in cls:\r\n  /builddir/build/BUILD/numpy-stl-v2.8.0/stl/base.py:50: DeprecationWarning: using non-Enums in containment checks will raise TypeError in Python 3.8\r\n    if value and value in cls:\r\n\r\ntests/test_mesh.py::test_duplicate_polygons[True]\r\n  /builddir/build/BUILD/numpy-stl-v2.8.0/stl/base.py:50: DeprecationWarning: using non-Enums in containment checks will raise TypeError in Python 3.8\r\n    if value and value in cls:\r\n  /builddir/build/BUILD/numpy-stl-v2.8.0/stl/base.py:50: DeprecationWarning: using non-Enums in containment checks will raise TypeError in Python 3.8\r\n    if value and value in cls:\r\n```\r\n\r\nLooking at the code, this is enum, so I have no idea what's the actual problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/93", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/93/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/93/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/93", "id": 381644841, "node_id": "MDU6SXNzdWUzODE2NDQ4NDE=", "number": 93, "title": "how to get mesh vertices?", "user": {"login": "odgiv", "id": 18517999, "node_id": "MDQ6VXNlcjE4NTE3OTk5", "avatar_url": "https://avatars2.githubusercontent.com/u/18517999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/odgiv", "html_url": "https://github.com/odgiv", "followers_url": "https://api.github.com/users/odgiv/followers", "following_url": "https://api.github.com/users/odgiv/following{/other_user}", "gists_url": "https://api.github.com/users/odgiv/gists{/gist_id}", "starred_url": "https://api.github.com/users/odgiv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/odgiv/subscriptions", "organizations_url": "https://api.github.com/users/odgiv/orgs", "repos_url": "https://api.github.com/users/odgiv/repos", "events_url": "https://api.github.com/users/odgiv/events{/privacy}", "received_events_url": "https://api.github.com/users/odgiv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-16T15:26:11Z", "updated_at": "2018-12-17T01:24:34Z", "closed_at": "2018-12-17T01:24:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I am quite new in this area. I have a .stl file. I want to get vertices of this object. The vertices should be in shape of (Mx3). How to do that?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/92", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/92/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/92/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/92", "id": 380868164, "node_id": "MDU6SXNzdWUzODA4NjgxNjQ=", "number": 92, "title": "Identifying a similar face on 2 objects.", "user": {"login": "mperino", "id": 3091956, "node_id": "MDQ6VXNlcjMwOTE5NTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/3091956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mperino", "html_url": "https://github.com/mperino", "followers_url": "https://api.github.com/users/mperino/followers", "following_url": "https://api.github.com/users/mperino/following{/other_user}", "gists_url": "https://api.github.com/users/mperino/gists{/gist_id}", "starred_url": "https://api.github.com/users/mperino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mperino/subscriptions", "organizations_url": "https://api.github.com/users/mperino/orgs", "repos_url": "https://api.github.com/users/mperino/repos", "events_url": "https://api.github.com/users/mperino/events{/privacy}", "received_events_url": "https://api.github.com/users/mperino/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 617430855, "node_id": "MDU6TGFiZWw2MTc0MzA4NTU=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/no-activity", "name": "no-activity", "color": "ffffff", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-11-14T20:13:58Z", "updated_at": "2019-02-07T07:14:31Z", "closed_at": "2019-02-07T07:14:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm looking at creating a tool to join two STL based on their most similar face. There are a lot of complex tools that require manual intervention to join 2 STL, but none that I'm aware of that do a simple rotate & translate to join 2 stl based on their most similar face.   I've done a bunch with the example code that is provided, but any tips or ideas on what I'm trying to accomplish?  Especialy how to iterate over a list of faces in the the stl?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/91", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/91/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/91/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/91", "id": 378919355, "node_id": "MDU6SXNzdWUzNzg5MTkzNTU=", "number": 91, "title": "Add boolean operations", "user": {"login": "devonjones", "id": 125165, "node_id": "MDQ6VXNlcjEyNTE2NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/125165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonjones", "html_url": "https://github.com/devonjones", "followers_url": "https://api.github.com/users/devonjones/followers", "following_url": "https://api.github.com/users/devonjones/following{/other_user}", "gists_url": "https://api.github.com/users/devonjones/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonjones/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonjones/subscriptions", "organizations_url": "https://api.github.com/users/devonjones/orgs", "repos_url": "https://api.github.com/users/devonjones/repos", "events_url": "https://api.github.com/users/devonjones/events{/privacy}", "received_events_url": "https://api.github.com/users/devonjones/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 617430855, "node_id": "MDU6TGFiZWw2MTc0MzA4NTU=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/no-activity", "name": "no-activity", "color": "ffffff", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-11-08T21:14:01Z", "updated_at": "2019-04-23T01:11:02Z", "closed_at": "2019-04-23T01:11:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would love it if this library had functions for doing Union/Intersection/Difference.  As it is, with just a few new functions, this in jupyter could replace many of the use cases for openscad", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/89", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/89/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/89/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/89", "id": 375819862, "node_id": "MDU6SXNzdWUzNzU4MTk4NjI=", "number": 89, "title": "How to use numpy to build a stl file?", "user": {"login": "LiangJinWei", "id": 44566399, "node_id": "MDQ6VXNlcjQ0NTY2Mzk5", "avatar_url": "https://avatars0.githubusercontent.com/u/44566399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LiangJinWei", "html_url": "https://github.com/LiangJinWei", "followers_url": "https://api.github.com/users/LiangJinWei/followers", "following_url": "https://api.github.com/users/LiangJinWei/following{/other_user}", "gists_url": "https://api.github.com/users/LiangJinWei/gists{/gist_id}", "starred_url": "https://api.github.com/users/LiangJinWei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LiangJinWei/subscriptions", "organizations_url": "https://api.github.com/users/LiangJinWei/orgs", "repos_url": "https://api.github.com/users/LiangJinWei/repos", "events_url": "https://api.github.com/users/LiangJinWei/events{/privacy}", "received_events_url": "https://api.github.com/users/LiangJinWei/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 617430855, "node_id": "MDU6TGFiZWw2MTc0MzA4NTU=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/no-activity", "name": "no-activity", "color": "ffffff", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-10-31T06:40:00Z", "updated_at": "2019-02-07T07:14:32Z", "closed_at": "2019-02-07T07:14:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have 3 numpy\uff1ax\u3001y\u3001z\r\nI want to used them to build a 3D stl model \r\nHow can I do?\r\n\r\nI had tried used the tutorial on the homepage\uff1a\"Creating Mesh objects from a list of vertices and faces\"\r\nand I also read #19 .\r\nBut I still have no idea...\r\nThis is my code \uff1a\r\n\r\n```\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom mpl_toolkits.mplot3d import Axes3D\r\nimport matplotlib.tri as mtri\r\nfrom stl import mesh\r\n\r\n#=====Load and build=======\r\n\r\nx_all=np.load(\"x.npy\")\r\ny_all=np.load(\"y.npy\")\r\nz_all=np.load(\"z.npy\")\r\n\r\ntris = #I have no idea...\r\n\r\n#=====STL=======\r\ndata = np.zeros(len(tris.triangles), dtype=mesh.Mesh.dtype)\r\nmobius_mesh = mesh.Mesh(data, remove_empty_areas=False)\r\nmobius_mesh.x[:] = x_all[tris.triangles]\r\nmobius_mesh.y[:] = y_all[tris.triangles]\r\nmobius_mesh.z[:] = z_all[tris.triangles]\r\nmobius_mesh.save('model.stl')\r\n```\r\n\r\nAnd here is my x\u3001y\u3001 z\r\n[xyz.zip](https://github.com/WoLpH/numpy-stl/files/2533020/xyz.zip)\r\n\r\nPlease help me....\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/88", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/88/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/88/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/88", "id": 355459129, "node_id": "MDU6SXNzdWUzNTU0NTkxMjk=", "number": 88, "title": "Loading ASCII STL with empty name prints a warning", "user": {"login": "yupinov", "id": 16647264, "node_id": "MDQ6VXNlcjE2NjQ3MjY0", "avatar_url": "https://avatars2.githubusercontent.com/u/16647264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yupinov", "html_url": "https://github.com/yupinov", "followers_url": "https://api.github.com/users/yupinov/followers", "following_url": "https://api.github.com/users/yupinov/following{/other_user}", "gists_url": "https://api.github.com/users/yupinov/gists{/gist_id}", "starred_url": "https://api.github.com/users/yupinov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yupinov/subscriptions", "organizations_url": "https://api.github.com/users/yupinov/orgs", "repos_url": "https://api.github.com/users/yupinov/repos", "events_url": "https://api.github.com/users/yupinov/events{/privacy}", "received_events_url": "https://api.github.com/users/yupinov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-08-30T07:30:44Z", "updated_at": "2018-12-17T01:28:13Z", "closed_at": "2018-12-17T01:28:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "When loading an ASCII mesh which has the first line as 'solid ',\r\nnumpy-stl issues a warning:\r\n\r\n>ASCII STL files should start with solid <space>. The application that produced this STL file may be faulty, please report this error. The erroneous line: b'solid'\r\n\r\nAnd then falls back to binary loading which also fails.\r\n\r\nThe name of the solid is optional, I believe.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/87", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/87/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/87/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/87", "id": 345370497, "node_id": "MDU6SXNzdWUzNDUzNzA0OTc=", "number": 87, "title": "Combining STL files example", "user": {"login": "TheOncomingStorm", "id": 400942, "node_id": "MDQ6VXNlcjQwMDk0Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/400942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheOncomingStorm", "html_url": "https://github.com/TheOncomingStorm", "followers_url": "https://api.github.com/users/TheOncomingStorm/followers", "following_url": "https://api.github.com/users/TheOncomingStorm/following{/other_user}", "gists_url": "https://api.github.com/users/TheOncomingStorm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheOncomingStorm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheOncomingStorm/subscriptions", "organizations_url": "https://api.github.com/users/TheOncomingStorm/orgs", "repos_url": "https://api.github.com/users/TheOncomingStorm/repos", "events_url": "https://api.github.com/users/TheOncomingStorm/events{/privacy}", "received_events_url": "https://api.github.com/users/TheOncomingStorm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-07-27T21:23:40Z", "updated_at": "2018-12-09T07:08:09Z", "closed_at": "2018-07-29T04:20:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a purpose to the translate/rotate functions in the example for combining STL files? \r\n\r\nI'm trying to do something that should be rather simple but this example makes it incredibly confusing. I'm literally using the Modifying example to create several(like 2700) 3-sided \"cubes\" that I wrap around a cylinder but I need to combine them all once I'm done and the superfluous commands kinda muddy this up for me. \r\n\r\nI do have to give huge kudos though because it took me only an hour to get this far in creating this where most CAD programs have proven exceptionally difficult for something that I'd have considered incredibly simple back when I was doing 3D animations. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/86", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/86/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/86/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/86", "id": 343683844, "node_id": "MDU6SXNzdWUzNDM2ODM4NDQ=", "number": 86, "title": "mesh not closed warning message not relevant in various case. ", "user": {"login": "usrpy", "id": 35731224, "node_id": "MDQ6VXNlcjM1NzMxMjI0", "avatar_url": "https://avatars2.githubusercontent.com/u/35731224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usrpy", "html_url": "https://github.com/usrpy", "followers_url": "https://api.github.com/users/usrpy/followers", "following_url": "https://api.github.com/users/usrpy/following{/other_user}", "gists_url": "https://api.github.com/users/usrpy/gists{/gist_id}", "starred_url": "https://api.github.com/users/usrpy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usrpy/subscriptions", "organizations_url": "https://api.github.com/users/usrpy/orgs", "repos_url": "https://api.github.com/users/usrpy/repos", "events_url": "https://api.github.com/users/usrpy/events{/privacy}", "received_events_url": "https://api.github.com/users/usrpy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-23T15:31:55Z", "updated_at": "2018-07-31T11:17:24Z", "closed_at": "2018-07-30T08:28:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello WoLpH,\r\nThanks for the great job !\r\n\r\nThe warning message here after, seems often to appear even when the mesh is closed.\r\n  \r\nYour mesh is not closed, the mass methods will not function\r\n            correctly on this mesh.  For more info:\r\n            https://github.com/WoLpH/numpy-stl/issues/69\r\n\r\nThis was confirmed using AdMesh **python3-admesh** (from ubuntu synaptic) version 0.98.8-1 (bionic) use to check mesh quality. Counter-check was also done from other professional soft.   \r\n\r\nnote : python 3 script of admesh command line can be shared.\r\n\r\nDoes it would be possible to improve the warning reliability or let the choice to deactivate it when\r\nmesh quality is checked previous its use by another way.\r\n\r\nBest regards\r\nusrpy", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/85", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/85/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/85/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/85", "id": 343022816, "node_id": "MDU6SXNzdWUzNDMwMjI4MTY=", "number": 85, "title": "Cutting/Splitting .stl file", "user": {"login": "DavideBassano", "id": 41295282, "node_id": "MDQ6VXNlcjQxMjk1Mjgy", "avatar_url": "https://avatars1.githubusercontent.com/u/41295282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DavideBassano", "html_url": "https://github.com/DavideBassano", "followers_url": "https://api.github.com/users/DavideBassano/followers", "following_url": "https://api.github.com/users/DavideBassano/following{/other_user}", "gists_url": "https://api.github.com/users/DavideBassano/gists{/gist_id}", "starred_url": "https://api.github.com/users/DavideBassano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DavideBassano/subscriptions", "organizations_url": "https://api.github.com/users/DavideBassano/orgs", "repos_url": "https://api.github.com/users/DavideBassano/repos", "events_url": "https://api.github.com/users/DavideBassano/events{/privacy}", "received_events_url": "https://api.github.com/users/DavideBassano/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 617430855, "node_id": "MDU6TGFiZWw2MTc0MzA4NTU=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/no-activity", "name": "no-activity", "color": "ffffff", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-20T08:45:13Z", "updated_at": "2018-10-06T12:17:12Z", "closed_at": "2018-10-06T12:17:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\nI have an .stl file with z-coordinates from 0 to ~200 (x and y don't matter) and I would like to cut it in z-direction in order to get a smaller one (e.g. with z-coordinates from 0 to 50). (Please see Image 1 - red line has nothing to do with it, it is used for another purpose)\r\n\r\nNow I'm using NetFabb software (https://www.netfabb.com/blog/netfabb-basic-now-just-netfabb) and it works very well (Please see Image 2). Since I'm coding with Python and I'm using that \"original\" .stl file in my Python code, would be useful to have a code to cut this .stl and to generate a new .stl file from the original one, without using any external software.\r\n\r\nIs there a way to do it with numpy-stl?\r\n\r\nThanks,\r\nCheers,\r\n\r\nDavide Bassano\r\n\r\nImage 1:\r\n![99perc](https://user-images.githubusercontent.com/41295282/42992794-e4dd2b6a-8c09-11e8-9c7b-f811780f5d61.png)\r\n\r\nImage 2:\r\n![99perc5cm](https://user-images.githubusercontent.com/41295282/42992783-d77fa31c-8c09-11e8-821c-a716eb03845a.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/84", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/84/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/84/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/84", "id": 336439752, "node_id": "MDU6SXNzdWUzMzY0Mzk3NTI=", "number": 84, "title": "Is there a way to load .stl file with finer detail", "user": {"login": "liruiw", "id": 17783267, "node_id": "MDQ6VXNlcjE3NzgzMjY3", "avatar_url": "https://avatars2.githubusercontent.com/u/17783267?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liruiw", "html_url": "https://github.com/liruiw", "followers_url": "https://api.github.com/users/liruiw/followers", "following_url": "https://api.github.com/users/liruiw/following{/other_user}", "gists_url": "https://api.github.com/users/liruiw/gists{/gist_id}", "starred_url": "https://api.github.com/users/liruiw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liruiw/subscriptions", "organizations_url": "https://api.github.com/users/liruiw/orgs", "repos_url": "https://api.github.com/users/liruiw/repos", "events_url": "https://api.github.com/users/liruiw/events{/privacy}", "received_events_url": "https://api.github.com/users/liruiw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-28T01:17:13Z", "updated_at": "2018-07-10T06:21:50Z", "closed_at": "2018-07-10T06:21:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "When initializing Mesh.from_file(filename), it seems like there's some sampling on the original stl file. I wonder if there's a way to turn off the sampling, and get a very fine mesh of the original stl file as a numpy array", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/82", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/82/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/82/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/82", "id": 335362195, "node_id": "MDU6SXNzdWUzMzUzNjIxOTU=", "number": 82, "title": "Python 3.7: RuntimeError: generator raised StopIteration", "user": {"login": "hroncok", "id": 2401856, "node_id": "MDQ6VXNlcjI0MDE4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2401856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hroncok", "html_url": "https://github.com/hroncok", "followers_url": "https://api.github.com/users/hroncok/followers", "following_url": "https://api.github.com/users/hroncok/following{/other_user}", "gists_url": "https://api.github.com/users/hroncok/gists{/gist_id}", "starred_url": "https://api.github.com/users/hroncok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hroncok/subscriptions", "organizations_url": "https://api.github.com/users/hroncok/orgs", "repos_url": "https://api.github.com/users/hroncok/repos", "events_url": "https://api.github.com/users/hroncok/events{/privacy}", "received_events_url": "https://api.github.com/users/hroncok/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-25T11:14:03Z", "updated_at": "2018-06-25T13:25:07Z", "closed_at": "2018-06-25T13:25:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "See https://docs.python.org/3.7/whatsnew/3.7.html#changes-in-python-behavior and https://www.python.org/dev/peps/pep-0479/\r\n\r\nA generator now cannot raise StopIteration, it should return instead.\r\n\r\n```patch\r\ndiff --git a/tox.ini b/tox.ini\r\nindex 275a844..f8a1057 100644\r\n--- a/tox.ini\r\n+++ b/tox.ini\r\n@@ -1,5 +1,5 @@\r\n [tox]\r\n-envlist = {py27,py33,py34,py35,py36}-{windows-32,windows-64,nix}, docs, flake8\r\n+envlist = {py27,py33,py34,py35,py36,py37}-{windows-32,windows-64,nix}, docs, flake8\r\n skip_missing_interpreters = True\r\n \r\n [testenv]\r\n@@ -12,6 +12,7 @@ basepython =\r\n     py34-nix: python3.4\r\n     py35-nix: python3.5\r\n     py36-nix: python3.6\r\n+    py37-nix: python3.7\r\n     py27-windows-32: C:\\\\Python27\\\\python.exe\r\n     py27-windows-64: C:\\\\Python27-x64\\\\python.exe\r\n     py34-windows-32: C:\\\\Python34\\\\python.exe\r\n```\r\n\r\n```console\r\n$ tox -e py37-nix\r\n```\r\n\r\n(This will take a minute, because it compiles Cython and Numpy...)\r\n\r\n```\r\nGLOB sdist-make: /home/churchyard/Dokumenty/RedHat/numpy-stl/setup.py\r\npy37-nix inst-nodeps: /home/churchyard/Dokumenty/RedHat/numpy-stl/.tox/dist/numpy-stl-2.6.0.zip\r\npy37-nix installed: alabaster==0.7.11,apipkg==1.4,atomicwrites==1.1.5,attrs==18.1.0,Babel==2.6.0,certifi==2018.4.16,chardet==3.0.4,cov-core==1.15.0,coverage==4.5.1,Cython==0.28.3,docutils==0.14,execnet==1.5.0,flake8==3.5.0,idna==2.7,imagesize==1.0.0,Jinja2==2.10,MarkupSafe==1.0,mccabe==0.6.1,more-itertools==4.2.0,numpy==1.14.5,numpy-stl==2.6.0,packaging==17.1,pep8==1.7.1,pluggy==0.6.0,py==1.5.3,pycodestyle==2.3.1,pyflakes==2.0.0,Pygments==2.2.0,pyparsing==2.2.0,pytest==3.6.2,pytest-cache==1.0,pytest-cov==2.5.1,pytest-flakes==3.0.2,pytest-pep8==1.0.6,python-utils==2.3.0,pytz==2018.4,requests==2.19.1,six==1.11.0,snowballstemmer==1.2.1,Sphinx==1.7.5,sphinxcontrib-websupport==1.1.0,urllib3==1.23\r\npy37-nix runtests: PYTHONHASHSEED='2657808664'\r\npy37-nix runtests: commands[0] | python setup.py build_ext --inplace\r\nrunning build_ext\r\ncopying build/lib.linux-x86_64-3.7/stl/_speedups.cpython-37m-x86_64-linux-gnu.so -> stl\r\npy37-nix runtests: commands[1] | python -m pytest -vvv\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.7.0rc1, pytest-3.6.2, py-1.5.3, pluggy-0.6.0 -- /home/churchyard/Dokumenty/RedHat/numpy-stl/.tox/py37-nix/bin/python\r\ncachedir: .pytest_cache\r\nrootdir: /home/churchyard/Dokumenty/RedHat/numpy-stl, inifile: pytest.ini\r\nplugins: pep8-1.0.6, flakes-3.0.2, cov-2.5.1\r\ncollecting ... collected 133 items\r\n\r\nsetup.py SKIPPED                                                         [  0%]\r\nsetup.py PASSED                                                          [  0%]\r\nstl/__about__.py SKIPPED                                                 [  1%]\r\nstl/__about__.py PASSED                                                  [  1%]\r\nstl/__init__.py SKIPPED                                                  [  2%]\r\nstl/__init__.py PASSED                                                   [  2%]\r\nstl/base.py SKIPPED                                                      [  3%]\r\nstl/base.py PASSED                                                       [  3%]\r\nstl/base.py::stl.base.BaseMesh PASSED                                    [  3%]\r\nstl/main.py SKIPPED                                                      [  4%]\r\nstl/main.py PASSED                                                       [  4%]\r\nstl/mesh.py SKIPPED                                                      [  5%]\r\nstl/mesh.py PASSED                                                       [  5%]\r\nstl/stl.py SKIPPED                                                       [  6%]\r\nstl/stl.py PASSED                                                        [  6%]\r\nstl/utils.py SKIPPED                                                     [  6%]\r\nstl/utils.py PASSED                                                      [  6%]\r\ntests/__init__.py SKIPPED                                                [  7%]\r\ntests/__init__.py PASSED                                                 [  7%]\r\ntests/conftest.py SKIPPED                                                [  8%]\r\ntests/conftest.py PASSED                                                 [  8%]\r\ntests/stl_corruption.py SKIPPED                                          [  9%]\r\ntests/stl_corruption.py PASSED                                           [  9%]\r\ntests/stl_corruption.py::test_valid_ascii[False] FAILED                  [  9%]\r\ntests/stl_corruption.py::test_valid_ascii[True] PASSED                   [ 10%]\r\ntests/stl_corruption.py::test_ascii_with_missing_name[False] FAILED      [ 11%]\r\ntests/stl_corruption.py::test_ascii_with_missing_name[True] PASSED       [ 12%]\r\ntests/stl_corruption.py::test_ascii_with_blank_lines[False] FAILED       [ 12%]\r\ntests/stl_corruption.py::test_ascii_with_blank_lines[True] PASSED        [ 13%]\r\ntests/stl_corruption.py::test_incomplete_ascii_file[False] PASSED        [ 14%]\r\ntests/stl_corruption.py::test_incomplete_ascii_file[True] PASSED         [ 15%]\r\ntests/stl_corruption.py::test_corrupt_ascii_file[False] PASSED           [ 15%]\r\ntests/stl_corruption.py::test_corrupt_ascii_file[True] PASSED            [ 16%]\r\ntests/stl_corruption.py::test_corrupt_binary_file[False] PASSED          [ 17%]\r\ntests/stl_corruption.py::test_corrupt_binary_file[True] PASSED           [ 18%]\r\ntests/stl_corruption.py::test_duplicate_polygons[False] PASSED           [ 18%]\r\ntests/stl_corruption.py::test_duplicate_polygons[True] PASSED            [ 19%]\r\ntests/test_ascii.py SKIPPED                                              [ 20%]\r\ntests/test_ascii.py PASSED                                               [ 20%]\r\ntests/test_ascii.py::test_long_name[False] FAILED                        [ 21%]\r\ntests/test_ascii.py::test_long_name[True] PASSED                         [ 21%]\r\ntests/test_ascii.py::test_scientific_notation[False] FAILED              [ 22%]\r\ntests/test_ascii.py::test_scientific_notation[True] PASSED               [ 23%]\r\ntests/test_binary.py SKIPPED                                             [ 24%]\r\ntests/test_binary.py PASSED                                              [ 24%]\r\ntests/test_binary.py::test_ascii_like_binary[False-Mode.BINARY] PASSED   [ 24%]\r\ntests/test_binary.py::test_ascii_like_binary[False-Mode.AUTOMATIC] PASSED [ 25%]\r\ntests/test_binary.py::test_ascii_like_binary[True-Mode.BINARY] PASSED    [ 26%]\r\ntests/test_binary.py::test_ascii_like_binary[True-Mode.AUTOMATIC] PASSED [ 27%]\r\ntests/test_binary.py::test_binary_in_ascii_mode[False] PASSED            [ 27%]\r\ntests/test_binary.py::test_binary_in_ascii_mode[True] PASSED             [ 28%]\r\ntests/test_commandline.py SKIPPED                                        [ 29%]\r\ntests/test_commandline.py PASSED                                         [ 29%]\r\ntests/test_commandline.py::test_main[False] FAILED                       [ 30%]\r\ntests/test_commandline.py::test_main[True] PASSED                        [ 30%]\r\ntests/test_commandline.py::test_args[False] PASSED                       [ 31%]\r\ntests/test_commandline.py::test_args[True] PASSED                        [ 32%]\r\ntests/test_commandline.py::test_ascii[False] PASSED                      [ 33%]\r\ntests/test_commandline.py::test_ascii[True] PASSED                       [ 33%]\r\ntests/test_commandline.py::test_binary[False] FAILED                     [ 34%]\r\ntests/test_commandline.py::test_binary[True] PASSED                      [ 35%]\r\ntests/test_convert.py SKIPPED                                            [ 36%]\r\ntests/test_convert.py PASSED                                             [ 36%]\r\ntests/test_convert.py::test_ascii_to_binary[False] PASSED                [ 36%]\r\ntests/test_convert.py::test_ascii_to_binary[True] PASSED                 [ 37%]\r\ntests/test_convert.py::test_binary_to_ascii[False] PASSED                [ 38%]\r\ntests/test_convert.py::test_binary_to_ascii[True] PASSED                 [ 39%]\r\ntests/test_convert.py::test_stl_mesh[False] FAILED                       [ 39%]\r\ntests/test_convert.py::test_stl_mesh[True] PASSED                        [ 40%]\r\ntests/test_mesh.py SKIPPED                                               [ 41%]\r\ntests/test_mesh.py PASSED                                                [ 41%]\r\ntests/test_mesh.py::test_units_1d[False] PASSED                          [ 42%]\r\ntests/test_mesh.py::test_units_1d[True] PASSED                           [ 42%]\r\ntests/test_mesh.py::test_units_2d[False] PASSED                          [ 43%]\r\ntests/test_mesh.py::test_units_2d[True] PASSED                           [ 44%]\r\ntests/test_mesh.py::test_units_3d[False] PASSED                          [ 45%]\r\ntests/test_mesh.py::test_units_3d[True] PASSED                           [ 45%]\r\ntests/test_mesh.py::test_duplicate_polygons[False] PASSED                [ 46%]\r\ntests/test_mesh.py::test_duplicate_polygons[True] PASSED                 [ 47%]\r\ntests/test_mesh.py::test_remove_all_duplicate_polygons[False] PASSED     [ 48%]\r\ntests/test_mesh.py::test_remove_all_duplicate_polygons[True] PASSED      [ 48%]\r\ntests/test_mesh.py::test_empty_areas[False] PASSED                       [ 49%]\r\ntests/test_mesh.py::test_empty_areas[True] PASSED                        [ 50%]\r\ntests/test_mesh.py::test_base_mesh[False] PASSED                         [ 51%]\r\ntests/test_mesh.py::test_base_mesh[True] PASSED                          [ 51%]\r\ntests/test_meshProperties.py SKIPPED                                     [ 52%]\r\ntests/test_meshProperties.py PASSED                                      [ 52%]\r\ntests/test_meshProperties.py::test_mass_properties_for_half_donut[ascii-False] FAILED [ 53%]\r\ntests/test_meshProperties.py::test_mass_properties_for_half_donut[ascii-True] PASSED [ 54%]\r\ntests/test_meshProperties.py::test_mass_properties_for_moon[ascii-False] FAILED [ 54%]\r\ntests/test_meshProperties.py::test_mass_properties_for_moon[ascii-True] PASSED [ 55%]\r\ntests/test_meshProperties.py::test_mass_properties_for_star[ascii-False-Star.stl] FAILED [ 56%]\r\ntests/test_meshProperties.py::test_mass_properties_for_star[ascii-False-StarWithEmptyHeader.stl] SKIPPED [ 57%]\r\ntests/test_meshProperties.py::test_mass_properties_for_star[ascii-True-Star.stl] PASSED [ 57%]\r\ntests/test_meshProperties.py::test_mass_properties_for_star[ascii-True-StarWithEmptyHeader.stl] SKIPPED [ 58%]\r\ntests/test_meshProperties.py::test_mass_properties_for_half_donut[binary-False] PASSED [ 59%]\r\ntests/test_meshProperties.py::test_mass_properties_for_half_donut[binary-True] PASSED [ 60%]\r\ntests/test_meshProperties.py::test_mass_properties_for_moon[binary-False] PASSED [ 60%]\r\ntests/test_meshProperties.py::test_mass_properties_for_moon[binary-True] PASSED [ 61%]\r\ntests/test_meshProperties.py::test_mass_properties_for_star[binary-False-Star.stl] PASSED [ 62%]\r\ntests/test_meshProperties.py::test_mass_properties_for_star[binary-False-StarWithEmptyHeader.stl] PASSED [ 63%]\r\ntests/test_meshProperties.py::test_mass_properties_for_star[binary-True-Star.stl] PASSED [ 63%]\r\ntests/test_meshProperties.py::test_mass_properties_for_star[binary-True-StarWithEmptyHeader.stl] PASSED [ 64%]\r\ntests/test_multiple.py SKIPPED                                           [ 65%]\r\ntests/test_multiple.py PASSED                                            [ 65%]\r\ntests/test_multiple.py::test_single_stl[False] FAILED                    [ 66%]\r\ntests/test_multiple.py::test_single_stl[True] PASSED                     [ 66%]\r\ntests/test_multiple.py::test_multiple_stl[False] FAILED                  [ 67%]\r\ntests/test_multiple.py::test_multiple_stl[True] PASSED                   [ 68%]\r\ntests/test_multiple.py::test_single_stl_file[False] FAILED               [ 69%]\r\ntests/test_multiple.py::test_single_stl_file[True] PASSED                [ 69%]\r\ntests/test_multiple.py::test_multiple_stl_file[False] FAILED             [ 70%]\r\ntests/test_multiple.py::test_multiple_stl_file[True] PASSED              [ 71%]\r\ntests/test_rotate.py SKIPPED                                             [ 72%]\r\ntests/test_rotate.py PASSED                                              [ 72%]\r\ntests/test_rotate.py::test_rotation[False] PASSED                        [ 72%]\r\ntests/test_rotate.py::test_rotation[True] PASSED                         [ 73%]\r\ntests/test_rotate.py::test_rotation_over_point[False] PASSED             [ 74%]\r\ntests/test_rotate.py::test_rotation_over_point[True] PASSED              [ 75%]\r\ntests/test_rotate.py::test_double_rotation[False] PASSED                 [ 75%]\r\ntests/test_rotate.py::test_double_rotation[True] PASSED                  [ 76%]\r\ntests/test_rotate.py::test_no_rotation[False] PASSED                     [ 77%]\r\ntests/test_rotate.py::test_no_rotation[True] PASSED                      [ 78%]\r\ntests/test_rotate.py::test_no_translation[False] PASSED                  [ 78%]\r\ntests/test_rotate.py::test_no_translation[True] PASSED                   [ 79%]\r\ntests/test_rotate.py::test_translation[False] PASSED                     [ 80%]\r\ntests/test_rotate.py::test_translation[True] PASSED                      [ 81%]\r\ntests/test_rotate.py::test_no_transformation[False] PASSED               [ 81%]\r\ntests/test_rotate.py::test_no_transformation[True] PASSED                [ 82%]\r\ntests/test_rotate.py::test_transformation[False] PASSED                  [ 83%]\r\ntests/test_rotate.py::test_transformation[True] PASSED                   [ 84%]\r\ntests/utils.py SKIPPED                                                   [ 84%]\r\ntests/utils.py PASSED                                                    [ 84%]\r\n\r\n=================================== FAILURES ===================================\r\n___________________________ test_valid_ascii[False] ____________________________\r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.TextIOWrapper name='/tmp/pytest-of-churchyard/pytest-1/test_valid_ascii_False_0/tmp.stl' mode='w+' encoding='UTF-8'>\r\nheader = b'solid test.stl\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    vertex'\r\n\r\n    @classmethod\r\n    def _ascii_reader(cls, fh, header):\r\n        if b'\\n' in header:\r\n            recoverable = [True]\r\n        else:\r\n            recoverable = [False]\r\n            header += b(fh.read(BUFFER_SIZE))\r\n    \r\n        lines = b(header).split(b('\\n'))\r\n    \r\n        def get(prefix=''):\r\n            prefix = b(prefix)\r\n    \r\n            if lines:\r\n                line = lines.pop(0)\r\n            else:\r\n                raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n            if not lines:\r\n                recoverable[0] = False\r\n    \r\n                # Read more lines and make sure we prepend any old data\r\n                lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n                line += lines.pop(0)\r\n    \r\n            line = line.lower().strip()\r\n            if line == b(''):\r\n                return get(prefix)\r\n    \r\n            if prefix:\r\n                if line.startswith(prefix):\r\n                    values = line.replace(prefix, b(''), 1).strip().split()\r\n                elif line.startswith(b('endsolid')):\r\n                    # go back to the beginning of new solid part\r\n                    size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                    if size_unprocessedlines > 0:\r\n                        position = fh.tell()\r\n                        fh.seek(position - size_unprocessedlines)\r\n                    raise StopIteration()\r\n                else:\r\n                    raise RuntimeError(recoverable[0],\r\n                                       '%r should start with %r' % (line,\r\n                                                                    prefix))\r\n    \r\n                if len(values) == 3:\r\n                    return [float(v) for v in values]\r\n                else:  # pragma: no cover\r\n                    raise RuntimeError(recoverable[0],\r\n                                       'Incorrect value %r' % line)\r\n            else:\r\n                return b(line)\r\n    \r\n        line = get()\r\n        if not line.startswith(b('solid ')) and line.startswith(b('solid')):\r\n            cls.warning('ASCII STL files should start with solid <space>. '\r\n                        'The application that produced this STL file may be '\r\n                        'faulty, please report this error. The erroneous '\r\n                        'line: %r', line)\r\n    \r\n        if not lines:\r\n            raise RuntimeError(recoverable[0],\r\n                               'No lines found, impossible to read')\r\n    \r\n        # Yield the name\r\n        yield line[5:].strip()\r\n    \r\n        while True:\r\n            # Read from the header lines first, until that point we can recover\r\n            # and go to the binary option. After that we cannot due to\r\n            # unseekable files such as sys.stdin\r\n            #\r\n            # Numpy doesn't support any non-file types so wrapping with a\r\n            # buffer and/or StringIO does not work.\r\n            try:\r\n>               normals = get('facet normal')\r\n\r\nstl/stl.py:205: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nprefix = b'facet normal'\r\n\r\n    def get(prefix=''):\r\n        prefix = b(prefix)\r\n    \r\n        if lines:\r\n            line = lines.pop(0)\r\n        else:\r\n            raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n        if not lines:\r\n            recoverable[0] = False\r\n    \r\n            # Read more lines and make sure we prepend any old data\r\n            lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n            line += lines.pop(0)\r\n    \r\n        line = line.lower().strip()\r\n        if line == b(''):\r\n            return get(prefix)\r\n    \r\n        if prefix:\r\n            if line.startswith(prefix):\r\n                values = line.replace(prefix, b(''), 1).strip().split()\r\n            elif line.startswith(b('endsolid')):\r\n                # go back to the beginning of new solid part\r\n                size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                if size_unprocessedlines > 0:\r\n                    position = fh.tell()\r\n                    fh.seek(position - size_unprocessedlines)\r\n>               raise StopIteration()\r\nE               StopIteration\r\n\r\nstl/stl.py:169: StopIteration\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.TextIOWrapper name='/tmp/pytest-of-churchyard/pytest-1/test_valid_ascii_False_0/tmp.stl' mode='w+' encoding='UTF-8'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n>                   fh, header, speedups=speedups)\r\n\r\nstl/stl.py:75: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.TextIOWrapper name='/tmp/pytest-of-churchyard/pytest-1/test_valid_ascii_False_0/tmp.stl' mode='w+' encoding='UTF-8'>\r\nheader = b'solid test.stl\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    vertex'\r\nspeedups = False\r\n\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        # The speedups module is covered by travis but it can't be tested in\r\n        # all environments, this makes coverage checks easier\r\n        if _speedups and speedups:  # pragma: no cover\r\n            return _speedups.ascii_read(fh, header)\r\n        else:\r\n            iterator = cls._ascii_reader(fh, header)\r\n            name = next(iterator)\r\n>           return name, numpy.fromiter(iterator, dtype=cls.dtype)\r\nE           RuntimeError: generator raised StopIteration\r\n\r\nstl/stl.py:228: RuntimeError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\ntmpdir = local('/tmp/pytest-of-churchyard/pytest-1/test_valid_ascii_False_0')\r\nspeedups = False\r\n\r\n    def test_valid_ascii(tmpdir, speedups):\r\n        tmp_file = tmpdir.join('tmp.stl')\r\n        with tmp_file.open('w+') as fh:\r\n            fh.write(_STL_FILE)\r\n            fh.seek(0)\r\n>           mesh.Mesh.from_file(str(tmp_file), fh=fh, speedups=speedups)\r\n\r\ntests/stl_corruption.py:26: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/stl.py:329: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.TextIOWrapper name='/tmp/pytest-of-churchyard/pytest-1/test_valid_ascii_False_0/tmp.stl' mode='w+' encoding='UTF-8'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n                    fh, header, speedups=speedups)\r\n            except RuntimeError as exception:\r\n                # Disable fallbacks in ASCII mode\r\n                if mode is ASCII:\r\n                    raise\r\n    \r\n>               (recoverable, e) = exception.args\r\nE               ValueError: not enough values to unpack (expected 2, got 1)\r\n\r\nstl/stl.py:81: ValueError\r\n_____________________ test_ascii_with_missing_name[False] ______________________\r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.TextIOWrapper name='/tmp/pytest-of-churchyard/pytest-1/test_ascii_with_missing_name_F0/tmp.stl' mode='w+' encoding='UTF-8'>\r\nheader = b'solid\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    vertex 0.399344'\r\n\r\n    @classmethod\r\n    def _ascii_reader(cls, fh, header):\r\n        if b'\\n' in header:\r\n            recoverable = [True]\r\n        else:\r\n            recoverable = [False]\r\n            header += b(fh.read(BUFFER_SIZE))\r\n    \r\n        lines = b(header).split(b('\\n'))\r\n    \r\n        def get(prefix=''):\r\n            prefix = b(prefix)\r\n    \r\n            if lines:\r\n                line = lines.pop(0)\r\n            else:\r\n                raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n            if not lines:\r\n                recoverable[0] = False\r\n    \r\n                # Read more lines and make sure we prepend any old data\r\n                lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n                line += lines.pop(0)\r\n    \r\n            line = line.lower().strip()\r\n            if line == b(''):\r\n                return get(prefix)\r\n    \r\n            if prefix:\r\n                if line.startswith(prefix):\r\n                    values = line.replace(prefix, b(''), 1).strip().split()\r\n                elif line.startswith(b('endsolid')):\r\n                    # go back to the beginning of new solid part\r\n                    size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                    if size_unprocessedlines > 0:\r\n                        position = fh.tell()\r\n                        fh.seek(position - size_unprocessedlines)\r\n                    raise StopIteration()\r\n                else:\r\n                    raise RuntimeError(recoverable[0],\r\n                                       '%r should start with %r' % (line,\r\n                                                                    prefix))\r\n    \r\n                if len(values) == 3:\r\n                    return [float(v) for v in values]\r\n                else:  # pragma: no cover\r\n                    raise RuntimeError(recoverable[0],\r\n                                       'Incorrect value %r' % line)\r\n            else:\r\n                return b(line)\r\n    \r\n        line = get()\r\n        if not line.startswith(b('solid ')) and line.startswith(b('solid')):\r\n            cls.warning('ASCII STL files should start with solid <space>. '\r\n                        'The application that produced this STL file may be '\r\n                        'faulty, please report this error. The erroneous '\r\n                        'line: %r', line)\r\n    \r\n        if not lines:\r\n            raise RuntimeError(recoverable[0],\r\n                               'No lines found, impossible to read')\r\n    \r\n        # Yield the name\r\n        yield line[5:].strip()\r\n    \r\n        while True:\r\n            # Read from the header lines first, until that point we can recover\r\n            # and go to the binary option. After that we cannot due to\r\n            # unseekable files such as sys.stdin\r\n            #\r\n            # Numpy doesn't support any non-file types so wrapping with a\r\n            # buffer and/or StringIO does not work.\r\n            try:\r\n>               normals = get('facet normal')\r\n\r\nstl/stl.py:205: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nprefix = b'facet normal'\r\n\r\n    def get(prefix=''):\r\n        prefix = b(prefix)\r\n    \r\n        if lines:\r\n            line = lines.pop(0)\r\n        else:\r\n            raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n        if not lines:\r\n            recoverable[0] = False\r\n    \r\n            # Read more lines and make sure we prepend any old data\r\n            lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n            line += lines.pop(0)\r\n    \r\n        line = line.lower().strip()\r\n        if line == b(''):\r\n            return get(prefix)\r\n    \r\n        if prefix:\r\n            if line.startswith(prefix):\r\n                values = line.replace(prefix, b(''), 1).strip().split()\r\n            elif line.startswith(b('endsolid')):\r\n                # go back to the beginning of new solid part\r\n                size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                if size_unprocessedlines > 0:\r\n                    position = fh.tell()\r\n                    fh.seek(position - size_unprocessedlines)\r\n>               raise StopIteration()\r\nE               StopIteration\r\n\r\nstl/stl.py:169: StopIteration\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.TextIOWrapper name='/tmp/pytest-of-churchyard/pytest-1/test_ascii_with_missing_name_F0/tmp.stl' mode='w+' encoding='UTF-8'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n>                   fh, header, speedups=speedups)\r\n\r\nstl/stl.py:75: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.TextIOWrapper name='/tmp/pytest-of-churchyard/pytest-1/test_ascii_with_missing_name_F0/tmp.stl' mode='w+' encoding='UTF-8'>\r\nheader = b'solid\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    vertex 0.399344'\r\nspeedups = False\r\n\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        # The speedups module is covered by travis but it can't be tested in\r\n        # all environments, this makes coverage checks easier\r\n        if _speedups and speedups:  # pragma: no cover\r\n            return _speedups.ascii_read(fh, header)\r\n        else:\r\n            iterator = cls._ascii_reader(fh, header)\r\n            name = next(iterator)\r\n>           return name, numpy.fromiter(iterator, dtype=cls.dtype)\r\nE           RuntimeError: generator raised StopIteration\r\n\r\nstl/stl.py:228: RuntimeError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\ntmpdir = local('/tmp/pytest-of-churchyard/pytest-1/test_ascii_with_missing_name_F0')\r\nspeedups = False\r\n\r\n    def test_ascii_with_missing_name(tmpdir, speedups):\r\n        tmp_file = tmpdir.join('tmp.stl')\r\n        with tmp_file.open('w+') as fh:\r\n            # Split the file into lines\r\n            lines = _STL_FILE.splitlines()\r\n    \r\n            # Remove everything except solid\r\n            lines[0] = lines[0].split()[0]\r\n    \r\n            # Join the lines to test files that start with solid without space\r\n            fh.write('\\n'.join(lines))\r\n            fh.seek(0)\r\n>           mesh.Mesh.from_file(str(tmp_file), fh=fh, speedups=speedups)\r\n\r\ntests/stl_corruption.py:41: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/stl.py:329: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.TextIOWrapper name='/tmp/pytest-of-churchyard/pytest-1/test_ascii_with_missing_name_F0/tmp.stl' mode='w+' encoding='UTF-8'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n                    fh, header, speedups=speedups)\r\n            except RuntimeError as exception:\r\n                # Disable fallbacks in ASCII mode\r\n                if mode is ASCII:\r\n                    raise\r\n    \r\n>               (recoverable, e) = exception.args\r\nE               ValueError: not enough values to unpack (expected 2, got 1)\r\n\r\nstl/stl.py:81: ValueError\r\n------------------------------ Captured log call -------------------------------\r\nlogger.py                   46 WARNING  ASCII STL files should start with solid <space>. The application that produced this STL file may be faulty, please report this error. The erroneous line: b'solid'\r\n______________________ test_ascii_with_blank_lines[False] ______________________\r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.TextIOWrapper name='/tmp/pytest-of-churchyard/pytest-1/test_ascii_with_blank_lines_Fa0/tmp.stl' mode='w+' encoding='UTF-8'>\r\nheader = b'solid test.stl\\n\\n\\n      facet normal -0.014565 0.073223 -0.002897\\n\\n        outer '\r\n\r\n    @classmethod\r\n    def _ascii_reader(cls, fh, header):\r\n        if b'\\n' in header:\r\n            recoverable = [True]\r\n        else:\r\n            recoverable = [False]\r\n            header += b(fh.read(BUFFER_SIZE))\r\n    \r\n        lines = b(header).split(b('\\n'))\r\n    \r\n        def get(prefix=''):\r\n            prefix = b(prefix)\r\n    \r\n            if lines:\r\n                line = lines.pop(0)\r\n            else:\r\n                raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n            if not lines:\r\n                recoverable[0] = False\r\n    \r\n                # Read more lines and make sure we prepend any old data\r\n                lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n                line += lines.pop(0)\r\n    \r\n            line = line.lower().strip()\r\n            if line == b(''):\r\n                return get(prefix)\r\n    \r\n            if prefix:\r\n                if line.startswith(prefix):\r\n                    values = line.replace(prefix, b(''), 1).strip().split()\r\n                elif line.startswith(b('endsolid')):\r\n                    # go back to the beginning of new solid part\r\n                    size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                    if size_unprocessedlines > 0:\r\n                        position = fh.tell()\r\n                        fh.seek(position - size_unprocessedlines)\r\n                    raise StopIteration()\r\n                else:\r\n                    raise RuntimeError(recoverable[0],\r\n                                       '%r should start with %r' % (line,\r\n                                                                    prefix))\r\n    \r\n                if len(values) == 3:\r\n                    return [float(v) for v in values]\r\n                else:  # pragma: no cover\r\n                    raise RuntimeError(recoverable[0],\r\n                                       'Incorrect value %r' % line)\r\n            else:\r\n                return b(line)\r\n    \r\n        line = get()\r\n        if not line.startswith(b('solid ')) and line.startswith(b('solid')):\r\n            cls.warning('ASCII STL files should start with solid <space>. '\r\n                        'The application that produced this STL file may be '\r\n                        'faulty, please report this error. The erroneous '\r\n                        'line: %r', line)\r\n    \r\n        if not lines:\r\n            raise RuntimeError(recoverable[0],\r\n                               'No lines found, impossible to read')\r\n    \r\n        # Yield the name\r\n        yield line[5:].strip()\r\n    \r\n        while True:\r\n            # Read from the header lines first, until that point we can recover\r\n            # and go to the binary option. After that we cannot due to\r\n            # unseekable files such as sys.stdin\r\n            #\r\n            # Numpy doesn't support any non-file types so wrapping with a\r\n            # buffer and/or StringIO does not work.\r\n            try:\r\n>               normals = get('facet normal')\r\n\r\nstl/stl.py:205: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nprefix = b'facet normal'\r\n\r\n    def get(prefix=''):\r\n        prefix = b(prefix)\r\n    \r\n        if lines:\r\n            line = lines.pop(0)\r\n        else:\r\n            raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n        if not lines:\r\n            recoverable[0] = False\r\n    \r\n            # Read more lines and make sure we prepend any old data\r\n            lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n            line += lines.pop(0)\r\n    \r\n        line = line.lower().strip()\r\n        if line == b(''):\r\n>           return get(prefix)\r\n\r\nstl/stl.py:158: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nprefix = b'facet normal'\r\n\r\n    def get(prefix=''):\r\n        prefix = b(prefix)\r\n    \r\n        if lines:\r\n            line = lines.pop(0)\r\n        else:\r\n            raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n        if not lines:\r\n            recoverable[0] = False\r\n    \r\n            # Read more lines and make sure we prepend any old data\r\n            lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n            line += lines.pop(0)\r\n    \r\n        line = line.lower().strip()\r\n        if line == b(''):\r\n            return get(prefix)\r\n    \r\n        if prefix:\r\n            if line.startswith(prefix):\r\n                values = line.replace(prefix, b(''), 1).strip().split()\r\n            elif line.startswith(b('endsolid')):\r\n                # go back to the beginning of new solid part\r\n                size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                if size_unprocessedlines > 0:\r\n                    position = fh.tell()\r\n                    fh.seek(position - size_unprocessedlines)\r\n>               raise StopIteration()\r\nE               StopIteration\r\n\r\nstl/stl.py:169: StopIteration\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.TextIOWrapper name='/tmp/pytest-of-churchyard/pytest-1/test_ascii_with_blank_lines_Fa0/tmp.stl' mode='w+' encoding='UTF-8'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n>                   fh, header, speedups=speedups)\r\n\r\nstl/stl.py:75: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.TextIOWrapper name='/tmp/pytest-of-churchyard/pytest-1/test_ascii_with_blank_lines_Fa0/tmp.stl' mode='w+' encoding='UTF-8'>\r\nheader = b'solid test.stl\\n\\n\\n      facet normal -0.014565 0.073223 -0.002897\\n\\n        outer '\r\nspeedups = False\r\n\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        # The speedups module is covered by travis but it can't be tested in\r\n        # all environments, this makes coverage checks easier\r\n        if _speedups and speedups:  # pragma: no cover\r\n            return _speedups.ascii_read(fh, header)\r\n        else:\r\n            iterator = cls._ascii_reader(fh, header)\r\n            name = next(iterator)\r\n>           return name, numpy.fromiter(iterator, dtype=cls.dtype)\r\nE           RuntimeError: generator raised StopIteration\r\n\r\nstl/stl.py:228: RuntimeError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\ntmpdir = local('/tmp/pytest-of-churchyard/pytest-1/test_ascii_with_blank_lines_Fa0')\r\nspeedups = False\r\n\r\n    def test_ascii_with_blank_lines(tmpdir, speedups):\r\n        _stl_file = '''\r\n        solid test.stl\r\n    \r\n    \r\n          facet normal -0.014565 0.073223 -0.002897\r\n    \r\n            outer loop\r\n    \r\n              vertex 0.399344 0.461940 1.044090\r\n              vertex 0.500000 0.500000 1.500000\r\n    \r\n              vertex 0.576120 0.500000 1.117320\r\n    \r\n            endloop\r\n    \r\n          endfacet\r\n    \r\n        endsolid test.stl\r\n        '''.lstrip()\r\n    \r\n        tmp_file = tmpdir.join('tmp.stl')\r\n        with tmp_file.open('w+') as fh:\r\n            fh.write(_stl_file)\r\n            fh.seek(0)\r\n>           mesh.Mesh.from_file(str(tmp_file), fh=fh, speedups=speedups)\r\n\r\ntests/stl_corruption.py:69: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/stl.py:329: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.TextIOWrapper name='/tmp/pytest-of-churchyard/pytest-1/test_ascii_with_blank_lines_Fa0/tmp.stl' mode='w+' encoding='UTF-8'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n                    fh, header, speedups=speedups)\r\n            except RuntimeError as exception:\r\n                # Disable fallbacks in ASCII mode\r\n                if mode is ASCII:\r\n                    raise\r\n    \r\n>               (recoverable, e) = exception.args\r\nE               ValueError: not enough values to unpack (expected 2, got 1)\r\n\r\nstl/stl.py:81: ValueError\r\n____________________________ test_long_name[False] _____________________________\r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.BufferedRandom name='/tmp/pytest-of-churchyard/pytest-1/test_long_name_False_0/tmp.stl'>\r\nheader = b'solid just some very long name which will not fit within the standardjust some very long name which will not fit wit...00 0.500000 1.500000\\n          vertex 0.576120 0.500000 1.117320\\n        endloop\\n      endfacet\\n    endsolid\\n    '\r\n\r\n    @classmethod\r\n    def _ascii_reader(cls, fh, header):\r\n        if b'\\n' in header:\r\n            recoverable = [True]\r\n        else:\r\n            recoverable = [False]\r\n            header += b(fh.read(BUFFER_SIZE))\r\n    \r\n        lines = b(header).split(b('\\n'))\r\n    \r\n        def get(prefix=''):\r\n            prefix = b(prefix)\r\n    \r\n            if lines:\r\n                line = lines.pop(0)\r\n            else:\r\n                raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n            if not lines:\r\n                recoverable[0] = False\r\n    \r\n                # Read more lines and make sure we prepend any old data\r\n                lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n                line += lines.pop(0)\r\n    \r\n            line = line.lower().strip()\r\n            if line == b(''):\r\n                return get(prefix)\r\n    \r\n            if prefix:\r\n                if line.startswith(prefix):\r\n                    values = line.replace(prefix, b(''), 1).strip().split()\r\n                elif line.startswith(b('endsolid')):\r\n                    # go back to the beginning of new solid part\r\n                    size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                    if size_unprocessedlines > 0:\r\n                        position = fh.tell()\r\n                        fh.seek(position - size_unprocessedlines)\r\n                    raise StopIteration()\r\n                else:\r\n                    raise RuntimeError(recoverable[0],\r\n                                       '%r should start with %r' % (line,\r\n                                                                    prefix))\r\n    \r\n                if len(values) == 3:\r\n                    return [float(v) for v in values]\r\n                else:  # pragma: no cover\r\n                    raise RuntimeError(recoverable[0],\r\n                                       'Incorrect value %r' % line)\r\n            else:\r\n                return b(line)\r\n    \r\n        line = get()\r\n        if not line.startswith(b('solid ')) and line.startswith(b('solid')):\r\n            cls.warning('ASCII STL files should start with solid <space>. '\r\n                        'The application that produced this STL file may be '\r\n                        'faulty, please report this error. The erroneous '\r\n                        'line: %r', line)\r\n    \r\n        if not lines:\r\n            raise RuntimeError(recoverable[0],\r\n                               'No lines found, impossible to read')\r\n    \r\n        # Yield the name\r\n        yield line[5:].strip()\r\n    \r\n        while True:\r\n            # Read from the header lines first, until that point we can recover\r\n            # and go to the binary option. After that we cannot due to\r\n            # unseekable files such as sys.stdin\r\n            #\r\n            # Numpy doesn't support any non-file types so wrapping with a\r\n            # buffer and/or StringIO does not work.\r\n            try:\r\n>               normals = get('facet normal')\r\n\r\nstl/stl.py:205: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nprefix = b'facet normal'\r\n\r\n    def get(prefix=''):\r\n        prefix = b(prefix)\r\n    \r\n        if lines:\r\n            line = lines.pop(0)\r\n        else:\r\n            raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n        if not lines:\r\n            recoverable[0] = False\r\n    \r\n            # Read more lines and make sure we prepend any old data\r\n            lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n            line += lines.pop(0)\r\n    \r\n        line = line.lower().strip()\r\n        if line == b(''):\r\n            return get(prefix)\r\n    \r\n        if prefix:\r\n            if line.startswith(prefix):\r\n                values = line.replace(prefix, b(''), 1).strip().split()\r\n            elif line.startswith(b('endsolid')):\r\n                # go back to the beginning of new solid part\r\n                size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                if size_unprocessedlines > 0:\r\n                    position = fh.tell()\r\n                    fh.seek(position - size_unprocessedlines)\r\n>               raise StopIteration()\r\nE               StopIteration\r\n\r\nstl/stl.py:169: StopIteration\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.BufferedRandom name='/tmp/pytest-of-churchyard/pytest-1/test_long_name_False_0/tmp.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n>                   fh, header, speedups=speedups)\r\n\r\nstl/stl.py:75: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.BufferedRandom name='/tmp/pytest-of-churchyard/pytest-1/test_long_name_False_0/tmp.stl'>\r\nheader = b'solid just some very long name which will not fit within the standardjust some v'\r\nspeedups = False\r\n\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        # The speedups module is covered by travis but it can't be tested in\r\n        # all environments, this makes coverage checks easier\r\n        if _speedups and speedups:  # pragma: no cover\r\n            return _speedups.ascii_read(fh, header)\r\n        else:\r\n            iterator = cls._ascii_reader(fh, header)\r\n            name = next(iterator)\r\n>           return name, numpy.fromiter(iterator, dtype=cls.dtype)\r\nE           RuntimeError: generator raised StopIteration\r\n\r\nstl/stl.py:228: RuntimeError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\ntmpdir = local('/tmp/pytest-of-churchyard/pytest-1/test_long_name_False_0')\r\nspeedups = False\r\n\r\n    def test_long_name(tmpdir, speedups):\r\n        name = 'just some very long name which will not fit within the standard'\r\n        name += name\r\n        _stl_file = ('''\r\n        solid %s\r\n          facet normal -0.014565 0.073223 -0.002897\r\n            outer loop\r\n              vertex 0.399344 0.461940 1.044090\r\n              vertex 0.500000 0.500000 1.500000\r\n              vertex 0.576120 0.500000 1.117320\r\n            endloop\r\n          endfacet\r\n        endsolid\r\n        ''' % name).lstrip()\r\n    \r\n        tmp_file = tmpdir.join('tmp.stl')\r\n        with tmp_file.open('wb+') as fh:\r\n            fh.write(b(_stl_file))\r\n            fh.seek(0)\r\n            test_mesh = mesh.Mesh.from_file(str(tmp_file), fh=fh,\r\n>                                           speedups=speedups)\r\n\r\ntests/test_ascii.py:25: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/stl.py:329: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.BufferedRandom name='/tmp/pytest-of-churchyard/pytest-1/test_long_name_False_0/tmp.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n                    fh, header, speedups=speedups)\r\n            except RuntimeError as exception:\r\n                # Disable fallbacks in ASCII mode\r\n                if mode is ASCII:\r\n                    raise\r\n    \r\n>               (recoverable, e) = exception.args\r\nE               ValueError: not enough values to unpack (expected 2, got 1)\r\n\r\nstl/stl.py:81: ValueError\r\n_______________________ test_scientific_notation[False] ________________________\r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.BufferedRandom name='/tmp/pytest-of-churchyard/pytest-1/test_scientific_notation_False0/tmp.stl'>\r\nheader = b'solid just some very long name which will not fit within the standardjust some very long name which will not fit wit...000e-5 5.00000e-5 1.500000e-3\\n          vertex 0 2.22045e-15 -10\\n        endloop\\n      endfacet\\n    endsolid\\n    '\r\n\r\n    @classmethod\r\n    def _ascii_reader(cls, fh, header):\r\n        if b'\\n' in header:\r\n            recoverable = [True]\r\n        else:\r\n            recoverable = [False]\r\n            header += b(fh.read(BUFFER_SIZE))\r\n    \r\n        lines = b(header).split(b('\\n'))\r\n    \r\n        def get(prefix=''):\r\n            prefix = b(prefix)\r\n    \r\n            if lines:\r\n                line = lines.pop(0)\r\n            else:\r\n                raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n            if not lines:\r\n                recoverable[0] = False\r\n    \r\n                # Read more lines and make sure we prepend any old data\r\n                lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n                line += lines.pop(0)\r\n    \r\n            line = line.lower().strip()\r\n            if line == b(''):\r\n                return get(prefix)\r\n    \r\n            if prefix:\r\n                if line.startswith(prefix):\r\n                    values = line.replace(prefix, b(''), 1).strip().split()\r\n                elif line.startswith(b('endsolid')):\r\n                    # go back to the beginning of new solid part\r\n                    size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                    if size_unprocessedlines > 0:\r\n                        position = fh.tell()\r\n                        fh.seek(position - size_unprocessedlines)\r\n                    raise StopIteration()\r\n                else:\r\n                    raise RuntimeError(recoverable[0],\r\n                                       '%r should start with %r' % (line,\r\n                                                                    prefix))\r\n    \r\n                if len(values) == 3:\r\n                    return [float(v) for v in values]\r\n                else:  # pragma: no cover\r\n                    raise RuntimeError(recoverable[0],\r\n                                       'Incorrect value %r' % line)\r\n            else:\r\n                return b(line)\r\n    \r\n        line = get()\r\n        if not line.startswith(b('solid ')) and line.startswith(b('solid')):\r\n            cls.warning('ASCII STL files should start with solid <space>. '\r\n                        'The application that produced this STL file may be '\r\n                        'faulty, please report this error. The erroneous '\r\n                        'line: %r', line)\r\n    \r\n        if not lines:\r\n            raise RuntimeError(recoverable[0],\r\n                               'No lines found, impossible to read')\r\n    \r\n        # Yield the name\r\n        yield line[5:].strip()\r\n    \r\n        while True:\r\n            # Read from the header lines first, until that point we can recover\r\n            # and go to the binary option. After that we cannot due to\r\n            # unseekable files such as sys.stdin\r\n            #\r\n            # Numpy doesn't support any non-file types so wrapping with a\r\n            # buffer and/or StringIO does not work.\r\n            try:\r\n>               normals = get('facet normal')\r\n\r\nstl/stl.py:205: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nprefix = b'facet normal'\r\n\r\n    def get(prefix=''):\r\n        prefix = b(prefix)\r\n    \r\n        if lines:\r\n            line = lines.pop(0)\r\n        else:\r\n            raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n        if not lines:\r\n            recoverable[0] = False\r\n    \r\n            # Read more lines and make sure we prepend any old data\r\n            lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n            line += lines.pop(0)\r\n    \r\n        line = line.lower().strip()\r\n        if line == b(''):\r\n            return get(prefix)\r\n    \r\n        if prefix:\r\n            if line.startswith(prefix):\r\n                values = line.replace(prefix, b(''), 1).strip().split()\r\n            elif line.startswith(b('endsolid')):\r\n                # go back to the beginning of new solid part\r\n                size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                if size_unprocessedlines > 0:\r\n                    position = fh.tell()\r\n                    fh.seek(position - size_unprocessedlines)\r\n>               raise StopIteration()\r\nE               StopIteration\r\n\r\nstl/stl.py:169: StopIteration\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.BufferedRandom name='/tmp/pytest-of-churchyard/pytest-1/test_scientific_notation_False0/tmp.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n>                   fh, header, speedups=speedups)\r\n\r\nstl/stl.py:75: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.BufferedRandom name='/tmp/pytest-of-churchyard/pytest-1/test_scientific_notation_False0/tmp.stl'>\r\nheader = b'solid just some very long name which will not fit within the standardjust some v'\r\nspeedups = False\r\n\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        # The speedups module is covered by travis but it can't be tested in\r\n        # all environments, this makes coverage checks easier\r\n        if _speedups and speedups:  # pragma: no cover\r\n            return _speedups.ascii_read(fh, header)\r\n        else:\r\n            iterator = cls._ascii_reader(fh, header)\r\n            name = next(iterator)\r\n>           return name, numpy.fromiter(iterator, dtype=cls.dtype)\r\nE           RuntimeError: generator raised StopIteration\r\n\r\nstl/stl.py:228: RuntimeError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\ntmpdir = local('/tmp/pytest-of-churchyard/pytest-1/test_scientific_notation_False0')\r\nspeedups = False\r\n\r\n    def test_scientific_notation(tmpdir, speedups):\r\n        name = 'just some very long name which will not fit within the standard'\r\n        name += name\r\n        _stl_file = ('''\r\n        solid %s\r\n          facet normal 1.014565e-10 7.3223e-5 -10\r\n            outer loop\r\n              vertex 0.399344 0.461940 1.044090e-5\r\n              vertex 5.00000e-5 5.00000e-5 1.500000e-3\r\n              vertex 0 2.22045e-15 -10\r\n            endloop\r\n          endfacet\r\n        endsolid\r\n        ''' % name).lstrip()\r\n    \r\n        tmp_file = tmpdir.join('tmp.stl')\r\n        with tmp_file.open('wb+') as fh:\r\n            fh.write(b(_stl_file))\r\n            fh.seek(0)\r\n            test_mesh = mesh.Mesh.from_file(str(tmp_file), fh=fh,\r\n>                                           speedups=speedups)\r\n\r\ntests/test_ascii.py:49: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/stl.py:329: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.BufferedRandom name='/tmp/pytest-of-churchyard/pytest-1/test_scientific_notation_False0/tmp.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n                    fh, header, speedups=speedups)\r\n            except RuntimeError as exception:\r\n                # Disable fallbacks in ASCII mode\r\n                if mode is ASCII:\r\n                    raise\r\n    \r\n>               (recoverable, e) = exception.args\r\nE               ValueError: not enough values to unpack (expected 2, got 1)\r\n\r\nstl/stl.py:81: ValueError\r\n_______________________________ test_main[False] _______________________________\r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/HalfDonut.stl'>\r\nheader = b'solid halfdonut.stl\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    v'\r\n\r\n    @classmethod\r\n    def _ascii_reader(cls, fh, header):\r\n        if b'\\n' in header:\r\n            recoverable = [True]\r\n        else:\r\n            recoverable = [False]\r\n            header += b(fh.read(BUFFER_SIZE))\r\n    \r\n        lines = b(header).split(b('\\n'))\r\n    \r\n        def get(prefix=''):\r\n            prefix = b(prefix)\r\n    \r\n            if lines:\r\n                line = lines.pop(0)\r\n            else:\r\n                raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n            if not lines:\r\n                recoverable[0] = False\r\n    \r\n                # Read more lines and make sure we prepend any old data\r\n                lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n                line += lines.pop(0)\r\n    \r\n            line = line.lower().strip()\r\n            if line == b(''):\r\n                return get(prefix)\r\n    \r\n            if prefix:\r\n                if line.startswith(prefix):\r\n                    values = line.replace(prefix, b(''), 1).strip().split()\r\n                elif line.startswith(b('endsolid')):\r\n                    # go back to the beginning of new solid part\r\n                    size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                    if size_unprocessedlines > 0:\r\n                        position = fh.tell()\r\n                        fh.seek(position - size_unprocessedlines)\r\n                    raise StopIteration()\r\n                else:\r\n                    raise RuntimeError(recoverable[0],\r\n                                       '%r should start with %r' % (line,\r\n                                                                    prefix))\r\n    \r\n                if len(values) == 3:\r\n                    return [float(v) for v in values]\r\n                else:  # pragma: no cover\r\n                    raise RuntimeError(recoverable[0],\r\n                                       'Incorrect value %r' % line)\r\n            else:\r\n                return b(line)\r\n    \r\n        line = get()\r\n        if not line.startswith(b('solid ')) and line.startswith(b('solid')):\r\n            cls.warning('ASCII STL files should start with solid <space>. '\r\n                        'The application that produced this STL file may be '\r\n                        'faulty, please report this error. The erroneous '\r\n                        'line: %r', line)\r\n    \r\n        if not lines:\r\n            raise RuntimeError(recoverable[0],\r\n                               'No lines found, impossible to read')\r\n    \r\n        # Yield the name\r\n        yield line[5:].strip()\r\n    \r\n        while True:\r\n            # Read from the header lines first, until that point we can recover\r\n            # and go to the binary option. After that we cannot due to\r\n            # unseekable files such as sys.stdin\r\n            #\r\n            # Numpy doesn't support any non-file types so wrapping with a\r\n            # buffer and/or StringIO does not work.\r\n            try:\r\n>               normals = get('facet normal')\r\n\r\nstl/stl.py:205: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nprefix = b'facet normal'\r\n\r\n    def get(prefix=''):\r\n        prefix = b(prefix)\r\n    \r\n        if lines:\r\n            line = lines.pop(0)\r\n        else:\r\n            raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n        if not lines:\r\n            recoverable[0] = False\r\n    \r\n            # Read more lines and make sure we prepend any old data\r\n            lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n            line += lines.pop(0)\r\n    \r\n        line = line.lower().strip()\r\n        if line == b(''):\r\n            return get(prefix)\r\n    \r\n        if prefix:\r\n            if line.startswith(prefix):\r\n                values = line.replace(prefix, b(''), 1).strip().split()\r\n            elif line.startswith(b('endsolid')):\r\n                # go back to the beginning of new solid part\r\n                size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                if size_unprocessedlines > 0:\r\n                    position = fh.tell()\r\n                    fh.seek(position - size_unprocessedlines)\r\n>               raise StopIteration()\r\nE               StopIteration\r\n\r\nstl/stl.py:169: StopIteration\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/HalfDonut.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n>                   fh, header, speedups=speedups)\r\n\r\nstl/stl.py:75: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/HalfDonut.stl'>\r\nheader = b'solid halfdonut.stl\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    v'\r\nspeedups = False\r\n\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        # The speedups module is covered by travis but it can't be tested in\r\n        # all environments, this makes coverage checks easier\r\n        if _speedups and speedups:  # pragma: no cover\r\n            return _speedups.ascii_read(fh, header)\r\n        else:\r\n            iterator = cls._ascii_reader(fh, header)\r\n            name = next(iterator)\r\n>           return name, numpy.fromiter(iterator, dtype=cls.dtype)\r\nE           RuntimeError: generator raised StopIteration\r\n\r\nstl/stl.py:228: RuntimeError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nascii_file = '/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/HalfDonut.stl'\r\nbinary_file = '/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_binary/HalfDonut.stl'\r\ntmpdir = local('/tmp/pytest-of-churchyard/pytest-1/test_main_False_0')\r\nspeedups = False\r\n\r\n    def test_main(ascii_file, binary_file, tmpdir, speedups):\r\n        original_argv = sys.argv[:]\r\n        args_pre = ['stl']\r\n        args_post = [str(tmpdir.join('output.stl'))]\r\n    \r\n        if not speedups:\r\n            args_pre.append('-s')\r\n    \r\n        try:\r\n            sys.argv[:] = args_pre + [ascii_file] + args_post\r\n>           main.main()\r\n\r\ntests/test_commandline.py:16: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/main.py:53: in main\r\n    speedups=not args.disable_speedups)\r\nstl/stl.py:329: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/HalfDonut.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n                    fh, header, speedups=speedups)\r\n            except RuntimeError as exception:\r\n                # Disable fallbacks in ASCII mode\r\n                if mode is ASCII:\r\n                    raise\r\n    \r\n>               (recoverable, e) = exception.args\r\nE               ValueError: not enough values to unpack (expected 2, got 1)\r\n\r\nstl/stl.py:81: ValueError\r\n______________________________ test_binary[False] ______________________________\r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/HalfDonut.stl'>\r\nheader = b'solid halfdonut.stl\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    v'\r\n\r\n    @classmethod\r\n    def _ascii_reader(cls, fh, header):\r\n        if b'\\n' in header:\r\n            recoverable = [True]\r\n        else:\r\n            recoverable = [False]\r\n            header += b(fh.read(BUFFER_SIZE))\r\n    \r\n        lines = b(header).split(b('\\n'))\r\n    \r\n        def get(prefix=''):\r\n            prefix = b(prefix)\r\n    \r\n            if lines:\r\n                line = lines.pop(0)\r\n            else:\r\n                raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n            if not lines:\r\n                recoverable[0] = False\r\n    \r\n                # Read more lines and make sure we prepend any old data\r\n                lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n                line += lines.pop(0)\r\n    \r\n            line = line.lower().strip()\r\n            if line == b(''):\r\n                return get(prefix)\r\n    \r\n            if prefix:\r\n                if line.startswith(prefix):\r\n                    values = line.replace(prefix, b(''), 1).strip().split()\r\n                elif line.startswith(b('endsolid')):\r\n                    # go back to the beginning of new solid part\r\n                    size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                    if size_unprocessedlines > 0:\r\n                        position = fh.tell()\r\n                        fh.seek(position - size_unprocessedlines)\r\n                    raise StopIteration()\r\n                else:\r\n                    raise RuntimeError(recoverable[0],\r\n                                       '%r should start with %r' % (line,\r\n                                                                    prefix))\r\n    \r\n                if len(values) == 3:\r\n                    return [float(v) for v in values]\r\n                else:  # pragma: no cover\r\n                    raise RuntimeError(recoverable[0],\r\n                                       'Incorrect value %r' % line)\r\n            else:\r\n                return b(line)\r\n    \r\n        line = get()\r\n        if not line.startswith(b('solid ')) and line.startswith(b('solid')):\r\n            cls.warning('ASCII STL files should start with solid <space>. '\r\n                        'The application that produced this STL file may be '\r\n                        'faulty, please report this error. The erroneous '\r\n                        'line: %r', line)\r\n    \r\n        if not lines:\r\n            raise RuntimeError(recoverable[0],\r\n                               'No lines found, impossible to read')\r\n    \r\n        # Yield the name\r\n        yield line[5:].strip()\r\n    \r\n        while True:\r\n            # Read from the header lines first, until that point we can recover\r\n            # and go to the binary option. After that we cannot due to\r\n            # unseekable files such as sys.stdin\r\n            #\r\n            # Numpy doesn't support any non-file types so wrapping with a\r\n            # buffer and/or StringIO does not work.\r\n            try:\r\n>               normals = get('facet normal')\r\n\r\nstl/stl.py:205: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nprefix = b'facet normal'\r\n\r\n    def get(prefix=''):\r\n        prefix = b(prefix)\r\n    \r\n        if lines:\r\n            line = lines.pop(0)\r\n        else:\r\n            raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n        if not lines:\r\n            recoverable[0] = False\r\n    \r\n            # Read more lines and make sure we prepend any old data\r\n            lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n            line += lines.pop(0)\r\n    \r\n        line = line.lower().strip()\r\n        if line == b(''):\r\n            return get(prefix)\r\n    \r\n        if prefix:\r\n            if line.startswith(prefix):\r\n                values = line.replace(prefix, b(''), 1).strip().split()\r\n            elif line.startswith(b('endsolid')):\r\n                # go back to the beginning of new solid part\r\n                size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                if size_unprocessedlines > 0:\r\n                    position = fh.tell()\r\n                    fh.seek(position - size_unprocessedlines)\r\n>               raise StopIteration()\r\nE               StopIteration\r\n\r\nstl/stl.py:169: StopIteration\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/HalfDonut.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n>                   fh, header, speedups=speedups)\r\n\r\nstl/stl.py:75: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/HalfDonut.stl'>\r\nheader = b'solid halfdonut.stl\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    v'\r\nspeedups = False\r\n\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        # The speedups module is covered by travis but it can't be tested in\r\n        # all environments, this makes coverage checks easier\r\n        if _speedups and speedups:  # pragma: no cover\r\n            return _speedups.ascii_read(fh, header)\r\n        else:\r\n            iterator = cls._ascii_reader(fh, header)\r\n            name = next(iterator)\r\n>           return name, numpy.fromiter(iterator, dtype=cls.dtype)\r\nE           RuntimeError: generator raised StopIteration\r\n\r\nstl/stl.py:228: RuntimeError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nascii_file = '/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/HalfDonut.stl'\r\ntmpdir = local('/tmp/pytest-of-churchyard/pytest-1/test_binary_False_0')\r\nspeedups = False\r\n\r\n    def test_binary(ascii_file, tmpdir, speedups):\r\n        original_argv = sys.argv[:]\r\n        try:\r\n            sys.argv[:] = [\r\n                'stl',\r\n                '-s' if not speedups else '',\r\n                ascii_file,\r\n                str(tmpdir.join('binary.stl')),\r\n            ]\r\n            try:\r\n>               main.to_binary()\r\n\r\ntests/test_commandline.py:66: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/main.py:85: in to_binary\r\n    speedups=not args.disable_speedups)\r\nstl/stl.py:329: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/HalfDonut.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n                    fh, header, speedups=speedups)\r\n            except RuntimeError as exception:\r\n                # Disable fallbacks in ASCII mode\r\n                if mode is ASCII:\r\n                    raise\r\n    \r\n>               (recoverable, e) = exception.args\r\nE               ValueError: not enough values to unpack (expected 2, got 1)\r\n\r\nstl/stl.py:81: ValueError\r\n_____________________________ test_stl_mesh[False] _____________________________\r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/HalfDonut.stl'>\r\nheader = b'solid halfdonut.stl\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    v'\r\n\r\n    @classmethod\r\n    def _ascii_reader(cls, fh, header):\r\n        if b'\\n' in header:\r\n            recoverable = [True]\r\n        else:\r\n            recoverable = [False]\r\n            header += b(fh.read(BUFFER_SIZE))\r\n    \r\n        lines = b(header).split(b('\\n'))\r\n    \r\n        def get(prefix=''):\r\n            prefix = b(prefix)\r\n    \r\n            if lines:\r\n                line = lines.pop(0)\r\n            else:\r\n                raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n            if not lines:\r\n                recoverable[0] = False\r\n    \r\n                # Read more lines and make sure we prepend any old data\r\n                lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n                line += lines.pop(0)\r\n    \r\n            line = line.lower().strip()\r\n            if line == b(''):\r\n                return get(prefix)\r\n    \r\n            if prefix:\r\n                if line.startswith(prefix):\r\n                    values = line.replace(prefix, b(''), 1).strip().split()\r\n                elif line.startswith(b('endsolid')):\r\n                    # go back to the beginning of new solid part\r\n                    size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                    if size_unprocessedlines > 0:\r\n                        position = fh.tell()\r\n                        fh.seek(position - size_unprocessedlines)\r\n                    raise StopIteration()\r\n                else:\r\n                    raise RuntimeError(recoverable[0],\r\n                                       '%r should start with %r' % (line,\r\n                                                                    prefix))\r\n    \r\n                if len(values) == 3:\r\n                    return [float(v) for v in values]\r\n                else:  # pragma: no cover\r\n                    raise RuntimeError(recoverable[0],\r\n                                       'Incorrect value %r' % line)\r\n            else:\r\n                return b(line)\r\n    \r\n        line = get()\r\n        if not line.startswith(b('solid ')) and line.startswith(b('solid')):\r\n            cls.warning('ASCII STL files should start with solid <space>. '\r\n                        'The application that produced this STL file may be '\r\n                        'faulty, please report this error. The erroneous '\r\n                        'line: %r', line)\r\n    \r\n        if not lines:\r\n            raise RuntimeError(recoverable[0],\r\n                               'No lines found, impossible to read')\r\n    \r\n        # Yield the name\r\n        yield line[5:].strip()\r\n    \r\n        while True:\r\n            # Read from the header lines first, until that point we can recover\r\n            # and go to the binary option. After that we cannot due to\r\n            # unseekable files such as sys.stdin\r\n            #\r\n            # Numpy doesn't support any non-file types so wrapping with a\r\n            # buffer and/or StringIO does not work.\r\n            try:\r\n>               normals = get('facet normal')\r\n\r\nstl/stl.py:205: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nprefix = b'facet normal'\r\n\r\n    def get(prefix=''):\r\n        prefix = b(prefix)\r\n    \r\n        if lines:\r\n            line = lines.pop(0)\r\n        else:\r\n            raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n        if not lines:\r\n            recoverable[0] = False\r\n    \r\n            # Read more lines and make sure we prepend any old data\r\n            lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n            line += lines.pop(0)\r\n    \r\n        line = line.lower().strip()\r\n        if line == b(''):\r\n            return get(prefix)\r\n    \r\n        if prefix:\r\n            if line.startswith(prefix):\r\n                values = line.replace(prefix, b(''), 1).strip().split()\r\n            elif line.startswith(b('endsolid')):\r\n                # go back to the beginning of new solid part\r\n                size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                if size_unprocessedlines > 0:\r\n                    position = fh.tell()\r\n                    fh.seek(position - size_unprocessedlines)\r\n>               raise StopIteration()\r\nE               StopIteration\r\n\r\nstl/stl.py:169: StopIteration\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/HalfDonut.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n>                   fh, header, speedups=speedups)\r\n\r\nstl/stl.py:75: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/HalfDonut.stl'>\r\nheader = b'solid halfdonut.stl\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    v'\r\nspeedups = False\r\n\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        # The speedups module is covered by travis but it can't be tested in\r\n        # all environments, this makes coverage checks easier\r\n        if _speedups and speedups:  # pragma: no cover\r\n            return _speedups.ascii_read(fh, header)\r\n        else:\r\n            iterator = cls._ascii_reader(fh, header)\r\n            name = next(iterator)\r\n>           return name, numpy.fromiter(iterator, dtype=cls.dtype)\r\nE           RuntimeError: generator raised StopIteration\r\n\r\nstl/stl.py:228: RuntimeError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nascii_file = '/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/HalfDonut.stl'\r\ntmpdir = local('/tmp/pytest-of-churchyard/pytest-1/test_stl_mesh_False_0')\r\nspeedups = False\r\n\r\n    def test_stl_mesh(ascii_file, tmpdir, speedups):\r\n        tmp_file = tmpdir.join('tmp.stl')\r\n    \r\n>       mesh = stl.StlMesh(ascii_file, speedups=speedups)\r\n\r\ntests/test_convert.py:48: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/stl.py:334: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/HalfDonut.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n                    fh, header, speedups=speedups)\r\n            except RuntimeError as exception:\r\n                # Disable fallbacks in ASCII mode\r\n                if mode is ASCII:\r\n                    raise\r\n    \r\n>               (recoverable, e) = exception.args\r\nE               ValueError: not enough values to unpack (expected 2, got 1)\r\n\r\nstl/stl.py:81: ValueError\r\n_______________ test_mass_properties_for_half_donut[ascii-False] _______________\r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/HalfDonut.stl'>\r\nheader = b'solid halfdonut.stl\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    v'\r\n\r\n    @classmethod\r\n    def _ascii_reader(cls, fh, header):\r\n        if b'\\n' in header:\r\n            recoverable = [True]\r\n        else:\r\n            recoverable = [False]\r\n            header += b(fh.read(BUFFER_SIZE))\r\n    \r\n        lines = b(header).split(b('\\n'))\r\n    \r\n        def get(prefix=''):\r\n            prefix = b(prefix)\r\n    \r\n            if lines:\r\n                line = lines.pop(0)\r\n            else:\r\n                raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n            if not lines:\r\n                recoverable[0] = False\r\n    \r\n                # Read more lines and make sure we prepend any old data\r\n                lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n                line += lines.pop(0)\r\n    \r\n            line = line.lower().strip()\r\n            if line == b(''):\r\n                return get(prefix)\r\n    \r\n            if prefix:\r\n                if line.startswith(prefix):\r\n                    values = line.replace(prefix, b(''), 1).strip().split()\r\n                elif line.startswith(b('endsolid')):\r\n                    # go back to the beginning of new solid part\r\n                    size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                    if size_unprocessedlines > 0:\r\n                        position = fh.tell()\r\n                        fh.seek(position - size_unprocessedlines)\r\n                    raise StopIteration()\r\n                else:\r\n                    raise RuntimeError(recoverable[0],\r\n                                       '%r should start with %r' % (line,\r\n                                                                    prefix))\r\n    \r\n                if len(values) == 3:\r\n                    return [float(v) for v in values]\r\n                else:  # pragma: no cover\r\n                    raise RuntimeError(recoverable[0],\r\n                                       'Incorrect value %r' % line)\r\n            else:\r\n                return b(line)\r\n    \r\n        line = get()\r\n        if not line.startswith(b('solid ')) and line.startswith(b('solid')):\r\n            cls.warning('ASCII STL files should start with solid <space>. '\r\n                        'The application that produced this STL file may be '\r\n                        'faulty, please report this error. The erroneous '\r\n                        'line: %r', line)\r\n    \r\n        if not lines:\r\n            raise RuntimeError(recoverable[0],\r\n                               'No lines found, impossible to read')\r\n    \r\n        # Yield the name\r\n        yield line[5:].strip()\r\n    \r\n        while True:\r\n            # Read from the header lines first, until that point we can recover\r\n            # and go to the binary option. After that we cannot due to\r\n            # unseekable files such as sys.stdin\r\n            #\r\n            # Numpy doesn't support any non-file types so wrapping with a\r\n            # buffer and/or StringIO does not work.\r\n            try:\r\n>               normals = get('facet normal')\r\n\r\nstl/stl.py:205: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nprefix = b'facet normal'\r\n\r\n    def get(prefix=''):\r\n        prefix = b(prefix)\r\n    \r\n        if lines:\r\n            line = lines.pop(0)\r\n        else:\r\n            raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n        if not lines:\r\n            recoverable[0] = False\r\n    \r\n            # Read more lines and make sure we prepend any old data\r\n            lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n            line += lines.pop(0)\r\n    \r\n        line = line.lower().strip()\r\n        if line == b(''):\r\n            return get(prefix)\r\n    \r\n        if prefix:\r\n            if line.startswith(prefix):\r\n                values = line.replace(prefix, b(''), 1).strip().split()\r\n            elif line.startswith(b('endsolid')):\r\n                # go back to the beginning of new solid part\r\n                size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                if size_unprocessedlines > 0:\r\n                    position = fh.tell()\r\n                    fh.seek(position - size_unprocessedlines)\r\n>               raise StopIteration()\r\nE               StopIteration\r\n\r\nstl/stl.py:169: StopIteration\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/HalfDonut.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n>                   fh, header, speedups=speedups)\r\n\r\nstl/stl.py:75: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/HalfDonut.stl'>\r\nheader = b'solid halfdonut.stl\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    v'\r\nspeedups = False\r\n\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        # The speedups module is covered by travis but it can't be tested in\r\n        # all environments, this makes coverage checks easier\r\n        if _speedups and speedups:  # pragma: no cover\r\n            return _speedups.ascii_read(fh, header)\r\n        else:\r\n            iterator = cls._ascii_reader(fh, header)\r\n            name = next(iterator)\r\n>           return name, numpy.fromiter(iterator, dtype=cls.dtype)\r\nE           RuntimeError: generator raised StopIteration\r\n\r\nstl/stl.py:228: RuntimeError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nbinary_ascii_path = local('/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii')\r\nspeedups = False\r\n\r\n    def test_mass_properties_for_half_donut(binary_ascii_path, speedups):\r\n        \"\"\"\r\n        Checks the results of method get_mass_properties() on\r\n        STL ASCII and binary files HalfDonut.stl\r\n        One checks the results obtained with stl\r\n        with the ones obtained with meshlab\r\n        \"\"\"\r\n        filename = binary_ascii_path.join('HalfDonut.stl')\r\n>       mesh = stl.StlMesh(str(filename), speedups=speedups)\r\n\r\ntests/test_meshProperties.py:18: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/stl.py:334: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/HalfDonut.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n                    fh, header, speedups=speedups)\r\n            except RuntimeError as exception:\r\n                # Disable fallbacks in ASCII mode\r\n                if mode is ASCII:\r\n                    raise\r\n    \r\n>               (recoverable, e) = exception.args\r\nE               ValueError: not enough values to unpack (expected 2, got 1)\r\n\r\nstl/stl.py:81: ValueError\r\n__________________ test_mass_properties_for_moon[ascii-False] __________________\r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/Moon.stl'>\r\nheader = b'solid moon.stl\\nfacet normal -0.091618 0.000000 -0.072093\\n  outer loop\\n    vertex'\r\n\r\n    @classmethod\r\n    def _ascii_reader(cls, fh, header):\r\n        if b'\\n' in header:\r\n            recoverable = [True]\r\n        else:\r\n            recoverable = [False]\r\n            header += b(fh.read(BUFFER_SIZE))\r\n    \r\n        lines = b(header).split(b('\\n'))\r\n    \r\n        def get(prefix=''):\r\n            prefix = b(prefix)\r\n    \r\n            if lines:\r\n                line = lines.pop(0)\r\n            else:\r\n                raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n            if not lines:\r\n                recoverable[0] = False\r\n    \r\n                # Read more lines and make sure we prepend any old data\r\n                lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n                line += lines.pop(0)\r\n    \r\n            line = line.lower().strip()\r\n            if line == b(''):\r\n                return get(prefix)\r\n    \r\n            if prefix:\r\n                if line.startswith(prefix):\r\n                    values = line.replace(prefix, b(''), 1).strip().split()\r\n                elif line.startswith(b('endsolid')):\r\n                    # go back to the beginning of new solid part\r\n                    size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                    if size_unprocessedlines > 0:\r\n                        position = fh.tell()\r\n                        fh.seek(position - size_unprocessedlines)\r\n                    raise StopIteration()\r\n                else:\r\n                    raise RuntimeError(recoverable[0],\r\n                                       '%r should start with %r' % (line,\r\n                                                                    prefix))\r\n    \r\n                if len(values) == 3:\r\n                    return [float(v) for v in values]\r\n                else:  # pragma: no cover\r\n                    raise RuntimeError(recoverable[0],\r\n                                       'Incorrect value %r' % line)\r\n            else:\r\n                return b(line)\r\n    \r\n        line = get()\r\n        if not line.startswith(b('solid ')) and line.startswith(b('solid')):\r\n            cls.warning('ASCII STL files should start with solid <space>. '\r\n                        'The application that produced this STL file may be '\r\n                        'faulty, please report this error. The erroneous '\r\n                        'line: %r', line)\r\n    \r\n        if not lines:\r\n            raise RuntimeError(recoverable[0],\r\n                               'No lines found, impossible to read')\r\n    \r\n        # Yield the name\r\n        yield line[5:].strip()\r\n    \r\n        while True:\r\n            # Read from the header lines first, until that point we can recover\r\n            # and go to the binary option. After that we cannot due to\r\n            # unseekable files such as sys.stdin\r\n            #\r\n            # Numpy doesn't support any non-file types so wrapping with a\r\n            # buffer and/or StringIO does not work.\r\n            try:\r\n>               normals = get('facet normal')\r\n\r\nstl/stl.py:205: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nprefix = b'facet normal'\r\n\r\n    def get(prefix=''):\r\n        prefix = b(prefix)\r\n    \r\n        if lines:\r\n            line = lines.pop(0)\r\n        else:\r\n            raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n        if not lines:\r\n            recoverable[0] = False\r\n    \r\n            # Read more lines and make sure we prepend any old data\r\n            lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n            line += lines.pop(0)\r\n    \r\n        line = line.lower().strip()\r\n        if line == b(''):\r\n            return get(prefix)\r\n    \r\n        if prefix:\r\n            if line.startswith(prefix):\r\n                values = line.replace(prefix, b(''), 1).strip().split()\r\n            elif line.startswith(b('endsolid')):\r\n                # go back to the beginning of new solid part\r\n                size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                if size_unprocessedlines > 0:\r\n                    position = fh.tell()\r\n                    fh.seek(position - size_unprocessedlines)\r\n>               raise StopIteration()\r\nE               StopIteration\r\n\r\nstl/stl.py:169: StopIteration\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/Moon.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n>                   fh, header, speedups=speedups)\r\n\r\nstl/stl.py:75: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/Moon.stl'>\r\nheader = b'solid moon.stl\\nfacet normal -0.091618 0.000000 -0.072093\\n  outer loop\\n    vertex'\r\nspeedups = False\r\n\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        # The speedups module is covered by travis but it can't be tested in\r\n        # all environments, this makes coverage checks easier\r\n        if _speedups and speedups:  # pragma: no cover\r\n            return _speedups.ascii_read(fh, header)\r\n        else:\r\n            iterator = cls._ascii_reader(fh, header)\r\n            name = next(iterator)\r\n>           return name, numpy.fromiter(iterator, dtype=cls.dtype)\r\nE           RuntimeError: generator raised StopIteration\r\n\r\nstl/stl.py:228: RuntimeError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nbinary_ascii_path = local('/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii')\r\nspeedups = False\r\n\r\n    def test_mass_properties_for_moon(binary_ascii_path, speedups):\r\n        \"\"\"\r\n        Checks the results of method get_mass_properties() on\r\n        STL ASCII and binary files Moon.stl\r\n        One checks the results obtained with stl\r\n        with the ones obtained with meshlab\r\n        \"\"\"\r\n        filename = binary_ascii_path.join('Moon.stl')\r\n>       mesh = stl.StlMesh(str(filename), speedups=speedups)\r\n\r\ntests/test_meshProperties.py:39: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/stl.py:334: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/Moon.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n                    fh, header, speedups=speedups)\r\n            except RuntimeError as exception:\r\n                # Disable fallbacks in ASCII mode\r\n                if mode is ASCII:\r\n                    raise\r\n    \r\n>               (recoverable, e) = exception.args\r\nE               ValueError: not enough values to unpack (expected 2, got 1)\r\n\r\nstl/stl.py:81: ValueError\r\n_____________ test_mass_properties_for_star[ascii-False-Star.stl] ______________\r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/Star.stl'>\r\nheader = b'solid star.stl\\nfacet normal 0.000000 -0.645975 0.000000\\n  outer loop\\n    vertex '\r\n\r\n    @classmethod\r\n    def _ascii_reader(cls, fh, header):\r\n        if b'\\n' in header:\r\n            recoverable = [True]\r\n        else:\r\n            recoverable = [False]\r\n            header += b(fh.read(BUFFER_SIZE))\r\n    \r\n        lines = b(header).split(b('\\n'))\r\n    \r\n        def get(prefix=''):\r\n            prefix = b(prefix)\r\n    \r\n            if lines:\r\n                line = lines.pop(0)\r\n            else:\r\n                raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n            if not lines:\r\n                recoverable[0] = False\r\n    \r\n                # Read more lines and make sure we prepend any old data\r\n                lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n                line += lines.pop(0)\r\n    \r\n            line = line.lower().strip()\r\n            if line == b(''):\r\n                return get(prefix)\r\n    \r\n            if prefix:\r\n                if line.startswith(prefix):\r\n                    values = line.replace(prefix, b(''), 1).strip().split()\r\n                elif line.startswith(b('endsolid')):\r\n                    # go back to the beginning of new solid part\r\n                    size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                    if size_unprocessedlines > 0:\r\n                        position = fh.tell()\r\n                        fh.seek(position - size_unprocessedlines)\r\n                    raise StopIteration()\r\n                else:\r\n                    raise RuntimeError(recoverable[0],\r\n                                       '%r should start with %r' % (line,\r\n                                                                    prefix))\r\n    \r\n                if len(values) == 3:\r\n                    return [float(v) for v in values]\r\n                else:  # pragma: no cover\r\n                    raise RuntimeError(recoverable[0],\r\n                                       'Incorrect value %r' % line)\r\n            else:\r\n                return b(line)\r\n    \r\n        line = get()\r\n        if not line.startswith(b('solid ')) and line.startswith(b('solid')):\r\n            cls.warning('ASCII STL files should start with solid <space>. '\r\n                        'The application that produced this STL file may be '\r\n                        'faulty, please report this error. The erroneous '\r\n                        'line: %r', line)\r\n    \r\n        if not lines:\r\n            raise RuntimeError(recoverable[0],\r\n                               'No lines found, impossible to read')\r\n    \r\n        # Yield the name\r\n        yield line[5:].strip()\r\n    \r\n        while True:\r\n            # Read from the header lines first, until that point we can recover\r\n            # and go to the binary option. After that we cannot due to\r\n            # unseekable files such as sys.stdin\r\n            #\r\n            # Numpy doesn't support any non-file types so wrapping with a\r\n            # buffer and/or StringIO does not work.\r\n            try:\r\n>               normals = get('facet normal')\r\n\r\nstl/stl.py:205: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nprefix = b'facet normal'\r\n\r\n    def get(prefix=''):\r\n        prefix = b(prefix)\r\n    \r\n        if lines:\r\n            line = lines.pop(0)\r\n        else:\r\n            raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n        if not lines:\r\n            recoverable[0] = False\r\n    \r\n            # Read more lines and make sure we prepend any old data\r\n            lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n            line += lines.pop(0)\r\n    \r\n        line = line.lower().strip()\r\n        if line == b(''):\r\n            return get(prefix)\r\n    \r\n        if prefix:\r\n            if line.startswith(prefix):\r\n                values = line.replace(prefix, b(''), 1).strip().split()\r\n            elif line.startswith(b('endsolid')):\r\n                # go back to the beginning of new solid part\r\n                size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                if size_unprocessedlines > 0:\r\n                    position = fh.tell()\r\n                    fh.seek(position - size_unprocessedlines)\r\n>               raise StopIteration()\r\nE               StopIteration\r\n\r\nstl/stl.py:169: StopIteration\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/Star.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n>                   fh, header, speedups=speedups)\r\n\r\nstl/stl.py:75: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/Star.stl'>\r\nheader = b'solid star.stl\\nfacet normal 0.000000 -0.645975 0.000000\\n  outer loop\\n    vertex '\r\nspeedups = False\r\n\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        # The speedups module is covered by travis but it can't be tested in\r\n        # all environments, this makes coverage checks easier\r\n        if _speedups and speedups:  # pragma: no cover\r\n            return _speedups.ascii_read(fh, header)\r\n        else:\r\n            iterator = cls._ascii_reader(fh, header)\r\n            name = next(iterator)\r\n>           return name, numpy.fromiter(iterator, dtype=cls.dtype)\r\nE           RuntimeError: generator raised StopIteration\r\n\r\nstl/stl.py:228: RuntimeError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nbinary_ascii_path = local('/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii')\r\nfilename = local('/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/Star.stl')\r\nspeedups = False\r\n\r\n    @pytest.mark.parametrize('filename', ('Star.stl', 'StarWithEmptyHeader.stl'))\r\n    def test_mass_properties_for_star(binary_ascii_path, filename, speedups):\r\n        \"\"\"\r\n        Checks the results of method get_mass_properties() on\r\n        STL ASCII and binary files Star.stl and\r\n        STL binary file StarWithEmptyHeader.stl (with no header)\r\n        One checks the results obtained with stl\r\n        with the ones obtained with meshlab\r\n        \"\"\"\r\n        filename = binary_ascii_path.join(filename)\r\n        if not filename.exists():\r\n            pytest.skip('STL file does not exist')\r\n>       mesh = stl.StlMesh(str(filename), speedups=speedups)\r\n\r\ntests/test_meshProperties.py:64: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/stl.py:334: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/home/churchyard/Dokumenty/RedHat/numpy-stl/tests/stl_ascii/Star.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n                    fh, header, speedups=speedups)\r\n            except RuntimeError as exception:\r\n                # Disable fallbacks in ASCII mode\r\n                if mode is ASCII:\r\n                    raise\r\n    \r\n>               (recoverable, e) = exception.args\r\nE               ValueError: not enough values to unpack (expected 2, got 1)\r\n\r\nstl/stl.py:81: ValueError\r\n____________________________ test_single_stl[False] ____________________________\r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.BufferedRandom name='/tmp/pytest-of-churchyard/pytest-1/test_single_stl_False_0/tmp.stl'>\r\nheader = b'solid test.stl\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    vertex'\r\n\r\n    @classmethod\r\n    def _ascii_reader(cls, fh, header):\r\n        if b'\\n' in header:\r\n            recoverable = [True]\r\n        else:\r\n            recoverable = [False]\r\n            header += b(fh.read(BUFFER_SIZE))\r\n    \r\n        lines = b(header).split(b('\\n'))\r\n    \r\n        def get(prefix=''):\r\n            prefix = b(prefix)\r\n    \r\n            if lines:\r\n                line = lines.pop(0)\r\n            else:\r\n                raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n            if not lines:\r\n                recoverable[0] = False\r\n    \r\n                # Read more lines and make sure we prepend any old data\r\n                lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n                line += lines.pop(0)\r\n    \r\n            line = line.lower().strip()\r\n            if line == b(''):\r\n                return get(prefix)\r\n    \r\n            if prefix:\r\n                if line.startswith(prefix):\r\n                    values = line.replace(prefix, b(''), 1).strip().split()\r\n                elif line.startswith(b('endsolid')):\r\n                    # go back to the beginning of new solid part\r\n                    size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                    if size_unprocessedlines > 0:\r\n                        position = fh.tell()\r\n                        fh.seek(position - size_unprocessedlines)\r\n                    raise StopIteration()\r\n                else:\r\n                    raise RuntimeError(recoverable[0],\r\n                                       '%r should start with %r' % (line,\r\n                                                                    prefix))\r\n    \r\n                if len(values) == 3:\r\n                    return [float(v) for v in values]\r\n                else:  # pragma: no cover\r\n                    raise RuntimeError(recoverable[0],\r\n                                       'Incorrect value %r' % line)\r\n            else:\r\n                return b(line)\r\n    \r\n        line = get()\r\n        if not line.startswith(b('solid ')) and line.startswith(b('solid')):\r\n            cls.warning('ASCII STL files should start with solid <space>. '\r\n                        'The application that produced this STL file may be '\r\n                        'faulty, please report this error. The erroneous '\r\n                        'line: %r', line)\r\n    \r\n        if not lines:\r\n            raise RuntimeError(recoverable[0],\r\n                               'No lines found, impossible to read')\r\n    \r\n        # Yield the name\r\n        yield line[5:].strip()\r\n    \r\n        while True:\r\n            # Read from the header lines first, until that point we can recover\r\n            # and go to the binary option. After that we cannot due to\r\n            # unseekable files such as sys.stdin\r\n            #\r\n            # Numpy doesn't support any non-file types so wrapping with a\r\n            # buffer and/or StringIO does not work.\r\n            try:\r\n>               normals = get('facet normal')\r\n\r\nstl/stl.py:205: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nprefix = b'facet normal'\r\n\r\n    def get(prefix=''):\r\n        prefix = b(prefix)\r\n    \r\n        if lines:\r\n            line = lines.pop(0)\r\n        else:\r\n            raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n        if not lines:\r\n            recoverable[0] = False\r\n    \r\n            # Read more lines and make sure we prepend any old data\r\n            lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n            line += lines.pop(0)\r\n    \r\n        line = line.lower().strip()\r\n        if line == b(''):\r\n            return get(prefix)\r\n    \r\n        if prefix:\r\n            if line.startswith(prefix):\r\n                values = line.replace(prefix, b(''), 1).strip().split()\r\n            elif line.startswith(b('endsolid')):\r\n                # go back to the beginning of new solid part\r\n                size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                if size_unprocessedlines > 0:\r\n                    position = fh.tell()\r\n                    fh.seek(position - size_unprocessedlines)\r\n>               raise StopIteration()\r\nE               StopIteration\r\n\r\nstl/stl.py:169: StopIteration\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\ntmpdir = local('/tmp/pytest-of-churchyard/pytest-1/test_single_stl_False_0')\r\nspeedups = False\r\n\r\n    def test_single_stl(tmpdir, speedups):\r\n        tmp_file = tmpdir.join('tmp.stl')\r\n        with tmp_file.open('wb+') as fh:\r\n            fh.write(_STL_FILE)\r\n            fh.seek(0)\r\n            for m in mesh.Mesh.from_multi_file(\r\n>                   str(tmp_file), fh=fh, speedups=speedups):\r\n\r\ntests/test_multiple.py:23: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/stl.py:364: in from_multi_file\r\n    raw_data = cls.load(fh, mode=mode, speedups=speedups)\r\nstl/stl.py:75: in load\r\n    fh, header, speedups=speedups)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.BufferedRandom name='/tmp/pytest-of-churchyard/pytest-1/test_single_stl_False_0/tmp.stl'>\r\nheader = b'solid test.stl\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    vertex'\r\nspeedups = False\r\n\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        # The speedups module is covered by travis but it can't be tested in\r\n        # all environments, this makes coverage checks easier\r\n        if _speedups and speedups:  # pragma: no cover\r\n            return _speedups.ascii_read(fh, header)\r\n        else:\r\n            iterator = cls._ascii_reader(fh, header)\r\n            name = next(iterator)\r\n>           return name, numpy.fromiter(iterator, dtype=cls.dtype)\r\nE           RuntimeError: generator raised StopIteration\r\n\r\nstl/stl.py:228: RuntimeError\r\n___________________________ test_multiple_stl[False] ___________________________\r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.BufferedRandom name='/tmp/pytest-of-churchyard/pytest-1/test_multiple_stl_False_0/tmp.stl'>\r\nheader = b'solid test.stl\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    vertex'\r\n\r\n    @classmethod\r\n    def _ascii_reader(cls, fh, header):\r\n        if b'\\n' in header:\r\n            recoverable = [True]\r\n        else:\r\n            recoverable = [False]\r\n            header += b(fh.read(BUFFER_SIZE))\r\n    \r\n        lines = b(header).split(b('\\n'))\r\n    \r\n        def get(prefix=''):\r\n            prefix = b(prefix)\r\n    \r\n            if lines:\r\n                line = lines.pop(0)\r\n            else:\r\n                raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n            if not lines:\r\n                recoverable[0] = False\r\n    \r\n                # Read more lines and make sure we prepend any old data\r\n                lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n                line += lines.pop(0)\r\n    \r\n            line = line.lower().strip()\r\n            if line == b(''):\r\n                return get(prefix)\r\n    \r\n            if prefix:\r\n                if line.startswith(prefix):\r\n                    values = line.replace(prefix, b(''), 1).strip().split()\r\n                elif line.startswith(b('endsolid')):\r\n                    # go back to the beginning of new solid part\r\n                    size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                    if size_unprocessedlines > 0:\r\n                        position = fh.tell()\r\n                        fh.seek(position - size_unprocessedlines)\r\n                    raise StopIteration()\r\n                else:\r\n                    raise RuntimeError(recoverable[0],\r\n                                       '%r should start with %r' % (line,\r\n                                                                    prefix))\r\n    \r\n                if len(values) == 3:\r\n                    return [float(v) for v in values]\r\n                else:  # pragma: no cover\r\n                    raise RuntimeError(recoverable[0],\r\n                                       'Incorrect value %r' % line)\r\n            else:\r\n                return b(line)\r\n    \r\n        line = get()\r\n        if not line.startswith(b('solid ')) and line.startswith(b('solid')):\r\n            cls.warning('ASCII STL files should start with solid <space>. '\r\n                        'The application that produced this STL file may be '\r\n                        'faulty, please report this error. The erroneous '\r\n                        'line: %r', line)\r\n    \r\n        if not lines:\r\n            raise RuntimeError(recoverable[0],\r\n                               'No lines found, impossible to read')\r\n    \r\n        # Yield the name\r\n        yield line[5:].strip()\r\n    \r\n        while True:\r\n            # Read from the header lines first, until that point we can recover\r\n            # and go to the binary option. After that we cannot due to\r\n            # unseekable files such as sys.stdin\r\n            #\r\n            # Numpy doesn't support any non-file types so wrapping with a\r\n            # buffer and/or StringIO does not work.\r\n            try:\r\n>               normals = get('facet normal')\r\n\r\nstl/stl.py:205: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nprefix = b'facet normal'\r\n\r\n    def get(prefix=''):\r\n        prefix = b(prefix)\r\n    \r\n        if lines:\r\n            line = lines.pop(0)\r\n        else:\r\n            raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n        if not lines:\r\n            recoverable[0] = False\r\n    \r\n            # Read more lines and make sure we prepend any old data\r\n            lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n            line += lines.pop(0)\r\n    \r\n        line = line.lower().strip()\r\n        if line == b(''):\r\n            return get(prefix)\r\n    \r\n        if prefix:\r\n            if line.startswith(prefix):\r\n                values = line.replace(prefix, b(''), 1).strip().split()\r\n            elif line.startswith(b('endsolid')):\r\n                # go back to the beginning of new solid part\r\n                size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                if size_unprocessedlines > 0:\r\n                    position = fh.tell()\r\n                    fh.seek(position - size_unprocessedlines)\r\n>               raise StopIteration()\r\nE               StopIteration\r\n\r\nstl/stl.py:169: StopIteration\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\ntmpdir = local('/tmp/pytest-of-churchyard/pytest-1/test_multiple_stl_False_0')\r\nspeedups = False\r\n\r\n    def test_multiple_stl(tmpdir, speedups):\r\n        tmp_file = tmpdir.join('tmp.stl')\r\n        with tmp_file.open('wb+') as fh:\r\n            for _ in range(10):\r\n                fh.write(_STL_FILE)\r\n            fh.seek(0)\r\n            for i, m in enumerate(mesh.Mesh.from_multi_file(\r\n>                   str(tmp_file), fh=fh, speedups=speedups)):\r\n\r\ntests/test_multiple.py:34: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/stl.py:364: in from_multi_file\r\n    raw_data = cls.load(fh, mode=mode, speedups=speedups)\r\nstl/stl.py:75: in load\r\n    fh, header, speedups=speedups)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.BufferedRandom name='/tmp/pytest-of-churchyard/pytest-1/test_multiple_stl_False_0/tmp.stl'>\r\nheader = b'solid test.stl\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    vertex'\r\nspeedups = False\r\n\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        # The speedups module is covered by travis but it can't be tested in\r\n        # all environments, this makes coverage checks easier\r\n        if _speedups and speedups:  # pragma: no cover\r\n            return _speedups.ascii_read(fh, header)\r\n        else:\r\n            iterator = cls._ascii_reader(fh, header)\r\n            name = next(iterator)\r\n>           return name, numpy.fromiter(iterator, dtype=cls.dtype)\r\nE           RuntimeError: generator raised StopIteration\r\n\r\nstl/stl.py:228: RuntimeError\r\n_________________________ test_single_stl_file[False] __________________________\r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.BufferedReader name='/tmp/pytest-of-churchyard/pytest-1/test_single_stl_file_False_0/tmp.stl'>\r\nheader = b'solid test.stl\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    vertex'\r\n\r\n    @classmethod\r\n    def _ascii_reader(cls, fh, header):\r\n        if b'\\n' in header:\r\n            recoverable = [True]\r\n        else:\r\n            recoverable = [False]\r\n            header += b(fh.read(BUFFER_SIZE))\r\n    \r\n        lines = b(header).split(b('\\n'))\r\n    \r\n        def get(prefix=''):\r\n            prefix = b(prefix)\r\n    \r\n            if lines:\r\n                line = lines.pop(0)\r\n            else:\r\n                raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n            if not lines:\r\n                recoverable[0] = False\r\n    \r\n                # Read more lines and make sure we prepend any old data\r\n                lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n                line += lines.pop(0)\r\n    \r\n            line = line.lower().strip()\r\n            if line == b(''):\r\n                return get(prefix)\r\n    \r\n            if prefix:\r\n                if line.startswith(prefix):\r\n                    values = line.replace(prefix, b(''), 1).strip().split()\r\n                elif line.startswith(b('endsolid')):\r\n                    # go back to the beginning of new solid part\r\n                    size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                    if size_unprocessedlines > 0:\r\n                        position = fh.tell()\r\n                        fh.seek(position - size_unprocessedlines)\r\n                    raise StopIteration()\r\n                else:\r\n                    raise RuntimeError(recoverable[0],\r\n                                       '%r should start with %r' % (line,\r\n                                                                    prefix))\r\n    \r\n                if len(values) == 3:\r\n                    return [float(v) for v in values]\r\n                else:  # pragma: no cover\r\n                    raise RuntimeError(recoverable[0],\r\n                                       'Incorrect value %r' % line)\r\n            else:\r\n                return b(line)\r\n    \r\n        line = get()\r\n        if not line.startswith(b('solid ')) and line.startswith(b('solid')):\r\n            cls.warning('ASCII STL files should start with solid <space>. '\r\n                        'The application that produced this STL file may be '\r\n                        'faulty, please report this error. The erroneous '\r\n                        'line: %r', line)\r\n    \r\n        if not lines:\r\n            raise RuntimeError(recoverable[0],\r\n                               'No lines found, impossible to read')\r\n    \r\n        # Yield the name\r\n        yield line[5:].strip()\r\n    \r\n        while True:\r\n            # Read from the header lines first, until that point we can recover\r\n            # and go to the binary option. After that we cannot due to\r\n            # unseekable files such as sys.stdin\r\n            #\r\n            # Numpy doesn't support any non-file types so wrapping with a\r\n            # buffer and/or StringIO does not work.\r\n            try:\r\n>               normals = get('facet normal')\r\n\r\nstl/stl.py:205: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nprefix = b'facet normal'\r\n\r\n    def get(prefix=''):\r\n        prefix = b(prefix)\r\n    \r\n        if lines:\r\n            line = lines.pop(0)\r\n        else:\r\n            raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n        if not lines:\r\n            recoverable[0] = False\r\n    \r\n            # Read more lines and make sure we prepend any old data\r\n            lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n            line += lines.pop(0)\r\n    \r\n        line = line.lower().strip()\r\n        if line == b(''):\r\n            return get(prefix)\r\n    \r\n        if prefix:\r\n            if line.startswith(prefix):\r\n                values = line.replace(prefix, b(''), 1).strip().split()\r\n            elif line.startswith(b('endsolid')):\r\n                # go back to the beginning of new solid part\r\n                size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                if size_unprocessedlines > 0:\r\n                    position = fh.tell()\r\n                    fh.seek(position - size_unprocessedlines)\r\n>               raise StopIteration()\r\nE               StopIteration\r\n\r\nstl/stl.py:169: StopIteration\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\ntmpdir = local('/tmp/pytest-of-churchyard/pytest-1/test_single_stl_file_False_0')\r\nspeedups = False\r\n\r\n    def test_single_stl_file(tmpdir, speedups):\r\n        tmp_file = tmpdir.join('tmp.stl')\r\n        with tmp_file.open('wb+') as fh:\r\n            fh.write(_STL_FILE)\r\n            fh.seek(0)\r\n            for m in mesh.Mesh.from_multi_file(\r\n>                   str(tmp_file), speedups=speedups):\r\n\r\ntests/test_multiple.py:46: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/stl.py:364: in from_multi_file\r\n    raw_data = cls.load(fh, mode=mode, speedups=speedups)\r\nstl/stl.py:75: in load\r\n    fh, header, speedups=speedups)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.BufferedReader name='/tmp/pytest-of-churchyard/pytest-1/test_single_stl_file_False_0/tmp.stl'>\r\nheader = b'solid test.stl\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    vertex'\r\nspeedups = False\r\n\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        # The speedups module is covered by travis but it can't be tested in\r\n        # all environments, this makes coverage checks easier\r\n        if _speedups and speedups:  # pragma: no cover\r\n            return _speedups.ascii_read(fh, header)\r\n        else:\r\n            iterator = cls._ascii_reader(fh, header)\r\n            name = next(iterator)\r\n>           return name, numpy.fromiter(iterator, dtype=cls.dtype)\r\nE           RuntimeError: generator raised StopIteration\r\n\r\nstl/stl.py:228: RuntimeError\r\n________________________ test_multiple_stl_file[False] _________________________\r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.BufferedReader name='/tmp/pytest-of-churchyard/pytest-1/test_multiple_stl_file_False_0/tmp.stl'>\r\nheader = b'solid test.stl\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    vertex'\r\n\r\n    @classmethod\r\n    def _ascii_reader(cls, fh, header):\r\n        if b'\\n' in header:\r\n            recoverable = [True]\r\n        else:\r\n            recoverable = [False]\r\n            header += b(fh.read(BUFFER_SIZE))\r\n    \r\n        lines = b(header).split(b('\\n'))\r\n    \r\n        def get(prefix=''):\r\n            prefix = b(prefix)\r\n    \r\n            if lines:\r\n                line = lines.pop(0)\r\n            else:\r\n                raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n            if not lines:\r\n                recoverable[0] = False\r\n    \r\n                # Read more lines and make sure we prepend any old data\r\n                lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n                line += lines.pop(0)\r\n    \r\n            line = line.lower().strip()\r\n            if line == b(''):\r\n                return get(prefix)\r\n    \r\n            if prefix:\r\n                if line.startswith(prefix):\r\n                    values = line.replace(prefix, b(''), 1).strip().split()\r\n                elif line.startswith(b('endsolid')):\r\n                    # go back to the beginning of new solid part\r\n                    size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                    if size_unprocessedlines > 0:\r\n                        position = fh.tell()\r\n                        fh.seek(position - size_unprocessedlines)\r\n                    raise StopIteration()\r\n                else:\r\n                    raise RuntimeError(recoverable[0],\r\n                                       '%r should start with %r' % (line,\r\n                                                                    prefix))\r\n    \r\n                if len(values) == 3:\r\n                    return [float(v) for v in values]\r\n                else:  # pragma: no cover\r\n                    raise RuntimeError(recoverable[0],\r\n                                       'Incorrect value %r' % line)\r\n            else:\r\n                return b(line)\r\n    \r\n        line = get()\r\n        if not line.startswith(b('solid ')) and line.startswith(b('solid')):\r\n            cls.warning('ASCII STL files should start with solid <space>. '\r\n                        'The application that produced this STL file may be '\r\n                        'faulty, please report this error. The erroneous '\r\n                        'line: %r', line)\r\n    \r\n        if not lines:\r\n            raise RuntimeError(recoverable[0],\r\n                               'No lines found, impossible to read')\r\n    \r\n        # Yield the name\r\n        yield line[5:].strip()\r\n    \r\n        while True:\r\n            # Read from the header lines first, until that point we can recover\r\n            # and go to the binary option. After that we cannot due to\r\n            # unseekable files such as sys.stdin\r\n            #\r\n            # Numpy doesn't support any non-file types so wrapping with a\r\n            # buffer and/or StringIO does not work.\r\n            try:\r\n>               normals = get('facet normal')\r\n\r\nstl/stl.py:205: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nprefix = b'facet normal'\r\n\r\n    def get(prefix=''):\r\n        prefix = b(prefix)\r\n    \r\n        if lines:\r\n            line = lines.pop(0)\r\n        else:\r\n            raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n        if not lines:\r\n            recoverable[0] = False\r\n    \r\n            # Read more lines and make sure we prepend any old data\r\n            lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n            line += lines.pop(0)\r\n    \r\n        line = line.lower().strip()\r\n        if line == b(''):\r\n            return get(prefix)\r\n    \r\n        if prefix:\r\n            if line.startswith(prefix):\r\n                values = line.replace(prefix, b(''), 1).strip().split()\r\n            elif line.startswith(b('endsolid')):\r\n                # go back to the beginning of new solid part\r\n                size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                if size_unprocessedlines > 0:\r\n                    position = fh.tell()\r\n                    fh.seek(position - size_unprocessedlines)\r\n>               raise StopIteration()\r\nE               StopIteration\r\n\r\nstl/stl.py:169: StopIteration\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\ntmpdir = local('/tmp/pytest-of-churchyard/pytest-1/test_multiple_stl_file_False_0')\r\nspeedups = False\r\n\r\n    def test_multiple_stl_file(tmpdir, speedups):\r\n        tmp_file = tmpdir.join('tmp.stl')\r\n        with tmp_file.open('wb+') as fh:\r\n            for _ in range(10):\r\n                fh.write(_STL_FILE)\r\n    \r\n            fh.seek(0)\r\n            for i, m in enumerate(mesh.Mesh.from_multi_file(\r\n>                   str(tmp_file), speedups=speedups)):\r\n\r\ntests/test_multiple.py:58: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/stl.py:364: in from_multi_file\r\n    raw_data = cls.load(fh, mode=mode, speedups=speedups)\r\nstl/stl.py:75: in load\r\n    fh, header, speedups=speedups)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'stl.mesh.Mesh'>\r\nfh = <_io.BufferedReader name='/tmp/pytest-of-churchyard/pytest-1/test_multiple_stl_file_False_0/tmp.stl'>\r\nheader = b'solid test.stl\\nfacet normal -0.014565 0.073223 -0.002897\\n  outer loop\\n    vertex'\r\nspeedups = False\r\n\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        # The speedups module is covered by travis but it can't be tested in\r\n        # all environments, this makes coverage checks easier\r\n        if _speedups and speedups:  # pragma: no cover\r\n            return _speedups.ascii_read(fh, header)\r\n        else:\r\n            iterator = cls._ascii_reader(fh, header)\r\n            name = next(iterator)\r\n>           return name, numpy.fromiter(iterator, dtype=cls.dtype)\r\nE           RuntimeError: generator raised StopIteration\r\n\r\nstl/stl.py:228: RuntimeError\r\n=============== 15 failed, 96 passed, 22 skipped in 1.94 seconds ===============\r\n/home/churchyard/Dokumenty/RedHat/numpy-stl/.tox/py37-nix/lib/python3.7/site-packages/pep8.py:110: FutureWarning: Possible nested set at position 1\r\n  EXTRANEOUS_WHITESPACE_REGEX = re.compile(r'[[({] | []}),;:]')\r\nERROR: InvocationError: '/home/churchyard/Dokumenty/RedHat/numpy-stl/.tox/py37-nix/bin/python -m pytest -vvv'\r\n___________________________________ summary ____________________________________\r\nERROR:   py37-nix: commands failed\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/81", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/81/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/81/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/81", "id": 335232516, "node_id": "MDU6SXNzdWUzMzUyMzI1MTY=", "number": 81, "title": "`stl.mesh.Mesh.from_file` unable to obtain full mesh from stl file", "user": {"login": "joanneong", "id": 24493463, "node_id": "MDQ6VXNlcjI0NDkzNDYz", "avatar_url": "https://avatars1.githubusercontent.com/u/24493463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joanneong", "html_url": "https://github.com/joanneong", "followers_url": "https://api.github.com/users/joanneong/followers", "following_url": "https://api.github.com/users/joanneong/following{/other_user}", "gists_url": "https://api.github.com/users/joanneong/gists{/gist_id}", "starred_url": "https://api.github.com/users/joanneong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joanneong/subscriptions", "organizations_url": "https://api.github.com/users/joanneong/orgs", "repos_url": "https://api.github.com/users/joanneong/repos", "events_url": "https://api.github.com/users/joanneong/events{/privacy}", "received_events_url": "https://api.github.com/users/joanneong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-25T01:33:10Z", "updated_at": "2018-06-25T08:33:53Z", "closed_at": "2018-06-25T08:33:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Operating System**\r\nLinux, Ubuntu. Release 16.04\r\n\r\n**Problem**\r\n1. Attempt to load a mesh from an stl file using: \r\n`mesh = mesh.Mesh.from_file(r'./miljeep.stl')`\r\n\r\n2. Do a print to check the number of triangles stored:\r\n`print(mesh.vectors.shape)`\r\n\r\n3. Realise that instead of getting the expected (53182, 3, 3), I am only getting (376, 3, 3).\r\n\r\nIs this a bug with the `Mesh` package? What could be happening here?\r\n\r\nP/S I am guessing that the stl file is fine because I can see it on https://3dviewer.net/", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/78", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/78/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/78/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/78", "id": 322291216, "node_id": "MDU6SXNzdWUzMjIyOTEyMTY=", "number": 78, "title": "2.4.1: test_rotation fails on ppc64le", "user": {"login": "hroncok", "id": 2401856, "node_id": "MDQ6VXNlcjI0MDE4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2401856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hroncok", "html_url": "https://github.com/hroncok", "followers_url": "https://api.github.com/users/hroncok/followers", "following_url": "https://api.github.com/users/hroncok/following{/other_user}", "gists_url": "https://api.github.com/users/hroncok/gists{/gist_id}", "starred_url": "https://api.github.com/users/hroncok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hroncok/subscriptions", "organizations_url": "https://api.github.com/users/hroncok/orgs", "repos_url": "https://api.github.com/users/hroncok/repos", "events_url": "https://api.github.com/users/hroncok/events{/privacy}", "received_events_url": "https://api.github.com/users/hroncok/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-05-11T13:11:35Z", "updated_at": "2018-05-11T14:33:42Z", "closed_at": "2018-05-11T14:28:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm not familiar with ppc64le that much, but apparently something is broken here:\r\n\r\n```\r\n=================================== FAILURES ===================================\r\n_____________________________ test_rotation[False] _____________________________\r\n    def test_rotation():\r\n        # Create 6 faces of a cube\r\n        data = numpy.zeros(6, dtype=Mesh.dtype)\r\n    \r\n        # Top of the cube\r\n        data['vectors'][0] = numpy.array([[0, 1, 1],\r\n                                          [1, 0, 1],\r\n                                          [0, 0, 1]])\r\n        data['vectors'][1] = numpy.array([[1, 0, 1],\r\n                                          [0, 1, 1],\r\n                                          [1, 1, 1]])\r\n        # Right face\r\n        data['vectors'][2] = numpy.array([[1, 0, 0],\r\n                                          [1, 0, 1],\r\n                                          [1, 1, 0]])\r\n        data['vectors'][3] = numpy.array([[1, 1, 1],\r\n                                          [1, 0, 1],\r\n                                          [1, 1, 0]])\r\n        # Left face\r\n        data['vectors'][4] = numpy.array([[0, 0, 0],\r\n                                          [1, 0, 0],\r\n                                          [1, 0, 1]])\r\n        data['vectors'][5] = numpy.array([[0, 0, 0],\r\n                                          [0, 0, 1],\r\n                                          [1, 0, 1]])\r\n    \r\n        mesh = Mesh(data, remove_empty_areas=False)\r\n    \r\n        # Since the cube faces are from 0 to 1 we can move it to the middle by\r\n        # substracting .5\r\n        data['vectors'] -= .5\r\n    \r\n        # Rotate 90 degrees over the X axis followed by the Y axis followed by the\r\n        # X axis\r\n        mesh.rotate([0.5, 0.0, 0.0], math.radians(90))\r\n        mesh.rotate([0.0, 0.5, 0.0], math.radians(90))\r\n        mesh.rotate([0.5, 0.0, 0.0], math.radians(90))\r\n    \r\n        # Since the cube faces are from 0 to 1 we can move it to the middle by\r\n        # substracting .5\r\n        data['vectors'] += .5\r\n    \r\n>       assert (mesh.vectors == numpy.array([\r\n            [[1, 0, 0], [0, 1, 0], [0, 0, 0]],\r\n            [[0, 1, 0], [1, 0, 0], [1, 1, 0]],\r\n            [[0, 1, 1], [0, 1, 0], [1, 1, 1]],\r\n            [[1, 1, 0], [0, 1, 0], [1, 1, 1]],\r\n            [[0, 0, 1], [0, 1, 1], [0, 1, 0]],\r\n            [[0, 0, 1], [0, 0, 0], [0, 1, 0]],\r\n        ])).all()\r\nE       AssertionError: assert False\r\nE        +  where False = <built-in method all of numpy.ndarray object at 0x7fff889a3710>()\r\nE        +    where <built-in method all of numpy.ndarray object at 0x7fff889a3710> = array([[[9.99...dtype=float32) == array([[[1, 0,...  [0, 1, 0]]])\r\nE             Full diff:\r\nE             - array([[[9.9999994e-01, 2.9802322e-08, 0.0000000e+00],\r\nE             -         [2.9802322e-08, 1.0000000e+00, 5.9604645e-08],\r\nE             -         [0.0000000e+00, 5.9604645e-08, 2.9802322e-08]],\r\nE             + array([[[1, 0, 0],\r\nE             +         [0, 1, 0],\r\nE             +         [0, 0, 0]],...\r\nE             \r\nE             ...Full output truncated (36 lines hidden), use '-vv' to show.all\r\ntests/test_rotate.py:52: AssertionError\r\n_____________________________ test_rotation[True] ______________________________\r\n    def test_rotation():\r\n        # Create 6 faces of a cube\r\n        data = numpy.zeros(6, dtype=Mesh.dtype)\r\n    \r\n        # Top of the cube\r\n        data['vectors'][0] = numpy.array([[0, 1, 1],\r\n                                          [1, 0, 1],\r\n                                          [0, 0, 1]])\r\n        data['vectors'][1] = numpy.array([[1, 0, 1],\r\n                                          [0, 1, 1],\r\n                                          [1, 1, 1]])\r\n        # Right face\r\n        data['vectors'][2] = numpy.array([[1, 0, 0],\r\n                                          [1, 0, 1],\r\n                                          [1, 1, 0]])\r\n        data['vectors'][3] = numpy.array([[1, 1, 1],\r\n                                          [1, 0, 1],\r\n                                          [1, 1, 0]])\r\n        # Left face\r\n        data['vectors'][4] = numpy.array([[0, 0, 0],\r\n                                          [1, 0, 0],\r\n                                          [1, 0, 1]])\r\n        data['vectors'][5] = numpy.array([[0, 0, 0],\r\n                                          [0, 0, 1],\r\n                                          [1, 0, 1]])\r\n    \r\n        mesh = Mesh(data, remove_empty_areas=False)\r\n    \r\n        # Since the cube faces are from 0 to 1 we can move it to the middle by\r\n        # substracting .5\r\n        data['vectors'] -= .5\r\n    \r\n        # Rotate 90 degrees over the X axis followed by the Y axis followed by the\r\n        # X axis\r\n        mesh.rotate([0.5, 0.0, 0.0], math.radians(90))\r\n        mesh.rotate([0.0, 0.5, 0.0], math.radians(90))\r\n        mesh.rotate([0.5, 0.0, 0.0], math.radians(90))\r\n    \r\n        # Since the cube faces are from 0 to 1 we can move it to the middle by\r\n        # substracting .5\r\n        data['vectors'] += .5\r\n    \r\n>       assert (mesh.vectors == numpy.array([\r\n            [[1, 0, 0], [0, 1, 0], [0, 0, 0]],\r\n            [[0, 1, 0], [1, 0, 0], [1, 1, 0]],\r\n            [[0, 1, 1], [0, 1, 0], [1, 1, 1]],\r\n            [[1, 1, 0], [0, 1, 0], [1, 1, 1]],\r\n            [[0, 0, 1], [0, 1, 1], [0, 1, 0]],\r\n            [[0, 0, 1], [0, 0, 0], [0, 1, 0]],\r\n        ])).all()\r\nE       AssertionError: assert False\r\nE        +  where False = <built-in method all of numpy.ndarray object at 0x7fff88945350>()\r\nE        +    where <built-in method all of numpy.ndarray object at 0x7fff88945350> = array([[[9.99...dtype=float32) == array([[[1, 0,...  [0, 1, 0]]])\r\nE             Full diff:\r\nE             - array([[[9.9999994e-01, 2.9802322e-08, 0.0000000e+00],\r\nE             -         [2.9802322e-08, 1.0000000e+00, 5.9604645e-08],\r\nE             -         [0.0000000e+00, 5.9604645e-08, 2.9802322e-08]],\r\nE             + array([[[1, 0, 0],\r\nE             +         [0, 1, 0],\r\nE             +         [0, 0, 0]],...\r\nE             \r\nE             ...Full output truncated (36 lines hidden), use '-vv' to show.all\r\ntests/test_rotate.py:52: AssertionError\r\n================ 2 failed, 66 passed, 2 skipped in 1.18 seconds ================\r\n```\r\n\r\nI'll try to see at what point the result is wrong.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/77", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/77/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/77/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/77", "id": 319129776, "node_id": "MDU6SXNzdWUzMTkxMjk3NzY=", "number": 77, "title": "surface area for stl", "user": {"login": "vivek4890", "id": 7405114, "node_id": "MDQ6VXNlcjc0MDUxMTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/7405114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vivek4890", "html_url": "https://github.com/vivek4890", "followers_url": "https://api.github.com/users/vivek4890/followers", "following_url": "https://api.github.com/users/vivek4890/following{/other_user}", "gists_url": "https://api.github.com/users/vivek4890/gists{/gist_id}", "starred_url": "https://api.github.com/users/vivek4890/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vivek4890/subscriptions", "organizations_url": "https://api.github.com/users/vivek4890/orgs", "repos_url": "https://api.github.com/users/vivek4890/repos", "events_url": "https://api.github.com/users/vivek4890/events{/privacy}", "received_events_url": "https://api.github.com/users/vivek4890/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-01T06:42:02Z", "updated_at": "2018-05-01T11:54:36Z", "closed_at": "2018-05-01T08:46:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI want to calculate surface area for stl file, is there any method I can use to get surface area like \"get_mass_properties()\", I used it to calculate volume. I'm new in Python please suggest how can I get the surface area for any .stl file.\r\n\r\nthanks !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/76", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/76/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/76/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/76", "id": 317139415, "node_id": "MDU6SXNzdWUzMTcxMzk0MTU=", "number": 76, "title": "'module' object has no attribute 'IntEnum'", "user": {"login": "mspringer1", "id": 38685772, "node_id": "MDQ6VXNlcjM4Njg1Nzcy", "avatar_url": "https://avatars0.githubusercontent.com/u/38685772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mspringer1", "html_url": "https://github.com/mspringer1", "followers_url": "https://api.github.com/users/mspringer1/followers", "following_url": "https://api.github.com/users/mspringer1/following{/other_user}", "gists_url": "https://api.github.com/users/mspringer1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mspringer1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mspringer1/subscriptions", "organizations_url": "https://api.github.com/users/mspringer1/orgs", "repos_url": "https://api.github.com/users/mspringer1/repos", "events_url": "https://api.github.com/users/mspringer1/events{/privacy}", "received_events_url": "https://api.github.com/users/mspringer1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-24T09:18:12Z", "updated_at": "2018-04-24T11:48:51Z", "closed_at": "2018-04-24T11:00:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "hey I'm using numpy-stl with python 2.7\r\n\r\nwhen I try to run the example code:\r\n\r\n`import numpy\r\nfrom stl import mesh\r\nfrom mpl_toolkits import mplot3d\r\nfrom matplotlib import pyplot\r\n\r\nVERTICE_COUNT = 100\r\ndata = numpy.zeros(VERTICE_COUNT, dtype=mesh.Mesh.dtype)\r\nyour_mesh = mesh.Mesh(data, remove_empty_areas=False)\r\n\r\nfigure = pyplot.figure()\r\naxes = mplot3d.Axes3D(figure)\r\n\r\naxes.add_collection3d(mplot3d.art3d.Poly3DCollection(your_mesh.vectors))\r\n\r\nscale = your_mesh.points.flatten(-1)\r\naxes.auto_scale_xyz(scale, scale, scale)\r\n\r\npyplot.show()`\r\n\r\nI get the error:\r\n\r\n`Traceback (most recent call last):\r\n  File \"/Users/.../test.py\", line 2, in <module>\r\n    from stl import mesh\r\n  File \"/Users/Malte/.conda/envs/Studienarbeit/lib/python2.7/site-packages/stl/__init__.py\", line 1, in <module>\r\n    from .stl import BUFFER_SIZE\r\n  File \"/Users/Malte/.conda/envs/Studienarbeit/lib/python2.7/site-packages/stl/stl.py\", line 6, in <module>\r\n    import enum\r\nImportError: No module named enum`\r\n\r\nwhen i install the enum package and run the code i get following error:\r\n\r\n`Traceback (most recent call last):\r\n  File \"/Users/Malte/OneDrive/Uni/Master/3. Semester/Studienarbeit/Code/Studienarbeit/test.py\", line 2, in <module>\r\n    from stl import mesh\r\n  File \"/Users/Malte/.conda/envs/Studienarbeit/lib/python2.7/site-packages/stl/__init__.py\", line 1, in <module>\r\n    from .stl import BUFFER_SIZE\r\n  File \"/Users/Malte/.conda/envs/Studienarbeit/lib/python2.7/site-packages/stl/stl.py\", line 12, in <module>\r\n    from . import base\r\n  File \"/Users/Malte/.conda/envs/Studienarbeit/lib/python2.7/site-packages/stl/base.py\", line 21, in <module>\r\n    class Dimension(enum.IntEnum):\r\nAttributeError: 'module' object has no attribute 'IntEnum'`\r\n\r\nI've tried the uninstall stl , uninstall numpy-stl and install numpy-stl method\r\nI also have no file that is named stl.py in my project\r\n\r\nAny idea what can cause this problem?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/75", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/75/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/75/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/75", "id": 315862386, "node_id": "MDU6SXNzdWUzMTU4NjIzODY=", "number": 75, "title": "Display Textures in MatPlotLib", "user": {"login": "mustafa-qamaruddin", "id": 2887900, "node_id": "MDQ6VXNlcjI4ODc5MDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/2887900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mustafa-qamaruddin", "html_url": "https://github.com/mustafa-qamaruddin", "followers_url": "https://api.github.com/users/mustafa-qamaruddin/followers", "following_url": "https://api.github.com/users/mustafa-qamaruddin/following{/other_user}", "gists_url": "https://api.github.com/users/mustafa-qamaruddin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mustafa-qamaruddin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mustafa-qamaruddin/subscriptions", "organizations_url": "https://api.github.com/users/mustafa-qamaruddin/orgs", "repos_url": "https://api.github.com/users/mustafa-qamaruddin/repos", "events_url": "https://api.github.com/users/mustafa-qamaruddin/events{/privacy}", "received_events_url": "https://api.github.com/users/mustafa-qamaruddin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-04-19T12:49:05Z", "updated_at": "2018-04-24T11:00:30Z", "closed_at": "2018-04-24T11:00:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have managed to read STL files and display them with Mat Plot Lib. However, all the textures in the files and fine details are lost. What could be wrong?\r\n\r\nFor example, this is how the original file looks like with different viewer:\r\n\r\n![original model](http://res.cloudinary.com/dzl9mwemk/image/upload/v1524142015/FireShot_Capture_20_-_30363_-_Slope_Brick_18_4_x_2_-_https___printabrick.org_bricks_30363_qgsshl.png)\r\n\r\n\r\nThis is how it looks like on our system with Numpy STL:\r\n\r\n![numpy stl view](http://res.cloudinary.com/dzl9mwemk/image/upload/v1524142049/0000000013_h7rcdy.jpg)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/74", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/74/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/74/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/74", "id": 315446722, "node_id": "MDU6SXNzdWUzMTU0NDY3MjI=", "number": 74, "title": "get_mass_properties unreliable", "user": {"login": "zarmomin", "id": 24718484, "node_id": "MDQ6VXNlcjI0NzE4NDg0", "avatar_url": "https://avatars0.githubusercontent.com/u/24718484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zarmomin", "html_url": "https://github.com/zarmomin", "followers_url": "https://api.github.com/users/zarmomin/followers", "following_url": "https://api.github.com/users/zarmomin/following{/other_user}", "gists_url": "https://api.github.com/users/zarmomin/gists{/gist_id}", "starred_url": "https://api.github.com/users/zarmomin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zarmomin/subscriptions", "organizations_url": "https://api.github.com/users/zarmomin/orgs", "repos_url": "https://api.github.com/users/zarmomin/repos", "events_url": "https://api.github.com/users/zarmomin/events{/privacy}", "received_events_url": "https://api.github.com/users/zarmomin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 138464039, "node_id": "MDU6TGFiZWwxMzg0NjQwMzk=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}, {"id": 617430855, "node_id": "MDU6TGFiZWw2MTc0MzA4NTU=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/no-activity", "name": "no-activity", "color": "ffffff", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2018-04-18T11:50:35Z", "updated_at": "2018-10-03T00:51:27Z", "closed_at": "2018-10-03T00:51:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I ran get_mass_properties() on the cube from the \"Modifying Mesh objects\" example (https://github.com/WoLpH/numpy-stl#modifying-mesh-objects) and it reported 0.0 volume and subsequent failures on the cog and moment of inertia calculations.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/73", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/73/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/73/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/73", "id": 304614737, "node_id": "MDU6SXNzdWUzMDQ2MTQ3Mzc=", "number": 73, "title": "Export Mesh as 360 Images", "user": {"login": "mustafa-qamaruddin", "id": 2887900, "node_id": "MDQ6VXNlcjI4ODc5MDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/2887900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mustafa-qamaruddin", "html_url": "https://github.com/mustafa-qamaruddin", "followers_url": "https://api.github.com/users/mustafa-qamaruddin/followers", "following_url": "https://api.github.com/users/mustafa-qamaruddin/following{/other_user}", "gists_url": "https://api.github.com/users/mustafa-qamaruddin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mustafa-qamaruddin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mustafa-qamaruddin/subscriptions", "organizations_url": "https://api.github.com/users/mustafa-qamaruddin/orgs", "repos_url": "https://api.github.com/users/mustafa-qamaruddin/repos", "events_url": "https://api.github.com/users/mustafa-qamaruddin/events{/privacy}", "received_events_url": "https://api.github.com/users/mustafa-qamaruddin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-13T03:25:11Z", "updated_at": "2018-03-13T17:46:47Z", "closed_at": "2018-03-13T17:46:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a feature to convert the 3D mesh into individuals images for each angle of the 360 views?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/71", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/71/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/71/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/71", "id": 304005070, "node_id": "MDU6SXNzdWUzMDQwMDUwNzA=", "number": 71, "title": "Initial Update", "user": {"login": "pyup-bot", "id": 16239342, "node_id": "MDQ6VXNlcjE2MjM5MzQy", "avatar_url": "https://avatars0.githubusercontent.com/u/16239342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pyup-bot", "html_url": "https://github.com/pyup-bot", "followers_url": "https://api.github.com/users/pyup-bot/followers", "following_url": "https://api.github.com/users/pyup-bot/following{/other_user}", "gists_url": "https://api.github.com/users/pyup-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/pyup-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pyup-bot/subscriptions", "organizations_url": "https://api.github.com/users/pyup-bot/orgs", "repos_url": "https://api.github.com/users/pyup-bot/repos", "events_url": "https://api.github.com/users/pyup-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/pyup-bot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-03-09T22:48:23Z", "updated_at": "2018-03-09T22:49:06Z", "closed_at": "2018-03-09T22:49:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The bot created this issue to inform you that pyup.io has been set up on this repo.\nOnce you have closed it, the bot will open pull requests for updates as soon as they are available.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/70", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/70/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/70/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/70", "id": 303927681, "node_id": "MDU6SXNzdWUzMDM5Mjc2ODE=", "number": 70, "title": "BUG: Cannot convert negative value to char", "user": {"login": "avery-pelle", "id": 17552472, "node_id": "MDQ6VXNlcjE3NTUyNDcy", "avatar_url": "https://avatars1.githubusercontent.com/u/17552472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avery-pelle", "html_url": "https://github.com/avery-pelle", "followers_url": "https://api.github.com/users/avery-pelle/followers", "following_url": "https://api.github.com/users/avery-pelle/following{/other_user}", "gists_url": "https://api.github.com/users/avery-pelle/gists{/gist_id}", "starred_url": "https://api.github.com/users/avery-pelle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avery-pelle/subscriptions", "organizations_url": "https://api.github.com/users/avery-pelle/orgs", "repos_url": "https://api.github.com/users/avery-pelle/repos", "events_url": "https://api.github.com/users/avery-pelle/events{/privacy}", "received_events_url": "https://api.github.com/users/avery-pelle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-09T17:58:17Z", "updated_at": "2018-03-09T18:10:03Z", "closed_at": "2018-03-09T18:10:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nWhen I try to run marching_cubes_lewiner on my raspberry pi using a voxel array (640x480x100), I get an error telling me \"OverflowError: can't convert negative value to char\". I can't seem to run classic marching cubes either due to a MemoryError. This is on Raspbian Jesse 9.3 on a raspberry pi 3b running on python3 (3.5.3). Note that this same code runs perfectly fine on a Mac running 10.13.3 in python3 (3.6.4)\r\n\r\nHere is a copy of the log:\r\n\r\nFile \"/home/pi/.local/lib/python3.5/site-packages/skimage/measure/_marching_cubes_lewiner.py\", line 211, in marching_cubes_lewiner\r\n    L = _get_mc_luts()\r\n  File \"/home/pi/.local/lib/python3.5/site-packages/skimage/measure/_marching_cubes_lewiner.py\", line 286, in _get_mc_luts\r\n    _to_array(mcluts.TEST13), _to_array(mcluts.SUBCONFIG13),\r\n  File \"skimage/measure/_marching_cubes_lewiner_cy.pyx\", line 876, in skimage.measure._marching_cubes_lewiner_cy.LutProvider.__init__ (skimage/measure/_marching_cubes_lewiner_cy.c:8370)\r\n  File \"skimage/measure/_marching_cubes_lewiner_cy.pyx\", line 774, in skimage.measure._marching_cubes_lewiner_cy.Lut.__init__ (skimage/measure/_marching_cubes_lewiner_cy.c:7526)\r\nOverflowError: can't convert negative value to char", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/69", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/69/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/69/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/69", "id": 302957867, "node_id": "MDU6SXNzdWUzMDI5NTc4Njc=", "number": 69, "title": "How to deal with the negative diagonal elements of the inertia matrix?", "user": {"login": "onionsflying", "id": 19217655, "node_id": "MDQ6VXNlcjE5MjE3NjU1", "avatar_url": "https://avatars0.githubusercontent.com/u/19217655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/onionsflying", "html_url": "https://github.com/onionsflying", "followers_url": "https://api.github.com/users/onionsflying/followers", "following_url": "https://api.github.com/users/onionsflying/following{/other_user}", "gists_url": "https://api.github.com/users/onionsflying/gists{/gist_id}", "starred_url": "https://api.github.com/users/onionsflying/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/onionsflying/subscriptions", "organizations_url": "https://api.github.com/users/onionsflying/orgs", "repos_url": "https://api.github.com/users/onionsflying/repos", "events_url": "https://api.github.com/users/onionsflying/events{/privacy}", "received_events_url": "https://api.github.com/users/onionsflying/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-03-07T04:06:45Z", "updated_at": "2019-03-08T15:11:27Z", "closed_at": "2018-03-10T01:46:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have such a STL model:\r\nhttps://github.com/hans-robot/elfin_robot/blob/master/elfin_description/meshes/elfin5/elfin_link6.STL\r\n\r\nWhen I calculate the inertia matrix, I got results as follows:\r\n\r\nVolume: 0.000147312401871\r\nCenter of gravity: [-0.00092366 -0.10107767 -0.0003367 ]\r\nInertia matrix:\r\n[[ -6.36055479e-07   9.34708232e-09  -2.88727829e-09]\r\n [  9.34708232e-09   1.95924205e-07   4.32968570e-09]\r\n [ -2.88727829e-09   4.32968570e-09  -6.35165674e-07]]\r\n\r\nThere are two problems:\r\n1. The center of gravity is at the outside of the mesh\r\n2. There are two negative diagonal elements in inertia matrix\r\n\r\nCould someone tell me how to deal with these problems?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/68", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/68/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/68/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/68", "id": 302155299, "node_id": "MDU6SXNzdWUzMDIxNTUyOTk=", "number": 68, "title": " help!!1 on windows 8.1,I found this proplem:  from stl import mesh   File \"D:\\Program Files\\Anaconda3\\lib\\site-packages\\stl\\mesh.py\", line 4, in <module>     class Mesh(stl.BaseStl): AttributeError: module 'stl' has no attribute 'BaseStl',thanks in  advance!", "user": {"login": "675492062", "id": 7007669, "node_id": "MDQ6VXNlcjcwMDc2Njk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7007669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/675492062", "html_url": "https://github.com/675492062", "followers_url": "https://api.github.com/users/675492062/followers", "following_url": "https://api.github.com/users/675492062/following{/other_user}", "gists_url": "https://api.github.com/users/675492062/gists{/gist_id}", "starred_url": "https://api.github.com/users/675492062/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/675492062/subscriptions", "organizations_url": "https://api.github.com/users/675492062/orgs", "repos_url": "https://api.github.com/users/675492062/repos", "events_url": "https://api.github.com/users/675492062/events{/privacy}", "received_events_url": "https://api.github.com/users/675492062/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-05T02:49:25Z", "updated_at": "2018-03-07T17:23:53Z", "closed_at": "2018-03-07T17:23:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/66", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/66/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/66/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/66", "id": 285274150, "node_id": "MDU6SXNzdWUyODUyNzQxNTA=", "number": 66, "title": "Slicing with numpy-stl", "user": {"login": "darahan", "id": 34963382, "node_id": "MDQ6VXNlcjM0OTYzMzgy", "avatar_url": "https://avatars1.githubusercontent.com/u/34963382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darahan", "html_url": "https://github.com/darahan", "followers_url": "https://api.github.com/users/darahan/followers", "following_url": "https://api.github.com/users/darahan/following{/other_user}", "gists_url": "https://api.github.com/users/darahan/gists{/gist_id}", "starred_url": "https://api.github.com/users/darahan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darahan/subscriptions", "organizations_url": "https://api.github.com/users/darahan/orgs", "repos_url": "https://api.github.com/users/darahan/repos", "events_url": "https://api.github.com/users/darahan/events{/privacy}", "received_events_url": "https://api.github.com/users/darahan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-31T20:00:57Z", "updated_at": "2018-02-12T01:20:01Z", "closed_at": "2018-02-12T01:20:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nIs there an option within numpy-stl to slice the 3D arrays in numpy into 2D slices? If not, do you have suggestions on how to do this?\r\nCheers and happy new year!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/64", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/64/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/64/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/64", "id": 282389066, "node_id": "MDU6SXNzdWUyODIzODkwNjY=", "number": 64, "title": "STL files containing multiple solids", "user": {"login": "Ghostkeeper", "id": 2448634, "node_id": "MDQ6VXNlcjI0NDg2MzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2448634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ghostkeeper", "html_url": "https://github.com/Ghostkeeper", "followers_url": "https://api.github.com/users/Ghostkeeper/followers", "following_url": "https://api.github.com/users/Ghostkeeper/following{/other_user}", "gists_url": "https://api.github.com/users/Ghostkeeper/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ghostkeeper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ghostkeeper/subscriptions", "organizations_url": "https://api.github.com/users/Ghostkeeper/orgs", "repos_url": "https://api.github.com/users/Ghostkeeper/repos", "events_url": "https://api.github.com/users/Ghostkeeper/events{/privacy}", "received_events_url": "https://api.github.com/users/Ghostkeeper/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-15T10:49:12Z", "updated_at": "2017-12-17T11:56:40Z", "closed_at": "2017-12-17T11:56:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "We're seeing some STL files in the wild that have multiple solids in them. The one we were pointed to is here: https://www.thingiverse.com/thing:1322352\r\n\r\nThe file in question essentially has the following format:\r\n\r\n    solid ascii\r\n        ... <lots of facets>\r\n    endsolid\r\n    solid ascii\r\n        ... <lots of facets>\r\n    endsolid\r\n\r\nnumpy-stl loads only the first of the solids in the file.\r\n\r\nThe only STL file format specification I could find doesn't mention that this is allowed: http://www.fabbers.com/tech/STL_Format\r\nHowever as these files are going around on the internet, you could consider loading them. I would expect them to load as if all facets are in the same solid.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/63", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/63/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/63/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/63", "id": 276487982, "node_id": "MDU6SXNzdWUyNzY0ODc5ODI=", "number": 63, "title": "How to generate STL from loaded numpy array?", "user": {"login": "ZibiGit", "id": 33943631, "node_id": "MDQ6VXNlcjMzOTQzNjMx", "avatar_url": "https://avatars0.githubusercontent.com/u/33943631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZibiGit", "html_url": "https://github.com/ZibiGit", "followers_url": "https://api.github.com/users/ZibiGit/followers", "following_url": "https://api.github.com/users/ZibiGit/following{/other_user}", "gists_url": "https://api.github.com/users/ZibiGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZibiGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZibiGit/subscriptions", "organizations_url": "https://api.github.com/users/ZibiGit/orgs", "repos_url": "https://api.github.com/users/ZibiGit/repos", "events_url": "https://api.github.com/users/ZibiGit/events{/privacy}", "received_events_url": "https://api.github.com/users/ZibiGit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-11-24T00:08:12Z", "updated_at": "2017-11-25T02:08:26Z", "closed_at": "2017-11-25T00:18:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\n\r\nI'm struggling with a relatively simple issue. I've got several vtkPolyData files and I'd like to transform them into numpy arrays and then save them to npz file. For that purpose I decided to use numpy-stl module in such a way:\r\n\r\n1. Convert vtkPolyData to STL files\r\n2. Load STL files via numpy-stl\r\n3. Save numpy arrays to npz file\r\n4. Load npz file and get all arrays from them\r\n5. Recreate STL files and then vtkPolyData files.\r\n\r\nHowever, I do not know how to recreate the STL files from the loaded npz file. I would be grateful if you could help me. Here is a sample code for 2 stls in which I'm stuck (I don't know what to do next):\r\n\r\nmesh_1 = mesh.Mesh.from_file(\"surface_1.stl\")\r\nmesh_2 = mesh.Mesh.from_file(\"surface_2.stl\")\r\nnumpy.savez(\"file_with_arrays.npz\",mesh_1=mesh_1,mesh_2 =mesh_2 )\r\nnew_mesh1=npzfile['mesh_1']\r\nnew_mesh1 = mesh.Mesh(new_mesh1, remove_empty_areas=False)\r\nnew_mesh1.normals\r\nnew_mesh1.save('new_stl_file1.stl')\r\nnew_mesh2=npzfile['mesh_2']\r\nnew_mesh2 = mesh.Mesh(new_mesh2, remove_empty_areas=False)\r\nnew_mesh2.normals\r\nnew_mesh2.save('new_stl_file2.stl')\r\n\r\nThis complicated way of trying to save vtkPolyData into numpy arrays seems strange, however, I don't know how I can do it without numpy-stl module. If you could propose another way of doing it, I'd be extremely grateful. I tried searching for transforming vtkPolyData into vtkArray, then into numpy array and then vice versa, but I didn't find anything helpful. Thank you in advance for your help!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/62", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/62/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/62/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/62", "id": 272092838, "node_id": "MDU6SXNzdWUyNzIwOTI4Mzg=", "number": 62, "title": "How can we smooth the 3D object ?", "user": {"login": "ybdesire", "id": 5146225, "node_id": "MDQ6VXNlcjUxNDYyMjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/5146225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ybdesire", "html_url": "https://github.com/ybdesire", "followers_url": "https://api.github.com/users/ybdesire/followers", "following_url": "https://api.github.com/users/ybdesire/following{/other_user}", "gists_url": "https://api.github.com/users/ybdesire/gists{/gist_id}", "starred_url": "https://api.github.com/users/ybdesire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ybdesire/subscriptions", "organizations_url": "https://api.github.com/users/ybdesire/orgs", "repos_url": "https://api.github.com/users/ybdesire/repos", "events_url": "https://api.github.com/users/ybdesire/events{/privacy}", "received_events_url": "https://api.github.com/users/ybdesire/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-08T06:58:24Z", "updated_at": "2017-11-08T09:38:20Z", "closed_at": "2017-11-08T09:38:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to do some pre-process as opencv to the 3D object?\r\nSuch as smooth ?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/61", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/61/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/61/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/61", "id": 265470640, "node_id": "MDU6SXNzdWUyNjU0NzA2NDA=", "number": 61, "title": "Getting list of points without repetition", "user": {"login": "prapanchnair", "id": 8223581, "node_id": "MDQ6VXNlcjgyMjM1ODE=", "avatar_url": "https://avatars0.githubusercontent.com/u/8223581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prapanchnair", "html_url": "https://github.com/prapanchnair", "followers_url": "https://api.github.com/users/prapanchnair/followers", "following_url": "https://api.github.com/users/prapanchnair/following{/other_user}", "gists_url": "https://api.github.com/users/prapanchnair/gists{/gist_id}", "starred_url": "https://api.github.com/users/prapanchnair/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prapanchnair/subscriptions", "organizations_url": "https://api.github.com/users/prapanchnair/orgs", "repos_url": "https://api.github.com/users/prapanchnair/repos", "events_url": "https://api.github.com/users/prapanchnair/events{/privacy}", "received_events_url": "https://api.github.com/users/prapanchnair/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-14T07:04:24Z", "updated_at": "2017-10-30T01:58:55Z", "closed_at": "2017-10-30T01:58:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I see that there is no method to obtain the point cloud, i.e, all the vertices in the mesh without repetition. Currently I am doing this brute force, checking through all points. Is there an efficient way or am I missing a method?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/60", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/60/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/60/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/60", "id": 264339896, "node_id": "MDU6SXNzdWUyNjQzMzk4OTY=", "number": 60, "title": "Translation of Centre of Gravity to global origin", "user": {"login": "Vivian0108", "id": 22340711, "node_id": "MDQ6VXNlcjIyMzQwNzEx", "avatar_url": "https://avatars2.githubusercontent.com/u/22340711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vivian0108", "html_url": "https://github.com/Vivian0108", "followers_url": "https://api.github.com/users/Vivian0108/followers", "following_url": "https://api.github.com/users/Vivian0108/following{/other_user}", "gists_url": "https://api.github.com/users/Vivian0108/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vivian0108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vivian0108/subscriptions", "organizations_url": "https://api.github.com/users/Vivian0108/orgs", "repos_url": "https://api.github.com/users/Vivian0108/repos", "events_url": "https://api.github.com/users/Vivian0108/events{/privacy}", "received_events_url": "https://api.github.com/users/Vivian0108/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 617430855, "node_id": "MDU6TGFiZWw2MTc0MzA4NTU=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/no-activity", "name": "no-activity", "color": "ffffff", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-10T19:00:32Z", "updated_at": "2018-02-10T09:51:06Z", "closed_at": "2018-02-10T09:51:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "When center of gravity is calculated for a stl file, and the mesh is translated such that\r\nmy_mesh.translate(-1*cog), i.e entire mesh is translated such that its cog coincides with the origin. But when the cog of the translated mesh is calculated, it does not show origin, but rather a very small value such as ([ -1.02913186e-07,  -1.07319586e-07,  -2.17118228e-06]). So the mesh is not accurately translating to origin. Please check", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/59", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/59/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/59/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/59", "id": 245404200, "node_id": "MDU6SXNzdWUyNDU0MDQyMDA=", "number": 59, "title": "Convert to jpg file", "user": {"login": "burdeinyi", "id": 15889263, "node_id": "MDQ6VXNlcjE1ODg5MjYz", "avatar_url": "https://avatars2.githubusercontent.com/u/15889263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burdeinyi", "html_url": "https://github.com/burdeinyi", "followers_url": "https://api.github.com/users/burdeinyi/followers", "following_url": "https://api.github.com/users/burdeinyi/following{/other_user}", "gists_url": "https://api.github.com/users/burdeinyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/burdeinyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burdeinyi/subscriptions", "organizations_url": "https://api.github.com/users/burdeinyi/orgs", "repos_url": "https://api.github.com/users/burdeinyi/repos", "events_url": "https://api.github.com/users/burdeinyi/events{/privacy}", "received_events_url": "https://api.github.com/users/burdeinyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-25T13:38:25Z", "updated_at": "2017-07-25T22:30:57Z", "closed_at": "2017-07-25T22:30:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry for a silly question.\r\nIs here a way to take something like a snapshot of stl file in jpeg format? \r\nIf it is not, may somebody know how to do this stuff?\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/58", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/58/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/58/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/58", "id": 242727501, "node_id": "MDU6SXNzdWUyNDI3Mjc1MDE=", "number": 58, "title": "Rotate and rotation-matrix", "user": {"login": "ipere", "id": 28505831, "node_id": "MDQ6VXNlcjI4NTA1ODMx", "avatar_url": "https://avatars3.githubusercontent.com/u/28505831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ipere", "html_url": "https://github.com/ipere", "followers_url": "https://api.github.com/users/ipere/followers", "following_url": "https://api.github.com/users/ipere/following{/other_user}", "gists_url": "https://api.github.com/users/ipere/gists{/gist_id}", "starred_url": "https://api.github.com/users/ipere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ipere/subscriptions", "organizations_url": "https://api.github.com/users/ipere/orgs", "repos_url": "https://api.github.com/users/ipere/repos", "events_url": "https://api.github.com/users/ipere/events{/privacy}", "received_events_url": "https://api.github.com/users/ipere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-07-13T14:50:51Z", "updated_at": "2017-07-27T15:12:35Z", "closed_at": "2017-07-27T15:12:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\n\r\nI've read the documentation and the examples about the rotate method.\r\nBut I didn't understand if when you give a vector for the axis, your angle teta and a point it will do a rotation of teta around the axis which passes by the point and directed by the vector .\r\n\r\nOr do I need to use rotation_matrix with my vector for the axis after translating all my points ? \r\n\r\nThank you for your help ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/57", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/57/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/57/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/57", "id": 240934889, "node_id": "MDU6SXNzdWUyNDA5MzQ4ODk=", "number": 57, "title": "Problem with parent module", "user": {"login": "ipere", "id": 28505831, "node_id": "MDQ6VXNlcjI4NTA1ODMx", "avatar_url": "https://avatars3.githubusercontent.com/u/28505831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ipere", "html_url": "https://github.com/ipere", "followers_url": "https://api.github.com/users/ipere/followers", "following_url": "https://api.github.com/users/ipere/following{/other_user}", "gists_url": "https://api.github.com/users/ipere/gists{/gist_id}", "starred_url": "https://api.github.com/users/ipere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ipere/subscriptions", "organizations_url": "https://api.github.com/users/ipere/orgs", "repos_url": "https://api.github.com/users/ipere/repos", "events_url": "https://api.github.com/users/ipere/events{/privacy}", "received_events_url": "https://api.github.com/users/ipere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-06T12:06:27Z", "updated_at": "2017-07-07T06:34:37Z", "closed_at": "2017-07-07T06:34:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi ! \r\n\r\nI've got a problem with the example given here: https://w.wol.ph/2015/01/28/readingwriting-3d-stl-files-numpy-stl/\r\nIndeed, when I try to run it, I've got: \r\n\r\nSystemError: Parent module ' ' not loaded, cannot perform relative import\r\n\r\nAnd apparently it comes from \"from . import base\" line 19 in the stl.py file.\r\n\r\nThank you for your help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/56", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/56/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/56/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/56", "id": 239169449, "node_id": "MDU6SXNzdWUyMzkxNjk0NDk=", "number": 56, "title": "Translation by -COG doesn't make origo new COG", "user": {"login": "md2perpe", "id": 543239, "node_id": "MDQ6VXNlcjU0MzIzOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/543239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/md2perpe", "html_url": "https://github.com/md2perpe", "followers_url": "https://api.github.com/users/md2perpe/followers", "following_url": "https://api.github.com/users/md2perpe/following{/other_user}", "gists_url": "https://api.github.com/users/md2perpe/gists{/gist_id}", "starred_url": "https://api.github.com/users/md2perpe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/md2perpe/subscriptions", "organizations_url": "https://api.github.com/users/md2perpe/orgs", "repos_url": "https://api.github.com/users/md2perpe/repos", "events_url": "https://api.github.com/users/md2perpe/events{/privacy}", "received_events_url": "https://api.github.com/users/md2perpe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-28T13:46:17Z", "updated_at": "2017-07-27T17:01:51Z", "closed_at": "2017-07-27T17:01:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "After translating a mesh with -COG one would expect the new COG to be the coordinate origin (0, 0, 0) (modulo small float errors), but when running the code found in the gist with gear-complex.stl (also in the gist), the new COG is clearly off-origin. The z component changes from +1.6 to -12 and thus gets further away from origo.\r\n\r\nhttps://gist.github.com/md2perpe/80b097e58ddfd5f6cb48c014875ab565\r\n\r\nSystem info:\r\n```\r\n$ uname -srvmpio\r\nLinux 3.16.0-4-amd64 #1 SMP Debian 3.16.43-2 (2017-04-30) x86_64 unknown unknown GNU/Linux\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/55", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/55/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/55/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/55", "id": 235034145, "node_id": "MDU6SXNzdWUyMzUwMzQxNDU=", "number": 55, "title": "Cannot import mesh ", "user": {"login": "wheemzy1", "id": 20496138, "node_id": "MDQ6VXNlcjIwNDk2MTM4", "avatar_url": "https://avatars2.githubusercontent.com/u/20496138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wheemzy1", "html_url": "https://github.com/wheemzy1", "followers_url": "https://api.github.com/users/wheemzy1/followers", "following_url": "https://api.github.com/users/wheemzy1/following{/other_user}", "gists_url": "https://api.github.com/users/wheemzy1/gists{/gist_id}", "starred_url": "https://api.github.com/users/wheemzy1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wheemzy1/subscriptions", "organizations_url": "https://api.github.com/users/wheemzy1/orgs", "repos_url": "https://api.github.com/users/wheemzy1/repos", "events_url": "https://api.github.com/users/wheemzy1/events{/privacy}", "received_events_url": "https://api.github.com/users/wheemzy1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "WoLpH", "id": 270571, "node_id": "MDQ6VXNlcjI3MDU3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/270571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WoLpH", "html_url": "https://github.com/WoLpH", "followers_url": "https://api.github.com/users/WoLpH/followers", "following_url": "https://api.github.com/users/WoLpH/following{/other_user}", "gists_url": "https://api.github.com/users/WoLpH/gists{/gist_id}", "starred_url": "https://api.github.com/users/WoLpH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WoLpH/subscriptions", "organizations_url": "https://api.github.com/users/WoLpH/orgs", "repos_url": "https://api.github.com/users/WoLpH/repos", "events_url": "https://api.github.com/users/WoLpH/events{/privacy}", "received_events_url": "https://api.github.com/users/WoLpH/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "WoLpH", "id": 270571, "node_id": "MDQ6VXNlcjI3MDU3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/270571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WoLpH", "html_url": "https://github.com/WoLpH", "followers_url": "https://api.github.com/users/WoLpH/followers", "following_url": "https://api.github.com/users/WoLpH/following{/other_user}", "gists_url": "https://api.github.com/users/WoLpH/gists{/gist_id}", "starred_url": "https://api.github.com/users/WoLpH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WoLpH/subscriptions", "organizations_url": "https://api.github.com/users/WoLpH/orgs", "repos_url": "https://api.github.com/users/WoLpH/repos", "events_url": "https://api.github.com/users/WoLpH/events{/privacy}", "received_events_url": "https://api.github.com/users/WoLpH/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2017-06-11T00:09:47Z", "updated_at": "2020-03-31T11:31:15Z", "closed_at": "2017-07-06T15:26:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm a novice and this is probably user error, but when I run my program I receive error: cannot import mesh. \r\n\r\nAny idea what this may be about? Please be specific in your response, as I am a beginner in Python. \r\n\r\nThanks so much for your help. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/54", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/54/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/54/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/54", "id": 232200950, "node_id": "MDU6SXNzdWUyMzIyMDA5NTA=", "number": 54, "title": "Numpy-stl not installable under Windows 7 and Python 3", "user": {"login": "vollbier", "id": 12721170, "node_id": "MDQ6VXNlcjEyNzIxMTcw", "avatar_url": "https://avatars3.githubusercontent.com/u/12721170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vollbier", "html_url": "https://github.com/vollbier", "followers_url": "https://api.github.com/users/vollbier/followers", "following_url": "https://api.github.com/users/vollbier/following{/other_user}", "gists_url": "https://api.github.com/users/vollbier/gists{/gist_id}", "starred_url": "https://api.github.com/users/vollbier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vollbier/subscriptions", "organizations_url": "https://api.github.com/users/vollbier/orgs", "repos_url": "https://api.github.com/users/vollbier/repos", "events_url": "https://api.github.com/users/vollbier/events{/privacy}", "received_events_url": "https://api.github.com/users/vollbier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "WoLpH", "id": 270571, "node_id": "MDQ6VXNlcjI3MDU3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/270571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WoLpH", "html_url": "https://github.com/WoLpH", "followers_url": "https://api.github.com/users/WoLpH/followers", "following_url": "https://api.github.com/users/WoLpH/following{/other_user}", "gists_url": "https://api.github.com/users/WoLpH/gists{/gist_id}", "starred_url": "https://api.github.com/users/WoLpH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WoLpH/subscriptions", "organizations_url": "https://api.github.com/users/WoLpH/orgs", "repos_url": "https://api.github.com/users/WoLpH/repos", "events_url": "https://api.github.com/users/WoLpH/events{/privacy}", "received_events_url": "https://api.github.com/users/WoLpH/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "WoLpH", "id": 270571, "node_id": "MDQ6VXNlcjI3MDU3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/270571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WoLpH", "html_url": "https://github.com/WoLpH", "followers_url": "https://api.github.com/users/WoLpH/followers", "following_url": "https://api.github.com/users/WoLpH/following{/other_user}", "gists_url": "https://api.github.com/users/WoLpH/gists{/gist_id}", "starred_url": "https://api.github.com/users/WoLpH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WoLpH/subscriptions", "organizations_url": "https://api.github.com/users/WoLpH/orgs", "repos_url": "https://api.github.com/users/WoLpH/repos", "events_url": "https://api.github.com/users/WoLpH/events{/privacy}", "received_events_url": "https://api.github.com/users/WoLpH/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2017-05-30T09:57:10Z", "updated_at": "2017-07-27T17:42:28Z", "closed_at": "2017-07-27T17:39:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "The numpy-stl package cannot be installed with Python 3 under Windows, since Cython does not\r\nfully support Python 3. (At least v2.2.3 has this problem.) In the\r\n\"stl/_speedups.pyx\" file the statement in line 4\r\n``IF UNAME_SYSNAME == u\"Windows\":``\r\nis not evaluated correctly.\r\nCheers, dietrich\r\n\r\nPS: Tested on Window7, Python 3.6, Cython 0.25.2 (Anaconda 4.3)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/53", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/53/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/53/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/53", "id": 226727789, "node_id": "MDU6SXNzdWUyMjY3Mjc3ODk=", "number": 53, "title": "Add possibility to rotate through custom rotation matrices", "user": {"login": "WoLpH", "id": 270571, "node_id": "MDQ6VXNlcjI3MDU3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/270571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WoLpH", "html_url": "https://github.com/WoLpH", "followers_url": "https://api.github.com/users/WoLpH/followers", "following_url": "https://api.github.com/users/WoLpH/following{/other_user}", "gists_url": "https://api.github.com/users/WoLpH/gists{/gist_id}", "starred_url": "https://api.github.com/users/WoLpH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WoLpH/subscriptions", "organizations_url": "https://api.github.com/users/WoLpH/orgs", "repos_url": "https://api.github.com/users/WoLpH/repos", "events_url": "https://api.github.com/users/WoLpH/events{/privacy}", "received_events_url": "https://api.github.com/users/WoLpH/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 138464038, "node_id": "MDU6TGFiZWwxMzg0NjQwMzg=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "WoLpH", "id": 270571, "node_id": "MDQ6VXNlcjI3MDU3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/270571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WoLpH", "html_url": "https://github.com/WoLpH", "followers_url": "https://api.github.com/users/WoLpH/followers", "following_url": "https://api.github.com/users/WoLpH/following{/other_user}", "gists_url": "https://api.github.com/users/WoLpH/gists{/gist_id}", "starred_url": "https://api.github.com/users/WoLpH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WoLpH/subscriptions", "organizations_url": "https://api.github.com/users/WoLpH/orgs", "repos_url": "https://api.github.com/users/WoLpH/repos", "events_url": "https://api.github.com/users/WoLpH/events{/privacy}", "received_events_url": "https://api.github.com/users/WoLpH/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "WoLpH", "id": 270571, "node_id": "MDQ6VXNlcjI3MDU3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/270571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WoLpH", "html_url": "https://github.com/WoLpH", "followers_url": "https://api.github.com/users/WoLpH/followers", "following_url": "https://api.github.com/users/WoLpH/following{/other_user}", "gists_url": "https://api.github.com/users/WoLpH/gists{/gist_id}", "starred_url": "https://api.github.com/users/WoLpH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WoLpH/subscriptions", "organizations_url": "https://api.github.com/users/WoLpH/orgs", "repos_url": "https://api.github.com/users/WoLpH/repos", "events_url": "https://api.github.com/users/WoLpH/events{/privacy}", "received_events_url": "https://api.github.com/users/WoLpH/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2017-05-06T01:35:01Z", "updated_at": "2018-03-10T13:19:23Z", "closed_at": "2018-03-10T03:10:41Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Copied from wolph's blog: https://w.wol.ph/about/#comment-174\r\n\r\nFirst, many thanks for your numpy-stl module. Most helpful. I have one suggestion to make:\r\n\r\nThe only rotation you have enabled in your code is around an arbitrary axis (and a point), which is super helpful. I understand that you are using the rotation_matrix function which calculates the appropriate rotation matrix, which you then use to rotate the stl.\r\n\r\nI would find it very useful (and powerful) to provide a second function that would allow a rotation around a user supplied rotation matrix.\r\n\r\nWhat I am thinking is this:\r\n\r\n```\r\nrollMatrix = mesh.Mesh.rotation_matrix((1,0,0), heel_rads)\r\npitchMatrix = mesh.Mesh.rotation_matrix((0,1,0), pitch_rads)\r\ncombinedMatrix = numpy.dot(rollMatrix, pitchMatrix)\r\nmy_mesh.rotate_using_matrix(combinedMatrix)\r\n```\r\n\r\nThis would allow for very easy chaining of matrices.\r\n\r\nThe work-around is very easy, but this seems like a really quick and useful addition\u2026", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/52", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/52/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/52/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/52", "id": 223209680, "node_id": "MDU6SXNzdWUyMjMyMDk2ODA=", "number": 52, "title": "mesh.from_file throws Assertion Error if matplotlib figure is open when speedups=True", "user": {"login": "alexblaessle", "id": 16922191, "node_id": "MDQ6VXNlcjE2OTIyMTkx", "avatar_url": "https://avatars1.githubusercontent.com/u/16922191?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexblaessle", "html_url": "https://github.com/alexblaessle", "followers_url": "https://api.github.com/users/alexblaessle/followers", "following_url": "https://api.github.com/users/alexblaessle/following{/other_user}", "gists_url": "https://api.github.com/users/alexblaessle/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexblaessle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexblaessle/subscriptions", "organizations_url": "https://api.github.com/users/alexblaessle/orgs", "repos_url": "https://api.github.com/users/alexblaessle/repos", "events_url": "https://api.github.com/users/alexblaessle/events{/privacy}", "received_events_url": "https://api.github.com/users/alexblaessle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 138464039, "node_id": "MDU6TGFiZWwxMzg0NjQwMzk=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "WoLpH", "id": 270571, "node_id": "MDQ6VXNlcjI3MDU3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/270571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WoLpH", "html_url": "https://github.com/WoLpH", "followers_url": "https://api.github.com/users/WoLpH/followers", "following_url": "https://api.github.com/users/WoLpH/following{/other_user}", "gists_url": "https://api.github.com/users/WoLpH/gists{/gist_id}", "starred_url": "https://api.github.com/users/WoLpH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WoLpH/subscriptions", "organizations_url": "https://api.github.com/users/WoLpH/orgs", "repos_url": "https://api.github.com/users/WoLpH/repos", "events_url": "https://api.github.com/users/WoLpH/events{/privacy}", "received_events_url": "https://api.github.com/users/WoLpH/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "WoLpH", "id": 270571, "node_id": "MDQ6VXNlcjI3MDU3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/270571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WoLpH", "html_url": "https://github.com/WoLpH", "followers_url": "https://api.github.com/users/WoLpH/followers", "following_url": "https://api.github.com/users/WoLpH/following{/other_user}", "gists_url": "https://api.github.com/users/WoLpH/gists{/gist_id}", "starred_url": "https://api.github.com/users/WoLpH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WoLpH/subscriptions", "organizations_url": "https://api.github.com/users/WoLpH/orgs", "repos_url": "https://api.github.com/users/WoLpH/repos", "events_url": "https://api.github.com/users/WoLpH/events{/privacy}", "received_events_url": "https://api.github.com/users/WoLpH/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 39, "created_at": "2017-04-20T21:44:11Z", "updated_at": "2018-11-23T03:14:03Z", "closed_at": "2018-11-23T03:12:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I run into troubles loading .stl files with ``stl.Mesh.from_file`` when there is some instance of matplotlib or Qt running in the same process. That is\r\n\r\n```` \r\nimport stl\r\nimport matplotlib.pyplot as plt\r\n\r\nmesh=stl.Mesh.from_file(pathToStlFile)\r\n````\r\n\r\nworks great. However, if before initiate a matplotlib figure, that is\r\n\r\n````\r\nplt.figure()\r\nmesh=stl.Mesh.from_file(pathToStlFile)\r\n````\r\n\r\nI get the following ``Assertion Error``:\r\n\r\n````\r\n File \"/usr/local/lib/python2.7/dist-packages/stl/stl.py\", line 316, in from_file\r\n    fh, mode=mode, speedups=speedups)\r\n  File \"/usr/local/lib/python2.7/dist-packages/stl/stl.py\", line 85, in load\r\n    name, data = cls._load_binary(fh, header, check_size=True)\r\n  File \"/usr/local/lib/python2.7/dist-packages/stl/stl.py\", line 102, in _load_binary\r\n    count, MAX_COUNT)\r\nAssertionError: File too large, got 909389366 triangles which exceeds the maximum of 100000000\r\n````\r\n\r\nLooking through the code in ``BaseStl`` and reading through this issue https://github.com/WoLpH/numpy-stl/issues/37, I realized that this is due to the fallback if ``_load_ascii`` throws a runtime error such as \r\n\r\n````\r\n File \"/usr/local/lib/python2.7/dist-packages/stl/stl.py\", line 212, in _load_ascii\r\n    return _speedups.ascii_read(fh, header)\r\n  File \"stl/_speedups.pyx\", line 132, in stl._speedups.ascii_read (stl/_speedups.c:2613)\r\nRuntimeError: (0, \"Can't read vertex (4:vertex 176.46 176.46 0)\")\r\n````\r\n\r\nSo it seems that somehow the speedup is not working properly (some Cython clash with Qt/matplotlib?). Turns out that \r\n\r\n````\r\nplt.figure()\r\nmesh=stl.Mesh.from_file(pathToStlFile,speedup=False)\r\n````\r\n\r\nworks great. This took me a while to figure out and I thought it might be interesting.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/51", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/51/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/51/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/51", "id": 216230681, "node_id": "MDU6SXNzdWUyMTYyMzA2ODE=", "number": 51, "title": "Normals per vertex", "user": {"login": "kjyv", "id": 12260, "node_id": "MDQ6VXNlcjEyMjYw", "avatar_url": "https://avatars0.githubusercontent.com/u/12260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjyv", "html_url": "https://github.com/kjyv", "followers_url": "https://api.github.com/users/kjyv/followers", "following_url": "https://api.github.com/users/kjyv/following{/other_user}", "gists_url": "https://api.github.com/users/kjyv/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjyv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjyv/subscriptions", "organizations_url": "https://api.github.com/users/kjyv/orgs", "repos_url": "https://api.github.com/users/kjyv/repos", "events_url": "https://api.github.com/users/kjyv/events{/privacy}", "received_events_url": "https://api.github.com/users/kjyv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 138464038, "node_id": "MDU6TGFiZWwxMzg0NjQwMzg=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "WoLpH", "id": 270571, "node_id": "MDQ6VXNlcjI3MDU3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/270571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WoLpH", "html_url": "https://github.com/WoLpH", "followers_url": "https://api.github.com/users/WoLpH/followers", "following_url": "https://api.github.com/users/WoLpH/following{/other_user}", "gists_url": "https://api.github.com/users/WoLpH/gists{/gist_id}", "starred_url": "https://api.github.com/users/WoLpH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WoLpH/subscriptions", "organizations_url": "https://api.github.com/users/WoLpH/orgs", "repos_url": "https://api.github.com/users/WoLpH/repos", "events_url": "https://api.github.com/users/WoLpH/events{/privacy}", "received_events_url": "https://api.github.com/users/WoLpH/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "WoLpH", "id": 270571, "node_id": "MDQ6VXNlcjI3MDU3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/270571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WoLpH", "html_url": "https://github.com/WoLpH", "followers_url": "https://api.github.com/users/WoLpH/followers", "following_url": "https://api.github.com/users/WoLpH/following{/other_user}", "gists_url": "https://api.github.com/users/WoLpH/gists{/gist_id}", "starred_url": "https://api.github.com/users/WoLpH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WoLpH/subscriptions", "organizations_url": "https://api.github.com/users/WoLpH/orgs", "repos_url": "https://api.github.com/users/WoLpH/repos", "events_url": "https://api.github.com/users/WoLpH/events{/privacy}", "received_events_url": "https://api.github.com/users/WoLpH/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2017-03-22T22:41:59Z", "updated_at": "2018-03-10T19:37:28Z", "closed_at": "2018-03-10T03:18:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice to (optionally) get the normals for each vertex instead of per triangle. Usually adjacency information is needed for the triangles in that case, but I'm not sure there are any guarantees to the order of the triangles given in STL and therefore numpy-stl.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/50", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/50/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/50/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/50", "id": 214138180, "node_id": "MDU6SXNzdWUyMTQxMzgxODA=", "number": 50, "title": "Detaching vectors and data['vectors']", "user": {"login": "Marriaga", "id": 13881436, "node_id": "MDQ6VXNlcjEzODgxNDM2", "avatar_url": "https://avatars1.githubusercontent.com/u/13881436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Marriaga", "html_url": "https://github.com/Marriaga", "followers_url": "https://api.github.com/users/Marriaga/followers", "following_url": "https://api.github.com/users/Marriaga/following{/other_user}", "gists_url": "https://api.github.com/users/Marriaga/gists{/gist_id}", "starred_url": "https://api.github.com/users/Marriaga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Marriaga/subscriptions", "organizations_url": "https://api.github.com/users/Marriaga/orgs", "repos_url": "https://api.github.com/users/Marriaga/repos", "events_url": "https://api.github.com/users/Marriaga/events{/privacy}", "received_events_url": "https://api.github.com/users/Marriaga/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-14T16:55:20Z", "updated_at": "2017-03-23T02:15:59Z", "closed_at": "2017-03-23T02:15:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider a mesh object defined as `MO = mesh.Mesh.from_file(TT)`\r\n\r\nDue to the way Python works, if I use inplace operations on `MO.vectors`,  then `MO.vectors` and `MO.data` are both updated. However, if I assign something to `MO.vectors`, then the `MO.data` isn't updated and the object basically has two different meshes at the same time. \r\n\r\nThe problem with this behavior is that changing `MO.vectors` doesn't consistently work (see example below). This is concerning because some operations work on `MO.vectors` assuming that no detachment occurred (Rotation, min, max, etc). Even in one of the examples the construction of the mesh is done by operating on `MO.vectors`.\r\n\r\nI would suggest not having a `MO.data` at all but maybe a warning before saving if `MO.data['vectors']` is different from `MO.vectors`  would already be very helpful in debugging.\r\n\r\nBest regards,\r\nMiguel\r\n\r\n\r\n```\r\nfrom __future__ import division\r\nimport numpy as np\r\nimport stl\r\nfrom stl import mesh\r\n\r\nTT = \"TwoTriangles.stl\"\r\nTTo=\"TwoTriangles_out.stl\"\r\n\r\nMO = mesh.Mesh.from_file(TT)\r\n\r\nMO.vectors *=0.5 #Does not detach\r\nprint \"Not-Detached difference   = \" + str(np.linalg.norm(np.array(MO.vectors-MO.data['vectors'])))\r\nMO.vectors *=2.0\r\n\r\nfor i in range(2):\r\n    for j in range(3):\r\n        MO.vectors[i][j] = MO.vectors[i][j]*0.5\r\nprint \"Not-Detached difference 2 = \" + str(np.linalg.norm(np.array(MO.vectors-MO.data['vectors'])))\r\nMO.vectors *=2.0\r\n\r\nMO.vectors = MO.vectors*0.5 #Detaches\r\n#MO.data['vectors']=MO.vectors\r\nprint \"Detached difference       = \" + str(np.linalg.norm(np.array(MO.vectors-MO.data['vectors'])))\r\n\t\t\r\nMO.save(TTo,mode=stl.Mode.ASCII)\r\nMR = mesh.Mesh.from_file(TTo)\r\nprint \"Loaded File difference    = \" + str(np.linalg.norm(np.array(MO.vectors-MR.vectors)))\r\n```\r\n\r\nThe `TwoTriangles.stl` file looks like this:\r\n```\r\nsolid TwoTriangles.stl\r\nfacet normal 0.000000 0.000000 1.000000\r\n  outer loop\r\n    vertex -1.000000 1.000000 0.000000\r\n    vertex -2.000000 0.000000 0.000000\r\n    vertex -1.000000 0.000000 0.000000\r\n  endloop\r\nendfacet\r\nfacet normal 0.000000 0.000000 1.000000\r\n  outer loop\r\n    vertex 0.000000 1.000000 0.000000\r\n    vertex -1.000000 1.000000 0.000000\r\n    vertex -1.000000 0.000000 0.000000\r\n  endloop\r\nendfacet\r\nendsolid TwoTriangles.stl\r\n```\r\n\r\nThe result:\r\n```\r\nNot-Detached difference   = 0.0\r\nNot-Detached difference 2 = 0.0\r\nDetached difference       = 1.65831\r\nLoaded File difference    = 1.65831\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/49", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/49/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/49/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/49", "id": 207533888, "node_id": "MDU6SXNzdWUyMDc1MzM4ODg=", "number": 49, "title": "stl to nrrd volumes", "user": {"login": "sagarhukkire", "id": 20017611, "node_id": "MDQ6VXNlcjIwMDE3NjEx", "avatar_url": "https://avatars2.githubusercontent.com/u/20017611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sagarhukkire", "html_url": "https://github.com/sagarhukkire", "followers_url": "https://api.github.com/users/sagarhukkire/followers", "following_url": "https://api.github.com/users/sagarhukkire/following{/other_user}", "gists_url": "https://api.github.com/users/sagarhukkire/gists{/gist_id}", "starred_url": "https://api.github.com/users/sagarhukkire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sagarhukkire/subscriptions", "organizations_url": "https://api.github.com/users/sagarhukkire/orgs", "repos_url": "https://api.github.com/users/sagarhukkire/repos", "events_url": "https://api.github.com/users/sagarhukkire/events{/privacy}", "received_events_url": "https://api.github.com/users/sagarhukkire/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-14T14:41:09Z", "updated_at": "2017-06-01T08:24:56Z", "closed_at": "2017-06-01T08:24:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi \r\n\r\nI have mesh in .stl files and I want to convert to .nrrd files to get volume not header information.\r\n\r\nHow I can proceed? Thanks in advance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/48", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/48/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/48/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/48", "id": 207455706, "node_id": "MDU6SXNzdWUyMDc0NTU3MDY=", "number": 48, "title": "Help with writting binary stl file to opened zip file", "user": {"login": "tibor-vavra", "id": 4319021, "node_id": "MDQ6VXNlcjQzMTkwMjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4319021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tibor-vavra", "html_url": "https://github.com/tibor-vavra", "followers_url": "https://api.github.com/users/tibor-vavra/followers", "following_url": "https://api.github.com/users/tibor-vavra/following{/other_user}", "gists_url": "https://api.github.com/users/tibor-vavra/gists{/gist_id}", "starred_url": "https://api.github.com/users/tibor-vavra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tibor-vavra/subscriptions", "organizations_url": "https://api.github.com/users/tibor-vavra/orgs", "repos_url": "https://api.github.com/users/tibor-vavra/repos", "events_url": "https://api.github.com/users/tibor-vavra/events{/privacy}", "received_events_url": "https://api.github.com/users/tibor-vavra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-02-14T09:06:14Z", "updated_at": "2017-02-15T14:03:21Z", "closed_at": "2017-02-15T14:03:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI really like your library and I'm using it in one project for reading and writting stl files from/to zip file. \r\n\r\nBut I found only way for writting/reading ascii type of stl not for binary:\r\n\r\n\r\n```python\r\n#ascii type\r\nwith ZipFile(filename, 'w', ZIP_DEFLATED) as openedZipfile:\r\n    fileLike = StringIO()\r\n    mesh._write_ascii(fh=fileLike, name=model.filename)\r\n    openedZipfile.writestr(model.filename, fileLike.getvalue())\r\n    fileLike.close()\r\n```\r\n\r\n\r\nDo you have any idea how to write a binary type?\r\n\r\nMany thanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/47", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/47/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/47/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/47", "id": 206771963, "node_id": "MDU6SXNzdWUyMDY3NzE5NjM=", "number": 47, "title": "from stl import mesh fails", "user": {"login": "ragural", "id": 2908579, "node_id": "MDQ6VXNlcjI5MDg1Nzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2908579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ragural", "html_url": "https://github.com/ragural", "followers_url": "https://api.github.com/users/ragural/followers", "following_url": "https://api.github.com/users/ragural/following{/other_user}", "gists_url": "https://api.github.com/users/ragural/gists{/gist_id}", "starred_url": "https://api.github.com/users/ragural/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ragural/subscriptions", "organizations_url": "https://api.github.com/users/ragural/orgs", "repos_url": "https://api.github.com/users/ragural/repos", "events_url": "https://api.github.com/users/ragural/events{/privacy}", "received_events_url": "https://api.github.com/users/ragural/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-02-10T11:22:32Z", "updated_at": "2020-07-21T12:06:53Z", "closed_at": "2017-03-23T02:15:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am on windows 10 and installed numpy-stl per https://pypi.python.org/pypi/numpy-stl .When I run any samples I get following error at line \r\n\"from stl import mesh\"\r\nImportError: cannot import name 'mesh'\r\n\r\nI could see mesh.py under stl folder in my site-packages. \r\n\r\nPlease help me fix this issue. \r\n\r\nregards\r\nRaghavendra", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/46", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/46/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/46/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/46", "id": 201971110, "node_id": "MDU6SXNzdWUyMDE5NzExMTA=", "number": 46, "title": "debian / ubuntu packaging", "user": {"login": "arthurlutz", "id": 108437, "node_id": "MDQ6VXNlcjEwODQzNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/108437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arthurlutz", "html_url": "https://github.com/arthurlutz", "followers_url": "https://api.github.com/users/arthurlutz/followers", "following_url": "https://api.github.com/users/arthurlutz/following{/other_user}", "gists_url": "https://api.github.com/users/arthurlutz/gists{/gist_id}", "starred_url": "https://api.github.com/users/arthurlutz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arthurlutz/subscriptions", "organizations_url": "https://api.github.com/users/arthurlutz/orgs", "repos_url": "https://api.github.com/users/arthurlutz/repos", "events_url": "https://api.github.com/users/arthurlutz/events{/privacy}", "received_events_url": "https://api.github.com/users/arthurlutz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 138464039, "node_id": "MDU6TGFiZWwxMzg0NjQwMzk=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}, {"id": 617430855, "node_id": "MDU6TGFiZWw2MTc0MzA4NTU=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/no-activity", "name": "no-activity", "color": "ffffff", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "WoLpH", "id": 270571, "node_id": "MDQ6VXNlcjI3MDU3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/270571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WoLpH", "html_url": "https://github.com/WoLpH", "followers_url": "https://api.github.com/users/WoLpH/followers", "following_url": "https://api.github.com/users/WoLpH/following{/other_user}", "gists_url": "https://api.github.com/users/WoLpH/gists{/gist_id}", "starred_url": "https://api.github.com/users/WoLpH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WoLpH/subscriptions", "organizations_url": "https://api.github.com/users/WoLpH/orgs", "repos_url": "https://api.github.com/users/WoLpH/repos", "events_url": "https://api.github.com/users/WoLpH/events{/privacy}", "received_events_url": "https://api.github.com/users/WoLpH/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "WoLpH", "id": 270571, "node_id": "MDQ6VXNlcjI3MDU3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/270571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WoLpH", "html_url": "https://github.com/WoLpH", "followers_url": "https://api.github.com/users/WoLpH/followers", "following_url": "https://api.github.com/users/WoLpH/following{/other_user}", "gists_url": "https://api.github.com/users/WoLpH/gists{/gist_id}", "starred_url": "https://api.github.com/users/WoLpH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WoLpH/subscriptions", "organizations_url": "https://api.github.com/users/WoLpH/orgs", "repos_url": "https://api.github.com/users/WoLpH/repos", "events_url": "https://api.github.com/users/WoLpH/events{/privacy}", "received_events_url": "https://api.github.com/users/WoLpH/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 11, "created_at": "2017-01-19T20:47:39Z", "updated_at": "2017-08-19T13:44:02Z", "closed_at": "2017-08-19T13:44:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that numpy-stl is used by Cura https://github.com/Ultimaker/Cura/  Cura is distributed as a debian package for ubuntu/debian. \r\n\r\nIt would be nice to have a debian package for numpy-stl tool that it could depend on or recommend. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/43", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/43/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/43/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/43", "id": 198151654, "node_id": "MDU6SXNzdWUxOTgxNTE2NTQ=", "number": 43, "title": "Tests failing on big endian", "user": {"login": "hroncok", "id": 2401856, "node_id": "MDQ6VXNlcjI0MDE4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2401856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hroncok", "html_url": "https://github.com/hroncok", "followers_url": "https://api.github.com/users/hroncok/followers", "following_url": "https://api.github.com/users/hroncok/following{/other_user}", "gists_url": "https://api.github.com/users/hroncok/gists{/gist_id}", "starred_url": "https://api.github.com/users/hroncok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hroncok/subscriptions", "organizations_url": "https://api.github.com/users/hroncok/orgs", "repos_url": "https://api.github.com/users/hroncok/repos", "events_url": "https://api.github.com/users/hroncok/events{/privacy}", "received_events_url": "https://api.github.com/users/hroncok/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-30T14:10:35Z", "updated_at": "2016-12-30T15:35:49Z", "closed_at": "2016-12-30T15:35:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm trying to package numpy-stl for Fedora.\r\nHowever, currently the tests fail on ppc64 which is Big Endian.\r\n\r\n[Full build log](https://kojipkgs.fedoraproject.org//work/tasks/8714/17118714/build.log), just the tests:\r\n\r\n<details>\r\n\r\n```\r\n+ /usr/bin/python3 setup.py pytest\r\nrunning pytest\r\nrunning egg_info\r\nwriting numpy_stl.egg-info/PKG-INFO\r\nwriting dependency_links to numpy_stl.egg-info/dependency_links.txt\r\nwriting entry points to numpy_stl.egg-info/entry_points.txt\r\nwriting requirements to numpy_stl.egg-info/requires.txt\r\nwriting top-level names to numpy_stl.egg-info/top_level.txt\r\nreading manifest file 'numpy_stl.egg-info/SOURCES.txt'\r\nreading manifest template 'MANIFEST.in'\r\nwarning: manifest_maker: MANIFEST.in, line 1: unknown action 'include-recursive'\r\nwarning: no previously-included files matching '*.py[co]' found anywhere in distribution\r\nno previously-included directories found matching 'docs/_build'\r\nwriting manifest file 'numpy_stl.egg-info/SOURCES.txt'\r\nrunning build_ext\r\ncopying build/lib.linux-ppc64-3.6/stl/_speedups.cpython-36m-ppc64-linux-gnu.so -> stl\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.6.0, pytest-3.0.5, py-1.4.31, pluggy-0.4.0\r\nrootdir: /builddir/build/BUILD/numpy-stl-2.1.0, inifile: \r\ncollected 58 items\r\ntests/test_ascii.py ..\r\ntests/test_commandline.py FF..F...\r\ntests/test_convert.py ......\r\ntests/test_mesh.py ..............\r\ntests/test_meshProperties.py FFFFFF\r\ntests/test_multiple.py ........\r\ntests/test_rotate.py ..............\r\n=================================== FAILURES ===================================\r\n_______________________________ test_main[False] _______________________________\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n>                   fh, header, speedups=speedups)\r\nstl/stl.py:71: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'>\r\nheader = b'solid test.stl    2014-10-16 15:37:40.542327 halfdonut.stl                      '\r\nspeedups = False\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        if _speedups and speedups:\r\n            return _speedups.ascii_read(fh, header)\r\n        else:\r\n            iterator = cls._ascii_reader(fh, header)\r\n            name = next(iterator)\r\n>           return name, numpy.fromiter(iterator, dtype=cls.dtype)\r\nstl/stl.py:218: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'>\r\nheader = b'solid test.stl    2014-10-16 15:37:40.542327 halfdonut.stl                       \\x01\\x00\\x00;\\xa1n\\xbc\\xe6\\xf5\\x95=...@(\\xefC>;\\xc7p?\\x00\\x00\\x83\\xe1\\x91=T\\xf7e=H\\xf2B\\xbd7q6@(\\xefC>;\\xc7p?JA\\x1d@\\xe6\\x04\\xb5>\\t\\xfb\\n?\\x85\\x080@\\xe6\\x04'\r\n    @classmethod\r\n    def _ascii_reader(cls, fh, header):\r\n        if b'\\n' in header:\r\n            recoverable = [True]\r\n        else:\r\n            recoverable = [False]\r\n            header += b(fh.read(BUFFER_SIZE))\r\n    \r\n        lines = b(header).split(b('\\n'))\r\n    \r\n        def get(prefix=''):\r\n            prefix = b(prefix)\r\n    \r\n            if lines:\r\n                line = lines.pop(0)\r\n            else:\r\n                raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n            if not lines:\r\n                recoverable[0] = False\r\n    \r\n                # Read more lines and make sure we prepend any old data\r\n                lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n                line += lines.pop(0)\r\n    \r\n            line = line.lower().strip()\r\n            if line == b(''):\r\n                return get(prefix)\r\n    \r\n            if prefix:\r\n                if line.startswith(prefix):\r\n                    values = line.replace(prefix, b(''), 1).strip().split()\r\n                elif line.startswith(b('endsolid')):\r\n                    # go back to the beginning of new solid part\r\n                    size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                    if size_unprocessedlines > 0:\r\n                        position = fh.tell()\r\n                        fh.seek(position - size_unprocessedlines)\r\n                    raise StopIteration()\r\n                else:\r\n                    raise RuntimeError(recoverable[0],\r\n                                       '%r should start with %r' % (line,\r\n                                                                    prefix))\r\n    \r\n                if len(values) == 3:\r\n                    return [float(v) for v in values]\r\n                else:  # pragma: no cover\r\n                    raise RuntimeError(recoverable[0],\r\n                                       'Incorrect value %r' % line)\r\n            else:\r\n                return b(line)\r\n    \r\n        line = get()\r\n        if not line.startswith(b('solid ')) and line.startswith(b('solid')):\r\n            cls.warning('ASCII STL files should start with solid <space>. '\r\n                        'The application that produced this STL file may be '\r\n                        'faulty, please report this error. The erroneous '\r\n                        'line: %r', line)\r\n    \r\n        if not lines:\r\n            raise RuntimeError(recoverable[0],\r\n                               'No lines found, impossible to read')\r\n    \r\n        # Yield the name\r\n        yield line[5:].strip()\r\n    \r\n        while True:\r\n            # Read from the header lines first, until that point we can recover\r\n            # and go to the binary option. After that we cannot due to\r\n            # unseekable files such as sys.stdin\r\n            #\r\n            # Numpy doesn't support any non-file types so wrapping with a\r\n            # buffer and/or StringIO does not work.\r\n            try:\r\n>               normals = get('facet normal')\r\nstl/stl.py:197: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nprefix = b'facet normal'\r\n    def get(prefix=''):\r\n        prefix = b(prefix)\r\n    \r\n        if lines:\r\n            line = lines.pop(0)\r\n        else:\r\n            raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n        if not lines:\r\n            recoverable[0] = False\r\n    \r\n            # Read more lines and make sure we prepend any old data\r\n            lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n            line += lines.pop(0)\r\n    \r\n        line = line.lower().strip()\r\n        if line == b(''):\r\n            return get(prefix)\r\n    \r\n        if prefix:\r\n            if line.startswith(prefix):\r\n                values = line.replace(prefix, b(''), 1).strip().split()\r\n            elif line.startswith(b('endsolid')):\r\n                # go back to the beginning of new solid part\r\n                size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                if size_unprocessedlines > 0:\r\n                    position = fh.tell()\r\n                    fh.seek(position - size_unprocessedlines)\r\n                raise StopIteration()\r\n            else:\r\n                raise RuntimeError(recoverable[0],\r\n                                   '%r should start with %r' % (line,\r\n>                                                               prefix))\r\nE               RuntimeError: (False, \"b'!\\\\xbc\\\\xafw\\\\x7f>\\\\xe6\\\\x04\\\\xb5>\\\\x88e{?l\\\\x08\\\\x9e>f\\\\x83\\\\xec>\\\\x00\\\\x00\\\\xc0?\\\\xd1v\\\\xcc>f\\\\x83\\\\xec>\\\\xbe\\\\xa4\\\\x85?\\\\x00\\\\x00\\\\xb1\\\\xf5e\\\\xbd\\\\xed\\\\x13\\\\xac=\\\\x9f\\\\xf76\\\\xbc\\\\xafw\\\\x7f>\\\\xe6\\\\x04\\\\xb5>\\\\x88e{?4\\\\xf6\\\\x15>\\\\xe6\\\\x04\\\\xb5>\\\\x00\\\\x00\\\\xc0?l\\\\x08\\\\x9e>f\\\\x83\\\\xec>\\\\x00\\\\x00\\\\xc0?\\\\x00\\\\x00\\\\xfamj\\\\xbc[\\\\xf6\\\\x95=\\\\x9c,\\\\x07\\\\xbc\\\\x15x(?f\\\\x83\\\\xec>\\\\x15x(?\\\\x9a|\\\\x13?\\\\x00\\\\x00\\\\x00?w\\\\x04\\\\x8f?\\\\t\\\\xfbj?\\\\x00\\\\x00\\\\x00?\\\\t\\\\xfbj?\\\\x00\\\\x00c\\\\x02q\\\\xbc0\\\\xa8\\\\xb2=\\\\xcf\\\\t!\\\\xbc\\\\x15x(?f\\\\x83\\\\xec>\\\\x15x(?\\\\xd1v\\\\xcc>f\\\\x83\\\\xec>\\\\xbe\\\\xa4\\\\x85?\\\\x9a|\\\\x13?\\\\x00\\\\x00\\\\x00?w\\\\x04\\\\x8f?\\\\x00\\\\x00\\\\xfa\\\\x97#<\\\\xfa\\\\x88r=\\\\x85\\\\x9e\\\\xda;\\\\xfe\\\\x9dm?f\\\\x83\\\\xec>\\\\xfe\\\\x9dm?\\\\t\\\\xfbj?\\\\x00\\\\x00\\\\x00?\\\\t\\\\xfbj?\\\\xdc\\\\xbd@?f\\\\x83\\\\xec>\\\\x9dc\\\\x98?\\\\x00\\\\x00\\\\xfamj<\\\\x1f\\\\xf6\\\\x95=\\\\x9c,\\\\x07<\\\\xdc\\\\xbd@?f\\\\x83\\\\xec>\\\\x9dc\\\\x98?\\\\t\\\\xfbj?\\\\x00\\\\x00\\\\x00?\\\\t\\\\xfbj?\\\\x9a|\\\\x13?\\\\x00\\\\x00\\\\x00?w\\\\x04\\\\x8f?\\\\x00\\\\x00y8\\\\xba<\\\\x8c_$=\\\\xc0\\\\xd7x<k}\\\\x85?\\\\xe6\\\\x04\\\\xb5>k}\\\\x85?\\\\xdc\\\\xbd@?f\\\\x83\\\\xec>\\\\x9dc\\\\x98?x\\\\x1bg?\\\\xe6\\\\x04\\\\xb5>\\\\xdau\\\\xa0?\\\\x00\\\\x00\\\\xbc\\\\xf0\\\\xe8<\\\\x19\\\\x9bm=b\\\\xa5\\\\x9b<k}\\\\x85?\\\\xe6\\\\x04\\\\xb5>k}\\\\x85?\\\\xfe\\\\x9dm?f\\\\x83\\\\xec>\\\\xfe\\\\x9dm?\\\\xdc\\\\xbd@?f\\\\x83\\\\xec>\\\\x9dc\\\\x98?\\\\x00\\\\x00' should start with b'facet normal'\")\r\nstl/stl.py:165: RuntimeError\r\nDuring handling of the above exception, another exception occurred:\r\nascii_file = '/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_ascii/HalfDonut.stl'\r\nbinary_file = '/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'\r\ntmpdir = local('/tmp/pytest-of-mockbuild/pytest-0/test_main_False_0')\r\nspeedups = False\r\n    def test_main(ascii_file, binary_file, tmpdir, speedups):\r\n        original_argv = sys.argv[:]\r\n        args_pre = ['stl']\r\n        args_post = [str(tmpdir.join('output.stl'))]\r\n    \r\n        if not speedups:\r\n            args_pre.append('-s')\r\n    \r\n        try:\r\n            sys.argv[:] = args_pre + [ascii_file] + args_post\r\n            main.main()\r\n            sys.argv[:] = args_pre + ['-r', ascii_file] + args_post\r\n            main.main()\r\n            sys.argv[:] = args_pre + ['-a', binary_file] + args_post\r\n>           main.main()\r\ntests/test_commandline.py:20: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/main.py:53: in main\r\n    speedups=not args.disable_speedups)\r\nstl/stl.py:314: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\nstl/stl.py:87: in load\r\n    name, data = cls._load_binary(fh, header, check_size=True)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'>\r\nheader = b'solid test.stl    2014-10-16 15:37:40.542327 halfdonut.stl                      '\r\ncheck_size = True\r\n    @classmethod\r\n    def _load_binary(cls, fh, header, check_size=False):\r\n        # Read the triangle count\r\n        count_data = fh.read(COUNT_SIZE)\r\n        if len(count_data) != COUNT_SIZE:\r\n            count = 0\r\n        else:\r\n            count, = struct.unpack(s('@i'), b(count_data))\r\n        # raise RuntimeError()\r\n        assert count < MAX_COUNT, ('File too large, got %d triangles which '\r\n                                   'exceeds the maximum of %d') % (\r\n>                                      count, MAX_COUNT)\r\nE       AssertionError: File too large, got 536936448 triangles which exceeds the maximum of 100000000\r\nstl/stl.py:104: AssertionError\r\n_______________________________ test_main[True] ________________________________\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = True\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n>                   fh, header, speedups=speedups)\r\nstl/stl.py:71: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'>\r\nheader = b'solid test.stl    2014-10-16 15:37:40.542327 halfdonut.stl                      '\r\nspeedups = True\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        if _speedups and speedups:\r\n>           return _speedups.ascii_read(fh, header)\r\nstl/stl.py:214: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n>   raise RuntimeError(state.recoverable,\r\nE   RuntimeError: (0, \"Can't read normals (2:b'!\\\\xbc\\\\xafw\\\\x7f>\\\\xe6\\\\x04\\\\xb5>\\\\x88e{?l\\\\x08\\\\x9e>f\\\\x83\\\\xec>')\")\r\nstl/_speedups.pyx:120: RuntimeError\r\nDuring handling of the above exception, another exception occurred:\r\nascii_file = '/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_ascii/HalfDonut.stl'\r\nbinary_file = '/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'\r\ntmpdir = local('/tmp/pytest-of-mockbuild/pytest-0/test_main_True_0')\r\nspeedups = True\r\n    def test_main(ascii_file, binary_file, tmpdir, speedups):\r\n        original_argv = sys.argv[:]\r\n        args_pre = ['stl']\r\n        args_post = [str(tmpdir.join('output.stl'))]\r\n    \r\n        if not speedups:\r\n            args_pre.append('-s')\r\n    \r\n        try:\r\n            sys.argv[:] = args_pre + [ascii_file] + args_post\r\n            main.main()\r\n            sys.argv[:] = args_pre + ['-r', ascii_file] + args_post\r\n            main.main()\r\n            sys.argv[:] = args_pre + ['-a', binary_file] + args_post\r\n>           main.main()\r\ntests/test_commandline.py:20: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/main.py:53: in main\r\n    speedups=not args.disable_speedups)\r\nstl/stl.py:314: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\nstl/stl.py:87: in load\r\n    name, data = cls._load_binary(fh, header, check_size=True)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'>\r\nheader = b'solid test.stl    2014-10-16 15:37:40.542327 halfdonut.stl                      '\r\ncheck_size = True\r\n    @classmethod\r\n    def _load_binary(cls, fh, header, check_size=False):\r\n        # Read the triangle count\r\n        count_data = fh.read(COUNT_SIZE)\r\n        if len(count_data) != COUNT_SIZE:\r\n            count = 0\r\n        else:\r\n            count, = struct.unpack(s('@i'), b(count_data))\r\n        # raise RuntimeError()\r\n        assert count < MAX_COUNT, ('File too large, got %d triangles which '\r\n                                   'exceeds the maximum of %d') % (\r\n>                                      count, MAX_COUNT)\r\nE       AssertionError: File too large, got 536936448 triangles which exceeds the maximum of 100000000\r\nstl/stl.py:104: AssertionError\r\n______________________________ test_ascii[False] _______________________________\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n>                   fh, header, speedups=speedups)\r\nstl/stl.py:71: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'>\r\nheader = b'solid test.stl    2014-10-16 15:37:40.542327 halfdonut.stl                      '\r\nspeedups = False\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        if _speedups and speedups:\r\n            return _speedups.ascii_read(fh, header)\r\n        else:\r\n            iterator = cls._ascii_reader(fh, header)\r\n            name = next(iterator)\r\n>           return name, numpy.fromiter(iterator, dtype=cls.dtype)\r\nstl/stl.py:218: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'>\r\nheader = b'solid test.stl    2014-10-16 15:37:40.542327 halfdonut.stl                       \\x01\\x00\\x00;\\xa1n\\xbc\\xe6\\xf5\\x95=...@(\\xefC>;\\xc7p?\\x00\\x00\\x83\\xe1\\x91=T\\xf7e=H\\xf2B\\xbd7q6@(\\xefC>;\\xc7p?JA\\x1d@\\xe6\\x04\\xb5>\\t\\xfb\\n?\\x85\\x080@\\xe6\\x04'\r\n    @classmethod\r\n    def _ascii_reader(cls, fh, header):\r\n        if b'\\n' in header:\r\n            recoverable = [True]\r\n        else:\r\n            recoverable = [False]\r\n            header += b(fh.read(BUFFER_SIZE))\r\n    \r\n        lines = b(header).split(b('\\n'))\r\n    \r\n        def get(prefix=''):\r\n            prefix = b(prefix)\r\n    \r\n            if lines:\r\n                line = lines.pop(0)\r\n            else:\r\n                raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n            if not lines:\r\n                recoverable[0] = False\r\n    \r\n                # Read more lines and make sure we prepend any old data\r\n                lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n                line += lines.pop(0)\r\n    \r\n            line = line.lower().strip()\r\n            if line == b(''):\r\n                return get(prefix)\r\n    \r\n            if prefix:\r\n                if line.startswith(prefix):\r\n                    values = line.replace(prefix, b(''), 1).strip().split()\r\n                elif line.startswith(b('endsolid')):\r\n                    # go back to the beginning of new solid part\r\n                    size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                    if size_unprocessedlines > 0:\r\n                        position = fh.tell()\r\n                        fh.seek(position - size_unprocessedlines)\r\n                    raise StopIteration()\r\n                else:\r\n                    raise RuntimeError(recoverable[0],\r\n                                       '%r should start with %r' % (line,\r\n                                                                    prefix))\r\n    \r\n                if len(values) == 3:\r\n                    return [float(v) for v in values]\r\n                else:  # pragma: no cover\r\n                    raise RuntimeError(recoverable[0],\r\n                                       'Incorrect value %r' % line)\r\n            else:\r\n                return b(line)\r\n    \r\n        line = get()\r\n        if not line.startswith(b('solid ')) and line.startswith(b('solid')):\r\n            cls.warning('ASCII STL files should start with solid <space>. '\r\n                        'The application that produced this STL file may be '\r\n                        'faulty, please report this error. The erroneous '\r\n                        'line: %r', line)\r\n    \r\n        if not lines:\r\n            raise RuntimeError(recoverable[0],\r\n                               'No lines found, impossible to read')\r\n    \r\n        # Yield the name\r\n        yield line[5:].strip()\r\n    \r\n        while True:\r\n            # Read from the header lines first, until that point we can recover\r\n            # and go to the binary option. After that we cannot due to\r\n            # unseekable files such as sys.stdin\r\n            #\r\n            # Numpy doesn't support any non-file types so wrapping with a\r\n            # buffer and/or StringIO does not work.\r\n            try:\r\n>               normals = get('facet normal')\r\nstl/stl.py:197: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nprefix = b'facet normal'\r\n    def get(prefix=''):\r\n        prefix = b(prefix)\r\n    \r\n        if lines:\r\n            line = lines.pop(0)\r\n        else:\r\n            raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n        if not lines:\r\n            recoverable[0] = False\r\n    \r\n            # Read more lines and make sure we prepend any old data\r\n            lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n            line += lines.pop(0)\r\n    \r\n        line = line.lower().strip()\r\n        if line == b(''):\r\n            return get(prefix)\r\n    \r\n        if prefix:\r\n            if line.startswith(prefix):\r\n                values = line.replace(prefix, b(''), 1).strip().split()\r\n            elif line.startswith(b('endsolid')):\r\n                # go back to the beginning of new solid part\r\n                size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                if size_unprocessedlines > 0:\r\n                    position = fh.tell()\r\n                    fh.seek(position - size_unprocessedlines)\r\n                raise StopIteration()\r\n            else:\r\n                raise RuntimeError(recoverable[0],\r\n                                   '%r should start with %r' % (line,\r\n>                                                               prefix))\r\nE               RuntimeError: (False, \"b'!\\\\xbc\\\\xafw\\\\x7f>\\\\xe6\\\\x04\\\\xb5>\\\\x88e{?l\\\\x08\\\\x9e>f\\\\x83\\\\xec>\\\\x00\\\\x00\\\\xc0?\\\\xd1v\\\\xcc>f\\\\x83\\\\xec>\\\\xbe\\\\xa4\\\\x85?\\\\x00\\\\x00\\\\xb1\\\\xf5e\\\\xbd\\\\xed\\\\x13\\\\xac=\\\\x9f\\\\xf76\\\\xbc\\\\xafw\\\\x7f>\\\\xe6\\\\x04\\\\xb5>\\\\x88e{?4\\\\xf6\\\\x15>\\\\xe6\\\\x04\\\\xb5>\\\\x00\\\\x00\\\\xc0?l\\\\x08\\\\x9e>f\\\\x83\\\\xec>\\\\x00\\\\x00\\\\xc0?\\\\x00\\\\x00\\\\xfamj\\\\xbc[\\\\xf6\\\\x95=\\\\x9c,\\\\x07\\\\xbc\\\\x15x(?f\\\\x83\\\\xec>\\\\x15x(?\\\\x9a|\\\\x13?\\\\x00\\\\x00\\\\x00?w\\\\x04\\\\x8f?\\\\t\\\\xfbj?\\\\x00\\\\x00\\\\x00?\\\\t\\\\xfbj?\\\\x00\\\\x00c\\\\x02q\\\\xbc0\\\\xa8\\\\xb2=\\\\xcf\\\\t!\\\\xbc\\\\x15x(?f\\\\x83\\\\xec>\\\\x15x(?\\\\xd1v\\\\xcc>f\\\\x83\\\\xec>\\\\xbe\\\\xa4\\\\x85?\\\\x9a|\\\\x13?\\\\x00\\\\x00\\\\x00?w\\\\x04\\\\x8f?\\\\x00\\\\x00\\\\xfa\\\\x97#<\\\\xfa\\\\x88r=\\\\x85\\\\x9e\\\\xda;\\\\xfe\\\\x9dm?f\\\\x83\\\\xec>\\\\xfe\\\\x9dm?\\\\t\\\\xfbj?\\\\x00\\\\x00\\\\x00?\\\\t\\\\xfbj?\\\\xdc\\\\xbd@?f\\\\x83\\\\xec>\\\\x9dc\\\\x98?\\\\x00\\\\x00\\\\xfamj<\\\\x1f\\\\xf6\\\\x95=\\\\x9c,\\\\x07<\\\\xdc\\\\xbd@?f\\\\x83\\\\xec>\\\\x9dc\\\\x98?\\\\t\\\\xfbj?\\\\x00\\\\x00\\\\x00?\\\\t\\\\xfbj?\\\\x9a|\\\\x13?\\\\x00\\\\x00\\\\x00?w\\\\x04\\\\x8f?\\\\x00\\\\x00y8\\\\xba<\\\\x8c_$=\\\\xc0\\\\xd7x<k}\\\\x85?\\\\xe6\\\\x04\\\\xb5>k}\\\\x85?\\\\xdc\\\\xbd@?f\\\\x83\\\\xec>\\\\x9dc\\\\x98?x\\\\x1bg?\\\\xe6\\\\x04\\\\xb5>\\\\xdau\\\\xa0?\\\\x00\\\\x00\\\\xbc\\\\xf0\\\\xe8<\\\\x19\\\\x9bm=b\\\\xa5\\\\x9b<k}\\\\x85?\\\\xe6\\\\x04\\\\xb5>k}\\\\x85?\\\\xfe\\\\x9dm?f\\\\x83\\\\xec>\\\\xfe\\\\x9dm?\\\\xdc\\\\xbd@?f\\\\x83\\\\xec>\\\\x9dc\\\\x98?\\\\x00\\\\x00' should start with b'facet normal'\")\r\nstl/stl.py:165: RuntimeError\r\nDuring handling of the above exception, another exception occurred:\r\nbinary_file = '/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'\r\ntmpdir = local('/tmp/pytest-of-mockbuild/pytest-0/test_ascii_False_0')\r\nspeedups = False\r\n    def test_ascii(binary_file, tmpdir, speedups):\r\n        original_argv = sys.argv[:]\r\n        try:\r\n            sys.argv[:] = [\r\n                'stl',\r\n                '-s' if not speedups else '',\r\n                binary_file,\r\n                str(tmpdir.join('ascii.stl')),\r\n            ]\r\n            try:\r\n>               main.to_ascii()\r\ntests/test_commandline.py:49: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/main.py:73: in to_ascii\r\n    speedups=not args.disable_speedups)\r\nstl/stl.py:314: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\nstl/stl.py:87: in load\r\n    name, data = cls._load_binary(fh, header, check_size=True)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'>\r\nheader = b'solid test.stl    2014-10-16 15:37:40.542327 halfdonut.stl                      '\r\ncheck_size = True\r\n    @classmethod\r\n    def _load_binary(cls, fh, header, check_size=False):\r\n        # Read the triangle count\r\n        count_data = fh.read(COUNT_SIZE)\r\n        if len(count_data) != COUNT_SIZE:\r\n            count = 0\r\n        else:\r\n            count, = struct.unpack(s('@i'), b(count_data))\r\n        # raise RuntimeError()\r\n        assert count < MAX_COUNT, ('File too large, got %d triangles which '\r\n                                   'exceeds the maximum of %d') % (\r\n>                                      count, MAX_COUNT)\r\nE       AssertionError: File too large, got 536936448 triangles which exceeds the maximum of 100000000\r\nstl/stl.py:104: AssertionError\r\n__________________ test_mass_properties_for_half_donut[False] __________________\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = False\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n>                   fh, header, speedups=speedups)\r\nstl/stl.py:71: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'>\r\nheader = b'solid test.stl    2014-10-16 15:37:40.542327 halfdonut.stl                      '\r\nspeedups = False\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        if _speedups and speedups:\r\n            return _speedups.ascii_read(fh, header)\r\n        else:\r\n            iterator = cls._ascii_reader(fh, header)\r\n            name = next(iterator)\r\n>           return name, numpy.fromiter(iterator, dtype=cls.dtype)\r\nstl/stl.py:218: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'>\r\nheader = b'solid test.stl    2014-10-16 15:37:40.542327 halfdonut.stl                       \\x01\\x00\\x00;\\xa1n\\xbc\\xe6\\xf5\\x95=...@(\\xefC>;\\xc7p?\\x00\\x00\\x83\\xe1\\x91=T\\xf7e=H\\xf2B\\xbd7q6@(\\xefC>;\\xc7p?JA\\x1d@\\xe6\\x04\\xb5>\\t\\xfb\\n?\\x85\\x080@\\xe6\\x04'\r\n    @classmethod\r\n    def _ascii_reader(cls, fh, header):\r\n        if b'\\n' in header:\r\n            recoverable = [True]\r\n        else:\r\n            recoverable = [False]\r\n            header += b(fh.read(BUFFER_SIZE))\r\n    \r\n        lines = b(header).split(b('\\n'))\r\n    \r\n        def get(prefix=''):\r\n            prefix = b(prefix)\r\n    \r\n            if lines:\r\n                line = lines.pop(0)\r\n            else:\r\n                raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n            if not lines:\r\n                recoverable[0] = False\r\n    \r\n                # Read more lines and make sure we prepend any old data\r\n                lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n                line += lines.pop(0)\r\n    \r\n            line = line.lower().strip()\r\n            if line == b(''):\r\n                return get(prefix)\r\n    \r\n            if prefix:\r\n                if line.startswith(prefix):\r\n                    values = line.replace(prefix, b(''), 1).strip().split()\r\n                elif line.startswith(b('endsolid')):\r\n                    # go back to the beginning of new solid part\r\n                    size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                    if size_unprocessedlines > 0:\r\n                        position = fh.tell()\r\n                        fh.seek(position - size_unprocessedlines)\r\n                    raise StopIteration()\r\n                else:\r\n                    raise RuntimeError(recoverable[0],\r\n                                       '%r should start with %r' % (line,\r\n                                                                    prefix))\r\n    \r\n                if len(values) == 3:\r\n                    return [float(v) for v in values]\r\n                else:  # pragma: no cover\r\n                    raise RuntimeError(recoverable[0],\r\n                                       'Incorrect value %r' % line)\r\n            else:\r\n                return b(line)\r\n    \r\n        line = get()\r\n        if not line.startswith(b('solid ')) and line.startswith(b('solid')):\r\n            cls.warning('ASCII STL files should start with solid <space>. '\r\n                        'The application that produced this STL file may be '\r\n                        'faulty, please report this error. The erroneous '\r\n                        'line: %r', line)\r\n    \r\n        if not lines:\r\n            raise RuntimeError(recoverable[0],\r\n                               'No lines found, impossible to read')\r\n    \r\n        # Yield the name\r\n        yield line[5:].strip()\r\n    \r\n        while True:\r\n            # Read from the header lines first, until that point we can recover\r\n            # and go to the binary option. After that we cannot due to\r\n            # unseekable files such as sys.stdin\r\n            #\r\n            # Numpy doesn't support any non-file types so wrapping with a\r\n            # buffer and/or StringIO does not work.\r\n            try:\r\n>               normals = get('facet normal')\r\nstl/stl.py:197: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nprefix = b'facet normal'\r\n    def get(prefix=''):\r\n        prefix = b(prefix)\r\n    \r\n        if lines:\r\n            line = lines.pop(0)\r\n        else:\r\n            raise RuntimeError(recoverable[0], 'Unable to find more lines')\r\n        if not lines:\r\n            recoverable[0] = False\r\n    \r\n            # Read more lines and make sure we prepend any old data\r\n            lines[:] = b(fh.read(BUFFER_SIZE)).split(b('\\n'))\r\n            line += lines.pop(0)\r\n    \r\n        line = line.lower().strip()\r\n        if line == b(''):\r\n            return get(prefix)\r\n    \r\n        if prefix:\r\n            if line.startswith(prefix):\r\n                values = line.replace(prefix, b(''), 1).strip().split()\r\n            elif line.startswith(b('endsolid')):\r\n                # go back to the beginning of new solid part\r\n                size_unprocessedlines = sum(len(l) + 1 for l in lines) - 1\r\n                if size_unprocessedlines > 0:\r\n                    position = fh.tell()\r\n                    fh.seek(position - size_unprocessedlines)\r\n                raise StopIteration()\r\n            else:\r\n                raise RuntimeError(recoverable[0],\r\n                                   '%r should start with %r' % (line,\r\n>                                                               prefix))\r\nE               RuntimeError: (False, \"b'!\\\\xbc\\\\xafw\\\\x7f>\\\\xe6\\\\x04\\\\xb5>\\\\x88e{?l\\\\x08\\\\x9e>f\\\\x83\\\\xec>\\\\x00\\\\x00\\\\xc0?\\\\xd1v\\\\xcc>f\\\\x83\\\\xec>\\\\xbe\\\\xa4\\\\x85?\\\\x00\\\\x00\\\\xb1\\\\xf5e\\\\xbd\\\\xed\\\\x13\\\\xac=\\\\x9f\\\\xf76\\\\xbc\\\\xafw\\\\x7f>\\\\xe6\\\\x04\\\\xb5>\\\\x88e{?4\\\\xf6\\\\x15>\\\\xe6\\\\x04\\\\xb5>\\\\x00\\\\x00\\\\xc0?l\\\\x08\\\\x9e>f\\\\x83\\\\xec>\\\\x00\\\\x00\\\\xc0?\\\\x00\\\\x00\\\\xfamj\\\\xbc[\\\\xf6\\\\x95=\\\\x9c,\\\\x07\\\\xbc\\\\x15x(?f\\\\x83\\\\xec>\\\\x15x(?\\\\x9a|\\\\x13?\\\\x00\\\\x00\\\\x00?w\\\\x04\\\\x8f?\\\\t\\\\xfbj?\\\\x00\\\\x00\\\\x00?\\\\t\\\\xfbj?\\\\x00\\\\x00c\\\\x02q\\\\xbc0\\\\xa8\\\\xb2=\\\\xcf\\\\t!\\\\xbc\\\\x15x(?f\\\\x83\\\\xec>\\\\x15x(?\\\\xd1v\\\\xcc>f\\\\x83\\\\xec>\\\\xbe\\\\xa4\\\\x85?\\\\x9a|\\\\x13?\\\\x00\\\\x00\\\\x00?w\\\\x04\\\\x8f?\\\\x00\\\\x00\\\\xfa\\\\x97#<\\\\xfa\\\\x88r=\\\\x85\\\\x9e\\\\xda;\\\\xfe\\\\x9dm?f\\\\x83\\\\xec>\\\\xfe\\\\x9dm?\\\\t\\\\xfbj?\\\\x00\\\\x00\\\\x00?\\\\t\\\\xfbj?\\\\xdc\\\\xbd@?f\\\\x83\\\\xec>\\\\x9dc\\\\x98?\\\\x00\\\\x00\\\\xfamj<\\\\x1f\\\\xf6\\\\x95=\\\\x9c,\\\\x07<\\\\xdc\\\\xbd@?f\\\\x83\\\\xec>\\\\x9dc\\\\x98?\\\\t\\\\xfbj?\\\\x00\\\\x00\\\\x00?\\\\t\\\\xfbj?\\\\x9a|\\\\x13?\\\\x00\\\\x00\\\\x00?w\\\\x04\\\\x8f?\\\\x00\\\\x00y8\\\\xba<\\\\x8c_$=\\\\xc0\\\\xd7x<k}\\\\x85?\\\\xe6\\\\x04\\\\xb5>k}\\\\x85?\\\\xdc\\\\xbd@?f\\\\x83\\\\xec>\\\\x9dc\\\\x98?x\\\\x1bg?\\\\xe6\\\\x04\\\\xb5>\\\\xdau\\\\xa0?\\\\x00\\\\x00\\\\xbc\\\\xf0\\\\xe8<\\\\x19\\\\x9bm=b\\\\xa5\\\\x9b<k}\\\\x85?\\\\xe6\\\\x04\\\\xb5>k}\\\\x85?\\\\xfe\\\\x9dm?f\\\\x83\\\\xec>\\\\xfe\\\\x9dm?\\\\xdc\\\\xbd@?f\\\\x83\\\\xec>\\\\x9dc\\\\x98?\\\\x00\\\\x00' should start with b'facet normal'\")\r\nstl/stl.py:165: RuntimeError\r\nDuring handling of the above exception, another exception occurred:\r\nascii_path = local('/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_ascii')\r\nbinary_path = local('/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary')\r\nspeedups = False\r\n    def test_mass_properties_for_half_donut(ascii_path, binary_path, speedups):\r\n        \"\"\"\r\n        Checks the results of method get_mass_properties() on\r\n        STL ASCII and binary files HalfDonut.stl\r\n        One checks the results obtained with stl\r\n        with the ones obtained with meshlab\r\n        \"\"\"\r\n        for path in (ascii_path, binary_path):\r\n            filename = path.join('HalfDonut.stl')\r\n>           mesh = stl.StlMesh(str(filename), speedups=speedups)\r\ntests/test_meshProperties.py:18: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/stl.py:318: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\nstl/stl.py:87: in load\r\n    name, data = cls._load_binary(fh, header, check_size=True)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'>\r\nheader = b'solid test.stl    2014-10-16 15:37:40.542327 halfdonut.stl                      '\r\ncheck_size = True\r\n    @classmethod\r\n    def _load_binary(cls, fh, header, check_size=False):\r\n        # Read the triangle count\r\n        count_data = fh.read(COUNT_SIZE)\r\n        if len(count_data) != COUNT_SIZE:\r\n            count = 0\r\n        else:\r\n            count, = struct.unpack(s('@i'), b(count_data))\r\n        # raise RuntimeError()\r\n        assert count < MAX_COUNT, ('File too large, got %d triangles which '\r\n                                   'exceeds the maximum of %d') % (\r\n>                                      count, MAX_COUNT)\r\nE       AssertionError: File too large, got 536936448 triangles which exceeds the maximum of 100000000\r\nstl/stl.py:104: AssertionError\r\n__________________ test_mass_properties_for_half_donut[True] ___________________\r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'>\r\nmode = <Mode.AUTOMATIC: 0>, speedups = True\r\n    @classmethod\r\n    def load(cls, fh, mode=AUTOMATIC, speedups=True):\r\n        '''Load Mesh from STL file\r\n    \r\n            Automatically detects binary versus ascii STL files.\r\n    \r\n            :param file fh: The file handle to open\r\n            :param int mode: Automatically detect the filetype or force binary\r\n            '''\r\n        header = fh.read(HEADER_SIZE).lower()\r\n        if not header:\r\n            return\r\n    \r\n        if isinstance(header, str):  # pragma: no branch\r\n            header = b(header)\r\n    \r\n        name = ''\r\n    \r\n        if mode in (AUTOMATIC, ASCII) and header.startswith(b('solid')):\r\n            try:\r\n                name, data = cls._load_ascii(\r\n>                   fh, header, speedups=speedups)\r\nstl/stl.py:71: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'>\r\nheader = b'solid test.stl    2014-10-16 15:37:40.542327 halfdonut.stl                      '\r\nspeedups = True\r\n    @classmethod\r\n    def _load_ascii(cls, fh, header, speedups=True):\r\n        if _speedups and speedups:\r\n>           return _speedups.ascii_read(fh, header)\r\nstl/stl.py:214: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n>   raise RuntimeError(state.recoverable,\r\nE   RuntimeError: (0, \"Can't read normals (2:b'!\\\\xbc\\\\xafw\\\\x7f>\\\\xe6\\\\x04\\\\xb5>\\\\x88e{?l\\\\x08\\\\x9e>f\\\\x83\\\\xec>')\")\r\nstl/_speedups.pyx:120: RuntimeError\r\nDuring handling of the above exception, another exception occurred:\r\nascii_path = local('/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_ascii')\r\nbinary_path = local('/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary')\r\nspeedups = True\r\n    def test_mass_properties_for_half_donut(ascii_path, binary_path, speedups):\r\n        \"\"\"\r\n        Checks the results of method get_mass_properties() on\r\n        STL ASCII and binary files HalfDonut.stl\r\n        One checks the results obtained with stl\r\n        with the ones obtained with meshlab\r\n        \"\"\"\r\n        for path in (ascii_path, binary_path):\r\n            filename = path.join('HalfDonut.stl')\r\n>           mesh = stl.StlMesh(str(filename), speedups=speedups)\r\ntests/test_meshProperties.py:18: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/stl.py:318: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\nstl/stl.py:87: in load\r\n    name, data = cls._load_binary(fh, header, check_size=True)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/HalfDonut.stl'>\r\nheader = b'solid test.stl    2014-10-16 15:37:40.542327 halfdonut.stl                      '\r\ncheck_size = True\r\n    @classmethod\r\n    def _load_binary(cls, fh, header, check_size=False):\r\n        # Read the triangle count\r\n        count_data = fh.read(COUNT_SIZE)\r\n        if len(count_data) != COUNT_SIZE:\r\n            count = 0\r\n        else:\r\n            count, = struct.unpack(s('@i'), b(count_data))\r\n        # raise RuntimeError()\r\n        assert count < MAX_COUNT, ('File too large, got %d triangles which '\r\n                                   'exceeds the maximum of %d') % (\r\n>                                      count, MAX_COUNT)\r\nE       AssertionError: File too large, got 536936448 triangles which exceeds the maximum of 100000000\r\nstl/stl.py:104: AssertionError\r\n_____________________ test_mass_properties_for_moon[False] _____________________\r\nascii_path = local('/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_ascii')\r\nbinary_path = local('/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary')\r\nspeedups = False\r\n    def test_mass_properties_for_moon(ascii_path, binary_path, speedups):\r\n        \"\"\"\r\n        Checks the results of method get_mass_properties() on\r\n        STL ASCII and binary files Moon.stl\r\n        One checks the results obtained with stl\r\n        with the ones obtained with meshlab\r\n        \"\"\"\r\n        for path in (ascii_path, binary_path):\r\n            filename = path.join('Moon.stl')\r\n>           mesh = stl.StlMesh(str(filename), speedups=speedups)\r\ntests/test_meshProperties.py:40: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/stl.py:318: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\nstl/stl.py:89: in load\r\n    name, data = cls._load_binary(fh, header)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/Moon.stl'>\r\nheader = b'numpy-stl (1.0.0) 2014-10-16 15:37:40.642049 moon.stl                           '\r\ncheck_size = False\r\n    @classmethod\r\n    def _load_binary(cls, fh, header, check_size=False):\r\n        # Read the triangle count\r\n        count_data = fh.read(COUNT_SIZE)\r\n        if len(count_data) != COUNT_SIZE:\r\n            count = 0\r\n        else:\r\n            count, = struct.unpack(s('@i'), b(count_data))\r\n        # raise RuntimeError()\r\n        assert count < MAX_COUNT, ('File too large, got %d triangles which '\r\n                                   'exceeds the maximum of %d') % (\r\n>                                      count, MAX_COUNT)\r\nE       AssertionError: File too large, got 1946157056 triangles which exceeds the maximum of 100000000\r\nstl/stl.py:104: AssertionError\r\n_____________________ test_mass_properties_for_moon[True] ______________________\r\nascii_path = local('/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_ascii')\r\nbinary_path = local('/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary')\r\nspeedups = True\r\n    def test_mass_properties_for_moon(ascii_path, binary_path, speedups):\r\n        \"\"\"\r\n        Checks the results of method get_mass_properties() on\r\n        STL ASCII and binary files Moon.stl\r\n        One checks the results obtained with stl\r\n        with the ones obtained with meshlab\r\n        \"\"\"\r\n        for path in (ascii_path, binary_path):\r\n            filename = path.join('Moon.stl')\r\n>           mesh = stl.StlMesh(str(filename), speedups=speedups)\r\ntests/test_meshProperties.py:40: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/stl.py:318: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\nstl/stl.py:89: in load\r\n    name, data = cls._load_binary(fh, header)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/Moon.stl'>\r\nheader = b'numpy-stl (1.0.0) 2014-10-16 15:37:40.642049 moon.stl                           '\r\ncheck_size = False\r\n    @classmethod\r\n    def _load_binary(cls, fh, header, check_size=False):\r\n        # Read the triangle count\r\n        count_data = fh.read(COUNT_SIZE)\r\n        if len(count_data) != COUNT_SIZE:\r\n            count = 0\r\n        else:\r\n            count, = struct.unpack(s('@i'), b(count_data))\r\n        # raise RuntimeError()\r\n        assert count < MAX_COUNT, ('File too large, got %d triangles which '\r\n                                   'exceeds the maximum of %d') % (\r\n>                                      count, MAX_COUNT)\r\nE       AssertionError: File too large, got 1946157056 triangles which exceeds the maximum of 100000000\r\nstl/stl.py:104: AssertionError\r\n_____________________ test_mass_properties_for_star[False] _____________________\r\nascii_path = local('/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_ascii')\r\nbinary_path = local('/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary')\r\nspeedups = False\r\n    def test_mass_properties_for_star(ascii_path, binary_path, speedups):\r\n        \"\"\"\r\n        Checks the results of method get_mass_properties() on\r\n        STL ASCII and binary files Star.stl and\r\n        STL binary file StarWithEmptyHeader.stl (with no header)\r\n        One checks the results obtained with stl\r\n        with the ones obtained with meshlab\r\n        \"\"\"\r\n        for filename in (ascii_path.join('Star.stl'),\r\n                         binary_path.join('Star.stl'),\r\n                         binary_path.join('StarWithEmptyHeader.stl')):\r\n>           mesh = stl.StlMesh(str(filename), speedups=speedups)\r\ntests/test_meshProperties.py:64: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/stl.py:318: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\nstl/stl.py:89: in load\r\n    name, data = cls._load_binary(fh, header)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/Star.stl'>\r\nheader = b'numpy-stl (1.0.0) 2014-10-16 15:37:40.741314 star.stl                           '\r\ncheck_size = False\r\n    @classmethod\r\n    def _load_binary(cls, fh, header, check_size=False):\r\n        # Read the triangle count\r\n        count_data = fh.read(COUNT_SIZE)\r\n        if len(count_data) != COUNT_SIZE:\r\n            count = 0\r\n        else:\r\n            count, = struct.unpack(s('@i'), b(count_data))\r\n        # raise RuntimeError()\r\n        assert count < MAX_COUNT, ('File too large, got %d triangles which '\r\n                                   'exceeds the maximum of %d') % (\r\n>                                      count, MAX_COUNT)\r\nE       AssertionError: File too large, got 1140850688 triangles which exceeds the maximum of 100000000\r\nstl/stl.py:104: AssertionError\r\n_____________________ test_mass_properties_for_star[True] ______________________\r\nascii_path = local('/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_ascii')\r\nbinary_path = local('/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary')\r\nspeedups = True\r\n    def test_mass_properties_for_star(ascii_path, binary_path, speedups):\r\n        \"\"\"\r\n        Checks the results of method get_mass_properties() on\r\n        STL ASCII and binary files Star.stl and\r\n        STL binary file StarWithEmptyHeader.stl (with no header)\r\n        One checks the results obtained with stl\r\n        with the ones obtained with meshlab\r\n        \"\"\"\r\n        for filename in (ascii_path.join('Star.stl'),\r\n                         binary_path.join('Star.stl'),\r\n                         binary_path.join('StarWithEmptyHeader.stl')):\r\n>           mesh = stl.StlMesh(str(filename), speedups=speedups)\r\ntests/test_meshProperties.py:64: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nstl/stl.py:318: in from_file\r\n    fh, mode=mode, speedups=speedups)\r\nstl/stl.py:89: in load\r\n    name, data = cls._load_binary(fh, header)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ncls = <class 'stl.stl.BaseStl'>\r\nfh = <_io.BufferedReader name='/builddir/build/BUILD/numpy-stl-2.1.0/tests/stl_binary/Star.stl'>\r\nheader = b'numpy-stl (1.0.0) 2014-10-16 15:37:40.741314 star.stl                           '\r\ncheck_size = False\r\n    @classmethod\r\n    def _load_binary(cls, fh, header, check_size=False):\r\n        # Read the triangle count\r\n        count_data = fh.read(COUNT_SIZE)\r\n        if len(count_data) != COUNT_SIZE:\r\n            count = 0\r\n        else:\r\n            count, = struct.unpack(s('@i'), b(count_data))\r\n        # raise RuntimeError()\r\n        assert count < MAX_COUNT, ('File too large, got %d triangles which '\r\n                                   'exceeds the maximum of %d') % (\r\n>                                      count, MAX_COUNT)\r\nE       AssertionError: File too large, got 1140850688 triangles which exceeds the maximum of 100000000\r\nstl/stl.py:104: AssertionError\r\n===================== 9 failed, 49 passed in 1.11 seconds ======================\r\n```\r\n\r\n</details>\r\n\r\nI think that whenever you are unpacking struct with `@`, you should use `<` instead. For example [here](https://github.com/WoLpH/numpy-stl/blob/v2.1.0/stl/stl.py#L100). Will investigate.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/40", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/40/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/40/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/40", "id": 184489752, "node_id": "MDU6SXNzdWUxODQ0ODk3NTI=", "number": 40, "title": "AttributeError: type object 'Mesh' has no attribute 'logger'", "user": {"login": "jtprobst", "id": 22274308, "node_id": "MDQ6VXNlcjIyMjc0MzA4", "avatar_url": "https://avatars0.githubusercontent.com/u/22274308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtprobst", "html_url": "https://github.com/jtprobst", "followers_url": "https://api.github.com/users/jtprobst/followers", "following_url": "https://api.github.com/users/jtprobst/following{/other_user}", "gists_url": "https://api.github.com/users/jtprobst/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtprobst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtprobst/subscriptions", "organizations_url": "https://api.github.com/users/jtprobst/orgs", "repos_url": "https://api.github.com/users/jtprobst/repos", "events_url": "https://api.github.com/users/jtprobst/events{/privacy}", "received_events_url": "https://api.github.com/users/jtprobst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-10-21T13:49:44Z", "updated_at": "2016-11-01T14:07:11Z", "closed_at": "2016-11-01T10:08:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "When reading an STL file without a name or space after `solid`, numpy-stl wants to warn me\n\n``` python\n        if not line.startswith(b('solid ')) and line.startswith(b('solid')):\n            cls.warning('ASCII STL files should start with solid <space>. '\n                        'The application that produced this STL file may be '\n                        'faulty, please report this error. The erroneous '\n                        'line: %r', line)\n```\n\nHowever, this fails with\n\n``` python\nTraceback (most recent call last):\n  File \"test.py\", line 20, in <module>\n    stlmesh = mesh.Mesh.from_file(args.input_file)\n  File \"/usr/local/lib/python3.5/dist-packages/stl/stl.py\", line 316, in from_file\n    fh, mode=mode, speedups=speedups)\n  File \"/usr/local/lib/python3.5/dist-packages/stl/stl.py\", line 69, in load\n    fh, header, speedups=speedups)\n  File \"/usr/local/lib/python3.5/dist-packages/stl/stl.py\", line 215, in _load_ascii\n    name = next(iterator)\n  File \"/usr/local/lib/python3.5/dist-packages/stl/stl.py\", line 178, in _ascii_reader\n    'line: %r', line)\n  File \"/usr/local/lib/python3.5/dist-packages/python_utils/logger.py\", line 46, in warning\n    cls.logger.warning(msg, *args, **kwargs)\nAttributeError: type object 'Mesh' has no attribute 'logger'\n```\n\nNote that in my personal opinion it would be highly desirable to configure the level of strictness when reading STLs. The current implementation adheres to the standard which is good. However, many defective CAD tools fail to obey the specifications and it would be helpful if numpy-stl could adapt to these cases as well.\n\nInstallation Details:\n- Python 3.5.2 (default, Sep 10 2016, 08:21:44) [GCC 5.4.0 20160609] on linux\n- OS Ubuntu 16.04\n- numpy-stl==2.0.0\n- python-utils==2.0.0\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/39", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/39/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/39/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/39", "id": 179550304, "node_id": "MDU6SXNzdWUxNzk1NTAzMDQ=", "number": 39, "title": "Add license", "user": {"login": "petebachant", "id": 4604869, "node_id": "MDQ6VXNlcjQ2MDQ4Njk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4604869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petebachant", "html_url": "https://github.com/petebachant", "followers_url": "https://api.github.com/users/petebachant/followers", "following_url": "https://api.github.com/users/petebachant/following{/other_user}", "gists_url": "https://api.github.com/users/petebachant/gists{/gist_id}", "starred_url": "https://api.github.com/users/petebachant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petebachant/subscriptions", "organizations_url": "https://api.github.com/users/petebachant/orgs", "repos_url": "https://api.github.com/users/petebachant/repos", "events_url": "https://api.github.com/users/petebachant/events{/privacy}", "received_events_url": "https://api.github.com/users/petebachant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-09-27T16:51:45Z", "updated_at": "2016-09-27T17:08:05Z", "closed_at": "2016-09-27T17:07:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "`setup.py` says the package is BSD licensed, but it would be good to have a `LICENSE` file in the repo.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/38", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/38/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/38/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/38", "id": 179546335, "node_id": "MDU6SXNzdWUxNzk1NDYzMzU=", "number": 38, "title": "Link in build.cmd is broken", "user": {"login": "petebachant", "id": 4604869, "node_id": "MDQ6VXNlcjQ2MDQ4Njk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4604869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petebachant", "html_url": "https://github.com/petebachant", "followers_url": "https://api.github.com/users/petebachant/followers", "following_url": "https://api.github.com/users/petebachant/following{/other_user}", "gists_url": "https://api.github.com/users/petebachant/gists{/gist_id}", "starred_url": "https://api.github.com/users/petebachant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petebachant/subscriptions", "organizations_url": "https://api.github.com/users/petebachant/orgs", "repos_url": "https://api.github.com/users/petebachant/repos", "events_url": "https://api.github.com/users/petebachant/events{/privacy}", "received_events_url": "https://api.github.com/users/petebachant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-09-27T16:37:11Z", "updated_at": "2016-09-27T17:29:28Z", "closed_at": "2016-09-27T17:29:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "May have been moved to https://github.com/cython/cython/wiki/CythonExtensionsOnWindows\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/37", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/37/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/37/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/37", "id": 176268169, "node_id": "MDU6SXNzdWUxNzYyNjgxNjk=", "number": 37, "title": "ASCII versus Binary detection and fallback", "user": {"login": "patyork", "id": 1304633, "node_id": "MDQ6VXNlcjEzMDQ2MzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1304633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patyork", "html_url": "https://github.com/patyork", "followers_url": "https://api.github.com/users/patyork/followers", "following_url": "https://api.github.com/users/patyork/following{/other_user}", "gists_url": "https://api.github.com/users/patyork/gists{/gist_id}", "starred_url": "https://api.github.com/users/patyork/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patyork/subscriptions", "organizations_url": "https://api.github.com/users/patyork/orgs", "repos_url": "https://api.github.com/users/patyork/repos", "events_url": "https://api.github.com/users/patyork/events{/privacy}", "received_events_url": "https://api.github.com/users/patyork/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 138464038, "node_id": "MDU6TGFiZWwxMzg0NjQwMzg=", "url": "https://api.github.com/repos/WoLpH/numpy-stl/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "WoLpH", "id": 270571, "node_id": "MDQ6VXNlcjI3MDU3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/270571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WoLpH", "html_url": "https://github.com/WoLpH", "followers_url": "https://api.github.com/users/WoLpH/followers", "following_url": "https://api.github.com/users/WoLpH/following{/other_user}", "gists_url": "https://api.github.com/users/WoLpH/gists{/gist_id}", "starred_url": "https://api.github.com/users/WoLpH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WoLpH/subscriptions", "organizations_url": "https://api.github.com/users/WoLpH/orgs", "repos_url": "https://api.github.com/users/WoLpH/repos", "events_url": "https://api.github.com/users/WoLpH/events{/privacy}", "received_events_url": "https://api.github.com/users/WoLpH/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "WoLpH", "id": 270571, "node_id": "MDQ6VXNlcjI3MDU3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/270571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WoLpH", "html_url": "https://github.com/WoLpH", "followers_url": "https://api.github.com/users/WoLpH/followers", "following_url": "https://api.github.com/users/WoLpH/following{/other_user}", "gists_url": "https://api.github.com/users/WoLpH/gists{/gist_id}", "starred_url": "https://api.github.com/users/WoLpH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WoLpH/subscriptions", "organizations_url": "https://api.github.com/users/WoLpH/orgs", "repos_url": "https://api.github.com/users/WoLpH/repos", "events_url": "https://api.github.com/users/WoLpH/events{/privacy}", "received_events_url": "https://api.github.com/users/WoLpH/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2016-09-11T22:05:40Z", "updated_at": "2018-10-31T19:36:29Z", "closed_at": "2018-10-31T19:36:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "An outstanding issue is some corruption/errors in an ASCII STL file will cause numpy-stl to fallback to a binary load, which can lead to the `MAX_COUNT` overrun exception. The ASCII STL errors that cause this include:\n- An extra vertex in a facet\n- A missing vertex in a facet\n\nStrictly speaking, the smallest complete ASCII STL file is, I believe, 186 bytes. This file would include the following keywords:\n`solid` `facet` `normal` `outer` `loop` `vertex` `endloop` `endfacet` `endsolid`\nalong with the normal and vertex values.\n\nI think that the following decision tree should be included, for a strict ASCII/Binary determination:\n- File includes all keywords from above in standard UTF-8 ASCII outside of the header/solid name\n  - ASCII\n- File includes some but not all of the above keywords\n  - Corruption warning, or perhaps some extra checks.\n- File size < 196 bytes\n  - Extra validation, or default to Binary\n- Else\n  - Binary\n\nThere would be no fallback to Binary after an ASCII parsing error. While it is technically true that a Binary file _could_ contain all of the above keywords, the odds are low that it would be a valid STL file (I haven't checked this) and that this would occur from an actual STL file not designed to break numpy-stl.\n\nWe can then remove the `MAX_COUNT` arbitrary cutoff. The loading process, I think, would be greatly simplified, and some better exceptions can be thrown (more descriptive; can be recoverable/unrecoverable; can add a loading mode of \"strict\"/\"flexible\"; etc.).\n\nAs an example, [PyCam did it this way](https://github.com/patyork/pycam/blob/d46107ec028d13d1d1b656c36c33139f418fc8a0/pycam/Importers/STLImporter.py#L105) when they implemented their own STL loader.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/34", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/34/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/34/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/34", "id": 164906688, "node_id": "MDU6SXNzdWUxNjQ5MDY2ODg=", "number": 34, "title": "Handling more than 1M triangles, when to use mesh.points", "user": {"login": "GriffinPrice", "id": 7786480, "node_id": "MDQ6VXNlcjc3ODY0ODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/7786480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GriffinPrice", "html_url": "https://github.com/GriffinPrice", "followers_url": "https://api.github.com/users/GriffinPrice/followers", "following_url": "https://api.github.com/users/GriffinPrice/following{/other_user}", "gists_url": "https://api.github.com/users/GriffinPrice/gists{/gist_id}", "starred_url": "https://api.github.com/users/GriffinPrice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GriffinPrice/subscriptions", "organizations_url": "https://api.github.com/users/GriffinPrice/orgs", "repos_url": "https://api.github.com/users/GriffinPrice/repos", "events_url": "https://api.github.com/users/GriffinPrice/events{/privacy}", "received_events_url": "https://api.github.com/users/GriffinPrice/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-07-11T18:46:52Z", "updated_at": "2016-07-12T01:06:16Z", "closed_at": "2016-07-11T23:03:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Numpy-stl has been helping me quite a bit recently with some operations that I can't do in typical CAD programs. I've been mostly using it to parse STLs and then write my own algorithms to modify those files. It has been very helpful in this regard, and I am very thankful that you've already done most of the heavy lifting for playing with STLs in python.\n\nI work with a lot of large (>1M triangle) meshes. I've gone into my stl.py file and raised the `MAX_COUNT` to higher numbers when it has been necessary, and I haven't had any problems when doing so. I was wondering why the 1M max triangle count was in place, and which limitations made that necessary. I'm doing simple 1-at-a-time vector manipulation, but I could understand that some of the fancier stuff will require more memory or computational load. \n\nFinally, when I request the iterable `mesh.points`, I expect an array of 1x3 arrays that is 3x the size of `mesh.vectors`. Instead, I get an array of the same size as `mesh.vectors` with 1x9 arrays. I was wondering what the rationale was for this, because I can't see a time when one would use `mesh.points` over `mesh.vectors`, since the latter is simply a better organized version of the former. Iterating over mesh.points doesn't actually iterate over all points, which seems odd to me, but I also understand that iterating over triangles makes sense for this sort of thing.\n\nThanks in advance for the help, and for creating such a brilliant module.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/33", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/33/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/33/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/33", "id": 158752676, "node_id": "MDU6SXNzdWUxNTg3NTI2NzY=", "number": 33, "title": "Include my example code?", "user": {"login": "nmz787", "id": 1129286, "node_id": "MDQ6VXNlcjExMjkyODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1129286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nmz787", "html_url": "https://github.com/nmz787", "followers_url": "https://api.github.com/users/nmz787/followers", "following_url": "https://api.github.com/users/nmz787/following{/other_user}", "gists_url": "https://api.github.com/users/nmz787/gists{/gist_id}", "starred_url": "https://api.github.com/users/nmz787/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nmz787/subscriptions", "organizations_url": "https://api.github.com/users/nmz787/orgs", "repos_url": "https://api.github.com/users/nmz787/repos", "events_url": "https://api.github.com/users/nmz787/events{/privacy}", "received_events_url": "https://api.github.com/users/nmz787/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-06T19:15:48Z", "updated_at": "2016-06-12T22:09:24Z", "closed_at": "2016-06-12T22:09:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I wanted to duplicate an STL I downloaded, so I could print many of the item using a single 3D-printer print-job. I also tested with combining different STL files into the same output, and included those operations as comments. The script is here:\nhttps://gist.github.com/nmz787/be850c63e7cab3739c79821bfac0c6f4\n\nThanks for the library! I was so happy to get this STL file duplicated!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/32", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/32/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/32/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/32", "id": 155419793, "node_id": "MDU6SXNzdWUxNTU0MTk3OTM=", "number": 32, "title": "HEADER_SIZE = 80 is stringent at my case", "user": {"login": "lazmol", "id": 5803177, "node_id": "MDQ6VXNlcjU4MDMxNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5803177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lazmol", "html_url": "https://github.com/lazmol", "followers_url": "https://api.github.com/users/lazmol/followers", "following_url": "https://api.github.com/users/lazmol/following{/other_user}", "gists_url": "https://api.github.com/users/lazmol/gists{/gist_id}", "starred_url": "https://api.github.com/users/lazmol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lazmol/subscriptions", "organizations_url": "https://api.github.com/users/lazmol/orgs", "repos_url": "https://api.github.com/users/lazmol/repos", "events_url": "https://api.github.com/users/lazmol/events{/privacy}", "received_events_url": "https://api.github.com/users/lazmol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-05-18T05:31:44Z", "updated_at": "2016-05-27T10:04:52Z", "closed_at": "2016-05-27T10:04:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello Mr Wolph,\n\nThe default 80 bytes, i.e. 80 characters were quite stringent for me in my use case as I had some stl parts with more characters. Would you consider increasing it to 256? I think it would not affect the speed adversely too much.\n\nCheers\nLazlo\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/26", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/26/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/26/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/26", "id": 151288825, "node_id": "MDU6SXNzdWUxNTEyODg4MjU=", "number": 26, "title": "Saving scaled stl file", "user": {"login": "billy0329", "id": 14817845, "node_id": "MDQ6VXNlcjE0ODE3ODQ1", "avatar_url": "https://avatars2.githubusercontent.com/u/14817845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/billy0329", "html_url": "https://github.com/billy0329", "followers_url": "https://api.github.com/users/billy0329/followers", "following_url": "https://api.github.com/users/billy0329/following{/other_user}", "gists_url": "https://api.github.com/users/billy0329/gists{/gist_id}", "starred_url": "https://api.github.com/users/billy0329/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/billy0329/subscriptions", "organizations_url": "https://api.github.com/users/billy0329/orgs", "repos_url": "https://api.github.com/users/billy0329/repos", "events_url": "https://api.github.com/users/billy0329/events{/privacy}", "received_events_url": "https://api.github.com/users/billy0329/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-27T03:06:12Z", "updated_at": "2016-05-10T13:02:31Z", "closed_at": "2016-05-10T13:02:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi, \n\nIs numpy-stl capable of saving a scaled stl file?\nI mean I opened an stl file, then scaled it. \nWill I be able to save this scaled object as another stl file?\n\nThanks in advance.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/25", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/25/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/25/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/25", "id": 147220141, "node_id": "MDU6SXNzdWUxNDcyMjAxNDE=", "number": 25, "title": "Documentation unclear on auto-computation of normals", "user": {"login": "joe-jordan", "id": 1413842, "node_id": "MDQ6VXNlcjE0MTM4NDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1413842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joe-jordan", "html_url": "https://github.com/joe-jordan", "followers_url": "https://api.github.com/users/joe-jordan/followers", "following_url": "https://api.github.com/users/joe-jordan/following{/other_user}", "gists_url": "https://api.github.com/users/joe-jordan/gists{/gist_id}", "starred_url": "https://api.github.com/users/joe-jordan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joe-jordan/subscriptions", "organizations_url": "https://api.github.com/users/joe-jordan/orgs", "repos_url": "https://api.github.com/users/joe-jordan/repos", "events_url": "https://api.github.com/users/joe-jordan/events{/privacy}", "received_events_url": "https://api.github.com/users/joe-jordan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-04-10T12:15:45Z", "updated_at": "2016-04-11T01:09:46Z", "closed_at": "2016-04-10T13:51:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a 3D model I want to save from Python, which has lots of holes in the middle. Your module looks like the best way to write out the file. However, after reading this:\n\nhttp://www.fabbers.com/tech/STL_Format\n\nit looks as though the normal direction is (as I suspected) significant in the output format, in that it must point from solid phase to empty space. Obviously, there are two choices of normal for any set of three coordinates.\n\nYou don't seem to have documented a way to initialise from data containing both the facets and their normals (claiming you auto-compute them.) I would very much like to know how your code does this, as it would be non-trivial to do so from the vectors and facets in my system alone.\n\nIf there is already a manual way to specify the facet normals when initialising the `stl.mesh.Mesh` class, I would be grateful if you could explain it here, and perhaps amend the documentation to reflect that.\n\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/24", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/24/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/24/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/24", "id": 145724131, "node_id": "MDU6SXNzdWUxNDU3MjQxMzE=", "number": 24, "title": "Ascii stl solid names handling", "user": {"login": "lazmol", "id": 5803177, "node_id": "MDQ6VXNlcjU4MDMxNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5803177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lazmol", "html_url": "https://github.com/lazmol", "followers_url": "https://api.github.com/users/lazmol/followers", "following_url": "https://api.github.com/users/lazmol/following{/other_user}", "gists_url": "https://api.github.com/users/lazmol/gists{/gist_id}", "starred_url": "https://api.github.com/users/lazmol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lazmol/subscriptions", "organizations_url": "https://api.github.com/users/lazmol/orgs", "repos_url": "https://api.github.com/users/lazmol/repos", "events_url": "https://api.github.com/users/lazmol/events{/privacy}", "received_events_url": "https://api.github.com/users/lazmol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2016-04-04T15:47:27Z", "updated_at": "2016-05-27T12:06:17Z", "closed_at": "2016-05-27T12:06:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nfirstly, many thanks for your work and the package!\nI would like to read a big ascii stl and would like to modify the part names in it.\nThe stl has the usual form:\nsolid part1\n  facet normal -1.00000E+000 6.25745E-015 1.16257E-014\n    outer loop\n      vertex 1.08800E+003 -3.51005E+002 5.06590E+002\n      vertex 1.08800E+003 -3.51005E+002 5.26148E+002\n      vertex 1.08800E+003 -3.38068E+002 5.19185E+002\n    endloop\n  endfacet\n...\nendsolid part1\nsolid part2\n...\n\nHow can I get the part names (which come after the solid strings) from the mesh.Mesh.from_file(stlfile) object?\nI had a quick look at the documentation but could not find an attribute where they are stored or a method that would returned them.\nAlso, when writing out the ascii stl again can I provide my own part names?\n\nThanks in advance,\nLazlo\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/23", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/23/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/23/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/23", "id": 143876340, "node_id": "MDU6SXNzdWUxNDM4NzYzNDA=", "number": 23, "title": "compatible with Python 3.3?", "user": {"login": "AlexLee", "id": 3451840, "node_id": "MDQ6VXNlcjM0NTE4NDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3451840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexLee", "html_url": "https://github.com/AlexLee", "followers_url": "https://api.github.com/users/AlexLee/followers", "following_url": "https://api.github.com/users/AlexLee/following{/other_user}", "gists_url": "https://api.github.com/users/AlexLee/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexLee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexLee/subscriptions", "organizations_url": "https://api.github.com/users/AlexLee/orgs", "repos_url": "https://api.github.com/users/AlexLee/repos", "events_url": "https://api.github.com/users/AlexLee/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexLee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-03-28T02:38:11Z", "updated_at": "2016-05-10T12:47:35Z", "closed_at": "2016-05-10T12:47:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "@WoLpH is numpy-stl compatible with Python 3.3.2? I created a virtual environment with anaconda and I tried to install numpy-stl via `conda install -c https://conda.anaconda.org/prkrekel numpy-stl` (https://anaconda.org/prkrekel/numpy-stl) \n\nbut I get the following error messages\n\n![numpystl_python33](https://cloud.githubusercontent.com/assets/3451840/14069776/404e5d3a-f46c-11e5-8602-d7b995d113f0.jpg)\n![numpystl_python33_pic2](https://cloud.githubusercontent.com/assets/3451840/14069777/46aedb0a-f46c-11e5-979d-5af63fe6eab8.jpg)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/22", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/22/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/22/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/22", "id": 141989755, "node_id": "MDU6SXNzdWUxNDE5ODk3NTU=", "number": 22, "title": "loading an stl file", "user": {"login": "AlexLee", "id": 3451840, "node_id": "MDQ6VXNlcjM0NTE4NDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3451840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexLee", "html_url": "https://github.com/AlexLee", "followers_url": "https://api.github.com/users/AlexLee/followers", "following_url": "https://api.github.com/users/AlexLee/following{/other_user}", "gists_url": "https://api.github.com/users/AlexLee/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexLee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexLee/subscriptions", "organizations_url": "https://api.github.com/users/AlexLee/orgs", "repos_url": "https://api.github.com/users/AlexLee/repos", "events_url": "https://api.github.com/users/AlexLee/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexLee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2016-03-18T22:07:41Z", "updated_at": "2016-05-16T23:03:53Z", "closed_at": "2016-05-16T23:03:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "@WoLpH I tried to run the example but I get an error message stating that \"mesh\" in the mesh.Mesh_from_file method is not defined. Also, I noticed there was nothing in the stl/mesh module\n\n```\nimport numpy\nfrom stl import mesh\nyour_mesh = mesh.Mesh.from_file('some_file.stl')\n```\n\nI tried modifying the code but I get an error message stating that \"module object has no attribute \"from file\" \"\n\n```\nimport numpy\nimport stl\nyour_mesh = stl.from_file('some_file.stl')\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/20", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/20/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/20/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/20", "id": 125453444, "node_id": "MDU6SXNzdWUxMjU0NTM0NDQ=", "number": 20, "title": "Facet Subdivision", "user": {"login": "timtitan", "id": 8113137, "node_id": "MDQ6VXNlcjgxMTMxMzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/8113137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timtitan", "html_url": "https://github.com/timtitan", "followers_url": "https://api.github.com/users/timtitan/followers", "following_url": "https://api.github.com/users/timtitan/following{/other_user}", "gists_url": "https://api.github.com/users/timtitan/gists{/gist_id}", "starred_url": "https://api.github.com/users/timtitan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timtitan/subscriptions", "organizations_url": "https://api.github.com/users/timtitan/orgs", "repos_url": "https://api.github.com/users/timtitan/repos", "events_url": "https://api.github.com/users/timtitan/events{/privacy}", "received_events_url": "https://api.github.com/users/timtitan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2016-01-07T18:08:28Z", "updated_at": "2016-04-05T11:23:17Z", "closed_at": "2016-04-05T11:23:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I am looking at numpy-stl to use in to import stl files for a python based geometrical optics model and I need a way to set a maximum facet area. I had assumed a median subdivision algorithm was the best way to go but do you have any advice on the most efficient way to implement it? I'm still working out the structure for adding and removing facets.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/19", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/19/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/19/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/19", "id": 125179012, "node_id": "MDU6SXNzdWUxMjUxNzkwMTI=", "number": 19, "title": "write matplotlib surfaceplot to stl file", "user": {"login": "jkokorian", "id": 6113878, "node_id": "MDQ6VXNlcjYxMTM4Nzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6113878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkokorian", "html_url": "https://github.com/jkokorian", "followers_url": "https://api.github.com/users/jkokorian/followers", "following_url": "https://api.github.com/users/jkokorian/following{/other_user}", "gists_url": "https://api.github.com/users/jkokorian/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkokorian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkokorian/subscriptions", "organizations_url": "https://api.github.com/users/jkokorian/orgs", "repos_url": "https://api.github.com/users/jkokorian/repos", "events_url": "https://api.github.com/users/jkokorian/events{/privacy}", "received_events_url": "https://api.github.com/users/jkokorian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-01-06T13:46:54Z", "updated_at": "2016-04-05T11:13:01Z", "closed_at": "2016-04-05T11:12:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible to write a matplotlib trisurf plot to an stl file? (I was hoping to print my graphs on a 3d printer) \n\nI've been messing around with the `Poly3dCollection` object that is returned by the `trisurf` command, but I do not understand how you can get the actual vectors out of it. I also do not completely understand what sort of `data` the Mesh constructor expects.\n\n``` python\n# %load http://matplotlib.org/mpl_examples/mplot3d/trisurf3d_demo2.py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.tri as mtri\n\n# u, v are parameterisation variables\nu = (np.linspace(0, 2.0 * np.pi, endpoint=True, num=50) * np.ones((10, 1))).flatten()\nv = np.repeat(np.linspace(-0.5, 0.5, endpoint=True, num=10), repeats=50).flatten()\n\n# This is the Mobius mapping, taking a u, v pair and returning an x, y, z\n# triple\nx = (1 + 0.5 * v * np.cos(u / 2.0)) * np.cos(u)\ny = (1 + 0.5 * v * np.cos(u / 2.0)) * np.sin(u)\nz = 0.5 * v * np.sin(u / 2.0)\n\n# Triangulate parameter space to determine the triangles\ntri = mtri.Triangulation(u, v)\n\nfig = plt.figure()\nax = fig.add_subplot(1, 1, 1, projection='3d')\n\n# The triangles in parameter space determine which x, y, z points are\n# connected by an edge\nmobius_polycollection = ax.plot_trisurf(x, y, z, triangles=tri.triangles, cmap=plt.cm.Spectral)\n\n\n# now convert mobius_polycollection to mesh\nimport stl\n\nmobius_mesh = #I have no idea...\n\nmobius_mesh.save('mobius.stl')\n\n\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/17", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/17/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/17/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/17", "id": 113786404, "node_id": "MDU6SXNzdWUxMTM3ODY0MDQ=", "number": 17, "title": "pip install numpy-stl fails with python v3.4+", "user": {"login": "mamrehn", "id": 8630763, "node_id": "MDQ6VXNlcjg2MzA3NjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/8630763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mamrehn", "html_url": "https://github.com/mamrehn", "followers_url": "https://api.github.com/users/mamrehn/followers", "following_url": "https://api.github.com/users/mamrehn/following{/other_user}", "gists_url": "https://api.github.com/users/mamrehn/gists{/gist_id}", "starred_url": "https://api.github.com/users/mamrehn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mamrehn/subscriptions", "organizations_url": "https://api.github.com/users/mamrehn/orgs", "repos_url": "https://api.github.com/users/mamrehn/repos", "events_url": "https://api.github.com/users/mamrehn/events{/privacy}", "received_events_url": "https://api.github.com/users/mamrehn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-10-28T10:24:02Z", "updated_at": "2015-10-31T18:28:50Z", "closed_at": "2015-10-31T18:28:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The enum34 requirement in [setup.py](https://github.com/WoLpH/numpy-stl/blob/96cf7373b0960995084ff1b646862b35723f9041/setup.py#L49)'s `install_requires` list induces an error during installation with pip for python versions 3.4 and higher.\n\nMore info about enum34: [enum34-incompatible-with-python-35](https://bitbucket.org/stoneleaf/enum34/issues/5/enum34-incompatible-with-python-35).\nIs there a way to import enum34 depending on the python version used instead?\n\nError log:\n\n``` bash\n$ pip install numpy-stl\nCollecting numpy-stl\n  Using cached numpy-stl-1.7.0.tar.gz\nRequirement already satisfied (use --upgrade to upgrade): numpy in ./miniconda3/envs/testenv/lib/python3.5/site-packages (from numpy-stl)\nCollecting nine (from numpy-stl)\n  Using cached nine-0.3.4.tar.gz\nCollecting enum34 (from numpy-stl)\n  Using cached enum34-1.0.4.tar.gz\n    Complete output from command python setup.py egg_info:\n    Traceback (most recent call last):\n      File \"/tmp/pip-build-27fj2ir5/enum34/enum/__init__.py\", line 371, in __getattr__\n        return cls._member_map_[name]\n    KeyError: '_convert'\n\n    During handling of the above exception, another exception occurred:\n\n    Traceback (most recent call last):\n      [...]\n      File \"/home/username/miniconda3/envs/testenv/lib/python3.5/socket.py\", line 73, in <module>\n        IntEnum._convert(\n      File \"/tmp/pip-build-27fj2ir5/enum34/enum/__init__.py\", line 373, in __getattr__\n        raise AttributeError(name)\n    AttributeError: _convert\n\n    ----------------------------------------\nCommand \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-build-27fj2ir5/enum34\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/16", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/16/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/16/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/16", "id": 100977072, "node_id": "MDU6SXNzdWUxMDA5NzcwNzI=", "number": 16, "title": "Add configurable rotation point to the rotation function", "user": {"login": "WoLpH", "id": 270571, "node_id": "MDQ6VXNlcjI3MDU3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/270571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WoLpH", "html_url": "https://github.com/WoLpH", "followers_url": "https://api.github.com/users/WoLpH/followers", "following_url": "https://api.github.com/users/WoLpH/following{/other_user}", "gists_url": "https://api.github.com/users/WoLpH/gists{/gist_id}", "starred_url": "https://api.github.com/users/WoLpH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WoLpH/subscriptions", "organizations_url": "https://api.github.com/users/WoLpH/orgs", "repos_url": "https://api.github.com/users/WoLpH/repos", "events_url": "https://api.github.com/users/WoLpH/events{/privacy}", "received_events_url": "https://api.github.com/users/WoLpH/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-08-14T09:46:52Z", "updated_at": "2015-08-17T21:24:11Z", "closed_at": "2015-08-17T21:24:10Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Since we are calculating a transformation matrix in homogeneous coordinates it would be fairly trivial to replace a translate, rotate, translate operation by a single matrix transformation. Calculating the dot product of a 4x4 matrix would be far lighter than calculating the dot product for an Nx3\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/15", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/15/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/15/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/15", "id": 100306463, "node_id": "MDU6SXNzdWUxMDAzMDY0NjM=", "number": 15, "title": "rotate function typo", "user": {"login": "Uvar", "id": 9106009, "node_id": "MDQ6VXNlcjkxMDYwMDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/9106009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Uvar", "html_url": "https://github.com/Uvar", "followers_url": "https://api.github.com/users/Uvar/followers", "following_url": "https://api.github.com/users/Uvar/following{/other_user}", "gists_url": "https://api.github.com/users/Uvar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Uvar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Uvar/subscriptions", "organizations_url": "https://api.github.com/users/Uvar/orgs", "repos_url": "https://api.github.com/users/Uvar/repos", "events_url": "https://api.github.com/users/Uvar/events{/privacy}", "received_events_url": "https://api.github.com/users/Uvar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-08-11T13:04:56Z", "updated_at": "2015-08-11T13:09:21Z", "closed_at": "2015-08-11T13:09:21Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "silly mistake, but the Euler-Rodrigues matrix is incomplete.\nThe variables are assigned like:\naa, ab, ac,ad = powers[0:4]\nBB, bb, bc, bd = powers[4:8]\nCC, cb, cc, cd = powers[8:12]\nDD, db, dc, dd = powers[12:16]\n\nSince ba = ab, ca = ac and da = ad; there are no issues in the calculations stemming from this, but it's still a bit silly. ;)\n\nIn the same category of silly:\n# Rotate 90 degrees over the X axis\n\nmeshes[0].rotate([0.0, 0.5, 0.0], math.radians(90)) <- This should be [1., 0., 0.] right? Else you rotate about the y axis.\n(and the one right after as well)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/14", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/14/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/14/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/14", "id": 100041954, "node_id": "MDU6SXNzdWUxMDAwNDE5NTQ=", "number": 14, "title": "After version 1.4.0 something changed in the data representation", "user": {"login": "Uvar", "id": 9106009, "node_id": "MDQ6VXNlcjkxMDYwMDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/9106009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Uvar", "html_url": "https://github.com/Uvar", "followers_url": "https://api.github.com/users/Uvar/followers", "following_url": "https://api.github.com/users/Uvar/following{/other_user}", "gists_url": "https://api.github.com/users/Uvar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Uvar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Uvar/subscriptions", "organizations_url": "https://api.github.com/users/Uvar/orgs", "repos_url": "https://api.github.com/users/Uvar/repos", "events_url": "https://api.github.com/users/Uvar/events{/privacy}", "received_events_url": "https://api.github.com/users/Uvar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-08-10T11:34:39Z", "updated_at": "2015-08-13T18:43:41Z", "closed_at": "2015-08-13T18:37:33Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I can't really trace it, will spend some more hours on it, but probably something broke when adding support for python 3.\n\nError message in one of the scripts:\n\"Invalid value encountered in double_scalars\"\nWhen I try to do 2 \\* x \\* y/(x *\\* 2+y *\\* 2) with x and y scalars.\nIn other words: x and y are both zero all of a sudden, and the division is invalid.\n\nThis worked without a hitch in version 1.4.0. ^^\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/13", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/13/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/13/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/13", "id": 99172561, "node_id": "MDU6SXNzdWU5OTE3MjU2MQ==", "number": 13, "title": "Rotate (and other manipulation) functions", "user": {"login": "hrobeers", "id": 2812522, "node_id": "MDQ6VXNlcjI4MTI1MjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/2812522?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hrobeers", "html_url": "https://github.com/hrobeers", "followers_url": "https://api.github.com/users/hrobeers/followers", "following_url": "https://api.github.com/users/hrobeers/following{/other_user}", "gists_url": "https://api.github.com/users/hrobeers/gists{/gist_id}", "starred_url": "https://api.github.com/users/hrobeers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hrobeers/subscriptions", "organizations_url": "https://api.github.com/users/hrobeers/orgs", "repos_url": "https://api.github.com/users/hrobeers/repos", "events_url": "https://api.github.com/users/hrobeers/events{/privacy}", "received_events_url": "https://api.github.com/users/hrobeers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-08-05T10:15:08Z", "updated_at": "2015-08-08T22:45:32Z", "closed_at": "2015-08-08T22:45:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI can't find a function to rotate a mesh. What is the standard way to rotate a mesh?\n\nIt would be convenient to expose functions like:\n- translate\n- scale\n- rotate\n\nThanks for creating this lib!\nHans\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/12", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/12/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/12/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/12", "id": 96883564, "node_id": "MDU6SXNzdWU5Njg4MzU2NA==", "number": 12, "title": "Feature request: unify duplicated vertices", "user": {"login": "Skylion007", "id": 2053727, "node_id": "MDQ6VXNlcjIwNTM3Mjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2053727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Skylion007", "html_url": "https://github.com/Skylion007", "followers_url": "https://api.github.com/users/Skylion007/followers", "following_url": "https://api.github.com/users/Skylion007/following{/other_user}", "gists_url": "https://api.github.com/users/Skylion007/gists{/gist_id}", "starred_url": "https://api.github.com/users/Skylion007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Skylion007/subscriptions", "organizations_url": "https://api.github.com/users/Skylion007/orgs", "repos_url": "https://api.github.com/users/Skylion007/repos", "events_url": "https://api.github.com/users/Skylion007/events{/privacy}", "received_events_url": "https://api.github.com/users/Skylion007/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2015-07-23T19:00:20Z", "updated_at": "2018-02-23T21:20:07Z", "closed_at": "2015-08-13T19:34:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is really just a space optimization, but when you create an STL file, it does not unify the vertices so you have a lot of duplicated data. I have to open all the files in meshlab to compress the stl file like so. It would be a handy function to implement in this library especially if you are generating a ton of STL files. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/11", "repository_url": "https://api.github.com/repos/WoLpH/numpy-stl", "labels_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/11/comments", "events_url": "https://api.github.com/repos/WoLpH/numpy-stl/issues/11/events", "html_url": "https://github.com/WoLpH/numpy-stl/issues/11", "id": 96871731, "node_id": "MDU6SXNzdWU5Njg3MTczMQ==", "number": 11, "title": "Tutorial on how to save multiple meshes to a single STL file?", "user": {"login": "Skylion007", "id": 2053727, "node_id": "MDQ6VXNlcjIwNTM3Mjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2053727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Skylion007", "html_url": "https://github.com/Skylion007", "followers_url": "https://api.github.com/users/Skylion007/followers", "following_url": "https://api.github.com/users/Skylion007/following{/other_user}", "gists_url": "https://api.github.com/users/Skylion007/gists{/gist_id}", "starred_url": "https://api.github.com/users/Skylion007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Skylion007/subscriptions", "organizations_url": "https://api.github.com/users/Skylion007/orgs", "repos_url": "https://api.github.com/users/Skylion007/repos", "events_url": "https://api.github.com/users/Skylion007/events{/privacy}", "received_events_url": "https://api.github.com/users/Skylion007/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-07-23T18:10:52Z", "updated_at": "2015-07-23T19:02:16Z", "closed_at": "2015-07-23T19:02:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "You provide a method to load multiple meshes from a single STL file, but how do you save them? Is this method not implemented? If so, please make this issue a feature request to implement it.\n", "performed_via_github_app": null, "score": 1.0}]}