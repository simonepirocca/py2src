{"total_count": 36, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/tlocke/pg8000/issues/49", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/49/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/49/events", "html_url": "https://github.com/tlocke/pg8000/issues/49", "id": 670146771, "node_id": "MDU6SXNzdWU2NzAxNDY3NzE=", "number": 49, "title": "Support for notification payloads", "user": {"login": "StefanVidakovic", "id": 23155626, "node_id": "MDQ6VXNlcjIzMTU1NjI2", "avatar_url": "https://avatars2.githubusercontent.com/u/23155626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StefanVidakovic", "html_url": "https://github.com/StefanVidakovic", "followers_url": "https://api.github.com/users/StefanVidakovic/followers", "following_url": "https://api.github.com/users/StefanVidakovic/following{/other_user}", "gists_url": "https://api.github.com/users/StefanVidakovic/gists{/gist_id}", "starred_url": "https://api.github.com/users/StefanVidakovic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StefanVidakovic/subscriptions", "organizations_url": "https://api.github.com/users/StefanVidakovic/orgs", "repos_url": "https://api.github.com/users/StefanVidakovic/repos", "events_url": "https://api.github.com/users/StefanVidakovic/events{/privacy}", "received_events_url": "https://api.github.com/users/StefanVidakovic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-31T19:36:08Z", "updated_at": "2020-08-07T16:57:13Z", "closed_at": "2020-08-07T16:57:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, just wondering if there's plans for adding support for notification payloads. Currently, Connection.notifications only stores a tuple of (postgres PID, channel name). [The postgres notify command](https://www.postgresql.org/docs/current/sql-notify.html) supports payloads as well. While there are probably numerous ways one might leverage this I particularly find it useful for being notified not only when something was inserted into the db, but also to be informed of the contents of the insertion. If there are no plans to work on this I am happy to contribute. Thanks.\r\n\r\nRegards\r\nStefan", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/48", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/48/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/48/events", "html_url": "https://github.com/tlocke/pg8000/issues/48", "id": 664493615, "node_id": "MDU6SXNzdWU2NjQ0OTM2MTU=", "number": 48, "title": "ValueError: invalid literal for int() with base 10: b'FETCH' with Redshift and FETCH", "user": {"login": "adedotua", "id": 26651628, "node_id": "MDQ6VXNlcjI2NjUxNjI4", "avatar_url": "https://avatars2.githubusercontent.com/u/26651628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adedotua", "html_url": "https://github.com/adedotua", "followers_url": "https://api.github.com/users/adedotua/followers", "following_url": "https://api.github.com/users/adedotua/following{/other_user}", "gists_url": "https://api.github.com/users/adedotua/gists{/gist_id}", "starred_url": "https://api.github.com/users/adedotua/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adedotua/subscriptions", "organizations_url": "https://api.github.com/users/adedotua/orgs", "repos_url": "https://api.github.com/users/adedotua/repos", "events_url": "https://api.github.com/users/adedotua/events{/privacy}", "received_events_url": "https://api.github.com/users/adedotua/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-23T13:53:46Z", "updated_at": "2020-07-25T11:12:59Z", "closed_at": "2020-07-25T11:12:59Z", "author_association": "NONE", "active_lock_reason": null, "body": " Hello,\r\nI am using pg8000 to create server side cursors on Redshift and getting the error below. The issue is similar to https://github.com/mfenniak/pg8000/issues/44. I manually commented out the FETCH from the self._commands_with_count and it works successfully. It seems FETCH did not return row count in 8.0.26 postgres server either. \r\n```\r\n>>> cur.execute('declare testcur cursor for select * from table limit 10')\r\n<pg8000.core.Cursor object at 0x7fd9e4ff85b0>\r\n>>> cur.execute('fetch 5 from testcur')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/adedotua/.local/python-3.8.3/lib/python3.8/site-packages/pg8000/core.py\", line 352, in execute\r\n    self._c.execute_unnamed(self, operation, args, self._input_oids)\r\n  File \"/home/adedotua/.local/python-3.8.3/lib/python3.8/site-packages/pg8000/core.py\", line 1304, in execute_unnamed\r\n    self.handle_messages(cursor)\r\n  File \"/home/adedotua/.local/python-3.8.3/lib/python3.8/site-packages/pg8000/core.py\", line 1440, in handle_messages\r\n    self.message_types[code](self._read(data_len - 4), cursor)\r\n  File \"/home/adedotua/.local/python-3.8.3/lib/python3.8/site-packages/pg8000/core.py\", line 1414, in handle_COMMAND_COMPLETE\r\n    row_count = int(values[-1])\r\nValueError: invalid literal for int() with base 10: b'FETCH'\r\n>>> rows = cursor.fetchone()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nNameError: name 'cursor' is not defined\r\n>>> rows = cur.fetchone()\r\n>>> print(rows)\r\n[2129840, '1990', None, None, None]\r\n```\r\n```\r\n>>> cur.execute('declare testcur cursor for select rundate from table limit 1')\r\n<pg8000.core.Cursor object at 0x7f6388610e80>\r\n>>> cur.execute('fetch 5 from testcur')\r\n<pg8000.core.Cursor object at 0x7f6388610e80>\r\n>>> cur.__dict__\r\n{'_c': <pg8000.core.Connection object at 0x7f63955da760>, 'arraysize': 1, '_row_count': -1, '_cached_rows': deque([[datetime.datetime(2020, 3, 26, 19, 4)]]), 'row_desc': [{'table_oid': 0, 'column_attrnum': 0, 'type_oid': 1114, 'type_size': 8, 'type_modifier': -1, 'format': 0, 'name': b'rundate', 'func': <function timestamp_in at 0x7f6388606f70>}], 'paramstyle': 'format', '_input_oids': None, 'stream': None, 'input_funcs': (<function timestamp_in at 0x7f6388606f70>,), 'input_types': []}\r\n```\r\n\r\n\r\nFile is core.py at line 1484:\r\n\r\n       elif key == b\"server_version\":\r\n            self._server_version = LooseVersion(value.decode('ascii'))\r\n            if self._server_version < LooseVersion('8.2.0'):\r\n                self._commands_with_count = (\r\n                    b\"INSERT\", b\"DELETE\", b\"UPDATE\", b\"MOVE\", b\"FETCH\")\r\n            elif self._server_version < LooseVersion('9.0.0'):\r\n                self._commands_with_count = (\r\n                    b\"INSERT\", b\"DELETE\", b\"UPDATE\", b\"MOVE\", b\"FETCH\",\r\n                    b\"COPY\")", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/47", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/47/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/47/events", "html_url": "https://github.com/tlocke/pg8000/issues/47", "id": 660150738, "node_id": "MDU6SXNzdWU2NjAxNTA3Mzg=", "number": 47, "title": "Missing test files in source release (eg. conftest.py)", "user": {"login": "tlocke", "id": 221960, "node_id": "MDQ6VXNlcjIyMTk2MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/221960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlocke", "html_url": "https://github.com/tlocke", "followers_url": "https://api.github.com/users/tlocke/followers", "following_url": "https://api.github.com/users/tlocke/following{/other_user}", "gists_url": "https://api.github.com/users/tlocke/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlocke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlocke/subscriptions", "organizations_url": "https://api.github.com/users/tlocke/orgs", "repos_url": "https://api.github.com/users/tlocke/repos", "events_url": "https://api.github.com/users/tlocke/events{/privacy}", "received_events_url": "https://api.github.com/users/tlocke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-18T13:26:55Z", "updated_at": "2020-07-26T12:35:38Z", "closed_at": "2020-07-25T11:03:43Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/46", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/46/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/46/events", "html_url": "https://github.com/tlocke/pg8000/issues/46", "id": 655535792, "node_id": "MDU6SXNzdWU2NTU1MzU3OTI=", "number": 46, "title": "Test failure with PostgreSQL 12", "user": {"login": "yan12125", "id": 1937689, "node_id": "MDQ6VXNlcjE5Mzc2ODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1937689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yan12125", "html_url": "https://github.com/yan12125", "followers_url": "https://api.github.com/users/yan12125/followers", "following_url": "https://api.github.com/users/yan12125/following{/other_user}", "gists_url": "https://api.github.com/users/yan12125/gists{/gist_id}", "starred_url": "https://api.github.com/users/yan12125/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yan12125/subscriptions", "organizations_url": "https://api.github.com/users/yan12125/orgs", "repos_url": "https://api.github.com/users/yan12125/repos", "events_url": "https://api.github.com/users/yan12125/events{/privacy}", "received_events_url": "https://api.github.com/users/yan12125/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-13T02:25:10Z", "updated_at": "2020-07-18T13:57:57Z", "closed_at": "2020-07-18T12:11:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n=================================== FAILURES ===================================\r\n__________________________ test_copy_from_with_error ___________________________\r\n\r\ndb_table = <pg8000.core.Connection object at 0x7f5ace2b2c10>\r\n\r\n    def test_copy_from_with_error(db_table):\r\n        with db_table.cursor() as cursor:\r\n            stream = BytesIO(b\"f1Xf2\\n\\n1XY1Y\\n\")\r\n            with pytest.raises(BaseException) as e:\r\n                cursor.execute(\r\n                    \"COPY t1 (f1, f2) FROM STDIN WITH DELIMITER 'X' CSV HEADER \"\r\n                    \"QUOTE AS 'Y' FORCE NOT NULL f1\", stream=stream)\r\n            arg = {\r\n                'S': 'ERROR',\r\n                'C': '22P02',\r\n                'M': 'invalid input syntax for integer: \"\"',\r\n                'W': 'COPY t1, line 2, column f1: \"\"',\r\n                'F': 'numutils.c',\r\n                'R': 'pg_atoi'\r\n            }\r\n            earg = e.value.args[0]\r\n            for k, v in arg.items():\r\n>               assert earg[k] == v\r\nE               assert 'invalid inpu...e integer: \"\"' == 'invalid inpu...r integer: \"\"'\r\nE                 - invalid input syntax for integer: \"\"\r\nE                 + invalid input syntax for type integer: \"\"\r\nE                 ?                         +++++\r\n\r\ntest/test_copy.py:81: AssertionError\r\n=========================== short test summary info ============================\r\nFAILED test/test_copy.py::test_copy_from_with_error - assert 'invalid inpu......\r\n================= 1 failed, 195 passed, 2 deselected in 1.09s ==================\r\n```\r\nApparently the error messages are different in the latest PostgreSQL.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/45", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/45/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/45/events", "html_url": "https://github.com/tlocke/pg8000/issues/45", "id": 646318395, "node_id": "MDU6SXNzdWU2NDYzMTgzOTU=", "number": 45, "title": "Run .sql files using pg8000", "user": {"login": "maddy2u", "id": 7676511, "node_id": "MDQ6VXNlcjc2NzY1MTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/7676511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maddy2u", "html_url": "https://github.com/maddy2u", "followers_url": "https://api.github.com/users/maddy2u/followers", "following_url": "https://api.github.com/users/maddy2u/following{/other_user}", "gists_url": "https://api.github.com/users/maddy2u/gists{/gist_id}", "starred_url": "https://api.github.com/users/maddy2u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maddy2u/subscriptions", "organizations_url": "https://api.github.com/users/maddy2u/orgs", "repos_url": "https://api.github.com/users/maddy2u/repos", "events_url": "https://api.github.com/users/maddy2u/events{/privacy}", "received_events_url": "https://api.github.com/users/maddy2u/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-26T14:54:12Z", "updated_at": "2020-07-25T10:52:27Z", "closed_at": "2020-07-25T10:52:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "pg8000 is a great library. However, it doesnt' give the opportunity for the users to run multiple sql statements sequentialls in a .sql file. This results in having multiple sql statements hardcoded in the python file and is difficult to read and manage. \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/44", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/44/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/44/events", "html_url": "https://github.com/tlocke/pg8000/issues/44", "id": 637906641, "node_id": "MDU6SXNzdWU2Mzc5MDY2NDE=", "number": 44, "title": "scramp 1.2.0 released ", "user": {"login": "itamarjp", "id": 762712, "node_id": "MDQ6VXNlcjc2MjcxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/762712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itamarjp", "html_url": "https://github.com/itamarjp", "followers_url": "https://api.github.com/users/itamarjp/followers", "following_url": "https://api.github.com/users/itamarjp/following{/other_user}", "gists_url": "https://api.github.com/users/itamarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/itamarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itamarjp/subscriptions", "organizations_url": "https://api.github.com/users/itamarjp/orgs", "repos_url": "https://api.github.com/users/itamarjp/repos", "events_url": "https://api.github.com/users/itamarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/itamarjp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-12T17:33:51Z", "updated_at": "2020-06-13T08:37:26Z", "closed_at": "2020-06-13T08:37:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "theres a new version scramp 1.2.0\r\n\r\nhttps://github.com/tlocke/scramp/releases\r\n\r\n\r\nsetup.py says\r\n\r\n    install_requires=['scramp==1.1.1'],\r\n\r\n\r\nI think its need's to be ajusted to make pg8000 compatible with newer scramp", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/43", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/43/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/43/events", "html_url": "https://github.com/tlocke/pg8000/issues/43", "id": 630547230, "node_id": "MDU6SXNzdWU2MzA1NDcyMzA=", "number": 43, "title": "SQL against table name with capital letters", "user": {"login": "skemppin", "id": 66406231, "node_id": "MDQ6VXNlcjY2NDA2MjMx", "avatar_url": "https://avatars1.githubusercontent.com/u/66406231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skemppin", "html_url": "https://github.com/skemppin", "followers_url": "https://api.github.com/users/skemppin/followers", "following_url": "https://api.github.com/users/skemppin/following{/other_user}", "gists_url": "https://api.github.com/users/skemppin/gists{/gist_id}", "starred_url": "https://api.github.com/users/skemppin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skemppin/subscriptions", "organizations_url": "https://api.github.com/users/skemppin/orgs", "repos_url": "https://api.github.com/users/skemppin/repos", "events_url": "https://api.github.com/users/skemppin/events{/privacy}", "received_events_url": "https://api.github.com/users/skemppin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-04T06:28:32Z", "updated_at": "2020-07-25T11:18:48Z", "closed_at": "2020-07-25T11:18:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need to use tables with capital letters in them. \r\nHow can I to use those tables with pg8000 ?\r\n\r\nfor example:\r\ncon.run(\"SELECT count(*) FROM \"Table_Name\"\")\r\ngives error:\r\nSyntaxError: invalid syntax\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/42", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/42/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/42/events", "html_url": "https://github.com/tlocke/pg8000/issues/42", "id": 620924852, "node_id": "MDU6SXNzdWU2MjA5MjQ4NTI=", "number": 42, "title": "'IN %s' (array) does not work", "user": {"login": "srepmub", "id": 1583248, "node_id": "MDQ6VXNlcjE1ODMyNDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1583248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srepmub", "html_url": "https://github.com/srepmub", "followers_url": "https://api.github.com/users/srepmub/followers", "following_url": "https://api.github.com/users/srepmub/following{/other_user}", "gists_url": "https://api.github.com/users/srepmub/gists{/gist_id}", "starred_url": "https://api.github.com/users/srepmub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srepmub/subscriptions", "organizations_url": "https://api.github.com/users/srepmub/orgs", "repos_url": "https://api.github.com/users/srepmub/repos", "events_url": "https://api.github.com/users/srepmub/events{/privacy}", "received_events_url": "https://api.github.com/users/srepmub/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-19T12:09:50Z", "updated_at": "2020-07-18T13:51:30Z", "closed_at": "2020-07-18T13:51:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "the following works with psycopg2, but not with pg8000:\r\n\r\nt = ['blue', 'green']\r\nc.execute('DELETE FROM tag WHERE tag IN %s', (t,))\r\n\r\nthis leads to a ProgrammingError very similar to the one in issue 26 (which was closed because no follow up).\r\n\r\nI'm not sure yet what psycopg2 sends to the server here, but it's possible it checks the length of t and changes the query to something like '.. IN (%s, %s)', (t[0], t[1]).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/40", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/40/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/40/events", "html_url": "https://github.com/tlocke/pg8000/issues/40", "id": 618213310, "node_id": "MDU6SXNzdWU2MTgyMTMzMTA=", "number": 40, "title": "Executing .sql files", "user": {"login": "tlocke", "id": 221960, "node_id": "MDQ6VXNlcjIyMTk2MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/221960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlocke", "html_url": "https://github.com/tlocke", "followers_url": "https://api.github.com/users/tlocke/followers", "following_url": "https://api.github.com/users/tlocke/following{/other_user}", "gists_url": "https://api.github.com/users/tlocke/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlocke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlocke/subscriptions", "organizations_url": "https://api.github.com/users/tlocke/orgs", "repos_url": "https://api.github.com/users/tlocke/repos", "events_url": "https://api.github.com/users/tlocke/events{/privacy}", "received_events_url": "https://api.github.com/users/tlocke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-14T13:03:15Z", "updated_at": "2020-05-25T18:50:45Z", "closed_at": "2020-05-25T18:50:44Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Possibly revisit this issue https://github.com/mfenniak/pg8000/issues/117", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/39", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/39/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/39/events", "html_url": "https://github.com/tlocke/pg8000/issues/39", "id": 613304047, "node_id": "MDU6SXNzdWU2MTMzMDQwNDc=", "number": 39, "title": "Connection Refused when connecting to Tableau Server Database (Postgre) while working for other postgres databases", "user": {"login": "rgandhi2712", "id": 64906626, "node_id": "MDQ6VXNlcjY0OTA2NjI2", "avatar_url": "https://avatars2.githubusercontent.com/u/64906626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rgandhi2712", "html_url": "https://github.com/rgandhi2712", "followers_url": "https://api.github.com/users/rgandhi2712/followers", "following_url": "https://api.github.com/users/rgandhi2712/following{/other_user}", "gists_url": "https://api.github.com/users/rgandhi2712/gists{/gist_id}", "starred_url": "https://api.github.com/users/rgandhi2712/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rgandhi2712/subscriptions", "organizations_url": "https://api.github.com/users/rgandhi2712/orgs", "repos_url": "https://api.github.com/users/rgandhi2712/repos", "events_url": "https://api.github.com/users/rgandhi2712/events{/privacy}", "received_events_url": "https://api.github.com/users/rgandhi2712/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-06T13:04:57Z", "updated_at": "2020-07-25T11:19:57Z", "closed_at": "2020-07-25T11:19:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi All,\r\n\r\nI am using this package to simply connect to a tableau server database using readonly credentials. Using pg8000.connect() command in python I am able to establish connection to other Postgres and Redshift databases but it keeps failing for Tableau Server repository with following error:\r\nError:\r\npg8000.core.InterfaceError: ('communication error', ConnectionRefusedError(61, 'Connection refused'))\r\n\r\nAny update would be helpful. Thanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/38", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/38/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/38/events", "html_url": "https://github.com/tlocke/pg8000/issues/38", "id": 612457970, "node_id": "MDU6SXNzdWU2MTI0NTc5NzA=", "number": 38, "title": "adaptation/type casting support", "user": {"login": "srepmub", "id": 1583248, "node_id": "MDQ6VXNlcjE1ODMyNDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1583248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srepmub", "html_url": "https://github.com/srepmub", "followers_url": "https://api.github.com/users/srepmub/followers", "following_url": "https://api.github.com/users/srepmub/following{/other_user}", "gists_url": "https://api.github.com/users/srepmub/gists{/gist_id}", "starred_url": "https://api.github.com/users/srepmub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srepmub/subscriptions", "organizations_url": "https://api.github.com/users/srepmub/orgs", "repos_url": "https://api.github.com/users/srepmub/repos", "events_url": "https://api.github.com/users/srepmub/events{/privacy}", "received_events_url": "https://api.github.com/users/srepmub/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-05T09:16:21Z", "updated_at": "2020-07-18T12:17:40Z", "closed_at": "2020-07-18T12:17:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi,\r\n\r\nwe are looking for a pure-python alternative to psycopg2, but we need support for custom type adaptation/casting. it's not clear (at first glance) from the pg8000 documentation if this is possible with pg8000. it doesn't seem too hard to support in any case..? :)\r\n\r\nlooking at the alternatives, pygresql at least seems to support this:\r\n\r\nhttps://www.pygresql.org/contents/pgdb/adaptation.html#typecasting-to-python\r\n\r\nit would be great if the documentation could in any case be updated with a statement about such support.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/37", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/37/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/37/events", "html_url": "https://github.com/tlocke/pg8000/issues/37", "id": 602270806, "node_id": "MDU6SXNzdWU2MDIyNzA4MDY=", "number": 37, "title": "connection object has no attribute run", "user": {"login": "hemantborole", "id": 27022, "node_id": "MDQ6VXNlcjI3MDIy", "avatar_url": "https://avatars2.githubusercontent.com/u/27022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hemantborole", "html_url": "https://github.com/hemantborole", "followers_url": "https://api.github.com/users/hemantborole/followers", "following_url": "https://api.github.com/users/hemantborole/following{/other_user}", "gists_url": "https://api.github.com/users/hemantborole/gists{/gist_id}", "starred_url": "https://api.github.com/users/hemantborole/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hemantborole/subscriptions", "organizations_url": "https://api.github.com/users/hemantborole/orgs", "repos_url": "https://api.github.com/users/hemantborole/repos", "events_url": "https://api.github.com/users/hemantborole/events{/privacy}", "received_events_url": "https://api.github.com/users/hemantborole/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-04-17T22:40:48Z", "updated_at": "2020-07-25T11:18:21Z", "closed_at": "2020-07-25T11:18:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "![image](https://user-images.githubusercontent.com/27022/79619435-af851780-80c1-11ea-92ee-ab0561df64af.png)\r\n\r\nusing cursor for select works fine. I am trying to turn off caching, not selects.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/35", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/35/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/35/events", "html_url": "https://github.com/tlocke/pg8000/issues/35", "id": 599894946, "node_id": "MDU6SXNzdWU1OTk4OTQ5NDY=", "number": 35, "title": "Recognize user password as parameter", "user": {"login": "danizen", "id": 4966193, "node_id": "MDQ6VXNlcjQ5NjYxOTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/4966193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danizen", "html_url": "https://github.com/danizen", "followers_url": "https://api.github.com/users/danizen/followers", "following_url": "https://api.github.com/users/danizen/following{/other_user}", "gists_url": "https://api.github.com/users/danizen/gists{/gist_id}", "starred_url": "https://api.github.com/users/danizen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danizen/subscriptions", "organizations_url": "https://api.github.com/users/danizen/orgs", "repos_url": "https://api.github.com/users/danizen/repos", "events_url": "https://api.github.com/users/danizen/events{/privacy}", "received_events_url": "https://api.github.com/users/danizen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-14T22:23:20Z", "updated_at": "2020-07-25T11:16:20Z", "closed_at": "2020-07-25T11:16:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "### DESIRED BEHAVIOR\r\n\r\nI would want the following to work, obviously with paramstyle set to 'format', as it does for psycopg2:\r\n\r\n```python\r\n# get the username and password for a new user from AWS secrets manager ...\r\n# now create the user\r\nsql = 'CREATE USER {} WITH PASSWORD %s\".format(username)\r\nwith dbconn.cursor() as cursor:\r\n    cursor.execute(sql, [password])\r\n```\r\n\r\n### BACKGOUND\r\n\r\nI am using pg8000 to avoid a binary dependence so I can easily build an AWS Lambda on a windows desktop without using Docker.  The purpose of the AWS Lambda is to a Custom CloudFormation resource, so that in CloudFormation, users may:\r\n * Create an Master username and password\r\n * Create an application specific username and password\r\n * Create an RDS database\r\n * Provision the RDS database so that the application specific username and password\r\n   exists, and has access to a list of databases\r\n\r\n### WHY IMPORTANT\r\n\r\nI see the main use case for pg8000 is to avoid a need to build psycopg2 in situations where it is unnecessary, and maybe to enable the use of the SOCKS protocol because pure Python's own sockets are used.\r\n\r\nInstead of code similar to the above, I have to build a string containing the actual password, which adds complexities I'd prefer to avoid:\r\n* Test the password to insist it uses only allowed character classes *or* properly encode these myself\r\n* Bypass an intermediate logging mechanism (a cursor wrapper) that logs the sql.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/33", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/33/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/33/events", "html_url": "https://github.com/tlocke/pg8000/issues/33", "id": 593782512, "node_id": "MDU6SXNzdWU1OTM3ODI1MTI=", "number": 33, "title": "ValueError: invalid literal for int() with base 10: 'RS: PrepareSchema'", "user": {"login": "zopyx", "id": 594239, "node_id": "MDQ6VXNlcjU5NDIzOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/594239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zopyx", "html_url": "https://github.com/zopyx", "followers_url": "https://api.github.com/users/zopyx/followers", "following_url": "https://api.github.com/users/zopyx/following{/other_user}", "gists_url": "https://api.github.com/users/zopyx/gists{/gist_id}", "starred_url": "https://api.github.com/users/zopyx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zopyx/subscriptions", "organizations_url": "https://api.github.com/users/zopyx/orgs", "repos_url": "https://api.github.com/users/zopyx/repos", "events_url": "https://api.github.com/users/zopyx/events{/privacy}", "received_events_url": "https://api.github.com/users/zopyx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-04T09:20:54Z", "updated_at": "2020-04-10T18:03:16Z", "closed_at": "2020-04-10T18:03:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Trying to use pg8000 with Python 3, Plone 5.2 and Relstorage against Yugabyte DB (Postgres driver level):\r\n\r\n```\r\n\r\n  File \"/home/ajung/src/plone-yugabyte/parts/instance/bin/interpreter\", line 267, in <module>\r\n    exec(compile(__file__f.read(), __file__, \"exec\"))\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/serve.py\", line 255, in <module>\r\n    sys.exit(main() or 0)\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/serve.py\", line 251, in main\r\n    return command.run()\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/serve.py\", line 190, in run\r\n    global_conf=vars)\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/serve.py\", line 220, in loadapp\r\n    return loadapp(app_spec, name=name, relative_to=relative_to, **kw)\r\n  File \"/home/ajung/.buildout/eggs/PasteDeploy-2.1.0-py3.7.egg/paste/deploy/loadwsgi.py\", line 253, in loadapp\r\n    return loadobj(APP, uri, name=name, **kw)\r\n  File \"/home/ajung/.buildout/eggs/PasteDeploy-2.1.0-py3.7.egg/paste/deploy/loadwsgi.py\", line 278, in loadobj\r\n    return context.create()\r\n  File \"/home/ajung/.buildout/eggs/PasteDeploy-2.1.0-py3.7.egg/paste/deploy/loadwsgi.py\", line 715, in create\r\n    return self.object_type.invoke(self)\r\n  File \"/home/ajung/.buildout/eggs/PasteDeploy-2.1.0-py3.7.egg/paste/deploy/loadwsgi.py\", line 209, in invoke\r\n    app = context.app_context.create()\r\n  File \"/home/ajung/.buildout/eggs/PasteDeploy-2.1.0-py3.7.egg/paste/deploy/loadwsgi.py\", line 715, in create\r\n    return self.object_type.invoke(self)\r\n  File \"/home/ajung/.buildout/eggs/PasteDeploy-2.1.0-py3.7.egg/paste/deploy/loadwsgi.py\", line 152, in invoke\r\n    return fix_call(context.object, context.global_conf, **context.local_conf)\r\n  File \"/home/ajung/.buildout/eggs/PasteDeploy-2.1.0-py3.7.egg/paste/deploy/util.py\", line 55, in fix_call\r\n    val = callable(*args, **kw)\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/run.py\", line 71, in make_wsgi_app\r\n    starter.prepare()\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/starter.py\", line 41, in prepare\r\n    self.startZope()\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/starter.py\", line 99, in startZope\r\n    Zope2.startup_wsgi()\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/__init__.py\", line 50, in startup_wsgi\r\n    _startup()\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/App/startup.py\", line 117, in startup\r\n    DB = dbtab.getDatabase('/', is_root=1)\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/datatypes.py\", line 266, in getDatabase\r\n    db = factory.open(name, self.databases)\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/datatypes.py\", line 159, in open\r\n    DB = self.createDB(database_name, databases)\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/datatypes.py\", line 156, in createDB\r\n    return ZODBDatabase.open(self, databases)\r\n  File \"/home/ajung/.buildout/eggs/ZODB-5.5.1-py3.7.egg/ZODB/config.py\", line 131, in open\r\n    storage = section.storage.open()\r\n  File \"/home/ajung/.buildout/eggs/RelStorage-3.0.1-py3.7-linux-x86_64.egg/relstorage/config.py\", line 43, in open\r\n    return RelStorage(adapter, name=config.name, options=options)\r\n  File \"/home/ajung/.buildout/eggs/RelStorage-3.0.1-py3.7-linux-x86_64.egg/relstorage/storage/__init__.py\", line 177, in __init__\r\n    self._adapter.schema.prepare()\r\n  File \"/home/ajung/.buildout/eggs/RelStorage-3.0.1-py3.7-linux-x86_64.egg/relstorage/adapters/schema.py\", line 738, in prepare\r\n    self.connmanager.open_and_call(self._prepare_with_connection)\r\n  File \"/home/ajung/.buildout/eggs/RelStorage-3.0.1-py3.7-linux-x86_64.egg/relstorage/adapters/connmanager.py\", line 288, in open_and_call\r\n    conn, cursor = self._do_open_for_call(callback)\r\n  File \"/home/ajung/.buildout/eggs/RelStorage-3.0.1-py3.7-linux-x86_64.egg/relstorage/adapters/connmanager.py\", line 362, in _do_open_for_call\r\n    return self.open(**_connection_callback_open_args(self, callback))\r\n  File \"src/perfmetrics/metric.py\", line 72, in perfmetrics._metric._AbstractMetricImpl.__call__\r\n  File \"/home/ajung/.buildout/eggs/RelStorage-3.0.1-py3.7-linux-x86_64.egg/relstorage/adapters/postgresql/connmanager.py\", line 78, in open\r\n    application_name=application_name\r\n  File \"/home/ajung/.buildout/eggs/RelStorage-3.0.1-py3.7-linux-x86_64.egg/relstorage/adapters/postgresql/drivers/pg8000.py\", line 161, in connect_with_isolation\r\n    conn = self.connect(dsn, application_name=application_name)\r\n  File \"/home/ajung/.buildout/eggs/RelStorage-3.0.1-py3.7-linux-x86_64.egg/relstorage/adapters/postgresql/drivers/pg8000.py\", line 149, in connect\r\n    conn = self._connect(**kwds)\r\n  File \"/home/ajung/.buildout/eggs/RelStorage-3.0.1-py3.7-linux-x86_64.egg/relstorage/adapters/postgresql/drivers/pg8000.py\", line 127, in __init__\r\n    max_prepared_statements, tcp_keepalive)\r\n  File \"/home/ajung/src/plone-yugabyte/lib/python3.7/site-packages/pg8000/core.py\", line 1100, in __init__\r\n    self.max_prepared_statements = int(max_prepared_statements)\r\nValueError: invalid literal for int() with base 10: 'RS: PrepareSchema'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/32", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/32/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/32/events", "html_url": "https://github.com/tlocke/pg8000/issues/32", "id": 593782495, "node_id": "MDU6SXNzdWU1OTM3ODI0OTU=", "number": 32, "title": "ValueError: invalid literal for int() with base 10: 'RS: PrepareSchema'", "user": {"login": "zopyx", "id": 594239, "node_id": "MDQ6VXNlcjU5NDIzOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/594239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zopyx", "html_url": "https://github.com/zopyx", "followers_url": "https://api.github.com/users/zopyx/followers", "following_url": "https://api.github.com/users/zopyx/following{/other_user}", "gists_url": "https://api.github.com/users/zopyx/gists{/gist_id}", "starred_url": "https://api.github.com/users/zopyx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zopyx/subscriptions", "organizations_url": "https://api.github.com/users/zopyx/orgs", "repos_url": "https://api.github.com/users/zopyx/repos", "events_url": "https://api.github.com/users/zopyx/events{/privacy}", "received_events_url": "https://api.github.com/users/zopyx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-04T09:20:45Z", "updated_at": "2020-07-25T11:17:47Z", "closed_at": "2020-07-25T11:17:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Trying to use pg8000 with Python 3, Plone 5.2 and Relstorage against Yugabyte DB (Postgres driver level):\r\n\r\n```\r\n\r\n  File \"/home/ajung/src/plone-yugabyte/parts/instance/bin/interpreter\", line 267, in <module>\r\n    exec(compile(__file__f.read(), __file__, \"exec\"))\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/serve.py\", line 255, in <module>\r\n    sys.exit(main() or 0)\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/serve.py\", line 251, in main\r\n    return command.run()\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/serve.py\", line 190, in run\r\n    global_conf=vars)\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/serve.py\", line 220, in loadapp\r\n    return loadapp(app_spec, name=name, relative_to=relative_to, **kw)\r\n  File \"/home/ajung/.buildout/eggs/PasteDeploy-2.1.0-py3.7.egg/paste/deploy/loadwsgi.py\", line 253, in loadapp\r\n    return loadobj(APP, uri, name=name, **kw)\r\n  File \"/home/ajung/.buildout/eggs/PasteDeploy-2.1.0-py3.7.egg/paste/deploy/loadwsgi.py\", line 278, in loadobj\r\n    return context.create()\r\n  File \"/home/ajung/.buildout/eggs/PasteDeploy-2.1.0-py3.7.egg/paste/deploy/loadwsgi.py\", line 715, in create\r\n    return self.object_type.invoke(self)\r\n  File \"/home/ajung/.buildout/eggs/PasteDeploy-2.1.0-py3.7.egg/paste/deploy/loadwsgi.py\", line 209, in invoke\r\n    app = context.app_context.create()\r\n  File \"/home/ajung/.buildout/eggs/PasteDeploy-2.1.0-py3.7.egg/paste/deploy/loadwsgi.py\", line 715, in create\r\n    return self.object_type.invoke(self)\r\n  File \"/home/ajung/.buildout/eggs/PasteDeploy-2.1.0-py3.7.egg/paste/deploy/loadwsgi.py\", line 152, in invoke\r\n    return fix_call(context.object, context.global_conf, **context.local_conf)\r\n  File \"/home/ajung/.buildout/eggs/PasteDeploy-2.1.0-py3.7.egg/paste/deploy/util.py\", line 55, in fix_call\r\n    val = callable(*args, **kw)\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/run.py\", line 71, in make_wsgi_app\r\n    starter.prepare()\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/starter.py\", line 41, in prepare\r\n    self.startZope()\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/starter.py\", line 99, in startZope\r\n    Zope2.startup_wsgi()\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/__init__.py\", line 50, in startup_wsgi\r\n    _startup()\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/App/startup.py\", line 117, in startup\r\n    DB = dbtab.getDatabase('/', is_root=1)\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/datatypes.py\", line 266, in getDatabase\r\n    db = factory.open(name, self.databases)\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/datatypes.py\", line 159, in open\r\n    DB = self.createDB(database_name, databases)\r\n  File \"/home/ajung/.buildout/eggs/Zope-4.4-py3.7.egg/Zope2/Startup/datatypes.py\", line 156, in createDB\r\n    return ZODBDatabase.open(self, databases)\r\n  File \"/home/ajung/.buildout/eggs/ZODB-5.5.1-py3.7.egg/ZODB/config.py\", line 131, in open\r\n    storage = section.storage.open()\r\n  File \"/home/ajung/.buildout/eggs/RelStorage-3.0.1-py3.7-linux-x86_64.egg/relstorage/config.py\", line 43, in open\r\n    return RelStorage(adapter, name=config.name, options=options)\r\n  File \"/home/ajung/.buildout/eggs/RelStorage-3.0.1-py3.7-linux-x86_64.egg/relstorage/storage/__init__.py\", line 177, in __init__\r\n    self._adapter.schema.prepare()\r\n  File \"/home/ajung/.buildout/eggs/RelStorage-3.0.1-py3.7-linux-x86_64.egg/relstorage/adapters/schema.py\", line 738, in prepare\r\n    self.connmanager.open_and_call(self._prepare_with_connection)\r\n  File \"/home/ajung/.buildout/eggs/RelStorage-3.0.1-py3.7-linux-x86_64.egg/relstorage/adapters/connmanager.py\", line 288, in open_and_call\r\n    conn, cursor = self._do_open_for_call(callback)\r\n  File \"/home/ajung/.buildout/eggs/RelStorage-3.0.1-py3.7-linux-x86_64.egg/relstorage/adapters/connmanager.py\", line 362, in _do_open_for_call\r\n    return self.open(**_connection_callback_open_args(self, callback))\r\n  File \"src/perfmetrics/metric.py\", line 72, in perfmetrics._metric._AbstractMetricImpl.__call__\r\n  File \"/home/ajung/.buildout/eggs/RelStorage-3.0.1-py3.7-linux-x86_64.egg/relstorage/adapters/postgresql/connmanager.py\", line 78, in open\r\n    application_name=application_name\r\n  File \"/home/ajung/.buildout/eggs/RelStorage-3.0.1-py3.7-linux-x86_64.egg/relstorage/adapters/postgresql/drivers/pg8000.py\", line 161, in connect_with_isolation\r\n    conn = self.connect(dsn, application_name=application_name)\r\n  File \"/home/ajung/.buildout/eggs/RelStorage-3.0.1-py3.7-linux-x86_64.egg/relstorage/adapters/postgresql/drivers/pg8000.py\", line 149, in connect\r\n    conn = self._connect(**kwds)\r\n  File \"/home/ajung/.buildout/eggs/RelStorage-3.0.1-py3.7-linux-x86_64.egg/relstorage/adapters/postgresql/drivers/pg8000.py\", line 127, in __init__\r\n    max_prepared_statements, tcp_keepalive)\r\n  File \"/home/ajung/src/plone-yugabyte/lib/python3.7/site-packages/pg8000/core.py\", line 1100, in __init__\r\n    self.max_prepared_statements = int(max_prepared_statements)\r\nValueError: invalid literal for int() with base 10: 'RS: PrepareSchema'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/31", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/31/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/31/events", "html_url": "https://github.com/tlocke/pg8000/issues/31", "id": 593593473, "node_id": "MDU6SXNzdWU1OTM1OTM0NzM=", "number": 31, "title": "TypeError: can't concat bool to bytes", "user": {"login": "titan550", "id": 5111141, "node_id": "MDQ6VXNlcjUxMTExNDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5111141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/titan550", "html_url": "https://github.com/titan550", "followers_url": "https://api.github.com/users/titan550/followers", "following_url": "https://api.github.com/users/titan550/following{/other_user}", "gists_url": "https://api.github.com/users/titan550/gists{/gist_id}", "starred_url": "https://api.github.com/users/titan550/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/titan550/subscriptions", "organizations_url": "https://api.github.com/users/titan550/orgs", "repos_url": "https://api.github.com/users/titan550/repos", "events_url": "https://api.github.com/users/titan550/events{/privacy}", "received_events_url": "https://api.github.com/users/titan550/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-03T19:28:44Z", "updated_at": "2020-07-25T11:19:34Z", "closed_at": "2020-07-25T11:19:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I started getting this error with version 1.14.0+ when I try to connect to Redshift. The problem disappears when I install version 1.13.2. Tested on Python 3.8.2 and 3.6.9\r\n\r\nIt is likely because of [this commit](https://github.com/tlocke/pg8000/commit/357a3c31b0d885e51706365ad859004902ad5319).\r\n\r\nError:\r\n```\r\n  File \"~\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\pg8000\\__init__.py\", line 48, in connect\r\n    return Connection(\r\n  File \"~\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\pg8000\\core.py\", line 1408, in __init__\r\n    val.extend(k.encode('ascii') + NULL_BYTE + v + NULL_BYTE)\r\nTypeError: can't concat bool to bytes\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/30", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/30/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/30/events", "html_url": "https://github.com/tlocke/pg8000/issues/30", "id": 585723388, "node_id": "MDU6SXNzdWU1ODU3MjMzODg=", "number": 30, "title": "Unclear how to switch from ssl to ssl_context option", "user": {"login": "fschulze", "id": 60921, "node_id": "MDQ6VXNlcjYwOTIx", "avatar_url": "https://avatars0.githubusercontent.com/u/60921?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fschulze", "html_url": "https://github.com/fschulze", "followers_url": "https://api.github.com/users/fschulze/followers", "following_url": "https://api.github.com/users/fschulze/following{/other_user}", "gists_url": "https://api.github.com/users/fschulze/gists{/gist_id}", "starred_url": "https://api.github.com/users/fschulze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fschulze/subscriptions", "organizations_url": "https://api.github.com/users/fschulze/orgs", "repos_url": "https://api.github.com/users/fschulze/repos", "events_url": "https://api.github.com/users/fschulze/events{/privacy}", "received_events_url": "https://api.github.com/users/fschulze/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-22T13:52:31Z", "updated_at": "2020-07-25T11:17:01Z", "closed_at": "2020-07-25T11:17:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "When some settings which have been moved to init_params are None, then the connection call fails. This wasn't an issue before when all kwargs were named explicitly and had None as default. Looks like this is caused by the change for #8.\r\nFiltering init_params for None values should fix it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/29", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/29/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/29/events", "html_url": "https://github.com/tlocke/pg8000/issues/29", "id": 569545124, "node_id": "MDU6SXNzdWU1Njk1NDUxMjQ=", "number": 29, "title": "PostgreSQL json_agg, row_to_json", "user": {"login": "pavbis", "id": 2733235, "node_id": "MDQ6VXNlcjI3MzMyMzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2733235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pavbis", "html_url": "https://github.com/pavbis", "followers_url": "https://api.github.com/users/pavbis/followers", "following_url": "https://api.github.com/users/pavbis/following{/other_user}", "gists_url": "https://api.github.com/users/pavbis/gists{/gist_id}", "starred_url": "https://api.github.com/users/pavbis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pavbis/subscriptions", "organizations_url": "https://api.github.com/users/pavbis/orgs", "repos_url": "https://api.github.com/users/pavbis/repos", "events_url": "https://api.github.com/users/pavbis/events{/privacy}", "received_events_url": "https://api.github.com/users/pavbis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-23T19:31:02Z", "updated_at": "2020-03-26T20:02:35Z", "closed_at": "2020-03-26T20:02:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "While executing of the following statement on the sql side, I receive well formatted json array \r\n\r\n```\r\nDROP TABLE IF EXISTS users;\r\n\r\nCREATE TEMPORARY TABLE IF NOT EXISTS \"users\"\r\n(\r\n  \"firstName\"  varchar(255) not null,\r\n  \"lastName\"  varchar(255) not null\r\n);\r\n\r\nINSERT INTO users VALUES ('max', 'mega');\r\nINSERT INTO users VALUES ('lisa', 'rapid');\r\n\r\nSELECT json_agg(json_strip_nulls(row_to_json(u)))\r\nFROM (\r\n    SELECT\r\n        \"firstName\",\r\n        \"lastName\"\r\n    FROM users\r\n ) u\r\n```\r\n\r\nResult:\r\n\r\n`[{\"firstName\":\"max\",\"lastName\":\"mega\"}, {\"firstName\":\"lisa\",\"lastName\":\"rapid\"}]`\r\n\r\n\r\n\r\nIf I execute the same statement in the service layer (via cursor) the result contains incorrect json quotes, basically a python list of dicts:\r\n\r\n`[{'firstName':'max','lastName':'mega'}, {'firstName':'lisa','lastName':'rapid'}]`\r\n\r\nIs there any possibility to retrieve the same result as SQL returns?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/28", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/28/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/28/events", "html_url": "https://github.com/tlocke/pg8000/issues/28", "id": 565953081, "node_id": "MDU6SXNzdWU1NjU5NTMwODE=", "number": 28, "title": "SQL statements with named parameters", "user": {"login": "pavbis", "id": 2733235, "node_id": "MDQ6VXNlcjI3MzMyMzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2733235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pavbis", "html_url": "https://github.com/pavbis", "followers_url": "https://api.github.com/users/pavbis/followers", "following_url": "https://api.github.com/users/pavbis/following{/other_user}", "gists_url": "https://api.github.com/users/pavbis/gists{/gist_id}", "starred_url": "https://api.github.com/users/pavbis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pavbis/subscriptions", "organizations_url": "https://api.github.com/users/pavbis/orgs", "repos_url": "https://api.github.com/users/pavbis/repos", "events_url": "https://api.github.com/users/pavbis/events{/privacy}", "received_events_url": "https://api.github.com/users/pavbis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-16T19:08:54Z", "updated_at": "2020-02-19T12:03:25Z", "closed_at": "2020-02-19T12:03:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Basically the same issue [https://github.com/tlocke/pg8000/issues/23](url).\r\nBut with example :)\r\nI also really like your minimalistic package, but sometimes it's not optimally IMO to repeat the same argument in the argument list.\r\n\r\n**Here is an example:**\r\n\r\n```\r\nquery = 'INSERT INTO \"events\" (\"streamName\", \"eventName\", \"sequence\", \"eventId\", \"event\") VALUES (%s, %s, ' \\\r\n'(SELECT COALESCE(MAX(\"sequence\"),0) FROM \"events\" WHERE \"streamName\" = %s AND \"eventName\" = %s ' \\\r\n'LIMIT 1) + 1, %s, %s)'\r\n\r\ncursor = self.connection.cursor()\r\ncursor.execute(\r\n    query,\r\n    [\r\n        str(stream_name), str(event.event_name), str(stream_name),\r\n        str(event.event_name), str(event.event_id), json.dumps(foo)\r\n    ]\r\n)\r\n```\r\n\r\nAs you can see I must repeat stream_name and event.event_name arguments because they occur two times in the query above.\r\nAny plans on implementing named parameters?\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/27", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/27/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/27/events", "html_url": "https://github.com/tlocke/pg8000/issues/27", "id": 554073322, "node_id": "MDU6SXNzdWU1NTQwNzMzMjI=", "number": 27, "title": "Issue when passing \"ALL\" for \"LIMIT %s\" ", "user": {"login": "thibault-lepeu", "id": 57914423, "node_id": "MDQ6VXNlcjU3OTE0NDIz", "avatar_url": "https://avatars0.githubusercontent.com/u/57914423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thibault-lepeu", "html_url": "https://github.com/thibault-lepeu", "followers_url": "https://api.github.com/users/thibault-lepeu/followers", "following_url": "https://api.github.com/users/thibault-lepeu/following{/other_user}", "gists_url": "https://api.github.com/users/thibault-lepeu/gists{/gist_id}", "starred_url": "https://api.github.com/users/thibault-lepeu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thibault-lepeu/subscriptions", "organizations_url": "https://api.github.com/users/thibault-lepeu/orgs", "repos_url": "https://api.github.com/users/thibault-lepeu/repos", "events_url": "https://api.github.com/users/thibault-lepeu/events{/privacy}", "received_events_url": "https://api.github.com/users/thibault-lepeu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-23T10:36:42Z", "updated_at": "2020-02-21T15:44:24Z", "closed_at": "2020-02-21T15:44:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to do a query and passing \"ALL\" as the limit, pg8000 raises the error below\r\n```\r\npg8000.core.ProgrammingError: {'S': 'ERROR', 'V': 'ERROR', 'C': '22P02', 'M': 'invalid input syntax for type bigint: \"ALL\"', 'F': 'int8.c', 'L': '129', 'R': 'scanint8'}\r\n```\r\n\r\nwhereas PSQL is completely fine with it:\r\n```\r\npostgres=# select count(1) from storage limit ALL;\r\n count \r\n-------\r\n    35\r\n(1 row)\r\n```\r\n\r\nThis also a documented feature of Postgres\r\nhttps://www.postgresql.org/docs/8.1/queries-limit.html\r\n```\r\nSELECT select_list\r\n    FROM table_expression\r\n    [LIMIT { number | ALL }] [OFFSET number]\r\n```\r\n\r\nThis would be useful as it would help me reduce string formatting for this particular case and use the correct tuple parameter approach as with other client variables.\r\n\r\nIs this something we can look into?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/26", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/26/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/26/events", "html_url": "https://github.com/tlocke/pg8000/issues/26", "id": 527276563, "node_id": "MDU6SXNzdWU1MjcyNzY1NjM=", "number": 26, "title": "Parametrized strings crashe with error pg8000.core.ProgrammingError", "user": {"login": "viktor-mitin", "id": 42915317, "node_id": "MDQ6VXNlcjQyOTE1MzE3", "avatar_url": "https://avatars3.githubusercontent.com/u/42915317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viktor-mitin", "html_url": "https://github.com/viktor-mitin", "followers_url": "https://api.github.com/users/viktor-mitin/followers", "following_url": "https://api.github.com/users/viktor-mitin/following{/other_user}", "gists_url": "https://api.github.com/users/viktor-mitin/gists{/gist_id}", "starred_url": "https://api.github.com/users/viktor-mitin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viktor-mitin/subscriptions", "organizations_url": "https://api.github.com/users/viktor-mitin/orgs", "repos_url": "https://api.github.com/users/viktor-mitin/repos", "events_url": "https://api.github.com/users/viktor-mitin/events{/privacy}", "received_events_url": "https://api.github.com/users/viktor-mitin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-22T15:55:41Z", "updated_at": "2020-02-21T15:45:10Z", "closed_at": "2020-02-21T15:45:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI'm Using PG8000 pg8000==1.12.5, and in the case when Parametrized strings are passed into curr.execute(sql, query_params) it crashes with the next exception.\r\n\r\npg8000.core.ProgrammingError: {'S': 'ERROR', 'V': 'ERROR', 'C': '42601', 'M': 'syntax error at or near \"$2\"', 'P': '16', 'F': 'scan.l', 'L': '1128', 'R': 'scanner_yyerror'}\r\n\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/24", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/24/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/24/events", "html_url": "https://github.com/tlocke/pg8000/issues/24", "id": 522546338, "node_id": "MDU6SXNzdWU1MjI1NDYzMzg=", "number": 24, "title": "SSL connections don't verify server name", "user": {"login": "JonathanRRogers", "id": 1103019, "node_id": "MDQ6VXNlcjExMDMwMTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1103019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonathanRRogers", "html_url": "https://github.com/JonathanRRogers", "followers_url": "https://api.github.com/users/JonathanRRogers/followers", "following_url": "https://api.github.com/users/JonathanRRogers/following{/other_user}", "gists_url": "https://api.github.com/users/JonathanRRogers/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonathanRRogers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonathanRRogers/subscriptions", "organizations_url": "https://api.github.com/users/JonathanRRogers/orgs", "repos_url": "https://api.github.com/users/JonathanRRogers/repos", "events_url": "https://api.github.com/users/JonathanRRogers/events{/privacy}", "received_events_url": "https://api.github.com/users/JonathanRRogers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-14T00:12:08Z", "updated_at": "2020-03-17T20:25:00Z", "closed_at": "2020-03-15T13:36:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python standard library function ssl.wrap_socket() is deprecated because it doesn't handle server host names. Since pg8000 uses that function, it can't properly secure connections to Postgres. In contrast, psycopg2 exposes libpq's \"sslmode\" parameter, which when set to \"verify-full\" verifies server hostname.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/23", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/23/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/23/events", "html_url": "https://github.com/tlocke/pg8000/issues/23", "id": 515672217, "node_id": "MDU6SXNzdWU1MTU2NzIyMTc=", "number": 23, "title": "Parameterized SQL statements", "user": {"login": "bombillazo", "id": 44002321, "node_id": "MDQ6VXNlcjQ0MDAyMzIx", "avatar_url": "https://avatars2.githubusercontent.com/u/44002321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bombillazo", "html_url": "https://github.com/bombillazo", "followers_url": "https://api.github.com/users/bombillazo/followers", "following_url": "https://api.github.com/users/bombillazo/following{/other_user}", "gists_url": "https://api.github.com/users/bombillazo/gists{/gist_id}", "starred_url": "https://api.github.com/users/bombillazo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bombillazo/subscriptions", "organizations_url": "https://api.github.com/users/bombillazo/orgs", "repos_url": "https://api.github.com/users/bombillazo/repos", "events_url": "https://api.github.com/users/bombillazo/events{/privacy}", "received_events_url": "https://api.github.com/users/bombillazo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-31T19:03:04Z", "updated_at": "2020-02-21T15:07:08Z", "closed_at": "2020-02-21T15:07:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "First off, I really like the pg8000 package! Been using it for Aurora-PSQL and Redshift.\r\n\r\nThe only big stopper I've had so far comes when parameterizing parts fo the query besides SELECTs, WHEREs or INSERTs/UPDATEs.\r\n\r\nFor example, having `SELECT TOP :amount * FROM ...` does not work.\r\nNeither does `... WHERE id = 100 LIMIT :amount`.\r\n\r\nIs there a way pg8000 could support parameterizing other parts of the query?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/19", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/19/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/19/events", "html_url": "https://github.com/tlocke/pg8000/issues/19", "id": 500270362, "node_id": "MDU6SXNzdWU1MDAyNzAzNjI=", "number": 19, "title": "Allow setting of source address on connection", "user": {"login": "kingcdavid", "id": 18153111, "node_id": "MDQ6VXNlcjE4MTUzMTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/18153111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kingcdavid", "html_url": "https://github.com/kingcdavid", "followers_url": "https://api.github.com/users/kingcdavid/followers", "following_url": "https://api.github.com/users/kingcdavid/following{/other_user}", "gists_url": "https://api.github.com/users/kingcdavid/gists{/gist_id}", "starred_url": "https://api.github.com/users/kingcdavid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kingcdavid/subscriptions", "organizations_url": "https://api.github.com/users/kingcdavid/orgs", "repos_url": "https://api.github.com/users/kingcdavid/repos", "events_url": "https://api.github.com/users/kingcdavid/events{/privacy}", "received_events_url": "https://api.github.com/users/kingcdavid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-30T13:15:58Z", "updated_at": "2019-10-13T18:32:59Z", "closed_at": "2019-10-13T18:32:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be good to be able to set the source address when creating a connection to the database\r\n\r\nthis could be done with the following code\r\n\r\nhttps://github.com/tlocke/pg8000/pull/21\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/17", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/17/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/17/events", "html_url": "https://github.com/tlocke/pg8000/issues/17", "id": 462223880, "node_id": "MDU6SXNzdWU0NjIyMjM4ODA=", "number": 17, "title": "Old style make_interval not compatible with numeric param style", "user": {"login": "sanepal", "id": 5240019, "node_id": "MDQ6VXNlcjUyNDAwMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/5240019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanepal", "html_url": "https://github.com/sanepal", "followers_url": "https://api.github.com/users/sanepal/followers", "following_url": "https://api.github.com/users/sanepal/following{/other_user}", "gists_url": "https://api.github.com/users/sanepal/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanepal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanepal/subscriptions", "organizations_url": "https://api.github.com/users/sanepal/orgs", "repos_url": "https://api.github.com/users/sanepal/repos", "events_url": "https://api.github.com/users/sanepal/events{/privacy}", "received_events_url": "https://api.github.com/users/sanepal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-28T22:09:06Z", "updated_at": "2019-06-30T13:49:01Z", "closed_at": "2019-06-30T13:49:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you use the `make_interval(days := 10)` syntax from the [PG 9.4 docs](https://www.postgresql.org/docs/9.4/functions-datetime.html), it tries to interpolate `:=` as a placeholder which ends up as a scanner error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/16", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/16/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/16/events", "html_url": "https://github.com/tlocke/pg8000/issues/16", "id": 457696972, "node_id": "MDU6SXNzdWU0NTc2OTY5NzI=", "number": 16, "title": "Autocommit false causing locks (?)", "user": {"login": "EralpB", "id": 2274357, "node_id": "MDQ6VXNlcjIyNzQzNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2274357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EralpB", "html_url": "https://github.com/EralpB", "followers_url": "https://api.github.com/users/EralpB/followers", "following_url": "https://api.github.com/users/EralpB/following{/other_user}", "gists_url": "https://api.github.com/users/EralpB/gists{/gist_id}", "starred_url": "https://api.github.com/users/EralpB/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EralpB/subscriptions", "organizations_url": "https://api.github.com/users/EralpB/orgs", "repos_url": "https://api.github.com/users/EralpB/repos", "events_url": "https://api.github.com/users/EralpB/events{/privacy}", "received_events_url": "https://api.github.com/users/EralpB/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-18T21:07:54Z", "updated_at": "2020-02-23T13:18:42Z", "closed_at": "2020-02-23T13:18:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I'm using the default autommit false mode and I've a lot of cursors opening and closing implicity with the \"with\" tag, I wonder if the following use is correct with no commits. Does closing a cursor, commit the transaction? I'm experiencing some db locks and not sure what's the root cause.\r\n\r\n```\r\npgsql = SimpleLazyObject(lambda: pg8000.connect(\r\n    user=SETTINGS['PGSQL']['USER'],\r\n    password=SETTINGS['PGSQL']['PASSWORD'],\r\n    host=SETTINGS['PGSQL']['HOST'],\r\n    port=SETTINGS['PGSQL']['PORT'],\r\n    database=SETTINGS['PGSQL']['DATABASE'],\r\n    ssl=SETTINGS['PGSQL']['SSL'],\r\n))\r\n\r\n\r\n        with pgsql.cursor() as cursor:\r\n            cursor.execute(\r\n                \"\"\"\r\n                SELECT first_name, picture, username\r\n                FROM accounts_user\r\n                WHERE id = %s\r\n                \"\"\",\r\n                (user_id,),\r\n            )\r\n            a,b,c = cursor.fetchone()\r\n        print('do other stuff')\r\n        # hundreds other with pgsql.cursor()..s\r\n```\r\n\r\nAll my SQLs are SELECT statements.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/15", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/15/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/15/events", "html_url": "https://github.com/tlocke/pg8000/issues/15", "id": 456664184, "node_id": "MDU6SXNzdWU0NTY2NjQxODQ=", "number": 15, "title": "Float values in numeric columns are rounded up", "user": {"login": "dsuch", "id": 553332, "node_id": "MDQ6VXNlcjU1MzMzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/553332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dsuch", "html_url": "https://github.com/dsuch", "followers_url": "https://api.github.com/users/dsuch/followers", "following_url": "https://api.github.com/users/dsuch/following{/other_user}", "gists_url": "https://api.github.com/users/dsuch/gists{/gist_id}", "starred_url": "https://api.github.com/users/dsuch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dsuch/subscriptions", "organizations_url": "https://api.github.com/users/dsuch/orgs", "repos_url": "https://api.github.com/users/dsuch/repos", "events_url": "https://api.github.com/users/dsuch/events{/privacy}", "received_events_url": "https://api.github.com/users/dsuch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-16T17:35:52Z", "updated_at": "2020-02-23T16:18:33Z", "closed_at": "2020-02-23T13:18:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI have found a case where floats sent to numeric columns get rounded up, which results in a loss of precision.\r\n\r\nI can reproduce it under both pg8000 1.12.5 and 1.13.1. I am using PostgreSQL 10.3-1 under Ubuntu 18.04 64-bit.\r\n\r\nPlease consider a table as below:\r\n\r\n```sql\r\ncreate table abc(\r\n  foo numeric(20, 7)\r\n);\r\n```\r\n\r\nNow, let's add a float to it directly:\r\n\r\n```python\r\nfrom pg8000 import connect\r\n\r\n# Connection details go here\r\nkwargs = {}\r\n\r\nconn = connect(**kwargs)\r\ncursor = conn.cursor()\r\n\r\ncursor.execute('insert into abc(foo) values(1560704964.331047)')\r\nconn.commit()\r\ncursor.execute('select foo from abc')\r\nprint('Result', cursor.fetchall())\r\nconn.close()\r\n```\r\n\r\nThis outputs:\r\n\r\n```\r\nResult ([Decimal('1560704964.3310470')],)\r\n```\r\n\r\nBut let's add the same float as a template parameter now:\r\n\r\n```python\r\nfrom pg8000 import connect\r\n\r\n# Connection details go here\r\nkwargs = {}\r\n\r\nconn = connect(**kwargs)\r\ncursor = conn.cursor()\r\n\r\ncursor.execute('insert into abc(foo) values(%s)', [1560704964.331047])\r\nconn.commit()\r\ncursor.execute('select foo from abc')\r\nprint('Result', cursor.fetchall())\r\nconn.close()\r\n```\r\n\r\nThe result is now:\r\n\r\n```\r\nResult ([Decimal('1560704964.3310500')],)\r\n```\r\n\r\nIn other words, 1560704964.3310470 was rounded up to 1560704964.3310500.\r\n\r\nMy interpretation of the fact that in the first case the value was not rounded up is that PostgreSQL itself is not doing it. Otherwise, it likely would have done it no matter in what way the value is being provided to it.\r\n\r\nI am now looking at pg8000's source code, in particular, its Struct.pack/unpack serialization methods to see if anything there can be related to it.\r\n\r\nUnfortunately, I cannot use Decimal objects instead of floats though another idea is perhaps to convert the floats to string objects right before passing them to pg8000, which works around the rounding behaviour, but I would just like to understand what is actually happening and any pointers are appreciated.\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/13", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/13/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/13/events", "html_url": "https://github.com/tlocke/pg8000/issues/13", "id": 438402182, "node_id": "MDU6SXNzdWU0Mzg0MDIxODI=", "number": 13, "title": "User of pg8000 here", "user": {"login": "jacobamarshall", "id": 34079215, "node_id": "MDQ6VXNlcjM0MDc5MjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/34079215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jacobamarshall", "html_url": "https://github.com/jacobamarshall", "followers_url": "https://api.github.com/users/jacobamarshall/followers", "following_url": "https://api.github.com/users/jacobamarshall/following{/other_user}", "gists_url": "https://api.github.com/users/jacobamarshall/gists{/gist_id}", "starred_url": "https://api.github.com/users/jacobamarshall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jacobamarshall/subscriptions", "organizations_url": "https://api.github.com/users/jacobamarshall/orgs", "repos_url": "https://api.github.com/users/jacobamarshall/repos", "events_url": "https://api.github.com/users/jacobamarshall/events{/privacy}", "received_events_url": "https://api.github.com/users/jacobamarshall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-29T16:30:34Z", "updated_at": "2020-07-25T11:35:29Z", "closed_at": "2020-07-25T11:21:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI've been using pg8000 and wanted to both thank the team and log my use cases.  Since pg8000 is pure python, it allows me to use it in AWS Lambda functions without any extra work.  Other C-based libraries require pre-compiling and other steps to work in that environment.  No issues so far on my end, thanks again for the great library.\r\n\r\nJacob", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/12", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/12/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/12/events", "html_url": "https://github.com/tlocke/pg8000/issues/12", "id": 436992330, "node_id": "MDU6SXNzdWU0MzY5OTIzMzA=", "number": 12, "title": "connect docs for ssl are invalid", "user": {"login": "swarajban", "id": 384283, "node_id": "MDQ6VXNlcjM4NDI4Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/384283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swarajban", "html_url": "https://github.com/swarajban", "followers_url": "https://api.github.com/users/swarajban/followers", "following_url": "https://api.github.com/users/swarajban/following{/other_user}", "gists_url": "https://api.github.com/users/swarajban/gists{/gist_id}", "starred_url": "https://api.github.com/users/swarajban/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swarajban/subscriptions", "organizations_url": "https://api.github.com/users/swarajban/orgs", "repos_url": "https://api.github.com/users/swarajban/repos", "events_url": "https://api.github.com/users/swarajban/events{/privacy}", "received_events_url": "https://api.github.com/users/swarajban/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-25T03:20:18Z", "updated_at": "2020-03-15T15:07:36Z", "closed_at": "2020-03-15T15:07:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Setting pg.connect's `ssl={}` doesn't use default SSL connection. If you specify, `ssl=True`, however, pg8000 connects successfully", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/11", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/11/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/11/events", "html_url": "https://github.com/tlocke/pg8000/issues/11", "id": 428252596, "node_id": "MDU6SXNzdWU0MjgyNTI1OTY=", "number": 11, "title": "Different query return type than tuples?", "user": {"login": "vamcs", "id": 18034802, "node_id": "MDQ6VXNlcjE4MDM0ODAy", "avatar_url": "https://avatars2.githubusercontent.com/u/18034802?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vamcs", "html_url": "https://github.com/vamcs", "followers_url": "https://api.github.com/users/vamcs/followers", "following_url": "https://api.github.com/users/vamcs/following{/other_user}", "gists_url": "https://api.github.com/users/vamcs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vamcs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vamcs/subscriptions", "organizations_url": "https://api.github.com/users/vamcs/orgs", "repos_url": "https://api.github.com/users/vamcs/repos", "events_url": "https://api.github.com/users/vamcs/events{/privacy}", "received_events_url": "https://api.github.com/users/vamcs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-02T14:12:51Z", "updated_at": "2019-06-15T12:46:03Z", "closed_at": "2019-06-15T12:46:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't want to use this as stack overflow, but I needed to ask you guys: \r\n\r\nDo you support any different query return types as they do in psycopg2? There I could just set the cursor factory to \"RealDictCursor\", for example, and I would receive a dictionary with the column names as keys and the query results as the values.\r\n\r\nIf not, do you have any suggestions in mapping the result to a dictionary?\r\n\r\nAnd lastly, is this related to the issue #10? \r\n\r\nWe've decided to use your library instead of psycopg2 exactly because it's python native. So that when deploying our serverless functions we don't have to use docker for building them.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/8", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/8/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/8/events", "html_url": "https://github.com/tlocke/pg8000/issues/8", "id": 407892985, "node_id": "MDU6SXNzdWU0MDc4OTI5ODU=", "number": 8, "title": "Allow arbitrary connection arguments", "user": {"login": "pfhayes", "id": 403100, "node_id": "MDQ6VXNlcjQwMzEwMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/403100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pfhayes", "html_url": "https://github.com/pfhayes", "followers_url": "https://api.github.com/users/pfhayes/followers", "following_url": "https://api.github.com/users/pfhayes/following{/other_user}", "gists_url": "https://api.github.com/users/pfhayes/gists{/gist_id}", "starred_url": "https://api.github.com/users/pfhayes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pfhayes/subscriptions", "organizations_url": "https://api.github.com/users/pfhayes/orgs", "repos_url": "https://api.github.com/users/pfhayes/repos", "events_url": "https://api.github.com/users/pfhayes/events{/privacy}", "received_events_url": "https://api.github.com/users/pfhayes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-07T20:54:53Z", "updated_at": "2020-03-15T13:36:14Z", "closed_at": "2020-03-15T13:36:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Postrges has a long list of potentially desirable connection arguments (for example, https://www.postgresql.org/docs/9/libpq-connect.html), but it doesn't appear to be possible to include those, only the ones that have been specifically implemented (like `application_name`)\r\n\r\nIt would be great if they could be passed in to the `Connection` class and forwarded on to the backend\r\n\r\nIt looks like this connection string would need to be extended with new arguments (https://github.com/tlocke/pg8000/blob/69430edd49a8fdc549eadf5070b855425451af9f/pg8000/core.py#L1418) - is that correct?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/7", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/7/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/7/events", "html_url": "https://github.com/tlocke/pg8000/issues/7", "id": 406228442, "node_id": "MDU6SXNzdWU0MDYyMjg0NDI=", "number": 7, "title": "Last release on Pypi broke Python2.7 deployments", "user": {"login": "piroux", "id": 438492, "node_id": "MDQ6VXNlcjQzODQ5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/438492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/piroux", "html_url": "https://github.com/piroux", "followers_url": "https://api.github.com/users/piroux/followers", "following_url": "https://api.github.com/users/piroux/following{/other_user}", "gists_url": "https://api.github.com/users/piroux/gists{/gist_id}", "starred_url": "https://api.github.com/users/piroux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/piroux/subscriptions", "organizations_url": "https://api.github.com/users/piroux/orgs", "repos_url": "https://api.github.com/users/piroux/repos", "events_url": "https://api.github.com/users/piroux/events{/privacy}", "received_events_url": "https://api.github.com/users/piroux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-04T08:43:10Z", "updated_at": "2019-02-06T14:18:45Z", "closed_at": "2019-02-06T14:18:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nFirst, I would like to thank you for maintaining this project and taking the time to migrate it toward Python3. :+1:\r\nAt work, we are in the process of migrating our stack to Python3, but we have got a significant part of the stack still on Python2.7. So like everybody forced to migrate to Python3 this year, the migration is ongoing, but it will take some time. :man_factory_worker:\r\nMoreover, it was a chance that this package was compatible with Python 2 and Python 3 at the same time previously. However the last release on Pypi `1.13.0` broke that nice cohabitation, hence this issue.\r\n\r\n## Results\r\n#### Expected result\r\n- :black_square_button: As of today and in a foreseeable future, a Python3 project, which would have your package as a dependency, would select the latest release available of `pg8000` on Pypi, which should be `1.13.0` or any future releases of your package.\r\nFor instance, installing your package through with `pip` for Python3.6 should yield the following packages list:\r\n```\r\n$ ./venv3/bin/pip install pg8000\r\n[...]\r\n$ ./venv3/bin/pip list\r\nPackage             Version\r\n------------------- -------\r\npasslib             1.7.1  \r\npg8000              1.13.0 \r\npip                 19.0.1 \r\nsetuptools          40.7.3 \r\nsix                 1.12.0 \r\nwheel               0.32.3 \r\n```\r\n- :black_square_button: As of today and in a foreseeable future, a Python2.7 project, which would have your package as a dependency, would select the last release available of `pg8000` on Pypi, compatible with Python2.7. As of today, it should be `1.12.4` on January 5th on Pypi, and given that you dropped the support for Python with your last release, we may assume that a Python2.7 setup should select a version of your package matching `>=1.12.4, <1.13`.\r\nFor instance, installing your package through with `pip` for Python2.7 should yield the following packages list:\r\n```\r\n$ ./venv2/bin/pip install pg8000\r\n[...]\r\n$ ./venv2/bin/pip list\r\nPackage             Version\r\n------------------- -------\r\npg8000              1.12.4 \r\npip                 19.0.1 \r\nsetuptools          40.7.3 \r\nsix                 1.12.0 \r\nwheel               0.32.3 \r\n```\r\n\r\n#### Actual result\r\n- :heavy_check_mark:  As of today, a Python3 project, which would have your package as a dependency, would select the latest release or any future available on Pypi. Today, it would be `1.13.0`. It works as expected.\r\n- :stop_sign: **As of today, a Python2.7 project, which would have your package as a dependency, would select the last release available on Pypi, `1.13.0`, which is not compatible with Python2.7.** Actually, the worse part is that it will install it correctly but it will only fail later, at import time.\r\n\r\n#### Context\r\nMy test workflow for Python 2.7 includes using the `testing.postgresql` package which is dependent on your `pg8000` package as a pure Python implementation PostgreSQL driver, but I did not know that until yesterday. Now I am well aware of it ;)\r\n\r\nThe `testing.postgresql` package is currently maintaining the compatibility for Python 2.7 and Python3 (it might change soon I assume) but it is not their role to select the version of `pg8000` in their `setup.py`. \r\nThe root cause of the problem is that you just released a new `pg8000` version on Pypi which is only compatible with Python3. Precisely you actually uploaded a wheel which is marked as only compatible with Python3, but it seems that you also uploaded the source archive for this release.\r\n\r\n#### Why is it an issue?\r\nAs you may know, Python2.7 will reach its EOL at the end of 2019 and the entire Python ecosystem is undergoing a migration effort to either migrate directly from Python2 to Python3 or to drop the Python2 support they had been forced to maintain for so many years, like your package. That is a good thing. In the meantime, during this transition year, it would be a good gesture from package maintainers to not break Python 2 projects deployments that do not rely on pining requirements for their deployments. Indeed, after setting up a virtualenv for Python2.7, and installing the package with `pip install <packagename>` only, **`pip` should always be able to select the latest release of the package, compatible with the target version of Python of the virtualenv.**\r\n\r\nAnd this is the root of the issue here because currently, the pip for Python2.7 will believe that your `1.13.0` release is a good fit.\r\n\r\nFor a more detailed explanation, I am only considering setups with recent `pip` and `setuptools`:\r\n\r\n- As of today, if someone is using your package for a Python3 project, and has already added `pg8000` in the `requirement.txt` or through the `test_requires`/`install_requires` `setuptools` option, it will work, because it will select your last released `wheel`, and everything will be installed, imported and run just fine.\r\n\r\n- But if someone is using your package for a Python2.7 project, and has already added `pg8000` in the `requirement.txt` or through the `test_requires`/`install_requires` `setuptools` option, it will break at import time because the `setup.py` of your last release is compatible with Python2.7, but the source code of the package is not, obviously:\r\n```\r\nenv/local/lib/python2.7/site-packages/testing/postgresql.py:17: in <module>\r\n    import pg8000\r\nenv/local/lib/python2.7/site-packages/pg8000/__init__.py:1: in <module>\r\n    from pg8000.core import (\r\nenv/local/lib/python2.7/site-packages/pg8000/core.py:23: in <module>\r\n    from datetime import timezone as Timezone\r\nE   ImportError: cannot import name timezone\r\n```\r\nThe reason is that, as of today, `pip` is going to select the source archive of your last release on Pypi which is marked as compatible with all Python versions. Note that specifying the Python version in the `classifiers` option, like you already did, is not sufficient to help `pip` decide which version to select from your Pypi repo.\r\n\r\n## Resolution\r\n\r\n### Resolution goal\r\nFor a Python2.7 project, in order for `pip` to be able to select the right release from Pypi, it needs to know that your `1.13.x` releases are not compatible and that it has to look at \"older\" releases, in a semantic versioning way.\r\nTo that end, specifying the Python versions you are supporting in a package, become almost mandatory to let users transition smoothly to Python3. That's what the `python_requires` option of `setuptools` is supposed to do in the `setup.cfg`/`setup.py` file.\r\nFinally, from now on, the upload of new releases should be done through a tool which can export those python requirements metadata. Indeed the command `python setup.py upload` is not handling the packaging metadata correctly. So that in order to upload to Pypi, `twine` should be used.\r\nBut it is not sufficient because following the semantic versioning, `pip` will continue to see the `1.13.0` as most recent and the previous steps do not prevent it to think otherwise. So this release should be deleted from your Pypi, otherwise, it will forever shadow all `1.12.x` releases for Python2.7.\r\n\r\nTo sum up, the resolution steps, which I offer you, would entail:\r\n- releasing a new `pg8000/1.12.5` for Python 2.7 and 3.5+\r\n- releasing a new `pg8000/1.13.1` for Python 3.5+ only\r\n- deleting the `pg8000/1.13.0` release from Pypi.\r\n\r\n**The goal of the resolutions steps is to make `pip` based on Python2.7 or Python3 select the right release automatically without actually selecting a particular version, only by leveraging setuptools/Pypi semantics.**\r\n\r\n### Resolution steps\r\n**STEP 1.** Release distribution of `1.12.5` for Python 2.7 and 3.5+\r\n- Create a git branch for the last Python2.7 compatible version of the package, checked out at the commit `5318879` matching your `1.12.4` tag and release (actually `7809779` would be better I think for a new Python2.7 release) even if you do not plan to maintain it.\r\n- In this 2.7 branch, according to the classifiers that I see, add:\r\n    - `python_requires='>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*',` in the `setup` function of the `setup.py` file,\r\n    - or  `python_requires = >=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*` in the `options` section of the `setup.cfg` file.\r\n- Commit the changes and tag it (for versionneer) with `1.12.5`\r\n- Create a source and universal wheel dist:\r\n`(venv2.7) $ python2.7 setup.py sdist bdist_wheel --universal`\r\n- Upload it to Pypi as a new release:\r\n`(venv2.7) $ twine upload dist/*`\r\n\r\n**STEP 2.**  Release distribution of `1.13.1` for Python 3.5+ only\r\n- Come back to your master branch (to include potential new changes since `1.13.0`) or to the `b3cbbf6` commit matching your `1.13.0` tag and release (actually this is more difficult  because it involves creating a new branch and then rebasing your master branch on top of this new branch and push-force on origin/master)\r\n- According to the classifiers that I see, add:\r\n    - `python_requires='>=3.5',` in the `setup` function of the `setup.py` file,\r\n    - or  `python_requires = >=3.5` in the `options` section of the `setup.cfg` file.\r\n- Commit the changes and tag it (for `versionneer`) with `1.13.1`\r\n- Create a source and wheel dist for python 3 only:\r\n`(venv3.5) $ python3.5 setup.py sdist bdist_wheel --python-tag py3`\r\n- Upload it to Pypi as a new release:\r\n`(venv3.5) $ twine upload dist/*`\r\n\r\n**STEP 3.** Deletion of the `1.13.0` release from Pypi.\r\n- Open https://pypi.org/manage/project/pg8000/releases/\r\n- Find the row of the `1.13.0` release\r\n- Manage, Detele, Confirm\r\n\r\n## Final words\r\nI know that was a long read, but I wanted to convince you why it would be a good idea to issue two new releases, one of which for a version of Python you rightly decided to stop supporting.\r\n\r\nAgain, thank you very much for maintaining this package, and I look forward to seeing it used in Python3 projects, including mine, as well.\r\n\r\n---\r\n\r\nFor reference:\r\n- https://www.python.org/dev/peps/pep-0345/#requires-python\r\n- https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires\r\n- Pytest is planning to use this `setuptools` feature to let Python2.7 users automatically install the most recent`pytest` Python2.7 compatible. You can see it already present in their [ `setup.cfg`](https://github.com/pytest-dev/pytest/blob/2264db7f4a9b5cf339a77882584ad55673adca24/setup.cfg#L46)\r\nhttps://docs.pytest.org/en/latest/py27-py34-deprecation.html\r\n   > We plan to drop support for Python 2.7 and 3.4 at the same time with the release of pytest 5.0, scheduled to be released by mid-2019. Thanks to the python_requires setuptools option, Python 2.7 and Python 3.4 users using a modern pip version will install the last compatible pytest 4.X version automatically even if 5.0 or later are available on PyPI.\r\n- https://stackoverflow.com/questions/40114100/uploading-different-versions-python-2-7-vs-3-5-to-pypi\r\n- https://stackoverflow.com/questions/19534896/enforcing-python-version-in-setup-py/48777286#48777286\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/5", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/5/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/5/events", "html_url": "https://github.com/tlocke/pg8000/issues/5", "id": 405795717, "node_id": "MDU6SXNzdWU0MDU3OTU3MTc=", "number": 5, "title": "Move all tests to use pytest", "user": {"login": "tlocke", "id": 221960, "node_id": "MDQ6VXNlcjIyMTk2MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/221960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlocke", "html_url": "https://github.com/tlocke", "followers_url": "https://api.github.com/users/tlocke/followers", "following_url": "https://api.github.com/users/tlocke/following{/other_user}", "gists_url": "https://api.github.com/users/tlocke/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlocke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlocke/subscriptions", "organizations_url": "https://api.github.com/users/tlocke/orgs", "repos_url": "https://api.github.com/users/tlocke/repos", "events_url": "https://api.github.com/users/tlocke/events{/privacy}", "received_events_url": "https://api.github.com/users/tlocke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-01T17:19:09Z", "updated_at": "2019-03-17T13:27:46Z", "closed_at": "2019-03-17T13:27:46Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/4", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/4/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/4/events", "html_url": "https://github.com/tlocke/pg8000/issues/4", "id": 405795114, "node_id": "MDU6SXNzdWU0MDU3OTUxMTQ=", "number": 4, "title": "Support for scram-sha-256 authentication", "user": {"login": "tlocke", "id": 221960, "node_id": "MDQ6VXNlcjIyMTk2MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/221960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlocke", "html_url": "https://github.com/tlocke", "followers_url": "https://api.github.com/users/tlocke/followers", "following_url": "https://api.github.com/users/tlocke/following{/other_user}", "gists_url": "https://api.github.com/users/tlocke/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlocke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlocke/subscriptions", "organizations_url": "https://api.github.com/users/tlocke/orgs", "repos_url": "https://api.github.com/users/tlocke/repos", "events_url": "https://api.github.com/users/tlocke/events{/privacy}", "received_events_url": "https://api.github.com/users/tlocke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-01T17:17:33Z", "updated_at": "2019-02-01T17:19:47Z", "closed_at": "2019-02-01T17:17:45Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Added.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/3", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/3/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/3/events", "html_url": "https://github.com/tlocke/pg8000/issues/3", "id": 399933956, "node_id": "MDU6SXNzdWUzOTk5MzM5NTY=", "number": 3, "title": "Support for Postgresql Refcursors", "user": {"login": "pzdump", "id": 41569700, "node_id": "MDQ6VXNlcjQxNTY5NzAw", "avatar_url": "https://avatars0.githubusercontent.com/u/41569700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pzdump", "html_url": "https://github.com/pzdump", "followers_url": "https://api.github.com/users/pzdump/followers", "following_url": "https://api.github.com/users/pzdump/following{/other_user}", "gists_url": "https://api.github.com/users/pzdump/gists{/gist_id}", "starred_url": "https://api.github.com/users/pzdump/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pzdump/subscriptions", "organizations_url": "https://api.github.com/users/pzdump/orgs", "repos_url": "https://api.github.com/users/pzdump/repos", "events_url": "https://api.github.com/users/pzdump/events{/privacy}", "received_events_url": "https://api.github.com/users/pzdump/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-01-16T18:14:28Z", "updated_at": "2019-03-13T08:24:11Z", "closed_at": "2019-03-13T08:24:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nIs it possible with pg8000 to use postgresql refcursors?\r\n\r\nI have multiple functions returning refcursors, pg8000 just returns the cursor name using cursor.fetchall() in this case it's 'clientcur'\r\n\r\nIn squirrelSQL (using jdbc under the hood) for example to fetch the date from a refcursor one would do a \"fetch all from clientcur\" after the psql function call.\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tlocke/pg8000/issues/2", "repository_url": "https://api.github.com/repos/tlocke/pg8000", "labels_url": "https://api.github.com/repos/tlocke/pg8000/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/tlocke/pg8000/issues/2/comments", "events_url": "https://api.github.com/repos/tlocke/pg8000/issues/2/events", "html_url": "https://github.com/tlocke/pg8000/issues/2", "id": 396245226, "node_id": "MDU6SXNzdWUzOTYyNDUyMjY=", "number": 2, "title": "https://pythonhosted.org/pg8000/ needs update", "user": {"login": "yan12125", "id": 1937689, "node_id": "MDQ6VXNlcjE5Mzc2ODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1937689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yan12125", "html_url": "https://github.com/yan12125", "followers_url": "https://api.github.com/users/yan12125/followers", "following_url": "https://api.github.com/users/yan12125/following{/other_user}", "gists_url": "https://api.github.com/users/yan12125/gists{/gist_id}", "starred_url": "https://api.github.com/users/yan12125/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yan12125/subscriptions", "organizations_url": "https://api.github.com/users/yan12125/orgs", "repos_url": "https://api.github.com/users/yan12125/repos", "events_url": "https://api.github.com/users/yan12125/events{/privacy}", "received_events_url": "https://api.github.com/users/yan12125/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-06T10:12:55Z", "updated_at": "2019-01-06T13:58:29Z", "closed_at": "2019-01-06T13:58:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, great to see a new release and a new repo. Just a question: https://pythonhosted.org/pg8000/ still points to http://github.com/mfenniak/pg8000/. Could you update it?", "performed_via_github_app": null, "score": 1.0}]}