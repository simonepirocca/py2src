{"total_count": 1269, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/google/flatbuffers/issues/6080", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/6080/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/6080/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/6080/events", "html_url": "https://github.com/google/flatbuffers/issues/6080", "id": 683141800, "node_id": "MDU6SXNzdWU2ODMxNDE4MDA=", "number": 6080, "title": "[question] Is there a Text format (equivalent of protobuff text format) other than JSON?", "user": {"login": "EmmanuelOga", "id": 13634, "node_id": "MDQ6VXNlcjEzNjM0", "avatar_url": "https://avatars2.githubusercontent.com/u/13634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EmmanuelOga", "html_url": "https://github.com/EmmanuelOga", "followers_url": "https://api.github.com/users/EmmanuelOga/followers", "following_url": "https://api.github.com/users/EmmanuelOga/following{/other_user}", "gists_url": "https://api.github.com/users/EmmanuelOga/gists{/gist_id}", "starred_url": "https://api.github.com/users/EmmanuelOga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EmmanuelOga/subscriptions", "organizations_url": "https://api.github.com/users/EmmanuelOga/orgs", "repos_url": "https://api.github.com/users/EmmanuelOga/repos", "events_url": "https://api.github.com/users/EmmanuelOga/events{/privacy}", "received_events_url": "https://api.github.com/users/EmmanuelOga/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-20T22:50:51Z", "updated_at": "2020-08-21T03:33:05Z", "closed_at": "2020-08-21T03:33:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nI'm pretty sure flatbuffers doesn't have a text format like protobuf's one:\r\n\r\nhttps://stackoverflow.com/questions/18873924/what-does-the-protobuf-text-format-look-like/18877167\r\n\r\nIf I get it right, the equivalent in flatbuffers would be to use JSON, but I wanted to ask here to double check. I think I read somewhere at some point that some data could be specified somehow using the same grammar as the .fbs schema, cannot find it now... perhaps I imagined it? :-p \r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/6078", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/6078/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/6078/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/6078/events", "html_url": "https://github.com/google/flatbuffers/issues/6078", "id": 682192390, "node_id": "MDU6SXNzdWU2ODIxOTIzOTA=", "number": 6078, "title": "error: unknown commandline argument: --gen-json-serializer", "user": {"login": "mikeminneman", "id": 2327338, "node_id": "MDQ6VXNlcjIzMjczMzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/2327338?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeminneman", "html_url": "https://github.com/mikeminneman", "followers_url": "https://api.github.com/users/mikeminneman/followers", "following_url": "https://api.github.com/users/mikeminneman/following{/other_user}", "gists_url": "https://api.github.com/users/mikeminneman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeminneman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeminneman/subscriptions", "organizations_url": "https://api.github.com/users/mikeminneman/orgs", "repos_url": "https://api.github.com/users/mikeminneman/repos", "events_url": "https://api.github.com/users/mikeminneman/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeminneman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-19T21:26:21Z", "updated_at": "2020-08-20T18:08:20Z", "closed_at": "2020-08-20T18:08:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Built on OSX using make. master branch.\r\n\r\nPer https://google.github.io/flatbuffers/flatbuffers_guide_use_c-sharp.html I should be able to use --gen-json-serializer to generate code with a json serializer however attempting to run this doesn't work.\r\n\r\n$ ~/flatbuffers/flatbuffers/flatc --csharp --gen-object-api --gen-json-serializer -o ../output -I . *.fbs\r\n\r\nresults in \r\n\r\nerror: unknown commandline argument: --gen-json-serializer\r\n\r\n**Is the functionality not built in yet? Or pending a future release? Would really like to be able to use this functionality.**", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/6074", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/6074/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/6074/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/6074/events", "html_url": "https://github.com/google/flatbuffers/issues/6074", "id": 681074131, "node_id": "MDU6SXNzdWU2ODEwNzQxMzE=", "number": 6074, "title": "installed FlatbuffersConfigVersion.cmake does not contain version", "user": {"login": "ChristianTackeGSI", "id": 58549698, "node_id": "MDQ6VXNlcjU4NTQ5Njk4", "avatar_url": "https://avatars1.githubusercontent.com/u/58549698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChristianTackeGSI", "html_url": "https://github.com/ChristianTackeGSI", "followers_url": "https://api.github.com/users/ChristianTackeGSI/followers", "following_url": "https://api.github.com/users/ChristianTackeGSI/following{/other_user}", "gists_url": "https://api.github.com/users/ChristianTackeGSI/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChristianTackeGSI/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChristianTackeGSI/subscriptions", "organizations_url": "https://api.github.com/users/ChristianTackeGSI/orgs", "repos_url": "https://api.github.com/users/ChristianTackeGSI/repos", "events_url": "https://api.github.com/users/ChristianTackeGSI/events{/privacy}", "received_events_url": "https://api.github.com/users/ChristianTackeGSI/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-18T14:09:55Z", "updated_at": "2020-08-18T17:30:30Z", "closed_at": "2020-08-18T17:30:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version: 1.12.0\r\nDistribution: `tar.gz`\r\nBuildsystem: spack\r\n\r\nWhen building from the distributed [.tar.gz](https://github.com/google/flatbuffers/archive/v1.12.0.tar.gz), then the installed `lib/cmake/flatbuffers/FlatbuffersConfigVersion.cmake` does look like this:\r\n\r\n```cmake\r\nset(PACKAGE_VERSION \"..\")\r\n\u2026\r\n```\r\n\r\nThe reason for this seems to be, that `CMake/Version.cmake` uses `git describe` to detect the version number. This does not work when building from the tar release. As other parts of the code know the version number, cmake should be changed to use those other parts.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/6069", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/6069/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/6069/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/6069/events", "html_url": "https://github.com/google/flatbuffers/issues/6069", "id": 676131867, "node_id": "MDU6SXNzdWU2NzYxMzE4Njc=", "number": 6069, "title": "Java/ Reading from a buffer that has leading zeros", "user": {"login": "constantOut", "id": 30386571, "node_id": "MDQ6VXNlcjMwMzg2NTcx", "avatar_url": "https://avatars3.githubusercontent.com/u/30386571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/constantOut", "html_url": "https://github.com/constantOut", "followers_url": "https://api.github.com/users/constantOut/followers", "following_url": "https://api.github.com/users/constantOut/following{/other_user}", "gists_url": "https://api.github.com/users/constantOut/gists{/gist_id}", "starred_url": "https://api.github.com/users/constantOut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/constantOut/subscriptions", "organizations_url": "https://api.github.com/users/constantOut/orgs", "repos_url": "https://api.github.com/users/constantOut/repos", "events_url": "https://api.github.com/users/constantOut/events{/privacy}", "received_events_url": "https://api.github.com/users/constantOut/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-10T13:21:16Z", "updated_at": "2020-08-10T15:15:14Z", "closed_at": "2020-08-10T15:15:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version 1.12\r\nI'm serializing data to a buffer, and can read from it only if position is set to particular value.\r\nSkipping trailing zeros doesn't work for some reason because there are two bytes before that position, bytes set to 6 and 0.\r\nIs root always signified by 6 and 0 bytes ? \r\nDoesn't look like that, because when I call .compact.position(0) those bytes with 6 and 0 go away. \r\nWhat is a mark of the start of the buffer ?\r\nAnd why there can be trash before it ?\r\nByteBuffers are not reused.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/6068", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/6068/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/6068/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/6068/events", "html_url": "https://github.com/google/flatbuffers/issues/6068", "id": 675479609, "node_id": "MDU6SXNzdWU2NzU0Nzk2MDk=", "number": 6068, "title": "Check for absence of required fields", "user": {"login": "staraphd", "id": 69381386, "node_id": "MDQ6VXNlcjY5MzgxMzg2", "avatar_url": "https://avatars0.githubusercontent.com/u/69381386?v=4", "gravatar_id": "", "url": "https://api.github.com/users/staraphd", "html_url": "https://github.com/staraphd", "followers_url": "https://api.github.com/users/staraphd/followers", "following_url": "https://api.github.com/users/staraphd/following{/other_user}", "gists_url": "https://api.github.com/users/staraphd/gists{/gist_id}", "starred_url": "https://api.github.com/users/staraphd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/staraphd/subscriptions", "organizations_url": "https://api.github.com/users/staraphd/orgs", "repos_url": "https://api.github.com/users/staraphd/repos", "events_url": "https://api.github.com/users/staraphd/events{/privacy}", "received_events_url": "https://api.github.com/users/staraphd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-08T07:24:55Z", "updated_at": "2020-08-08T13:46:33Z", "closed_at": "2020-08-08T13:38:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Nevermind.\r\nIt gives error for missing required field but one at a time. \r\nWhat I was looking for was give all the missing required fields at one go.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/6067", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/6067/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/6067/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/6067/events", "html_url": "https://github.com/google/flatbuffers/issues/6067", "id": 674953920, "node_id": "MDU6SXNzdWU2NzQ5NTM5MjA=", "number": 6067, "title": "I don't get a compilation error if the schema is wrong", "user": {"login": "kvitkaalexandr", "id": 8698955, "node_id": "MDQ6VXNlcjg2OTg5NTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/8698955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvitkaalexandr", "html_url": "https://github.com/kvitkaalexandr", "followers_url": "https://api.github.com/users/kvitkaalexandr/followers", "following_url": "https://api.github.com/users/kvitkaalexandr/following{/other_user}", "gists_url": "https://api.github.com/users/kvitkaalexandr/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvitkaalexandr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvitkaalexandr/subscriptions", "organizations_url": "https://api.github.com/users/kvitkaalexandr/orgs", "repos_url": "https://api.github.com/users/kvitkaalexandr/repos", "events_url": "https://api.github.com/users/kvitkaalexandr/events{/privacy}", "received_events_url": "https://api.github.com/users/kvitkaalexandr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-07T11:30:39Z", "updated_at": "2020-08-07T19:36:50Z", "closed_at": "2020-08-07T19:36:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using the latest FlatBuffer compiler (1.12.0) for windows.\r\nWhen I compile such a schema (StorageElement is defined below usage) with compiler flags `--gen-onefile --gen-mutable --csharp`  I don't get compilation error\r\n```\r\nstruct PlayerStorage {\r\n    state_id:int64;\r\n    elements:[StorageElement:10];\r\n}\r\n\r\nstruct StorageElement {\r\n    key:[ushort:4];\r\n    value:[ushort:32];\r\n}\r\n\r\nstruct PlayerCounters{\r\n  nickname_change_counter:int32;\r\n}\r\n\r\nstruct Player {\r\n  player_storage:PlayerStorage;\r\n  counters:PlayerCounters;\r\n}\r\n\r\ntable PlayerHolder {\r\n  player:Player;\r\n}\r\n\r\nroot_type PlayerHolder;\r\n```\r\n\r\nIn result PlayerCounters starts at __p.bb_pos + 48\r\n```\r\npublic PlayerStorage PlayerStorage { get { return (new PlayerStorage()).__assign(__p.bb_pos + 0, __p.bb); } }\r\npublic PlayerCounters Counters { get { return (new PlayerCounters()).__assign(__p.bb_pos + 48, __p.bb); } }\r\n```\r\nBut the actual size of the StorageElement is 72, and the PlayerStorage contains 10 elements, that's 720 + 8 (int64) = 728.\r\nThe correct code should be like this __p.bb_pos + 728\r\n\r\nIf I swap the StorageElement and PlayerStorage, the code is generated correctly. \r\nCorrectly schema:\r\n```\r\nstruct StorageElement {\r\n    key:[ushort:4];\r\n    value:[ushort:32];\r\n}\r\n\r\nstruct PlayerStorage {\r\n    state_id:int64;\r\n    elements:[StorageElement:10];\r\n}\r\n\r\nstruct PlayerCounters{\r\n  nickname_change_counter:int32;\r\n}\r\n\r\nstruct Player {\r\n  player_storage:PlayerStorage;\r\n  counters:PlayerCounters;\r\n}\r\n\r\ntable PlayerHolder {\r\n  player:Player;\r\n}\r\n\r\nroot_type PlayerHolder;\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/6061", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/6061/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/6061/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/6061/events", "html_url": "https://github.com/google/flatbuffers/issues/6061", "id": 672709836, "node_id": "MDU6SXNzdWU2NzI3MDk4MzY=", "number": 6061, "title": "Other then cache what are the on chip memory? And how explicitly can be addressable?", "user": {"login": "Arrow-Dive", "id": 63725208, "node_id": "MDQ6VXNlcjYzNzI1MjA4", "avatar_url": "https://avatars2.githubusercontent.com/u/63725208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arrow-Dive", "html_url": "https://github.com/Arrow-Dive", "followers_url": "https://api.github.com/users/Arrow-Dive/followers", "following_url": "https://api.github.com/users/Arrow-Dive/following{/other_user}", "gists_url": "https://api.github.com/users/Arrow-Dive/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arrow-Dive/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arrow-Dive/subscriptions", "organizations_url": "https://api.github.com/users/Arrow-Dive/orgs", "repos_url": "https://api.github.com/users/Arrow-Dive/repos", "events_url": "https://api.github.com/users/Arrow-Dive/events{/privacy}", "received_events_url": "https://api.github.com/users/Arrow-Dive/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-04T11:12:00Z", "updated_at": "2020-08-05T20:34:51Z", "closed_at": "2020-08-05T20:34:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thank you for submitting an issue!\r\n\r\nPlease make sure you include the names of the affected language(s), compiler version(s), operating system version(s), and FlatBuffers version(s) in your issue title.\r\n\r\nThis helps us get the correct maintainers to look at your issue. Here are examples of good titles:\r\n\r\n- Crash when accessing FlatBuffer [C++, gcc 4.8, OS X, master]\r\n- Flatc converts a protobuf 'bytes' field to 'string' in fbs schema file [all languages, FlatBuffers 1.4]\r\n\r\nInclude other details as appropriate.\r\n\r\nThanks!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/6060", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/6060/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/6060/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/6060/events", "html_url": "https://github.com/google/flatbuffers/issues/6060", "id": 672372083, "node_id": "MDU6SXNzdWU2NzIzNzIwODM=", "number": 6060, "title": "Directly accessing FlatbufferVector instead of Iterating over it [C++, VS, Windows x64, FlatBuffers 1.12]", "user": {"login": "shreks7", "id": 2093031, "node_id": "MDQ6VXNlcjIwOTMwMzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/2093031?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shreks7", "html_url": "https://github.com/shreks7", "followers_url": "https://api.github.com/users/shreks7/followers", "following_url": "https://api.github.com/users/shreks7/following{/other_user}", "gists_url": "https://api.github.com/users/shreks7/gists{/gist_id}", "starred_url": "https://api.github.com/users/shreks7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shreks7/subscriptions", "organizations_url": "https://api.github.com/users/shreks7/orgs", "repos_url": "https://api.github.com/users/shreks7/repos", "events_url": "https://api.github.com/users/shreks7/events{/privacy}", "received_events_url": "https://api.github.com/users/shreks7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-03T22:09:04Z", "updated_at": "2020-08-04T17:10:24Z", "closed_at": "2020-08-04T15:44:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have a schema that looks like this - \r\n``` \r\nstruct Vec3Float{\r\n    x:float;\r\n    y:float;\r\n    z:float;\r\n}\r\n\r\ntable Particles {\r\n     particle_count:uint;\r\n     spwan_time:ulong;\r\n     particle_position:[Vec3Float];\r\n}\r\n``` \r\nWhere `Particles` consist of a bunch of positions where the particles have to be spawned at a given time. I use `CreateVectorOfStructs`  and then add it to the buffer. I am able to read it using -  \r\n\r\n`\r\n auto particlesAt0 = particles->particle_position()->Get(0); // essestially iterating this from 0, particle_count\r\n float x = particlesAt0->x(); float y = particlesAt0->y();float z = particlesAt0->z();\r\n`\r\n\r\nHowever, this is really slow for realtime use (particle update rate is high) and I wanted to know if there is a way to access the entire `particle_position` in one go. Since structs are stored sequentially is there any way to convert it to std::vector<float> or something similar. It will be great if there is a way to access the whole vector directly. \r\n\r\nThe other approach I was thinking to use is to store it like `[ubyte]` or `[float]`. But still how would I get a std::vector out of it?\r\nThe end goal is to pipe this to a custom simulator that is expecting - `[x,y,z,x,y,z,x,y,z,x,y,z...]`\r\n\r\nHope this makes sense.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/6058", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/6058/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/6058/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/6058/events", "html_url": "https://github.com/google/flatbuffers/issues/6058", "id": 672256653, "node_id": "MDU6SXNzdWU2NzIyNTY2NTM=", "number": 6058, "title": "[Swift] Reference in Object API to underlying type", "user": {"login": "jackflips", "id": 315022, "node_id": "MDQ6VXNlcjMxNTAyMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/315022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackflips", "html_url": "https://github.com/jackflips", "followers_url": "https://api.github.com/users/jackflips/followers", "following_url": "https://api.github.com/users/jackflips/following{/other_user}", "gists_url": "https://api.github.com/users/jackflips/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackflips/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackflips/subscriptions", "organizations_url": "https://api.github.com/users/jackflips/orgs", "repos_url": "https://api.github.com/users/jackflips/repos", "events_url": "https://api.github.com/users/jackflips/events{/privacy}", "received_events_url": "https://api.github.com/users/jackflips/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-08-03T18:16:42Z", "updated_at": "2020-08-04T05:08:09Z", "closed_at": "2020-08-04T05:08:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible to have a reference to the underlying FlatBufferObject type in its generated convenience class?\r\n\r\nFor example, if I have a Request type, and I pass in --gen-object-api to the FlatBuffer schema compiler, I get a RequestT class. I think it would be really nice to have a reference to the Request type in the RequestT class, so that I could write an extension on RequestT that would let users call serialize() and have it spit out FlatBuffer Data, without having to worry about how FlatBuffers work at all.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/6055", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/6055/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/6055/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/6055/events", "html_url": "https://github.com/google/flatbuffers/issues/6055", "id": 670117701, "node_id": "MDU6SXNzdWU2NzAxMTc3MDE=", "number": 6055, "title": "[Swift] Generated Swift code won't compile", "user": {"login": "jackflips", "id": 315022, "node_id": "MDQ6VXNlcjMxNTAyMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/315022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackflips", "html_url": "https://github.com/jackflips", "followers_url": "https://api.github.com/users/jackflips/followers", "following_url": "https://api.github.com/users/jackflips/following{/other_user}", "gists_url": "https://api.github.com/users/jackflips/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackflips/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackflips/subscriptions", "organizations_url": "https://api.github.com/users/jackflips/orgs", "repos_url": "https://api.github.com/users/jackflips/repos", "events_url": "https://api.github.com/users/jackflips/events{/privacy}", "received_events_url": "https://api.github.com/users/jackflips/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-31T19:00:06Z", "updated_at": "2020-08-01T12:47:23Z", "closed_at": "2020-07-31T19:37:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm attempting to use FlatBuffers in Swift for the first time. I generated a code for a schema using FlatBuffers v1.12 that looks like this:\r\n\r\n```\r\nnamespace transfer;\r\n\r\ntable Request {\r\n  requestId: uint32;\r\n  endpoint: uint32;\r\n  data:[ubyte];\r\n}\r\n```\r\n\r\nHowever, when I attempt to compile the generated code, I'm getting compiler errors. They're all of the same nature. Here's an example:\r\n\r\n`public static func startRequest(_ fbb: FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }`\r\n\r\ngives me the errror: cannot use mutating member on immutable value: 'fbb' is a 'let' constant. Am I doing something wrong?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/6044", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/6044/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/6044/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/6044/events", "html_url": "https://github.com/google/flatbuffers/issues/6044", "id": 664206189, "node_id": "MDU6SXNzdWU2NjQyMDYxODk=", "number": 6044, "title": "Does python have a function like \"int size = builder.GetSize()\" in C++?", "user": {"login": "gyd2019", "id": 52058819, "node_id": "MDQ6VXNlcjUyMDU4ODE5", "avatar_url": "https://avatars0.githubusercontent.com/u/52058819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gyd2019", "html_url": "https://github.com/gyd2019", "followers_url": "https://api.github.com/users/gyd2019/followers", "following_url": "https://api.github.com/users/gyd2019/following{/other_user}", "gists_url": "https://api.github.com/users/gyd2019/gists{/gist_id}", "starred_url": "https://api.github.com/users/gyd2019/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gyd2019/subscriptions", "organizations_url": "https://api.github.com/users/gyd2019/orgs", "repos_url": "https://api.github.com/users/gyd2019/repos", "events_url": "https://api.github.com/users/gyd2019/events{/privacy}", "received_events_url": "https://api.github.com/users/gyd2019/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-23T05:08:42Z", "updated_at": "2020-08-03T19:10:45Z", "closed_at": "2020-08-03T19:10:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to do this thing with flatbuffers, python serializes to buffers and C++ deserializes to this buffers. Do you have a demo like this? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/6041", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/6041/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/6041/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/6041/events", "html_url": "https://github.com/google/flatbuffers/issues/6041", "id": 662803825, "node_id": "MDU6SXNzdWU2NjI4MDM4MjU=", "number": 6041, "title": "swift mutate api ?", "user": {"login": "SimpleApp", "id": 225398, "node_id": "MDQ6VXNlcjIyNTM5OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/225398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimpleApp", "html_url": "https://github.com/SimpleApp", "followers_url": "https://api.github.com/users/SimpleApp/followers", "following_url": "https://api.github.com/users/SimpleApp/following{/other_user}", "gists_url": "https://api.github.com/users/SimpleApp/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimpleApp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimpleApp/subscriptions", "organizations_url": "https://api.github.com/users/SimpleApp/orgs", "repos_url": "https://api.github.com/users/SimpleApp/repos", "events_url": "https://api.github.com/users/SimpleApp/events{/privacy}", "received_events_url": "https://api.github.com/users/SimpleApp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-21T09:34:23Z", "updated_at": "2020-07-22T08:00:00Z", "closed_at": "2020-07-22T08:00:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\nI read what i think is the official documentation here https://google.github.io/flatbuffers/flatbuffers_guide_tutorial.html and it seems that the mutation functions aren't generated by the flatc compiler for swift. Did i miss something ?\r\n\r\nNote : I used the flatc implementation by compiling it myself from source, because the homebrew version lacks the \"inout\" patch recently submitted (it may be a good idea to push an update, since the swift package from SPM have the struct version and so requires the inout to compile).\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/6036", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/6036/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/6036/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/6036/events", "html_url": "https://github.com/google/flatbuffers/issues/6036", "id": 661770406, "node_id": "MDU6SXNzdWU2NjE3NzA0MDY=", "number": 6036, "title": "IAR ARM C++ Compiler V8.42.1.236 error from TableKeyComparator::operator= because vector_downward::operator= is deleted", "user": {"login": "jdess", "id": 4703565, "node_id": "MDQ6VXNlcjQ3MDM1NjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4703565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdess", "html_url": "https://github.com/jdess", "followers_url": "https://api.github.com/users/jdess/followers", "following_url": "https://api.github.com/users/jdess/following{/other_user}", "gists_url": "https://api.github.com/users/jdess/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdess/subscriptions", "organizations_url": "https://api.github.com/users/jdess/orgs", "repos_url": "https://api.github.com/users/jdess/repos", "events_url": "https://api.github.com/users/jdess/events{/privacy}", "received_events_url": "https://api.github.com/users/jdess/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-20T12:34:47Z", "updated_at": "2020-07-24T19:11:10Z", "closed_at": "2020-07-24T19:11:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nthis has been observed with an older version of flatbuffers but is still valid in the version of `flatbuffers.h` from the (currently most recent) git commit #14baf45c90a076d405e75cfc41874ffff862fb72.\r\n\r\nWhen trying to compile a file which includes `flatbuffers.h` with the IAR C++ compiler from the Embedded Workbench (version 8.42.1.236) on Windows, I get the following error during the compilation:\r\n```\r\nbuf_ = other.buf_;\r\n     ^\r\nflatbuffers\\include\\flatbuffers\\flatbuffers.h(1875,12): error [Pe1776]: function \"flatbuffers::vector_downward::operator=(flatbuffers::vector_downward const &)\" (declared at line 1002) cannot be referenced -- it is a deleted function\r\n```\r\nChecking `flatbuffers::vector_downward::operator=(flatbuffers::vector_downward const &)` confirms that this is a deleted function (from `flatbuffers\\include\\flatbuffers\\flatbuffers.h`):\r\n```\r\n private:\r\n  // You shouldn't really be copying instances of this class.\r\n  FLATBUFFERS_DELETE_FUNC(vector_downward(const vector_downward &))\r\n  FLATBUFFERS_DELETE_FUNC(vector_downward &operator=(const vector_downward &))\r\n```\r\nA simple fix seems to use the same pattern and which also deletes the assignment operator from `TableKeyComparator`. Since the assignment operator is already private, this seems to be a fairly trivial and low-risk fix:\r\n```\r\n   private:\r\n// >>> begin modification\r\n//     `vector_downward::operator=` has been deleted, `buf_ = other.buf_;` below does not compile.\r\n//     Also delete the assignment operator for this class as a work around:\r\n#if 1\r\n    FLATBUFFERS_DELETE_FUNC(TableKeyComparator &operator=(const TableKeyComparator &other));\r\n#else\r\n    // This was the original code:\r\n    TableKeyComparator &operator=(const TableKeyComparator &other) {\r\n      buf_ = other.buf_;\r\n      return *this;\r\n    }\r\n#endif\r\n// <<< end modification\r\n  };\r\n  /// @endcond\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/6031", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/6031/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/6031/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/6031/events", "html_url": "https://github.com/google/flatbuffers/issues/6031", "id": 659191577, "node_id": "MDU6SXNzdWU2NTkxOTE1Nzc=", "number": 6031, "title": "[Feature] Adding Optional Strings functions", "user": {"login": "mustiikhalil", "id": 26250654, "node_id": "MDQ6VXNlcjI2MjUwNjU0", "avatar_url": "https://avatars3.githubusercontent.com/u/26250654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mustiikhalil", "html_url": "https://github.com/mustiikhalil", "followers_url": "https://api.github.com/users/mustiikhalil/followers", "following_url": "https://api.github.com/users/mustiikhalil/following{/other_user}", "gists_url": "https://api.github.com/users/mustiikhalil/gists{/gist_id}", "starred_url": "https://api.github.com/users/mustiikhalil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mustiikhalil/subscriptions", "organizations_url": "https://api.github.com/users/mustiikhalil/orgs", "repos_url": "https://api.github.com/users/mustiikhalil/repos", "events_url": "https://api.github.com/users/mustiikhalil/events{/privacy}", "received_events_url": "https://api.github.com/users/mustiikhalil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-17T11:48:38Z", "updated_at": "2020-07-27T16:57:51Z", "closed_at": "2020-07-27T16:57:51Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "There are a couple of languages that provide optional strings or nullable strings. such as Swift, JS, CSharp. The following is a proposal to add a helper function to the builders where it function would take an optional/nullable string and would return the offset. This would make the code that developers would write cleaner.\r\n\r\ncurrent implementation:\r\n\r\n```\r\nvar optionalString = \"Some string\"\r\nif optionalString != null:\r\n   builder.addString(optionalString)\r\n```\r\n\r\nThe proposed function would look like this:\r\n\r\n```\r\nbuilder.addOptionalString(optionalString)\r\n\r\n/// where the helper function would check for a valid string\r\nfunction addOptionalString:\r\n  if optionalString != null:\r\n     return builder.addString(optionalString)\r\n  return 0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/6018", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/6018/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/6018/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/6018/events", "html_url": "https://github.com/google/flatbuffers/issues/6018", "id": 649506071, "node_id": "MDU6SXNzdWU2NDk1MDYwNzE=", "number": 6018, "title": "[TypeScript] Generated TS export import is incorrect when using named union member.", "user": {"login": "hirokiht", "id": 4374416, "node_id": "MDQ6VXNlcjQzNzQ0MTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4374416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hirokiht", "html_url": "https://github.com/hirokiht", "followers_url": "https://api.github.com/users/hirokiht/followers", "following_url": "https://api.github.com/users/hirokiht/following{/other_user}", "gists_url": "https://api.github.com/users/hirokiht/gists{/gist_id}", "starred_url": "https://api.github.com/users/hirokiht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hirokiht/subscriptions", "organizations_url": "https://api.github.com/users/hirokiht/orgs", "repos_url": "https://api.github.com/users/hirokiht/repos", "events_url": "https://api.github.com/users/hirokiht/events{/privacy}", "received_events_url": "https://api.github.com/users/hirokiht/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-02T01:37:35Z", "updated_at": "2020-07-06T15:40:56Z", "closed_at": "2020-07-06T15:40:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/google/flatbuffers/blob/37a5dee10525cc58908aff99b0aa073bf91b9ba6/src/idl_gen_js_ts.cpp#L156\r\nfor example:\r\nbase.fbs file:\r\nnamespace abc;\r\ntable Element {\r\n}\r\n\r\ncontents.fbs file:\r\nimport \"base.fbs\";\r\nnamespace abc;\r\nunion Contents {\r\n  ElementA: Element,\r\n  ElementB: Element,\r\n  StringC: string,\r\n}\r\n\r\nwill return in generation of something like:\r\nexport import ElementA = NSxxxx.abc.ElementA\r\nexport import ElementA = NSxxxx.abc.ElementB\r\nthe correct generated code should be something like:\r\nexport import ElementA = NSxxxx.abc.Element\r\nexport import ElementB = NSxxxx.abc.Element", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/6013", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/6013/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/6013/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/6013/events", "html_url": "https://github.com/google/flatbuffers/issues/6013", "id": 647554621, "node_id": "MDU6SXNzdWU2NDc1NTQ2MjE=", "number": 6013, "title": "[Java][Kotlin] Feature Request: Extra accessor to expose string offsets", "user": {"login": "paulovap", "id": 2519883, "node_id": "MDQ6VXNlcjI1MTk4ODM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2519883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulovap", "html_url": "https://github.com/paulovap", "followers_url": "https://api.github.com/users/paulovap/followers", "following_url": "https://api.github.com/users/paulovap/following{/other_user}", "gists_url": "https://api.github.com/users/paulovap/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulovap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulovap/subscriptions", "organizations_url": "https://api.github.com/users/paulovap/orgs", "repos_url": "https://api.github.com/users/paulovap/repos", "events_url": "https://api.github.com/users/paulovap/events{/privacy}", "received_events_url": "https://api.github.com/users/paulovap/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-06-29T17:44:32Z", "updated_at": "2020-07-22T13:05:04Z", "closed_at": "2020-07-22T13:05:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "On several implementations, the builder has the ability to share strings between several tables, saving a lot of space and processing.\r\n\r\nBut on some managed languages, like Java and Kotlin, reading a string incurs **a copy**. So, if you have a message with several shared strings, there will be a copy for every access to that shared string. \r\n\r\nSo I suggest adding an extra accessor for strings. Something like `int Table::myfieldNameOffset()` that returns the real position of the string. So the string caching/bookkeeping can be done externally to Flatbuffers.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/6011", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/6011/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/6011/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/6011/events", "html_url": "https://github.com/google/flatbuffers/issues/6011", "id": 647382385, "node_id": "MDU6SXNzdWU2NDczODIzODU=", "number": 6011, "title": "Flatc generated code with object api does not compile [TypeScript]", "user": {"login": "W1M0R", "id": 618853, "node_id": "MDQ6VXNlcjYxODg1Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/618853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/W1M0R", "html_url": "https://github.com/W1M0R", "followers_url": "https://api.github.com/users/W1M0R/followers", "following_url": "https://api.github.com/users/W1M0R/following{/other_user}", "gists_url": "https://api.github.com/users/W1M0R/gists{/gist_id}", "starred_url": "https://api.github.com/users/W1M0R/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/W1M0R/subscriptions", "organizations_url": "https://api.github.com/users/W1M0R/orgs", "repos_url": "https://api.github.com/users/W1M0R/repos", "events_url": "https://api.github.com/users/W1M0R/events{/privacy}", "received_events_url": "https://api.github.com/users/W1M0R/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-29T13:35:25Z", "updated_at": "2020-07-02T19:18:22Z", "closed_at": "2020-07-02T19:18:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given the following flatc Docker image (resulting in flatc version 1.12.0):\r\n\r\n```bash\r\nsudo docker build --pull -t flatc:local - <<\"EOF\"\r\nFROM neomantra/flatbuffers:latest\r\nEOF\r\n```\r\n\r\nAnd TypeScript code generated in the following way:\r\n\r\n```bash\r\nsudo -E docker run \\\r\n    --rm \\\r\n    --volume \"/test:/test\" \\\r\n    --workdir /test flatc:local \\\r\n    flatc \\\r\n        --ts \\\r\n        --no-fb-import \\\r\n        --short-names \\\r\n        --gen-mutable \\\r\n        --gen-object-api \\\r\n        --filename-ext ts \\\r\n        --filename-suffix \"\" \\\r\n        -o test.ts \\\r\n        test.fbs\r\n```\r\n\r\nWhere `test.fbs` is the flatbuffers schema with root type `TestApi`. This same schema was also used to successfully generate C++, Python, and C# code.\r\n\r\nWhen trying to use the generated TypeScript, I receive the following errors:\r\n\r\n```\r\nerror TS2339: Property 'create' does not exist on type 'typeof TestApi'.\r\nerror TS2339: Property 'createObjList' does not exist on type 'ByteBuffer'.\r\nerror TS2339: Property 'createObjectOffsetList' does not exist on type 'Builder'.\r\n```\r\n\r\nThis same issue occurs, with a variation in error messages, if I don't use `--short-names` and/or `--gen-mutable`. However, if I choose not to generate the object API by not passing `--gen-object-api`, then the TypeScript code compiles successfully with my code.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5990", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5990/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5990/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5990/events", "html_url": "https://github.com/google/flatbuffers/issues/5990", "id": 642644332, "node_id": "MDU6SXNzdWU2NDI2NDQzMzI=", "number": 5990, "title": "Use with serde_bytes results in deserialization error [Rust, FlexBuffers 0.1.0]", "user": {"login": "normano", "id": 964776, "node_id": "MDQ6VXNlcjk2NDc3Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/964776?v=4", "gravatar_id": "", "url": "https://api.github.com/users/normano", "html_url": "https://github.com/normano", "followers_url": "https://api.github.com/users/normano/followers", "following_url": "https://api.github.com/users/normano/following{/other_user}", "gists_url": "https://api.github.com/users/normano/gists{/gist_id}", "starred_url": "https://api.github.com/users/normano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/normano/subscriptions", "organizations_url": "https://api.github.com/users/normano/orgs", "repos_url": "https://api.github.com/users/normano/repos", "events_url": "https://api.github.com/users/normano/events{/privacy}", "received_events_url": "https://api.github.com/users/normano/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-21T21:27:49Z", "updated_at": "2020-07-07T00:58:19Z", "closed_at": "2020-07-07T00:58:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get this error during deserialization:\r\n\r\n> Flexbuffer Read Error: UnexpectedFlexbufferType { expected: Blob, actual: VectorUInt }\r\n\r\nif my object contains a field with:\r\n\r\n```\r\n#[serde(with = \"serde_bytes\")]\r\n\r\npub value: Option<Vec<u8>>,\r\n```\r\n\r\n\r\nEverything is fine when taking it off, but this isn't expected. It should be a bytebuf when serialized.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5975", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5975/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5975/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5975/events", "html_url": "https://github.com/google/flatbuffers/issues/5975", "id": 639815668, "node_id": "MDU6SXNzdWU2Mzk4MTU2Njg=", "number": 5975, "title": "[C#] Better testing support for Mono", "user": {"login": "dbaileychess", "id": 1477247, "node_id": "MDQ6VXNlcjE0NzcyNDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1477247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbaileychess", "html_url": "https://github.com/dbaileychess", "followers_url": "https://api.github.com/users/dbaileychess/followers", "following_url": "https://api.github.com/users/dbaileychess/following{/other_user}", "gists_url": "https://api.github.com/users/dbaileychess/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbaileychess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbaileychess/subscriptions", "organizations_url": "https://api.github.com/users/dbaileychess/orgs", "repos_url": "https://api.github.com/users/dbaileychess/repos", "events_url": "https://api.github.com/users/dbaileychess/events{/privacy}", "received_events_url": "https://api.github.com/users/dbaileychess/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 317804630, "node_id": "MDU6TGFiZWwzMTc4MDQ2MzA=", "url": "https://api.github.com/repos/google/flatbuffers/labels/c%23", "name": "c#", "color": "fef2c0", "default": false, "description": null}, {"id": 2141193051, "node_id": "MDU6TGFiZWwyMTQxMTkzMDUx", "url": "https://api.github.com/repos/google/flatbuffers/labels/testing", "name": "testing", "color": "0052cc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "dbaileychess", "id": 1477247, "node_id": "MDQ6VXNlcjE0NzcyNDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1477247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbaileychess", "html_url": "https://github.com/dbaileychess", "followers_url": "https://api.github.com/users/dbaileychess/followers", "following_url": "https://api.github.com/users/dbaileychess/following{/other_user}", "gists_url": "https://api.github.com/users/dbaileychess/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbaileychess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbaileychess/subscriptions", "organizations_url": "https://api.github.com/users/dbaileychess/orgs", "repos_url": "https://api.github.com/users/dbaileychess/repos", "events_url": "https://api.github.com/users/dbaileychess/events{/privacy}", "received_events_url": "https://api.github.com/users/dbaileychess/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "dbaileychess", "id": 1477247, "node_id": "MDQ6VXNlcjE0NzcyNDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1477247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbaileychess", "html_url": "https://github.com/dbaileychess", "followers_url": "https://api.github.com/users/dbaileychess/followers", "following_url": "https://api.github.com/users/dbaileychess/following{/other_user}", "gists_url": "https://api.github.com/users/dbaileychess/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbaileychess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbaileychess/subscriptions", "organizations_url": "https://api.github.com/users/dbaileychess/orgs", "repos_url": "https://api.github.com/users/dbaileychess/repos", "events_url": "https://api.github.com/users/dbaileychess/events{/privacy}", "received_events_url": "https://api.github.com/users/dbaileychess/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-06-16T16:36:34Z", "updated_at": "2020-08-17T20:10:11Z", "closed_at": "2020-08-17T20:10:11Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Running the .NET test on Linux is painful and doesn't always work (`tests/FlatBuffers.Test/NetTest.sh`). We should explore ways to make it faster (less downloads) and more reliable.\r\n\r\nLatest error:\r\n\r\n`/usr/lib/mono/msbuild/15.0/bin/Microsoft.CSharp.CurrentVersion.targets(331,5): error MSB4019: The imported project \"/usr/lib/mono/msbuild/15.0/bin/Roslyn/Microsoft.CSharp.Core.targets\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk. [/home/derekbailey/Projects/dbaileychess/flatbuffers/tests/FlatBuffers.Test/FlatBuffers.Test.csproj]`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5971", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5971/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5971/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5971/events", "html_url": "https://github.com/google/flatbuffers/issues/5971", "id": 639401930, "node_id": "MDU6SXNzdWU2Mzk0MDE5MzA=", "number": 5971, "title": "Add code gen step for evolution test schema", "user": {"login": "dbaileychess", "id": 1477247, "node_id": "MDQ6VXNlcjE0NzcyNDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1477247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbaileychess", "html_url": "https://github.com/dbaileychess", "followers_url": "https://api.github.com/users/dbaileychess/followers", "following_url": "https://api.github.com/users/dbaileychess/following{/other_user}", "gists_url": "https://api.github.com/users/dbaileychess/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbaileychess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbaileychess/subscriptions", "organizations_url": "https://api.github.com/users/dbaileychess/orgs", "repos_url": "https://api.github.com/users/dbaileychess/repos", "events_url": "https://api.github.com/users/dbaileychess/events{/privacy}", "received_events_url": "https://api.github.com/users/dbaileychess/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "dbaileychess", "id": 1477247, "node_id": "MDQ6VXNlcjE0NzcyNDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1477247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbaileychess", "html_url": "https://github.com/dbaileychess", "followers_url": "https://api.github.com/users/dbaileychess/followers", "following_url": "https://api.github.com/users/dbaileychess/following{/other_user}", "gists_url": "https://api.github.com/users/dbaileychess/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbaileychess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbaileychess/subscriptions", "organizations_url": "https://api.github.com/users/dbaileychess/orgs", "repos_url": "https://api.github.com/users/dbaileychess/repos", "events_url": "https://api.github.com/users/dbaileychess/events{/privacy}", "received_events_url": "https://api.github.com/users/dbaileychess/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "dbaileychess", "id": 1477247, "node_id": "MDQ6VXNlcjE0NzcyNDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1477247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbaileychess", "html_url": "https://github.com/dbaileychess", "followers_url": "https://api.github.com/users/dbaileychess/followers", "following_url": "https://api.github.com/users/dbaileychess/following{/other_user}", "gists_url": "https://api.github.com/users/dbaileychess/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbaileychess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbaileychess/subscriptions", "organizations_url": "https://api.github.com/users/dbaileychess/orgs", "repos_url": "https://api.github.com/users/dbaileychess/repos", "events_url": "https://api.github.com/users/dbaileychess/events{/privacy}", "received_events_url": "https://api.github.com/users/dbaileychess/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-06-16T06:19:44Z", "updated_at": "2020-06-25T22:35:24Z", "closed_at": "2020-06-25T22:35:24Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "The evolution schema code gen command in `test/generate_code.sh` was removed during a refactor. It should be added in again.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5968", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5968/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5968/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5968/events", "html_url": "https://github.com/google/flatbuffers/issues/5968", "id": 638615993, "node_id": "MDU6SXNzdWU2Mzg2MTU5OTM=", "number": 5968, "title": "Flatbuffers replace protobuffer", "user": {"login": "kavnlaputa", "id": 30397337, "node_id": "MDQ6VXNlcjMwMzk3MzM3", "avatar_url": "https://avatars2.githubusercontent.com/u/30397337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kavnlaputa", "html_url": "https://github.com/kavnlaputa", "followers_url": "https://api.github.com/users/kavnlaputa/followers", "following_url": "https://api.github.com/users/kavnlaputa/following{/other_user}", "gists_url": "https://api.github.com/users/kavnlaputa/gists{/gist_id}", "starred_url": "https://api.github.com/users/kavnlaputa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kavnlaputa/subscriptions", "organizations_url": "https://api.github.com/users/kavnlaputa/orgs", "repos_url": "https://api.github.com/users/kavnlaputa/repos", "events_url": "https://api.github.com/users/kavnlaputa/events{/privacy}", "received_events_url": "https://api.github.com/users/kavnlaputa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-15T07:34:03Z", "updated_at": "2020-06-15T18:23:46Z", "closed_at": "2020-06-15T18:23:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5957", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5957/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5957/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5957/events", "html_url": "https://github.com/google/flatbuffers/issues/5957", "id": 635677033, "node_id": "MDU6SXNzdWU2MzU2NzcwMzM=", "number": 5957, "title": "Inappropriately capitalized variable names [flatc --gen-object-api --python]", "user": {"login": "obiben", "id": 3718280, "node_id": "MDQ6VXNlcjM3MTgyODA=", "avatar_url": "https://avatars1.githubusercontent.com/u/3718280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/obiben", "html_url": "https://github.com/obiben", "followers_url": "https://api.github.com/users/obiben/followers", "following_url": "https://api.github.com/users/obiben/following{/other_user}", "gists_url": "https://api.github.com/users/obiben/gists{/gist_id}", "starred_url": "https://api.github.com/users/obiben/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/obiben/subscriptions", "organizations_url": "https://api.github.com/users/obiben/orgs", "repos_url": "https://api.github.com/users/obiben/repos", "events_url": "https://api.github.com/users/obiben/events{/privacy}", "received_events_url": "https://api.github.com/users/obiben/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "dbaileychess", "id": 1477247, "node_id": "MDQ6VXNlcjE0NzcyNDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1477247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbaileychess", "html_url": "https://github.com/dbaileychess", "followers_url": "https://api.github.com/users/dbaileychess/followers", "following_url": "https://api.github.com/users/dbaileychess/following{/other_user}", "gists_url": "https://api.github.com/users/dbaileychess/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbaileychess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbaileychess/subscriptions", "organizations_url": "https://api.github.com/users/dbaileychess/orgs", "repos_url": "https://api.github.com/users/dbaileychess/repos", "events_url": "https://api.github.com/users/dbaileychess/events{/privacy}", "received_events_url": "https://api.github.com/users/dbaileychess/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "dbaileychess", "id": 1477247, "node_id": "MDQ6VXNlcjE0NzcyNDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1477247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbaileychess", "html_url": "https://github.com/dbaileychess", "followers_url": "https://api.github.com/users/dbaileychess/followers", "following_url": "https://api.github.com/users/dbaileychess/following{/other_user}", "gists_url": "https://api.github.com/users/dbaileychess/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbaileychess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbaileychess/subscriptions", "organizations_url": "https://api.github.com/users/dbaileychess/orgs", "repos_url": "https://api.github.com/users/dbaileychess/repos", "events_url": "https://api.github.com/users/dbaileychess/events{/privacy}", "received_events_url": "https://api.github.com/users/dbaileychess/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2020-06-09T18:49:55Z", "updated_at": "2020-08-14T19:05:15Z", "closed_at": "2020-08-14T19:05:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following schema:\r\n```\r\nstruct Top5Item\r\n{\r\n    Price:float;\r\n    Size:int;\r\n    NbQuotes:int;\r\n}\r\n\r\ntable Top5\r\n{\r\n    Symbol:string;\r\n    Bids:[Top5Item];\r\n    Asks:[Top5Item];\r\n}\r\n```\r\n\r\ngenerates the following method in `Top5ItemT`:\r\n```\r\n    # Top5ItemT\r\n    def __init__(self):\r\n        self.price = 0.0  # type: float\r\n        self.size = 0  # type: int\r\n        self.nbQuotes = 0  # type: int\r\n\r\n...\r\n\r\n    # Top5ItemT\r\n    def Pack(self, builder):\r\n        return CreateTop5Item(builder, self.Price, self.Size, self.NbQuotes)\r\n```\r\n\r\nIn Pack(), variable names are capitalized, whereas they aren't in the class definition", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5956", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5956/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5956/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5956/events", "html_url": "https://github.com/google/flatbuffers/issues/5956", "id": 635412435, "node_id": "MDU6SXNzdWU2MzU0MTI0MzU=", "number": 5956, "title": "[php] Plan php extension development", "user": {"login": "dickens7", "id": 41516298, "node_id": "MDQ6VXNlcjQxNTE2Mjk4", "avatar_url": "https://avatars3.githubusercontent.com/u/41516298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dickens7", "html_url": "https://github.com/dickens7", "followers_url": "https://api.github.com/users/dickens7/followers", "following_url": "https://api.github.com/users/dickens7/following{/other_user}", "gists_url": "https://api.github.com/users/dickens7/gists{/gist_id}", "starred_url": "https://api.github.com/users/dickens7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dickens7/subscriptions", "organizations_url": "https://api.github.com/users/dickens7/orgs", "repos_url": "https://api.github.com/users/dickens7/repos", "events_url": "https://api.github.com/users/dickens7/events{/privacy}", "received_events_url": "https://api.github.com/users/dickens7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-09T13:04:24Z", "updated_at": "2020-07-18T08:21:14Z", "closed_at": "2020-07-18T08:21:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any plan to support php expansion?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5954", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5954/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5954/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5954/events", "html_url": "https://github.com/google/flatbuffers/issues/5954", "id": 634604850, "node_id": "MDU6SXNzdWU2MzQ2MDQ4NTA=", "number": 5954, "title": "[Flexbuffers] [Java, 1.12.0] How to infer the correct type of a stored value?", "user": {"login": "adrielcafe", "id": 2512298, "node_id": "MDQ6VXNlcjI1MTIyOTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/2512298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrielcafe", "html_url": "https://github.com/adrielcafe", "followers_url": "https://api.github.com/users/adrielcafe/followers", "following_url": "https://api.github.com/users/adrielcafe/following{/other_user}", "gists_url": "https://api.github.com/users/adrielcafe/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrielcafe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrielcafe/subscriptions", "organizations_url": "https://api.github.com/users/adrielcafe/orgs", "repos_url": "https://api.github.com/users/adrielcafe/repos", "events_url": "https://api.github.com/users/adrielcafe/events{/privacy}", "received_events_url": "https://api.github.com/users/adrielcafe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-08T13:18:24Z", "updated_at": "2020-06-08T20:01:12Z", "closed_at": "2020-06-08T20:01:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! I'm storing a Long and a Float into a map using Flexbuffers, something like:\r\n\r\n```kotlin\r\nbuilder.putInt(\"key1\", longValue)\r\nbuilder.putFloat(\"key2\", floatValue)\r\n```\r\n\r\nBut when I try to infer the type of these values to read them, I get:\r\n\r\n```kotlin\r\nval value = when (reference) {\r\n    isFloat -> // asFloat() returns Double instead of Float\r\n    isInt -> // there's no way to know if I should use asInt() or asLong() here\r\n}\r\n```\r\n\r\nI was expecting to use flags like `isLong` and `isDouble` to know the correct type.\r\n\r\nI'm missing something or this behavior is by design?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5953", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5953/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5953/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5953/events", "html_url": "https://github.com/google/flatbuffers/issues/5953", "id": 633784837, "node_id": "MDU6SXNzdWU2MzM3ODQ4Mzc=", "number": 5953, "title": "[Swift - Proposal]  NSManaged/realm extension.", "user": {"login": "mustiikhalil", "id": 26250654, "node_id": "MDQ6VXNlcjI2MjUwNjU0", "avatar_url": "https://avatars3.githubusercontent.com/u/26250654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mustiikhalil", "html_url": "https://github.com/mustiikhalil", "followers_url": "https://api.github.com/users/mustiikhalil/followers", "following_url": "https://api.github.com/users/mustiikhalil/following{/other_user}", "gists_url": "https://api.github.com/users/mustiikhalil/gists{/gist_id}", "starred_url": "https://api.github.com/users/mustiikhalil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mustiikhalil/subscriptions", "organizations_url": "https://api.github.com/users/mustiikhalil/orgs", "repos_url": "https://api.github.com/users/mustiikhalil/repos", "events_url": "https://api.github.com/users/mustiikhalil/events{/privacy}", "received_events_url": "https://api.github.com/users/mustiikhalil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-07T21:35:02Z", "updated_at": "2020-06-18T05:18:26Z", "closed_at": "2020-06-18T05:18:26Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "This issue requires some research regarding how we go about it, however the idea is adding these two commands to flatc `--nsmanaged-object` and `--realm-object` for swift to generate an object-api code that confirms to either a nsmanaged object or a realm object.\r\n```\r\nNSManagedObject: an object that can be persisted to core data in iOS and macOS\r\nrealmObject: an object that confirms to type object for the realm db. \r\n```\r\n\r\nso instead of just using an objectAPI, we simple map everything for the user to one of these objects by simply allowing the user to use the command.\r\n\r\nPositive things:\r\n1- If we generate a FlatBuffer table, we can simply use the commands to generate it's relative database object.\r\n2- User needs to only write the `fbs` file to generate the FlatBuffer, and the realm object. (look at constraints for NSManaged Objects issue no:1)\r\n\r\nConstraints:\r\n1- NSManagedObjects are usually generated by Xcode, and they have to match the entity in xcdatamodel. \r\n2- Object Oriented databases, so if the buffer contains `Monster` with id `123` twice we might face an issue when we are saving it to the database.\r\n3- Optional values differ in NSManagedObject and Realm.\r\n4- lack of some fields in FlatBuffers such as `data (which can be represented with a [uint8], uuid`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5950", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5950/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5950/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5950/events", "html_url": "https://github.com/google/flatbuffers/issues/5950", "id": 632312597, "node_id": "MDU6SXNzdWU2MzIzMTI1OTc=", "number": 5950, "title": "Compilation errors [gcc 10.1, Linux 5.6]", "user": {"login": "rkuchumov", "id": 7383147, "node_id": "MDQ6VXNlcjczODMxNDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7383147?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkuchumov", "html_url": "https://github.com/rkuchumov", "followers_url": "https://api.github.com/users/rkuchumov/followers", "following_url": "https://api.github.com/users/rkuchumov/following{/other_user}", "gists_url": "https://api.github.com/users/rkuchumov/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkuchumov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkuchumov/subscriptions", "organizations_url": "https://api.github.com/users/rkuchumov/orgs", "repos_url": "https://api.github.com/users/rkuchumov/repos", "events_url": "https://api.github.com/users/rkuchumov/events{/privacy}", "received_events_url": "https://api.github.com/users/rkuchumov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-06T08:59:31Z", "updated_at": "2020-07-06T15:38:07Z", "closed_at": "2020-07-06T15:38:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run\r\n\r\n```\r\nmkdir build && cd build\r\ncmake -DCMAKE_INSTALL_PREFIX=\"$HOME/.local/\" ..\r\nmake -j4\r\n```\r\n\r\nI get this error:\r\n\r\n```\r\nIn file included from /home/rk/z/flatbuffers/tests/test.cpp:39:\r\n/home/rk/z/flatbuffers/tests/arrays_test_generated.h: In constructor \u2018MyGame::Example::ArrayStruct::ArrayStruct(float, int8_t, int32_t)\u2019:\r\n/home/rk/z/flatbuffers/tests/arrays_test_generated.h:156:34: error: \u2018void* memset(void*, int, size_t)\u2019 clearing an object of non-trivial type \u2018struct MyGame::Example::NestedStruct\u2019; use assignment or value-initialization instead [-Werror=class-memaccess]\r\n  156 |     std::memset(d_, 0, sizeof(d_));\r\n      |                                  ^\r\n/home/rk/z/flatbuffers/tests/arrays_test_generated.h:66:40: note: \u2018struct MyGame::Example::NestedStruct\u2019 declared here\r\n   66 | FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) NestedStruct FLATBUFFERS_FINAL_CLASS {\r\n      |                                        ^~~~~~~~~~~~\r\n```\r\n\r\nand this one:\r\n\r\n```\r\nIn file included from /home/rk/z/flatbuffers/include/flatbuffers/flatbuffers.h:20,\r\n                 from /home/rk/z/flatbuffers/tests/test.cpp:18:\r\nIn function \u2018void flatbuffers::WriteScalar(void*, T) [with T = unsigned char]\u2019,\r\n    inlined from \u2018void flatbuffers::Vector<T>::Mutate(flatbuffers::uoffset_t, const T&) [with T = unsigned char]\u2019 at /home/rk/z/flatbuffers/include/flatbuffers/flatbuffers.h:314:16,\r\n    inlined from \u2018void MutateFlatBuffersTest(uint8_t*, std::size_t)\u2019 at /home/rk/z/flatbuffers/tests/test.cpp:465:20:\r\n/home/rk/z/flatbuffers/include/flatbuffers/base.h:381:29: error: writing 1 byte into a region of size 0 [-Werror=stringop-overflow=]\r\n  381 |   *reinterpret_cast<T *>(p) = EndianScalar(t);\r\n      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\r\n```\r\n\r\nThis happens in the current master (6df40a24) and  v1.12.0\r\n[make.log](https://github.com/google/flatbuffers/files/4739704/make.log)\r\n[cmake.log](https://github.com/google/flatbuffers/files/4739705/cmake.log)\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5945", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5945/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5945/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5945/events", "html_url": "https://github.com/google/flatbuffers/issues/5945", "id": 630278447, "node_id": "MDU6SXNzdWU2MzAyNzg0NDc=", "number": 5945, "title": "Access violation and ASAN/UNSAN failures with sorted tables ", "user": {"login": "vglavnyy", "id": 31897320, "node_id": "MDQ6VXNlcjMxODk3MzIw", "avatar_url": "https://avatars0.githubusercontent.com/u/31897320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vglavnyy", "html_url": "https://github.com/vglavnyy", "followers_url": "https://api.github.com/users/vglavnyy/followers", "following_url": "https://api.github.com/users/vglavnyy/following{/other_user}", "gists_url": "https://api.github.com/users/vglavnyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/vglavnyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vglavnyy/subscriptions", "organizations_url": "https://api.github.com/users/vglavnyy/orgs", "repos_url": "https://api.github.com/users/vglavnyy/repos", "events_url": "https://api.github.com/users/vglavnyy/events{/privacy}", "received_events_url": "https://api.github.com/users/vglavnyy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-03T19:47:50Z", "updated_at": "2020-06-16T15:40:11Z", "closed_at": "2020-06-16T15:40:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried to debug #5928 issue and have found a memory access violation with a valid JSON at the input.\r\nFor testing, I modified `monsterdata_test.json` and updated `monsterdata_test.mon` with `generate_code` script. The `monsterdata_test.golden` file was unchanged.\r\nInstead of simple test failures due to mismatching of `json` and `golden` I got an access violation (MSVC) and multiple errors from UBSAN/ASAN  with a segfault.\r\nThe `monsterdata_test.json` was extended with a trivial test case:\r\n```json\r\n  testhashu64_fnv1a: \"This string is being hashed!\",\r\n  testarrayofsortedstruct:[\r\n    {\r\n      id: 2,\r\n      distance: 21\r\n    },\r\n    {\r\n      id: 5,\r\n      distance: 12\r\n    }\r\n  ]\r\n```\r\nBoth ids are non-default values (0). This json file can be successfully converted to binary `mon` file by `flatc` but parsing of this file causes a crash in tests.\r\nClang failed in `ParseAndGenerateTextTest(false/true)`. MSVC failed in `GenerateTableTextTest()`.\r\nAlso, I found that the result of tests depends on the calling order of inner test-cases. Reordering of calls can help to avoid ASAN/UNSAN/AV failures.\r\n\r\nChanges:\r\nhttps://github.com/google/flatbuffers/compare/master...vglavnyy:5928_alignment_issue?expand=1\r\nTravis:\r\nhttps://travis-ci.org/github/vglavnyy/flatbuffers\r\nAppveyor:\r\nhttps://ci.appveyor.com/project/vglavnyy/flatbuffers", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5944", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5944/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5944/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5944/events", "html_url": "https://github.com/google/flatbuffers/issues/5944", "id": 629271422, "node_id": "MDU6SXNzdWU2MjkyNzE0MjI=", "number": 5944, "title": "[Java, 1.12.0] IllegalAccessError at runtime with Kotlin & Android", "user": {"login": "adrielcafe", "id": 2512298, "node_id": "MDQ6VXNlcjI1MTIyOTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/2512298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrielcafe", "html_url": "https://github.com/adrielcafe", "followers_url": "https://api.github.com/users/adrielcafe/followers", "following_url": "https://api.github.com/users/adrielcafe/following{/other_user}", "gists_url": "https://api.github.com/users/adrielcafe/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrielcafe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrielcafe/subscriptions", "organizations_url": "https://api.github.com/users/adrielcafe/orgs", "repos_url": "https://api.github.com/users/adrielcafe/repos", "events_url": "https://api.github.com/users/adrielcafe/events{/privacy}", "received_events_url": "https://api.github.com/users/adrielcafe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-02T14:55:51Z", "updated_at": "2020-06-08T16:35:52Z", "closed_at": "2020-06-08T16:35:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi folks, I'm trying to use Flexbuffers on a sample Android project with Kotlin, but the below code is throwing `IllegalAccessError`:\r\n\r\n```kotlin\r\nval byteArray = file.readBytes()\r\nval buf = ArrayReadWriteBuf(byteArray, byteArray.lastIndex)\r\nval root = FlexBuffers.getRoot(buf) // throws IllegalAccessError at runtime\r\n```\r\n\r\n```\r\njava.lang.IllegalAccessError: Illegal class access: 'cafe.adriel.sample.MainActivity' attempting to access 'com.google.flatbuffers.ReadBuf' (declaration of 'cafe.adriel.sample.MainActivity' appears in /data/app/cafe.adriel.sample-nYIjGcIOB5I9Hi78hqDMbg==/base.apk)\r\n        at cafe.adriel.sample.MainActivity.onCreate(MainActivity.kt:89)\r\n        at android.app.Activity.performCreate(Activity.java:7148)\r\n        at android.app.Activity.performCreate(Activity.java:7139)\r\n        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1293)\r\n        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:3111)\r\n        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3270)\r\n        at android.app.servertransaction.LaunchActivityItem.execute(LaunchActivityItem.java:78)\r\n        at android.app.servertransaction.TransactionExecutor.executeCallbacks(TransactionExecutor.java:108)\r\n        at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:68)\r\n        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1986)\r\n        at android.os.Handler.dispatchMessage(Handler.java:106)\r\n        at android.os.Looper.loop(Looper.java:215)\r\n        at android.app.ActivityThread.main(ActivityThread.java:6939)\r\n        at java.lang.reflect.Method.invoke(Native Method)\r\n        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)\r\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:870)\r\n```\r\n\r\nThe workaround I found was:\r\n1. Import manually the code of [java/com/google/flatbuffers](https://github.com/google/flatbuffers/tree/master/java/com/google/flatbuffers) to my project\r\n2. Add `public` modifier to `ReadBuf` and `ReadWriteBuf` interfaces\r\n\r\nIs that the correct fix? If yes I can open a PR with pleasure. If not, how can I use the maven/gradle dependency without this exception? Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5941", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5941/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5941/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5941/events", "html_url": "https://github.com/google/flatbuffers/issues/5941", "id": 628899087, "node_id": "MDU6SXNzdWU2Mjg4OTkwODc=", "number": 5941, "title": "[Swift] Generated bool properties fail to compile", "user": {"login": "andytsan", "id": 66293237, "node_id": "MDQ6VXNlcjY2MjkzMjM3", "avatar_url": "https://avatars1.githubusercontent.com/u/66293237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andytsan", "html_url": "https://github.com/andytsan", "followers_url": "https://api.github.com/users/andytsan/followers", "following_url": "https://api.github.com/users/andytsan/following{/other_user}", "gists_url": "https://api.github.com/users/andytsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/andytsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andytsan/subscriptions", "organizations_url": "https://api.github.com/users/andytsan/orgs", "repos_url": "https://api.github.com/users/andytsan/repos", "events_url": "https://api.github.com/users/andytsan/events{/privacy}", "received_events_url": "https://api.github.com/users/andytsan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-02T04:53:47Z", "updated_at": "2020-06-05T04:09:25Z", "closed_at": "2020-06-04T16:14:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks so much for the Swift support, it's amazingly awesome!\r\n\r\nI've run into a little issue with the code generation.\r\n\r\nI'm using flatbuffers HEAD-c3faa83 installed via Homebrew.\r\n\r\nIn my schema, if I create a basic struct with a bool, the generated code will fail to compile.\r\nE.g.\r\n```\r\nstruct SimpleStruct {\r\n  property:bool = false;\r\n}\r\n```\r\n\r\nAfter running `flatc --swift --gen-mutable sample.fbs`, switching back to Xcode and compiling, I get:\r\n\r\n```\r\nInstance method 'readBuffer(of:at:)' requires that 'Bool' conform to 'Scalar'\r\nInstance method 'mutate(_:index:)' requires that 'Bool' conform to 'Scalar'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5940", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5940/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5940/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5940/events", "html_url": "https://github.com/google/flatbuffers/issues/5940", "id": 628611025, "node_id": "MDU6SXNzdWU2Mjg2MTEwMjU=", "number": 5940, "title": "[C++] How can I check whether an enum is set or not when setting ForceDefaults to false?", "user": {"login": "phuongtran7", "id": 46689198, "node_id": "MDQ6VXNlcjQ2Njg5MTk4", "avatar_url": "https://avatars1.githubusercontent.com/u/46689198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phuongtran7", "html_url": "https://github.com/phuongtran7", "followers_url": "https://api.github.com/users/phuongtran7/followers", "following_url": "https://api.github.com/users/phuongtran7/following{/other_user}", "gists_url": "https://api.github.com/users/phuongtran7/gists{/gist_id}", "starred_url": "https://api.github.com/users/phuongtran7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phuongtran7/subscriptions", "organizations_url": "https://api.github.com/users/phuongtran7/orgs", "repos_url": "https://api.github.com/users/phuongtran7/repos", "events_url": "https://api.github.com/users/phuongtran7/events{/privacy}", "received_events_url": "https://api.github.com/users/phuongtran7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-01T17:38:00Z", "updated_at": "2020-06-01T19:03:29Z", "closed_at": "2020-06-01T19:03:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have a simple schema like this:\r\n\r\n```\r\nnamespace test;\r\n\r\nenum Media : byte {\r\n\tbook,\r\n\ttv,\r\n\tgame\r\n}\r\n\r\ntable Hour {\r\n\thour:int;\r\n\tminute:int;\r\n\tsecond:int;\r\n}\r\n\r\ntable Data {\r\n\ttimestamp:Hour;\r\n\tproduct:Media;\r\n}\r\n\r\nroot_type Data;\r\n```\r\n\r\nI'd like to make both the `timestamp` and  `product` field in the `Data` table to be optional. So I set the `ForceDefaults` to false. I can easily check the `timestamp` with:\r\n\r\n```cpp\r\nflatbuffers::FlatBufferBuilder builder;\r\nbuilder.ForceDefaults(false);\r\n\r\nauto timestamp = test::CreateHour(builder, 12, 59, 39);\r\nauto data = test::CreateData(builder, timestamp);\r\n\r\nbuilder.Finish(data);\r\n\r\nauto decoded = test::GetData(builder.GetBufferPointer());\r\nif (decoded->timestamp()) {\r\n\tfmt::print(\"Got Timestamp\\n\");\r\n}\r\n```\r\n\r\nHowever, I cannot do that with the `product` filed.\r\n```cpp\r\n// This doesn't compile\r\nif (decoded->product()) {\r\n\tfmt::print(\"Got Product\\n\");\r\n}\r\n```\r\n\r\nLook into the generated header, I see that the field will always be set to `Media::book` if it's not explicitly set by the code. So is there anyway I can for the enum to be optional like table? The current work around I have right now is just adding another none field into the enum. So when I don't set the enum, it will default to the none one.\r\n\r\n```\r\nenum Media : byte {\r\n\tnone,\r\n\tbook,\r\n\ttv,\r\n\tgame\r\n}\r\n```\r\n\r\nThank you so much for your time and help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5936", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5936/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5936/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5936/events", "html_url": "https://github.com/google/flatbuffers/issues/5936", "id": 627136711, "node_id": "MDU6SXNzdWU2MjcxMzY3MTE=", "number": 5936, "title": "[Swift] Fields marked as required produce optional Swift properties.", "user": {"login": "kennycarruthers", "id": 15756, "node_id": "MDQ6VXNlcjE1NzU2", "avatar_url": "https://avatars0.githubusercontent.com/u/15756?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennycarruthers", "html_url": "https://github.com/kennycarruthers", "followers_url": "https://api.github.com/users/kennycarruthers/followers", "following_url": "https://api.github.com/users/kennycarruthers/following{/other_user}", "gists_url": "https://api.github.com/users/kennycarruthers/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennycarruthers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennycarruthers/subscriptions", "organizations_url": "https://api.github.com/users/kennycarruthers/orgs", "repos_url": "https://api.github.com/users/kennycarruthers/repos", "events_url": "https://api.github.com/users/kennycarruthers/events{/privacy}", "received_events_url": "https://api.github.com/users/kennycarruthers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-29T09:36:31Z", "updated_at": "2020-06-08T17:08:16Z", "closed_at": "2020-06-08T17:08:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I mark a field as `required` in a schema, the generated Swift code marks the associated property as being optional. It would be preferred if `required` fields produce non-optional Swift accessors.\r\n\r\n**Schema**\r\n\r\n    table File {\r\n      path:string (required);\r\n    }\r\n\r\n**Generated Swift Code**\r\n\r\n    // Truncated for clarity...\r\n\r\n    public struct File: FlatBufferObject {\r\n\r\n        private init(_ t: Table) { _accessor = t }\r\n        public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }\r\n\r\n        enum VTOFFSET: VOffset {\r\n            case path = 4\r\n            var v: Int32 { Int32(self.rawValue) }\r\n            var p: VOffset { self.rawValue }\r\n        }\r\n\r\n        public var path: String? { let o = _accessor.offset(VTOFFSET.path.v); return o == 0 ? nil : _accessor.string(at: o) }\r\n        public var pathSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.path.v) }\r\n        \r\n        public static func startFile(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 1) }\r\n        public static func add(path: Offset<String>, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: path, at: VTOFFSET.path.p)  }\r\n        public static func endFile(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset<UOffset> { let end = Offset<UOffset>(offset: fbb.endTable(at: start)); fbb.require(table: end, fields: [4]); return end }\r\n\r\n    }\r\n\r\n**Generated Swift Code for Object API**\r\n\r\n    public class FileT: NativeTable {\r\n        var path: String?\r\n\r\n        init(_ _t: inout File) {\r\n            path = _t.path\r\n        }\r\n\r\n        init() {\r\n        }\r\n    }\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5935", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5935/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5935/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5935/events", "html_url": "https://github.com/google/flatbuffers/issues/5935", "id": 627122201, "node_id": "MDU6SXNzdWU2MjcxMjIyMDE=", "number": 5935, "title": "[Swift] Enums case values in Swift are converted to all lowercase.", "user": {"login": "kennycarruthers", "id": 15756, "node_id": "MDQ6VXNlcjE1NzU2", "avatar_url": "https://avatars0.githubusercontent.com/u/15756?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennycarruthers", "html_url": "https://github.com/kennycarruthers", "followers_url": "https://api.github.com/users/kennycarruthers/followers", "following_url": "https://api.github.com/users/kennycarruthers/following{/other_user}", "gists_url": "https://api.github.com/users/kennycarruthers/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennycarruthers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennycarruthers/subscriptions", "organizations_url": "https://api.github.com/users/kennycarruthers/orgs", "repos_url": "https://api.github.com/users/kennycarruthers/repos", "events_url": "https://api.github.com/users/kennycarruthers/events{/privacy}", "received_events_url": "https://api.github.com/users/kennycarruthers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-29T09:12:30Z", "updated_at": "2020-06-04T21:11:56Z", "closed_at": "2020-06-04T16:14:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Enums declared using camelCase are converted to all lower case in the generated Swift code. The CPP generated code preserves the camelCase. Is it possible to preserve the case sensitivity in the Swift code? \r\n\r\n**Schema**\r\n\r\n    enum DatabaseMessage:int64 {\r\n      fetchRequest,\r\n      deleteRequest\r\n    }\r\n\r\n**Generated Swift Code**\r\n\r\n    public enum DatabaseMessage: Int64, Enum { \r\n        public typealias T = Int64\r\n        public static var byteSize: Int { return MemoryLayout<Int64>.size }\r\n        public var value: Int64 { return self.rawValue }\r\n        \r\n        case fetchrequest = 0\r\n        case deleterequest = 1\r\n        \r\n\r\n        public static var max: DatabaseMessage { return .deleterequest }\r\n        public static var min: DatabaseMessage { return .fetchrequest }\r\n    }\r\n\r\n**Generated CPP Code **\r\n\r\n    enum DatabaseMessage {\r\n      DatabaseMessage_fetchRequest = 0,\r\n      DatabaseMessage_deleteRequest = 1LL,\r\n      DatabaseMessage_MIN = DatabaseMessage_fetchRequest,\r\n      DatabaseMessage_MAX = DatabaseMessage_deleteRequest\r\n    };\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5933", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5933/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5933/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5933/events", "html_url": "https://github.com/google/flatbuffers/issues/5933", "id": 626708360, "node_id": "MDU6SXNzdWU2MjY3MDgzNjA=", "number": 5933, "title": "sizes[] in reflection.h does not include an entry for Array type", "user": {"login": "LaurentiuCristofor", "id": 29312258, "node_id": "MDQ6VXNlcjI5MzEyMjU4", "avatar_url": "https://avatars0.githubusercontent.com/u/29312258?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentiuCristofor", "html_url": "https://github.com/LaurentiuCristofor", "followers_url": "https://api.github.com/users/LaurentiuCristofor/followers", "following_url": "https://api.github.com/users/LaurentiuCristofor/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentiuCristofor/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentiuCristofor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentiuCristofor/subscriptions", "organizations_url": "https://api.github.com/users/LaurentiuCristofor/orgs", "repos_url": "https://api.github.com/users/LaurentiuCristofor/repos", "events_url": "https://api.github.com/users/LaurentiuCristofor/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentiuCristofor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-05-28T18:06:53Z", "updated_at": "2020-06-04T22:03:10Z", "closed_at": "2020-06-04T22:03:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The sizes array in reflection.h is defined as:\r\n\r\n`static size_t sizes[] = { 0, 1, 1, 1, 1, 2, 2, 4, 4, 8, 8, 4, 8, 4, 4, 4, 4 };`\r\n\r\nBut this is missing an entry for Array type, which was added to BaseType enum in reflection_generated.h.\r\n\r\nThere are only 17 entries in sizes[] compared to 18 in BaseType. sizes needs to be updated with a new \"4\" entry.\r\n\r\n```\r\nenum BaseType {\r\n  None = 0,\r\n  UType = 1,\r\n  Bool = 2,\r\n  Byte = 3,\r\n  UByte = 4,\r\n  Short = 5,\r\n  UShort = 6,\r\n  Int = 7,\r\n  UInt = 8,\r\n  Long = 9,\r\n  ULong = 10,\r\n  Float = 11,\r\n  Double = 12,\r\n  String = 13,\r\n  Vector = 14,\r\n  Obj = 15,\r\n  Union = 16,\r\n  Array = 17 <<< no entry for this in sizes[]\r\n};\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5932", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5932/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5932/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5932/events", "html_url": "https://github.com/google/flatbuffers/issues/5932", "id": 626316902, "node_id": "MDU6SXNzdWU2MjYzMTY5MDI=", "number": 5932, "title": "[Swift - Feature Request] Support --object-suffix option in generated Swift code.", "user": {"login": "kennycarruthers", "id": 15756, "node_id": "MDQ6VXNlcjE1NzU2", "avatar_url": "https://avatars0.githubusercontent.com/u/15756?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennycarruthers", "html_url": "https://github.com/kennycarruthers", "followers_url": "https://api.github.com/users/kennycarruthers/followers", "following_url": "https://api.github.com/users/kennycarruthers/following{/other_user}", "gists_url": "https://api.github.com/users/kennycarruthers/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennycarruthers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennycarruthers/subscriptions", "organizations_url": "https://api.github.com/users/kennycarruthers/orgs", "repos_url": "https://api.github.com/users/kennycarruthers/repos", "events_url": "https://api.github.com/users/kennycarruthers/events{/privacy}", "received_events_url": "https://api.github.com/users/kennycarruthers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-28T08:24:02Z", "updated_at": "2020-06-04T16:14:19Z", "closed_at": "2020-06-04T16:14:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "The new support for Swift is great, thank you. As a feature request, it would be nice if the generated code supported a few more of the IDL options related to naming. \r\n\r\nAt the moment, `idl_gen_swift.cpp` uses a hardcoded `T` suffix when naming the object APIs types. When interfacing with CPP code, this causes classnames on Swift to differ from the CPP counterparts. \r\n\r\nThis would apply to `--object-prefix` as well. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5931", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5931/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5931/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5931/events", "html_url": "https://github.com/google/flatbuffers/issues/5931", "id": 626034103, "node_id": "MDU6SXNzdWU2MjYwMzQxMDM=", "number": 5931, "title": "Performance Problem With Flatbuffers", "user": {"login": "tolgatanriverdi", "id": 1306155, "node_id": "MDQ6VXNlcjEzMDYxNTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1306155?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tolgatanriverdi", "html_url": "https://github.com/tolgatanriverdi", "followers_url": "https://api.github.com/users/tolgatanriverdi/followers", "following_url": "https://api.github.com/users/tolgatanriverdi/following{/other_user}", "gists_url": "https://api.github.com/users/tolgatanriverdi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tolgatanriverdi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tolgatanriverdi/subscriptions", "organizations_url": "https://api.github.com/users/tolgatanriverdi/orgs", "repos_url": "https://api.github.com/users/tolgatanriverdi/repos", "events_url": "https://api.github.com/users/tolgatanriverdi/events{/privacy}", "received_events_url": "https://api.github.com/users/tolgatanriverdi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-27T21:11:47Z", "updated_at": "2020-06-15T22:40:41Z", "closed_at": "2020-06-15T22:40:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello\r\nWe're developing a high frequency trading platform with C++ and we've tried implementing grpc with protobuf but we saw that a single network call tooks approximately 200-300 microseconds which is too long for us. What we are expecting to have as serializing/deserializing data through network socket is approximately 50-60 microseconds.\r\nThan we 've tried to use protobuf with native c++ sockets (with using non blocking i/o), we saw that this time performance became approximately 150-200 microseconds which was not enough for us. Than we saw flatbuffers and implemented it as described in below.  However during our tests we saw that only serializing (also same in deserializing) tooks approximately 50 microseconds and also transferring the data tooks 30-40 microseconds so totatly it tooks approximately 100-150 microseconds. So I wondered if we are doing something wrong in our implementation of flatbuffers. \r\n\r\nIn the below example, I've calculated the difference betwen timestamp logs are :\r\nTimestamp 1 -> Timestamp 2 = 16 microseconds\r\nTimestamp 2 -> Timestamp 3 = 24 microseconds\r\n\r\nTotal serialization = 40 microseconds\r\n\r\nDo you know any other way to increase the performance\r\n\r\n\r\nExample code for serializing data with flatbuffers in C++:\r\n```\r\nconst char* MAHelper::getRequest(BaseRequest *request,int& size) {\r\n    const char *result;\r\n\r\n    flatbuffers::FlatBufferBuilder builder(10240);\r\n    if (request->orderType == OrderTypes::TYPE_LoginRequest){\r\n        std::cout<<\"Timestamp 1: \"<<getCurrentTimestamp()<<std::endl;\r\n        LoginRequest *loginRequest = (LoginRequest*) request;\r\n        std::cout<<\"Converting Login Request 1: \"<<getCurrentTimestamp()<<std::endl;\r\n        auto username = builder.CreateString(loginRequest->userName);\r\n        auto password = builder.CreateString(loginRequest->password);\r\n        auto application = getApplication(loginRequest->applicationType);\r\n\r\n        std::cout<<\"Timestamp 2: \"<<getCurrentTimestamp()<<std::endl;\r\n        auto loginReq = piramit::orders::fb::CreateLoginRequest(builder,username,password,application);\r\n        auto loginOrderBase = piramit::orders::fb::CreateRequestHolder(builder,piramit::orders::fb::BaseRequest_LoginRequest,loginReq.Union());\r\n        builder.Finish(loginOrderBase);\r\n        std::cout<<\"Timestamp 3:\"<<getCurrentTimestamp()<<std::endl;\r\n    } else if (request->orderType == OrderTypes::TYPE_EnterOrderRequest) {\r\n        EnterOrderRequest *enterOrderRequest = (EnterOrderRequest*) request;\r\n        auto strategyIdentifier = builder.CreateString(enterOrderRequest->strategyIdentifier);\r\n        auto passThrough  = builder.CreateString(enterOrderRequest->passThrough);\r\n        auto account = builder.CreateString(enterOrderRequest->account);\r\n        auto authToken = builder.CreateString(enterOrderRequest->baseRequest.authToken);\r\n\r\n        auto enterOrderReq = piramit::orders::fb::CreateEnterOrder(builder,enterOrderRequest->orderbookId,enterOrderRequest->quantity,enterOrderRequest->price,account,\r\n                getStrategyType(enterOrderRequest->strategyType),strategyIdentifier,getSide(enterOrderRequest->side),getTimeInForce(enterOrderRequest->timeInForce),passThrough,getOrderType(enterOrderRequest->orderType));\r\n        auto enterOrderBase = piramit::orders::fb::CreateRequestHolder(builder,piramit::orders::fb::BaseRequest_EnterOrder,enterOrderReq.Union(),authToken);\r\n        builder.Finish(enterOrderBase);\r\n    } else if (request->orderType == OrderTypes::TYPE_ReplaceOrderRequest) {\r\n        ReplaceOrderRequest  *replaceOrderRequest = (ReplaceOrderRequest*) request;\r\n        auto orderToken = builder.CreateString(replaceOrderRequest->orderToken);\r\n        auto authToken = builder.CreateString(replaceOrderRequest->baseRequest.authToken);\r\n\r\n        auto replaceOrderReq = piramit::orders::fb::CreateReplaceOrder(builder,orderToken,replaceOrderRequest->quantity,replaceOrderRequest->price);\r\n        auto replaceOrderBase = piramit::orders::fb::CreateRequestHolder(builder,piramit::orders::fb::BaseRequest_ReplaceOrder,replaceOrderReq.Union(),authToken);\r\n        builder.Finish(replaceOrderBase);\r\n    } else if (request->orderType == OrderTypes::TYPE_CancelOrderRequest) {\r\n        CancelOrderRequest  *cancelOrderRequest = (CancelOrderRequest*) request;\r\n        auto orderToken = builder.CreateString(cancelOrderRequest->orderToken);\r\n        auto authToken = builder.CreateString(cancelOrderRequest->baseRequest.authToken);\r\n\r\n        auto cancelOrderReq = piramit::orders::fb::CreateCancelOrder(builder,orderToken);\r\n        auto cancelOrderBase = piramit::orders::fb::CreateRequestHolder(builder,piramit::orders::fb::BaseRequest_CancelOrder,cancelOrderReq.Union(),authToken);\r\n        builder.Finish(cancelOrderBase);\r\n    } else if (request->orderType == OrderTypes::TYPE_BasicOrderRequest) {\r\n        BasicOrderRequest  *basicOrderRequest = (BasicOrderRequest*) request;\r\n        auto authToken = builder.CreateString(basicOrderRequest->baseRequest.authToken);\r\n\r\n        auto basicOrderReq = piramit::orders::fb::CreateOrderRequest(builder,getOperationType(basicOrderRequest->operation),basicOrderRequest->orderId,getOrderType(basicOrderRequest->orderTypes));\r\n        auto basicOrderBase = piramit::orders::fb::CreateRequestHolder(builder,piramit::orders::fb::BaseRequest_OrderRequest,basicOrderReq.Union(),authToken);\r\n        builder.Finish(basicOrderBase);\r\n    } else if (request->orderType == OrderTypes::TYPE_AccountStrategyRequest) {\r\n        AccountStrategyRequest  *accountStrategyRequest = (AccountStrategyRequest*) request;\r\n\r\n        flatbuffers::Offset<flatbuffers::String> account = 0;\r\n        flatbuffers::Offset<flatbuffers::String> strategyIdentifier = 0;\r\n        auto authToken = builder.CreateString(accountStrategyRequest->baseRequest.authToken);\r\n\r\n        if (accountStrategyRequest->operation == OPERATION_SET) {\r\n            account = builder.CreateString(accountStrategyRequest->accountStrategy.account);\r\n            strategyIdentifier = builder.CreateString(accountStrategyRequest->accountStrategy.strategyIdentifier);\r\n        }\r\n        flatbuffers::Offset<piramit::orders::fb::AccountStrategy> accountStrategy = piramit::orders::fb::CreateAccountStrategy(builder,accountStrategyRequest->accountStrategy.orderBookId,account,getStrategyType(accountStrategyRequest->accountStrategy.strategyType),strategyIdentifier);\r\n\r\n        auto accountStrategyReq = piramit::orders::fb::CreateAccountStrategyRequest(builder,getOperationType(accountStrategyRequest->operation),accountStrategy);\r\n        auto accountStrategyBase = piramit::orders::fb::CreateRequestHolder(builder,piramit::orders::fb::BaseRequest_AccountStrategyRequest,accountStrategyReq.Union(),authToken);\r\n        builder.Finish(accountStrategyBase);\r\n    } else if (request->orderType == OrderTypes::TYPE_OrderBookStateRequest) {\r\n        OrderBookStateRequest  *orderBookStateRequest = (OrderBookStateRequest*) request;\r\n\r\n        auto stateName = builder.CreateString(orderBookStateRequest->stateName);\r\n        auto orderBookStateReq = piramit::orders::fb::CreateOrderBookStateRequest(builder,stateName,orderBookStateRequest->orderBookId,orderBookStateRequest->timestamp);\r\n        auto orderBookStateBase = piramit::orders::fb::CreateRequestHolder(builder,piramit::orders::fb::BaseRequest_OrderBookStateRequest,orderBookStateReq.Union());\r\n        builder.Finish(orderBookStateBase);\r\n    }\r\n\r\n    uint8_t *requestBuffer = builder.GetBufferPointer();\r\n    result = (const char*) requestBuffer;\r\n    size = builder.GetSize();\r\n\r\n    return result;\r\n}\r\n```\r\n\r\nAnd also this is part of our schema in flatbuffers\r\n\r\n\r\n```\r\nunion BaseRequest { LoginRequest,EnterOrder,CancelOrder,ReplaceOrder,OrderRequest,AccountStrategyRequest,OrderBookStateRequest }\r\n\r\ntable RequestHolder  {\r\n  request:BaseRequest;\r\n  authToken:string;\r\n}\r\n\r\ntable LoginRequest {\r\n    username:string;\r\n    password:string;\r\n    application:Application = APP_UNKNOWN;\r\n}\r\n\r\ntable EnterOrder{\r\n    order_book_id:uint;\r\n    quantity:ulong;\r\n    price:int;\r\n    account:string;\r\n    strategy:StrategyType;\r\n    strategy_identifier:string;\r\n    side:Side;\r\n    time_in_force:TimeInForce;\r\n    pass_through:string;\r\n    order_type:OrderType;\r\n}\r\n\r\nroot_type RequestHolder;\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5930", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5930/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5930/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5930/events", "html_url": "https://github.com/google/flatbuffers/issues/5930", "id": 625102952, "node_id": "MDU6SXNzdWU2MjUxMDI5NTI=", "number": 5930, "title": "\"Class-memaccess\" compilation error in test [C++, gcc 10.1.0, Flatbuffers 1.12.0/master]", "user": {"login": "bakinovsky-m", "id": 22251458, "node_id": "MDQ6VXNlcjIyMjUxNDU4", "avatar_url": "https://avatars3.githubusercontent.com/u/22251458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bakinovsky-m", "html_url": "https://github.com/bakinovsky-m", "followers_url": "https://api.github.com/users/bakinovsky-m/followers", "following_url": "https://api.github.com/users/bakinovsky-m/following{/other_user}", "gists_url": "https://api.github.com/users/bakinovsky-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/bakinovsky-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bakinovsky-m/subscriptions", "organizations_url": "https://api.github.com/users/bakinovsky-m/orgs", "repos_url": "https://api.github.com/users/bakinovsky-m/repos", "events_url": "https://api.github.com/users/bakinovsky-m/events{/privacy}", "received_events_url": "https://api.github.com/users/bakinovsky-m/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-26T18:42:07Z", "updated_at": "2020-06-02T00:58:53Z", "closed_at": "2020-06-02T00:58:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Compilation is failing on tests when using gcc 10.1.0.\r\n\r\n```In file included from flatbuffers/tests/test.cpp:39:\r\nflatbuffers/tests/arrays_test_generated.h: In constructor \u2018MyGame::Example::ArrayStruct::ArrayStruct(float, int8_t, int32_t)\u2019:\r\nflatbuffers/tests/arrays_test_generated.h:156:34: error: \u2018void* memset(void*, int, size_t)\u2019 clearing an object of non-trivial type \u2018struct MyGame::Example::NestedStruct\u2019; use assignment or value-initialization instead [-Werror=class-memaccess]\r\n  156 |     std::memset(d_, 0, sizeof(d_));\r\n      |                                  ^\r\nflatbuffers/tests/arrays_test_generated.h:66:40: note: \u2018struct MyGame::Example::NestedStruct\u2019 declared here\r\n   66 | FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) NestedStruct FLATBUFFERS_FINAL_CLASS {\r\n      |                                        ^~~~~~~~~~~~\r\n```\r\n\r\nMaster branch and v1.12.0 tag are affected, didn't test other tags\r\n\r\n**Setup**\r\n* gcc 10.1.0\r\n* flatbuffers 1.12.0 or master\r\n\r\n**Reproducing**\r\n* cd to flatbuffers folders\r\n* run:\r\n```bash \r\n$ mkdir build && cd build\r\n$ cmake .. #FLATBUFFERS_BUILD_TESTS is enabled by default\r\n$ cmake --build .", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5929", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5929/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5929/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5929/events", "html_url": "https://github.com/google/flatbuffers/issues/5929", "id": 625062563, "node_id": "MDU6SXNzdWU2MjUwNjI1NjM=", "number": 5929, "title": "Vtable performance tradeoffs", "user": {"login": "wesboyt", "id": 30701972, "node_id": "MDQ6VXNlcjMwNzAxOTcy", "avatar_url": "https://avatars0.githubusercontent.com/u/30701972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesboyt", "html_url": "https://github.com/wesboyt", "followers_url": "https://api.github.com/users/wesboyt/followers", "following_url": "https://api.github.com/users/wesboyt/following{/other_user}", "gists_url": "https://api.github.com/users/wesboyt/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesboyt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesboyt/subscriptions", "organizations_url": "https://api.github.com/users/wesboyt/orgs", "repos_url": "https://api.github.com/users/wesboyt/repos", "events_url": "https://api.github.com/users/wesboyt/events{/privacy}", "received_events_url": "https://api.github.com/users/wesboyt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-26T17:40:55Z", "updated_at": "2020-05-27T02:05:04Z", "closed_at": "2020-05-27T02:05:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5927", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5927/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5927/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5927/events", "html_url": "https://github.com/google/flatbuffers/issues/5927", "id": 624156567, "node_id": "MDU6SXNzdWU2MjQxNTY1Njc=", "number": 5927, "title": "Mutable API is broken in TypeScript", "user": {"login": "taphos", "id": 9436998, "node_id": "MDQ6VXNlcjk0MzY5OTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/9436998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taphos", "html_url": "https://github.com/taphos", "followers_url": "https://api.github.com/users/taphos/followers", "following_url": "https://api.github.com/users/taphos/following{/other_user}", "gists_url": "https://api.github.com/users/taphos/gists{/gist_id}", "starred_url": "https://api.github.com/users/taphos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taphos/subscriptions", "organizations_url": "https://api.github.com/users/taphos/orgs", "repos_url": "https://api.github.com/users/taphos/repos", "events_url": "https://api.github.com/users/taphos/events{/privacy}", "received_events_url": "https://api.github.com/users/taphos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-25T09:03:22Z", "updated_at": "2020-06-05T09:14:23Z", "closed_at": "2020-06-04T16:08:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "TypeScript code generated with --gen-mutable flag is:\r\n```\r\ny():number {\r\n  return this.bb!.readFloat64(this.bb_pos + 8);\r\n};\r\n\r\nmutate_y(value:number):boolean {\r\n  var offset = this.bb!.__offset(this.bb_pos, 8);\r\n\r\n  if (offset === 0) {\r\n    return false;\r\n  }\r\n\r\n  this.bb!.writeFloat64(this.bb_pos + offset, value);\r\n  return true;\r\n};\r\n```\r\n\r\nbut it should be instead:\r\n```\r\nmutate_y(value:number):boolean {\r\n  this.bb!.writeFloat64(this.bb_pos + 8, value);\r\n  return true;\r\n};\r\n```\r\n\r\nflatc version 1.12.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5923", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5923/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5923/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5923/events", "html_url": "https://github.com/google/flatbuffers/issues/5923", "id": 622146860, "node_id": "MDU6SXNzdWU2MjIxNDY4NjA=", "number": 5923, "title": "flatbuffers installer for winget", "user": {"login": "lutzroeder", "id": 438516, "node_id": "MDQ6VXNlcjQzODUxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/438516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lutzroeder", "html_url": "https://github.com/lutzroeder", "followers_url": "https://api.github.com/users/lutzroeder/followers", "following_url": "https://api.github.com/users/lutzroeder/following{/other_user}", "gists_url": "https://api.github.com/users/lutzroeder/gists{/gist_id}", "starred_url": "https://api.github.com/users/lutzroeder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lutzroeder/subscriptions", "organizations_url": "https://api.github.com/users/lutzroeder/orgs", "repos_url": "https://api.github.com/users/lutzroeder/repos", "events_url": "https://api.github.com/users/lutzroeder/events{/privacy}", "received_events_url": "https://api.github.com/users/lutzroeder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-20T23:30:16Z", "updated_at": "2020-07-19T23:32:28Z", "closed_at": "2020-07-19T23:32:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Make `flatc` available via [winget](https://github.com/microsoft/winget-cli).\r\n\r\n```\r\nC:\\Users\\<username>\\Desktop>winget install flatbuffers\r\nNo app found matching input criteria.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5914", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5914/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5914/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5914/events", "html_url": "https://github.com/google/flatbuffers/issues/5914", "id": 619064441, "node_id": "MDU6SXNzdWU2MTkwNjQ0NDE=", "number": 5914, "title": "[TS] Flatbuffers generates invalid methods", "user": {"login": "stephanemagnenat", "id": 390278, "node_id": "MDQ6VXNlcjM5MDI3OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/390278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stephanemagnenat", "html_url": "https://github.com/stephanemagnenat", "followers_url": "https://api.github.com/users/stephanemagnenat/followers", "following_url": "https://api.github.com/users/stephanemagnenat/following{/other_user}", "gists_url": "https://api.github.com/users/stephanemagnenat/gists{/gist_id}", "starred_url": "https://api.github.com/users/stephanemagnenat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stephanemagnenat/subscriptions", "organizations_url": "https://api.github.com/users/stephanemagnenat/orgs", "repos_url": "https://api.github.com/users/stephanemagnenat/repos", "events_url": "https://api.github.com/users/stephanemagnenat/events{/privacy}", "received_events_url": "https://api.github.com/users/stephanemagnenat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-05-15T15:35:51Z", "updated_at": "2020-05-18T17:36:04Z", "closed_at": "2020-05-18T16:39:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using flatc version 1.12.0 with Typescript, if one has a struct in a table, such as:\r\n```\r\nstruct S {\r\n    u: uint32;\r\n}\r\ntable T {\r\n    u: uint32;\r\n    s: S;\r\n}\r\n```\r\nflatc generates the function:\r\n```\r\nstatic createT(builder: flatbuffers.Builder, u: number, sOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n    T.startT(builder);\r\n    T.addU(builder, u);\r\n    T.addS(builder, sOffset);\r\n    return T.endT(builder);\r\n}\r\n```\r\nbut calling this function generates the following error:\r\n```\r\nFlatBuffers: struct must be serialized inline.\r\n```\r\nSo, flatc generates invalid code. I think flatc should simply not generate invalid create helpers.\r\n\r\nNote that this was already pointed out in issue #5167.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5908", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5908/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5908/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5908/events", "html_url": "https://github.com/google/flatbuffers/issues/5908", "id": 615675794, "node_id": "MDU6SXNzdWU2MTU2NzU3OTQ=", "number": 5908, "title": "[Java, 1.12.0] ArrayReadWriteBuf does not check if new capacity is large enough", "user": {"login": "greenrobot-team", "id": 13865709, "node_id": "MDQ6VXNlcjEzODY1NzA5", "avatar_url": "https://avatars3.githubusercontent.com/u/13865709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/greenrobot-team", "html_url": "https://github.com/greenrobot-team", "followers_url": "https://api.github.com/users/greenrobot-team/followers", "following_url": "https://api.github.com/users/greenrobot-team/following{/other_user}", "gists_url": "https://api.github.com/users/greenrobot-team/gists{/gist_id}", "starred_url": "https://api.github.com/users/greenrobot-team/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/greenrobot-team/subscriptions", "organizations_url": "https://api.github.com/users/greenrobot-team/orgs", "repos_url": "https://api.github.com/users/greenrobot-team/repos", "events_url": "https://api.github.com/users/greenrobot-team/events{/privacy}", "received_events_url": "https://api.github.com/users/greenrobot-team/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-11T08:02:08Z", "updated_at": "2020-06-05T02:49:24Z", "closed_at": "2020-06-05T02:49:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`ArrayReadWriteBuf.requestCapacity()` does not check if the new capacity is actually large enough to fit the requested capacity.\r\n\r\nhttps://github.com/google/flatbuffers/blob/12ed1fe4a92942d3dc5c7bd440cfaa4dc301c0c5/java/com/google/flatbuffers/ArrayReadWriteBuf.java#L236-L245\r\n\r\nIf putting a large enough String then `ArrayIndexOutOfBoundsException` occurs:\r\n```java\r\nArrayReadWriteBuf buf = new ArrayReadWriteBuf(/* Initial capacity 10 */);\r\nFlexBuffersBuilder builder = new FlexBuffersBuilder(buf,\r\n        FlexBuffersBuilder.BUILDER_FLAG_SHARE_KEYS_AND_STRINGS);\r\nint mapStart = builder.startMap();\r\nbuilder.putString(\"greet\", \"Welcome!!\");\r\nbuilder.endMap(null, mapStart);\r\nbuilder.finish();\r\n```\r\n```\r\njava.lang.ArrayIndexOutOfBoundsException: arraycopy: last destination index 16 out of bounds for byte[15]\r\n\tat java.base/java.lang.System.arraycopy(Native Method)\r\n\tat com.google.flatbuffers.ArrayReadWriteBuf.set(ArrayReadWriteBuf.java:155)\r\n\tat com.google.flatbuffers.ArrayReadWriteBuf.put(ArrayReadWriteBuf.java:101)\r\n\tat com.google.flatbuffers.FlexBuffersBuilder.writeBlob(FlexBuffersBuilder.java:383)\r\n\tat com.google.flatbuffers.FlexBuffersBuilder.writeString(FlexBuffersBuilder.java:367)\r\n\tat com.google.flatbuffers.FlexBuffersBuilder.putString(FlexBuffersBuilder.java:350)\r\n```\r\n\r\nEdit: is this a bug? If it is by design, how to best avoid it (e.g. re-try put)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5906", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5906/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5906/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5906/events", "html_url": "https://github.com/google/flatbuffers/issues/5906", "id": 615348445, "node_id": "MDU6SXNzdWU2MTUzNDg0NDU=", "number": 5906, "title": "The `flatc` must reject `struct` with fields of type `Array of table`", "user": {"login": "vglavnyy", "id": 31897320, "node_id": "MDQ6VXNlcjMxODk3MzIw", "avatar_url": "https://avatars0.githubusercontent.com/u/31897320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vglavnyy", "html_url": "https://github.com/vglavnyy", "followers_url": "https://api.github.com/users/vglavnyy/followers", "following_url": "https://api.github.com/users/vglavnyy/following{/other_user}", "gists_url": "https://api.github.com/users/vglavnyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/vglavnyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vglavnyy/subscriptions", "organizations_url": "https://api.github.com/users/vglavnyy/orgs", "repos_url": "https://api.github.com/users/vglavnyy/repos", "events_url": "https://api.github.com/users/vglavnyy/events{/privacy}", "received_events_url": "https://api.github.com/users/vglavnyy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-10T09:01:56Z", "updated_at": "2020-05-14T18:41:30Z", "closed_at": "2020-05-14T18:41:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": ">**Structs**\r\n>\r\n>Similar to a table, only now none of the fields are optional (so no defaults either), and fields may not >be added or be deprecated. Structs may only contain scalars or other structs.\r\n\r\nFor example, the following schema is invalid because `Bar` isn't scalar or struct:\r\n```js\r\ntable Foo { f :int; }\r\nstruct Bar{ b: Foo }\r\n```\r\nWith this schema the compiler returns an error:\r\n>arrays_test.fbs(23, 12): error: structs_ may contain only scalar or struct fields\r\n\r\nI think that the next schema with `Array` also is invalid:\r\n```js\r\ntable Foo { f :int; }\r\nstruct Bar{ \r\n  b: [Foo:5] // <- Array of pointers\r\n}\r\n```\r\nBut `flatc` accepts this without errors.\r\nGenerated `struct Foo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table` isn't trivial type.\r\nGenerated fixed-size array of `Foo` also isn't trivial type. \r\n\r\n@aardappel what do think?\r\n\r\n_PS: There are only positive tests of `flatc` compiler._\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5901", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5901/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5901/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5901/events", "html_url": "https://github.com/google/flatbuffers/issues/5901", "id": 614988868, "node_id": "MDU6SXNzdWU2MTQ5ODg4Njg=", "number": 5901, "title": "[Dart] Tests are failing on master", "user": {"login": "dbaileychess", "id": 1477247, "node_id": "MDQ6VXNlcjE0NzcyNDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1477247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbaileychess", "html_url": "https://github.com/dbaileychess", "followers_url": "https://api.github.com/users/dbaileychess/followers", "following_url": "https://api.github.com/users/dbaileychess/following{/other_user}", "gists_url": "https://api.github.com/users/dbaileychess/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbaileychess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbaileychess/subscriptions", "organizations_url": "https://api.github.com/users/dbaileychess/orgs", "repos_url": "https://api.github.com/users/dbaileychess/repos", "events_url": "https://api.github.com/users/dbaileychess/events{/privacy}", "received_events_url": "https://api.github.com/users/dbaileychess/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-08T21:10:15Z", "updated_at": "2020-05-13T17:26:33Z", "closed_at": "2020-05-13T17:26:33Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Running the Dart Tests fails:\r\n\r\n```\r\ncd tests/\r\n./DartTest.sh\r\n```\r\nLeads to a bunch of import errors:\r\n```\r\ntest/monster_test_my_game.example_generated.dart:9:8: Error: Error when reading 'test/include_test1_my_game.example_generated.dart': No such file or directory\r\nimport 'include_test1_my_game.example_generated.dart';\r\n       ^\r\ntest/monster_test_my_game.example_generated.dart:10:8: Error: Error when reading 'test/include_test2_my_game.example_generated.dart': No such file or directory\r\nimport 'include_test2_my_game.example_generated.dart';\r\n       ^\r\ntest/monster_test_my_game_generated.dart:9:8: Error: Error when reading 'test/include_test1_my_game_generated.dart': No such file or directory\r\nimport 'include_test1_my_game_generated.dart';\r\n       ^\r\ntest/monster_test_my_game_generated.dart:10:8: Error: Error when reading 'test/include_test2_my_game_generated.dart': No such file or directory\r\nimport 'include_test2_my_game_generated.dart';\r\n       ^\r\ntest/monster_test_my_game.example2_generated.dart:9:8: Error: Error when reading 'test/include_test1_my_game.example2_generated.dart': No such file or directory\r\nimport 'include_test1_my_game.example2_generated.dart';\r\n       ^\r\ntest/monster_test_my_game.example2_generated.dart:10:8: Error: Error when reading 'test/include_test2_my_game.example2_generated.dart': No such file or directory\r\nimport 'include_test2_my_game.example2_generated.dart';\r\n       ^\r\ntest/monster_test_my_game.example_generated.dart:789:22: Error: The getter 'M' isn't defined for the class 'Monster'.\r\n - 'Monster' is from 'test/monster_test_my_game.example_generated.dart'.\r\nTry correcting the name to the name of an existing getter, or defining a getter or field named 'M'.\r\n      case 1: return M.reader.vTableGet(_bc, _bcOffset, 92, null);\r\n                     ^\r\ntest/monster_test_my_game.example_generated.dart:790:22: Error: The getter 'TS' isn't defined for the class 'Monster'.\r\n - 'Monster' is from 'test/monster_test_my_game.example_generated.dart'.\r\nTry correcting the name to the name of an existing getter, or defining a getter or field named 'TS'.\r\n      case 2: return TS.reader.vTableGet(_bc, _bcOffset, 92, null);\r\n                     ^^\r\ntest/monster_test_my_game.example_generated.dart:791:22: Error: The getter 'M2' isn't defined for the class 'Monster'.\r\n - 'Monster' is from 'test/monster_test_my_game.example_generated.dart'.\r\nTry correcting the name to the name of an existing getter, or defining a getter or field named 'M2'.\r\n      case 3: return M2.reader.vTableGet(_bc, _bcOffset, 92, null);\r\n                     ^^\r\ntest/monster_test_my_game.example_generated.dart:798:22: Error: The getter 'M1' isn't defined for the class 'Monster'.\r\n - 'Monster' is from 'test/monster_test_my_game.example_generated.dart'.\r\nTry correcting the name to the name of an existing getter, or defining a getter or field named 'M1'.\r\n      case 1: return M1.reader.vTableGet(_bc, _bcOffset, 96, null);\r\n                     ^^\r\n```\r\n\r\nRunning: `Dart VM version: 2.8.1 (stable)`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5897", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5897/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5897/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5897/events", "html_url": "https://github.com/google/flatbuffers/issues/5897", "id": 614158445, "node_id": "MDU6SXNzdWU2MTQxNTg0NDU=", "number": 5897, "title": "[TS] Obj-based-API doesn't work with --short-name", "user": {"login": "khoitd1997", "id": 20428458, "node_id": "MDQ6VXNlcjIwNDI4NDU4", "avatar_url": "https://avatars3.githubusercontent.com/u/20428458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khoitd1997", "html_url": "https://github.com/khoitd1997", "followers_url": "https://api.github.com/users/khoitd1997/followers", "following_url": "https://api.github.com/users/khoitd1997/following{/other_user}", "gists_url": "https://api.github.com/users/khoitd1997/gists{/gist_id}", "starred_url": "https://api.github.com/users/khoitd1997/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khoitd1997/subscriptions", "organizations_url": "https://api.github.com/users/khoitd1997/orgs", "repos_url": "https://api.github.com/users/khoitd1997/repos", "events_url": "https://api.github.com/users/khoitd1997/events{/privacy}", "received_events_url": "https://api.github.com/users/khoitd1997/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-07T15:44:06Z", "updated_at": "2020-05-11T21:55:58Z", "closed_at": "2020-05-11T21:55:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi I made a PR for the TS obj-based-api a while back, while using it, I noticed that it doesn't work with the --short-name option. I will make a PR to correct this.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5896", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5896/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5896/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5896/events", "html_url": "https://github.com/google/flatbuffers/issues/5896", "id": 613590275, "node_id": "MDU6SXNzdWU2MTM1OTAyNzU=", "number": 5896, "title": "[Swift] Incorrect boolean default value when decoding", "user": {"login": "cfchristian2", "id": 18543983, "node_id": "MDQ6VXNlcjE4NTQzOTgz", "avatar_url": "https://avatars3.githubusercontent.com/u/18543983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cfchristian2", "html_url": "https://github.com/cfchristian2", "followers_url": "https://api.github.com/users/cfchristian2/followers", "following_url": "https://api.github.com/users/cfchristian2/following{/other_user}", "gists_url": "https://api.github.com/users/cfchristian2/gists{/gist_id}", "starred_url": "https://api.github.com/users/cfchristian2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cfchristian2/subscriptions", "organizations_url": "https://api.github.com/users/cfchristian2/orgs", "repos_url": "https://api.github.com/users/cfchristian2/repos", "events_url": "https://api.github.com/users/cfchristian2/events{/privacy}", "received_events_url": "https://api.github.com/users/cfchristian2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-06T20:24:32Z", "updated_at": "2020-05-08T14:13:43Z", "closed_at": "2020-05-08T14:13:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "In idl_gen_swift.cpp in the function `void GenTableReaderFields(const FieldDef &field)`, the code generated for boolean variable declarations always defaults that variable to false if it's not packed in the flatbuffer, which would lead to the incorrect value being parsed if the default value for that variable is true and serialize defaults is set to false.\r\n\r\nTested it out with serialize defaults set to true and got the correct value. As that's not really a desirable fix, I tested this out in the code generation and got the correct value without having to serialize defaults:\r\n\r\n```cpp\r\nif (IsBool(field.value.type.base_type)) {\r\n      std::string default_value =\r\n               \"0\" == field.value.constant ? \"false\" : \"true\";\r\n      code_.SetValue(\"VALUETYPE\", \"Bool\");\r\n      code_ += GenReaderMainBody() + \"\\\\\";\r\n      code_.SetValue(\"VALUETYPE\", \"Byte\");\r\n      code_ += GenOffset() +\r\n               \"return o == 0 ? \" + default_value + \" : 0 != \" +\r\n               GenReader(\"VALUETYPE\", \"o\") + \" }\";\r\n      if (parser_.opts.mutable_buffer) code_ += GenMutate(\"o\", GenOffset());\r\n      return;\r\n }\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5893", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5893/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5893/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5893/events", "html_url": "https://github.com/google/flatbuffers/issues/5893", "id": 613416671, "node_id": "MDU6SXNzdWU2MTM0MTY2NzE=", "number": 5893, "title": "[Rust] Invalid use statements generated", "user": {"login": "krojew", "id": 1268573, "node_id": "MDQ6VXNlcjEyNjg1NzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1268573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krojew", "html_url": "https://github.com/krojew", "followers_url": "https://api.github.com/users/krojew/followers", "following_url": "https://api.github.com/users/krojew/following{/other_user}", "gists_url": "https://api.github.com/users/krojew/gists{/gist_id}", "starred_url": "https://api.github.com/users/krojew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krojew/subscriptions", "organizations_url": "https://api.github.com/users/krojew/orgs", "repos_url": "https://api.github.com/users/krojew/repos", "events_url": "https://api.github.com/users/krojew/events{/privacy}", "received_events_url": "https://api.github.com/users/krojew/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-06T15:37:44Z", "updated_at": "2020-05-07T23:21:31Z", "closed_at": "2020-05-07T23:21:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When importing another schema in one having a namespace, a bunch of duplicated (and invalid) use statements is generated when using --gen-all, e.g.\r\n\r\na.fbs\r\n```\r\nnamespace A;\r\n\r\ntable A {}\r\n\r\nroot_type A;\r\n\r\n```\r\n\r\nb.fbs\r\n```\r\ninclude \"a.fbs\";\r\n\r\nnamespace A;\r\n\r\ntable B {\r\n  a:A;\r\n}\r\n\r\nroot_type B;\r\n```\r\n\r\nResults in:\r\n\r\n```\r\nuse crate::a_generated::*;\r\nuse std::mem;\r\nuse std::cmp::Ordering;\r\n\r\nextern crate flatbuffers;\r\nuse self::flatbuffers::EndianScalar;\r\n\r\n#[allow(unused_imports, dead_code)]\r\npub mod a {\r\n\r\n  use crate::a_generated::*;\r\n  use std::mem;\r\n  use std::cmp::Ordering;\r\n```\r\n\r\nNotice double `use crate::a_generated::*;` which are invalid.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5892", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5892/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5892/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5892/events", "html_url": "https://github.com/google/flatbuffers/issues/5892", "id": 613383337, "node_id": "MDU6SXNzdWU2MTMzODMzMzc=", "number": 5892, "title": "[Swift] UTF8 strings are packed with the wrong byte size", "user": {"login": "cfchristian2", "id": 18543983, "node_id": "MDQ6VXNlcjE4NTQzOTgz", "avatar_url": "https://avatars3.githubusercontent.com/u/18543983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cfchristian2", "html_url": "https://github.com/cfchristian2", "followers_url": "https://api.github.com/users/cfchristian2/followers", "following_url": "https://api.github.com/users/cfchristian2/following{/other_user}", "gists_url": "https://api.github.com/users/cfchristian2/gists{/gist_id}", "starred_url": "https://api.github.com/users/cfchristian2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cfchristian2/subscriptions", "organizations_url": "https://api.github.com/users/cfchristian2/orgs", "repos_url": "https://api.github.com/users/cfchristian2/repos", "events_url": "https://api.github.com/users/cfchristian2/events{/privacy}", "received_events_url": "https://api.github.com/users/cfchristian2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-06T14:52:30Z", "updated_at": "2020-05-08T14:13:29Z", "closed_at": "2020-05-08T14:13:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "FlatBufferBuilder uses str.count instead of str.utf8.count, which doesn't give the correct byte size of the passed in string since utf8 characters are of variable length (FlatBufferBuilder.swift, create(string:) method, line 414 in the current version on Master).\r\n\r\nIn Swift >=5, there shouldn't be a complexity penalty for using str.utf8.count.\r\n\r\nI've only gotten ASCII characters to work when packing/unpacking strings. Here's a test that fails:\r\n\r\n```swift\r\nlet testString = \"\u72d7\u8df3\u904e\u67f5\u6b04\u72d7\u8df3\u904e\u67f5\u6b04\u72d7\u8df3\u904e\u67f5\u6b04\u72d7\u8df3\u904e\u67f5\u6b04\"\r\n\r\nvar builder = FlatBufferBuilder()\r\nbuilder.finish(\r\n    offset: Test.createTest(\r\n        &builder,\r\n        offsetOfTest: builder.create(string: testString)\r\n    )\r\n)\r\n\r\nlet unpacked = Test.getRootAsTest(bb: ByteBuffer(bytes: builder.sizedByteArray))\r\nlet string = unpacked.test\r\n```\r\n\r\nSwitching `let len = str.count` to `let len = str.utf8.count` yields the correct result.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5891", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5891/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5891/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5891/events", "html_url": "https://github.com/google/flatbuffers/issues/5891", "id": 612962817, "node_id": "MDU6SXNzdWU2MTI5NjI4MTc=", "number": 5891, "title": "[Swift] Crash when trying to load FlatBuffer from byte array", "user": {"login": "cfchristian2", "id": 18543983, "node_id": "MDQ6VXNlcjE4NTQzOTgz", "avatar_url": "https://avatars3.githubusercontent.com/u/18543983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cfchristian2", "html_url": "https://github.com/cfchristian2", "followers_url": "https://api.github.com/users/cfchristian2/followers", "following_url": "https://api.github.com/users/cfchristian2/following{/other_user}", "gists_url": "https://api.github.com/users/cfchristian2/gists{/gist_id}", "starred_url": "https://api.github.com/users/cfchristian2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cfchristian2/subscriptions", "organizations_url": "https://api.github.com/users/cfchristian2/orgs", "repos_url": "https://api.github.com/users/cfchristian2/repos", "events_url": "https://api.github.com/users/cfchristian2/events{/privacy}", "received_events_url": "https://api.github.com/users/cfchristian2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-05T23:50:17Z", "updated_at": "2020-05-06T00:20:55Z", "closed_at": "2020-05-06T00:20:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I'm trying to convert over to this official Swift implementation from mzaks' implementation, and I'm running into trouble creating a FlatBuffer object from a byte array.\r\n\r\n```swift\r\nlet buffer = ByteButter(bytes: message.payload) // [UInt8] received in a callback\r\nlet handshake = RtcHandshake.getRootAsRtcHandshake(bb: buffer)\r\n\r\nswitch handshake.messageType {\r\n...\r\n```\r\n\r\nWhenever I try to access handshake's messageType (UInt8 enum), or any of handshake's variables, I get this error: \r\n\r\n```\r\nFatal error: load from misaligned raw pointer: file /AppleInternal/BuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-1103.2.25.8/swift/stdlib/public/core/UnsafeRawPointer.swift, line 900\r\n2020-05-05 18:33:54.548035-0500 IoT Platform Sample iOS App[929:606853] Fatal error: load from misaligned raw pointer: file /AppleInternal/BuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-1103.2.25.8/swift/stdlib/public/core/UnsafeRawPointer.swift, line 900\r\n```\r\n\r\nThe Table's position variable will be something in the billions (eg. 1701209711).\r\n\r\nI'm using the latest version of master to generate the Swift code and I'm directly dropping in the Swift's source files from master as well.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5889", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5889/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5889/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5889/events", "html_url": "https://github.com/google/flatbuffers/issues/5889", "id": 612715081, "node_id": "MDU6SXNzdWU2MTI3MTUwODE=", "number": 5889, "title": "[Java] Make FlexBuffersBuilder reusable", "user": {"login": "greenrobot", "id": 242242, "node_id": "MDQ6VXNlcjI0MjI0Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/242242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/greenrobot", "html_url": "https://github.com/greenrobot", "followers_url": "https://api.github.com/users/greenrobot/followers", "following_url": "https://api.github.com/users/greenrobot/following{/other_user}", "gists_url": "https://api.github.com/users/greenrobot/gists{/gist_id}", "starred_url": "https://api.github.com/users/greenrobot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/greenrobot/subscriptions", "organizations_url": "https://api.github.com/users/greenrobot/orgs", "repos_url": "https://api.github.com/users/greenrobot/repos", "events_url": "https://api.github.com/users/greenrobot/events{/privacy}", "received_events_url": "https://api.github.com/users/greenrobot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-05T16:01:19Z", "updated_at": "2020-05-11T09:15:08Z", "closed_at": "2020-05-11T09:14:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "FlexBuffersBuilder is a somewhat heavyweight object. For bulk operations reusing makes sense.\r\n\r\nTo be aligned this FlatBufferBuilder, I guess we should also have a clear() method.\r\n\r\nThis should do:\r\n\r\n    /**\r\n     * Reset the FlexBuffersBuilder by purging all data that it holds.\r\n     */\r\n    public void clear() {\r\n        bb.clear(); // Does not exist yet\r\n        stack.clear();\r\n        keyPool.clear();\r\n        stringPool.clear();\r\n        finished = true;\r\n    }\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5882", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5882/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5882/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5882/events", "html_url": "https://github.com/google/flatbuffers/issues/5882", "id": 610433123, "node_id": "MDU6SXNzdWU2MTA0MzMxMjM=", "number": 5882, "title": "Generated Verifier says valid buffer, but convert to JSON fails", "user": {"login": "demir9", "id": 64441670, "node_id": "MDQ6VXNlcjY0NDQxNjcw", "avatar_url": "https://avatars0.githubusercontent.com/u/64441670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/demir9", "html_url": "https://github.com/demir9", "followers_url": "https://api.github.com/users/demir9/followers", "following_url": "https://api.github.com/users/demir9/following{/other_user}", "gists_url": "https://api.github.com/users/demir9/gists{/gist_id}", "starred_url": "https://api.github.com/users/demir9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/demir9/subscriptions", "organizations_url": "https://api.github.com/users/demir9/orgs", "repos_url": "https://api.github.com/users/demir9/repos", "events_url": "https://api.github.com/users/demir9/events{/privacy}", "received_events_url": "https://api.github.com/users/demir9/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-30T22:36:11Z", "updated_at": "2020-05-05T01:02:07Z", "closed_at": "2020-05-05T01:02:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have generated C++ code for the following:\r\n\r\nenum TableColor:byte { TableRed = 0, TableGreen, TableBlue = 2 }     \r\ntable TableB {     y: int;     }    \r\ntable VectorTable {     \r\n  a: [int];     \r\n  b: [TableColor];     \r\n  c: [string];     \r\n  d: [TableB];    \r\n  e: [TableB];     \r\n}    \r\nroot_type VectorTable;\r\n\r\nWe give it junk buffer data. Sometimes the generated verifier returns true:\r\n\r\nauto verifier = flatbuffers::Verifier(buffer, size);\r\nVerifyVectorTableBuffer(verifier); // true\r\n\r\n meaning it is valid buffer (somehow?). \r\n\r\nBut then converting the buffer to JSON fails with a crash like:\r\n\r\n==2941139==ERROR: AddressSanitizer: SEGV on unknown address 0x62100010a573 (pc 0x00000047ce49 bp 0x7fff4cfda950 sp 0x7fff4cfda7c0 T0)\r\n==2941139==The signal is caused by a READ memory access.\r\nSCARINESS: 20 (wild-addr-read)\r\n    #0 0x47ce48 in int flatbuffers::ReadScalar<int>(void const*) lib/flatbuffers_1_12/flatbuffers/base.h:374\r\n    #1 0x47ce48 in flatbuffers::Table::GetVTable() const lib/flatbuffers_1_12/flatbuffers/flatbuffers.h:2424\r\n    #2 0x47ce48 in flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const lib/flatbuffers_1_12/flatbuffers/flatbuffers.h:2431\r\n    #3 0x47ce48 in flatbuffers::Table::CheckField(unsigned short) const  lib/flatbuffers_1_12/flatbuffers/flatbuffers.h:2484\r\n    #4 0x47ce48 in flatbuffers::JsonPrinter::GenStruct(flatbuffers::StructDef const&, flatbuffers::Table const*, int)  /lib/flatbuffers_1_12/srcflatc/idl_gen_text.cpp:298\r\n    #5 0x477b18 in flatbuffers::GenerateTextImpl(flatbuffers::Parser const&, flatbuffers::Table const*, flatbuffers::StructDef const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)  lib/flatbuffers_1_12/srcflatc/idl_gen_text.cpp:359\r\n    #6 0x477b18 in flatbuffers::GenerateText(flatbuffers::Parser const&, void const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)  lib/flatbuffers_1_12/srcflatc/idl_gen_text.cpp:379\r\n\r\nFlatBuffers 1.12 - above line numbers may not match\r\n\r\nIs it a bug that verifier is not perfect or should we not expect it to be water tight?\r\n\r\nThanks,\r\nSuavi Demir\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5881", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5881/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5881/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5881/events", "html_url": "https://github.com/google/flatbuffers/issues/5881", "id": 609530253, "node_id": "MDU6SXNzdWU2MDk1MzAyNTM=", "number": 5881, "title": "[Question][C++] How to get type of union without enclosing table? (1.12.0)", "user": {"login": "TheButlah", "id": 6969415, "node_id": "MDQ6VXNlcjY5Njk0MTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/6969415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheButlah", "html_url": "https://github.com/TheButlah", "followers_url": "https://api.github.com/users/TheButlah/followers", "following_url": "https://api.github.com/users/TheButlah/following{/other_user}", "gists_url": "https://api.github.com/users/TheButlah/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheButlah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheButlah/subscriptions", "organizations_url": "https://api.github.com/users/TheButlah/orgs", "repos_url": "https://api.github.com/users/TheButlah/repos", "events_url": "https://api.github.com/users/TheButlah/events{/privacy}", "received_events_url": "https://api.github.com/users/TheButlah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-30T03:02:48Z", "updated_at": "2020-04-30T17:58:01Z", "closed_at": "2020-04-30T17:58:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "How do I detect the type of a union if it is not nested inside a table? For example, I had hoped that I could do: \r\n```c++\r\nauto my_union = flatbuffers::GetRoot<MyUnion>(raw_data_ptr);\r\n\r\nselect(my_union->type()) {\r\ncase MyUnion_Subtype1:\r\n    auto my_subtype = static_cast<const Subtype1*>(my_union);\r\n    break;\r\ndefault:\r\n    //foo\r\n}\r\n```\r\nBut it doesn't appear as though thats possible. Is there a way to do this, or can the types of unions only be accessed via an enclosing table? If there isn't a way without a wrapper table, why is that necessary? It seems like a straightforward use case.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5874", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5874/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5874/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5874/events", "html_url": "https://github.com/google/flatbuffers/issues/5874", "id": 606770850, "node_id": "MDU6SXNzdWU2MDY3NzA4NTA=", "number": 5874, "title": "cmake error during build: 'not a git repository' (Flatbuffers 1.12.0 on Ubuntu 20 x64 with GCC 9.3.0)", "user": {"login": "NDietrich", "id": 24229375, "node_id": "MDQ6VXNlcjI0MjI5Mzc1", "avatar_url": "https://avatars0.githubusercontent.com/u/24229375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NDietrich", "html_url": "https://github.com/NDietrich", "followers_url": "https://api.github.com/users/NDietrich/followers", "following_url": "https://api.github.com/users/NDietrich/following{/other_user}", "gists_url": "https://api.github.com/users/NDietrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/NDietrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NDietrich/subscriptions", "organizations_url": "https://api.github.com/users/NDietrich/orgs", "repos_url": "https://api.github.com/users/NDietrich/repos", "events_url": "https://api.github.com/users/NDietrich/events{/privacy}", "received_events_url": "https://api.github.com/users/NDietrich/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-25T13:34:27Z", "updated_at": "2020-05-07T17:24:11Z", "closed_at": "2020-05-07T17:24:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "when running cmake for flatbuffers 1.12.0 on Ubuntu 20 x64, I see the following error:\r\n\r\n`fatal: not a git repository (or any of the parent directories): .git`\r\n\r\nI am able to ignore this error and build flatbuffers, sot it's not actually a fatal error.\r\n\r\ncmake version 3.16.3\r\ngcc version 9.3.0 (Ubuntu 9.3.0-10ubuntu2) \r\n\r\nThese are the commands i'm running:\r\n```\r\ncd ~/snort_src\r\nwget https://github.com/google/flatbuffers/archive/v1.12.0.tar.gz -O flatbuffers-v1.12.0.tar.gz\r\ntar -xzvf flatbuffers-v1.12.0.tar.gz\r\nmkdir flatbuffers-build\r\ncd flatbuffers-build\r\ncmake ../flatbuffers-1.12.0\r\nmake\r\nsudo make install\r\n```\r\n\r\nhere's the output from cmake, including the error towards the botom.:\r\n\r\n```\r\nnoah@snort3:~/snort_src/flatbuffers-build$ cmake ../flatbuffers-1.12.0\r\n-- The C compiler identification is GNU 9.3.0\r\n-- The CXX compiler identification is GNU 9.3.0\r\n-- Check for working C compiler: /usr/bin/cc\r\n-- Check for working C compiler: /usr/bin/cc -- works\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Check for working CXX compiler: /usr/bin/c++\r\n-- Check for working CXX compiler: /usr/bin/c++ -- works\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- Looking for strtof_l\r\n-- Looking for strtof_l - found\r\n-- Looking for strtoull_l\r\n-- Looking for strtoull_l - found\r\n-- `tests/monster_test.fbs`: add generation of C++ code with '--no-includes;--gen-compare'\r\n-- `tests/monster_test.fbs`: add generation of binary (.bfbs) schema\r\n-- `tests/namespace_test/namespace_test1.fbs`: add generation of C++ code with '--no-includes;--gen-compare'\r\n-- `tests/namespace_test/namespace_test2.fbs`: add generation of C++ code with '--no-includes;--gen-compare'\r\n-- `tests/union_vector/union_vector.fbs`: add generation of C++ code with '--no-includes;--gen-compare'\r\n-- `tests/native_type_test.fbs`: add generation of C++ code with ''\r\n-- `tests/arrays_test.fbs`: add generation of C++ code with '--scoped-enums;--gen-compare'\r\n-- `tests/arrays_test.fbs`: add generation of binary (.bfbs) schema\r\n-- `tests/monster_test.fbs`: add generation of C++ embedded binary schema code with '--no-includes;--gen-compare'\r\n-- `tests/monster_extra.fbs`: add generation of C++ code with '--no-includes;--gen-compare'\r\n-- `samples/monster.fbs`: add generation of C++ code with '--no-includes;--gen-compare'\r\n-- `samples/monster.fbs`: add generation of binary (.bfbs) schema\r\nfatal: not a git repository (or any of the parent directories): .git\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /home/noah/snort_src/flatbuffers-build\r\n```\r\n\r\ni after this, I run `make ** sudo make install` with no problems", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5870", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5870/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5870/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5870/events", "html_url": "https://github.com/google/flatbuffers/issues/5870", "id": 605545728, "node_id": "MDU6SXNzdWU2MDU1NDU3Mjg=", "number": 5870, "title": "[TS] Bug in generated code when including a file holding a table of the same name of the namespace and an union", "user": {"login": "stephanemagnenat", "id": 390278, "node_id": "MDQ6VXNlcjM5MDI3OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/390278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stephanemagnenat", "html_url": "https://github.com/stephanemagnenat", "followers_url": "https://api.github.com/users/stephanemagnenat/followers", "following_url": "https://api.github.com/users/stephanemagnenat/following{/other_user}", "gists_url": "https://api.github.com/users/stephanemagnenat/gists{/gist_id}", "starred_url": "https://api.github.com/users/stephanemagnenat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stephanemagnenat/subscriptions", "organizations_url": "https://api.github.com/users/stephanemagnenat/orgs", "repos_url": "https://api.github.com/users/stephanemagnenat/repos", "events_url": "https://api.github.com/users/stephanemagnenat/events{/privacy}", "received_events_url": "https://api.github.com/users/stephanemagnenat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-23T13:43:12Z", "updated_at": "2020-04-27T19:35:43Z", "closed_at": "2020-04-27T19:35:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given this minimal test case with two files:\r\n```\r\n// file condition.fbs\r\nnamespace Condition;\r\ntable A {\r\n}\r\nunion AnyA{\r\n\tA\r\n}\r\ntable Condition {\r\n}\r\n// file game.fbs\r\ninclude \"condition.fbs\";\r\n```\r\nWhen running flatbuffer with:\r\n```\r\nflatc --ts --gen-all --no-fb-import game.fbs\r\n```\r\nThe resulting file `game_generated.ts` has the following broken header on top:\r\n```\r\nimport * as NS5332497581838666345 from \"./condition_generated\";\r\nexport namespace Condition { \r\nexport import A = NS5332497581838666345.Condition.A;\r\n}\r\n```\r\nObviously `condition_generated.ts` does not exist due to `--gen-all`. Interestingly, if the union `AnyA` in file `condition.fbs` is removed, the problem disappears.\r\n\r\nI am using `flatc version 1.12.0` from git hash `cb4d0f72e38dfe2a15e39d8d449f7e6385300ca1`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5868", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5868/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5868/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5868/events", "html_url": "https://github.com/google/flatbuffers/issues/5868", "id": 604781910, "node_id": "MDU6SXNzdWU2MDQ3ODE5MTA=", "number": 5868, "title": "[C++] How can I iterate through Flexbuffers map keys?", "user": {"login": "phuongtran7", "id": 46689198, "node_id": "MDQ6VXNlcjQ2Njg5MTk4", "avatar_url": "https://avatars1.githubusercontent.com/u/46689198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phuongtran7", "html_url": "https://github.com/phuongtran7", "followers_url": "https://api.github.com/users/phuongtran7/followers", "following_url": "https://api.github.com/users/phuongtran7/following{/other_user}", "gists_url": "https://api.github.com/users/phuongtran7/gists{/gist_id}", "starred_url": "https://api.github.com/users/phuongtran7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phuongtran7/subscriptions", "organizations_url": "https://api.github.com/users/phuongtran7/orgs", "repos_url": "https://api.github.com/users/phuongtran7/repos", "events_url": "https://api.github.com/users/phuongtran7/events{/privacy}", "received_events_url": "https://api.github.com/users/phuongtran7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-22T14:00:28Z", "updated_at": "2020-04-23T18:41:19Z", "closed_at": "2020-04-23T18:41:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI have an application that receives a Flexbuffers map and I'd like to go over all the possible keys in the map like the efficient tips in Flexbuffers page mentioned. However, I cannot use the range base for loop to try and do that:\r\n\r\n```\r\nstd::vector<int> vec(100);\r\nstd::iota(vec.begin(), vec.end(), 1);\r\n\r\nflexbuffers::Builder builder;\r\nauto map_start = builder.StartMap();\r\nbuilder.Double(\"Test_Double\", 1.25655687565);\r\nbuilder.TypedVector(\"Test_Vector\", [&] {\r\n\tfor (auto& i : vec) {\r\n\t\tbuilder.Int(i);\r\n\t}\r\n});\r\n\r\nbuilder.EndMap(map_start);\r\nbuilder.Finish();\r\n\r\nauto data = flexbuffers::GetRoot(builder.GetBuffer()).AsMap();\r\n\r\nfor (auto& i : data.Keys()) {\r\n\t// It failed here\r\n}\r\n```\r\nAlso, it looks like the enum `Type` doesn't have double type. How can I know if a value is a double? The `Test_Double` above when call `GetType()`, it still returns as `FBT_FLOAT`.\r\n\r\nThank you so much for your time and help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5867", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5867/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5867/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5867/events", "html_url": "https://github.com/google/flatbuffers/issues/5867", "id": 603912849, "node_id": "MDU6SXNzdWU2MDM5MTI4NDk=", "number": 5867, "title": "[Java] No static createXYZ() methods generated for tables with a single field", "user": {"login": "stealthrabbi", "id": 1018272, "node_id": "MDQ6VXNlcjEwMTgyNzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1018272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stealthrabbi", "html_url": "https://github.com/stealthrabbi", "followers_url": "https://api.github.com/users/stealthrabbi/followers", "following_url": "https://api.github.com/users/stealthrabbi/following{/other_user}", "gists_url": "https://api.github.com/users/stealthrabbi/gists{/gist_id}", "starred_url": "https://api.github.com/users/stealthrabbi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stealthrabbi/subscriptions", "organizations_url": "https://api.github.com/users/stealthrabbi/orgs", "repos_url": "https://api.github.com/users/stealthrabbi/repos", "events_url": "https://api.github.com/users/stealthrabbi/events{/privacy}", "received_events_url": "https://api.github.com/users/stealthrabbi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-21T11:10:55Z", "updated_at": "2020-04-23T17:33:28Z", "closed_at": "2020-04-23T17:33:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I have a table that has multiple fields in it, I get a handy `createMySmallTable()` method that has me pass in a FBB with all the primitives, and it adds all the fields in the correct order. If I have a table with only a single field, I don't get such a method. I then have to manually call:\r\n\r\n``` \r\nMySmallTable.startMySmallTable()\r\nMySmallTable.addSoloField()\r\nMySmallTable.endMySmallTable()\r\n```\r\n\r\nI get that the create methods are there to ensure order, but even with having a single field, it's still more methods I have to call in my method. Furthermore, if I were to add a second field to my table and generate new classes, now the code that creates the table will still compile and I'm missing out on a field. But if I had a `createMySmallTable()` to call, the compilation would break since the method signature would now include my second field.\r\n\r\nFlatc 1.12.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5860", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5860/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5860/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5860/events", "html_url": "https://github.com/google/flatbuffers/issues/5860", "id": 601720550, "node_id": "MDU6SXNzdWU2MDE3MjA1NTA=", "number": 5860, "title": "[c++] Is it possible to encrypt the payload, but not the buffer headers?", "user": {"login": "Robien", "id": 10304060, "node_id": "MDQ6VXNlcjEwMzA0MDYw", "avatar_url": "https://avatars3.githubusercontent.com/u/10304060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Robien", "html_url": "https://github.com/Robien", "followers_url": "https://api.github.com/users/Robien/followers", "following_url": "https://api.github.com/users/Robien/following{/other_user}", "gists_url": "https://api.github.com/users/Robien/gists{/gist_id}", "starred_url": "https://api.github.com/users/Robien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Robien/subscriptions", "organizations_url": "https://api.github.com/users/Robien/orgs", "repos_url": "https://api.github.com/users/Robien/repos", "events_url": "https://api.github.com/users/Robien/events{/privacy}", "received_events_url": "https://api.github.com/users/Robien/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-17T05:52:41Z", "updated_at": "2020-04-27T01:49:08Z", "closed_at": "2020-04-27T01:49:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello and thank you for your awesome work!\r\n\r\n(I tagged the issue with C++ because that's the language I am using but maybe other languages could be interested in this)\r\n\r\nI am using flatbuffers to send encrypted data to a server. I want the server to do different computations on the data but without decrypting the actual data. But having access to the schema is not enough to decode the buffer, it also need to read some headers in the buffer, if I understand well. I need then to encrypt data but not the buffers headers.\r\nIs it possible to do that easily? Or do I need to do my own cipher and apply it to every fields? Or should I make a schema with the data I want to show to the server and a ubyte array that contains the encrypted data? (in that case it's harder to do nested stuff)\r\n\r\nExample of what I want to do:\r\n\r\nHere is a schema:\r\n\r\n```\r\nnamespace topSecret;\r\n\r\nenum DEFCON : byte { Low= 1, Medium, High }\r\n\r\ntable Messages {\r\n  message1:messageToAlice;\r\n  message2:messageToBob;\r\n}\r\n\r\ntable messageToAlice {\r\n  message:string;\r\n  defconf:DEFCON = low;\r\n}\r\n\r\ntable messageToBob {\r\n  message:string;\r\n  presidentPhoneNumber:string;\r\n  defconf:DEFCON = Medium;\r\n}\r\n\r\nroot_type Messages;\r\n\r\n```\r\n\r\nI have to send a message based on the schema to a server that is going to send to Alice and Bob their respective (very secret) messages. But since I don't want the server to know the content of the message I need to encrypt everything except what the server need to know to split the buffer between Alice and Bob. And now, Bob is telling the server that it doesn't need to phone nu;ber filed anymore. I then want to send the messageToBob but without this field (the server need to understand where this field start/stop to delete it)\r\n\r\nAny idea how to do that?\r\nIs it possible to iterate through the data without the headers?\r\n\r\nThank you! (and sorry for the long description)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5859", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5859/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5859/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5859/events", "html_url": "https://github.com/google/flatbuffers/issues/5859", "id": 601057634, "node_id": "MDU6SXNzdWU2MDEwNTc2MzQ=", "number": 5859, "title": "[Swift] Better Swift Package Manager Support", "user": {"login": "paulofaria", "id": 5126193, "node_id": "MDQ6VXNlcjUxMjYxOTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5126193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulofaria", "html_url": "https://github.com/paulofaria", "followers_url": "https://api.github.com/users/paulofaria/followers", "following_url": "https://api.github.com/users/paulofaria/following{/other_user}", "gists_url": "https://api.github.com/users/paulofaria/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulofaria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulofaria/subscriptions", "organizations_url": "https://api.github.com/users/paulofaria/orgs", "repos_url": "https://api.github.com/users/paulofaria/repos", "events_url": "https://api.github.com/users/paulofaria/events{/privacy}", "received_events_url": "https://api.github.com/users/paulofaria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-16T13:32:36Z", "updated_at": "2020-08-18T18:28:07Z", "closed_at": "2020-08-18T18:28:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "@mustiikhalil From what I've seen in #5771, you're the maintainer of the Swift version of flatbuffers, right? Well, even though we can import flatbuffers with SwiftPM as in the README:\r\n\r\n```swift\r\n.package(url: \"https://github.com/mustiikhalil/flatbuffers.git\", .branch(\"swift\"))\r\n```\r\n\r\nGiven the fact that we're required to use the `swift` branch, which is a functionality created for development purposes, we can't release semantic versioned libraries that use flatbuffers, because SwiftPM only allows semantic versioning releases of packages that depend on other semantic versioned packages.\r\n\r\nOne solution to this would be to clear the existing semantic version tags from your fork at mustiikhalil/flatbuffers and create tags for each release based on the `swift` branch.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5852", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5852/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5852/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5852/events", "html_url": "https://github.com/google/flatbuffers/issues/5852", "id": 597442981, "node_id": "MDU6SXNzdWU1OTc0NDI5ODE=", "number": 5852, "title": "Sized Prefix in Java is written with wrong endianness?", "user": {"login": "stealthrabbi", "id": 1018272, "node_id": "MDQ6VXNlcjEwMTgyNzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1018272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stealthrabbi", "html_url": "https://github.com/stealthrabbi", "followers_url": "https://api.github.com/users/stealthrabbi/followers", "following_url": "https://api.github.com/users/stealthrabbi/following{/other_user}", "gists_url": "https://api.github.com/users/stealthrabbi/gists{/gist_id}", "starred_url": "https://api.github.com/users/stealthrabbi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stealthrabbi/subscriptions", "organizations_url": "https://api.github.com/users/stealthrabbi/orgs", "repos_url": "https://api.github.com/users/stealthrabbi/repos", "events_url": "https://api.github.com/users/stealthrabbi/events{/privacy}", "received_events_url": "https://api.github.com/users/stealthrabbi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-09T17:35:22Z", "updated_at": "2020-04-09T18:45:54Z", "closed_at": "2020-04-09T18:45:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "For some reason, when I read the size prefix in java, i have to reverse the endianness to get a number that makes sense.\r\n\r\n```\r\nMyTopObject.finishSizePrefixMyTopObjectBUffer(builder, myOffset);\r\n\r\n// let's say this is an array of 50 bytes (46 for the content + 4 for the size int32)\r\nbytes[] myBytes = builder.sizedByteArray();\r\n\r\n...\r\n\r\nByteBuffer readBuffer = ByteBuffer.wrap(rawBytes);\r\n\r\n// the first 4 bytes are 0x2E, 0x00, 0x00, 0x00\r\n\r\nint contentSize = readBuffer.getInt();\r\n// wrong \r\nSystem.out.println(\"content size: \" + contentSize);\r\n// right (46)\r\nSystem.out.println(\"content size reversed: \" + Integer.reverseBytes(contentSize));\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5849", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5849/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5849/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5849/events", "html_url": "https://github.com/google/flatbuffers/issues/5849", "id": 596887712, "node_id": "MDU6SXNzdWU1OTY4ODc3MTI=", "number": 5849, "title": "[Rust] generating incorrect code (flatc 1.12.0)", "user": {"login": "jrop", "id": 1404053, "node_id": "MDQ6VXNlcjE0MDQwNTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1404053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrop", "html_url": "https://github.com/jrop", "followers_url": "https://api.github.com/users/jrop/followers", "following_url": "https://api.github.com/users/jrop/following{/other_user}", "gists_url": "https://api.github.com/users/jrop/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrop/subscriptions", "organizations_url": "https://api.github.com/users/jrop/orgs", "repos_url": "https://api.github.com/users/jrop/repos", "events_url": "https://api.github.com/users/jrop/events{/privacy}", "received_events_url": "https://api.github.com/users/jrop/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-08T21:55:33Z", "updated_at": "2020-05-04T07:16:58Z", "closed_at": "2020-05-04T07:16:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**flatc**: 1.12.0\r\n\r\nWe believe we have discovered what appears to be a bug in the generated Rust code for union handling.  This causes the following error to occur:\r\n\r\n```\r\nerror[E0599]: no method named `map` found for struct `my_pkg_generated::flatbuffers::Table<'_>` in the current scope\r\n    --> src/../target/flatbuffers/my_pkg_generated.rs:1148:17\r\n     |\r\n1148 |       self.thing().map(|u| Thing1::init_from_table(u))\r\n     |                 ^^^ method not found in `my_pkg_generated::flatbuffers::Table<'_>`\r\n     |\r\n     = note: the method `map` exists but the following trait bounds were not satisfied:\r\n             `&mut my_pkg_generated::flatbuffers::Table<'_> : std::iter::Iterator`\r\n```\r\n\r\nIt seems that something _not_ returning an Option is being treated as if it _should_ return an Option.\r\n\r\n```\r\nunion AnyThing {\r\n    Thing1,\r\n    Thing2,\r\n    Thing3\r\n}\r\n\r\ntable ThingContainer {\r\n    thing_id: ushort; // Some other fields in the table...\r\n    thing: AnyThing (required);\r\n}\r\n```\r\n\r\n```rust\r\n  // Note that the following does NOT return an Option:\r\n  pub fn thing(&self) -> flatbuffers::Table<'a> {\r\n    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(AnyThing::VT_OP, None).unwrap()\r\n  }\r\n\r\n  // ...\r\n  \r\n  // Now in this method, it assumes an option was returned:\r\n  pub fn thing_as_thing1(&self) -> Option<Thing1<'a>> {\r\n    if self.thing_type() == AnyThing::Thing1 {\r\n      self.thing().map(|u| Thing1::init_from_table(u))\r\n    } else {\r\n      None\r\n    }\r\n  }\r\n\r\n```\r\n\r\nThis seems related to the various `AddUnwrapIfRequired` calls in various places in the Rust code generator, if I am not mistaken.  However, the generated stub for `thing_as_thing1` is not \"required\"-aware, as other locations in the code-gen.\r\n\r\nAny help on this would be much appreciated!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5848", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5848/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5848/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5848/events", "html_url": "https://github.com/google/flatbuffers/issues/5848", "id": 596835296, "node_id": "MDU6SXNzdWU1OTY4MzUyOTY=", "number": 5848, "title": "[go] Generates incorrect code for a vector of scalars", "user": {"login": "madeken", "id": 36307021, "node_id": "MDQ6VXNlcjM2MzA3MDIx", "avatar_url": "https://avatars2.githubusercontent.com/u/36307021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/madeken", "html_url": "https://github.com/madeken", "followers_url": "https://api.github.com/users/madeken/followers", "following_url": "https://api.github.com/users/madeken/following{/other_user}", "gists_url": "https://api.github.com/users/madeken/gists{/gist_id}", "starred_url": "https://api.github.com/users/madeken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/madeken/subscriptions", "organizations_url": "https://api.github.com/users/madeken/orgs", "repos_url": "https://api.github.com/users/madeken/repos", "events_url": "https://api.github.com/users/madeken/events{/privacy}", "received_events_url": "https://api.github.com/users/madeken/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-08T20:19:18Z", "updated_at": "2020-04-08T20:29:02Z", "closed_at": "2020-04-08T20:29:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Let's take this:\r\n\r\n```\r\ntable Int64ArrayTable {\r\n\tvalues:[int64];\r\n}\r\n```\r\n\r\ngenerates code like this:\r\n```\r\nfunc Int64ArrayTableAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {\r\n\tbuilder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(values), 0)\r\n}\r\n```\r\n\r\nbut the actual code should look like:\r\n```\r\nfunc Int64ArrayTableAddValues(builder *flatbuffers.Builder, values int64) {\r\n\tbuilder.PrependInt64Slot(0, values, 0)\r\n}\r\n```\r\n\r\nI think this applies for all vector of scalars", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5847", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5847/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5847/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5847/events", "html_url": "https://github.com/google/flatbuffers/issues/5847", "id": 596149801, "node_id": "MDU6SXNzdWU1OTYxNDk4MDE=", "number": 5847, "title": "[CPP] Codewriter padding issue", "user": {"login": "mustiikhalil", "id": 26250654, "node_id": "MDQ6VXNlcjI2MjUwNjU0", "avatar_url": "https://avatars3.githubusercontent.com/u/26250654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mustiikhalil", "html_url": "https://github.com/mustiikhalil", "followers_url": "https://api.github.com/users/mustiikhalil/followers", "following_url": "https://api.github.com/users/mustiikhalil/following{/other_user}", "gists_url": "https://api.github.com/users/mustiikhalil/gists{/gist_id}", "starred_url": "https://api.github.com/users/mustiikhalil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mustiikhalil/subscriptions", "organizations_url": "https://api.github.com/users/mustiikhalil/orgs", "repos_url": "https://api.github.com/users/mustiikhalil/repos", "events_url": "https://api.github.com/users/mustiikhalil/events{/privacy}", "received_events_url": "https://api.github.com/users/mustiikhalil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-07T21:02:12Z", "updated_at": "2020-04-13T19:33:33Z", "closed_at": "2020-04-13T19:33:33Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I am currently facing an issue using the padding in the codewriter class, although it's implemented the CI always fails. \r\ni've tried the following:\r\n`CodeWriter code_(\"    \");`\r\nand \r\n```\r\nCodeWriter code_;\r\nconstructor: {\r\ncode = {\"    \"};\r\n}\r\n```\r\nA solution might be a `setPadding function`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5844", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5844/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5844/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5844/events", "html_url": "https://github.com/google/flatbuffers/issues/5844", "id": 594733037, "node_id": "MDU6SXNzdWU1OTQ3MzMwMzc=", "number": 5844, "title": "[C++] Add flatc command to makefile generation", "user": {"login": "khoitd1997", "id": 20428458, "node_id": "MDQ6VXNlcjIwNDI4NDU4", "avatar_url": "https://avatars3.githubusercontent.com/u/20428458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khoitd1997", "html_url": "https://github.com/khoitd1997", "followers_url": "https://api.github.com/users/khoitd1997/followers", "following_url": "https://api.github.com/users/khoitd1997/following{/other_user}", "gists_url": "https://api.github.com/users/khoitd1997/gists{/gist_id}", "starred_url": "https://api.github.com/users/khoitd1997/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khoitd1997/subscriptions", "organizations_url": "https://api.github.com/users/khoitd1997/orgs", "repos_url": "https://api.github.com/users/khoitd1997/repos", "events_url": "https://api.github.com/users/khoitd1997/events{/privacy}", "received_events_url": "https://api.github.com/users/khoitd1997/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-06T00:37:39Z", "updated_at": "2020-04-06T18:50:02Z", "closed_at": "2020-04-06T18:50:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, it would be nice to generate the command to generate the header files with the current Makefile rule. So right now, the rules are like this:\r\n\r\n```make\r\ntest_generated.h: test.fbs\r\n```\r\n\r\nIt would be nice if it's like this:\r\n```make\r\ntest_generated.h: test.fbs\r\n  flatc -cpp -I some_include_path $< -o some_path\r\n```\r\n\r\nDoesn't seem too difficult to do this so I'm willing to put in a PR for this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5838", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5838/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5838/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5838/events", "html_url": "https://github.com/google/flatbuffers/issues/5838", "id": 590569531, "node_id": "MDU6SXNzdWU1OTA1Njk1MzE=", "number": 5838, "title": "[Java][Kotlin] Optionally \"create\" runtime classes during code generation", "user": {"login": "paulovap", "id": 2519883, "node_id": "MDQ6VXNlcjI1MTk4ODM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2519883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulovap", "html_url": "https://github.com/paulovap", "followers_url": "https://api.github.com/users/paulovap/followers", "following_url": "https://api.github.com/users/paulovap/following{/other_user}", "gists_url": "https://api.github.com/users/paulovap/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulovap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulovap/subscriptions", "organizations_url": "https://api.github.com/users/paulovap/orgs", "repos_url": "https://api.github.com/users/paulovap/repos", "events_url": "https://api.github.com/users/paulovap/events{/privacy}", "received_events_url": "https://api.github.com/users/paulovap/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-30T20:23:08Z", "updated_at": "2020-03-30T22:15:10Z", "closed_at": "2020-03-30T22:15:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi @aardappel ,\r\n\r\nI would like to know what would you think about adding a flag on `flatc` to \"generate\" the runtime code for Flatbuffers during compilation instead of downloading a jar from maven.\r\n\r\nSo the idea would be to embed the compressed code for the java/Kotlin inside `flatc` binary or pack it along in `flatc` distribution and with a flag `--java-gen-runtime` the code would be deflated alongside the generated code, thus there is no external dependencies to external jar files.\r\n\r\nPros:\r\n1. No more issues due to code generation incompatible with jar runtime on maven\r\n2. Probably simplify testing and add features for those langs on this project.\r\n3. For Java & Kotlin, flatc is the only dependency, no need for online connect, gradle, mvn etc.\r\n4. Simplify testing and automation scripts \r\n\r\nCons:\r\n1. `flatc` binary would be bigger if runtime is embedded on the (java folder compressed is 40-60kb)\r\n2. flatc packaging would be more complex if runtime is not embedded in the binary\r\n3. Might not scale for 10+ languages?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5823", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5823/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5823/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5823/events", "html_url": "https://github.com/google/flatbuffers/issues/5823", "id": 585118695, "node_id": "MDU6SXNzdWU1ODUxMTg2OTU=", "number": 5823, "title": "[C++/CMake] Use precompiled header for flatbuffers and flatc target", "user": {"login": "OlivierLDff", "id": 17255804, "node_id": "MDQ6VXNlcjE3MjU1ODA0", "avatar_url": "https://avatars1.githubusercontent.com/u/17255804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OlivierLDff", "html_url": "https://github.com/OlivierLDff", "followers_url": "https://api.github.com/users/OlivierLDff/followers", "following_url": "https://api.github.com/users/OlivierLDff/following{/other_user}", "gists_url": "https://api.github.com/users/OlivierLDff/gists{/gist_id}", "starred_url": "https://api.github.com/users/OlivierLDff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OlivierLDff/subscriptions", "organizations_url": "https://api.github.com/users/OlivierLDff/orgs", "repos_url": "https://api.github.com/users/OlivierLDff/repos", "events_url": "https://api.github.com/users/OlivierLDff/events{/privacy}", "received_events_url": "https://api.github.com/users/OlivierLDff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-03-20T14:47:45Z", "updated_at": "2020-03-27T16:20:59Z", "closed_at": "2020-03-27T16:20:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\r\n# Use precompiled header for flatbuffers and flatc\r\n\r\nPrecompiled headers can speed up compilation time by a lot. Why isn't flatbuffers supporting it?\r\n\r\nSince CMake `3.16` there is a new function `target_precompile_headers` that handle precompiled header for every compilers. It's really easy to set up in the project, since lots of headers inclusions seem to be isolated in `base.h` and `utils.h`.\r\n\r\n## Motivation\r\n\r\nI'm building `flatbuffers` and `flatc` as part of my CMake project, and compilation of those two targets take almost **30 seconds**. Which is quite lots of time that can be shorten.\r\n\r\n## Benchmark\r\n\r\nI did an implementation on my [fork](https://github.com/OlivierLDff/flatbuffers), branch is `pch-support`. And made some basic benchmark. \r\n\r\nMy processor is `i7-9750H @ 2.60 Ghz` with msvc.\r\n\r\n|   Target    | Without Precompiled Headers | With Precompiled Headers |\r\n| :---------: | :-------------------------: | :----------------------: |\r\n| flatbuffers |         3-4 seconds         |       2-3 seconds        |\r\n|    flatc    |        24-25 seconds        |       6-7 seconds        |\r\n\r\nAs you can see when building flatc, compilation time earned thanks to precompiled headers is massive.\r\n\r\n## Proposed Changed\r\n\r\nFor the benchmark I created 2 different header file.\r\n\r\n* `pch.h` for `flatbuffers`\r\n* `flatc_pch.h` for `flatc`\r\n\r\n### Flatbuffers\r\n\r\nI included stl headers that were included around the project and also `util.h` that also include `base.h`. Those file are not expected to change often if I'm right.\r\n\r\nSo this is `pch.h`:\r\n\r\n```c++\r\n// stl\r\n#include <cstdint>\r\n#include <cstring>\r\n#include <algorithm>\r\n#include <cmath>\r\n#include <list>\r\n#include <string>\r\n#include <utility>\r\n#include <iomanip>\r\n#include <map>\r\n#include <memory>\r\n#include <stack>\r\n\r\n// flatbuffers\r\n#include \"flatbuffers/util.h\"\r\n```\r\n\r\nThen to use it i modified `CMakelists.txt` to add:\r\n\r\n```cmake\r\n# After creating target flatbuffers\r\nif(COMMAND target_precompile_headers)\r\n    target_precompile_headers(flatbuffers PRIVATE include/flatbuffers/flatc_pch.h)\r\nendif()\r\n\r\n# After creating target flatbuffers_shared\r\nif(COMMAND target_precompile_headers)\r\n    target_precompile_headers(flatbuffers_shared PRIVATE include/flatbuffers/flatc_pch.h)\r\nendif()\r\n```\r\n\r\nAs you can see if `target_precompile_headers` doesn't exist no compilation time reduction will happen.\r\n\r\n### Flatc\r\n\r\nI've found that i needed a little bit more include to improve `flatc` build time. This is `flatc_pch.h`.\r\n\r\n```c++\r\n// types\r\n#include <limits>\r\n#include <string>\r\n#include <cctype>\r\n#include <sstream>\r\n\r\n// containers\r\n#include <iterator>\r\n#include <set>\r\n#include <unordered_set>\r\n#include <map>\r\n#include <unordered_map>\r\n#include <list>\r\n#include <vector>\r\n\r\n// utilities\r\n#include <iostream>\r\n#include <cassert>\r\n#include <cmath>\r\n#include <memory>\r\n#include <functional>\r\n#include <algorithm>\r\n#include <utility>\r\n#include <tuple>\r\n\r\n// flatbuffers\r\n#include \"flatbuffers/code_generators.h\"\r\n#include \"flatbuffers/flatbuffers.h\"\r\n#include \"flatbuffers/flexbuffers.h\"\r\n#include \"flatbuffers/idl.h\"\r\n#include \"flatbuffers/util.h\"\r\n```\r\n\r\nThen in the `CMakeLists.txt`:\r\n\r\n```cmake\r\n# After creating target flatc\r\nif(COMMAND target_precompile_headers)\r\n    target_precompile_headers(flatc PRIVATE include/flatbuffers/flatc_pch.h)\r\n  endif()\r\n```\r\n\r\nAnd that's all.\r\n\r\n## Possible improvement\r\n\r\nIn my fork precompiled header is the default way to go. If the user have CMake v3.16 or greater, he will benefit from shorter compilation time. \r\n\r\nBut maybe we should add an option to disable this behavior if required?\r\n\r\nFrom CMake doc:\r\n\r\n```\r\nTo disable precompile headers for specific targets, see the DISABLE_PRECOMPILE_HEADERS target property.\r\n\r\nTo prevent precompile headers from being used when compiling a specific source file, see the SKIP_PRECOMPILE_HEADERS source file property.\r\n```\r\n\r\nSo if user is building `flatc` in super build he should just be able to do:\r\n\r\n`set_target_properties(flatbuffers flatc PROPERTIES DISABLE_PRECOMPILE_HEADERS ON)`\r\n\r\nMaybe we should add an option `FLATBUFFERS_DISABLE_PCH` ?\r\n\r\n## Opinion\r\n\r\nSo what's your opinion about this? Could this be considered as a PR?\r\nWhat should i improve?\r\n\r\nThanks a lot for reading.\r\n\r\nOlivier Le Doeuff.\r\n\r\n## Reference\r\n\r\n* https://cmake.org/cmake/help/git-stage/command/target_precompile_headers.html", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5822", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5822/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5822/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5822/events", "html_url": "https://github.com/google/flatbuffers/issues/5822", "id": 584820930, "node_id": "MDU6SXNzdWU1ODQ4MjA5MzA=", "number": 5822, "title": "flatc 1.12.0 JavaScript code creates ESLint errors", "user": {"login": "lutzroeder", "id": 438516, "node_id": "MDQ6VXNlcjQzODUxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/438516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lutzroeder", "html_url": "https://github.com/lutzroeder", "followers_url": "https://api.github.com/users/lutzroeder/followers", "following_url": "https://api.github.com/users/lutzroeder/following{/other_user}", "gists_url": "https://api.github.com/users/lutzroeder/gists{/gist_id}", "starred_url": "https://api.github.com/users/lutzroeder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lutzroeder/subscriptions", "organizations_url": "https://api.github.com/users/lutzroeder/orgs", "repos_url": "https://api.github.com/users/lutzroeder/repos", "events_url": "https://api.github.com/users/lutzroeder/events{/privacy}", "received_events_url": "https://api.github.com/users/lutzroeder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-03-20T03:33:03Z", "updated_at": "2020-07-28T07:18:21Z", "closed_at": "2020-07-28T07:18:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "[repro.zip](https://github.com/google/flatbuffers/files/4361049/repro.zip)\r\n```\r\nnpm install eslint\r\nflatc --no-js-exports --js schema.fbs\r\nnpx eslint *.js\r\n```\r\n```\r\n    750:34  error  'flatbuffers' is not defined  no-undef\r\n    876:34  error  'flatbuffers' is not defined  no-undef\r\n   1217:34  error  'flatbuffers' is not defined  no-undef\r\n   1343:34  error  'flatbuffers' is not defined  no-undef\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5819", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5819/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5819/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5819/events", "html_url": "https://github.com/google/flatbuffers/issues/5819", "id": 584116362, "node_id": "MDU6SXNzdWU1ODQxMTYzNjI=", "number": 5819, "title": "[Dart] Flatc converts enum to Dart code, the Dart code should be optimized", "user": {"login": "wmm3416", "id": 11239406, "node_id": "MDQ6VXNlcjExMjM5NDA2", "avatar_url": "https://avatars3.githubusercontent.com/u/11239406?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wmm3416", "html_url": "https://github.com/wmm3416", "followers_url": "https://api.github.com/users/wmm3416/followers", "following_url": "https://api.github.com/users/wmm3416/following{/other_user}", "gists_url": "https://api.github.com/users/wmm3416/gists{/gist_id}", "starred_url": "https://api.github.com/users/wmm3416/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wmm3416/subscriptions", "organizations_url": "https://api.github.com/users/wmm3416/orgs", "repos_url": "https://api.github.com/users/wmm3416/repos", "events_url": "https://api.github.com/users/wmm3416/events{/privacy}", "received_events_url": "https://api.github.com/users/wmm3416/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-19T02:18:56Z", "updated_at": "2020-07-11T00:42:48Z", "closed_at": "2020-07-11T00:42:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "The flatbuffers code is as below:\r\n```\r\nenum SelectorType:byte {\r\n    FaultSelector = 0, // 0\u8981\u4fdd\u7559\r\n\tTypeSelector = 1,\r\n\tIDSelector = 2,\r\n\tClassSelector = 3,\r\n\tUniversalSelector = 4,\r\n\tAttributeSelector = 5,\r\n\tPseudoSelector = 6,\r\n\tSimpleSelectorSequence = 7,\r\n\tCombineSelector = 8,\r\n\tSelectorGroup = 9,\r\n\tSignSelector = 10,\r\n}\r\n```\r\nDart code converted by Flatc:\r\n```\r\nclass SelectorType {\r\n  final int value;\r\n  const SelectorType._(this.value);\r\n\r\n  factory SelectorType.fromValue(int value) {\r\n    if (value == null) value = 0;\r\n    if (!values.containsKey(value)) {\r\n      throw new StateError('Invalid value $value for bit flag enum SelectorType');\r\n    }\r\n    return values[value];\r\n  }\r\n\r\n  static const int minValue = 0;\r\n  static const int maxValue = 10;\r\n  static bool containsValue(int value) => values.containsKey(value);\r\n\r\n  static const SelectorType FaultSelector = const SelectorType._(0);\r\n  static const SelectorType TypeSelector = const SelectorType._(1);\r\n  \u2026\r\n  static const SelectorType SignSelector = const SelectorType._(10);\r\n  static get values => {0: FaultSelector,1: TypeSelector,\u2026,10: SignSelector,};\r\n\r\n   \u2026\r\n}\r\n\r\n```\r\n\r\nBut when I use the \"values\", it will new a Map every time. New a Map is very expressive, because it  will calculate the hash code and may be trigger rehash. \r\nMy question is Why it couldn't generate the code like this:\r\n```\r\n  static Map _values = {0: FaultSelector,1: TypeSelector,...10: SignSelector,};\r\n  static get values => _values;\r\n```\r\nWe can use _values to cache the Map. It will not new a Map every time, when we use it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5814", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5814/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5814/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5814/events", "html_url": "https://github.com/google/flatbuffers/issues/5814", "id": 582215010, "node_id": "MDU6SXNzdWU1ODIyMTUwMTA=", "number": 5814, "title": "Broken link on site (usage in C# )", "user": {"login": "inobelar", "id": 20372668, "node_id": "MDQ6VXNlcjIwMzcyNjY4", "avatar_url": "https://avatars2.githubusercontent.com/u/20372668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inobelar", "html_url": "https://github.com/inobelar", "followers_url": "https://api.github.com/users/inobelar/followers", "following_url": "https://api.github.com/users/inobelar/following{/other_user}", "gists_url": "https://api.github.com/users/inobelar/gists{/gist_id}", "starred_url": "https://api.github.com/users/inobelar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inobelar/subscriptions", "organizations_url": "https://api.github.com/users/inobelar/orgs", "repos_url": "https://api.github.com/users/inobelar/repos", "events_url": "https://api.github.com/users/inobelar/events{/privacy}", "received_events_url": "https://api.github.com/users/inobelar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-16T11:26:29Z", "updated_at": "2020-03-16T19:16:21Z", "closed_at": "2020-03-16T19:16:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In [Programmers Guide](https://google.github.io/flatbuffers/usergroup0.html) section, link `Use in C#`  don't work (`https://google.github.io/flatbuffers/@ref flatbuffers_guide_use_c-sharp`)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5811", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5811/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5811/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5811/events", "html_url": "https://github.com/google/flatbuffers/issues/5811", "id": 581519693, "node_id": "MDU6SXNzdWU1ODE1MTk2OTM=", "number": 5811, "title": "Invalid JSON output", "user": {"login": "sachaw", "id": 11172820, "node_id": "MDQ6VXNlcjExMTcyODIw", "avatar_url": "https://avatars1.githubusercontent.com/u/11172820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sachaw", "html_url": "https://github.com/sachaw", "followers_url": "https://api.github.com/users/sachaw/followers", "following_url": "https://api.github.com/users/sachaw/following{/other_user}", "gists_url": "https://api.github.com/users/sachaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/sachaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sachaw/subscriptions", "organizations_url": "https://api.github.com/users/sachaw/orgs", "repos_url": "https://api.github.com/users/sachaw/repos", "events_url": "https://api.github.com/users/sachaw/events{/privacy}", "received_events_url": "https://api.github.com/users/sachaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-15T05:07:13Z", "updated_at": "2020-03-16T21:56:32Z", "closed_at": "2020-03-16T21:56:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Win 10: 1909,\r\nflatc version 1.12.0\r\n\r\nIf I perform the following command: `.\\flatc.exe  --raw-binary -o json -t .\\xxx.fbs -- \"./xxx.gfbmdl\"`\r\nThe resulting output is not valid RFC 7159 JSON, None of the keys are double quoted, Is this intentional, a bug or an issue on my end, thanks.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5809", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5809/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5809/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5809/events", "html_url": "https://github.com/google/flatbuffers/issues/5809", "id": 581286004, "node_id": "MDU6SXNzdWU1ODEyODYwMDQ=", "number": 5809, "title": "\"Use in Java\" and \"Use in C#\" links broken in gh-pages", "user": {"login": "danielzgtg", "id": 25646384, "node_id": "MDQ6VXNlcjI1NjQ2Mzg0", "avatar_url": "https://avatars1.githubusercontent.com/u/25646384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielzgtg", "html_url": "https://github.com/danielzgtg", "followers_url": "https://api.github.com/users/danielzgtg/followers", "following_url": "https://api.github.com/users/danielzgtg/following{/other_user}", "gists_url": "https://api.github.com/users/danielzgtg/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielzgtg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielzgtg/subscriptions", "organizations_url": "https://api.github.com/users/danielzgtg/orgs", "repos_url": "https://api.github.com/users/danielzgtg/repos", "events_url": "https://api.github.com/users/danielzgtg/events{/privacy}", "received_events_url": "https://api.github.com/users/danielzgtg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-14T16:59:45Z", "updated_at": "2020-03-20T17:55:01Z", "closed_at": "2020-03-20T17:55:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "The \"Use in Java\" and \"Use in C#\" links in the sidebar on GitHub pages are broken.\r\n\r\n# Procedure\r\n\r\n1. Start on https://google.github.io/flatbuffers/flatbuffers_guide_tutorial.html\r\n2. Click on \"Use in Java\" or \"Use in C#\" on the sidebar\r\n\r\n# Actual behavior\r\n\r\nI am sent to https://google.github.io/flatbuffers/@ref%20flatbuffers_guide_use_java or https://google.github.io/flatbuffers/@ref%20flatbuffers_guide_use_c-sharp and get a HTTP 404.\r\n\r\n# Excepted behavior\r\n\r\nBe taken to https://google.github.io/flatbuffers/flatbuffers_guide_use_java_c-sharp.html , and see the actual content.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5804", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5804/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5804/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5804/events", "html_url": "https://github.com/google/flatbuffers/issues/5804", "id": 579931403, "node_id": "MDU6SXNzdWU1Nzk5MzE0MDM=", "number": 5804, "title": "FlexBuffers java: can't parse numbers bigger than 127 (bigger than java short type) and float numbers", "user": {"login": "Bendor", "id": 4973472, "node_id": "MDQ6VXNlcjQ5NzM0NzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/4973472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bendor", "html_url": "https://github.com/Bendor", "followers_url": "https://api.github.com/users/Bendor/followers", "following_url": "https://api.github.com/users/Bendor/following{/other_user}", "gists_url": "https://api.github.com/users/Bendor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bendor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bendor/subscriptions", "organizations_url": "https://api.github.com/users/Bendor/orgs", "repos_url": "https://api.github.com/users/Bendor/repos", "events_url": "https://api.github.com/users/Bendor/events{/privacy}", "received_events_url": "https://api.github.com/users/Bendor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-12T13:16:18Z", "updated_at": "2020-03-13T08:21:17Z", "closed_at": "2020-03-12T20:34:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! First of all thanks for your great work! \r\nI Faced with a problem in FlexBuffers when I try to convert JSON to FlexBuffers binary data and then parse binary to Java (in Android project) pojo via FlexBuffers. The problem is that some basic fields types FlexBuffers can't parse. For example I has JSON:\r\n`{\r\n  \"a\": \"ccccc\", \r\n  \"b\": true, \r\n  \"c\": null, \r\n  \"d\": 127,\r\n  \"e\": 128,\r\n  \"f\": 0.5\r\n}`\r\n\r\nWhen JSON contain only fields **`a, b,c,d`** everything  works properly. \r\nBut if add to the json  **`\"e\": 128`** field  FlexBuffer parsing doesn't work - FlexBuffers.Map `size()`  return wrong  value `1280` instead of `5` and `map.keys()` returns empty vector . Pay attention that parser work properly with field  **` \"d\": 127`**.\r\nAlso if add to the json **` \"f\": 0.5`** field FlexBuffer parsing also doesn't work  - `map.size()` returns 83886080 and also keys is empty.\r\n\r\n\r\nCould you please help me how to fix FlaxBuffers to parse integers and floats correct? Thanks!\r\n\r\nSome details: I tested it on android project (builded with CMake, nothing spethial in CMake config (default generated by AndoidStudio config, and just added set(CMAKE_CXX_STANDARD 11) option).\r\n\r\n\r\nI use last master code, To enable FlexBuffers I changed `IDLOptions.use_flexbuffers` to true in `idl.h`\r\n\r\nMy Java code:\r\n\r\n```java\r\n\r\n    private void testFlexBuffers(String json) {\r\n        byte[] flatResult =  parseFlexJsonNative(json);\r\n        if (flatResult != null) {\r\n            FlexBuffers.Map map = FlexBuffers.getRoot(ByteBuffer.wrap(flatResult)).asMap();\r\n            int mapSize = map.size();\r\n            Log.i(\"FLEXBUFFERS\",\"Result map size is = \" + mapSize);\r\n        } else {\r\n            Log.e(\"FLEXBUFFERS\",\"result is NULL\");\r\n        }\r\n    }\r\n    \r\n    public static native byte[] parseFlexJsonNative(String json);\r\n```\r\n\r\nMy cpp file to parse json:\r\n\r\n```C\r\n#include <jni.h>\r\n#include <string>\r\n#include <android/log.h>\r\n#include <string>\r\n#include <stdlib.h>\r\n\r\n#include \"src/flatbuffers/idl.h\"\r\n#include \"src/flatbuffers/base.h\"\r\n#include \"main.h\"\r\n\r\nextern \"C\" JNIEXPORT jbyteArray JNICALL\r\nJava_com_example_myapplication3_MainActivity_parseFlexJsonNative(JNIEnv *env, jobject instance, jstring json_) {\r\n\r\n    const char *json = env->GetStringUTFChars(json_, 0);\r\n    flatbuffers::Parser parser;\r\n    bool ok = parser.Parse(json);\r\n    env->ReleaseStringUTFChars(json_, json);\r\n\r\n    if (ok) {\r\n        flatbuffers::uoffset_t length = parser.flex_builder_.GetSize();\r\n        jbyteArray result = env->NewByteArray(length);\r\n\r\n        std::vector<uint8_t> vectBuff =  parser.flex_builder_.GetBuffer();\r\n        uint8_t *bufferData = vectBuff.data();\r\n        env->SetByteArrayRegion(result, 0, length, reinterpret_cast<jbyte *>(bufferData));\r\n        return result;\r\n    }\r\n    return NULL;\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5800", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5800/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5800/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5800/events", "html_url": "https://github.com/google/flatbuffers/issues/5800", "id": 578950144, "node_id": "MDU6SXNzdWU1Nzg5NTAxNDQ=", "number": 5800, "title": "Incorrect `noexcept` qualifier for generated `union` type", "user": {"login": "vglavnyy", "id": 31897320, "node_id": "MDQ6VXNlcjMxODk3MzIw", "avatar_url": "https://avatars0.githubusercontent.com/u/31897320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vglavnyy", "html_url": "https://github.com/vglavnyy", "followers_url": "https://api.github.com/users/vglavnyy/followers", "following_url": "https://api.github.com/users/vglavnyy/following{/other_user}", "gists_url": "https://api.github.com/users/vglavnyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/vglavnyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vglavnyy/subscriptions", "organizations_url": "https://api.github.com/users/vglavnyy/orgs", "repos_url": "https://api.github.com/users/vglavnyy/repos", "events_url": "https://api.github.com/users/vglavnyy/events{/privacy}", "received_events_url": "https://api.github.com/users/vglavnyy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-11T01:19:13Z", "updated_at": "2020-03-12T19:07:47Z", "closed_at": "2020-03-12T19:07:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Code sample from the tests:\r\nhttps://github.com/google/flatbuffers/blob/95a21327fca5d1544b70fa6f32773828f940efd2/tests/monster_test_generated.h#L247-L249\r\n```cpp\r\ninline AnyUnion::AnyUnion(const AnyUnion &u) FLATBUFFERS_NOEXCEPT : type(u.type), value(nullptr) {\r\n  switch (type) {\r\n    case Any_TestSimpleTableWithEnum: {\r\n      value = new MyGame::Example::TestSimpleTableWithEnumT(*reinterpret_cast<MyGame::Example::TestSimpleTableWithEnumT *>(u.value));\r\n      break;\r\n    }\r\n```\r\n\r\nCopy-constructor and copy-assignment have the optimistic `noexcept` qualifier.\r\n1. `new` may throw.\r\n2. `TestSimpleTableWithEnumT` doesn't have `noexcept` and may throw.\r\n3. In the worst case, an user-application will be terminated inside a generated code.\r\n\r\nThis `noexcept` qualifier was added by #4249.\r\nGenerated move-ctor and move-assign are ok.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5795", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5795/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5795/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5795/events", "html_url": "https://github.com/google/flatbuffers/issues/5795", "id": 578249899, "node_id": "MDU6SXNzdWU1NzgyNDk4OTk=", "number": 5795, "title": "Release 1.12 tracking", "user": {"login": "aardappel", "id": 4663648, "node_id": "MDQ6VXNlcjQ2NjM2NDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/4663648?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aardappel", "html_url": "https://github.com/aardappel", "followers_url": "https://api.github.com/users/aardappel/followers", "following_url": "https://api.github.com/users/aardappel/following{/other_user}", "gists_url": "https://api.github.com/users/aardappel/gists{/gist_id}", "starred_url": "https://api.github.com/users/aardappel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aardappel/subscriptions", "organizations_url": "https://api.github.com/users/aardappel/orgs", "repos_url": "https://api.github.com/users/aardappel/repos", "events_url": "https://api.github.com/users/aardappel/events{/privacy}", "received_events_url": "https://api.github.com/users/aardappel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2020-03-09T23:38:16Z", "updated_at": "2020-08-20T16:38:16Z", "closed_at": "2020-08-20T16:38:16Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I was thinking of doing a new release, anyone know of PRs that should land before this happens, or recent PRs that introduced problems that should really be fixed?\r\n\r\nCould do this as early as this Thu (12th) if nothing comes up.\r\n\r\nThis issue to track progress towards 1.12. Please post any blockers here.\r\n\r\n@rw @vglavnyy @mustiikhalil @mugisoba @dbaileychess @paulovap @dnfield @somombo @AustinSchuh @maxburke @dpacbach @lu-wang-g ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5793", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5793/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5793/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5793/events", "html_url": "https://github.com/google/flatbuffers/issues/5793", "id": 577722915, "node_id": "MDU6SXNzdWU1Nzc3MjI5MTU=", "number": 5793, "title": "[Go]streaming / verify flatbuffers in network transfer ", "user": {"login": "tsingson", "id": 3875274, "node_id": "MDQ6VXNlcjM4NzUyNzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/3875274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsingson", "html_url": "https://github.com/tsingson", "followers_url": "https://api.github.com/users/tsingson/followers", "following_url": "https://api.github.com/users/tsingson/following{/other_user}", "gists_url": "https://api.github.com/users/tsingson/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsingson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsingson/subscriptions", "organizations_url": "https://api.github.com/users/tsingson/orgs", "repos_url": "https://api.github.com/users/tsingson/repos", "events_url": "https://api.github.com/users/tsingson/events{/privacy}", "received_events_url": "https://api.github.com/users/tsingson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-09T08:03:33Z", "updated_at": "2020-03-28T16:36:58Z", "closed_at": "2020-03-10T23:41:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## 0. movation\r\n\r\ni trying implementing a instance message service via  tcp client / server.    The Message serialized by flatbuffers, so, read streaming flatbuffers Message is must.\r\n\r\nlearning from \r\n\r\nhttps://github.com/google/flatbuffers/issues/3898\r\n\r\nhttps://github.com/google/flatbuffers/issues/5775\r\n\r\nhttps://github.com/google/flatbuffers/issues/4604\r\n\r\nhttps://github.com/google/flatbuffers/pull/3905\r\n\r\ni will implementing verify in Go,  here is some knowdge:\r\n\r\n## 1. struct of serialized flatbuffers\r\n\r\n  assume serialized flatbufers ( Message ) as two part:  Header ( metadata ) / Payload ( data ....) \r\n\r\n### 1.1 Message Header \r\n\r\n1. 4 byte of root header ( , get offset of payload start\r\n\r\n2. zero or more then one byte of prefilled ZERO\r\n\r\n3. vtable struct , as below reference from builder.go,  the Payload size ( data size ) include in vtable\r\n\r\n```\r\n\r\n// A vtable has the following format:\r\n\r\n//   <VOffsetT: size of the vtable in bytes, including this value>\r\n\r\n//   <VOffsetT: size of the object in bytes, including the vtable offset>\r\n\r\n//   <VOffsetT: offset for a field> * N, where N is the number of fields in\r\n\r\n//\t        the schema for this type. Includes deprecated fields.\r\n\r\n// Thus, a vtable is made of 2 + N elements, each SizeVOffsetT bytes wide.\r\n\r\n//\r\n\r\n// An object has the following format:\r\n\r\n//   <SOffsetT: offset to this object's vtable (may be negative)>\r\n\r\n//   <byte: data>+\r\n\r\n```\r\n\r\n### 1.2 Message payload part struct \r\n\r\nTBD....\r\n\r\n\r\n## 2. read streaming serialized flatbuffers\r\n\r\n1. read  Message (flatbuf serialized data)  from network, 4 byte by 4 byte \r\n\r\n2. read and parse header.  check is a valid flatbufers or not  \r\n\r\n3. get the data size of message from header,   and get the rest data\r\n\r\n4. un-serialize the Message when know the IDL\r\n\r\n5. ( option ) Experimental reflaction to guess ths struct of IDL\r\n\r\n ## 3. a bug in builder.go , in func (b *Builder) WriteVtable() \r\n\r\nAs my assume,  serialized flatbufers ( Message ) as two part:  Header ( metadata ) / Payload ( data ....) .\r\n\r\n<VOffsetT: size of the vtable in bytes, including this value>   -------------- call it as vTableSize \r\n <VOffsetT: size of the object in bytes, including the vtable offset> -------- this \" size of the object\" should be size of  Message Payload ( call it as payloadSize ) \r\n\r\nso,  \r\n\r\n**whole size of serialized flatbuffers  =  HeaderSize ( include vTableSize )  + payloadSize**\r\n\r\nin builder.go\r\n```\r\n\t\t// The two metadata fields are written last.\r\n\r\n\t\t// First, store the object bytesize:\r\n\t\tobjectSize := objectOffset // - b.objectEnd   ---------------------- bug\r\n\t\tb.PrependVOffsetT(VOffsetT(objectSize))\r\n\r\n\t\t// Second, store the vtable bytesize:\r\n\t\tvBytes := (len(b.vtable) + VtableMetadataFields) * SizeVOffsetT\r\n\t\tb.PrependVOffsetT(VOffsetT(vBytes))\r\n\r\n\t\t// Next, write the offset to the new vtable in the\r\n\t\t// already-allocated SOffsetT at the beginning of this object:\r\n\t\tobjectStart := SOffsetT(len(b.Bytes)) - SOffsetT(objectOffset)\r\n\t\tWriteSOffsetT(b.Bytes[objectStart:],\r\n\t\t\tSOffsetT(b.Offset())-SOffsetT(objectOffset))\r\n\r\n\t\t// Finally, store this vtable in memory for future\r\n\t\t// deduplication:\r\n\t\tb.vtables = append(b.vtables, b.Offset())\r\n```\r\n\r\n------------------\r\n\r\nin builder.go , line 163:\r\n```\r\n      \t\tobjectSize := objectOffset - b.objectEnd  \r\n```\r\n\r\n\r\ntesting IDL like this:\r\n```\r\ntable String {\r\n    Field:string;\r\n}\r\n```\r\n\r\nfilled the  Field with \"1234567\",    serialized data should be\r\n\r\n[1100 0 0 0 0 0 110 0 10100 0 100 0 110 0 0 0 100 0 0 0 111 0 0 0 110001 110010 110011 110100 110101 110110 110111 0]\r\n\r\n--> Object size in 9th byte shuld be 20  --- [ 101000 ] -----> 4 byte SOffset / 4 byte vector construction / 4 byte is real size of string ( \"1234567\" is 7 )  / 7 byte \"1234567\" +  1 byte ended string with \"zero\" byte  ,  no any pre-filled \"zero\" byte in end of string \r\n\r\ntotal serialized data is 32 byte:\r\n* 4 byte is UOffset.\r\n* 2 byte pre-filled \"zero\" byte\r\n* 6 byte vTable,  include  2 byte VOffset for vTable size, 2 byte VOffset for data object size, 2 byte VOffset  for one slot ( in this example , only one field in table ) \r\n* 20 byte for data , include 4 byte SOffset, 16 byte for string vector construction \r\n\r\n\r\nbut , we got: \r\n \r\n[1100 0 0 0 0 0 110 0 1000 0 100 0 110 0 0 0 100 0 0 0 111 0 0 0 110001 110010 110011 110100 110101 110110 110111 0]\r\n \r\n--> Object size in 9th byte is 8   --- [ 1000]\r\n \r\nin builder.go , line 163, change to :\r\n```\r\n      \t\tobjectSize := objectOffset  \r\n```\r\n\r\nwill got correct\r\n\r\n\r\n-----------------\r\ncorrect object size in vTable , will help to read streaming flatbuffers .\r\n-----------------\r\n\r\n\r\n\r\nPR is https://github.com/google/flatbuffers/pull/5794\r\n\r\n\r\n\r\n\r\n\r\nany suggestion  r welcome!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5792", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5792/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5792/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5792/events", "html_url": "https://github.com/google/flatbuffers/issues/5792", "id": 576516196, "node_id": "MDU6SXNzdWU1NzY1MTYxOTY=", "number": 5792, "title": "json to flexbuffers", "user": {"login": "rjammala", "id": 4990663, "node_id": "MDQ6VXNlcjQ5OTA2NjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/4990663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rjammala", "html_url": "https://github.com/rjammala", "followers_url": "https://api.github.com/users/rjammala/followers", "following_url": "https://api.github.com/users/rjammala/following{/other_user}", "gists_url": "https://api.github.com/users/rjammala/gists{/gist_id}", "starred_url": "https://api.github.com/users/rjammala/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rjammala/subscriptions", "organizations_url": "https://api.github.com/users/rjammala/orgs", "repos_url": "https://api.github.com/users/rjammala/repos", "events_url": "https://api.github.com/users/rjammala/events{/privacy}", "received_events_url": "https://api.github.com/users/rjammala/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-05T20:37:48Z", "updated_at": "2020-03-08T01:51:48Z", "closed_at": "2020-03-08T01:51:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Apologize for opening an issue for this question but was wondering what is the best way to convert a json file that I have to the flexbuffer format? I don't want to use a schema for this. My json is new line delimited (one json per line).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5789", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5789/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5789/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5789/events", "html_url": "https://github.com/google/flatbuffers/issues/5789", "id": 574410122, "node_id": "MDU6SXNzdWU1NzQ0MTAxMjI=", "number": 5789, "title": "[Swift] Object API", "user": {"login": "mustiikhalil", "id": 26250654, "node_id": "MDQ6VXNlcjI2MjUwNjU0", "avatar_url": "https://avatars3.githubusercontent.com/u/26250654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mustiikhalil", "html_url": "https://github.com/mustiikhalil", "followers_url": "https://api.github.com/users/mustiikhalil/followers", "following_url": "https://api.github.com/users/mustiikhalil/following{/other_user}", "gists_url": "https://api.github.com/users/mustiikhalil/gists{/gist_id}", "starred_url": "https://api.github.com/users/mustiikhalil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mustiikhalil/subscriptions", "organizations_url": "https://api.github.com/users/mustiikhalil/orgs", "repos_url": "https://api.github.com/users/mustiikhalil/repos", "events_url": "https://api.github.com/users/mustiikhalil/events{/privacy}", "received_events_url": "https://api.github.com/users/mustiikhalil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-03T04:36:45Z", "updated_at": "2020-04-13T16:28:57Z", "closed_at": "2020-04-13T16:28:57Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Object API implementation for the swift programming language is work in progress, and will be finishing it soon.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5784", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5784/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5784/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5784/events", "html_url": "https://github.com/google/flatbuffers/issues/5784", "id": 573093101, "node_id": "MDU6SXNzdWU1NzMwOTMxMDE=", "number": 5784, "title": "[C++] Performence of mutable vs API", "user": {"login": "TheMesoria", "id": 9269398, "node_id": "MDQ6VXNlcjkyNjkzOTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/9269398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheMesoria", "html_url": "https://github.com/TheMesoria", "followers_url": "https://api.github.com/users/TheMesoria/followers", "following_url": "https://api.github.com/users/TheMesoria/following{/other_user}", "gists_url": "https://api.github.com/users/TheMesoria/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheMesoria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheMesoria/subscriptions", "organizations_url": "https://api.github.com/users/TheMesoria/orgs", "repos_url": "https://api.github.com/users/TheMesoria/repos", "events_url": "https://api.github.com/users/TheMesoria/events{/privacy}", "received_events_url": "https://api.github.com/users/TheMesoria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-29T01:18:09Z", "updated_at": "2020-03-10T10:38:52Z", "closed_at": "2020-03-10T10:38:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\n\r\nI am new to flatbuffers, and noticed that this Github is actually active, so I find this place as best place to ask this question. \r\n\r\n## About my little/big use-case\r\n\r\nI am trying to learn about flatbuffers, to maybe use them in my other projects, so I decided to write a short and really simple game that takes simple input and passes it to other PC.\r\n\r\n## Why is it important?\r\n\r\nWhile It is really simple and not that necessary for optimization, I want to know the potential of this framework. In this case, I have taken 2 interesting flags for me: `--gen-mutable` and `--gen-object-api`, to compare them.\r\n\r\n## How?\r\n\r\n```cpp\r\nfor (auto count = 0u; count < 10'000'000u; count = count + 100'000u)\r\n\t{\r\n\t\tauto time_started_mutable = std::chrono::system_clock::now();\r\n\r\n\t\tfor (auto i = 0; i < count; i++)\r\n\t\t{\r\n\t\t\tauto* x_MUT = meta::game::GetMutableManagedObject(data);\r\n\t\t\tx_MUT->mutate_id(i);\r\n\t\t\tx_MUT->mutable_monster()->mutate_id(i + 1);\r\n\t\t}\r\n\r\n\t\tauto time_end_mutable = std::chrono::system_clock::now();\r\n\t\tauto result_mutable   = time_end_mutable - time_started_mutable;\r\n\r\n\t\tresult_file_MUT << \"MUT,\" << count << \",\"\r\n\t\t\t\t  << std::chrono::duration_cast<std::chrono::milliseconds>(time_end_mutable - time_started_mutable)\r\n\t\t\t\t\t  .count() << std::endl;\r\n\r\n\t\tauto time_started_api = std::chrono::system_clock::now();\r\n\r\n\t\tstd::uint8_t* result_of_process_api = nullptr;\r\n\t\tflatbuffers::FlatBufferBuilder fbb;\r\n\t\tfor (auto i = 0; i < count; i++)\r\n\t\t{\r\n\t\t\tauto x_API = meta::game::UnPackManagedObject(data);\r\n\t\t\tx_API->id          = i;\r\n\t\t\tx_API->monster->id = i + 1;\r\n\t\t\tmeta::game::ManagedObject::Pack(fbb,&*x_API);\r\n\t\t}\r\n\r\n\r\n\t\tauto time_end_api = std::chrono::system_clock::now();\r\n\t\tauto result_api   = time_end_mutable - time_started_mutable;\r\n\r\n\t\tresult_file_API << \"API,\" << count << \",\"\r\n\t\t\t\t\t  << std::chrono::duration_cast<std::chrono::milliseconds>(time_end_api - time_started_api).count()\r\n\t\t\t\t\t  << std::endl;\r\n\r\n\t}\r\n```\r\n\r\n## Results\r\n\r\n| Type  | Operation Count  | Time (ms)    |\r\n| ---- | ------- | ---- |\r\n| API  | 0       | 0    |\r\n| API  | 100000  | 183  |\r\n| API  | 200000  | 444  |\r\n| API  | 300000  | 540  |\r\n| API  | 400000  | 634  |\r\n| API  | 500000  | 732  |\r\n| API  | 600000  | 883  |\r\n| API  | 700000  | 1017 |\r\n| API  | 800000  | 1209 |\r\n| API  | 900000  | 1447 |\r\n| API  | 1000000 | 1660 |\r\n| API  | 1100000 | 1640 |\r\n| API  | 1200000 | 1743 |\r\n| API  | 1300000 | 1900 |\r\n| API  | 1400000 | 2036 |\r\n| API  | 1500000 | 2179 |\r\n| API  | 1600000 | 2316 |\r\n| API  | 1700000 | 2458 |\r\n| API  | 1800000 | 2576 |\r\n| API  | 1900000 | 2751 |\r\n| API  | 2000000 | 2890 |\r\n| API  | 2100000 | 3030 |\r\n| API  | 2200000 | 3155 |\r\n| API  | 2300000 | 3295 |\r\n| API  | 2400000 | 3439 |\r\n| API  | 2500000 | 3615 |\r\n| API  | 2600000 | 3854 |\r\n| API  | 2700000 | 3947 |\r\n| API  | 2800000 | 4160 |\r\n| API  | 2900000 | 4311 |\r\n| API  | 3000000 | 4428 |\r\n\r\n| Type  | Operation Count  | Time (ms)    |\r\n| ---- | ------- | ---- |\r\n| MUT  | 0       | 0    |\r\n| MUT  | 100000  | 12   |\r\n| MUT  | 200000  | 27   |\r\n| MUT  | 300000  | 42   |\r\n| MUT  | 400000  | 49   |\r\n| MUT  | 500000  | 57   |\r\n| MUT  | 600000  | 68   |\r\n| MUT  | 700000  | 78   |\r\n| MUT  | 800000  | 89   |\r\n| MUT  | 900000  | 101  |\r\n| MUT  | 1000000 | 121  |\r\n| MUT  | 1100000 | 131  |\r\n| MUT  | 1200000 | 136  |\r\n| MUT  | 1300000 | 150  |\r\n| MUT  | 1400000 | 159  |\r\n| MUT  | 1500000 | 167  |\r\n| MUT  | 1600000 | 178  |\r\n| MUT  | 1700000 | 188  |\r\n| MUT  | 1800000 | 198  |\r\n| MUT  | 1900000 | 210  |\r\n| MUT  | 2000000 | 219  |\r\n| MUT  | 2100000 | 231  |\r\n| MUT  | 2200000 | 241  |\r\n| MUT  | 2300000 | 253  |\r\n| MUT  | 2400000 | 263  |\r\n| MUT  | 2500000 | 274  |\r\n| MUT  | 2600000 | 315  |\r\n| MUT  | 2700000 | 310  |\r\n| MUT  | 2800000 | 309  |\r\n| MUT  | 2900000 | 329  |\r\n| MUT  | 3000000 | 332  |\r\n\r\n![image](https://user-images.githubusercontent.com/9269398/75597535-49531f80-5a96-11ea-8eb9-02b590bd71b0.png)\r\n\r\n## Gimmicks\r\n\r\nOkay, the keen eye probably noticed that I made a miny tiny mistake there.\r\n\r\n```cpp\r\n\t\tfor (auto i = 0; i < count; i++)\r\n\t\t{\r\n\t\t\tauto* x_MUT = meta::game::GetMutableManagedObject(data);\r\n\t\t\tx_MUT->mutate_id(i);\r\n\t\t\tx_MUT->mutable_monster()->mutate_id(i + 1);\r\n\t\t}\r\n```\r\n\r\nYeah, I did not deserialize it. From what I can understand, It's already saved in `data` (`std::uint8_t*`) pointing space, so I kindly omitted this operation as unnecessary.\r\n\r\n## Question... Doubts?\r\n\r\nAs we can see Mutable operation is just straight *SUPERIOR* to API one... Is it correct? Should the difference be on `x13` scale? It's a crazy difference ( insane is the fact that it scales linearly, but I bet it's an implementation detail). Maybe I did omit some kind of important detail? What is the definitive advantage of using API? because right now it looks like it is just to solve obfuscation of standard way of doing it.   Does scalar editing (vectors) the only advantage?\r\n\r\n## Sum up\r\n\r\nSorry if I asked questions already answered somewhere deep or even upon the surface, but I really do scratch my head on the best way of approaching your product, as it looks crazy good to me!\r\n\r\nBR\r\nWojtek", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5780", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5780/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5780/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5780/events", "html_url": "https://github.com/google/flatbuffers/issues/5780", "id": 572237310, "node_id": "MDU6SXNzdWU1NzIyMzczMTA=", "number": 5780, "title": "Is there an version of getByKey for rust flatbuffers Vector?", "user": {"login": "fabianmurariu", "id": 2404621, "node_id": "MDQ6VXNlcjI0MDQ2MjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/2404621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabianmurariu", "html_url": "https://github.com/fabianmurariu", "followers_url": "https://api.github.com/users/fabianmurariu/followers", "following_url": "https://api.github.com/users/fabianmurariu/following{/other_user}", "gists_url": "https://api.github.com/users/fabianmurariu/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabianmurariu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabianmurariu/subscriptions", "organizations_url": "https://api.github.com/users/fabianmurariu/orgs", "repos_url": "https://api.github.com/users/fabianmurariu/repos", "events_url": "https://api.github.com/users/fabianmurariu/events{/privacy}", "received_events_url": "https://api.github.com/users/fabianmurariu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-27T17:26:38Z", "updated_at": "2020-02-28T15:24:12Z", "closed_at": "2020-02-28T15:24:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I see there are implementations for ordering on fields marked as `key` but there doesn't seem to be a way to use that for a binary search.\r\n\r\nI can steal an implementation from rust Vec for binary search but it doesn't seem to work with flatbuffers Vector\r\n\r\n```\r\npub trait BinarySearch {\r\n\r\n    type Item;\r\n\r\n    fn binary_search_by<F>(&self, f: F) -> Result<usize, usize>\r\n    where F: Fn(&Self::Item) -> Ordering;\r\n   \r\n}\r\n\r\nimpl<'a, T: Follow<'a> + 'a> BinarySearch for Vector<'a, T> {\r\n    type Item = T::Inner;\r\n\r\n    #[inline(always)]\r\n    fn binary_search_by<F>(&self, f: F) -> Result<usize, usize>\r\n    where F: Fn(&Self::Item) -> Ordering {\r\n        let s = self;\r\n        let mut size = s.len();\r\n        if size == 0 {\r\n            return Err(0);\r\n        }\r\n        let mut base = 0usize;\r\n        while size > 1 {\r\n            let half = size / 2;\r\n            let mid = base + half;\r\n            // mid is always in [0, size), that means mid is >= 0 and < size.\r\n            // mid >= 0: by definition\r\n            // mid < size: mid = size / 2 + size / 4 + size / 8 ...\r\n            let a = s.get(mid); // FIXME: replace with relevant call into sorted vector\r\n            let cmp = f(&a);\r\n            base = if cmp == Ordering::Greater { base } else { mid };\r\n            size -= half;\r\n        }\r\n        // base is always in [0, size) because base <= mid.\r\n        let cmp = f(&s.get(base));\r\n        if cmp == Ordering::Equal { Ok(base) } else { Err(base + (cmp == Ordering::Less) as usize) }\r\n    }\r\n}\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5773", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5773/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5773/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5773/events", "html_url": "https://github.com/google/flatbuffers/issues/5773", "id": 566801798, "node_id": "MDU6SXNzdWU1NjY4MDE3OTg=", "number": 5773, "title": "Verifier should optionally ignore union bounds checks", "user": {"login": "krukai", "id": 22506122, "node_id": "MDQ6VXNlcjIyNTA2MTIy", "avatar_url": "https://avatars2.githubusercontent.com/u/22506122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krukai", "html_url": "https://github.com/krukai", "followers_url": "https://api.github.com/users/krukai/followers", "following_url": "https://api.github.com/users/krukai/following{/other_user}", "gists_url": "https://api.github.com/users/krukai/gists{/gist_id}", "starred_url": "https://api.github.com/users/krukai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krukai/subscriptions", "organizations_url": "https://api.github.com/users/krukai/orgs", "repos_url": "https://api.github.com/users/krukai/repos", "events_url": "https://api.github.com/users/krukai/events{/privacy}", "received_events_url": "https://api.github.com/users/krukai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-18T10:40:19Z", "updated_at": "2020-02-22T20:56:17Z", "closed_at": "2020-02-22T20:56:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "_Flatbuffers 1.11.0, C++._\r\n\r\n### Scenario\r\nEvolve a schema by adding a table at the end of a union. According to `--conform` and overall documentation, this seems to be acceptable.\r\n\r\n### Caveat\r\nVerifying a buffer built with the evolved schema with a verifier using the previous schema version causes `VerifyMyEvolvedUnion` to run into its default case and return `false`. So if I want to work with a buffer \"from the future\", I have to skip verification and assume it is valid.\r\n\r\n### Expected behavior\r\nThis is a tough one, as the verifier cannot vouch for the validity of a buffer it only partially understands. Still, actually failing to verify a known union type is different from not knowing the union type. As a user, I want to be able to make that distinction.\r\n\r\n### Suggestion\r\nAdd the possibility to mark a union in a schema file with a keyword such as `ignore_bounds`. If this attribute is set, the default case in `VerifyMyEvolvedUnion` returns `true`, rather than false.\r\nIt is my responsibility as a user then to manually verify if the enum value is within its `*_MIN` and `*_MAX` and act accordingly.\r\n\r\nPerhaps I am just horribly misunderstanding something here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5769", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5769/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5769/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5769/events", "html_url": "https://github.com/google/flatbuffers/issues/5769", "id": 565288666, "node_id": "MDU6SXNzdWU1NjUyODg2NjY=", "number": 5769, "title": "set(PACKAGE_VERSION \"..\") when installed from 1.11.0 tarball", "user": {"login": "DimStar77", "id": 532559, "node_id": "MDQ6VXNlcjUzMjU1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/532559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DimStar77", "html_url": "https://github.com/DimStar77", "followers_url": "https://api.github.com/users/DimStar77/followers", "following_url": "https://api.github.com/users/DimStar77/following{/other_user}", "gists_url": "https://api.github.com/users/DimStar77/gists{/gist_id}", "starred_url": "https://api.github.com/users/DimStar77/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DimStar77/subscriptions", "organizations_url": "https://api.github.com/users/DimStar77/orgs", "repos_url": "https://api.github.com/users/DimStar77/repos", "events_url": "https://api.github.com/users/DimStar77/events{/privacy}", "received_events_url": "https://api.github.com/users/DimStar77/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-14T12:09:45Z", "updated_at": "2020-05-14T18:34:00Z", "closed_at": "2020-05-14T18:34:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "When installing flatbuffers from the provided tarball (and not from a git checkout tree), the installed file CMake/FlatbuffersConfigVersion.cmake contains an invalid\r\n\r\n```set(PACKAGE_VERSION \"..\")```\r\n\r\nThis comes from version.cmake:\r\n\r\n```\r\nexecute_process(\r\n    COMMAND ${GIT} describe\r\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\r\n    OUTPUT_VARIABLE GIT_DESCRIBE_DIRTY\r\n    OUTPUT_STRIP_TRAILING_WHITESPACE\r\n)\r\nstring(REGEX REPLACE \"^v([0-9]+)\\\\..*\" \"\\\\1\" VERSION_MAJOR \"${GIT_DESCRIBE_DIRTY}\")\r\n```\r\n\r\nIn case of the release tarballs, there is no .git structure available and thus git describe could not possibly give any useful information - let alone that relying on git describe for 'release tarballs' would be bad practice.\r\n\r\nIn case of released tarball (i.e git describe not giving valid version information) the version should be find by other means (it should be known already - it was used to create the tarball after all)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5767", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5767/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5767/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5767/events", "html_url": "https://github.com/google/flatbuffers/issues/5767", "id": 564156331, "node_id": "MDU6SXNzdWU1NjQxNTYzMzE=", "number": 5767, "title": "[Python] Potential buffer missalignment on `Builder.__Finish`", "user": {"login": "pyottamus", "id": 19917861, "node_id": "MDQ6VXNlcjE5OTE3ODYx", "avatar_url": "https://avatars0.githubusercontent.com/u/19917861?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pyottamus", "html_url": "https://github.com/pyottamus", "followers_url": "https://api.github.com/users/pyottamus/followers", "following_url": "https://api.github.com/users/pyottamus/following{/other_user}", "gists_url": "https://api.github.com/users/pyottamus/gists{/gist_id}", "starred_url": "https://api.github.com/users/pyottamus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pyottamus/subscriptions", "organizations_url": "https://api.github.com/users/pyottamus/orgs", "repos_url": "https://api.github.com/users/pyottamus/repos", "events_url": "https://api.github.com/users/pyottamus/events{/privacy}", "received_events_url": "https://api.github.com/users/pyottamus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-12T17:35:28Z", "updated_at": "2020-02-12T21:54:23Z", "closed_at": "2020-02-12T21:52:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "@rw, @aardappel The buffer may be unaligned when finalized in the event the `UOffset` is ever increased to 64bits.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5766", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5766/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5766/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5766/events", "html_url": "https://github.com/google/flatbuffers/issues/5766", "id": 564056834, "node_id": "MDU6SXNzdWU1NjQwNTY4MzQ=", "number": 5766, "title": "[Swift] Support CocoaPods alongside Swift Package Manager", "user": {"login": "bbqsrc", "id": 279099, "node_id": "MDQ6VXNlcjI3OTA5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/279099?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bbqsrc", "html_url": "https://github.com/bbqsrc", "followers_url": "https://api.github.com/users/bbqsrc/followers", "following_url": "https://api.github.com/users/bbqsrc/following{/other_user}", "gists_url": "https://api.github.com/users/bbqsrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/bbqsrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bbqsrc/subscriptions", "organizations_url": "https://api.github.com/users/bbqsrc/orgs", "repos_url": "https://api.github.com/users/bbqsrc/repos", "events_url": "https://api.github.com/users/bbqsrc/events{/privacy}", "received_events_url": "https://api.github.com/users/bbqsrc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2020-02-12T14:58:15Z", "updated_at": "2020-02-21T21:51:24Z", "closed_at": "2020-02-21T19:42:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have a package that uses CocoaPods for package management, and migrating to SwiftPM is not an option for us due to the project being a polyglot project.\r\n\r\nWould it be acceptable to support CocoaPods alongside SwiftPM? Should be possible to keep everything as it is with just the addition of a Podspec file.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5762", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5762/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5762/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5762/events", "html_url": "https://github.com/google/flatbuffers/issues/5762", "id": 561863812, "node_id": "MDU6SXNzdWU1NjE4NjM4MTI=", "number": 5762, "title": " enum values must be specified in ascending order [Java, OS X, flatc, master]", "user": {"login": "djchapm", "id": 9857153, "node_id": "MDQ6VXNlcjk4NTcxNTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/9857153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djchapm", "html_url": "https://github.com/djchapm", "followers_url": "https://api.github.com/users/djchapm/followers", "following_url": "https://api.github.com/users/djchapm/following{/other_user}", "gists_url": "https://api.github.com/users/djchapm/gists{/gist_id}", "starred_url": "https://api.github.com/users/djchapm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djchapm/subscriptions", "organizations_url": "https://api.github.com/users/djchapm/orgs", "repos_url": "https://api.github.com/users/djchapm/repos", "events_url": "https://api.github.com/users/djchapm/events{/privacy}", "received_events_url": "https://api.github.com/users/djchapm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-07T20:48:22Z", "updated_at": "2020-06-23T07:12:23Z", "closed_at": "2020-06-23T00:02:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to disable strict_order in flatc fbs-> java compiler?  I don't understand the requirement.\r\n**Example:**\r\n`flatc --java x.fbs`\r\nx.fbs:\r\n```\r\nenum Action: byte\r\n{\r\n\tReject = 82, // (R)\r\n\tStepUpOnly = 83, // (S)\r\n\tTerminateWithoutExec = 84, // (T)\r\n\tTerminateWithExec = 69 // (E)\r\n}\r\n```\r\n\r\n> error: enum values must be specified in ascending order\r\n\r\nThis seems unnecessary since we are assigning explicit values and not generating values.  I was hoping there would be a flag for the flatc command line options but I don't see any.\r\n\r\nFLATBUFFERS_CHECKED_ERROR AssignEnumeratorValue:\r\nhttps://github.com/google/flatbuffers/blob/master/src/idl_parser.cpp#L1980 \r\nNote this is similar to discussion in https://github.com/google/flatbuffers/issues/4436, but specifically about requiring ascending, or at least allowing option for flatc compiler to not enforce strict_order.\r\n\r\nThanks,\r\n  Dan C.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5760", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5760/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5760/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5760/events", "html_url": "https://github.com/google/flatbuffers/issues/5760", "id": 561183189, "node_id": "MDU6SXNzdWU1NjExODMxODk=", "number": 5760, "title": "Possible buffer misalignment error in FlexBuffers C++ port", "user": {"login": "mzaks", "id": 347106, "node_id": "MDQ6VXNlcjM0NzEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/347106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzaks", "html_url": "https://github.com/mzaks", "followers_url": "https://api.github.com/users/mzaks/followers", "following_url": "https://api.github.com/users/mzaks/following{/other_user}", "gists_url": "https://api.github.com/users/mzaks/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzaks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzaks/subscriptions", "organizations_url": "https://api.github.com/users/mzaks/orgs", "repos_url": "https://api.github.com/users/mzaks/repos", "events_url": "https://api.github.com/users/mzaks/events{/privacy}", "received_events_url": "https://api.github.com/users/mzaks/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100732708, "node_id": "MDU6TGFiZWwxMDA3MzI3MDg=", "url": "https://api.github.com/repos/google/flatbuffers/labels/stale", "name": "stale", "color": "ffffff", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-06T18:12:41Z", "updated_at": "2020-08-13T19:14:51Z", "closed_at": "2020-08-13T19:14:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I received a bug request for FlexBuffers-CSharp, where a buffer produced by C++ was leading to an exception while reading it in C#. Here is the link to the issue:\r\nhttps://github.com/mzaks/FlexBuffers-CSharp/issues/1\r\n\r\nAfter examining the binary file the user provided I could reproduce the issue and the exception was thrown, because the data should be accessed in a misaligned way - read 4 bytes value from offset `363`. If I remove the alignment check the buffer can be read. \r\n\r\nThe issue on FlexBuffers-CSharp repo contains a link to C++ code used to produce the buffer and the resulting buffer as a binary file.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5759", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5759/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5759/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5759/events", "html_url": "https://github.com/google/flatbuffers/issues/5759", "id": 561105257, "node_id": "MDU6SXNzdWU1NjExMDUyNTc=", "number": 5759, "title": "Interface to use Apache Arrow Arrays/Builders instead of FlatBufferBuilder", "user": {"login": "vkhristenko", "id": 6576649, "node_id": "MDQ6VXNlcjY1NzY2NDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/6576649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vkhristenko", "html_url": "https://github.com/vkhristenko", "followers_url": "https://api.github.com/users/vkhristenko/followers", "following_url": "https://api.github.com/users/vkhristenko/following{/other_user}", "gists_url": "https://api.github.com/users/vkhristenko/gists{/gist_id}", "starred_url": "https://api.github.com/users/vkhristenko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vkhristenko/subscriptions", "organizations_url": "https://api.github.com/users/vkhristenko/orgs", "repos_url": "https://api.github.com/users/vkhristenko/repos", "events_url": "https://api.github.com/users/vkhristenko/events{/privacy}", "received_events_url": "https://api.github.com/users/vkhristenko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-06T15:56:23Z", "updated_at": "2020-02-07T08:47:07Z", "closed_at": "2020-02-07T08:46:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have a quick question about if it's possible/doable and how much work (let's say if one is interested) it would be to use Apache Arrow Arrays/Builders when serializing/deserializing from a flatbuffer created schema. \r\n\r\nJust to be clear, the question is not about how to serialize/deserialize Arrow's metadata using flatbuffers, but rather if it is possible to swap the FlatBuffer/Builder logic with Arrow Array/Builder logic. I do realize that Arrow's layouts are complicated and not contiguous (whereas FlatBuffer appears like a contiguous one). The idea is to leverage flatc but serialize/deserialize to/from Arrow's representation when one need does need to deal with user-defined data formats... \r\n\r\nThanks a lot! VK\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5756", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5756/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5756/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5756/events", "html_url": "https://github.com/google/flatbuffers/issues/5756", "id": 560510348, "node_id": "MDU6SXNzdWU1NjA1MTAzNDg=", "number": 5756, "title": "Running generate_code.sh invalidates entire flatbuffers build.", "user": {"login": "dpacbach", "id": 8852457, "node_id": "MDQ6VXNlcjg4NTI0NTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/8852457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpacbach", "html_url": "https://github.com/dpacbach", "followers_url": "https://api.github.com/users/dpacbach/followers", "following_url": "https://api.github.com/users/dpacbach/following{/other_user}", "gists_url": "https://api.github.com/users/dpacbach/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpacbach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpacbach/subscriptions", "organizations_url": "https://api.github.com/users/dpacbach/orgs", "repos_url": "https://api.github.com/users/dpacbach/repos", "events_url": "https://api.github.com/users/dpacbach/events{/privacy}", "received_events_url": "https://api.github.com/users/dpacbach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-02-05T17:08:45Z", "updated_at": "2020-02-24T22:46:25Z", "closed_at": "2020-02-24T22:46:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems that when we run `tests/generate_code.sh` it (always) causes the timestamp on `include/flatbuffers/reflection_generated.h` to be updated and thus invalidates much of the flatbuffers build.  This makes development and iterative testing much more time consuming.  Any advice?\r\n\r\nOf course, we can always comment out the lines:\r\n```\r\ncd ../reflection\r\n./generate_code.sh --cpp-std c++0x\r\n```\r\nfrom the script which improves things significantly, but I guess this is not ideal/correct.\r\n\r\nHere is an idea: we add a flag to the generator `--only-write-on-update` so that it will only write to a generated file when the content changes, thereby not affecting the timestamp of the file, which should generally speed up compilation times for users in addition to fixing this issue with `generate_code.sh`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5755", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5755/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5755/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5755/events", "html_url": "https://github.com/google/flatbuffers/issues/5755", "id": 560478239, "node_id": "MDU6SXNzdWU1NjA0NzgyMzk=", "number": 5755, "title": "flatc --cpp generates different header on different hosts", "user": {"login": "nedo99", "id": 1510807, "node_id": "MDQ6VXNlcjE1MTA4MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1510807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nedo99", "html_url": "https://github.com/nedo99", "followers_url": "https://api.github.com/users/nedo99/followers", "following_url": "https://api.github.com/users/nedo99/following{/other_user}", "gists_url": "https://api.github.com/users/nedo99/gists{/gist_id}", "starred_url": "https://api.github.com/users/nedo99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nedo99/subscriptions", "organizations_url": "https://api.github.com/users/nedo99/orgs", "repos_url": "https://api.github.com/users/nedo99/repos", "events_url": "https://api.github.com/users/nedo99/events{/privacy}", "received_events_url": "https://api.github.com/users/nedo99/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-05T16:16:28Z", "updated_at": "2020-02-05T19:17:03Z", "closed_at": "2020-02-05T19:17:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\n`flatc --cpp shema.fbs` generates different header on different host. Example is the following. fbs part is\r\n\r\n```\r\nenum Option:int { \r\n\toption1 = 0, \r\n\toption2,\r\n\toption3,\r\n\toption4\r\n}\r\n```\r\n\r\nBoth hosts are based Ubuntu 18.04, GCC 8.3.0. The difference is that one of the host is using docker.\r\n\r\nOn the docker host, part of the header is generated to:\r\n```\r\ninline const char * const *EnumNamesOption() {\r\n  static const char * const names[5] = {\r\n    \"option1\",\r\n    \"option2\",\r\n    \"option3\",\r\n    \"option4\",\r\n    nullptr\r\n  };\r\n  return names;\r\n}\r\n```\r\n\r\nand on the regular host:\r\n```\r\ninline const char * const *EnumNamesOption() {\r\n  static const char * const names[] = {\r\n    \"option1\",\r\n    \"option2\",\r\n    \"option3\",\r\n    \"option4\",\r\n    nullptr\r\n  };\r\n  return names;\r\n}\r\n```\r\n\r\nso the only difference is that `5` is added. Both hosts are using `flatc v 1.11.0`.\r\n\r\nWhat is the reason for this?\r\n\r\nLooking forward to your reply!\r\n\r\nRegards,\r\nNedim", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5754", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5754/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5754/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5754/events", "html_url": "https://github.com/google/flatbuffers/issues/5754", "id": 560303784, "node_id": "MDU6SXNzdWU1NjAzMDM3ODQ=", "number": 5754, "title": "C++ feature request to add easier functions for IsFieldPresent() on generated structs", "user": {"login": "giantmustache", "id": 5402708, "node_id": "MDQ6VXNlcjU0MDI3MDg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5402708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giantmustache", "html_url": "https://github.com/giantmustache", "followers_url": "https://api.github.com/users/giantmustache/followers", "following_url": "https://api.github.com/users/giantmustache/following{/other_user}", "gists_url": "https://api.github.com/users/giantmustache/gists{/gist_id}", "starred_url": "https://api.github.com/users/giantmustache/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giantmustache/subscriptions", "organizations_url": "https://api.github.com/users/giantmustache/orgs", "repos_url": "https://api.github.com/users/giantmustache/repos", "events_url": "https://api.github.com/users/giantmustache/events{/privacy}", "received_events_url": "https://api.github.com/users/giantmustache/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-02-05T11:15:57Z", "updated_at": "2020-02-13T09:37:30Z", "closed_at": "2020-02-13T09:35:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "In C++ we can check if a field is actually set via `flatbuffer::IsFieldPresent(mymonster, Monster::VT_HEALTH)`. In my case I use this with `ForceDefaults(true)` on the builder.\r\n\r\nI think it would be nice if flatc also generates simple functions for each variable in the fbs.\r\n\r\n```\r\nstruct MyStruct FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {\r\n  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {\r\n    VT_LOCATION = 4,\r\n  };\r\n  locations_e location() const {\r\n    return static_cast<locations_e>(GetField<uint8_t>(VT_LOCATION, 0));\r\n  }\r\n  bool mutate_location(locations_e _location) {\r\n    return SetField<uint8_t>(VT_LOCATION, static_cast<uint8_t>(_location), 0);\r\n  }\r\n  // new function here:\r\n  bool ispresent_location() const {\r\n    return flatbuffers::IsFieldPresent(this, VT_LOCATION);\r\n  }\r\n```\r\n\r\nI think it will improve readability in using code and it seems like quite a simple addition. What do you think of this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5753", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5753/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5753/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5753/events", "html_url": "https://github.com/google/flatbuffers/issues/5753", "id": 559645870, "node_id": "MDU6SXNzdWU1NTk2NDU4NzA=", "number": 5753, "title": "Allow custom file suffix", "user": {"login": "mavam", "id": 53797, "node_id": "MDQ6VXNlcjUzNzk3", "avatar_url": "https://avatars0.githubusercontent.com/u/53797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mavam", "html_url": "https://github.com/mavam", "followers_url": "https://api.github.com/users/mavam/followers", "following_url": "https://api.github.com/users/mavam/following{/other_user}", "gists_url": "https://api.github.com/users/mavam/gists{/gist_id}", "starred_url": "https://api.github.com/users/mavam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mavam/subscriptions", "organizations_url": "https://api.github.com/users/mavam/orgs", "repos_url": "https://api.github.com/users/mavam/repos", "events_url": "https://api.github.com/users/mavam/events{/privacy}", "received_events_url": "https://api.github.com/users/mavam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-04T11:06:27Z", "updated_at": "2020-03-02T20:12:17Z", "closed_at": "2020-03-02T18:15:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "When generating C++ headers via `flatc`, all files have the suffix `_generated.h`. However, in many modern C++ projects we have a `*.hpp` extension. It's not possible to just rename the files, because the generated files include themselves and have the name hardcoded *inside*. It would be great to have the ability to specify the suffix explicitly.\r\n\r\nIn [#5054](https://github.com/google/flatbuffers/issues/5054#issuecomment-581417325) I suggested an option `--filename-suffix` that allows for customizing everything that comes after the name of the schema. For example, `flatc --file-suffix .hpp` would create a filename for the schema `foo` that has the name `foo.hpp` instead of `foo_generated.h`. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5749", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5749/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5749/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5749/events", "html_url": "https://github.com/google/flatbuffers/issues/5749", "id": 557835755, "node_id": "MDU6SXNzdWU1NTc4MzU3NTU=", "number": 5749, "title": "[rust] Ownership ergonomics", "user": {"login": "maxburke", "id": 253368, "node_id": "MDQ6VXNlcjI1MzM2OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/253368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxburke", "html_url": "https://github.com/maxburke", "followers_url": "https://api.github.com/users/maxburke/followers", "following_url": "https://api.github.com/users/maxburke/following{/other_user}", "gists_url": "https://api.github.com/users/maxburke/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxburke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxburke/subscriptions", "organizations_url": "https://api.github.com/users/maxburke/orgs", "repos_url": "https://api.github.com/users/maxburke/repos", "events_url": "https://api.github.com/users/maxburke/events{/privacy}", "received_events_url": "https://api.github.com/users/maxburke/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100732708, "node_id": "MDU6TGFiZWwxMDA3MzI3MDg=", "url": "https://api.github.com/repos/google/flatbuffers/labels/stale", "name": "stale", "color": "ffffff", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-31T00:17:49Z", "updated_at": "2020-08-21T20:33:05Z", "closed_at": "2020-08-21T20:33:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I can see how useful it is for maintaining a near-or-actual zero allocation model by having the Table type take a reference to the buffer, but I've been finding it to be a bit cumbersome in practice to, like, collect vectors of FB-described objects without moving their contents manually into hand-curated objects.\r\n\r\nIt'd be nice to have an owned variant of Table to make this easier, or something.\r\n\r\nMaybe I'm just missing something -- are there any better patterns in practice for doing this in an easy manner?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5746", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5746/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5746/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5746/events", "html_url": "https://github.com/google/flatbuffers/issues/5746", "id": 557588892, "node_id": "MDU6SXNzdWU1NTc1ODg4OTI=", "number": 5746, "title": "base.h license", "user": {"login": "dspmihai", "id": 13007912, "node_id": "MDQ6VXNlcjEzMDA3OTEy", "avatar_url": "https://avatars1.githubusercontent.com/u/13007912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dspmihai", "html_url": "https://github.com/dspmihai", "followers_url": "https://api.github.com/users/dspmihai/followers", "following_url": "https://api.github.com/users/dspmihai/following{/other_user}", "gists_url": "https://api.github.com/users/dspmihai/gists{/gist_id}", "starred_url": "https://api.github.com/users/dspmihai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dspmihai/subscriptions", "organizations_url": "https://api.github.com/users/dspmihai/orgs", "repos_url": "https://api.github.com/users/dspmihai/repos", "events_url": "https://api.github.com/users/dspmihai/events{/privacy}", "received_events_url": "https://api.github.com/users/dspmihai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100732708, "node_id": "MDU6TGFiZWwxMDA3MzI3MDg=", "url": "https://api.github.com/repos/google/flatbuffers/labels/stale", "name": "stale", "color": "ffffff", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-30T15:58:50Z", "updated_at": "2020-08-14T20:33:03Z", "closed_at": "2020-08-14T20:33:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Shouldn't this file [1] also contain an Apache License, Version 2.0 license? If no, why?\r\n\r\n[1 ]https://github.com/google/flatbuffers/blob/master/include/flatbuffers/base.h", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5745", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5745/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5745/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5745/events", "html_url": "https://github.com/google/flatbuffers/issues/5745", "id": 557507007, "node_id": "MDU6SXNzdWU1NTc1MDcwMDc=", "number": 5745, "title": "Multithreaded reading of Flatbuffer data causing data corruption [c#, flatc v1.10.0 & 1.11.0, Win10]", "user": {"login": "pejaii", "id": 18028531, "node_id": "MDQ6VXNlcjE4MDI4NTMx", "avatar_url": "https://avatars0.githubusercontent.com/u/18028531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pejaii", "html_url": "https://github.com/pejaii", "followers_url": "https://api.github.com/users/pejaii/followers", "following_url": "https://api.github.com/users/pejaii/following{/other_user}", "gists_url": "https://api.github.com/users/pejaii/gists{/gist_id}", "starred_url": "https://api.github.com/users/pejaii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pejaii/subscriptions", "organizations_url": "https://api.github.com/users/pejaii/orgs", "repos_url": "https://api.github.com/users/pejaii/repos", "events_url": "https://api.github.com/users/pejaii/events{/privacy}", "received_events_url": "https://api.github.com/users/pejaii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "dbaileychess", "id": 1477247, "node_id": "MDQ6VXNlcjE0NzcyNDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1477247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbaileychess", "html_url": "https://github.com/dbaileychess", "followers_url": "https://api.github.com/users/dbaileychess/followers", "following_url": "https://api.github.com/users/dbaileychess/following{/other_user}", "gists_url": "https://api.github.com/users/dbaileychess/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbaileychess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbaileychess/subscriptions", "organizations_url": "https://api.github.com/users/dbaileychess/orgs", "repos_url": "https://api.github.com/users/dbaileychess/repos", "events_url": "https://api.github.com/users/dbaileychess/events{/privacy}", "received_events_url": "https://api.github.com/users/dbaileychess/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "dbaileychess", "id": 1477247, "node_id": "MDQ6VXNlcjE0NzcyNDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1477247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbaileychess", "html_url": "https://github.com/dbaileychess", "followers_url": "https://api.github.com/users/dbaileychess/followers", "following_url": "https://api.github.com/users/dbaileychess/following{/other_user}", "gists_url": "https://api.github.com/users/dbaileychess/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbaileychess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbaileychess/subscriptions", "organizations_url": "https://api.github.com/users/dbaileychess/orgs", "repos_url": "https://api.github.com/users/dbaileychess/repos", "events_url": "https://api.github.com/users/dbaileychess/events{/privacy}", "received_events_url": "https://api.github.com/users/dbaileychess/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2020-01-30T13:50:11Z", "updated_at": "2020-05-07T21:33:30Z", "closed_at": "2020-05-07T21:33:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a C# application that is designed to read in (synchronously) log files containing various flatbuffer types, to then output this data in different formats to different output files.\r\n\r\nAs previously mentioned the read is synchronous, which subsequently populates a threadsafe primary buffer (BlockingCollection) per output file with the flatbuffer objects. Per output file, there is a (formatting) thread that formats the data from multiple properties of the flatbuffer object, and populates another threadsafe buffer with the formatted data, and a (output) thread that reads the secondary buffer and outputs it to a file.\r\n\r\nIn this specific example the formatting is taking 6 doubles from the flatbuffer and putting them in a double[].\r\n\r\nThe Flatbuffer objects in the primary buffer are held by reference. When I have two output files (and as such two \"formatting threads\" and two \"output threads\"), and these outputs are both using the same Flatbuffer objects (of the same specific type) as their source data, there are two \"primary buffers\" both containing references to each flatbuffer object - i.e. two references to each single flatbuffer object instance.  When these \"formatting threads\" are run in parallel, processing the data as it arrives in the buffer, occasionally (100's of times in ~220,000 flatbuffer objects) one of the 6 fields of the flatbuffer being put into the double[] gets duplicated into one of the incorrect indexes of the target double[]. During debugging, inspecting the individual values of the flatbuffer return the correct values, however at runtime when not stepping through the code, this issue occurs.\r\n\r\nThe below image shows the issue on the left when the formatting threads are used, and the data output on the right with no erroneous data is when the synchronous reader thread is used to perform the formatting. (this is obviously far slower in processing time, and is the reason I'm trying to multithread).\r\n\r\n![image](https://user-images.githubusercontent.com/18028531/73454569-41547280-4366-11ea-8e73-e8886b040e56.png)\r\n\r\nI've seen in the docs that c++ flatbuffers are thread safe for reading [here](https://github.com/google/flatbuffers/blob/master/docs/source/CppUsage.md#threading). Is this the case for C#? I believe that they are not safe from what I'm observing, and this is crippling the speed I can work on Flatbuffers if they are not threadsafe for reading. I'm afraid it is beyond my understanding as to what may be changing within the flatbuffer (tingling feeling around the bytebuffer position property), but it definitely doesn't appear thread safe. \r\n\r\nAny help with the issue would be much appreciated. Would happily walk someone through the issue remotely.\r\n\r\nMany thanks in advance,\r\n\r\nJames", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5744", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5744/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5744/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5744/events", "html_url": "https://github.com/google/flatbuffers/issues/5744", "id": 557342800, "node_id": "MDU6SXNzdWU1NTczNDI4MDA=", "number": 5744, "title": "[Rust] New release with fix for RUSTSEC-2019-0028", "user": {"login": "emilk", "id": 1148717, "node_id": "MDQ6VXNlcjExNDg3MTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1148717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilk", "html_url": "https://github.com/emilk", "followers_url": "https://api.github.com/users/emilk/followers", "following_url": "https://api.github.com/users/emilk/following{/other_user}", "gists_url": "https://api.github.com/users/emilk/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilk/subscriptions", "organizations_url": "https://api.github.com/users/emilk/orgs", "repos_url": "https://api.github.com/users/emilk/repos", "events_url": "https://api.github.com/users/emilk/events{/privacy}", "received_events_url": "https://api.github.com/users/emilk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-30T08:41:36Z", "updated_at": "2020-01-31T09:16:02Z", "closed_at": "2020-01-31T09:16:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "The fix for [RUSTSEC-2019-0028](https://rustsec.org/advisories/RUSTSEC-2019-0028) was merged [back in october](https://github.com/google/flatbuffers/pull/5554), but there has been no new `flatbuffers` crate release in nine months. I think it is good form to release a patch version each time a RUSTSEC fix is merged.\r\n\r\nSo: it seems to me like it is high time for a `0.6.1` or `0.7.0` release!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5742", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5742/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5742/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5742/events", "html_url": "https://github.com/google/flatbuffers/issues/5742", "id": 555625148, "node_id": "MDU6SXNzdWU1NTU2MjUxNDg=", "number": 5742, "title": "[C++] Verification doesn't validate enum value", "user": {"login": "pitrou", "id": 1721820, "node_id": "MDQ6VXNlcjE3MjE4MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitrou", "html_url": "https://github.com/pitrou", "followers_url": "https://api.github.com/users/pitrou/followers", "following_url": "https://api.github.com/users/pitrou/following{/other_user}", "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions", "organizations_url": "https://api.github.com/users/pitrou/orgs", "repos_url": "https://api.github.com/users/pitrou/repos", "events_url": "https://api.github.com/users/pitrou/events{/privacy}", "received_events_url": "https://api.github.com/users/pitrou/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100732708, "node_id": "MDU6TGFiZWwxMDA3MzI3MDg=", "url": "https://api.github.com/repos/google/flatbuffers/labels/stale", "name": "stale", "color": "ffffff", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-01-27T14:49:44Z", "updated_at": "2020-08-11T20:32:58Z", "closed_at": "2020-08-11T20:32:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Assuming you have defined an `enum` type value in some table, e.g.:\r\n```\r\nenum SparseMatrixCompressedAxis: short { Row, Column }\r\n\r\ntable SparseMatrixIndexCSX {\r\n  compressedAxis: SparseMatrixCompressedAxis;\r\n  /// some other fields below\r\n}\r\n```\r\nThe verification method defined for the table (here `SparseMatrixIndexCSX::Verify`) doesn't check that the enum field value (here `compressedAxis`) is within allowed values.\r\n\r\nIt would be handy IMO if the Verify method did that check for the user. Especially since in C++17, casting to enum is UBSAN if the integer value is out of allowed enum values (see issue #4191).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5738", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5738/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5738/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5738/events", "html_url": "https://github.com/google/flatbuffers/issues/5738", "id": 555248226, "node_id": "MDU6SXNzdWU1NTUyNDgyMjY=", "number": 5738, "title": "[Swift] Adding support for gRPC ", "user": {"login": "mustiikhalil", "id": 26250654, "node_id": "MDQ6VXNlcjI2MjUwNjU0", "avatar_url": "https://avatars3.githubusercontent.com/u/26250654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mustiikhalil", "html_url": "https://github.com/mustiikhalil", "followers_url": "https://api.github.com/users/mustiikhalil/followers", "following_url": "https://api.github.com/users/mustiikhalil/following{/other_user}", "gists_url": "https://api.github.com/users/mustiikhalil/gists{/gist_id}", "starred_url": "https://api.github.com/users/mustiikhalil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mustiikhalil/subscriptions", "organizations_url": "https://api.github.com/users/mustiikhalil/orgs", "repos_url": "https://api.github.com/users/mustiikhalil/repos", "events_url": "https://api.github.com/users/mustiikhalil/events{/privacy}", "received_events_url": "https://api.github.com/users/mustiikhalil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-01-26T15:57:25Z", "updated_at": "2020-02-24T17:27:42Z", "closed_at": "2020-02-24T17:27:42Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I'm planning on adding GRPC support to swift, I already asked the engineers that are building the library for some instructions regarding it. since I want to avoid importing [swift-protobuf](https://github.com/apple/swift-protobuf) however it seems to be a necessary evil, since it's heavily coupled with [grpc-swift](https://github.com/grpc/grpc-swift). \r\nIn all the calls we will have some type of a class that confirms to the `Message` protocol:\r\n`public final class UnaryCall<RequestMessage: Message, ResponseMessage: Message>` which is found in `swift-protobuf`, and the library is a dependency either ways. so we can't omit it. \r\n\r\nMy thoughts regarding how we can include `Flatbuffers-Swift` into the GRPC world, we make a `Root` protocol that confirms to `FlatbuffersObject` and it also confirms to the `Message` Protocol. which would lead to an override for the following functions \r\n- `public mutating func merge(::) throws` \r\n    merge will basically give us access to the underlaying buffer which we can just move to the `Flatbuffers.ByteBuffer()`\r\n\r\n- `public mutating func serializedData(::) -> Data`\r\n     and this would be a bit tricky actually, since we will need to \r\n\r\n1. Create an object that confirms to root so we can send the data through it:\r\n\r\n```swift\r\nstruct GRPCROOT: ROOT {\r\nvar buffer: Data \r\npublic mutating func serializedData(:) -> Data { return data }\r\n}\r\n```\r\n\r\nI think this is going to be the best approach actually since swift the protocol Message will basically add too much overhead, like including multiple functions that we won't be using at all\r\n\r\n2. make our builder confirm to the root protocol and just implement the `serializedData` function that will just look like this:\r\n\r\n\r\n```swift \r\n// data is already implemented in the builder\r\npublic mutating func serializedData(:) -> Data { return data }\r\n```\r\n\r\njust for reference:  https://github.com/mustiikhalil/FlatbuffersGRPC", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5731", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5731/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5731/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5731/events", "html_url": "https://github.com/google/flatbuffers/issues/5731", "id": 552888812, "node_id": "MDU6SXNzdWU1NTI4ODg4MTI=", "number": 5731, "title": "[Go/Rust] Shared strings", "user": {"login": "mustiikhalil", "id": 26250654, "node_id": "MDQ6VXNlcjI2MjUwNjU0", "avatar_url": "https://avatars3.githubusercontent.com/u/26250654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mustiikhalil", "html_url": "https://github.com/mustiikhalil", "followers_url": "https://api.github.com/users/mustiikhalil/followers", "following_url": "https://api.github.com/users/mustiikhalil/following{/other_user}", "gists_url": "https://api.github.com/users/mustiikhalil/gists{/gist_id}", "starred_url": "https://api.github.com/users/mustiikhalil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mustiikhalil/subscriptions", "organizations_url": "https://api.github.com/users/mustiikhalil/orgs", "repos_url": "https://api.github.com/users/mustiikhalil/repos", "events_url": "https://api.github.com/users/mustiikhalil/events{/privacy}", "received_events_url": "https://api.github.com/users/mustiikhalil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-21T13:49:17Z", "updated_at": "2020-01-24T17:57:35Z", "closed_at": "2020-01-24T17:57:35Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I've been looking to both the go and the rust implementations for my company, and seen that there is not shared string implementation, is there a reason for not implementing it? should I implement it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5730", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5730/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5730/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5730/events", "html_url": "https://github.com/google/flatbuffers/issues/5730", "id": 552696031, "node_id": "MDU6SXNzdWU1NTI2OTYwMzE=", "number": 5730, "title": " [C#, .NET4.x, Window, master, version 1.11.0] Change value field non-scalar types (Ex : string)", "user": {"login": "phongsoyenmoc", "id": 44673303, "node_id": "MDQ6VXNlcjQ0NjczMzAz", "avatar_url": "https://avatars1.githubusercontent.com/u/44673303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phongsoyenmoc", "html_url": "https://github.com/phongsoyenmoc", "followers_url": "https://api.github.com/users/phongsoyenmoc/followers", "following_url": "https://api.github.com/users/phongsoyenmoc/following{/other_user}", "gists_url": "https://api.github.com/users/phongsoyenmoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/phongsoyenmoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phongsoyenmoc/subscriptions", "organizations_url": "https://api.github.com/users/phongsoyenmoc/orgs", "repos_url": "https://api.github.com/users/phongsoyenmoc/repos", "events_url": "https://api.github.com/users/phongsoyenmoc/events{/privacy}", "received_events_url": "https://api.github.com/users/phongsoyenmoc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-21T08:27:01Z", "updated_at": "2020-01-25T00:46:32Z", "closed_at": "2020-01-25T00:46:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I tried to start using flatbuffer, I am having trouble changing the string value of the field string, I called flatc with --gen-mutable\r\nbut it only generates method `Mutate` of Built-in scalar types. If this is not a bug please let me know how to do it.\r\n\r\n-file person.fbs\r\n```csharp\r\nnamespace Database;\r\ntable Person {\r\n  id:short;\r\n  age:int;\r\n  name:string;\r\n}\r\nroot_type Person;\r\n```\r\n\r\n-compile schema\r\n```csharp\r\nflatc --csharp person.fbs --gen-mutable\r\n```\r\n\r\n-code after generate\r\n```csharp\r\n// <auto-generated>\r\n//  automatically generated by the FlatBuffers compiler, do not modify\r\n// </auto-generated>\r\n\r\nnamespace Database\r\n{\r\n\r\nusing global::System;\r\nusing global::FlatBuffers;\r\n\r\npublic struct Person : IFlatbufferObject\r\n{\r\n  private Table __p;\r\n  public ByteBuffer ByteBuffer { get { return __p.bb; } }\r\n  public static Person GetRootAsPerson(ByteBuffer _bb) { return GetRootAsPerson(_bb, new Person()); }\r\n  public static Person GetRootAsPerson(ByteBuffer _bb, Person obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }\r\n  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }\r\n  public Person __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }\r\n\r\n  public short Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }\r\n  public bool MutateId(short id) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutShort(o + __p.bb_pos, id); return true; } else { return false; } }\r\n  public int Age { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }\r\n  public bool MutateAge(int age) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, age); return true; } else { return false; } }\r\n  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }\r\n#if ENABLE_SPAN_T\r\n  public Span<byte> GetNameBytes() { return __p.__vector_as_span(8); }\r\n#else\r\n  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }\r\n#endif\r\n  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }\r\n\r\n  public static Offset<Person> CreatePerson(FlatBufferBuilder builder,\r\n      short id = 0,\r\n      int age = 0,\r\n      StringOffset nameOffset = default(StringOffset)) {\r\n    builder.StartObject(3);\r\n    Person.AddName(builder, nameOffset);\r\n    Person.AddAge(builder, age);\r\n    Person.AddId(builder, id);\r\n    return Person.EndPerson(builder);\r\n  }\r\n\r\n  public static void StartPerson(FlatBufferBuilder builder) { builder.StartObject(3); }\r\n  public static void AddId(FlatBufferBuilder builder, short id) { builder.AddShort(0, id, 0); }\r\n  public static void AddAge(FlatBufferBuilder builder, int age) { builder.AddInt(1, age, 0); }\r\n  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }\r\n  public static Offset<Person> EndPerson(FlatBufferBuilder builder) {\r\n    int o = builder.EndObject();\r\n    return new Offset<Person>(o);\r\n  }\r\n  public static void FinishPersonBuffer(FlatBufferBuilder builder, Offset<Person> offset) { builder.Finish(offset.Value); }\r\n  public static void FinishSizePrefixedPersonBuffer(FlatBufferBuilder builder, Offset<Person> offset) { builder.FinishSizePrefixed(offset.Value); }\r\n};\r\n\r\n\r\n}\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5728", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5728/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5728/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5728/events", "html_url": "https://github.com/google/flatbuffers/issues/5728", "id": 552279004, "node_id": "MDU6SXNzdWU1NTIyNzkwMDQ=", "number": 5728, "title": "TS: ES2015 error, Compilation error and its Blocker.", "user": {"login": "vtkumaresan", "id": 3971168, "node_id": "MDQ6VXNlcjM5NzExNjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/3971168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vtkumaresan", "html_url": "https://github.com/vtkumaresan", "followers_url": "https://api.github.com/users/vtkumaresan/followers", "following_url": "https://api.github.com/users/vtkumaresan/following{/other_user}", "gists_url": "https://api.github.com/users/vtkumaresan/gists{/gist_id}", "starred_url": "https://api.github.com/users/vtkumaresan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vtkumaresan/subscriptions", "organizations_url": "https://api.github.com/users/vtkumaresan/orgs", "repos_url": "https://api.github.com/users/vtkumaresan/repos", "events_url": "https://api.github.com/users/vtkumaresan/events{/privacy}", "received_events_url": "https://api.github.com/users/vtkumaresan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2020-01-20T12:47:08Z", "updated_at": "2020-03-18T12:08:41Z", "closed_at": "2020-01-25T16:56:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "i've tried to use the flatbuffer sample version (monster example in doc) in ts and got below error msg when do run,\r\n\r\nlanguage is typescript (ts)\r\nflatc version 1.11.0\r\n\r\n```  Line 7:8:    ES2015 module syntax is preferred over custom TypeScript modules and namespaces  @typescript-eslint/no-namespace\r\n  Line 17:8:   ES2015 module syntax is preferred over custom TypeScript modules and namespaces  @typescript-eslint/no-namespace\r\n  Line 26:8:   ES2015 module syntax is preferred over custom TypeScript modules and namespaces  @typescript-eslint/no-namespace\r\n  Line 83:8:   ES2015 module syntax is preferred over custom TypeScript modules and namespaces  @typescript-eslint/no-namespace\r\n  Line 403:8:  ES2015 module syntax is preferred over custom TypeScript modules and namespaces  @typescript-eslint/no-namespace\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5726", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5726/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5726/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5726/events", "html_url": "https://github.com/google/flatbuffers/issues/5726", "id": 552206911, "node_id": "MDU6SXNzdWU1NTIyMDY5MTE=", "number": 5726, "title": "How to serialize complex struct ?", "user": {"login": "arshidkv12", "id": 6806645, "node_id": "MDQ6VXNlcjY4MDY2NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/6806645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arshidkv12", "html_url": "https://github.com/arshidkv12", "followers_url": "https://api.github.com/users/arshidkv12/followers", "following_url": "https://api.github.com/users/arshidkv12/following{/other_user}", "gists_url": "https://api.github.com/users/arshidkv12/gists{/gist_id}", "starred_url": "https://api.github.com/users/arshidkv12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arshidkv12/subscriptions", "organizations_url": "https://api.github.com/users/arshidkv12/orgs", "repos_url": "https://api.github.com/users/arshidkv12/repos", "events_url": "https://api.github.com/users/arshidkv12/events{/privacy}", "received_events_url": "https://api.github.com/users/arshidkv12/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100732708, "node_id": "MDU6TGFiZWwxMDA3MzI3MDg=", "url": "https://api.github.com/repos/google/flatbuffers/labels/stale", "name": "stale", "color": "ffffff", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-20T10:25:21Z", "updated_at": "2020-08-07T20:32:54Z", "closed_at": "2020-08-07T20:32:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to serialize complex structures? \r\nhttps://stackoverflow.com/questions/59463793/how-to-save-nested-c-struct-data-to-disk\r\n\r\nhttps://github.com/php/php-src/", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5720", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5720/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5720/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5720/events", "html_url": "https://github.com/google/flatbuffers/issues/5720", "id": 551068239, "node_id": "MDU6SXNzdWU1NTEwNjgyMzk=", "number": 5720, "title": "Missing vtable_start and vtable_size variable type (int) in export for Java", "user": {"login": "janrockscala", "id": 27963406, "node_id": "MDQ6VXNlcjI3OTYzNDA2", "avatar_url": "https://avatars0.githubusercontent.com/u/27963406?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janrockscala", "html_url": "https://github.com/janrockscala", "followers_url": "https://api.github.com/users/janrockscala/followers", "following_url": "https://api.github.com/users/janrockscala/following{/other_user}", "gists_url": "https://api.github.com/users/janrockscala/gists{/gist_id}", "starred_url": "https://api.github.com/users/janrockscala/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janrockscala/subscriptions", "organizations_url": "https://api.github.com/users/janrockscala/orgs", "repos_url": "https://api.github.com/users/janrockscala/repos", "events_url": "https://api.github.com/users/janrockscala/events{/privacy}", "received_events_url": "https://api.github.com/users/janrockscala/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100732708, "node_id": "MDU6TGFiZWwxMDA3MzI3MDg=", "url": "https://api.github.com/repos/google/flatbuffers/labels/stale", "name": "stale", "color": "ffffff", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-16T21:33:42Z", "updated_at": "2020-08-01T20:33:06Z", "closed_at": "2020-08-01T20:33:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version: 1.11.0 / C++11\r\nLanguage: Java\r\nOS: CentOS7\r\n\r\nThere is a bug in the Java export: missing vtable_start and vtable_size variable type (int)\r\n\r\n`// automatically generated by the FlatBuffers compiler, do not modify`\r\n\r\n`package org.yottalabs;\r\nimport java.nio.*;\r\nimport java.lang.*;\r\nimport java.util.*;\r\nimport com.google.flatbuffers.*;`\r\n\r\n`@SuppressWarnings(\"unused\")\r\npublic final class MapLastTime extends Table {\r\n  public static MapLastTime getRootAsMapLastTime(ByteBuffer _bb) { return getRootAsMapLastTime(_bb, new MapLastTime()); }\r\n  public static MapLastTime getRootAsMapLastTime(ByteBuffer _bb, MapLastTime obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }\r\n  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }\r\n...`\r\n\r\nThe last row should be:\r\n`  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; int vtable_start = bb_pos - bb.getInt(bb_pos); int vtable_size = bb.getShort(vtable_start); }`\r\n\r\nI believe it's simple to fix it. :) \r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/flatbuffers/issues/5719", "repository_url": "https://api.github.com/repos/google/flatbuffers", "labels_url": "https://api.github.com/repos/google/flatbuffers/issues/5719/labels{/name}", "comments_url": "https://api.github.com/repos/google/flatbuffers/issues/5719/comments", "events_url": "https://api.github.com/repos/google/flatbuffers/issues/5719/events", "html_url": "https://github.com/google/flatbuffers/issues/5719", "id": 550722280, "node_id": "MDU6SXNzdWU1NTA3MjIyODA=", "number": 5719, "title": "Is protobuf parser available in flatcc ?", "user": {"login": "satyamurthy1847", "id": 59836596, "node_id": "MDQ6VXNlcjU5ODM2NTk2", "avatar_url": "https://avatars0.githubusercontent.com/u/59836596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/satyamurthy1847", "html_url": "https://github.com/satyamurthy1847", "followers_url": "https://api.github.com/users/satyamurthy1847/followers", "following_url": "https://api.github.com/users/satyamurthy1847/following{/other_user}", "gists_url": "https://api.github.com/users/satyamurthy1847/gists{/gist_id}", "starred_url": "https://api.github.com/users/satyamurthy1847/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/satyamurthy1847/subscriptions", "organizations_url": "https://api.github.com/users/satyamurthy1847/orgs", "repos_url": "https://api.github.com/users/satyamurthy1847/repos", "events_url": "https://api.github.com/users/satyamurthy1847/events{/privacy}", "received_events_url": "https://api.github.com/users/satyamurthy1847/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100732708, "node_id": "MDU6TGFiZWwxMDA3MzI3MDg=", "url": "https://api.github.com/repos/google/flatbuffers/labels/stale", "name": "stale", "color": "ffffff", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-01-16T10:42:28Z", "updated_at": "2020-08-03T20:33:05Z", "closed_at": "2020-08-03T20:33:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi ,\r\n\r\nSimilar to --json-parser option in flatcc, do we have a way to generate finalized buffer from  protobuf  data.\r\n\r\nCan you please let us know inputs on this.", "performed_via_github_app": null, "score": 1.0}]}