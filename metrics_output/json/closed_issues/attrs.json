{"total_count": 312, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/python-attrs/attrs/issues/661", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/661/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/661/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/661/events", "html_url": "https://github.com/python-attrs/attrs/issues/661", "id": 654534335, "node_id": "MDU6SXNzdWU2NTQ1MzQzMzU=", "number": 661, "title": "Restore __setattr__ when subclassing and we didn't write a new __setattr__", "user": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/python-attrs/attrs/milestones/12", "html_url": "https://github.com/python-attrs/attrs/milestone/12", "labels_url": "https://api.github.com/repos/python-attrs/attrs/milestones/12/labels", "id": 5174342, "node_id": "MDk6TWlsZXN0b25lNTE3NDM0Mg==", "number": 12, "title": "20.1.0", "description": "", "creator": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 8, "state": "open", "created_at": "2020-03-06T09:42:38Z", "updated_at": "2020-08-13T11:49:45Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2020-07-10T06:02:49Z", "updated_at": "2020-08-13T11:49:45Z", "closed_at": "2020-08-13T11:49:45Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently if you do this:\r\n\r\n```python\r\n@attr.s(frozen=True)\r\nclass A:\r\n    a = attr.ib()\r\n\r\n@attr.s\r\nclass B(A):\r\n    b = attr.ib()\r\n```\r\n\r\nB is frozen too, because we don't write a new `__setattr__` to overwrite the old one. Once #660 is merged, this will become an even bigger problem.\r\n\r\nWe have to restore `__setattr__` to `object.__setattr__` if we don't have a reason to overwrite the existing one ourselves.\r\n\r\n`auto_detect=True` should be considered.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/651", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/651/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/651/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/651/events", "html_url": "https://github.com/python-attrs/attrs/issues/651", "id": 637446550, "node_id": "MDU6SXNzdWU2Mzc0NDY1NTA=", "number": 651, "title": "all instances updated when updating default dict", "user": {"login": "furlongm", "id": 114803, "node_id": "MDQ6VXNlcjExNDgwMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/114803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/furlongm", "html_url": "https://github.com/furlongm", "followers_url": "https://api.github.com/users/furlongm/followers", "following_url": "https://api.github.com/users/furlongm/following{/other_user}", "gists_url": "https://api.github.com/users/furlongm/gists{/gist_id}", "starred_url": "https://api.github.com/users/furlongm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/furlongm/subscriptions", "organizations_url": "https://api.github.com/users/furlongm/orgs", "repos_url": "https://api.github.com/users/furlongm/repos", "events_url": "https://api.github.com/users/furlongm/events{/privacy}", "received_events_url": "https://api.github.com/users/furlongm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-12T02:52:52Z", "updated_at": "2020-06-12T04:42:52Z", "closed_at": "2020-06-12T04:42:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not sure if this is a bug or if it's the expected behaviour?\r\n\r\n```\r\nimport attr\r\n\r\n@attr.s\r\nclass D(object):\r\n    m = attr.ib(default={'a': 1})\r\n\r\nx = D()\r\ny = D()\r\nprint(x.m)\r\nprint(y.m)\r\ny.m.update({'a': 2})\r\nprint(x.m)\r\nprint(y.m)\r\n```\r\n\r\nOutput\r\n```\r\n{'a': 1}\r\n{'a': 1}\r\n{'a': 2} <-- Was not expecting this one to change\r\n{'a': 2}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/645", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/645/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/645/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/645/events", "html_url": "https://github.com/python-attrs/attrs/issues/645", "id": 618018981, "node_id": "MDU6SXNzdWU2MTgwMTg5ODE=", "number": 645, "title": "[RFC] __setattr__ hooks", "user": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428248824, "node_id": "MDU6TGFiZWw0MjgyNDg4MjQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Feature", "name": "Feature", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/python-attrs/attrs/milestones/12", "html_url": "https://github.com/python-attrs/attrs/milestone/12", "labels_url": "https://api.github.com/repos/python-attrs/attrs/milestones/12/labels", "id": 5174342, "node_id": "MDk6TWlsZXN0b25lNTE3NDM0Mg==", "number": 12, "title": "20.1.0", "description": "", "creator": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 8, "state": "open", "created_at": "2020-03-06T09:42:38Z", "updated_at": "2020-08-13T11:49:45Z", "due_on": null, "closed_at": null}, "comments": 6, "created_at": "2020-05-14T08:10:20Z", "updated_at": "2020-07-20T10:43:10Z", "closed_at": "2020-07-20T10:43:10Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "There's two things that people keep asking for:\r\n\r\n1. validation on setting attributes\r\n2. freezing single attributes\r\n\r\nThose two features have something in common: they require `attrs` to write a `__setattr__` method.\r\n\r\nI actually had 1 done when I implemented validators but I took it out again, because I didn't want to tamper with `__setattr__` too. But it totally makes sense to expect that validators run there too.\r\n\r\nNow that argument has gone away thanks to frozen classes and `attrs` is in the `__setattr__` business. So it feels like the right thing to do, to implement it and make it default for _Operation `import attrs`_ (I hope this is legit the last part of the puzzle).\r\n\r\nTo allow for 2 too, I would suggest to add a hook called `on_setattr` (better names welcome) that takes a callable that is called with the instance, the attribute definition, and the new value.\r\n\r\nTo solve 2, the implementation would look like\r\n\r\n```python\r\ndef frozen(_, __, ___):\r\n    raise FrozenInstanceError\r\n```\r\n\r\n***\r\n\r\nOpen questions:\r\n\r\n- what to do about `on_setattr` attributes in a frozen class (incl inheritance)\r\n- what about converters? Maybe it should take a list/`and` like validator/converter do? They would need to work as a chain, returning values for the next one.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/644", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/644/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/644/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/644/events", "html_url": "https://github.com/python-attrs/attrs/issues/644", "id": 614396110, "node_id": "MDU6SXNzdWU2MTQzOTYxMTA=", "number": 644, "title": "Support auto-conversion for annotated attributes", "user": {"login": "xlotlu", "id": 136097, "node_id": "MDQ6VXNlcjEzNjA5Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/136097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xlotlu", "html_url": "https://github.com/xlotlu", "followers_url": "https://api.github.com/users/xlotlu/followers", "following_url": "https://api.github.com/users/xlotlu/following{/other_user}", "gists_url": "https://api.github.com/users/xlotlu/gists{/gist_id}", "starred_url": "https://api.github.com/users/xlotlu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xlotlu/subscriptions", "organizations_url": "https://api.github.com/users/xlotlu/orgs", "repos_url": "https://api.github.com/users/xlotlu/repos", "events_url": "https://api.github.com/users/xlotlu/events{/privacy}", "received_events_url": "https://api.github.com/users/xlotlu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-07T23:01:21Z", "updated_at": "2020-05-14T04:19:31Z", "closed_at": "2020-05-14T04:19:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "To me this was unexpected behaviour:\r\n\r\n```python-console\r\n>>> @attr.s(auto_attribs=True)\r\n... class Moo(): \r\n...     price: float \r\n...     quant: int \r\n... \r\n>>> Moo(\"12\", \"5\")                                                      \r\nMoo(price='12', quant='5')\r\n```\r\n\r\nthis being, of course, redundant:\r\n\r\n```python-console\r\n>>> @attr.s(auto_attribs=True) \r\n... class Moo(): \r\n...     price: float = attr.ib(converter=float) \r\n...     quant: int = attr.ib(converter=int) \r\n```\r\n\r\nAnother argument to `attrs` would do the trick, e.g. `auto_converters=True`. My personal expectation is for it to be implied by `auto_attribs=True`, but it does make sense to default to `False` at least in the beginning (and maybe go through a transition period later).\r\n\r\nLater edit: `auto_converters` need not apply only to `auto_attribs`. This could be a valid use-case as well:\r\n\r\n```python-console\r\n>>> @attr.s(auto_converters=True) \r\n... class Moo(): \r\n...     price = attr.ib(type=float) \r\n...     quant = attr.ib(type=int) \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/640", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/640/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/640/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/640/events", "html_url": "https://github.com/python-attrs/attrs/issues/640", "id": 600839641, "node_id": "MDU6SXNzdWU2MDA4Mzk2NDE=", "number": 640, "title": "attrs-decorated classes cannot participate in cooperative inheritance", "user": {"login": "NeilGirdhar", "id": 730137, "node_id": "MDQ6VXNlcjczMDEzNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/730137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeilGirdhar", "html_url": "https://github.com/NeilGirdhar", "followers_url": "https://api.github.com/users/NeilGirdhar/followers", "following_url": "https://api.github.com/users/NeilGirdhar/following{/other_user}", "gists_url": "https://api.github.com/users/NeilGirdhar/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeilGirdhar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeilGirdhar/subscriptions", "organizations_url": "https://api.github.com/users/NeilGirdhar/orgs", "repos_url": "https://api.github.com/users/NeilGirdhar/repos", "events_url": "https://api.github.com/users/NeilGirdhar/events{/privacy}", "received_events_url": "https://api.github.com/users/NeilGirdhar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-04-16T08:16:59Z", "updated_at": "2020-05-30T06:26:33Z", "closed_at": "2020-05-30T06:26:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear attrs team, great project!\r\n\r\nSummary: Because attrs-decorated classes don't call super in `__init__`, they cannot participate in cooperative multiple inheritance.\r\n\r\nI might be alone in this interpretation, but I imagine that there are three fundamental kinds of inheritance patterns for methods, which I defined in my [ipromise package](https://pypi.org/project/ipromise/): _implementing_ an abstract method, _overriding_, and _augmenting_.  If I had to choose, I would say that `__init__` should be an _augmenting_ pattern.\r\n\r\nIf that interpretation is correct, then `__init__` should call super.  Even if a user wants `Y` to override some behavior in `X`, what happens if `Z` inherits from `Y` and `W`?  Now, `Y.__init__`'s decision not to call super would mean that `W.__init__` would not be called.  That seems like a bug.  Instead, I would rather put the behavior that `Y` wants to override in a separate method, say `X.f`, which is called in `X.__init__`.  Now, if `Y.f` overrides `X.f`, everything is okay.  Even if `Z` inherits from `Y` and `W`, the override still works, and `W.__init__` still gets called, angels sing, etc.\r\n\r\nLong story short, am I wrong to interpret `__init__` as an _augmenting_ method and ensure that it always call `super().__init__(**kwargs)`?  Are there any downsides to attrs-generated `__init__` providing this behavior?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/639", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/639/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/639/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/639/events", "html_url": "https://github.com/python-attrs/attrs/issues/639", "id": 599178380, "node_id": "MDU6SXNzdWU1OTkxNzgzODA=", "number": 639, "title": "Request: Allow access to class attributes", "user": {"login": "peteroconnor-bc", "id": 48102710, "node_id": "MDQ6VXNlcjQ4MTAyNzEw", "avatar_url": "https://avatars2.githubusercontent.com/u/48102710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peteroconnor-bc", "html_url": "https://github.com/peteroconnor-bc", "followers_url": "https://api.github.com/users/peteroconnor-bc/followers", "following_url": "https://api.github.com/users/peteroconnor-bc/following{/other_user}", "gists_url": "https://api.github.com/users/peteroconnor-bc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peteroconnor-bc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peteroconnor-bc/subscriptions", "organizations_url": "https://api.github.com/users/peteroconnor-bc/orgs", "repos_url": "https://api.github.com/users/peteroconnor-bc/repos", "events_url": "https://api.github.com/users/peteroconnor-bc/events{/privacy}", "received_events_url": "https://api.github.com/users/peteroconnor-bc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-13T22:41:25Z", "updated_at": "2020-04-14T14:00:31Z", "closed_at": "2020-04-13T23:30:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sometimes it would be nice to be able to access an attribute from a class to inspect it.  Currently, there seems to be no way to do it.  Suppose I want to access the \"intercept\" attribute of AffineFunc: e.g. \r\n\r\n    from attr import attrs, attrib\r\n    \r\n    @attrs\r\n    class AffineFunc(object):\r\n        slope = attrib(default=1.)\r\n        intercept = attrib(default=0.)\r\n    \r\n        def __call__(self, x):\r\n            return self.slope*x + self.intercept\r\n    \r\n    print(AffineFunc.intercept)  # Gives error, but expect: '_CountingAttr(counter=20, _default=1.0, repr=True, eq=True, order=True, hash=None, init=True, metadata={})'\r\n\r\nGives you: \r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/opt/shining_software/code_examples/attr_request.py\", line 16, in <module>\r\n    print(AffineFunc.intercept)\r\nAttributeError: type object 'AffineFunc' has no attribute 'intercept'\r\n```\r\nOne example is in unit-tests where you want to inspect the default value to compute what the expected result of something should be.  Is there a good reason why this is not allowed?  And would it be difficult to enable?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/638", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/638/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/638/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/638/events", "html_url": "https://github.com/python-attrs/attrs/issues/638", "id": 598096809, "node_id": "MDU6SXNzdWU1OTgwOTY4MDk=", "number": 638, "title": "introspection on attrs classes", "user": {"login": "danizen", "id": 4966193, "node_id": "MDQ6VXNlcjQ5NjYxOTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/4966193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danizen", "html_url": "https://github.com/danizen", "followers_url": "https://api.github.com/users/danizen/followers", "following_url": "https://api.github.com/users/danizen/following{/other_user}", "gists_url": "https://api.github.com/users/danizen/gists{/gist_id}", "starred_url": "https://api.github.com/users/danizen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danizen/subscriptions", "organizations_url": "https://api.github.com/users/danizen/orgs", "repos_url": "https://api.github.com/users/danizen/repos", "events_url": "https://api.github.com/users/danizen/events{/privacy}", "received_events_url": "https://api.github.com/users/danizen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-10T21:11:43Z", "updated_at": "2020-04-10T21:13:21Z", "closed_at": "2020-04-10T21:13:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a need for class method that generates a friendlier message for required attributes before passing the dict as a kwargs to an attrs class.   I found `attr._make._Nothing` a bit buried and I'm wondering whether there is a better way to do this that doesn't reach into internals:\r\n\r\n```python\r\n    @classmethod\r\n    def parse(cls, properties):\r\n        nothing = _Nothing()\r\n        required_props = [a for a in cls.__attrs_attrs__ if a.default is not nothing]\r\n        # ...\r\n        return cls(**properties)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/636", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/636/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/636/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/636/events", "html_url": "https://github.com/python-attrs/attrs/issues/636", "id": 590376472, "node_id": "MDU6SXNzdWU1OTAzNzY0NzI=", "number": 636, "title": "Access to Attribute (attr.filters examples)", "user": {"login": "bruchar1", "id": 28656911, "node_id": "MDQ6VXNlcjI4NjU2OTEx", "avatar_url": "https://avatars3.githubusercontent.com/u/28656911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruchar1", "html_url": "https://github.com/bruchar1", "followers_url": "https://api.github.com/users/bruchar1/followers", "following_url": "https://api.github.com/users/bruchar1/following{/other_user}", "gists_url": "https://api.github.com/users/bruchar1/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruchar1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruchar1/subscriptions", "organizations_url": "https://api.github.com/users/bruchar1/orgs", "repos_url": "https://api.github.com/users/bruchar1/repos", "events_url": "https://api.github.com/users/bruchar1/events{/privacy}", "received_events_url": "https://api.github.com/users/bruchar1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-30T15:20:35Z", "updated_at": "2020-03-30T15:42:06Z", "closed_at": "2020-03-30T15:35:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure if the bug is in documentation or in attrs itself, but the example about include and exclude filters, given in http://www.attrs.org/en/15.0.0/examples.html#converting-to-dictionaries, does not work.\r\n\r\n```\r\n@attr.s\r\nclass User(object):\r\n    login = attr.ib()\r\n    password = attr.ib()\r\n    id = attr.ib()\r\nattr.asdict(User(\"jane\", \"s33kred\", 42), filter=attr.filters.exclude(User.password, int))\r\n```\r\ngives me `AttributeError: type object 'User' has no attribute 'password'`\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/631", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/631/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/631/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/631/events", "html_url": "https://github.com/python-attrs/attrs/issues/631", "id": 576457021, "node_id": "MDU6SXNzdWU1NzY0NTcwMjE=", "number": 631, "title": "importing ctypes & throwing strange error on GAE (App Engine) Py2.7", "user": {"login": "dgaedcke", "id": 1172930, "node_id": "MDQ6VXNlcjExNzI5MzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1172930?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgaedcke", "html_url": "https://github.com/dgaedcke", "followers_url": "https://api.github.com/users/dgaedcke/followers", "following_url": "https://api.github.com/users/dgaedcke/following{/other_user}", "gists_url": "https://api.github.com/users/dgaedcke/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgaedcke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgaedcke/subscriptions", "organizations_url": "https://api.github.com/users/dgaedcke/orgs", "repos_url": "https://api.github.com/users/dgaedcke/repos", "events_url": "https://api.github.com/users/dgaedcke/events{/privacy}", "received_events_url": "https://api.github.com/users/dgaedcke/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915654, "node_id": "MDU6TGFiZWwxNzA5MTU2NTQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Invalid", "name": "Invalid", "color": "e6e6e6", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-05T18:43:44Z", "updated_at": "2020-03-06T17:29:46Z", "closed_at": "2020-03-06T09:32:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "This line:\r\nsite-packages/attr/_compat.py\", line 95, in import_ctypes\r\nis crashing on devappserver (local GAE dev emulator) because os.uname() is returning empty string.\r\n\r\nFull stack trace in this SO post:\r\nhttps://stackoverflow.com/questions/60533259/devappserver-py-for-app-engine-std-on-localhost-is-clearing-os-uname-crashing\r\n\r\nDo you have any thoughts or advice for me?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/630", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/630/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/630/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/630/events", "html_url": "https://github.com/python-attrs/attrs/issues/630", "id": 575686533, "node_id": "MDU6SXNzdWU1NzU2ODY1MzM=", "number": 630, "title": "Way to change defaults?", "user": {"login": "quicknir", "id": 10457096, "node_id": "MDQ6VXNlcjEwNDU3MDk2", "avatar_url": "https://avatars3.githubusercontent.com/u/10457096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quicknir", "html_url": "https://github.com/quicknir", "followers_url": "https://api.github.com/users/quicknir/followers", "following_url": "https://api.github.com/users/quicknir/following{/other_user}", "gists_url": "https://api.github.com/users/quicknir/gists{/gist_id}", "starred_url": "https://api.github.com/users/quicknir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quicknir/subscriptions", "organizations_url": "https://api.github.com/users/quicknir/orgs", "repos_url": "https://api.github.com/users/quicknir/repos", "events_url": "https://api.github.com/users/quicknir/events{/privacy}", "received_events_url": "https://api.github.com/users/quicknir/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428248824, "node_id": "MDU6TGFiZWw0MjgyNDg4MjQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Feature", "name": "Feature", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-03-04T19:13:11Z", "updated_at": "2020-07-20T08:10:04Z", "closed_at": "2020-07-20T08:10:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I read this page on the mypy docs, https://mypy.readthedocs.io/en/stable/additional_features.html which says that you can't simply write a function like this:\r\n\r\n```\r\ndef my_dataclass(cls):\r\n    return attr.s(cls, auto_attribs=True)\r\n```\r\n\r\nAnd expect things to type check correctly. \r\n\r\nIs there any convenient, mypy compatible way, to change defaults in attrs? I saw the RFC about defaults being inconvenient; better defaults (above all auto_attribs=True) will help but of course people will not necessarily agree on the best defaults, hence why being able to wrap it would be such a win.\r\n\r\nIt looks like pydantic has done it (https://github.com/samuelcolvin/pydantic/blob/master/pydantic/dataclasses.py), but it's hard for me to separate out the bits that are related to their extra functionality, from the bare minimum.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/629", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/629/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/629/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/629/events", "html_url": "https://github.com/python-attrs/attrs/issues/629", "id": 573512828, "node_id": "MDU6SXNzdWU1NzM1MTI4Mjg=", "number": 629, "title": "It's in `attr.__init__` without the `.dev0` suffix.", "user": {"login": "NI1993", "id": 60190218, "node_id": "MDQ6VXNlcjYwMTkwMjE4", "avatar_url": "https://avatars0.githubusercontent.com/u/60190218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NI1993", "html_url": "https://github.com/NI1993", "followers_url": "https://api.github.com/users/NI1993/followers", "following_url": "https://api.github.com/users/NI1993/following{/other_user}", "gists_url": "https://api.github.com/users/NI1993/gists{/gist_id}", "starred_url": "https://api.github.com/users/NI1993/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NI1993/subscriptions", "organizations_url": "https://api.github.com/users/NI1993/orgs", "repos_url": "https://api.github.com/users/NI1993/repos", "events_url": "https://api.github.com/users/NI1993/events{/privacy}", "received_events_url": "https://api.github.com/users/NI1993/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-01T09:19:46Z", "updated_at": "2020-03-01T09:19:56Z", "closed_at": "2020-03-01T09:19:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It's in `attr.__init__` without the `.dev0` suffix.\r\n\r\n_Originally posted by @hynek in https://github.com/python-attrs/attrs/pull/618_\r\n\r\nFixed, Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/628", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/628/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/628/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/628/events", "html_url": "https://github.com/python-attrs/attrs/issues/628", "id": 570459710, "node_id": "MDU6SXNzdWU1NzA0NTk3MTA=", "number": 628, "title": "__attrs_post_init__ is not called on the derived class instances", "user": {"login": "deeagle001", "id": 22753186, "node_id": "MDQ6VXNlcjIyNzUzMTg2", "avatar_url": "https://avatars2.githubusercontent.com/u/22753186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deeagle001", "html_url": "https://github.com/deeagle001", "followers_url": "https://api.github.com/users/deeagle001/followers", "following_url": "https://api.github.com/users/deeagle001/following{/other_user}", "gists_url": "https://api.github.com/users/deeagle001/gists{/gist_id}", "starred_url": "https://api.github.com/users/deeagle001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deeagle001/subscriptions", "organizations_url": "https://api.github.com/users/deeagle001/orgs", "repos_url": "https://api.github.com/users/deeagle001/repos", "events_url": "https://api.github.com/users/deeagle001/events{/privacy}", "received_events_url": "https://api.github.com/users/deeagle001/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915654, "node_id": "MDU6TGFiZWwxNzA5MTU2NTQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Invalid", "name": "Invalid", "color": "e6e6e6", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-25T10:17:26Z", "updated_at": "2020-02-25T16:21:07Z", "closed_at": "2020-02-25T16:21:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI have a problem, while I would like to derive from an `attrs` class. The derived class does not add any field, just overwriting custom methods and implementing the `__attrs_post_init__` method. For this reason, I did not apply the `attr.s` decorator to the derived class as no new field was added.\r\nUnfortunately, instances from this derived class did not call the `__attrs_post_init__` method.\r\nI assumed, this behavior was also inherited from the base class, as this is rather a metaclass feature than a pure inheritance one, but it seems this is not the case.\r\n\r\nExample code:\r\n\r\n```python\r\nimport attr\r\n\r\n@attr.s(auto_attribs=True)\r\nclass MyBaseClass:\r\n    my_field : str\r\n\r\nclass MyInheritedClass(MyBaseClass):\r\n    def __attrs_post_init__(self):\r\n        my_field = \"hardcoded\"\r\n        print(\"I am not called!\")\r\n\r\nobj = MyInheritedClass('field_val')\r\nassert obj.my_field == \"hardcoded\"\r\n```\r\n\r\nI cannot even check, whether the inherited class has applied `attr.s` on it to fix manually, as the `attr.has()` returns `True`, even if it was not applied (because the base class has fields.).\r\n\r\nCan this be an inheritance friendly feature or have an inheritance friendly equivalent?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/626", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/626/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/626/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/626/events", "html_url": "https://github.com/python-attrs/attrs/issues/626", "id": 569133087, "node_id": "MDU6SXNzdWU1NjkxMzMwODc=", "number": 626, "title": "``__ne__`` dunders changing?", "user": {"login": "botant", "id": 5804732, "node_id": "MDQ6VXNlcjU4MDQ3MzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/5804732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/botant", "html_url": "https://github.com/botant", "followers_url": "https://api.github.com/users/botant/followers", "following_url": "https://api.github.com/users/botant/following{/other_user}", "gists_url": "https://api.github.com/users/botant/gists{/gist_id}", "starred_url": "https://api.github.com/users/botant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/botant/subscriptions", "organizations_url": "https://api.github.com/users/botant/orgs", "repos_url": "https://api.github.com/users/botant/repos", "events_url": "https://api.github.com/users/botant/events{/privacy}", "received_events_url": "https://api.github.com/users/botant/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-21T19:10:37Z", "updated_at": "2020-03-13T10:38:52Z", "closed_at": "2020-03-13T10:38:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I found that ``__ne__`` dunders are changing during the lifetime of a class. \r\n\r\nI'm using Python 3.7 on Ubuntu and the latest version of ``attrs``.\r\n\r\nTo reproduce the issue, try this:\r\n```\r\nimport attr\r\nA = attr.make_class('A', [], eq=True)\r\nprint((id(A.__eq__), A.__eq__.__module__, A.__eq__.__qualname__, id(A.__ne__), A.__ne__.__module__, A.__ne__.__qualname__))\r\nB = attr.make_class('B', [], eq=True)\r\nprint((id(A.__eq__), A.__eq__.__module__, A.__eq__.__qualname__, id(A.__ne__), A.__ne__.__module__, A.__ne__.__qualname__))\r\n```\r\n\r\nI believe this is happening because ``_make_eq`` returns the module-defined ``__ne__``:\r\n\r\n```python\r\ndef __ne__(self, other):\r\n    \"\"\"\r\n    Check equality and either forward a NotImplemented or return the result\r\n    negated.\r\n    \"\"\"\r\n    result = self.__eq__(other)\r\n    if result is NotImplemented:\r\n        return NotImplemented\r\n\r\n    return not result\r\n\r\n\r\ndef _make_eq(cls, attrs):\r\n   ...\r\n    return local_vars[\"__eq__\"], __ne__\r\n```\r\n\r\nThis should be easy to solve. If someone can confirm whether this is indeed unintended, I'll create a PR this weekend.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/623", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/623/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/623/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/623/events", "html_url": "https://github.com/python-attrs/attrs/issues/623", "id": 563509324, "node_id": "MDU6SXNzdWU1NjM1MDkzMjQ=", "number": 623, "title": "Attrs... Attribute-wise \"frozen\"-specifier?", "user": {"login": "peteroconnor-bc", "id": 48102710, "node_id": "MDQ6VXNlcjQ4MTAyNzEw", "avatar_url": "https://avatars2.githubusercontent.com/u/48102710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peteroconnor-bc", "html_url": "https://github.com/peteroconnor-bc", "followers_url": "https://api.github.com/users/peteroconnor-bc/followers", "following_url": "https://api.github.com/users/peteroconnor-bc/following{/other_user}", "gists_url": "https://api.github.com/users/peteroconnor-bc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peteroconnor-bc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peteroconnor-bc/subscriptions", "organizations_url": "https://api.github.com/users/peteroconnor-bc/orgs", "repos_url": "https://api.github.com/users/peteroconnor-bc/repos", "events_url": "https://api.github.com/users/peteroconnor-bc/events{/privacy}", "received_events_url": "https://api.github.com/users/peteroconnor-bc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-11T22:02:28Z", "updated_at": "2020-03-04T15:32:17Z", "closed_at": "2020-03-04T15:32:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've found it's often best to use `@attrs(frozen=True, slots=True)` as a safe-default and only do otherwise when the situation requires.  \r\n\r\nHowever, sometimes you have a state variable that needs to be updated.  In this case, it would be nice to have the option to still freeze variable other than the mutable state.  E.g. \r\n\r\n```\r\n@attrs(slots=True)\r\nclass ExponentialMovingAverage(object):\r\n    decay = attrib(type=float, frozen=True)  # Currently not an option\r\n    avg = attrib(default=0)\r\n\r\n    def __call__(self, x):\r\n        self.avg = self.avg * (1 - self.decay) + x * self.decay\r\n        return self.avg\r\n```\r\n\r\nIs there already a good way to do this that I'm missing?  If not, would it be a good addition?\r\n\r\nThis is obviously not that important for the example here, but becomes useful when classes get bigger and you want to prevent modification of a parameter that is supposed to be fixed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/622", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/622/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/622/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/622/events", "html_url": "https://github.com/python-attrs/attrs/issues/622", "id": 558219986, "node_id": "MDU6SXNzdWU1NTgyMTk5ODY=", "number": 622, "title": "Attribute changed notification hooks", "user": {"login": "danieljfarrell", "id": 112847, "node_id": "MDQ6VXNlcjExMjg0Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/112847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieljfarrell", "html_url": "https://github.com/danieljfarrell", "followers_url": "https://api.github.com/users/danieljfarrell/followers", "following_url": "https://api.github.com/users/danieljfarrell/following{/other_user}", "gists_url": "https://api.github.com/users/danieljfarrell/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieljfarrell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieljfarrell/subscriptions", "organizations_url": "https://api.github.com/users/danieljfarrell/orgs", "repos_url": "https://api.github.com/users/danieljfarrell/repos", "events_url": "https://api.github.com/users/danieljfarrell/events{/privacy}", "received_events_url": "https://api.github.com/users/danieljfarrell/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428248824, "node_id": "MDU6TGFiZWw0MjgyNDg4MjQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Feature", "name": "Feature", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-01-31T16:04:24Z", "updated_at": "2020-07-22T14:21:09Z", "closed_at": "2020-07-22T14:21:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm interested in extending attrs to provide change notifications. Or at least making my classes generated with attrs emit notifications when an attribute changes.\r\n\r\nHow would you go about doing this?\r\n\r\nI'm wondering if attrs could generate an `'x'_did_change` method/notification hook when synthesizing the attributes. This is similar to [traitlets trait change notifications/observations](https://traitlets.readthedocs.io/en/stable/api.html#callbacks-when-trait-attributes-change) although that's more dynamic as observers can be added and removed at runtime.\r\n\r\n```python\r\nimport attr\r\nimport typing\r\n\r\n@attr.s(auto_attribs=True)\r\nclass SomeClass:\r\n    a_number: int = 42\r\n    list_of_numbers: typing.List[int] = attr.Factory(list)\r\n\r\n    def _a_number_did_change(self, info):\r\n        old = info['old']\r\n        new = info['new']\r\n\r\n    def _list_of_numbers_did_change(self, info):\r\n        added = info['added']\r\n        removed = info['removed']\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/617", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/617/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/617/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/617/events", "html_url": "https://github.com/python-attrs/attrs/issues/617", "id": 550781304, "node_id": "MDU6SXNzdWU1NTA3ODEzMDQ=", "number": 617, "title": "Unresolved attribute reference 'default' for class 'list'", "user": {"login": "mozesa", "id": 49973426, "node_id": "MDQ6VXNlcjQ5OTczNDI2", "avatar_url": "https://avatars2.githubusercontent.com/u/49973426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mozesa", "html_url": "https://github.com/mozesa", "followers_url": "https://api.github.com/users/mozesa/followers", "following_url": "https://api.github.com/users/mozesa/following{/other_user}", "gists_url": "https://api.github.com/users/mozesa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mozesa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mozesa/subscriptions", "organizations_url": "https://api.github.com/users/mozesa/orgs", "repos_url": "https://api.github.com/users/mozesa/repos", "events_url": "https://api.github.com/users/mozesa/events{/privacy}", "received_events_url": "https://api.github.com/users/mozesa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-16T12:38:09Z", "updated_at": "2020-01-16T18:00:13Z", "closed_at": "2020-01-16T18:00:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear **Attr**,\r\n\r\nI get the below error message when I _typehint_ the attribute which has decorated default value.\r\nI mean without tpyehint there is no error msg.\r\n\r\n![Untitled](https://user-images.githubusercontent.com/49973426/72525626-e2223880-3864-11ea-951b-0f0605412fa3.png)\r\n\r\nI use the latest `PyCharm` and `Windows 10` with `Python 3.8.1`.\r\n\r\nDo I make any mistake?\r\n\r\nThanks for your support!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/613", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/613/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/613/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/613/events", "html_url": "https://github.com/python-attrs/attrs/issues/613", "id": 549122882, "node_id": "MDU6SXNzdWU1NDkxMjI4ODI=", "number": 613, "title": "cache_hash breaks copy and pickle for non-slots classes", "user": {"login": "pganssle", "id": 1377457, "node_id": "MDQ6VXNlcjEzNzc0NTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1377457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pganssle", "html_url": "https://github.com/pganssle", "followers_url": "https://api.github.com/users/pganssle/followers", "following_url": "https://api.github.com/users/pganssle/following{/other_user}", "gists_url": "https://api.github.com/users/pganssle/gists{/gist_id}", "starred_url": "https://api.github.com/users/pganssle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pganssle/subscriptions", "organizations_url": "https://api.github.com/users/pganssle/orgs", "repos_url": "https://api.github.com/users/pganssle/repos", "events_url": "https://api.github.com/users/pganssle/events{/privacy}", "received_events_url": "https://api.github.com/users/pganssle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-13T19:05:03Z", "updated_at": "2020-02-10T16:16:08Z", "closed_at": "2020-02-10T16:16:08Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "After \"fixing\" #611, I realized that my test in #612 was incomplete - I was not asserting that the `copy.deepcopy` worked, and it turns out it *did not*. The test, modified as below, fails because `b.x` is never set (the attribute doesn't even exist in the copied object):\r\n\r\n```python\r\n    def test_copy_roundtrip(self):\r\n        @attr.s(frozen=True, cache_hash=True)\r\n        class C(object):\r\n            x = attr.ib()\r\n\r\n        a = C(1)\r\n        b = copy.deepcopy(C(1))\r\n\r\n        assert a == b\r\n```\r\n\r\nI may be missing something, but it seems like #489 actually broke serialization *entirely* for any class with `cache_hash`:\r\n\r\n```python\r\n>>> import attr\r\n>>> import copy\r\n>>> @attr.s(hash=True, cache_hash=True)\r\n... class SomeClass:\r\n...     x = attr.ib()\r\n...\r\n>>> SomeClass(1)\r\nSomeClass(x=1)\r\n>>> copy.deepcopy(SomeClass(1))\r\nSomeClass(x=NOTHING)\r\n```\r\n\r\nI believe the reason for this is that `copy` and `pickle` don't do whatever their default behavior is if `__setstate__` is set - they just create a new object and then call `__setstate__`, which means that when `__setstate__` doesn't actually initialize the object, the object remains uninitialized.\r\n\r\nI am assuming this went unnoticed because @gabbard (who had the problem in the first place) is, I'm assuming, using a slots class, which doesn't have this problem (`slots` defines a `__setstate__`).\r\n\r\nI think there are two options here:\r\n\r\n1. Define a custom `__getstate__` and `__setstate__` for classes with `cache_hash=True` to duplicate what `pickle` and `copy` were doing anyway.\r\n2. Define a default `__reduce__` method that removes the hash cache.\r\n\r\nI don't like the first option very much, because it means that we have to re-implement `copy` and `pickle`'s default behavior (which may even diverge from one another)! I like the second one a lot more, particularly because this will just be the *default* `__reduce__`. People implementing their own custom `__reduce__` can choose to include or not include the cached hash (though I'm not sure if there's a public variable anywhere they can access to tell what member it would be - maybe exposing such a public member should be part of this)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/611", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/611/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/611/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/611/events", "html_url": "https://github.com/python-attrs/attrs/issues/611", "id": 546552198, "node_id": "MDU6SXNzdWU1NDY1NTIxOTg=", "number": 611, "title": "frozen=True incompatible with cache_hash=True as of 19.1.0", "user": {"login": "pganssle", "id": 1377457, "node_id": "MDQ6VXNlcjEzNzc0NTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1377457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pganssle", "html_url": "https://github.com/pganssle", "followers_url": "https://api.github.com/users/pganssle/followers", "following_url": "https://api.github.com/users/pganssle/following{/other_user}", "gists_url": "https://api.github.com/users/pganssle/gists{/gist_id}", "starred_url": "https://api.github.com/users/pganssle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pganssle/subscriptions", "organizations_url": "https://api.github.com/users/pganssle/orgs", "repos_url": "https://api.github.com/users/pganssle/repos", "events_url": "https://api.github.com/users/pganssle/events{/privacy}", "received_events_url": "https://api.github.com/users/pganssle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}, {"id": 428248613, "node_id": "MDU6TGFiZWw0MjgyNDg2MTM=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Regression", "name": "Regression", "color": "e99695", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-07T22:57:46Z", "updated_at": "2020-01-13T07:46:12Z", "closed_at": "2020-01-13T07:46:12Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Prior to #489, this used to work:\r\n\r\n```python\r\nimport attr\r\nimport copy\r\n\r\n@attr.s(frozen=True, cache_hash=True)\r\nclass FrozenWithCache:\r\n    pass\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    copy.deepcopy(FrozenWithCache())\r\n```\r\n\r\nThe issue is that `frozen` is implemented by throwing an error in `__setattr__`, and clearing the hash cache calls `setattr`. I think this can be solved by using [the same mechanism that `_make_hash` uses for frozen classes](https://github.com/python-attrs/attrs/blob/b6bd8c8d2bb0c53bbad0f11377df6083313d26c2/src/attr/_make.py#L1119), but I have not tried implementing this before.\r\n\r\nAnother option is to not clear the hash cache on serialization for frozen classes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/610", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/610/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/610/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/610/events", "html_url": "https://github.com/python-attrs/attrs/issues/610", "id": 546273166, "node_id": "MDU6SXNzdWU1NDYyNzMxNjY=", "number": 610, "title": "Converter says: TypeError: string argument without an encoding", "user": {"login": "mozesa", "id": 49973426, "node_id": "MDQ6VXNlcjQ5OTczNDI2", "avatar_url": "https://avatars2.githubusercontent.com/u/49973426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mozesa", "html_url": "https://github.com/mozesa", "followers_url": "https://api.github.com/users/mozesa/followers", "following_url": "https://api.github.com/users/mozesa/following{/other_user}", "gists_url": "https://api.github.com/users/mozesa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mozesa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mozesa/subscriptions", "organizations_url": "https://api.github.com/users/mozesa/orgs", "repos_url": "https://api.github.com/users/mozesa/repos", "events_url": "https://api.github.com/users/mozesa/events{/privacy}", "received_events_url": "https://api.github.com/users/mozesa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915654, "node_id": "MDU6TGFiZWwxNzA5MTU2NTQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Invalid", "name": "Invalid", "color": "e6e6e6", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-07T13:06:00Z", "updated_at": "2020-01-07T17:03:09Z", "closed_at": "2020-01-07T17:01:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI bumped into the below error msg.\r\n\r\n```text\r\nTraceback (most recent call last):\r\n  File \"C:/Users/mozesa/PycharmProjects/V316-Production-Line/mvc_v316_prod_line/ehh.py\", line 40, in <module>\r\n    test = Test(\"StrinG\", \"ByteS\")\r\n  File \"<attrs generated init __main__.Test>\", line 3, in __init__\r\nTypeError: string argument without an encoding\r\n```\r\n\r\nIt happens whenever I try to convert str to bytes.\r\n\r\n```python\r\nimport attr\r\n\r\n\r\n@attr.s\r\nclass Test:\r\n    string: str = attr.ib(converter=str)\r\n    byte: bytes = attr.ib(converter=bytes)\r\n\r\n\r\ntest = Test(\"StrinG\", \"ByteS\")\r\n```\r\n\r\nThe root cause of the problem is that `bytes` awaits for an `encoding` parameter.\r\nSo a workaround...\r\n\r\n```python\r\nimport attr\r\n\r\n\r\n@attr.s\r\nclass Test:\r\n    string: str = attr.ib(converter=str)\r\n    byte: bytes = attr.ib(converter=lambda x: bytes(x, encoding=\"utf-8\"))\r\n\r\n\r\ntest = Test(\"StrinG\", \"ByteS\")\r\n```\r\n\r\nI search through the issues but I couldnt find it.\r\nSorry If it has been posted.\r\n\r\nThanks for your help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/609", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/609/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/609/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/609/events", "html_url": "https://github.com/python-attrs/attrs/issues/609", "id": 546181364, "node_id": "MDU6SXNzdWU1NDYxODEzNjQ=", "number": 609, "title": "Despite attrs having relevant stubs. There is unresolved attribute reference error in the docstring !", "user": {"login": "akarsh1995", "id": 25827628, "node_id": "MDQ6VXNlcjI1ODI3NjI4", "avatar_url": "https://avatars2.githubusercontent.com/u/25827628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akarsh1995", "html_url": "https://github.com/akarsh1995", "followers_url": "https://api.github.com/users/akarsh1995/followers", "following_url": "https://api.github.com/users/akarsh1995/following{/other_user}", "gists_url": "https://api.github.com/users/akarsh1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/akarsh1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akarsh1995/subscriptions", "organizations_url": "https://api.github.com/users/akarsh1995/orgs", "repos_url": "https://api.github.com/users/akarsh1995/repos", "events_url": "https://api.github.com/users/akarsh1995/events{/privacy}", "received_events_url": "https://api.github.com/users/akarsh1995/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-07T09:43:38Z", "updated_at": "2020-01-07T17:49:29Z", "closed_at": "2020-01-07T17:49:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Look at the image a snapshot in PyCharm.  \r\n\r\nThere's linting error *unresolved attribute reference* in the docstring. Whereas defining classes with `__init__` method gives no such error.  \r\n\r\nLook at the underlined attribute `attribute_with_attr`.\r\n\r\n<img width=\"488\" alt=\"image\" src=\"https://user-images.githubusercontent.com/25827628/71879608-7a793880-3154-11ea-979c-a257f6f6d8f1.png\">\r\n\r\n```python\r\nimport attr\r\n\r\n\r\n@attr.s\r\nclass UsingAttrs:\r\n    \"\"\"\r\n    class created using attrs shows linting error.\r\n\r\n    Attributes\r\n    ----------\r\n    attribute_with_attr : str\r\n    \"\"\"\r\n    attribute_with_attr: str = attr.ib(default='some_string_value')\r\n\r\n\r\nclass NotUsingAttrs:\r\n    \"\"\"\r\n    class created normally does not show linting error.\r\n\r\n    Attributes\r\n    ----------\r\n    attribute_without_attr : str\r\n    \"\"\"\r\n    attribute_without_attr: str\r\n\r\n    def __init__(self, param='some string value'):\r\n        self.attribute_without_attr = param\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/606", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/606/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/606/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/606/events", "html_url": "https://github.com/python-attrs/attrs/issues/606", "id": 544839846, "node_id": "MDU6SXNzdWU1NDQ4Mzk4NDY=", "number": 606, "title": "Is Python 3.4 support being dropped?", "user": {"login": "altendky", "id": 543719, "node_id": "MDQ6VXNlcjU0MzcxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/543719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/altendky", "html_url": "https://github.com/altendky", "followers_url": "https://api.github.com/users/altendky/followers", "following_url": "https://api.github.com/users/altendky/following{/other_user}", "gists_url": "https://api.github.com/users/altendky/gists{/gist_id}", "starred_url": "https://api.github.com/users/altendky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/altendky/subscriptions", "organizations_url": "https://api.github.com/users/altendky/orgs", "repos_url": "https://api.github.com/users/altendky/repos", "events_url": "https://api.github.com/users/altendky/events{/privacy}", "received_events_url": "https://api.github.com/users/altendky/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428248917, "node_id": "MDU6TGFiZWw0MjgyNDg5MTc=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Cleanup", "name": "Cleanup", "color": "006b75", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-03T03:49:38Z", "updated_at": "2020-01-06T14:56:04Z", "closed_at": "2020-01-06T14:50:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Looks like the tests are failing, should I PR to remove 3.4 support or is it intentionally being kept around?  A quick search for 3.4 didn't turn up any other issues.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/603", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/603/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/603/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/603/events", "html_url": "https://github.com/python-attrs/attrs/issues/603", "id": 539088842, "node_id": "MDU6SXNzdWU1MzkwODg4NDI=", "number": 603, "title": "Use validator/default as decorator in inherited class", "user": {"login": "ahelm", "id": 1353242, "node_id": "MDQ6VXNlcjEzNTMyNDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1353242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahelm", "html_url": "https://github.com/ahelm", "followers_url": "https://api.github.com/users/ahelm/followers", "following_url": "https://api.github.com/users/ahelm/following{/other_user}", "gists_url": "https://api.github.com/users/ahelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahelm/subscriptions", "organizations_url": "https://api.github.com/users/ahelm/orgs", "repos_url": "https://api.github.com/users/ahelm/repos", "events_url": "https://api.github.com/users/ahelm/events{/privacy}", "received_events_url": "https://api.github.com/users/ahelm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-17T14:08:40Z", "updated_at": "2019-12-18T15:03:05Z", "closed_at": "2019-12-18T15:03:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI was recently trying to play with attrs and decided to have a class-specific validators for attributes. Something like this:\r\n\r\n```python\r\nimport attr\r\n\r\n\r\n@attr.s\r\nclass Foo:\r\n    prop = attr.ib(validator=attr.validators.instance_of(str))\r\n\r\n    @prop.validator\r\n    def _check_prop_in_Foo(self, attribute, value):\r\n        valid_strings = (\"foo\", \"bar\", \"baz\")\r\n        if not value in valid_strings:\r\n            raise TypeError(f\"Props can only be one of {valid_strings}\")\r\n\r\n\r\n@attr.s\r\nclass Bar(Foo):\r\n    @prop.validator\r\n    def _check_prop_in_Bar(self, attribute, value):\r\n        valid_strings = (\"bar\",)\r\n        if not value in valid_strings:\r\n            raise TypeError(f\"Props can only be one of {valid_strings}\")\r\n\r\n\r\nBar(prop=\"bar\")\r\n```\r\n\r\nThis raises obviously a `NameError`.\r\n\r\nI am not sure if it would make sense as a feature as you can use a function for validation or rewrite a few things. But it would be interesting in making it cleaner. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/599", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/599/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/599/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/599/events", "html_url": "https://github.com/python-attrs/attrs/issues/599", "id": 523947423, "node_id": "MDU6SXNzdWU1MjM5NDc0MjM=", "number": 599, "title": "Small typo in docs/why.rst", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428249065, "node_id": "MDU6TGFiZWw0MjgyNDkwNjU=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Documentation", "name": "Documentation", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-17T07:09:28Z", "updated_at": "2019-11-18T07:54:18Z", "closed_at": "2019-11-18T07:54:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Should read development instead of developement.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/596", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/596/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/596/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/596/events", "html_url": "https://github.com/python-attrs/attrs/issues/596", "id": 514459702, "node_id": "MDU6SXNzdWU1MTQ0NTk3MDI=", "number": 596, "title": "Get fields declared in class only", "user": {"login": "Xfel", "id": 2306230, "node_id": "MDQ6VXNlcjIzMDYyMzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/2306230?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xfel", "html_url": "https://github.com/Xfel", "followers_url": "https://api.github.com/users/Xfel/followers", "following_url": "https://api.github.com/users/Xfel/following{/other_user}", "gists_url": "https://api.github.com/users/Xfel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xfel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xfel/subscriptions", "organizations_url": "https://api.github.com/users/Xfel/orgs", "repos_url": "https://api.github.com/users/Xfel/repos", "events_url": "https://api.github.com/users/Xfel/events{/privacy}", "received_events_url": "https://api.github.com/users/Xfel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428248824, "node_id": "MDU6TGFiZWw0MjgyNDg4MjQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Feature", "name": "Feature", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-30T07:44:34Z", "updated_at": "2020-08-03T16:20:15Z", "closed_at": "2020-08-03T16:20:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "`fields(cls)` returns fields of cls in the entire hierarchy. However, there is no easy way to get the fields that were declared in cls itself only.\r\n\r\nThe best solution would be to add a `declaring_class` value to the Attribute class. This would be relatively straightforward for __dict__-based classes. For slots classes, we'd need to update this field after the new type has been created.\r\n\r\nWhen querying declared fields, one could additionally exploit the fact that they're arranged in a continuous block at the end of the fields tuple.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/589", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/589/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/589/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/589/events", "html_url": "https://github.com/python-attrs/attrs/issues/589", "id": 510073969, "node_id": "MDU6SXNzdWU1MTAwNzM5Njk=", "number": 589, "title": "ValueError: Cell is empty with very specific code", "user": {"login": "smarie", "id": 3236794, "node_id": "MDQ6VXNlcjMyMzY3OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3236794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smarie", "html_url": "https://github.com/smarie", "followers_url": "https://api.github.com/users/smarie/followers", "following_url": "https://api.github.com/users/smarie/following{/other_user}", "gists_url": "https://api.github.com/users/smarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/smarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smarie/subscriptions", "organizations_url": "https://api.github.com/users/smarie/orgs", "repos_url": "https://api.github.com/users/smarie/repos", "events_url": "https://api.github.com/users/smarie/events{/privacy}", "received_events_url": "https://api.github.com/users/smarie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-21T15:55:39Z", "updated_at": "2020-03-13T05:06:16Z", "closed_at": "2020-03-13T05:06:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider this horrible and useless code:\r\n\r\n```python\r\n@attr.s(slots=True)\r\nclass C(object):\r\n    field = attr.ib()\r\n\r\n    def f(self, a):\r\n        super(C, self).__init__()\r\n```\r\n\r\nYou get a nice error:\r\n\r\n```\r\n        # The following is a fix for\r\n        # https://github.com/python-attrs/attrs/issues/102.  On Python 3,\r\n        # if a method mentions `__class__` or uses the no-arg super(), the\r\n        # compiler will bake a reference to the class in the method itself\r\n        # as `method.__closure__`.  Since we replace the class with a\r\n        # clone, we rewrite these references so it keeps working.\r\n        for item in cls.__dict__.values():\r\n            if isinstance(item, (classmethod, staticmethod)):\r\n                # Class- and staticmethods hide their functions inside.\r\n                # These might need to be rewritten as well.\r\n                closure_cells = getattr(item.__func__, \"__closure__\", None)\r\n            else:\r\n                closure_cells = getattr(item, \"__closure__\", None)\r\n    \r\n            if not closure_cells:  # Catch None or the empty list.\r\n                continue\r\n            for cell in closure_cells:\r\n>               if cell.cell_contents is self._cls:\r\nE               ValueError: Cell is empty\r\n\r\n..\\src\\attr\\_make.py:639: ValueError\r\n```\r\n\r\nI'll push a PR right away", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/588", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/588/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/588/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/588/events", "html_url": "https://github.com/python-attrs/attrs/issues/588", "id": 509073766, "node_id": "MDU6SXNzdWU1MDkwNzM3NjY=", "number": 588, "title": "attrs.org does not redirect to https url", "user": {"login": "wbolster-eiq", "id": 49065466, "node_id": "MDQ6VXNlcjQ5MDY1NDY2", "avatar_url": "https://avatars2.githubusercontent.com/u/49065466?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wbolster-eiq", "html_url": "https://github.com/wbolster-eiq", "followers_url": "https://api.github.com/users/wbolster-eiq/followers", "following_url": "https://api.github.com/users/wbolster-eiq/following{/other_user}", "gists_url": "https://api.github.com/users/wbolster-eiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/wbolster-eiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wbolster-eiq/subscriptions", "organizations_url": "https://api.github.com/users/wbolster-eiq/orgs", "repos_url": "https://api.github.com/users/wbolster-eiq/repos", "events_url": "https://api.github.com/users/wbolster-eiq/events{/privacy}", "received_events_url": "https://api.github.com/users/wbolster-eiq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-18T13:16:10Z", "updated_at": "2020-03-29T06:58:07Z", "closed_at": "2020-03-29T06:58:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "currently, `http://www.attrs.org/` (http) is a working website. and so is `https://www.attrs.org/` (https).\r\n\r\nthe website should only be reachable over https, and the http version should redirect.\r\n\r\n(noticed this via some search results hits that somehow poiinted to the plain http site.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/585", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/585/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/585/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/585/events", "html_url": "https://github.com/python-attrs/attrs/issues/585", "id": 506833742, "node_id": "MDU6SXNzdWU1MDY4MzM3NDI=", "number": 585, "title": "Couldn't use numpy arrays as defaults on attrs 19.2", "user": {"login": "igortg", "id": 2694778, "node_id": "MDQ6VXNlcjI2OTQ3Nzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2694778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/igortg", "html_url": "https://github.com/igortg", "followers_url": "https://api.github.com/users/igortg/followers", "following_url": "https://api.github.com/users/igortg/following{/other_user}", "gists_url": "https://api.github.com/users/igortg/gists{/gist_id}", "starred_url": "https://api.github.com/users/igortg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/igortg/subscriptions", "organizations_url": "https://api.github.com/users/igortg/orgs", "repos_url": "https://api.github.com/users/igortg/repos", "events_url": "https://api.github.com/users/igortg/events{/privacy}", "received_events_url": "https://api.github.com/users/igortg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-14T19:28:17Z", "updated_at": "2019-10-15T06:04:39Z", "closed_at": "2019-10-15T04:56:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code stops working when upgrading from attrs 19.1 to 19.2:\r\n\r\n```\r\n@attr.s(auto_attribs=True)\r\nclass NumParams:\r\n    N = 3\r\n    alpha = np.zeros((N, Ng))\r\n```\r\n\r\nSeems that change #556 requires that default attributes should implement `__eq__`, which is not the case for numpy arrays.\r\n\r\nTaceback is:\r\n```\r\n    @attr.s(auto_attribs=True)\r\n../../../../miniconda/envs/attests/lib/python3.6/site-packages/attr/_make.py:1010: in wrap\r\n    return builder.build_class()\r\n../../../../miniconda/envs/attests/lib/python3.6/site-packages/attr/_make.py:498: in build_class\r\n    return self._patch_original_class()\r\n../../../../miniconda/envs/attests/lib/python3.6/site-packages/attr/_make.py:512: in _patch_original_class\r\n    and getattr(cls, name, _sentinel) != _sentinel\r\nE   ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/584", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/584/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/584/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/584/events", "html_url": "https://github.com/python-attrs/attrs/issues/584", "id": 506178601, "node_id": "MDU6SXNzdWU1MDYxNzg2MDE=", "number": 584, "title": "Correct way to validate if something is an int or float? (Or any other \"multiple allowed classes\" scenario.)", "user": {"login": "Bananaman", "id": 38923130, "node_id": "MDQ6VXNlcjM4OTIzMTMw", "avatar_url": "https://avatars0.githubusercontent.com/u/38923130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bananaman", "html_url": "https://github.com/Bananaman", "followers_url": "https://api.github.com/users/Bananaman/followers", "following_url": "https://api.github.com/users/Bananaman/following{/other_user}", "gists_url": "https://api.github.com/users/Bananaman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bananaman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bananaman/subscriptions", "organizations_url": "https://api.github.com/users/Bananaman/orgs", "repos_url": "https://api.github.com/users/Bananaman/repos", "events_url": "https://api.github.com/users/Bananaman/events{/privacy}", "received_events_url": "https://api.github.com/users/Bananaman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-12T12:05:57Z", "updated_at": "2020-08-17T16:21:30Z", "closed_at": "2019-10-14T11:53:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "My attempt:\r\n\r\n```python\r\nfrom typing import Union\r\nimport numbers\r\n\r\nimport attr\r\n\r\n@attr.s(auto_attribs=True)\r\nclass Trigger:\r\n    value: Union[float, int] = attr.ib(kw_only=True, validator=attr.validators.instance_of(numbers.Real))\r\n```\r\n\r\nThis works but mypy complains. What to do? For now I scrapped it and just went with `value: int`. But for future reference, how do we check if a value is either int or float?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/582", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/582/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/582/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/582/events", "html_url": "https://github.com/python-attrs/attrs/issues/582", "id": 503092361, "node_id": "MDU6SXNzdWU1MDMwOTIzNjE=", "number": 582, "title": "Best Practice in Python 3 for Type Annotation?", "user": {"login": "Bananaman", "id": 38923130, "node_id": "MDQ6VXNlcjM4OTIzMTMw", "avatar_url": "https://avatars0.githubusercontent.com/u/38923130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bananaman", "html_url": "https://github.com/Bananaman", "followers_url": "https://api.github.com/users/Bananaman/followers", "following_url": "https://api.github.com/users/Bananaman/following{/other_user}", "gists_url": "https://api.github.com/users/Bananaman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bananaman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bananaman/subscriptions", "organizations_url": "https://api.github.com/users/Bananaman/orgs", "repos_url": "https://api.github.com/users/Bananaman/repos", "events_url": "https://api.github.com/users/Bananaman/events{/privacy}", "received_events_url": "https://api.github.com/users/Bananaman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-10-06T12:12:16Z", "updated_at": "2019-10-15T18:33:21Z", "closed_at": "2019-10-15T18:31:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\n@attr.s\r\nclass A:\r\n    foo = attr.ib(type=int, init=False, default=10)\r\n```\r\n\r\nvs:\r\n\r\n```python\r\n@attr.s(auto_attribs=True)\r\nclass B:\r\n    foo: int = attr.ib(init=False, default=10)\r\n```\r\n\r\nThe latter may be the best practice? Because IDEs are mostly written to understand Python 3 type hints (`foo: int`) for auto-completion in the IDE... Any IDE which wants to support `foo = attr.ib(type=int...` to understand that `self.foo` is an int, would need special code to parse `attr.ib` parameters...\r\n\r\nWhat do you think @hynek ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/578", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/578/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/578/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/578/events", "html_url": "https://github.com/python-attrs/attrs/issues/578", "id": 497826447, "node_id": "MDU6SXNzdWU0OTc4MjY0NDc=", "number": 578, "title": "Errors in stub files", "user": {"login": "euresti", "id": 1081858, "node_id": "MDQ6VXNlcjEwODE4NTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1081858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euresti", "html_url": "https://github.com/euresti", "followers_url": "https://api.github.com/users/euresti/followers", "following_url": "https://api.github.com/users/euresti/following{/other_user}", "gists_url": "https://api.github.com/users/euresti/gists{/gist_id}", "starred_url": "https://api.github.com/users/euresti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euresti/subscriptions", "organizations_url": "https://api.github.com/users/euresti/orgs", "repos_url": "https://api.github.com/users/euresti/repos", "events_url": "https://api.github.com/users/euresti/events{/privacy}", "received_events_url": "https://api.github.com/users/euresti/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}, {"id": 1283668924, "node_id": "MDU6TGFiZWwxMjgzNjY4OTI0", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Typing", "name": "Typing", "color": "b2ffc4", "default": false, "description": "Typing/stub/mypy related bugs."}], "state": "closed", "locked": false, "assignee": {"login": "euresti", "id": 1081858, "node_id": "MDQ6VXNlcjEwODE4NTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1081858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euresti", "html_url": "https://github.com/euresti", "followers_url": "https://api.github.com/users/euresti/followers", "following_url": "https://api.github.com/users/euresti/following{/other_user}", "gists_url": "https://api.github.com/users/euresti/gists{/gist_id}", "starred_url": "https://api.github.com/users/euresti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euresti/subscriptions", "organizations_url": "https://api.github.com/users/euresti/orgs", "repos_url": "https://api.github.com/users/euresti/repos", "events_url": "https://api.github.com/users/euresti/events{/privacy}", "received_events_url": "https://api.github.com/users/euresti/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "euresti", "id": 1081858, "node_id": "MDQ6VXNlcjEwODE4NTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1081858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euresti", "html_url": "https://github.com/euresti", "followers_url": "https://api.github.com/users/euresti/followers", "following_url": "https://api.github.com/users/euresti/following{/other_user}", "gists_url": "https://api.github.com/users/euresti/gists{/gist_id}", "starred_url": "https://api.github.com/users/euresti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euresti/subscriptions", "organizations_url": "https://api.github.com/users/euresti/orgs", "repos_url": "https://api.github.com/users/euresti/repos", "events_url": "https://api.github.com/users/euresti/events{/privacy}", "received_events_url": "https://api.github.com/users/euresti/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/python-attrs/attrs/milestones/11", "html_url": "https://github.com/python-attrs/attrs/milestone/11", "labels_url": "https://api.github.com/repos/python-attrs/attrs/milestones/11/labels", "id": 4176701, "node_id": "MDk6TWlsZXN0b25lNDE3NjcwMQ==", "number": 11, "title": "19.2", "description": "", "creator": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2019-03-27T13:05:34Z", "updated_at": "2020-03-06T09:42:28Z", "due_on": null, "closed_at": "2020-03-06T09:42:28Z"}, "comments": 5, "created_at": "2019-09-24T17:32:05Z", "updated_at": "2019-09-26T04:49:17Z", "closed_at": "2019-09-26T04:49:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I ran mypy on the .pyi files and found the following errors:\r\n\r\n```\r\nsrc/attr/validators.pyi:17: error: Type variable \"attr.validators._T\" is unbound\r\nsrc/attr/validators.pyi:17: note: (Hint: Use \"Generic[_T]\" or \"Protocol[_T]\" base class to bind \"_T\" inside a class)\r\nsrc/attr/validators.pyi:17: note: (Hint: Use \"_T\" in function signature to bind \"_T\" inside a function)\r\nsrc/attr/validators.pyi:20: error: String argument 1 '_V' to TypeVar(...) does not match variable name '_M'\r\nsrc/attr/validators.pyi:20: error: \"object\" not callable\r\nsrc/attr/validators.pyi:34: error: Unexpected '...'\r\nsrc/attr/validators.pyi:43: error: Variable \"attr.validators._M\" is not valid as a type\r\nsrc/attr/validators.pyi:44: error: Variable \"attr.validators._M\" is not valid as a type\r\n```\r\n\r\nI believe most of these errors get masked by turning the signature in question in `Any` however I was surprised that the CI didn't catch them.  So I looked into what's happening.  I think mypy will not display errors in installed stub files.  (It's not like you as a user of an installed library can fix it so why bother)  \r\n\r\nI thought the easy fix would be to change the tox run line to :\r\n\r\n```\r\n[testenv:typing]\r\nbasepython = python3.7\r\ndeps = mypy\r\ncommands = mypy src/attr/*.pyi tests/typing_example.py\r\n```\r\n\r\nBut it seems tox doesn't do file globbing.  \r\n```\r\nmypy: can't read file 'src/attr/*.pyi': No such file or directory\r\n```\r\n\r\nIs there another solution?  I'm no tox expert.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/576", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/576/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/576/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/576/events", "html_url": "https://github.com/python-attrs/attrs/issues/576", "id": 496181345, "node_id": "MDU6SXNzdWU0OTYxODEzNDU=", "number": 576, "title": "mypy/typing false positives", "user": {"login": "ojii", "id": 141122, "node_id": "MDQ6VXNlcjE0MTEyMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/141122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ojii", "html_url": "https://github.com/ojii", "followers_url": "https://api.github.com/users/ojii/followers", "following_url": "https://api.github.com/users/ojii/following{/other_user}", "gists_url": "https://api.github.com/users/ojii/gists{/gist_id}", "starred_url": "https://api.github.com/users/ojii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ojii/subscriptions", "organizations_url": "https://api.github.com/users/ojii/orgs", "repos_url": "https://api.github.com/users/ojii/repos", "events_url": "https://api.github.com/users/ojii/events{/privacy}", "received_events_url": "https://api.github.com/users/ojii/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1283668924, "node_id": "MDU6TGFiZWwxMjgzNjY4OTI0", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Typing", "name": "Typing", "color": "b2ffc4", "default": false, "description": "Typing/stub/mypy related bugs."}], "state": "closed", "locked": false, "assignee": {"login": "euresti", "id": 1081858, "node_id": "MDQ6VXNlcjEwODE4NTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1081858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euresti", "html_url": "https://github.com/euresti", "followers_url": "https://api.github.com/users/euresti/followers", "following_url": "https://api.github.com/users/euresti/following{/other_user}", "gists_url": "https://api.github.com/users/euresti/gists{/gist_id}", "starred_url": "https://api.github.com/users/euresti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euresti/subscriptions", "organizations_url": "https://api.github.com/users/euresti/orgs", "repos_url": "https://api.github.com/users/euresti/repos", "events_url": "https://api.github.com/users/euresti/events{/privacy}", "received_events_url": "https://api.github.com/users/euresti/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "euresti", "id": 1081858, "node_id": "MDQ6VXNlcjEwODE4NTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1081858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euresti", "html_url": "https://github.com/euresti", "followers_url": "https://api.github.com/users/euresti/followers", "following_url": "https://api.github.com/users/euresti/following{/other_user}", "gists_url": "https://api.github.com/users/euresti/gists{/gist_id}", "starred_url": "https://api.github.com/users/euresti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euresti/subscriptions", "organizations_url": "https://api.github.com/users/euresti/orgs", "repos_url": "https://api.github.com/users/euresti/repos", "events_url": "https://api.github.com/users/euresti/events{/privacy}", "received_events_url": "https://api.github.com/users/euresti/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/python-attrs/attrs/milestones/11", "html_url": "https://github.com/python-attrs/attrs/milestone/11", "labels_url": "https://api.github.com/repos/python-attrs/attrs/milestones/11/labels", "id": 4176701, "node_id": "MDk6TWlsZXN0b25lNDE3NjcwMQ==", "number": 11, "title": "19.2", "description": "", "creator": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2019-03-27T13:05:34Z", "updated_at": "2020-03-06T09:42:28Z", "due_on": null, "closed_at": "2020-03-06T09:42:28Z"}, "comments": 16, "created_at": "2019-09-20T06:56:13Z", "updated_at": "2019-11-12T02:05:00Z", "closed_at": "2019-09-30T17:11:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using attrs 6e7b9f2 and mypy 0.720:\r\n\r\n```python\r\n\r\nfrom typing import List, Dict, Any, Union, Optional\r\nimport attr\r\n\r\n\r\n@attr.s\r\nclass Foo:\r\n    # OK\r\n    str_list: List[str] = attr.ib(\r\n        validator=attr.validators.deep_iterable(\r\n            attr.validators.instance_of(str), attr.validators.instance_of(list)\r\n        )\r\n    )\r\n    # Incompatible types in assignment (expression has type \"Optional[List[_T]]\", variable has type \"Optional[List[str]]\")\r\n    maybe_str_list: Optional[List[str]] = attr.ib(\r\n        validator=attr.validators.optional(\r\n            attr.validators.deep_iterable(\r\n                attr.validators.instance_of(str), attr.validators.instance_of(list)\r\n            )\r\n        )\r\n    )\r\n    # OK\r\n    str_dict: Dict[str, Any] = attr.ib(\r\n        validator=attr.validators.deep_mapping(\r\n            attr.validators.instance_of(str),\r\n            attr.validators.instance_of(object),\r\n            attr.validators.instance_of(dict),\r\n        )\r\n    )\r\n    # OK\r\n    maybe_str_dict: Optional[Dict[str, Any]] = attr.ib(\r\n        validator=attr.validators.optional(\r\n            attr.validators.deep_mapping(\r\n                attr.validators.instance_of(str),\r\n                attr.validators.instance_of(object),\r\n                attr.validators.instance_of(dict),\r\n            )\r\n        )\r\n    )\r\n    # Argument 1 to \"instance_of\" has incompatible type \"Tuple[Type[str], Type[int]]\"; expected \"Union[Tuple[Type[<nothing>], ...], Type[<nothing>]]\"\r\n    str_int: Union[str, int] = attr.ib(\r\n        validator=attr.validators.instance_of((str, int))\r\n    )\r\n    # (the error is shown twice for some reason)\r\n    # Argument 1 to \"instance_of\" has incompatible type \"Tuple[Type[str], Type[int]]\"; expected \"Union[Tuple[Type[<nothing>], ...], Type[<nothing>]]\"\r\n    # Argument 1 to \"instance_of\" has incompatible type \"Tuple[Type[str], Type[int]]\"; expected \"Union[Tuple[Type[None], ...], Type[None]]\"\r\n    maybe_str_int: Optional[Union[str, int]] = attr.ib(\r\n        validator=attr.validators.optional(attr.validators.instance_of((str, int)))\r\n    )\r\n```\r\n\r\n`deep_iterable` seems to have an issue when combined with `optional`, `instance_of` doesn't like tuples of types.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/569", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/569/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/569/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/569/events", "html_url": "https://github.com/python-attrs/attrs/issues/569", "id": 490379400, "node_id": "MDU6SXNzdWU0OTAzNzk0MDA=", "number": 569, "title": "attr for functions?", "user": {"login": "peteroconnor-bc", "id": 48102710, "node_id": "MDQ6VXNlcjQ4MTAyNzEw", "avatar_url": "https://avatars2.githubusercontent.com/u/48102710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peteroconnor-bc", "html_url": "https://github.com/peteroconnor-bc", "followers_url": "https://api.github.com/users/peteroconnor-bc/followers", "following_url": "https://api.github.com/users/peteroconnor-bc/following{/other_user}", "gists_url": "https://api.github.com/users/peteroconnor-bc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peteroconnor-bc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peteroconnor-bc/subscriptions", "organizations_url": "https://api.github.com/users/peteroconnor-bc/orgs", "repos_url": "https://api.github.com/users/peteroconnor-bc/repos", "events_url": "https://api.github.com/users/peteroconnor-bc/events{/privacy}", "received_events_url": "https://api.github.com/users/peteroconnor-bc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915656, "node_id": "MDU6TGFiZWwxNzA5MTU2NTY=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Won't%20Fix", "name": "Won't Fix", "color": "ffffff", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-09-06T15:09:02Z", "updated_at": "2020-05-15T07:46:37Z", "closed_at": "2019-09-07T07:10:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was wondering if there's been any thought towards extending `attr` to functions.  I was thinking it could be useful to deal with the frequent duplication of defaults and types that happens in most codebases.  e.g.: \r\n\r\n    def func_1(a: int = 1, b: float = 2.5) -> float:\r\n        return a*b\r\n\r\n    def func_2(c:float=3.4, d: bool =True) -> float:\r\n        return c if d else -c\r\n\r\n    def main_function(a: int = 1, b: float = 2.5, d: bool = True) -> float:\r\n        return func_2(func_1(a=a, b=b), d=d)\r\n\r\n.. has defaults and types defined in multiple places, which easily leads to bugs.  Alternatives like **kwargs and dependency-injection, tend to cause obfuscation.  With attrs, it could become something like:\r\n\r\n    @attrs\r\n    def func_1(a = attrib(default=1, type=int), b = attrib(default=2.5, type=float) -> float:\r\n        return a*b\r\n\r\n    @attrs\r\n    def func_2(c = attrib(default=3.4, type=float), d=attrib(default=3.4, type=bool)) -> float:\r\n        return c if d else -c\r\n\r\n    @attrs\r\n    def main_function(a = func_1.args.a, b = func_1.args.b, d = func_2.args.d) -> func2.return.type:\r\n        return func_2(func_1(a=a, b=b), d=d)\r\n\r\n\r\nWhich gets rid of all duplicated types and defaults.  All the validators, factory-constructors, and converters already built into attrs could also be useful.  If only defining types and defaults, we could even just simplify that to:\r\n\r\n    @attrs\r\n    def func_1(a: int = 1, b: float = 2.5) -> float:\r\n        return a*b\r\n\r\n    @attrs\r\n    def func_2(c:float=3.4, d: bool =True) -> float:\r\n        return c if d else -c\r\n\r\n    @attrs\r\n    def main_function(a = func_1.args.a, b = func_1.args.b, d = func_2.args.d) -> func2.return.type:\r\n        return func_2(func_1(a=a, b=b), d=d)\r\n\r\nThis arose from an unloved [Python-Ideas proposal](https://mail.python.org/pipermail/python-ideas/2019-April/056452.html) which basically proposes this, plus attribute-documentation [which would be nice too](https://github.com/python-attrs/attrs/issues/357#issuecomment-378807967), as a built-in language feature.  \r\n\r\nBonus is that this could easily evolve into a better means of enforcing [function contracts](https://andreacensi.github.io/contracts/)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/567", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/567/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/567/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/567/events", "html_url": "https://github.com/python-attrs/attrs/issues/567", "id": 489459652, "node_id": "MDU6SXNzdWU0ODk0NTk2NTI=", "number": 567, "title": "Feature Request: Custom __repr__ for particular attribute?", "user": {"login": "peteroconnor-bc", "id": 48102710, "node_id": "MDQ6VXNlcjQ4MTAyNzEw", "avatar_url": "https://avatars2.githubusercontent.com/u/48102710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peteroconnor-bc", "html_url": "https://github.com/peteroconnor-bc", "followers_url": "https://api.github.com/users/peteroconnor-bc/followers", "following_url": "https://api.github.com/users/peteroconnor-bc/following{/other_user}", "gists_url": "https://api.github.com/users/peteroconnor-bc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peteroconnor-bc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peteroconnor-bc/subscriptions", "organizations_url": "https://api.github.com/users/peteroconnor-bc/orgs", "repos_url": "https://api.github.com/users/peteroconnor-bc/repos", "events_url": "https://api.github.com/users/peteroconnor-bc/events{/privacy}", "received_events_url": "https://api.github.com/users/peteroconnor-bc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-09-04T23:50:45Z", "updated_at": "2019-09-06T16:56:56Z", "closed_at": "2019-09-06T11:57:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Reading the [docs](http://www.attrs.org/en/stable/api.html#attr.ib), it seems that there's no ability to do a custom repr for a particular attribute.  E.g., It would be nice to be able to specify a function for  `repr` like:\r\n\r\n```\r\n@attr.s \r\nclass Datapoint:\r\n    image = attr.ib(type=np.ndarray, repr = lambda x: '<array of shape {} and dtype {}>'.format(x.shape, x.dtype))\r\n    label = attr.ib(type=int)\r\n```\r\nso that when you `print(Datapoint(img, lab))`, it does not display numpy's awkward default formatting.  \r\n\r\nAs far as I see you can currently only set a boolean flag `repr=False` to disable to whole attribute from being shown in the object's repr, which is not what I want.  We could still maintain this behaviour if we just say `repr: Optional[Union[bool, Callable[[Any], str]]]=True`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/566", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/566/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/566/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/566/events", "html_url": "https://github.com/python-attrs/attrs/issues/566", "id": 487859008, "node_id": "MDU6SXNzdWU0ODc4NTkwMDg=", "number": 566, "title": "\"default\" decorator doesn't work as the keyword in attrib() did", "user": {"login": "HoweChen", "id": 5387479, "node_id": "MDQ6VXNlcjUzODc0Nzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/5387479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HoweChen", "html_url": "https://github.com/HoweChen", "followers_url": "https://api.github.com/users/HoweChen/followers", "following_url": "https://api.github.com/users/HoweChen/following{/other_user}", "gists_url": "https://api.github.com/users/HoweChen/gists{/gist_id}", "starred_url": "https://api.github.com/users/HoweChen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HoweChen/subscriptions", "organizations_url": "https://api.github.com/users/HoweChen/orgs", "repos_url": "https://api.github.com/users/HoweChen/repos", "events_url": "https://api.github.com/users/HoweChen/events{/privacy}", "received_events_url": "https://api.github.com/users/HoweChen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-01T08:47:36Z", "updated_at": "2019-09-02T06:53:17Z", "closed_at": "2019-09-02T06:53:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I was using the `default` when setting up an attribute, but things got weird when I called something like:\r\n\r\n\r\na:\r\n```python\r\nfrom attr import attrs, attrib\r\nfrom random import randint\r\n\r\n\r\n@attrs()\r\nclass Test:\r\n    num = attrib(init=False)\r\n\r\n    @num.default\r\n    def num_default(self):\r\n        return randint(0, 100000)\r\n\r\n\r\nif __name__ == '__main__':\r\n    for i in range(10):\r\n        print(Test().num)\r\n\r\n```\r\n\r\nand b:\r\n\r\n```python\r\nfrom attr import attrs, attrib\r\nfrom random import randint\r\n\r\n\r\n@attrs()\r\nclass Test:\r\n    num = attrib(init=False, default=randint(0, 100000))\r\n\r\n\r\nif __name__ == '__main__':\r\n    for i in range(10):\r\n        print(Test().num)\r\n\r\n```\r\n\r\na can work like what I want but b only return all the same value. Aren't they supposed to work like the same?\r\n\r\nAnyway, I am also wondering if there is a way to use the `factory` keyword in `attrib()` with arguments?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/561", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/561/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/561/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/561/events", "html_url": "https://github.com/python-attrs/attrs/issues/561", "id": 476254114, "node_id": "MDU6SXNzdWU0NzYyNTQxMTQ=", "number": 561, "title": "Install fails on Windows", "user": {"login": "spigo900", "id": 6877173, "node_id": "MDQ6VXNlcjY4NzcxNzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/6877173?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spigo900", "html_url": "https://github.com/spigo900", "followers_url": "https://api.github.com/users/spigo900/followers", "following_url": "https://api.github.com/users/spigo900/following{/other_user}", "gists_url": "https://api.github.com/users/spigo900/gists{/gist_id}", "starred_url": "https://api.github.com/users/spigo900/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spigo900/subscriptions", "organizations_url": "https://api.github.com/users/spigo900/orgs", "repos_url": "https://api.github.com/users/spigo900/repos", "events_url": "https://api.github.com/users/spigo900/events{/privacy}", "received_events_url": "https://api.github.com/users/spigo900/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-02T16:08:28Z", "updated_at": "2019-09-02T07:34:58Z", "closed_at": "2019-09-02T07:34:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Because of the way `read()` reads its input file, the string it returns will have different contents depending on the line ending used in the file. This means that the install fails on Windows, because the `CHANGELOG` regex looks for `'\\n'`, or `LF`, but since line endings are `CRLF` on Windows, the regex won't match.\r\n\r\nSee the log:\r\n\r\n```\r\n> pip install .\r\n...\r\n  Complete output from command c:\\users\\crazy\\appdata\\local\\programs\\python\\python37\\python.exe c:\\users\\crazy\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\pip\\_vendor\\pep517\\_in_process.py get_requires_for_build_wheel C:\\Users\\crazy\\AppData\\Local\\Temp\\tmpghg6p1e3:\r\n  Traceback (most recent call last):\r\n    File \"c:\\users\\crazy\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\pip\\_vendor\\pep517\\_in_process.py\", line 207, in <module>\r\n      main()\r\n    File \"c:\\users\\crazy\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\pip\\_vendor\\pep517\\_in_process.py\", line 197, in main\r\n      json_out['return_val'] = hook(**hook_input['kwargs'])\r\n    File \"c:\\users\\crazy\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\pip\\_vendor\\pep517\\_in_process.py\", line 54, in get_requires_for_build_wheel\r\n      return hook(config_settings)\r\n    File \"C:\\Users\\crazy\\AppData\\Local\\Temp\\pip-build-env-6f560u2s\\overlay\\Lib\\site-packages\\setuptools\\build_meta.py\", line 145, in get_requires_for_build_wheel\r\n      return self._get_build_requires(config_settings, requirements=['wheel'])\r\n    File \"C:\\Users\\crazy\\AppData\\Local\\Temp\\pip-build-env-6f560u2s\\overlay\\Lib\\site-packages\\setuptools\\build_meta.py\", line 126, in _get_build_requires\r\n      self.run_setup()\r\n    File \"C:\\Users\\crazy\\AppData\\Local\\Temp\\pip-build-env-6f560u2s\\overlay\\Lib\\site-packages\\setuptools\\build_meta.py\", line 141, in run_setup\r\n      exec(compile(code, __file__, 'exec'), locals())\r\n    File \"setup.py\", line 99, in <module>\r\n      + read(\"AUTHORS.rst\")\r\n  AttributeError: 'NoneType' object has no attribute 'group'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/558", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/558/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/558/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/558/events", "html_url": "https://github.com/python-attrs/attrs/issues/558", "id": 473117693, "node_id": "MDU6SXNzdWU0NzMxMTc2OTM=", "number": 558, "title": "init unique_filename is problematic for exception aggregation", "user": {"login": "belm0", "id": 1708631, "node_id": "MDQ6VXNlcjE3MDg2MzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1708631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/belm0", "html_url": "https://github.com/belm0", "followers_url": "https://api.github.com/users/belm0/followers", "following_url": "https://api.github.com/users/belm0/following{/other_user}", "gists_url": "https://api.github.com/users/belm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/belm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/belm0/subscriptions", "organizations_url": "https://api.github.com/users/belm0/orgs", "repos_url": "https://api.github.com/users/belm0/repos", "events_url": "https://api.github.com/users/belm0/events{/privacy}", "received_events_url": "https://api.github.com/users/belm0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2019-07-25T23:58:48Z", "updated_at": "2019-08-01T10:42:14Z", "closed_at": "2019-08-01T10:42:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We had a case where a custom converter was often failing due to an app issue.  The traceback will include a line with a unique ID based on the initial attr values in the class:\r\n\r\n```\r\nFile \"<attrs generated init 81db48c8801f50d1c320ad1b8d1e0028320432b2>\", line 3, in __init__\r\n```\r\n\r\nHaving a unique ID in the traceback in turn causes problems for exception fingerprinting (e.g. by Sentry).  I'm not thrilled about doing custom traceback filtering for such cases, and would like to explore other options.\r\n\r\nI wonder what the full rationale is for ensuring the unique filename, and whether it could be made optional.\r\n\r\nIncluding a hash of the attribute values is essentially like dumping the values of all attributes of a class instance as part of the traceback whenever there is a constructor error regarding a single attribute-- which is less than precise error reporting.\r\n\r\nhttps://github.com/python-attrs/attrs/blob/dc1b5a01e98a9ba49d45ad07ba6ae0ee2d9c1b8e/src/attr/_make.py#L1268", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/550", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/550/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/550/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/550/events", "html_url": "https://github.com/python-attrs/attrs/issues/550", "id": 466460583, "node_id": "MDU6SXNzdWU0NjY0NjA1ODM=", "number": 550, "title": "Feature request: Add validation option to `auto_attribs`", "user": {"login": "qpwo", "id": 10591373, "node_id": "MDQ6VXNlcjEwNTkxMzcz", "avatar_url": "https://avatars3.githubusercontent.com/u/10591373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qpwo", "html_url": "https://github.com/qpwo", "followers_url": "https://api.github.com/users/qpwo/followers", "following_url": "https://api.github.com/users/qpwo/following{/other_user}", "gists_url": "https://api.github.com/users/qpwo/gists{/gist_id}", "starred_url": "https://api.github.com/users/qpwo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qpwo/subscriptions", "organizations_url": "https://api.github.com/users/qpwo/orgs", "repos_url": "https://api.github.com/users/qpwo/repos", "events_url": "https://api.github.com/users/qpwo/events{/privacy}", "received_events_url": "https://api.github.com/users/qpwo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915651, "node_id": "MDU6TGFiZWwxNzA5MTU2NTE=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Duplicate", "name": "Duplicate", "color": "cccccc", "default": false, "description": ""}, {"id": 428248824, "node_id": "MDU6TGFiZWw0MjgyNDg4MjQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Feature", "name": "Feature", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-10T18:43:02Z", "updated_at": "2019-07-10T23:22:57Z", "closed_at": "2019-07-10T23:22:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is just an idea. Some users of a library I work on use static analysis and other users don't, so we use both type hinting and validation on the attributes. We have several classes like this:\r\n\r\n```python\r\nfrom attr.validators import instance_of\r\n@attrs\r\nclass C:\r\n    x: str = attrib(validator=instance_of(str))\r\n    y: str = attrib(validator=instance_of(str))\r\n    z: int = attrib(validator=instance_of(int))\r\n```\r\n\r\nAnd in this [search](https://github.com/search?q=%22validator%3Dinstance_of%22&type=Code) you can see that most users of `instance_of` stick it on every attribute when they use it at all.\r\n\r\nIt would be nice if `attrs` had a kwarg like `auto_attribs_with_validation` that would convert the below class to the above class:\r\n\r\n```python\r\n@attrs(auto_attribs_with_validation=True)\r\nclass C:\r\n    x: str\r\n    y: str\r\n    z: int\r\n```\r\n\r\nThen of course if you executed `c = C(\"foo\", \"bar\", \"baz\")` you would get a `TypeError`.\r\n\r\nI'm aware that it may not be worth adding another kwarg to attrs.\r\n\r\nIf this is a good idea, then I can probably write the PR.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/549", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/549/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/549/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/549/events", "html_url": "https://github.com/python-attrs/attrs/issues/549", "id": 465415287, "node_id": "MDU6SXNzdWU0NjU0MTUyODc=", "number": 549, "title": "enhancement suggestion: regex validator helper", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428248824, "node_id": "MDU6TGFiZWw0MjgyNDg4MjQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Feature", "name": "Feature", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-07-08T19:10:32Z", "updated_at": "2020-05-12T12:24:37Z", "closed_at": "2020-05-12T12:24:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I find this little snippet to be repeatedly useful:\r\n\r\n```python\r\ndef _re_validator(pattern):\r\n    regex = re.compile(pattern)\r\n    def validate(instance, attribute, val):\r\n        if not regex.match(val):\r\n            raise ValueError(\"invalid {}: {} (must match {})\".format(\r\n                attribute.name, val, pattern))\r\n    return validate\r\n```\r\n\r\nyou use it something like this:\r\n\r\n```python\r\nname = attr.ib(validator=_re_validator('^[A-Za-z][A-Za-z0-9_]*$'))\r\n```\r\n\r\n(that defines \"this must be a valid public identifier; letter, followed by letters, numbers, and underscores\")\r\n\r\nseems like with a little bit more polish on exceptions and docstring, it might be handy for others", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/548", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/548/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/548/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/548/events", "html_url": "https://github.com/python-attrs/attrs/issues/548", "id": 463539177, "node_id": "MDU6SXNzdWU0NjM1MzkxNzc=", "number": 548, "title": "Disable __str__ by raising an exception", "user": {"login": "energizah", "id": 45742652, "node_id": "MDQ6VXNlcjQ1NzQyNjUy", "avatar_url": "https://avatars0.githubusercontent.com/u/45742652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/energizah", "html_url": "https://github.com/energizah", "followers_url": "https://api.github.com/users/energizah/followers", "following_url": "https://api.github.com/users/energizah/following{/other_user}", "gists_url": "https://api.github.com/users/energizah/gists{/gist_id}", "starred_url": "https://api.github.com/users/energizah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/energizah/subscriptions", "organizations_url": "https://api.github.com/users/energizah/orgs", "repos_url": "https://api.github.com/users/energizah/repos", "events_url": "https://api.github.com/users/energizah/events{/privacy}", "received_events_url": "https://api.github.com/users/energizah/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428248824, "node_id": "MDU6TGFiZWw0MjgyNDg4MjQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Feature", "name": "Feature", "color": "0e8a16", "default": false, "description": null}, {"id": 170915656, "node_id": "MDU6TGFiZWwxNzA5MTU2NTY=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Won't%20Fix", "name": "Won't Fix", "color": "ffffff", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-03T04:31:22Z", "updated_at": "2019-07-20T09:18:19Z", "closed_at": "2019-07-20T09:18:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "In Python, `repr` is used for helpful debugging output for the developer, and `str` is used for the end user. Because `object.__str__` defaults to behaving like `object.__repr__`, the two representations can get somewhat mixed, sometimes by accident. Often this problem manifests by accidentally writing some object's repr into a file after calling `str()` on it. I'm increasingly feeling that these are two different representations, and they should not be used interchangeably. Instead, most objects should not have `__str__` at all, and that `builtins.object.__str__` defaulting to behave like the repr is usually not what I want.  To avoid this accidental mixing, I've taken to writing my own method:\r\n\r\n```python\r\ndef __str__(self):\r\n    raise NotImplementedError(\r\nf'object of type {type(self).__name__} has no str(). '\r\n'Use `repr(obj)` instead.'\r\n)\r\n```\r\n\r\nHow would you feel about providing an option for this kind of method? \r\n\r\nI'm filing this separately from https://github.com/python-attrs/attrs/issues/212 because it's a more specific idea for a particular implementation of `__str__`, rather than a framework for user-provided implementations.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/547", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/547/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/547/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/547/events", "html_url": "https://github.com/python-attrs/attrs/issues/547", "id": 459661124, "node_id": "MDU6SXNzdWU0NTk2NjExMjQ=", "number": 547, "title": "More helpful error from __hash__", "user": {"login": "jtrakk", "id": 43392409, "node_id": "MDQ6VXNlcjQzMzkyNDA5", "avatar_url": "https://avatars1.githubusercontent.com/u/43392409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtrakk", "html_url": "https://github.com/jtrakk", "followers_url": "https://api.github.com/users/jtrakk/followers", "following_url": "https://api.github.com/users/jtrakk/following{/other_user}", "gists_url": "https://api.github.com/users/jtrakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtrakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtrakk/subscriptions", "organizations_url": "https://api.github.com/users/jtrakk/orgs", "repos_url": "https://api.github.com/users/jtrakk/repos", "events_url": "https://api.github.com/users/jtrakk/events{/privacy}", "received_events_url": "https://api.github.com/users/jtrakk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428248824, "node_id": "MDU6TGFiZWw0MjgyNDg4MjQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Feature", "name": "Feature", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-24T02:38:49Z", "updated_at": "2019-07-20T10:10:27Z", "closed_at": "2019-07-20T10:10:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sometimes I try to hash something that I've accidentally made unhashable. Currently, the error message I get doesn't help me debug and find the object at fault. Could it instead give some more helpful diagnostic information when I make these mistakes?\r\n\r\n```py\r\nimport typing as t\r\n\r\nimport attr\r\n\r\n\r\n@attr.dataclass(frozen=True)\r\nclass A:\r\n    x: t.Set\r\n\r\n\r\n@attr.dataclass(frozen=True)\r\nclass B:\r\n    x: t.List[A]\r\n\r\n\r\nb = B(A([1]))\r\nhash(b)\r\n\r\n\r\n# line 17, in <module>\r\n#     hash(b)\r\n#   File \"<attrs generated hash 7d0e09ef201452b6240ec01bd1f683c719ab45bd>\", line 4, in __hash__\r\n#   File \"<attrs generated hash 5e949f8a620bcc175eb03109de20ae34b1872982>\", line 4, in __hash__\r\n# TypeError: unhashable type: 'set'\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/546", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/546/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/546/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/546/events", "html_url": "https://github.com/python-attrs/attrs/issues/546", "id": 459388783, "node_id": "MDU6SXNzdWU0NTkzODg3ODM=", "number": 546, "title": "attr.Attribute docs don't exclude the factory parameter", "user": {"login": "altendky", "id": 543719, "node_id": "MDQ6VXNlcjU0MzcxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/543719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/altendky", "html_url": "https://github.com/altendky", "followers_url": "https://api.github.com/users/altendky/followers", "following_url": "https://api.github.com/users/altendky/following{/other_user}", "gists_url": "https://api.github.com/users/altendky/gists{/gist_id}", "starred_url": "https://api.github.com/users/altendky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/altendky/subscriptions", "organizations_url": "https://api.github.com/users/altendky/orgs", "repos_url": "https://api.github.com/users/altendky/repos", "events_url": "https://api.github.com/users/altendky/events{/privacy}", "received_events_url": "https://api.github.com/users/altendky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-21T22:05:53Z", "updated_at": "2019-06-22T09:12:28Z", "closed_at": "2019-06-22T09:12:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/python-attrs/attrs/blob/615054392a18ae5c9c82e845ddaa107f03f160b8/src/attr/_make.py#L1667\r\n\r\nexcept `factory`...\r\n\r\nhttps://github.com/python-attrs/attrs/blob/615054392a18ae5c9c82e845ddaa107f03f160b8/src/attr/_make.py#L80\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/545", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/545/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/545/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/545/events", "html_url": "https://github.com/python-attrs/attrs/issues/545", "id": 459273059, "node_id": "MDU6SXNzdWU0NTkyNzMwNTk=", "number": 545, "title": "How should I get an attribute default (including calling a factory)?", "user": {"login": "altendky", "id": 543719, "node_id": "MDQ6VXNlcjU0MzcxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/543719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/altendky", "html_url": "https://github.com/altendky", "followers_url": "https://api.github.com/users/altendky/followers", "following_url": "https://api.github.com/users/altendky/following{/other_user}", "gists_url": "https://api.github.com/users/altendky/gists{/gist_id}", "starred_url": "https://api.github.com/users/altendky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/altendky/subscriptions", "organizations_url": "https://api.github.com/users/altendky/orgs", "repos_url": "https://api.github.com/users/altendky/repos", "events_url": "https://api.github.com/users/altendky/events{/privacy}", "received_events_url": "https://api.github.com/users/altendky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-21T16:14:56Z", "updated_at": "2019-06-24T14:17:50Z", "closed_at": "2019-06-24T14:17:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was helping out in `#python` and there was a question about setting an instance attribute back to default.  I didn't find a way provided by attrs to do that .  Did I miss it?  If not, would that be of interest?  I haven't thought much about how it should be provided but here's the implementation I wrote for them.\r\n\r\nhttps://repl.it/@altendky/UnpleasantUnconsciousPi-1\r\n```python\r\ndef get_default(instance, attribute):\r\n    default = attr.fields_dict(type(instance))[attribute].default\r\n    if isinstance(default, attr.Factory):\r\n        if default.takes_self:\r\n            return default.factory(instance)\r\n\r\n        return default.factory()\r\n    \r\n    return default\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/543", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/543/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/543/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/543/events", "html_url": "https://github.com/python-attrs/attrs/issues/543", "id": 456370432, "node_id": "MDU6SXNzdWU0NTYzNzA0MzI=", "number": 543, "title": "auto_exc's hashing behavior and its documentation do not match", "user": {"login": "gabbard", "id": 7139661, "node_id": "MDQ6VXNlcjcxMzk2NjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/7139661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabbard", "html_url": "https://github.com/gabbard", "followers_url": "https://api.github.com/users/gabbard/followers", "following_url": "https://api.github.com/users/gabbard/following{/other_user}", "gists_url": "https://api.github.com/users/gabbard/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabbard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabbard/subscriptions", "organizations_url": "https://api.github.com/users/gabbard/orgs", "repos_url": "https://api.github.com/users/gabbard/repos", "events_url": "https://api.github.com/users/gabbard/events{/privacy}", "received_events_url": "https://api.github.com/users/gabbard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/python-attrs/attrs/milestones/11", "html_url": "https://github.com/python-attrs/attrs/milestone/11", "labels_url": "https://api.github.com/repos/python-attrs/attrs/milestones/11/labels", "id": 4176701, "node_id": "MDk6TWlsZXN0b25lNDE3NjcwMQ==", "number": 11, "title": "19.2", "description": "", "creator": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2019-03-27T13:05:34Z", "updated_at": "2020-03-06T09:42:28Z", "due_on": null, "closed_at": "2020-03-06T09:42:28Z"}, "comments": 3, "created_at": "2019-06-14T18:05:24Z", "updated_at": "2019-09-30T23:37:34Z", "closed_at": "2019-08-19T18:03:45Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The [documentation](https://github.com/python-attrs/attrs/blob/25a02bbc7b5309acebda20101125372d42c978db/src/attr/_make.py#L846) for `auto_exc` says:\r\n```\r\n  - the values for *cmp* and *hash* are ignored and the instances compare\r\n          and hash by the instance's ids (N.B. ``attrs`` will *not* remove\r\n          existing implementations of ``__hash__`` or the equality methods. It\r\n          just won't add own ones.),\r\n```\r\n\r\nHowever, the test for `auto_exc` [says](https://github.com/python-attrs/attrs/blob/25a02bbc7b5309acebda20101125372d42c978db/tests/test_dark_magic.py#L519):\r\n```\r\n    Classes with auto_exc=True have a Exception-style __str__, are neither\r\n        comparable nor hashable, and store the fields additionally in\r\n        self.args.\r\n```\r\n\r\nand [tests](https://github.com/python-attrs/attrs/blob/25a02bbc7b5309acebda20101125372d42c978db/tests/test_dark_magic.py#L558):\r\n\r\n```\r\n            with pytest.raises(TypeError):\r\n                hash(e)\r\n```\r\n\r\nThe documentation and the code should be made consistent.  I noticed this because `unittest` complained that the exception type was unhashable when thrown from a test and I see some [references to `logging` expecting hashable exceptions](https://github.com/schematics/schematics/issues/452), so the documented behavior is probably better than the implemented behavior.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/538", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/538/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/538/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/538/events", "html_url": "https://github.com/python-attrs/attrs/issues/538", "id": 451159647, "node_id": "MDU6SXNzdWU0NTExNTk2NDc=", "number": 538, "title": "New Python-only closure cell rewriting fails on Python 3.8-dev", "user": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}, {"id": 428248613, "node_id": "MDU6TGFiZWw0MjgyNDg2MTM=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Regression", "name": "Regression", "color": "e99695", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/python-attrs/attrs/milestones/11", "html_url": "https://github.com/python-attrs/attrs/milestone/11", "labels_url": "https://api.github.com/repos/python-attrs/attrs/milestones/11/labels", "id": 4176701, "node_id": "MDk6TWlsZXN0b25lNDE3NjcwMQ==", "number": 11, "title": "19.2", "description": "", "creator": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2019-03-27T13:05:34Z", "updated_at": "2020-03-06T09:42:28Z", "due_on": null, "closed_at": "2020-03-06T09:42:28Z"}, "comments": 1, "created_at": "2019-06-02T06:43:27Z", "updated_at": "2019-06-04T08:35:07Z", "closed_at": "2019-06-04T08:35:07Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I need someone who understands the code better than I to tell me whether this is our problem or whether we should report this upstream.\r\n\r\nThe problem seems to be the instantiation of `types.CodeType(*args)`  because it throws an:\r\n\r\n```\r\nTypeError('an integer is required (got type bytes)')\r\n```\r\n\r\nThe contents of args is the following:\r\n\r\n```\r\n[1,\r\n 0,\r\n 2,\r\n 1,\r\n 19,\r\n b'|\\x00\\x89\\x00d\\x00S\\x00',\r\n (None,\r\n  <code object force_x_to_be_a_cell at 0x7fe71817fe70, file \"/Users/hynek/Projects/attrs/.tox/py38/lib/python3.8/site-packages/attr/_compat.py\", line 151>,\r\n  'make_set_closure_cell.<locals>.set_first_cellvar_to.<locals>.force_x_to_be_a_cell'),\r\n (),\r\n ('value', 'force_x_to_be_a_cell'),\r\n '/Users/hynek/Projects/attrs/.tox/py38/lib/python3.8/site-packages/attr/_compat.py',\r\n 'set_first_cellvar_to',\r\n 144,\r\n b'\\x00\\x01\\x04\\x01\\x04\\x05',\r\n ('x',),\r\n ()]\r\n```\r\n\r\nI suspect it's either ` b'|\\x00\\x89\\x00d\\x00S\\x00',` or ` b'\\x00\\x01\\x04\\x01\\x04\\x05',` or both. However, it's bytes on 3.7 too.\r\n\r\nHalp @oremanj?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/537", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/537/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/537/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/537/events", "html_url": "https://github.com/python-attrs/attrs/issues/537", "id": 451010486, "node_id": "MDU6SXNzdWU0NTEwMTA0ODY=", "number": 537, "title": "What is the best way for me to check if an object is attrs decorated class?", "user": {"login": "ethanjyx", "id": 3280308, "node_id": "MDQ6VXNlcjMyODAzMDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/3280308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ethanjyx", "html_url": "https://github.com/ethanjyx", "followers_url": "https://api.github.com/users/ethanjyx/followers", "following_url": "https://api.github.com/users/ethanjyx/following{/other_user}", "gists_url": "https://api.github.com/users/ethanjyx/gists{/gist_id}", "starred_url": "https://api.github.com/users/ethanjyx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ethanjyx/subscriptions", "organizations_url": "https://api.github.com/users/ethanjyx/orgs", "repos_url": "https://api.github.com/users/ethanjyx/repos", "events_url": "https://api.github.com/users/ethanjyx/events{/privacy}", "received_events_url": "https://api.github.com/users/ethanjyx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-31T23:05:42Z", "updated_at": "2019-06-05T06:06:08Z", "closed_at": "2019-06-05T06:06:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Say I have\r\n```\r\nimport attr\r\n@attr.s(kw_only=True, frozen=True)\r\nclass A:\r\n    a: int = attr.ib()\r\n\r\nobj = A(a=1)\r\n```\r\n\r\n\r\nThen how do I do something like `isinstance(obj, attrs)` to check if this class is attrs decorated? \r\n\r\nit seems by playing with it we have \r\n```\r\n>> dir(obj)\r\n\r\n['__annotations__',\r\n '__attrs_attrs__',\r\n '__class__',\r\n '__delattr__',\r\n '__dict__',\r\n '__dir__',\r\n '__doc__',\r\n '__eq__',\r\n '__format__',\r\n '__ge__',\r\n '__getattribute__',\r\n '__gt__',\r\n '__hash__',\r\n '__init__',\r\n '__init_subclass__',\r\n '__le__',\r\n '__lt__',\r\n '__module__',\r\n '__ne__',\r\n '__new__',\r\n '__reduce__',\r\n '__reduce_ex__',\r\n '__repr__',\r\n '__setattr__',\r\n '__sizeof__',\r\n '__str__',\r\n '__subclasshook__',\r\n '__weakref__',\r\n 'a']\r\n```\r\n\r\nis it always correct to use `'__attrs_attrs__' in dir(obj)` to check whether obj belongs to a attrs decorated class?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/532", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/532/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/532/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/532/events", "html_url": "https://github.com/python-attrs/attrs/issues/532", "id": 445255465, "node_id": "MDU6SXNzdWU0NDUyNTU0NjU=", "number": 532, "title": "Using default value and converter in attr.s raises error", "user": {"login": "tamuhey", "id": 24998666, "node_id": "MDQ6VXNlcjI0OTk4NjY2", "avatar_url": "https://avatars2.githubusercontent.com/u/24998666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamuhey", "html_url": "https://github.com/tamuhey", "followers_url": "https://api.github.com/users/tamuhey/followers", "following_url": "https://api.github.com/users/tamuhey/following{/other_user}", "gists_url": "https://api.github.com/users/tamuhey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamuhey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamuhey/subscriptions", "organizations_url": "https://api.github.com/users/tamuhey/orgs", "repos_url": "https://api.github.com/users/tamuhey/repos", "events_url": "https://api.github.com/users/tamuhey/events{/privacy}", "received_events_url": "https://api.github.com/users/tamuhey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-17T04:05:44Z", "updated_at": "2019-05-17T08:15:06Z", "closed_at": "2019-05-17T08:15:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for this great tool!\r\n\r\nThis raises an error:\r\n```python\r\n@attr.s(frozen=True)\r\nclass Foo:\r\n    x : int = attr.ib(1)\r\n    y : int = attr.ib(converter=int)\r\n```\r\n```\r\nValueError: No mandatory attributes allowed after an attribute with a default value or factory.  Attribute in question: Attribute(name='y', default=NOTHING, validator=<class 'int'>, repr=True, cmp=True, hash=None, init=True, metadata=mappingproxy({}), type=<class 'int'>, converter=None, kw_only=False)\r\n```\r\n\r\nHowever, this doesn't:\r\n```python\r\n@attr.s(frozen=True)\r\nclass Bar:\r\n    y : int = attr.ib(converter=int)\r\n    x : int = attr.ib(1) # swap the places of x and y\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/531", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/531/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/531/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/531/events", "html_url": "https://github.com/python-attrs/attrs/issues/531", "id": 444503533, "node_id": "MDU6SXNzdWU0NDQ1MDM1MzM=", "number": 531, "title": "Typing issue with deep_iterable validator", "user": {"login": "mcyprian", "id": 12859854, "node_id": "MDQ6VXNlcjEyODU5ODU0", "avatar_url": "https://avatars2.githubusercontent.com/u/12859854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcyprian", "html_url": "https://github.com/mcyprian", "followers_url": "https://api.github.com/users/mcyprian/followers", "following_url": "https://api.github.com/users/mcyprian/following{/other_user}", "gists_url": "https://api.github.com/users/mcyprian/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcyprian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcyprian/subscriptions", "organizations_url": "https://api.github.com/users/mcyprian/orgs", "repos_url": "https://api.github.com/users/mcyprian/repos", "events_url": "https://api.github.com/users/mcyprian/events{/privacy}", "received_events_url": "https://api.github.com/users/mcyprian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-15T15:27:07Z", "updated_at": "2019-05-27T14:28:28Z", "closed_at": "2019-05-27T14:28:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run mypy check on the following code:\r\n\r\n```python\r\n\r\nimport attr\r\nfrom attr.validators import deep_iterable, instance_of\r\nfrom typing import List\r\n\r\n\r\n@attr.s\r\nclass Example(object):\r\n    x = attr.ib(\r\n        type=List[int],\r\n        validator=deep_iterable(instance_of(int), instance_of(list))\r\n    )\r\n```\r\nit results in:\r\n\r\n```\r\nscript.py:11: error: Cannot infer type argument 1 of \"deep_iterable\"\r\nscript.py:11: error: Argument 1 to \"instance_of\" has incompatible type \"Type[int]\"; expected \"Union[Tuple[Type[List[int]], ...], Type[List[int]]]\"\r\nscript.py:11: error: Argument 1 to \"instance_of\" has incompatible type \"Type[List[Any]]\"; expected \"Union[Tuple[Type[List[int]], ...], Type[List[int]]]\"\r\n```\r\nmypy == 0.670, attrs == 19.1.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/527", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/527/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/527/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/527/events", "html_url": "https://github.com/python-attrs/attrs/issues/527", "id": 440012386, "node_id": "MDU6SXNzdWU0NDAwMTIzODY=", "number": 527, "title": "Switching an attrs class's frozen status at runtime", "user": {"login": "rec", "id": 253362, "node_id": "MDQ6VXNlcjI1MzM2Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/253362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rec", "html_url": "https://github.com/rec", "followers_url": "https://api.github.com/users/rec/followers", "following_url": "https://api.github.com/users/rec/following{/other_user}", "gists_url": "https://api.github.com/users/rec/gists{/gist_id}", "starred_url": "https://api.github.com/users/rec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rec/subscriptions", "organizations_url": "https://api.github.com/users/rec/orgs", "repos_url": "https://api.github.com/users/rec/repos", "events_url": "https://api.github.com/users/rec/events{/privacy}", "received_events_url": "https://api.github.com/users/rec/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428248824, "node_id": "MDU6TGFiZWw0MjgyNDg4MjQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Feature", "name": "Feature", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-05-03T11:54:46Z", "updated_at": "2019-12-02T00:10:57Z", "closed_at": "2019-06-08T19:49:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "`attrs` has been working flawlessly for me - this is a feature request or use case.\r\n\r\nI have a collection of large files with small .yml metadata files attached to them - the metadata is read into an `attr.dataclass` and then later stored if it's modified.\r\n\r\nSo far, so good, but it is possible to open these files for read-only processing.  Unfortunately, the metadata is still read-write, and the best I can do is throwing an exception at the end if it was changed.\r\n\r\nHaving two identical versions of the same class, one frozen and one not, isn't attractive, and worse, there are some subclasses which would also have to be frozen\r\n\r\nWhat I'd want would be a magic `attrs.freeze()`/`attrs.unfreeze()` that _recursively_ went through an `attrs` style hierarchy and either froze/unfroze it in place, or returned a copy that was frozen/unfrozen.  (Yes, one might want to change lists to tuples, and dicts to some as-yet-non-existent perfect frozendict.)\r\n\r\nYes, it seems challenging - a huge can of worms.  I've read your articles about frozen, so I know that this is a subject dear to your heart.  I'm not even sure there is a good solution, but I thought you might be interested.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/526", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/526/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/526/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/526/events", "html_url": "https://github.com/python-attrs/attrs/issues/526", "id": 435061017, "node_id": "MDU6SXNzdWU0MzUwNjEwMTc=", "number": 526, "title": "\u201c__attrs_post_init__\u201d is bypassed", "user": {"login": "wencan", "id": 1072917, "node_id": "MDQ6VXNlcjEwNzI5MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1072917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wencan", "html_url": "https://github.com/wencan", "followers_url": "https://api.github.com/users/wencan/followers", "following_url": "https://api.github.com/users/wencan/following{/other_user}", "gists_url": "https://api.github.com/users/wencan/gists{/gist_id}", "starred_url": "https://api.github.com/users/wencan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wencan/subscriptions", "organizations_url": "https://api.github.com/users/wencan/orgs", "repos_url": "https://api.github.com/users/wencan/repos", "events_url": "https://api.github.com/users/wencan/events{/privacy}", "received_events_url": "https://api.github.com/users/wencan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}, {"id": 170915654, "node_id": "MDU6TGFiZWwxNzA5MTU2NTQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Invalid", "name": "Invalid", "color": "e6e6e6", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-19T06:07:24Z", "updated_at": "2019-05-08T23:06:12Z", "closed_at": "2019-05-08T17:56:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nimport attr\r\n\r\n@attr.s(auto_attribs=True)\r\nclass Frozen(object):\r\n    x: int\r\n    y:int = attr.ib(init=False)\r\n\r\n    def __attrs_post_init__(self):\r\n        print(\"__attrs_post_init__\")\r\n        object.__setattr__(self, \"y\", self.x + 1)\r\n\r\nf = Frozen.__new__(Frozen)\r\nf.x = 100\r\nf.y = 200\r\nprint(f)\r\n```\r\n\r\noutoput:\r\n```\r\nFrozen(x=100, y=200)\r\n```\r\n\r\n\"__attrs_post_init__\" not executed", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/523", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/523/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/523/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/523/events", "html_url": "https://github.com/python-attrs/attrs/issues/523", "id": 427289250, "node_id": "MDU6SXNzdWU0MjcyODkyNTA=", "number": 523, "title": "Attrs deletes any non-None class attributes", "user": {"login": "MarSoft", "id": 171243, "node_id": "MDQ6VXNlcjE3MTI0Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/171243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarSoft", "html_url": "https://github.com/MarSoft", "followers_url": "https://api.github.com/users/MarSoft/followers", "following_url": "https://api.github.com/users/MarSoft/following{/other_user}", "gists_url": "https://api.github.com/users/MarSoft/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarSoft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarSoft/subscriptions", "organizations_url": "https://api.github.com/users/MarSoft/orgs", "repos_url": "https://api.github.com/users/MarSoft/repos", "events_url": "https://api.github.com/users/MarSoft/events{/privacy}", "received_events_url": "https://api.github.com/users/MarSoft/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-30T14:40:41Z", "updated_at": "2019-07-23T11:19:11Z", "closed_at": "2019-07-23T11:19:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, `attrs` will delete any non-`None` class attributes when `_ClassBuilder._delete_attribs` is `True` (i.e. when attributes are specified via class attributes, not directly via `these` field).\r\nAccording to comment on [_make.py:502](https://github.com/python-attrs/attrs/blob/master/src/attr/_make.py#L502), this is intended to remove `attr.ib` instances from the class.\r\nBut it does not play well with attributes declared using PEP 484 type annotations and `auto_attribs=True` argument to `attr.s`, because any attribute with non-`None` default value specified will be pruned from the class, while attributes with `None` value are retained.\r\nThis leads to unexpected behaviour in many cases, in particular when generating documentation using `Sphinx` `autosummary` extension which relies on class introspection.\r\nI think we should remove only `attr.ib` instances, not any not-None fields. At least in `auto_attribs` mode. Or at least fix the comment.\r\n\r\nAttrs version checked: 19.1.0\r\nCode to reproduce:\r\n```\r\nimport attr\r\nimport typing\r\n\r\n@attr.s(auto_attribs=True)\r\nclass Foo:\r\n    bar: int = 42\r\n    baz: typing.Any = None\r\n\r\nprint([f for f in dir(Foo) if not f.startswith('_')])  # ['baz']\r\nprint(Foo.baz)  # 42\r\nprint(Foo.bar)  # AttributeError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/520", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/520/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/520/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/520/events", "html_url": "https://github.com/python-attrs/attrs/issues/520", "id": 421704118, "node_id": "MDU6SXNzdWU0MjE3MDQxMTg=", "number": 520, "title": "Slotted attrs classes can't pass keyword arguments to __init_subclass__", "user": {"login": "oremanj", "id": 4316136, "node_id": "MDQ6VXNlcjQzMTYxMzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4316136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oremanj", "html_url": "https://github.com/oremanj", "followers_url": "https://api.github.com/users/oremanj/followers", "following_url": "https://api.github.com/users/oremanj/following{/other_user}", "gists_url": "https://api.github.com/users/oremanj/gists{/gist_id}", "starred_url": "https://api.github.com/users/oremanj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oremanj/subscriptions", "organizations_url": "https://api.github.com/users/oremanj/orgs", "repos_url": "https://api.github.com/users/oremanj/repos", "events_url": "https://api.github.com/users/oremanj/events{/privacy}", "received_events_url": "https://api.github.com/users/oremanj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-15T21:05:20Z", "updated_at": "2019-03-15T21:20:22Z", "closed_at": "2019-03-15T21:20:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With attrs 19.1.0:\r\n```\r\nIn [8]: @attr.s(slots=True) \r\n   ...: class Base: \r\n   ...:     def __init_subclass__(cls, *, value, **kwargs): \r\n   ...:         cls.value = value \r\n   ...:         print(\"init_subclass {!r}\".format(cls)) \r\n   ...:         super().__init_subclass__(**kwargs) \r\n   ...:                                                                                                                                                                         \r\n\r\nIn [9]: @attr.s(slots=True) \r\n   ...: class Derived(Base, value=\"hi\"): \r\n   ...:     foo = attr.ib() \r\n   ...:                                                                                                                                                                         \r\ninit_subclass <class '__main__.Derived'>\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-9-e7b7be099da9> in <module>\r\n      1 @attr.s(slots=True)\r\n----> 2 class Derived(Base, value=\"hi\"):\r\n      3     foo = attr.ib()\r\n      4 \r\n\r\n[...]venv/lib/python3.6/site-packages/attr/_make.py in wrap(cls)\r\n    950                 )\r\n    951 \r\n--> 952         return builder.build_class()\r\n    953 \r\n    954     # maybe_cls's type depends on the usage of the decorator.  It's a class\r\n\r\n[...]venv/lib/python3.6/site-packages/attr/_make.py in build_class(self)\r\n    503         \"\"\"\r\n    504         if self._slots is True:\r\n--> 505             return self._create_slots_class()\r\n    506         else:\r\n    507             return self._patch_original_class()\r\n\r\n[...]venv/lib/python3.6/site-packages/attr/_make.py in _create_slots_class(self)\r\n    627 \r\n    628         # Create new class based on old class and our methods.\r\n--> 629         cls = type(self._cls)(self._cls.__name__, self._cls.__bases__, cd)\r\n    630 \r\n    631         # The following is a fix for\r\n\r\nTypeError: __init_subclass__() missing 1 required keyword-only argument: 'value'\r\n\r\n# works fine without slots=True:\r\nIn [11]: @attr.s \r\n    ...: class Derived(Base, value=\"hi\"): \r\n    ...:     foo = attr.ib() \r\n    ...:                                                                                                                                                                        \r\ninit_subclass <class '__main__.Derived'>\r\n\r\nIn [12]: Derived.value                                                                                                                                                          \r\nOut[12]: 'hi'\r\n```\r\n\r\nThis becomes more pernicious if there's a default for the keyword argument, in that making your attrs class slotted might silently change behavior rather than failing in an obvious way.\r\n\r\nI don't have an immediate proposal for how to resolve this -- initial thought is that it's probably only possible if the class that defines the `__init_subclass__` method is also an attrs class (attrs could wrap that method with one that's able to cache the arguments for reuse when reconstructing a slotted descendant). It might be too much magic to be worthwhile. But I couldn't find any documentation of the conflict between slotted attrs classes and `__init_subclass__`, so figured it was at least worth an issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/516", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/516/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/516/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/516/events", "html_url": "https://github.com/python-attrs/attrs/issues/516", "id": 419701098, "node_id": "MDU6SXNzdWU0MTk3MDEwOTg=", "number": 516, "title": "Feature Request: An elegant way to handle complex members", "user": {"login": "officialcryptomaster", "id": 45082511, "node_id": "MDQ6VXNlcjQ1MDgyNTEx", "avatar_url": "https://avatars2.githubusercontent.com/u/45082511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/officialcryptomaster", "html_url": "https://github.com/officialcryptomaster", "followers_url": "https://api.github.com/users/officialcryptomaster/followers", "following_url": "https://api.github.com/users/officialcryptomaster/following{/other_user}", "gists_url": "https://api.github.com/users/officialcryptomaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/officialcryptomaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/officialcryptomaster/subscriptions", "organizations_url": "https://api.github.com/users/officialcryptomaster/orgs", "repos_url": "https://api.github.com/users/officialcryptomaster/repos", "events_url": "https://api.github.com/users/officialcryptomaster/events{/privacy}", "received_events_url": "https://api.github.com/users/officialcryptomaster/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428248824, "node_id": "MDU6TGFiZWw0MjgyNDg4MjQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Feature", "name": "Feature", "color": "0e8a16", "default": false, "description": null}, {"id": 170915656, "node_id": "MDU6TGFiZWwxNzA5MTU2NTY=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Won't%20Fix", "name": "Won't Fix", "color": "ffffff", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-03-11T21:52:28Z", "updated_at": "2019-03-13T19:17:46Z", "closed_at": "2019-03-13T15:58:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Right now, it is not possible to do a converter which will automatically convert a dict to a complex type so we have to define a separate converter function to handle the use case:\r\n\r\n```\r\nfrom typing import Optional\r\nimport attr\r\n\r\n@attr.s\r\nclass Inner:\r\n    a: str = attr.ib()\r\n\r\ndef optional_dict_to_inner(d) -> Optional[Inner]:\r\n    if d is None:\r\n        return None\r\n    return Inner(**d)\r\n\r\n@attr.s\r\nclass Outer:\r\n    e: Optional[Inner] = attr.ib(converter=optional_dict_to_inner)\r\n    i: Optional[int] = attr.ib(converter=attr.converters.optional(int))\r\n\r\nprint(Inner(\"A\"))\r\nprint(Outer(e=None, i=1))\r\nprint(Outer(e={\"a\": \"A\"}, i=1))\r\n```\r\n\r\nWhat makes this worse is mypy is not able to handle a decorator to get around this without giving an error. Specifically, I tried to replace the `optional_dict_to_enclosed` to:\r\n\r\n```\r\ndef optional_dict_to_obj(obj):\r\n    def _optional_dict_to_obj(d) -> Optional[type(obj)]:\r\n        if d is None:\r\n            return None\r\n        return obj(**d)\r\n    return _optional_dict_to_obj\r\n\r\n@attr.s\r\nclass Outer:\r\n    e: Optional[Inner] = attr.ib(converter=optional_dict_to_obj(Inner))\r\n    i: Optional[int] = attr.ib(converter=attr.converters.optional(int))\r\n\r\n```\r\n\r\nBut that will cause mypy to complain as it requires type annotation on converters...\r\n```\r\ntest_mypy.py:23: error: Unsupported converter, only named functions and types are currently supported\r\n```\r\n\r\nIt would be nice to have an elegant way to tell the `attr.ib` that you are getting a dict you need to convert an object of a specific type without having to work around it like this... It would be something like `attr.objfromdict` and its optional equivalent `attr.optional_objfromdict` (I suppose the optional version is not required as we can just compose the `attr.converters.optional`):\r\n```\r\n@attr.s\r\nclass Outer:\r\n    e: Optional[Inner] = attr.ib(converter=attr.converters.optional_objfromdict(Inner))\r\n    i: Optional[int] = attr.ib(converter=attr.converters.optional(int))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/514", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/514/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/514/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/514/events", "html_url": "https://github.com/python-attrs/attrs/issues/514", "id": 416862328, "node_id": "MDU6SXNzdWU0MTY4NjIzMjg=", "number": 514, "title": "`RecursionError` in generated `__hash__`", "user": {"login": "mentalisttraceur", "id": 6531708, "node_id": "MDQ6VXNlcjY1MzE3MDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6531708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mentalisttraceur", "html_url": "https://github.com/mentalisttraceur", "followers_url": "https://api.github.com/users/mentalisttraceur/followers", "following_url": "https://api.github.com/users/mentalisttraceur/following{/other_user}", "gists_url": "https://api.github.com/users/mentalisttraceur/gists{/gist_id}", "starred_url": "https://api.github.com/users/mentalisttraceur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mentalisttraceur/subscriptions", "organizations_url": "https://api.github.com/users/mentalisttraceur/orgs", "repos_url": "https://api.github.com/users/mentalisttraceur/repos", "events_url": "https://api.github.com/users/mentalisttraceur/events{/privacy}", "received_events_url": "https://api.github.com/users/mentalisttraceur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-04T15:42:45Z", "updated_at": "2019-03-09T09:17:10Z", "closed_at": "2019-03-09T09:17:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hashing a class with an attribute whose value is a bound method from itself causes `RecursionError`:\r\n\r\n```Python\r\n@attr.s(frozen=True)\r\nclass C():\r\n    a = attr.ib()\r\n\r\n    @a.default\r\n    def _(self):\r\n        return self._a\r\n\r\n    def _a(self, x):\r\n        return x\r\n```\r\n\r\nNow calling `hash(C())` will raise a `RecursionError`, I infer because the hash logic for bound methods tries to hash the instance it is bound to as well, so it tries to hash the instance again, so it tries to hash the bound method again, ....\r\n\r\nI think it might be possible to handle this similarly to how `__repr__` handles it?\r\n\r\n```Python\r\n>>> C()\r\nC(a=<bound method C._a of ...>)\r\n```\r\n\r\nSince logic is already in place to detect that the bound method is pointing back at the instance being `repr`ed and using `...` instead, it would just be a matter of finding a reasonable hash value to substitute when hashing detects recursion too, right?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/512", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/512/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/512/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/512/events", "html_url": "https://github.com/python-attrs/attrs/issues/512", "id": 416508835, "node_id": "MDU6SXNzdWU0MTY1MDg4MzU=", "number": 512, "title": "Support custom __getstate__, __setstate__ for slotted classes (or improve docs)?", "user": {"login": "andhus", "id": 5502349, "node_id": "MDQ6VXNlcjU1MDIzNDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5502349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andhus", "html_url": "https://github.com/andhus", "followers_url": "https://api.github.com/users/andhus/followers", "following_url": "https://api.github.com/users/andhus/following{/other_user}", "gists_url": "https://api.github.com/users/andhus/gists{/gist_id}", "starred_url": "https://api.github.com/users/andhus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andhus/subscriptions", "organizations_url": "https://api.github.com/users/andhus/orgs", "repos_url": "https://api.github.com/users/andhus/repos", "events_url": "https://api.github.com/users/andhus/events{/privacy}", "received_events_url": "https://api.github.com/users/andhus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428249065, "node_id": "MDU6TGFiZWw0MjgyNDkwNjU=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Documentation", "name": "Documentation", "color": "d4c5f9", "default": false, "description": null}, {"id": 428248824, "node_id": "MDU6TGFiZWw0MjgyNDg4MjQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Feature", "name": "Feature", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-03T12:10:23Z", "updated_at": "2020-05-11T05:11:25Z", "closed_at": "2020-05-11T05:11:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The assertion fails in the following example, but is ok with `slots=False`:\r\n```\r\nimport attr, pickle\r\n\r\n@attr.s(slots=True)\r\nclass MyClass(object):\r\n    a = attr.ib()\r\n    not_picklable = attr.ib()\r\n\r\n    def __getstate__(self):\r\n        return self.a, \"replacement\"\r\n\r\n    def __setstate__(self, state):\r\n        self.a, self.not_picklable = state\r\n\r\nmc = MyClass(\"a\", \"b\")\r\nmc_new = pickle.loads(pickle.dumps(mc))\r\nassert mc_new.not_picklable == \"replacement\"\r\n```\r\nThis is clearly because `attrs` auto creates these methods on the new slots-class: https://github.com/python-attrs/attrs/blob/master/src/attr/_make.py#L601\r\n\r\nIs there another prefered way to solve this, or would it be possible to support these methods also for slots-classes? If not, it would be good to clarify this in the documentation for [slotted-classes](http://www.attrs.org/en/stable/glossary.html#term-slotted-classes), it says:\r\n\r\n> You can support protocol 0 and 1 by implementing `__getstate__` and `__setstate__` methods yourself. Those methods are created for frozen slotted classes because they won\u2019t pickle otherwise. Think twice before using pickle though.\r\n\r\nThis is confusing to me, since implementing these methods have no effect for slotted classes?\r\n\r\nSomewhat related:\r\nhttps://github.com/python-attrs/attrs/issues/139\r\nhttps://github.com/python-attrs/attrs/issues/475", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/509", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/509/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/509/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/509/events", "html_url": "https://github.com/python-attrs/attrs/issues/509", "id": 414157492, "node_id": "MDU6SXNzdWU0MTQxNTc0OTI=", "number": 509, "title": "test_annotations fails on PyPy3", "user": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-02-25T15:21:17Z", "updated_at": "2019-06-22T08:00:08Z", "closed_at": "2019-06-22T08:00:08Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "It looks like the fixtures don't reach the class bodies? So this could be either on pytest or pypy I guess.\r\n\r\n```\r\n========================================================================== FAILURES ==========================================================================\r\n_______________________________________________ TestAnnotations.test_annotations_strings[typing.ClassVar-True] _______________________________________________\r\n\r\nself = <tests.test_annotations.TestAnnotations object at 0x0000000112e29d38>, slots = True, classvar = 'typing.ClassVar'\r\n\r\n    @pytest.mark.parametrize(\"slots\", [True, False])\r\n    @pytest.mark.parametrize(\"classvar\", _classvar_prefixes)\r\n    def test_annotations_strings(self, slots, classvar):\r\n        \"\"\"\r\n        String annotations are passed into __init__ as is.\r\n        \"\"\"\r\n\r\n>       @attr.s(auto_attribs=True, slots=slots)\r\n        class C:\r\n\r\ntests/test_annotations.py:215:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n    @attr.s(auto_attribs=True, slots=slots)\r\n    class C:\r\n>       cls_var: classvar + \"[int]\" = 23\r\nE       NameError: name 'classvar' is not defined\r\n\r\ntests/test_annotations.py:217: NameError\r\n______________________________________________ TestAnnotations.test_annotations_strings[typing.ClassVar-False] _______________________________________________\r\n\r\nself = <tests.test_annotations.TestAnnotations object at 0x0000000113662f00>, slots = False, classvar = 'typing.ClassVar'\r\n\r\n    @pytest.mark.parametrize(\"slots\", [True, False])\r\n    @pytest.mark.parametrize(\"classvar\", _classvar_prefixes)\r\n    def test_annotations_strings(self, slots, classvar):\r\n        \"\"\"\r\n        String annotations are passed into __init__ as is.\r\n        \"\"\"\r\n\r\n>       @attr.s(auto_attribs=True, slots=slots)\r\n        class C:\r\n\r\ntests/test_annotations.py:215:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n    @attr.s(auto_attribs=True, slots=slots)\r\n    class C:\r\n>       cls_var: classvar + \"[int]\" = 23\r\nE       NameError: name 'classvar' is not defined\r\n\r\ntests/test_annotations.py:217: NameError\r\n_________________________________________________ TestAnnotations.test_annotations_strings[t.ClassVar-True] __________________________________________________\r\n\r\nself = <tests.test_annotations.TestAnnotations object at 0x000000011344b280>, slots = True, classvar = 't.ClassVar'\r\n\r\n    @pytest.mark.parametrize(\"slots\", [True, False])\r\n    @pytest.mark.parametrize(\"classvar\", _classvar_prefixes)\r\n    def test_annotations_strings(self, slots, classvar):\r\n        \"\"\"\r\n        String annotations are passed into __init__ as is.\r\n        \"\"\"\r\n\r\n>       @attr.s(auto_attribs=True, slots=slots)\r\n        class C:\r\n\r\ntests/test_annotations.py:215:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n    @attr.s(auto_attribs=True, slots=slots)\r\n    class C:\r\n>       cls_var: classvar + \"[int]\" = 23\r\nE       NameError: name 'classvar' is not defined\r\n\r\ntests/test_annotations.py:217: NameError\r\n_________________________________________________ TestAnnotations.test_annotations_strings[t.ClassVar-False] _________________________________________________\r\n\r\nself = <tests.test_annotations.TestAnnotations object at 0x0000000114ae31a0>, slots = False, classvar = 't.ClassVar'\r\n\r\n    @pytest.mark.parametrize(\"slots\", [True, False])\r\n    @pytest.mark.parametrize(\"classvar\", _classvar_prefixes)\r\n    def test_annotations_strings(self, slots, classvar):\r\n        \"\"\"\r\n        String annotations are passed into __init__ as is.\r\n        \"\"\"\r\n\r\n>       @attr.s(auto_attribs=True, slots=slots)\r\n        class C:\r\n\r\ntests/test_annotations.py:215:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n    @attr.s(auto_attribs=True, slots=slots)\r\n    class C:\r\n>       cls_var: classvar + \"[int]\" = 23\r\nE       NameError: name 'classvar' is not defined\r\n\r\ntests/test_annotations.py:217: NameError\r\n__________________________________________________ TestAnnotations.test_annotations_strings[ClassVar-True] ___________________________________________________\r\n\r\nself = <tests.test_annotations.TestAnnotations object at 0x0000000114e378a0>, slots = True, classvar = 'ClassVar'\r\n\r\n    @pytest.mark.parametrize(\"slots\", [True, False])\r\n    @pytest.mark.parametrize(\"classvar\", _classvar_prefixes)\r\n    def test_annotations_strings(self, slots, classvar):\r\n        \"\"\"\r\n        String annotations are passed into __init__ as is.\r\n        \"\"\"\r\n\r\n>       @attr.s(auto_attribs=True, slots=slots)\r\n        class C:\r\n\r\ntests/test_annotations.py:215:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n    @attr.s(auto_attribs=True, slots=slots)\r\n    class C:\r\n>       cls_var: classvar + \"[int]\" = 23\r\nE       NameError: name 'classvar' is not defined\r\n\r\ntests/test_annotations.py:217: NameError\r\n__________________________________________________ TestAnnotations.test_annotations_strings[ClassVar-False] __________________________________________________\r\n\r\nself = <tests.test_annotations.TestAnnotations object at 0x0000000114e48e58>, slots = False, classvar = 'ClassVar'\r\n\r\n    @pytest.mark.parametrize(\"slots\", [True, False])\r\n    @pytest.mark.parametrize(\"classvar\", _classvar_prefixes)\r\n    def test_annotations_strings(self, slots, classvar):\r\n        \"\"\"\r\n        String annotations are passed into __init__ as is.\r\n        \"\"\"\r\n\r\n>       @attr.s(auto_attribs=True, slots=slots)\r\n        class C:\r\n\r\ntests/test_annotations.py:215:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n    @attr.s(auto_attribs=True, slots=slots)\r\n    class C:\r\n>       cls_var: classvar + \"[int]\" = 23\r\nE       NameError: name 'classvar' is not defined\r\n\r\ntests/test_annotations.py:217: NameError\r\n================================================================== short test summary info ===================================================================\r\nSKIPPED [1] tests/test_make.py:411: No old-style classes in Py3\r\nSKIPPED [1] tests/test_make.py:838: PY2-specific keyword-only error behavior\r\nSKIPPED [1] tests/test_make.py:855: PY2-specific keyword-only error behavior\r\nSKIPPED [1] tests/test_slots.py:414: ctypes are used only on CPython\r\nSKIPPED [1] tests/test_slots.py:437: __slots__ only block weakref on CPython\r\nFAILED tests/test_annotations.py::TestAnnotations::test_annotations_strings[typing.ClassVar-True]\r\nFAILED tests/test_annotations.py::TestAnnotations::test_annotations_strings[typing.ClassVar-False]\r\nFAILED tests/test_annotations.py::TestAnnotations::test_annotations_strings[t.ClassVar-True]\r\nFAILED tests/test_annotations.py::TestAnnotations::test_annotations_strings[t.ClassVar-False]\r\nFAILED tests/test_annotations.py::TestAnnotations::test_annotations_strings[ClassVar-True]\r\nFAILED tests/test_annotations.py::TestAnnotations::test_annotations_strings[ClassVar-False]\r\n====================================================== 6 failed, 674 passed, 5 skipped in 14.40 seconds ======================================================\r\nERROR: InvocationError for command '/Users/hynek/Projects/attrs/.tox/pypy3/bin/python -m pytest' (exited with code 1)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/508", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/508/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/508/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/508/events", "html_url": "https://github.com/python-attrs/attrs/issues/508", "id": 412583231, "node_id": "MDU6SXNzdWU0MTI1ODMyMzE=", "number": 508, "title": "pretty-printing support", "user": {"login": "glyph", "id": 716529, "node_id": "MDQ6VXNlcjcxNjUyOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/716529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glyph", "html_url": "https://github.com/glyph", "followers_url": "https://api.github.com/users/glyph/followers", "following_url": "https://api.github.com/users/glyph/following{/other_user}", "gists_url": "https://api.github.com/users/glyph/gists{/gist_id}", "starred_url": "https://api.github.com/users/glyph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glyph/subscriptions", "organizations_url": "https://api.github.com/users/glyph/orgs", "repos_url": "https://api.github.com/users/glyph/repos", "events_url": "https://api.github.com/users/glyph/events{/privacy}", "received_events_url": "https://api.github.com/users/glyph/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428248824, "node_id": "MDU6TGFiZWw0MjgyNDg4MjQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Feature", "name": "Feature", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-02-20T19:10:51Z", "updated_at": "2019-02-22T21:40:30Z", "closed_at": "2019-02-22T21:40:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Attrs `repr`s are super useful for debugging.  But super ugly once they get big!  It would be very handy to support pretty-printing that is aware of column-width and indentation.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/503", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/503/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/503/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/503/events", "html_url": "https://github.com/python-attrs/attrs/issues/503", "id": 410016708, "node_id": "MDU6SXNzdWU0MTAwMTY3MDg=", "number": 503, "title": "Requirement for safety of cache_hash is stronger than documented", "user": {"login": "gabbard", "id": 7139661, "node_id": "MDQ6VXNlcjcxMzk2NjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/7139661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabbard", "html_url": "https://github.com/gabbard", "followers_url": "https://api.github.com/users/gabbard/followers", "following_url": "https://api.github.com/users/gabbard/following{/other_user}", "gists_url": "https://api.github.com/users/gabbard/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabbard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabbard/subscriptions", "organizations_url": "https://api.github.com/users/gabbard/orgs", "repos_url": "https://api.github.com/users/gabbard/repos", "events_url": "https://api.github.com/users/gabbard/events{/privacy}", "received_events_url": "https://api.github.com/users/gabbard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "gabbard", "id": 7139661, "node_id": "MDQ6VXNlcjcxMzk2NjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/7139661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabbard", "html_url": "https://github.com/gabbard", "followers_url": "https://api.github.com/users/gabbard/followers", "following_url": "https://api.github.com/users/gabbard/following{/other_user}", "gists_url": "https://api.github.com/users/gabbard/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabbard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabbard/subscriptions", "organizations_url": "https://api.github.com/users/gabbard/orgs", "repos_url": "https://api.github.com/users/gabbard/repos", "events_url": "https://api.github.com/users/gabbard/events{/privacy}", "received_events_url": "https://api.github.com/users/gabbard/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gabbard", "id": 7139661, "node_id": "MDQ6VXNlcjcxMzk2NjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/7139661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabbard", "html_url": "https://github.com/gabbard", "followers_url": "https://api.github.com/users/gabbard/followers", "following_url": "https://api.github.com/users/gabbard/following{/other_user}", "gists_url": "https://api.github.com/users/gabbard/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabbard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabbard/subscriptions", "organizations_url": "https://api.github.com/users/gabbard/orgs", "repos_url": "https://api.github.com/users/gabbard/repos", "events_url": "https://api.github.com/users/gabbard/events{/privacy}", "received_events_url": "https://api.github.com/users/gabbard/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/python-attrs/attrs/milestones/9", "html_url": "https://github.com/python-attrs/attrs/milestone/9", "labels_url": "https://api.github.com/repos/python-attrs/attrs/milestones/9/labels", "id": 3614804, "node_id": "MDk6TWlsZXN0b25lMzYxNDgwNA==", "number": 9, "title": "19.1.0", "description": "", "creator": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "closed", "created_at": "2018-09-01T05:07:24Z", "updated_at": "2019-03-27T13:05:26Z", "due_on": null, "closed_at": "2019-03-27T13:05:26Z"}, "comments": 2, "created_at": "2019-02-13T21:42:53Z", "updated_at": "2019-02-14T17:06:20Z", "closed_at": "2019-02-14T17:06:20Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The documentation states:\r\n\r\n> `cache_hash` (`bool`) \u2013 Ensure that the object\u2019s hash code is computed only once and stored on the object. If this is set to True, hashing must be either explicitly or implicitly enabled for this class. If the hash code is cached, then no attributes of this class which participate in hash code computation may be mutated after object creation.\r\n\r\nA reader could read this as meaning that only the local fields of this object should not be assigned to and that using this on any `frozen` class is okay.  We should clarify that the object needs to be \"deeply immutable\" for this to be safe.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/497", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/497/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/497/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/497/events", "html_url": "https://github.com/python-attrs/attrs/issues/497", "id": 406036390, "node_id": "MDU6SXNzdWU0MDYwMzYzOTA=", "number": 497, "title": "Docs: provide guidance on how to merge / override", "user": {"login": "pkch", "id": 1593648, "node_id": "MDQ6VXNlcjE1OTM2NDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1593648?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pkch", "html_url": "https://github.com/pkch", "followers_url": "https://api.github.com/users/pkch/followers", "following_url": "https://api.github.com/users/pkch/following{/other_user}", "gists_url": "https://api.github.com/users/pkch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pkch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pkch/subscriptions", "organizations_url": "https://api.github.com/users/pkch/orgs", "repos_url": "https://api.github.com/users/pkch/repos", "events_url": "https://api.github.com/users/pkch/events{/privacy}", "received_events_url": "https://api.github.com/users/pkch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915654, "node_id": "MDU6TGFiZWwxNzA5MTU2NTQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Invalid", "name": "Invalid", "color": "e6e6e6", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-03T00:04:47Z", "updated_at": "2019-02-05T06:19:06Z", "closed_at": "2019-02-04T17:59:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "`attrs` seems like a good choice to define (hierarchical) configurations. A \"configuration\" is an immutable `attrs`-annotated class, whose attribute values are basic scalar types, lists, or other \"configuration\" instances.\r\n\r\nIf such a use case is recommended, it may be worth providing some examples of how to do that in the docs. In particular, it would be very helpful to provide a recipe for overriding an existing configuration with some custom configuration:\r\n\r\n```\r\ndef override(base: MyConfig, custom: MyConfig) -> MyConfig:\r\n  \"\"\"Returns a new `MyConfig` instance where each element in the hierarchy\r\n   is taken from `custom` if it's set there, or from `base` otherwise.\r\n  \"\"\"\r\n```\r\n\r\nThe docs could say:\r\n\r\n1. How to specify elements that are not set. (It's not the same as allowing default values, since if `custom.x.y` is set to a default value of `y`, it will override `base.x.y` that was set to something else.) Defining an `UNSET = object()` sentinel is one approach, but maybe there's something already available in `attrs` to do that?\r\n\r\n2. How to implement `override` function? There are some obvious solutions from scratch, but perhaps there's a way to reuse some of the existing `attrs` features.\r\n\r\n3. Whether it's a good idea, and how, to convert between a configuration and a plain dict.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/496", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/496/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/496/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/496/events", "html_url": "https://github.com/python-attrs/attrs/issues/496", "id": 406006008, "node_id": "MDU6SXNzdWU0MDYwMDYwMDg=", "number": 496, "title": "Unexpected evolve behavior when using python 3.6 type hinting", "user": {"login": "AlmogCohen", "id": 3888998, "node_id": "MDQ6VXNlcjM4ODg5OTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/3888998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlmogCohen", "html_url": "https://github.com/AlmogCohen", "followers_url": "https://api.github.com/users/AlmogCohen/followers", "following_url": "https://api.github.com/users/AlmogCohen/following{/other_user}", "gists_url": "https://api.github.com/users/AlmogCohen/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlmogCohen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlmogCohen/subscriptions", "organizations_url": "https://api.github.com/users/AlmogCohen/orgs", "repos_url": "https://api.github.com/users/AlmogCohen/repos", "events_url": "https://api.github.com/users/AlmogCohen/events{/privacy}", "received_events_url": "https://api.github.com/users/AlmogCohen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-02T18:00:36Z", "updated_at": "2019-02-02T18:07:48Z", "closed_at": "2019-02-02T18:07:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "As recommended [here](http://www.attrs.org/en/stable/examples.html#types) I've used the built-in type hinting but unfortunately it has some quirky behavior when used together with `attr.evolve`.\r\n\r\nI've created a simple pytest example for python 3.6. Please note that the first test fails while the other pass.\r\n\r\n```\r\nimport attr\r\n\r\n\r\n@attr.s\r\nclass UsingTyping(object):\r\n    attrib: str = ''\r\n\r\n\r\n@attr.s\r\nclass UsingAttrib(object):\r\n    attrib: str = attr.ib(default='')\r\n\r\n\r\ndef test_using_typing():\r\n    v = UsingTyping()\r\n    non_default_value = 'non-default-value'\r\n    v.attrib = non_default_value\r\n    evolved = attr.evolve(v)\r\n\r\n    assert evolved.attrib == non_default_value  # evolved.attrib is sequal empty string.\r\n\r\n\r\ndef test_using_attrib():\r\n    v = UsingAttrib()\r\n    non_default_value = 'non-default-value'\r\n    v.attrib = non_default_value\r\n    evolved = attr.evolve(v)\r\n\r\n    assert evolved.attrib == non_default_value\r\n```\r\n\r\nSo right now I had to revert to the usage as demonstrated by the `UsingAttrib` class, which is pretty ugly compared to the other one :)\r\n\r\nI'm using `attrs` version `18.2.0` under Mac OSX Mojave. Please let me know if I can further assist in anyway", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/494", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/494/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/494/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/494/events", "html_url": "https://github.com/python-attrs/attrs/issues/494", "id": 403872646, "node_id": "MDU6SXNzdWU0MDM4NzI2NDY=", "number": 494, "title": "Allow cache_hash=True to be used when a custom __setstate__ is present", "user": {"login": "gabbard", "id": 7139661, "node_id": "MDQ6VXNlcjcxMzk2NjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/7139661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabbard", "html_url": "https://github.com/gabbard", "followers_url": "https://api.github.com/users/gabbard/followers", "following_url": "https://api.github.com/users/gabbard/following{/other_user}", "gists_url": "https://api.github.com/users/gabbard/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabbard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabbard/subscriptions", "organizations_url": "https://api.github.com/users/gabbard/orgs", "repos_url": "https://api.github.com/users/gabbard/repos", "events_url": "https://api.github.com/users/gabbard/events{/privacy}", "received_events_url": "https://api.github.com/users/gabbard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-28T15:37:15Z", "updated_at": "2020-02-10T16:16:08Z", "closed_at": "2020-02-10T16:16:08Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This is not currently possible (as of the merge of #489 ) because when `cache_hash=True`, we solve #482 by adding a `__setstate__`  to all classes which clears the cached hash code.\r\n\r\nThis is a somewhat unusual combination of needs, so I imagine this is very low priority. This issue is just here as a marker for anyone who runs into this problem in the future.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/493", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/493/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/493/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/493/events", "html_url": "https://github.com/python-attrs/attrs/issues/493", "id": 403545325, "node_id": "MDU6SXNzdWU0MDM1NDUzMjU=", "number": 493, "title": "list in nested classes", "user": {"login": "egberts", "id": 10352354, "node_id": "MDQ6VXNlcjEwMzUyMzU0", "avatar_url": "https://avatars0.githubusercontent.com/u/10352354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/egberts", "html_url": "https://github.com/egberts", "followers_url": "https://api.github.com/users/egberts/followers", "following_url": "https://api.github.com/users/egberts/following{/other_user}", "gists_url": "https://api.github.com/users/egberts/gists{/gist_id}", "starred_url": "https://api.github.com/users/egberts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/egberts/subscriptions", "organizations_url": "https://api.github.com/users/egberts/orgs", "repos_url": "https://api.github.com/users/egberts/repos", "events_url": "https://api.github.com/users/egberts/events{/privacy}", "received_events_url": "https://api.github.com/users/egberts/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-27T12:24:41Z", "updated_at": "2019-01-30T12:48:12Z", "closed_at": "2019-01-29T21:05:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Been working on nested classes (all 'auto_attribs=True') and was struggling with `list` type.\r\n\r\nThe goal here is to get the deeply nested (yet attrs-ized) classes to be 'exportable' for JSON usage.\r\n\r\nIn short, make the variable printable using `json.dumps()`.  I think I have this as my actual working workaround, but I'd like to think that I may have forgotten some nifty things to make things easier.\r\n\r\nattrs - 18.2\r\nPython - 3.7.0\r\nI've enclosed a working snippet here.\r\n\r\n```python\r\n#\r\n# primary goal of this snippet is to get attrs-ized classes\r\n# that uses a list type and to work it into a JSON output\r\n# by converting it into dict-type yet JSON'able structure\r\n# despite its heavy class nesting.\r\nimport attr\r\nimport json\r\nimport typing\r\nimport pprint\r\n\r\n\r\ndef recursive_any_to_dict(anyElement):\r\n    \"\"\"\r\n    Recursive any nested type into a dict (so that it can be JSON'able).\r\n    :param anyElement: Just about any 'attrs-ized' instance variable type in Python.\r\n    :return: A dict structure\r\n    \"\"\"\r\n    if isinstance(anyElement, dict):\r\n        simple_dict = {}\r\n        for key, value in anyElement.items():\r\n            if isinstance(value, dict):\r\n                simple_dict[key] = recursive_any_to_dict(value)\r\n            else:\r\n                simple_dict[key] = value\r\n\r\n        return simple_dict\r\n    elif isinstance(anyElement, list):  # deal with attrs' list handling\r\n        simple_list = []\r\n        for index in range(len(anyElement)):\r\n            value = recursive_any_to_dict(anyElement[index])\r\n            simple_list.append(value)\r\n        return simple_list\r\n    elif isinstance(anyElement, str):\r\n        return anyElement\r\n    elif isinstance(anyElement, bool):\r\n        return str(anyElement)\r\n    elif isinstance(anyElement, int):\r\n        return str(anyElement)\r\n\r\n    # all other types at this point here are presumably attrs-ized class-type\r\n    simple_dict = {}\r\n    for element in anyElement.__attrs_attrs__:\r\n        simple_dict[element.name] = recursive_any_to_dict(getattr(anyElement, element.name))\r\n    return simple_dict\r\n\r\n\r\ndef dumpme(title, var):\r\n    print(title, ':', var)\r\n    print('dir(', title, '):', dir(var))\r\n    print(title, '.__dir__:', var.__dir__())\r\n    if 'size' in var.__dir__():\r\n        print(title, '.size():', var.size())\r\n    if 'name' in var.__dir__():\r\n        print(title, '.name:', var.name)\r\n    if 'append' in var.__dir__():\r\n        print(title, '.append: found!')\r\n    if 'update' in var.__dir__():\r\n        print(title, '.update: found!')\r\n\r\n@attr.s(auto_attribs=True)\r\nclass AnyElement:\r\n    not_not: bool = False\r\n    element: typing.Any = None\r\n\r\n\r\n@attr.s(auto_attribs=True)\r\nclass AnyElementAny:\r\n    any_element_any: typing.Any = None\r\n\r\n\r\n@attr.s(auto_attribs=True)\r\nclass AclElement:\r\n    not_not: bool = False\r\n    name: str = None\r\n    # AnyElement, if str, use no {} pair\r\n    # AnyElement, if object, use {} pair\r\n    any_element: AnyElementAny = None\r\n\r\n\r\n@attr.s(auto_attribs=True)\r\nclass MyNamedConf:\r\n    options: typing.Dict = dict()\r\n    acls: typing.List[AclElement] = list()\r\n\r\n\r\npp = pprint.PrettyPrinter(indent=4, compact=False)\r\ntst = list()\r\ntst.append(\"123\")\r\ntst.append(\"abc\")\r\nprint(tst)\r\npp.pprint(tst)\r\nnc = MyNamedConf()\r\npp.pprint(nc)\r\n# = list[AclElement()]\r\n\r\naye1 = AnyElement(not_not=False, element='none')\r\nae1 = AclElement()\r\nae1.name = 'xfer_acl'\r\nae1.any_element = aye1\r\ndumpme('ae1', ae1)\r\n\r\nae2 = AclElement(not_not=False, name='xfer_acl2', any_element='none')\r\ndumpme('ae2', ae2)\r\n\r\nnc.acls.append(ae1)\r\nnc.acls.append(ae2)\r\ndumpme('acls', nc.acls)\r\n\r\nnc.options['allow_query'] = \"yes\"\r\nprint(\"nc.options:\", nc.options)\r\nprint('nc:', nc)\r\nprint(\"nc.acls:\", nc.acls)\r\nprint(\"nc.acls[0]:\", nc.acls[0])\r\nprint(\"nc.acls[0].name:\", nc.acls[0].name)\r\nprint(\"nc.acls[1]:\", nc.acls[1])\r\nprint(\"nc.acls[1].name:\", nc.acls[1].name)\r\n\r\ndumpme('nc', nc)\r\npp.pprint(nc.acls)\r\ninstance = recursive_any_to_dict(nc)\r\nprint('instance:', instance)\r\nprint('recursive_any_to_dict:', json.dumps(instance))\r\n\r\n# Now i can do indexing\r\nprint(\"instance['options']:\", instance['options'])\r\nprint(\"instance['acls']:\", instance['acls'])\r\nprint(\"instance['acls'][0]:\", instance['acls'][0])\r\nprint(\"instance['acls'][0]['name']:\", instance['acls'][0]['name'])\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/491", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/491/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/491/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/491/events", "html_url": "https://github.com/python-attrs/attrs/issues/491", "id": 403412337, "node_id": "MDU6SXNzdWU0MDM0MTIzMzc=", "number": 491, "title": "Attrs strips filename information from tracebacks", "user": {"login": "jgkamat", "id": 4349709, "node_id": "MDQ6VXNlcjQzNDk3MDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/4349709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgkamat", "html_url": "https://github.com/jgkamat", "followers_url": "https://api.github.com/users/jgkamat/followers", "following_url": "https://api.github.com/users/jgkamat/following{/other_user}", "gists_url": "https://api.github.com/users/jgkamat/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgkamat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgkamat/subscriptions", "organizations_url": "https://api.github.com/users/jgkamat/orgs", "repos_url": "https://api.github.com/users/jgkamat/repos", "events_url": "https://api.github.com/users/jgkamat/events{/privacy}", "received_events_url": "https://api.github.com/users/jgkamat/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-26T06:24:02Z", "updated_at": "2019-08-18T14:02:24Z", "closed_at": "2019-08-18T14:02:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "With this file, named 'test.py'\r\n\r\n```\r\nimport attr\r\nimport traceback\r\n\r\n@attr.s\r\nclass Coordinates(object):\r\n\tx = attr.ib()\r\n\ty = attr.ib()\r\n\r\n\r\n\tdef __attrs_post_init__(self):\r\n\t\ttraceback.print_stack()\r\n\r\nCoordinates(1,2)\r\n```\r\n\r\nThe output generated is:\r\n\r\n```\r\n  File \"test.py\", line 14, in <module>\r\n    Coordinates(1,2)\r\n  File \"<attrs generated init bbaf7cf2afa21222b9e9b6e67f14e8b55cc4c79a>\", line 4, in __init__\r\n    self.__attrs_post_init__()\r\n  File \"test.py\", line 12, in __attrs_post_init__\r\n    traceback.print_stack()\r\n```\r\n\r\nLoosing the filename information completely is incredibly annoying when debugging. I'm currently trying to track down a couple performance issues, and I'm not sure if the `attrs generated init` I happen to be looking at is from my code or from one of the libraries I'm pulling. It would be nice to actually display the real filename with a pointer to the attrs header, but even something like 'attrs generated init for class Coordinates' would be infinitely better.\r\n\r\n(for example):\r\n![2019-01-25-222613_520x111_scrot](https://user-images.githubusercontent.com/4349709/51783542-55520c80-2133-11e9-96be-45b827f50878.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/490", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/490/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/490/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/490/events", "html_url": "https://github.com/python-attrs/attrs/issues/490", "id": 403397137, "node_id": "MDU6SXNzdWU0MDMzOTcxMzc=", "number": 490, "title": "Why does `attr.fields` not work on instances?", "user": {"login": "rudasoftware", "id": 28902102, "node_id": "MDQ6VXNlcjI4OTAyMTAy", "avatar_url": "https://avatars1.githubusercontent.com/u/28902102?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rudasoftware", "html_url": "https://github.com/rudasoftware", "followers_url": "https://api.github.com/users/rudasoftware/followers", "following_url": "https://api.github.com/users/rudasoftware/following{/other_user}", "gists_url": "https://api.github.com/users/rudasoftware/gists{/gist_id}", "starred_url": "https://api.github.com/users/rudasoftware/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rudasoftware/subscriptions", "organizations_url": "https://api.github.com/users/rudasoftware/orgs", "repos_url": "https://api.github.com/users/rudasoftware/repos", "events_url": "https://api.github.com/users/rudasoftware/events{/privacy}", "received_events_url": "https://api.github.com/users/rudasoftware/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428248824, "node_id": "MDU6TGFiZWw0MjgyNDg4MjQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Feature", "name": "Feature", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-26T02:45:10Z", "updated_at": "2019-01-31T04:33:57Z", "closed_at": "2019-01-31T04:33:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've found myself writing a number of helper functions that generically handle instances of `attr.s` decorated classes, adapting functionality based on their `Attributes`. Some of them don't care if it's an instance or a type, because they only operate on some other input (e.g. filtering a `dict` to remove keys that aren't attribute names). It's really annoying to try/except around `NotAnAttrsClassError` to use the `fields` function.\r\n\r\nInternally, the `fields` function is a really simple lookup based on `__attrs_attrs__`, which *is* available on instances. Even if it's not desirable to rely on indirect resolution, `evolve` gets `inst.__class__` to invoke `fields`, so this behavior could be folded into `fields` itself.\r\n\r\n`fields` goes out of it's way to check that its argument is a class, so I'm assuming there must be a reason.\r\nIs it simply historical?\r\nMaybe a Python 2/3 thing?\r\n\r\nI *love* `attrs`, by the way. It has liberated me from `namedtuple` hell. XD\r\nMaking my own `fields`-like function seemed like a smell to me, so I was curious about this design decision", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/483", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/483/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/483/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/483/events", "html_url": "https://github.com/python-attrs/attrs/issues/483", "id": 398378670, "node_id": "MDU6SXNzdWUzOTgzNzg2NzA=", "number": 483, "title": "Hash function missing from subclass", "user": {"login": "vitalbmcdonald", "id": 42211811, "node_id": "MDQ6VXNlcjQyMjExODEx", "avatar_url": "https://avatars0.githubusercontent.com/u/42211811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vitalbmcdonald", "html_url": "https://github.com/vitalbmcdonald", "followers_url": "https://api.github.com/users/vitalbmcdonald/followers", "following_url": "https://api.github.com/users/vitalbmcdonald/following{/other_user}", "gists_url": "https://api.github.com/users/vitalbmcdonald/gists{/gist_id}", "starred_url": "https://api.github.com/users/vitalbmcdonald/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vitalbmcdonald/subscriptions", "organizations_url": "https://api.github.com/users/vitalbmcdonald/orgs", "repos_url": "https://api.github.com/users/vitalbmcdonald/repos", "events_url": "https://api.github.com/users/vitalbmcdonald/events{/privacy}", "received_events_url": "https://api.github.com/users/vitalbmcdonald/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428249065, "node_id": "MDU6TGFiZWw0MjgyNDkwNjU=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Documentation", "name": "Documentation", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-01-11T17:15:27Z", "updated_at": "2019-02-05T05:45:28Z", "closed_at": "2019-02-05T05:45:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "When creating a subclass of an attr object, I would expect setting `cmp=False` to cause the subclass to be hashable. Right now it inherits the hash settings from its parent and ignores the cmp settings for hashing.\r\n\r\n```python\r\nimport attr\r\n\r\n@attr.s\r\nclass Foo:\r\n    pass\r\n\r\n@attr.s(cmp=False)\r\nclass Bar(Foo):\r\n    pass\r\n\r\nassert Foo.__hash__ is None, \"Foo incorrectly has a hash method\"\r\n## passes\r\n\r\nassert Bar.__hash__ is object.__hash__, \"Bar is missing the identity hash method\"\r\n## fails\r\n```\r\n\r\nThe issue I believe is [this elif block](https://github.com/python-attrs/attrs/blob/master/src/attr/_make.py#L869) assumes that the class is inheriting from `object` and thereby getting its `__hash__` method. Adding a line to explicitly add the `__hash__` method would fix the problem.\r\n\r\nThe workaround I am using is just adding the `__hash__` method after the class is defined, so\r\n```python\r\n@attr.s(cmp=False)\r\nclass Bar(Foo):\r\n    pass\r\n\r\nBar.__hash__ = object.__hash__\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/482", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/482/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/482/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/482/events", "html_url": "https://github.com/python-attrs/attrs/issues/482", "id": 398374037, "node_id": "MDU6SXNzdWUzOTgzNzQwMzc=", "number": 482, "title": "cache_hash can give the wrong hash code for deserialized objects", "user": {"login": "gabbard", "id": 7139661, "node_id": "MDQ6VXNlcjcxMzk2NjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/7139661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabbard", "html_url": "https://github.com/gabbard", "followers_url": "https://api.github.com/users/gabbard/followers", "following_url": "https://api.github.com/users/gabbard/following{/other_user}", "gists_url": "https://api.github.com/users/gabbard/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabbard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabbard/subscriptions", "organizations_url": "https://api.github.com/users/gabbard/orgs", "repos_url": "https://api.github.com/users/gabbard/repos", "events_url": "https://api.github.com/users/gabbard/events{/privacy}", "received_events_url": "https://api.github.com/users/gabbard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/python-attrs/attrs/milestones/9", "html_url": "https://github.com/python-attrs/attrs/milestone/9", "labels_url": "https://api.github.com/repos/python-attrs/attrs/milestones/9/labels", "id": 3614804, "node_id": "MDk6TWlsZXN0b25lMzYxNDgwNA==", "number": 9, "title": "19.1.0", "description": "", "creator": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "closed", "created_at": "2018-09-01T05:07:24Z", "updated_at": "2019-03-27T13:05:26Z", "due_on": null, "closed_at": "2019-03-27T13:05:26Z"}, "comments": 6, "created_at": "2019-01-11T17:02:23Z", "updated_at": "2019-03-07T01:05:51Z", "closed_at": "2019-02-02T13:32:06Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I just realized a bug in the code I wrote for hash code caching (#426).  Because the hash code cache field gets serialized and deserialized by Pickle, when you deserialize a `cache_hash=True` `attrs` object, the hashcode will be the hashcode the object had at serialization-time. However, if your object has fields with hash codes which are not deterministic between interpreter runs, then on a new interpreter run your deserialized object will have a hash code which differs from a newly created identical object.\r\n\r\nWe can fix this for `pickle` by recomputing the hash code in `__setstate__`.  Other serialization libraries which don't respect `__setstate__` will still have a problem, but I don't think we can do anything about that.  If the `__setstate__` solution sounds acceptable I will implement it next week.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/480", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/480/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/480/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/480/events", "html_url": "https://github.com/python-attrs/attrs/issues/480", "id": 394491538, "node_id": "MDU6SXNzdWUzOTQ0OTE1Mzg=", "number": 480, "title": "Should we remove the stubs from `typeshed`?", "user": {"login": "euresti", "id": 1081858, "node_id": "MDQ6VXNlcjEwODE4NTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1081858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euresti", "html_url": "https://github.com/euresti", "followers_url": "https://api.github.com/users/euresti/followers", "following_url": "https://api.github.com/users/euresti/following{/other_user}", "gists_url": "https://api.github.com/users/euresti/gists{/gist_id}", "starred_url": "https://api.github.com/users/euresti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euresti/subscriptions", "organizations_url": "https://api.github.com/users/euresti/orgs", "repos_url": "https://api.github.com/users/euresti/repos", "events_url": "https://api.github.com/users/euresti/events{/privacy}", "received_events_url": "https://api.github.com/users/euresti/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428248917, "node_id": "MDU6TGFiZWw0MjgyNDg5MTc=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Cleanup", "name": "Cleanup", "color": "006b75", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-12-27T21:28:21Z", "updated_at": "2020-04-02T18:49:48Z", "closed_at": "2020-04-02T06:11:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Now that `mypy` supports pep 561 (https://github.com/python/mypy/pull/4693) and `attrs` includes type stubs (#238) should we remove the type annotations that are in `typeshed`?  This way we don't have to keep those in sync with `attrs` development.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/479", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/479/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/479/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/479/events", "html_url": "https://github.com/python-attrs/attrs/issues/479", "id": 394255642, "node_id": "MDU6SXNzdWUzOTQyNTU2NDI=", "number": 479, "title": "Can attrs help with giving a user a `Choice(\"a|b|c\")`", "user": {"login": "kootenpv", "id": 2746227, "node_id": "MDQ6VXNlcjI3NDYyMjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2746227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kootenpv", "html_url": "https://github.com/kootenpv", "followers_url": "https://api.github.com/users/kootenpv/followers", "following_url": "https://api.github.com/users/kootenpv/following{/other_user}", "gists_url": "https://api.github.com/users/kootenpv/gists{/gist_id}", "starred_url": "https://api.github.com/users/kootenpv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kootenpv/subscriptions", "organizations_url": "https://api.github.com/users/kootenpv/orgs", "repos_url": "https://api.github.com/users/kootenpv/repos", "events_url": "https://api.github.com/users/kootenpv/events{/privacy}", "received_events_url": "https://api.github.com/users/kootenpv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915655, "node_id": "MDU6TGFiZWwxNzA5MTU2NTU=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Question", "name": "Question", "color": "cc317c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-26T23:03:33Z", "updated_at": "2019-01-08T19:04:10Z", "closed_at": "2019-01-08T19:04:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm wondering if there is a way to use attrs for the situation in which we want to let a user of an object choose between 3 options.\r\n\r\nIdeally:\r\n\r\n    @attr.s\r\n    class A():\r\n        x = attr.Choice(\"a\", \"b\", \"c\")\r\n\r\n    >>> A(\"d\")\r\n    ValueError(\"'x' must be one of 'a', 'b', 'c'\")\r\n\r\n    Signature:\r\n    A(x=Choice(\"a|b|c\")) or A(x=\"a|b|c\")\r\n\r\nNote that the requirements are:\r\n\r\n- User should not have to import anything to pass it to `A`\r\n- User will understand the options it has when looking at the signature, and\r\n- User will get an error if passing an invalid choice\r\n\r\nIs there already a way to get this using attrs; I think there is no logical way in basic Python either?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/478", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/478/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/478/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/478/events", "html_url": "https://github.com/python-attrs/attrs/issues/478", "id": 394212666, "node_id": "MDU6SXNzdWUzOTQyMTI2NjY=", "number": 478, "title": "Instantiating a class with interdependent attributes ... how to?", "user": {"login": "kirsn", "id": 11280, "node_id": "MDQ6VXNlcjExMjgw", "avatar_url": "https://avatars3.githubusercontent.com/u/11280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirsn", "html_url": "https://github.com/kirsn", "followers_url": "https://api.github.com/users/kirsn/followers", "following_url": "https://api.github.com/users/kirsn/following{/other_user}", "gists_url": "https://api.github.com/users/kirsn/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirsn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirsn/subscriptions", "organizations_url": "https://api.github.com/users/kirsn/orgs", "repos_url": "https://api.github.com/users/kirsn/repos", "events_url": "https://api.github.com/users/kirsn/events{/privacy}", "received_events_url": "https://api.github.com/users/kirsn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915654, "node_id": "MDU6TGFiZWwxNzA5MTU2NTQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Invalid", "name": "Invalid", "color": "e6e6e6", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-26T17:49:48Z", "updated_at": "2018-12-28T00:30:08Z", "closed_at": "2018-12-28T00:30:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Environment: attrs-18.2.0, python 2.7.15\r\n\r\nIn a class definition, a few attributes are dependent on each other. For example:\r\n```python\r\nimport attr\r\n\r\n@attr.s(frozen=True, slots=True)\r\nclass InterDependent(object):\r\n    x = attr.ib()\r\n    y = attr.ib()\r\n\r\n    @x.default\r\n    def _init_x(self):\r\n        return \"X_\" + self.y if self.y else \"NA\"\r\n\r\n    @y.default\r\n    def _init_y(self):\r\n        return \"Y_\" + self.x if self.x else \"NA\"\r\n\r\n```\r\n`x` and `y` default values are dependent on each other. This construction results in the following error:\r\n```\r\nTraceback (most recent call last):\r\n  File \".....\\attrs_trial.py\", line 30, in <module>\r\n    print(InterDependent())\r\n  File \"<attrs generated init 98d962bec5feb2314fc85a0b22ce07f6243a7019>\", line 6, in __init__\r\n  File \".....\\attrs_trial.py\", line 11, in _init_x\r\n    return \"X_\" + self.y if self.y else \"NA\"\r\nAttributeError: y\r\n```\r\n\r\nFor such a scenario, is the following, the only way to resolve it? Details below:\r\n```python\r\n@attr.s(frozen=True, slots=True)\r\nclass InterDependentCreateViaFactory(object):\r\n    x = attr.ib(default=None)\r\n    y = attr.ib(default=None)\r\n\r\n    @classmethod\r\n    def create(cls, x, y):\r\n        return cls(\r\n              x=\"X_\" + y if y else \"x_NA\", \r\n              y=\"Y_\" + x if x else \"y_NA\"\r\n       )\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(InterDependentCreateViaFactory.create(x=\"Hello\", y=None))\r\n```\r\nThis prints out\r\n`InterDependentCreateViaFactory(x='x_NA', y='Y_Hello')` as expected. \r\nIn this case, I need to ensure that the default `__init__` is not used (make it private somehow).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/476", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/476/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/476/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/476/events", "html_url": "https://github.com/python-attrs/attrs/issues/476", "id": 393741703, "node_id": "MDU6SXNzdWUzOTM3NDE3MDM=", "number": 476, "title": "Not able to install it", "user": {"login": "prabhatpankaj", "id": 20439273, "node_id": "MDQ6VXNlcjIwNDM5Mjcz", "avatar_url": "https://avatars2.githubusercontent.com/u/20439273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prabhatpankaj", "html_url": "https://github.com/prabhatpankaj", "followers_url": "https://api.github.com/users/prabhatpankaj/followers", "following_url": "https://api.github.com/users/prabhatpankaj/following{/other_user}", "gists_url": "https://api.github.com/users/prabhatpankaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/prabhatpankaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prabhatpankaj/subscriptions", "organizations_url": "https://api.github.com/users/prabhatpankaj/orgs", "repos_url": "https://api.github.com/users/prabhatpankaj/repos", "events_url": "https://api.github.com/users/prabhatpankaj/events{/privacy}", "received_events_url": "https://api.github.com/users/prabhatpankaj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915654, "node_id": "MDU6TGFiZWwxNzA5MTU2NTQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Invalid", "name": "Invalid", "color": "e6e6e6", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-23T11:14:40Z", "updated_at": "2018-12-28T00:27:36Z", "closed_at": "2018-12-28T00:27:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "not able to install it in python3.7 \r\n\r\nCollecting attrs>=16.1.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/475", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/475/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/475/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/475/events", "html_url": "https://github.com/python-attrs/attrs/issues/475", "id": 392872780, "node_id": "MDU6SXNzdWUzOTI4NzI3ODA=", "number": 475, "title": "A slots=False class inheriting from a slots=True class generates incorrect __getstate__", "user": {"login": "mooncake4132", "id": 33011824, "node_id": "MDQ6VXNlcjMzMDExODI0", "avatar_url": "https://avatars0.githubusercontent.com/u/33011824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mooncake4132", "html_url": "https://github.com/mooncake4132", "followers_url": "https://api.github.com/users/mooncake4132/followers", "following_url": "https://api.github.com/users/mooncake4132/following{/other_user}", "gists_url": "https://api.github.com/users/mooncake4132/gists{/gist_id}", "starred_url": "https://api.github.com/users/mooncake4132/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mooncake4132/subscriptions", "organizations_url": "https://api.github.com/users/mooncake4132/orgs", "repos_url": "https://api.github.com/users/mooncake4132/repos", "events_url": "https://api.github.com/users/mooncake4132/events{/privacy}", "received_events_url": "https://api.github.com/users/mooncake4132/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-20T03:33:00Z", "updated_at": "2019-08-22T03:01:28Z", "closed_at": "2019-08-22T03:01:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I understand that this is a fairly uncommon case, but I was expecting the following to work:\r\n```py\r\nimport attr\r\nimport copy\r\n\r\n\r\n@attr.s(slots=True)\r\nclass A:\r\n    a = attr.ib()\r\n\r\n\r\n@attr.s\r\nclass B(A):\r\n    b = attr.ib()\r\n\r\n\r\nb = B(1, 2)\r\nprint('ver: {}'.format(attr.__version__))\r\nprint('b: {!r}'.format(b))\r\nprint('b.__getstate__: {!r}'.format(b.__getstate__()))\r\nprint('deecopy(b): {!r}'.format(copy.deepcopy(b)))\r\n```\r\nOutput\r\n```\r\nver: 18.2.0\r\nb: B(a=1, b=2)\r\nb.__getstate__: (1,)\r\ndeecopy(b): B(a=1, b=NOTHING)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/474", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/474/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/474/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/474/events", "html_url": "https://github.com/python-attrs/attrs/issues/474", "id": 392393424, "node_id": "MDU6SXNzdWUzOTIzOTM0MjQ=", "number": 474, "title": "converter expected to return a Tuple where perhaps an Iterable should do", "user": {"login": "wsanchez", "id": 50002, "node_id": "MDQ6VXNlcjUwMDAy", "avatar_url": "https://avatars1.githubusercontent.com/u/50002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wsanchez", "html_url": "https://github.com/wsanchez", "followers_url": "https://api.github.com/users/wsanchez/followers", "following_url": "https://api.github.com/users/wsanchez/following{/other_user}", "gists_url": "https://api.github.com/users/wsanchez/gists{/gist_id}", "starred_url": "https://api.github.com/users/wsanchez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wsanchez/subscriptions", "organizations_url": "https://api.github.com/users/wsanchez/orgs", "repos_url": "https://api.github.com/users/wsanchez/repos", "events_url": "https://api.github.com/users/wsanchez/events{/privacy}", "received_events_url": "https://api.github.com/users/wsanchez/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-12-19T00:35:10Z", "updated_at": "2019-01-02T05:51:43Z", "closed_at": "2018-12-31T14:47:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "After updating `mypy` from `0.630` to `0.650` for Klein, I get this error:\r\n\r\n```console\r\nsrc/klein/_headers.py:172:18: error: Argument \"converter\" to \"attrib\" has incompatible type \"Callable[[Iterable[Iterable[bytes]]], Sequence[Tuple[bytes, bytes]]]\"; expected \"Optional[Callable[[Any], Tuple[]]]\"\r\n```\r\n\r\nIf I'm reading this correctly, the provided converter is a `Callable` (OK) and takes one argument (OK) and returns a `Sequence` (not OK: `Tuple` expected).\r\n\r\nThe converter specified in [src/klein/_headers.py:172](https://github.com/twisted/klein/blob/update-deps/src/klein/_headers.py#L172) is [`normalizeRawHeadersFrozen`](https://github.com/twisted/klein/blob/update-deps/src/klein/_headers.py#L101):\r\n\r\n```python\r\ndef normalizeRawHeadersFrozen(headerPairs):\r\n    # type: (Iterable[Iterable[bytes]]) -> RawHeaders\r\n    return tuple(normalizeRawHeaders(headerPairs))\r\n```\r\n\r\nThis implementation does return a `tuple`, but I wanted to limit my commitment to a `Sequence`.  I think that `converter` should be happy with a `Sequence` in practice, so I'd like to lobby for a looser requirement here.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/473", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/473/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/473/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/473/events", "html_url": "https://github.com/python-attrs/attrs/issues/473", "id": 391478631, "node_id": "MDU6SXNzdWUzOTE0Nzg2MzE=", "number": 473, "title": "`kw_only` doesn't work with mypy", "user": {"login": "quinor", "id": 3879392, "node_id": "MDQ6VXNlcjM4NzkzOTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3879392?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quinor", "html_url": "https://github.com/quinor", "followers_url": "https://api.github.com/users/quinor/followers", "following_url": "https://api.github.com/users/quinor/following{/other_user}", "gists_url": "https://api.github.com/users/quinor/gists{/gist_id}", "starred_url": "https://api.github.com/users/quinor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quinor/subscriptions", "organizations_url": "https://api.github.com/users/quinor/orgs", "repos_url": "https://api.github.com/users/quinor/repos", "events_url": "https://api.github.com/users/quinor/events{/privacy}", "received_events_url": "https://api.github.com/users/quinor/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-12-16T15:38:57Z", "updated_at": "2019-01-09T00:08:12Z", "closed_at": "2019-01-09T00:08:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Use mypy on following file:\r\n```\r\nimport typing\r\nimport attr\r\n\r\n\r\n@attr.s(frozen=True, auto_attribs=True, kw_only=True)\r\nclass Position:\r\n    line: int\r\n    column: int\r\n\r\n\r\n@attr.s(frozen=True, auto_attribs=True, kw_only=True)\r\nclass Node:\r\n    start: typing.Optional[Position] = None\r\n    end: typing.Optional[Position] = None\r\n\r\n\r\n@attr.s(frozen=True, auto_attribs=True, kw_only=True)\r\nclass Operator(Node):\r\n    symbol: str\r\n    name: str\r\n    precedence: int\r\n    associativity: str  # \"left\" or \"right\"\r\n```\r\nIt gives following errors:\r\n```\r\nf.py:21: error: Non-default attributes not allowed after default attributes.\r\nf.py:22: error: Non-default attributes not allowed after default attributes.\r\nf.py:23: error: Non-default attributes not allowed after default attributes.\r\nf.py:24: error: Non-default attributes not allowed after default attributes.\r\n```\r\nIf I understand correctly, mypy doesn't consider the existence of a new `kw_only=True` .", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/471", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/471/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/471/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/471/events", "html_url": "https://github.com/python-attrs/attrs/issues/471", "id": 389393517, "node_id": "MDU6SXNzdWUzODkzOTM1MTc=", "number": 471, "title": "Protect secrets from __repr__", "user": {"login": "webknjaz", "id": 578543, "node_id": "MDQ6VXNlcjU3ODU0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/578543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/webknjaz", "html_url": "https://github.com/webknjaz", "followers_url": "https://api.github.com/users/webknjaz/followers", "following_url": "https://api.github.com/users/webknjaz/following{/other_user}", "gists_url": "https://api.github.com/users/webknjaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/webknjaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/webknjaz/subscriptions", "organizations_url": "https://api.github.com/users/webknjaz/orgs", "repos_url": "https://api.github.com/users/webknjaz/repos", "events_url": "https://api.github.com/users/webknjaz/events{/privacy}", "received_events_url": "https://api.github.com/users/webknjaz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428248824, "node_id": "MDU6TGFiZWw0MjgyNDg4MjQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Feature", "name": "Feature", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-12-10T16:55:48Z", "updated_at": "2019-10-31T19:50:20Z", "closed_at": "2019-10-31T19:50:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Looking at https://github.com/hynek/environ_config and my internal attrs classes representing a token response from GitHub API etc.\r\n\r\nI know about `repr=False` (and I saw [this hack](https://github.com/hynek/environ_config/blob/69b1c8a/src/environ/secrets.py#L114-L124)) but in my case I don't want to \"hide\" the attr existence. I want to be able to sanitize it's value.\r\nAt @Ansible we have this feature where we can mark vars at different levels as `no_log` and they appeared as censored. I assume it's a quite widely used practice.\r\n\r\nWith that in mind I'm currently thinking of these few ways:\r\n1) full protection\r\n```python\r\n>>> repr(AttrsClass(secret='value'))\r\nAttrsClass(secret=attr.CENSORED_VAL)  # hide everything\r\n```\r\n2) partially sanitized\r\n```python\r\n>>> repr(AttrsClass(secret='value'))\r\nAttrsClass(secret=attr.CENSORED_VAL('va...e'))  # show some helper parts usually sufficient to recognize that token is smth odd when debugging things\r\n```\r\n3) could be also useful to preserve a pattern\r\n```python\r\n>>> repr(AttrsClass(secret='DFJ-3E3-DF83'))\r\nAttrsClass(secret=attr.CENSORED_VAL('XXX-XXX-XXXX'))\r\n```\r\n\r\nP.S. I saw #212 and #453 but I believe this use-case should get a first-class support separately from those.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/469", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/469/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/469/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/469/events", "html_url": "https://github.com/python-attrs/attrs/issues/469", "id": 387951997, "node_id": "MDU6SXNzdWUzODc5NTE5OTc=", "number": 469, "title": "asDict supporting properties that are lists of lists", "user": {"login": "padster", "id": 848804, "node_id": "MDQ6VXNlcjg0ODgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/848804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/padster", "html_url": "https://github.com/padster", "followers_url": "https://api.github.com/users/padster/followers", "following_url": "https://api.github.com/users/padster/following{/other_user}", "gists_url": "https://api.github.com/users/padster/gists{/gist_id}", "starred_url": "https://api.github.com/users/padster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/padster/subscriptions", "organizations_url": "https://api.github.com/users/padster/orgs", "repos_url": "https://api.github.com/users/padster/repos", "events_url": "https://api.github.com/users/padster/events{/privacy}", "received_events_url": "https://api.github.com/users/padster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-05T21:24:36Z", "updated_at": "2019-01-21T22:03:39Z", "closed_at": "2019-01-21T22:03:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/python-attrs/attrs/blob/1b419e304b01bbbcb1d0d7b0515efdbc7de73588/src/attr/_funcs.py#L49\r\n\r\nConsider the following code\r\n\r\n```python\r\n@attr.s\r\nclass A():\r\n    listAttrib = attr.ib(default=attr.Factory(list))\r\n    listlistAttrib = attr.ib(default=attr.Factory(list)) \r\n\r\n@attr.s\r\nclass B():\r\n    v = attr.ib(default=1)\r\n\r\na = A()\r\na.listAttrib.append(B())\r\na.listlistAttrib.append([B()])\r\nattr.asdict(a)\r\n```\r\n\r\nExpected: `{'listAttrib': [{'v': 1}], 'listlistAttrib': [[{'v': 1}]]}`\r\nActual: `{'listAttrib': [{'v': 1}], 'listlistAttrib': [[B(v=1)]]}`\r\n\r\nThe indicated line supports the first field (listAttrib) by mapping its contents to dicts via asdict.\r\n\r\nHowever asdict doesn't support lists, so the second field (listlistAttrib) has its first element remain [B(v=1)], rather than get mapped to [{'v': 1}]. Ideally asdict would support lists (either at the first level, or maybe just during recursion if that's preferable), so lists of lists of classes will get treated the same as lists of classes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/468", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/468/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/468/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/468/events", "html_url": "https://github.com/python-attrs/attrs/issues/468", "id": 385892660, "node_id": "MDU6SXNzdWUzODU4OTI2NjA=", "number": 468, "title": "Support for generating builders", "user": {"login": "gabbard", "id": 7139661, "node_id": "MDQ6VXNlcjcxMzk2NjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/7139661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabbard", "html_url": "https://github.com/gabbard", "followers_url": "https://api.github.com/users/gabbard/followers", "following_url": "https://api.github.com/users/gabbard/following{/other_user}", "gists_url": "https://api.github.com/users/gabbard/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabbard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabbard/subscriptions", "organizations_url": "https://api.github.com/users/gabbard/orgs", "repos_url": "https://api.github.com/users/gabbard/repos", "events_url": "https://api.github.com/users/gabbard/events{/privacy}", "received_events_url": "https://api.github.com/users/gabbard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428249065, "node_id": "MDU6TGFiZWw0MjgyNDkwNjU=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Documentation", "name": "Documentation", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-11-29T19:33:41Z", "updated_at": "2018-11-30T14:50:33Z", "closed_at": "2018-11-30T00:45:29Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Builders are a common pattern for initializing complex objects, especially if they are immutable:\r\n\r\n```\r\n@attrs(auto_attribs=True, frozen=True)\r\nclass Foo:\r\n   some_field: int\r\n\r\n   class Builder:\r\n        def some_field(x: int) -> 'Foo.Builder':\r\n             self.x = x\r\n             return self\r\n        def build(self) -> 'Foo':\r\n             return Foo(self.some_field)\r\n\r\nfoo = Foo.Builder().some_field(5).build()\r\n```\r\n\r\nThe pattern is much less common in Python than in some other languages since Python supports optional and keyword constructor arguments.  However, it is still useful in some cases.  For example, today I needed to modify a class like this:\r\n\r\n```\r\n@attrs(frozen=True, auto_attribs=True)\r\nclass Foo:\r\n    core_field: Any\r\n\r\n    @staticmethod\r\n    def create_from_X(x: X) -> 'Foo':\r\n        ....\r\n\r\n    @staticmethod\r\n    def create_from_Y(y: Y) -> 'Foo':\r\n       ...\r\n\r\n    @staticmethod\r\n    def create_from_Z(z: Z) -> 'Foo':\r\n       ...\r\n```\r\n\r\nto have several additional optionally-specified fields with defaults `optional_field_1`, ...., `optional_field_n`.  Adding them all as arguments to the factory methods would be cumbersome.  I could make the factory methods pass along `**kw_args`, but then you lose the discoverability and type-checking you get from having them explicitly specified as arguments.  A cleaner design could be to have the factory methods return a `FooBuilder`, rather than a `Foo`, so that the builder could handle all the optional field configuration in one place while maintaining discoverability and type-checking.  But maintaining builders by hand is a pain.  \r\n\r\nWould adding support for builder generation be considered in-scope for `attrs`? Or is it too unPythonic?\r\n\r\n(for reference, here is how they are handled in `immutables`, a Java cousin of `attrs`: http://immutables.github.io/immutable.html#builder)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/467", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/467/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/467/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/467/events", "html_url": "https://github.com/python-attrs/attrs/issues/467", "id": 385389911, "node_id": "MDU6SXNzdWUzODUzODk5MTE=", "number": 467, "title": "Fields as class attributes", "user": {"login": "altendky", "id": 543719, "node_id": "MDQ6VXNlcjU0MzcxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/543719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/altendky", "html_url": "https://github.com/altendky", "followers_url": "https://api.github.com/users/altendky/followers", "following_url": "https://api.github.com/users/altendky/following{/other_user}", "gists_url": "https://api.github.com/users/altendky/gists{/gist_id}", "starred_url": "https://api.github.com/users/altendky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/altendky/subscriptions", "organizations_url": "https://api.github.com/users/altendky/orgs", "repos_url": "https://api.github.com/users/altendky/repos", "events_url": "https://api.github.com/users/altendky/events{/privacy}", "received_events_url": "https://api.github.com/users/altendky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-11-28T17:58:09Z", "updated_at": "2018-11-29T14:05:49Z", "closed_at": "2018-11-28T18:14:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "At some point I got it in my head that `attrs` used to store fields as class attributes with the field's name, but testing back a ways suggests that is not the case (at least not within any `attrs` I would have been exposed to).  This seems a sometimes useful thing when referring to fields is common within a program.  Despite being a thing someone really asked for and that I really wrote for them as an example, I would consider the example below 'contrived'.  Still, specifically of interest is the `@attr_fields` functionality which allows you to reference fields like `Person.age` rather than `attr.fields(Person).age`.\r\n\r\nA real solution would have to account for inheritance and the like and perhaps a 'real' scenario would be desired to justify the feature but I though I'd mention it in the meantime in case for some reason this is just a bad idea.  I would expect a real implementation to be an `@attr.s()` parameter.\r\n\r\nhttps://repl.it/@altendky/FrenchFirmSpellchecker-1\r\n```python3\r\nimport attr\r\n\r\n\r\ndef attr_fields(cls):\r\n    for field in attr.fields(cls):\r\n        setattr(cls, field.name, field)\r\n    \r\n    return cls\r\n\r\n\r\n@attr_fields\r\n@attr.s\r\nclass Person:\r\n    name = attr.ib()\r\n    age = attr.ib()\r\n\r\n\r\n@attr.s\r\nclass Filter:\r\n    attribute = attr.ib()\r\n    value = attr.ib()\r\n\r\n    def __call__(self, other):\r\n        return getattr(other, self.attribute.name) == self.value\r\n\r\n\r\npeople = [\r\n    Person(name='me', age=42),\r\n    Person(name='you', age=37),\r\n]\r\n\r\nmy_filter = Filter(\r\n    attribute=Person.age,\r\n    value=37,\r\n)\r\n\r\nprint([person for person in people if my_filter(person)])\r\n```\r\n\r\nOutput:\r\n```\r\nPython 3.6.1 (default, Dec 2015, 13:05:11)\r\n[GCC 4.8.2] on linux\r\n[Person(name='you', age=37)]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/466", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/466/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/466/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/466/events", "html_url": "https://github.com/python-attrs/attrs/issues/466", "id": 381425305, "node_id": "MDU6SXNzdWUzODE0MjUzMDU=", "number": 466, "title": "Decorator API with auto_attribs=True doesn't work.", "user": {"login": "ckutlu", "id": 6081525, "node_id": "MDQ6VXNlcjYwODE1MjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6081525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ckutlu", "html_url": "https://github.com/ckutlu", "followers_url": "https://api.github.com/users/ckutlu/followers", "following_url": "https://api.github.com/users/ckutlu/following{/other_user}", "gists_url": "https://api.github.com/users/ckutlu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ckutlu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ckutlu/subscriptions", "organizations_url": "https://api.github.com/users/ckutlu/orgs", "repos_url": "https://api.github.com/users/ckutlu/repos", "events_url": "https://api.github.com/users/ckutlu/events{/privacy}", "received_events_url": "https://api.github.com/users/ckutlu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428249065, "node_id": "MDU6TGFiZWw0MjgyNDkwNjU=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Documentation", "name": "Documentation", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-11-16T02:55:43Z", "updated_at": "2020-05-19T15:24:33Z", "closed_at": "2019-02-09T12:55:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I try to use attribute decorators via auto attributes style, I get an error saying that the name doesn't exist.  This doesn't happen if I initiate attributes with attr.ib().  Is this expected behavior?\r\n\r\nHere is an example that fails:\r\n```\r\n@attr.s(auto_attribs=True)\r\nclass A:\r\n    x: float\r\n\r\n    @x.validator\r\n    def _check_x(self, attrib, value):\r\n        print(\"Validator called.\")\r\n        print(self, attrib, value)\r\na = A(5)\r\n```\r\ngives\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 5, in first\r\n    @attr.s(auto_attribs=True)\r\n  File \"test.py\", line 9, in A\r\n    @x.validator\r\nNameError: name 'x' is not defined\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/465", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/465/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/465/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/465/events", "html_url": "https://github.com/python-attrs/attrs/issues/465", "id": 381297953, "node_id": "MDU6SXNzdWUzODEyOTc5NTM=", "number": 465, "title": "Metaclass and slots", "user": {"login": "AntoinePrv", "id": 11088808, "node_id": "MDQ6VXNlcjExMDg4ODA4", "avatar_url": "https://avatars0.githubusercontent.com/u/11088808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AntoinePrv", "html_url": "https://github.com/AntoinePrv", "followers_url": "https://api.github.com/users/AntoinePrv/followers", "following_url": "https://api.github.com/users/AntoinePrv/following{/other_user}", "gists_url": "https://api.github.com/users/AntoinePrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/AntoinePrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AntoinePrv/subscriptions", "organizations_url": "https://api.github.com/users/AntoinePrv/orgs", "repos_url": "https://api.github.com/users/AntoinePrv/repos", "events_url": "https://api.github.com/users/AntoinePrv/events{/privacy}", "received_events_url": "https://api.github.com/users/AntoinePrv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-15T19:04:13Z", "updated_at": "2018-11-15T23:28:04Z", "closed_at": "2018-11-15T23:28:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nThank you for this wonderful project! It totally changed (for the best) the way I write Python.\r\nI'd like to make the following meta-class example work but I run into a `RecursionError`.\r\n\r\n```python\r\nclass MetaFoo(type):\r\n    def __new__(cls, name, bases, attrs):\r\n        klass = super().__new__(cls, name, bases, attrs)\r\n        return attr.s(frozen=True, slots=True)(klass)\r\n\r\nclass Foo(metaclass=MetaFoo):\r\n    def foo(self): ...\r\n```\r\nAnd then inherit from this:\r\n```python\r\nclass Bar(Foo):\r\n    a = attr.ib()\r\n```\r\nHowever I run into the following error and have a hard time solving it. The error disappears when I disable `slots`. Running python 3.7 on macOs (Homebrew) and attrs (18.2.0).\r\nI know attrs is not about metaclasses, so I would be grateful if you have the time to have a look at it.\r\n```\r\n---------------------------------------------------------------------------\r\nRecursionError                            Traceback (most recent call last)\r\n<ipython-input-22-7a3660d0a3d8> in <module>\r\n      6         return attr.s(frozen=True, slots=True)(klass)\r\n      7 \r\n----> 8 class Foo(metaclass=MetaFoo):\r\n      9     def foo(self): ...\r\n\r\n<ipython-input-22-7a3660d0a3d8> in __new__(cls, name, bases, attrs)\r\n      4     def __new__(cls, name, bases, attrs):\r\n      5         klass = super().__new__(cls, name, bases, attrs)\r\n----> 6         return attr.s(frozen=True, slots=True)(klass)\r\n      7 \r\n      8 class Foo(metaclass=MetaFoo):\r\n\r\n/usr/local/lib/python3.7/site-packages/attr/_make.py in wrap(cls)\r\n    895                 )\r\n    896 \r\n--> 897         return builder.build_class()\r\n    898 \r\n    899     # maybe_cls's type depends on the usage of the decorator.  It's a class\r\n\r\n/usr/local/lib/python3.7/site-packages/attr/_make.py in build_class(self)\r\n    501         \"\"\"\r\n    502         if self._slots is True:\r\n--> 503             return self._create_slots_class()\r\n    504         else:\r\n    505             return self._patch_original_class()\r\n\r\n/usr/local/lib/python3.7/site-packages/attr/_make.py in _create_slots_class(self)\r\n    596 \r\n    597         # Create new class based on old class and our methods.\r\n--> 598         cls = type(self._cls)(self._cls.__name__, self._cls.__bases__, cd)\r\n    599 \r\n    600         # The following is a fix for\r\n\r\n... last 4 frames repeated, from the frame below ...\r\n\r\n<ipython-input-22-7a3660d0a3d8> in __new__(cls, name, bases, attrs)\r\n      4     def __new__(cls, name, bases, attrs):\r\n      5         klass = super().__new__(cls, name, bases, attrs)\r\n----> 6         return attr.s(frozen=True, slots=True)(klass)\r\n      7 \r\n      8 class Foo(metaclass=MetaFoo):\r\n\r\nRecursionError: maximum recursion depth exceeded while calling a Python object\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/463", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/463/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/463/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/463/events", "html_url": "https://github.com/python-attrs/attrs/issues/463", "id": 379984684, "node_id": "MDU6SXNzdWUzNzk5ODQ2ODQ=", "number": 463, "title": "Request: Add auto_converter", "user": {"login": "fwannmacher", "id": 1665660, "node_id": "MDQ6VXNlcjE2NjU2NjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1665660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fwannmacher", "html_url": "https://github.com/fwannmacher", "followers_url": "https://api.github.com/users/fwannmacher/followers", "following_url": "https://api.github.com/users/fwannmacher/following{/other_user}", "gists_url": "https://api.github.com/users/fwannmacher/gists{/gist_id}", "starred_url": "https://api.github.com/users/fwannmacher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fwannmacher/subscriptions", "organizations_url": "https://api.github.com/users/fwannmacher/orgs", "repos_url": "https://api.github.com/users/fwannmacher/repos", "events_url": "https://api.github.com/users/fwannmacher/events{/privacy}", "received_events_url": "https://api.github.com/users/fwannmacher/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-11-12T22:53:26Z", "updated_at": "2018-11-28T19:36:03Z", "closed_at": "2018-11-28T19:36:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "A good feature could be the addition of an auto_converter flag which paired with auto_attrib would use the type of the attribute as its converter.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/462", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/462/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/462/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/462/events", "html_url": "https://github.com/python-attrs/attrs/issues/462", "id": 377179465, "node_id": "MDU6SXNzdWUzNzcxNzk0NjU=", "number": 462, "title": "Easier auto-speccing for tests", "user": {"login": "Aegdesil", "id": 7816329, "node_id": "MDQ6VXNlcjc4MTYzMjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7816329?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aegdesil", "html_url": "https://github.com/Aegdesil", "followers_url": "https://api.github.com/users/Aegdesil/followers", "following_url": "https://api.github.com/users/Aegdesil/following{/other_user}", "gists_url": "https://api.github.com/users/Aegdesil/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aegdesil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aegdesil/subscriptions", "organizations_url": "https://api.github.com/users/Aegdesil/orgs", "repos_url": "https://api.github.com/users/Aegdesil/repos", "events_url": "https://api.github.com/users/Aegdesil/events{/privacy}", "received_events_url": "https://api.github.com/users/Aegdesil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-04T18:17:20Z", "updated_at": "2018-11-06T16:31:34Z", "closed_at": "2018-11-06T16:31:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "What is the recommended way to create a mock instance of a class that is using attrs?\r\n\r\nWhen I'm writing tests for my code, I often mock complex objects to avoid the hassle of instantiating all the required arguments and breaking most of my tests when one object constructor changes. The `unittest` library provides such tools, but unfortunately prevents instance attributes from being detected (see https://docs.python.org/3/library/unittest.mock.html#autospeccing).\r\n\r\nThe \"best\" solution to this problem given in the docs is to add class attributes, which I don't like because they add some duplication between the constructor and the class, and can lead to some bugs (forgetting to set it in the constructor makes it shared between all instances...). My solution is to write getters and setters with properties for all public attributes, which can be auto-specced but create a lot of boilerplate code and duplication.\r\n\r\n`attrs` seemed to be the perfect tool to remove all this duplication, but attributes are removed from the class since 17.3.0, for the some of the reasons I mentioned. I know it is possible to retrieve them using `__attrs_attrs__` or `attr.fields(MyCls)`, but this does not help me with auto-speccing.\r\n\r\nWould it be possible to add a parameter to have something like `attr.s(delete_attributes=False)`, which would override `self._delete_attribs` in the `_ClassBuilder` and revert to the old behavior for people who manually set this option? Or maybe instead of creating public attributes in the constructor, use properties everywhere (but that would obviously be a much bigger change)?\r\n\r\nAny thoughts on this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/461", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/461/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/461/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/461/events", "html_url": "https://github.com/python-attrs/attrs/issues/461", "id": 377080126, "node_id": "MDU6SXNzdWUzNzcwODAxMjY=", "number": 461, "title": "validation triggered too late", "user": {"login": "IaroslavR", "id": 9788811, "node_id": "MDQ6VXNlcjk3ODg4MTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/9788811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IaroslavR", "html_url": "https://github.com/IaroslavR", "followers_url": "https://api.github.com/users/IaroslavR/followers", "following_url": "https://api.github.com/users/IaroslavR/following{/other_user}", "gists_url": "https://api.github.com/users/IaroslavR/gists{/gist_id}", "starred_url": "https://api.github.com/users/IaroslavR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IaroslavR/subscriptions", "organizations_url": "https://api.github.com/users/IaroslavR/orgs", "repos_url": "https://api.github.com/users/IaroslavR/repos", "events_url": "https://api.github.com/users/IaroslavR/events{/privacy}", "received_events_url": "https://api.github.com/users/IaroslavR/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428249065, "node_id": "MDU6TGFiZWw0MjgyNDkwNjU=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Documentation", "name": "Documentation", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-03T18:20:09Z", "updated_at": "2019-02-09T12:34:49Z", "closed_at": "2019-02-09T12:34:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "attrs `18.2.0`\r\npython `3.6.7`\r\nI'm not sure, is it bug or expected behavior, but steps to reproduce:\r\n```python\r\nimport attr\r\n\r\n\r\ndef validate_x(_, __, value):\r\n    if value not in [\"a\", \"b\", ]:\r\n        raise ValueError(f\"Unknown type: {value}\")\r\n\r\n\r\n@attr.s(auto_attribs=True)\r\nclass A:\r\n    name: str = attr.ib(validator=validate_x)\r\n    map: dict = {\r\n        \"x\": 1,\r\n        \"y\": 2,\r\n    }\r\n    detector: str = attr.ib()\r\n\r\n    @detector.default\r\n    def init_detector(self):\r\n        return self.map[self.name]\r\n\r\n\r\na = A('c')\r\n```\r\nExpected(by me):\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/mirror/tst.py\", line 23, in <module>\r\n    a = A('c')\r\n  File \"<attrs generated init 090efc2f40404e910a622fb3a7382642c4cc7dba>\", line 9, in __init__\r\n  File \"/home/mirror/tst.py\", line 6, in validate_x\r\n    raise ValueError(f\"Unknown type: {value}\")\r\nValueError: Unknown type: c\r\n```\r\nReal:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/mirror/tst.py\", line 23, in <module>\r\n    a = A('c')\r\n  File \"<attrs generated init b58e3f79027d88b47fd9d82dccbb4d2f365e3754>\", line 7, in __init__\r\n  File \"/home/mirror/tst.py\", line 20, in init_detector\r\n    return self.map[self.name]\r\nKeyError: 'c'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/457", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/457/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/457/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/457/events", "html_url": "https://github.com/python-attrs/attrs/issues/457", "id": 374810304, "node_id": "MDU6SXNzdWUzNzQ4MTAzMDQ=", "number": 457, "title": "Using attrs with subclassing Process from multiprocessing (2.7)", "user": {"login": "surfingkaka", "id": 42520940, "node_id": "MDQ6VXNlcjQyNTIwOTQw", "avatar_url": "https://avatars1.githubusercontent.com/u/42520940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/surfingkaka", "html_url": "https://github.com/surfingkaka", "followers_url": "https://api.github.com/users/surfingkaka/followers", "following_url": "https://api.github.com/users/surfingkaka/following{/other_user}", "gists_url": "https://api.github.com/users/surfingkaka/gists{/gist_id}", "starred_url": "https://api.github.com/users/surfingkaka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/surfingkaka/subscriptions", "organizations_url": "https://api.github.com/users/surfingkaka/orgs", "repos_url": "https://api.github.com/users/surfingkaka/repos", "events_url": "https://api.github.com/users/surfingkaka/events{/privacy}", "received_events_url": "https://api.github.com/users/surfingkaka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-28T23:11:46Z", "updated_at": "2018-10-29T11:03:31Z", "closed_at": "2018-10-29T11:03:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here's sample code i cant get to work with attrs:\r\n\r\n```\r\nimport attr\r\nfrom multiprocessing import Process\r\n\r\n@attr.s()\r\nclass MyProcess(Process):\r\n      num = attr.ib()\r\n\r\n      def __attrs_post_init__(self):\r\n          super(MyProcess, self).__init__()\r\n\r\np = MyProcess(1)\r\np.start()\r\np.join()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/452", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/452/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/452/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/452/events", "html_url": "https://github.com/python-attrs/attrs/issues/452", "id": 370162081, "node_id": "MDU6SXNzdWUzNzAxNjIwODE=", "number": 452, "title": "Inheritance does not set typing of generics", "user": {"login": "wakemaster39", "id": 694131, "node_id": "MDQ6VXNlcjY5NDEzMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/694131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wakemaster39", "html_url": "https://github.com/wakemaster39", "followers_url": "https://api.github.com/users/wakemaster39/followers", "following_url": "https://api.github.com/users/wakemaster39/following{/other_user}", "gists_url": "https://api.github.com/users/wakemaster39/gists{/gist_id}", "starred_url": "https://api.github.com/users/wakemaster39/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wakemaster39/subscriptions", "organizations_url": "https://api.github.com/users/wakemaster39/orgs", "repos_url": "https://api.github.com/users/wakemaster39/repos", "events_url": "https://api.github.com/users/wakemaster39/events{/privacy}", "received_events_url": "https://api.github.com/users/wakemaster39/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-10-15T13:24:44Z", "updated_at": "2018-10-17T10:50:52Z", "closed_at": "2018-10-17T10:50:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I came up with a simple example below, basically when you have inheritance with a generic, the field type does not get updated with the generic.\r\n\r\nThis typically isn't an issue but when using cattrs library that depends on the annotations this cause breaking issues. \r\n\r\nIs there a way to force the update in some dunder method?\r\n\r\n```\r\nT = TypeVar('T')\r\n\r\n@attr.attrs(auto_attribs=True)\r\nclass A(Generic[T]):\r\n    a: T\r\n\r\n@attr.attrs(auto_attribs=True)\r\nclass B(A[int]):\r\n    pass\r\n\r\nprint(attr.fields(B))\r\n\r\nOutput:\r\n(Attribute(name='a', default=NOTHING, validator=None, repr=True, cmp=True, hash=None, init=True, metadata=mappingproxy({}), type=~T, converter=None, kw_only=False),)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/451", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/451/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/451/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/451/events", "html_url": "https://github.com/python-attrs/attrs/issues/451", "id": 368464608, "node_id": "MDU6SXNzdWUzNjg0NjQ2MDg=", "number": 451, "title": "Usage with defaultdict", "user": {"login": "surfingkaka", "id": 42520940, "node_id": "MDQ6VXNlcjQyNTIwOTQw", "avatar_url": "https://avatars1.githubusercontent.com/u/42520940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/surfingkaka", "html_url": "https://github.com/surfingkaka", "followers_url": "https://api.github.com/users/surfingkaka/followers", "following_url": "https://api.github.com/users/surfingkaka/following{/other_user}", "gists_url": "https://api.github.com/users/surfingkaka/gists{/gist_id}", "starred_url": "https://api.github.com/users/surfingkaka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/surfingkaka/subscriptions", "organizations_url": "https://api.github.com/users/surfingkaka/orgs", "repos_url": "https://api.github.com/users/surfingkaka/repos", "events_url": "https://api.github.com/users/surfingkaka/events{/privacy}", "received_events_url": "https://api.github.com/users/surfingkaka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-10T02:02:41Z", "updated_at": "2018-10-10T02:41:41Z", "closed_at": "2018-10-10T02:41:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "How do i initialize collections.defaultdict with set\r\n\r\n@attr.s\r\nclass Test(object):\r\n          my_var = attr.ib(default=attr.Factory(collections.defaultDict(set)))\r\n\r\nhttps://docs.python.org/2/library/collections.html#collections.defaultdict\r\n\r\nInitialize via :\r\n\r\nTest() -> fails\r\nTypeError: 'collections.defaultdict' object is not callable\r\n\r\nwhat is the appropriate way to initialize this instance ? \r\n\r\nthanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/450", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/450/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/450/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/450/events", "html_url": "https://github.com/python-attrs/attrs/issues/450", "id": 367928045, "node_id": "MDU6SXNzdWUzNjc5MjgwNDU=", "number": 450, "title": "init=False attributes which depend on keyword-only attributes are impossible", "user": {"login": "gabbard", "id": 7139661, "node_id": "MDQ6VXNlcjcxMzk2NjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/7139661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabbard", "html_url": "https://github.com/gabbard", "followers_url": "https://api.github.com/users/gabbard/followers", "following_url": "https://api.github.com/users/gabbard/following{/other_user}", "gists_url": "https://api.github.com/users/gabbard/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabbard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabbard/subscriptions", "organizations_url": "https://api.github.com/users/gabbard/orgs", "repos_url": "https://api.github.com/users/gabbard/repos", "events_url": "https://api.github.com/users/gabbard/events{/privacy}", "received_events_url": "https://api.github.com/users/gabbard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-10-08T19:46:03Z", "updated_at": "2018-11-24T12:03:29Z", "closed_at": "2018-11-24T12:03:29Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The initialization of an `init=False` attribute cannot (straightforwardly) depend on a `kw_only=True` attribute because there is no legal ordering of these two attributes.\r\n\r\n```python\r\nfrom attr import attrs, attrib\r\n\r\n\r\n@attrs\r\nclass BrokenInitFirst:\r\n    _to_init: str  = attrib(init=False)\r\n    kwarg: str = attrib(kw_only=True)\r\n\r\n    @_to_init.default\r\n    def _init_to_init(self) -> str:\r\n        return self.kwarg + \"foo\"\r\n\r\n\r\nBrokenInitFirst(kwarg=\"meep\")\r\n```\r\n\r\nproduces:\r\n\r\n```python\r\nAttributeError: 'BrokenInitFirst' object has no attribute 'kwarg'\r\n```\r\n\r\nwhile\r\n\r\n```python\r\nfrom attr import attrs, attrib\r\n\r\n\r\n@attrs\r\nclass BrokenKwArgFirst:\r\n    kwarg: str = attrib(kw_only=True)\r\n    _to_init: str = attrib(init=False)\r\n\r\n    @_to_init.default\r\n    def _init_to_init(self) -> str:\r\n        return self.kwarg + \"foo\"\r\n\r\n\r\nBrokenKwArgFirst(kwarg=\"meep\")\r\n```\r\n\r\nproduces\r\n\r\n```\r\n  File \"/Users/gabbard/anaconda3/envs/cwc-event/lib/python3.6/site-packages/attr/_make.py\", line 904, in attrs\r\n    return wrap(maybe_cls)\r\n  File \"/Users/gabbard/anaconda3/envs/cwc-event/lib/python3.6/site-packages/attr/_make.py\", line 855, in wrap\r\n    cache_hash,\r\n  File \"/Users/gabbard/anaconda3/envs/cwc-event/lib/python3.6/site-packages/attr/_make.py\", line 471, in __init__\r\n    cls, these, auto_attribs, kw_only\r\n  File \"/Users/gabbard/anaconda3/envs/cwc-event/lib/python3.6/site-packages/attr/_make.py\", line 416, in _transform_attrs\r\n    a=a\r\nValueError: Non keyword-only attributes are not allowed after a keyword-only attribute.  Attribute in question: Attribute(name='_to_init', default=Factory(factory=<function BrokenKwArgFirst._init_to_init at 0x10830df28>, takes_self=True), validator=None, repr=True, cmp=True, hash=None, init=False, metadata=mappingproxy({}), type=<class 'str'>, converter=None, kw_only=False)\r\n```\r\n\r\nThese examples can also be found in https://github.com/rgabbard/attrs-kwonly-init-bug\r\n\r\nThis is related to https://github.com/python-attrs/attrs/issues/448 . Assuming there is some sort of internal ordering of attributes which also controls their initialization order, I think the solution here is to sort `kw_only=True` attributes after `kw_only=False`, and `init=False` last of all.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/449", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/449/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/449/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/449/events", "html_url": "https://github.com/python-attrs/attrs/issues/449", "id": 365250668, "node_id": "MDU6SXNzdWUzNjUyNTA2Njg=", "number": 449, "title": "Consider inline type definitions or a stubs package", "user": {"login": "llchan", "id": 51099, "node_id": "MDQ6VXNlcjUxMDk5", "avatar_url": "https://avatars2.githubusercontent.com/u/51099?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llchan", "html_url": "https://github.com/llchan", "followers_url": "https://api.github.com/users/llchan/followers", "following_url": "https://api.github.com/users/llchan/following{/other_user}", "gists_url": "https://api.github.com/users/llchan/gists{/gist_id}", "starred_url": "https://api.github.com/users/llchan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llchan/subscriptions", "organizations_url": "https://api.github.com/users/llchan/orgs", "repos_url": "https://api.github.com/users/llchan/repos", "events_url": "https://api.github.com/users/llchan/events{/privacy}", "received_events_url": "https://api.github.com/users/llchan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-30T18:53:02Z", "updated_at": "2018-10-01T04:53:20Z", "closed_at": "2018-10-01T04:53:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "With the 18.2.0 release, a few new arguments were added to e.g. `attr.s`, and those are not reflected in the typeshed repo yet. The stance in the typeshed repo is to avoid version-specific signatures (see https://github.com/python/typeshed/issues/153), but rather to defer that to inline pyi files in the package itself or stub packages (see [PEP 561](https://www.python.org/dev/peps/pep-0561/)).\r\n\r\nWould we be open to including attrs type definitions in pyi files here? If not, perhaps we could package them into a attrs-stubs package? Either way, I think it would be beneficial to include the files in this repo so that the changes are version controlled together.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/448", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/448/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/448/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/448/events", "html_url": "https://github.com/python-attrs/attrs/issues/448", "id": 365231683, "node_id": "MDU6SXNzdWUzNjUyMzE2ODM=", "number": 448, "title": "Allow keyword-only attributes before positional attributes", "user": {"login": "oakkitten", "id": 1710718, "node_id": "MDQ6VXNlcjE3MTA3MTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1710718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oakkitten", "html_url": "https://github.com/oakkitten", "followers_url": "https://api.github.com/users/oakkitten/followers", "following_url": "https://api.github.com/users/oakkitten/following{/other_user}", "gists_url": "https://api.github.com/users/oakkitten/gists{/gist_id}", "starred_url": "https://api.github.com/users/oakkitten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oakkitten/subscriptions", "organizations_url": "https://api.github.com/users/oakkitten/orgs", "repos_url": "https://api.github.com/users/oakkitten/repos", "events_url": "https://api.github.com/users/oakkitten/events{/privacy}", "received_events_url": "https://api.github.com/users/oakkitten/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428248824, "node_id": "MDU6TGFiZWw0MjgyNDg4MjQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Feature", "name": "Feature", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-30T15:01:41Z", "updated_at": "2019-08-21T08:16:13Z", "closed_at": "2019-08-21T08:16:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to be able to write both `Message(\"message\", timestamp=time.time())` and `Message(\"message\")`, where `timestamp` is an attribute of a base class. Currently the following code:\r\n\r\n    @attrs\r\n    class Base:\r\n        timestamp = attrib(kw_only=True, default=None)\r\n\r\n\r\n    @attrs\r\n    class Message(Base):\r\n        message = attrib()\r\n\r\nproduces the following error:\r\n\r\n    ValueError: Non keyword-only attributes are not allowed after a keyword-only attribute.\r\n\r\nAs `timestamp` is keyword-*only*, it, as far as I understand, does not pose an ordering issue.\r\n\r\n(In my particular use-case, I have a bunch of `Message`s that are convenient to create using positional arguments, but the `timestamp` field is not always meaningful, e.g. for outgoing messages)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/447", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/447/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/447/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/447/events", "html_url": "https://github.com/python-attrs/attrs/issues/447", "id": 365221912, "node_id": "MDU6SXNzdWUzNjUyMjE5MTI=", "number": 447, "title": "Little docu bug", "user": {"login": "AXGKl", "id": 9989548, "node_id": "MDQ6VXNlcjk5ODk1NDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/9989548?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AXGKl", "html_url": "https://github.com/AXGKl", "followers_url": "https://api.github.com/users/AXGKl/followers", "following_url": "https://api.github.com/users/AXGKl/following{/other_user}", "gists_url": "https://api.github.com/users/AXGKl/gists{/gist_id}", "starred_url": "https://api.github.com/users/AXGKl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AXGKl/subscriptions", "organizations_url": "https://api.github.com/users/AXGKl/orgs", "repos_url": "https://api.github.com/users/AXGKl/repos", "events_url": "https://api.github.com/users/AXGKl/events{/privacy}", "received_events_url": "https://api.github.com/users/AXGKl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-30T12:44:31Z", "updated_at": "2018-10-05T14:50:55Z", "closed_at": "2018-10-05T14:50:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Too small for a PR (afraid to make sth wrong):\r\n\r\n```diff\r\n~/Documents/GitHub/attrs/docs $ git diff\r\ndiff --git a/docs/extending.rst b/docs/extending.rst\r\nindex 11f2a74..7b185e8 100644\r\n--- a/docs/extending.rst\r\n+++ b/docs/extending.rst\r\n@@ -13,6 +13,7 @@ So it is fairly simple to build your own decorators on top of ``attrs``:\r\n    >>> import attr\r\n    >>> def print_attrs(cls):\r\n    ...     print(cls.__attrs_attrs__)\r\n+   ...     return cls\r\n    >>> @print_attrs\r\n    ... @attr.s\r\n    ... class C(object):\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/445", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/445/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/445/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/445/events", "html_url": "https://github.com/python-attrs/attrs/issues/445", "id": 360634768, "node_id": "MDU6SXNzdWUzNjA2MzQ3Njg=", "number": 445, "title": "Add new feature to adapt values (improved converter)", "user": {"login": "tds333", "id": 16591769, "node_id": "MDQ6VXNlcjE2NTkxNzY5", "avatar_url": "https://avatars3.githubusercontent.com/u/16591769?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tds333", "html_url": "https://github.com/tds333", "followers_url": "https://api.github.com/users/tds333/followers", "following_url": "https://api.github.com/users/tds333/following{/other_user}", "gists_url": "https://api.github.com/users/tds333/gists{/gist_id}", "starred_url": "https://api.github.com/users/tds333/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tds333/subscriptions", "organizations_url": "https://api.github.com/users/tds333/orgs", "repos_url": "https://api.github.com/users/tds333/repos", "events_url": "https://api.github.com/users/tds333/events{/privacy}", "received_events_url": "https://api.github.com/users/tds333/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428248824, "node_id": "MDU6TGFiZWw0MjgyNDg4MjQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Feature", "name": "Feature", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2018-09-16T12:27:44Z", "updated_at": "2018-12-02T05:42:40Z", "closed_at": "2018-11-28T19:19:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI have used attrs for lot of stuff and it is very useful package. Thx.\r\nBut sometimes I had the need to do a little bit more in a converter.\r\nA converter takes only the value and the return value is assigned to the attribute.\r\nI needed something like adaptor where the function receives the class, Attribute, value and the return value is assigned to the attribute.\r\n\r\n```\r\ndef my_adapter(cls, attribute, value):\r\n...\r\nResult is assigned to the instance attribute\r\n```\r\n\r\nI missused the validator to do what I want. But I think it is not the right way to do it.\r\n\r\nFull example of use case, where I missuse a validator to do the work:\r\n```\r\nfrom functools import partial\r\nimport attr\r\n\r\n\r\ndef default_typer(inst, attribute, value):\r\n    if value is None:\r\n        value = attribute.default\r\n    value = attribute.type(value)\r\n    setattr(inst, attribute.name, value)\r\n\r\n\r\ncfg_attr = partial(attr.ib, validator=default_typer)\r\n\r\n\r\n@attr.s\r\nclass FeatureConfig:\r\n    a = cfg_attr(default=False, type=bool)\r\n    b = cfg_attr(default=11, type=int)\r\n\r\n\r\ndef main():\r\n    default_fc = FeatureConfig()\r\n    print(default_fc)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/444", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/444/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/444/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/444/events", "html_url": "https://github.com/python-attrs/attrs/issues/444", "id": 360408434, "node_id": "MDU6SXNzdWUzNjA0MDg0MzQ=", "number": 444, "title": "Filter list of objects by attributes values", "user": {"login": "avoine", "id": 192043, "node_id": "MDQ6VXNlcjE5MjA0Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/192043?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avoine", "html_url": "https://github.com/avoine", "followers_url": "https://api.github.com/users/avoine/followers", "following_url": "https://api.github.com/users/avoine/following{/other_user}", "gists_url": "https://api.github.com/users/avoine/gists{/gist_id}", "starred_url": "https://api.github.com/users/avoine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avoine/subscriptions", "organizations_url": "https://api.github.com/users/avoine/orgs", "repos_url": "https://api.github.com/users/avoine/repos", "events_url": "https://api.github.com/users/avoine/events{/privacy}", "received_events_url": "https://api.github.com/users/avoine/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428248824, "node_id": "MDU6TGFiZWw0MjgyNDg4MjQ=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Feature", "name": "Feature", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-14T18:27:07Z", "updated_at": "2018-11-28T18:43:00Z", "closed_at": "2018-11-28T18:43:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would is possible to add a mecanism to filter objects like it is for asdict and astuple but that returns\r\nmatching objects instead of attributes and values?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/442", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/442/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/442/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/442/events", "html_url": "https://github.com/python-attrs/attrs/issues/442", "id": 357141481, "node_id": "MDU6SXNzdWUzNTcxNDE0ODE=", "number": 442, "title": "PEP 526 type annotations does not passed to type field of attribute", "user": {"login": "whalebot-helmsman", "id": 1234272, "node_id": "MDQ6VXNlcjEyMzQyNzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1234272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whalebot-helmsman", "html_url": "https://github.com/whalebot-helmsman", "followers_url": "https://api.github.com/users/whalebot-helmsman/followers", "following_url": "https://api.github.com/users/whalebot-helmsman/following{/other_user}", "gists_url": "https://api.github.com/users/whalebot-helmsman/gists{/gist_id}", "starred_url": "https://api.github.com/users/whalebot-helmsman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whalebot-helmsman/subscriptions", "organizations_url": "https://api.github.com/users/whalebot-helmsman/orgs", "repos_url": "https://api.github.com/users/whalebot-helmsman/repos", "events_url": "https://api.github.com/users/whalebot-helmsman/events{/privacy}", "received_events_url": "https://api.github.com/users/whalebot-helmsman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-05T09:25:47Z", "updated_at": "2018-09-05T09:47:02Z", "closed_at": "2018-09-05T09:47:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "It is may be not an issue. May be, I read documentation wrong. But\r\n\r\nThere is a statement in documentation\r\n>The type of the attribute. In Python 3.6 or greater, the preferred method to specify the type is using a variable annotation (see PEP 526). This argument is provided for backward compatibility. Regardless of the approach used, the type will be stored on Attribute.type.\r\n\r\nFor a simple program\r\n\r\n```\r\nimport attr\r\n\r\n@attr.s\r\nclass Smth:\r\n    a = attr.ib(default=5) # type: int\r\n\r\n\r\nprint({a.name:a.type for a in attr.fields(Smth)})\r\n```\r\nI got \r\n```\r\n{'a': None}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/441", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/441/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/441/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/441/events", "html_url": "https://github.com/python-attrs/attrs/issues/441", "id": 356758340, "node_id": "MDU6SXNzdWUzNTY3NTgzNDA=", "number": 441, "title": "Can we enable `disallow_any_generics` in mypy checks", "user": {"login": "tailhook", "id": 321799, "node_id": "MDQ6VXNlcjMyMTc5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/321799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tailhook", "html_url": "https://github.com/tailhook", "followers_url": "https://api.github.com/users/tailhook/followers", "following_url": "https://api.github.com/users/tailhook/following{/other_user}", "gists_url": "https://api.github.com/users/tailhook/gists{/gist_id}", "starred_url": "https://api.github.com/users/tailhook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tailhook/subscriptions", "organizations_url": "https://api.github.com/users/tailhook/orgs", "repos_url": "https://api.github.com/users/tailhook/repos", "events_url": "https://api.github.com/users/tailhook/events{/privacy}", "received_events_url": "https://api.github.com/users/tailhook/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-04T10:59:58Z", "updated_at": "2018-10-19T08:11:42Z", "closed_at": "2018-10-19T08:11:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Here is what mypy shows:\r\n```\r\nsrc/attr/__init__.pyi:26: error: Missing type parameters for generic type\r\nsrc/attr/__init__.pyi:28: error: Missing type parameters for generic type\r\nsrc/attr/__init__.pyi:32: error: Missing type parameters for generic type\r\nsrc/attr/__init__.pyi:51: error: Missing type parameters for generic type\r\nsrc/attr/__init__.pyi:60: error: Missing type parameters for generic type\r\nsrc/attr/__init__.pyi:61: error: Missing type parameters for generic type\r\nsrc/attr/__init__.pyi:62: error: Missing type parameters for generic type\r\nsrc/attr/__init__.pyi:63: error: Missing type parameters for generic type\r\nsrc/attr/__init__.pyi:108: error: Missing type parameters for generic type\r\nsrc/attr/__init__.pyi:125: error: Missing type parameters for generic type\r\nsrc/attr/__init__.pyi:142: error: Missing type parameters for generic type\r\nsrc/attr/__init__.pyi:190: error: Missing type parameters for generic type\r\nsrc/attr/__init__.pyi:191: error: Missing type parameters for generic type\r\nsrc/attr/__init__.pyi:194: error: Missing type parameters for generic type\r\nsrc/attr/__init__.pyi:236: error: Missing type parameters for generic type\r\nsrc/attr/validators.pyi:8: error: Missing type parameters for generic type\r\nsrc/attr/validators.pyi:9: error: Missing type parameters for generic type\r\nsrc/attr/validators.pyi:11: error: Missing type parameters for generic type\r\nsrc/attr/validators.pyi:12: error: Missing type parameters for generic type\r\nsrc/attr/validators.pyi:13: error: Missing type parameters for generic type\r\nsrc/attr/validators.pyi:14: error: Missing type parameters for generic type\r\nsrc/attr/validators.pyi:26: error: Missing type parameters for generic type\r\nsrc/attr/filters.pyi:4: error: Missing type parameters for generic type\r\nsrc/attr/filters.pyi:5: error: Missing type parameters for generic type\r\nsrc/attr/filters.pyi:28: error: Missing type parameters for generic type\r\n```\r\nConfig is:\r\n```\r\n[mypy]\r\ncheck_untyped_defs = True\r\ndisallow_any_generics = True\r\ndisallow_untyped_defs = True\r\nfollow_imports = silent\r\nstrict_optional = True\r\nwarn_redundant_casts = True\r\nwarn_unused_ignores = True\r\n```\r\nMypy is 0.620\r\n\r\nCan these be fixed or there is some limitation in current mypy (i.e. #421 )?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/439", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/439/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/439/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/439/events", "html_url": "https://github.com/python-attrs/attrs/issues/439", "id": 355255149, "node_id": "MDU6SXNzdWUzNTUyNTUxNDk=", "number": 439, "title": "Improve documentation of attr.ib type parameter", "user": {"login": "skewty", "id": 9087223, "node_id": "MDQ6VXNlcjkwODcyMjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/9087223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skewty", "html_url": "https://github.com/skewty", "followers_url": "https://api.github.com/users/skewty/followers", "following_url": "https://api.github.com/users/skewty/following{/other_user}", "gists_url": "https://api.github.com/users/skewty/gists{/gist_id}", "starred_url": "https://api.github.com/users/skewty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skewty/subscriptions", "organizations_url": "https://api.github.com/users/skewty/orgs", "repos_url": "https://api.github.com/users/skewty/repos", "events_url": "https://api.github.com/users/skewty/events{/privacy}", "received_events_url": "https://api.github.com/users/skewty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-29T17:13:59Z", "updated_at": "2018-09-01T04:29:07Z", "closed_at": "2018-09-01T04:29:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "After reading through the documentation it is still unclear to me what the `type` parameter of `attr.ib` does.  Is it **only** for type hinting?  There is no mention of how it is leveraged by the `validator` and `converter` parameters.  It seems to be a mystery field with no relationship to any other feature or code.\r\n\r\nGiven the following code:\r\n```python\r\nimport attr\r\n\r\n@attr.s\r\nclass Foo:\r\n    bar = attr.ib(type=str)\r\n```\r\n\r\nI would expect the following to not be valid:   ` foo = Foo(12)`\r\nI also expect the following to not be valid: `attr.validate(foo)`\r\n\r\nSince both are \"valid\", what value did that type parameter give me?\r\n\r\nMy expectation would be that when the `type=` field is provided a default `isinstance()` validator is applied.  Additionally, it wouldn't be a stretch to assume a default converter is applied.\r\n\r\n```python\r\nimport attr\r\n\r\n@attr.s\r\nclass Bar:\r\n    x = attr.ib(type=int)\r\n```\r\n\r\nOne might expect:   `bar = Bar('12')` to be valid since `int('12')` is valid.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/429", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/429/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/429/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/429/events", "html_url": "https://github.com/python-attrs/attrs/issues/429", "id": 352339912, "node_id": "MDU6SXNzdWUzNTIzMzk5MTI=", "number": 429, "title": "Exception when using auto_attribs and a attribute named property", "user": {"login": "dstufft", "id": 145979, "node_id": "MDQ6VXNlcjE0NTk3OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/145979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dstufft", "html_url": "https://github.com/dstufft", "followers_url": "https://api.github.com/users/dstufft/followers", "following_url": "https://api.github.com/users/dstufft/following{/other_user}", "gists_url": "https://api.github.com/users/dstufft/gists{/gist_id}", "starred_url": "https://api.github.com/users/dstufft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dstufft/subscriptions", "organizations_url": "https://api.github.com/users/dstufft/orgs", "repos_url": "https://api.github.com/users/dstufft/repos", "events_url": "https://api.github.com/users/dstufft/events{/privacy}", "received_events_url": "https://api.github.com/users/dstufft/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/python-attrs/attrs/milestones/8", "html_url": "https://github.com/python-attrs/attrs/milestone/8", "labels_url": "https://api.github.com/repos/python-attrs/attrs/milestones/8/labels", "id": 3493863, "node_id": "MDk6TWlsZXN0b25lMzQ5Mzg2Mw==", "number": 8, "title": "18.2", "description": "", "creator": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 7, "state": "closed", "created_at": "2018-07-13T10:19:22Z", "updated_at": "2018-09-01T05:07:38Z", "due_on": null, "closed_at": "2018-08-27T12:01:43Z"}, "comments": 1, "created_at": "2018-08-21T00:16:45Z", "updated_at": "2018-08-21T04:42:47Z", "closed_at": "2018-08-21T04:42:47Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Given a class like:\r\n\r\n```python\r\n@attr.s(auto_attribs=True)\r\nclass Foo:\r\n\r\n    property: str\r\n    other: str\r\n```\r\n\r\nAttrs is raising an exception:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"f.py\", line 13, in <module>\r\n    @attr.s(auto_attribs=True)\r\n  File \"/usr/local/lib/python3.6/site-packages/attr/_make.py\", line 729, in wrap\r\n    builder = _ClassBuilder(cls, these, slots, frozen, auto_attribs)\r\n  File \"/usr/local/lib/python3.6/site-packages/attr/_make.py\", line 409, in __init__\r\n    cls, these, auto_attribs\r\n  File \"/usr/local/lib/python3.6/site-packages/attr/_make.py\", line 354, in _transform_attrs\r\n    AttrsClass = _make_attr_tuple_class(cls.__name__, attr_names)\r\n  File \"/usr/local/lib/python3.6/site-packages/attr/_make.py\", line 220, in _make_attr_tuple_class\r\n    eval(compile(\"\\n\".join(attr_class_template), \"\", \"exec\"), globs)\r\n  File \"\", line 1, in <module>\r\n  File \"\", line 4, in BreaksAttributes\r\nTypeError: 'property' object is not callable\r\n```\r\n\r\nWhat's odd here, is that it works fine as long as property is the *last* item in the class, e.g.:\r\n\r\n```python\r\n@attr.s(auto_attribs=True)\r\nclass Foo:\r\n\r\n    other: str\r\n    property: str\r\n```\r\n\r\nthis works fine and doesn't raise an error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/428", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/428/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/428/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/428/events", "html_url": "https://github.com/python-attrs/attrs/issues/428", "id": 352301969, "node_id": "MDU6SXNzdWUzNTIzMDE5Njk=", "number": 428, "title": "MRO vs. inherited attributes", "user": {"login": "galcik", "id": 13840348, "node_id": "MDQ6VXNlcjEzODQwMzQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/13840348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/galcik", "html_url": "https://github.com/galcik", "followers_url": "https://api.github.com/users/galcik/followers", "following_url": "https://api.github.com/users/galcik/following{/other_user}", "gists_url": "https://api.github.com/users/galcik/gists{/gist_id}", "starred_url": "https://api.github.com/users/galcik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/galcik/subscriptions", "organizations_url": "https://api.github.com/users/galcik/orgs", "repos_url": "https://api.github.com/users/galcik/repos", "events_url": "https://api.github.com/users/galcik/events{/privacy}", "received_events_url": "https://api.github.com/users/galcik/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 170915650, "node_id": "MDU6TGFiZWwxNzA5MTU2NTA=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/python-attrs/attrs/milestones/12", "html_url": "https://github.com/python-attrs/attrs/milestone/12", "labels_url": "https://api.github.com/repos/python-attrs/attrs/milestones/12/labels", "id": 5174342, "node_id": "MDk6TWlsZXN0b25lNTE3NDM0Mg==", "number": 12, "title": "20.1.0", "description": "", "creator": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 8, "state": "open", "created_at": "2020-03-06T09:42:38Z", "updated_at": "2020-08-13T11:49:45Z", "due_on": null, "closed_at": null}, "comments": 4, "created_at": "2018-08-20T21:24:17Z", "updated_at": "2020-04-06T09:42:25Z", "closed_at": "2020-04-06T09:41:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "The way how attributes are collected from super classes is different comparing to how attributes and methods are searched by `getattr` (based on MRO for new-style classes).\r\n\r\nExample:\r\n```python\r\n@attr.s\r\nclass A(object):\r\n\r\n    x = attr.ib(10)\r\n\r\n    def xx(self):\r\n        return 10\r\n\r\n\r\n@attr.s\r\nclass B(A):\r\n    y = attr.ib(20)\r\n\r\n\r\n@attr.s\r\nclass C(A):\r\n    x = attr.ib(50)\r\n\r\n    def xx(self):\r\n        return 50\r\n\r\n\r\nclass D(B, C):\r\n    pass\r\n\r\n\r\nd = D()\r\nprint(d.x)  # prints 10\r\nprint(d.xx())  # prints 50\r\n```\r\n\r\nI think it would be great to the use the same approach for collecting attributes as used for searching methods and attributes. \r\n\r\nThe difference is caused by the fact that the function `_transform_attrs` in `attrs/_make.py` considers all attributes (own+inherited stored in `__attrs_attrs__`) and not only own attributes of super classes: https://github.com/python-attrs/attrs/blob/6a07b035b77ea8756408d65a36160f8670c66933/src/attr/_make.py#L367-L368", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/427", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/427/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/427/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/427/events", "html_url": "https://github.com/python-attrs/attrs/issues/427", "id": 352065933, "node_id": "MDU6SXNzdWUzNTIwNjU5MzM=", "number": 427, "title": "attr.ib cleanup + auto_attribs + class vars from superclasses", "user": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/python-attrs/attrs/milestones/8", "html_url": "https://github.com/python-attrs/attrs/milestone/8", "labels_url": "https://api.github.com/repos/python-attrs/attrs/milestones/8/labels", "id": 3493863, "node_id": "MDk6TWlsZXN0b25lMzQ5Mzg2Mw==", "number": 8, "title": "18.2", "description": "", "creator": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 7, "state": "closed", "created_at": "2018-07-13T10:19:22Z", "updated_at": "2018-09-01T05:07:38Z", "due_on": null, "closed_at": "2018-08-27T12:01:43Z"}, "comments": 1, "created_at": "2018-08-20T10:02:17Z", "updated_at": "2018-08-27T11:33:41Z", "closed_at": "2018-08-27T11:33:41Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Consider the following:\r\n\r\n```python\r\nimport attr\r\n\r\nclass Base:\r\n    x = 0\r\n\r\n@attr.s(auto_attribs=True)\r\nclass C(Base):\r\n    x: int\r\n```\r\n\r\nThis raises an:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"t.py\", line 9, in <module>\r\n    class C(Base):\r\n  File \"/Users/hynek/Projects/attrs/src/attr/_make.py\", line 858, in wrap\r\n    return builder.build_class()\r\n  File \"/Users/hynek/Projects/attrs/src/attr/_make.py\", line 496, in build_class\r\n    return self._patch_original_class()\r\n  File \"/Users/hynek/Projects/attrs/src/attr/_make.py\", line 514, in _patch_original_class\r\n    delattr(cls, name)\r\nAttributeError: x\r\n```\r\n\r\n(interestingly `getattr(cls, name)` works but `delattr` does not)\r\n\r\nThis is actually quite common if you implement an ABC. The current code is:\r\n\r\n```python\r\n                if (\r\n                    name not in super_names\r\n                    and getattr(cls, name, None) is not None\r\n                ):\r\n                    delattr(cls, name)\r\n```\r\n\r\nMaybe we should change the check to `isinstance(getattr(cls, name, None), _CountingAttr)`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/423", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/423/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/423/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/423/events", "html_url": "https://github.com/python-attrs/attrs/issues/423", "id": 349585274, "node_id": "MDU6SXNzdWUzNDk1ODUyNzQ=", "number": 423, "title": "Caching hashcodes", "user": {"login": "gabbard", "id": 7139661, "node_id": "MDQ6VXNlcjcxMzk2NjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/7139661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabbard", "html_url": "https://github.com/gabbard", "followers_url": "https://api.github.com/users/gabbard/followers", "following_url": "https://api.github.com/users/gabbard/following{/other_user}", "gists_url": "https://api.github.com/users/gabbard/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabbard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabbard/subscriptions", "organizations_url": "https://api.github.com/users/gabbard/orgs", "repos_url": "https://api.github.com/users/gabbard/repos", "events_url": "https://api.github.com/users/gabbard/events{/privacy}", "received_events_url": "https://api.github.com/users/gabbard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-08-10T16:46:26Z", "updated_at": "2018-10-22T18:43:50Z", "closed_at": "2018-10-22T18:43:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We currently have an application which is a heavy user of attrs.  For certain operations, a majority of the application's time is being spent in the hash method of attrs objects.  The frozen attrs objects in question are complex and themselves contain other frozen attrs objects as fields (this goes several layers deep).  Being able to cache the hash code value by user request at upper levels of this object tree ((like `prehash` in [Immutables](https://immutables.github.io/immutable.html))) would lead to a significant performance improvement for us.\r\n\r\nIssue https://github.com/python-attrs/attrs/issues/261 discussed some performance issues with hashing and touched on this.  However, this idea seemed to get lost in the following discussion, which is now closed, so it seems worth moving to its own issue.\r\n\r\nOn that issue @DRMacIver suggested the following:\r\n* Add a `memoize_hash` flag to `attr.s` defaulting to `None`.\r\n* When `memoize_hash` is `True`, store the hash on a field called `__hash`.\r\n* If hash is `False` (or inferred `False` from a default) it is an error to pass non-`None` `memoize_hash`\r\n* If `slots` and `memoize_hash` are both `True`, add a bonus `__hash` slot to the class to store it.\r\n* If hash is `True`, `memoize_hash` defaults to `frozen` and not `slots`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/422", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/422/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/422/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/422/events", "html_url": "https://github.com/python-attrs/attrs/issues/422", "id": 348452780, "node_id": "MDU6SXNzdWUzNDg0NTI3ODA=", "number": 422, "title": "How to get @property methods in asdict", "user": {"login": "supritashankar", "id": 1830172, "node_id": "MDQ6VXNlcjE4MzAxNzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1830172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/supritashankar", "html_url": "https://github.com/supritashankar", "followers_url": "https://api.github.com/users/supritashankar/followers", "following_url": "https://api.github.com/users/supritashankar/following{/other_user}", "gists_url": "https://api.github.com/users/supritashankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/supritashankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/supritashankar/subscriptions", "organizations_url": "https://api.github.com/users/supritashankar/orgs", "repos_url": "https://api.github.com/users/supritashankar/repos", "events_url": "https://api.github.com/users/supritashankar/events{/privacy}", "received_events_url": "https://api.github.com/users/supritashankar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-07T19:17:37Z", "updated_at": "2018-08-07T19:57:26Z", "closed_at": "2018-08-07T19:57:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have something like this\r\n```\r\n   @attrs\r\n   class Foo():\r\n       max_count = attrib()\r\n       @property\r\n       def get_max_plus_one(self):\r\n           return self.max_count + 1\r\n```\r\n\r\nf = Foo(max_count=2)\r\nf.get_max_plus_one =>3\r\n\r\nI want to convert this to dict\r\n\r\n`{'max_count':2, 'get_max_plus_one':3}`\r\nWhen I used `attr.asdict(f)` I do not get the `@property`. I get only `{'max_count':2}`\r\n\r\nWhat is the cleanest way to achieve the above", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/421", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/421/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/421/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/421/events", "html_url": "https://github.com/python-attrs/attrs/issues/421", "id": 347771152, "node_id": "MDU6SXNzdWUzNDc3NzExNTI=", "number": 421, "title": "Ship attrs mypy plugin ourselves", "user": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 428248917, "node_id": "MDU6TGFiZWw0MjgyNDg5MTc=", "url": "https://api.github.com/repos/python-attrs/attrs/labels/Cleanup", "name": "Cleanup", "color": "006b75", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-08-06T04:02:00Z", "updated_at": "2019-02-02T13:56:02Z", "closed_at": "2019-02-02T13:56:02Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I don\u2019t know how far this is aspirational, but https://github.com/python/mypy/issues/3916 gives me some hope?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-attrs/attrs/issues/415", "repository_url": "https://api.github.com/repos/python-attrs/attrs", "labels_url": "https://api.github.com/repos/python-attrs/attrs/issues/415/labels{/name}", "comments_url": "https://api.github.com/repos/python-attrs/attrs/issues/415/comments", "events_url": "https://api.github.com/repos/python-attrs/attrs/issues/415/events", "html_url": "https://github.com/python-attrs/attrs/issues/415", "id": 345454297, "node_id": "MDU6SXNzdWUzNDU0NTQyOTc=", "number": 415, "title": "Note in our stubs re PyCharm", "user": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-07-28T14:53:39Z", "updated_at": "2018-08-29T18:29:58Z", "closed_at": "2018-08-29T18:20:12Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Our stubs have currently this block:\r\n\r\n```\r\n# NOTE: We had several choices for the annotation to use for type arg:\r\n# 1) Type[_T]\r\n#   - Pros: works in PyCharm without plugin support\r\n#   - Cons: produces less informative error in the case of conflicting TypeVars\r\n#     e.g. `attr.ib(default='bad', type=int)`\r\n# 2) Callable[..., _T]\r\n#   - Pros: more informative errors than #1\r\n#   - Cons: validator tests results in confusing error.\r\n#     e.g. `attr.ib(type=int, validator=validate_str)`\r\n# 3) type (and do all of the work in the mypy plugin)\r\n#   - Pros: in mypy, the behavior of type argument is exactly the same as with\r\n#     annotations.\r\n#   - Cons: completely disables type inspections in PyCharm when using the\r\n#     type arg.\r\n# We chose option #1 until either PyCharm adds support for attrs, or python 2\r\n# reaches EOL.\r\n```\r\n\r\nPyCharm now *does* support attrs. Should we do something about it before releasing the stubs for the first time or is it fine as it is?\r\n\r\ncc @euresti @chadrik  (sorry\u2026)", "performed_via_github_app": null, "score": 1.0}]}