{"total_count": 54, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/Suor/funcy/issues/92", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/92/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/92/events", "html_url": "https://github.com/Suor/funcy/issues/92", "id": 611762730, "node_id": "MDU6SXNzdWU2MTE3NjI3MzA=", "number": 92, "title": "map compose shortcut?", "user": {"login": "Granitosaurus", "id": 5476164, "node_id": "MDQ6VXNlcjU0NzYxNjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/5476164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Granitosaurus", "html_url": "https://github.com/Granitosaurus", "followers_url": "https://api.github.com/users/Granitosaurus/followers", "following_url": "https://api.github.com/users/Granitosaurus/following{/other_user}", "gists_url": "https://api.github.com/users/Granitosaurus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Granitosaurus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Granitosaurus/subscriptions", "organizations_url": "https://api.github.com/users/Granitosaurus/orgs", "repos_url": "https://api.github.com/users/Granitosaurus/repos", "events_url": "https://api.github.com/users/Granitosaurus/events{/privacy}", "received_events_url": "https://api.github.com/users/Granitosaurus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-04T10:20:42Z", "updated_at": "2020-05-08T09:13:46Z", "closed_at": "2020-05-07T05:51:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Map compose is a very useful function for processing datasets however the current implementation that I could figure out is a bit ugly:\r\n\r\n```\r\nfrom funcy import lmap, partial\r\ndata = ['one\\n', ' two']\r\n\r\n# uppercase and strip every element of a list\r\nfunc = partial(lmap, compose(str.upper, str.strip))\r\n\r\nfunc(data)\r\n# ['One', 'Two']\r\n```\r\n\r\nIs there a way to streamline this? Ideal the syntax would be:\r\n\r\n```\r\nfunc = map_compose(str.upper, str.strip)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/90", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/90/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/90/events", "html_url": "https://github.com/Suor/funcy/issues/90", "id": 596186923, "node_id": "MDU6SXNzdWU1OTYxODY5MjM=", "number": 90, "title": "Add type annotations", "user": {"login": "rmorshea", "id": 4041990, "node_id": "MDQ6VXNlcjQwNDE5OTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/4041990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmorshea", "html_url": "https://github.com/rmorshea", "followers_url": "https://api.github.com/users/rmorshea/followers", "following_url": "https://api.github.com/users/rmorshea/following{/other_user}", "gists_url": "https://api.github.com/users/rmorshea/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmorshea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmorshea/subscriptions", "organizations_url": "https://api.github.com/users/rmorshea/orgs", "repos_url": "https://api.github.com/users/rmorshea/repos", "events_url": "https://api.github.com/users/rmorshea/events{/privacy}", "received_events_url": "https://api.github.com/users/rmorshea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-07T22:22:37Z", "updated_at": "2020-07-20T09:44:56Z", "closed_at": "2020-04-08T04:17:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Type annotations on this library would be great :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/88", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/88/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/88/events", "html_url": "https://github.com/Suor/funcy/issues/88", "id": 589633158, "node_id": "MDU6SXNzdWU1ODk2MzMxNTg=", "number": 88, "title": "Question: should numpy arrays support be incorporated or streamlined?", "user": {"login": "javadba", "id": 410769, "node_id": "MDQ6VXNlcjQxMDc2OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/410769?v=4", "gravatar_id": "", "url": "https://api.github.com/users/javadba", "html_url": "https://github.com/javadba", "followers_url": "https://api.github.com/users/javadba/followers", "following_url": "https://api.github.com/users/javadba/following{/other_user}", "gists_url": "https://api.github.com/users/javadba/gists{/gist_id}", "starred_url": "https://api.github.com/users/javadba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/javadba/subscriptions", "organizations_url": "https://api.github.com/users/javadba/orgs", "repos_url": "https://api.github.com/users/javadba/repos", "events_url": "https://api.github.com/users/javadba/events{/privacy}", "received_events_url": "https://api.github.com/users/javadba/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-28T18:32:39Z", "updated_at": "2020-04-08T04:18:10Z", "closed_at": "2020-04-08T04:17:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a small function always available to me:\r\n\r\n      `def lmap(fn,lst):   return list(map(fn,lst))`\r\n\r\nSo then given `numpy` arrays  `coll1,coll2,coll3`  we can use this library as:\r\n\r\n     merge(lmap(lambda x: x.tolist(),[coll1,coll2,coll3]))\r\n\r\nGiven that my primary intention for this library is to apply it to numpy.array's is there a possible way to cleanly introduce that conversion (along the lines of scala implicits)  so that it would be automatically \"picked up\" and applied to any of the methods in the library?  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/85", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/85/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/85/events", "html_url": "https://github.com/Suor/funcy/issues/85", "id": 541298039, "node_id": "MDU6SXNzdWU1NDEyOTgwMzk=", "number": 85, "title": "Fix simple typo: overriden -> overridden", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-21T07:52:13Z", "updated_at": "2020-01-02T14:39:38Z", "closed_at": "2020-01-02T14:39:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a small typo in funcy/colls.py.\nShould read `overridden` rather than `overriden`.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/83", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/83/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/83/events", "html_url": "https://github.com/Suor/funcy/issues/83", "id": 541280703, "node_id": "MDU6SXNzdWU1NDEyODA3MDM=", "number": 83, "title": "Fix simple typo: accesssed -> accessed", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-21T04:21:34Z", "updated_at": "2019-12-21T04:27:03Z", "closed_at": "2019-12-21T04:27:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a small typo in funcy/objects.py.\nShould read `accessed` rather than `accesssed`.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/81", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/81/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/81/events", "html_url": "https://github.com/Suor/funcy/issues/81", "id": 529864319, "node_id": "MDU6SXNzdWU1Mjk4NjQzMTk=", "number": 81, "title": "Create thread-safe @cached_property ", "user": {"login": "pared", "id": 10195618, "node_id": "MDQ6VXNlcjEwMTk1NjE4", "avatar_url": "https://avatars0.githubusercontent.com/u/10195618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pared", "html_url": "https://github.com/pared", "followers_url": "https://api.github.com/users/pared/followers", "following_url": "https://api.github.com/users/pared/following{/other_user}", "gists_url": "https://api.github.com/users/pared/gists{/gist_id}", "starred_url": "https://api.github.com/users/pared/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pared/subscriptions", "organizations_url": "https://api.github.com/users/pared/orgs", "repos_url": "https://api.github.com/users/pared/repos", "events_url": "https://api.github.com/users/pared/events{/privacy}", "received_events_url": "https://api.github.com/users/pared/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-28T11:46:28Z", "updated_at": "2020-01-02T14:59:22Z", "closed_at": "2019-11-28T13:42:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, it is possible that `cached_property` will create multiple objects when used in multi-threaded context.\r\n\r\nFor example:\r\n\r\n```\r\nfrom concurrent.futures import ThreadPoolExecutor\r\n\r\nfrom funcy import cached_property\r\n\r\n\r\nclass Client(object):\r\n    pass\r\n\r\n\r\nclass Connector(object):\r\n\r\n    @cached_property\r\n    def client(self):\r\n\r\n        from time import sleep\r\n        sleep(0.1)\r\n        return Client()\r\n\r\n    def connect(self, arg):\r\n        print(\"arg '{}', client '{}'\".format( str(arg), str(self.client)))\r\n        return 0\r\n\r\n\r\nc = Connector()\r\nargs = [1,2,3,4,5]\r\n\r\nwith ThreadPoolExecutor(max_workers=5) as executor:\r\n    executor.map(c.connect, args)\r\n```\r\nWill most likely create new `client` properties for each thread, however, if we comment out `sleep`\r\nthere is a chance that it will be a single object.\r\n\r\nIt would be nice to make `@cached_property` thread-safe or create a new decorator that could do that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/80", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/80/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/80/events", "html_url": "https://github.com/Suor/funcy/issues/80", "id": 518617077, "node_id": "MDU6SXNzdWU1MTg2MTcwNzc=", "number": 80, "title": "Unzip (inverted zip)", "user": {"login": "thalelinh", "id": 8299832, "node_id": "MDQ6VXNlcjgyOTk4MzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/8299832?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thalelinh", "html_url": "https://github.com/thalelinh", "followers_url": "https://api.github.com/users/thalelinh/followers", "following_url": "https://api.github.com/users/thalelinh/following{/other_user}", "gists_url": "https://api.github.com/users/thalelinh/gists{/gist_id}", "starred_url": "https://api.github.com/users/thalelinh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thalelinh/subscriptions", "organizations_url": "https://api.github.com/users/thalelinh/orgs", "repos_url": "https://api.github.com/users/thalelinh/repos", "events_url": "https://api.github.com/users/thalelinh/events{/privacy}", "received_events_url": "https://api.github.com/users/thalelinh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-06T17:22:20Z", "updated_at": "2019-11-11T10:07:02Z", "closed_at": "2019-11-11T10:07:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Maybe it's to specific, but what do you think of a function that acts like an inverse of zip, to split a list of tuples into multiple lists\r\nizip(list) = zip(*list)\r\n\r\nMy use case was retrieving multiple values from a dict/json\r\n\r\n`names, sizes = izip[(person['name'], person['size']) for person in people]`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/78", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/78/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/78/events", "html_url": "https://github.com/Suor/funcy/issues/78", "id": 474738705, "node_id": "MDU6SXNzdWU0NzQ3Mzg3MDU=", "number": 78, "title": "functions to get keys or values from a dictionary?", "user": {"login": "bijoythomas", "id": 5385730, "node_id": "MDQ6VXNlcjUzODU3MzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/5385730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bijoythomas", "html_url": "https://github.com/bijoythomas", "followers_url": "https://api.github.com/users/bijoythomas/followers", "following_url": "https://api.github.com/users/bijoythomas/following{/other_user}", "gists_url": "https://api.github.com/users/bijoythomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/bijoythomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bijoythomas/subscriptions", "organizations_url": "https://api.github.com/users/bijoythomas/orgs", "repos_url": "https://api.github.com/users/bijoythomas/repos", "events_url": "https://api.github.com/users/bijoythomas/events{/privacy}", "received_events_url": "https://api.github.com/users/bijoythomas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-30T18:24:58Z", "updated_at": "2019-08-04T05:05:35Z", "closed_at": "2019-08-04T05:05:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm looking for functions called `keys` and `values` but cannot find anything in the docs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/77", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/77/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/77/events", "html_url": "https://github.com/Suor/funcy/issues/77", "id": 425776598, "node_id": "MDU6SXNzdWU0MjU3NzY1OTg=", "number": 77, "title": "Argument collision with @decorator", "user": {"login": "mentalisttraceur", "id": 6531708, "node_id": "MDQ6VXNlcjY1MzE3MDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6531708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mentalisttraceur", "html_url": "https://github.com/mentalisttraceur", "followers_url": "https://api.github.com/users/mentalisttraceur/followers", "following_url": "https://api.github.com/users/mentalisttraceur/following{/other_user}", "gists_url": "https://api.github.com/users/mentalisttraceur/gists{/gist_id}", "starred_url": "https://api.github.com/users/mentalisttraceur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mentalisttraceur/subscriptions", "organizations_url": "https://api.github.com/users/mentalisttraceur/orgs", "repos_url": "https://api.github.com/users/mentalisttraceur/repos", "events_url": "https://api.github.com/users/mentalisttraceur/events{/privacy}", "received_events_url": "https://api.github.com/users/mentalisttraceur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2019-03-27T05:51:52Z", "updated_at": "2020-08-01T00:20:23Z", "closed_at": "2019-05-27T14:02:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Logically obvious limitation without an obviously documented solution.\r\n\r\nSuppose a function decorated by a decorator created with `@funcy.decorator` actually has arguments named `_args`, `_kwargs`, or `_func` (it shouldn't, but supposing it did).\r\n\r\nReasonably and correctly, `call._args`, `call._kwargs`, and `call._func` still resolve as expected and documented - good so far.\r\n\r\nAn intuitive solution if you *did* want to inspect those arguments would be to call `@decorator`'s `__getattr__(self, ...)` manually.\r\n\r\nBut that *unconditionally* sets `self.__dict__[...]`, so for example doing `call.__getattr__('_args')` can break `call()`, **because `call._args` gets replaced**.\r\n\r\nSo the only safe way to access those arguments is to manually use the undocumented `funcy.decorator.arggetter` directly, or to manually implement the same logic of looking up the argument from `call._args` and `call._kwargs` based on the signature gotten from `call._func`.\r\n\r\nActually, I think this problem might possibly effect all of the dunder methods too.\r\n\r\nAnyway, I think this could be solved by either:\r\n\r\n1. Just officially saying that as a special case, accessing those arguments to the wrapped function using the same built-in logic for getting arguments is completely unsupported.\r\n\r\n2. Officially documenting `funcy.decorator.arggetter` as the way to get those arguments.\r\n\r\n3. Using `self.__dict__.setdefault` instead of `self.__dict__[...]` in `__getattr__`, and documenting manually calling `call.__getattr__` as the way.\r\n\r\n4. Exposing some sort of new method on the `Call` class like `call._getarg`, which could use either the 2nd or 3rd option internally.\r\n\r\nThoughts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/76", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/76/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/76/events", "html_url": "https://github.com/Suor/funcy/issues/76", "id": 421091413, "node_id": "MDU6SXNzdWU0MjEwOTE0MTM=", "number": 76, "title": "@cached_property does not support overriding", "user": {"login": "Wellan89", "id": 11414243, "node_id": "MDQ6VXNlcjExNDE0MjQz", "avatar_url": "https://avatars3.githubusercontent.com/u/11414243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wellan89", "html_url": "https://github.com/Wellan89", "followers_url": "https://api.github.com/users/Wellan89/followers", "following_url": "https://api.github.com/users/Wellan89/following{/other_user}", "gists_url": "https://api.github.com/users/Wellan89/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wellan89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wellan89/subscriptions", "organizations_url": "https://api.github.com/users/Wellan89/orgs", "repos_url": "https://api.github.com/users/Wellan89/repos", "events_url": "https://api.github.com/users/Wellan89/events{/privacy}", "received_events_url": "https://api.github.com/users/Wellan89/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-14T15:35:15Z", "updated_at": "2019-03-28T05:18:09Z", "closed_at": "2019-03-28T05:18:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "cached_property does not support overriding since it directly writes into the target instance's __dict__, as in the following example:\r\n```python\r\nimport funcy\r\n\r\n\r\nclass A:\r\n    @funcy.cached_property\r\n    def p(self):\r\n        return 1\r\n\r\n\r\nclass B(A):\r\n    @funcy.cached_property\r\n    def p(self):\r\n        return 2\r\n\r\n    @property\r\n    def p2(self):\r\n        return super().p\r\n\r\n\r\nb = B()\r\nb.p2\r\n>> 1\r\nb.p\r\n>> 1\r\nb.__dict__\r\n>> {'p': 1}\r\n```\r\nThis issue should at least be documented if not fixed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/74", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/74/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/74/events", "html_url": "https://github.com/Suor/funcy/issues/74", "id": 394622953, "node_id": "MDU6SXNzdWUzOTQ2MjI5NTM=", "number": 74, "title": "Collection and dict utilities not working with Django QueryDict", "user": {"login": "Anon731", "id": 30243929, "node_id": "MDQ6VXNlcjMwMjQzOTI5", "avatar_url": "https://avatars3.githubusercontent.com/u/30243929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Anon731", "html_url": "https://github.com/Anon731", "followers_url": "https://api.github.com/users/Anon731/followers", "following_url": "https://api.github.com/users/Anon731/following{/other_user}", "gists_url": "https://api.github.com/users/Anon731/gists{/gist_id}", "starred_url": "https://api.github.com/users/Anon731/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Anon731/subscriptions", "organizations_url": "https://api.github.com/users/Anon731/orgs", "repos_url": "https://api.github.com/users/Anon731/repos", "events_url": "https://api.github.com/users/Anon731/events{/privacy}", "received_events_url": "https://api.github.com/users/Anon731/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 634548015, "node_id": "MDU6TGFiZWw2MzQ1NDgwMTU=", "url": "https://api.github.com/repos/Suor/funcy/labels/design%20decision%20needed", "name": "design decision needed", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-28T12:09:04Z", "updated_at": "2019-03-12T15:58:17Z", "closed_at": "2019-03-12T15:57:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Context\r\n\r\nI have encountered situations when i use funcy.project for entities which implement dict interface and it cause some implicit errors. I am not sure if it actually funcy's bug or bug of dict interface implementation of entities i use it on.\r\n\r\nIf explanation provided in example paragraph is not enought i can later try give some exact working .py fines which reproduce such behavour (type if need).\r\n\r\n### Example\r\n\r\ndjangorestframework ModelSerializer class (or some of it's parents) has initial_data attribute, which is `django.http.request.QueryDict`\r\n\r\nI had following scenario trying to project it:\r\n\r\n``` python\r\nipdb> pp self.initial_data\r\n{'archived': 'false',\r\n 'short_title': 'TT',\r\n 'ticket_fare': '1.00',\r\n 'ticket_type': '2',\r\n 'title': 'test title'}\r\n\r\nipdb> type(self.initial_data)\r\n<class 'django.http.request.QueryDict'>\r\n\r\nipdb> pp generic_relation_field_names\r\n['history_entries']\r\n\r\nipdb> type(generic_relation_field_names)\r\n<class 'list'>\r\n\r\nipdb> funcy.project(self.initial_data, generic_relation_field_names)\r\n*** TypeError: expected string or bytes-like object\r\n```\r\n\r\nWith following traceback:\r\n\r\n```python\r\nFile \".../api/serializers/abstract.py\" in _get_initial_generic_relation_fields\r\n  104.         return funcy.project(self.initial_data, generic_relation_field_names)\r\n\r\nFile \".../.venv/lib/python3.6/site-packages/funcy/colls.py\" in project\r\n  245.     return _factory(mapping)((k, mapping[k]) for k in keys if k in mapping)\r\n\r\nFile \".../.venv/lib/python3.6/site-packages/django/http/request.py\" in __init__\r\n  407.         for key, value in limited_parse_qsl(query_string, **parse_qsl_kwargs):\r\n\r\nFile \".../.venv/lib/python3.6/site-packages/django/utils/http.py\" in limited_parse_qsl\r\n  410.         pairs = FIELDS_MATCH.split(qs, fields_limit)\r\n```\r\n\r\ni had similar problem with Serializer.data attribute which is `<class 'rest_framework.utils.serializer_helpers.ReturnDict'>` but i can't say if they absolutely same, because i don't have it's traceback and have not time to reproduce and provide it.\r\n\r\n### Software:\r\n\r\nPython==3.6.5\r\nDjango==2.1.1\r\ndjangorestframework==3.8.2\r\nfuncy==1.11\r\n\r\n### Actual request\r\n\r\nEither:\r\n  - fix this behaviour\r\n  - add assert that type of passed argument is actually dict  (wich i suppose is not a solution since it is probably break back compatibility)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/70", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/70/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/70/events", "html_url": "https://github.com/Suor/funcy/issues/70", "id": 366307321, "node_id": "MDU6SXNzdWUzNjYzMDczMjE=", "number": 70, "title": "TypeError: 'function' object is not iterable", "user": {"login": "ykoasanto", "id": 4227994, "node_id": "MDQ6VXNlcjQyMjc5OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4227994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ykoasanto", "html_url": "https://github.com/ykoasanto", "followers_url": "https://api.github.com/users/ykoasanto/followers", "following_url": "https://api.github.com/users/ykoasanto/following{/other_user}", "gists_url": "https://api.github.com/users/ykoasanto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ykoasanto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ykoasanto/subscriptions", "organizations_url": "https://api.github.com/users/ykoasanto/orgs", "repos_url": "https://api.github.com/users/ykoasanto/repos", "events_url": "https://api.github.com/users/ykoasanto/events{/privacy}", "received_events_url": "https://api.github.com/users/ykoasanto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-03T12:07:12Z", "updated_at": "2018-10-03T12:48:46Z", "closed_at": "2018-10-03T12:47:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nThe following code works fine before 1.11.0 \r\n\r\n`@funcy.retry(5, lambda attempt: attempt * 2)`\r\n\r\nNow it's broken with the following exception\r\n\r\n` File \"/Users/ykoasanto/Veracode/Agora/Laputa/agora-ecsinfra/ecsinfra/service/deploy_helpers.py\", line 196, in poll_ecs_for_steady_state\r\n    kankyo_name, service_name)\r\n  File \"/Users/ykoasanto/Veracode/venv/ecsinfra/lib/python2.7/site-packages/funcy/decorators.py\", line 38, in wrapper\r\n    return deco(call, *dargs, **dkwargs)\r\n  File \"/Users/ykoasanto/Veracode/venv/ecsinfra/lib/python2.7/site-packages/funcy/flow.py\", line 93, in retry\r\n    errors = _ensure_exceptable(errors)\r\n  File \"/Users/ykoasanto/Veracode/venv/ecsinfra/lib/python2.7/site-packages/funcy/flow.py\", line 122, in _ensure_exceptable\r\n    return errors if is_exception else tuple(errors)\r\nTypeError: 'function' object is not iterable`\r\n\r\nI think the removal of the check for a **list** type here have caused this issue:\r\n\r\nhttps://github.com/Suor/funcy/commit/8a135373df18a8f2513757b80aa48a8a3847d6d5#diff-64922fc77aa802c10c7245a11b0a213bL95", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/69", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/69/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/69/events", "html_url": "https://github.com/Suor/funcy/issues/69", "id": 356760869, "node_id": "MDU6SXNzdWUzNTY3NjA4Njk=", "number": 69, "title": "Improve `fallback` function", "user": {"login": "ADR-007", "id": 7348960, "node_id": "MDQ6VXNlcjczNDg5NjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/7348960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ADR-007", "html_url": "https://github.com/ADR-007", "followers_url": "https://api.github.com/users/ADR-007/followers", "following_url": "https://api.github.com/users/ADR-007/following{/other_user}", "gists_url": "https://api.github.com/users/ADR-007/gists{/gist_id}", "starred_url": "https://api.github.com/users/ADR-007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ADR-007/subscriptions", "organizations_url": "https://api.github.com/users/ADR-007/orgs", "repos_url": "https://api.github.com/users/ADR-007/repos", "events_url": "https://api.github.com/users/ADR-007/events{/privacy}", "received_events_url": "https://api.github.com/users/ADR-007/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-04T11:07:34Z", "updated_at": "2018-09-10T15:21:27Z", "closed_at": "2018-09-10T15:21:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nI propose to add the `raise_last_exception` argument to `fallback` function:\r\n\r\n```\r\ndef fallback(*approaches, raise_last_exception=False):\r\n    \"\"\"Tries several approaches until one works.\r\n       Each approach has a form of (callable, expected_errors).\"\"\"\r\n    for approach, next_approach in funcy.with_next(approaches):\r\n        func, catch = (approach, Exception) if callable(approach) else approach\r\n        try:\r\n            return func()\r\n        except catch:\r\n            if not next_approach and raise_last_exception:\r\n                raise \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/68", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/68/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/68/events", "html_url": "https://github.com/Suor/funcy/issues/68", "id": 326227317, "node_id": "MDU6SXNzdWUzMjYyMjczMTc=", "number": 68, "title": "In docs change fancy -> funcy", "user": {"login": "apnewberry", "id": 31109952, "node_id": "MDQ6VXNlcjMxMTA5OTUy", "avatar_url": "https://avatars1.githubusercontent.com/u/31109952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apnewberry", "html_url": "https://github.com/apnewberry", "followers_url": "https://api.github.com/users/apnewberry/followers", "following_url": "https://api.github.com/users/apnewberry/following{/other_user}", "gists_url": "https://api.github.com/users/apnewberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/apnewberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apnewberry/subscriptions", "organizations_url": "https://api.github.com/users/apnewberry/orgs", "repos_url": "https://api.github.com/users/apnewberry/repos", "events_url": "https://api.github.com/users/apnewberry/events{/privacy}", "received_events_url": "https://api.github.com/users/apnewberry/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-24T17:53:31Z", "updated_at": "2018-05-25T08:22:37Z", "closed_at": "2018-05-25T08:22:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "\"and popular third-party libraries like toolz, fancy, and more-itertools.\"\r\nbut the link is to \"funcy\" library.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/67", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/67/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/67/events", "html_url": "https://github.com/Suor/funcy/issues/67", "id": 323748384, "node_id": "MDU6SXNzdWUzMjM3NDgzODQ=", "number": 67, "title": "get_in working in more complicated structures.", "user": {"login": "galuszkak", "id": 759579, "node_id": "MDQ6VXNlcjc1OTU3OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/759579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/galuszkak", "html_url": "https://github.com/galuszkak", "followers_url": "https://api.github.com/users/galuszkak/followers", "following_url": "https://api.github.com/users/galuszkak/following{/other_user}", "gists_url": "https://api.github.com/users/galuszkak/gists{/gist_id}", "starred_url": "https://api.github.com/users/galuszkak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/galuszkak/subscriptions", "organizations_url": "https://api.github.com/users/galuszkak/orgs", "repos_url": "https://api.github.com/users/galuszkak/repos", "events_url": "https://api.github.com/users/galuszkak/events{/privacy}", "received_events_url": "https://api.github.com/users/galuszkak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-16T19:06:55Z", "updated_at": "2018-05-25T07:24:11Z", "closed_at": "2018-05-25T07:24:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "So I was wondering is it possible to work with get_in to get a possibility of getting a list of items.\r\n\r\nLet me give an example:\r\nLet's say we have the data structure of shopping malls. And we would like to know all addresses of shops, across all malls.\r\n```\r\ndata = {\r\n  \"shopping_malls\": [\r\n    {\r\n      \"name\": \"gallery1\",\r\n      \"buildings\": [\r\n        {\r\n          \"name\": \"A\",\r\n          \"shops\": [\r\n            {\r\n              \"name\": \"Starbucks\",\r\n              \"address\": \"Bejing, gallery1, Building A\"\r\n            },\r\n            {\r\n              \"name\": \"Costa Coffe\",\r\n              \"address\": \"Whatever\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"B\",\r\n          \"shops\": [\r\n            {\r\n              \"name\": \"Starbucks\",\r\n              \"address\": \"Bejing, gallery1, Building B\"\r\n            },\r\n            {\r\n              \"name\": \"Costa Coffe\",\r\n              \"address\": \"Whatever\"\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"deira_city2\",\r\n      \"buildings\": [\r\n        {\r\n          \"name\": \"A\",\r\n          \"shops\": [\r\n            {\r\n              \"name\": \"Starbucks\",\r\n              \"address\": \"Dubai, deira_city2, Building A\"\r\n            },\r\n            {\r\n              \"name\": \"Costa Coffe\",\r\n              \"address\": \"Whatever\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"B\",\r\n          \"shops\": [\r\n            {\r\n              \"name\": \"Starbucks\",\r\n              \"address\": \"Dubai, deira_city_2, Building B\"\r\n            },\r\n            {\r\n              \"name\": \"Costa Coffe\",\r\n              \"address\": \"Whatever\"\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"_metadata\": {\r\n    \"author\": \"Everyone\"\r\n  }\r\n}\r\n```\r\nSo what I would love to have is ability to:\r\n```\r\n>>> get_in(data, ['shopping_malls', '*', 'buildings', '*', 'shops', '*', 'address'])\r\n[\"Bejing, gallery1, Building A\",  \"Whatever\", \"Bejing, gallery1, Building B\",  \"Whatever\", \"Dubai, deira_city2, Building A\", \"Whatever\", \"Dubai, deira_city_2, Building B\", \"Whatever\"]\r\n```\r\n\r\nso for now for me, there is no way to work with more complex data structures if they have any list, besides specifying an exact path, have an ability to pull something from nested dictionaries in lists. \r\n\r\nI'm not sure if the example above makes sense, so if there is any need for clarification I would love to explain it more.\r\n\r\nI understand that get_in wasn't designed in that way, but maybe it's a good idea to think about some capabilities like that in get_in or new function that could handle cases like that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/66", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/66/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/66/events", "html_url": "https://github.com/Suor/funcy/issues/66", "id": 323137356, "node_id": "MDU6SXNzdWUzMjMxMzczNTY=", "number": 66, "title": "Add max_repr_len argument to log/print_calls decorator", "user": {"login": "ADR-007", "id": 7348960, "node_id": "MDQ6VXNlcjczNDg5NjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/7348960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ADR-007", "html_url": "https://github.com/ADR-007", "followers_url": "https://api.github.com/users/ADR-007/followers", "following_url": "https://api.github.com/users/ADR-007/following{/other_user}", "gists_url": "https://api.github.com/users/ADR-007/gists{/gist_id}", "starred_url": "https://api.github.com/users/ADR-007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ADR-007/subscriptions", "organizations_url": "https://api.github.com/users/ADR-007/orgs", "repos_url": "https://api.github.com/users/ADR-007/repos", "events_url": "https://api.github.com/users/ADR-007/events{/privacy}", "received_events_url": "https://api.github.com/users/ADR-007/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-15T09:30:35Z", "updated_at": "2018-05-19T08:05:42Z", "closed_at": "2018-05-19T06:25:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "The decorator is not very useful for me because I can't see with which arguments called the function.\r\n```\r\nfrom typing import NamedTuple\r\n\r\nfrom funcy import print_calls\r\n\r\n\r\nclass Parameters(NamedTuple):\r\n    main_value: int\r\n    second_value: str\r\n\r\n\r\n@print_calls\r\ndef process(parameters: Parameters):\r\n    pass\r\n\r\n\r\nprocess(Parameters(1, '10'))\r\nprocess(Parameters(2, '20'))\r\nprocess(Parameters(3, '30'))\r\n```\r\nResult:\r\n```\r\nCall process(Parameters(main_value=...)\r\n-> None from process(Parameters(main_value=...)\r\nCall process(Parameters(main_value=...)\r\n-> None from process(Parameters(main_value=...)\r\nCall process(Parameters(main_value=...)\r\n-> None from process(Parameters(main_value=...)\r\n```\r\n\r\nIt would be great if I can define how long should be argument representation ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/65", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/65/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/65/events", "html_url": "https://github.com/Suor/funcy/issues/65", "id": 308341485, "node_id": "MDU6SXNzdWUzMDgzNDE0ODU=", "number": 65, "title": "Add function(s) for keeping unique items in collections", "user": {"login": "taleinat", "id": 532281, "node_id": "MDQ6VXNlcjUzMjI4MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/532281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taleinat", "html_url": "https://github.com/taleinat", "followers_url": "https://api.github.com/users/taleinat/followers", "following_url": "https://api.github.com/users/taleinat/following{/other_user}", "gists_url": "https://api.github.com/users/taleinat/gists{/gist_id}", "starred_url": "https://api.github.com/users/taleinat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taleinat/subscriptions", "organizations_url": "https://api.github.com/users/taleinat/orgs", "repos_url": "https://api.github.com/users/taleinat/repos", "events_url": "https://api.github.com/users/taleinat/events{/privacy}", "received_events_url": "https://api.github.com/users/taleinat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-03-25T11:22:34Z", "updated_at": "2018-05-09T13:49:27Z", "closed_at": "2018-05-09T13:49:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I propose that something like [Lodash's `_.uniq`](https://lodash.com/docs/4.17.5#uniq) could be useful, especially with an optional \"key\" function similar to [Lodash's `_.uniqBy`](https://lodash.com/docs/4.17.5#uniqBy).\r\n\r\nSimply using `list(set(collection))` doesn't preserve the original order.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/63", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/63/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/63/events", "html_url": "https://github.com/Suor/funcy/issues/63", "id": 304755207, "node_id": "MDU6SXNzdWUzMDQ3NTUyMDc=", "number": 63, "title": "iffy does not support extended function semantics", "user": {"login": "eprykhodko", "id": 7461493, "node_id": "MDQ6VXNlcjc0NjE0OTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/7461493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eprykhodko", "html_url": "https://github.com/eprykhodko", "followers_url": "https://api.github.com/users/eprykhodko/followers", "following_url": "https://api.github.com/users/eprykhodko/following{/other_user}", "gists_url": "https://api.github.com/users/eprykhodko/gists{/gist_id}", "starred_url": "https://api.github.com/users/eprykhodko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eprykhodko/subscriptions", "organizations_url": "https://api.github.com/users/eprykhodko/orgs", "repos_url": "https://api.github.com/users/eprykhodko/repos", "events_url": "https://api.github.com/users/eprykhodko/events{/privacy}", "received_events_url": "https://api.github.com/users/eprykhodko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-13T13:01:58Z", "updated_at": "2018-03-25T00:59:53Z", "closed_at": "2018-03-25T00:59:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Any reason why it doesn't?\r\nI think it should, at least in the form with 2 or 3 arguments.\r\n\r\n```\r\nIn [28]: from funcy import iffy\r\nIn [29]: foo = iffy({'x',  'y'}, len)\r\nIn [30]: foo('x')\r\n```\r\nThe above feels like it should be a valid use of funcy.\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/60", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/60/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/60/events", "html_url": "https://github.com/Suor/funcy/issues/60", "id": 295192824, "node_id": "MDU6SXNzdWUyOTUxOTI4MjQ=", "number": 60, "title": "Bug in `cache` decorator", "user": {"login": "adrian-dankiv", "id": 33030319, "node_id": "MDQ6VXNlcjMzMDMwMzE5", "avatar_url": "https://avatars1.githubusercontent.com/u/33030319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrian-dankiv", "html_url": "https://github.com/adrian-dankiv", "followers_url": "https://api.github.com/users/adrian-dankiv/followers", "following_url": "https://api.github.com/users/adrian-dankiv/following{/other_user}", "gists_url": "https://api.github.com/users/adrian-dankiv/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrian-dankiv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrian-dankiv/subscriptions", "organizations_url": "https://api.github.com/users/adrian-dankiv/orgs", "repos_url": "https://api.github.com/users/adrian-dankiv/repos", "events_url": "https://api.github.com/users/adrian-dankiv/events{/privacy}", "received_events_url": "https://api.github.com/users/adrian-dankiv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-07T16:01:15Z", "updated_at": "2018-02-08T12:50:54Z", "closed_at": "2018-02-08T12:50:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to mix positional and keyword arguments:\r\n```\r\nimport funcy\r\n\r\n\r\n@funcy.cache(10)\r\ndef func(a, b, c):\r\n    return a + b + c\r\n\r\n\r\nfunc(1, b=2, c=3)\r\n```\r\nAnd I am getting next exception:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/adr/projects/rogers-qa-analytics/tmp/tmp.py\", line 9, in <module>\r\n    func(1, b=2, c=3)\r\n  File \"/home/adr/projects/rogers-qa-analytics/.env/lib/python3.6/site-packages/funcy/calc.py\", line 121, in wrapper\r\n    result = func(*key, **kwargs)\r\nTypeError: func() got multiple values for argument 'b'\r\n```\r\n\r\nIt looks like the problem is here:\r\n\r\n```\r\ndef cache(timeout, key_func=None):\r\n    \"\"\"Caches a function results for timeout seconds.\"\"\"\r\n    if isinstance(timeout, int):\r\n        timeout = timedelta(seconds=timeout)\r\n\r\n    if key_func is None:\r\n        key_func = lambda *a, **kw: a + tuple(sorted(kw.items())) if kw else a\r\n\r\n    def decorator(func):\r\n        cache = {}\r\n\r\n        @wraps(func)\r\n        def wrapper(*args, **kwargs):\r\n            key = key_func(*args, **kwargs)\r\n            if key in cache:\r\n                result, timestamp = cache[key]\r\n                if datetime.now() - timestamp < timeout:\r\n                    return result\r\n                else:\r\n                    del cache[key]\r\n\r\n            result = func(*key, **kwargs)  # <-- here should be *args instead of *key\r\n            cache[key] = result, datetime.now()\r\n            return result\r\n\r\n        def invalidate(*args, **kwargs):\r\n            cache.pop(key_func(*args, **kwargs))\r\n        wrapper.invalidate = invalidate\r\n\r\n        def invalidate_all():\r\n            cache.clear()\r\n        wrapper.invalidate_all = invalidate_all\r\n\r\n        return wrapper\r\n    return decorator\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/59", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/59/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/59/events", "html_url": "https://github.com/Suor/funcy/issues/59", "id": 287433037, "node_id": "MDU6SXNzdWUyODc0MzMwMzc=", "number": 59, "title": "Use `raise error from original_error`  instead of just `raise error` in `reraise` ", "user": {"login": "adrian-dankiv", "id": 33030319, "node_id": "MDQ6VXNlcjMzMDMwMzE5", "avatar_url": "https://avatars1.githubusercontent.com/u/33030319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrian-dankiv", "html_url": "https://github.com/adrian-dankiv", "followers_url": "https://api.github.com/users/adrian-dankiv/followers", "following_url": "https://api.github.com/users/adrian-dankiv/following{/other_user}", "gists_url": "https://api.github.com/users/adrian-dankiv/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrian-dankiv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrian-dankiv/subscriptions", "organizations_url": "https://api.github.com/users/adrian-dankiv/orgs", "repos_url": "https://api.github.com/users/adrian-dankiv/repos", "events_url": "https://api.github.com/users/adrian-dankiv/events{/privacy}", "received_events_url": "https://api.github.com/users/adrian-dankiv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-10T13:27:28Z", "updated_at": "2018-01-19T03:58:34Z", "closed_at": "2018-01-19T03:58:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "It will produce a better error message in Python 3.\r\n\r\nRaise from\r\n```\r\ntry:\r\n    0/0\r\nexcept Exception as e:\r\n    raise ValueError from e\r\n```\r\nResult\r\n```\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 2, in <module>\r\nZeroDivisionError: division by zero\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 4, in <module>\r\nValueError\r\n```\r\n\r\nJust raise:\r\n```\r\ntry:\r\n    0/0\r\nexcept Exception as e:\r\n    raise ValueError\r\n```\r\nResult:\r\n```\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 2, in <module>\r\nZeroDivisionError: division by zero\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 4, in <module>\r\nValueError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/58", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/58/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/58/events", "html_url": "https://github.com/Suor/funcy/issues/58", "id": 278727044, "node_id": "MDU6SXNzdWUyNzg3MjcwNDQ=", "number": 58, "title": "takewhile should cons the failing predicate back to the iterable", "user": {"login": "Netherdrake", "id": 3516903, "node_id": "MDQ6VXNlcjM1MTY5MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/3516903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Netherdrake", "html_url": "https://github.com/Netherdrake", "followers_url": "https://api.github.com/users/Netherdrake/followers", "following_url": "https://api.github.com/users/Netherdrake/following{/other_user}", "gists_url": "https://api.github.com/users/Netherdrake/gists{/gist_id}", "starred_url": "https://api.github.com/users/Netherdrake/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Netherdrake/subscriptions", "organizations_url": "https://api.github.com/users/Netherdrake/orgs", "repos_url": "https://api.github.com/users/Netherdrake/repos", "events_url": "https://api.github.com/users/Netherdrake/events{/privacy}", "received_events_url": "https://api.github.com/users/Netherdrake/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-02T23:22:52Z", "updated_at": "2017-12-04T05:34:10Z", "closed_at": "2017-12-02T23:57:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n>>> foo = iter(range(5))\r\n>>> list(takewhile(lambda x: x <=2, foo))\r\n[0, 1, 2]\r\n```\r\n\r\nBy this point, one would expect that the `foo` iterable would have `[3, 4]` left.\r\nInstead, we get:\r\n```\r\n>>> list(foo)\r\n[4]\r\n```\r\n\r\nThis is because `3` is burned (consumed) by the `takewhile` predicate, and in case of False condition it is never returned to the original iterable.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/56", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/56/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/56/events", "html_url": "https://github.com/Suor/funcy/issues/56", "id": 262936171, "node_id": "MDU6SXNzdWUyNjI5MzYxNzE=", "number": 56, "title": "make_lookuper is misspelt; should be make_lookupper", "user": {"login": "eykd", "id": 147811, "node_id": "MDQ6VXNlcjE0NzgxMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/147811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eykd", "html_url": "https://github.com/eykd", "followers_url": "https://api.github.com/users/eykd/followers", "following_url": "https://api.github.com/users/eykd/following{/other_user}", "gists_url": "https://api.github.com/users/eykd/gists{/gist_id}", "starred_url": "https://api.github.com/users/eykd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eykd/subscriptions", "organizations_url": "https://api.github.com/users/eykd/orgs", "repos_url": "https://api.github.com/users/eykd/repos", "events_url": "https://api.github.com/users/eykd/events{/privacy}", "received_events_url": "https://api.github.com/users/eykd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-04T21:26:43Z", "updated_at": "2017-11-09T14:15:50Z", "closed_at": "2017-11-09T14:15:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "[Two P's.](http://funcy.readthedocs.io/en/stable/calc.html#make_lookuper) :) Perhaps an alias could be made for the misspelt version, for a deprecation period?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/54", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/54/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/54/events", "html_url": "https://github.com/Suor/funcy/issues/54", "id": 260346823, "node_id": "MDU6SXNzdWUyNjAzNDY4MjM=", "number": 54, "title": "`where` crashes if one of the mappings doesn't have one of the keys in it", "user": {"login": "despawnerer", "id": 434205, "node_id": "MDQ6VXNlcjQzNDIwNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/434205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/despawnerer", "html_url": "https://github.com/despawnerer", "followers_url": "https://api.github.com/users/despawnerer/followers", "following_url": "https://api.github.com/users/despawnerer/following{/other_user}", "gists_url": "https://api.github.com/users/despawnerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/despawnerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/despawnerer/subscriptions", "organizations_url": "https://api.github.com/users/despawnerer/orgs", "repos_url": "https://api.github.com/users/despawnerer/repos", "events_url": "https://api.github.com/users/despawnerer/events{/privacy}", "received_events_url": "https://api.github.com/users/despawnerer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-25T16:58:41Z", "updated_at": "2017-09-28T05:58:59Z", "closed_at": "2017-09-28T05:58:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This code:\r\n```python\r\nmappings = [{ 'a': 4 }, { 'b': 2 }]\r\nprint(list(where(mappings, b=2)))\r\n```\r\n\r\nRaises this exception currently:\r\n```python\r\nKeyError: 'b'\r\n```\r\n\r\nIs this intended behavior? It feels like, logically, it should just skip over items that don't have necessary keys in them as they, by definition, don't match the conditions.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/53", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/53/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/53/events", "html_url": "https://github.com/Suor/funcy/issues/53", "id": 251904232, "node_id": "MDU6SXNzdWUyNTE5MDQyMzI=", "number": 53, "title": "Play nicely with static code analyzers", "user": {"login": "taleinat", "id": 532281, "node_id": "MDQ6VXNlcjUzMjI4MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/532281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taleinat", "html_url": "https://github.com/taleinat", "followers_url": "https://api.github.com/users/taleinat/followers", "following_url": "https://api.github.com/users/taleinat/following{/other_user}", "gists_url": "https://api.github.com/users/taleinat/gists{/gist_id}", "starred_url": "https://api.github.com/users/taleinat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taleinat/subscriptions", "organizations_url": "https://api.github.com/users/taleinat/orgs", "repos_url": "https://api.github.com/users/taleinat/repos", "events_url": "https://api.github.com/users/taleinat/events{/privacy}", "received_events_url": "https://api.github.com/users/taleinat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-08-22T10:04:53Z", "updated_at": "2020-02-07T13:43:05Z", "closed_at": "2017-08-23T11:31:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "In my case, PyCharm has trouble understanding things coming from `funcy`. Specifically, it fails to understand importing directly from the `funcy` package rather than the specific sub-modules, i.e. `from funcy import merge` causes it to mark the import as problematic. I imagine it has other issues too, I haven't investigated further (yet).\r\n\r\nI can think of several ways to improve the situation:\r\n\r\n1. Re-work the fancy importing mechanisms so that static analyzers do a better job of understanding them.\r\n2. Include stubs which will directly inform static analyzers about the structure of the `funcy` library and its contents\r\n3. Contribute stubs for `funcy` to [the typeshed project](\r\nhttps://github.com/python/typeshed/), which is used by various static analyzers and IDEs.\r\n\r\nI'd be happy to help with this, if the maintainer(s) are open to it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/52", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/52/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/52/events", "html_url": "https://github.com/Suor/funcy/issues/52", "id": 250785092, "node_id": "MDU6SXNzdWUyNTA3ODUwOTI=", "number": 52, "title": "Allow specifying an error handler for memoize", "user": {"login": "richard-engineering", "id": 13842218, "node_id": "MDQ6VXNlcjEzODQyMjE4", "avatar_url": "https://avatars2.githubusercontent.com/u/13842218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richard-engineering", "html_url": "https://github.com/richard-engineering", "followers_url": "https://api.github.com/users/richard-engineering/followers", "following_url": "https://api.github.com/users/richard-engineering/following{/other_user}", "gists_url": "https://api.github.com/users/richard-engineering/gists{/gist_id}", "starred_url": "https://api.github.com/users/richard-engineering/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richard-engineering/subscriptions", "organizations_url": "https://api.github.com/users/richard-engineering/orgs", "repos_url": "https://api.github.com/users/richard-engineering/repos", "events_url": "https://api.github.com/users/richard-engineering/events{/privacy}", "received_events_url": "https://api.github.com/users/richard-engineering/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-08-16T23:06:07Z", "updated_at": "2017-08-22T00:00:16Z", "closed_at": "2017-08-21T12:47:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "We ran into an issue where we'd still like an exception to be memoized and return the exception when using the memoize decorator. A way to specify an error handler function would be appreciated. Or provide a list of exception types which should be cached.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/51", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/51/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/51/events", "html_url": "https://github.com/Suor/funcy/issues/51", "id": 240817526, "node_id": "MDU6SXNzdWUyNDA4MTc1MjY=", "number": 51, "title": "clear memoize for unit tests?", "user": {"login": "richard-engineering", "id": 13842218, "node_id": "MDQ6VXNlcjEzODQyMjE4", "avatar_url": "https://avatars2.githubusercontent.com/u/13842218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richard-engineering", "html_url": "https://github.com/richard-engineering", "followers_url": "https://api.github.com/users/richard-engineering/followers", "following_url": "https://api.github.com/users/richard-engineering/following{/other_user}", "gists_url": "https://api.github.com/users/richard-engineering/gists{/gist_id}", "starred_url": "https://api.github.com/users/richard-engineering/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richard-engineering/subscriptions", "organizations_url": "https://api.github.com/users/richard-engineering/orgs", "repos_url": "https://api.github.com/users/richard-engineering/repos", "events_url": "https://api.github.com/users/richard-engineering/events{/privacy}", "received_events_url": "https://api.github.com/users/richard-engineering/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-06T01:10:54Z", "updated_at": "2017-07-06T01:28:51Z", "closed_at": "2017-07-06T01:15:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a recommended way to clear funcy's memoize cache for unit tests without needing to use child processes?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/49", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/49/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/49/events", "html_url": "https://github.com/Suor/funcy/issues/49", "id": 204698180, "node_id": "MDU6SXNzdWUyMDQ2OTgxODA=", "number": 49, "title": "Deprecation Warning - inspect.getargspec()", "user": {"login": "dhiana", "id": 34568, "node_id": "MDQ6VXNlcjM0NTY4", "avatar_url": "https://avatars2.githubusercontent.com/u/34568?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhiana", "html_url": "https://github.com/dhiana", "followers_url": "https://api.github.com/users/dhiana/followers", "following_url": "https://api.github.com/users/dhiana/following{/other_user}", "gists_url": "https://api.github.com/users/dhiana/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhiana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhiana/subscriptions", "organizations_url": "https://api.github.com/users/dhiana/orgs", "repos_url": "https://api.github.com/users/dhiana/repos", "events_url": "https://api.github.com/users/dhiana/events{/privacy}", "received_events_url": "https://api.github.com/users/dhiana/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-02-01T20:38:22Z", "updated_at": "2017-02-06T14:52:32Z", "closed_at": "2017-02-06T14:42:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey there,\r\n\r\nThis library is a dependency for PyLDAVis and I'm having this issue running on Python 3.5.1\r\n\r\nfuncy/decorators.py:56: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead\r\n\r\nhttps://github.com/Suor/funcy/blob/master/funcy/decorators.py#L56\r\n\r\nIt is also being used in other parts of the code in the repo.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/45", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/45/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/45/events", "html_url": "https://github.com/Suor/funcy/issues/45", "id": 169134354, "node_id": "MDU6SXNzdWUxNjkxMzQzNTQ=", "number": 45, "title": "get_in should not recurse into strings", "user": {"login": "matthewwillian", "id": 6597057, "node_id": "MDQ6VXNlcjY1OTcwNTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6597057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewwillian", "html_url": "https://github.com/matthewwillian", "followers_url": "https://api.github.com/users/matthewwillian/followers", "following_url": "https://api.github.com/users/matthewwillian/following{/other_user}", "gists_url": "https://api.github.com/users/matthewwillian/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewwillian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewwillian/subscriptions", "organizations_url": "https://api.github.com/users/matthewwillian/orgs", "repos_url": "https://api.github.com/users/matthewwillian/repos", "events_url": "https://api.github.com/users/matthewwillian/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewwillian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-08-03T13:42:03Z", "updated_at": "2016-09-27T03:55:50Z", "closed_at": "2016-09-27T03:55:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\nIn [6]: d = {'a': {'b': 'carrot'}}\nIn [7]: funcy.get_in(d, ['a', 'b', 'c'])\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-7-290dd7587deb> in <module>()\n----> 1 funcy.get_in(d, ['a', 'b', 'c'])\n/Users/matthewwillian/zentreefish/.inenv/zentreefish/lib/python2.7/site-packages/funcy/colls.pyc in get_in(coll, path, default)\n    226     for key in path:\n    227         if key in coll:\n--> 228             coll = coll[key]\n    229         else:\n    230             return default\nTypeError: string indices must be integers, not str\n```\n\nI think the correct behavior here should be to return None (or whatever default is set to). The obvious way to fix this would be to return default if coll is a string. Is that the preferred solution?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/44", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/44/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/44/events", "html_url": "https://github.com/Suor/funcy/issues/44", "id": 168513310, "node_id": "MDU6SXNzdWUxNjg1MTMzMTA=", "number": 44, "title": "Intermittent test failures", "user": {"login": "medecau", "id": 59870, "node_id": "MDQ6VXNlcjU5ODcw", "avatar_url": "https://avatars1.githubusercontent.com/u/59870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/medecau", "html_url": "https://github.com/medecau", "followers_url": "https://api.github.com/users/medecau/followers", "following_url": "https://api.github.com/users/medecau/following{/other_user}", "gists_url": "https://api.github.com/users/medecau/gists{/gist_id}", "starred_url": "https://api.github.com/users/medecau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/medecau/subscriptions", "organizations_url": "https://api.github.com/users/medecau/orgs", "repos_url": "https://api.github.com/users/medecau/repos", "events_url": "https://api.github.com/users/medecau/events{/privacy}", "received_events_url": "https://api.github.com/users/medecau/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-07-31T11:19:12Z", "updated_at": "2016-08-02T07:02:43Z", "closed_at": "2016-08-02T07:02:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "When running tests in a computer under load the following test fails intermittently.\n\nhttps://github.com/Suor/funcy/blob/00863de7a8c5be2ac6503493e01f0b0281bab128/tests/test_flow.py#L72\n\nThis problem was exposed when I ran the tests using `detox`. I've seen failures on both the static and exponential timeouts.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/41", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/41/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/41/events", "html_url": "https://github.com/Suor/funcy/issues/41", "id": 132840493, "node_id": "MDU6SXNzdWUxMzI4NDA0OTM=", "number": 41, "title": "`join_with` fails with `concat`", "user": {"login": "vspinu", "id": 1363467, "node_id": "MDQ6VXNlcjEzNjM0Njc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1363467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vspinu", "html_url": "https://github.com/vspinu", "followers_url": "https://api.github.com/users/vspinu/followers", "following_url": "https://api.github.com/users/vspinu/following{/other_user}", "gists_url": "https://api.github.com/users/vspinu/gists{/gist_id}", "starred_url": "https://api.github.com/users/vspinu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vspinu/subscriptions", "organizations_url": "https://api.github.com/users/vspinu/orgs", "repos_url": "https://api.github.com/users/vspinu/repos", "events_url": "https://api.github.com/users/vspinu/events{/privacy}", "received_events_url": "https://api.github.com/users/vspinu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-02-10T22:52:13Z", "updated_at": "2016-02-13T13:33:43Z", "closed_at": "2016-02-13T03:27:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\n>>> join_with(concat, [{1: [1,2]}, {1: [2,3]}])\n{1: [[1, 2], [2, 3]]}\n```\n\nI was expecting \n\n```\n{1: [1, 2, 2, 3]}\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/40", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/40/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/40/events", "html_url": "https://github.com/Suor/funcy/issues/40", "id": 132835167, "node_id": "MDU6SXNzdWUxMzI4MzUxNjc=", "number": 40, "title": "Allow item lists in `join_with`?", "user": {"login": "vspinu", "id": 1363467, "node_id": "MDQ6VXNlcjEzNjM0Njc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1363467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vspinu", "html_url": "https://github.com/vspinu", "followers_url": "https://api.github.com/users/vspinu/followers", "following_url": "https://api.github.com/users/vspinu/following{/other_user}", "gists_url": "https://api.github.com/users/vspinu/gists{/gist_id}", "starred_url": "https://api.github.com/users/vspinu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vspinu/subscriptions", "organizations_url": "https://api.github.com/users/vspinu/orgs", "repos_url": "https://api.github.com/users/vspinu/repos", "events_url": "https://api.github.com/users/vspinu/events{/privacy}", "received_events_url": "https://api.github.com/users/vspinu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-02-10T22:31:22Z", "updated_at": "2016-02-14T11:06:35Z", "closed_at": "2016-02-14T01:45:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for the great package!\n\nI am looking for a way to do `join_with` on binary tuples. Something like \n\n``` python\njoin_with(list, [{1:2}, {1: 3}])\n## {1: [2, 3]}\n```\n\nBut with tuples:\n\n```\njoin_with(list, [(1,2), (1, 3)])\n## {1: [2, 3]}\n```\n\nWhat would be an idiomatic way to achieve this with `funcy`? \n\nThanks.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/39", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/39/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/39/events", "html_url": "https://github.com/Suor/funcy/issues/39", "id": 128032887, "node_id": "MDU6SXNzdWUxMjgwMzI4ODc=", "number": 39, "title": "@once and cousins choke on methods", "user": {"login": "sbi", "id": 670763, "node_id": "MDQ6VXNlcjY3MDc2Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/670763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sbi", "html_url": "https://github.com/sbi", "followers_url": "https://api.github.com/users/sbi/followers", "following_url": "https://api.github.com/users/sbi/following{/other_user}", "gists_url": "https://api.github.com/users/sbi/gists{/gist_id}", "starred_url": "https://api.github.com/users/sbi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sbi/subscriptions", "organizations_url": "https://api.github.com/users/sbi/orgs", "repos_url": "https://api.github.com/users/sbi/repos", "events_url": "https://api.github.com/users/sbi/events{/privacy}", "received_events_url": "https://api.github.com/users/sbi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-01-21T22:14:43Z", "updated_at": "2016-01-21T22:25:49Z", "closed_at": "2016-01-21T22:25:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using the @once decorators on object methods instead of functions does not work (at least on 1.5, appologies if this was fixed in 1.6, I can't upgrade right now). I'm getting TypeErrors on the number of arguments passed to the wrapped method. Is this supposed to work? If not, I'd try and write a patch.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/36", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/36/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/36/events", "html_url": "https://github.com/Suor/funcy/issues/36", "id": 89819362, "node_id": "MDU6SXNzdWU4OTgxOTM2Mg==", "number": 36, "title": "String replacement", "user": {"login": "vm", "id": 4899429, "node_id": "MDQ6VXNlcjQ4OTk0Mjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/4899429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vm", "html_url": "https://github.com/vm", "followers_url": "https://api.github.com/users/vm/followers", "following_url": "https://api.github.com/users/vm/following{/other_user}", "gists_url": "https://api.github.com/users/vm/gists{/gist_id}", "starred_url": "https://api.github.com/users/vm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vm/subscriptions", "organizations_url": "https://api.github.com/users/vm/orgs", "repos_url": "https://api.github.com/users/vm/repos", "events_url": "https://api.github.com/users/vm/events{/privacy}", "received_events_url": "https://api.github.com/users/vm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-06-20T21:20:59Z", "updated_at": "2015-06-21T03:49:00Z", "closed_at": "2015-06-21T03:49:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nIs there something in this library to do this:\n\n``` .py\n'my name is vignesh'.replace('vignesh', 'matt').replace('my', 'your')\n```\n\nI've written for loops, regex and reduces to implement this, but its very repetitive to rewrite each time. What do you recommend?\n\nIssues with for loops and reduces include:\n- Reduces are not recommended by Guido.\n- The ordering matters, since they are not replaced at once.\n\nRegex works, but its not very functional. Although I guess it doesn't matter if the implementation itself is function, just whether the API is in this case, right?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/32", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/32/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/32/events", "html_url": "https://github.com/Suor/funcy/issues/32", "id": 67477379, "node_id": "MDU6SXNzdWU2NzQ3NzM3OQ==", "number": 32, "title": "How to run the tests", "user": {"login": "paulmelnikow", "id": 1487036, "node_id": "MDQ6VXNlcjE0ODcwMzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1487036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulmelnikow", "html_url": "https://github.com/paulmelnikow", "followers_url": "https://api.github.com/users/paulmelnikow/followers", "following_url": "https://api.github.com/users/paulmelnikow/following{/other_user}", "gists_url": "https://api.github.com/users/paulmelnikow/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulmelnikow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulmelnikow/subscriptions", "organizations_url": "https://api.github.com/users/paulmelnikow/orgs", "repos_url": "https://api.github.com/users/paulmelnikow/repos", "events_url": "https://api.github.com/users/paulmelnikow/events{/privacy}", "received_events_url": "https://api.github.com/users/paulmelnikow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-04-10T00:14:25Z", "updated_at": "2015-04-10T02:41:25Z", "closed_at": "2015-04-10T02:41:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi there, neat library!\n\nCan you provide some documentation about how to run the tests?\n\nI installed tox and ran it, and seem to have encountered some setuptools-related errors, and am wondering if there are some other steps I should take. I'm on Mac OS if that's helpful.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/31", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/31/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/31/events", "html_url": "https://github.com/Suor/funcy/issues/31", "id": 63504210, "node_id": "MDU6SXNzdWU2MzUwNDIxMA==", "number": 31, "title": "Add rcompose()", "user": {"login": "Suor", "id": 284103, "node_id": "MDQ6VXNlcjI4NDEwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/284103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Suor", "html_url": "https://github.com/Suor", "followers_url": "https://api.github.com/users/Suor/followers", "following_url": "https://api.github.com/users/Suor/following{/other_user}", "gists_url": "https://api.github.com/users/Suor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Suor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Suor/subscriptions", "organizations_url": "https://api.github.com/users/Suor/orgs", "repos_url": "https://api.github.com/users/Suor/repos", "events_url": "https://api.github.com/users/Suor/events{/privacy}", "received_events_url": "https://api.github.com/users/Suor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-03-22T07:54:04Z", "updated_at": "2015-03-31T05:27:06Z", "closed_at": "2015-03-31T05:27:06Z", "author_association": "OWNER", "active_lock_reason": null, "body": "To make those transducers even less meaningful ;)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/26", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/26/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/26/events", "html_url": "https://github.com/Suor/funcy/issues/26", "id": 56944389, "node_id": "MDU6SXNzdWU1Njk0NDM4OQ==", "number": 26, "title": "cached property is not a non-data descriptor", "user": {"login": "RonnyPfannschmidt", "id": 156838, "node_id": "MDQ6VXNlcjE1NjgzOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/156838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RonnyPfannschmidt", "html_url": "https://github.com/RonnyPfannschmidt", "followers_url": "https://api.github.com/users/RonnyPfannschmidt/followers", "following_url": "https://api.github.com/users/RonnyPfannschmidt/following{/other_user}", "gists_url": "https://api.github.com/users/RonnyPfannschmidt/gists{/gist_id}", "starred_url": "https://api.github.com/users/RonnyPfannschmidt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RonnyPfannschmidt/subscriptions", "organizations_url": "https://api.github.com/users/RonnyPfannschmidt/orgs", "repos_url": "https://api.github.com/users/RonnyPfannschmidt/repos", "events_url": "https://api.github.com/users/RonnyPfannschmidt/events{/privacy}", "received_events_url": "https://api.github.com/users/RonnyPfannschmidt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-02-08T08:45:03Z", "updated_at": "2015-02-08T09:27:44Z", "closed_at": "2015-02-08T09:27:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/25", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/25/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/25/events", "html_url": "https://github.com/Suor/funcy/issues/25", "id": 53190368, "node_id": "MDU6SXNzdWU1MzE5MDM2OA==", "number": 25, "title": "documenting issues with @cached_property", "user": {"login": "bastianh", "id": 17590, "node_id": "MDQ6VXNlcjE3NTkw", "avatar_url": "https://avatars3.githubusercontent.com/u/17590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bastianh", "html_url": "https://github.com/bastianh", "followers_url": "https://api.github.com/users/bastianh/followers", "following_url": "https://api.github.com/users/bastianh/following{/other_user}", "gists_url": "https://api.github.com/users/bastianh/gists{/gist_id}", "starred_url": "https://api.github.com/users/bastianh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bastianh/subscriptions", "organizations_url": "https://api.github.com/users/bastianh/orgs", "repos_url": "https://api.github.com/users/bastianh/repos", "events_url": "https://api.github.com/users/bastianh/events{/privacy}", "received_events_url": "https://api.github.com/users/bastianh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-12-31T16:08:56Z", "updated_at": "2015-01-20T12:51:23Z", "closed_at": "2015-01-20T09:34:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nwhen I use @cached_property on a class function it won't get documented by sphinx autodoc.\n\nIs there a way to fix that or a workaround ?\n\nThanks,\nbastian\n\nfound following notice in the spinx docs:\n\nIf you document decorated functions or methods, keep in mind that autodoc retrieves its docstrings by importing the module and inspecting the **doc** attribute of the given function or method. That means that if a decorator replaces the decorated function with another, it must copy the original **doc** to the new function.\nFrom Python 2.5, functools.wraps() can be used to create well-behaved decorating functions.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/24", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/24/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/24/events", "html_url": "https://github.com/Suor/funcy/issues/24", "id": 52505687, "node_id": "MDU6SXNzdWU1MjUwNTY4Nw==", "number": 24, "title": "Adding a `flip` function to funcy", "user": {"login": "piotrklibert", "id": 1244294, "node_id": "MDQ6VXNlcjEyNDQyOTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1244294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/piotrklibert", "html_url": "https://github.com/piotrklibert", "followers_url": "https://api.github.com/users/piotrklibert/followers", "following_url": "https://api.github.com/users/piotrklibert/following{/other_user}", "gists_url": "https://api.github.com/users/piotrklibert/gists{/gist_id}", "starred_url": "https://api.github.com/users/piotrklibert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/piotrklibert/subscriptions", "organizations_url": "https://api.github.com/users/piotrklibert/orgs", "repos_url": "https://api.github.com/users/piotrklibert/repos", "events_url": "https://api.github.com/users/piotrklibert/events{/privacy}", "received_events_url": "https://api.github.com/users/piotrklibert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2014-12-19T17:07:41Z", "updated_at": "2015-02-05T15:11:29Z", "closed_at": "2015-02-05T15:11:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nevery time I try to code in a more functional manner in Python I find myself writing this little function sooner or later:\n\n``` python\n\nflip = lambda f: lambda x,y: f(y,x)\n```\n\nit's especially useful with currying, which is already provided by the library, so I think it would be a good addition. A very simple example:\n\n``` python\n\nhas_suffix = curry(flip(str.endswith))\nfilter(has_suffix(\"a\"), [\"ab\", \"ba\", \"cd\"])\n```\n\nOne thing to think about is the semantics of `flip` when used on a function with more than two arguments and on functions with `**kwargs`, especially the former case is interesting, as it could mean:\n\n``` python\n\nflip = lambda f: lambda a,b,*args: f(b,a,*args)\n```\n\nor\n\n``` python\n\nflip = lambda f: lambda *args: f(*(args[1:] + [args[0]]))\n```\n\nThe latter meaning would be consistent with for example `rotatef` from CL, but on the other hand it could be less practical.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/23", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/23/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/23/events", "html_url": "https://github.com/Suor/funcy/issues/23", "id": 48531929, "node_id": "MDU6SXNzdWU0ODUzMTkyOQ==", "number": 23, "title": "Update key-value pairs in a collection of dicts", "user": {"login": "thenovices", "id": 237647, "node_id": "MDQ6VXNlcjIzNzY0Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/237647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thenovices", "html_url": "https://github.com/thenovices", "followers_url": "https://api.github.com/users/thenovices/followers", "following_url": "https://api.github.com/users/thenovices/following{/other_user}", "gists_url": "https://api.github.com/users/thenovices/gists{/gist_id}", "starred_url": "https://api.github.com/users/thenovices/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thenovices/subscriptions", "organizations_url": "https://api.github.com/users/thenovices/orgs", "repos_url": "https://api.github.com/users/thenovices/repos", "events_url": "https://api.github.com/users/thenovices/events{/privacy}", "received_events_url": "https://api.github.com/users/thenovices/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-11-12T16:39:50Z", "updated_at": "2014-11-13T10:45:40Z", "closed_at": "2014-11-13T10:45:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure whether this function already exists. I'd love to see something like\n\n```\nupdate([{'a': 1}, {'b': 2}], letter=True)\n  # => [{'a': 1, 'letter': True}, {'b': 2, 'letter': True}]\n```\n\nHappy to submit a PR if this doesn't already exist.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/19", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/19/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/19/events", "html_url": "https://github.com/Suor/funcy/issues/19", "id": 40262555, "node_id": "MDU6SXNzdWU0MDI2MjU1NQ==", "number": 19, "title": "Pipe, thread", "user": {"login": "berrytj", "id": 1096006, "node_id": "MDQ6VXNlcjEwOTYwMDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1096006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/berrytj", "html_url": "https://github.com/berrytj", "followers_url": "https://api.github.com/users/berrytj/followers", "following_url": "https://api.github.com/users/berrytj/following{/other_user}", "gists_url": "https://api.github.com/users/berrytj/gists{/gist_id}", "starred_url": "https://api.github.com/users/berrytj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/berrytj/subscriptions", "organizations_url": "https://api.github.com/users/berrytj/orgs", "repos_url": "https://api.github.com/users/berrytj/repos", "events_url": "https://api.github.com/users/berrytj/events{/privacy}", "received_events_url": "https://api.github.com/users/berrytj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2014-08-14T14:59:21Z", "updated_at": "2014-10-06T03:28:15Z", "closed_at": "2014-10-06T03:28:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "[Pipe](http://toolz.readthedocs.org/en/latest/api.html?highlight=pipe#toolz.functoolz.pipe) and [thread](http://toolz.readthedocs.org/en/latest/api.html?highlight=thread#toolz.functoolz.thread_last) are constructs I use frequently to organize my transformations.  I'm wondering if there's a reason you don't appear to have them.  They differ with compose in that 1) the order of transformations is reversed, and 2) the transformations are invoked by the call.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/18", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/18/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/18/events", "html_url": "https://github.com/Suor/funcy/issues/18", "id": 40261404, "node_id": "MDU6SXNzdWU0MDI2MTQwNA==", "number": 18, "title": "Split", "user": {"login": "berrytj", "id": 1096006, "node_id": "MDQ6VXNlcjEwOTYwMDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1096006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/berrytj", "html_url": "https://github.com/berrytj", "followers_url": "https://api.github.com/users/berrytj/followers", "following_url": "https://api.github.com/users/berrytj/following{/other_user}", "gists_url": "https://api.github.com/users/berrytj/gists{/gist_id}", "starred_url": "https://api.github.com/users/berrytj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/berrytj/subscriptions", "organizations_url": "https://api.github.com/users/berrytj/orgs", "repos_url": "https://api.github.com/users/berrytj/repos", "events_url": "https://api.github.com/users/berrytj/events{/privacy}", "received_events_url": "https://api.github.com/users/berrytj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-08-14T14:49:54Z", "updated_at": "2014-08-14T16:05:53Z", "closed_at": "2014-08-14T14:57:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "users_over_21, users_under_21 = split(lambda user: user.age >= 21, users)\n\nthoughts?  doing it manually is cumbersome, but maybe you have a better way.\n\nover_21 = lambda user: user.age >= 21\nusers_over_21 = filter(over_21, users)\nusers_under_21 = filter(complement(over_21), users)\n\ni'd be happy to implement.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/17", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/17/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/17/events", "html_url": "https://github.com/Suor/funcy/issues/17", "id": 36282059, "node_id": "MDU6SXNzdWUzNjI4MjA1OQ==", "number": 17, "title": "A request to add proper docstrings to functions.", "user": {"login": "teferi", "id": 109442, "node_id": "MDQ6VXNlcjEwOTQ0Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/109442?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teferi", "html_url": "https://github.com/teferi", "followers_url": "https://api.github.com/users/teferi/followers", "following_url": "https://api.github.com/users/teferi/following{/other_user}", "gists_url": "https://api.github.com/users/teferi/gists{/gist_id}", "starred_url": "https://api.github.com/users/teferi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teferi/subscriptions", "organizations_url": "https://api.github.com/users/teferi/orgs", "repos_url": "https://api.github.com/users/teferi/repos", "events_url": "https://api.github.com/users/teferi/events{/privacy}", "received_events_url": "https://api.github.com/users/teferi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2014-06-23T11:25:34Z", "updated_at": "2017-09-06T12:05:22Z", "closed_at": "2017-09-06T12:05:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of \u2014 I really like some of the abstractions the library introduces. But exploring the library in python/ipython REPL shell is really hard without proper docstrings.\ncompare \n\n```\nIn [5]: funcy.repeat?\nType:       type\nString Form:<type 'itertools.repeat'>\nFile:       /Users/teferi/git/eksmo/env/lib/python2.7/lib-dynload/itertools.so\nDocstring:\nrepeat(object [,times]) -> create an iterator which returns the object\nfor the specified number of times.  If not specified, returns the object\nendlessly.\n```\n\nto\n\n```\nIn [6]: funcy.retry?\nType:       function\nString Form:<function retry at 0x1063a1848>\nFile:       /Users/teferi/git/eksmo/env/lib/python2.7/site-packages/funcy/flow.py\nDefinition: funcy.retry(*dargs, **dkwargs)\nDocstring:  <no docstring> \n```\n\nReading the latter really doesn't shed any light on how to use it. I understand that it's a lot of work \u2014 to properly document the whole thing, but it would be really nice to have such descriptions.\n\nAlso I'm willing to offer some help with that some time later (if that's ok =))\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/15", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/15/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/15/events", "html_url": "https://github.com/Suor/funcy/issues/15", "id": 31738765, "node_id": "MDU6SXNzdWUzMTczODc2NQ==", "number": 15, "title": "misleading snippet from documentation, re: `group_by`", "user": {"login": "hangtwenty", "id": 2420688, "node_id": "MDQ6VXNlcjI0MjA2ODg=", "avatar_url": "https://avatars0.githubusercontent.com/u/2420688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hangtwenty", "html_url": "https://github.com/hangtwenty", "followers_url": "https://api.github.com/users/hangtwenty/followers", "following_url": "https://api.github.com/users/hangtwenty/following{/other_user}", "gists_url": "https://api.github.com/users/hangtwenty/gists{/gist_id}", "starred_url": "https://api.github.com/users/hangtwenty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hangtwenty/subscriptions", "organizations_url": "https://api.github.com/users/hangtwenty/orgs", "repos_url": "https://api.github.com/users/hangtwenty/repos", "events_url": "https://api.github.com/users/hangtwenty/events{/privacy}", "received_events_url": "https://api.github.com/users/hangtwenty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-04-17T15:55:05Z", "updated_at": "2014-04-18T15:18:55Z", "closed_at": "2014-04-18T15:18:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "http://funcy.readthedocs.org/en/latest/seqs.html#group_by\n\nsays it returns a `dict`, when it actually returns a `defaultdict(list)`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/14", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/14/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/14/events", "html_url": "https://github.com/Suor/funcy/issues/14", "id": 27497042, "node_id": "MDU6SXNzdWUyNzQ5NzA0Mg==", "number": 14, "title": "Ambiguity in `first`", "user": {"login": "AndreiPashkin", "id": 4378647, "node_id": "MDQ6VXNlcjQzNzg2NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/4378647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreiPashkin", "html_url": "https://github.com/AndreiPashkin", "followers_url": "https://api.github.com/users/AndreiPashkin/followers", "following_url": "https://api.github.com/users/AndreiPashkin/following{/other_user}", "gists_url": "https://api.github.com/users/AndreiPashkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreiPashkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreiPashkin/subscriptions", "organizations_url": "https://api.github.com/users/AndreiPashkin/orgs", "repos_url": "https://api.github.com/users/AndreiPashkin/repos", "events_url": "https://api.github.com/users/AndreiPashkin/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreiPashkin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2014-02-13T06:20:30Z", "updated_at": "2014-02-13T08:31:28Z", "closed_at": "2014-02-13T07:53:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "`first([None])` equals to `first([])`.\n\nRelated [thread on SO](http://stackoverflow.com/questions/6364409/why-does-haskells-head-crash-on-an-empty-list-or-why-doesnt-it-return-an).\nTurns out like this is not trivial issue.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/13", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/13/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/13/events", "html_url": "https://github.com/Suor/funcy/issues/13", "id": 25166268, "node_id": "MDU6SXNzdWUyNTE2NjI2OA==", "number": 13, "title": "New function: leaf", "user": {"login": "kvesteri", "id": 398714, "node_id": "MDQ6VXNlcjM5ODcxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/398714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvesteri", "html_url": "https://github.com/kvesteri", "followers_url": "https://api.github.com/users/kvesteri/followers", "following_url": "https://api.github.com/users/kvesteri/following{/other_user}", "gists_url": "https://api.github.com/users/kvesteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvesteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvesteri/subscriptions", "organizations_url": "https://api.github.com/users/kvesteri/orgs", "repos_url": "https://api.github.com/users/kvesteri/repos", "events_url": "https://api.github.com/users/kvesteri/events{/privacy}", "received_events_url": "https://api.github.com/users/kvesteri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-01-07T13:08:45Z", "updated_at": "2014-01-07T15:38:52Z", "closed_at": "2014-01-07T15:38:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure about the name but the idea is to return the leaf node for given key in mapping of (possible deeply nested) mappings.\n\n``` python\nfrom collections import Mapping\n\ndef leaf(obj, key):\n    item = obj.get(key, None)\n\n    if item is None or isinstance(item, Mapping):\n        for subkey in iter(obj):\n            item = obj.get(subkey, None)\n            if isinstance(item, Mapping):\n                try:\n                    return leaf(item, key)\n                except KeyError:\n                    pass\n    else:\n        return item\n    raise KeyError(key)\n```\n\nUsage:\n\n``` python\nd = {\n    1: 'first',\n    2: {\n        3: 'second',\n        4: 'third'\n    }\n}\n\nleaf(1)  # 'first'\nleaf(2)  # KeyError\nleaf(3)  # 'second'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/12", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/12/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/12/events", "html_url": "https://github.com/Suor/funcy/issues/12", "id": 25166102, "node_id": "MDU6SXNzdWUyNTE2NjEwMg==", "number": 12, "title": "New function: deep_dict", "user": {"login": "kvesteri", "id": 398714, "node_id": "MDQ6VXNlcjM5ODcxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/398714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvesteri", "html_url": "https://github.com/kvesteri", "followers_url": "https://api.github.com/users/kvesteri/followers", "following_url": "https://api.github.com/users/kvesteri/following{/other_user}", "gists_url": "https://api.github.com/users/kvesteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvesteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvesteri/subscriptions", "organizations_url": "https://api.github.com/users/kvesteri/orgs", "repos_url": "https://api.github.com/users/kvesteri/repos", "events_url": "https://api.github.com/users/kvesteri/events{/privacy}", "received_events_url": "https://api.github.com/users/kvesteri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-01-07T13:04:44Z", "updated_at": "2014-01-07T13:36:18Z", "closed_at": "2014-01-07T13:36:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Example implementation:\n\n``` python\ndef deep_dict(seq, f=dict):\n    def pair_f(pair):\n        k, v = pair\n        if isinstance(v, (list, tuple)):\n            return k, deep_dict(v, f)\n        return k, v\n    return f(map(pair_f, seq))\n```\n\nUsage:\n\n``` python\nseq = [\n    (1,\n        (\n            (2, 1),\n            (3, 1),\n            (4, 1)\n        )\n    ),\n    (5, 1)\n]\n\ndeep_dict(seq) == {1: {2: 1, 3: 1, 4: 1}, 5: 1}\n```\n\nThis needs some tuning though to be able to cope with funcy's schematics. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/11", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/11/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/11/events", "html_url": "https://github.com/Suor/funcy/issues/11", "id": 24850440, "node_id": "MDU6SXNzdWUyNDg1MDQ0MA==", "number": 11, "title": "Easy Decorators", "user": {"login": "nathanhere", "id": 1151667, "node_id": "MDQ6VXNlcjExNTE2Njc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1151667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanhere", "html_url": "https://github.com/nathanhere", "followers_url": "https://api.github.com/users/nathanhere/followers", "following_url": "https://api.github.com/users/nathanhere/following{/other_user}", "gists_url": "https://api.github.com/users/nathanhere/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanhere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanhere/subscriptions", "organizations_url": "https://api.github.com/users/nathanhere/orgs", "repos_url": "https://api.github.com/users/nathanhere/repos", "events_url": "https://api.github.com/users/nathanhere/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanhere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-12-28T19:46:46Z", "updated_at": "2013-12-30T04:11:18Z", "closed_at": "2013-12-30T04:11:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Do you think you could provide an example in the docs on how to use Easy Decorators? \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/10", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/10/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/10/events", "html_url": "https://github.com/Suor/funcy/issues/10", "id": 24782202, "node_id": "MDU6SXNzdWUyNDc4MjIwMg==", "number": 10, "title": "Join the forces", "user": {"login": "kvesteri", "id": 398714, "node_id": "MDQ6VXNlcjM5ODcxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/398714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvesteri", "html_url": "https://github.com/kvesteri", "followers_url": "https://api.github.com/users/kvesteri/followers", "following_url": "https://api.github.com/users/kvesteri/following{/other_user}", "gists_url": "https://api.github.com/users/kvesteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvesteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvesteri/subscriptions", "organizations_url": "https://api.github.com/users/kvesteri/orgs", "repos_url": "https://api.github.com/users/kvesteri/repos", "events_url": "https://api.github.com/users/kvesteri/events{/privacy}", "received_events_url": "https://api.github.com/users/kvesteri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2013-12-26T08:59:16Z", "updated_at": "2014-06-10T15:41:42Z", "closed_at": "2014-05-15T06:34:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python has atleast 3 great functional programming libraries. These libraries have lots of overlapping functionality:\n- https://github.com/pytoolz/toolz\n- https://github.com/Suor/funcy\n- https://github.com/kachayev/fn.py\n\nMaybe also this:\n- https://github.com/Suor/whatever\n\nI would see as the benefit of the whole community if the authors of all these libraries could work more together on a common codebase (I'm willing to participate also in making this happen). \n\n@Suor, @pytoolz, @mrocklin, @kachayev Thank you for the hard work all of you have put into these wonderful packages! What do you guys think about this? Could we make more collaboration between the projects?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/9", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/9/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/9/events", "html_url": "https://github.com/Suor/funcy/issues/9", "id": 24774511, "node_id": "MDU6SXNzdWUyNDc3NDUxMQ==", "number": 9, "title": "Curried functions only accept single argument", "user": {"login": "kvesteri", "id": 398714, "node_id": "MDQ6VXNlcjM5ODcxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/398714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvesteri", "html_url": "https://github.com/kvesteri", "followers_url": "https://api.github.com/users/kvesteri/followers", "following_url": "https://api.github.com/users/kvesteri/following{/other_user}", "gists_url": "https://api.github.com/users/kvesteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvesteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvesteri/subscriptions", "organizations_url": "https://api.github.com/users/kvesteri/orgs", "repos_url": "https://api.github.com/users/kvesteri/repos", "events_url": "https://api.github.com/users/kvesteri/events{/privacy}", "received_events_url": "https://api.github.com/users/kvesteri/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 16322193, "node_id": "MDU6TGFiZWwxNjMyMjE5Mw==", "url": "https://api.github.com/repos/Suor/funcy/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2013-12-25T23:56:38Z", "updated_at": "2013-12-29T09:00:53Z", "closed_at": "2013-12-29T09:00:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all I have to thank you for this wonderful library! I have some problems with currying though.\n\nConsider the following function:\n\n``` python\ndef adder(a, b):\n   return a + b\n```\n\nNow lets say I want to curry this function to make the following possible\n\n```\nadder = curry(adder)\n\nadder(4)(3)  # 7\nadder(4, 3)  # 7\n```\n\nThe latter does not work since curried functions in Funcy only accept single argument.\n\nI think a more robust way to implement currying is here: http://mtomassoli.wordpress.com/2012/03/18/currying-in-python/\n\nEdit: found an even better way of implementing this: http://stackoverflow.com/questions/9458271/currying-decorator-in-python\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/8", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/8/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/8/events", "html_url": "https://github.com/Suor/funcy/issues/8", "id": 24685428, "node_id": "MDU6SXNzdWUyNDY4NTQyOA==", "number": 8, "title": "feature request (function request)", "user": {"login": "hangtwenty", "id": 2420688, "node_id": "MDQ6VXNlcjI0MjA2ODg=", "avatar_url": "https://avatars0.githubusercontent.com/u/2420688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hangtwenty", "html_url": "https://github.com/hangtwenty", "followers_url": "https://api.github.com/users/hangtwenty/followers", "following_url": "https://api.github.com/users/hangtwenty/following{/other_user}", "gists_url": "https://api.github.com/users/hangtwenty/gists{/gist_id}", "starred_url": "https://api.github.com/users/hangtwenty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hangtwenty/subscriptions", "organizations_url": "https://api.github.com/users/hangtwenty/orgs", "repos_url": "https://api.github.com/users/hangtwenty/repos", "events_url": "https://api.github.com/users/hangtwenty/events{/privacy}", "received_events_url": "https://api.github.com/users/hangtwenty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 16322193, "node_id": "MDU6TGFiZWwxNjMyMjE5Mw==", "url": "https://api.github.com/repos/Suor/funcy/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-12-22T18:32:35Z", "updated_at": "2014-04-17T15:54:24Z", "closed_at": "2014-04-17T15:54:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I love `where`. What about another similar function, that takes predicates instead of values? Not sure what to call it, but it behaves like this:\n\n``` python\ndef filterwhere(mappings, **preds):\n    \"\"\" Like `where` but instead of value equality checks, use predicate functions.\n\n    .. doctest ::\n\n        >>> mappings = [{'foo': 'a', 'bar': 16},\n        ...  {'foo': 'b', 'bar': 32},\n        ...  {'foo': 'd', 'bar': 128, '': ''},\n        ...  {'foo': 'e', 'bar': 123, 'baz': 'quux'},\n        ...  {'foo': 'c', 'bar': 6400},\n        ...  {'foo': 'f', 'bar': float(\"inf\")},]\n        >>> x = filterwhere(mappings, bar=lambda bar: bar < 100)\n        >>> assert x == [{'foo': 'a', 'bar': 16}, {'foo': 'b', 'bar': 32}]\n        >>> y = filterwhere(\n        ...     mappings, bar=lambda n: n % 2 != 0 and n < 1000)\n        >>> assert y == [{'foo': 'e', 'bar': 123, 'baz': 'quux'}]\n\n    :param mappings: A sequence of mappings, for example a list of dicts.\n    :param preds: Any number of predicate functions. Each mapping must\n        pass `pred(mapping[key_of_mapping])` for each keyword argument pair of\n        `key_of_mapping=pred`.\n    :return: A sequence of mappings.\n    \"\"\"\n    match = lambda m: all(pred(m[k]) for k, pred in preds.items())\n    return filter(match, mappings)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/7", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/7/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/7/events", "html_url": "https://github.com/Suor/funcy/issues/7", "id": 23039135, "node_id": "MDU6SXNzdWUyMzAzOTEzNQ==", "number": 7, "title": "More Python Version Support", "user": {"login": "prologic", "id": 1290234, "node_id": "MDQ6VXNlcjEyOTAyMzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1290234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prologic", "html_url": "https://github.com/prologic", "followers_url": "https://api.github.com/users/prologic/followers", "following_url": "https://api.github.com/users/prologic/following{/other_user}", "gists_url": "https://api.github.com/users/prologic/gists{/gist_id}", "starred_url": "https://api.github.com/users/prologic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prologic/subscriptions", "organizations_url": "https://api.github.com/users/prologic/orgs", "repos_url": "https://api.github.com/users/prologic/repos", "events_url": "https://api.github.com/users/prologic/events{/privacy}", "received_events_url": "https://api.github.com/users/prologic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-11-21T01:41:49Z", "updated_at": "2013-12-29T04:56:43Z", "closed_at": "2013-12-29T04:56:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I know there's a Python 3.3 Issue already (Issue #1) but I'd like to see support for Python 2.6 as well. I don't think it's unreasonable to support Python 2.6, 2.7, 3.3 and PyPy? I've tested funcy against Python 2.7 and PyPY 2.2 successfully so far.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/6", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/6/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/6/events", "html_url": "https://github.com/Suor/funcy/issues/6", "id": 21503425, "node_id": "MDU6SXNzdWUyMTUwMzQyNQ==", "number": 6, "title": "The double function does not exist", "user": {"login": "cameronbwhite", "id": 5105665, "node_id": "MDQ6VXNlcjUxMDU2NjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5105665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cameronbwhite", "html_url": "https://github.com/cameronbwhite", "followers_url": "https://api.github.com/users/cameronbwhite/followers", "following_url": "https://api.github.com/users/cameronbwhite/following{/other_user}", "gists_url": "https://api.github.com/users/cameronbwhite/gists{/gist_id}", "starred_url": "https://api.github.com/users/cameronbwhite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cameronbwhite/subscriptions", "organizations_url": "https://api.github.com/users/cameronbwhite/orgs", "repos_url": "https://api.github.com/users/cameronbwhite/repos", "events_url": "https://api.github.com/users/cameronbwhite/events{/privacy}", "received_events_url": "https://api.github.com/users/cameronbwhite/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-10-24T06:34:18Z", "updated_at": "2013-10-24T06:43:07Z", "closed_at": "2013-10-24T06:43:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the two files, `tests/test_funcs.py` and `README.rst` the function double appears but is not defined.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/3", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/3/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/3/events", "html_url": "https://github.com/Suor/funcy/issues/3", "id": 20844214, "node_id": "MDU6SXNzdWUyMDg0NDIxNA==", "number": 3, "title": "Installation from pypi via pip fails (Python 2.x)", "user": {"login": "prologic", "id": 1290234, "node_id": "MDQ6VXNlcjEyOTAyMzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1290234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prologic", "html_url": "https://github.com/prologic", "followers_url": "https://api.github.com/users/prologic/followers", "following_url": "https://api.github.com/users/prologic/following{/other_user}", "gists_url": "https://api.github.com/users/prologic/gists{/gist_id}", "starred_url": "https://api.github.com/users/prologic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prologic/subscriptions", "organizations_url": "https://api.github.com/users/prologic/orgs", "repos_url": "https://api.github.com/users/prologic/repos", "events_url": "https://api.github.com/users/prologic/events{/privacy}", "received_events_url": "https://api.github.com/users/prologic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-10-11T00:27:07Z", "updated_at": "2013-10-11T02:01:55Z", "closed_at": "2013-10-11T01:47:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "See:\n\n``` sh\n$ pip install funcy\nDownloading/unpacking funcy\n  Downloading funcy-0.5.5.tar.gz\n  Running setup.py egg_info for package funcy\n    Traceback (most recent call last):\n      File \"<string>\", line 16, in <module>\n      File \"/Users/xxx/.virtualenvs/ccav/build/funcy/setup.py\", line 5, in <module>\n        version=open('VERSION').read().strip(),\n    IOError: [Errno 2] No such file or directory: 'VERSION'\n    Complete output from command python setup.py egg_info:\n    Traceback (most recent call last):\n\n  File \"<string>\", line 16, in <module>\n\n  File \"/Users/xxx/.virtualenvs/ccav/build/funcy/setup.py\", line 5, in <module>\n\n    version=open('VERSION').read().strip(),\n\nIOError: [Errno 2] No such file or directory: 'VERSION'\n\n----------------------------------------\nCleaning up...\nCommand python setup.py egg_info failed with error code 1 in /Users/xxx/.virtualenvs/ccav/build/funcy\nStoring complete log in /Users/xxx/.pip/pip.log\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/funcy/issues/1", "repository_url": "https://api.github.com/repos/Suor/funcy", "labels_url": "https://api.github.com/repos/Suor/funcy/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/funcy/issues/1/comments", "events_url": "https://api.github.com/repos/Suor/funcy/issues/1/events", "html_url": "https://github.com/Suor/funcy/issues/1", "id": 13583990, "node_id": "MDU6SXNzdWUxMzU4Mzk5MA==", "number": 1, "title": "installation error on python 3.3", "user": {"login": "EnricoGiampieri", "id": 1419337, "node_id": "MDQ6VXNlcjE0MTkzMzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1419337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EnricoGiampieri", "html_url": "https://github.com/EnricoGiampieri", "followers_url": "https://api.github.com/users/EnricoGiampieri/followers", "following_url": "https://api.github.com/users/EnricoGiampieri/following{/other_user}", "gists_url": "https://api.github.com/users/EnricoGiampieri/gists{/gist_id}", "starred_url": "https://api.github.com/users/EnricoGiampieri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EnricoGiampieri/subscriptions", "organizations_url": "https://api.github.com/users/EnricoGiampieri/orgs", "repos_url": "https://api.github.com/users/EnricoGiampieri/repos", "events_url": "https://api.github.com/users/EnricoGiampieri/events{/privacy}", "received_events_url": "https://api.github.com/users/EnricoGiampieri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2013-04-24T12:38:47Z", "updated_at": "2014-01-05T23:54:57Z", "closed_at": "2014-01-05T13:11:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! I really like the job you are doing on funcy (even if it lacks a little on the inline documentation side :) ).\nIt works fine on python 2.7, but on python 3.3 it gives me the following error:\n\nInstalling collected packages: funcy\n  Running setup.py install for funcy\n      File \"/usr/local/lib/python3.3/dist-packages/funcy/colls.py\", line 88\n        return walk(lambda (k, v): (f(k), v), coll)\n                           ^\n    SyntaxError: invalid syntax\n\nThis is because in python 3 the lambda function cannot unpack tuple.\nI installed it with:\n    pip install -U funcy\n", "performed_via_github_app": null, "score": 1.0}]}