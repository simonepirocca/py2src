{"total_count": 387, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/taverntesting/tavern/issues/586", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/586/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/586/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/586/events", "html_url": "https://github.com/taverntesting/tavern/issues/586", "id": 677846544, "node_id": "MDU6SXNzdWU2Nzc4NDY1NDQ=", "number": 586, "title": "Unable to load the UTF8 string in the include file", "user": {"login": "dongfangtianyu", "id": 7629022, "node_id": "MDQ6VXNlcjc2MjkwMjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/7629022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dongfangtianyu", "html_url": "https://github.com/dongfangtianyu", "followers_url": "https://api.github.com/users/dongfangtianyu/followers", "following_url": "https://api.github.com/users/dongfangtianyu/following{/other_user}", "gists_url": "https://api.github.com/users/dongfangtianyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/dongfangtianyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dongfangtianyu/subscriptions", "organizations_url": "https://api.github.com/users/dongfangtianyu/orgs", "repos_url": "https://api.github.com/users/dongfangtianyu/repos", "events_url": "https://api.github.com/users/dongfangtianyu/events{/privacy}", "received_events_url": "https://api.github.com/users/dongfangtianyu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-12T17:06:18Z", "updated_at": "2020-08-22T10:34:53Z", "closed_at": "2020-08-22T10:34:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "First of all, praise this excellent tool.\r\n\r\nIn the process of using, we encountered unexpected errors.\r\n\r\nI have a file, a.yaml, which contains utf8 strings\uff0c it works\r\n```yaml\r\n# a.yaml\r\ntest_name: \u65ad\u8a00\u54cd\u5e94\u4efb\u610f\u5185\u5bb9\r\n\r\nincludes:\r\n  - !include common.yaml\r\nstages:\r\n  - name: hello\r\n    request:\r\n      url: \"http://127.0.0.1:8001/get_user\"\r\n      method: GET\r\n    response:\r\n      strict: False\r\n      status_code: 200\r\n      json:\r\n        name: !anything\r\n```\r\n\r\nbut when the include file contains the UTF8 string,  errors\r\n```yaml\r\n# common.yaml\r\nname: \u6211\u7684\u6d4b\u8bd5\r\ndescription: \u672c\u6587\u4ef6\u8bb0\u5f55\u88ab\u4e0d\u540c\u6d4b\u8bd5\u7528\u4f8b\u4f7f\u7528\u7684\u5185\u5bb9\r\n\r\n\r\nvariables:\r\n  hosst: http://127.0.0.1:8001/\r\n\r\n```\r\n\r\nthe error info \r\n```bash\r\nenv\\lib\\site-packages\\tavern\\util\\loader.py:141: in construct_include\r\n    return load_single_document_yaml(filename)\r\nenv\\lib\\site-packages\\tavern\\util\\loader.py:409: in load_single_document_yaml\r\n    contents = yaml.load(fileobj, Loader=IncludeLoader)\r\nenv\\lib\\site-packages\\yaml\\__init__.py:112: in load\r\n    loader = Loader(stream)\r\nenv\\lib\\site-packages\\tavern\\util\\loader.py:116: in __init__\r\n    Reader.__init__(self, stream)\r\nenv\\lib\\site-packages\\yaml\\reader.py:85: in __init__\r\n    self.determine_encoding()\r\nenv\\lib\\site-packages\\yaml\\reader.py:124: in determine_encoding\r\n    self.update_raw()\r\nenv\\lib\\site-packages\\yaml\\reader.py:178: in update_raw\r\n    data = self.stream.read(size)\r\nE   UnicodeDecodeError: 'gbk' codec can't decode byte 0xac in position 35: illegal multibyte sequence\r\n````\r\nwe modified `load_single_document_yaml` function, the operation is resumed\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/581", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/581/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/581/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/581/events", "html_url": "https://github.com/taverntesting/tavern/issues/581", "id": 674140236, "node_id": "MDU6SXNzdWU2NzQxNDAyMzY=", "number": 581, "title": "Build failing with latest 1.2.3", "user": {"login": "burritoIand", "id": 230757, "node_id": "MDQ6VXNlcjIzMDc1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/230757?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burritoIand", "html_url": "https://github.com/burritoIand", "followers_url": "https://api.github.com/users/burritoIand/followers", "following_url": "https://api.github.com/users/burritoIand/following{/other_user}", "gists_url": "https://api.github.com/users/burritoIand/gists{/gist_id}", "starred_url": "https://api.github.com/users/burritoIand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burritoIand/subscriptions", "organizations_url": "https://api.github.com/users/burritoIand/orgs", "repos_url": "https://api.github.com/users/burritoIand/repos", "events_url": "https://api.github.com/users/burritoIand/events{/privacy}", "received_events_url": "https://api.github.com/users/burritoIand/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-06T08:50:45Z", "updated_at": "2020-08-08T13:08:08Z", "closed_at": "2020-08-08T13:08:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, my ci/cd began to fail just now while running tests and it seems to be a problem installing packages with pip using tavern 1.2.3. I reverted to 1.2.2 and everything installs/passes fine.\r\n\r\nerror:\r\n```\r\nFailed to build PyYAML paho-mqtt docopt ruamel.yaml.clib wrapt lazy-object-proxy\r\nERROR: Could not build wheels for lazy-object-proxy which use PEP 517 and cannot be installed directly\r\n```\r\n\r\npip 20.1\r\npytest latest (tried pytest<6)\r\npython 3.8\r\n\r\nalso it looks like paho-mqtt is using a version from 2017 but not sure if that matters (my mqtt tests work fine)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/579", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/579/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/579/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/579/events", "html_url": "https://github.com/taverntesting/tavern/issues/579", "id": 673004162, "node_id": "MDU6SXNzdWU2NzMwMDQxNjI=", "number": 579, "title": "PluginLoadError from mismatched requirements", "user": {"login": "zroger", "id": 175720, "node_id": "MDQ6VXNlcjE3NTcyMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/175720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zroger", "html_url": "https://github.com/zroger", "followers_url": "https://api.github.com/users/zroger/followers", "following_url": "https://api.github.com/users/zroger/following{/other_user}", "gists_url": "https://api.github.com/users/zroger/gists{/gist_id}", "starred_url": "https://api.github.com/users/zroger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zroger/subscriptions", "organizations_url": "https://api.github.com/users/zroger/orgs", "repos_url": "https://api.github.com/users/zroger/repos", "events_url": "https://api.github.com/users/zroger/events{/privacy}", "received_events_url": "https://api.github.com/users/zroger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-04T18:54:41Z", "updated_at": "2020-08-08T13:08:06Z", "closed_at": "2020-08-08T13:08:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Between `1.2.2` and `1.2.3` my test suite started raising this exception:\r\n\r\n```\r\ntavern.util.exceptions.PluginLoadError: Error loading plugin requests = \r\ntavern._plugins.rest.tavernhook:TavernRestPlugin - (PyYAML 5.3.1 (/var/task), Requirement.parse('PyYAML==5.3'))\r\n```\r\n\r\nI have an unpinned `PyYAML` requirement in my project which is how I ended up with version `5.3.1`, but tavern `1.2.3` wants exactly version `5.3`, which was pinned in #577. Digging through the code, it looks like the exception comes from stevedore because the [`verify_requirements`](https://github.com/taverntesting/tavern/blob/3efff50c17d50956106ceaef2de0557a4b086c1a/tavern/plugins.py#L113) argument is used when loading the plugins.\r\n\r\nTo get around this issue, I've pinned tavern to `1.2.2` rather than pinning PyYAML since `5.3.1` is a [security fix](https://github.com/yaml/pyyaml/pull/386).\r\n\r\nI'm not sure how to proceed to fix this in the long run. The two options I can see are to give the PyYAML requirement a looser version specifier, or to remove the `verify_requirements` argument. If you let me know which you prefer, I can try to put together a patch.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/578", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/578/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/578/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/578/events", "html_url": "https://github.com/taverntesting/tavern/issues/578", "id": 672704702, "node_id": "MDU6SXNzdWU2NzI3MDQ3MDI=", "number": 578, "title": "Pylint==2.4.4 has been marked as insecure by pyup.io", "user": {"login": "dankarpinski", "id": 4958866, "node_id": "MDQ6VXNlcjQ5NTg4NjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4958866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dankarpinski", "html_url": "https://github.com/dankarpinski", "followers_url": "https://api.github.com/users/dankarpinski/followers", "following_url": "https://api.github.com/users/dankarpinski/following{/other_user}", "gists_url": "https://api.github.com/users/dankarpinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/dankarpinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dankarpinski/subscriptions", "organizations_url": "https://api.github.com/users/dankarpinski/orgs", "repos_url": "https://api.github.com/users/dankarpinski/repos", "events_url": "https://api.github.com/users/dankarpinski/events{/privacy}", "received_events_url": "https://api.github.com/users/dankarpinski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-04T11:02:42Z", "updated_at": "2020-08-08T13:08:07Z", "closed_at": "2020-08-08T13:08:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Pylint==2.4.4 used by tavern is marked as insecure on the pyup.io [safety db](https://github.com/pyupio/safety-db/blob/c4f4673861c540659b8995cf23af2915c584e9d3/data/insecure_full.json#L12673)\r\n\r\nThis means doing a `pipenv check` now gives the error:\r\n```\r\n38224: pylint <2.5.0 resolved (2.4.4 installed)!\r\nPylint 2.5.0 no longer allows ``python -m pylint ...`` to import user code. Previously, it added the current working directory as the first element of ``sys.path``. This opened up a potential security hole where ``pylint`` would import user level code as long as that code resided in modules having the same name as stdlib or pylint's own modules.\r\n```\r\n\r\nIs there a reason for pinning to `2.4.4`? As this prevents me upgrading", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/575", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/575/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/575/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/575/events", "html_url": "https://github.com/taverntesting/tavern/issues/575", "id": 670339183, "node_id": "MDU6SXNzdWU2NzAzMzkxODM=", "number": 575, "title": "ERROR collecting test session - Plz suggest the fix", "user": {"login": "greeshmavyas", "id": 47615855, "node_id": "MDQ6VXNlcjQ3NjE1ODU1", "avatar_url": "https://avatars0.githubusercontent.com/u/47615855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/greeshmavyas", "html_url": "https://github.com/greeshmavyas", "followers_url": "https://api.github.com/users/greeshmavyas/followers", "following_url": "https://api.github.com/users/greeshmavyas/following{/other_user}", "gists_url": "https://api.github.com/users/greeshmavyas/gists{/gist_id}", "starred_url": "https://api.github.com/users/greeshmavyas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/greeshmavyas/subscriptions", "organizations_url": "https://api.github.com/users/greeshmavyas/orgs", "repos_url": "https://api.github.com/users/greeshmavyas/repos", "events_url": "https://api.github.com/users/greeshmavyas/events{/privacy}", "received_events_url": "https://api.github.com/users/greeshmavyas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-31T23:33:46Z", "updated_at": "2020-08-06T08:37:22Z", "closed_at": "2020-08-01T13:06:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "+ set -e\r\n+ cd /usr/bin\r\n+ PYTHONPATH=.\r\n+ pytest -s -vv --tb=short -rpPfEs ./test_inapp.create_notifications.tavern.yaml ./test_inapp.query_notifications.tavern.yaml\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.8.2, pytest-6.0.1, py-1.9.0, pluggy-0.13.1 -- /usr/bin/python3\r\ncachedir: .pytest_cache\r\nrootdir: /usr/bin\r\nplugins: tavern-1.2.2\r\ncollecting ... collected 0 items / 1 error\r\n\r\n==================================== ERRORS ====================================\r\n________________________ ERROR collecting test session _________________________\r\n../local/lib/python3.8/dist-packages/pluggy/hooks.py:286: in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\n../local/lib/python3.8/dist-packages/pluggy/manager.py:93: in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n../local/lib/python3.8/dist-packages/pluggy/manager.py:84: in <lambda>\r\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\n../local/lib/python3.8/dist-packages/tavern/testutils/pytesthook/hooks.py:43: in pytest_collect_file\r\n    return YamlFile(path, parent)\r\n../local/lib/python3.8/dist-packages/_pytest/nodes.py:95: in __call__\r\n    warnings.warn(NODE_USE_FROM_PARENT.format(name=self.__name__), stacklevel=2)\r\nE   pytest.PytestDeprecationWarning: Direct construction of YamlFile has been deprecated, please use YamlFile.from_parent.\r\nE   See https://docs.pytest.org/en/stable/deprecations.html#node-construction-changed-to-node-from-parent for more details.\r\n=========================== short test summary info ============================\r\nERROR  - pytest.PytestDeprecationWarning: Direct construction of YamlFile has...\r\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\r\n=============================== 1 error in 0.39s ===============================", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/567", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/567/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/567/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/567/events", "html_url": "https://github.com/taverntesting/tavern/issues/567", "id": 653260432, "node_id": "MDU6SXNzdWU2NTMyNjA0MzI=", "number": 567, "title": "na", "user": {"login": "benhowes", "id": 471170, "node_id": "MDQ6VXNlcjQ3MTE3MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/471170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benhowes", "html_url": "https://github.com/benhowes", "followers_url": "https://api.github.com/users/benhowes/followers", "following_url": "https://api.github.com/users/benhowes/following{/other_user}", "gists_url": "https://api.github.com/users/benhowes/gists{/gist_id}", "starred_url": "https://api.github.com/users/benhowes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benhowes/subscriptions", "organizations_url": "https://api.github.com/users/benhowes/orgs", "repos_url": "https://api.github.com/users/benhowes/repos", "events_url": "https://api.github.com/users/benhowes/events{/privacy}", "received_events_url": "https://api.github.com/users/benhowes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-08T12:33:41Z", "updated_at": "2020-07-08T12:34:44Z", "closed_at": "2020-07-08T12:34:10Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/566", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/566/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/566/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/566/events", "html_url": "https://github.com/taverntesting/tavern/issues/566", "id": 651598233, "node_id": "MDU6SXNzdWU2NTE1OTgyMzM=", "number": 566, "title": "PytestDeprecationWarning: direct construction of YamlFile has been deprecated", "user": {"login": "AgentOfTech", "id": 38289783, "node_id": "MDQ6VXNlcjM4Mjg5Nzgz", "avatar_url": "https://avatars0.githubusercontent.com/u/38289783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AgentOfTech", "html_url": "https://github.com/AgentOfTech", "followers_url": "https://api.github.com/users/AgentOfTech/followers", "following_url": "https://api.github.com/users/AgentOfTech/following{/other_user}", "gists_url": "https://api.github.com/users/AgentOfTech/gists{/gist_id}", "starred_url": "https://api.github.com/users/AgentOfTech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AgentOfTech/subscriptions", "organizations_url": "https://api.github.com/users/AgentOfTech/orgs", "repos_url": "https://api.github.com/users/AgentOfTech/repos", "events_url": "https://api.github.com/users/AgentOfTech/events{/privacy}", "received_events_url": "https://api.github.com/users/AgentOfTech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-06T14:45:55Z", "updated_at": "2020-07-26T10:10:39Z", "closed_at": "2020-07-26T10:10:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've noticed that I get the following warning each time I run any tests in tavern. No problem with the tests, they run completely fine. I'd like to take care of this warning but it appears it is something that needs updating in the tavern code, rather than something I can take care of. Is that correct? Is this something I need to fix on my side or something the tavern devs need to look into? Thanks:) \r\n\r\n=================================================================================== warnings summary ====================================================================================\r\n/usr/lib/python3.8/site-packages/tavern/testutils/pytesthook/hooks.py:43\r\n  /usr/lib/python3.8/site-packages/tavern/testutils/pytesthook/hooks.py:43: PytestDeprecationWarning: direct construction of YamlFile has been deprecated, please use YamlFile.from_parent\r\n    return YamlFile(path, parent)\r\n\r\n/usr/lib/python3.8/site-packages/tavern/testutils/pytesthook/file.py:233\r\n  /usr/lib/python3.8/site-packages/tavern/testutils/pytesthook/file.py:233: PytestDeprecationWarning: direct construction of YamlItem has been deprecated, please use YamlItem.from_parent\r\n    item = YamlItem(test_spec[\"test_name\"], self, test_spec, self.fspath)\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/561", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/561/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/561/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/561/events", "html_url": "https://github.com/taverntesting/tavern/issues/561", "id": 640553621, "node_id": "MDU6SXNzdWU2NDA1NTM2MjE=", "number": 561, "title": "how to use pytest-dependence in tavern \uff1f", "user": {"login": "13242084001", "id": 39872337, "node_id": "MDQ6VXNlcjM5ODcyMzM3", "avatar_url": "https://avatars2.githubusercontent.com/u/39872337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/13242084001", "html_url": "https://github.com/13242084001", "followers_url": "https://api.github.com/users/13242084001/followers", "following_url": "https://api.github.com/users/13242084001/following{/other_user}", "gists_url": "https://api.github.com/users/13242084001/gists{/gist_id}", "starred_url": "https://api.github.com/users/13242084001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/13242084001/subscriptions", "organizations_url": "https://api.github.com/users/13242084001/orgs", "repos_url": "https://api.github.com/users/13242084001/repos", "events_url": "https://api.github.com/users/13242084001/events{/privacy}", "received_events_url": "https://api.github.com/users/13242084001/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-17T15:51:57Z", "updated_at": "2020-07-26T11:12:47Z", "closed_at": "2020-07-26T11:12:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/560", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/560/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/560/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/560/events", "html_url": "https://github.com/taverntesting/tavern/issues/560", "id": 634519591, "node_id": "MDU6SXNzdWU2MzQ1MTk1OTE=", "number": 560, "title": "\"Path to file to upload  was not found\":  issue with uploading pdf file using  usefixtures", "user": {"login": "MaksimZinovev", "id": 53397443, "node_id": "MDQ6VXNlcjUzMzk3NDQz", "avatar_url": "https://avatars1.githubusercontent.com/u/53397443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaksimZinovev", "html_url": "https://github.com/MaksimZinovev", "followers_url": "https://api.github.com/users/MaksimZinovev/followers", "following_url": "https://api.github.com/users/MaksimZinovev/following{/other_user}", "gists_url": "https://api.github.com/users/MaksimZinovev/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaksimZinovev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaksimZinovev/subscriptions", "organizations_url": "https://api.github.com/users/MaksimZinovev/orgs", "repos_url": "https://api.github.com/users/MaksimZinovev/repos", "events_url": "https://api.github.com/users/MaksimZinovev/events{/privacy}", "received_events_url": "https://api.github.com/users/MaksimZinovev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-08T11:15:46Z", "updated_at": "2020-06-10T09:21:37Z", "closed_at": "2020-06-10T09:21:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to generate pdf and upload it using usefixtures.  There's probably something I am missing. Would appreciate any help to get it working.\r\n\r\nWorks as expected when I specify file  path directly. Does not work when I  use fixture to generate pdf and pass file path to yaml test:\r\n\r\n```\r\ntest_name: Upload valid pdf file re01\r\n\r\nmarks:\r\n    - repo\r\n    - usefixtures:\r\n        - generate_pdf\r\n        - gen_pdf\r\n\r\nstages:\r\n  - type: ref\r\n    id: apione_login_admin\r\n\r\n  - name: Upload valid pdf file\r\n    request:\r\n      url: https://{apione_subhost}.{base_domain}/upload\r\n      method: POST\r\n      files:\r\n        upload: \"./test_pdf_760124_2.pdf\"  # This works as expected\r\n      # upload: '{gen_pdf}'  # This does not work\r\n\r\n    response:\r\n      status_code: 200\r\n\r\n```\r\n\r\nFixture (simplified version): \r\n```\r\n@pytest.fixture\r\ndef gen_pdf():\r\n    return \"./test_pdf_760124_2.pdf\"\r\n```\r\nStacktrace\r\n```\r\n~/repos/ae-tavern  master \u2717                                                                                                                           7d23h \u2691 \u25d2  \r\n\u25b6 pytest tests/test_repository.tavern.yaml -k re01\r\n========================================================================== test session starts ==========================================================================\r\nplatform darwin -- Python 3.8.0, pytest-5.4.1, py-1.8.1, pluggy-0.13.1 -- /Users/maksim/repos/ae-tavern/venv/bin/python\r\ncachedir: .pytest_cache\r\nrootdir: /Users/maksim/repos/ae-tavern, inifile: pytest.ini\r\nplugins: tavern-1.0.0\r\ncollected 1 item                                                                                                                                                        \r\n\r\ntests/test_repository.tavern.yaml::Upload valid pdf file re01 \r\n\r\n=============================================================================== FAILURES ================================================================================\r\n__________________________________ /Users/maksim/repos/ae-tavern/tests/test_repository.tavern.yaml::Upload valid pdf file re01 ___________________________________\r\nvenv/lib/python3.8/site-packages/_pytest/runner.py:244: in from_call\r\n    result = func()\r\nvenv/lib/python3.8/site-packages/_pytest/runner.py:217: in <lambda>\r\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\r\nvenv/lib/python3.8/site-packages/pluggy/hooks.py:286: in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nvenv/lib/python3.8/site-packages/pluggy/manager.py:93: in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\nvenv/lib/python3.8/site-packages/pluggy/manager.py:84: in <lambda>\r\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nvenv/lib/python3.8/site-packages/pluggy/callers.py:208: in _multicall\r\n    return outcome.get_result()\r\nvenv/lib/python3.8/site-packages/pluggy/callers.py:80: in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\nvenv/lib/python3.8/site-packages/pluggy/callers.py:187: in _multicall\r\n    res = hook_impl.function(*args)\r\nvenv/lib/python3.8/site-packages/_pytest/runner.py:143: in pytest_runtest_call\r\n    raise e\r\nvenv/lib/python3.8/site-packages/_pytest/runner.py:135: in pytest_runtest_call\r\n    item.runtest()\r\nvenv/lib/python3.8/site-packages/tavern/testutils/pytesthook/item.py:158: in runtest\r\n    verify_tests(self.spec)\r\nvenv/lib/python3.8/site-packages/tavern/schemas/files.py:152: in verify_tests\r\n    verify_generic(test_spec, schema)\r\nvenv/lib/python3.8/site-packages/tavern/schemas/files.py:106: in verify_generic\r\n    verifier.validate()\r\nvenv/lib/python3.8/site-packages/pykwalify/core.py:155: in validate\r\n    self._start_validate(self.source)\r\nvenv/lib/python3.8/site-packages/pykwalify/core.py:202: in _start_validate\r\n    self._validate(value, root_rule, path, done)\r\nvenv/lib/python3.8/site-packages/pykwalify/core.py:236: in _validate\r\n    self._validate_mapping(value, rule, path, done=None)\r\nvenv/lib/python3.8/site-packages/pykwalify/core.py:570: in _validate_mapping\r\n    self._validate(v, r, u\"{0}/{1}\".format(path, k), done)\r\nvenv/lib/python3.8/site-packages/pykwalify/core.py:234: in _validate\r\n    self._validate_sequence(value, rule, path, done=None)\r\nvenv/lib/python3.8/site-packages/pykwalify/core.py:346: in _validate_sequence\r\n    tmp_core._validate(item, r, \"{0}/{1}\".format(path, i), done)\r\nvenv/lib/python3.8/site-packages/pykwalify/core.py:232: in _validate\r\n    self._validate_include(value, rule, path, done=None)\r\nvenv/lib/python3.8/site-packages/pykwalify/core.py:293: in _validate_include\r\n    self._validate(value, partial_schema_rule, path, done)\r\nvenv/lib/python3.8/site-packages/pykwalify/core.py:236: in _validate\r\n    self._validate_mapping(value, rule, path, done=None)\r\nvenv/lib/python3.8/site-packages/pykwalify/core.py:570: in _validate_mapping\r\n    self._validate(v, r, u\"{0}/{1}\".format(path, k), done)\r\nvenv/lib/python3.8/site-packages/pykwalify/core.py:236: in _validate\r\n    self._validate_mapping(value, rule, path, done=None)\r\nvenv/lib/python3.8/site-packages/pykwalify/core.py:570: in _validate_mapping\r\n    self._validate(v, r, u\"{0}/{1}\".format(path, k), done)\r\nvenv/lib/python3.8/site-packages/pykwalify/core.py:236: in _validate\r\n    self._validate_mapping(value, rule, path, done=None)\r\nvenv/lib/python3.8/site-packages/pykwalify/core.py:496: in _validate_mapping\r\n    self._handle_func(value, rule, path, done)\r\nvenv/lib/python3.8/site-packages/pykwalify/core.py:259: in _handle_func\r\n    ret = method(value, rule, path)\r\nvenv/lib/python3.8/site-packages/tavern/schemas/extensions.py:478: in validate_file_spec\r\n    raise BadSchemaError(\r\nE   tavern.util.exceptions.BadSchemaError: Path to file to upload '{gen_pdf}' was not found\r\n\r\n=========================================================================== 1 failed \r\n```\r\n\r\n\r\nWithout fixture:\r\n\r\n```\r\npytest tests/test_repository.tavern.yaml -k re01\r\n========================================================================== test session starts ==========================================================================\r\nplatform darwin -- Python 3.8.0, pytest-5.4.1, py-1.8.1, pluggy-0.13.1 -- /Users/maksim/repos/ae-tavern/venv/bin/python\r\ncachedir: .pytest_cache\r\nrootdir: /Users/maksim/repos/ae-tavern, inifile: pytest.ini\r\nplugins: tavern-1.0.0\r\ncollected 1 item                                                                                                                                                        \r\n\r\ntests/test_repository.tavern.yaml::Upload valid pdf file re01 \r\n\r\n----------------------------------------------------------------------------- live log call -----------------------------------------------------------------------------\r\n21:06:54 INFO ================= RESPONSE ================== \r\n\r\nstatus code [200]\r\n{\r\n    \"redirect\": \"/dashboard\"\r\n}\r\n\r\n\r\n21:07:10 INFO ================= RESPONSE ================== \r\n\r\nstatus code [200]\r\n{\r\n    \"checksum\": \"07901a41c4d8f9b34873cd4d3b8fc5163069e06d\"\r\n}\r\n\r\n\r\nPASSED                                                                                                                                                            [100%]\r\n\r\n========================================================================== 1 passed in 18.05s ===========================================================================\r\n(venv) \r\n\r\n```\r\nChecked, file exists:\r\n```\r\n@pytest.fixture\r\ndef gen_pdf():\r\n    return \"./test_pdf_760124_2.pdf\"\r\n\r\ndef test_gen2(gen_pdf):\r\n    logging.info(f'FILE PATH:    {gen_pdf}')\r\n    logging.info(f'FILE EXISTS:    {os.path.exists(gen_pdf)}')\r\n```\r\n```\r\n...\r\nconftest.py::test_gen2 \r\n-------------------------------- live log call ---------------------------------\r\n21:40:41 INFO FILE PATH:    ./test_pdf_760124_2.pdf\r\n21:40:41 INFO FILE EXISTS:    True\r\nPASSED                                                                   [100%]\r\n\r\n============================== 1 passed in 0.04s ===============================\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/557", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/557/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/557/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/557/events", "html_url": "https://github.com/taverntesting/tavern/issues/557", "id": 626166093, "node_id": "MDU6SXNzdWU2MjYxNjYwOTM=", "number": 557, "title": "how to set tavern-merge-ext-function-values ?", "user": {"login": "13242084001", "id": 39872337, "node_id": "MDQ6VXNlcjM5ODcyMzM3", "avatar_url": "https://avatars2.githubusercontent.com/u/39872337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/13242084001", "html_url": "https://github.com/13242084001", "followers_url": "https://api.github.com/users/13242084001/followers", "following_url": "https://api.github.com/users/13242084001/following{/other_user}", "gists_url": "https://api.github.com/users/13242084001/gists{/gist_id}", "starred_url": "https://api.github.com/users/13242084001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/13242084001/subscriptions", "organizations_url": "https://api.github.com/users/13242084001/orgs", "repos_url": "https://api.github.com/users/13242084001/repos", "events_url": "https://api.github.com/users/13242084001/events{/privacy}", "received_events_url": "https://api.github.com/users/13242084001/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-28T02:32:45Z", "updated_at": "2020-06-20T09:50:47Z", "closed_at": "2020-06-20T09:50:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "forexample\uff1a\r\n how to set tavern-merge-ext-function-values options? \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/556", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/556/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/556/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/556/events", "html_url": "https://github.com/taverntesting/tavern/issues/556", "id": 624188060, "node_id": "MDU6SXNzdWU2MjQxODgwNjA=", "number": 556, "title": "Test execution exit when one of the stage in a file is failed", "user": {"login": "sbcp1993", "id": 39620013, "node_id": "MDQ6VXNlcjM5NjIwMDEz", "avatar_url": "https://avatars1.githubusercontent.com/u/39620013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sbcp1993", "html_url": "https://github.com/sbcp1993", "followers_url": "https://api.github.com/users/sbcp1993/followers", "following_url": "https://api.github.com/users/sbcp1993/following{/other_user}", "gists_url": "https://api.github.com/users/sbcp1993/gists{/gist_id}", "starred_url": "https://api.github.com/users/sbcp1993/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sbcp1993/subscriptions", "organizations_url": "https://api.github.com/users/sbcp1993/orgs", "repos_url": "https://api.github.com/users/sbcp1993/repos", "events_url": "https://api.github.com/users/sbcp1993/events{/privacy}", "received_events_url": "https://api.github.com/users/sbcp1993/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-25T09:55:15Z", "updated_at": "2020-05-25T12:16:56Z", "closed_at": "2020-05-25T12:16:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Doing HTTP Integration testing using tavern, creating one test file for each endpoints. Each file have multiple stages for testing different status codes. But when one of the stage is failed the test execution will not go further. \r\n\r\n```\r\n---\r\n test_name: test POST method\r\n\r\n includes:\r\n - !include login_stage.yaml\r\n\r\n stages:\r\n  - type: ref\r\n    id: user_login\r\n\r\n  - name: 201\r\n    request:\r\n      something\r\n    response:\r\n      status_code: 201\r\n     \r\n  - name: Unauthorized 401\r\n    request:\r\n      something\r\n    response:\r\n      status_code: 401\r\n\r\n  - name: 400 Bad request\r\n    request:\r\n      something\r\n    response:\r\n      status_code: 400\r\n\r\n```\r\nif 401 stage failed, 400 Bad request stage will not run. And the result will show that the entire test as failed.\r\n\r\n FAILED test_file.yaml: test POST method\r\n\r\nIt will be really good if the test result can show fail/pass for each stages in a test. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/554", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/554/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/554/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/554/events", "html_url": "https://github.com/taverntesting/tavern/issues/554", "id": 621540250, "node_id": "MDU6SXNzdWU2MjE1NDAyNTA=", "number": 554, "title": "[Feature Request] define a property to enable/disable each test", "user": {"login": "skylmoro", "id": 40761068, "node_id": "MDQ6VXNlcjQwNzYxMDY4", "avatar_url": "https://avatars2.githubusercontent.com/u/40761068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skylmoro", "html_url": "https://github.com/skylmoro", "followers_url": "https://api.github.com/users/skylmoro/followers", "following_url": "https://api.github.com/users/skylmoro/following{/other_user}", "gists_url": "https://api.github.com/users/skylmoro/gists{/gist_id}", "starred_url": "https://api.github.com/users/skylmoro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skylmoro/subscriptions", "organizations_url": "https://api.github.com/users/skylmoro/orgs", "repos_url": "https://api.github.com/users/skylmoro/repos", "events_url": "https://api.github.com/users/skylmoro/events{/privacy}", "received_events_url": "https://api.github.com/users/skylmoro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-20T07:50:19Z", "updated_at": "2020-05-20T08:23:11Z", "closed_at": "2020-05-20T08:23:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice to have, for each stage, to set a field (i.e. disabled) for enabling or disabling a test:\r\n\r\n```\r\nstages:\r\n  - name: test name\r\n    disabled: true\r\n    request:\r\n      url: \"{protocol:s}://{host:s}:{port:d}/etc/etc\r\n      method: POST\r\n      cookies:\r\n```\r\nIt's useful when an API has not been fully implemented yes or a mock environment lacks of some configuration and will be added later.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/553", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/553/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/553/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/553/events", "html_url": "https://github.com/taverntesting/tavern/issues/553", "id": 616839529, "node_id": "MDU6SXNzdWU2MTY4Mzk1Mjk=", "number": 553, "title": "Release 1.1 not on Pypi", "user": {"login": "AgentOfTech", "id": 38289783, "node_id": "MDQ6VXNlcjM4Mjg5Nzgz", "avatar_url": "https://avatars0.githubusercontent.com/u/38289783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AgentOfTech", "html_url": "https://github.com/AgentOfTech", "followers_url": "https://api.github.com/users/AgentOfTech/followers", "following_url": "https://api.github.com/users/AgentOfTech/following{/other_user}", "gists_url": "https://api.github.com/users/AgentOfTech/gists{/gist_id}", "starred_url": "https://api.github.com/users/AgentOfTech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AgentOfTech/subscriptions", "organizations_url": "https://api.github.com/users/AgentOfTech/orgs", "repos_url": "https://api.github.com/users/AgentOfTech/repos", "events_url": "https://api.github.com/users/AgentOfTech/events{/privacy}", "received_events_url": "https://api.github.com/users/AgentOfTech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-12T17:42:21Z", "updated_at": "2020-05-23T18:37:06Z", "closed_at": "2020-05-23T18:37:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible to have pip updated with the latest release a bit more frequently? Version 1.1 has been out for over a week and pip is still on 1.0. Thanks :) ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/552", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/552/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/552/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/552/events", "html_url": "https://github.com/taverntesting/tavern/issues/552", "id": 616113804, "node_id": "MDU6SXNzdWU2MTYxMTM4MDQ=", "number": 552, "title": "Is there a way to validate the response url?", "user": {"login": "greyarch", "id": 1516535, "node_id": "MDQ6VXNlcjE1MTY1MzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1516535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/greyarch", "html_url": "https://github.com/greyarch", "followers_url": "https://api.github.com/users/greyarch/followers", "following_url": "https://api.github.com/users/greyarch/following{/other_user}", "gists_url": "https://api.github.com/users/greyarch/gists{/gist_id}", "starred_url": "https://api.github.com/users/greyarch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/greyarch/subscriptions", "organizations_url": "https://api.github.com/users/greyarch/orgs", "repos_url": "https://api.github.com/users/greyarch/repos", "events_url": "https://api.github.com/users/greyarch/events{/privacy}", "received_events_url": "https://api.github.com/users/greyarch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 737616475, "node_id": "MDU6TGFiZWw3Mzc2MTY0NzU=", "url": "https://api.github.com/repos/taverntesting/tavern/labels/Type:%20Question", "name": "Type: Question", "color": "d4c5f9", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-11T19:07:44Z", "updated_at": "2020-05-12T08:04:52Z", "closed_at": "2020-05-12T08:04:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to check that the the response url (after redirection) is correct. Is this at all possible? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/544", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/544/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/544/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/544/events", "html_url": "https://github.com/taverntesting/tavern/issues/544", "id": 606153845, "node_id": "MDU6SXNzdWU2MDYxNTM4NDU=", "number": 544, "title": "Test Ordering", "user": {"login": "KenStorey", "id": 46034453, "node_id": "MDQ6VXNlcjQ2MDM0NDUz", "avatar_url": "https://avatars3.githubusercontent.com/u/46034453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KenStorey", "html_url": "https://github.com/KenStorey", "followers_url": "https://api.github.com/users/KenStorey/followers", "following_url": "https://api.github.com/users/KenStorey/following{/other_user}", "gists_url": "https://api.github.com/users/KenStorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/KenStorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KenStorey/subscriptions", "organizations_url": "https://api.github.com/users/KenStorey/orgs", "repos_url": "https://api.github.com/users/KenStorey/repos", "events_url": "https://api.github.com/users/KenStorey/events{/privacy}", "received_events_url": "https://api.github.com/users/KenStorey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-24T08:54:42Z", "updated_at": "2020-05-23T17:37:12Z", "closed_at": "2020-05-23T17:37:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't work out how Tavern decides what order to run tests in.\r\n\r\nI would like to ensure that one particular test in a suite, consisting of numerous .tavern.yaml files, is always run before any others.\r\n\r\nIs this possible?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/543", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/543/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/543/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/543/events", "html_url": "https://github.com/taverntesting/tavern/issues/543", "id": 606071696, "node_id": "MDU6SXNzdWU2MDYwNzE2OTY=", "number": 543, "title": "External functions: ModuleNotFoundError: No module named 'utils'", "user": {"login": "MaksimZinovev", "id": 53397443, "node_id": "MDQ6VXNlcjUzMzk3NDQz", "avatar_url": "https://avatars1.githubusercontent.com/u/53397443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaksimZinovev", "html_url": "https://github.com/MaksimZinovev", "followers_url": "https://api.github.com/users/MaksimZinovev/followers", "following_url": "https://api.github.com/users/MaksimZinovev/following{/other_user}", "gists_url": "https://api.github.com/users/MaksimZinovev/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaksimZinovev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaksimZinovev/subscriptions", "organizations_url": "https://api.github.com/users/MaksimZinovev/orgs", "repos_url": "https://api.github.com/users/MaksimZinovev/repos", "events_url": "https://api.github.com/users/MaksimZinovev/events{/privacy}", "received_events_url": "https://api.github.com/users/MaksimZinovev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-24T06:21:49Z", "updated_at": "2020-04-24T08:00:04Z", "closed_at": "2020-04-24T08:00:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "My apologies, it looks like I am missing something but I cannot figure out what am I doing wrong when trying to run one of the examples with external function. I am new to API testing and tavern. I read the docs https://tavern.readthedocs.io/en/latest/basics.html#saving-data-with-external-functions\r\n**Environment:**\r\nMacOS Catalina 10.15.3\r\nPycharm 2019.2.5(Comunity Edition)\r\nzsh 5.7.1 (x86_64-apple-darwin19.0)\r\n\r\n\r\nHere is my  **test in yaml:**\r\n```\r\n---\r\ntest_name: Example with external function in response ex04\r\nstages:\r\n  - name: Make sure we have the right ID\r\n    request:\r\n      url: https://jsonplaceholder.typicode.com/posts/1\r\n      method: GET\r\n\r\n    response:\r\n      status_code: 200\r\n      verify_response_with:\r\n        function: utils:get_id\r\n```\r\n\r\n\r\n**Tried to run from both PyCharm and shell** \r\n```\r\n(venv) \r\n~/repos/aerofiler-tavern  master \u2717                                                                                                 3h33m \u2716 \u2691 \u25d2  \u2349\r\nPYTHONPATH=$PYTHONPATH:/snippets pytest snippets/test_basics.tavern.yaml -q -k ex04\r\n\r\n```\r\n**Stack trace(beginning):**\r\n\r\n```\r\n==================================================================== FAILURES ====================================================================\r\n___________ /Users/maksim/repos/aerofiler-tavern/snippets/test_basics.tavern.yaml::Example with external function in response ex04 ____________\r\nvenv/lib/python3.8/site-packages/tavern/schemas/extensions.py:83: in import_ext_function\r\n    module = importlib.import_module(module)\r\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/importlib/__init__.py:127: in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n<frozen importlib._bootstrap>:1014: in _gcd_import\r\n    ???\r\n<frozen importlib._bootstrap>:991: in _find_and_load\r\n    ???\r\n<frozen importlib._bootstrap>:973: in _find_and_load_unlocked\r\n    ???\r\nE   ModuleNotFoundError: No module named 'utils'\r\n```\r\nHowever it **works  when I run it from \"/snippets\"** folder like this:\r\n```\r\n(venv) \r\nrepos/aerofiler-tavern/snippets  master \u2717                                                                                          4h26m \u2716 \u2691 \u25d2  \u2349\r\n\u25b6 PYTHONPATH=$PYTHONPATH:/snippets pytest test_basics.tavern.yaml -q -k ex04\r\n\r\n\r\n...\r\n\r\ntest_basics.tavern.yaml::Example with external function in response ex04 PASSED                                                            [100%]\r\n\r\n======================================================== 1 passed, 12 deselected in 0.56s ======================================================\r\n\r\n```\r\n\r\n**utils.py:**\r\n```\r\nimport requests\r\nimport pytest\r\n\r\n\r\ndef get_id(response):\r\n    # Make sure that  id=1 in the response\r\n\r\n    assert response.json().get(\"id\") == 1\r\n    assert response.json().get(\"userId\") == 1\r\n```\r\nHere is the **structure of the project:**\r\n```\r\n.\r\n\u251c\u2500\u2500 LICENSE\r\n\u251c\u2500\u2500 __pycache__\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 conftest.cpython-38-pytest-5.4.1.pyc\r\n\u251c\u2500\u2500 conftest.py\r\n\u251c\u2500\u2500 logging.yaml\r\n\u251c\u2500\u2500 pytest.ini\r\n\u251c\u2500\u2500 requirements.txt\r\n\u251c\u2500\u2500 snippets\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __pycache__\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 test_basics.tavern.yaml\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 utils.py\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 yaml_basics.yaml\r\n\u251c\u2500\u2500 tests\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\r\n\u2514\u2500\u2500 venv\r\n    \u251c\u2500\u2500 bin\r\n    \u251c\u2500\u2500 include\r\n    \u251c\u2500\u2500 lib\r\n    \u2514\u2500\u2500 pyvenv.cfg\r\n```\r\n\r\n**pytest.ini:**\r\n```\r\n[pytest]\r\nfilterwarnings =\r\n    ignore::UserWarning\r\n    ignore::ImportWarning\r\n    ignore::ResourceWarning\r\ntavern-strict=json:off\r\ntavern-beta-new-traceback = True\r\ntestpaths = \u200btests\u200b, snippets\r\naddopts =\r\n    --doctest-modules\r\n    -r xs\r\n    -vv\r\n    --strict\r\n    -p no:logging\r\n    --tb=short\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/542", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/542/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/542/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/542/events", "html_url": "https://github.com/taverntesting/tavern/issues/542", "id": 605641749, "node_id": "MDU6SXNzdWU2MDU2NDE3NDk=", "number": 542, "title": "Saving response with correct format... trying to use it in other stage... empty", "user": {"login": "rebecca-makar", "id": 31930714, "node_id": "MDQ6VXNlcjMxOTMwNzE0", "avatar_url": "https://avatars0.githubusercontent.com/u/31930714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rebecca-makar", "html_url": "https://github.com/rebecca-makar", "followers_url": "https://api.github.com/users/rebecca-makar/followers", "following_url": "https://api.github.com/users/rebecca-makar/following{/other_user}", "gists_url": "https://api.github.com/users/rebecca-makar/gists{/gist_id}", "starred_url": "https://api.github.com/users/rebecca-makar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rebecca-makar/subscriptions", "organizations_url": "https://api.github.com/users/rebecca-makar/orgs", "repos_url": "https://api.github.com/users/rebecca-makar/repos", "events_url": "https://api.github.com/users/rebecca-makar/events{/privacy}", "received_events_url": "https://api.github.com/users/rebecca-makar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-23T15:40:19Z", "updated_at": "2020-05-01T15:17:22Z", "closed_at": "2020-05-01T15:15:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just recently updated to 1.0.0\r\n\r\nI was saving a response in an anchor stage. Then that anchor was used throughout other steps, and the saved response was used in the next stage of the test. It seems that even though I am saving the response it is bringing in an empty string. \r\n\r\nI had issues first getting the correct new format, but once I figured that out it seemed to be correct. Now issue is reusing that var.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/541", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/541/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/541/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/541/events", "html_url": "https://github.com/taverntesting/tavern/issues/541", "id": 605299843, "node_id": "MDU6SXNzdWU2MDUyOTk4NDM=", "number": 541, "title": "Response status code checking always raises warning", "user": {"login": "darth-llamah", "id": 586367, "node_id": "MDQ6VXNlcjU4NjM2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/586367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darth-llamah", "html_url": "https://github.com/darth-llamah", "followers_url": "https://api.github.com/users/darth-llamah/followers", "following_url": "https://api.github.com/users/darth-llamah/following{/other_user}", "gists_url": "https://api.github.com/users/darth-llamah/gists{/gist_id}", "starred_url": "https://api.github.com/users/darth-llamah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darth-llamah/subscriptions", "organizations_url": "https://api.github.com/users/darth-llamah/orgs", "repos_url": "https://api.github.com/users/darth-llamah/repos", "events_url": "https://api.github.com/users/darth-llamah/events{/privacy}", "received_events_url": "https://api.github.com/users/darth-llamah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-23T07:18:43Z", "updated_at": "2020-05-01T13:04:07Z", "closed_at": "2020-05-01T13:04:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Changes introduced in tavern/_plugins/rest/response.py in 1.0.0 release make Tavern to always raise warning when checking rest response status code- it is not possible to check in `requests.status_codes.codes` as it always returns False\r\nPossible solution:\r\n* status codes should be checked in `requests.status_codes._codes` as it was implemented before 1.0.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/540", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/540/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/540/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/540/events", "html_url": "https://github.com/taverntesting/tavern/issues/540", "id": 604748966, "node_id": "MDU6SXNzdWU2MDQ3NDg5NjY=", "number": 540, "title": "Pytest Deprecation Warnings", "user": {"login": "KenStorey", "id": 46034453, "node_id": "MDQ6VXNlcjQ2MDM0NDUz", "avatar_url": "https://avatars3.githubusercontent.com/u/46034453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KenStorey", "html_url": "https://github.com/KenStorey", "followers_url": "https://api.github.com/users/KenStorey/followers", "following_url": "https://api.github.com/users/KenStorey/following{/other_user}", "gists_url": "https://api.github.com/users/KenStorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/KenStorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KenStorey/subscriptions", "organizations_url": "https://api.github.com/users/KenStorey/orgs", "repos_url": "https://api.github.com/users/KenStorey/repos", "events_url": "https://api.github.com/users/KenStorey/events{/privacy}", "received_events_url": "https://api.github.com/users/KenStorey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 892816388, "node_id": "MDU6TGFiZWw4OTI4MTYzODg=", "url": "https://api.github.com/repos/taverntesting/tavern/labels/Priority:%20High", "name": "Priority: High", "color": "e99695", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "michaelboulton", "id": 3809868, "node_id": "MDQ6VXNlcjM4MDk4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3809868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelboulton", "html_url": "https://github.com/michaelboulton", "followers_url": "https://api.github.com/users/michaelboulton/followers", "following_url": "https://api.github.com/users/michaelboulton/following{/other_user}", "gists_url": "https://api.github.com/users/michaelboulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelboulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelboulton/subscriptions", "organizations_url": "https://api.github.com/users/michaelboulton/orgs", "repos_url": "https://api.github.com/users/michaelboulton/repos", "events_url": "https://api.github.com/users/michaelboulton/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelboulton/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "michaelboulton", "id": 3809868, "node_id": "MDQ6VXNlcjM4MDk4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3809868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelboulton", "html_url": "https://github.com/michaelboulton", "followers_url": "https://api.github.com/users/michaelboulton/followers", "following_url": "https://api.github.com/users/michaelboulton/following{/other_user}", "gists_url": "https://api.github.com/users/michaelboulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelboulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelboulton/subscriptions", "organizations_url": "https://api.github.com/users/michaelboulton/orgs", "repos_url": "https://api.github.com/users/michaelboulton/repos", "events_url": "https://api.github.com/users/michaelboulton/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelboulton/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-04-22T13:15:57Z", "updated_at": "2020-08-15T09:51:14Z", "closed_at": "2020-08-15T09:51:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Pytest is now issuing the following Deprecation Warnings:\r\n\r\nplatform linux -- Python 3.7.5, pytest-5.4.1, py-1.8.1, pluggy-0.13.1 -- /usr/local/bin/python\r\n\r\n/usr/local/lib/python3.7/site-packages/tavern/testutils/pytesthook/hooks.py:83\r\n  /usr/local/lib/python3.7/site-packages/tavern/testutils/pytesthook/hooks.py:83: PytestDeprecationWarning: direct construction of YamlFile has been deprecated, please use YamlFile.from_parent\r\n    return YamlFile(path, parent)\r\n\r\n/usr/local/lib/python3.7/site-packages/tavern/testutils/pytesthook/file.py:233\r\n  /usr/local/lib/python3.7/site-packages/tavern/testutils/pytesthook/file.py:233: PytestDeprecationWarning: direct construction of YamlItem has been deprecated, please use YamlItem.from_parent\r\n    item = YamlItem(test_spec[\"test_name\"], self, test_spec, self.fspath)\r\n\r\nI believe this was introduced in pytest-5.4.0.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/539", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/539/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/539/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/539/events", "html_url": "https://github.com/taverntesting/tavern/issues/539", "id": 604145010, "node_id": "MDU6SXNzdWU2MDQxNDUwMTA=", "number": 539, "title": "Value of Max_Retries - cant be passed in as var", "user": {"login": "rebecca-makar", "id": 31930714, "node_id": "MDQ6VXNlcjMxOTMwNzE0", "avatar_url": "https://avatars0.githubusercontent.com/u/31930714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rebecca-makar", "html_url": "https://github.com/rebecca-makar", "followers_url": "https://api.github.com/users/rebecca-makar/followers", "following_url": "https://api.github.com/users/rebecca-makar/following{/other_user}", "gists_url": "https://api.github.com/users/rebecca-makar/gists{/gist_id}", "starred_url": "https://api.github.com/users/rebecca-makar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rebecca-makar/subscriptions", "organizations_url": "https://api.github.com/users/rebecca-makar/orgs", "repos_url": "https://api.github.com/users/rebecca-makar/repos", "events_url": "https://api.github.com/users/rebecca-makar/events{/privacy}", "received_events_url": "https://api.github.com/users/rebecca-makar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-21T17:13:27Z", "updated_at": "2020-05-25T12:18:06Z", "closed_at": "2020-05-25T12:18:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to make max_retries value something that could be scaled by an env_var\u2026..\r\nsay instead of 20 retries, 40 retries...\r\n\r\nI have tried:\r\nmax_retries: !int '{service.retry_max_iters}'\r\nmax_retries: !int '{service.retry_max_iters:d}'\r\nmax_retries: !int '{service.retry_max_iters:s}'\r\nmax_retries: '{service.retry_max_iters}'\r\nmax_retries: 20                        ---------------- only one that works.\r\nmax_retries: !int \"20\"               -----------------edit to issue --- also works\r\n\r\nI am getting this error for all others: \r\nE    - Value '<tavern.util.loader.IntToken object at 0x7f612c9030d0>' is not of type 'int'. Path: '/stages/1/max_retries'.\r\n\r\nIs it possible to pass in a number?\r\n\r\nThanks for any help!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/538", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/538/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/538/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/538/events", "html_url": "https://github.com/taverntesting/tavern/issues/538", "id": 600796907, "node_id": "MDU6SXNzdWU2MDA3OTY5MDc=", "number": 538, "title": "Key(s) not found in format: <var_name> = '???' Error After upgrading to 1.0.", "user": {"login": "imkaka", "id": 27620628, "node_id": "MDQ6VXNlcjI3NjIwNjI4", "avatar_url": "https://avatars1.githubusercontent.com/u/27620628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imkaka", "html_url": "https://github.com/imkaka", "followers_url": "https://api.github.com/users/imkaka/followers", "following_url": "https://api.github.com/users/imkaka/following{/other_user}", "gists_url": "https://api.github.com/users/imkaka/gists{/gist_id}", "starred_url": "https://api.github.com/users/imkaka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imkaka/subscriptions", "organizations_url": "https://api.github.com/users/imkaka/orgs", "repos_url": "https://api.github.com/users/imkaka/repos", "events_url": "https://api.github.com/users/imkaka/events{/privacy}", "received_events_url": "https://api.github.com/users/imkaka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-16T07:02:32Z", "updated_at": "2020-04-17T10:22:03Z", "closed_at": "2020-04-17T09:56:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have recently upgraded the tavern to 1.0 but after upgrading and changing all tests compatible to 1.0.\r\nEg - ```body: -> json:``` in response.\r\n\r\nAlmost tests are failing with format error.\r\n\r\nOne scenerio:\r\n\r\n1. data.yaml\r\n\r\n```yaml\r\n---\r\n\r\n# Each file should have a name and description\r\nname: User Variables\r\ndescription: Varibales used for all tests for User\r\n\r\n# Variables should just be a mapping of key: value pairs\r\nvariables:\r\n  host: \"{tavern.env_vars.TEST_API_HOST}\"\r\n  invalid_otp: 10000\r\n  app_version: 50\r\n  app_version_msg: \"Please update to new version.\"\r\n```\r\n2. test_user.tavern.yaml\r\n```yaml\r\nincludes:\r\n  - !include data.yaml\r\n\r\ntest_name: \"User Initialization: environment setup (/api/v1/testing/integration/)\"\r\n\r\nmarks:\r\n  - integration\r\n\r\nstages:\r\n  - name: Initial data setup for accounts\r\n    request:\r\n        url: \"{host}/api/v1/testing/integration/\"\r\n        method: POST\r\n        json:\r\n            setup: \"accounts\"\r\n        headers:\r\n            Content-Type: application/json\r\n    response:\r\n        status_code: 200\r\n        json:\r\n            success: true\r\n            mobile: !anyint\r\n            otp: !anystr\r\n        save:\r\n            json:\r\n                mobile: mobile\r\n                valid_otp: otp\r\n---\r\n\r\ntest_name: \"Test User Login and Verify\"\r\n\r\nmarks:\r\n  - integration\r\n\r\nstages:\r\n  - name: Test for APP version check\r\n    request:\r\n        url: \"{host}/api/v1/accounts/login/\"\r\n        method: POST\r\n        json:\r\n            mobile: \"{mobile}\"\r\n    response:\r\n        status_code: 400\r\n        json:\r\n            detail: \"{app_version_msg}\"\r\n``` \r\nIn above test first test is passing, but second test is failing with below error. \r\n\r\n```': 'tests/accounts/test_user.tavern.yaml::Test User Login and Verify (call)'}}}]\r\nKey(s) not found in format: app_version_msg\r\n  app_version_msg = '???'\r\n\r\nSource test stage (line 35):\r\n  - name: Test for APP version check\r\n    request:\r\n        url: \"{host}/api/v1/accounts/login/\"\r\n        method: POST\r\n        json:\r\n            mobile: \"{mobile}\"\r\n    response:\r\n        status_code: 400\r\n        json:\r\n            detail: \"{app_version_msg}\"\r\n\r\n\r\nUnable to get formatted stage\r\n\r\nErrors:\r\nE   tavern.util.exceptions.MissingFormatError: host\r\n```\r\n\r\nAnd all my tests follow the same conventions, I save common variables in `data.yaml`, env_vars are loaded as well.\r\n\r\nI could not find any breaking changes regarding format in 1.0. Please address this if anyone know this error. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/536", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/536/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/536/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/536/events", "html_url": "https://github.com/taverntesting/tavern/issues/536", "id": 597835088, "node_id": "MDU6SXNzdWU1OTc4MzUwODg=", "number": 536, "title": "Saved variables now undefined in other tests", "user": {"login": "damnthem", "id": 27672594, "node_id": "MDQ6VXNlcjI3NjcyNTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/27672594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/damnthem", "html_url": "https://github.com/damnthem", "followers_url": "https://api.github.com/users/damnthem/followers", "following_url": "https://api.github.com/users/damnthem/following{/other_user}", "gists_url": "https://api.github.com/users/damnthem/gists{/gist_id}", "starred_url": "https://api.github.com/users/damnthem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/damnthem/subscriptions", "organizations_url": "https://api.github.com/users/damnthem/orgs", "repos_url": "https://api.github.com/users/damnthem/repos", "events_url": "https://api.github.com/users/damnthem/events{/privacy}", "received_events_url": "https://api.github.com/users/damnthem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-10T11:09:39Z", "updated_at": "2020-04-10T13:24:04Z", "closed_at": "2020-04-10T13:24:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "After 1.0.0 update variables that was saved in previous test became undefined in further ones.\r\n```\r\n   1 ---\r\n   2 test_name: user_create\r\n   3 \r\n   4 stages:\r\n   5   - name: service ping\r\n   6     request:\r\n.. sensitive data ...\r\n  12     response:\r\n  13       status_code: 200\r\n  14       json:\r\n  15         data: pong.\r\n  16         error: null\r\n  17       save:\r\n  18         $ext:\r\n  19           function: testing_utils:get_shared_ip\r\n  20           extra_kwargs:\r\n  21             server: \"{server}\"\r\n... some tests that using {shared_ip} ...\r\n  80 ---\r\n  81 test_name: user_modify\r\n.. another tests ...\r\n  96   - name: \"Remove personal ips and check it\"\r\n  97     request:\r\n.. sensitive data ...\r\n  99       method: POST\r\n 100       json:\r\n 101         ip:\r\n 102           shared:\r\n 103             - \"{shared_ip}\"\r\n 104       verify: \"{verify_crt}\"\r\n 105       headers:\r\n 106         Authorization: \"{token}\"\r\n 107     response:\r\n 108       status_code: 200\r\n 109       verify_response_with:.\r\n 110         function: testing_utils:check_ip_not_exist\r\n 111         extra_kwargs:\r\n 112           check_ip: \"{personal_ip}\"\r\n```\r\n```\r\n Key(s) not found in format: shared_ip\r\n   shared_ip = '???'\r\n```\r\nIs this intended? Can't find info about this in change notes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/535", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/535/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/535/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/535/events", "html_url": "https://github.com/taverntesting/tavern/issues/535", "id": 594920847, "node_id": "MDU6SXNzdWU1OTQ5MjA4NDc=", "number": 535, "title": "value of 'file_body' cannot be passed as variable ", "user": {"login": "rganowski", "id": 9532136, "node_id": "MDQ6VXNlcjk1MzIxMzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/9532136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rganowski", "html_url": "https://github.com/rganowski", "followers_url": "https://api.github.com/users/rganowski/followers", "following_url": "https://api.github.com/users/rganowski/following{/other_user}", "gists_url": "https://api.github.com/users/rganowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/rganowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rganowski/subscriptions", "organizations_url": "https://api.github.com/users/rganowski/orgs", "repos_url": "https://api.github.com/users/rganowski/repos", "events_url": "https://api.github.com/users/rganowski/events{/privacy}", "received_events_url": "https://api.github.com/users/rganowski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-06T08:46:47Z", "updated_at": "2020-05-01T08:32:53Z", "closed_at": "2020-05-01T08:32:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "```yaml\r\nrequest:\r\n  file_body: \"{xlsx_to_upload}\"\r\n```\r\nproduces:\r\n\r\n```\r\nFAILED: \u2026 FileNotFoundError: [Errno 2] No such file or directory: '{xlsx_to_upload}'\r\n```\r\nIf I provide wrong path to a file it'll response with that path.\r\n\r\n```yaml\r\nrequest:\r\n   file_body: /path/to/file.xlsx\r\n```\r\n```\r\nFAILED: \u2026 FileNotFoundError: [Errno 2] No such file or directory: '/path/to/file.xlsx'\r\n```\r\n\r\nIf I provide correct path to a file everything will go as expected. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/534", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/534/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/534/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/534/events", "html_url": "https://github.com/taverntesting/tavern/issues/534", "id": 578799081, "node_id": "MDU6SXNzdWU1Nzg3OTkwODE=", "number": 534, "title": "tavern tests to run concurrently", "user": {"login": "Bharati74", "id": 19832194, "node_id": "MDQ6VXNlcjE5ODMyMTk0", "avatar_url": "https://avatars2.githubusercontent.com/u/19832194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bharati74", "html_url": "https://github.com/Bharati74", "followers_url": "https://api.github.com/users/Bharati74/followers", "following_url": "https://api.github.com/users/Bharati74/following{/other_user}", "gists_url": "https://api.github.com/users/Bharati74/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bharati74/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bharati74/subscriptions", "organizations_url": "https://api.github.com/users/Bharati74/orgs", "repos_url": "https://api.github.com/users/Bharati74/repos", "events_url": "https://api.github.com/users/Bharati74/events{/privacy}", "received_events_url": "https://api.github.com/users/Bharati74/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-10T19:06:13Z", "updated_at": "2020-05-02T00:54:34Z", "closed_at": "2020-05-01T11:38:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Michael, \r\n\r\nWe are in the last stage of finalizing whether or not to convert our current tests/infrastructure to using tavern.  We need to have a proof-of-concept that the tavern tests can run concurrently.\r\nFor example, we have 400 tests in separate 400 files, and we want to run them concurrently as part of automation, so the total time taken to complete and the results obtained are must faster. \r\nIs there a feature in tavern to accomplish that? If not, what do you suggest? \r\n\r\nThanks very much.\r\nBharati", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/533", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/533/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/533/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/533/events", "html_url": "https://github.com/taverntesting/tavern/issues/533", "id": 578698077, "node_id": "MDU6SXNzdWU1Nzg2OTgwNzc=", "number": 533, "title": "Wrong context of terminal report if using fixture in stage", "user": {"login": "Bujyu", "id": 1321275, "node_id": "MDQ6VXNlcjEzMjEyNzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1321275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bujyu", "html_url": "https://github.com/Bujyu", "followers_url": "https://api.github.com/users/Bujyu/followers", "following_url": "https://api.github.com/users/Bujyu/following{/other_user}", "gists_url": "https://api.github.com/users/Bujyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bujyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bujyu/subscriptions", "organizations_url": "https://api.github.com/users/Bujyu/orgs", "repos_url": "https://api.github.com/users/Bujyu/repos", "events_url": "https://api.github.com/users/Bujyu/events{/privacy}", "received_events_url": "https://api.github.com/users/Bujyu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 737616468, "node_id": "MDU6TGFiZWw3Mzc2MTY0Njg=", "url": "https://api.github.com/repos/taverntesting/tavern/labels/Type:%20Bug", "name": "Type: Bug", "color": "bc1a53", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-10T16:13:40Z", "updated_at": "2020-05-06T12:04:27Z", "closed_at": "2020-05-06T12:04:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\n\r\nRecently i use tavern to test / debug our product API,\r\nfound the context of terminal report will be wrong at following case ...\r\n(Running with option \"--tavern-beta-new-traceback\")\r\n\r\n```\r\nroot\r\n|-- conftest.py (has fixture \"setup\" which returns string \"aaa\")\r\n|-- test_a.yaml (use fixture \"setup\" in \"root/conftest.py\")\r\n`-- subdir\r\n     |-- contest.py (has fixture \"setup\" which returns  string \"bbb\")\r\n     `-- test_b.yaml (use fixture \"setup\" in \"root/subdir/conftest.py\")\r\n```\r\n\r\nThe order of test will be \"test_a.yaml\" first, then \"test_b.yaml\" in my environment. \r\n(tavern 0.33.0 + pytest 4.5.0 with \"--tavern-beta-new-traceback\", also can reproduce on tavern 1.0.0a3 + pytest 5.3.5)\r\n\r\nThe context of terminal report about \"test_a.yaml\" will be wrong if test_a.yaml failed. \r\n(The context relating to fixture \"setup\" will be \"bbb\", not \"aaa\" as expected)\r\n\r\nAnyone has any idea about this behavior?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/532", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/532/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/532/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/532/events", "html_url": "https://github.com/taverntesting/tavern/issues/532", "id": 578510111, "node_id": "MDU6SXNzdWU1Nzg1MTAxMTE=", "number": 532, "title": "inline json formatting causes traceback error", "user": {"login": "michaelboulton", "id": 3809868, "node_id": "MDQ6VXNlcjM4MDk4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3809868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelboulton", "html_url": "https://github.com/michaelboulton", "followers_url": "https://api.github.com/users/michaelboulton/followers", "following_url": "https://api.github.com/users/michaelboulton/following{/other_user}", "gists_url": "https://api.github.com/users/michaelboulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelboulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelboulton/subscriptions", "organizations_url": "https://api.github.com/users/michaelboulton/orgs", "repos_url": "https://api.github.com/users/michaelboulton/repos", "events_url": "https://api.github.com/users/michaelboulton/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelboulton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 737616468, "node_id": "MDU6TGFiZWw3Mzc2MTY0Njg=", "url": "https://api.github.com/repos/taverntesting/tavern/labels/Type:%20Bug", "name": "Type: Bug", "color": "bc1a53", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-10T11:22:47Z", "updated_at": "2020-06-06T10:10:02Z", "closed_at": "2020-06-06T10:10:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "example\r\n```\r\nFormat variables:\r\n   \"id\": 0  = '???'\r\n\r\nSource test stage (line 33):\r\n- name: do something\r\n  request:\r\n    method: DELETE\r\n    url: http://example.com/thing\r\n    json:\r\n      { \"id\": 0 }\r\n\r\nUnable to get formatted stage\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/531", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/531/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/531/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/531/events", "html_url": "https://github.com/taverntesting/tavern/issues/531", "id": 576811468, "node_id": "MDU6SXNzdWU1NzY4MTE0Njg=", "number": 531, "title": "command not found: tavern-ci", "user": {"login": "divyanshu-rawat", "id": 13464678, "node_id": "MDQ6VXNlcjEzNDY0Njc4", "avatar_url": "https://avatars3.githubusercontent.com/u/13464678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divyanshu-rawat", "html_url": "https://github.com/divyanshu-rawat", "followers_url": "https://api.github.com/users/divyanshu-rawat/followers", "following_url": "https://api.github.com/users/divyanshu-rawat/following{/other_user}", "gists_url": "https://api.github.com/users/divyanshu-rawat/gists{/gist_id}", "starred_url": "https://api.github.com/users/divyanshu-rawat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divyanshu-rawat/subscriptions", "organizations_url": "https://api.github.com/users/divyanshu-rawat/orgs", "repos_url": "https://api.github.com/users/divyanshu-rawat/repos", "events_url": "https://api.github.com/users/divyanshu-rawat/events{/privacy}", "received_events_url": "https://api.github.com/users/divyanshu-rawat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-06T09:41:36Z", "updated_at": "2020-05-01T11:38:54Z", "closed_at": "2020-05-01T11:38:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "As per steps mentioned in the docs.\r\n\r\nI installed travern using the following command `pip install tavern`, and then tried running some tests, but terminal throws `command not found: tavern-ci `.\r\n\r\nDoes anyone know what could be the reason? is it related to setting a `path`, if yes then why it's not mentioned in `docs`.\r\n\r\nHere is the log of console.\r\n\r\n```\r\ndivyanshurawat@Divyanshus-MBP Desktop % pip install tavern\r\nDEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. A future version of pip will drop support for Python 2.7. More details about Python 2 support in pip, can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support\r\nDefaulting to user installation because normal site-packages is not writeable\r\nRequirement already satisfied: tavern in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (0.34.0)\r\nRequirement already satisfied: requests in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from tavern) (2.23.0)\r\nRequirement already satisfied: paho-mqtt==1.3.1 in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from tavern) (1.3.1)\r\nRequirement already satisfied: pyjwt in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from tavern) (1.7.1)\r\nRequirement already satisfied: python-box in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from tavern) (3.4.6)\r\nRequirement already satisfied: contextlib2 in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from tavern) (0.6.0.post1)\r\nRequirement already satisfied: pyyaml in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from tavern) (5.3)\r\nRequirement already satisfied: pytest<4.6.0,>=3.6.0 in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from tavern) (4.5.0)\r\nRequirement already satisfied: stevedore in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from tavern) (1.32.0)\r\nRequirement already satisfied: pykwalify>=1.6.1 in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from tavern) (1.7.0)\r\nRequirement already satisfied: future in /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python (from tavern) (0.17.1)\r\nRequirement already satisfied: backports.functools-lru-cache in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from tavern) (1.6.1)\r\nRequirement already satisfied: jmespath in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from tavern) (0.9.5)\r\nRequirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from requests->tavern) (1.25.8)\r\nRequirement already satisfied: idna<3,>=2.5 in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from requests->tavern) (2.9)\r\nRequirement already satisfied: chardet<4,>=3.0.2 in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from requests->tavern) (3.0.4)\r\nRequirement already satisfied: certifi>=2017.4.17 in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from requests->tavern) (2019.11.28)\r\nRequirement already satisfied: attrs>=17.4.0 in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from pytest<4.6.0,>=3.6.0->tavern) (19.3.0)\r\nRequirement already satisfied: pluggy!=0.10,<1.0,>=0.9 in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from pytest<4.6.0,>=3.6.0->tavern) (0.13.1)\r\nRequirement already satisfied: funcsigs>=1.0; python_version < \"3.0\" in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from pytest<4.6.0,>=3.6.0->tavern) (1.0.2)\r\nRequirement already satisfied: more-itertools<6.0.0,>=4.0.0; python_version <= \"2.7\" in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from pytest<4.6.0,>=3.6.0->tavern) (5.0.0)\r\nRequirement already satisfied: six>=1.10.0 in /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python (from pytest<4.6.0,>=3.6.0->tavern) (1.12.0)\r\nRequirement already satisfied: py>=1.5.0 in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from pytest<4.6.0,>=3.6.0->tavern) (1.8.1)\r\nRequirement already satisfied: pathlib2>=2.2.0; python_version < \"3.6\" in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from pytest<4.6.0,>=3.6.0->tavern) (2.3.5)\r\nRequirement already satisfied: atomicwrites>=1.0 in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from pytest<4.6.0,>=3.6.0->tavern) (1.3.0)\r\nRequirement already satisfied: setuptools in /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python (from pytest<4.6.0,>=3.6.0->tavern) (41.0.1)\r\nRequirement already satisfied: wcwidth in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from pytest<4.6.0,>=3.6.0->tavern) (0.1.8)\r\nRequirement already satisfied: pbr!=2.1.0,>=2.0.0 in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from stevedore->tavern) (5.4.4)\r\nRequirement already satisfied: python-dateutil>=2.4.2 in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from pykwalify>=1.6.1->tavern) (2.8.1)\r\nRequirement already satisfied: docopt>=0.6.2 in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from pykwalify>=1.6.1->tavern) (0.6.2)\r\nRequirement already satisfied: importlib-metadata>=0.12; python_version < \"3.8\" in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from pluggy!=0.10,<1.0,>=0.9->pytest<4.6.0,>=3.6.0->tavern) (1.5.0)\r\nRequirement already satisfied: scandir; python_version < \"3.5\" in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from pathlib2>=2.2.0; python_version < \"3.6\"->pytest<4.6.0,>=3.6.0->tavern) (1.10.0)\r\nRequirement already satisfied: zipp>=0.5 in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from importlib-metadata>=0.12; python_version < \"3.8\"->pluggy!=0.10,<1.0,>=0.9->pytest<4.6.0,>=3.6.0->tavern) (1.2.0)\r\nRequirement already satisfied: configparser>=3.5; python_version < \"3\" in /Users/divyanshurawat/Library/Python/2.7/lib/python/site-packages (from importlib-metadata>=0.12; python_version < \"3.8\"->pluggy!=0.10,<1.0,>=0.9->pytest<4.6.0,>=3.6.0->tavern) (4.0.2)\r\ndivyanshurawat@Divyanshus-MBP Desktop % clear\r\n\r\ndivyanshurawat@Divyanshus-MBP Desktop % tavern-ci test_minimal.tavern.yaml\r\nzsh: command not found: tavern-ci\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/529", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/529/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/529/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/529/events", "html_url": "https://github.com/taverntesting/tavern/issues/529", "id": 575330224, "node_id": "MDU6SXNzdWU1NzUzMzAyMjQ=", "number": 529, "title": "Invalid fixture spec causes confusing error", "user": {"login": "michaelboulton", "id": 3809868, "node_id": "MDQ6VXNlcjM4MDk4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3809868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelboulton", "html_url": "https://github.com/michaelboulton", "followers_url": "https://api.github.com/users/michaelboulton/followers", "following_url": "https://api.github.com/users/michaelboulton/following{/other_user}", "gists_url": "https://api.github.com/users/michaelboulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelboulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelboulton/subscriptions", "organizations_url": "https://api.github.com/users/michaelboulton/orgs", "repos_url": "https://api.github.com/users/michaelboulton/repos", "events_url": "https://api.github.com/users/michaelboulton/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelboulton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 737616468, "node_id": "MDU6TGFiZWw3Mzc2MTY0Njg=", "url": "https://api.github.com/repos/taverntesting/tavern/labels/Type:%20Bug", "name": "Type: Bug", "color": "bc1a53", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "michaelboulton", "id": 3809868, "node_id": "MDQ6VXNlcjM4MDk4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3809868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelboulton", "html_url": "https://github.com/michaelboulton", "followers_url": "https://api.github.com/users/michaelboulton/followers", "following_url": "https://api.github.com/users/michaelboulton/following{/other_user}", "gists_url": "https://api.github.com/users/michaelboulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelboulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelboulton/subscriptions", "organizations_url": "https://api.github.com/users/michaelboulton/orgs", "repos_url": "https://api.github.com/users/michaelboulton/repos", "events_url": "https://api.github.com/users/michaelboulton/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelboulton/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "michaelboulton", "id": 3809868, "node_id": "MDQ6VXNlcjM4MDk4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3809868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelboulton", "html_url": "https://github.com/michaelboulton", "followers_url": "https://api.github.com/users/michaelboulton/followers", "following_url": "https://api.github.com/users/michaelboulton/following{/other_user}", "gists_url": "https://api.github.com/users/michaelboulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelboulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelboulton/subscriptions", "organizations_url": "https://api.github.com/users/michaelboulton/orgs", "repos_url": "https://api.github.com/users/michaelboulton/repos", "events_url": "https://api.github.com/users/michaelboulton/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelboulton/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2020-03-04T11:31:53Z", "updated_at": "2020-05-28T20:22:38Z", "closed_at": "2020-05-28T20:22:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "example\r\n```yaml\r\nmarks:\r\n  usefixtures:\r\n    thing\r\n```\r\ncauses\r\n```\r\n    if isinstance(pm.mark.args[0], (list, tuple)):\r\nE   IndexError: tuple index out of range\r\n```\r\nin pytesthook/item", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/528", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/528/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/528/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/528/events", "html_url": "https://github.com/taverntesting/tavern/issues/528", "id": 575155192, "node_id": "MDU6SXNzdWU1NzUxNTUxOTI=", "number": 528, "title": "How to disable using persisted connection in `requests.Session`?", "user": {"login": "zhaoyi0113", "id": 3355579, "node_id": "MDQ6VXNlcjMzNTU1Nzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3355579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhaoyi0113", "html_url": "https://github.com/zhaoyi0113", "followers_url": "https://api.github.com/users/zhaoyi0113/followers", "following_url": "https://api.github.com/users/zhaoyi0113/following{/other_user}", "gists_url": "https://api.github.com/users/zhaoyi0113/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhaoyi0113/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhaoyi0113/subscriptions", "organizations_url": "https://api.github.com/users/zhaoyi0113/orgs", "repos_url": "https://api.github.com/users/zhaoyi0113/repos", "events_url": "https://api.github.com/users/zhaoyi0113/events{/privacy}", "received_events_url": "https://api.github.com/users/zhaoyi0113/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-04T05:51:56Z", "updated_at": "2020-04-07T06:31:56Z", "closed_at": "2020-04-05T15:59:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I see `tavern` uses `requests.Session` to create a persisted connection within a connection pool. It producers a lot random errors relate to `connection closed`, `abort connection` etc. Is there a way to disable using persisted connection? Create a handshake for every connection. I don't mind if it gives a bad performance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/527", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/527/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/527/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/527/events", "html_url": "https://github.com/taverntesting/tavern/issues/527", "id": 574908751, "node_id": "MDU6SXNzdWU1NzQ5MDg3NTE=", "number": 527, "title": "Is it possible to generate some parameters  at the time of the test ?", "user": {"login": "ns-zsyed", "id": 61716504, "node_id": "MDQ6VXNlcjYxNzE2NTA0", "avatar_url": "https://avatars2.githubusercontent.com/u/61716504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ns-zsyed", "html_url": "https://github.com/ns-zsyed", "followers_url": "https://api.github.com/users/ns-zsyed/followers", "following_url": "https://api.github.com/users/ns-zsyed/following{/other_user}", "gists_url": "https://api.github.com/users/ns-zsyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/ns-zsyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ns-zsyed/subscriptions", "organizations_url": "https://api.github.com/users/ns-zsyed/orgs", "repos_url": "https://api.github.com/users/ns-zsyed/repos", "events_url": "https://api.github.com/users/ns-zsyed/events{/privacy}", "received_events_url": "https://api.github.com/users/ns-zsyed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-03T20:04:21Z", "updated_at": "2020-05-01T13:41:39Z", "closed_at": "2020-05-01T13:41:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need to test  a REST API that takes start time and end time fields in the request. I would like to set the endtime to current time and start time to \"current time - 1000 secs\" at the time of the test. How can I achieve this with tavern. Can it be done through hooks or fixtures.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/526", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/526/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/526/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/526/events", "html_url": "https://github.com/taverntesting/tavern/issues/526", "id": 565144987, "node_id": "MDU6SXNzdWU1NjUxNDQ5ODc=", "number": 526, "title": "Is it possible for tavern to pick up custom mqtt backend without cli arg?", "user": {"login": "burritoIand", "id": 230757, "node_id": "MDQ6VXNlcjIzMDc1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/230757?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burritoIand", "html_url": "https://github.com/burritoIand", "followers_url": "https://api.github.com/users/burritoIand/followers", "following_url": "https://api.github.com/users/burritoIand/following{/other_user}", "gists_url": "https://api.github.com/users/burritoIand/gists{/gist_id}", "starred_url": "https://api.github.com/users/burritoIand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burritoIand/subscriptions", "organizations_url": "https://api.github.com/users/burritoIand/orgs", "repos_url": "https://api.github.com/users/burritoIand/repos", "events_url": "https://api.github.com/users/burritoIand/events{/privacy}", "received_events_url": "https://api.github.com/users/burritoIand/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-14T07:05:47Z", "updated_at": "2020-02-16T19:59:17Z", "closed_at": "2020-02-16T19:59:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a custom mqtt plugin and defined it in `setup.cfg` like so:\r\n```\r\n[options]\r\npackages = find:\r\npackage_dir =\r\n    = src\r\ninclude_package_data = True\r\n\r\n[options.packages.find]\r\nexclude =\r\n    tests\r\n\r\n[options.entry_points]\r\ntavern_mqtt =\r\n    aws-mqtt = tavern_awsmqtt.plugin.mqtt.entry\r\n```\r\nI can only get it to work if I set the mqtt backend in cli argument. Is it possible for tavern to pick this up without that?\r\n```\r\npytest --tavern-mqtt-backend aws-mqtt\r\n```\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/525", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/525/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/525/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/525/events", "html_url": "https://github.com/taverntesting/tavern/issues/525", "id": 564426278, "node_id": "MDU6SXNzdWU1NjQ0MjYyNzg=", "number": 525, "title": "Problem with mqtt plugin, \"Key 'aws-mqtt' was not defined\".", "user": {"login": "burritoIand", "id": 230757, "node_id": "MDQ6VXNlcjIzMDc1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/230757?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burritoIand", "html_url": "https://github.com/burritoIand", "followers_url": "https://api.github.com/users/burritoIand/followers", "following_url": "https://api.github.com/users/burritoIand/following{/other_user}", "gists_url": "https://api.github.com/users/burritoIand/gists{/gist_id}", "starred_url": "https://api.github.com/users/burritoIand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burritoIand/subscriptions", "organizations_url": "https://api.github.com/users/burritoIand/orgs", "repos_url": "https://api.github.com/users/burritoIand/repos", "events_url": "https://api.github.com/users/burritoIand/events{/privacy}", "received_events_url": "https://api.github.com/users/burritoIand/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-13T04:07:39Z", "updated_at": "2020-02-13T18:28:20Z", "closed_at": "2020-02-13T18:28:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI'm trying to write a replacement mqtt plugin to use a different mqtt client instead of paho-mqtt.\r\n\r\nI followed the documentation for plugins and have spent time reading through the existing paho-mqtt plugin etc. My plugin is structured exactly the same as the paho-mqtt package except the schema is trimmed down.\r\n\r\nCurrently I am getting the error: `Key 'aws-mqtt' was not defined`, which comes from line [L107](https://github.com/taverntesting/tavern/blob/master/tavern/schemas/files.py#L107)\r\n\r\nAfter doing some inspection, I discovered that I have to run pytest with the following extra argument for it to pick up the new mqtt backend:\r\n```\r\npytest --tavern-mqtt-backend aws-mqtt -k test_mqtt_health_check\r\n```\r\nHowever, it makes no difference and I receive the pykwalify error.\r\n\r\nHere is the configuration for my project:\r\n\r\n# setup.cfg\r\n```\r\n[options]\r\npackages = find:\r\ninclude_package_data = True\r\n\r\n[options.packages.find]\r\nexclude =\r\n    tests\r\n\r\n[options.entry_points]\r\ntavern_mqtt =\r\n    aws-mqtt = tavern_awsmqtt.plugins.mqtt.tavernhook\r\n```\r\n\r\n# plugins/mqtt/schema.yml\r\n```\r\nname: aws mqtt schema\r\n\r\ninitialisation:\r\n  aws-mqtt:\r\n    required: false\r\n    type: map\r\n    mapping:\r\n\r\n      client:\r\n        required: false\r\n        type: map\r\n        mapping:\r\n          client_id:\r\n            type: str\r\n            required: false\r\n          clean_session:\r\n            type: bool\r\n            required: false\r\n\r\n      connect:\r\n        required: true\r\n        type: map\r\n        mapping:\r\n          host:\r\n            required: true\r\n            type: str\r\n          keepalive:\r\n            required: false\r\n            type: float\r\n          timeout:\r\n            required: false\r\n            type: float\r\n```\r\n\r\n# tests/test_mqtt_health.tavern.yml\r\n```\r\n---\r\ntest_name: test basic mqtt health.\r\n\r\naws-mqtt:\r\n  client:\r\n    client_id: 'test-user'\r\n  connect:\r\n    host: my.mqtt.endpoint\r\n    timeout: 3\r\n\r\nstages:\r\n  - name: step 1 - ping/pong\r\n    mqtt_publish:\r\n      topic: health\r\n      payload: ping\r\n    mqtt_response:\r\n      topic: health\r\n      payload: pong\r\n      timeout: 5\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/524", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/524/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/524/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/524/events", "html_url": "https://github.com/taverntesting/tavern/issues/524", "id": 563376786, "node_id": "MDU6SXNzdWU1NjMzNzY3ODY=", "number": 524, "title": "How to use tavern without pytest ?", "user": {"login": "DamienBth", "id": 15126086, "node_id": "MDQ6VXNlcjE1MTI2MDg2", "avatar_url": "https://avatars3.githubusercontent.com/u/15126086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DamienBth", "html_url": "https://github.com/DamienBth", "followers_url": "https://api.github.com/users/DamienBth/followers", "following_url": "https://api.github.com/users/DamienBth/following{/other_user}", "gists_url": "https://api.github.com/users/DamienBth/gists{/gist_id}", "starred_url": "https://api.github.com/users/DamienBth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DamienBth/subscriptions", "organizations_url": "https://api.github.com/users/DamienBth/orgs", "repos_url": "https://api.github.com/users/DamienBth/repos", "events_url": "https://api.github.com/users/DamienBth/events{/privacy}", "received_events_url": "https://api.github.com/users/DamienBth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-11T17:53:48Z", "updated_at": "2020-02-11T18:05:43Z", "closed_at": "2020-02-11T18:05:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nIs there a simple way to use tavern without calling pytest ?\r\nJust providing a tavern.yaml file, tavern do the call and get the response ?\r\n\r\nThank you for advance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/521", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/521/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/521/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/521/events", "html_url": "https://github.com/taverntesting/tavern/issues/521", "id": 560170280, "node_id": "MDU6SXNzdWU1NjAxNzAyODA=", "number": 521, "title": "Nested file field", "user": {"login": "ionik-dev", "id": 4531254, "node_id": "MDQ6VXNlcjQ1MzEyNTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4531254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ionik-dev", "html_url": "https://github.com/ionik-dev", "followers_url": "https://api.github.com/users/ionik-dev/followers", "following_url": "https://api.github.com/users/ionik-dev/following{/other_user}", "gists_url": "https://api.github.com/users/ionik-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ionik-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ionik-dev/subscriptions", "organizations_url": "https://api.github.com/users/ionik-dev/orgs", "repos_url": "https://api.github.com/users/ionik-dev/repos", "events_url": "https://api.github.com/users/ionik-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/ionik-dev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-05T06:35:03Z", "updated_at": "2020-04-05T14:39:00Z", "closed_at": "2020-04-05T14:39:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems unavailable to set nested field for file.\r\n```\r\n...\r\ndata:\r\n    product:\r\n        name: \"Test product\"\r\n        price: 300\r\nfiles:\r\n     product:\r\n         image: \"placeholder.png\"\r\n...\r\n```\r\nI need to send file via product['image'] field not just image. It works for data section. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/520", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/520/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/520/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/520/events", "html_url": "https://github.com/taverntesting/tavern/issues/520", "id": 558349097, "node_id": "MDU6SXNzdWU1NTgzNDkwOTc=", "number": 520, "title": "Sending string and json in body", "user": {"login": "rizwansarwar", "id": 3135402, "node_id": "MDQ6VXNlcjMxMzU0MDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/3135402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rizwansarwar", "html_url": "https://github.com/rizwansarwar", "followers_url": "https://api.github.com/users/rizwansarwar/followers", "following_url": "https://api.github.com/users/rizwansarwar/following{/other_user}", "gists_url": "https://api.github.com/users/rizwansarwar/gists{/gist_id}", "starred_url": "https://api.github.com/users/rizwansarwar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rizwansarwar/subscriptions", "organizations_url": "https://api.github.com/users/rizwansarwar/orgs", "repos_url": "https://api.github.com/users/rizwansarwar/repos", "events_url": "https://api.github.com/users/rizwansarwar/events{/privacy}", "received_events_url": "https://api.github.com/users/rizwansarwar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-31T20:13:42Z", "updated_at": "2020-02-02T11:31:43Z", "closed_at": "2020-02-02T10:59:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "How do I send a combination of string and some json in request body. \r\n\r\nFor example, I need to send the following.\r\n\r\n`format=json&operation=triggerevent&oprdata={\"name\": \"action\", \"user\": -1, \"events\": {\"list\":[]}}\r\n`\r\nThe stuff after oprdata= is valid json that can be very large, so I want to have it included externally. I have tried use !include with data but that does not work. Any help is appreciated. \r\n\r\n/Riz", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/519", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/519/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/519/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/519/events", "html_url": "https://github.com/taverntesting/tavern/issues/519", "id": 557836243, "node_id": "MDU6SXNzdWU1NTc4MzYyNDM=", "number": 519, "title": "variable's value used in another variable's value", "user": {"login": "yamlCase", "id": 27447701, "node_id": "MDQ6VXNlcjI3NDQ3NzAx", "avatar_url": "https://avatars1.githubusercontent.com/u/27447701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yamlCase", "html_url": "https://github.com/yamlCase", "followers_url": "https://api.github.com/users/yamlCase/followers", "following_url": "https://api.github.com/users/yamlCase/following{/other_user}", "gists_url": "https://api.github.com/users/yamlCase/gists{/gist_id}", "starred_url": "https://api.github.com/users/yamlCase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yamlCase/subscriptions", "organizations_url": "https://api.github.com/users/yamlCase/orgs", "repos_url": "https://api.github.com/users/yamlCase/repos", "events_url": "https://api.github.com/users/yamlCase/events{/privacy}", "received_events_url": "https://api.github.com/users/yamlCase/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-31T00:19:17Z", "updated_at": "2020-02-02T12:00:02Z", "closed_at": "2020-02-02T12:00:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there some way to have a variable's value used in another variable's value?\r\n\r\ni.e.:\r\n\r\n```\r\nvariables:\r\n  hostname: www.example.com\r\n  address: https://{hostname}\r\n  api_url: {address}/api\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/518", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/518/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/518/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/518/events", "html_url": "https://github.com/taverntesting/tavern/issues/518", "id": 557816953, "node_id": "MDU6SXNzdWU1NTc4MTY5NTM=", "number": 518, "title": "Question - DRYing out my code by including parts of stage, request, or response?", "user": {"login": "yamlCase", "id": 27447701, "node_id": "MDQ6VXNlcjI3NDQ3NzAx", "avatar_url": "https://avatars1.githubusercontent.com/u/27447701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yamlCase", "html_url": "https://github.com/yamlCase", "followers_url": "https://api.github.com/users/yamlCase/followers", "following_url": "https://api.github.com/users/yamlCase/following{/other_user}", "gists_url": "https://api.github.com/users/yamlCase/gists{/gist_id}", "starred_url": "https://api.github.com/users/yamlCase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yamlCase/subscriptions", "organizations_url": "https://api.github.com/users/yamlCase/orgs", "repos_url": "https://api.github.com/users/yamlCase/repos", "events_url": "https://api.github.com/users/yamlCase/events{/privacy}", "received_events_url": "https://api.github.com/users/yamlCase/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-30T23:22:58Z", "updated_at": "2020-02-03T09:02:05Z", "closed_at": "2020-02-03T09:02:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "my stage blocks seem to be 95% the same with just the request: url: different. Some questions:\r\n\r\nCan I include part of a stage block?  i.e. these that are mostly always the same under `request:`\r\n\r\n```\r\n$ cat request_settings.yaml\r\n\r\nverify: false\r\nfollow_redirects: true\r\nmethod: GET\r\nauth:\r\n   - \"{users.admin.login}\"\r\n   - \"{users.admin.token_perm}\"\r\n```\r\n\r\nIf not, what about default values for those?\r\n\r\nIf I'm going about this the wrong way and there's some other approach I should be taking, please hit me over the head.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/517", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/517/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/517/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/517/events", "html_url": "https://github.com/taverntesting/tavern/issues/517", "id": 557225449, "node_id": "MDU6SXNzdWU1NTcyMjU0NDk=", "number": 517, "title": "cannot save dict item from a response which is a list", "user": {"login": "Bharati74", "id": 19832194, "node_id": "MDQ6VXNlcjE5ODMyMTk0", "avatar_url": "https://avatars2.githubusercontent.com/u/19832194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bharati74", "html_url": "https://github.com/Bharati74", "followers_url": "https://api.github.com/users/Bharati74/followers", "following_url": "https://api.github.com/users/Bharati74/following{/other_user}", "gists_url": "https://api.github.com/users/Bharati74/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bharati74/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bharati74/subscriptions", "organizations_url": "https://api.github.com/users/Bharati74/orgs", "repos_url": "https://api.github.com/users/Bharati74/repos", "events_url": "https://api.github.com/users/Bharati74/events{/privacy}", "received_events_url": "https://api.github.com/users/Bharati74/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-30T02:10:45Z", "updated_at": "2020-02-05T06:04:28Z", "closed_at": "2020-02-04T10:00:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have an API that returns a response as a list/array. I want to save 'attribute2', for an example, from the 2nd list item; I have tried mutlipe ways, but cannot find a solution. \r\nFor an example: \r\nresponse is:\r\n**[{'attribute1': 'FirstListItemAttr1', 'attribute2': 'FirstListItemAttr2'}, {'attribute1': '2ndListItemAttr1',  'attribute2': '2ndListItemAttr2'}]**\r\n\r\nHow do I save response for the value '2ndListItemAttr1'? Have tried many ways of: \r\n**response:\r\n      status_code: 200\r\n      save:\r\n        body:\r\n           - attr1: attribute1\r\n           - attr2: attribute1**  \r\nThanks very much.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/515", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/515/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/515/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/515/events", "html_url": "https://github.com/taverntesting/tavern/issues/515", "id": 556368331, "node_id": "MDU6SXNzdWU1NTYzNjgzMzE=", "number": 515, "title": "when using a variable in delay_after gives error", "user": {"login": "arjunrautela", "id": 20470710, "node_id": "MDQ6VXNlcjIwNDcwNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/20470710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arjunrautela", "html_url": "https://github.com/arjunrautela", "followers_url": "https://api.github.com/users/arjunrautela/followers", "following_url": "https://api.github.com/users/arjunrautela/following{/other_user}", "gists_url": "https://api.github.com/users/arjunrautela/gists{/gist_id}", "starred_url": "https://api.github.com/users/arjunrautela/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arjunrautela/subscriptions", "organizations_url": "https://api.github.com/users/arjunrautela/orgs", "repos_url": "https://api.github.com/users/arjunrautela/repos", "events_url": "https://api.github.com/users/arjunrautela/events{/privacy}", "received_events_url": "https://api.github.com/users/arjunrautela/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1275926333, "node_id": "MDU6TGFiZWwxMjc1OTI2MzMz", "url": "https://api.github.com/repos/taverntesting/tavern/labels/Requires%20Documentation", "name": "Requires Documentation", "color": "f7ee79", "default": false, "description": "Documentation needs adding for this PR or to solve this issue"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-28T17:46:29Z", "updated_at": "2020-05-01T13:27:55Z", "closed_at": "2020-05-01T13:27:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to add delay after every stage and the value of delay is in a variable.yaml file. but when i execute the test using pytest i am getting the exception  \r\n**tavern.util.exceptions.BadSchemaError: expected 'float-like' type at '/stages/0/delay_after', got '{sleep_time}'**\r\nIs there a way to do it or can i set a default delay value in between every stage of my tests", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/514", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/514/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/514/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/514/events", "html_url": "https://github.com/taverntesting/tavern/issues/514", "id": 556204217, "node_id": "MDU6SXNzdWU1NTYyMDQyMTc=", "number": 514, "title": "Question - How can we include a yaml file from different directory?", "user": {"login": "imkaka", "id": 27620628, "node_id": "MDQ6VXNlcjI3NjIwNjI4", "avatar_url": "https://avatars1.githubusercontent.com/u/27620628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imkaka", "html_url": "https://github.com/imkaka", "followers_url": "https://api.github.com/users/imkaka/followers", "following_url": "https://api.github.com/users/imkaka/following{/other_user}", "gists_url": "https://api.github.com/users/imkaka/gists{/gist_id}", "starred_url": "https://api.github.com/users/imkaka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imkaka/subscriptions", "organizations_url": "https://api.github.com/users/imkaka/orgs", "repos_url": "https://api.github.com/users/imkaka/repos", "events_url": "https://api.github.com/users/imkaka/events{/privacy}", "received_events_url": "https://api.github.com/users/imkaka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-28T13:18:59Z", "updated_at": "2020-01-29T09:56:21Z", "closed_at": "2020-01-29T09:56:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In the same directory, it is possible to include via:\r\n```yaml\r\nincludes:\r\n  - !include data.yaml\r\n```\r\n\r\nHow can we achieve the same if I want to import a file which resides in outer(root) directory?\r\n```root/common.yaml  in  -> root/first/test_hola.tavern.yaml```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/512", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/512/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/512/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/512/events", "html_url": "https://github.com/taverntesting/tavern/issues/512", "id": 555103693, "node_id": "MDU6SXNzdWU1NTUxMDM2OTM=", "number": 512, "title": "Valid JSON object generated by pytest fixture can't be used in Json field", "user": {"login": "oshabal", "id": 17496077, "node_id": "MDQ6VXNlcjE3NDk2MDc3", "avatar_url": "https://avatars2.githubusercontent.com/u/17496077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oshabal", "html_url": "https://github.com/oshabal", "followers_url": "https://api.github.com/users/oshabal/followers", "following_url": "https://api.github.com/users/oshabal/following{/other_user}", "gists_url": "https://api.github.com/users/oshabal/gists{/gist_id}", "starred_url": "https://api.github.com/users/oshabal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oshabal/subscriptions", "organizations_url": "https://api.github.com/users/oshabal/orgs", "repos_url": "https://api.github.com/users/oshabal/repos", "events_url": "https://api.github.com/users/oshabal/events{/privacy}", "received_events_url": "https://api.github.com/users/oshabal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-25T16:17:30Z", "updated_at": "2020-02-02T11:09:30Z", "closed_at": "2020-02-02T11:09:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have pytest fixture which return Json object into my test.\r\nIn test it looks like:\r\n`...\r\nmarks:\r\n    usefixtures:\r\n         - test_json\r\n...\r\njson: \"{test_json}\" - API under test is saying that Json is invalid^ which is incorrect, because that same Json structure specified in test itself is working fine, but doesn't work if passed from a fixture.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/511", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/511/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/511/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/511/events", "html_url": "https://github.com/taverntesting/tavern/issues/511", "id": 554466790, "node_id": "MDU6SXNzdWU1NTQ0NjY3OTA=", "number": 511, "title": "request header", "user": {"login": "ParthVividSeats", "id": 57634111, "node_id": "MDQ6VXNlcjU3NjM0MTEx", "avatar_url": "https://avatars2.githubusercontent.com/u/57634111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ParthVividSeats", "html_url": "https://github.com/ParthVividSeats", "followers_url": "https://api.github.com/users/ParthVividSeats/followers", "following_url": "https://api.github.com/users/ParthVividSeats/following{/other_user}", "gists_url": "https://api.github.com/users/ParthVividSeats/gists{/gist_id}", "starred_url": "https://api.github.com/users/ParthVividSeats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ParthVividSeats/subscriptions", "organizations_url": "https://api.github.com/users/ParthVividSeats/orgs", "repos_url": "https://api.github.com/users/ParthVividSeats/repos", "events_url": "https://api.github.com/users/ParthVividSeats/events{/privacy}", "received_events_url": "https://api.github.com/users/ParthVividSeats/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 737616475, "node_id": "MDU6TGFiZWw3Mzc2MTY0NzU=", "url": "https://api.github.com/repos/taverntesting/tavern/labels/Type:%20Question", "name": "Type: Question", "color": "d4c5f9", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-23T23:30:02Z", "updated_at": "2020-01-25T15:51:07Z", "closed_at": "2020-01-25T15:51:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\n\r\nI have tests which are for same url(endpoint) , The url is valid only if there is a particular header passed with the request. \r\n\r\nProblem statement: Define header once and pass the value/url to requests for multiple tests/stages across a test.\r\n\r\nEx:\r\n```\r\ntest_name: Test status codes\r\n\r\nstages:\r\n  - name: Test success /200 code\r\n\r\n    request:\r\n      headers:\r\n        HEADER_ID: \"10\"\r\n      url: \"{tavern.env_vars.URL}/api/v1/\"\r\n      method: GET\r\n\r\n    response:\r\n      status_code: 200\r\n\r\n---\r\ntest_name: Test 234\r\n\r\nstages:\r\n  - name: Test success/200 code\r\n\r\n    request:\r\n      headers:\r\n        HEADER_ID: \"10\"\r\n      url: \"{tavern.env_vars.URL}/api/v1/\"      \r\n      method: GET\r\n\r\n    response:\r\n      status_code: 200\r\n\r\n  - name: Test success/200 \r\n\r\n    request:\r\n      headers:\r\n        HEADER_ID: \"10\"\r\n      url: \"{tavern.env_vars.URL}/api/v1/\"\r\n      method: GET\r\n    \r\n    response:\r\n      status_code: 200\r\n\r\n```\r\n\r\nIs there a way I can define HEADER_ID: 10 globally and not explicitly type in for every request I make ? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/510", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/510/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/510/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/510/events", "html_url": "https://github.com/taverntesting/tavern/issues/510", "id": 554304369, "node_id": "MDU6SXNzdWU1NTQzMDQzNjk=", "number": 510, "title": "Can't save headers for chained requests", "user": {"login": "oshabal", "id": 17496077, "node_id": "MDQ6VXNlcjE3NDk2MDc3", "avatar_url": "https://avatars2.githubusercontent.com/u/17496077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oshabal", "html_url": "https://github.com/oshabal", "followers_url": "https://api.github.com/users/oshabal/followers", "following_url": "https://api.github.com/users/oshabal/following{/other_user}", "gists_url": "https://api.github.com/users/oshabal/gists{/gist_id}", "starred_url": "https://api.github.com/users/oshabal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oshabal/subscriptions", "organizations_url": "https://api.github.com/users/oshabal/orgs", "repos_url": "https://api.github.com/users/oshabal/repos", "events_url": "https://api.github.com/users/oshabal/events{/privacy}", "received_events_url": "https://api.github.com/users/oshabal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-23T17:38:09Z", "updated_at": "2020-01-25T15:35:52Z", "closed_at": "2020-01-24T21:10:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\nI am trying to do simple sign_in/sign_out test.\r\nAfter sign_in I need to save few headers to use them in sign_out.\r\nLike that:\r\n```\r\n    save:\r\n      headers:\r\n        access-token: access-token\r\n        client: client\r\n        uid: uid\r\n```\r\nBut it doesn't work, I'm keep getting unclear purest warnings about wrong saving of nested data. \r\nWhen trying to do a sign_out 'm getting an errors about that variable (e.g {access-token:s} is None.\r\nWhat is wrong with that?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/507", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/507/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/507/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/507/events", "html_url": "https://github.com/taverntesting/tavern/issues/507", "id": 551035630, "node_id": "MDU6SXNzdWU1NTEwMzU2MzA=", "number": 507, "title": "Is there a timeout Tavern uses when running test?", "user": {"login": "zhaoyi0113", "id": 3355579, "node_id": "MDQ6VXNlcjMzNTU1Nzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3355579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhaoyi0113", "html_url": "https://github.com/zhaoyi0113", "followers_url": "https://api.github.com/users/zhaoyi0113/followers", "following_url": "https://api.github.com/users/zhaoyi0113/following{/other_user}", "gists_url": "https://api.github.com/users/zhaoyi0113/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhaoyi0113/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhaoyi0113/subscriptions", "organizations_url": "https://api.github.com/users/zhaoyi0113/orgs", "repos_url": "https://api.github.com/users/zhaoyi0113/repos", "events_url": "https://api.github.com/users/zhaoyi0113/events{/privacy}", "received_events_url": "https://api.github.com/users/zhaoyi0113/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-16T20:26:31Z", "updated_at": "2020-01-25T15:48:16Z", "closed_at": "2020-01-25T15:48:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I added more than 50 tavern tests I can see there are randomly failed tests with below error:\r\n\r\n```\r\nurllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f758948c710>: Failed to establish a new connection: [Errno 111] Connection refused\r\n```\r\n\r\nIt happens on different test so it is not an issue with the test case itself. It is more like a random connection errors happened during testing. I have checked my server log which looks very good. Is there anything Tavern uses during testing like http connection timeout?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/505", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/505/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/505/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/505/events", "html_url": "https://github.com/taverntesting/tavern/issues/505", "id": 545919954, "node_id": "MDU6SXNzdWU1NDU5MTk5NTQ=", "number": 505, "title": "Question: Any experience with using mocking with Tavern?", "user": {"login": "pmneve", "id": 3780424, "node_id": "MDQ6VXNlcjM3ODA0MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3780424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmneve", "html_url": "https://github.com/pmneve", "followers_url": "https://api.github.com/users/pmneve/followers", "following_url": "https://api.github.com/users/pmneve/following{/other_user}", "gists_url": "https://api.github.com/users/pmneve/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmneve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmneve/subscriptions", "organizations_url": "https://api.github.com/users/pmneve/orgs", "repos_url": "https://api.github.com/users/pmneve/repos", "events_url": "https://api.github.com/users/pmneve/events{/privacy}", "received_events_url": "https://api.github.com/users/pmneve/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-06T20:18:37Z", "updated_at": "2020-01-13T18:27:48Z", "closed_at": "2020-01-13T18:27:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would like to get head start on automating new api by mocking requests/responses while using Tavern and pytest.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/503", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/503/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/503/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/503/events", "html_url": "https://github.com/taverntesting/tavern/issues/503", "id": 543270237, "node_id": "MDU6SXNzdWU1NDMyNzAyMzc=", "number": 503, "title": "Tavern Github Page example is out of sync with this page", "user": {"login": "hwangja", "id": 1314292, "node_id": "MDQ6VXNlcjEzMTQyOTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1314292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hwangja", "html_url": "https://github.com/hwangja", "followers_url": "https://api.github.com/users/hwangja/followers", "following_url": "https://api.github.com/users/hwangja/following{/other_user}", "gists_url": "https://api.github.com/users/hwangja/gists{/gist_id}", "starred_url": "https://api.github.com/users/hwangja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hwangja/subscriptions", "organizations_url": "https://api.github.com/users/hwangja/orgs", "repos_url": "https://api.github.com/users/hwangja/repos", "events_url": "https://api.github.com/users/hwangja/events{/privacy}", "received_events_url": "https://api.github.com/users/hwangja/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-28T19:13:47Z", "updated_at": "2020-01-11T17:43:19Z", "closed_at": "2020-01-11T17:43:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "\"Quickstart\" section of this page has a bug - https://taverntesting.github.io/\r\n\r\n2nd to last line has a \"json\" key, but fails Schema Validation. It's correct in the \"Code\" tab of this Git Repo: https://github.com/taverntesting/tavern\r\n\r\n\"json\" key in the \"Quickstart\" should be \"body\"\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/502", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/502/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/502/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/502/events", "html_url": "https://github.com/taverntesting/tavern/issues/502", "id": 539692519, "node_id": "MDU6SXNzdWU1Mzk2OTI1MTk=", "number": 502, "title": "File collection ignores changed naming conventions in `pytest.ini`", "user": {"login": "SimonMossmyr", "id": 19503193, "node_id": "MDQ6VXNlcjE5NTAzMTkz", "avatar_url": "https://avatars1.githubusercontent.com/u/19503193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonMossmyr", "html_url": "https://github.com/SimonMossmyr", "followers_url": "https://api.github.com/users/SimonMossmyr/followers", "following_url": "https://api.github.com/users/SimonMossmyr/following{/other_user}", "gists_url": "https://api.github.com/users/SimonMossmyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonMossmyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonMossmyr/subscriptions", "organizations_url": "https://api.github.com/users/SimonMossmyr/orgs", "repos_url": "https://api.github.com/users/SimonMossmyr/repos", "events_url": "https://api.github.com/users/SimonMossmyr/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonMossmyr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-18T13:49:32Z", "updated_at": "2019-12-18T15:14:04Z", "closed_at": "2019-12-18T15:13:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "The [function responsible for file collection](https://github.com/taverntesting/tavern/blob/291355bc8579355234eb6d09839974693e6a1772/tavern/testutils/pytesthook/hooks.py#L56) ignores [changed naming conventions](https://github.com/taverntesting/tavern/blob/291355bc8579355234eb6d09839974693e6a1772/tavern/testutils/pytesthook/hooks.py#L56) in `pytest.ini`.\r\n\r\nI would say this issue is of low priority.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/501", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/501/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/501/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/501/events", "html_url": "https://github.com/taverntesting/tavern/issues/501", "id": 538552282, "node_id": "MDU6SXNzdWU1Mzg1NTIyODI=", "number": 501, "title": "using run() for running tests for api tavern cannot recognize the pythonpath", "user": {"login": "hamedminaee", "id": 52859974, "node_id": "MDQ6VXNlcjUyODU5OTc0", "avatar_url": "https://avatars2.githubusercontent.com/u/52859974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hamedminaee", "html_url": "https://github.com/hamedminaee", "followers_url": "https://api.github.com/users/hamedminaee/followers", "following_url": "https://api.github.com/users/hamedminaee/following{/other_user}", "gists_url": "https://api.github.com/users/hamedminaee/gists{/gist_id}", "starred_url": "https://api.github.com/users/hamedminaee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hamedminaee/subscriptions", "organizations_url": "https://api.github.com/users/hamedminaee/orgs", "repos_url": "https://api.github.com/users/hamedminaee/repos", "events_url": "https://api.github.com/users/hamedminaee/events{/privacy}", "received_events_url": "https://api.github.com/users/hamedminaee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-16T17:31:44Z", "updated_at": "2020-01-25T16:01:08Z", "closed_at": "2020-01-25T16:01:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using tavern for api testing. Here is my simple test:\r\n\r\n  - name: Make sure we have the right ID\r\n\r\n```\r\n    # Define the request to be made...\r\n    request:\r\n      url: \"{host:s}:{port:d}/{path:s}/{version:s}/searches\"\r\n      json:\r\n        \"query\": \"xxxx\"\r\n        \"configuration_ids\": [\"xxxx\"]\r\n        \"type\": \"xxx\"\r\n      method: POST\r\n\r\n    # ...and the expected response code and body\r\n    response:\r\n      status_code: 201\r\n      save:\r\n        $ext:\r\n          function: utils:get_search_id\r\n  - name: delete the created search\r\n\r\n    # Define the request to be made...\r\n    request:\r\n      url: \"{host:s}:{port:d}/{path:s}/{version:s}/searches/{searchId}\"\r\n      method: DELETE\r\n\r\n    # ...and the expected response code and body\r\n    response:\r\n      status_code: 204\r\n\r\n```\r\n\r\nWhen I run the above like:\r\n\r\n` PYTHONPATH=$PYTHONPATH:path to my python folder including external functions pytest .`\r\n\r\nAll works but when I run it like python3 baft.py -e local in which baft.py includes run() as follows:\r\n\r\n\r\n`run(in_file = \"\", tavern_global_cfg = {\"variables\": tavern_cfg_variables}, pytest_args = pytest_parameters)`\r\n\r\n\r\nI get\r\n\r\n`E   ModuleNotFoundError: No module named 'utils'`\r\n\r\nHow can I tell python to add the path of my external functions to pythonpath then I can run my tests using the run command?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/500", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/500/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/500/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/500/events", "html_url": "https://github.com/taverntesting/tavern/issues/500", "id": 537976635, "node_id": "MDU6SXNzdWU1Mzc5NzY2MzU=", "number": 500, "title": "Calling an external function in a test exclusively", "user": {"login": "arkster", "id": 3496470, "node_id": "MDQ6VXNlcjM0OTY0NzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/3496470?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arkster", "html_url": "https://github.com/arkster", "followers_url": "https://api.github.com/users/arkster/followers", "following_url": "https://api.github.com/users/arkster/following{/other_user}", "gists_url": "https://api.github.com/users/arkster/gists{/gist_id}", "starred_url": "https://api.github.com/users/arkster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arkster/subscriptions", "organizations_url": "https://api.github.com/users/arkster/orgs", "repos_url": "https://api.github.com/users/arkster/repos", "events_url": "https://api.github.com/users/arkster/events{/privacy}", "received_events_url": "https://api.github.com/users/arkster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-14T23:01:21Z", "updated_at": "2020-05-01T13:41:30Z", "closed_at": "2020-05-01T13:41:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "In my tests I'm calling a number of various api endpoints to do validations using Tavern. However one of the things that I need to also do is to get some data directly from storage such as a mysql db that I need for subsequent tests and I cannot find a way to do this. In addition to mysql, I may also need to call other CLI scripts to get information that I need to provide as input parameters to other API endpoints within the same Yaml. \r\nI have been testing and trying various ways to call an external function directly without using a 'request' in the yaml but that as I've found does not work. Is there a way for me to call an external function to get what I'm looking for without explicitly calling an API in the same test (i.e skipping the request call itself)? As mentioned, I will need to data returned using the external function to provide as input to a subsequent GET.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/499", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/499/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/499/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/499/events", "html_url": "https://github.com/taverntesting/tavern/issues/499", "id": 537296822, "node_id": "MDU6SXNzdWU1MzcyOTY4MjI=", "number": 499, "title": "How do I validate a json response with dynamic data?", "user": {"login": "burritoIand", "id": 230757, "node_id": "MDQ6VXNlcjIzMDc1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/230757?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burritoIand", "html_url": "https://github.com/burritoIand", "followers_url": "https://api.github.com/users/burritoIand/followers", "following_url": "https://api.github.com/users/burritoIand/following{/other_user}", "gists_url": "https://api.github.com/users/burritoIand/gists{/gist_id}", "starred_url": "https://api.github.com/users/burritoIand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burritoIand/subscriptions", "organizations_url": "https://api.github.com/users/burritoIand/orgs", "repos_url": "https://api.github.com/users/burritoIand/repos", "events_url": "https://api.github.com/users/burritoIand/events{/privacy}", "received_events_url": "https://api.github.com/users/burritoIand/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-13T01:15:35Z", "updated_at": "2019-12-21T05:44:18Z", "closed_at": "2019-12-21T05:44:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, how can I validate a `POST` request that returns a json response with dynamic data?\r\n\r\nFor instance the json-api formatted response will have an `id` that is a uuid and unknown ahead of time, while other fields will have similar behavior, in addition to some fields that _will_ be known ahead of time.\r\n\r\nIdeally I'd like to test that the fields I know ahead of time are valid, and possibly the type of the dynamic fields e.g. check that it's uuid.\r\n\r\nIs this possible?\r\n```\r\n    response:\r\n      status_code: 201\r\n      json:\r\n        data:\r\n          id: <DYNAMIC UUID>\r\n          type: \"person\"\r\n          attributes:\r\n            name: 'known name'\r\n            assigned_tag: <DYNAMIC ASSIGNED TAG>\r\n          relationships:\r\n            group:\r\n              data:\r\n                type: \"groups\"\r\n                id: \"abc\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/498", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/498/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/498/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/498/events", "html_url": "https://github.com/taverntesting/tavern/issues/498", "id": 536844036, "node_id": "MDU6SXNzdWU1MzY4NDQwMzY=", "number": 498, "title": "i need to change 4.5.0\uff1f", "user": {"login": "sktt0211", "id": 13163379, "node_id": "MDQ6VXNlcjEzMTYzMzc5", "avatar_url": "https://avatars1.githubusercontent.com/u/13163379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sktt0211", "html_url": "https://github.com/sktt0211", "followers_url": "https://api.github.com/users/sktt0211/followers", "following_url": "https://api.github.com/users/sktt0211/following{/other_user}", "gists_url": "https://api.github.com/users/sktt0211/gists{/gist_id}", "starred_url": "https://api.github.com/users/sktt0211/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sktt0211/subscriptions", "organizations_url": "https://api.github.com/users/sktt0211/orgs", "repos_url": "https://api.github.com/users/sktt0211/repos", "events_url": "https://api.github.com/users/sktt0211/events{/privacy}", "received_events_url": "https://api.github.com/users/sktt0211/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-12T09:05:42Z", "updated_at": "2020-01-11T17:52:51Z", "closed_at": "2020-01-11T17:52:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can see that\r\n\r\nRequirement already satisfied: pyparsing>=2.0.2 in d:\\python\\lib\\site-packages (from packaging->pytest) (2.4.5)\r\nERROR: tavern 0.30.3 has requirement pytest<4.6.0,>=3.6.0, but you'll have pytest 5.3.1 which is incompatible.\r\nInstalling collected packages: pytest\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/497", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/497/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/497/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/497/events", "html_url": "https://github.com/taverntesting/tavern/issues/497", "id": 535251087, "node_id": "MDU6SXNzdWU1MzUyNTEwODc=", "number": 497, "title": "tavern cannot recognize --json-report", "user": {"login": "hamedminaee", "id": 52859974, "node_id": "MDQ6VXNlcjUyODU5OTc0", "avatar_url": "https://avatars2.githubusercontent.com/u/52859974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hamedminaee", "html_url": "https://github.com/hamedminaee", "followers_url": "https://api.github.com/users/hamedminaee/followers", "following_url": "https://api.github.com/users/hamedminaee/following{/other_user}", "gists_url": "https://api.github.com/users/hamedminaee/gists{/gist_id}", "starred_url": "https://api.github.com/users/hamedminaee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hamedminaee/subscriptions", "organizations_url": "https://api.github.com/users/hamedminaee/orgs", "repos_url": "https://api.github.com/users/hamedminaee/repos", "events_url": "https://api.github.com/users/hamedminaee/events{/privacy}", "received_events_url": "https://api.github.com/users/hamedminaee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-09T20:11:02Z", "updated_at": "2019-12-10T16:50:40Z", "closed_at": "2019-12-10T16:50:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a weird issue when I run my tests in travis using Tavern. I use tavern to test my apis. I install the following first:\r\n\r\n```\r\nsudo apt-get update\r\nsudo apt-get install python3-setuptools\r\nsudo apt-get -q install -y python3-pip\r\nsudo python3 -m pip install --upgrade pytest\r\nsudo python3 -m pip install -q tavern\r\nsudo python3 -m pip install -q pytest-pythonpath\r\nsudo python3 -m pip install -q --upgrade requests\r\n```\r\n\r\nAfter I run my tests as follows (partial code to show the real issue):\r\n\r\n```\r\npytest_parameters = [\"--tb=short\"]\r\npytest_parameters.append(\"--json-report\")\r\npytest_parameters.append(\"--json-report-summary\")\r\nfor version in api_version_set:\r\n    os.chdir(test_file_path + \"/\" + version)\r\n    cfg[\"api_version\"] = version\r\n    tavern_cfg = generate_tavern_config(cfg)\r\n    run(in_file = in_file, tavern_global_cfg = tavern_cfg, pytest_args = pytest_parameters)\r\n```\r\n\r\nI get:\r\n\r\nSTDERR:\r\nERROR: usage: baft.py [options] [file_or_dir] [file_or_dir] [...]\r\nbaft.py: error: unrecognized arguments: --json-report --json-report-summary\r\n  inifile: path/tests/api-tests/v1/pytest.ini\r\n  rootdir: path/tests/api-tests/v1\r\n\r\nAs soon as I remove:\r\n\r\n```\r\npytest_parameters.append(\"--json-report\")\r\npytest_parameters.append(\"--json-report-summary\")\r\n```\r\ntavern runs the api tests and everything works.\r\n\r\nTo fix the issue I even added `sudo python3 -m pip install pytest-json-report --upgrade ` as follows:\r\n\r\n```\r\nsudo apt-get update\r\nsudo apt-get install python3-setuptools\r\nsudo apt-get -q install -y python3-pip\r\nsudo python3 -m pip install --upgrade pytest\r\nsudo python3 -m pip install -q tavern\r\nsudo python3 -m pip install -q pytest-pythonpath\r\nsudo python3 -m pip install -q --upgrade requests\r\nsudo python3 -m pip install pytest-json-report --upgrade\r\n```\r\n\r\nand after I get:\r\n\r\n```\r\n=================================== FAILURES ===================================\r\n_ /home/xxx/tests/api-tests/v1/test.apitest.tavern.yaml::Get some fake data from the JSON placeholder API _\r\n/usr/local/lib/python3.5/dist-packages/stevedore/extension.py:195: in _load_plugins\r\n    verify_requirements,\r\n/usr/local/lib/python3.5/dist-packages/stevedore/enabled.py:79: in _load_one_plugin\r\n    verify_requirements,\r\n/usr/local/lib/python3.5/dist-packages/stevedore/extension.py:222: in _load_one_plugin\r\n    ep.require()\r\n/usr/lib/python3/dist-packages/pkg_resources/__init__.py:2245: in require\r\n    items = working_set.resolve(reqs, env, installer)\r\n/usr/lib/python3/dist-packages/pkg_resources/__init__.py:834: in resolve\r\n    raise VersionConflict(dist, req).with_context(dependent_req)\r\nE   pkg_resources.VersionConflict: (pytest 5.3.1 (/usr/local/lib/python3.5/dist-packages), Requirement.parse('pytest<4.6.0,>=3.6.0'))\r\nThe above exception was the direct cause of the following exception:\r\n/usr/local/lib/python3.5/dist-packages/_pytest/runner.py:234: in from_call\r\n    result = func()\r\n/usr/local/lib/python3.5/dist-packages/_pytest/runner.py:207: in <lambda>\r\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\r\n/usr/local/lib/python3.5/dist-packages/pluggy/hooks.py:286: in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\n/usr/local/lib/python3.5/dist-packages/pluggy/manager.py:93: in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n/usr/local/lib/python3.5/dist-packages/pluggy/manager.py:87: in <lambda>\r\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\n/usr/local/lib/python3.5/dist-packages/pluggy/callers.py:208: in _multicall\r\n    return outcome.get_result()\r\n/usr/local/lib/python3.5/dist-packages/pluggy/callers.py:80: in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n/usr/local/lib/python3.5/dist-packages/pluggy/callers.py:187: in _multicall\r\n    res = hook_impl.function(*args)[0m\r\n/usr/local/lib/python3.5/dist-packages/_pytest/runner.py:131: in pytest_runtest_call\r\n    item.runtest()\r\n/usr/local/lib/python3.5/dist-packages/tavern/testutils/pytesthook/item.py:143: in runtest\r\n    load_plugins(self.global_cfg)\r\n/usr/local/lib/python3.5/dist-packages/tavern/plugins.py:78: in __call__\r\n    self.plugins = self._load_plugins(config)\r\n/usr/local/lib/python3.5/dist-packages/tavern/plugins.py:115: in _load_plugins\r\n    on_load_failure_callback=plugin_load_error,\r\n/usr/local/lib/python3.5/dist-packages/stevedore/enabled.py:72: in __init__\r\n    verify_requirements=verify_requirements,\r\n/usr/local/lib/python3.5/dist-packages/stevedore/extension.py:106: in __init__\r\n    verify_requirements)\r\n/usr/local/lib/python3.5/dist-packages/stevedore/extension.py:203: in _load_plugins\r\n    self._on_load_failure_callback(self, ep, err)\r\n/usr/local/lib/python3.5/dist-packages/tavern/plugins.py:27: in plugin_load_error\r\n    raise_from(exceptions.PluginLoadError(msg), err)\r\n/usr/local/lib/python3.5/dist-packages/future/utils/__init__.py:403: in raise_from\r\n    exec(execstr, myglobals, mylocals)\r\n<string>:1: in <module>\r\n    ???\r\nE   tavern.util.exceptions.PluginLoadError: Error loading plugin requests = tavern._plugins.rest.tavernhook:TavernRestPlugin - (pytest 5.3.1 (/usr/local/lib/python3.5/dist-packages), Requirement.parse('pytest<4.6.0,>=3.6.0'))\r\n--------------------------------- JSON report ----------------------------------\r\nJSON report written to: .report.json (1324 bytes)\r\n============================== 1 failed in 0.30s ===============================\r\n```\r\n\r\nIt is really frustrating and I am stuck at this stage\r\n\r\n@michaelboulton  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/496", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/496/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/496/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/496/events", "html_url": "https://github.com/taverntesting/tavern/issues/496", "id": 534991048, "node_id": "MDU6SXNzdWU1MzQ5OTEwNDg=", "number": 496, "title": "clean up old branches", "user": {"login": "michaelboulton", "id": 3809868, "node_id": "MDQ6VXNlcjM4MDk4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3809868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelboulton", "html_url": "https://github.com/michaelboulton", "followers_url": "https://api.github.com/users/michaelboulton/followers", "following_url": "https://api.github.com/users/michaelboulton/following{/other_user}", "gists_url": "https://api.github.com/users/michaelboulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelboulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelboulton/subscriptions", "organizations_url": "https://api.github.com/users/michaelboulton/orgs", "repos_url": "https://api.github.com/users/michaelboulton/repos", "events_url": "https://api.github.com/users/michaelboulton/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelboulton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "michaelboulton", "id": 3809868, "node_id": "MDQ6VXNlcjM4MDk4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3809868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelboulton", "html_url": "https://github.com/michaelboulton", "followers_url": "https://api.github.com/users/michaelboulton/followers", "following_url": "https://api.github.com/users/michaelboulton/following{/other_user}", "gists_url": "https://api.github.com/users/michaelboulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelboulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelboulton/subscriptions", "organizations_url": "https://api.github.com/users/michaelboulton/orgs", "repos_url": "https://api.github.com/users/michaelboulton/repos", "events_url": "https://api.github.com/users/michaelboulton/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelboulton/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "michaelboulton", "id": 3809868, "node_id": "MDQ6VXNlcjM4MDk4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3809868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelboulton", "html_url": "https://github.com/michaelboulton", "followers_url": "https://api.github.com/users/michaelboulton/followers", "following_url": "https://api.github.com/users/michaelboulton/following{/other_user}", "gists_url": "https://api.github.com/users/michaelboulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelboulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelboulton/subscriptions", "organizations_url": "https://api.github.com/users/michaelboulton/orgs", "repos_url": "https://api.github.com/users/michaelboulton/repos", "events_url": "https://api.github.com/users/michaelboulton/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelboulton/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-12-09T15:05:23Z", "updated_at": "2020-04-05T16:51:59Z", "closed_at": "2020-04-05T16:51:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/495", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/495/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/495/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/495/events", "html_url": "https://github.com/taverntesting/tavern/issues/495", "id": 534968970, "node_id": "MDU6SXNzdWU1MzQ5Njg5NzA=", "number": 495, "title": "1.0 release", "user": {"login": "michaelboulton", "id": 3809868, "node_id": "MDQ6VXNlcjM4MDk4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3809868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelboulton", "html_url": "https://github.com/michaelboulton", "followers_url": "https://api.github.com/users/michaelboulton/followers", "following_url": "https://api.github.com/users/michaelboulton/following{/other_user}", "gists_url": "https://api.github.com/users/michaelboulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelboulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelboulton/subscriptions", "organizations_url": "https://api.github.com/users/michaelboulton/orgs", "repos_url": "https://api.github.com/users/michaelboulton/repos", "events_url": "https://api.github.com/users/michaelboulton/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelboulton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 892816388, "node_id": "MDU6TGFiZWw4OTI4MTYzODg=", "url": "https://api.github.com/repos/taverntesting/tavern/labels/Priority:%20High", "name": "Priority: High", "color": "e99695", "default": false, "description": ""}, {"id": 737616471, "node_id": "MDU6TGFiZWw3Mzc2MTY0NzE=", "url": "https://api.github.com/repos/taverntesting/tavern/labels/Type:%20Enhancement", "name": "Type: Enhancement", "color": "c2e0c6", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-09T14:30:07Z", "updated_at": "2020-04-05T15:27:56Z", "closed_at": "2020-04-05T15:27:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Overdue by about 18 months, the version 1.0 of Tavern is coming out. This will\r\nbe a large collection of improvements (mainly internal) as well as some breaking changes.\r\n\r\nAll development as of the beginning of December 2019 will be done against the\r\n`feature/one-point-o` branch and the master branch will only receive bug fixes.\r\nThe expected release date is January 2020 (possibly February as this is quite a\r\nshort amount of time to switch), but there is a 'alpha' version on\r\nPypi for people who want to switch now.\r\n\r\n## Minor new features\r\n\r\n- Add key to allow uploading the raw content of a file as a request body\r\n\r\n- Add new token which can match regex values in parts of responses\r\n\r\n- Strict key checking should now work with MQTT json payloads\r\n\r\n## Breaking changes\r\n\r\nThese changes have a chance of breaking some of your existing tests - they are\r\nordered roughly from most urgent to least urgent.\r\n\r\n### 'body' key changes to 'json' in HTTP response\r\n\r\nThis is to maintain parity with the MQTT 'json' block as well as to signify that\r\nit is only meant for checking JSON.\r\n\r\nIf your test was like this:\r\n\r\n```yaml\r\n    response:\r\n      status_code: 200\r\n      body:\r\n        abc: 123\r\n```\r\n\r\nIt should now be:\r\n\r\n```yaml\r\n    response:\r\n      status_code: 200\r\n      json:\r\n        abc: 123\r\n```\r\n\r\nThere should be no other effects from this change.\r\n\r\n### Python 2 dropped\r\n\r\nTavern will no longer support Python 2. There have been warnings from Tavern as\r\nwell as from Pip and other tools saying to upgrade to Python 3 for months now,\r\nand with the dropping of official support of Python 2 Tavern will no longer\r\nsupport it.\r\n\r\n### Changes to the way strictness works\r\n\r\n'legacy' strict key checking (ie, strict key checking behaves differently for\r\nthe top level of a response) has been removed and it is now either on or off for\r\nthe whole response body.\r\n\r\nTurning strictness 'off' will now also allow users to check that one item is\r\npresent in a list while ignoring the other items, a popular request.\r\n\r\nMore details in the\r\n[1.0 documentation](https://github.com/taverntesting/tavern/blob/0b7a4c4ea940ec90d8d0d9bc3388aaa647f0bc19/docs/source/basics.md#strict-key-checking)\r\n\r\n### 'null' checking on body\r\n\r\nBefore 1.0, any response body would be matched if `null` was specified in the\r\ntest response block. This has changed and `null` will now only match a JSON\r\n`null`. To match anything in the response use `!anything`, or use one of the\r\nother type tokens to match any list (`!anylist`), any string (`!anystr`), etc.\r\n\r\n### 'run' entry point slightly reworked\r\n\r\nThe arguments to the `run()` function have changed so that any extra keyword\r\narguments will now raise an error rather than just warning. This is to bring it\r\nmore in line with the fact that it is just a thin layer over Pytest.\r\n\r\n### New error traceback is the default\r\n\r\nThe new 'fancy' error reporting is now the default when a Tavern error occurs (a\r\nnormal Python traceback is still shown for unexpected errors or bad schema\r\nerrors). This can be disabled by using the `tavern-use-default-traceback` flag\r\nin your pytest config file or on the command line.\r\n\r\n### External function blocks changes\r\n\r\nRather than putting a magic `$ext` key into the block to add an extra function\r\nto verify part of a response, the function should now go into the\r\n`verify_response_with` block in the response block. `$ext` functions can still\r\nbe used in _request_ blocks to insert extra data into the request however.\r\n\r\n### Save value path changes\r\n\r\nWhen saving a value with the `save` block, the path to the thing to save should\r\nnow be given as a JMESpath rather than the 'old' style - ie, instead of `a.b.0`,\r\nuse `a.b[0]`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/490", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/490/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/490/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/490/events", "html_url": "https://github.com/taverntesting/tavern/issues/490", "id": 531074265, "node_id": "MDU6SXNzdWU1MzEwNzQyNjU=", "number": 490, "title": "Passing Environmental Variable to YAML file from command line", "user": {"login": "rasihonurolgun", "id": 36571369, "node_id": "MDQ6VXNlcjM2NTcxMzY5", "avatar_url": "https://avatars1.githubusercontent.com/u/36571369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasihonurolgun", "html_url": "https://github.com/rasihonurolgun", "followers_url": "https://api.github.com/users/rasihonurolgun/followers", "following_url": "https://api.github.com/users/rasihonurolgun/following{/other_user}", "gists_url": "https://api.github.com/users/rasihonurolgun/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasihonurolgun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasihonurolgun/subscriptions", "organizations_url": "https://api.github.com/users/rasihonurolgun/orgs", "repos_url": "https://api.github.com/users/rasihonurolgun/repos", "events_url": "https://api.github.com/users/rasihonurolgun/events{/privacy}", "received_events_url": "https://api.github.com/users/rasihonurolgun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-02T11:43:21Z", "updated_at": "2019-12-03T12:41:44Z", "closed_at": "2019-12-03T11:26:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello and regards to all,\r\nHere is my situation:\r\n\r\nFirst of all i'm just a beginner to test also for tavern testing. I have bunch of API's that use request and get methods. Testing them with tavern is perfectly fine.\r\nHowever, now I'm testing _**\"test_tavern.yaml\"**_ files with Github CI and my requests need authorization. Best way to do that using **_\"environmental variables\"_** to secure them by masking in Github CI. \r\n\r\nMy question is that I couldn't find any solution to pass environmental variable to my \"yaml\" file from bash/cmd prompt. Is there any way to do that? If so, i will try to add that command line to my gitlab_ci.yml file to pass that argument.\r\n\r\nSecondly, i couldn't figure out how to use **_tavern.env_vars_**. I've tried to use `\"!include common.yaml\"` files and taking variables from that file to use in my tests. But I can't able to use tavern env vars which I really need some help about. Where are they stored , how I can see them or change them ?\r\n\r\nI've put my **common** and **test** YAML file. So, basicly if I include my stuff it's working like that. However, since I want to use **\"environmental variable\"** from Gitlab CI itself, I need to pass that enviromental variable to my testing yaml file.\r\n\r\n```\r\n#common.yaml\r\nname: Common test information\r\ndescription: Login information for test server\r\n\r\nvariables:\r\n  protocol: https\r\n  host: www.server.com\r\n  port: 1234\r\n  user_id: myemail@gmail.com\r\n  user_password: mypassword\r\n  userdef_url: https/blabla..\r\n```\r\n\r\n```\r\n---\r\ntest_name: im testing stuff\r\n\r\nincludes:\r\n    - !include common.yaml\r\n\r\nvariables:\r\n    user_id: wrong_id\r\nstages:\r\n      - &test_user_anchor\r\n        name: hello\r\n        request:\r\n            url: \"{userdef_url:s}\"\r\n            method: POST\r\n            json: \r\n                username: \"{user_id:s}\"\r\n                password: \"{user_password:s}\"\r\n            headers:\r\n                content-type: application/json\r\n        response:\r\n            status_code: 200            \r\n            save:\r\n                body:\r\n                    access_token: access\r\n```\r\nP.S: #6  from this issue, it's been said use \"--set\" to set a variable in YAML file. However im getting this error as well. Maybe i'm doing something wrong ?\r\n![image](https://user-images.githubusercontent.com/36571369/69961687-acbbc880-150c-11ea-837c-d815e5c85349.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/489", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/489/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/489/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/489/events", "html_url": "https://github.com/taverntesting/tavern/issues/489", "id": 529361773, "node_id": "MDU6SXNzdWU1MjkzNjE3NzM=", "number": 489, "title": "Internal change to the way strictness works", "user": {"login": "michaelboulton", "id": 3809868, "node_id": "MDQ6VXNlcjM4MDk4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3809868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelboulton", "html_url": "https://github.com/michaelboulton", "followers_url": "https://api.github.com/users/michaelboulton/followers", "following_url": "https://api.github.com/users/michaelboulton/following{/other_user}", "gists_url": "https://api.github.com/users/michaelboulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelboulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelboulton/subscriptions", "organizations_url": "https://api.github.com/users/michaelboulton/orgs", "repos_url": "https://api.github.com/users/michaelboulton/repos", "events_url": "https://api.github.com/users/michaelboulton/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelboulton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 892816388, "node_id": "MDU6TGFiZWw4OTI4MTYzODg=", "url": "https://api.github.com/repos/taverntesting/tavern/labels/Priority:%20High", "name": "Priority: High", "color": "e99695", "default": false, "description": ""}, {"id": 892814897, "node_id": "MDU6TGFiZWw4OTI4MTQ4OTc=", "url": "https://api.github.com/repos/taverntesting/tavern/labels/Type:%20Maintenance", "name": "Type: Maintenance", "color": "bfdadc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "michaelboulton", "id": 3809868, "node_id": "MDQ6VXNlcjM4MDk4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3809868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelboulton", "html_url": "https://github.com/michaelboulton", "followers_url": "https://api.github.com/users/michaelboulton/followers", "following_url": "https://api.github.com/users/michaelboulton/following{/other_user}", "gists_url": "https://api.github.com/users/michaelboulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelboulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelboulton/subscriptions", "organizations_url": "https://api.github.com/users/michaelboulton/orgs", "repos_url": "https://api.github.com/users/michaelboulton/repos", "events_url": "https://api.github.com/users/michaelboulton/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelboulton/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "michaelboulton", "id": 3809868, "node_id": "MDQ6VXNlcjM4MDk4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3809868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelboulton", "html_url": "https://github.com/michaelboulton", "followers_url": "https://api.github.com/users/michaelboulton/followers", "following_url": "https://api.github.com/users/michaelboulton/following{/other_user}", "gists_url": "https://api.github.com/users/michaelboulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelboulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelboulton/subscriptions", "organizations_url": "https://api.github.com/users/michaelboulton/orgs", "repos_url": "https://api.github.com/users/michaelboulton/repos", "events_url": "https://api.github.com/users/michaelboulton/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelboulton/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/taverntesting/tavern/milestones/1", "html_url": "https://github.com/taverntesting/tavern/milestone/1", "labels_url": "https://api.github.com/repos/taverntesting/tavern/milestones/1/labels", "id": 4024823, "node_id": "MDk6TWlsZXN0b25lNDAyNDgyMw==", "number": 1, "title": "v1.0", "description": "", "creator": {"login": "bitdivision", "id": 205209, "node_id": "MDQ6VXNlcjIwNTIwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/205209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitdivision", "html_url": "https://github.com/bitdivision", "followers_url": "https://api.github.com/users/bitdivision/followers", "following_url": "https://api.github.com/users/bitdivision/following{/other_user}", "gists_url": "https://api.github.com/users/bitdivision/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitdivision/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitdivision/subscriptions", "organizations_url": "https://api.github.com/users/bitdivision/orgs", "repos_url": "https://api.github.com/users/bitdivision/repos", "events_url": "https://api.github.com/users/bitdivision/events{/privacy}", "received_events_url": "https://api.github.com/users/bitdivision/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 10, "state": "open", "created_at": "2019-02-03T10:09:02Z", "updated_at": "2020-04-05T15:27:12Z", "due_on": "2019-03-01T08:00:00Z", "closed_at": null}, "comments": 1, "created_at": "2019-11-27T13:56:10Z", "updated_at": "2019-12-09T14:31:42Z", "closed_at": "2019-12-09T14:31:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "- move into a class to remove site-specific calculation of strictness\r\n- add a way to turn it on/off rather than just on", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/488", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/488/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/488/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/488/events", "html_url": "https://github.com/taverntesting/tavern/issues/488", "id": 528615098, "node_id": "MDU6SXNzdWU1Mjg2MTUwOTg=", "number": 488, "title": "why  ModuleNotFoundError: No module named \uff1f", "user": {"login": "sktt0211", "id": 13163379, "node_id": "MDQ6VXNlcjEzMTYzMzc5", "avatar_url": "https://avatars1.githubusercontent.com/u/13163379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sktt0211", "html_url": "https://github.com/sktt0211", "followers_url": "https://api.github.com/users/sktt0211/followers", "following_url": "https://api.github.com/users/sktt0211/following{/other_user}", "gists_url": "https://api.github.com/users/sktt0211/gists{/gist_id}", "starred_url": "https://api.github.com/users/sktt0211/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sktt0211/subscriptions", "organizations_url": "https://api.github.com/users/sktt0211/orgs", "repos_url": "https://api.github.com/users/sktt0211/repos", "events_url": "https://api.github.com/users/sktt0211/events{/privacy}", "received_events_url": "https://api.github.com/users/sktt0211/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-26T10:02:51Z", "updated_at": "2019-11-29T09:35:58Z", "closed_at": "2019-11-29T09:35:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "test_XX.tavern.yaml\r\n\r\n - name: lalal\r\n    request:\r\n      url: http://10.11.115.116:8080//next\r\n      method: GET\r\n    response:\r\n      status_code: 200\r\n      body:\r\n        remoteIp: 10.23.133.116\r\n      save:\r\n        $ext:\r\n          function: myalan:test_function\r\n\r\n\r\n\r\nmyalan.py\r\n\r\nfrom box import Box\r\n\r\ndef test_function(response):\r\n    return Box({\"test_my_simple\" : response.json()[\"ipAddr\"][\"post\"][\"appName\"]})\r\n\r\n\r\n\r\nmyalan.py and test_XX.tavern.yaml  In the same directory\r\nReport errors \uff1a\r\ntavern.util.exceptions.BadSchemaError: Couldn't load myalan:test_function\r\nModuleNotFoundError: No module named 'myalan'\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/483", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/483/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/483/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/483/events", "html_url": "https://github.com/taverntesting/tavern/issues/483", "id": 525767119, "node_id": "MDU6SXNzdWU1MjU3NjcxMTk=", "number": 483, "title": "Not an issue, just a question", "user": {"login": "Spillage", "id": 3991153, "node_id": "MDQ6VXNlcjM5OTExNTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3991153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Spillage", "html_url": "https://github.com/Spillage", "followers_url": "https://api.github.com/users/Spillage/followers", "following_url": "https://api.github.com/users/Spillage/following{/other_user}", "gists_url": "https://api.github.com/users/Spillage/gists{/gist_id}", "starred_url": "https://api.github.com/users/Spillage/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Spillage/subscriptions", "organizations_url": "https://api.github.com/users/Spillage/orgs", "repos_url": "https://api.github.com/users/Spillage/repos", "events_url": "https://api.github.com/users/Spillage/events{/privacy}", "received_events_url": "https://api.github.com/users/Spillage/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-20T12:16:00Z", "updated_at": "2019-11-20T15:20:05Z", "closed_at": "2019-11-20T15:20:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n   I need a step 'sleep for X seconds' between different requests, is it supported by tavern?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/482", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/482/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/482/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/482/events", "html_url": "https://github.com/taverntesting/tavern/issues/482", "id": 525263231, "node_id": "MDU6SXNzdWU1MjUyNjMyMzE=", "number": 482, "title": "Move extra_expected_keys behind a strict check", "user": {"login": "methsib", "id": 49925090, "node_id": "MDQ6VXNlcjQ5OTI1MDkw", "avatar_url": "https://avatars2.githubusercontent.com/u/49925090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/methsib", "html_url": "https://github.com/methsib", "followers_url": "https://api.github.com/users/methsib/followers", "following_url": "https://api.github.com/users/methsib/following{/other_user}", "gists_url": "https://api.github.com/users/methsib/gists{/gist_id}", "starred_url": "https://api.github.com/users/methsib/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/methsib/subscriptions", "organizations_url": "https://api.github.com/users/methsib/orgs", "repos_url": "https://api.github.com/users/methsib/repos", "events_url": "https://api.github.com/users/methsib/events{/privacy}", "received_events_url": "https://api.github.com/users/methsib/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-19T20:57:33Z", "updated_at": "2019-11-20T13:32:05Z", "closed_at": "2019-11-20T13:32:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have got a scenario where we want to verify certain items in list of dictionaries. It will be useful to have a feature which can verify one or few dictionaries out of many other in a list of dictionaries. \r\n\r\nEg: \r\nResponse body : [ {a=1, b=2, c=3}, {a=9, b=8, c=7}, {a=5, b=6, c=7}, {a=0, b=0, c=0} ]\r\nVerify whether {a=1, b=2, c=3} in the list.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/480", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/480/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/480/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/480/events", "html_url": "https://github.com/taverntesting/tavern/issues/480", "id": 525177090, "node_id": "MDU6SXNzdWU1MjUxNzcwOTA=", "number": 480, "title": "Add warning about format variables being coerced to strings", "user": {"login": "michaelboulton", "id": 3809868, "node_id": "MDQ6VXNlcjM4MDk4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3809868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelboulton", "html_url": "https://github.com/michaelboulton", "followers_url": "https://api.github.com/users/michaelboulton/followers", "following_url": "https://api.github.com/users/michaelboulton/following{/other_user}", "gists_url": "https://api.github.com/users/michaelboulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelboulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelboulton/subscriptions", "organizations_url": "https://api.github.com/users/michaelboulton/orgs", "repos_url": "https://api.github.com/users/michaelboulton/repos", "events_url": "https://api.github.com/users/michaelboulton/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelboulton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 892816388, "node_id": "MDU6TGFiZWw4OTI4MTYzODg=", "url": "https://api.github.com/repos/taverntesting/tavern/labels/Priority:%20High", "name": "Priority: High", "color": "e99695", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "michaelboulton", "id": 3809868, "node_id": "MDQ6VXNlcjM4MDk4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3809868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelboulton", "html_url": "https://github.com/michaelboulton", "followers_url": "https://api.github.com/users/michaelboulton/followers", "following_url": "https://api.github.com/users/michaelboulton/following{/other_user}", "gists_url": "https://api.github.com/users/michaelboulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelboulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelboulton/subscriptions", "organizations_url": "https://api.github.com/users/michaelboulton/orgs", "repos_url": "https://api.github.com/users/michaelboulton/repos", "events_url": "https://api.github.com/users/michaelboulton/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelboulton/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "michaelboulton", "id": 3809868, "node_id": "MDQ6VXNlcjM4MDk4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3809868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelboulton", "html_url": "https://github.com/michaelboulton", "followers_url": "https://api.github.com/users/michaelboulton/followers", "following_url": "https://api.github.com/users/michaelboulton/following{/other_user}", "gists_url": "https://api.github.com/users/michaelboulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelboulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelboulton/subscriptions", "organizations_url": "https://api.github.com/users/michaelboulton/orgs", "repos_url": "https://api.github.com/users/michaelboulton/repos", "events_url": "https://api.github.com/users/michaelboulton/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelboulton/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-11-19T18:13:06Z", "updated_at": "2019-11-21T16:00:24Z", "closed_at": "2019-11-21T16:00:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This question or things related to it comes up a lot, it should be made clear at runtime (and in the documentation?) that anything used as a format variable will be coerced to a string", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/477", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/477/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/477/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/477/events", "html_url": "https://github.com/taverntesting/tavern/issues/477", "id": 523497028, "node_id": "MDU6SXNzdWU1MjM0OTcwMjg=", "number": 477, "title": "Can't add keys to json with $ext: function", "user": {"login": "ZubAnt", "id": 19777376, "node_id": "MDQ6VXNlcjE5Nzc3Mzc2", "avatar_url": "https://avatars2.githubusercontent.com/u/19777376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZubAnt", "html_url": "https://github.com/ZubAnt", "followers_url": "https://api.github.com/users/ZubAnt/followers", "following_url": "https://api.github.com/users/ZubAnt/following{/other_user}", "gists_url": "https://api.github.com/users/ZubAnt/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZubAnt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZubAnt/subscriptions", "organizations_url": "https://api.github.com/users/ZubAnt/orgs", "repos_url": "https://api.github.com/users/ZubAnt/repos", "events_url": "https://api.github.com/users/ZubAnt/events{/privacy}", "received_events_url": "https://api.github.com/users/ZubAnt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-15T14:21:33Z", "updated_at": "2020-05-01T14:52:26Z", "closed_at": "2020-05-01T14:52:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am create next function:\r\n\r\n```\r\n# tests/factory.py\r\nimport random\r\n\r\nfrom datetime import datetime\r\n\r\nfrom box import Box\r\nfrom faker import Faker\r\n\r\nfake = Faker('ru_RU')\r\n\r\ndef goal():\r\n    data = {\r\n        'name': fake.name(),\r\n        'description': fake.text(),\r\n        'date_start': datetime.now().isoformat(),\r\n        'date_end': datetime.now().isoformat(),\r\n    }\r\n    return Box(data)\r\n\r\n```\r\n\r\nAnd try this test:\r\n\r\n```\r\ntest_name: CRUD goal\r\n\r\nmarks:\r\n  - usefixtures:\r\n      - app_base_url\r\n\r\nstages:\r\n  - name: create goal\r\n    request:\r\n      url: \"{app_base_url}/api/v2/goal/\"\r\n      method: POST\r\n      headers:\r\n        x-user-username: divanov\r\n        content-type: application/json\r\n      json:\r\n        author_login: divanov\r\n        $ext:\r\n          function: tests.factory:goal\r\n```\r\n \r\nThe request body comes into the tested application without `author_login`.\r\n\r\nHow can I additionally add fields to `json` without adding it to a function?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/476", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/476/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/476/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/476/events", "html_url": "https://github.com/taverntesting/tavern/issues/476", "id": 522557393, "node_id": "MDU6SXNzdWU1MjI1NTczOTM=", "number": 476, "title": "How to use nested list if the list name has a dot in its name", "user": {"login": "wizardOutlaw", "id": 55761223, "node_id": "MDQ6VXNlcjU1NzYxMjIz", "avatar_url": "https://avatars1.githubusercontent.com/u/55761223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wizardOutlaw", "html_url": "https://github.com/wizardOutlaw", "followers_url": "https://api.github.com/users/wizardOutlaw/followers", "following_url": "https://api.github.com/users/wizardOutlaw/following{/other_user}", "gists_url": "https://api.github.com/users/wizardOutlaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/wizardOutlaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wizardOutlaw/subscriptions", "organizations_url": "https://api.github.com/users/wizardOutlaw/orgs", "repos_url": "https://api.github.com/users/wizardOutlaw/repos", "events_url": "https://api.github.com/users/wizardOutlaw/events{/privacy}", "received_events_url": "https://api.github.com/users/wizardOutlaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-14T00:48:56Z", "updated_at": "2019-11-20T14:52:53Z", "closed_at": "2019-11-20T14:52:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello I am trying to save body from my response, however my response contains a \"dot\" in its list variable name, in that case how do i traverse to my list. \r\nExample: I am trying to do something like this in my test \r\n```\r\nresponse:\r\n      status_code: 200\r\n      save:\r\n        body:\r\n          self_link: v1.Project.self_link.href\r\n          project_id: v1.Project.id\r\n```\r\nMy actual response looks something like this \r\n```\r\n'{'v1.Project': \r\n       {'datastore_link': {'href': value}, 'branches': {'href': value}, id, 'publish-events':{href:value} ..etc }\r\n}\r\n```\r\nIn this case how do i get access to my objects when it starts looking for 'v1' and immediately starts traversing that list?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/475", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/475/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/475/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/475/events", "html_url": "https://github.com/taverntesting/tavern/issues/475", "id": 520145401, "node_id": "MDU6SXNzdWU1MjAxNDU0MDE=", "number": 475, "title": "collection failure for expected result with unicode character", "user": {"login": "Meyy1180", "id": 57531051, "node_id": "MDQ6VXNlcjU3NTMxMDUx", "avatar_url": "https://avatars3.githubusercontent.com/u/57531051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Meyy1180", "html_url": "https://github.com/Meyy1180", "followers_url": "https://api.github.com/users/Meyy1180/followers", "following_url": "https://api.github.com/users/Meyy1180/following{/other_user}", "gists_url": "https://api.github.com/users/Meyy1180/gists{/gist_id}", "starred_url": "https://api.github.com/users/Meyy1180/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Meyy1180/subscriptions", "organizations_url": "https://api.github.com/users/Meyy1180/orgs", "repos_url": "https://api.github.com/users/Meyy1180/repos", "events_url": "https://api.github.com/users/Meyy1180/events{/privacy}", "received_events_url": "https://api.github.com/users/Meyy1180/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-08T17:41:58Z", "updated_at": "2020-01-25T15:52:04Z", "closed_at": "2020-01-25T15:52:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Operation system : Windows 7 Enterprise\r\nPython Version : 3.6.7\r\n\r\ngetting following collection error when non english characters are present in the expected result \r\n\r\nc:\\users\\XXl\\appdata\\local\\programs\\python\\python36-32\\lib\\codecs.py:321: in decode (result, consumed) = self._buffer_decode(data, self.errors, final) E UnicodeDecodeError: 'utf-8' codec can't decode byte 0xfc in position 5827: invalid start byte", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/474", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/474/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/474/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/474/events", "html_url": "https://github.com/taverntesting/tavern/issues/474", "id": 519316122, "node_id": "MDU6SXNzdWU1MTkzMTYxMjI=", "number": 474, "title": "token as env vars for tavern api testing fails", "user": {"login": "hamedminaee", "id": 52859974, "node_id": "MDQ6VXNlcjUyODU5OTc0", "avatar_url": "https://avatars2.githubusercontent.com/u/52859974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hamedminaee", "html_url": "https://github.com/hamedminaee", "followers_url": "https://api.github.com/users/hamedminaee/followers", "following_url": "https://api.github.com/users/hamedminaee/following{/other_user}", "gists_url": "https://api.github.com/users/hamedminaee/gists{/gist_id}", "starred_url": "https://api.github.com/users/hamedminaee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hamedminaee/subscriptions", "organizations_url": "https://api.github.com/users/hamedminaee/orgs", "repos_url": "https://api.github.com/users/hamedminaee/repos", "events_url": "https://api.github.com/users/hamedminaee/events{/privacy}", "received_events_url": "https://api.github.com/users/hamedminaee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-07T14:54:06Z", "updated_at": "2019-11-20T14:17:49Z", "closed_at": "2019-11-20T14:17:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am new to Tavern API Testing and I am trying to pass a token as an env var (my api is written in nodejs). Here is my code\r\n```\r\ntest_name: POST /logs\r\nmarks:\r\n  - post_logs\r\nstages:\r\n  - name: post a log entry\r\n    request:\r\n      url: \"{host:s}:{port:d}{base_path:s}/investigate/api/{version:s}/logs\"\r\n      method: POST\r\n      headers:\r\n        Authorization: \"Basic {tavern.env_vars.TOKEN}\"\r\n        content-type: application/json\r\n      params:\r\n        body:\r\n          log: blahblahblah\r\n    response:\r\n      status_code: 204\r\n```\r\n\r\n\r\n\r\n    \r\nMy problem is I do not know where to add my token in tavern.env_vars? is it a special .env tavern file I need to add? \r\nright now when I run the above I get:\r\n\r\n```\r\n not found in format: (\"'Box' object has no attribute 'TOKEN'\",)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/473", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/473/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/473/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/473/events", "html_url": "https://github.com/taverntesting/tavern/issues/473", "id": 517097776, "node_id": "MDU6SXNzdWU1MTcwOTc3NzY=", "number": 473, "title": "Support for providing custom content type for files", "user": {"login": "justin-fay", "id": 49392715, "node_id": "MDQ6VXNlcjQ5MzkyNzE1", "avatar_url": "https://avatars0.githubusercontent.com/u/49392715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/justin-fay", "html_url": "https://github.com/justin-fay", "followers_url": "https://api.github.com/users/justin-fay/followers", "following_url": "https://api.github.com/users/justin-fay/following{/other_user}", "gists_url": "https://api.github.com/users/justin-fay/gists{/gist_id}", "starred_url": "https://api.github.com/users/justin-fay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/justin-fay/subscriptions", "organizations_url": "https://api.github.com/users/justin-fay/orgs", "repos_url": "https://api.github.com/users/justin-fay/repos", "events_url": "https://api.github.com/users/justin-fay/events{/privacy}", "received_events_url": "https://api.github.com/users/justin-fay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-04T11:40:36Z", "updated_at": "2019-12-05T08:16:43Z", "closed_at": "2019-12-05T08:16:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "When sending multipart HTTP requests with `requests` you can specify a custom content type for each part of the multipart request.\r\n\r\n```\r\nfiles = {'file': ('report.xls', open('report.xls', 'rb'), 'application/vnd.ms-excel')}\r\n>>> r = requests.post(url, files=files)\r\n```\r\nThis is sometimes needed when a custom content type is required by an API eg. \r\n> 'application/vnd+vendorspecific+xml'. \r\n\r\nTavern only supports the content type header for files as guessed by the `mimetyoes.guess_type` function.\r\n\r\n```\r\n    files:\r\n        file_name: /path/to/file\r\n```\r\n\r\nA possibility for this could be to replace the path to the file with a two element list, where the second element is the header, the default case should still be supported and work as normal.\r\n```\r\n    files:\r\n         file_name: [/path/to/file, apllication/custom]\r\n         file_name_2: /path/to/file2\r\n```\r\n\r\nI am happy to give this a go myself if it is a desired feature.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/472", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/472/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/472/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/472/events", "html_url": "https://github.com/taverntesting/tavern/issues/472", "id": 514426055, "node_id": "MDU6SXNzdWU1MTQ0MjYwNTU=", "number": 472, "title": "calling external functions in windows", "user": {"login": "Keri753951", "id": 57120622, "node_id": "MDQ6VXNlcjU3MTIwNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/57120622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Keri753951", "html_url": "https://github.com/Keri753951", "followers_url": "https://api.github.com/users/Keri753951/followers", "following_url": "https://api.github.com/users/Keri753951/following{/other_user}", "gists_url": "https://api.github.com/users/Keri753951/gists{/gist_id}", "starred_url": "https://api.github.com/users/Keri753951/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Keri753951/subscriptions", "organizations_url": "https://api.github.com/users/Keri753951/orgs", "repos_url": "https://api.github.com/users/Keri753951/repos", "events_url": "https://api.github.com/users/Keri753951/events{/privacy}", "received_events_url": "https://api.github.com/users/Keri753951/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-30T06:19:51Z", "updated_at": "2020-06-06T10:11:12Z", "closed_at": "2020-06-06T10:11:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Could someone share how to use external functions in windows?\r\n\r\nHere is the path setup in linux\r\n$ PYTHONPATH=$PYTHONPATH:tests py.test tests/\r\n\r\nHow to set the path in windows?\r\nIf the test.py and test.tavern.yaml are placed in D:\\A\\B folder", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/471", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/471/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/471/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/471/events", "html_url": "https://github.com/taverntesting/tavern/issues/471", "id": 513785139, "node_id": "MDU6SXNzdWU1MTM3ODUxMzk=", "number": 471, "title": "calling external functions which are defined in class", "user": {"login": "SandeepNV", "id": 51774057, "node_id": "MDQ6VXNlcjUxNzc0MDU3", "avatar_url": "https://avatars1.githubusercontent.com/u/51774057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandeepNV", "html_url": "https://github.com/SandeepNV", "followers_url": "https://api.github.com/users/SandeepNV/followers", "following_url": "https://api.github.com/users/SandeepNV/following{/other_user}", "gists_url": "https://api.github.com/users/SandeepNV/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandeepNV/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandeepNV/subscriptions", "organizations_url": "https://api.github.com/users/SandeepNV/orgs", "repos_url": "https://api.github.com/users/SandeepNV/repos", "events_url": "https://api.github.com/users/SandeepNV/events{/privacy}", "received_events_url": "https://api.github.com/users/SandeepNV/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-29T09:15:10Z", "updated_at": "2019-11-20T11:38:41Z", "closed_at": "2019-11-20T11:38:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have some external functions in a .py file which are defined under a class. I would like to use them in tavern module.\r\n\r\nCan some one point me the right sytax of using $ext in a way that the method should get called along with its class name.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/470", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/470/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/470/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/470/events", "html_url": "https://github.com/taverntesting/tavern/issues/470", "id": 513729482, "node_id": "MDU6SXNzdWU1MTM3Mjk0ODI=", "number": 470, "title": "Test throws JMESError when JMES path returns empty list or 0", "user": {"login": "cyj5230", "id": 16668258, "node_id": "MDQ6VXNlcjE2NjY4MjU4", "avatar_url": "https://avatars3.githubusercontent.com/u/16668258?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cyj5230", "html_url": "https://github.com/cyj5230", "followers_url": "https://api.github.com/users/cyj5230/followers", "following_url": "https://api.github.com/users/cyj5230/following{/other_user}", "gists_url": "https://api.github.com/users/cyj5230/gists{/gist_id}", "starred_url": "https://api.github.com/users/cyj5230/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cyj5230/subscriptions", "organizations_url": "https://api.github.com/users/cyj5230/orgs", "repos_url": "https://api.github.com/users/cyj5230/repos", "events_url": "https://api.github.com/users/cyj5230/events{/privacy}", "received_events_url": "https://api.github.com/users/cyj5230/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 737616468, "node_id": "MDU6TGFiZWw3Mzc2MTY0Njg=", "url": "https://api.github.com/repos/taverntesting/tavern/labels/Type:%20Bug", "name": "Type: Bug", "color": "bc1a53", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-29T07:00:43Z", "updated_at": "2019-11-20T11:42:52Z", "closed_at": "2019-11-20T11:42:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am upgrading tavern from 0.26.5 to 0.30.3, and found some tests failed after upgrade.\r\nThe new version will throw error whenever the JMES path returns [] or 0\r\n`tavern.util.exceptions.JMESError: JMES path xxx not found in response`\r\n\r\nfor example, these content validations will never pass:\r\n```\r\n//function: tavern.testutils.helpers:validate_content\r\n\r\n//after deleting an organization\r\n- jmespath: \"data[?id=='{organization_data_test_create.id:d}']\" \r\n  operator: \"equals\"\r\n  expected: []\r\n\r\n- jmespath: data.pageable.pageNumber\r\n  operator: \"equals\"\r\n  expected: 0\r\n```\r\nAs these validations are necessary, would you please help to change the JMES path checking logic?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/468", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/468/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/468/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/468/events", "html_url": "https://github.com/taverntesting/tavern/issues/468", "id": 511287673, "node_id": "MDU6SXNzdWU1MTEyODc2NzM=", "number": 468, "title": "Enable skipping stages in a multi-stage test", "user": {"login": "theonlyx", "id": 55753738, "node_id": "MDQ6VXNlcjU1NzUzNzM4", "avatar_url": "https://avatars2.githubusercontent.com/u/55753738?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theonlyx", "html_url": "https://github.com/theonlyx", "followers_url": "https://api.github.com/users/theonlyx/followers", "following_url": "https://api.github.com/users/theonlyx/following{/other_user}", "gists_url": "https://api.github.com/users/theonlyx/gists{/gist_id}", "starred_url": "https://api.github.com/users/theonlyx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theonlyx/subscriptions", "organizations_url": "https://api.github.com/users/theonlyx/orgs", "repos_url": "https://api.github.com/users/theonlyx/repos", "events_url": "https://api.github.com/users/theonlyx/events{/privacy}", "received_events_url": "https://api.github.com/users/theonlyx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-23T12:25:10Z", "updated_at": "2019-11-19T18:13:32Z", "closed_at": "2019-11-19T18:13:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Looks like the `skip` mark is used to skip the entire stage. Ideally, it is better to be able to skip some steps in the stages. \r\n\r\nOn way I can see to accomplish this is to  support a new field such as:\r\n`ignore` and check that step around \r\nhttps://github.com/taverntesting/tavern/blob/master/tavern/core.py#L26\r\n\r\nIf the field is defined and set to true, don't append the step in the `test_stages`. Thoughts?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/467", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/467/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/467/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/467/events", "html_url": "https://github.com/taverntesting/tavern/issues/467", "id": 510932529, "node_id": "MDU6SXNzdWU1MTA5MzI1Mjk=", "number": 467, "title": "Does Tavern Support Kerberos Authentication??", "user": {"login": "scant22", "id": 56896005, "node_id": "MDQ6VXNlcjU2ODk2MDA1", "avatar_url": "https://avatars3.githubusercontent.com/u/56896005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scant22", "html_url": "https://github.com/scant22", "followers_url": "https://api.github.com/users/scant22/followers", "following_url": "https://api.github.com/users/scant22/following{/other_user}", "gists_url": "https://api.github.com/users/scant22/gists{/gist_id}", "starred_url": "https://api.github.com/users/scant22/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scant22/subscriptions", "organizations_url": "https://api.github.com/users/scant22/orgs", "repos_url": "https://api.github.com/users/scant22/repos", "events_url": "https://api.github.com/users/scant22/events{/privacy}", "received_events_url": "https://api.github.com/users/scant22/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-22T21:35:54Z", "updated_at": "2020-01-25T15:51:57Z", "closed_at": "2020-01-25T15:51:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been trying to perform a get request with kerberos authentication to pass along a lpta token from the login stage.  Currently, i'm able to get access to the token through python (as shown below) but am unsure of how I can pass it along this to tavern. \r\n\r\n<img width=\"1015\" alt=\"Screen Shot 2019-10-22 at 5 34 09 PM\" src=\"https://user-images.githubusercontent.com/56896005/67335713-32059380-f4f2-11e9-86dd-6de41265e087.png\">\r\n\r\nIs it's possible to do the same thing within tavern? Can I simply copy and paste over the token returned from my python request into my tavern yaml script under a cookie: heading? Or, can I run an external python function within tavern to return the token that way. \r\n\r\nIs kerberos authentication supported at all with tavern? Any and all help would be greatly appreciated.\r\n\r\nThanks!\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/466", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/466/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/466/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/466/events", "html_url": "https://github.com/taverntesting/tavern/issues/466", "id": 508149981, "node_id": "MDU6SXNzdWU1MDgxNDk5ODE=", "number": 466, "title": "Can't compare JSON objects in an !include file to response body", "user": {"login": "kenneth-go-lp", "id": 43049465, "node_id": "MDQ6VXNlcjQzMDQ5NDY1", "avatar_url": "https://avatars3.githubusercontent.com/u/43049465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenneth-go-lp", "html_url": "https://github.com/kenneth-go-lp", "followers_url": "https://api.github.com/users/kenneth-go-lp/followers", "following_url": "https://api.github.com/users/kenneth-go-lp/following{/other_user}", "gists_url": "https://api.github.com/users/kenneth-go-lp/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenneth-go-lp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenneth-go-lp/subscriptions", "organizations_url": "https://api.github.com/users/kenneth-go-lp/orgs", "repos_url": "https://api.github.com/users/kenneth-go-lp/repos", "events_url": "https://api.github.com/users/kenneth-go-lp/events{/privacy}", "received_events_url": "https://api.github.com/users/kenneth-go-lp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-16T23:24:12Z", "updated_at": "2019-11-19T18:11:48Z", "closed_at": "2019-11-19T18:11:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm maintaining a list of expected results in a separate .yaml file I !include globally for all my tests and compare them to the actual response body after all test steps are done. An example is:\r\n```\r\n# In test_sign_in.tavern.yaml\r\nstages:\r\n  - name: Sign in with invalid credentials\r\n    request:\r\n      url: \"{environment.host:s}{api_endpoints.auth:s}\"\r\n      method: POST\r\n      json:\r\n        email: \"{environment.invalid_test_email:s}\"\r\n        password: \"{environment.invalid_test_password:s}\"\r\n    response:\r\n      status_code: 401\r\n      body: \"{error_messages.invalid_credentials}\"\r\n```\r\n\r\n```\r\n# In common.yaml (file I !include globally)\r\nerror_messages:\r\n  invalid_credentials: \r\n    fields: null\r\n    message: \"Authentication failed\"\r\n```\r\n\r\nUsing this will give me:\r\n`E           - Value mismatch in body: Type of returned data was different than expected (expected = '{'fields': None, 'message': 'Authentication failed'}' (type = <class 'tavern.util.dict_util.format_keys.<locals>.InnerFormattedString'>), actual = '{'message': 'Authentication failed', 'fields': None}' (type = <class 'dict'>))`\r\n\r\nBut writing the expected values into the test manually works:\r\n```\r\n# In test_sign_in.tavern.yaml\r\nstages:\r\n  - name: Sign in with invalid credentials\r\n    request:\r\n      url: \"{environment.host:s}{api_endpoints.auth:s}\"\r\n      method: POST\r\n      json:\r\n        email: \"{environment.invalid_test_email:s}\"\r\n        password: \"{environment.invalid_test_password:s}\"\r\n    response:\r\n      status_code: 401\r\n      body:\r\n        fields: null\r\n        message: \"Authentication failed\" \r\n```\r\nIs there any way I can take JSON objects from external sources and use them to compare things (like the response of a body) within my test?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/465", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/465/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/465/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/465/events", "html_url": "https://github.com/taverntesting/tavern/issues/465", "id": 508084562, "node_id": "MDU6SXNzdWU1MDgwODQ1NjI=", "number": 465, "title": "Unable to upload text file with tavern, but curl works fine", "user": {"login": "yamlCase", "id": 27447701, "node_id": "MDQ6VXNlcjI3NDQ3NzAx", "avatar_url": "https://avatars1.githubusercontent.com/u/27447701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yamlCase", "html_url": "https://github.com/yamlCase", "followers_url": "https://api.github.com/users/yamlCase/followers", "following_url": "https://api.github.com/users/yamlCase/following{/other_user}", "gists_url": "https://api.github.com/users/yamlCase/gists{/gist_id}", "starred_url": "https://api.github.com/users/yamlCase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yamlCase/subscriptions", "organizations_url": "https://api.github.com/users/yamlCase/orgs", "repos_url": "https://api.github.com/users/yamlCase/repos", "events_url": "https://api.github.com/users/yamlCase/events{/privacy}", "received_events_url": "https://api.github.com/users/yamlCase/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-16T20:35:20Z", "updated_at": "2019-11-19T18:04:30Z", "closed_at": "2019-11-19T18:04:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm attempting to upload a simple text file containing some json.  using curl, the file is uploaded fine and I get my 201 status code:\r\n`curl -uadmin:password -X PUT http://webapp.example.com/api/users/user -T user.json`\r\n\r\nWhen I try what I think is the equivalent command in tavern, I get the following error:\r\n```\r\nStatus code was 415, expected 200:\r\n           {\"errors\": [{\"status\": 415, \"message\": \"Unsupported Media Type\"}]}\r\n```\r\n\r\nHere's my tavern-ci yaml block:\r\n```\r\nstage: \r\n  - name: Create user\r\n    request:\r\n      method: PUT\r\n      url: \"http://webapp.example.com/api/users/user\"\r\n      auth:\r\n        - \"admin\"\r\n        - \"password\"    \r\n      files:\r\n        file: \"user.json\"\r\n    response:\r\n      status_code: 201\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/464", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/464/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/464/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/464/events", "html_url": "https://github.com/taverntesting/tavern/issues/464", "id": 507544255, "node_id": "MDU6SXNzdWU1MDc1NDQyNTU=", "number": 464, "title": "Request: simplify sending full response to stdout", "user": {"login": "yamlCase", "id": 27447701, "node_id": "MDQ6VXNlcjI3NDQ3NzAx", "avatar_url": "https://avatars1.githubusercontent.com/u/27447701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yamlCase", "html_url": "https://github.com/yamlCase", "followers_url": "https://api.github.com/users/yamlCase/followers", "following_url": "https://api.github.com/users/yamlCase/following{/other_user}", "gists_url": "https://api.github.com/users/yamlCase/gists{/gist_id}", "starred_url": "https://api.github.com/users/yamlCase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yamlCase/subscriptions", "organizations_url": "https://api.github.com/users/yamlCase/orgs", "repos_url": "https://api.github.com/users/yamlCase/repos", "events_url": "https://api.github.com/users/yamlCase/events{/privacy}", "received_events_url": "https://api.github.com/users/yamlCase/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-16T00:13:22Z", "updated_at": "2019-10-16T00:24:01Z", "closed_at": "2019-10-16T00:22:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "There needs to be a simple way to output the response to stdout, especially when troubleshooting a fail or validating that a pass isn't a false positive.  Perhaps a switch `--debug` or something.  As a new user to tavern and pytest, the documentation is above my head for writing my own debugging.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/463", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/463/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/463/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/463/events", "html_url": "https://github.com/taverntesting/tavern/issues/463", "id": 507161780, "node_id": "MDU6SXNzdWU1MDcxNjE3ODA=", "number": 463, "title": "How do I capture the return value from an external python function ", "user": {"login": "truptikant", "id": 53465912, "node_id": "MDQ6VXNlcjUzNDY1OTEy", "avatar_url": "https://avatars3.githubusercontent.com/u/53465912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/truptikant", "html_url": "https://github.com/truptikant", "followers_url": "https://api.github.com/users/truptikant/followers", "following_url": "https://api.github.com/users/truptikant/following{/other_user}", "gists_url": "https://api.github.com/users/truptikant/gists{/gist_id}", "starred_url": "https://api.github.com/users/truptikant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/truptikant/subscriptions", "organizations_url": "https://api.github.com/users/truptikant/orgs", "repos_url": "https://api.github.com/users/truptikant/repos", "events_url": "https://api.github.com/users/truptikant/events{/privacy}", "received_events_url": "https://api.github.com/users/truptikant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-15T10:44:03Z", "updated_at": "2020-01-25T15:52:16Z", "closed_at": "2020-01-25T15:52:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I use an external python function, I am able to pass the argument. But how do I capture the return value from the external function", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/461", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/461/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/461/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/461/events", "html_url": "https://github.com/taverntesting/tavern/issues/461", "id": 505107900, "node_id": "MDU6SXNzdWU1MDUxMDc5MDA=", "number": 461, "title": "YML common stage fragments", "user": {"login": "anishmac99", "id": 4485358, "node_id": "MDQ6VXNlcjQ0ODUzNTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4485358?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anishmac99", "html_url": "https://github.com/anishmac99", "followers_url": "https://api.github.com/users/anishmac99/followers", "following_url": "https://api.github.com/users/anishmac99/following{/other_user}", "gists_url": "https://api.github.com/users/anishmac99/gists{/gist_id}", "starred_url": "https://api.github.com/users/anishmac99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anishmac99/subscriptions", "organizations_url": "https://api.github.com/users/anishmac99/orgs", "repos_url": "https://api.github.com/users/anishmac99/repos", "events_url": "https://api.github.com/users/anishmac99/events{/privacy}", "received_events_url": "https://api.github.com/users/anishmac99/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-10T08:09:45Z", "updated_at": "2019-11-19T17:58:39Z", "closed_at": "2019-11-19T17:58:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to reuse a stage yml in multiple files . I am getting an error if I want to add a key in include common.yml and reuse in multiple files.   \r\n\r\nBasically I want request and response code in a common.yml file reuse in multiple files.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/458", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/458/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/458/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/458/events", "html_url": "https://github.com/taverntesting/tavern/issues/458", "id": 504604373, "node_id": "MDU6SXNzdWU1MDQ2MDQzNzM=", "number": 458, "title": "can't post files using aws pre-signed url", "user": {"login": "rshad", "id": 19154337, "node_id": "MDQ6VXNlcjE5MTU0MzM3", "avatar_url": "https://avatars2.githubusercontent.com/u/19154337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rshad", "html_url": "https://github.com/rshad", "followers_url": "https://api.github.com/users/rshad/followers", "following_url": "https://api.github.com/users/rshad/following{/other_user}", "gists_url": "https://api.github.com/users/rshad/gists{/gist_id}", "starred_url": "https://api.github.com/users/rshad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rshad/subscriptions", "organizations_url": "https://api.github.com/users/rshad/orgs", "repos_url": "https://api.github.com/users/rshad/repos", "events_url": "https://api.github.com/users/rshad/events{/privacy}", "received_events_url": "https://api.github.com/users/rshad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-09T12:00:19Z", "updated_at": "2019-10-09T14:44:15Z", "closed_at": "2019-10-09T14:44:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all!\r\n\r\nI'm new to Tavern and I'm implementing tests for an AWS API Gateway application.\r\n\r\n### Case Description and Normal Approach\r\nIn my case, I use pre-signed URLs to directly upload files to S3 bucket. A pre-signed URL is formed by the following attributes:\r\n\r\n```python\r\nurl = 'https://<bucket>.s3.amazonaws.com/' \r\n\r\nfields:\r\n  key=<filename>.zip \r\n  x-amz-algorithm=*** \r\n  x-amz-credential=***  \r\n  x-amz-date=*** \r\n  x-amz-security-token=*** \r\n  policy=*** \r\n  x-amz-signature=*** \r\n```\r\n\r\nIn a normal cURL request, this would be used as follows:\r\n\r\n```shell\r\ncurl -v \\\r\n-F key=<filename>.zip \\\r\n-F x-amz-algorithm=*** \\\r\n-F x-amz-credential=*** \\\r\n-F x-amz-date=*** \\\r\n-F x-amz-security-token=*** \\\r\n-F policy=*** \\\r\n-F x-amz-signature=*** \\\r\n-F file=@<filename>.zip \\\r\n'https://<bucket>.s3.amazonaws.com/'\r\n```\r\n\r\n### Implemented Test\r\nAs you can see, it's necessary to use the `-F` flag of `cURL` which forms a `multipart/form-data` POST request. \r\n\r\nIn `Tavern` approach, and as I read, `-F` is equivalent to `files`, so this would be as follows:\r\n\r\n```yaml\r\nstages:\r\n  - name: UPLOAD A FILE TO S3\r\n    request:\r\n      method: POST\r\n      url: \"https:/<bucket>.s3.amazonaws.com/\"\r\n      files: \r\n          key: target.zip \r\n          x-amz-algorithm: ***\r\n          x-amz-credential: *** \r\n          x-amz-date: ***\r\n          x-amz-security-token: *** \r\n          policy: *** \r\n          x-amz-signature: ***\r\n          file: '@target.zip'\r\n    response:\r\n      status_code: 204\r\n```\r\n### Error\r\nBut it's failing with the error :\r\n```\r\nError: <value of x-amz-algorithm> file not found\r\n```\r\n\r\nIt's considering the fields as files and so it fails.\r\n\r\nIs it possible to have this case implemented in `Tavern` and so my implementation is wrong somewhere, or this is not possible in `Tavern` yet?\r\n\r\nKind regards,\r\n\r\nRshad", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/457", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/457/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/457/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/457/events", "html_url": "https://github.com/taverntesting/tavern/issues/457", "id": 500377397, "node_id": "MDU6SXNzdWU1MDAzNzczOTc=", "number": 457, "title": "Nested lists with parametrize causing BadSchemaError", "user": {"login": "jsfehler", "id": 7795990, "node_id": "MDQ6VXNlcjc3OTU5OTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/7795990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsfehler", "html_url": "https://github.com/jsfehler", "followers_url": "https://api.github.com/users/jsfehler/followers", "following_url": "https://api.github.com/users/jsfehler/following{/other_user}", "gists_url": "https://api.github.com/users/jsfehler/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsfehler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsfehler/subscriptions", "organizations_url": "https://api.github.com/users/jsfehler/orgs", "repos_url": "https://api.github.com/users/jsfehler/repos", "events_url": "https://api.github.com/users/jsfehler/events{/privacy}", "received_events_url": "https://api.github.com/users/jsfehler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-30T16:11:51Z", "updated_at": "2019-11-19T17:43:58Z", "closed_at": "2019-11-19T17:43:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n```\r\nmarks:\r\n  - parametrize:\r\n      key:\r\n        - foo\r\n        - bar\r\n        - biz\r\n\r\n      vals:\r\n        -\r\n         - c93a50-16cf7cad928-44\r\n         - - c93a50-16cf7cad928-4e\r\n           - c93a50-16cf7cad928-4g\r\n         - - c93a50-16cf7cad928-4m\r\n           - c93a50-16cf7cad928-4o\r\n\r\n        -\r\n         - c93a50-16cfd24f2f7-76\r\n         - - c93a50-16cfd24f2f7-8d\r\n           - c93a50-16cfd24f2f7-8f\r\n         - - c93a50-16cfd24f2f7-b1\r\n           - c93a50-16cfd24f2f7-b3\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/456", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/456/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/456/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/456/events", "html_url": "https://github.com/taverntesting/tavern/issues/456", "id": 499327443, "node_id": "MDU6SXNzdWU0OTkzMjc0NDM=", "number": 456, "title": "Test fails", "user": {"login": "spinarr", "id": 6120424, "node_id": "MDQ6VXNlcjYxMjA0MjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/6120424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spinarr", "html_url": "https://github.com/spinarr", "followers_url": "https://api.github.com/users/spinarr/followers", "following_url": "https://api.github.com/users/spinarr/following{/other_user}", "gists_url": "https://api.github.com/users/spinarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/spinarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spinarr/subscriptions", "organizations_url": "https://api.github.com/users/spinarr/orgs", "repos_url": "https://api.github.com/users/spinarr/repos", "events_url": "https://api.github.com/users/spinarr/events{/privacy}", "received_events_url": "https://api.github.com/users/spinarr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-27T09:06:17Z", "updated_at": "2019-11-19T17:33:07Z", "closed_at": "2019-11-19T17:33:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I am having trouble with following test:\r\n\r\n```\r\nE           tavern.util.exceptions.TestFailError: Test 'sensor rswt int' failed:\r\nE           - Expected '{'mType': 'iqrfSensor_ReadSensorsWithTypes', 'data': {'msgId': 'testEmbedSensor', 'rsp': {'nAdr': 1, 'hwpId': 2050, 'rCode': 0, 'dpaVal': <tavern.util.loader.IntSentinel object at 0x0000016A22354248>, 'result': {'sensors': [{'id': 'TEMPERATURE', 'type': 1, 'name': 'Temperature', 'shortName': 'T', 'value': <tavern.util.loader.IntSentinel object at 0x0000016A223542C8>, 'unit': <tavern.util.loader.StrSentinel object at 0x0000016A22354308>, 'decimalPlaces': 4}]}}, 'raw': [{'request': <tavern.util.loader.StrSentinel object at 0x0000016A22354288>, 'requestTs': <tavern.util.loader.StrSentinel object at 0x0000016A223541C8>, 'confirmation': <tavern.util.loader.StrSentinel object at 0x0000016A22354348>, 'confirmationTs': <tavern.util.loader.StrSentinel object at 0x0000016A22354388>, 'response': <tavern.util.loader.StrSentinel object at 0x0000016A223543C8>, 'responseTs': <tavern.util.loader.StrSentinel object at 0x0000016A22354408>}], 'insId': 'iqrfgd2-default', 'statusStr': 'ok', 'status': 0}}' on topic 'Iqrf/DpaResponse' but no such message received\r\nE           - Got unexpected payload on topic 'Iqrf/DpaResponse': '{'mType': 'iqrfSensor_ReadSensorsWithTypes', 'data': {'msgId': 'testEmbedSensor', 'rsp': {'nAdr': 1, 'hwpId': 2050, 'rCode': 0, 'dpaVal': 47, 'result': {'sensors': [{'id': 'TEMPERATURE', 'type': 1, 'name': 'Temperature', 'shortName': 'T', 'value': 21.5, 'unit': '\u00b0C', 'decimalPlaces': 4}]}}, 'raw': [{'request': '01.00.5e.01.ff.ff.ff.ff.ff.ff', 'requestTs': '2019-09-27T10:58:09.017+02:00', 'confirmation': '01.00.5e.01.ff.ff.ff.af.01.08.01', 'confirmationTs': '2019-09-27T10:58:09.050+02:00', 'response': '01.00.5e.81.02.08.00.2f.01.58.01', 'responseTs': '2019-09-27T10:58:09.297+02:00'}], 'insId': 'iqrfgd2-default', 'statusStr': 'ok', 'status': 0}}' (expected \r\n'{'mType': 'iqrfSensor_ReadSensorsWithTypes', 'data': {'msgId': 'testEmbedSensor', 'rsp': {'nAdr': 1, 'hwpId': 2050, 'rCode': 0, 'dpaVal': <tavern.util.loader.IntSentinel object at 0x0000016A22354248>, 'result': {'sensors': [{'id': 'TEMPERATURE', 'type': 1, 'name': 'Temperature', 'shortName': 'T', 'value': <tavern.util.loader.IntSentinel object at 0x0000016A223542C8>, 'unit': <tavern.util.loader.StrSentinel object at 0x0000016A22354308>, 'decimalPlaces': 4}]}}, 'raw': [{'request': <tavern.util.loader.StrSentinel object at 0x0000016A22354288>, 'requestTs': <tavern.util.loader.StrSentinel object at 0x0000016A223541C8>, 'confirmation': <tavern.util.loader.StrSentinel object at 0x0000016A22354348>, 'confirmationTs': <tavern.util.loader.StrSentinel object at 0x0000016A22354388>, 'response': <tavern.util.loader.StrSentinel object at 0x0000016A223543C8>, 'responseTs': <tavern.util.loader.StrSentinel object at 0x0000016A22354408>}], 'insId': 'iqrfgd2-default', 'statusStr': 'ok', 'status': 0}}')\r\n\r\nc:\\python37\\lib\\site-packages\\tavern\\_plugins\\mqtt\\response.py:180: TestFailError\r\n--------------------------------------------------------------- Captured log call ---------------------------------------------------------------\r\nWARNING  tavern._plugins.mqtt.response:response.py:74 Got unexpected payload on topic 'Iqrf/DpaResponse': '{'mType': 'iqrfSensor_ReadSensorsWithTypes', 'data': {'msgId': 'testEmbedSensor', 'rsp': {'nAdr': 1, 'hwpId': 2050, 'rCode': 0, 'dpaVal': 47, 'result': {'sensors': [{'id': 'TEMPERATURE', 'type': 1, 'name': 'Temperature', 'shortName': 'T', 'value': 21.5, 'unit': '\u00b0C', 'decimalPlaces': 4}]}}, 'raw': [{'request': '01.00.5e.01.ff.ff.ff.ff.ff.ff', 'requestTs': '2019-09-27T10:58:09.017+02:00', 'confirmation': '01.00.5e.01.ff.ff.ff.af.01.08.01', 'confirmationTs': '2019-09-27T10:58:09.050+02:00', 'response': '01.00.5e.81.02.08.00.2f.01.58.01', 'responseTs': '2019-09-27T10:58:09.297+02:00'}], 'insId': 'iqrfgd2-default', 'statusStr': 'ok', 'status': 0}}' (expected '{'mType': 'iqrfSensor_ReadSensorsWithTypes', 'data': {'msgId': 'testEmbedSensor', 'rsp': {'nAdr': 1, 'hwpId': 2050, 'rCode': 0, 'dpaVal': <tavern.util.loader.IntSentinel object at 0x0000016A22354248>, 'result': {'sensors': [{'id': 'TEMPERATURE', 'type': 1, 'name': 'Temperature', 'shortName': 'T', 'value': <tavern.util.loader.IntSentinel object at 0x0000016A223542C8>, 'unit': <tavern.util.loader.StrSentinel object at 0x0000016A22354308>, 'decimalPlaces': 4}]}}, 'raw': [{'request': <tavern.util.loader.StrSentinel object at 0x0000016A22354288>, 'requestTs': <tavern.util.loader.StrSentinel object at 0x0000016A223541C8>, 'confirmation': <tavern.util.loader.StrSentinel object at 0x0000016A22354348>, 'confirmationTs': <tavern.util.loader.StrSentinel object at 0x0000016A22354388>, 'response': <tavern.util.loader.StrSentinel object \r\nat 0x0000016A223543C8>, 'responseTs': <tavern.util.loader.StrSentinel object at 0x0000016A22354408>}], 'insId': 'iqrfgd2-default', 'statusStr': 'ok', 'status': 0}}')\r\nERROR    tavern._plugins.mqtt.client:client.py:237 Message not received after 3 seconds\r\nERROR    tavern.response.base:base.py:53 Expected '{'mType': 'iqrfSensor_ReadSensorsWithTypes', 'data': {'msgId': 'testEmbedSensor', 'rsp': {'nAdr': 1, 'hwpId': 2050, 'rCode': 0, 'dpaVal': <tavern.util.loader.IntSentinel object at 0x0000016A22354248>, 'result': {'sensors': [{'id': 'TEMPERATURE', 'type': 1, 'name': 'Temperature', 'shortName': 'T', 'value': <tavern.util.loader.IntSentinel object at 0x0000016A223542C8>, 'unit': <tavern.util.loader.StrSentinel object at 0x0000016A22354308>, 'decimalPlaces': 4}]}}, 'raw': [{'request': <tavern.util.loader.StrSentinel object at 0x0000016A22354288>, 'requestTs': <tavern.util.loader.StrSentinel object at 0x0000016A223541C8>, 'confirmation': <tavern.util.loader.StrSentinel object \r\nat 0x0000016A22354348>, 'confirmationTs': <tavern.util.loader.StrSentinel object at 0x0000016A22354388>, 'response': <tavern.util.loader.StrSentinel object at 0x0000016A223543C8>, 'responseTs': <tavern.util.loader.StrSentinel object at 0x0000016A22354408>}], 'insId': 'iqrfgd2-default', 'statusStr': 'ok', 'status': 0}}' on topic 'Iqrf/DpaResponse' but no such message received\r\nERROR    tavern.response.base:base.py:53 Got unexpected payload on topic 'Iqrf/DpaResponse': '{'mType': 'iqrfSensor_ReadSensorsWithTypes', 'data': {'msgId': 'testEmbedSensor', 'rsp': {'nAdr': 1, 'hwpId': 2050, 'rCode': 0, 'dpaVal': 47, 'result': {'sensors': [{'id': 'TEMPERATURE', 'type': 1, \r\n'name': 'Temperature', 'shortName': 'T', 'value': 21.5, 'unit': '\u00b0C', 'decimalPlaces': 4}]}}, 'raw': [{'request': '01.00.5e.01.ff.ff.ff.ff.ff.ff', 'requestTs': '2019-09-27T10:58:09.017+02:00', 'confirmation': '01.00.5e.01.ff.ff.ff.af.01.08.01', 'confirmationTs': '2019-09-27T10:58:09.050+02:00', 'response': '01.00.5e.81.02.08.00.2f.01.58.01', 'responseTs': '2019-09-27T10:58:09.297+02:00'}], 'insId': 'iqrfgd2-default', 'statusStr': 'ok', 'status': 0}}' (expected '{'mType': 'iqrfSensor_ReadSensorsWithTypes', 'data': {'msgId': 'testEmbedSensor', 'rsp': {'nAdr': 1, 'hwpId': 2050, 'rCode': 0, 'dpaVal': <tavern.util.loader.IntSentinel object at 0x0000016A22354248>, 'result': {'sensors': [{'id': 'TEMPERATURE', 'type': 1, 'name': 'Temperature', 'shortName': 'T', 'value': <tavern.util.loader.IntSentinel object at 0x0000016A223542C8>, 'unit': <tavern.util.loader.StrSentinel \r\nobject at 0x0000016A22354308>, 'decimalPlaces': 4}]}}, 'raw': [{'request': <tavern.util.loader.StrSentinel object at 0x0000016A22354288>, 'requestTs': <tavern.util.loader.StrSentinel object at 0x0000016A223541C8>, 'confirmation': <tavern.util.loader.StrSentinel object at 0x0000016A22354348>, 'confirmationTs': <tavern.util.loader.StrSentinel object at 0x0000016A22354388>, 'response': <tavern.util.loader.StrSentinel object at 0x0000016A223543C8>, 'responseTs': <tavern.util.loader.StrSentinel object at 0x0000016A22354408>}], 'insId': 'iqrfgd2-default', 'statusStr': 'ok', 'status': 0}}')\r\n====================================================== 1 failed, 1 passed in 44.83 seconds ======================================================\r\n```\r\n\r\nI do not see any difference, why fails? Moreover, sometimes same test passes.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/455", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/455/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/455/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/455/events", "html_url": "https://github.com/taverntesting/tavern/issues/455", "id": 498194316, "node_id": "MDU6SXNzdWU0OTgxOTQzMTY=", "number": 455, "title": "incompatibility with rerunfailures plugin (and flaky plugin as well)", "user": {"login": "dmivankov", "id": 48548569, "node_id": "MDQ6VXNlcjQ4NTQ4NTY5", "avatar_url": "https://avatars0.githubusercontent.com/u/48548569?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmivankov", "html_url": "https://github.com/dmivankov", "followers_url": "https://api.github.com/users/dmivankov/followers", "following_url": "https://api.github.com/users/dmivankov/following{/other_user}", "gists_url": "https://api.github.com/users/dmivankov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmivankov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmivankov/subscriptions", "organizations_url": "https://api.github.com/users/dmivankov/orgs", "repos_url": "https://api.github.com/users/dmivankov/repos", "events_url": "https://api.github.com/users/dmivankov/events{/privacy}", "received_events_url": "https://api.github.com/users/dmivankov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-25T10:26:36Z", "updated_at": "2019-11-20T11:41:10Z", "closed_at": "2019-11-20T11:41:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "tavern 0.30.3\r\n1. Create a failing tavern test\r\n2. Use rerunfailures plugin (pytest --reruns 5)\r\n3. \"AttributeError: 'YamlItem' object has no attribute '_initrequest'\"\r\n```\r\nINTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/_pytest/main.py\", line 205, in wrap_session\r\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/_pytest/main.py\", line 249, in _main\r\nINTERNALERROR>     config.hook.pytest_runtestloop(session=session)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/manager.py\", line 92, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/manager.py\", line 86, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/_pytest/main.py\", line 270, in pytest_runtestloop\r\nINTERNALERROR>     item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/manager.py\", line 92, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/manager.py\", line 86, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pytest_rerunfailures.py\", line 176, in pytest_runtest_protocol\r\nINTERNALERROR>     reports = runtestprotocol(item, nextitem=nextitem, log=False)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/_pytest/runner.py\", line 85, in runtestprotocol\r\nINTERNALERROR>     item._initrequest()\r\nINTERNALERROR> AttributeError: 'YamlItem' object has no attribute '_initrequest'\r\n```\r\n\r\nWorkaround: add to conftest.py\r\n```python\r\nfrom tavern.testutils.pytesthook.item import YamlItem\r\nif not hasattr(YamlItem, \"_initrequest\"):\r\n    YamlItem._initrequest = YamlItem.initialise_fixture_attrs\r\n```\r\n\r\nNote: if test doesn't fail on first try there are no errors", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/454", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/454/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/454/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/454/events", "html_url": "https://github.com/taverntesting/tavern/issues/454", "id": 498058614, "node_id": "MDU6SXNzdWU0OTgwNTg2MTQ=", "number": 454, "title": "[QUESTION] How can I override variables via command line?", "user": {"login": "zhaoyi0113", "id": 3355579, "node_id": "MDQ6VXNlcjMzNTU1Nzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3355579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhaoyi0113", "html_url": "https://github.com/zhaoyi0113", "followers_url": "https://api.github.com/users/zhaoyi0113/followers", "following_url": "https://api.github.com/users/zhaoyi0113/following{/other_user}", "gists_url": "https://api.github.com/users/zhaoyi0113/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhaoyi0113/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhaoyi0113/subscriptions", "organizations_url": "https://api.github.com/users/zhaoyi0113/orgs", "repos_url": "https://api.github.com/users/zhaoyi0113/repos", "events_url": "https://api.github.com/users/zhaoyi0113/events{/privacy}", "received_events_url": "https://api.github.com/users/zhaoyi0113/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-25T05:36:16Z", "updated_at": "2019-11-19T14:08:39Z", "closed_at": "2019-11-19T14:08:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have `tavern` test which uses a common variable for base url.\r\n\r\ncommon.yaml:\r\n```\r\nname: Common test information\r\ndescription: Common data used by test cases\r\n\r\nvariables:\r\n  url: http://localhost:8080\r\n```\r\n\r\nIn each test suit file, \r\n\r\n```\r\ntest_name: Test services API Health check\r\n\r\nincludes:\r\n  - !include common.yaml\r\n\r\nstages:\r\n  - name: Make sure this service is healthy\r\n    request:\r\n      url: \"{url:s}/health\"\r\n      method: GET\r\n    response:\r\n      status_code: 200\r\n```\r\n\r\nit works fine on local but I want to run the same test against different base url `http://localhost:8080` on my CI server. How can I do that? Can I override it via command line?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/453", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/453/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/453/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/453/events", "html_url": "https://github.com/taverntesting/tavern/issues/453", "id": 497859533, "node_id": "MDU6SXNzdWU0OTc4NTk1MzM=", "number": 453, "title": "[Question] How can allow my tests to have access to a dictionary of config variables?", "user": {"login": "mccasey", "id": 10383125, "node_id": "MDQ6VXNlcjEwMzgzMTI1", "avatar_url": "https://avatars0.githubusercontent.com/u/10383125?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mccasey", "html_url": "https://github.com/mccasey", "followers_url": "https://api.github.com/users/mccasey/followers", "following_url": "https://api.github.com/users/mccasey/following{/other_user}", "gists_url": "https://api.github.com/users/mccasey/gists{/gist_id}", "starred_url": "https://api.github.com/users/mccasey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mccasey/subscriptions", "organizations_url": "https://api.github.com/users/mccasey/orgs", "repos_url": "https://api.github.com/users/mccasey/repos", "events_url": "https://api.github.com/users/mccasey/events{/privacy}", "received_events_url": "https://api.github.com/users/mccasey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-24T18:42:06Z", "updated_at": "2019-11-19T14:06:39Z", "closed_at": "2019-11-19T14:06:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to pass a dictionary returned from a private library that generates a dictionary of variables based on the env. Which contain a bunch of base urls and other stuff for a number of APIs I would like to test.\r\n\r\nThe tavern documentation allows for including a yaml file for variables to use in your tests, but is there a ways to just pass a dictionary of variables to tavern for my tests to have access to without having to dump it in a yaml file?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/452", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/452/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/452/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/452/events", "html_url": "https://github.com/taverntesting/tavern/issues/452", "id": 497002995, "node_id": "MDU6SXNzdWU0OTcwMDI5OTU=", "number": 452, "title": "How to test an API which requires Public key id and a pem file for authorization", "user": {"login": "anuragc1729", "id": 24609616, "node_id": "MDQ6VXNlcjI0NjA5NjE2", "avatar_url": "https://avatars2.githubusercontent.com/u/24609616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anuragc1729", "html_url": "https://github.com/anuragc1729", "followers_url": "https://api.github.com/users/anuragc1729/followers", "following_url": "https://api.github.com/users/anuragc1729/following{/other_user}", "gists_url": "https://api.github.com/users/anuragc1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/anuragc1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anuragc1729/subscriptions", "organizations_url": "https://api.github.com/users/anuragc1729/orgs", "repos_url": "https://api.github.com/users/anuragc1729/repos", "events_url": "https://api.github.com/users/anuragc1729/events{/privacy}", "received_events_url": "https://api.github.com/users/anuragc1729/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-09-23T10:00:46Z", "updated_at": "2019-12-03T11:29:26Z", "closed_at": "2019-12-03T11:29:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to test an api using tavern framework. The authorization required to test the api when using python code is an api key id and a pem file (which consists of the private key) . Both of these are used to encrypt the request, and the public api key is sent in the header.\r\n\r\nI have tried using the 'cert' tag , along with the 'Auth' tag, but the test always fails as the response from the application is : \r\n` {\"error\": {\"status_code\": 401, \"status\": \"Unauthorized\"}} ` , instead of 200 OK.\r\n\r\nThe yaml file is included below.\r\n\r\nIs there a mistake in the yaml file ? And are there any other ways in tavern with which i can authorize the request using the pem file and api key ? \r\n\r\nEdit : Attaching the yaml file for the correct indentation\r\n\r\n<img width=\"557\" alt=\"tavern_file\" src=\"https://user-images.githubusercontent.com/24609616/65417837-a75d4600-de18-11e9-82dc-4adccc74f238.png\">\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/451", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/451/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/451/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/451/events", "html_url": "https://github.com/taverntesting/tavern/issues/451", "id": 496200463, "node_id": "MDU6SXNzdWU0OTYyMDA0NjM=", "number": 451, "title": "How to deal with square brackets in JSON payload", "user": {"login": "norbertstrzelecki", "id": 36761804, "node_id": "MDQ6VXNlcjM2NzYxODA0", "avatar_url": "https://avatars1.githubusercontent.com/u/36761804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/norbertstrzelecki", "html_url": "https://github.com/norbertstrzelecki", "followers_url": "https://api.github.com/users/norbertstrzelecki/followers", "following_url": "https://api.github.com/users/norbertstrzelecki/following{/other_user}", "gists_url": "https://api.github.com/users/norbertstrzelecki/gists{/gist_id}", "starred_url": "https://api.github.com/users/norbertstrzelecki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/norbertstrzelecki/subscriptions", "organizations_url": "https://api.github.com/users/norbertstrzelecki/orgs", "repos_url": "https://api.github.com/users/norbertstrzelecki/repos", "events_url": "https://api.github.com/users/norbertstrzelecki/events{/privacy}", "received_events_url": "https://api.github.com/users/norbertstrzelecki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-20T07:44:35Z", "updated_at": "2019-09-20T11:09:53Z", "closed_at": "2019-09-20T09:22:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I try to figure out how to send JSON data that contains square brackets in other way than sending it as pure JSON format. Something like this:\r\n\r\n```json\r\n\"key\": [\r\n          {\r\n            \"subkey1\": 42.4242,\r\n            \"subkey2\": \"value\"\r\n          }     \r\n        ]\r\n```\r\n\r\nThe below format obviously doesn't work:\r\n```\r\njson:\r\n    key:\r\n        subkey1: !anything\r\n        subkey2: value\r\n```\r\n\r\nIf it can't be done, so is there any way to put that dynamic value in the pure JSON format above just to check if subkey exists? I mean like using `!anything` in yaml format.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/450", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/450/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/450/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/450/events", "html_url": "https://github.com/taverntesting/tavern/issues/450", "id": 493871986, "node_id": "MDU6SXNzdWU0OTM4NzE5ODY=", "number": 450, "title": "[Question] Is there possibility to share saved part of response from test with another test (not only stage)?", "user": {"login": "zlotedziecie", "id": 47825986, "node_id": "MDQ6VXNlcjQ3ODI1OTg2", "avatar_url": "https://avatars0.githubusercontent.com/u/47825986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zlotedziecie", "html_url": "https://github.com/zlotedziecie", "followers_url": "https://api.github.com/users/zlotedziecie/followers", "following_url": "https://api.github.com/users/zlotedziecie/following{/other_user}", "gists_url": "https://api.github.com/users/zlotedziecie/gists{/gist_id}", "starred_url": "https://api.github.com/users/zlotedziecie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zlotedziecie/subscriptions", "organizations_url": "https://api.github.com/users/zlotedziecie/orgs", "repos_url": "https://api.github.com/users/zlotedziecie/repos", "events_url": "https://api.github.com/users/zlotedziecie/events{/privacy}", "received_events_url": "https://api.github.com/users/zlotedziecie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-16T06:38:06Z", "updated_at": "2019-11-19T13:57:20Z", "closed_at": "2019-11-19T13:57:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/449", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/449/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/449/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/449/events", "html_url": "https://github.com/taverntesting/tavern/issues/449", "id": 493782768, "node_id": "MDU6SXNzdWU0OTM3ODI3Njg=", "number": 449, "title": "[question]: how to add a delay or sleep between two stages?", "user": {"login": "tommyjcarpenter", "id": 9419125, "node_id": "MDQ6VXNlcjk0MTkxMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9419125?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommyjcarpenter", "html_url": "https://github.com/tommyjcarpenter", "followers_url": "https://api.github.com/users/tommyjcarpenter/followers", "following_url": "https://api.github.com/users/tommyjcarpenter/following{/other_user}", "gists_url": "https://api.github.com/users/tommyjcarpenter/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommyjcarpenter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommyjcarpenter/subscriptions", "organizations_url": "https://api.github.com/users/tommyjcarpenter/orgs", "repos_url": "https://api.github.com/users/tommyjcarpenter/repos", "events_url": "https://api.github.com/users/tommyjcarpenter/events{/privacy}", "received_events_url": "https://api.github.com/users/tommyjcarpenter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-15T20:29:17Z", "updated_at": "2019-09-17T13:57:57Z", "closed_at": "2019-09-17T13:57:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I have an API endpoint that takes a few seconds to do something, how do I hit that, add a sleep/delay, then perform another test? currently I have these both in a stages list, just want to add a delay between them.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/448", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/448/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/448/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/448/events", "html_url": "https://github.com/taverntesting/tavern/issues/448", "id": 493510912, "node_id": "MDU6SXNzdWU0OTM1MTA5MTI=", "number": 448, "title": "JSON formatting in form-data", "user": {"login": "karimi", "id": 2769101, "node_id": "MDQ6VXNlcjI3NjkxMDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/2769101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karimi", "html_url": "https://github.com/karimi", "followers_url": "https://api.github.com/users/karimi/followers", "following_url": "https://api.github.com/users/karimi/following{/other_user}", "gists_url": "https://api.github.com/users/karimi/gists{/gist_id}", "starred_url": "https://api.github.com/users/karimi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karimi/subscriptions", "organizations_url": "https://api.github.com/users/karimi/orgs", "repos_url": "https://api.github.com/users/karimi/repos", "events_url": "https://api.github.com/users/karimi/events{/privacy}", "received_events_url": "https://api.github.com/users/karimi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-13T20:48:27Z", "updated_at": "2019-11-19T13:51:55Z", "closed_at": "2019-11-19T13:51:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running into an issue with character escaping when using JSON in a multipart post request data field. I prefer this json to be kept in an external file but even it's giving me issues even in the body of test. \r\n```\r\ndata:\r\n        metadata: {\"name\": \"Mo\", \"age\":115}\r\n```\r\nAbove code escapes the curly braces resulting in two parameters in the request, `name=Mo` and `age=115`. \r\nUsing `!raw` doesn't fix this issue and gives following error: \r\n```yaml.constructor.ConstructorError: expected a scalar node, but found mapping```\r\n\r\nThe only way I could fix this was to wrap the whole json in `' '` and use !raw (This turns the json into a sting, but for my purposes it's fine since I'm parsing it in my application):\r\n```\r\ndata:\r\n        metadata: !raw '{\"name\": \"Mo\", \"age\":115}'\r\n```\r\nNow trying to achieve same ting with an external json, seems impossible because I suppose it's not allowed to used multiple ! notations back to back?\r\n\r\nFollowing code results in error:\r\n```\r\ndata:\r\n        metadata: !raw !str !include metadata.json\r\n```\r\nError:\r\n```\r\nyaml.parser.ParserError: while parsing a block mapping\r\nexpected <block end>, but found '<tag>'\r\n```\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/447", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/447/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/447/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/447/events", "html_url": "https://github.com/taverntesting/tavern/issues/447", "id": 491707622, "node_id": "MDU6SXNzdWU0OTE3MDc2MjI=", "number": 447, "title": "run function docstring vs documentation", "user": {"login": "bobhaffner", "id": 8531623, "node_id": "MDQ6VXNlcjg1MzE2MjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/8531623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobhaffner", "html_url": "https://github.com/bobhaffner", "followers_url": "https://api.github.com/users/bobhaffner/followers", "following_url": "https://api.github.com/users/bobhaffner/following{/other_user}", "gists_url": "https://api.github.com/users/bobhaffner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobhaffner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobhaffner/subscriptions", "organizations_url": "https://api.github.com/users/bobhaffner/orgs", "repos_url": "https://api.github.com/users/bobhaffner/repos", "events_url": "https://api.github.com/users/bobhaffner/events{/privacy}", "received_events_url": "https://api.github.com/users/bobhaffner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-10T14:25:14Z", "updated_at": "2019-09-14T17:31:43Z", "closed_at": "2019-09-14T17:31:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nThank you so much for this wonderful tool.  \r\n\r\nI noticed an inconsistency between the run() docstring and the docs.  The docs appear to be correct based on what I've seen.\r\n\r\nFrom the [docstring](https://github.com/taverntesting/tavern/blob/238f6bd1ee65cf0d9ee7f3e590c9f4da0c0b6947/tavern/core.py#L347) \r\n\r\n```\r\nReturns:\r\n        bool: False if there were test failures, True otherwise\r\n```\r\n\r\nFrom the [docs](https://tavern.readthedocs.io/en/latest/basics.html#using-the-run-function)\r\n\r\n> At the time of writing, this means it will return a 0 if all tests are successful, and a nonzero result if one or more tests failed (or there was some other error while running or collecting the tests).\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/442", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/442/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/442/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/442/events", "html_url": "https://github.com/taverntesting/tavern/issues/442", "id": 490646631, "node_id": "MDU6SXNzdWU0OTA2NDY2MzE=", "number": 442, "title": "fix flaky mqtt tests in travis", "user": {"login": "michaelboulton", "id": 3809868, "node_id": "MDQ6VXNlcjM4MDk4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3809868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelboulton", "html_url": "https://github.com/michaelboulton", "followers_url": "https://api.github.com/users/michaelboulton/followers", "following_url": "https://api.github.com/users/michaelboulton/following{/other_user}", "gists_url": "https://api.github.com/users/michaelboulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelboulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelboulton/subscriptions", "organizations_url": "https://api.github.com/users/michaelboulton/orgs", "repos_url": "https://api.github.com/users/michaelboulton/repos", "events_url": "https://api.github.com/users/michaelboulton/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelboulton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 892814897, "node_id": "MDU6TGFiZWw4OTI4MTQ4OTc=", "url": "https://api.github.com/repos/taverntesting/tavern/labels/Type:%20Maintenance", "name": "Type: Maintenance", "color": "bfdadc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-07T15:15:40Z", "updated_at": "2019-12-09T13:54:08Z", "closed_at": "2019-12-09T13:54:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Sometimes the MQTT test randomly fail", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/439", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/439/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/439/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/439/events", "html_url": "https://github.com/taverntesting/tavern/issues/439", "id": 490643380, "node_id": "MDU6SXNzdWU0OTA2NDMzODA=", "number": 439, "title": "Add isort", "user": {"login": "michaelboulton", "id": 3809868, "node_id": "MDQ6VXNlcjM4MDk4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3809868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelboulton", "html_url": "https://github.com/michaelboulton", "followers_url": "https://api.github.com/users/michaelboulton/followers", "following_url": "https://api.github.com/users/michaelboulton/following{/other_user}", "gists_url": "https://api.github.com/users/michaelboulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelboulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelboulton/subscriptions", "organizations_url": "https://api.github.com/users/michaelboulton/orgs", "repos_url": "https://api.github.com/users/michaelboulton/repos", "events_url": "https://api.github.com/users/michaelboulton/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelboulton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 892814897, "node_id": "MDU6TGFiZWw4OTI4MTQ4OTc=", "url": "https://api.github.com/repos/taverntesting/tavern/labels/Type:%20Maintenance", "name": "Type: Maintenance", "color": "bfdadc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-07T14:45:52Z", "updated_at": "2019-11-21T16:33:29Z", "closed_at": "2019-11-21T16:33:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/437", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/437/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/437/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/437/events", "html_url": "https://github.com/taverntesting/tavern/issues/437", "id": 489071313, "node_id": "MDU6SXNzdWU0ODkwNzEzMTM=", "number": 437, "title": "How to verify One item from response body (list)?", "user": {"login": "gbhangale416", "id": 29910202, "node_id": "MDQ6VXNlcjI5OTEwMjAy", "avatar_url": "https://avatars2.githubusercontent.com/u/29910202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gbhangale416", "html_url": "https://github.com/gbhangale416", "followers_url": "https://api.github.com/users/gbhangale416/followers", "following_url": "https://api.github.com/users/gbhangale416/following{/other_user}", "gists_url": "https://api.github.com/users/gbhangale416/gists{/gist_id}", "starred_url": "https://api.github.com/users/gbhangale416/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gbhangale416/subscriptions", "organizations_url": "https://api.github.com/users/gbhangale416/orgs", "repos_url": "https://api.github.com/users/gbhangale416/repos", "events_url": "https://api.github.com/users/gbhangale416/events{/privacy}", "received_events_url": "https://api.github.com/users/gbhangale416/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-04T10:18:31Z", "updated_at": "2019-11-20T13:32:58Z", "closed_at": "2019-11-20T13:32:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Response :- \r\n{\r\n\r\n    \"post code\": \"110001\",\r\n    \"country\": \"India\",\r\n    \"country abbreviation\": \"IN\",\r\n    \"places\": [ \r\n\r\n        {\r\n            \"place name\": \"Janpath\",\r\n            \"state\": \"New Delhi\",\r\n            \"state abbreviation\": \"DL\"\r\n        },\r\n        {\r\n\r\n            \"place name\": \"Rail Bhawan\",\r\n            \"state\": \"New Delhi\",\r\n            \"state abbreviation\": \"DL\"\r\n\r\n        },\r\n        {\r\n            \"place name\": \"Connaught Place\",\r\n            \"state\": \"New Delhi\",\r\n            \"state abbreviation\": \"DL\"\r\n        },\r\n        {\r\n            \"place name\": \"Eastern Court\",\r\n            \"state\": \"New Delhi\",\r\n            \"state abbreviation\": \"DL\"\r\n        },\r\n        {\r\n            \"place name\": \"Parliament House\",\r\n            \"state\": \"New Delhi\",\r\n            \"state abbreviation\": \"DL\"\r\n        },\r\n        {\r\n            \"place name\": \"Parliament Street H O\",\r\n            \"state\": \"New Delhi\",\r\n            \"state abbreviation\": \"DL\"\r\n        },\r\n        {\r\n            \"place name\": \"Laxminarain Mandir\",\r\n            \"state\": \"New Delhi\",\r\n            \"state abbreviation\": \"DL\"\r\n        },\r\n        {\r\n            \"place name\": \"New Delhi G P O\",\r\n            \"state\": \"New Delhi\",\r\n            \"state abbreviation\": \"DL\"\r\n        },\r\n        {\r\n            \"place name\": \"Shastri Bhawan\",\r\n            \"state\": \"New Delhi\",\r\n            \"state abbreviation\": \"DL\",\r\n        }\r\n    ]\r\n}\r\n\r\nand i want to verify that last `\"place name\": \"Shastri Bhawan\"`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/436", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/436/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/436/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/436/events", "html_url": "https://github.com/taverntesting/tavern/issues/436", "id": 489032380, "node_id": "MDU6SXNzdWU0ODkwMzIzODA=", "number": 436, "title": "Integer variable doesn't work for `timeout`", "user": {"login": "zhaoyi0113", "id": 3355579, "node_id": "MDQ6VXNlcjMzNTU1Nzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3355579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhaoyi0113", "html_url": "https://github.com/zhaoyi0113", "followers_url": "https://api.github.com/users/zhaoyi0113/followers", "following_url": "https://api.github.com/users/zhaoyi0113/following{/other_user}", "gists_url": "https://api.github.com/users/zhaoyi0113/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhaoyi0113/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhaoyi0113/subscriptions", "organizations_url": "https://api.github.com/users/zhaoyi0113/orgs", "repos_url": "https://api.github.com/users/zhaoyi0113/repos", "events_url": "https://api.github.com/users/zhaoyi0113/events{/privacy}", "received_events_url": "https://api.github.com/users/zhaoyi0113/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-04T09:01:26Z", "updated_at": "2019-09-14T17:28:54Z", "closed_at": "2019-09-14T17:28:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a yaml file includes variable definition:\r\n\r\n```\r\nname: Common test information\r\ndescription: Common data used by test cases\r\n\r\nvariables:\r\n  url: http://localhost:8080/v2\r\n  timeout: 30\r\n```\r\n\r\nwhen I use it I got schema error `tavern.util.exceptions.BadSchemaError: 'timeout' must be either a float/int or a 2-tuple of floats/ints - got '{timeout:d}' (type <class 'str'>)`\r\n\r\n```\r\nstages:\r\n  - name: test\r\n    request:\r\n      url: \"{url:s}/test\"\r\n      method: GET\r\n      timeout: \"{timeout:d}\"\r\n```\r\n\r\nwhy doesn't integer work for `timeout` in the request?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/434", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/434/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/434/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/434/events", "html_url": "https://github.com/taverntesting/tavern/issues/434", "id": 488428969, "node_id": "MDU6SXNzdWU0ODg0Mjg5Njk=", "number": 434, "title": "Checking response headers", "user": {"login": "harshabugg", "id": 54667177, "node_id": "MDQ6VXNlcjU0NjY3MTc3", "avatar_url": "https://avatars2.githubusercontent.com/u/54667177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harshabugg", "html_url": "https://github.com/harshabugg", "followers_url": "https://api.github.com/users/harshabugg/followers", "following_url": "https://api.github.com/users/harshabugg/following{/other_user}", "gists_url": "https://api.github.com/users/harshabugg/gists{/gist_id}", "starred_url": "https://api.github.com/users/harshabugg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harshabugg/subscriptions", "organizations_url": "https://api.github.com/users/harshabugg/orgs", "repos_url": "https://api.github.com/users/harshabugg/repos", "events_url": "https://api.github.com/users/harshabugg/events{/privacy}", "received_events_url": "https://api.github.com/users/harshabugg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-03T07:05:47Z", "updated_at": "2019-12-03T11:29:47Z", "closed_at": "2019-12-03T11:29:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nThe following is not working for me:\r\n\r\nresponse:\r\n..headers: !anything\r\n\r\nI am also not able to log headers into a file using \"function\", the way it can be done for body:\r\n\r\nresponse:\r\n..headers:\r\n....$ext:\r\n.......function: tavern_utils:save_header\r\n\r\nIf I need to check for headers in response I have to specify each field in the header, for eg:\r\n\r\nresponse:\r\n..headers:\r\n....content-type: <some data>\r\n....date: !anything \r\n\r\netc...........\r\n\r\nHow can I check for headers in responses using !anything directive without specifying the the fields and how I use a function to dump all the response headers into a file?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/433", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/433/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/433/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/433/events", "html_url": "https://github.com/taverntesting/tavern/issues/433", "id": 488354347, "node_id": "MDU6SXNzdWU0ODgzNTQzNDc=", "number": 433, "title": "Add !anylist operator", "user": {"login": "calebreid", "id": 32081572, "node_id": "MDQ6VXNlcjMyMDgxNTcy", "avatar_url": "https://avatars0.githubusercontent.com/u/32081572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebreid", "html_url": "https://github.com/calebreid", "followers_url": "https://api.github.com/users/calebreid/followers", "following_url": "https://api.github.com/users/calebreid/following{/other_user}", "gists_url": "https://api.github.com/users/calebreid/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebreid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebreid/subscriptions", "organizations_url": "https://api.github.com/users/calebreid/orgs", "repos_url": "https://api.github.com/users/calebreid/repos", "events_url": "https://api.github.com/users/calebreid/events{/privacy}", "received_events_url": "https://api.github.com/users/calebreid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-03T01:40:40Z", "updated_at": "2019-11-25T13:53:55Z", "closed_at": "2019-11-25T13:53:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "There are cases in my testing where I want to validate that the response contains a list but I don't care what the contents of the list are.\r\n\r\nSimilar to the !anystr and !anyint operators it would be useful to have a match response that is more specific than !anything for lists.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/432", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/432/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/432/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/432/events", "html_url": "https://github.com/taverntesting/tavern/issues/432", "id": 488335406, "node_id": "MDU6SXNzdWU0ODgzMzU0MDY=", "number": 432, "title": "Unsupported JMES path for save", "user": {"login": "calebreid", "id": 32081572, "node_id": "MDQ6VXNlcjMyMDgxNTcy", "avatar_url": "https://avatars0.githubusercontent.com/u/32081572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebreid", "html_url": "https://github.com/calebreid", "followers_url": "https://api.github.com/users/calebreid/followers", "following_url": "https://api.github.com/users/calebreid/following{/other_user}", "gists_url": "https://api.github.com/users/calebreid/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebreid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebreid/subscriptions", "organizations_url": "https://api.github.com/users/calebreid/orgs", "repos_url": "https://api.github.com/users/calebreid/repos", "events_url": "https://api.github.com/users/calebreid/events{/privacy}", "received_events_url": "https://api.github.com/users/calebreid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-02T23:17:58Z", "updated_at": "2019-12-03T19:20:49Z", "closed_at": "2019-12-03T11:29:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following test case which Tavern 0.30 give a future warning about how I save data from the request:\r\n\r\n> FutureWarning: In a future version of Tavern, selecting for values to save in nested objects will have to be done as a JMES path query \r\n\r\n```\r\nstages:\r\n  - name: Get jobs from workflow\r\n    request:\r\n      url: '{base_url:s}/jobs?startIndex=1&pageSize=3'\r\n      method: GET\r\n    response:\r\n      status_code: 200\r\n      save:\r\n        body:\r\n          workflow_job_id: 0.id\r\n          workflow_job_name: 0.name\r\n```\r\n\r\nThis is the format of the JSON response\r\n\r\n```\r\n[\r\n  {\r\n    \"id\": 4422782,\r\n    \"name\": \"#000002\"\r\n  },\r\n  {\r\n    \"id\": 4422800,\r\n    \"name\": \"Test data\"\r\n  },\r\n  {\r\n    \"id\": 4422818,\r\n    \"name\": \"Job name\"\r\n  }\r\n]\r\n```\r\n\r\nSo I have tried to follow the JMES documentation to update the save statements. This is what I have come up with, however it gives a BadSchemaError when I run it. Have I made a mistake or does Tavern not support this?\r\n\r\n```\r\nstages:\r\n  - name: Get jobs from workflow\r\n    request:\r\n      url: '{base_url:s}/jobs?startIndex=1&pageSize=3'\r\n      method: GET\r\n    response:\r\n      status_code: 200\r\n      save:\r\n        body:\r\n          workflow_job_id: [0].id\r\n          workflow_job_name: [0].name\r\n```\r\n\r\nThanks for your help.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/431", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/431/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/431/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/431/events", "html_url": "https://github.com/taverntesting/tavern/issues/431", "id": 488154995, "node_id": "MDU6SXNzdWU0ODgxNTQ5OTU=", "number": 431, "title": "0.27.0+ breakes xdist if marks are present", "user": {"login": "dmivankov", "id": 48548569, "node_id": "MDQ6VXNlcjQ4NTQ4NTY5", "avatar_url": "https://avatars0.githubusercontent.com/u/48548569?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmivankov", "html_url": "https://github.com/dmivankov", "followers_url": "https://api.github.com/users/dmivankov/followers", "following_url": "https://api.github.com/users/dmivankov/following{/other_user}", "gists_url": "https://api.github.com/users/dmivankov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmivankov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmivankov/subscriptions", "organizations_url": "https://api.github.com/users/dmivankov/orgs", "repos_url": "https://api.github.com/users/dmivankov/repos", "events_url": "https://api.github.com/users/dmivankov/events{/privacy}", "received_events_url": "https://api.github.com/users/dmivankov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 892814897, "node_id": "MDU6TGFiZWw4OTI4MTQ4OTc=", "url": "https://api.github.com/repos/taverntesting/tavern/labels/Type:%20Maintenance", "name": "Type: Maintenance", "color": "bfdadc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-09-02T12:01:37Z", "updated_at": "2019-09-07T15:41:56Z", "closed_at": "2019-09-07T15:41:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Going from 0.26.5 to 0.27.0 (also tested 0.29.0, 0.30.0) makes\r\n```\r\ncat test_1.tavern.yaml \r\n---\r\n# Every test file has one or more tests...\r\ntest_name: Get some fake data from the JSON placeholder API\r\n\r\nmarks:\r\n  - a\r\n  - b\r\n\r\n# ...and each test has one or more stages (e.g. an HTTP request)\r\nstages:\r\n  - name: Make sure we have the right ID\r\n\r\n    # Define the request to be made...\r\n    request:\r\n      url: https://jsonplaceholder.typicode.com/posts/1\r\n      method: GET\r\n\r\n    # ...and the expected response code and body\r\n    response:\r\n      status_code: 200\r\n      body:\r\n        id: 1\r\n\r\npytest -n 2 test_1.tavern.yaml\r\n```\r\nfail with\r\n```\r\n==================================================================================================================== test session starts =====================================================================================================================\r\nplugins: tavern-0.27.0, forked-1.0.2, cov-2.7.1, xdist-1.29.0\r\ngw0 [1] / gw1 [1]\r\nINTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1400, in _save\r\nINTERNALERROR>     dispatch = self._dispatch[tp]\r\nINTERNALERROR> KeyError: <class 'tavern.util.dict_util.format_keys.<locals>.InnerFormattedString'>\r\nINTERNALERROR> \r\nINTERNALERROR> During handling of the above exception, another exception occurred:\r\nINTERNALERROR> \r\nINTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/_pytest/main.py\", line 205, in wrap_session\r\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/_pytest/main.py\", line 249, in _main\r\nINTERNALERROR>     config.hook.pytest_runtestloop(session=session)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/hooks.py\", line 289, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/manager.py\", line 87, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/manager.py\", line 81, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/xdist/remote.py\", line 71, in pytest_runtestloop\r\nINTERNALERROR>     self.run_one_test(torun)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/xdist/remote.py\", line 85, in run_one_test\r\nINTERNALERROR>     self.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/hooks.py\", line 289, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/manager.py\", line 87, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/manager.py\", line 81, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/_pytest/runner.py\", line 77, in pytest_runtest_protocol\r\nINTERNALERROR>     runtestprotocol(item, nextitem=nextitem)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/_pytest/runner.py\", line 86, in runtestprotocol\r\nINTERNALERROR>     rep = call_and_report(item, \"setup\", log)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/_pytest/runner.py\", line 176, in call_and_report\r\nINTERNALERROR>     hook.pytest_runtest_logreport(report=report)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/hooks.py\", line 289, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/manager.py\", line 87, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/manager.py\", line 81, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/xdist/remote.py\", line 114, in pytest_runtest_logreport\r\nINTERNALERROR>     self.sendevent(\"testreport\", data=data)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/xdist/remote.py\", line 31, in sendevent\r\nINTERNALERROR>     self.channel.send((name, kwargs))\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/execnet/gateway_base.py\", line 729, in send\r\nINTERNALERROR>     self.gateway._send(Message.CHANNEL_DATA, self.id, dumps_internal(item))\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1371, in dumps_internal\r\nINTERNALERROR>     return _Serializer().save(obj)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1389, in save\r\nINTERNALERROR>     self._save(obj)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1407, in _save\r\nINTERNALERROR>     dispatch(self, obj)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1494, in save_tuple\r\nINTERNALERROR>     self._save(item)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1407, in _save\r\nINTERNALERROR>     dispatch(self, obj)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1490, in save_dict\r\nINTERNALERROR>     self._write_setitem(key, value)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1484, in _write_setitem\r\nINTERNALERROR>     self._save(value)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1407, in _save\r\nINTERNALERROR>     dispatch(self, obj)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1490, in save_dict\r\nINTERNALERROR>     self._write_setitem(key, value)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1484, in _write_setitem\r\nINTERNALERROR>     self._save(value)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1407, in _save\r\nINTERNALERROR>     dispatch(self, obj)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1490, in save_dict\r\nINTERNALERROR>     self._write_setitem(key, value)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1483, in _write_setitem\r\nINTERNALERROR>     self._save(key)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1405, in _save\r\nINTERNALERROR>     raise DumpError(\"can't serialize {}\".format(tp))\r\nINTERNALERROR> execnet.gateway_base.DumpError: can't serialize <class 'tavern.util.dict_util.format_keys.<locals>.InnerFormattedString'>\r\nINTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/_pytest/main.py\", line 205, in wrap_session\r\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/_pytest/main.py\", line 249, in _main\r\nINTERNALERROR>     config.hook.pytest_runtestloop(session=session)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/hooks.py\", line 289, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/manager.py\", line 87, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/manager.py\", line 81, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/xdist/dsession.py\", line 115, in pytest_runtestloop\r\nINTERNALERROR>     self.loop_once()\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/xdist/dsession.py\", line 138, in loop_once\r\nINTERNALERROR>     call(**kwargs)\r\nINTERNALERROR>   File \"/home/divankov/.local/share/virtualenvs/safe-smoke-9_JLah8q/lib/python3.7/site-packages/xdist/dsession.py\", line 180, in worker_workerfinished\r\nINTERNALERROR>     assert not crashitem, (crashitem, node)\r\nINTERNALERROR> AssertionError: ('test_1.tavern.yaml::Get some fake data from the JSON placeholder API', <WorkerController gw0>)\r\nINTERNALERROR> assert not 'test_1.tavern.yaml::Get some fake data from the JSON placeholder API'\r\n```\r\nThe issue is xdist plugin wants to serialize test using execnet\r\nhttps://github.com/pytest-dev/execnet/blob/master/execnet/gateway_base.py#L1402 (has hardcoded list of supported types in form of save_\"type.__name__\")\r\nand in tavern code there's https://github.com/taverntesting/tavern/blob/918466e2f1666deb390ba9f39e84b7cc2ecb689a/tavern/util/dict_util.py#L16\r\nwhere strings are wrapped into _FormattedString to avoid double formatting\r\n- maybe setting __name__ in _FormattedString and InnerFormattedString to str/ustr can fix it\r\n- maybe tavern shouldn't be formatting marks\r\n- maybe once marks are formatted they should be made strings", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/430", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/430/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/430/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/430/events", "html_url": "https://github.com/taverntesting/tavern/issues/430", "id": 488112687, "node_id": "MDU6SXNzdWU0ODgxMTI2ODc=", "number": 430, "title": "Breaking changes in 0.29.0?", "user": {"login": "amuresia", "id": 16068752, "node_id": "MDQ6VXNlcjE2MDY4NzUy", "avatar_url": "https://avatars2.githubusercontent.com/u/16068752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amuresia", "html_url": "https://github.com/amuresia", "followers_url": "https://api.github.com/users/amuresia/followers", "following_url": "https://api.github.com/users/amuresia/following{/other_user}", "gists_url": "https://api.github.com/users/amuresia/gists{/gist_id}", "starred_url": "https://api.github.com/users/amuresia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amuresia/subscriptions", "organizations_url": "https://api.github.com/users/amuresia/orgs", "repos_url": "https://api.github.com/users/amuresia/repos", "events_url": "https://api.github.com/users/amuresia/events{/privacy}", "received_events_url": "https://api.github.com/users/amuresia/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 737616468, "node_id": "MDU6TGFiZWw3Mzc2MTY0Njg=", "url": "https://api.github.com/repos/taverntesting/tavern/labels/Type:%20Bug", "name": "Type: Bug", "color": "bc1a53", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-02T10:12:41Z", "updated_at": "2019-09-07T15:26:03Z", "closed_at": "2019-09-07T15:26:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following test case:\r\n```\r\nstages:\r\n- name: Service Status Check\r\n  max_retries: 360\r\n  request:\r\n    url: \"{myURL:s}\"\r\n    method: GET\r\n    timeout: 300\r\n    headers:\r\n      accept: application/json\r\n    auth:\r\n    - \"{username:s}\"\r\n    - \"{password:s}\"\r\n  response:\r\n    status_code: 200\r\n    body:\r\n      $ext:\r\n        function: utils.service:availability\r\n  delay_after: 10\r\n```\r\nwhich used to work perfectly fine until Friday (on version 0.28.0) but since version 0.29.0 and 0.30.0 were released late last week, my test started failing with the following error message:\r\n```\r\n10:59:15  E           tavern.util.exceptions.BadSchemaError: Unexpected keys passed to $ext: {'m', 'a', 's', 'n', '}', 'e', '{', 'u', ':', 'r'}\r\n```\r\nReverting back to 0.28.0 addresses the problem.\r\nCould you please let me know what is causing this and what is the resolution? Thank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/429", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/429/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/429/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/429/events", "html_url": "https://github.com/taverntesting/tavern/issues/429", "id": 487970377, "node_id": "MDU6SXNzdWU0ODc5NzAzNzc=", "number": 429, "title": "Files upload with @ in path", "user": {"login": "optio", "id": 1019030, "node_id": "MDQ6VXNlcjEwMTkwMzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1019030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/optio", "html_url": "https://github.com/optio", "followers_url": "https://api.github.com/users/optio/followers", "following_url": "https://api.github.com/users/optio/following{/other_user}", "gists_url": "https://api.github.com/users/optio/gists{/gist_id}", "starred_url": "https://api.github.com/users/optio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/optio/subscriptions", "organizations_url": "https://api.github.com/users/optio/orgs", "repos_url": "https://api.github.com/users/optio/repos", "events_url": "https://api.github.com/users/optio/events{/privacy}", "received_events_url": "https://api.github.com/users/optio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-02T02:53:43Z", "updated_at": "2019-09-07T14:22:16Z", "closed_at": "2019-09-07T14:22:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to POST upload a local file, it fails using tavern, while it does work using curl.\r\n\r\nSuccessful curl:\r\n```\r\ncurl -X POST \"http://localhost:1337/upload/\" -H \"accept: application/json\" -H \"Authorization: Bearer myBearerToken\" -H \"Content-Type: multipart/form-data\" -F \"files=@/path/to/test_image.png\"\r\n```\r\n\r\nFailing tavern yaml:\r\n\r\n```\r\n- name: POST Image\r\n    request:\r\n      url: \"{protocol:s}://{host:s}:{port:d}/upload/\"\r\n      method: POST\r\n      headers:\r\n        Authorization: \"bearer {myBearerToken:s}\"\r\n      files:\r\n        name: \"/path/to/test_image.png\"\r\n    response:\r\n      status_code: 200\r\n      headers:\r\n        content-type: application/json; charset=utf-8\r\n```\r\n\r\nThe only difference I notice is that the curl request requires the @ symbol ( https://curl.haxx.se/docs/manpage.html -> --data-binary )\r\nWhen not prefixing the path with @ using curl, I get the same 400 as I get when using tavern.\r\n\r\nThe api server is hosted using strapi.io.\r\nUsing tavern 0.30.0\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/427", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/427/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/427/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/427/events", "html_url": "https://github.com/taverntesting/tavern/issues/427", "id": 487568129, "node_id": "MDU6SXNzdWU0ODc1NjgxMjk=", "number": 427, "title": "Race Condition When Publishing to an MQTT Topic", "user": {"login": "KenStorey", "id": 46034453, "node_id": "MDQ6VXNlcjQ2MDM0NDUz", "avatar_url": "https://avatars3.githubusercontent.com/u/46034453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KenStorey", "html_url": "https://github.com/KenStorey", "followers_url": "https://api.github.com/users/KenStorey/followers", "following_url": "https://api.github.com/users/KenStorey/following{/other_user}", "gists_url": "https://api.github.com/users/KenStorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/KenStorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KenStorey/subscriptions", "organizations_url": "https://api.github.com/users/KenStorey/orgs", "repos_url": "https://api.github.com/users/KenStorey/repos", "events_url": "https://api.github.com/users/KenStorey/events{/privacy}", "received_events_url": "https://api.github.com/users/KenStorey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-30T16:21:44Z", "updated_at": "2019-09-07T14:18:40Z", "closed_at": "2019-09-07T14:18:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "When Tavern processes a stage it appears to\r\n1. subscribe to the mqtt_response topic\r\n2. publish to the mqtt_publish topic\r\n\r\nIn this way it ensures that the test is ready to receive the response before it publishes.\r\n\r\nHowever, there is a race condition in **tavern._plugins.mqtt.client:client.py** when subscribing to a topic which impacts this method and, in some cases, can cause a fail.\r\n\r\nProcedure \"subscribe\" calls the paho function \"subscribe\" and creates a list item, '_subscribed[x]', based on the returned 'mid' value, containing a tuple  ('topic', False) [_Lines 298-301_].\r\n\r\nThe callback procedure \"_on_subscribe\" is called on receipt of a SUBACK from the broker. Here it looks in the '_subscribed' list to match the SUBACK's 'mid'. If successful the list item is updated to ('topic', True) and 'topic' is considered subscribed [_Lines 312-315_].\r\n\r\nSubsequently, when the \"publish\" procedure is invoked the '_subscribed' list is iterated and a second list 'to_wait_for' is made of any entries not marked as True [_Line 243_]. If this list is empty the publish is made otherwise the procedure sleeps for a short while before checking again. This is repeated until a timeout ('_connect_timeout') is reached. The publish is then made regardless, with a warning message [_Lines 249-265_].\r\n\r\nConsider the following test case\r\n\r\n>paho-mqtt: *mqtt_spec\r\n>\r\n>stages:\r\n>\r\n>\\- name: Configure Simulator RAM Test to report Fail\r\n&nbsp;&nbsp;mqtt_publish:\r\n&nbsp;&nbsp;&nbsp;&nbsp;topic: dcpsim/test/config\r\n&nbsp;&nbsp;&nbsp;&nbsp;json:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ram_test: !bool false\r\n&nbsp;&nbsp;mqtt_response:\r\n&nbsp;&nbsp;&nbsp;&nbsp;topic: dcpsim/dcpsim_response\r\n &nbsp;&nbsp;&nbsp;&nbsp;json:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result_code: 0\r\n&nbsp;&nbsp;&nbsp;&nbsp;timeout: 1\r\n>\r\n>\\- name: Request RAM Test - expecting Fail\r\n&nbsp;&nbsp;mqtt_publish:\r\n&nbsp;&nbsp;&nbsp;&nbsp;topic: dcp/run_test\r\n&nbsp;&nbsp;&nbsp;&nbsp;json:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test_type: 1\r\n&nbsp;&nbsp;mqtt_response:\r\n&nbsp;&nbsp;&nbsp;&nbsp;topic: dcp/test_results\r\n&nbsp;&nbsp;&nbsp;&nbsp;json:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ram_test: !bool false\r\n&nbsp;&nbsp;timeout: 1\r\n>\r\n> \\- name: Configure Simulator RAM Test to report OK\r\n&nbsp;&nbsp;mqtt_publish:\r\n&nbsp;&nbsp;&nbsp;&nbsp;topic: dcpsim/test/config\r\n&nbsp;&nbsp;&nbsp;&nbsp;json:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ram_test: !bool true\r\n&nbsp;&nbsp;mqtt_response:\r\n&nbsp;&nbsp;&nbsp;&nbsp;topic: dcpsim/dcpsim_response\r\n&nbsp;&nbsp;&nbsp;&nbsp;json:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result_code: 0\r\n&nbsp;&nbsp;timeout: 1\r\n\r\nOn a good day this is what happens (_I changed all occurrences of logger.debug in client.py to logger.warning_)\r\n\r\n>------------------------------ Captured log call -------------------------------\r\nWARNING  tavern._plugins.mqtt.client:client.py:297 SUBSCRIBING to topic 'dcpsim/dcpsim_response'\r\nWARNING  tavern._plugins.mqtt.client:client.py:302 Subscribed to topic 'dcpsim/dcpsim_response' with mid '1'\r\nWARNING  tavern._plugins.mqtt.client:client.py:315 Successfully subscribed to 'dcpsim/dcpsim_response' with mid '1'\r\nWARNING  tavern._plugins.mqtt.client:client.py:258 Finished subcribing to all topics\r\nWARNING  tavern._plugins.mqtt.client:client.py:297 SUBSCRIBING to topic 'dcp/test_results'\r\nWARNING  tavern._plugins.mqtt.client:client.py:302 Subscribed to topic 'dcp/test_results' with mid '4'\r\nWARNING  tavern._plugins.mqtt.client:client.py:315 Successfully subscribed to 'dcp/test_results' with mid '4'\r\nWARNING  tavern._plugins.mqtt.client:client.py:258 Finished subcribing to all topics\r\nWARNING  tavern._plugins.mqtt.client:client.py:297 SUBSCRIBING to topic 'dcpsim/dcpsim_response'\r\nWARNING  tavern._plugins.mqtt.client:client.py:302 Subscribed to topic 'dcpsim/dcpsim_response' with mid '8'\r\nWARNING  tavern._plugins.mqtt.client:client.py:315 Successfully subscribed to 'dcpsim/dcpsim_response' with mid '8'\r\nWARNING  tavern._plugins.mqtt.client:client.py:258 Finished subcribing to all topics\r\n\r\nHowever, on a bad day (most days) this is what happens\r\n\r\n>------------------------------ Captured log call -------------------------------\r\nWARNING  tavern._plugins.mqtt.client:client.py:297 SUBSCRIBING to topic 'dcpsim/dcpsim_response'\r\nWARNING  tavern._plugins.mqtt.client:client.py:302 Subscribed to topic 'dcpsim/dcpsim_response' with mid '1'\r\nWARNING  tavern._plugins.mqtt.client:client.py:315 Successfully subscribed to 'dcpsim/dcpsim_response' with mid '1'\r\nWARNING  tavern._plugins.mqtt.client:client.py:258 Finished subcribing to all topics\r\nWARNING  tavern._plugins.mqtt.client:client.py:297 SUBSCRIBING to topic 'dcp/test_results'\r\nWARNING  tavern._plugins.mqtt.client:client.py:319 Got SUBACK message with mid '4', but did not recognise that mid\r\nWARNING  tavern._plugins.mqtt.client:client.py:302 Subscribed to topic 'dcp/test_results' with mid '4'\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results']' after 0.25 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results']' after 0.50 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results']' after 0.75 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results']' after 1.00 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results']' after 1.25 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results']' after 1.50 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results']' after 1.75 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results']' after 2.00 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results']' after 2.25 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results']' after 2.50 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results']' after 2.75 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results']' after 3.00 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:269 Did not finish subscribing to '%s' before publishing - going ahead anyway\r\nWARNING  tavern._plugins.mqtt.client:client.py:297 SUBSCRIBING to topic 'dcpsim/dcpsim_response'\r\nWARNING  tavern._plugins.mqtt.client:client.py:319 Got SUBACK message with mid '8', but did not recognise that mid\r\nWARNING  tavern._plugins.mqtt.client:client.py:302 Subscribed to topic 'dcpsim/dcpsim_response' with mid '8'\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results', 'dcpsim/dcpsim_response']' after 0.25 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results', 'dcpsim/dcpsim_response']' after 0.50 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results', 'dcpsim/dcpsim_response']' after 0.75 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results', 'dcpsim/dcpsim_response']' after 1.00 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results', 'dcpsim/dcpsim_response']' after 1.25 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results', 'dcpsim/dcpsim_response']' after 1.50 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results', 'dcpsim/dcpsim_response']' after 1.75 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results', 'dcpsim/dcpsim_response']' after 2.00 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results', 'dcpsim/dcpsim_response']' after 2.25 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results', 'dcpsim/dcpsim_response']' after 2.50 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results', 'dcpsim/dcpsim_response']' after 2.75 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:264 Not finished subcribing to '['dcp/test_results', 'dcpsim/dcpsim_response']' after 3.00 seconds\r\nWARNING  tavern._plugins.mqtt.client:client.py:269 Did not finish subscribing to '%s' before publishing - going ahead anyway\r\n\r\nWhat is happening here is that the SUBACK arrives following the call to paho \"subscribe\" but before the \"_subscribed[x]\" entry is created. The callback \"_on_subscribe\" then checks for the non-existent \"_subscribed[x]\" entry and logs a warning.\r\n\r\nControl then passes back to the main \"subscribe\" procedure where the \"_subscribed[x]\" entry is belatedly created with a value of ('topic', False), which is never updated, and propagates through to the check in \"publish\", where it is doomed to fail.\r\n\r\nUnfortunately, I can see no easy solution to this but it can be mitigated by setting the '_connect_timeout' to 0.5 (_0.25 isn't accepted for some reason_).\r\n\r\nI have attached the logs as they are quite difficult to read on-screen.\r\n\r\n[TestLogs.txt](https://github.com/taverntesting/tavern/files/3560714/TestLogs.txt)\r\n\r\nAs an aside, \"subscribing\" is spelt incorrectly in the \"not finished ... \" message.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/426", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/426/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/426/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/426/events", "html_url": "https://github.com/taverntesting/tavern/issues/426", "id": 486876360, "node_id": "MDU6SXNzdWU0ODY4NzYzNjA=", "number": 426, "title": "Value mismatch in body: Type of returned data was different than expected", "user": {"login": "harshabugg", "id": 54667177, "node_id": "MDQ6VXNlcjU0NjY3MTc3", "avatar_url": "https://avatars2.githubusercontent.com/u/54667177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harshabugg", "html_url": "https://github.com/harshabugg", "followers_url": "https://api.github.com/users/harshabugg/followers", "following_url": "https://api.github.com/users/harshabugg/following{/other_user}", "gists_url": "https://api.github.com/users/harshabugg/gists{/gist_id}", "starred_url": "https://api.github.com/users/harshabugg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harshabugg/subscriptions", "organizations_url": "https://api.github.com/users/harshabugg/orgs", "repos_url": "https://api.github.com/users/harshabugg/repos", "events_url": "https://api.github.com/users/harshabugg/events{/privacy}", "received_events_url": "https://api.github.com/users/harshabugg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-08-29T10:31:28Z", "updated_at": "2019-12-08T15:39:15Z", "closed_at": "2019-12-08T15:39:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI am getting the following error when running test \r\n\r\nERROR    tavern.response.base:base.py:47 Value mismatch in body: Type of returned data was different than expected (expected = .........some data here......(type = <class 'tavern.util.dict_util.format_keys.<locals>.InnerFormattedString'>), actual = ......some data here.....(type = <class 'dict'>))\r\n\r\nI am storing the response of  a request in a json file. If I use the the directive \"!include <filename.json>\" to compare the response of another request the test passes. But if I define a function under fixture which reads the same file and returns data using json.load() the test fails with the error i have described above. \r\n\r\nThe reason I am using fixtures is !include directive does not work at run time. If I have a response being logged to json file and if i want to \"include\" the file after the latest data has been logged, there is no way to achieve this. \r\n\r\nPlease help.\r\n\r\nRegards,\r\nHarsha", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taverntesting/tavern/issues/425", "repository_url": "https://api.github.com/repos/taverntesting/tavern", "labels_url": "https://api.github.com/repos/taverntesting/tavern/issues/425/labels{/name}", "comments_url": "https://api.github.com/repos/taverntesting/tavern/issues/425/comments", "events_url": "https://api.github.com/repos/taverntesting/tavern/issues/425/events", "html_url": "https://github.com/taverntesting/tavern/issues/425", "id": 485769014, "node_id": "MDU6SXNzdWU0ODU3NjkwMTQ=", "number": 425, "title": "[Question] Tavern tests used in performance testing", "user": {"login": "mrychlicka", "id": 45968324, "node_id": "MDQ6VXNlcjQ1OTY4MzI0", "avatar_url": "https://avatars2.githubusercontent.com/u/45968324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrychlicka", "html_url": "https://github.com/mrychlicka", "followers_url": "https://api.github.com/users/mrychlicka/followers", "following_url": "https://api.github.com/users/mrychlicka/following{/other_user}", "gists_url": "https://api.github.com/users/mrychlicka/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrychlicka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrychlicka/subscriptions", "organizations_url": "https://api.github.com/users/mrychlicka/orgs", "repos_url": "https://api.github.com/users/mrychlicka/repos", "events_url": "https://api.github.com/users/mrychlicka/events{/privacy}", "received_events_url": "https://api.github.com/users/mrychlicka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-27T12:06:39Z", "updated_at": "2019-08-30T16:39:08Z", "closed_at": "2019-08-30T15:19:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any possibility to use tests created with tavern in any well known performance test tool like JMeter of Locust? ", "performed_via_github_app": null, "score": 1.0}]}