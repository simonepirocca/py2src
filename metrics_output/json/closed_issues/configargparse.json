{"total_count": 84, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/183", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/183/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/183/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/183/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/183", "id": 597583220, "node_id": "MDU6SXNzdWU1OTc1ODMyMjA=", "number": 183, "title": "Config file support for arguments with no long version (e.g. subparsers)", "user": {"login": "netw0rkf10w", "id": 8569515, "node_id": "MDQ6VXNlcjg1Njk1MTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/8569515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/netw0rkf10w", "html_url": "https://github.com/netw0rkf10w", "followers_url": "https://api.github.com/users/netw0rkf10w/followers", "following_url": "https://api.github.com/users/netw0rkf10w/following{/other_user}", "gists_url": "https://api.github.com/users/netw0rkf10w/gists{/gist_id}", "starred_url": "https://api.github.com/users/netw0rkf10w/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/netw0rkf10w/subscriptions", "organizations_url": "https://api.github.com/users/netw0rkf10w/orgs", "repos_url": "https://api.github.com/users/netw0rkf10w/repos", "events_url": "https://api.github.com/users/netw0rkf10w/events{/privacy}", "received_events_url": "https://api.github.com/users/netw0rkf10w/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-09T22:11:47Z", "updated_at": "2020-04-11T15:46:13Z", "closed_at": "2020-04-11T15:46:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nThanks for making this tool freely available!\r\n\r\nIn the current version, it is really a pity that one cannot use arguments that do not have a long version (i.e. start with `--`). This completely rules out the use of subparsers.\r\n\r\nConsider the following script for example:\r\n\r\n```python\r\nimport configargparse as argparse\r\n\r\ndef main():\r\n    parser = argparse.ArgumentParser(description='Test')\r\n    parser.add('--cfg', default=None, is_config_file=True, help='training configuration file')\r\n\r\n    subparsers = parser.add_subparsers(help='Argument for dataset', dest='dataset', required=True)\r\n    toto_parser = subparsers.add_parser('toto')\r\n    toto_parser.add_argument('toto_path', help='Path to dataset.')\r\n    tata_parser = subparsers.add_parser('tata')\r\n    tata_parser.add_argument('tata_path', help='Path to dataset.')\r\n\r\n    parser.add_argument('--some-arg', type=int, default=-1, help='some other argument')\r\n\r\n    args = parser.parse_args()\r\n    print(parser.format_values())\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nIt is not possible to define the arguments `toto` or `tata` in a config file. \r\n\r\nCould you please add this feature? Thank you very much in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/181", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/181/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/181/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/181/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/181", "id": 595324847, "node_id": "MDU6SXNzdWU1OTUzMjQ4NDc=", "number": 181, "title": "Exclude config file option when writing out a config file", "user": {"login": "wvoigt", "id": 1182468, "node_id": "MDQ6VXNlcjExODI0Njg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1182468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wvoigt", "html_url": "https://github.com/wvoigt", "followers_url": "https://api.github.com/users/wvoigt/followers", "following_url": "https://api.github.com/users/wvoigt/following{/other_user}", "gists_url": "https://api.github.com/users/wvoigt/gists{/gist_id}", "starred_url": "https://api.github.com/users/wvoigt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wvoigt/subscriptions", "organizations_url": "https://api.github.com/users/wvoigt/orgs", "repos_url": "https://api.github.com/users/wvoigt/repos", "events_url": "https://api.github.com/users/wvoigt/events{/privacy}", "received_events_url": "https://api.github.com/users/wvoigt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-06T18:16:45Z", "updated_at": "2020-04-06T22:23:55Z", "closed_at": "2020-04-06T22:23:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, writing out a config file includes all the options given, including those in the config file (good) but also the command line config file option itself (not always desirable.)\r\n\r\nIf an output file is directly used as an input config file, it should no longer need the original config file option - the options from that file are already included in the written config file.\r\n\r\nI can see the logic for the way it is, but I think it would be good to have an option to not include the config file as well.  That way the the direct use of the written config file does not needlessly load in the old config again.  The options in that old config file will just all be overridden by options in the newer config file.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/179", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/179/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/179/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/179/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/179", "id": 593922920, "node_id": "MDU6SXNzdWU1OTM5MjI5MjA=", "number": 179, "title": "Bug of 1.2: AttributeError: 'NoneType' object has no attribute 'nargs'", "user": {"login": "kamo-naoyuki", "id": 19261024, "node_id": "MDQ6VXNlcjE5MjYxMDI0", "avatar_url": "https://avatars0.githubusercontent.com/u/19261024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamo-naoyuki", "html_url": "https://github.com/kamo-naoyuki", "followers_url": "https://api.github.com/users/kamo-naoyuki/followers", "following_url": "https://api.github.com/users/kamo-naoyuki/following{/other_user}", "gists_url": "https://api.github.com/users/kamo-naoyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamo-naoyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamo-naoyuki/subscriptions", "organizations_url": "https://api.github.com/users/kamo-naoyuki/orgs", "repos_url": "https://api.github.com/users/kamo-naoyuki/repos", "events_url": "https://api.github.com/users/kamo-naoyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/kamo-naoyuki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-04T15:24:51Z", "updated_at": "2020-04-10T05:35:01Z", "closed_at": "2020-04-10T05:33:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n\r\nhttps://github.com/bw2/ConfigArgParse/blob/21f689b1dbd522bfd59fbdbfdcea2fe5629153e7/configargparse.py#L744-L746\r\n\r\nSuggestion:\r\n\r\n```python\r\n accepts_list = (isinstance(action, argparse._StoreAction) and \r\n                 action.nargs in ('+', '*')) or (\r\n                 isinstance(action, argparse._StoreAction) and\r\n                     isinstance(action.nargs, int) and action.nargs > 1)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/177", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/177/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/177/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/177/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/177", "id": 589416113, "node_id": "MDU6SXNzdWU1ODk0MTYxMTM=", "number": 177, "title": "Cannot use nargs with action=append", "user": {"login": "davistardif", "id": 16528981, "node_id": "MDQ6VXNlcjE2NTI4OTgx", "avatar_url": "https://avatars1.githubusercontent.com/u/16528981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davistardif", "html_url": "https://github.com/davistardif", "followers_url": "https://api.github.com/users/davistardif/followers", "following_url": "https://api.github.com/users/davistardif/following{/other_user}", "gists_url": "https://api.github.com/users/davistardif/gists{/gist_id}", "starred_url": "https://api.github.com/users/davistardif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davistardif/subscriptions", "organizations_url": "https://api.github.com/users/davistardif/orgs", "repos_url": "https://api.github.com/users/davistardif/repos", "events_url": "https://api.github.com/users/davistardif/events{/privacy}", "received_events_url": "https://api.github.com/users/davistardif/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-27T21:14:01Z", "updated_at": "2020-04-02T07:59:49Z", "closed_at": "2020-04-02T07:59:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Argparse allows me to create an argument like so:\r\n```\r\n>>> import argparse\r\n>>> parser = argparse.ArgumentParser()\r\n>>> parser.add_argument('--foo', nargs=2, action='append') \r\n_AppendAction(option_strings=['--foo'], dest='foo', nargs=2, const=None, default=None, type=None, choices=None, help=None, metavar=None)\r\n>>> parser.parse_args('--foo 1 2 --foo 3 4'.split())\r\nNamespace(foo=[['1', '2'], ['3', '4']])\r\n>>> \r\n```\r\n\r\nBut using an argument like this doesn't seem to work with configargparse:\r\n```\r\n>>> import configargparse\r\n>>> import yaml\r\n>>> parser = configargparse.ArgumentParser(\r\n...     config_file_parser_class=configargparse.YAMLConfigFileParser)\r\n>>> parser.add_argument('--foo', nargs=2, action='append')\r\n_AppendAction(option_strings=['--foo'], dest='foo', nargs=2, const=None, default=None, type=None, choices=None, help=None, metavar=None)\r\n>>> with open('temp.yaml', 'w') as f:\r\n...     yaml.safe_dump({'foo': [1, 2]}, f)\r\n... \r\n>>> parser.add_argument('--config', is_config_file=True)\r\n_StoreAction(option_strings=['--config'], dest='config', nargs=None, const=None, default=None, type=None, choices=None, help=None, metavar=None)\r\n>>> parser.parse_args(['--config', 'temp.yaml'])\r\nusage: [-h] [--foo FOO FOO] [--config CONFIG]\r\n: error: argument --foo: expected 2 arguments\r\n```\r\n\r\nIt doesn't seem unreasonable to have `nargs` and `action='append'` used together. The config file could represent this with a nested list. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/172", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/172/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/172/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/172/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/172", "id": 578160700, "node_id": "MDU6SXNzdWU1NzgxNjA3MDA=", "number": 172, "title": "configparser based ConfigFileParser", "user": {"login": "josephcarmack", "id": 13949990, "node_id": "MDQ6VXNlcjEzOTQ5OTkw", "avatar_url": "https://avatars0.githubusercontent.com/u/13949990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josephcarmack", "html_url": "https://github.com/josephcarmack", "followers_url": "https://api.github.com/users/josephcarmack/followers", "following_url": "https://api.github.com/users/josephcarmack/following{/other_user}", "gists_url": "https://api.github.com/users/josephcarmack/gists{/gist_id}", "starred_url": "https://api.github.com/users/josephcarmack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josephcarmack/subscriptions", "organizations_url": "https://api.github.com/users/josephcarmack/orgs", "repos_url": "https://api.github.com/users/josephcarmack/repos", "events_url": "https://api.github.com/users/josephcarmack/events{/privacy}", "received_events_url": "https://api.github.com/users/josephcarmack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-09T20:09:19Z", "updated_at": "2020-03-15T11:41:28Z", "closed_at": "2020-03-15T11:25:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently the only ConfigFileParsers available are DefaualtConfigFileParser and YAMLConfigFileParser. These are nice but neither supports multi-line values. This is really needed if you are going to have lists and dictionaries as values because formatting them in a single line quickly becomes unreadable with anything but the smallest of lists/dicts.\r\n\r\nThis could easily be addressed if a ConfigFileParser was contributed that parsed files with python's native configparser module which comes as part of the python stdlib. I think adding such a ConfigFileParser subclass with this support would greatly expand the cabilities and features of this package.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/170", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/170/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/170/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/170/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/170", "id": 573280311, "node_id": "MDU6SXNzdWU1NzMyODAzMTE=", "number": 170, "title": "Does this package follow semantic versioning?", "user": {"login": "alvassin", "id": 1497444, "node_id": "MDQ6VXNlcjE0OTc0NDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1497444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alvassin", "html_url": "https://github.com/alvassin", "followers_url": "https://api.github.com/users/alvassin/followers", "following_url": "https://api.github.com/users/alvassin/following{/other_user}", "gists_url": "https://api.github.com/users/alvassin/gists{/gist_id}", "starred_url": "https://api.github.com/users/alvassin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alvassin/subscriptions", "organizations_url": "https://api.github.com/users/alvassin/orgs", "repos_url": "https://api.github.com/users/alvassin/repos", "events_url": "https://api.github.com/users/alvassin/events{/privacy}", "received_events_url": "https://api.github.com/users/alvassin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-29T11:48:29Z", "updated_at": "2020-03-02T22:44:44Z", "closed_at": "2020-03-02T22:44:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Does this package follow [semantic versioning](https://semver.org) ([PEP 440](https://www.python.org/dev/peps/pep-0440/#semantic-versioning))? \r\nIs it safe to use ~= requirement operator?\r\n```\r\nConfigArgParse~=1.0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/163", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/163/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/163/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/163", "id": 513760085, "node_id": "MDU6SXNzdWU1MTM3NjAwODU=", "number": 163, "title": "testMutuallyExclusiveArgs and test_FormatHelp fails with python 3.8", "user": {"login": "ncopa", "id": 66357, "node_id": "MDQ6VXNlcjY2MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/66357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ncopa", "html_url": "https://github.com/ncopa", "followers_url": "https://api.github.com/users/ncopa/followers", "following_url": "https://api.github.com/users/ncopa/following{/other_user}", "gists_url": "https://api.github.com/users/ncopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/ncopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ncopa/subscriptions", "organizations_url": "https://api.github.com/users/ncopa/orgs", "repos_url": "https://api.github.com/users/ncopa/repos", "events_url": "https://api.github.com/users/ncopa/events{/privacy}", "received_events_url": "https://api.github.com/users/ncopa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-29T08:23:32Z", "updated_at": "2020-03-03T21:33:04Z", "closed_at": "2020-03-03T21:33:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "There are two tests in `0.15.1` that fails with python 3.8 on Alpine Linux:\r\n\r\n```\r\n======================================================================\r\nFAIL: testMutuallyExclusiveArgs (tests.test_configargparse.TestBasicUseCases)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/ncopa/aports/community/py3-configargparse/src/ConfigArgParse-0.15.1/tests/test_configargparse.py\", line 32\r\n0, in testMutuallyExclusiveArgs\r\n    self.assertRegex(self.format_help(),\r\nAssertionError: Regex didn't match: 'usage: .* \\\\[-h\\\\] --genome GENOME \\\\[-v\\\\]\\\\s+ \\\\(-f1 TYPE1_CFG_FILE \\\\| \\\\s*-f2 T\r\nYPE2_CFG_FILE\\\\)\\\\s+\\\\(-f FRMT \\\\| -b\\\\)\\n\\n.+\\\\s+.+\\\\s+.+\\\\s+.+\\\\s+.+\\\\s+.+\\\\s+.+\\\\s+optional arguments:\\n  -h, --help \r\n           show this help message and exit\\n  -f1 TYPE1_CFG_FILE, --type1-cfg-file TYPE1_CFG_FILE\\n  -f2 TYPE2_CFG_FILE,\r\n --type2-cfg-file TYPE2_CFG_FILE\\n  -f FRMT, --format FRMT\\\\s+\\\\[env var: OUTPUT_FORMAT\\\\]\\n  -b, --bam\\\\s+\\\\[env var: B\r\nAM_FORMAT\\\\]\\n\\ngroup1:\\n  --genome GENOME       Path to genome file\\n  -v\\n' not found in \"usage: setup.py [-h] --genom\r\ne GENOME [-v] (-f1 TYPE1_CFG_FILE | -f2 TYPE2_CFG_FILE) (-f FRMT | -b)\\n\\nArgs that start with '--' (eg. --genome) can a\r\nlso be set in a config file (specified via -f1 or -f2). Config file\\nsyntax allows: key=value, flag=true, stuff=[a,b,c] \r\n(for details, see syntax at https://goo.gl/R74nmi). If an arg is\\nspecified in more than one place, then commandline val\r\nues override environment variables which override config file\\nvalues which override defaults.\\n\\noptional arguments:\\n \r\n -h, --help            show this help message and exit\\n  -f1 TYPE1_CFG_FILE, --type1-cfg-file TYPE1_CFG_FILE\\n  -f2 TYP\r\nE2_CFG_FILE, --type2-cfg-file TYPE2_CFG_FILE\\n  -f FRMT, --format FRMT\\n                        [env var: OUTPUT_FORMAT]\r\n\\n  -b, --bam             [env var: BAM_FORMAT]\\n\\ngroup1:\\n  --genome GENOME       Path to genome file\\n  -v\\n\"\r\n\r\n======================================================================\r\nFAIL: test_FormatHelp (tests.test_configargparse.TestMisc)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/ncopa/aports/community/py3-configargparse/src/ConfigArgParse-0.15.1/tests/test_configargparse.py\", line 73\r\n4, in test_FormatHelp\r\n    self.assertRegex(self.format_help(),\r\nAssertionError: Regex didn't match: \"usage: .* \\\\[-h\\\\] -c CONFIG_FILE\\\\s+\\\\[-w CONFIG_OUTPUT_PATH\\\\]\\\\s* --arg1 ARG1\\\\s\r\n*\\\\[--flag\\\\]\\\\s*Args that start with '--' \\\\(eg. --arg1\\\\) can also be set in a config file\\\\s*\\\\(~/.myconfig or specif\r\nied via -c\\\\).\\\\s*Config file syntax allows: key=value,\\\\s*flag=true, stuff=\\\\[a,b,c\\\\] \\\\(for details, see syntax at ht\r\ntps://goo.gl/R74nmi\\\\).\\\\s*If an arg is specified in more than\\\\s*one place, then commandline values\\\\s*override config \r\nfile values which override\\\\s*defaults.\\\\s*optional arguments:\\\\s*-h, --help \\\\s* show this help message and exit\\n\\\\s*-\r\nc CONFIG_FILE, --config CONFIG_FILE\\\\s+my config file\\\\s*-w CONFIG_OUTPUT_PATH, --write-config CONFIG_OUTPUT_PATH\\\\s*tak\r\nes\\\\s*the current command line args and writes them\\\\s*out to a config file at the given path, then exits\\\\s*--arg1 ARG1\r\n\\\\s*Arg1 help text\\\\s*--flag \\\\s*Flag help text\" not found in \"usage: setup.py [-h] -c CONFIG_FILE [-w CONFIG_OUTPUT_PAT\r\nH] --arg1 ARG1 [--flag]\\n\\nArgs that start with '--' (eg. --arg1) can also be set in a config file (~/.myconfig or speci\r\nfied via -c). Config file\\nsyntax allows: key=value, flag=true, stuff=[a,b,c] (for details, see syntax at https://goo.gl\r\n/R74nmi). If an arg is\\nspecified in more than one place, then commandline values override config file values which over\r\nride defaults.\\n\\noptional arguments:\\n  -h, --help            show this help message and exit\\n  -c CONFIG_FILE, --conf\r\nig CONFIG_FILE\\n                        my config file\\n  -w CONFIG_OUTPUT_PATH, --write-config CONFIG_OUTPUT_PATH\\n    \r\n                    takes the current command line args and writes them out to a config file at the given path,\\n       \r\n                 then exits\\n  --arg1 ARG1           Arg1 help text\\n  --flag                Flag help text\\n\"\r\n\r\n----------------------------------------------------------------------\r\nRan 31 tests in 0.958s\r\n\r\nFAILED (failures=2)\r\nTest failed: <unittest.runner.TextTestResult run=31 errors=0 failures=2>\r\nerror: Test failed: <unittest.runner.TextTestResult run=31 errors=0 failures=2>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/162", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/162/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/162/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/162/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/162", "id": 507570496, "node_id": "MDU6SXNzdWU1MDc1NzA0OTY=", "number": 162, "title": "Does not support character other than ascii?", "user": {"login": "tcqiuyu", "id": 6031166, "node_id": "MDQ6VXNlcjYwMzExNjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/6031166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tcqiuyu", "html_url": "https://github.com/tcqiuyu", "followers_url": "https://api.github.com/users/tcqiuyu/followers", "following_url": "https://api.github.com/users/tcqiuyu/following{/other_user}", "gists_url": "https://api.github.com/users/tcqiuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tcqiuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tcqiuyu/subscriptions", "organizations_url": "https://api.github.com/users/tcqiuyu/orgs", "repos_url": "https://api.github.com/users/tcqiuyu/repos", "events_url": "https://api.github.com/users/tcqiuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tcqiuyu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-16T02:08:29Z", "updated_at": "2019-10-24T08:54:21Z", "closed_at": "2019-10-24T08:05:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is an interesting library. I was going to use it in my project but found it would raise a \"UnicodeDecodeError\" since my yaml config file contains Chinese characters. I wondered whether I have done the right way or the library does not support utf-8 file?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/157", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/157/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/157/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/157/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/157", "id": 500907630, "node_id": "MDU6SXNzdWU1MDA5MDc2MzA=", "number": 157, "title": "Add support for automatic reading env vars with the same name as argument name", "user": {"login": "karolzak", "id": 9843623, "node_id": "MDQ6VXNlcjk4NDM2MjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/9843623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karolzak", "html_url": "https://github.com/karolzak", "followers_url": "https://api.github.com/users/karolzak/followers", "following_url": "https://api.github.com/users/karolzak/following{/other_user}", "gists_url": "https://api.github.com/users/karolzak/gists{/gist_id}", "starred_url": "https://api.github.com/users/karolzak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karolzak/subscriptions", "organizations_url": "https://api.github.com/users/karolzak/orgs", "repos_url": "https://api.github.com/users/karolzak/repos", "events_url": "https://api.github.com/users/karolzak/events{/privacy}", "received_events_url": "https://api.github.com/users/karolzak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-01T13:46:10Z", "updated_at": "2019-10-01T15:26:16Z", "closed_at": "2019-10-01T15:26:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems like as of right now in order to be able to use env vars you need to specifically use parameter `env_var` in add_argument function and explicitly name that env var like below:\r\n\r\n```python\r\nimport configargparse\r\nparser = configargparse.ArgumentParser()\r\nparser.add_argument(\r\n        '--tenant_id', required=True, env_var='TENANT_ID')\r\n```\r\n\r\nIt would be great to have some sort of flag on ArgumentParser class to automatically support env vars. In example:\r\n\r\n```python\r\nimport configargparse\r\nparser = configargparse.ArgumentParser(auto_support_env_vars=True)\r\nparser.add_argument(\r\n        '--tenant_id', required=True)\r\n```\r\nThis flag would simply use `env_var` parameter under the hood to automatically read from env var with the same name as the original argument (but all capital?)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/154", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/154/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/154/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/154", "id": 463338699, "node_id": "MDU6SXNzdWU0NjMzMzg2OTk=", "number": 154, "title": "Values that begin with a hyphen are not handled properly", "user": {"login": "bmw", "id": 6504915, "node_id": "MDQ6VXNlcjY1MDQ5MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/6504915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bmw", "html_url": "https://github.com/bmw", "followers_url": "https://api.github.com/users/bmw/followers", "following_url": "https://api.github.com/users/bmw/following{/other_user}", "gists_url": "https://api.github.com/users/bmw/gists{/gist_id}", "starred_url": "https://api.github.com/users/bmw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bmw/subscriptions", "organizations_url": "https://api.github.com/users/bmw/orgs", "repos_url": "https://api.github.com/users/bmw/repos", "events_url": "https://api.github.com/users/bmw/events{/privacy}", "received_events_url": "https://api.github.com/users/bmw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-02T17:01:33Z", "updated_at": "2019-12-09T23:06:21Z", "closed_at": "2019-12-08T16:41:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "In my project that uses configargparse, we have the somewhat strange use case of needing to have command line flags that accept values starting with a hyphen like this:\r\n```\r\n--my-flag -my-value\r\n```\r\nSee https://github.com/certbot/certbot/issues/7114.\r\n\r\nThe normal workaround for this suggested at https://bugs.python.org/issue9334 for this when using argparse is to separate the flag and value with an equals sign so the command line becomes:\r\n```\r\n--my-flag=-my-value\r\n```\r\nThis works with `argparse`:\r\n```\r\n>>> import argparse\r\n>>> parser = argparse.ArgumentParser()\r\n>>> parser.add_argument('--my-flag')\r\n_StoreAction(option_strings=['--my-flag'], dest='my_flag', nargs=None, const=None, default=None, type=None, choices=None, help=None, metavar=None)\r\n>>> parser.parse_args(['--my-flag=-my-value'])\r\nNamespace(my_flag='-my-value')\r\n```\r\nUnfortunately, this doesn't work with configargparse. Using Python 3.7.3 and ConfigArgParse 0.14.0, I saw this behavior:\r\n```\r\n>>> import configargparse\r\n>>> parser = configargparse.ArgumentParser()\r\n>>> parser.add_argument('--my-flag')\r\n_StoreAction(option_strings=['--my-flag'], dest='my_flag', nargs=None, const=None, default=None, type=None, choices=None, help=None, metavar=None)\r\n>>> parser.parse_args(['--my-flag=-my-value'])\r\nusage: [-h] [--my-flag MY_FLAG]\r\n: error: argument --my-flag: expected one argument\r\n```\r\nIn [this comment](https://github.com/certbot/certbot/issues/7114#issuecomment-507535101) someone bisected this project and said that the this problem was introduced in https://github.com/bw2/ConfigArgParse/commit/e0c35f9347bc19091f51c4c2251c650bcf6735f8.\r\n\r\nIt would help us a lot of configargparse had the same behavior as argparse here and this problem could be resolved.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/146", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/146/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/146/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/146/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/146", "id": 445171724, "node_id": "MDU6SXNzdWU0NDUxNzE3MjQ=", "number": 146, "title": "Two failing tests: ", "user": {"login": "mcepl", "id": 198999, "node_id": "MDQ6VXNlcjE5ODk5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/198999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcepl", "html_url": "https://github.com/mcepl", "followers_url": "https://api.github.com/users/mcepl/followers", "following_url": "https://api.github.com/users/mcepl/following{/other_user}", "gists_url": "https://api.github.com/users/mcepl/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcepl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcepl/subscriptions", "organizations_url": "https://api.github.com/users/mcepl/orgs", "repos_url": "https://api.github.com/users/mcepl/repos", "events_url": "https://api.github.com/users/mcepl/events{/privacy}", "received_events_url": "https://api.github.com/users/mcepl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-16T21:39:23Z", "updated_at": "2020-03-03T21:32:14Z", "closed_at": "2020-03-03T21:32:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n[    4s] ======================================================================\r\n[    4s] FAIL: testConfigOrEnvValueErrors (tests.test_configargparse.TestBasicUseCases)\r\n[    4s] ----------------------------------------------------------------------\r\n[    4s] Traceback (most recent call last):\r\n[    4s]   File \"/home/abuild/rpmbuild/BUILD/ConfigArgParse-0.14.0/tests/test_configargparse.py\", line 526, in testConfigOrEnvValueErrors\r\n[    4s]     env_vars={\"VERBOSE\" : \"bla\"})\r\n[    4s]   File \"/home/abuild/rpmbuild/BUILD/ConfigArgParse-0.14.0/tests/test_configargparse.py\", line 67, in assertParseArgsRaises\r\n[    4s]     *args, **kwargs)\r\n[    4s] AssertionError: \"Unexpected value for VERBOSE: 'bla'. Expecting 'true', 'false', 'yes', 'no', '1' or '0'\" does not match \"unrecognized arguments: discover\"\r\n[    4s] \r\n[    4s] ======================================================================\r\n[    4s] FAIL: test_help_with_metavar (tests.test_configargparse.TestWrappingMetavar)\r\n[    4s] ----------------------------------------------------------------------\r\n[    4s] Traceback (most recent call last):\r\n[    4s]   File \"<string>\", line 4839, in test_help_with_metavar\r\n[    4s]   File \"<string>\", line 30, in assertEqual\r\n[    4s] AssertionError: 'usage: python -m unittest [-h] [--proxy <http[s]://example:1234>]\\n\\noptional arguments:\\n  -h, --help            show this help message and exit\\n  --proxy <http[s]://example:1234>\\n' != 'usage: this_is_spammy_prog_with_a_long_name_sorry_about_the_name\\n       [-h] [--proxy <http[s]://example:1234>]\\n\\noptional arguments:\\n  -h, --help            show this help message and exit\\n  --proxy <http[s]://example:1234>\\n'\r\n[    4s] \r\n[    4s] ----------------------------------------------------------------------\r\n[    4s] Ran 1657 tests in 1.321s\r\n[    4s] \r\n[    4s] FAILED (failures=2)\r\n[    4s] \r\n[    4s] 'usage: python -m unittest [-h] [--proxy <http[s]://example:1234>]\\n\\noptional arguments:\\n  -h, --help            show this help message and exit\\n  --proxy <http[s]://example:1234>\\n'\r\n[    4s] 'usage: this_is_spammy_prog_with_a_long_name_sorry_about_the_name\\n       [-h] [--proxy <http[s]://example:1234>]\\n\\noptional arguments:\\n  -h, --help            show this help message and exit\\n  --proxy <http[s]://example:1234>\\n'\r\n[    4s] usage: python -m unittest [-h] [--proxy <http[s]://example:1234>]\r\n[    4s] \r\n[    4s] optional arguments:\r\n[    4s]   -h, --help            show this help message and exit\r\n[    4s]   --proxy <http[s]://example:1234>\r\n[    4s] \r\n[    4s] usage: this_is_spammy_prog_with_a_long_name_sorry_about_the_name\r\n[    4s]        [-h] [--proxy <http[s]://example:1234>]\r\n[    4s] \r\n[    4s] optional arguments:\r\n[    4s]   -h, --help            show this help message and exit\r\n[    4s]   --proxy <http[s]://example:1234>\r\n[    4s] \r\n```\r\nRunning version 0.14.0 on openSUSE/Tumbleweed (actually, building package for it). What's going on?\r\n[Full build log](https://github.com/bw2/ConfigArgParse/files/3189121/log.txt)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/135", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/135/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/135/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/135/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/135", "id": 398876163, "node_id": "MDU6SXNzdWUzOTg4NzYxNjM=", "number": 135, "title": "Specify --config in default config", "user": {"login": "felix1m", "id": 1752475, "node_id": "MDQ6VXNlcjE3NTI0NzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1752475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felix1m", "html_url": "https://github.com/felix1m", "followers_url": "https://api.github.com/users/felix1m/followers", "following_url": "https://api.github.com/users/felix1m/following{/other_user}", "gists_url": "https://api.github.com/users/felix1m/gists{/gist_id}", "starred_url": "https://api.github.com/users/felix1m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felix1m/subscriptions", "organizations_url": "https://api.github.com/users/felix1m/orgs", "repos_url": "https://api.github.com/users/felix1m/repos", "events_url": "https://api.github.com/users/felix1m/events{/privacy}", "received_events_url": "https://api.github.com/users/felix1m/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-01-14T12:55:27Z", "updated_at": "2019-02-01T09:53:00Z", "closed_at": "2019-02-01T09:53:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to set the config path in a default file?\r\n\r\nE.g.:\r\n    p = configargparse.ArgParser(default_config_files=['~/.my_default_config.conf'])\r\n    p.add('-c', '--config', required=False, is_config_file=True, help='config file path')\r\n\r\nwith .my_default_config.conf having the line\r\nconfig=/etc/myapp/config1.conf\r\n\r\n\r\nAt the moment the file /etc/myapp/config1.conf will not be loaded.\r\n\r\nCan i first parse the defaults somehow before parsing the rest?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/128", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/128/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/128/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/128", "id": 341087779, "node_id": "MDU6SXNzdWUzNDEwODc3Nzk=", "number": 128, "title": "Option from file is parsed but not applied", "user": {"login": "JesApp", "id": 22885846, "node_id": "MDQ6VXNlcjIyODg1ODQ2", "avatar_url": "https://avatars3.githubusercontent.com/u/22885846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JesApp", "html_url": "https://github.com/JesApp", "followers_url": "https://api.github.com/users/JesApp/followers", "following_url": "https://api.github.com/users/JesApp/following{/other_user}", "gists_url": "https://api.github.com/users/JesApp/gists{/gist_id}", "starred_url": "https://api.github.com/users/JesApp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JesApp/subscriptions", "organizations_url": "https://api.github.com/users/JesApp/orgs", "repos_url": "https://api.github.com/users/JesApp/repos", "events_url": "https://api.github.com/users/JesApp/events{/privacy}", "received_events_url": "https://api.github.com/users/JesApp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-13T16:46:38Z", "updated_at": "2019-02-02T17:13:35Z", "closed_at": "2019-02-02T17:13:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "### The problem\r\nI have only one Parser which I set options on in several places.\r\n\r\nCalling `Parser.format_help()` results in:\r\n\r\n```\r\nusage: analyser.py [-h] [-c CONFIG] [--database_name DATABASE_NAME]\r\n                   [--database_uri DATABASE_URI]\r\n                   {devlist} ...\r\n\r\nArgs that start with '--' (eg. --database_name) can also be set in a config\r\nfile (./config.conf or specified via -c). Config file syntax allows:\r\nkey=value, flag=true, stuff=[a,b,c] (for details, see syntax at\r\nhttps://goo.gl/R74nmi). If an arg is specified in more than one place, then\r\ncommandline values override config file values which override defaults.\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -c CONFIG, --config CONFIG\r\n                        Use this config file. (default: None)\r\n  --database_name DATABASE_NAME\r\n                        Name of database (usually name of the machine/project)\r\n                        (default: None)\r\n  --database_uri DATABASE_URI\r\n                        URI of the mongodb to be used (default:\r\n                        mongodb://127.0.0.1:27017/)\r\n\r\nSubcommands:\r\n  {devlist}\r\n```\r\n\r\nCalling `Parser.format_values()` after I've specified all options results in:\r\n\r\n```\r\nCommand Line Args:   -c ./config.conf devlist\r\nConfig File (./config.conf):\r\n  database_name:     demonstrator_test\r\n  database_uri:      mongodb://127.0.0.1:27017/\r\n```\r\n\r\nHowever, if I then do `print Parser.parse_known_args()` I get:\r\n```\r\n(Namespace(config='./config.conf', database_name=None, database_uri='mongodb://127.0.0.1:27017/', func=<function list_devices at 0x7f163e912ea0>), ['--database_name', 'demonstrator_test', '--database_uri', 'mongodb://127.0.0.1:27017/'])\r\n```\r\n\r\n### The question\r\n\r\nWhy is `Namespace.database_name=None`? It's clearly found, just like `database_uri`...\r\n\r\nAlso, just out of interest, why does `parse_known_args`return a tuple? What's the list for?\r\n\r\n### Thanks\r\n\r\nThank you for this library. If we can get this fixed it would absolutely excellent! :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/118", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/118/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/118/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/118", "id": 312166186, "node_id": "MDU6SXNzdWUzMTIxNjYxODY=", "number": 118, "title": "Arguments that have action types that don't need a value break in subparsers", "user": {"login": "rightaditya", "id": 1624945, "node_id": "MDQ6VXNlcjE2MjQ5NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1624945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rightaditya", "html_url": "https://github.com/rightaditya", "followers_url": "https://api.github.com/users/rightaditya/followers", "following_url": "https://api.github.com/users/rightaditya/following{/other_user}", "gists_url": "https://api.github.com/users/rightaditya/gists{/gist_id}", "starred_url": "https://api.github.com/users/rightaditya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rightaditya/subscriptions", "organizations_url": "https://api.github.com/users/rightaditya/orgs", "repos_url": "https://api.github.com/users/rightaditya/repos", "events_url": "https://api.github.com/users/rightaditya/events{/privacy}", "received_events_url": "https://api.github.com/users/rightaditya/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-07T03:23:15Z", "updated_at": "2019-01-17T04:20:29Z", "closed_at": "2019-01-17T04:20:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm on ConfigArgParse 0.13.0. Here's some minimal code that reproduces the issue:\r\n\r\n```python\r\n#!/usr/bin/env python3\r\n\r\nimport configargparse as cap\r\n\r\nparser = cap.ArgParser(default_config_files=['args.cfg'])\r\nsubparsers = parser.add_subparsers()\r\nsp = subparsers.add_parser('test')\r\nsp.add_argument('--test', action='store_true')\r\n\r\nargs = parser.parse_args()\r\nprint(args.test)\r\n```\r\n\r\nWith args.cfg contents:\r\n```\r\ntest = True\r\n```\r\n(The same result occurs if the contents of args.cfg are anything equivalent to that, like `--test`, etc.)\r\n\r\nI'd expect to get output `True`, but instead:\r\n```\r\nusage: test.py [-h] {test} ...\r\ntest.py: error: unrecognized arguments: True\r\n```\r\n\r\nI spent some time digging into the code to figure out where the problem is, and I think I've got it: line 462 (in master/configargparse.py). The `known_config_keys` dictionary doesn't see the subparser actions at all, which means that `test` isn't recognized as an argument that doesn't need a value (in `convert_item_to_command_line_arg()`).\r\n\r\nI've fixed this by changing line 462 to use `all_actions` instead of `self._actions`, where `all_actions` is defined as:\r\n```python\r\nall_actions = list()\r\nfor a in self._actions:\r\n    all_actions.append(a)\r\n    if type(a) == argparse._SubParsersAction:\r\n        for _, subparser in a.choices.items():\r\n            all_actions.extend(subparser._actions)\r\n```\r\n\r\nI was ready to submit a PR for this, but I wasn't sure if any other parts of the code should also be switched to point to `all_actions` rather than `self._actions`. If preferred, I can submit the PR and it can be discussed there rather than here.\r\n\r\nThis may be related to #71.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/115", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/115/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/115/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/115", "id": 302016381, "node_id": "MDU6SXNzdWUzMDIwMTYzODE=", "number": 115, "title": "nargs='*', type=int is not parsed correctly from environment", "user": {"login": "ali1234", "id": 651970, "node_id": "MDQ6VXNlcjY1MTk3MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/651970?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ali1234", "html_url": "https://github.com/ali1234", "followers_url": "https://api.github.com/users/ali1234/followers", "following_url": "https://api.github.com/users/ali1234/following{/other_user}", "gists_url": "https://api.github.com/users/ali1234/gists{/gist_id}", "starred_url": "https://api.github.com/users/ali1234/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ali1234/subscriptions", "organizations_url": "https://api.github.com/users/ali1234/orgs", "repos_url": "https://api.github.com/users/ali1234/repos", "events_url": "https://api.github.com/users/ali1234/events{/privacy}", "received_events_url": "https://api.github.com/users/ali1234/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-03T17:29:57Z", "updated_at": "2018-03-04T20:09:44Z", "closed_at": "2018-03-04T20:09:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n#!/usr/bin/env python3\r\n\r\nimport configargparse\r\n\r\nparser=configargparse.ArgumentParser()\r\nparser.add_argument('-n', '--ints', nargs='*', metavar='N', type=int, env_var='INTS')\r\nargs = parser.parse_args()\r\nprint(args.ints)\r\n```\r\n\r\n\r\n```\r\nal@al-desktop:~/Source/pimodisco$ ./test.py -h\r\nusage: test.py [-h] [-n [N [N ...]]]\r\n\r\nIf an arg is specified in more than one place, then commandline values\r\noverride environment variables which override defaults.\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -n [N [N ...]], --ints [N [N ...]]\r\n                        [env var: INTS]\r\nal@al-desktop:~/Source/pimodisco$ ./test.py --ints 1 2 3 4\r\n[1, 2, 3, 4]\r\nal@al-desktop:~/Source/pimodisco$ INTS=1 ./test.py\r\n[1]\r\nal@al-desktop:~/Source/pimodisco$ INTS=\"1 2 3 4\" ./test.py\r\nusage: test.py [-h] [-n [N [N ...]]]\r\ntest.py: error: argument -n/--ints: invalid int value: '1 2 3 4'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/112", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/112/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/112/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/112", "id": 290568445, "node_id": "MDU6SXNzdWUyOTA1Njg0NDU=", "number": 112, "title": "PyPI version is out of date", "user": {"login": "iLoveTux", "id": 2762492, "node_id": "MDQ6VXNlcjI3NjI0OTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2762492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iLoveTux", "html_url": "https://github.com/iLoveTux", "followers_url": "https://api.github.com/users/iLoveTux/followers", "following_url": "https://api.github.com/users/iLoveTux/following{/other_user}", "gists_url": "https://api.github.com/users/iLoveTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/iLoveTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iLoveTux/subscriptions", "organizations_url": "https://api.github.com/users/iLoveTux/orgs", "repos_url": "https://api.github.com/users/iLoveTux/repos", "events_url": "https://api.github.com/users/iLoveTux/events{/privacy}", "received_events_url": "https://api.github.com/users/iLoveTux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-22T18:29:33Z", "updated_at": "2018-02-04T18:32:43Z", "closed_at": "2018-02-04T18:32:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "To start thank you very much for your work on ConfigArgParse, I just found this package and it has allowed me to simplify a number of my applications.\r\n\r\nCurrently the release on PyPI is broken in as much as it will not parse lists from an environment variable such as\r\n\r\n`C:\\> set OPTION=[first,second]`\r\n\r\nbut if I install latest revision from github like so:\r\n\r\n`C:\\> pip install git+https://github.com/bw2/ConfigArgParse`\r\n\r\nthen it works as expected, so I'm assuming that the behavior has been fixed but the version on PyPI is not up to date with github.\r\n\r\nThis is an issue because I would like to declare ConfigArgParse as a dependency in setup.py, but that will make it install the version in PyPI.\r\n\r\nI wish this was something that I could submit a PR for, but I don't think that I can.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/106", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/106/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/106/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/106", "id": 277799048, "node_id": "MDU6SXNzdWUyNzc3OTkwNDg=", "number": 106, "title": "Allow specifying config file argument without suffix", "user": {"login": "danielhers", "id": 263363, "node_id": "MDQ6VXNlcjI2MzM2Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/263363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhers", "html_url": "https://github.com/danielhers", "followers_url": "https://api.github.com/users/danielhers/followers", "following_url": "https://api.github.com/users/danielhers/following{/other_user}", "gists_url": "https://api.github.com/users/danielhers/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhers/subscriptions", "organizations_url": "https://api.github.com/users/danielhers/orgs", "repos_url": "https://api.github.com/users/danielhers/repos", "events_url": "https://api.github.com/users/danielhers/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhers/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 109393199, "node_id": "MDU6TGFiZWwxMDkzOTMxOTk=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-29T15:34:55Z", "updated_at": "2017-12-26T18:28:21Z", "closed_at": "2017-12-26T18:28:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "My use case is that I have a `--model` argument to my program, which contains data to be loaded when the program starts and saved when the program ends. I would like to add a config file whose name is just the model filename + a `.yml` suffix, without the user having to specify that explicitly.\r\nThis could be accomplished by making the `--model` argument a `is_config_file_arg=True` argument, except that then the model file itself will be treated as the config, where I want the file with the `.yml` suffix to be taken. For that a default suffix to add to `is_config_file_arg=True` arguments would be helpful.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/99", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/99/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/99/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/99", "id": 253669891, "node_id": "MDU6SXNzdWUyNTM2Njk4OTE=", "number": 99, "title": "List args read from environment or config files consume positional args", "user": {"login": "bpiotr", "id": 11797595, "node_id": "MDQ6VXNlcjExNzk3NTk1", "avatar_url": "https://avatars3.githubusercontent.com/u/11797595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpiotr", "html_url": "https://github.com/bpiotr", "followers_url": "https://api.github.com/users/bpiotr/followers", "following_url": "https://api.github.com/users/bpiotr/following{/other_user}", "gists_url": "https://api.github.com/users/bpiotr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpiotr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpiotr/subscriptions", "organizations_url": "https://api.github.com/users/bpiotr/orgs", "repos_url": "https://api.github.com/users/bpiotr/repos", "events_url": "https://api.github.com/users/bpiotr/events{/privacy}", "received_events_url": "https://api.github.com/users/bpiotr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-08-29T13:53:34Z", "updated_at": "2017-09-10T18:33:37Z", "closed_at": "2017-09-10T18:33:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\nparser = configargparse.ArgumentParser()\r\nparser.add_argument('--foo', nargs='*')\r\nparser.add_argument('--bar', nargs='*')\r\nparser.add_argument('baz', nargs='*')\r\nparser.parse_args('a b --foo x y --bar 1 2'.split())\r\n```\r\n\r\n> Namespace(bar=['1', '2'], baz=['a', 'b'], foo=['x', 'y'])\r\n\r\n```\r\nparser.parse_args('a b'.split(), config_file_contents=\"\"\"foo = [x, y]\r\nbar = [1, 2]\"\"\")\r\n```\r\n\r\n> Namespace(bar=['1', '2', 'a', 'b'], baz=[], foo=['x', 'y'])\r\n\r\nI suppose that the second namespace should be the same as the first one.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/94", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/94/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/94/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/94", "id": 248734389, "node_id": "MDU6SXNzdWUyNDg3MzQzODk=", "number": 94, "title": "inconsistent handling of string args using YAML config", "user": {"login": "jxstanford", "id": 787382, "node_id": "MDQ6VXNlcjc4NzM4Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/787382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jxstanford", "html_url": "https://github.com/jxstanford", "followers_url": "https://api.github.com/users/jxstanford/followers", "following_url": "https://api.github.com/users/jxstanford/following{/other_user}", "gists_url": "https://api.github.com/users/jxstanford/gists{/gist_id}", "starred_url": "https://api.github.com/users/jxstanford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jxstanford/subscriptions", "organizations_url": "https://api.github.com/users/jxstanford/orgs", "repos_url": "https://api.github.com/users/jxstanford/repos", "events_url": "https://api.github.com/users/jxstanford/events{/privacy}", "received_events_url": "https://api.github.com/users/jxstanford/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-08T14:28:35Z", "updated_at": "2017-12-26T18:57:13Z", "closed_at": "2017-12-26T18:57:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Unquoted strings that start with a number appear to be treated differently than when quoted, or than other strings that don't start with a numbers.  Example:\r\n\r\nConfig:\r\n```\r\nbegin_time: 6:30\r\nend_time: 12:59\r\n```\r\nCode:\r\n```\r\np.add('--begin_time', type=str, default='6:30', help='filter out aggregations before start time')\r\np.add('--end_time', type=str, default='12:59', help='filter out aggregations after end time')\r\nns, args = p.parse_known_args()\r\nlogger.debug(\"begin_time: %s, end_time: %s\" % (ns.begin_time, ns.end_time))\r\n```\r\nResult:\r\n`08-08 07:08 root         DEBUG    begin_time: 390, end_time: 779`\r\n\r\nIf the values in the config file are quoted, then it returns the expected result:\r\n\r\nConfig:\r\n```\r\nbegin_time: '6:30'\r\nend_time: '12:59'\r\n```\r\n\r\nResult:\r\n`08-08 07:09 root         DEBUG    begin_time: 6:30, end_time: 12:59`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/91", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/91/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/91/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/91", "id": 238980344, "node_id": "MDU6SXNzdWUyMzg5ODAzNDQ=", "number": 91, "title": "`key = False` with argument `type=bool` sets `key` to `True`", "user": {"login": "yunesj", "id": 152988, "node_id": "MDQ6VXNlcjE1Mjk4OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/152988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yunesj", "html_url": "https://github.com/yunesj", "followers_url": "https://api.github.com/users/yunesj/followers", "following_url": "https://api.github.com/users/yunesj/following{/other_user}", "gists_url": "https://api.github.com/users/yunesj/gists{/gist_id}", "starred_url": "https://api.github.com/users/yunesj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yunesj/subscriptions", "organizations_url": "https://api.github.com/users/yunesj/orgs", "repos_url": "https://api.github.com/users/yunesj/repos", "events_url": "https://api.github.com/users/yunesj/events{/privacy}", "received_events_url": "https://api.github.com/users/yunesj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-27T20:58:25Z", "updated_at": "2017-10-26T17:53:48Z", "closed_at": "2017-10-26T17:53:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "With code: `p.add('--key', type=bool)`\r\nand config: `key = False`\r\nvalue for `key` is set to `True`.\r\n\r\n`action='store_true'` works somewhat as expected.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/87", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/87/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/87/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/87", "id": 221284573, "node_id": "MDU6SXNzdWUyMjEyODQ1NzM=", "number": 87, "title": "Intuitively handle key = false", "user": {"login": "bmw", "id": 6504915, "node_id": "MDQ6VXNlcjY1MDQ5MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/6504915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bmw", "html_url": "https://github.com/bmw", "followers_url": "https://api.github.com/users/bmw/followers", "following_url": "https://api.github.com/users/bmw/following{/other_user}", "gists_url": "https://api.github.com/users/bmw/gists{/gist_id}", "starred_url": "https://api.github.com/users/bmw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bmw/subscriptions", "organizations_url": "https://api.github.com/users/bmw/orgs", "repos_url": "https://api.github.com/users/bmw/repos", "events_url": "https://api.github.com/users/bmw/events{/privacy}", "received_events_url": "https://api.github.com/users/bmw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-12T14:38:09Z", "updated_at": "2017-05-02T23:13:53Z", "closed_at": "2017-04-30T13:37:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "As described in the [documentation](https://github.com/bw2/ConfigArgParse#special-values), people can include`key = True` in a configuration file to effectively add `--key` to the command line. If the someone puts `key = False` in a configuration file though, `--key` is still effectively added to the command line. I understand that `key = False` is the equivalent to not including the line in the configuration at all, but this behavior has surprised users (see certbot/certbot#4407).\r\n\r\nTo provide an example where this happens:\r\n\r\n#### config.ini\r\n```\r\nfoo = false\r\n```\r\n\r\n#### demo.py\r\n```\r\nimport configargparse\r\n\r\np = configargparse.ArgParser(default_config_files=['config.ini'])\r\np.add_argument('--foo', action='store_true')\r\nprint p.parse_args()\r\n```\r\n\r\n#### output\r\n```\r\n$ python demo.py \r\nNamespace(foo=True)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/86", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/86/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/86/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/86", "id": 218818526, "node_id": "MDU6SXNzdWUyMTg4MTg1MjY=", "number": 86, "title": "Allow null values in yaml config file", "user": {"login": "kaniblu", "id": 938822, "node_id": "MDQ6VXNlcjkzODgyMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/938822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaniblu", "html_url": "https://github.com/kaniblu", "followers_url": "https://api.github.com/users/kaniblu/followers", "following_url": "https://api.github.com/users/kaniblu/following{/other_user}", "gists_url": "https://api.github.com/users/kaniblu/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaniblu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaniblu/subscriptions", "organizations_url": "https://api.github.com/users/kaniblu/orgs", "repos_url": "https://api.github.com/users/kaniblu/repos", "events_url": "https://api.github.com/users/kaniblu/events{/privacy}", "received_events_url": "https://api.github.com/users/kaniblu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-03T02:54:18Z", "updated_at": "2017-04-30T14:16:21Z", "closed_at": "2017-04-30T14:16:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Allow specifying null values in yaml config file using yaml-like syntax:\r\n\r\n    # the following should create arguments of \r\n    # {\"foo\": 1234, \"bar\": None, \"joe\": 1234}\r\n    foo: 1234\r\n    bar:\r\n    joe: 1234\r\n\r\nCurrently above config file will produce an error complaining about unexpected end-of-line.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/85", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/85/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/85/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/85", "id": 210979092, "node_id": "MDU6SXNzdWUyMTA5NzkwOTI=", "number": 85, "title": "yaml config file list doesn't support strings with commas", "user": {"login": "mzagrabe", "id": 4367686, "node_id": "MDQ6VXNlcjQzNjc2ODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/4367686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzagrabe", "html_url": "https://github.com/mzagrabe", "followers_url": "https://api.github.com/users/mzagrabe/followers", "following_url": "https://api.github.com/users/mzagrabe/following{/other_user}", "gists_url": "https://api.github.com/users/mzagrabe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzagrabe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzagrabe/subscriptions", "organizations_url": "https://api.github.com/users/mzagrabe/orgs", "repos_url": "https://api.github.com/users/mzagrabe/repos", "events_url": "https://api.github.com/users/mzagrabe/events{/privacy}", "received_events_url": "https://api.github.com/users/mzagrabe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-01T04:47:29Z", "updated_at": "2017-03-01T16:41:06Z", "closed_at": "2017-03-01T16:41:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for configargparse! I love it.\r\n\r\nI'm attempting something like:\r\n\r\ncat config.yaml\r\nsome-option: [ 'this, has a comma' ]\r\n\r\nAnd configargparse incorrectly parses \"some-option\" as a list with two items instead of correctly parsing it as a list with one item.\r\n\r\nDo you know of a workaround?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/84", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/84/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/84/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/84", "id": 208527790, "node_id": "MDU6SXNzdWUyMDg1Mjc3OTA=", "number": 84, "title": "repeated options; better list handling", "user": {"login": "mnagel", "id": 961159, "node_id": "MDQ6VXNlcjk2MTE1OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/961159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mnagel", "html_url": "https://github.com/mnagel", "followers_url": "https://api.github.com/users/mnagel/followers", "following_url": "https://api.github.com/users/mnagel/following{/other_user}", "gists_url": "https://api.github.com/users/mnagel/gists{/gist_id}", "starred_url": "https://api.github.com/users/mnagel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mnagel/subscriptions", "organizations_url": "https://api.github.com/users/mnagel/orgs", "repos_url": "https://api.github.com/users/mnagel/repos", "events_url": "https://api.github.com/users/mnagel/events{/privacy}", "received_events_url": "https://api.github.com/users/mnagel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-17T19:02:53Z", "updated_at": "2017-04-30T14:10:22Z", "closed_at": "2017-04-30T14:10:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys! Great module!\r\n\r\nWhat I really want in my config file is:\r\n\r\n```\r\n--device pc2000  192.168.0.194 mysql user_maintainer 12984710289471234324732144321432\r\n--device pc3000  192.168.0.198 mysql user_maintainer 12984710289471234324732144321432\r\n--device device1 192.168.0.195 mysql user_maintainer 12984710289471234324732144321432\r\n--device device2 192.168.0.196 mysql user_maintainer 12984710289471234324732144321432\r\n--device device3 192.168.0.197 mysql user_maintainer 12984710289471234324732144321432\r\n--device device4 192.168.0.198 mysql user_maintainer 12984710289471234324732144321432\r\n--device device5 192.168.0.201 mysql user_maintainer 12984710289471234324732144321432\r\n--device device6 192.168.0.200 mysql user_maintainer 12984710289471234324732144321432\r\n```\r\nWhat I need to do currently because I am not able to specify the same option repeatedly plus the special treatment of spaces/commas:\r\n\r\n```\r\n--device [pc2000|192.168.0.194|mysql|user_maintainer|12984710289471234324732144321432, pc3000|192.168.0.198|mysql|user_maintainer|12984710289471234324732144321432, device1|192.168.0.195|mysql|user_maintainer|12984710289471234324732144321432, device2|192.168.0.196|mysql|user_maintainer|12984710289471234324732144321432, device3|192.168.0.197|mysql|user_maintainer|12984710289471234324732144321432, device4|192.168.0.198|mysql|user_maintainer|12984710289471234324732144321432, device5|192.168.0.201|mysql|user_maintainer|12984710289471234324732144321432, device6|192.168.0.200|mysql|user_maintainer|12984710289471234324732144321432]\r\n```\r\n\r\nplus this code\r\n\r\n```\r\noptions.device = [device.Device(*d.split(\"|\")) for d in options.device]\r\n```\r\n\r\nThis makes my config file so much more unreadable.\r\nCould this somehow be improved? i.e. can I get repeated options and better list handling?\r\n\r\nBest Regards\r\nMichael", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/83", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/83/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/83/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/83", "id": 208374085, "node_id": "MDU6SXNzdWUyMDgzNzQwODU=", "number": 83, "title": "Catching an error caused by a faulty config/settings file", "user": {"login": "gamesbook", "id": 354027, "node_id": "MDQ6VXNlcjM1NDAyNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/354027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gamesbook", "html_url": "https://github.com/gamesbook", "followers_url": "https://api.github.com/users/gamesbook/followers", "following_url": "https://api.github.com/users/gamesbook/following{/other_user}", "gists_url": "https://api.github.com/users/gamesbook/gists{/gist_id}", "starred_url": "https://api.github.com/users/gamesbook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gamesbook/subscriptions", "organizations_url": "https://api.github.com/users/gamesbook/orgs", "repos_url": "https://api.github.com/users/gamesbook/repos", "events_url": "https://api.github.com/users/gamesbook/events{/privacy}", "received_events_url": "https://api.github.com/users/gamesbook/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-17T08:46:34Z", "updated_at": "2017-04-30T14:13:05Z", "closed_at": "2017-04-30T14:13:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be extremely useful if there was a way to trap an error arising from a misconfigured settings file e.g. the parser requires `user` but the file has the setting `username`.\r\n\r\nI would like to be able to do this:\r\n\r\n```\r\ntry:\r\n    parser.parse_args()\r\nexcept Exception as err:\r\n    logger.error('Unable to load settings:%s' % err)\r\n```\r\n\r\nAt present, the script just \"dies\":\r\n```\r\nusage: arg.py [-h] [-s SETTINGS] [-n NAME] [-p PORT] [-o HOST] [-u USER]\r\narg.py: error: unrecognized arguments: --username derek\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/82", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/82/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/82/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/82", "id": 207897635, "node_id": "MDU6SXNzdWUyMDc4OTc2MzU=", "number": 82, "title": "Allow \"1\" or \"0\" for boolean environment variables", "user": {"login": "stuaxo", "id": 179677, "node_id": "MDQ6VXNlcjE3OTY3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/179677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stuaxo", "html_url": "https://github.com/stuaxo", "followers_url": "https://api.github.com/users/stuaxo/followers", "following_url": "https://api.github.com/users/stuaxo/following{/other_user}", "gists_url": "https://api.github.com/users/stuaxo/gists{/gist_id}", "starred_url": "https://api.github.com/users/stuaxo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stuaxo/subscriptions", "organizations_url": "https://api.github.com/users/stuaxo/orgs", "repos_url": "https://api.github.com/users/stuaxo/repos", "events_url": "https://api.github.com/users/stuaxo/events{/privacy}", "received_events_url": "https://api.github.com/users/stuaxo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-15T19:05:51Z", "updated_at": "2017-09-10T18:24:18Z", "closed_at": "2017-09-10T18:24:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Any chance of allowing 1 and 0 for these types of params ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/79", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/79/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/79/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/79", "id": 196421528, "node_id": "MDU6SXNzdWUxOTY0MjE1Mjg=", "number": 79, "title": "docs should mention that envvars don't support lists yet", "user": {"login": "jdelic", "id": 1956349, "node_id": "MDQ6VXNlcjE5NTYzNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1956349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdelic", "html_url": "https://github.com/jdelic", "followers_url": "https://api.github.com/users/jdelic/followers", "following_url": "https://api.github.com/users/jdelic/following{/other_user}", "gists_url": "https://api.github.com/users/jdelic/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdelic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdelic/subscriptions", "organizations_url": "https://api.github.com/users/jdelic/orgs", "repos_url": "https://api.github.com/users/jdelic/repos", "events_url": "https://api.github.com/users/jdelic/events{/privacy}", "received_events_url": "https://api.github.com/users/jdelic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-19T14:06:28Z", "updated_at": "2017-12-26T19:00:15Z", "closed_at": "2017-12-26T19:00:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just spent about 2 hours debugging and then realized that configargparse [does not support lists in envvars, as noted by a single `TODO`](https://github.com/bw2/ConfigArgParse/blob/9b3244efa26058b2d724794363f2bc2b279aa293/configargparse.py#L467). That's unfortunate and not mentioned anywhere as far as I can tell :).\r\n\r\nActually, parsing envvars for lists would be even better, but I assume it's not easy to do, which is why it hasn't been done yet.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/77", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/77/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/77/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/77", "id": 189391263, "node_id": "MDU6SXNzdWUxODkzOTEyNjM=", "number": 77, "title": "\"allow_abbrev=False\" doesn't work", "user": {"login": "londumas", "id": 3166436, "node_id": "MDQ6VXNlcjMxNjY0MzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/3166436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/londumas", "html_url": "https://github.com/londumas", "followers_url": "https://api.github.com/users/londumas/followers", "following_url": "https://api.github.com/users/londumas/following{/other_user}", "gists_url": "https://api.github.com/users/londumas/gists{/gist_id}", "starred_url": "https://api.github.com/users/londumas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/londumas/subscriptions", "organizations_url": "https://api.github.com/users/londumas/orgs", "repos_url": "https://api.github.com/users/londumas/repos", "events_url": "https://api.github.com/users/londumas/events{/privacy}", "received_events_url": "https://api.github.com/users/londumas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-11-15T13:27:15Z", "updated_at": "2017-12-26T18:58:56Z", "closed_at": "2017-12-26T18:58:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "With the following code:\r\n\r\n```\r\nimport configargparse\r\n\r\nparser = configargparse.ArgParser(allow_abbrev=False)\r\n\r\nparser.add('--aaa',type=types.IntType,required=False)\r\n\r\nargs = parser.parse_args()\r\n\r\nprint args\r\n```\r\n\r\ndoing the following command line works, it shouldn't\r\n```\r\npython test_configargparse_abbreviation.py --a 1\r\n```\r\nNamespace(aaa=1)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/76", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/76/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/76/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/76", "id": 187958103, "node_id": "MDU6SXNzdWUxODc5NTgxMDM=", "number": 76, "title": "conflict between command lines and config files", "user": {"login": "londumas", "id": 3166436, "node_id": "MDQ6VXNlcjMxNjY0MzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/3166436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/londumas", "html_url": "https://github.com/londumas", "followers_url": "https://api.github.com/users/londumas/followers", "following_url": "https://api.github.com/users/londumas/following{/other_user}", "gists_url": "https://api.github.com/users/londumas/gists{/gist_id}", "starred_url": "https://api.github.com/users/londumas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/londumas/subscriptions", "organizations_url": "https://api.github.com/users/londumas/orgs", "repos_url": "https://api.github.com/users/londumas/repos", "events_url": "https://api.github.com/users/londumas/events{/privacy}", "received_events_url": "https://api.github.com/users/londumas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-11-08T10:42:02Z", "updated_at": "2017-04-30T13:53:17Z", "closed_at": "2017-04-30T13:53:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here is a strange bug / feature:\r\n\r\nwith the following python file:\r\n\r\n`\r\nimport configargparse\r\n\r\nimport types\r\n\r\nparser = configargparse.ArgParser()\r\n\r\nparser.add('-c', '--config_file', required=False, is_config_file=True, help='config file path')\r\nparser.add('--hello',type=types.IntType,required=False)\r\n\r\nargs, unknown = parser.parse_known_args()\r\nprint unknown\r\n`\r\n\r\n\r\nand the following ini file:\r\n\r\n`\r\n\r\na2a = 0.5\r\na3a = 0.5\r\n`\r\n\r\nwe have the following different results:\r\n`\r\n\r\n python test_problem_configparser.py -c test_problem_configparser.ini --hello 2\r\n['--a3a', '0.5']\r\npython test_problem_configparser.py -c test_problem_configparser.ini --hello 3\r\n['--a2a', '0.5']\r\npython test_problem_configparser.py -c test_problem_configparser.ini --hello 1\r\n['--a2a', '0.5', '--a3a', '0.5']\r\n`\r\n\r\nIt should have something to do with allow_abbrev, but I have tested and it changes nothing.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/74", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/74/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/74/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/74", "id": 182796393, "node_id": "MDU6SXNzdWUxODI3OTYzOTM=", "number": 74, "title": "Breaking change for Subparsers", "user": {"login": "einsweniger", "id": 699867, "node_id": "MDQ6VXNlcjY5OTg2Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/699867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/einsweniger", "html_url": "https://github.com/einsweniger", "followers_url": "https://api.github.com/users/einsweniger/followers", "following_url": "https://api.github.com/users/einsweniger/following{/other_user}", "gists_url": "https://api.github.com/users/einsweniger/gists{/gist_id}", "starred_url": "https://api.github.com/users/einsweniger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/einsweniger/subscriptions", "organizations_url": "https://api.github.com/users/einsweniger/orgs", "repos_url": "https://api.github.com/users/einsweniger/repos", "events_url": "https://api.github.com/users/einsweniger/events{/privacy}", "received_events_url": "https://api.github.com/users/einsweniger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-13T13:55:11Z", "updated_at": "2017-12-26T18:53:06Z", "closed_at": "2017-12-26T18:53:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Commit 381a165a098e140247bda8e00a9312def03f4663 breaks subparsers:\n\nInstead of appending config file values, to those already on commandline, it is now the other way round.\n\nMostly since \n\n> args += env_var_args\n\nis not the same as\n\n> args = env_var_args + args\n\nWhen I execute a command that is supposed to use git-like sub-command syntax like:\n\n> $ git status --full\n\nThe v0.10 behaviour resulted in:\n\n> args = ['status', '--full', CFG_PARAMS]\n\nv0.11 will now hand this to argparse\n\n> args = [CFG_PARAMS, 'status', '--full']\n\nArgparse will then exit, because the main parser will not accept the parameters and additionaly cannot hand them down to the subparser.\n\nThe fix _should_ be as easy as switching from\n\n> args = env_var_args + args\n\nto\n\n> args = args + env_var_args\n\non several lines in configargparse, but since I don't know if some other things do depend on the new behavior, I should leave this up to you.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/73", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/73/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/73/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/73", "id": 181932185, "node_id": "MDU6SXNzdWUxODE5MzIxODU=", "number": 73, "title": "`allow_abbrevs` not supported if another package pulls in `argparse` from PyPI", "user": {"login": "smspillaz", "id": 775309, "node_id": "MDQ6VXNlcjc3NTMwOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/775309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smspillaz", "html_url": "https://github.com/smspillaz", "followers_url": "https://api.github.com/users/smspillaz/followers", "following_url": "https://api.github.com/users/smspillaz/following{/other_user}", "gists_url": "https://api.github.com/users/smspillaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/smspillaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smspillaz/subscriptions", "organizations_url": "https://api.github.com/users/smspillaz/orgs", "repos_url": "https://api.github.com/users/smspillaz/repos", "events_url": "https://api.github.com/users/smspillaz/events{/privacy}", "received_events_url": "https://api.github.com/users/smspillaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-10T03:32:19Z", "updated_at": "2017-09-14T02:14:07Z", "closed_at": "2017-09-14T02:14:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently the package detects the python version to determine if `allow_abbrevs` is supported. However, if the `argparse` package from PyPI is installed, that does not support this option, but `configargparse` supports that it does and fails.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/70", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/70/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/70/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/70", "id": 176363827, "node_id": "MDU6SXNzdWUxNzYzNjM4Mjc=", "number": 70, "title": "Saving back the configuration?", "user": {"login": "KerstinKeller", "id": 13848742, "node_id": "MDQ6VXNlcjEzODQ4NzQy", "avatar_url": "https://avatars3.githubusercontent.com/u/13848742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KerstinKeller", "html_url": "https://github.com/KerstinKeller", "followers_url": "https://api.github.com/users/KerstinKeller/followers", "following_url": "https://api.github.com/users/KerstinKeller/following{/other_user}", "gists_url": "https://api.github.com/users/KerstinKeller/gists{/gist_id}", "starred_url": "https://api.github.com/users/KerstinKeller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KerstinKeller/subscriptions", "organizations_url": "https://api.github.com/users/KerstinKeller/orgs", "repos_url": "https://api.github.com/users/KerstinKeller/repos", "events_url": "https://api.github.com/users/KerstinKeller/events{/privacy}", "received_events_url": "https://api.github.com/users/KerstinKeller/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-09-12T12:32:11Z", "updated_at": "2017-12-27T07:58:07Z", "closed_at": "2017-12-27T07:58:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nmy usecase is that i would like to overwrite my configuration file with the information provided on the command line. Also for me it should be the default behavior, e.g. the user does not have to specify a file for this, but it should be written to the config file that it was read from.\n\nUnfortunately, I can't quite figure out how that can be achieved. Searching through the code, I saw that you can add an argument with `is_write_out_config_file_arg=True`, but then the program will exit.\n\nIs it possible, to dump the configuration to a file such that it can be reread?\n\n```\np = configargparse.getArgumentParser(default_config_files=['./.cfg'])\n# General properties\np.add('-c', '--config', is_config_file=True, help='config file path')\np.add_argument(\"myarg\", default=\"some_str\", type=str, help=\"A random string parameter\")\n# ....\np.parse_args()\n\n#now dump it - how to?\np.dump_config(p.config)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/69", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/69/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/69/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/69", "id": 176039870, "node_id": "MDU6SXNzdWUxNzYwMzk4NzA=", "number": 69, "title": "is_write_out_config_file_arg doesn't work with custom types", "user": {"login": "jordansamuels", "id": 610909, "node_id": "MDQ6VXNlcjYxMDkwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/610909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jordansamuels", "html_url": "https://github.com/jordansamuels", "followers_url": "https://api.github.com/users/jordansamuels/followers", "following_url": "https://api.github.com/users/jordansamuels/following{/other_user}", "gists_url": "https://api.github.com/users/jordansamuels/gists{/gist_id}", "starred_url": "https://api.github.com/users/jordansamuels/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jordansamuels/subscriptions", "organizations_url": "https://api.github.com/users/jordansamuels/orgs", "repos_url": "https://api.github.com/users/jordansamuels/repos", "events_url": "https://api.github.com/users/jordansamuels/events{/privacy}", "received_events_url": "https://api.github.com/users/jordansamuels/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-09T15:37:31Z", "updated_at": "2017-04-30T13:49:36Z", "closed_at": "2017-04-30T13:49:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I love the ability to memorialize ad hoc options into a config file via is_write_out_config_file_arg.  However, this doesn't work with custom types. Consider the following code:\n\n```\ndef valid_date(s):\n    try:\n        return datetime.datetime.strptime(s, \"%Y-%m-%d\")\n    except ValueError:\n        raise Exception(\"Not a valid date: {s}\".format(**locals()))\n\ndef main():\n    p = ArgParser()\n    p.add_argument('--config-file', is_config_file_arg=True)\n    p.add_argument('--output-config', is_write_out_config_file_arg=True, help='write config file and exit')\n    p.add_argument('--date', required=True, type=valid_date)\n\n    print(p.parse_args())\n```\n\nIf we run via `test.py --date 2016-09-09 --output-config test.ini` then the test.ini will be:\n\n```\noutput-config = test.ini\ndate = 2016-09-09 00:00:00\n```\n\nBut this will not work when we run `test.py --config-file test.ini` because the date value is no longer valid.  We prefer the output to be:\n\n```\noutput-config = test.ini\ndate = 2016-09-09\n```\n\nI devised a fix for this that involves using original command-line arguments for the values, instead of parsed values.  Let me know if you'd like a pull request.\n\nThanks,\nJordan\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/68", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/68/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/68/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/68", "id": 174243401, "node_id": "MDU6SXNzdWUxNzQyNDM0MDE=", "number": 68, "title": "How to write a config file", "user": {"login": "londumas", "id": 3166436, "node_id": "MDQ6VXNlcjMxNjY0MzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/3166436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/londumas", "html_url": "https://github.com/londumas", "followers_url": "https://api.github.com/users/londumas/followers", "following_url": "https://api.github.com/users/londumas/following{/other_user}", "gists_url": "https://api.github.com/users/londumas/gists{/gist_id}", "starred_url": "https://api.github.com/users/londumas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/londumas/subscriptions", "organizations_url": "https://api.github.com/users/londumas/orgs", "repos_url": "https://api.github.com/users/londumas/repos", "events_url": "https://api.github.com/users/londumas/events{/privacy}", "received_events_url": "https://api.github.com/users/londumas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-31T10:54:29Z", "updated_at": "2016-09-04T22:42:36Z", "closed_at": "2016-09-04T22:42:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nThe write command for a config file is impossible to find.\n\nBefore, with configparser, I would do:\n\nimport configparser\nconfig = configparser.ConfigParser()\nconfig.write(<file>)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/67", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/67/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/67/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/67", "id": 170787646, "node_id": "MDU6SXNzdWUxNzA3ODc2NDY=", "number": 67, "title": "Needs to be a way to escape comment characters # and ;", "user": {"login": "DiscoTim", "id": 20764373, "node_id": "MDQ6VXNlcjIwNzY0Mzcz", "avatar_url": "https://avatars3.githubusercontent.com/u/20764373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DiscoTim", "html_url": "https://github.com/DiscoTim", "followers_url": "https://api.github.com/users/DiscoTim/followers", "following_url": "https://api.github.com/users/DiscoTim/following{/other_user}", "gists_url": "https://api.github.com/users/DiscoTim/gists{/gist_id}", "starred_url": "https://api.github.com/users/DiscoTim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DiscoTim/subscriptions", "organizations_url": "https://api.github.com/users/DiscoTim/orgs", "repos_url": "https://api.github.com/users/DiscoTim/repos", "events_url": "https://api.github.com/users/DiscoTim/events{/privacy}", "received_events_url": "https://api.github.com/users/DiscoTim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-12T02:29:48Z", "updated_at": "2016-09-05T00:04:53Z", "closed_at": "2016-09-05T00:04:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "As the title says, maybe through quoted values or escape characters.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/66", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/66/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/66/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/66", "id": 170282177, "node_id": "MDU6SXNzdWUxNzAyODIxNzc=", "number": 66, "title": "DefaultConfigFileParser's serialize does not work with lists of ints/floats", "user": {"login": "vonclites", "id": 4926264, "node_id": "MDQ6VXNlcjQ5MjYyNjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4926264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vonclites", "html_url": "https://github.com/vonclites", "followers_url": "https://api.github.com/users/vonclites/followers", "following_url": "https://api.github.com/users/vonclites/following{/other_user}", "gists_url": "https://api.github.com/users/vonclites/gists{/gist_id}", "starred_url": "https://api.github.com/users/vonclites/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vonclites/subscriptions", "organizations_url": "https://api.github.com/users/vonclites/orgs", "repos_url": "https://api.github.com/users/vonclites/repos", "events_url": "https://api.github.com/users/vonclites/events{/privacy}", "received_events_url": "https://api.github.com/users/vonclites/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-09T22:02:41Z", "updated_at": "2016-09-04T23:53:52Z", "closed_at": "2016-09-04T23:53:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "The newer version uses [str.join(_iterable_)](https://docs.python.org/2/library/stdtypes.html#str.join) where the elements in _iterable_ must be strings.\n\n```\ndef serialize(self, items):\n        \"\"\"Does the inverse of config parsing by taking parsed values and\n        converting them back to a string representing config file contents.\n        \"\"\"\n        r = StringIO()\n        for key, value in items.items():\n            if type(value) == list:\n                # handle special case of lists\n                value = \"[\"+\", \".join(value)+\"]\"\n            r.write(\"%s = %s\\n\" % (key, value))\n        return r.getvalue()\n```\n\nCompare with older version from https://pypi.python.org/pypi/ConfigArgParse:\n\n```\n    def serialize(self, items):\n        \"\"\"Does the inverse of config parsing by taking parsed values and\n        converting them back to a string representing config file contents.\n\n        Args:\n            items: an OrderedDict with items to be written to the config file\n        Returns:\n            contents of config file as a string\n        \"\"\"\n        r = StringIO()\n        for key, value in items.items():\n            r.write(\"%s = %s\\n\" % (key, value))\n        return r.getvalue()\n```\n\nWhy the change?  It was actually working fine for me before.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/65", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/65/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/65/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/65", "id": 168812868, "node_id": "MDU6SXNzdWUxNjg4MTI4Njg=", "number": 65, "title": "Pypi is not up to date 0.11.0", "user": {"login": "flaurencin", "id": 10370694, "node_id": "MDQ6VXNlcjEwMzcwNjk0", "avatar_url": "https://avatars3.githubusercontent.com/u/10370694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaurencin", "html_url": "https://github.com/flaurencin", "followers_url": "https://api.github.com/users/flaurencin/followers", "following_url": "https://api.github.com/users/flaurencin/following{/other_user}", "gists_url": "https://api.github.com/users/flaurencin/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaurencin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaurencin/subscriptions", "organizations_url": "https://api.github.com/users/flaurencin/orgs", "repos_url": "https://api.github.com/users/flaurencin/repos", "events_url": "https://api.github.com/users/flaurencin/events{/privacy}", "received_events_url": "https://api.github.com/users/flaurencin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-08-02T06:57:42Z", "updated_at": "2016-09-12T09:04:39Z", "closed_at": "2016-09-05T01:59:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nCould you update Pypi, because it would be convinient as I'm using a lot Yaml configuration files?\n\nKind regards,\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/63", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/63/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/63/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/63", "id": 167880306, "node_id": "MDU6SXNzdWUxNjc4ODAzMDY=", "number": 63, "title": "new release soon?", "user": {"login": "bcdarwin", "id": 164148, "node_id": "MDQ6VXNlcjE2NDE0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/164148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bcdarwin", "html_url": "https://github.com/bcdarwin", "followers_url": "https://api.github.com/users/bcdarwin/followers", "following_url": "https://api.github.com/users/bcdarwin/following{/other_user}", "gists_url": "https://api.github.com/users/bcdarwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/bcdarwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bcdarwin/subscriptions", "organizations_url": "https://api.github.com/users/bcdarwin/orgs", "repos_url": "https://api.github.com/users/bcdarwin/repos", "events_url": "https://api.github.com/users/bcdarwin/events{/privacy}", "received_events_url": "https://api.github.com/users/bcdarwin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-27T15:15:37Z", "updated_at": "2016-09-05T02:00:01Z", "closed_at": "2016-09-05T02:00:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Some important bugfixes have landed in develop but not made it into a release yet ... wondering if you can make one so that a \"good\" version can be resolved from PyPI without having to put GitHub URIs into my `setup.py`  .... thanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/62", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/62/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/62/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/62", "id": 163949522, "node_id": "MDU6SXNzdWUxNjM5NDk1MjI=", "number": 62, "title": "bug when setting a float value to -10. and not -10.0", "user": {"login": "londumas", "id": 3166436, "node_id": "MDQ6VXNlcjMxNjY0MzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/3166436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/londumas", "html_url": "https://github.com/londumas", "followers_url": "https://api.github.com/users/londumas/followers", "following_url": "https://api.github.com/users/londumas/following{/other_user}", "gists_url": "https://api.github.com/users/londumas/gists{/gist_id}", "starred_url": "https://api.github.com/users/londumas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/londumas/subscriptions", "organizations_url": "https://api.github.com/users/londumas/orgs", "repos_url": "https://api.github.com/users/londumas/repos", "events_url": "https://api.github.com/users/londumas/events{/privacy}", "received_events_url": "https://api.github.com/users/londumas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2016-07-05T21:20:16Z", "updated_at": "2016-11-09T08:53:15Z", "closed_at": "2016-09-29T21:00:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "When fixing a value defined with:\nparser.add('--'+par_name,type=types.FloatType,required=False,help=par_help, default=par_default)\n\nI get an error if in the config file i set \n`\npar_name = -10.\n`\nor \n`\npar_name = -9.\n`\nThe error doesn't occur in the following:\n `\npar_name = -10.0\n\npar_name = 10.\n\npar_name = 10.0\n`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/61", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/61/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/61/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/61", "id": 158958914, "node_id": "MDU6SXNzdWUxNTg5NTg5MTQ=", "number": 61, "title": "support for config directories", "user": {"login": "mzagrabe", "id": 4367686, "node_id": "MDQ6VXNlcjQzNjc2ODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/4367686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzagrabe", "html_url": "https://github.com/mzagrabe", "followers_url": "https://api.github.com/users/mzagrabe/followers", "following_url": "https://api.github.com/users/mzagrabe/following{/other_user}", "gists_url": "https://api.github.com/users/mzagrabe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzagrabe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzagrabe/subscriptions", "organizations_url": "https://api.github.com/users/mzagrabe/orgs", "repos_url": "https://api.github.com/users/mzagrabe/repos", "events_url": "https://api.github.com/users/mzagrabe/events{/privacy}", "received_events_url": "https://api.github.com/users/mzagrabe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-07T15:51:10Z", "updated_at": "2016-09-05T00:29:25Z", "closed_at": "2016-09-05T00:29:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nThanks for writing configargparse - it is great.\n\nIt would be nice to extend the software to include arbitrary config snippets in a directory without having to specify each snippet file. Perhaps adding a named parameter to the constructor:\n\ndefault_config_directories = [ '/etc/software/conf-enabled' ]\ndefault_config_directories_globs = [ '_.conf', '_.yaml' ]\n\nor\n\ndefault config_directories = [\n    { 'directory' = '/etc/software/conf-enabled', glob = '*.conf' },\n]\n\nPros and cons to each.\n\nAlso, a way to specify the config-directory on the command line:\n\nconfig_arg_parser.add(\n    '--config-directory',\n    is_config_directory = True,\n    glob = '*.conf',\n)\n\nFor larger software projects, it is nice to break the configurations into snippets. This would be a very useful feature. It would also allow mimicking a conf-available, conf-enabled paradigm.\n\nThanks for considering it!\n\n-m\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/60", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/60/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/60/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/60", "id": 153314545, "node_id": "MDU6SXNzdWUxNTMzMTQ1NDU=", "number": 60, "title": "Cannot escape comment characters within value in configuration file", "user": {"login": "mindthump", "id": 8517501, "node_id": "MDQ6VXNlcjg1MTc1MDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/8517501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mindthump", "html_url": "https://github.com/mindthump", "followers_url": "https://api.github.com/users/mindthump/followers", "following_url": "https://api.github.com/users/mindthump/following{/other_user}", "gists_url": "https://api.github.com/users/mindthump/gists{/gist_id}", "starred_url": "https://api.github.com/users/mindthump/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mindthump/subscriptions", "organizations_url": "https://api.github.com/users/mindthump/orgs", "repos_url": "https://api.github.com/users/mindthump/repos", "events_url": "https://api.github.com/users/mindthump/events{/privacy}", "received_events_url": "https://api.github.com/users/mindthump/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-05-05T20:09:56Z", "updated_at": "2016-09-16T19:37:53Z", "closed_at": "2016-09-04T22:44:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "For a configuration file ConfigfileParser.parse(), using a semicolon embedded in the value string (my case being SQL connection strings) cause the parser to fail. There should be a way to 1.) turn off comment parsing (the whole line becomes the value) or 2.) escape individual semicolon and hash characters or 3.) quote the value to separate it from comments. (Using 0.10.0 from PyPI)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/59", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/59/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/59/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/59", "id": 149721530, "node_id": "MDU6SXNzdWUxNDk3MjE1MzA=", "number": 59, "title": "ArgParser() \"Description' parameter when outputted via -h option prints no newline characters", "user": {"login": "PlkMarudny", "id": 4361591, "node_id": "MDQ6VXNlcjQzNjE1OTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4361591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PlkMarudny", "html_url": "https://github.com/PlkMarudny", "followers_url": "https://api.github.com/users/PlkMarudny/followers", "following_url": "https://api.github.com/users/PlkMarudny/following{/other_user}", "gists_url": "https://api.github.com/users/PlkMarudny/gists{/gist_id}", "starred_url": "https://api.github.com/users/PlkMarudny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PlkMarudny/subscriptions", "organizations_url": "https://api.github.com/users/PlkMarudny/orgs", "repos_url": "https://api.github.com/users/PlkMarudny/repos", "events_url": "https://api.github.com/users/PlkMarudny/events{/privacy}", "received_events_url": "https://api.github.com/users/PlkMarudny/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-20T10:00:34Z", "updated_at": "2016-09-05T00:32:39Z", "closed_at": "2016-09-05T00:32:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Effectively, a help text (\"Args that start with ...\") starts at the same line where description ends, for example:\n\n`A special tool Args that start with`\n\nDescription is set to 'A special tool'\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/57", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/57/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/57/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/57", "id": 142187177, "node_id": "MDU6SXNzdWUxNDIxODcxNzc=", "number": 57, "title": "Value from env-var doesn't work for options defined on main parser when used with subparsers", "user": {"login": "itamaro", "id": 290943, "node_id": "MDQ6VXNlcjI5MDk0Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/290943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itamaro", "html_url": "https://github.com/itamaro", "followers_url": "https://api.github.com/users/itamaro/followers", "following_url": "https://api.github.com/users/itamaro/following{/other_user}", "gists_url": "https://api.github.com/users/itamaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/itamaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itamaro/subscriptions", "organizations_url": "https://api.github.com/users/itamaro/orgs", "repos_url": "https://api.github.com/users/itamaro/repos", "events_url": "https://api.github.com/users/itamaro/events{/privacy}", "received_events_url": "https://api.github.com/users/itamaro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-03-20T18:06:54Z", "updated_at": "2018-06-06T18:40:00Z", "closed_at": "2016-09-05T00:49:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here's a minimal example:\n\n``` python\n\nparser = configargparse.getArgumentParser()\nparser.add('--foo', env_var='MY_FOO')\nsubparsers = parser.add_subparsers(help='Choose command')\nsub_parser = subparsers.add_parser('sub')\nargs = parser.parse()\n```\n\nwhen running `MY_FOO=bar ./my_script.py` this works fine, but `MY_FOO=bar ./my_script.py sub` throws this errors:\n\n`my_script.py: error: unrecognized arguments: --foo`\n\nI assume this is because `--foo` is not an argument of the subparser, and this works by appending `--foo $MY_FOO` at the end of `sys.argv`...\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/54", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/54/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/54/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/54", "id": 139461535, "node_id": "MDU6SXNzdWUxMzk0NjE1MzU=", "number": 54, "title": "adding certain types of config directives to config files breaks argcomplete tab-completion", "user": {"login": "ryran", "id": 1092618, "node_id": "MDQ6VXNlcjEwOTI2MTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1092618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryran", "html_url": "https://github.com/ryran", "followers_url": "https://api.github.com/users/ryran/followers", "following_url": "https://api.github.com/users/ryran/following{/other_user}", "gists_url": "https://api.github.com/users/ryran/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryran/subscriptions", "organizations_url": "https://api.github.com/users/ryran/orgs", "repos_url": "https://api.github.com/users/ryran/repos", "events_url": "https://api.github.com/users/ryran/events{/privacy}", "received_events_url": "https://api.github.com/users/ryran/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "bw2", "id": 6240170, "node_id": "MDQ6VXNlcjYyNDAxNzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/6240170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bw2", "html_url": "https://github.com/bw2", "followers_url": "https://api.github.com/users/bw2/followers", "following_url": "https://api.github.com/users/bw2/following{/other_user}", "gists_url": "https://api.github.com/users/bw2/gists{/gist_id}", "starred_url": "https://api.github.com/users/bw2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bw2/subscriptions", "organizations_url": "https://api.github.com/users/bw2/orgs", "repos_url": "https://api.github.com/users/bw2/repos", "events_url": "https://api.github.com/users/bw2/events{/privacy}", "received_events_url": "https://api.github.com/users/bw2/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bw2", "id": 6240170, "node_id": "MDQ6VXNlcjYyNDAxNzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/6240170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bw2", "html_url": "https://github.com/bw2", "followers_url": "https://api.github.com/users/bw2/followers", "following_url": "https://api.github.com/users/bw2/following{/other_user}", "gists_url": "https://api.github.com/users/bw2/gists{/gist_id}", "starred_url": "https://api.github.com/users/bw2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bw2/subscriptions", "organizations_url": "https://api.github.com/users/bw2/orgs", "repos_url": "https://api.github.com/users/bw2/repos", "events_url": "https://api.github.com/users/bw2/events{/privacy}", "received_events_url": "https://api.github.com/users/bw2/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2016-03-09T02:57:35Z", "updated_at": "2017-01-21T01:05:42Z", "closed_at": "2016-09-29T21:01:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would love to get some help with this from someone awesome.\n\nhttps://github.com/kislyuk/argcomplete/issues/123\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/51", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/51/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/51/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/51", "id": 138024736, "node_id": "MDU6SXNzdWUxMzgwMjQ3MzY=", "number": 51, "title": "Change API To conform to PEP 8 names", "user": {"login": "bignose-debian", "id": 15084214, "node_id": "MDQ6VXNlcjE1MDg0MjE0", "avatar_url": "https://avatars3.githubusercontent.com/u/15084214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bignose-debian", "html_url": "https://github.com/bignose-debian", "followers_url": "https://api.github.com/users/bignose-debian/followers", "following_url": "https://api.github.com/users/bignose-debian/following{/other_user}", "gists_url": "https://api.github.com/users/bignose-debian/gists{/gist_id}", "starred_url": "https://api.github.com/users/bignose-debian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bignose-debian/subscriptions", "organizations_url": "https://api.github.com/users/bignose-debian/orgs", "repos_url": "https://api.github.com/users/bignose-debian/repos", "events_url": "https://api.github.com/users/bignose-debian/events{/privacy}", "received_events_url": "https://api.github.com/users/bignose-debian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-03-02T23:23:34Z", "updated_at": "2016-09-05T00:40:47Z", "closed_at": "2016-09-05T00:40:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "There doesn't seem to be a good reason for violating PEP 8 for some of the API.\n\nFor example, `configargparse.getArgumentParser` should better be named `configargparse.get_argument_parser` or similar.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/50", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/50/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/50/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/50", "id": 135076513, "node_id": "MDU6SXNzdWUxMzUwNzY1MTM=", "number": 50, "title": "Allow some command line options to be merged with those in the config", "user": {"login": "dufferzafar", "id": 1449512, "node_id": "MDQ6VXNlcjE0NDk1MTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1449512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dufferzafar", "html_url": "https://github.com/dufferzafar", "followers_url": "https://api.github.com/users/dufferzafar/followers", "following_url": "https://api.github.com/users/dufferzafar/following{/other_user}", "gists_url": "https://api.github.com/users/dufferzafar/gists{/gist_id}", "starred_url": "https://api.github.com/users/dufferzafar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dufferzafar/subscriptions", "organizations_url": "https://api.github.com/users/dufferzafar/orgs", "repos_url": "https://api.github.com/users/dufferzafar/repos", "events_url": "https://api.github.com/users/dufferzafar/events{/privacy}", "received_events_url": "https://api.github.com/users/dufferzafar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2016-02-20T13:52:44Z", "updated_at": "2020-05-13T12:31:27Z", "closed_at": "2017-04-30T14:16:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Taking from the first point of Features section of the readme:\n\n> If a value is specified in more than one way then: command line > environment variables > config file values > defaults.\n\nConfigArgParse (CAP) overrides the values specified in the config file with those specified in the command line arguments. For most of the cases this behaviour is nice, except when it isn't.\n\nConsider the case of a [mitmproxy user](https://github.com/mitmproxy/mitmproxy/issues/953) who has specified some scripts in the config file, and when they specify another script in the command line, the config ones get replaced.\n\nThe expected behaviour here is the merging of the list of scripts. \n\nI propose that CAP should add a new parameter (say `multiple`) to `parser.add_argument` that determines this override behaviour. So, for eg, the following snippet would result in an option that merges the values:\n\n``` python\nparser.add_argument(\n    \"-s\", \"--script\", \n    action=\"append\", type=str, dest=\"scripts\" default=[],\n    multiple=\"merge\"\n)\n```\n\nThe `multiple` parameter could have values: \n- `merge` - Merge the values specified in the command line, env variables & config files & defaults.\n- `override` - Follow the normal override process we follow now.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/49", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/49/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/49/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/49", "id": 134961031, "node_id": "MDU6SXNzdWUxMzQ5NjEwMzE=", "number": 49, "title": "Positional argument seperator '--' strips config/env values", "user": {"login": "sophie-h", "id": 3466497, "node_id": "MDQ6VXNlcjM0NjY0OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/3466497?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sophie-h", "html_url": "https://github.com/sophie-h", "followers_url": "https://api.github.com/users/sophie-h/followers", "following_url": "https://api.github.com/users/sophie-h/following{/other_user}", "gists_url": "https://api.github.com/users/sophie-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/sophie-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sophie-h/subscriptions", "organizations_url": "https://api.github.com/users/sophie-h/orgs", "repos_url": "https://api.github.com/users/sophie-h/repos", "events_url": "https://api.github.com/users/sophie-h/events{/privacy}", "received_events_url": "https://api.github.com/users/sophie-h/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-02-19T20:08:29Z", "updated_at": "2016-09-05T01:12:02Z", "closed_at": "2016-09-05T01:07:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "### `example.py`\n\n``` python\nimport configargparse\n\np = configargparse.ArgParser()\np.add('--required', required=True, env_var='TEST_REQUIRED')\n\nprint(p.parse_args())\n```\n### Results\n\n``` bash\nexport TEST_REQUIRED=value;\n\npython3 example.py\n# Namespace(required='value')\n\npython3 example.py --\n# usage: example.py [-h] --required REQUIRED\n# example.py: error: the following arguments are required: --required\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/48", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/48/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/48/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/48", "id": 134575277, "node_id": "MDU6SXNzdWUxMzQ1NzUyNzc=", "number": 48, "title": "Optionally allow to address positional arguments", "user": {"login": "sophie-h", "id": 3466497, "node_id": "MDQ6VXNlcjM0NjY0OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/3466497?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sophie-h", "html_url": "https://github.com/sophie-h", "followers_url": "https://api.github.com/users/sophie-h/followers", "following_url": "https://api.github.com/users/sophie-h/following{/other_user}", "gists_url": "https://api.github.com/users/sophie-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/sophie-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sophie-h/subscriptions", "organizations_url": "https://api.github.com/users/sophie-h/orgs", "repos_url": "https://api.github.com/users/sophie-h/repos", "events_url": "https://api.github.com/users/sophie-h/events{/privacy}", "received_events_url": "https://api.github.com/users/sophie-h/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-02-18T13:02:10Z", "updated_at": "2016-03-07T18:08:10Z", "closed_at": "2016-03-07T18:08:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "This function should be disabled per default since it might produce problems for some software. I would suggest that the metavar is used as the config parameter.\n\nProbably it is hard to figure out if a config value is a positional argument (and in principle there could be some ambiguity). Maybe 'uppercase' is a good convention to label positional arguments?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/47", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/47/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/47/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/47", "id": 133508039, "node_id": "MDU6SXNzdWUxMzM1MDgwMzk=", "number": 47, "title": "feature request: Better formatting of help text", "user": {"login": "SimplicityGuy", "id": 449189, "node_id": "MDQ6VXNlcjQ0OTE4OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/449189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplicityGuy", "html_url": "https://github.com/SimplicityGuy", "followers_url": "https://api.github.com/users/SimplicityGuy/followers", "following_url": "https://api.github.com/users/SimplicityGuy/following{/other_user}", "gists_url": "https://api.github.com/users/SimplicityGuy/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplicityGuy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplicityGuy/subscriptions", "organizations_url": "https://api.github.com/users/SimplicityGuy/orgs", "repos_url": "https://api.github.com/users/SimplicityGuy/repos", "events_url": "https://api.github.com/users/SimplicityGuy/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplicityGuy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-02-14T05:46:36Z", "updated_at": "2016-09-05T00:52:12Z", "closed_at": "2016-09-05T00:52:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Current help text is output very strangely:\n\n```\n  --user USER           user to login to foobar with [env var: FOOBAR_USER]\n  --password PASSWORD   user password to login to foobar with [env var:\n                        FOOBAR_PASSWORD]\n```\n\nPlease consider providing a formater that formats the help text as such:\n\n```\n  --user USER           user to login to foobar with\n                        [env var: FOOBAR_USER]\n  --password PASSWORD   user password to login to foobar with\n                        [env var: FOOBAR_PASSWORD]\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/45", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/45/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/45/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/45", "id": 133507579, "node_id": "MDU6SXNzdWUxMzM1MDc1Nzk=", "number": 45, "title": "Without argument groups, all options are in the 'optional arguments:\" group", "user": {"login": "SimplicityGuy", "id": 449189, "node_id": "MDQ6VXNlcjQ0OTE4OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/449189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplicityGuy", "html_url": "https://github.com/SimplicityGuy", "followers_url": "https://api.github.com/users/SimplicityGuy/followers", "following_url": "https://api.github.com/users/SimplicityGuy/following{/other_user}", "gists_url": "https://api.github.com/users/SimplicityGuy/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplicityGuy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplicityGuy/subscriptions", "organizations_url": "https://api.github.com/users/SimplicityGuy/orgs", "repos_url": "https://api.github.com/users/SimplicityGuy/repos", "events_url": "https://api.github.com/users/SimplicityGuy/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplicityGuy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-02-14T05:38:59Z", "updated_at": "2016-09-05T00:55:04Z", "closed_at": "2016-09-05T00:55:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Seems like if the `required=True` argument is set for any argument, by default 2 argument groups should be created... required and optional. Even if `required=True` is set, in the help message, these show up under the text of: `optional arguments:`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/44", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/44/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/44/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/44", "id": 132570998, "node_id": "MDU6SXNzdWUxMzI1NzA5OTg=", "number": 44, "title": "Comparison with other packages is out of date", "user": {"login": "jayvdb", "id": 15092, "node_id": "MDQ6VXNlcjE1MDky", "avatar_url": "https://avatars1.githubusercontent.com/u/15092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayvdb", "html_url": "https://github.com/jayvdb", "followers_url": "https://api.github.com/users/jayvdb/followers", "following_url": "https://api.github.com/users/jayvdb/following{/other_user}", "gists_url": "https://api.github.com/users/jayvdb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayvdb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayvdb/subscriptions", "organizations_url": "https://api.github.com/users/jayvdb/orgs", "repos_url": "https://api.github.com/users/jayvdb/repos", "events_url": "https://api.github.com/users/jayvdb/events{/privacy}", "received_events_url": "https://api.github.com/users/jayvdb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-02-09T23:53:05Z", "updated_at": "2016-03-07T22:05:22Z", "closed_at": "2016-03-07T17:55:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://pypi.python.org/pypi/ConfArgParse is now 1.1.20 vs 1.0.15\n\nhttps://pypi.python.org/pypi/appsettings is now 0.7 vs 0.5\n\nhttps://pypi.python.org/pypi/yconf is now 0.3.3 vs 0.3.2\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/43", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/43/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/43/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/43", "id": 131574608, "node_id": "MDU6SXNzdWUxMzE1NzQ2MDg=", "number": 43, "title": "Config file output can generate illigitimate values for keys when using custom Actions", "user": {"login": "patternspandemic", "id": 15645854, "node_id": "MDQ6VXNlcjE1NjQ1ODU0", "avatar_url": "https://avatars2.githubusercontent.com/u/15645854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patternspandemic", "html_url": "https://github.com/patternspandemic", "followers_url": "https://api.github.com/users/patternspandemic/followers", "following_url": "https://api.github.com/users/patternspandemic/following{/other_user}", "gists_url": "https://api.github.com/users/patternspandemic/gists{/gist_id}", "starred_url": "https://api.github.com/users/patternspandemic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patternspandemic/subscriptions", "organizations_url": "https://api.github.com/users/patternspandemic/orgs", "repos_url": "https://api.github.com/users/patternspandemic/repos", "events_url": "https://api.github.com/users/patternspandemic/events{/privacy}", "received_events_url": "https://api.github.com/users/patternspandemic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-02-05T07:17:10Z", "updated_at": "2016-09-05T01:05:04Z", "closed_at": "2016-09-05T01:05:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Cause: [`ArgumentParser.get_items_for_config_file_output`](https://github.com/bw2/ConfigArgParse/blob/master/configargparse.py#L620) makes the incorrect assumption that an argument's config file value can always be found in the parsed namespace's attribute named after `action.dest`. With custom Actions this value can be arbitrary.\n\nEffect: Using the action's computed value rather than the command-line's string value results in a config key-value pair that does not reproduce the original specified options.\n\n``` python\nclass CustomAction(configargparse.Action):\n    def __call__(self, parser, namespace, values, option_string=None):\n        setattr(namespace, self.dest, 'arbitrary')\n\np = configargparse.ArgumentParser(args_for_setting_config_path=['-c'],\n                                  args_for_writing_out_config_file=['-w'])\np.add_argument('--number', type=int, dest='result', action=CustomAction)\np.parse_args('--number 2' -w bad.conf)\n```\n\nThe resulting namespace:\n\n``` python\nNamespace(result='arbitrary')  # Great, CustomAction did its job\n```\n\nBut the resulting bad.conf\n\n``` ini\nnumber = arbitrary  # This is not going to reproduce\n```\n\nNow consider when bad.conf is specified to -c\n\n```\nerror: argument --number: invalid int value: 'arbitrary'\n```\n\nWe only recognize the issue due to the type constraint on --number. If there were none, it might be more confusing as to why our option's arg is ignored or worse depending on our action's `__call__` behavior.\n\nThe main problem here is the generated config does not reproduce the behavior of the original passed in arguments when passed back in as a config file.\n\nSolution?: Basically we need to store the value passed on the command line to obtain reproducible behavior in situations like this, but it's not clear to me how best to do so. This information is available to the action's `__call__` as arguments, and so could be stored on the parser for later reference in `ArgumentParser.get_items_for_config_file_output`.\n\nDo you think this is a bug?\n\nThank you,\nBrad\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/42", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/42/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/42/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/42", "id": 129390711, "node_id": "MDU6SXNzdWUxMjkzOTA3MTE=", "number": 42, "title": "convert_setting_to_command_line_arg not support nargs in ('+', '*')", "user": {"login": "fyrestone", "id": 6308809, "node_id": "MDQ6VXNlcjYzMDg4MDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/6308809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fyrestone", "html_url": "https://github.com/fyrestone", "followers_url": "https://api.github.com/users/fyrestone/followers", "following_url": "https://api.github.com/users/fyrestone/following{/other_user}", "gists_url": "https://api.github.com/users/fyrestone/gists{/gist_id}", "starred_url": "https://api.github.com/users/fyrestone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fyrestone/subscriptions", "organizations_url": "https://api.github.com/users/fyrestone/orgs", "repos_url": "https://api.github.com/users/fyrestone/repos", "events_url": "https://api.github.com/users/fyrestone/events{/privacy}", "received_events_url": "https://api.github.com/users/fyrestone/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-01-28T09:09:15Z", "updated_at": "2016-09-04T23:46:43Z", "closed_at": "2016-09-04T23:46:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "replace:\n\n```\n        elif value.startswith(\"[\") and value.endswith(\"]\"):\n            if action is not None:\n                if type(action) != argparse._AppendAction:\n                    self.error((\"%s can't be set to a list '%s' unless its \"\n                        \"action type is changed to 'append'\") % (key, value))\n            for list_elem in value[1:-1].split(\",\"):\n                args.append( command_line_key )\n                args.append( list_elem.strip() )\n```\n\nwith:\n\n```\n        elif value.startswith(\"[\") and value.endswith(\"]\"):\n            if type(action) == argparse._AppendAction:\n                for list_elem in value[1:-1].split(\",\"):\n                    args.append( list_elem.strip() )\n            elif type(action) == argparse._StoreAction and action.nargs in ('+', '*'):\n                args.append( command_line_key )\n                for list_elem in value[1:-1].split(\",\"):\n                    args.append( list_elem.strip() )\n            else:\n                self.error((\"%s can't be set to a list '%s', unsupported action type: %s\") % (key, value, type(action)))\n```\n\nwill work around this BUG. but, I have not fully tested, so just submit as an issue not pull a request.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/40", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/40/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/40/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/40", "id": 128347276, "node_id": "MDU6SXNzdWUxMjgzNDcyNzY=", "number": 40, "title": "Help page adds \"CONFIGFILE or \" for each configfile, including the final one (so always have trailing \"or\" + \" \")", "user": {"login": "ryran", "id": 1092618, "node_id": "MDQ6VXNlcjEwOTI2MTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1092618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryran", "html_url": "https://github.com/ryran", "followers_url": "https://api.github.com/users/ryran/followers", "following_url": "https://api.github.com/users/ryran/following{/other_user}", "gists_url": "https://api.github.com/users/ryran/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryran/subscriptions", "organizations_url": "https://api.github.com/users/ryran/orgs", "repos_url": "https://api.github.com/users/ryran/repos", "events_url": "https://api.github.com/users/ryran/events{/privacy}", "received_events_url": "https://api.github.com/users/ryran/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-01-23T19:24:13Z", "updated_at": "2016-03-07T18:09:22Z", "closed_at": "2016-03-07T18:09:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Repro:\n\n```\n$ cat >junktest <<EOF\nimport configargparse\np = configargparse.Parser(default_config_files=['woot1', 'woot2'])\np.add('--foo', help=\"Store some foo\")\nprint(p.parse())\nEOF\n\n$ python junktest -h\nusage: junktest [-h] [--foo FOO]\n\nArgs that start with '--' (eg. --foo) can also be set in a config file (woot1\nor woot2 or ) by using .ini or .yaml-style syntax (eg. foo=value). If an arg\nis specified in more than one place, then command-line values override config\nfile values which override defaults.\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --foo FOO   Store some foo\n```\n\nNotice the relevant part:\n\n```\n... set in a config file (woot1 or woot2 or ) by using .ini ...\n```\n\nNot the end of the world, but you know.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/39", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/39/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/39/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/39", "id": 127637730, "node_id": "MDU6SXNzdWUxMjc2Mzc3MzA=", "number": 39, "title": "ConfigFileParse does not handle action='append'", "user": {"login": "russdill", "id": 1435640, "node_id": "MDQ6VXNlcjE0MzU2NDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1435640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/russdill", "html_url": "https://github.com/russdill", "followers_url": "https://api.github.com/users/russdill/followers", "following_url": "https://api.github.com/users/russdill/following{/other_user}", "gists_url": "https://api.github.com/users/russdill/gists{/gist_id}", "starred_url": "https://api.github.com/users/russdill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/russdill/subscriptions", "organizations_url": "https://api.github.com/users/russdill/orgs", "repos_url": "https://api.github.com/users/russdill/repos", "events_url": "https://api.github.com/users/russdill/events{/privacy}", "received_events_url": "https://api.github.com/users/russdill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-01-20T09:18:09Z", "updated_at": "2016-09-05T00:53:24Z", "closed_at": "2016-09-05T00:53:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Only the last key/value pair in the file gets stored, eg:\n\n--foo a --foo b --foo c\n\nWill produce options.foo ['a', 'b', 'c']\n\nBut a file with:\n\nfoo = a\nfoo = b\nfoo = c\n\nWill only produce ['c']\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/37", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/37/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/37/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/37", "id": 126548292, "node_id": "MDU6SXNzdWUxMjY1NDgyOTI=", "number": 37, "title": "Error with # in setting file values.", "user": {"login": "aldarund", "id": 571159, "node_id": "MDQ6VXNlcjU3MTE1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/571159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldarund", "html_url": "https://github.com/aldarund", "followers_url": "https://api.github.com/users/aldarund/followers", "following_url": "https://api.github.com/users/aldarund/following{/other_user}", "gists_url": "https://api.github.com/users/aldarund/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldarund/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldarund/subscriptions", "organizations_url": "https://api.github.com/users/aldarund/orgs", "repos_url": "https://api.github.com/users/aldarund/repos", "events_url": "https://api.github.com/users/aldarund/events{/privacy}", "received_events_url": "https://api.github.com/users/aldarund/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-01-14T00:23:06Z", "updated_at": "2016-09-05T00:51:09Z", "closed_at": "2016-09-05T00:51:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "For example i have\nSECRET_KEY=s#\nWill produce error\nconfigargparse.ConfigFileParserException: Unexpected line 0 in 123.env:\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/36", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/36/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/36/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/36", "id": 126501752, "node_id": "MDU6SXNzdWUxMjY1MDE3NTI=", "number": 36, "title": "Argument parsing fails with --option=equals_delimiter and a config file", "user": {"login": "TimidRobot", "id": 691322, "node_id": "MDQ6VXNlcjY5MTMyMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/691322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimidRobot", "html_url": "https://github.com/TimidRobot", "followers_url": "https://api.github.com/users/TimidRobot/followers", "following_url": "https://api.github.com/users/TimidRobot/following{/other_user}", "gists_url": "https://api.github.com/users/TimidRobot/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimidRobot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimidRobot/subscriptions", "organizations_url": "https://api.github.com/users/TimidRobot/orgs", "repos_url": "https://api.github.com/users/TimidRobot/repos", "events_url": "https://api.github.com/users/TimidRobot/events{/privacy}", "received_events_url": "https://api.github.com/users/TimidRobot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-01-13T20:06:26Z", "updated_at": "2016-01-19T23:22:32Z", "closed_at": "2016-01-19T23:22:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Test Files\n\n`test.py`\n\n``` python\n#!/usr/bin/env python\n\nimport argparse\nfrom pprint import pprint\n\nimport configargparse\n\na = argparse.ArgumentParser()\na.add_argument(\"--config\")\na.add_argument(\"--foo\")\nargs = a.parse_args()\npprint(args)\n\np = configargparse.getArgumentParser()\np.add_argument(\"--config\", is_config_file=True)\np.add_argument(\"--foo\")\nargs = p.parse_args()\npprint(args)\n```\n\n`test.ini`\n\n``` ini\nfoo=VALUE_IN_CONFIG\n```\n## Example of Issue\n\nUsing `--foo=bar` (with equals) works without config parsing:\n\n```\n./test.py --foo=bar\nNamespace(config=None, foo='bar')\nNamespace(config=None, foo='bar')\n```\n\nHowever it breaks with config parsing (but not for --config):\n\n```\n./test.py --foo=bar --config=test.ini\nNamespace(config='test.ini', foo='bar')\nNamespace(config='test.ini', foo='VALUE_IN_CONFIG')\n```\n\nUsing `--foo bar` (with space instead of equals) shows us the expected behavior:\n\n```\n./test.py --foo bar --config test.ini\nNamespace(config='test.ini', foo='bar')\nNamespace(config='test.ini', foo='bar')\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/35", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/35/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/35/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/35", "id": 124824254, "node_id": "MDU6SXNzdWUxMjQ4MjQyNTQ=", "number": 35, "title": "Unable to set boolean value to False", "user": {"login": "b-jazz", "id": 6668322, "node_id": "MDQ6VXNlcjY2NjgzMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6668322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-jazz", "html_url": "https://github.com/b-jazz", "followers_url": "https://api.github.com/users/b-jazz/followers", "following_url": "https://api.github.com/users/b-jazz/following{/other_user}", "gists_url": "https://api.github.com/users/b-jazz/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-jazz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-jazz/subscriptions", "organizations_url": "https://api.github.com/users/b-jazz/orgs", "repos_url": "https://api.github.com/users/b-jazz/repos", "events_url": "https://api.github.com/users/b-jazz/events{/privacy}", "received_events_url": "https://api.github.com/users/b-jazz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-01-04T19:42:51Z", "updated_at": "2016-01-19T06:22:47Z", "closed_at": "2016-01-19T06:22:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If I have a boolean with a default of True, it appears impossible to set it to False from the command line since you can only set it to true with a `--foobar` singleton and you can't set it to false with an environment variable either.\n\n```\n(cap) /tmp $ cat ./cap.py\n#!/usr/bin/env python\n\nimport configargparse\n\nparser = configargparse.ArgParser()\nparser.add('--foobar', action='store_true', default=True)\nargs = parser.parse_args()\nparser.print_values()\nif args.foobar:\n    print('foobar is True')\nelse:\n    print('foobar is False or undefined')\n(cap) /tmp $ ./cap.py\nfoobar is True\n(cap) /tmp $ export foobar=False\n(cap) /tmp $ ./cap.py\nfoobar is True\n(cap) /tmp $ export FOOBAR=False\n(cap) /tmp $ ./cap.py\nfoobar is True\n(cap) /tmp $ echo $FOOBAR $foobar\nFalse False\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/32", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/32/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/32/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/32", "id": 116048199, "node_id": "MDU6SXNzdWUxMTYwNDgxOTk=", "number": 32, "title": "Regex tests fail on 0.10.0", "user": {"login": "lfam", "id": 6568228, "node_id": "MDQ6VXNlcjY1NjgyMjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6568228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lfam", "html_url": "https://github.com/lfam", "followers_url": "https://api.github.com/users/lfam/followers", "following_url": "https://api.github.com/users/lfam/following{/other_user}", "gists_url": "https://api.github.com/users/lfam/gists{/gist_id}", "starred_url": "https://api.github.com/users/lfam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lfam/subscriptions", "organizations_url": "https://api.github.com/users/lfam/orgs", "repos_url": "https://api.github.com/users/lfam/repos", "events_url": "https://api.github.com/users/lfam/events{/privacy}", "received_events_url": "https://api.github.com/users/lfam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-11-10T07:08:23Z", "updated_at": "2015-11-12T03:45:51Z", "closed_at": "2015-11-10T08:46:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "While testing 0.10.0, a couple of regex tests fail. This happens under both python 2.7 and 3.4.\n\nHere is the failing portion of the log when building with python 2.7.10:\n\n```\n======================================================================\nFAIL: testBasicCase2 (tests.test_configargparse.TestBasicUseCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/leo/tmp/nix-build-python2-configargparse-0.10.0.drv-0/ConfigArgParse-0.10.0/tests/test_configargparse.py\", line 230, in testBasicCase2\n    'positional arguments:\\n'\nAssertionError: Regexp didn't match: 'usage: .* \\\\[-h\\\\] --genome GENOME \\\\[-v\\\\] -g MY_CFG_FILE \\\\[-d DBSNP\\\\]\\\\s+\\\\[-f FRMT\\\\]\\\\s+vcf \\\\[vcf ...\\\\]\\n\\n(.+\\\\s+)(.+\\\\s+)(.+\\\\s+)(.+\\\\s+)(.+\\\\s+)(.+\\\\s+)(.+\\\\s+)(.+\\\\s+)positional arguments:\\n  vcf \\\\s+ Variant file\\\\(s\\\\)\\n\\noptional arguments:\\n  -h, --help \\\\s+ show this help message and exit\\n  --genome GENOME \\\\s+ Path to genome file\\n  -v\\n  -g MY_CFG_FILE, --my-cfg-file MY_CFG_FILE\\n  -d DBSNP, --dbsnp DBSNP\\\\s+\\\\[env var: DBSNP_PATH\\\\]\\n  -f FRMT, --format FRMT\\\\s+\\\\[env var: OUTPUT_FORMAT\\\\]\\n' not found in \"usage: setup.py [-h] --genome GENOME [-v] -g MY_CFG_FILE [-d DBSNP] [-f FRMT]\\n                vcf [vcf ...]\\n\\nArgs that start with '--' (eg. --genome) can also be set in a config file\\n(/etc/settings.ini or /home/jeff/.user_settings or /home/leo/tmp/nix-build-\\npython2-configargparse-0.10.0.drv-0/tmpVTIlXW or specified via -g). The\\nrecognized syntax for setting (key, value) pairs is based on the INI and YAML\\nformats (e.g. key=value or foo=TRUE). For full documentation of the\\ndifferences from the standards please refer to the ConfigArgParse\\ndocumentation. If an arg is specified in more than one place, then commandline\\nvalues override environment variables which override config file values which\\noverride defaults.\\n\\npositional arguments:\\n  vcf                   Variant file(s)\\n\\noptional arguments:\\n  -h, --help            show this help message and exit\\n  --genome GENOME       Path to genome file\\n  -v\\n  -g MY_CFG_FILE, --my-cfg-file MY_CFG_FILE\\n  -d DBSNP, --dbsnp DBSNP\\n                        [env var: DBSNP_PATH]\\n  -f FRMT, --format FRMT\\n                        [env var: OUTPUT_FORMAT]\\n\"\n\n======================================================================\nFAIL: testBasicCase2_WithGroups (tests.test_configargparse.TestBasicUseCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/leo/tmp/nix-build-python2-configargparse-0.10.0.drv-0/ConfigArgParse-0.10.0/tests/test_configargparse.py\", line 266, in testBasicCase2_WithGroups\n    self.testBasicCase2(use_groups=True)\n  File \"/home/leo/tmp/nix-build-python2-configargparse-0.10.0.drv-0/ConfigArgParse-0.10.0/tests/test_configargparse.py\", line 244, in testBasicCase2\n    'positional arguments:\\n'\nAssertionError: Regexp didn't match: 'usage: .* \\\\[-h\\\\] --genome GENOME \\\\[-v\\\\] -g MY_CFG_FILE \\\\[-d DBSNP\\\\]\\\\s+\\\\[-f FRMT\\\\]\\\\s+vcf \\\\[vcf ...\\\\]\\n\\n.+\\\\s+.+\\\\s+.+\\\\s+.+\\\\s+.+\\\\s+.+\\\\s+.+\\\\s+.+\\\\s+positional arguments:\\n  vcf \\\\s+ Variant file\\\\(s\\\\)\\n\\noptional arguments:\\n  -h, --help \\\\s+ show this help message and exit\\n\\ng1:\\n  --genome GENOME \\\\s+ Path to genome file\\n  -v\\n  -g MY_CFG_FILE, --my-cfg-file MY_CFG_FILE\\n\\ng2:\\n  -d DBSNP, --dbsnp DBSNP\\\\s+\\\\[env var: DBSNP_PATH\\\\]\\n  -f FRMT, --format FRMT\\\\s+\\\\[env var: OUTPUT_FORMAT\\\\]\\n' not found in \"usage: setup.py [-h] --genome GENOME [-v] -g MY_CFG_FILE [-d DBSNP] [-f FRMT]\\n                vcf [vcf ...]\\n\\nArgs that start with '--' (eg. --genome) can also be set in a config file\\n(/etc/settings.ini or /home/jeff/.user_settings or /home/leo/tmp/nix-build-\\npython2-configargparse-0.10.0.drv-0/tmptLIJ5R or specified via -g). The\\nrecognized syntax for setting (key, value) pairs is based on the INI and YAML\\nformats (e.g. key=value or foo=TRUE). For full documentation of the\\ndifferences from the standards please refer to the ConfigArgParse\\ndocumentation. If an arg is specified in more than one place, then commandline\\nvalues override environment variables which override config file values which\\noverride defaults.\\n\\npositional arguments:\\n  vcf                   Variant file(s)\\n\\noptional arguments:\\n  -h, --help            show this help message and exit\\n\\ng1:\\n  --genome GENOME       Path to genome file\\n  -v\\n  -g MY_CFG_FILE, --my-cfg-file MY_CFG_FILE\\n\\ng2:\\n  -d DBSNP, --dbsnp DBSNP\\n                        [env var: DBSNP_PATH]\\n  -f FRMT, --format FRMT\\n                        [env var: OUTPUT_FORMAT]\\n\"\n\n----------------------------------------------------------------------\nRan 1646 tests in 2.850s\n\nFAILED (failures=2)\n```\n\nAnd with python 3.4.3:\n\n```\n======================================================================\nFAIL: testBasicCase2 (tests.test_configargparse.TestBasicUseCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/leo/tmp/nix-build-python-configargparse-0.10.0.drv-0/ConfigArgParse-0.10.0/tests/test_configargparse.py\", line 230, in testBasicCase2\n    'positional arguments:\\n'\nAssertionError: Regex didn't match: 'usage: .* \\\\[-h\\\\] --genome GENOME \\\\[-v\\\\] -g MY_CFG_FILE \\\\[-d DBSNP\\\\]\\\\s+\\\\[-f FRMT\\\\]\\\\s+vcf \\\\[vcf ...\\\\]\\n\\n(.+\\\\s+)(.+\\\\s+)(.+\\\\s+)(.+\\\\s+)(.+\\\\s+)(.+\\\\s+)(.+\\\\s+)(.+\\\\s+)positional arguments:\\n  vcf \\\\s+ Variant file\\\\(s\\\\)\\n\\noptional arguments:\\n  -h, --help \\\\s+ show this help message and exit\\n  --genome GENOME \\\\s+ Path to genome file\\n  -v\\n  -g MY_CFG_FILE, --my-cfg-file MY_CFG_FILE\\n  -d DBSNP, --dbsnp DBSNP\\\\s+\\\\[env var: DBSNP_PATH\\\\]\\n  -f FRMT, --format FRMT\\\\s+\\\\[env var: OUTPUT_FORMAT\\\\]\\n' not found in \"usage: setup.py [-h] --genome GENOME [-v] -g MY_CFG_FILE [-d DBSNP] [-f FRMT]\\n                vcf [vcf ...]\\n\\nArgs that start with '--' (eg. --genome) can also be set in a config file\\n(/etc/settings.ini or /home/jeff/.user_settings or /home/leo/tmp/nix-build-\\npython-configargparse-0.10.0.drv-0/tmpa49kdjqu or specified via -g). The\\nrecognized syntax for setting (key, value) pairs is based on the INI and YAML\\nformats (e.g. key=value or foo=TRUE). For full documentation of the\\ndifferences from the standards please refer to the ConfigArgParse\\ndocumentation. If an arg is specified in more than one place, then commandline\\nvalues override environment variables which override config file values which\\noverride defaults.\\n\\npositional arguments:\\n  vcf                   Variant file(s)\\n\\noptional arguments:\\n  -h, --help            show this help message and exit\\n  --genome GENOME       Path to genome file\\n  -v\\n  -g MY_CFG_FILE, --my-cfg-file MY_CFG_FILE\\n  -d DBSNP, --dbsnp DBSNP\\n                        [env var: DBSNP_PATH]\\n  -f FRMT, --format FRMT\\n                        [env var: OUTPUT_FORMAT]\\n\"\n\n======================================================================\nFAIL: testBasicCase2_WithGroups (tests.test_configargparse.TestBasicUseCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/leo/tmp/nix-build-python-configargparse-0.10.0.drv-0/ConfigArgParse-0.10.0/tests/test_configargparse.py\", line 266, in testBasicCase2_WithGroups\n    self.testBasicCase2(use_groups=True)\n  File \"/home/leo/tmp/nix-build-python-configargparse-0.10.0.drv-0/ConfigArgParse-0.10.0/tests/test_configargparse.py\", line 244, in testBasicCase2\n    'positional arguments:\\n'\nAssertionError: Regex didn't match: 'usage: .* \\\\[-h\\\\] --genome GENOME \\\\[-v\\\\] -g MY_CFG_FILE \\\\[-d DBSNP\\\\]\\\\s+\\\\[-f FRMT\\\\]\\\\s+vcf \\\\[vcf ...\\\\]\\n\\n.+\\\\s+.+\\\\s+.+\\\\s+.+\\\\s+.+\\\\s+.+\\\\s+.+\\\\s+.+\\\\s+positional arguments:\\n  vcf \\\\s+ Variant file\\\\(s\\\\)\\n\\noptional arguments:\\n  -h, --help \\\\s+ show this help message and exit\\n\\ng1:\\n  --genome GENOME \\\\s+ Path to genome file\\n  -v\\n  -g MY_CFG_FILE, --my-cfg-file MY_CFG_FILE\\n\\ng2:\\n  -d DBSNP, --dbsnp DBSNP\\\\s+\\\\[env var: DBSNP_PATH\\\\]\\n  -f FRMT, --format FRMT\\\\s+\\\\[env var: OUTPUT_FORMAT\\\\]\\n' not found in \"usage: setup.py [-h] --genome GENOME [-v] -g MY_CFG_FILE [-d DBSNP] [-f FRMT]\\n                vcf [vcf ...]\\n\\nArgs that start with '--' (eg. --genome) can also be set in a config file\\n(/etc/settings.ini or /home/jeff/.user_settings or /home/leo/tmp/nix-build-\\npython-configargparse-0.10.0.drv-0/tmpy1sza7e8 or specified via -g). The\\nrecognized syntax for setting (key, value) pairs is based on the INI and YAML\\nformats (e.g. key=value or foo=TRUE). For full documentation of the\\ndifferences from the standards please refer to the ConfigArgParse\\ndocumentation. If an arg is specified in more than one place, then commandline\\nvalues override environment variables which override config file values which\\noverride defaults.\\n\\npositional arguments:\\n  vcf                   Variant file(s)\\n\\noptional arguments:\\n  -h, --help            show this help message and exit\\n\\ng1:\\n  --genome GENOME       Path to genome file\\n  -v\\n  -g MY_CFG_FILE, --my-cfg-file MY_CFG_FILE\\n\\ng2:\\n  -d DBSNP, --dbsnp DBSNP\\n                        [env var: DBSNP_PATH]\\n  -f FRMT, --format FRMT\\n                        [env var: OUTPUT_FORMAT]\\n\"\n\n----------------------------------------------------------------------\nRan 1554 tests in 3.005s\n\nFAILED (failures=2)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/31", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/31/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/31/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/31", "id": 116035325, "node_id": "MDU6SXNzdWUxMTYwMzUzMjU=", "number": 31, "title": "Test failures under Python 3.5", "user": {"login": "felixonmars", "id": 1006477, "node_id": "MDQ6VXNlcjEwMDY0Nzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1006477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felixonmars", "html_url": "https://github.com/felixonmars", "followers_url": "https://api.github.com/users/felixonmars/followers", "following_url": "https://api.github.com/users/felixonmars/following{/other_user}", "gists_url": "https://api.github.com/users/felixonmars/gists{/gist_id}", "starred_url": "https://api.github.com/users/felixonmars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felixonmars/subscriptions", "organizations_url": "https://api.github.com/users/felixonmars/orgs", "repos_url": "https://api.github.com/users/felixonmars/repos", "events_url": "https://api.github.com/users/felixonmars/events{/privacy}", "received_events_url": "https://api.github.com/users/felixonmars/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-10T06:09:51Z", "updated_at": "2015-11-10T08:46:30Z", "closed_at": "2015-11-10T08:46:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am getting the following test failures with python 3.5.0. Maybe allow_abbrev needs to be supported?\n\n```\n======================================================================\nERROR: test_failures_many_groups_listargs (tests.test_configargparse.TestOptionalsDisallowLongAbbreviation)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 208, in wrapper\n  File \"<string>\", line 223, in test_failures\n  File \"<string>\", line 218, in _get_parser\nTypeError: __init__() got an unexpected keyword argument 'allow_abbrev'\n\n======================================================================\nERROR: test_failures_many_groups_sysargs (tests.test_configargparse.TestOptionalsDisallowLongAbbreviation)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 208, in wrapper\n  File \"<string>\", line 223, in test_failures\n  File \"<string>\", line 218, in _get_parser\nTypeError: __init__() got an unexpected keyword argument 'allow_abbrev'\n\n======================================================================\nERROR: test_failures_no_groups_listargs (tests.test_configargparse.TestOptionalsDisallowLongAbbreviation)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 208, in wrapper\n  File \"<string>\", line 223, in test_failures\n  File \"<string>\", line 218, in _get_parser\nTypeError: __init__() got an unexpected keyword argument 'allow_abbrev'\n\n======================================================================\nERROR: test_failures_no_groups_sysargs (tests.test_configargparse.TestOptionalsDisallowLongAbbreviation)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 208, in wrapper\n  File \"<string>\", line 223, in test_failures\n  File \"<string>\", line 218, in _get_parser\nTypeError: __init__() got an unexpected keyword argument 'allow_abbrev'\n\n======================================================================\nERROR: test_failures_one_group_listargs (tests.test_configargparse.TestOptionalsDisallowLongAbbreviation)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 208, in wrapper\n  File \"<string>\", line 223, in test_failures\n  File \"<string>\", line 218, in _get_parser\nTypeError: __init__() got an unexpected keyword argument 'allow_abbrev'\n\n======================================================================\nERROR: test_failures_one_group_sysargs (tests.test_configargparse.TestOptionalsDisallowLongAbbreviation)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 208, in wrapper\n  File \"<string>\", line 223, in test_failures\n  File \"<string>\", line 218, in _get_parser\nTypeError: __init__() got an unexpected keyword argument 'allow_abbrev'\n\n======================================================================\nERROR: test_successes_many_groups_listargs (tests.test_configargparse.TestOptionalsDisallowLongAbbreviation)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 208, in wrapper\n  File \"<string>\", line 230, in test_successes\n  File \"<string>\", line 218, in _get_parser\nTypeError: __init__() got an unexpected keyword argument 'allow_abbrev'\n\n======================================================================\nERROR: test_successes_many_groups_sysargs (tests.test_configargparse.TestOptionalsDisallowLongAbbreviation)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 208, in wrapper\n  File \"<string>\", line 230, in test_successes\n  File \"<string>\", line 218, in _get_parser\nTypeError: __init__() got an unexpected keyword argument 'allow_abbrev'\n\n======================================================================\nERROR: test_successes_no_groups_listargs (tests.test_configargparse.TestOptionalsDisallowLongAbbreviation)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 208, in wrapper\n  File \"<string>\", line 230, in test_successes\n  File \"<string>\", line 218, in _get_parser\nTypeError: __init__() got an unexpected keyword argument 'allow_abbrev'\n\n======================================================================\nERROR: test_successes_no_groups_sysargs (tests.test_configargparse.TestOptionalsDisallowLongAbbreviation)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 208, in wrapper\n  File \"<string>\", line 230, in test_successes\n  File \"<string>\", line 218, in _get_parser\nTypeError: __init__() got an unexpected keyword argument 'allow_abbrev'\n\n======================================================================\nERROR: test_successes_one_group_listargs (tests.test_configargparse.TestOptionalsDisallowLongAbbreviation)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 208, in wrapper\n  File \"<string>\", line 230, in test_successes\n  File \"<string>\", line 218, in _get_parser\nTypeError: __init__() got an unexpected keyword argument 'allow_abbrev'\n\n======================================================================\nERROR: test_successes_one_group_sysargs (tests.test_configargparse.TestOptionalsDisallowLongAbbreviation)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"<string>\", line 208, in wrapper\n  File \"<string>\", line 230, in test_successes\n  File \"<string>\", line 218, in _get_parser\nTypeError: __init__() got an unexpected keyword argument 'allow_abbrev'\n\n----------------------------------------------------------------------\nRan 1578 tests in 1.713s\n\nFAILED (errors=12)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/30", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/30/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/30/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/30", "id": 116006599, "node_id": "MDU6SXNzdWUxMTYwMDY1OTk=", "number": 30, "title": "Create a more robust config file format implemented as a subclass of ConfigFileParser ", "user": {"login": "bw2", "id": 6240170, "node_id": "MDQ6VXNlcjYyNDAxNzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/6240170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bw2", "html_url": "https://github.com/bw2", "followers_url": "https://api.github.com/users/bw2/followers", "following_url": "https://api.github.com/users/bw2/following{/other_user}", "gists_url": "https://api.github.com/users/bw2/gists{/gist_id}", "starred_url": "https://api.github.com/users/bw2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bw2/subscriptions", "organizations_url": "https://api.github.com/users/bw2/orgs", "repos_url": "https://api.github.com/users/bw2/repos", "events_url": "https://api.github.com/users/bw2/events{/privacy}", "received_events_url": "https://api.github.com/users/bw2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-11-10T01:37:58Z", "updated_at": "2016-01-19T06:26:04Z", "closed_at": "2016-01-19T06:26:01Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Write a new implementation of ConfigFileParser to provide a more robust alternative to the current config file format which:\n- ideally doesn't introduce dependencies on any 3rd party libraries\n- allows multiline values (#10, #23 )\n- has better support for lists  ( #16 )\n\nThis issue combines and closes #10, #16, #23\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/27", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/27/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/27/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/27", "id": 96677434, "node_id": "MDU6SXNzdWU5NjY3NzQzNA==", "number": 27, "title": "Subcommands params in config?", "user": {"login": "Kedrigern", "id": 785900, "node_id": "MDQ6VXNlcjc4NTkwMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/785900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kedrigern", "html_url": "https://github.com/Kedrigern", "followers_url": "https://api.github.com/users/Kedrigern/followers", "following_url": "https://api.github.com/users/Kedrigern/following{/other_user}", "gists_url": "https://api.github.com/users/Kedrigern/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kedrigern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kedrigern/subscriptions", "organizations_url": "https://api.github.com/users/Kedrigern/orgs", "repos_url": "https://api.github.com/users/Kedrigern/repos", "events_url": "https://api.github.com/users/Kedrigern/events{/privacy}", "received_events_url": "https://api.github.com/users/Kedrigern/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-07-22T22:11:43Z", "updated_at": "2016-01-19T06:24:34Z", "closed_at": "2016-01-19T06:24:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there way to have global and subparsers params in one config file?\n\nFor example:\n\n``` python\n#!/usr/bin/env python3\n\nimport configargparse\nparser = configargparse.ArgParser(\n    default_config_files=[\"config.ini\"],\n    args_for_setting_config_path=[\"-c\"])\n\nsub = parser.add_subparsers().add_parser('foo')\nparser.add_argument(\"-b\", \"--bar\")\nsub.add_argument(\"-f\", \"--foo\")\nprint(parser.parse_args())\n```\n\nAnd `config.ini`:\n\n``` ini\nbar = baz\nfoo = fool\n```\n\nNow I get: `contains unknown config key(s): foo`\n\nPS: I know about #26 , but this is not exactly same.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/26", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/26/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/26/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/26", "id": 89096210, "node_id": "MDU6SXNzdWU4OTA5NjIxMA==", "number": 26, "title": "regression: unrecognized arguments error when using subparsers and config file", "user": {"login": "kuba", "id": 106176, "node_id": "MDQ6VXNlcjEwNjE3Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/106176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kuba", "html_url": "https://github.com/kuba", "followers_url": "https://api.github.com/users/kuba/followers", "following_url": "https://api.github.com/users/kuba/following{/other_user}", "gists_url": "https://api.github.com/users/kuba/gists{/gist_id}", "starred_url": "https://api.github.com/users/kuba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kuba/subscriptions", "organizations_url": "https://api.github.com/users/kuba/orgs", "repos_url": "https://api.github.com/users/kuba/repos", "events_url": "https://api.github.com/users/kuba/events{/privacy}", "received_events_url": "https://api.github.com/users/kuba/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 109393193, "node_id": "MDU6TGFiZWwxMDkzOTMxOTM=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-06-17T18:51:01Z", "updated_at": "2016-01-19T06:25:46Z", "closed_at": "2016-01-19T06:25:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Test file:\n\n```\n#!/usr/bin/env python\nimport configargparse\nparser = configargparse.ArgParser(args_for_setting_config_path=[\"-c\"])\nparser.add_subparsers().add_parser('foo')\nparser.add_argument(\"-b\", \"--bar\")\nprint parser.parse_args()\n```\n\nTest config:\n\n```\nbar = baz\n```\n\nProblem\n\n```\n(venv)jakub@iks:~/dev/letsencrypt/lets-encrypt-preview$ pip install git+https://github.com/bw2/ConfigArgParse.git@0.9.3\nDownloading/unpacking git+https://github.com/bw2/ConfigArgParse.git@0.9.3\n  Cloning https://github.com/bw2/ConfigArgParse.git (to 0.9.3) to /tmp/pip-80_Rgc-build\n  Running setup.py (path:/tmp/pip-80_Rgc-build/setup.py) egg_info for package from git+https://github.com/bw2/ConfigArgParse.git@0.9.3\n\nInstalling collected packages: ConfigArgParse\n  Running setup.py install for ConfigArgParse\n\nSuccessfully installed ConfigArgParse\nCleaning up...\n(venv)jakub@iks:~/dev/letsencrypt/lets-encrypt-preview$ ./t.py -c t.ini foo                                                                                                                         \nNamespace(bar='baz', config_file='t.ini')\n(venv)jakub@iks:~/dev/letsencrypt/lets-encrypt-preview$ pip uninstall ConfigArgParse                                                                                                                \nUninstalling ConfigArgParse:\n  /home/jakub/dev/letsencrypt/lets-encrypt-preview/venv/lib/python2.7/site-packages/ConfigArgParse-0.9.3-py2.7.egg-info\n  /home/jakub/dev/letsencrypt/lets-encrypt-preview/venv/lib/python2.7/site-packages/configargparse.py\n  /home/jakub/dev/letsencrypt/lets-encrypt-preview/venv/lib/python2.7/site-packages/configargparse.pyc\nProceed (y/n)? y\n  Successfully uninstalled ConfigArgParse\n(venv)jakub@iks:~/dev/letsencrypt/lets-encrypt-preview$ pip install git+https://github.com/bw2/ConfigArgParse.git@e0463e0ec5fbd1f453ed833abebc633c77d4e0c6                                        \nDownloading/unpacking git+https://github.com/bw2/ConfigArgParse.git@e0463e0ec5fbd1f453ed833abebc633c77d4e0c6\n  Cloning https://github.com/bw2/ConfigArgParse.git (to e0463e0ec5fbd1f453ed833abebc633c77d4e0c6) to /tmp/pip-6fNLp7-build\n  Could not find a tag or branch 'e0463e0ec5fbd1f453ed833abebc633c77d4e0c6', assuming commit.\n  Running setup.py (path:/tmp/pip-6fNLp7-build/setup.py) egg_info for package from git+https://github.com/bw2/ConfigArgParse.git@e0463e0ec5fbd1f453ed833abebc633c77d4e0c6\n\nInstalling collected packages: ConfigArgParse\n  Running setup.py install for ConfigArgParse\n\nSuccessfully installed ConfigArgParse\nCleaning up...\n(venv)jakub@iks:~/dev/letsencrypt/lets-encrypt-preview$ ./t.py -c t.ini foo\nusage: t.py [-h] [-c CONFIG_FILE] [-b BAR] {foo} ...\nt.py: error: unrecognized arguments: --bar baz\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/25", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/25/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/25/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/25", "id": 85816680, "node_id": "MDU6SXNzdWU4NTgxNjY4MA==", "number": 25, "title": "Feature: Parse additional config file information to be merged into existing config object", "user": {"login": "kesmit13", "id": 6206744, "node_id": "MDQ6VXNlcjYyMDY3NDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/6206744?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kesmit13", "html_url": "https://github.com/kesmit13", "followers_url": "https://api.github.com/users/kesmit13/followers", "following_url": "https://api.github.com/users/kesmit13/following{/other_user}", "gists_url": "https://api.github.com/users/kesmit13/gists{/gist_id}", "starred_url": "https://api.github.com/users/kesmit13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kesmit13/subscriptions", "organizations_url": "https://api.github.com/users/kesmit13/orgs", "repos_url": "https://api.github.com/users/kesmit13/repos", "events_url": "https://api.github.com/users/kesmit13/events{/privacy}", "received_events_url": "https://api.github.com/users/kesmit13/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-06-06T22:00:39Z", "updated_at": "2015-11-09T06:29:30Z", "closed_at": "2015-11-09T06:29:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Maybe this is possible already, but it isn't obvious.  I'd like to parse arguments and config files at startup, but then add an additional config (either file or string contents of file) at a later time.  The existing config would be updated with the settings from the new information.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/24", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/24/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/24/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/24", "id": 84773554, "node_id": "MDU6SXNzdWU4NDc3MzU1NA==", "number": 24, "title": "singleton -h and --help only show the first group of options to be parsed", "user": {"login": "grimmy", "id": 1396385, "node_id": "MDQ6VXNlcjEzOTYzODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1396385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grimmy", "html_url": "https://github.com/grimmy", "followers_url": "https://api.github.com/users/grimmy/followers", "following_url": "https://api.github.com/users/grimmy/following{/other_user}", "gists_url": "https://api.github.com/users/grimmy/gists{/gist_id}", "starred_url": "https://api.github.com/users/grimmy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grimmy/subscriptions", "organizations_url": "https://api.github.com/users/grimmy/orgs", "repos_url": "https://api.github.com/users/grimmy/repos", "events_url": "https://api.github.com/users/grimmy/events{/privacy}", "received_events_url": "https://api.github.com/users/grimmy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 109393198, "node_id": "MDU6TGFiZWwxMDkzOTMxOTg=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-06-03T21:14:31Z", "updated_at": "2015-11-10T01:29:43Z", "closed_at": "2015-11-10T01:29:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using the singleton option from the readme results in the following\n\n```\n$ python main.py --help\nusage: main.py [-h] [--utils-setting UTILS_SETTING]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --utils-setting UTILS_SETTING\n                        Config-file-settable option for utils (default: None)\n```\n\nAs you can see the main options aren't added because the -h is being processed by the first p.parse_known_args.  Basically this make this great feature useless.\n\nI've tried using a named parser too and got the same result.\n\nI think a decent fix would be to not process -h until you hit a parse_args and completely ignore it in parse_known_args, but I haven't looked at the code at all to see how feasible that is.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/23", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/23/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/23/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/23", "id": 84600773, "node_id": "MDU6SXNzdWU4NDYwMDc3Mw==", "number": 23, "title": "Add multiline YAML (and/or INI).", "user": {"login": "bartekbrak", "id": 1271283, "node_id": "MDQ6VXNlcjEyNzEyODM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1271283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bartekbrak", "html_url": "https://github.com/bartekbrak", "followers_url": "https://api.github.com/users/bartekbrak/followers", "following_url": "https://api.github.com/users/bartekbrak/following{/other_user}", "gists_url": "https://api.github.com/users/bartekbrak/gists{/gist_id}", "starred_url": "https://api.github.com/users/bartekbrak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bartekbrak/subscriptions", "organizations_url": "https://api.github.com/users/bartekbrak/orgs", "repos_url": "https://api.github.com/users/bartekbrak/repos", "events_url": "https://api.github.com/users/bartekbrak/events{/privacy}", "received_events_url": "https://api.github.com/users/bartekbrak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 109393195, "node_id": "MDU6TGFiZWwxMDkzOTMxOTU=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-06-03T14:44:05Z", "updated_at": "2015-11-10T01:39:10Z", "closed_at": "2015-11-10T01:39:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "YAML supports multiline input (https://gist.github.com/rjattrill/7523554) and lists (http://docs.ansible.com/YAMLSyntax.html#yaml-basics) but neither of those can be used in the ini file:\n\n```\nlistoffruits:\n    - Apple\n    - Orange\ntheelements: >\n    [my_extraorbitantly_long_element_address1,\n    my_extraorbitantly_long_element_address2,\n    my_extraorbitantly_long_element_address3]\n```\n\nthese produce errors. I mainly wanted to use your library because I expect user to provide tens of long strings as configuration. Putting them in one-line would clutter the INI file. \n\nDo you consider such feature useful and would like to implement it?\n\n I also didn't find a way to provide an INI style multiline content but this is not officially supported (INI is not even a well defined standard and the most formal definitions I saw didn't mention multiline though some libs allow that with indentation).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/22", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/22/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/22/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/22", "id": 81088194, "node_id": "MDU6SXNzdWU4MTA4ODE5NA==", "number": 22, "title": "LICENSE file is missing year and copyright holder's name", "user": {"login": "wachsler-google", "id": 9822687, "node_id": "MDQ6VXNlcjk4MjI2ODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/9822687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wachsler-google", "html_url": "https://github.com/wachsler-google", "followers_url": "https://api.github.com/users/wachsler-google/followers", "following_url": "https://api.github.com/users/wachsler-google/following{/other_user}", "gists_url": "https://api.github.com/users/wachsler-google/gists{/gist_id}", "starred_url": "https://api.github.com/users/wachsler-google/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wachsler-google/subscriptions", "organizations_url": "https://api.github.com/users/wachsler-google/orgs", "repos_url": "https://api.github.com/users/wachsler-google/repos", "events_url": "https://api.github.com/users/wachsler-google/events{/privacy}", "received_events_url": "https://api.github.com/users/wachsler-google/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-05-26T18:49:25Z", "updated_at": "2015-11-09T06:28:50Z", "closed_at": "2015-11-09T06:28:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "It just says, \"Copyright (c) &lt;year&gt; &lt;copyright holders&gt;\"\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/21", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/21/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/21/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/21", "id": 75859703, "node_id": "MDU6SXNzdWU3NTg1OTcwMw==", "number": 21, "title": "Refactor config file parsing, add support for more robust config file format(s)", "user": {"login": "bw2", "id": 6240170, "node_id": "MDQ6VXNlcjYyNDAxNzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/6240170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bw2", "html_url": "https://github.com/bw2", "followers_url": "https://api.github.com/users/bw2/followers", "following_url": "https://api.github.com/users/bw2/following{/other_user}", "gists_url": "https://api.github.com/users/bw2/gists{/gist_id}", "starred_url": "https://api.github.com/users/bw2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bw2/subscriptions", "organizations_url": "https://api.github.com/users/bw2/orgs", "repos_url": "https://api.github.com/users/bw2/repos", "events_url": "https://api.github.com/users/bw2/events{/privacy}", "received_events_url": "https://api.github.com/users/bw2/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 109393195, "node_id": "MDU6TGFiZWwxMDkzOTMxOTU=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 184663321, "node_id": "MDU6TGFiZWwxODQ2NjMzMjE=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/refactor", "name": "refactor", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-05-13T05:57:57Z", "updated_at": "2015-11-10T01:22:46Z", "closed_at": "2015-11-10T01:22:44Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The current config file format is overly simplistic. Support for lists and booleans was added as an after-thought and works only for very simple use-cases, but doesn't generalize. \n\nThis issue coalesces Issue #10 and other format-related Issues (#16, #19).\n\nI think the right way to move forward on this will be:\n- step 1 - refactor / extract out config file-format-aware code into a separate class that can be overriden more easily.\n- step 2 - implement the class to provide a more robust alternative to the current format.\n\nAny suggestions and/or pull requests will be appreciated. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/20", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/20/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/20/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/20", "id": 74478419, "node_id": "MDU6SXNzdWU3NDQ3ODQxOQ==", "number": 20, "title": "Allow getting values from a specific section of config file", "user": {"login": "ethanmcc", "id": 1485462, "node_id": "MDQ6VXNlcjE0ODU0NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1485462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ethanmcc", "html_url": "https://github.com/ethanmcc", "followers_url": "https://api.github.com/users/ethanmcc/followers", "following_url": "https://api.github.com/users/ethanmcc/following{/other_user}", "gists_url": "https://api.github.com/users/ethanmcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/ethanmcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ethanmcc/subscriptions", "organizations_url": "https://api.github.com/users/ethanmcc/orgs", "repos_url": "https://api.github.com/users/ethanmcc/repos", "events_url": "https://api.github.com/users/ethanmcc/events{/privacy}", "received_events_url": "https://api.github.com/users/ethanmcc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 109393198, "node_id": "MDU6TGFiZWwxMDkzOTMxOTg=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-05-08T20:06:59Z", "updated_at": "2015-05-13T13:45:25Z", "closed_at": "2015-05-13T13:45:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a use case where my config file has a DEFAULT section, then a section for each code environment (test, dev, qa, etc.). I see in the documentation that you recommend not forcing users to put settings in specific sections, but in this case am I defining the same variables in each section. Is there a way to have my values merge only with one section? For example, I might have:\n\n```\n[DEFAULT]\ncolor = blue\n\n[dev]\nname = Simon\n\n[qa]\ncolor = red\nname = Bill\n```\n\nWhen my environment is dev, I'm going to want color: blue, name: Simon, with the possibility of overriding either from the CLI. Am I missing this functionality, or is it something you might accept a pull request for?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/19", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/19/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/19/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/19", "id": 73258341, "node_id": "MDU6SXNzdWU3MzI1ODM0MQ==", "number": 19, "title": "arguments with config file string True get automatically converted to bool", "user": {"login": "gabyx", "id": 647437, "node_id": "MDQ6VXNlcjY0NzQzNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/647437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabyx", "html_url": "https://github.com/gabyx", "followers_url": "https://api.github.com/users/gabyx/followers", "following_url": "https://api.github.com/users/gabyx/following{/other_user}", "gists_url": "https://api.github.com/users/gabyx/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabyx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabyx/subscriptions", "organizations_url": "https://api.github.com/users/gabyx/orgs", "repos_url": "https://api.github.com/users/gabyx/repos", "events_url": "https://api.github.com/users/gabyx/events{/privacy}", "received_events_url": "https://api.github.com/users/gabyx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 109393193, "node_id": "MDU6TGFiZWwxMDkzOTMxOTM=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "bw2", "id": 6240170, "node_id": "MDQ6VXNlcjYyNDAxNzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/6240170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bw2", "html_url": "https://github.com/bw2", "followers_url": "https://api.github.com/users/bw2/followers", "following_url": "https://api.github.com/users/bw2/following{/other_user}", "gists_url": "https://api.github.com/users/bw2/gists{/gist_id}", "starred_url": "https://api.github.com/users/bw2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bw2/subscriptions", "organizations_url": "https://api.github.com/users/bw2/orgs", "repos_url": "https://api.github.com/users/bw2/repos", "events_url": "https://api.github.com/users/bw2/events{/privacy}", "received_events_url": "https://api.github.com/users/bw2/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bw2", "id": 6240170, "node_id": "MDQ6VXNlcjYyNDAxNzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/6240170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bw2", "html_url": "https://github.com/bw2", "followers_url": "https://api.github.com/users/bw2/followers", "following_url": "https://api.github.com/users/bw2/following{/other_user}", "gists_url": "https://api.github.com/users/bw2/gists{/gist_id}", "starred_url": "https://api.github.com/users/bw2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bw2/subscriptions", "organizations_url": "https://api.github.com/users/bw2/orgs", "repos_url": "https://api.github.com/users/bw2/repos", "events_url": "https://api.github.com/users/bw2/events{/privacy}", "received_events_url": "https://api.github.com/users/bw2/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2015-05-05T09:22:28Z", "updated_at": "2016-01-19T06:25:15Z", "closed_at": "2016-01-19T06:25:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Supposed we have the following in the INI files:\n\n```\nvalue = True\n```\n\nand the add command\n\n```\np.add( \"-v\",\"--value\", type=str, default=\"False\" ) \n```\n\nThis results in an error  `value set to 'True' rather than a value\n`(see below line 322)\nBut the user said it wants to have a type `str`. So it should be parsed as a string in any case and not transformed into bool automatically, this should only happen if the user did not specify a type , or really requested a type bool. (suggestion)\n(I need this to happens since I reuse the parsed stuff to interpolate  with other parsed ini files somewhere else in the code, and to make that happen everything needs to be strings )\n\nI would use the following safe bool conversion:\n\n```\ndef toBool(self,s, optionHint=None):\n        \"\"\"Safe converting to a boolean value, raises exception if s has wrong type or does not have the appropriate value\"\"\"\n        if type(s) == str:\n            try:\n                if ['true','yes','on','false','no','off'].index(s.lower()) <= 2:\n                    return True\n                else:\n                    return False\n            except:\n                raise ValueError(\"Value: %s %s !\" % (s, \"at option: %s\" % optionsHint if optionHint else \"\"))\n        else:\n            raise ValueError(\"Converting type: %s with value: %s to bool is deliberately not supported!\" % (type(s),s))\n```\n\nIt would be good to be able to not automatically convert  to bool here (line 322):\nin `convert_setting_to_command_line_arg`\n\n```\nif value.lower() == \"true\":\n            if type(action) not in ACTION_TYPES_THAT_DONT_NEED_A_VALUE:\n                self.error(\"%s set to 'True' rather than a value\" % key)\n            args.append( action.option_strings[-1] )\n``\n\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/17", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/17/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/17/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/17", "id": 72649168, "node_id": "MDU6SXNzdWU3MjY0OTE2OA==", "number": 17, "title": "Python 2.6 support", "user": {"login": "kuba", "id": 106176, "node_id": "MDQ6VXNlcjEwNjE3Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/106176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kuba", "html_url": "https://github.com/kuba", "followers_url": "https://api.github.com/users/kuba/followers", "following_url": "https://api.github.com/users/kuba/following{/other_user}", "gists_url": "https://api.github.com/users/kuba/gists{/gist_id}", "starred_url": "https://api.github.com/users/kuba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kuba/subscriptions", "organizations_url": "https://api.github.com/users/kuba/orgs", "repos_url": "https://api.github.com/users/kuba/repos", "events_url": "https://api.github.com/users/kuba/events{/privacy}", "received_events_url": "https://api.github.com/users/kuba/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 109393195, "node_id": "MDU6TGFiZWwxMDkzOTMxOTU=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-05-02T13:54:17Z", "updated_at": "2015-11-09T05:34:11Z", "closed_at": "2015-11-09T05:34:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Would it be feasible to support Python 2.6 or is it a no go? Failing build log: https://travis-ci.org/letsencrypt/lets-encrypt-preview/jobs/60949344#L1366\n\nBackref: https://github.com/letsencrypt/lets-encrypt-preview/pull/376\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/16", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/16/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/16/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/16", "id": 70639066, "node_id": "MDU6SXNzdWU3MDYzOTA2Ng==", "number": 16, "title": "Combination of nargs='+' and type=float fails when reading from config file", "user": {"login": "jolehton", "id": 11569900, "node_id": "MDQ6VXNlcjExNTY5OTAw", "avatar_url": "https://avatars1.githubusercontent.com/u/11569900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jolehton", "html_url": "https://github.com/jolehton", "followers_url": "https://api.github.com/users/jolehton/followers", "following_url": "https://api.github.com/users/jolehton/following{/other_user}", "gists_url": "https://api.github.com/users/jolehton/gists{/gist_id}", "starred_url": "https://api.github.com/users/jolehton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jolehton/subscriptions", "organizations_url": "https://api.github.com/users/jolehton/orgs", "repos_url": "https://api.github.com/users/jolehton/repos", "events_url": "https://api.github.com/users/jolehton/events{/privacy}", "received_events_url": "https://api.github.com/users/jolehton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 109393193, "node_id": "MDU6TGFiZWwxMDkzOTMxOTM=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-04-24T09:30:33Z", "updated_at": "2015-11-10T01:38:50Z", "closed_at": "2015-11-10T01:38:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I love the work you've done with this package, it has spared me from so many parsing-induced headaches.\n\nI did, however, run into a slight problem with the nargs-option (using ConfigArgParse 0.9.3). If I have a file foo.py and I add an argument with `parser.add('--bar', type=float, nargs='+')`, then the following works as expected:\n\n``` shell\n./foo.py --bar 1.0 2.0 3.0\n```\n\nHowever, having `bar = 1.0 2.0 3.0` in the config file conf.ini does not work:\n\n``` shell\n./foo.py --conf conf.ini\nfoo.py: error: argument --bar: invalid float value: '1.0 2.0 3.0'\n```\n\nAs far as I understand it from reading the source code, the problem arises because config file values are passed to argparse as a single string, so the config file setting above would actually be equivalent to\n\n``` shell\n./foo.py --bar \"1.0 2.0 3.0\"\nfoo.py: error: argument --bar: invalid float value: '1.0 2.0 3.0'\n```\n\nThis of course fails since that string is not a valid float.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/15", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/15/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/15/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/15", "id": 60719800, "node_id": "MDU6SXNzdWU2MDcxOTgwMA==", "number": 15, "title": "feature - automatic env variables", "user": {"login": "wwalker", "id": 23478, "node_id": "MDQ6VXNlcjIzNDc4", "avatar_url": "https://avatars1.githubusercontent.com/u/23478?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwalker", "html_url": "https://github.com/wwalker", "followers_url": "https://api.github.com/users/wwalker/followers", "following_url": "https://api.github.com/users/wwalker/following{/other_user}", "gists_url": "https://api.github.com/users/wwalker/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwalker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwalker/subscriptions", "organizations_url": "https://api.github.com/users/wwalker/orgs", "repos_url": "https://api.github.com/users/wwalker/repos", "events_url": "https://api.github.com/users/wwalker/events{/privacy}", "received_events_url": "https://api.github.com/users/wwalker/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 109393195, "node_id": "MDU6TGFiZWwxMDkzOTMxOTU=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/bw2/ConfigArgParse/milestones/2", "html_url": "https://github.com/bw2/ConfigArgParse/milestone/2", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/milestones/2/labels", "id": 916276, "node_id": "MDk6TWlsZXN0b25lOTE2Mjc2", "number": 2, "title": "0.9.4", "description": null, "creator": {"login": "zorro3", "id": 7970538, "node_id": "MDQ6VXNlcjc5NzA1Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7970538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zorro3", "html_url": "https://github.com/zorro3", "followers_url": "https://api.github.com/users/zorro3/followers", "following_url": "https://api.github.com/users/zorro3/following{/other_user}", "gists_url": "https://api.github.com/users/zorro3/gists{/gist_id}", "starred_url": "https://api.github.com/users/zorro3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zorro3/subscriptions", "organizations_url": "https://api.github.com/users/zorro3/orgs", "repos_url": "https://api.github.com/users/zorro3/repos", "events_url": "https://api.github.com/users/zorro3/events{/privacy}", "received_events_url": "https://api.github.com/users/zorro3/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2014-12-28T22:00:49Z", "updated_at": "2015-11-09T08:18:45Z", "due_on": null, "closed_at": "2015-11-09T08:12:16Z"}, "comments": 1, "created_at": "2015-03-11T19:59:46Z", "updated_at": "2015-11-09T08:04:49Z", "closed_at": "2015-11-09T08:04:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to have an app where command line arguments, config file keys, and env vars are all \"the same\"\n\nGiven an app named \"foo_bar\", and command line options --single --multiple-word, without passing env_var, these config file keys would work (current behavior):\n\nsingle = lonely\nmultiple-word = logorrhea\n\nand these env vars would be automatic:\n\nFOO_BAR__SINGLE=finally\nFOO_BAR__MULTIPLE_WORD=unending\n\nI used two underscores to separate the uniqueness prefix (FOO_BAR (defaulting to the uppercase app name)) but it could be one.\n\np = configargparse.ArgParser(automatic_env_vars=true)\n\np = configargparse.ArgParser(automatic_env_vars=true, env_var_prefix='FOO_BAR')\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/14", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/14/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/14/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/14", "id": 60280298, "node_id": "MDU6SXNzdWU2MDI4MDI5OA==", "number": 14, "title": "allow unknown options in config file", "user": {"login": "bw2", "id": 6240170, "node_id": "MDQ6VXNlcjYyNDAxNzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/6240170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bw2", "html_url": "https://github.com/bw2", "followers_url": "https://api.github.com/users/bw2/followers", "following_url": "https://api.github.com/users/bw2/following{/other_user}", "gists_url": "https://api.github.com/users/bw2/gists{/gist_id}", "starred_url": "https://api.github.com/users/bw2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bw2/subscriptions", "organizations_url": "https://api.github.com/users/bw2/orgs", "repos_url": "https://api.github.com/users/bw2/repos", "events_url": "https://api.github.com/users/bw2/events{/privacy}", "received_events_url": "https://api.github.com/users/bw2/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 109393195, "node_id": "MDU6TGFiZWwxMDkzOTMxOTU=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 184663321, "node_id": "MDU6TGFiZWwxODQ2NjMzMjE=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/refactor", "name": "refactor", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/bw2/ConfigArgParse/milestones/2", "html_url": "https://github.com/bw2/ConfigArgParse/milestone/2", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/milestones/2/labels", "id": 916276, "node_id": "MDk6TWlsZXN0b25lOTE2Mjc2", "number": 2, "title": "0.9.4", "description": null, "creator": {"login": "zorro3", "id": 7970538, "node_id": "MDQ6VXNlcjc5NzA1Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7970538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zorro3", "html_url": "https://github.com/zorro3", "followers_url": "https://api.github.com/users/zorro3/followers", "following_url": "https://api.github.com/users/zorro3/following{/other_user}", "gists_url": "https://api.github.com/users/zorro3/gists{/gist_id}", "starred_url": "https://api.github.com/users/zorro3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zorro3/subscriptions", "organizations_url": "https://api.github.com/users/zorro3/orgs", "repos_url": "https://api.github.com/users/zorro3/repos", "events_url": "https://api.github.com/users/zorro3/events{/privacy}", "received_events_url": "https://api.github.com/users/zorro3/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2014-12-28T22:00:49Z", "updated_at": "2015-11-09T08:18:45Z", "due_on": null, "closed_at": "2015-11-09T08:12:16Z"}, "comments": 0, "created_at": "2015-03-08T22:33:20Z", "updated_at": "2015-11-09T08:18:45Z", "closed_at": "2015-11-09T08:18:45Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Currently, only defined args are parsed from the config file, and unknown keys are ignored or cause an error (depending on the `allow_unknown_config_file_keys` constructor arg). \n\nI want to change this so that unknown keys are always appended to the command line and whether they cause an error depends on whether parsing is done with `parse_args()` (which results in an error) or using `parse_known_args()` (in which case the unknown args are returned the same way as unknown command line args). \n\nI'm still debating whether to also deprecate `allow_unknown_config_file_keys` constructor arg.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/13", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/13/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/13/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/13", "id": 59671209, "node_id": "MDU6SXNzdWU1OTY3MTIwOQ==", "number": 13, "title": "missing SUPPRESS", "user": {"login": "jsf80238", "id": 2550783, "node_id": "MDQ6VXNlcjI1NTA3ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2550783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsf80238", "html_url": "https://github.com/jsf80238", "followers_url": "https://api.github.com/users/jsf80238/followers", "following_url": "https://api.github.com/users/jsf80238/following{/other_user}", "gists_url": "https://api.github.com/users/jsf80238/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsf80238/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsf80238/subscriptions", "organizations_url": "https://api.github.com/users/jsf80238/orgs", "repos_url": "https://api.github.com/users/jsf80238/repos", "events_url": "https://api.github.com/users/jsf80238/events{/privacy}", "received_events_url": "https://api.github.com/users/jsf80238/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 109393193, "node_id": "MDU6TGFiZWwxMDkzOTMxOTM=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/bw2/ConfigArgParse/milestones/2", "html_url": "https://github.com/bw2/ConfigArgParse/milestone/2", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/milestones/2/labels", "id": 916276, "node_id": "MDk6TWlsZXN0b25lOTE2Mjc2", "number": 2, "title": "0.9.4", "description": null, "creator": {"login": "zorro3", "id": 7970538, "node_id": "MDQ6VXNlcjc5NzA1Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7970538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zorro3", "html_url": "https://github.com/zorro3", "followers_url": "https://api.github.com/users/zorro3/followers", "following_url": "https://api.github.com/users/zorro3/following{/other_user}", "gists_url": "https://api.github.com/users/zorro3/gists{/gist_id}", "starred_url": "https://api.github.com/users/zorro3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zorro3/subscriptions", "organizations_url": "https://api.github.com/users/zorro3/orgs", "repos_url": "https://api.github.com/users/zorro3/repos", "events_url": "https://api.github.com/users/zorro3/events{/privacy}", "received_events_url": "https://api.github.com/users/zorro3/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2014-12-28T22:00:49Z", "updated_at": "2015-11-09T08:18:45Z", "due_on": null, "closed_at": "2015-11-09T08:12:16Z"}, "comments": 2, "created_at": "2015-03-03T16:58:35Z", "updated_at": "2015-11-09T08:04:33Z", "closed_at": "2015-11-09T08:04:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Changed my program as follows:\nimport configargparse as argparse\n\nAnd now:\n\n$ tag -h\nTraceback (most recent call last):\n  File \"/home/user/make-deployment-group.py\", line 31, in <module>\n    parser.add_argument(\"--user-name\", help=argparse.SUPPRESS)\nAttributeError: 'module' object has no attribute 'SUPPRESS'\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/12", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/12/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/12/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/12", "id": 59306922, "node_id": "MDU6SXNzdWU1OTMwNjkyMg==", "number": 12, "title": "default for default_config_files=[...]", "user": {"login": "guettli", "id": 414336, "node_id": "MDQ6VXNlcjQxNDMzNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/414336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guettli", "html_url": "https://github.com/guettli", "followers_url": "https://api.github.com/users/guettli/followers", "following_url": "https://api.github.com/users/guettli/following{/other_user}", "gists_url": "https://api.github.com/users/guettli/gists{/gist_id}", "starred_url": "https://api.github.com/users/guettli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guettli/subscriptions", "organizations_url": "https://api.github.com/users/guettli/orgs", "repos_url": "https://api.github.com/users/guettli/repos", "events_url": "https://api.github.com/users/guettli/events{/privacy}", "received_events_url": "https://api.github.com/users/guettli/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 109393199, "node_id": "MDU6TGFiZWwxMDkzOTMxOTk=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-02-27T22:56:45Z", "updated_at": "2015-03-08T22:26:54Z", "closed_at": "2015-03-08T22:26:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I look at the README and see this:\n\np = configargparse.ArgParser(default_config_files=['/etc/settings.ini', '~/.my_settings'])\n\nI think: everybody is going to have a different list here.\n\nBut I guess there could be a default which satisfies a lot of people.\n\nMy prefered API: just provide a basename.\n\nThen the library checks below os.environ['VIRTUAL_ENV'], os.environ['HOME'], '/etc'.\n\nOf course the new feature should not make old code break.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/11", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/11/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/11/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/11", "id": 53177488, "node_id": "MDU6SXNzdWU1MzE3NzQ4OA==", "number": 11, "title": "Please include the tests directory in your sdist tarball", "user": {"login": "rhertzog", "id": 1013915, "node_id": "MDQ6VXNlcjEwMTM5MTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1013915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rhertzog", "html_url": "https://github.com/rhertzog", "followers_url": "https://api.github.com/users/rhertzog/followers", "following_url": "https://api.github.com/users/rhertzog/following{/other_user}", "gists_url": "https://api.github.com/users/rhertzog/gists{/gist_id}", "starred_url": "https://api.github.com/users/rhertzog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rhertzog/subscriptions", "organizations_url": "https://api.github.com/users/rhertzog/orgs", "repos_url": "https://api.github.com/users/rhertzog/repos", "events_url": "https://api.github.com/users/rhertzog/events{/privacy}", "received_events_url": "https://api.github.com/users/rhertzog/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 109393193, "node_id": "MDU6TGFiZWwxMDkzOTMxOTM=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/bw2/ConfigArgParse/milestones/2", "html_url": "https://github.com/bw2/ConfigArgParse/milestone/2", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/milestones/2/labels", "id": 916276, "node_id": "MDk6TWlsZXN0b25lOTE2Mjc2", "number": 2, "title": "0.9.4", "description": null, "creator": {"login": "zorro3", "id": 7970538, "node_id": "MDQ6VXNlcjc5NzA1Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7970538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zorro3", "html_url": "https://github.com/zorro3", "followers_url": "https://api.github.com/users/zorro3/followers", "following_url": "https://api.github.com/users/zorro3/following{/other_user}", "gists_url": "https://api.github.com/users/zorro3/gists{/gist_id}", "starred_url": "https://api.github.com/users/zorro3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zorro3/subscriptions", "organizations_url": "https://api.github.com/users/zorro3/orgs", "repos_url": "https://api.github.com/users/zorro3/repos", "events_url": "https://api.github.com/users/zorro3/events{/privacy}", "received_events_url": "https://api.github.com/users/zorro3/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2014-12-28T22:00:49Z", "updated_at": "2015-11-09T08:18:45Z", "due_on": null, "closed_at": "2015-11-09T08:12:16Z"}, "comments": 3, "created_at": "2014-12-31T10:27:07Z", "updated_at": "2015-09-16T14:02:03Z", "closed_at": "2015-01-05T07:38:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am packaging the module for Kali Linux (needed for a new version of mitmproxy) and I noticed that trying to run the test suite fails because the \"tests\" directory is missing from the tarball sent to PyPi:\nhttps://pypi.python.org/packages/source/C/ConfigArgParse/ConfigArgParse-0.9.3.tar.gz\n\nYou might also want to create proper tags in your Git repository so that one can find out the precise commit used for each release sent to PyPi (and so that we can download tarballs from GitHub as a work-around when the PyPi tarball doesn't suit our needs, like is the case right now).\n\nThank you!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/10", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/10/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/10/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/10", "id": 52976966, "node_id": "MDU6SXNzdWU1Mjk3Njk2Ng==", "number": 10, "title": "Feature request: Python string values", "user": {"login": "cortesi", "id": 22544, "node_id": "MDQ6VXNlcjIyNTQ0", "avatar_url": "https://avatars0.githubusercontent.com/u/22544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cortesi", "html_url": "https://github.com/cortesi", "followers_url": "https://api.github.com/users/cortesi/followers", "following_url": "https://api.github.com/users/cortesi/following{/other_user}", "gists_url": "https://api.github.com/users/cortesi/gists{/gist_id}", "starred_url": "https://api.github.com/users/cortesi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cortesi/subscriptions", "organizations_url": "https://api.github.com/users/cortesi/orgs", "repos_url": "https://api.github.com/users/cortesi/repos", "events_url": "https://api.github.com/users/cortesi/events{/privacy}", "received_events_url": "https://api.github.com/users/cortesi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 109393195, "node_id": "MDU6TGFiZWwxMDkzOTMxOTU=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-12-28T09:26:35Z", "updated_at": "2015-11-10T01:38:59Z", "closed_at": "2015-11-10T01:38:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm just about to release the first version of [mitmproxy](http://github.com/mitmproxy/mitmproxy) with config parsing based on ConfigArgParse. Thanks a bunch for your solid work. \n\nSomething we'd find immensely useful is the ability to specify values in key/value pairs as Python strings and triple-quoted multi-line strings, with Python-style escape sequences. This would make the config files for our tools hugely more powerful.\n\nThis would require converting the current parser to something more sophisticated. [PyParsing](http://pyparsing.wikispaces.com/) has built-in definitions for quoted strings, and implementing the parser in it would not be very much work.\n\nI don't have the bandwidth for this myself, but please let me know if a patch like this would be pulled, and I may get to it some time down the track. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/9", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/9/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/9/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/9", "id": 52300932, "node_id": "MDU6SXNzdWU1MjMwMDkzMg==", "number": 9, "title": "Add a \"dump config\" option", "user": {"login": "toejough", "id": 5317312, "node_id": "MDQ6VXNlcjUzMTczMTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/5317312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toejough", "html_url": "https://github.com/toejough", "followers_url": "https://api.github.com/users/toejough/followers", "following_url": "https://api.github.com/users/toejough/following{/other_user}", "gists_url": "https://api.github.com/users/toejough/gists{/gist_id}", "starred_url": "https://api.github.com/users/toejough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toejough/subscriptions", "organizations_url": "https://api.github.com/users/toejough/orgs", "repos_url": "https://api.github.com/users/toejough/repos", "events_url": "https://api.github.com/users/toejough/events{/privacy}", "received_events_url": "https://api.github.com/users/toejough/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 109393195, "node_id": "MDU6TGFiZWwxMDkzOTMxOTU=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/bw2/ConfigArgParse/milestones/2", "html_url": "https://github.com/bw2/ConfigArgParse/milestone/2", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/milestones/2/labels", "id": 916276, "node_id": "MDk6TWlsZXN0b25lOTE2Mjc2", "number": 2, "title": "0.9.4", "description": null, "creator": {"login": "zorro3", "id": 7970538, "node_id": "MDQ6VXNlcjc5NzA1Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7970538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zorro3", "html_url": "https://github.com/zorro3", "followers_url": "https://api.github.com/users/zorro3/followers", "following_url": "https://api.github.com/users/zorro3/following{/other_user}", "gists_url": "https://api.github.com/users/zorro3/gists{/gist_id}", "starred_url": "https://api.github.com/users/zorro3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zorro3/subscriptions", "organizations_url": "https://api.github.com/users/zorro3/orgs", "repos_url": "https://api.github.com/users/zorro3/repos", "events_url": "https://api.github.com/users/zorro3/events{/privacy}", "received_events_url": "https://api.github.com/users/zorro3/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2014-12-28T22:00:49Z", "updated_at": "2015-11-09T08:18:45Z", "due_on": null, "closed_at": "2015-11-09T08:12:16Z"}, "comments": 4, "created_at": "2014-12-17T22:31:09Z", "updated_at": "2015-11-09T08:04:11Z", "closed_at": "2015-11-09T08:04:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Any \"--\" argument can be used in a config file, and a user can see what those options are by parsing the help text, but there are other tools (like \"clang-format\") which will dump the config file equivalent of your command line if you ask them to.  \n\nYou can then edit and modify this file as required, but you don't start from scratch, as you currently must do for ConfigArgParse.\n\nIf there's a straightforward way to do so outside of the module, that's cool, too, but I dug in a little and didn't see one.\n\nMy naive solution was to format the output of \"vars(args)\", but that fails to cover the cases where a flag is used (but not actually used, so its value is still \"False\"), or where a value is being stored to a destination different than its CLI name (via the \"dest\" kwarg), or where the CLI is not a \"--\" option.\n\nTo do this correctly, I really need to get access to the parser internals, so I'm requesting it as a new feature of the module itself.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/8", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/8/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/8/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/8", "id": 41019781, "node_id": "MDU6SXNzdWU0MTAxOTc4MQ==", "number": 8, "title": "Add all argparse classes to the configargparse module namespace so that the 2 modules are truly interchangeable", "user": {"login": "zorro3", "id": 7970538, "node_id": "MDQ6VXNlcjc5NzA1Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7970538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zorro3", "html_url": "https://github.com/zorro3", "followers_url": "https://api.github.com/users/zorro3/followers", "following_url": "https://api.github.com/users/zorro3/following{/other_user}", "gists_url": "https://api.github.com/users/zorro3/gists{/gist_id}", "starred_url": "https://api.github.com/users/zorro3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zorro3/subscriptions", "organizations_url": "https://api.github.com/users/zorro3/orgs", "repos_url": "https://api.github.com/users/zorro3/repos", "events_url": "https://api.github.com/users/zorro3/events{/privacy}", "received_events_url": "https://api.github.com/users/zorro3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 109393195, "node_id": "MDU6TGFiZWwxMDkzOTMxOTU=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "zorro3", "id": 7970538, "node_id": "MDQ6VXNlcjc5NzA1Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7970538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zorro3", "html_url": "https://github.com/zorro3", "followers_url": "https://api.github.com/users/zorro3/followers", "following_url": "https://api.github.com/users/zorro3/following{/other_user}", "gists_url": "https://api.github.com/users/zorro3/gists{/gist_id}", "starred_url": "https://api.github.com/users/zorro3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zorro3/subscriptions", "organizations_url": "https://api.github.com/users/zorro3/orgs", "repos_url": "https://api.github.com/users/zorro3/repos", "events_url": "https://api.github.com/users/zorro3/events{/privacy}", "received_events_url": "https://api.github.com/users/zorro3/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "zorro3", "id": 7970538, "node_id": "MDQ6VXNlcjc5NzA1Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7970538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zorro3", "html_url": "https://github.com/zorro3", "followers_url": "https://api.github.com/users/zorro3/followers", "following_url": "https://api.github.com/users/zorro3/following{/other_user}", "gists_url": "https://api.github.com/users/zorro3/gists{/gist_id}", "starred_url": "https://api.github.com/users/zorro3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zorro3/subscriptions", "organizations_url": "https://api.github.com/users/zorro3/orgs", "repos_url": "https://api.github.com/users/zorro3/repos", "events_url": "https://api.github.com/users/zorro3/events{/privacy}", "received_events_url": "https://api.github.com/users/zorro3/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/bw2/ConfigArgParse/milestones/1", "html_url": "https://github.com/bw2/ConfigArgParse/milestone/1", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/milestones/1/labels", "id": 763958, "node_id": "MDk6TWlsZXN0b25lNzYzOTU4", "number": 1, "title": "Release 0.9.3", "description": "", "creator": {"login": "zorro3", "id": 7970538, "node_id": "MDQ6VXNlcjc5NzA1Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7970538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zorro3", "html_url": "https://github.com/zorro3", "followers_url": "https://api.github.com/users/zorro3/followers", "following_url": "https://api.github.com/users/zorro3/following{/other_user}", "gists_url": "https://api.github.com/users/zorro3/gists{/gist_id}", "starred_url": "https://api.github.com/users/zorro3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zorro3/subscriptions", "organizations_url": "https://api.github.com/users/zorro3/orgs", "repos_url": "https://api.github.com/users/zorro3/repos", "events_url": "https://api.github.com/users/zorro3/events{/privacy}", "received_events_url": "https://api.github.com/users/zorro3/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 3, "state": "closed", "created_at": "2014-08-24T21:10:19Z", "updated_at": "2014-08-25T00:14:14Z", "due_on": "2014-08-24T07:00:00Z", "closed_at": "2014-08-25T00:14:14Z"}, "comments": 1, "created_at": "2014-08-24T21:09:19Z", "updated_at": "2014-08-25T00:09:09Z", "closed_at": "2014-08-25T00:09:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/7", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/7/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/7/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/7", "id": 41019753, "node_id": "MDU6SXNzdWU0MTAxOTc1Mw==", "number": 7, "title": "Allow config file paths to use ~/ for specifying user's home dir", "user": {"login": "zorro3", "id": 7970538, "node_id": "MDQ6VXNlcjc5NzA1Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7970538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zorro3", "html_url": "https://github.com/zorro3", "followers_url": "https://api.github.com/users/zorro3/followers", "following_url": "https://api.github.com/users/zorro3/following{/other_user}", "gists_url": "https://api.github.com/users/zorro3/gists{/gist_id}", "starred_url": "https://api.github.com/users/zorro3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zorro3/subscriptions", "organizations_url": "https://api.github.com/users/zorro3/orgs", "repos_url": "https://api.github.com/users/zorro3/repos", "events_url": "https://api.github.com/users/zorro3/events{/privacy}", "received_events_url": "https://api.github.com/users/zorro3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 109393195, "node_id": "MDU6TGFiZWwxMDkzOTMxOTU=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "zorro3", "id": 7970538, "node_id": "MDQ6VXNlcjc5NzA1Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7970538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zorro3", "html_url": "https://github.com/zorro3", "followers_url": "https://api.github.com/users/zorro3/followers", "following_url": "https://api.github.com/users/zorro3/following{/other_user}", "gists_url": "https://api.github.com/users/zorro3/gists{/gist_id}", "starred_url": "https://api.github.com/users/zorro3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zorro3/subscriptions", "organizations_url": "https://api.github.com/users/zorro3/orgs", "repos_url": "https://api.github.com/users/zorro3/repos", "events_url": "https://api.github.com/users/zorro3/events{/privacy}", "received_events_url": "https://api.github.com/users/zorro3/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "zorro3", "id": 7970538, "node_id": "MDQ6VXNlcjc5NzA1Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7970538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zorro3", "html_url": "https://github.com/zorro3", "followers_url": "https://api.github.com/users/zorro3/followers", "following_url": "https://api.github.com/users/zorro3/following{/other_user}", "gists_url": "https://api.github.com/users/zorro3/gists{/gist_id}", "starred_url": "https://api.github.com/users/zorro3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zorro3/subscriptions", "organizations_url": "https://api.github.com/users/zorro3/orgs", "repos_url": "https://api.github.com/users/zorro3/repos", "events_url": "https://api.github.com/users/zorro3/events{/privacy}", "received_events_url": "https://api.github.com/users/zorro3/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/bw2/ConfigArgParse/milestones/1", "html_url": "https://github.com/bw2/ConfigArgParse/milestone/1", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/milestones/1/labels", "id": 763958, "node_id": "MDk6TWlsZXN0b25lNzYzOTU4", "number": 1, "title": "Release 0.9.3", "description": "", "creator": {"login": "zorro3", "id": 7970538, "node_id": "MDQ6VXNlcjc5NzA1Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7970538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zorro3", "html_url": "https://github.com/zorro3", "followers_url": "https://api.github.com/users/zorro3/followers", "following_url": "https://api.github.com/users/zorro3/following{/other_user}", "gists_url": "https://api.github.com/users/zorro3/gists{/gist_id}", "starred_url": "https://api.github.com/users/zorro3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zorro3/subscriptions", "organizations_url": "https://api.github.com/users/zorro3/orgs", "repos_url": "https://api.github.com/users/zorro3/repos", "events_url": "https://api.github.com/users/zorro3/events{/privacy}", "received_events_url": "https://api.github.com/users/zorro3/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 3, "state": "closed", "created_at": "2014-08-24T21:10:19Z", "updated_at": "2014-08-25T00:14:14Z", "due_on": "2014-08-24T07:00:00Z", "closed_at": "2014-08-25T00:14:14Z"}, "comments": 1, "created_at": "2014-08-24T21:07:55Z", "updated_at": "2014-08-25T00:08:59Z", "closed_at": "2014-08-25T00:08:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/6", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/6/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/6/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/6", "id": 40897036, "node_id": "MDU6SXNzdWU0MDg5NzAzNg==", "number": 6, "title": "Setting is_config_file to true causes help to cut off", "user": {"login": "razasyedh", "id": 4624760, "node_id": "MDQ6VXNlcjQ2MjQ3NjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/4624760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/razasyedh", "html_url": "https://github.com/razasyedh", "followers_url": "https://api.github.com/users/razasyedh/followers", "following_url": "https://api.github.com/users/razasyedh/following{/other_user}", "gists_url": "https://api.github.com/users/razasyedh/gists{/gist_id}", "starred_url": "https://api.github.com/users/razasyedh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/razasyedh/subscriptions", "organizations_url": "https://api.github.com/users/razasyedh/orgs", "repos_url": "https://api.github.com/users/razasyedh/repos", "events_url": "https://api.github.com/users/razasyedh/events{/privacy}", "received_events_url": "https://api.github.com/users/razasyedh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 109393193, "node_id": "MDU6TGFiZWwxMDkzOTMxOTM=", "url": "https://api.github.com/repos/bw2/ConfigArgParse/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "zorro3", "id": 7970538, "node_id": "MDQ6VXNlcjc5NzA1Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7970538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zorro3", "html_url": "https://github.com/zorro3", "followers_url": "https://api.github.com/users/zorro3/followers", "following_url": "https://api.github.com/users/zorro3/following{/other_user}", "gists_url": "https://api.github.com/users/zorro3/gists{/gist_id}", "starred_url": "https://api.github.com/users/zorro3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zorro3/subscriptions", "organizations_url": "https://api.github.com/users/zorro3/orgs", "repos_url": "https://api.github.com/users/zorro3/repos", "events_url": "https://api.github.com/users/zorro3/events{/privacy}", "received_events_url": "https://api.github.com/users/zorro3/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "zorro3", "id": 7970538, "node_id": "MDQ6VXNlcjc5NzA1Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7970538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zorro3", "html_url": "https://github.com/zorro3", "followers_url": "https://api.github.com/users/zorro3/followers", "following_url": "https://api.github.com/users/zorro3/following{/other_user}", "gists_url": "https://api.github.com/users/zorro3/gists{/gist_id}", "starred_url": "https://api.github.com/users/zorro3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zorro3/subscriptions", "organizations_url": "https://api.github.com/users/zorro3/orgs", "repos_url": "https://api.github.com/users/zorro3/repos", "events_url": "https://api.github.com/users/zorro3/events{/privacy}", "received_events_url": "https://api.github.com/users/zorro3/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/bw2/ConfigArgParse/milestones/1", "html_url": "https://github.com/bw2/ConfigArgParse/milestone/1", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/milestones/1/labels", "id": 763958, "node_id": "MDk6TWlsZXN0b25lNzYzOTU4", "number": 1, "title": "Release 0.9.3", "description": "", "creator": {"login": "zorro3", "id": 7970538, "node_id": "MDQ6VXNlcjc5NzA1Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7970538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zorro3", "html_url": "https://github.com/zorro3", "followers_url": "https://api.github.com/users/zorro3/followers", "following_url": "https://api.github.com/users/zorro3/following{/other_user}", "gists_url": "https://api.github.com/users/zorro3/gists{/gist_id}", "starred_url": "https://api.github.com/users/zorro3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zorro3/subscriptions", "organizations_url": "https://api.github.com/users/zorro3/orgs", "repos_url": "https://api.github.com/users/zorro3/repos", "events_url": "https://api.github.com/users/zorro3/events{/privacy}", "received_events_url": "https://api.github.com/users/zorro3/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 3, "state": "closed", "created_at": "2014-08-24T21:10:19Z", "updated_at": "2014-08-25T00:14:14Z", "due_on": "2014-08-24T07:00:00Z", "closed_at": "2014-08-25T00:14:14Z"}, "comments": 2, "created_at": "2014-08-22T10:33:49Z", "updated_at": "2014-08-25T05:40:00Z", "closed_at": "2014-08-25T00:08:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I add the config argument with `is_config_file=True` and I run my program with the -h option, the help only shows the `-h` and the `-c` flags. Here is the example output using `my_script.py` from the documentation:\n\n```\n~$ python ./my_script.py -h\nusage: my_script.py [-h] -c MY_CONFIG\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c MY_CONFIG, --my-config MY_CONFIG\n                    config file path\n```\n\nI am running python 2.7.5 on osx 10.9.4 with configargparse 0.9.2 installed via `pip`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/2", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/2/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/2/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/2", "id": 39234757, "node_id": "MDU6SXNzdWUzOTIzNDc1Nw==", "number": 2, "title": "AttributeError: 'module' object has no attribute 'ArgParser'", "user": {"login": "Pablosan", "id": 174738, "node_id": "MDQ6VXNlcjE3NDczOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/174738?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pablosan", "html_url": "https://github.com/Pablosan", "followers_url": "https://api.github.com/users/Pablosan/followers", "following_url": "https://api.github.com/users/Pablosan/following{/other_user}", "gists_url": "https://api.github.com/users/Pablosan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pablosan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pablosan/subscriptions", "organizations_url": "https://api.github.com/users/Pablosan/orgs", "repos_url": "https://api.github.com/users/Pablosan/repos", "events_url": "https://api.github.com/users/Pablosan/events{/privacy}", "received_events_url": "https://api.github.com/users/Pablosan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-07-31T20:34:46Z", "updated_at": "2014-08-11T03:44:57Z", "closed_at": "2014-08-11T00:55:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If I try to use the package (in either Python 2.7.8 or 3.4.1), it's as if there is nothing in the module.\n\nFor instance, from within iPython I do `import configargparse`, then if I type `configargparse.` and hit the tab key there is no auto-complete.\n\nTrying to use the package in an app yields the following error:\n\n```\nTraceback (most recent call last):\n  File \"test/server.py\", line 62, in <module>\n    main(args=sys.argv)\n  File \"test/server.py\", line 47, in main\n    parser = configargparse.ArgParser(default_configfiles=['/etc/settings.ini'])\nAttributeError: 'module' object has no attribute 'ArgParser'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/1", "repository_url": "https://api.github.com/repos/bw2/ConfigArgParse", "labels_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/1/comments", "events_url": "https://api.github.com/repos/bw2/ConfigArgParse/issues/1/events", "html_url": "https://github.com/bw2/ConfigArgParse/issues/1", "id": 39081857, "node_id": "MDU6SXNzdWUzOTA4MTg1Nw==", "number": 1, "title": "ConfigArgParse depends on pypandoc when installing via pip", "user": {"login": "tom-mi", "id": 3297149, "node_id": "MDQ6VXNlcjMyOTcxNDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/3297149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tom-mi", "html_url": "https://github.com/tom-mi", "followers_url": "https://api.github.com/users/tom-mi/followers", "following_url": "https://api.github.com/users/tom-mi/following{/other_user}", "gists_url": "https://api.github.com/users/tom-mi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tom-mi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tom-mi/subscriptions", "organizations_url": "https://api.github.com/users/tom-mi/orgs", "repos_url": "https://api.github.com/users/tom-mi/repos", "events_url": "https://api.github.com/users/tom-mi/events{/privacy}", "received_events_url": "https://api.github.com/users/tom-mi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-07-30T11:09:40Z", "updated_at": "2014-08-11T03:28:05Z", "closed_at": "2014-08-11T03:26:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "The package is not installable via pip:\n\n```\n$ pip install ConfigArgParse\nDownloading/unpacking ConfigArgParse\n  Downloading ConfigArgParse-0.9.1.tar.gz\n  Running setup.py (path:/.../build/ConfigArgParse/setup.py) egg_info for package ConfigArgParse\n    ERROR: pypandoc module not found, could not convert Markdown to RST for PyPI\n    Complete output from command python setup.py egg_info:\n    ERROR: pypandoc module not found, could not convert Markdown to RST for PyPI\n\n----------------------------------------\nCleaning up...\nCommand python setup.py egg_info failed with error code 1 in /.../build/ConfigArgParse\nStoring debug log for failure in /.../.pip/pip.log\n\n$ python --version\nPython 2.7.8\n```\n\nInstalling pypandoc solves the problem, but the README states the library has no 3rd-party requirements. The README.md file is not converted anyway, as it is missing in the PyPI package:\n\n```\n$ pip install pypandoc\n[...]\n$ pip install ConfigArgParse\nDownloading/unpacking ConfigArgParse\n  Downloading ConfigArgParse-0.9.1.tar.gz\n  Running setup.py (path:/.../build/ConfigArgParse/setup.py) egg_info for package ConfigArgParse\n    WARNING: couldn't find README.md\n\nInstalling collected packages: ConfigArgParse\n  Running setup.py install for ConfigArgParse\n    WARNING: couldn't find README.md\n\nSuccessfully installed ConfigArgParse\nCleaning up...\n```\n", "performed_via_github_app": null, "score": 1.0}]}