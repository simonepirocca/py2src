{"total_count": 199, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/507", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/507/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/507/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/507/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/507", "id": 667113439, "node_id": "MDU6SXNzdWU2NjcxMTM0Mzk=", "number": 507, "title": "Documentation and release out of sync", "user": {"login": "salcedo", "id": 823026, "node_id": "MDQ6VXNlcjgyMzAyNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/823026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/salcedo", "html_url": "https://github.com/salcedo", "followers_url": "https://api.github.com/users/salcedo/followers", "following_url": "https://api.github.com/users/salcedo/following{/other_user}", "gists_url": "https://api.github.com/users/salcedo/gists{/gist_id}", "starred_url": "https://api.github.com/users/salcedo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/salcedo/subscriptions", "organizations_url": "https://api.github.com/users/salcedo/orgs", "repos_url": "https://api.github.com/users/salcedo/repos", "events_url": "https://api.github.com/users/salcedo/events{/privacy}", "received_events_url": "https://api.github.com/users/salcedo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-28T14:19:40Z", "updated_at": "2020-07-28T16:44:43Z", "closed_at": "2020-07-28T16:44:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The feature documented by [Requiring Presence of Claims](https://pyjwt.readthedocs.io/en/latest/usage.html#requiring-presence-of-claims) is not implemented in the current release version (1.7.1)\r\n\r\nThis was result of pull #280 as proposed #279\r\n\r\n## Expected Result\r\n\r\n>>jwt.decode(encoded, options={'require': ['any, 'claim', 'here']})\r\nShould raise MissingRequiredClaimError\r\n\r\n## Actual Result\r\n\r\nThe documentation states that options can be set to require any claim. However, the current latest release of pyJWT (1.7.1), only validates the presence of 'exp', 'iat', 'nbf'\r\n\r\n```\r\n    def _validate_required_claims(self, payload, options):\r\n        if options.get('require_exp') and payload.get('exp') is None:\r\n            raise MissingRequiredClaimError('exp')\r\n\r\n        if options.get('require_iat') and payload.get('iat') is None:\r\n            raise MissingRequiredClaimError('iat')\r\n\r\n        if options.get('require_nbf') and payload.get('nbf') is None:\r\n            raise MissingRequiredClaimError('nbf')\r\n```\r\n\r\n## Reproduction Steps\r\n\r\nN/A\r\n\r\n## System Information\r\n\r\n```\r\n{\r\n  \"cryptography\": {\r\n    \"version\": \"2.9.2\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.7.10-zen1-1-zen\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyjwt\": {\r\n    \"version\": \"1.7.1\"\r\n  }\r\n}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/488", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/488/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/488/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/488/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/488", "id": 623645918, "node_id": "MDU6SXNzdWU2MjM2NDU5MTg=", "number": 488, "title": "Option require does not work if exp claim is absent", "user": {"login": "tohin", "id": 4018190, "node_id": "MDQ6VXNlcjQwMTgxOTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4018190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tohin", "html_url": "https://github.com/tohin", "followers_url": "https://api.github.com/users/tohin/followers", "following_url": "https://api.github.com/users/tohin/following{/other_user}", "gists_url": "https://api.github.com/users/tohin/gists{/gist_id}", "starred_url": "https://api.github.com/users/tohin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tohin/subscriptions", "organizations_url": "https://api.github.com/users/tohin/orgs", "repos_url": "https://api.github.com/users/tohin/repos", "events_url": "https://api.github.com/users/tohin/events{/privacy}", "received_events_url": "https://api.github.com/users/tohin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-23T12:05:41Z", "updated_at": "2020-07-03T06:37:57Z", "closed_at": "2020-07-03T06:37:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I assumed there will be an error in case if the `exp` claim is not provided in the token payload, If `require` option is enabled for `exp` claim.\r\n\r\n## Expected Result\r\n\r\nException in `decode` function.\r\n\r\n## Actual Result\r\n\r\nToken decoded successfully.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\n\r\nimport jwt\r\n\r\nkey = \"foo\"\r\ntoken = jwt.encode({\"foo\": \"bar\"}, key, algorithm=\"HS256\")\r\njwt.decode(token, key, options={\"require\": [\"exp\"]}, algorithms=\"HS256\")\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m jwt.help\r\n\r\n```\r\n{\r\n  \"cryptography\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.8\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-101-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyjwt\": {\r\n    \"version\": \"1.7.1\"\r\n  }\r\n}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/485", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/485/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/485/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/485/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/485", "id": 615332982, "node_id": "MDU6SXNzdWU2MTUzMzI5ODI=", "number": 485, "title": "New co maintainer", "user": {"login": "auvipy", "id": 6212603, "node_id": "MDQ6VXNlcjYyMTI2MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6212603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/auvipy", "html_url": "https://github.com/auvipy", "followers_url": "https://api.github.com/users/auvipy/followers", "following_url": "https://api.github.com/users/auvipy/following{/other_user}", "gists_url": "https://api.github.com/users/auvipy/gists{/gist_id}", "starred_url": "https://api.github.com/users/auvipy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/auvipy/subscriptions", "organizations_url": "https://api.github.com/users/auvipy/orgs", "repos_url": "https://api.github.com/users/auvipy/repos", "events_url": "https://api.github.com/users/auvipy/events{/privacy}", "received_events_url": "https://api.github.com/users/auvipy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-10T07:11:07Z", "updated_at": "2020-05-14T14:48:20Z", "closed_at": "2020-05-14T14:48:20Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Hi, I want to be a maintainer of this project.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/483", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/483/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/483/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/483/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/483", "id": 606004379, "node_id": "MDU6SXNzdWU2MDYwMDQzNzk=", "number": 483, "title": "Automated build fails", "user": {"login": "dimaqq", "id": 662249, "node_id": "MDQ6VXNlcjY2MjI0OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/662249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dimaqq", "html_url": "https://github.com/dimaqq", "followers_url": "https://api.github.com/users/dimaqq/followers", "following_url": "https://api.github.com/users/dimaqq/following{/other_user}", "gists_url": "https://api.github.com/users/dimaqq/gists{/gist_id}", "starred_url": "https://api.github.com/users/dimaqq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dimaqq/subscriptions", "organizations_url": "https://api.github.com/users/dimaqq/orgs", "repos_url": "https://api.github.com/users/dimaqq/repos", "events_url": "https://api.github.com/users/dimaqq/events{/privacy}", "received_events_url": "https://api.github.com/users/dimaqq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-24T03:03:27Z", "updated_at": "2020-04-26T23:48:43Z", "closed_at": "2020-04-26T23:48:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\nRun python -m pip install --upgrade pip\r\nRequirement already up-to-date: pip in /opt/hostedtoolcache/Python/3.8.2/x64/lib/python3.8/site-packages (20.0.2)\r\nERROR: Could not open requirements file: [Errno 2] No such file or directory: 'requirements.txt'\r\n##[error]Process completed with exit code 1.\r\n```\r\n\r\nThere's no `requirements.txt` in the repo though, what is it on about?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/481", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/481/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/481/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/481/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/481", "id": 605596880, "node_id": "MDU6SXNzdWU2MDU1OTY4ODA=", "number": 481, "title": "Unable to decode token", "user": {"login": "rahulchowdhuryce", "id": 62538978, "node_id": "MDQ6VXNlcjYyNTM4OTc4", "avatar_url": "https://avatars3.githubusercontent.com/u/62538978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rahulchowdhuryce", "html_url": "https://github.com/rahulchowdhuryce", "followers_url": "https://api.github.com/users/rahulchowdhuryce/followers", "following_url": "https://api.github.com/users/rahulchowdhuryce/following{/other_user}", "gists_url": "https://api.github.com/users/rahulchowdhuryce/gists{/gist_id}", "starred_url": "https://api.github.com/users/rahulchowdhuryce/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rahulchowdhuryce/subscriptions", "organizations_url": "https://api.github.com/users/rahulchowdhuryce/orgs", "repos_url": "https://api.github.com/users/rahulchowdhuryce/repos", "events_url": "https://api.github.com/users/rahulchowdhuryce/events{/privacy}", "received_events_url": "https://api.github.com/users/rahulchowdhuryce/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-23T14:42:12Z", "updated_at": "2020-04-26T23:48:06Z", "closed_at": "2020-04-26T23:48:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am given a JWT which does not contain any dots. I read somewhere that the typical format of a JWT is 3 pieces of string concatenated with 2 dots in total. Using PyJWT when I try to decode the token, I am getting the below error -\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/neelanjana/.virtualenvs/athena_env/lib/python3.7/site-packages/jwt/api_jws.py\", line 180, in _load\r\n    signing_input, crypto_segment = jwt.rsplit(b'.', 1)\r\nValueError: not enough values to unpack (expected 2, got 1)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/neelanjana/.virtualenvs/athena_env/lib/python3.7/site-packages/jwt/api_jwt.py\", line 84, in decode\r\n    payload, _, _, _ = self._load(jwt)\r\n  File \"/home/neelanjana/.virtualenvs/athena_env/lib/python3.7/site-packages/jwt/api_jws.py\", line 183, in _load\r\n    raise DecodeError('Not enough segments')\r\njwt.exceptions.DecodeError: Not enough segments\r\n\r\n```\r\n\r\nHowever, when I put the same token on jwt.io, it gets decoded and I am able to see the complete dictionary. Is What am I missing?\r\n\r\nHere is my code -\r\n```python\r\nimport jwt\r\n\r\na = \"someToken\"\r\nprint(jwt.decode(a))\r\n```\r\n\r\nAttaching a pastebin link to the token [here][1] since it is too long to put here.\r\n\r\nP.S. I am not married to the idea of using pyjwt. If any other library can decode it it's all the same for me.\r\n\r\n\r\n  [1]: https://pastebin.com/L7F6DMR2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/480", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/480/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/480/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/480/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/480", "id": 590885656, "node_id": "MDU6SXNzdWU1OTA4ODU2NTY=", "number": 480, "title": "Commercial Usage rights for pyjwt", "user": {"login": "hi2rashid", "id": 10250923, "node_id": "MDQ6VXNlcjEwMjUwOTIz", "avatar_url": "https://avatars1.githubusercontent.com/u/10250923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hi2rashid", "html_url": "https://github.com/hi2rashid", "followers_url": "https://api.github.com/users/hi2rashid/followers", "following_url": "https://api.github.com/users/hi2rashid/following{/other_user}", "gists_url": "https://api.github.com/users/hi2rashid/gists{/gist_id}", "starred_url": "https://api.github.com/users/hi2rashid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hi2rashid/subscriptions", "organizations_url": "https://api.github.com/users/hi2rashid/orgs", "repos_url": "https://api.github.com/users/hi2rashid/repos", "events_url": "https://api.github.com/users/hi2rashid/events{/privacy}", "received_events_url": "https://api.github.com/users/hi2rashid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-31T08:01:35Z", "updated_at": "2020-03-31T13:50:57Z", "closed_at": "2020-03-31T13:50:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "We are using this module in our application with Django.\r\n\r\nCan you please confirm if its okay to be used commercially.\r\n\r\nThank you in advance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/476", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/476/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/476/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/476/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/476", "id": 574238399, "node_id": "MDU6SXNzdWU1NzQyMzgzOTk=", "number": 476, "title": "Issue with decoding sequential arrays", "user": {"login": "bshaffer", "id": 103941, "node_id": "MDQ6VXNlcjEwMzk0MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/103941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bshaffer", "html_url": "https://github.com/bshaffer", "followers_url": "https://api.github.com/users/bshaffer/followers", "following_url": "https://api.github.com/users/bshaffer/following{/other_user}", "gists_url": "https://api.github.com/users/bshaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/bshaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bshaffer/subscriptions", "organizations_url": "https://api.github.com/users/bshaffer/orgs", "repos_url": "https://api.github.com/users/bshaffer/repos", "events_url": "https://api.github.com/users/bshaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/bshaffer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-02T20:47:40Z", "updated_at": "2020-04-12T01:14:07Z", "closed_at": "2020-04-12T01:14:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Summary.\r\n\r\nSee https://github.com/firebase/php-jwt/issues/259 for reference\r\n\r\nIt seems that there is an issue where sequential arrays (defined in JSON as `[\"item1\", \"item2\", \"item3\"]` are not decoding as expected in this library, and instead the object notation of `{\"0\":\"item1\", \"1\": \"item2\", \"2\": \"item3\"}` is required.\r\n\r\n## Expected Result\r\n\r\nJSON sequential arrays should be encoded/decoded as expected (`[\"item1\", \"item2\", \"item3\"]`)\r\n\r\n## Actual Result\r\n\r\nJSON sequential arrays are being encoded/decoded as objects, which presents discrepancies with other libraries (`{\"0\":\"item1\", \"1\": \"item2\", \"2\": \"item3\"}`)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/474", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/474/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/474/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/474/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/474", "id": 568330492, "node_id": "MDU6SXNzdWU1NjgzMzA0OTI=", "number": 474, "title": "Getting exception NameError: global name 'decode_rfc6979_signature' is not defined", "user": {"login": "tayalakansh", "id": 13218298, "node_id": "MDQ6VXNlcjEzMjE4Mjk4", "avatar_url": "https://avatars1.githubusercontent.com/u/13218298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tayalakansh", "html_url": "https://github.com/tayalakansh", "followers_url": "https://api.github.com/users/tayalakansh/followers", "following_url": "https://api.github.com/users/tayalakansh/following{/other_user}", "gists_url": "https://api.github.com/users/tayalakansh/gists{/gist_id}", "starred_url": "https://api.github.com/users/tayalakansh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tayalakansh/subscriptions", "organizations_url": "https://api.github.com/users/tayalakansh/orgs", "repos_url": "https://api.github.com/users/tayalakansh/repos", "events_url": "https://api.github.com/users/tayalakansh/events{/privacy}", "received_events_url": "https://api.github.com/users/tayalakansh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-20T14:15:14Z", "updated_at": "2020-02-20T14:31:04Z", "closed_at": "2020-02-20T14:31:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Summary.\r\nGetting exception on Ubuntu 14.04.5 LTS and PyJWT-1.7.1\r\n## Expected Result\r\n\r\nWhat you expected.\r\n\r\n## Actual Result\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 2311, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1834, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1737, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1832, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1818, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"./application.py\", line 182, in push_ios_today_cases\r\n    return push_today_cases()\r\n  File \"./ios.py\", line 76, in push_today_cases\r\n    'kid': 'LPSB786QW9'\r\n  File \"/usr/local/lib/python2.7/dist-packages/jwt/api_jwt.py\", line 56, in encode\r\n    json_payload, key, algorithm, headers, json_encoder\r\n  File \"/usr/local/lib/python2.7/dist-packages/jwt/api_jws.py\", line 98, in encode\r\n    signature = alg_obj.sign(signing_input, key)\r\n  File \"/usr/local/lib/python2.7/dist-packages/jwt/algorithms.py\", line 239, in sign\r\n    return der_to_raw_signature(der_sig, key.curve)\r\n  File \"/usr/local/lib/python2.7/dist-packages/jwt/utils.py\", line 52, in der_to_raw_signature\r\n    r, s = decode_rfc6979_signature(der_sig)\r\nNameError: global name 'decode_rfc6979_signature' is not defined\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport jwt\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m jwt.help\r\n\r\n```\r\n{\r\n  \"cryptography\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"2.7.6\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"3.13.0-105-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyjwt\": {\r\n    \"version\": \"1.7.1\"\r\n  }\r\n}\r\n```\r\n\r\nThis command is only available on PyJWT v1.6.3 and greater. Otherwise,\r\nplease provide some basic information about your system.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/471", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/471/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/471/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/471/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/471", "id": 551346593, "node_id": "MDU6SXNzdWU1NTEzNDY1OTM=", "number": 471, "title": "Is there any way to ignore expiry date?", "user": {"login": "cglacet", "id": 28622118, "node_id": "MDQ6VXNlcjI4NjIyMTE4", "avatar_url": "https://avatars2.githubusercontent.com/u/28622118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cglacet", "html_url": "https://github.com/cglacet", "followers_url": "https://api.github.com/users/cglacet/followers", "following_url": "https://api.github.com/users/cglacet/following{/other_user}", "gists_url": "https://api.github.com/users/cglacet/gists{/gist_id}", "starred_url": "https://api.github.com/users/cglacet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cglacet/subscriptions", "organizations_url": "https://api.github.com/users/cglacet/orgs", "repos_url": "https://api.github.com/users/cglacet/repos", "events_url": "https://api.github.com/users/cglacet/events{/privacy}", "received_events_url": "https://api.github.com/users/cglacet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-17T10:56:03Z", "updated_at": "2020-01-18T18:09:09Z", "closed_at": "2020-01-18T18:08:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm simply wondering if there is a way to ignore expiry date (only) while decoding. I've seen that there is a `verify` option but from what the documentation say it also ignores signature. I only want to have a way to retrieve the payload of any access token so I can refresh them without encoding any information in my refresh tokens. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/468", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/468/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/468/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/468/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/468", "id": 538355021, "node_id": "MDU6SXNzdWU1MzgzNTUwMjE=", "number": 468, "title": "pyJWT does not support lists ", "user": {"login": "anguelov", "id": 14056215, "node_id": "MDQ6VXNlcjE0MDU2MjE1", "avatar_url": "https://avatars1.githubusercontent.com/u/14056215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anguelov", "html_url": "https://github.com/anguelov", "followers_url": "https://api.github.com/users/anguelov/followers", "following_url": "https://api.github.com/users/anguelov/following{/other_user}", "gists_url": "https://api.github.com/users/anguelov/gists{/gist_id}", "starred_url": "https://api.github.com/users/anguelov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anguelov/subscriptions", "organizations_url": "https://api.github.com/users/anguelov/orgs", "repos_url": "https://api.github.com/users/anguelov/repos", "events_url": "https://api.github.com/users/anguelov/events{/privacy}", "received_events_url": "https://api.github.com/users/anguelov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-16T11:31:14Z", "updated_at": "2019-12-27T15:31:09Z", "closed_at": "2019-12-27T15:31:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Summary.\r\nA empty list or a list of JSON objects is valid JSON. currently trying to encode a list into JWT raises a exception. \r\n## Expected Result\r\n\r\n`JWT.encode([], \"secret\", algorithm=\"HS256\")` should return a valid JWT:\r\n`eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.W10.ny0W7Pkele2S9JjQz1pcPuE-7_Jrt2VBqPEO1UnPyQg`\r\n\r\n## Actual Result\r\n\r\n```python\r\nself = <jwt.api_jwt.PyJWT object at 0x1108f14d0>, payload = []\r\nkey = 'secret'\r\nalgorithm = 'HS256', headers = None, json_encoder = None\r\n\r\n    def encode(self,\r\n               payload,  # type: Union[Dict, bytes]\r\n               key,  # type: str\r\n               algorithm='HS256',  # type: str\r\n               headers=None,  # type: Optional[Dict]\r\n               json_encoder=None  # type: Optional[Callable]\r\n               ):\r\n        # Check that we get a mapping\r\n        if not isinstance(payload, Mapping):\r\n>           raise TypeError('Expecting a mapping object, as JWT only supports '\r\n                            'JSON objects as payloads.')\r\nE           TypeError: Expecting a mapping object, as JWT only supports JSON objects as payloads.\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport jwt\r\njwt.encode([], \"secret\")  # fail\r\njwt.encode([{}], \"secret\")  # fail\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m jwt.help\r\n\r\n```\r\n{\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"19.0.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyjwt\": {\r\n    \"version\": \"1.7.1\"\r\n  }\r\n}\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/467", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/467/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/467/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/467/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/467", "id": 535085586, "node_id": "MDU6SXNzdWU1MzUwODU1ODY=", "number": 467, "title": "Customizing jwt error exceptions", "user": {"login": "pmutua", "id": 16241851, "node_id": "MDQ6VXNlcjE2MjQxODUx", "avatar_url": "https://avatars3.githubusercontent.com/u/16241851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmutua", "html_url": "https://github.com/pmutua", "followers_url": "https://api.github.com/users/pmutua/followers", "following_url": "https://api.github.com/users/pmutua/following{/other_user}", "gists_url": "https://api.github.com/users/pmutua/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmutua/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmutua/subscriptions", "organizations_url": "https://api.github.com/users/pmutua/orgs", "repos_url": "https://api.github.com/users/pmutua/repos", "events_url": "https://api.github.com/users/pmutua/events{/privacy}", "received_events_url": "https://api.github.com/users/pmutua/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-09T17:47:40Z", "updated_at": "2019-12-10T07:50:50Z", "closed_at": "2019-12-10T07:50:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can I customize JWT exceptions? For instance normally in **pyjwt** the response that is returned when someone does not provide credentials would be:\r\n\r\n```python\r\n{\r\n    \"detail\": \"Authentication credentials were not provided.\"\r\n}\r\n```\r\n\r\n\r\nBut I want to customize the response to return something like this:\r\n\r\n```python\r\n{\r\n     \"success\": False,\r\n     \"msg\": \"Authentication credentials were not provided.\",\r\n     \"data\": None\r\n}\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/464", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/464/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/464/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/464/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/464", "id": 524604790, "node_id": "MDU6SXNzdWU1MjQ2MDQ3OTA=", "number": 464, "title": "How to implement refresh token after access token expires?", "user": {"login": "ngc2392", "id": 30133896, "node_id": "MDQ6VXNlcjMwMTMzODk2", "avatar_url": "https://avatars3.githubusercontent.com/u/30133896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngc2392", "html_url": "https://github.com/ngc2392", "followers_url": "https://api.github.com/users/ngc2392/followers", "following_url": "https://api.github.com/users/ngc2392/following{/other_user}", "gists_url": "https://api.github.com/users/ngc2392/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngc2392/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngc2392/subscriptions", "organizations_url": "https://api.github.com/users/ngc2392/orgs", "repos_url": "https://api.github.com/users/ngc2392/repos", "events_url": "https://api.github.com/users/ngc2392/events{/privacy}", "received_events_url": "https://api.github.com/users/ngc2392/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-18T20:35:42Z", "updated_at": "2019-11-19T01:13:18Z", "closed_at": "2019-11-19T01:13:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was hoping someone could help me with this. I have looked quite about online for this answer and am surprised I can't find an example somewhere. I am trying to implement a login view. If a user submits a username and password that matches a User in the database, then I create a token and return it to the frontend, and store it somehow in the browser. Now, the user does something else (edits some field) which requires a POST request. Enough time has passed so that the Access token is expired. How do I get a new one?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/461", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/461/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/461/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/461/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/461", "id": 521450821, "node_id": "MDU6SXNzdWU1MjE0NTA4MjE=", "number": 461, "title": "How to resolve Error: The specified alg value is not allowed when decoding HS256  encoded token ", "user": {"login": "pmutua", "id": 16241851, "node_id": "MDQ6VXNlcjE2MjQxODUx", "avatar_url": "https://avatars3.githubusercontent.com/u/16241851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmutua", "html_url": "https://github.com/pmutua", "followers_url": "https://api.github.com/users/pmutua/followers", "following_url": "https://api.github.com/users/pmutua/following{/other_user}", "gists_url": "https://api.github.com/users/pmutua/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmutua/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmutua/subscriptions", "organizations_url": "https://api.github.com/users/pmutua/orgs", "repos_url": "https://api.github.com/users/pmutua/repos", "events_url": "https://api.github.com/users/pmutua/events{/privacy}", "received_events_url": "https://api.github.com/users/pmutua/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-12T10:08:30Z", "updated_at": "2019-11-26T07:58:22Z", "closed_at": "2019-11-18T06:24:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am  decoding a  token I just received from an authorization service. The problem is when I try to decode the token I get: `InvalidAlgorithmError: the specified alg value is not allowed`. Why is the exception stating that the algorithm is not allowed yet the token is encoded in `HS256`?\r\n\r\n```python\r\n    import jwt \r\n\r\n\r\n     try: \r\n         encoded = \"eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNobWFjLXNoYTI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvY2xhaW1zL3JvbGUiOiJERVZFTE9QRVIiLCJ1c2VyZnVsbG5hbWUiOiJFcmljIE0gS2FyaW1pIiwidXNlcm5hbWUiOiJlcmljIiwidXNlcmlkIjoiMjkiLCJleHAiOjE1NzM0ODE0MzIsImlzcyI6IkVyaWMiLCJhdWQiOiJSZWFkZXJzIn0.tTQckIZGYNHE667NXrxT4YwT4DNZ01u3P3b3IMFyWR4\"\r\n\r\n         key = \"somekeyrequiredtodecode\"\r\n         decoded = jwt.decode(encoded,key, algorithms=['HS256'])\r\n         print(decoded)\r\n     except Exception as e:\r\n        print(e)\r\n```\r\n\r\nWhen I decode the token at the [jwt.io](https://jwt.io/) site the encoded data is decoded as shown below: \r\n\r\n![Decode](https://user-images.githubusercontent.com/16241851/68661882-c04ac380-054c-11ea-8829-94a2d03b0a5e.png)\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/459", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/459/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/459/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/459/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/459", "id": 519004407, "node_id": "MDU6SXNzdWU1MTkwMDQ0MDc=", "number": 459, "title": "Better documentation: complete encode and decode docs", "user": {"login": "dimaqq", "id": 662249, "node_id": "MDQ6VXNlcjY2MjI0OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/662249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dimaqq", "html_url": "https://github.com/dimaqq", "followers_url": "https://api.github.com/users/dimaqq/followers", "following_url": "https://api.github.com/users/dimaqq/following{/other_user}", "gists_url": "https://api.github.com/users/dimaqq/gists{/gist_id}", "starred_url": "https://api.github.com/users/dimaqq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dimaqq/subscriptions", "organizations_url": "https://api.github.com/users/dimaqq/orgs", "repos_url": "https://api.github.com/users/dimaqq/repos", "events_url": "https://api.github.com/users/dimaqq/events{/privacy}", "received_events_url": "https://api.github.com/users/dimaqq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-07T02:38:58Z", "updated_at": "2020-04-26T23:52:23Z", "closed_at": "2020-04-26T23:52:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://pyjwt.readthedocs.io/en/latest/index.html has examples \ud83d\ude04\r\nhttps://pyjwt.readthedocs.io/en/latest/api.html has only exceptions \ud83d\ude15\r\n\r\nI wish there was complete documentation for `jwt.encode` and `jwt.decode` high level methods / public API.\r\n\r\nSpecifically, there are keyword arguments which are not trivial and `options=` which have defaults, but it takes digging into the source code to understand how the earlier work and what the latter are.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/453", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/453/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/453/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/453/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/453", "id": 510976951, "node_id": "MDU6SXNzdWU1MTA5NzY5NTE=", "number": 453, "title": "Python 2 support ?", "user": {"login": "Djailla", "id": 576608, "node_id": "MDQ6VXNlcjU3NjYwOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/576608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Djailla", "html_url": "https://github.com/Djailla", "followers_url": "https://api.github.com/users/Djailla/followers", "following_url": "https://api.github.com/users/Djailla/following{/other_user}", "gists_url": "https://api.github.com/users/Djailla/gists{/gist_id}", "starred_url": "https://api.github.com/users/Djailla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Djailla/subscriptions", "organizations_url": "https://api.github.com/users/Djailla/orgs", "repos_url": "https://api.github.com/users/Djailla/repos", "events_url": "https://api.github.com/users/Djailla/events{/privacy}", "received_events_url": "https://api.github.com/users/Djailla/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-22T23:05:11Z", "updated_at": "2020-03-19T10:39:25Z", "closed_at": "2020-03-19T10:39:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nPython 2 support is almost over, do you think you should remove this support in the next major release ? It would allow extensive usage of mypy and f-strings and facilitate compatibility checks.\r\n\r\nIf agreed, I could provide a PR.\r\n\r\nRegards", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/451", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/451/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/451/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/451/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/451", "id": 510507228, "node_id": "MDU6SXNzdWU1MTA1MDcyMjg=", "number": 451, "title": "osx Result I Can't Work", "user": {"login": "v1xingyue", "id": 974169, "node_id": "MDQ6VXNlcjk3NDE2OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/974169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/v1xingyue", "html_url": "https://github.com/v1xingyue", "followers_url": "https://api.github.com/users/v1xingyue/followers", "following_url": "https://api.github.com/users/v1xingyue/following{/other_user}", "gists_url": "https://api.github.com/users/v1xingyue/gists{/gist_id}", "starred_url": "https://api.github.com/users/v1xingyue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/v1xingyue/subscriptions", "organizations_url": "https://api.github.com/users/v1xingyue/orgs", "repos_url": "https://api.github.com/users/v1xingyue/repos", "events_url": "https://api.github.com/users/v1xingyue/events{/privacy}", "received_events_url": "https://api.github.com/users/v1xingyue/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-22T08:35:56Z", "updated_at": "2020-04-08T15:01:45Z", "closed_at": "2020-04-08T15:01:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I Use pip install PyJWT install this package. But It Can't Work .\r\n Error  Like This : \r\n\r\n[1]    18041 abort      python -m jwt\r\n\r\nMy Python is 3.7.0 from pyenv .\r\nAnd My Osx Is Latest 10.15 (19A602) . \r\n\r\nI don't known why .", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/447", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/447/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/447/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/447/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/447", "id": 509280475, "node_id": "MDU6SXNzdWU1MDkyODA0NzU=", "number": 447, "title": "python-ecdsa 0.13.3 raises BadSignatureError exception", "user": {"login": "StefanBruens", "id": 1158848, "node_id": "MDQ6VXNlcjExNTg4NDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1158848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StefanBruens", "html_url": "https://github.com/StefanBruens", "followers_url": "https://api.github.com/users/StefanBruens/followers", "following_url": "https://api.github.com/users/StefanBruens/following{/other_user}", "gists_url": "https://api.github.com/users/StefanBruens/gists{/gist_id}", "starred_url": "https://api.github.com/users/StefanBruens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StefanBruens/subscriptions", "organizations_url": "https://api.github.com/users/StefanBruens/orgs", "repos_url": "https://api.github.com/users/StefanBruens/repos", "events_url": "https://api.github.com/users/StefanBruens/events{/privacy}", "received_events_url": "https://api.github.com/users/StefanBruens/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-18T19:54:35Z", "updated_at": "2019-10-21T00:07:20Z", "closed_at": "2019-10-21T00:07:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "ECAlgorithm.verify expects an AssertionError when the signature is too long:\r\nhttps://github.com/jpadilla/pyjwt/blob/3a20892442b34c754b26550e05f7f856fb008c94/jwt/contrib/algorithms/py_ecdsa.py#L59\r\n\r\nBut ecdsa>=0.13.3 raise an MalformedSignature exception internally, which is caught and reraised as BadSignatureError.\r\n\r\nhttps://github.com/warner/python-ecdsa/blob/5fa2fd85aa4706c809e3ab705f3a22bf604eec24/src/ecdsa/keys.py#L521\r\n\r\n## Expected Result\r\n\r\nCatch BadSignature error, return false.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/443", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/443/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/443/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/443/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/443", "id": 501837182, "node_id": "MDU6SXNzdWU1MDE4MzcxODI=", "number": 443, "title": "Add support to pycryptodome", "user": {"login": "winstonma", "id": 1215090, "node_id": "MDQ6VXNlcjEyMTUwOTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1215090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/winstonma", "html_url": "https://github.com/winstonma", "followers_url": "https://api.github.com/users/winstonma/followers", "following_url": "https://api.github.com/users/winstonma/following{/other_user}", "gists_url": "https://api.github.com/users/winstonma/gists{/gist_id}", "starred_url": "https://api.github.com/users/winstonma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/winstonma/subscriptions", "organizations_url": "https://api.github.com/users/winstonma/orgs", "repos_url": "https://api.github.com/users/winstonma/repos", "events_url": "https://api.github.com/users/winstonma/events{/privacy}", "received_events_url": "https://api.github.com/users/winstonma/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-03T03:58:09Z", "updated_at": "2019-10-30T03:29:10Z", "closed_at": "2019-10-30T03:29:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using pycryptodome with pyjwt.\r\n\r\n## Expected Result\r\n\r\nEverything should work (if pycryptodome is supported)\r\n\r\n## Actual Result\r\n\r\nI got the following error\r\n\r\n```\r\nFile \"/Users/winstonma/Downloads/Ascope/app/venv/lib/python3.7/site-packages/jwt/contrib/algorithms/pycrypto.py\", line 29, in prepare_key\r\n    if isinstance(key, RSA._RSAobj):\r\n\r\nAttributeError: module 'Crypto.PublicKey.RSA' has no attribute '_RSAobj'`\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport jwt\r\nfrom jwt.contrib.algorithms.pycrypto import RSAAlgorithm\r\n\r\njwt.unregister_algorithm('RS256')\r\njwt.register_algorithm('RS256', RSAAlgorithm(RSAAlgorithm.SHA256))\r\n\r\n...\r\n\r\npayload = jwt.decode(token, key=secret_key, algorithms=['RS256'])\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m jwt.help\r\n\r\n```\r\n{\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"18.7.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyjwt\": {\r\n    \"version\": \"1.7.1\"\r\n  }\r\n}\r\n```\r\n\r\nThis command is only available on PyJWT v1.6.3 and greater. Otherwise,\r\nplease provide some basic information about your system.\r\n\r\n## Comment\r\nAfter viewing the source code of pycryptodome, the root cause is the object _RSAobj is being repalced by RsaKey ([reference](https://github.com/Legrandin/pycryptodome/commit/8e4d6f3518697c9be0ec0078fed5163b4546b467#diff-e63e1e8d5b5365b9b84f14f4e9847c8c))\r\n\r\nIs it possible that the pyjwt support both pycrypto and pycryptodome by adding support of RsaKey in pycrypto.py?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/437", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/437/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/437/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/437/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/437", "id": 493638641, "node_id": "MDU6SXNzdWU0OTM2Mzg2NDE=", "number": 437, "title": "Trying to use \"legacy\" pycrypto support", "user": {"login": "danielkramer", "id": 111066, "node_id": "MDQ6VXNlcjExMTA2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/111066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielkramer", "html_url": "https://github.com/danielkramer", "followers_url": "https://api.github.com/users/danielkramer/followers", "following_url": "https://api.github.com/users/danielkramer/following{/other_user}", "gists_url": "https://api.github.com/users/danielkramer/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielkramer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielkramer/subscriptions", "organizations_url": "https://api.github.com/users/danielkramer/orgs", "repos_url": "https://api.github.com/users/danielkramer/repos", "events_url": "https://api.github.com/users/danielkramer/events{/privacy}", "received_events_url": "https://api.github.com/users/danielkramer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-14T16:06:08Z", "updated_at": "2019-09-14T16:44:26Z", "closed_at": "2019-09-14T16:44:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using Appengine and trying to setup Sign in with Apple which is expecting ES256.\r\n\r\nI setup my import like\r\n\r\n```\r\nimport jwt\r\nfrom jwt.contrib.algorithms.pycrypto import RSAAlgorithm\r\nfrom jwt.contrib.algorithms.py_ecdsa import ECAlgorithm\r\n\r\njwt.unregister_algorithm('RS256')\r\njwt.unregister_algorithm('ES256')\r\n\r\njwt.register_algorithm('RS256', RSAAlgorithm(RSAAlgorithm.SHA256))\r\njwt.register_algorithm('ES256', ECAlgorithm(ECAlgorithm.SHA256))\r\n\r\n```\r\n\r\nI get the following import error trying to run my app:\r\n\r\n```\r\n    from jwt.contrib.algorithms.pycrypto import RSAAlgorithm\r\n  File \".../AppEngine/ords/lib/jwt/contrib/algorithms/pycrypto.py\", line 4, in <module>\r\n    from Crypto.PublicKey import RSA\r\n  File \".../AppEngine/ords/lib/Crypto/PublicKey/RSA.py\", line 78, in <module>\r\n    from Crypto import Random\r\n  File \".../AppEngine/ords/lib/Crypto/Random/__init__.py\", line 29, in <module>\r\n    from Crypto.Random import _UserFriendlyRNG\r\n  File \".../AppEngine/ords/lib/Crypto/Random/_UserFriendlyRNG.py\", line 38, in <module>\r\n    from Crypto.Random.Fortuna import FortunaAccumulator\r\n  File \".../AppEngine/ords/lib/Crypto/Random/Fortuna/FortunaAccumulator.py\", line 39, in <module>\r\n    import FortunaGenerator\r\n  File \".../AppEngine/ords/lib/Crypto/Random/Fortuna/FortunaGenerator.py\", line 35, in <module>\r\n    from Crypto.Util import Counter\r\n  File \"/...AppEngine/ords/lib/Crypto/Util/Counter.py\", line 59, in <module>\r\n    from Crypto.Util import _counter\r\n  File \"/Users/daniel/Documents/Development/google-cloud-sdk/platform/google_appengine/google/appengine/tools/devappserver2/python/runtime/sandbox.py\", line 1094, in load_module\r\n    raise ImportError('No module named %s' % fullname)\r\nImportError: No module named Crypto.Util._counter\r\n\r\n```\r\nAny thoughts? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/423", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/423/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/423/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/423/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/423", "id": 441455812, "node_id": "MDU6SXNzdWU0NDE0NTU4MTI=", "number": 423, "title": "Invalid token on decode", "user": {"login": "HadeelElbitar", "id": 11235205, "node_id": "MDQ6VXNlcjExMjM1MjA1", "avatar_url": "https://avatars2.githubusercontent.com/u/11235205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HadeelElbitar", "html_url": "https://github.com/HadeelElbitar", "followers_url": "https://api.github.com/users/HadeelElbitar/followers", "following_url": "https://api.github.com/users/HadeelElbitar/following{/other_user}", "gists_url": "https://api.github.com/users/HadeelElbitar/gists{/gist_id}", "starred_url": "https://api.github.com/users/HadeelElbitar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HadeelElbitar/subscriptions", "organizations_url": "https://api.github.com/users/HadeelElbitar/orgs", "repos_url": "https://api.github.com/users/HadeelElbitar/repos", "events_url": "https://api.github.com/users/HadeelElbitar/events{/privacy}", "received_events_url": "https://api.github.com/users/HadeelElbitar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-07T21:32:44Z", "updated_at": "2019-05-07T22:04:29Z", "closed_at": "2019-05-07T22:04:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to decode a jwt in string formate using this library, however the jwt wasn't generated by this library. I keep getting below error:\r\n```\r\ndecoded_token = jwt.decode(args_jwt, settings.BSS_JWT_SIGNING_KEY, algorithms=['HS256'])\r\nFile \\\"/srv/venvs/service/trusty/service_venv_python3.6/lib/python3.6/site-packages/\r\njwt/api_jwt.py\\\", line 84, in decode\r\npayload, _, _, _ = self._load(jwt)\r\nFile \\\"/srv/venvs/service/trusty/service_venv_python3.6/lib/python3.6/\r\nsite-packages/jwt/api_jws.py\\\", line 177, in _load\r\n\r\nbinary_type))\\njwt.exceptions.DecodeError: Invalid token type. \r\nToken must be a <class 'bytes'>\", \r\n\"call_site\": \"/srv/venvs/service/trusty/service_venv_python3.6/lib/python3.6/site-packages/lyft_logging/logging.py:227\", \r\n```\r\n\r\nAny ideas?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/422", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/422/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/422/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/422/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/422", "id": 440433935, "node_id": "MDU6SXNzdWU0NDA0MzM5MzU=", "number": 422, "title": "-bash: lspyjwt: command not found", "user": {"login": "kevinmustaqim", "id": 2690954, "node_id": "MDQ6VXNlcjI2OTA5NTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2690954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinmustaqim", "html_url": "https://github.com/kevinmustaqim", "followers_url": "https://api.github.com/users/kevinmustaqim/followers", "following_url": "https://api.github.com/users/kevinmustaqim/following{/other_user}", "gists_url": "https://api.github.com/users/kevinmustaqim/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinmustaqim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinmustaqim/subscriptions", "organizations_url": "https://api.github.com/users/kevinmustaqim/orgs", "repos_url": "https://api.github.com/users/kevinmustaqim/repos", "events_url": "https://api.github.com/users/kevinmustaqim/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinmustaqim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-05T11:29:13Z", "updated_at": "2019-05-06T23:38:18Z", "closed_at": "2019-05-06T23:38:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have installed and it doesn't seem to work. The detail error as below:\r\n\r\n-bash: lspyjwt: command not found\r\n\r\nMy OS: Linux kali 4.14.0-kali3-amd64 #1 SMP Debian 4.14.12-2kali1 (2018-01-08) x86_64 GNU/Linux", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/420", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/420/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/420/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/420/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/420", "id": 440277276, "node_id": "MDU6SXNzdWU0NDAyNzcyNzY=", "number": 420, "title": "Decoding a string JWT", "user": {"login": "HadeelElbitar", "id": 11235205, "node_id": "MDQ6VXNlcjExMjM1MjA1", "avatar_url": "https://avatars2.githubusercontent.com/u/11235205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HadeelElbitar", "html_url": "https://github.com/HadeelElbitar", "followers_url": "https://api.github.com/users/HadeelElbitar/followers", "following_url": "https://api.github.com/users/HadeelElbitar/following{/other_user}", "gists_url": "https://api.github.com/users/HadeelElbitar/gists{/gist_id}", "starred_url": "https://api.github.com/users/HadeelElbitar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HadeelElbitar/subscriptions", "organizations_url": "https://api.github.com/users/HadeelElbitar/orgs", "repos_url": "https://api.github.com/users/HadeelElbitar/repos", "events_url": "https://api.github.com/users/HadeelElbitar/events{/privacy}", "received_events_url": "https://api.github.com/users/HadeelElbitar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 124376467, "node_id": "MDU6TGFiZWwxMjQzNzY0Njc=", "url": "https://api.github.com/repos/jpadilla/pyjwt/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-04T02:50:35Z", "updated_at": "2019-05-07T01:50:03Z", "closed_at": "2019-05-04T23:24:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can I use this library to decode a JWT that wasn't generated using that library? The JWT is in string format. It seems like I can't (or at least I haven't been able to do so, so far..) so I would like to get a confirmation.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/419", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/419/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/419/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/419/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/419", "id": 439071669, "node_id": "MDU6SXNzdWU0MzkwNzE2Njk=", "number": 419, "title": "decoding two diff jwt to get same payload", "user": {"login": "jiap", "id": 11482085, "node_id": "MDQ6VXNlcjExNDgyMDg1", "avatar_url": "https://avatars1.githubusercontent.com/u/11482085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jiap", "html_url": "https://github.com/jiap", "followers_url": "https://api.github.com/users/jiap/followers", "following_url": "https://api.github.com/users/jiap/following{/other_user}", "gists_url": "https://api.github.com/users/jiap/gists{/gist_id}", "starred_url": "https://api.github.com/users/jiap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jiap/subscriptions", "organizations_url": "https://api.github.com/users/jiap/orgs", "repos_url": "https://api.github.com/users/jiap/repos", "events_url": "https://api.github.com/users/jiap/events{/privacy}", "received_events_url": "https://api.github.com/users/jiap/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-01T05:19:15Z", "updated_at": "2019-05-05T02:25:19Z", "closed_at": "2019-05-04T23:42:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Install pyjwt and encode. When decoding the two different tokens using the same secretkey, the payloads are same. \r\n\r\nHere is the code.\r\n\r\n```\r\npyjwt --key=testsecret decode eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiT3BlbkFQSSIsInN1YiI6ImNlZTg4YWIwYmM2OTQzNTc4NGI3ZGIwNTQ1ZTg1NjQ3Iiwibm9uY2UiOjE1Mjc2NjUyNjIxNjgzOTEwMDB9.YNpae4v_-OU7h2sknRPa3XPhDcC3p-To1WxbWV4Vpro\r\npyjwt --key=testsecret decode eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJub25jZSI6MTUyNzY2NTI2MjE2ODM5MTAwMCwidHlwZSI6Ik9wZW5BUEkiLCJzdWIiOiJjZWU4OGFiMGJjNjk0MzU3ODRiN2RiMDU0NWU4NTY0NyJ9.GTymyPw0Ar5xWtT_AHZ0MaZMJVDnP2R29D-tuwuquFI\r\n```\r\n\r\nEncoding is as follows.\r\n```\r\n# python3\r\nimport jwt\r\npayload = {\"sub\": \"cee88ab0bc69435784b7db0545e85647\",\"type\": \"OpenAPI\",\"nonce\": 1527665262168391000}\r\ntoken = jwt.encode(payload,'testsecret','HS256')\r\nprint(token)\r\n``` \r\n\r\nCan somebody explain why?  And how can I get the first jwt instead of the second one?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/418", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/418/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/418/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/418/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/418", "id": 438633621, "node_id": "MDU6SXNzdWU0Mzg2MzM2MjE=", "number": 418, "title": "mypy tests failing", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-30T07:14:27Z", "updated_at": "2019-05-05T01:58:45Z", "closed_at": "2019-05-05T01:58:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "See for example [this job](https://travis-ci.com/jpadilla/pyjwt/jobs/196542782). The tests are failing when mypy attempts to run on invalid Pythons.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/416", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/416/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/416/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/416/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/416", "id": 438631706, "node_id": "MDU6SXNzdWU0Mzg2MzE3MDY=", "number": 416, "title": "Package uses easy_install for tests", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-30T07:07:40Z", "updated_at": "2019-05-05T01:42:45Z", "closed_at": "2019-05-05T01:42:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The setuptools project has deprecated use of `setup_requires` and `tests_require`, because they rely on `easy_install` and `eggs`, both of which are deprecated. Instead of using `setup.py test` this project should invoke pytest directly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/415", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/415/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/415/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/415/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/415", "id": 438631345, "node_id": "MDU6SXNzdWU0Mzg2MzEzNDU=", "number": 415, "title": "flake8 fails after running tests", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-30T07:06:28Z", "updated_at": "2019-10-06T23:09:34Z", "closed_at": "2019-10-06T23:09:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Running tests with `tox -e python` causes `setup.py pytest` to be invoked, which causes eggs to be installed in `./.eggs`. Thereafter, running `tox -e flake8` fails because the linter is run on everything, including files in `.eggs`. Probably the linter should be configured not to run on files in .eggs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/409", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/409/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/409/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/409/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/409", "id": 435871569, "node_id": "MDU6SXNzdWU0MzU4NzE1Njk=", "number": 409, "title": "Flask & WSGI. Error: no python application found.", "user": {"login": "jedrzejsekowski", "id": 10260352, "node_id": "MDQ6VXNlcjEwMjYwMzUy", "avatar_url": "https://avatars2.githubusercontent.com/u/10260352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedrzejsekowski", "html_url": "https://github.com/jedrzejsekowski", "followers_url": "https://api.github.com/users/jedrzejsekowski/followers", "following_url": "https://api.github.com/users/jedrzejsekowski/following{/other_user}", "gists_url": "https://api.github.com/users/jedrzejsekowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedrzejsekowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedrzejsekowski/subscriptions", "organizations_url": "https://api.github.com/users/jedrzejsekowski/orgs", "repos_url": "https://api.github.com/users/jedrzejsekowski/repos", "events_url": "https://api.github.com/users/jedrzejsekowski/events{/privacy}", "received_events_url": "https://api.github.com/users/jedrzejsekowski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-22T20:10:12Z", "updated_at": "2019-04-30T13:14:00Z", "closed_at": "2019-04-30T01:11:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys,\r\nI have installed and tested JWT directly interpreted via console and it works correctly. Unfortunately when I try to run app via WSGI the problem is as below:\r\n\r\n1. The app spawned correctly.\r\n```\r\nApr 22 17:43:10 server uwsgi[1117]: *** WARNING: you are running uWSGI as root !!! (use the --uid flag) ***\r\nApr 22 17:43:10 server uwsgi[1117]: *** uWSGI is running in multiple interpreter mode ***\r\nApr 22 17:43:10 server uwsgi[1117]: spawned uWSGI master process (pid: 1117)\r\nApr 22 17:43:10 server uwsgi[1117]: spawned uWSGI worker 1 (pid: 1137, cores: 1)\r\nApr 22 17:43:10 server uwsgi[1117]: spawned uWSGI worker 2 (pid: 1138, cores: 1)\r\nApr 22 17:43:10 server uwsgi[1117]: spawned uWSGI worker 3 (pid: 1139, cores: 1)\r\nApr 22 17:43:10 server uwsgi[1117]: spawned uWSGI worker 4 (pid: 1140, cores: 1)\r\nApr 22 17:43:10 server uwsgi[1117]: spawned uWSGI worker 5 (pid: 1141, cores: 1)\r\n```\r\n\r\n2. But when I do a request to my site the response is as below.\r\n```\r\nApr 22 17:43:19 server uwsgi[1117]: --- no python application found, check your startup logs for errors ---\r\nApr 22 17:43:19 server uwsgi[1117]: [pid: 1140|app: -1|req: -1/1] 83.21.22.201 () {46 vars in 826 bytes} [Mon Apr 22 17:43:19 2019] GET / => generated 21 bytes in 0 msecs (HTTP/1.1 500) 2 headers in 83\r\n```\r\nI have discovered which line generates problem:\r\n```\r\nimport jwt\r\n```\r\n\r\nMy JWT version:\r\n```\r\nName: PyJWT\r\nVersion: 1.7.1\r\nSummary: JSON Web Token implementation in Python\r\nHome-page: http://github.com/jpadilla/pyjwt\r\nAuthor: Jose Padilla\r\nAuthor-email: hello@jpadilla.com\r\nLicense: MIT\r\nLocation: /usr/local/lib/python3.6/dist-packages\r\n```\r\n\r\nHave you ever seen similar problems? What should I also check?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/407", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/407/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/407/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/407/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/407", "id": 430109814, "node_id": "MDU6SXNzdWU0MzAxMDk4MTQ=", "number": 407, "title": "jwt.encode throws exception due to datetime not serializable", "user": {"login": "khteh", "id": 3871483, "node_id": "MDQ6VXNlcjM4NzE0ODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3871483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khteh", "html_url": "https://github.com/khteh", "followers_url": "https://api.github.com/users/khteh/followers", "following_url": "https://api.github.com/users/khteh/following{/other_user}", "gists_url": "https://api.github.com/users/khteh/gists{/gist_id}", "starred_url": "https://api.github.com/users/khteh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khteh/subscriptions", "organizations_url": "https://api.github.com/users/khteh/orgs", "repos_url": "https://api.github.com/users/khteh/repos", "events_url": "https://api.github.com/users/khteh/events{/privacy}", "received_events_url": "https://api.github.com/users/khteh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 124376467, "node_id": "MDU6TGFiZWwxMjQzNzY0Njc=", "url": "https://api.github.com/repos/jpadilla/pyjwt/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-07T06:17:32Z", "updated_at": "2019-04-08T12:57:43Z", "closed_at": "2019-04-08T12:57:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have datetime data in the payload to be jwt-encoded and it throws non-json-serializable exception. Any advice and insight is appreciated.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/406", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/406/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/406/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/406/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/406", "id": 423972971, "node_id": "MDU6SXNzdWU0MjM5NzI5NzE=", "number": 406, "title": "Encode via command line cannot set headers", "user": {"login": "Botono", "id": 1622358, "node_id": "MDQ6VXNlcjE2MjIzNTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1622358?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Botono", "html_url": "https://github.com/Botono", "followers_url": "https://api.github.com/users/Botono/followers", "following_url": "https://api.github.com/users/Botono/following{/other_user}", "gists_url": "https://api.github.com/users/Botono/gists{/gist_id}", "starred_url": "https://api.github.com/users/Botono/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Botono/subscriptions", "organizations_url": "https://api.github.com/users/Botono/orgs", "repos_url": "https://api.github.com/users/Botono/repos", "events_url": "https://api.github.com/users/Botono/events{/privacy}", "received_events_url": "https://api.github.com/users/Botono/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1630580603, "node_id": "MDU6TGFiZWwxNjMwNTgwNjAz", "url": "https://api.github.com/repos/jpadilla/pyjwt/labels/hacktoberfest", "name": "hacktoberfest", "color": "F6AD55", "default": false, "description": "Issues for first-time contributors"}, {"id": 724789320, "node_id": "MDU6TGFiZWw3MjQ3ODkzMjA=", "url": "https://api.github.com/repos/jpadilla/pyjwt/labels/help%20wanted", "name": "help wanted", "color": "72e095", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-21T22:41:21Z", "updated_at": "2020-01-16T15:08:20Z", "closed_at": "2019-11-16T15:50:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is no way to set headers on a token when encoding via the command line.\r\n\r\n## Expected Result\r\n\r\nCommand line arguments should accept some kind of headers input and pass it to `encode()`.\r\n\r\n## Actual Result\r\n\r\nHeaders cannot be set.\r\n\r\n## Reproduction Steps\r\n\r\n```\r\npyjwt --key=secret --alg='RS256' encode iss=issuer aud=audience sub=subject exp=123456789 headers=foo\r\n```\r\n`headers` value will appear in the payload.\r\n\r\nYou can see that no header value is passed to `encode()` here: https://github.com/jpadilla/pyjwt/blob/6845515ed8490045aa175580304bf8ebeec805ff/jwt/__main__.py#L46-L50\r\n\r\nBut `encode()` supports header information: https://github.com/jpadilla/pyjwt/blob/6845515ed8490045aa175580304bf8ebeec805ff/jwt/api_jwt.py#L45\r\n\r\n## System Information\r\n\r\n    $ python -m jwt.help\r\n\r\n```\r\n{\r\n  \"cryptography\": {\r\n    \"version\": \"2.6.1\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.0\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"17.7.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyjwt\": {\r\n    \"version\": \"1.7.1\"\r\n  }\r\n}\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/404", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/404/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/404/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/404/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/404", "id": 420820634, "node_id": "MDU6SXNzdWU0MjA4MjA2MzQ=", "number": 404, "title": "{\"hash\":\"md4\",\"alg\":\"HS256\",\"typ\":\"JWT\"}", "user": {"login": "Mr-artist", "id": 30570660, "node_id": "MDQ6VXNlcjMwNTcwNjYw", "avatar_url": "https://avatars2.githubusercontent.com/u/30570660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mr-artist", "html_url": "https://github.com/Mr-artist", "followers_url": "https://api.github.com/users/Mr-artist/followers", "following_url": "https://api.github.com/users/Mr-artist/following{/other_user}", "gists_url": "https://api.github.com/users/Mr-artist/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mr-artist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mr-artist/subscriptions", "organizations_url": "https://api.github.com/users/Mr-artist/orgs", "repos_url": "https://api.github.com/users/Mr-artist/repos", "events_url": "https://api.github.com/users/Mr-artist/events{/privacy}", "received_events_url": "https://api.github.com/users/Mr-artist/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-14T03:56:13Z", "updated_at": "2019-03-16T02:04:02Z", "closed_at": "2019-03-16T02:04:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "token = 'eyJoYXNoIjoibWQ0IiwiYWxnIjoiSFMyNTYiLCJ0eXAiOiJKV1QifQ.eyJzaWQiOiIzNTI3MzRkMTM4ZTU0MTczYzFjNzhiYThkZTM5ZmYyYiIsImV4cGlyZSI6MTU1MjQ2NDU2NX0.Le4K9oJaP3rMMW6kVjKhyPgJ1JxWKDW5M9nMnBeWUqI' \r\n\r\n'hash' in header dict, Is it the same way?,Must I get secret value?\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/403", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/403/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/403/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/403/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/403", "id": 418272310, "node_id": "MDU6SXNzdWU0MTgyNzIzMTA=", "number": 403, "title": "Generated JWT fails under call made by Python 3.x, but works under Python 2.x", "user": {"login": "node86", "id": 3173438, "node_id": "MDQ6VXNlcjMxNzM0Mzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3173438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/node86", "html_url": "https://github.com/node86", "followers_url": "https://api.github.com/users/node86/followers", "following_url": "https://api.github.com/users/node86/following{/other_user}", "gists_url": "https://api.github.com/users/node86/gists{/gist_id}", "starred_url": "https://api.github.com/users/node86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/node86/subscriptions", "organizations_url": "https://api.github.com/users/node86/orgs", "repos_url": "https://api.github.com/users/node86/repos", "events_url": "https://api.github.com/users/node86/events{/privacy}", "received_events_url": "https://api.github.com/users/node86/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-07T11:56:25Z", "updated_at": "2019-04-30T02:02:09Z", "closed_at": "2019-04-30T02:02:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using Python 2.x with PyJWT results in a correct response while using the Apple Music API, however switching to Python 3.x persistently yields a 401 (unauthorized) response, suggesting that the generated token is no being correctly generated.\r\n\r\n## Expected Result\r\n\r\nRunning the CURL command produced by the sample code under Python 2.x yields an HTTP/2 200 status code with a JSON response for the endpoint.\r\n\r\n## Actual Result\r\n\r\nRunning the CURL command produced by the sample code under Python 3.x yields an HTTP/2 401 status code with no JSON response object.\r\n\r\n## Reproduction Steps\r\n\r\nYou will need to create the relevant credentials through the Apple developer portal (https://developer.apple.com)\r\n\r\n```\r\n# pip  install --user pyjwt cryptography\r\n# pip3 install --user pyjwt cryptography\r\n\r\nimport datetime\r\nimport jwt\r\n\r\n# N.B. The credentials here have been altered for safety\r\nsecret = \"\"\"-----BEGIN PRIVATE KEY-----\r\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHB ... 71LblY2o6C72088d2FUIFcJ/6M4mATYNWNFJd\r\n-----END PRIVATE KEY-----\"\"\"\r\nkey_id = 'U7SVP5QO'\r\nteam_id = 'VMH2Y32W'\r\n\r\nalg = 'ES256'\r\nnow = datetime.datetime.now()\r\nexpired = now + datetime.timedelta(hours=12)\r\npayload = {'iss': team_id,\r\n           'exp': int(expired.strftime('%s')),\r\n           'iat': int(now.strftime('%s'))}\r\nheader = {'alg': alg,\r\n          'kid': key_id}\r\ntoken = jwt.encode(payload, secret, algorithm=alg, headers=headers)\r\n\r\nprint(\"curl -v -H 'Authorization: Bearer %s' \\\"https://api.music.apple.com/v1/catalog/us/artists/36954\\\" \" % (token))\r\n```\r\n\r\n## System Information\r\n\r\n    $ python2 -m jwt.help\r\n\r\n```\r\n{\r\n  \"cryptography\": {\r\n    \"version\": \"2.6.1\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.7\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-45-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyjwt\": {\r\n    \"version\": \"1.7.1\"\r\n  }\r\n}\r\n```\r\n\r\n    $ python3 -m jwt.help\r\n\r\n```\r\n{\r\n  \"cryptography\": {\r\n    \"version\": \"2.3\"\r\n  }, \r\n  \"implementation\": {\r\n    \"name\": \"CPython\", \r\n    \"version\": \"2.7.15rc1\"\r\n  }, \r\n  \"platform\": {\r\n    \"release\": \"4.15.0-45-generic\", \r\n    \"system\": \"Linux\"\r\n  }, \r\n  \"pyjwt\": {\r\n    \"version\": \"1.7.1\"\r\n  }\r\n}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/402", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/402/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/402/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/402/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/402", "id": 417255122, "node_id": "MDU6SXNzdWU0MTcyNTUxMjI=", "number": 402, "title": "AttributeError: 'module' object has no attribute 'encode'", "user": {"login": "fredaas", "id": 10281443, "node_id": "MDQ6VXNlcjEwMjgxNDQz", "avatar_url": "https://avatars1.githubusercontent.com/u/10281443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fredaas", "html_url": "https://github.com/fredaas", "followers_url": "https://api.github.com/users/fredaas/followers", "following_url": "https://api.github.com/users/fredaas/following{/other_user}", "gists_url": "https://api.github.com/users/fredaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/fredaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fredaas/subscriptions", "organizations_url": "https://api.github.com/users/fredaas/orgs", "repos_url": "https://api.github.com/users/fredaas/repos", "events_url": "https://api.github.com/users/fredaas/events{/privacy}", "received_events_url": "https://api.github.com/users/fredaas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-05T11:37:49Z", "updated_at": "2019-03-05T11:40:50Z", "closed_at": "2019-03-05T11:40:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "The provided example under \"Usage\" in `README.md` crashes with said attribute error out of the box.\r\n\r\nI see similar topics have been posted but no real solutions that address the issue have been provided, pluss the API-documentation is lacking.\r\n\r\nAnyone care to explain how to get this basic example to work?\r\n\r\nRunning Ubuntu 18.04, Python 3.6.7, pyjwt 1.7.1.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/400", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/400/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/400/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/400/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/400", "id": 413347621, "node_id": "MDU6SXNzdWU0MTMzNDc2MjE=", "number": 400, "title": "float values should be allowed for exp claim ", "user": {"login": "jgehrcke", "id": 265630, "node_id": "MDQ6VXNlcjI2NTYzMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/265630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgehrcke", "html_url": "https://github.com/jgehrcke", "followers_url": "https://api.github.com/users/jgehrcke/followers", "following_url": "https://api.github.com/users/jgehrcke/following{/other_user}", "gists_url": "https://api.github.com/users/jgehrcke/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgehrcke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgehrcke/subscriptions", "organizations_url": "https://api.github.com/users/jgehrcke/orgs", "repos_url": "https://api.github.com/users/jgehrcke/repos", "events_url": "https://api.github.com/users/jgehrcke/events{/privacy}", "received_events_url": "https://api.github.com/users/jgehrcke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-22T10:48:25Z", "updated_at": "2019-02-22T10:58:34Z", "closed_at": "2019-02-22T10:58:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently JSON Web Tokens are invalidated by PyJWT when their `exp` claim contains a numeric non-integer value, as in a simple floating point number.\r\n\r\nHowever, as of RFC 7519 non-integer values should be fine. The `exp` claim specification says that the value must be a `NumericDate`; and https://tools.ietf.org/html/rfc7519#section-4.1.4 pretty clearly says about NumericDate fields:\r\n\r\n> non-integer values can be represented\r\n\r\nWhat do I miss?\r\n\r\n(this also applies to other claims, such as `iat`).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/399", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/399/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/399/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/399/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/399", "id": 411859950, "node_id": "MDU6SXNzdWU0MTE4NTk5NTA=", "number": 399, "title": "TypeError on doc example?", "user": {"login": "kodkuce", "id": 24373114, "node_id": "MDQ6VXNlcjI0MzczMTE0", "avatar_url": "https://avatars1.githubusercontent.com/u/24373114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kodkuce", "html_url": "https://github.com/kodkuce", "followers_url": "https://api.github.com/users/kodkuce/followers", "following_url": "https://api.github.com/users/kodkuce/following{/other_user}", "gists_url": "https://api.github.com/users/kodkuce/gists{/gist_id}", "starred_url": "https://api.github.com/users/kodkuce/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kodkuce/subscriptions", "organizations_url": "https://api.github.com/users/kodkuce/orgs", "repos_url": "https://api.github.com/users/kodkuce/repos", "events_url": "https://api.github.com/users/kodkuce/events{/privacy}", "received_events_url": "https://api.github.com/users/kodkuce/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-19T10:47:07Z", "updated_at": "2019-02-19T12:05:51Z", "closed_at": "2019-02-19T12:05:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Tryed exactly example from your documentation and i get this error\r\n\r\nencoded = jwt.encode({'some': 'payload'}, 'secret', algorithm='HS256')\r\n\r\nTypeError: Object of type bytes is not JSON serializable\r\n\r\nam i doing soemthing wrong or wtf?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/392", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/392/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/392/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/392/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/392", "id": 402590166, "node_id": "MDU6SXNzdWU0MDI1OTAxNjY=", "number": 392, "title": "Confused with jwt.decode return type", "user": {"login": "Hanaasagi", "id": 9482395, "node_id": "MDQ6VXNlcjk0ODIzOTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/9482395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hanaasagi", "html_url": "https://github.com/Hanaasagi", "followers_url": "https://api.github.com/users/Hanaasagi/followers", "following_url": "https://api.github.com/users/Hanaasagi/following{/other_user}", "gists_url": "https://api.github.com/users/Hanaasagi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hanaasagi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hanaasagi/subscriptions", "organizations_url": "https://api.github.com/users/Hanaasagi/orgs", "repos_url": "https://api.github.com/users/Hanaasagi/repos", "events_url": "https://api.github.com/users/Hanaasagi/events{/privacy}", "received_events_url": "https://api.github.com/users/Hanaasagi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-01-24T08:20:11Z", "updated_at": "2019-02-01T12:53:21Z", "closed_at": "2019-02-01T12:53:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using mypy to check my code. And I find that the annotation  of `jwt.decode`'s  return value is `Mapping[str, Any]`. It's immutable, so if i change it, mypy will complain `Unsupported target for indexed assignment`. I think the type should be `Dict[str, Any]` or `MutableMapping[str, Any]`. Are there someone give a official solution?\r\n\r\nMore detail, please see https://github.com/python/typeshed/issues/2764", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/389", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/389/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/389/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/389/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/389", "id": 397556337, "node_id": "MDU6SXNzdWUzOTc1NTYzMzc=", "number": 389, "title": "Toggle validation of specific claims", "user": {"login": "qilyn", "id": 18158143, "node_id": "MDQ6VXNlcjE4MTU4MTQz", "avatar_url": "https://avatars0.githubusercontent.com/u/18158143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qilyn", "html_url": "https://github.com/qilyn", "followers_url": "https://api.github.com/users/qilyn/followers", "following_url": "https://api.github.com/users/qilyn/following{/other_user}", "gists_url": "https://api.github.com/users/qilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/qilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qilyn/subscriptions", "organizations_url": "https://api.github.com/users/qilyn/orgs", "repos_url": "https://api.github.com/users/qilyn/repos", "events_url": "https://api.github.com/users/qilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/qilyn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-09T20:49:04Z", "updated_at": "2019-01-10T21:08:08Z", "closed_at": "2019-01-10T21:08:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "We currently use this library (and JWTs) to retrieve some information from an outside system, which is independent of us. The trouble is that that system doesn't generate a unique token each time one is requested--it caches them, so occasionally a token's `audience` claim will belong to a different project. \r\n\r\nIt's great to be able to provide a list of possible values this field could contain (thanks #205!), but having to maintain a list of them would introduce a point of failure if, say, the issuer suddenly added a new project and forgot to notify us or update the documentation. They do sign their tokens. \r\n\r\nThe best-case solution for us would be to be able to accept all values of the `audience` claim. If this sounds reasonable, I'd be happy to work on it!\r\n\r\nEdit: forgot to say: thank-you! This is a real nice package to use, it's been a huge help :smile: ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/387", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/387/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/387/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/387/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/387", "id": 396366925, "node_id": "MDU6SXNzdWUzOTYzNjY5MjU=", "number": 387, "title": "The old expired token is passed and didn't throw ExpiredSignatureError ", "user": {"login": "ziaul-haque", "id": 1625747, "node_id": "MDQ6VXNlcjE2MjU3NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1625747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ziaul-haque", "html_url": "https://github.com/ziaul-haque", "followers_url": "https://api.github.com/users/ziaul-haque/followers", "following_url": "https://api.github.com/users/ziaul-haque/following{/other_user}", "gists_url": "https://api.github.com/users/ziaul-haque/gists{/gist_id}", "starred_url": "https://api.github.com/users/ziaul-haque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ziaul-haque/subscriptions", "organizations_url": "https://api.github.com/users/ziaul-haque/orgs", "repos_url": "https://api.github.com/users/ziaul-haque/repos", "events_url": "https://api.github.com/users/ziaul-haque/events{/privacy}", "received_events_url": "https://api.github.com/users/ziaul-haque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-07T06:43:11Z", "updated_at": "2019-01-07T17:54:46Z", "closed_at": "2019-01-07T17:54:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Summary\r\n1. Created email signup link with ttl_sec = 5\r\n2. After 5 secs of expired token, jwt decode the token as passed not throwing expired signature error.\r\n3. jwt 1.4.2\r\nPayload: {\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiYXV0aDB8NWMyMzY1Zjg3ZTg1ZGUzMWI5ZjNjYzliIiwiZW1haWwiOiJkZW1vX3VzZXJfMTBAeW9wbWFpbC5jb20ifQ.1z9g9PUA304SOnXozI3vPKvtUoD-Z4oLWGaRNkGT0s8\",\"password\":\"*******\"}\r\n\r\n## Expected Result\r\nExpired token should through ExpiredSignature error.\r\n\r\n## Actual Result\r\nJWT token doesn't through any exception.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport jwt\r\n\r\n        try:\r\n            decoded_token = jwt.decode(token, private_secret_key)\r\n        except jwt.ExpiredSignatureError:\r\n            raise TokenExpireError(\"This token is expired.\")\r\n        except jwt.InvalidTokenError:\r\n            raise TokenInvalidError(\"This token is invalid.\")\r\n        except Exception as e:\r\n            raise TokenDecodeError(\"Error in token decode : \" + str(e))\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m jwt.help\r\n\r\n```\r\n<paste here>\r\n```\r\n\r\nThis command is only available on PyJWT v1.6.3 and greater. Otherwise,\r\nplease provide some basic information about your system.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/386", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/386/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/386/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/386/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/386", "id": 391659092, "node_id": "MDU6SXNzdWUzOTE2NTkwOTI=", "number": 386, "title": "PyJWT in AWS Lambda", "user": {"login": "AntonOellerer", "id": 13524304, "node_id": "MDQ6VXNlcjEzNTI0MzA0", "avatar_url": "https://avatars3.githubusercontent.com/u/13524304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AntonOellerer", "html_url": "https://github.com/AntonOellerer", "followers_url": "https://api.github.com/users/AntonOellerer/followers", "following_url": "https://api.github.com/users/AntonOellerer/following{/other_user}", "gists_url": "https://api.github.com/users/AntonOellerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/AntonOellerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AntonOellerer/subscriptions", "organizations_url": "https://api.github.com/users/AntonOellerer/orgs", "repos_url": "https://api.github.com/users/AntonOellerer/repos", "events_url": "https://api.github.com/users/AntonOellerer/events{/privacy}", "received_events_url": "https://api.github.com/users/AntonOellerer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-17T10:59:26Z", "updated_at": "2018-12-22T16:42:39Z", "closed_at": "2018-12-22T16:42:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to use PyJWT in an aws lambda function. \r\nThis fails without any helpful error messages from aws.\r\n\r\nI created a serverless project (` sls create ---template aws-python3`), a script importing the library, freezing the requirements to a `requirements.txt` file and then deploying it.\r\n\r\n## Expected Result\r\nI expect nothing out of the ordinary here, since local invocation of the `handler` function run without a problem.\r\n\r\n## Actual Result\r\n\r\nWhat happened instead.\r\n\r\nWhen I deploy the function and invoke it with `sls invoke -f main`, I get the error \"Syntax error in module 'handler\".\r\nI was able to pinpoint the problem to the `jwt` import.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport jwt\r\n\r\ndef hello(event, context):\r\n    return \"hello\"\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m jwt.help\r\n\r\n```\r\n{\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.19.8-300.fc29.x86_64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyjwt\": {\r\n    \"version\": \"1.7.1\"\r\n  }\r\n}\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/385", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/385/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/385/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/385/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/385", "id": 385017986, "node_id": "MDU6SXNzdWUzODUwMTc5ODY=", "number": 385, "title": "Encoding JWS with a dictionary payload", "user": {"login": "trevh3", "id": 24898971, "node_id": "MDQ6VXNlcjI0ODk4OTcx", "avatar_url": "https://avatars0.githubusercontent.com/u/24898971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trevh3", "html_url": "https://github.com/trevh3", "followers_url": "https://api.github.com/users/trevh3/followers", "following_url": "https://api.github.com/users/trevh3/following{/other_user}", "gists_url": "https://api.github.com/users/trevh3/gists{/gist_id}", "starred_url": "https://api.github.com/users/trevh3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trevh3/subscriptions", "organizations_url": "https://api.github.com/users/trevh3/orgs", "repos_url": "https://api.github.com/users/trevh3/repos", "events_url": "https://api.github.com/users/trevh3/events{/privacy}", "received_events_url": "https://api.github.com/users/trevh3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-27T22:36:53Z", "updated_at": "2020-08-14T13:57:37Z", "closed_at": "2020-08-14T13:57:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Summary\r\nAre dictionaries supported when encoding a JWS? The comments seem to support this use case, but the error message I receive indicates that only bytes-like variables are supported.\r\n\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nfrom jwt.api_jws import PyJWS\r\n  \r\njws = PyJWS()\r\npayload = {'hello':'world'}\r\nsecret = 'mysecret'\r\n\r\njws.encode(payload, secret, algorithm='ES256')\r\n```\r\n\r\nResponse: \r\n```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 7, in <module>\r\n    jws.encode(payload, secret, algorithm='ES256')\r\n  File \"/Users/thutton/miniconda3/lib/python3.7/site-packages/jwt/api_jws.py\", line 108, in encode\r\n    segments.append(base64url_encode(payload))\r\n  File \"/Users/thutton/miniconda3/lib/python3.7/site-packages/jwt/utils.py\", line 46, in base64url_encode\r\n    return base64.urlsafe_b64encode(input).replace(b'=', b'')\r\n  File \"/Users/thutton/miniconda3/lib/python3.7/base64.py\", line 118, in urlsafe_b64encode\r\n    return b64encode(s).translate(_urlsafe_encode_translation)\r\n  File \"/Users/thutton/miniconda3/lib/python3.7/base64.py\", line 58, in b64encode\r\n    encoded = binascii.b2a_base64(s, newline=False)\r\nTypeError: a bytes-like object is required, not 'dict'\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m jwt.help\r\n\r\n```\r\n{\r\n  \"cryptography\": {\r\n    \"version\": \"2.3.1\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.0\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"18.2.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyjwt\": {\r\n    \"version\": \"1.6.4\"\r\n  }\r\n}\r\n```\r\n\r\nThis command is only available on PyJWT v1.6.3 and greater. Otherwise,\r\nplease provide some basic information about your system.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/383", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/383/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/383/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/383/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/383", "id": 378704385, "node_id": "MDU6SXNzdWUzNzg3MDQzODU=", "number": 383, "title": "DeprecationWarning ... but algorithms are defined.", "user": {"login": "ahopkins", "id": 166269, "node_id": "MDQ6VXNlcjE2NjI2OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/166269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahopkins", "html_url": "https://github.com/ahopkins", "followers_url": "https://api.github.com/users/ahopkins/followers", "following_url": "https://api.github.com/users/ahopkins/following{/other_user}", "gists_url": "https://api.github.com/users/ahopkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahopkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahopkins/subscriptions", "organizations_url": "https://api.github.com/users/ahopkins/orgs", "repos_url": "https://api.github.com/users/ahopkins/repos", "events_url": "https://api.github.com/users/ahopkins/events{/privacy}", "received_events_url": "https://api.github.com/users/ahopkins/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-08T12:10:49Z", "updated_at": "2018-11-08T15:18:16Z", "closed_at": "2018-11-08T15:18:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am receiving a `DeprecationWarning` on my tests for [`sanic-jwt`](https://github.com/ahopkins/sanic-jwt/) even though `algorithms` is explicitly set.\r\n\r\n## Expected Result\r\n\r\nTests to run without `DeprecationWarning`\r\n\r\n## Actual Result\r\n\r\n```\r\nDeprecationWarning: It is strongly recommended that you pass in a value for the \"algorithms\" argument when calling decode(). This argument will be mandatory in a future version.\r\n```\r\n\r\n## Reproduction Steps\r\n\r\nThe code is essentially this:\r\n\r\n```python\r\nimport jwt\r\n\r\ntoken = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE1NDE2ODAzOTZ9._7O4mvy_uytWuxC-vZHqZ8i0oVpr63Jb6PYd0-njdNw\"\r\nsecret = \"This is a big secret. Shhhhh\"\r\nalgorithm = \"HS256\"\r\nverify = True\r\n\r\ndecoded = jwt.decode(\r\n    token,\r\n    secret,\r\n    algorithms=[algorithm],\r\n    verify=verify,\r\n)\r\n```\r\n\r\nRunning just this is fine.\r\n\r\n[See the actual code here](https://github.com/ahopkins/sanic-jwt/blob/dev/sanic_jwt/authentication.py#L168)\r\n\r\nBut, when I run my tests:\r\n\r\n```\r\ntox\r\n```\r\n\r\nI receive:\r\n\r\n```\r\n  /home/adam/Projects/sanic-jwt/.tox/py37/lib/python3.7/site-packages/jwt/api_jwt.py:82: DeprecationWarning: It is strongly recommended that you pass in a value for the \"algorithms\" argument when calling decode(). This argument will be mandatory in a future version.\r\n    DeprecationWarning\r\n  /home/adam/Projects/sanic-jwt/.tox/py37/lib/python3.7/site-packages/jwt/api_jws.py:146: DeprecationWarning: It is strongly recommended that you pass in a value for the \"algorithms\" argument when calling decode(). This argument will be mandatory in a future version.\r\n    DeprecationWarning\r\n```\r\n\r\n## System Information\r\n\r\nMy `tox` tests run on python 3.5, 3.6, and 3.7. My local machine is running Ubuntu 18.04, but I see this also on other flavors of Linux machines and in Travis.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/382", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/382/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/382/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/382/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/382", "id": 377241524, "node_id": "MDU6SXNzdWUzNzcyNDE1MjQ=", "number": 382, "title": "failed tests", "user": {"login": "carlwgeorge", "id": 12187228, "node_id": "MDQ6VXNlcjEyMTg3MjI4", "avatar_url": "https://avatars2.githubusercontent.com/u/12187228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlwgeorge", "html_url": "https://github.com/carlwgeorge", "followers_url": "https://api.github.com/users/carlwgeorge/followers", "following_url": "https://api.github.com/users/carlwgeorge/following{/other_user}", "gists_url": "https://api.github.com/users/carlwgeorge/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlwgeorge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlwgeorge/subscriptions", "organizations_url": "https://api.github.com/users/carlwgeorge/orgs", "repos_url": "https://api.github.com/users/carlwgeorge/repos", "events_url": "https://api.github.com/users/carlwgeorge/events{/privacy}", "received_events_url": "https://api.github.com/users/carlwgeorge/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2018-11-05T03:53:13Z", "updated_at": "2018-12-07T13:42:12Z", "closed_at": "2018-12-07T13:42:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I co-maintain the python-jwt package in Fedora for PyJWT.  The test suite is now failing in Fedora 30 and I'm not sure why.  The failing tests are:\r\n\r\n* `TestJWS.test_decode_no_algorithms_verify_signature_false`\r\n* `TestJWT.test_decode_no_algorithms_verify_false`\r\n\r\n## Expected Result\r\n\r\nTests to pass (just like they did in Fedora 29).\r\n\r\n## Actual Result\r\n\r\n```\r\n_______________________________________ TestJWS.test_decode_no_algorithms_verify_signature_false _______________________________________\r\n\r\nself = <tests.test_api_jws.TestJWS object at 0x7f03249037b8>, jws = <jwt.api_jws.PyJWS object at 0x7f0324903128>\r\n\r\n    def test_decode_no_algorithms_verify_signature_false(self, jws):\r\n        example_secret = 'secret'\r\n        example_jws = (\r\n            b'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.'\r\n            b'aGVsbG8gd29ybGQ.'\r\n            b'SIr03zM64awWRdPrAM_61QWsZchAtgDV3pphfHPPWkI'\r\n        )\r\n    \r\n        try:\r\n            pytest.deprecated_call(\r\n                jws.decode, example_jws, key=example_secret,\r\n>               options={'verify_signature': False},\r\n            )\r\nE           Failed: DID NOT WARN. No warnings of type (<class 'DeprecationWarning'>, <class 'PendingDeprecationWarning'>) was emitted. The list of emitted warnings is: [].\r\n\r\ntests/test_api_jws.py:295: Failed\r\n____________________________________________ TestJWT.test_decode_no_algorithms_verify_false ____________________________________________\r\n\r\nself = <tests.test_api_jwt.TestJWT object at 0x7f0324d987f0>, jwt = <jwt.api_jwt.PyJWT object at 0x7f0324d8c748>\r\npayload = {'claim': 'insanity', 'exp': 1541389632, 'iss': 'jeff'}\r\n\r\n    def test_decode_no_algorithms_verify_false(self, jwt, payload):\r\n        secret = 'secret'\r\n        jwt_message = jwt.encode(payload, secret)\r\n    \r\n        try:\r\n            pytest.deprecated_call(\r\n>               jwt.decode, jwt_message, secret, verify=False,\r\n            )\r\nE           Failed: DID NOT WARN. No warnings of type (<class 'DeprecationWarning'>, <class 'PendingDeprecationWarning'>) was emitted. The list of emitted warnings is: [].\r\n\r\ntests/test_api_jwt.py:517: Failed\r\n```\r\n\r\nFull output: https://gist.github.com/carlwgeorge/563597c80e3324101d754efac99d14a1\r\n\r\n## Reproduction Steps\r\n\r\n```\r\nyum install python3-{devel,setuptools,cryptography,pytest,pytest-cov}\r\nwget https://files.pythonhosted.org/packages/source/P/PyJWT/PyJWT-1.6.4.tar.gz\r\ntar -xf PyJWT-1.6.4.tar.gz\r\ncd PyJWT-1.6.4\r\npytest-3 -v\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m jwt.help\r\n\r\n```\r\n$ python3 -m jwt.help\r\n{\r\n  \"cryptography\": {\r\n    \"version\": \"2.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.18.16-300.fc29.x86_64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyjwt\": {\r\n    \"version\": \"1.6.4\"\r\n  }\r\n}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/381", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/381/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/381/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/381/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/381", "id": 376553933, "node_id": "MDU6SXNzdWUzNzY1NTM5MzM=", "number": 381, "title": "DeprecationWarning on Python 3.7: Using or importing ABCs from collections", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-01T20:18:13Z", "updated_at": "2018-11-02T11:24:36Z", "closed_at": "2018-11-02T11:24:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\n~ $ rwt -q importlib_metadata==0.6 -- -c \"import importlib_metadata; print(importlib_metadata.version('PyJWT'))\"\r\n1.6.4\r\n~ $ python -Werror -c 'import jwt'\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/jwt/__init__.py\", line 19, in <module>\r\n    from .api_jwt import (\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/jwt/api_jwt.py\", line 4, in <module>\r\n    from collections import Iterable, Mapping\r\n  File \"<frozen importlib._bootstrap>\", line 1032, in _handle_fromlist\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/collections/__init__.py\", line 52, in __getattr__\r\n    DeprecationWarning, stacklevel=2)\r\nDeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/374", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/374/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/374/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/374/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/374", "id": 362017453, "node_id": "MDU6SXNzdWUzNjIwMTc0NTM=", "number": 374, "title": "AttributeError: module 'jwt' has no attribute 'encode'", "user": {"login": "asajuenitan", "id": 16443589, "node_id": "MDQ6VXNlcjE2NDQzNTg5", "avatar_url": "https://avatars2.githubusercontent.com/u/16443589?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asajuenitan", "html_url": "https://github.com/asajuenitan", "followers_url": "https://api.github.com/users/asajuenitan/followers", "following_url": "https://api.github.com/users/asajuenitan/following{/other_user}", "gists_url": "https://api.github.com/users/asajuenitan/gists{/gist_id}", "starred_url": "https://api.github.com/users/asajuenitan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asajuenitan/subscriptions", "organizations_url": "https://api.github.com/users/asajuenitan/orgs", "repos_url": "https://api.github.com/users/asajuenitan/repos", "events_url": "https://api.github.com/users/asajuenitan/events{/privacy}", "received_events_url": "https://api.github.com/users/asajuenitan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2018-09-20T04:48:46Z", "updated_at": "2020-07-07T15:28:53Z", "closed_at": "2020-06-15T20:12:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using \r\n`import jwt`\r\n\r\n`encoded = jwt.encode({'some': 'payload'}, 'secret', algorithm='HS256')`\r\n**Traceback (most recent call last):\r\n    File \"< stdin >\", line 1, in <module>\r\nAttribureError: module 'jwt' has no attribure 'encode'**\r\n\r\nSame issue with using `decode`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/373", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/373/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/373/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/373/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/373", "id": 361213892, "node_id": "MDU6SXNzdWUzNjEyMTM4OTI=", "number": 373, "title": "The old token will not fail, when I generate a new token.", "user": {"login": "MonkeyInWind", "id": 34543887, "node_id": "MDQ6VXNlcjM0NTQzODg3", "avatar_url": "https://avatars3.githubusercontent.com/u/34543887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MonkeyInWind", "html_url": "https://github.com/MonkeyInWind", "followers_url": "https://api.github.com/users/MonkeyInWind/followers", "following_url": "https://api.github.com/users/MonkeyInWind/following{/other_user}", "gists_url": "https://api.github.com/users/MonkeyInWind/gists{/gist_id}", "starred_url": "https://api.github.com/users/MonkeyInWind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MonkeyInWind/subscriptions", "organizations_url": "https://api.github.com/users/MonkeyInWind/orgs", "repos_url": "https://api.github.com/users/MonkeyInWind/repos", "events_url": "https://api.github.com/users/MonkeyInWind/events{/privacy}", "received_events_url": "https://api.github.com/users/MonkeyInWind/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-18T09:26:14Z", "updated_at": "2019-01-25T08:01:12Z", "closed_at": "2019-01-25T08:01:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I generate a token named 'a' and expire for one day, then I generate a token named 'b',use the same object, the difference is 'iat' and 'exp'.\r\nNow the two token are effective.\r\nBut I only need one token to work.\r\nCan you add a API that makes token invalid or invalidation of old ones when new token is generated?\r\nthanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/372", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/372/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/372/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/372/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/372", "id": 360636808, "node_id": "MDU6SXNzdWUzNjA2MzY4MDg=", "number": 372, "title": "Can't use \"RS256\" algorithm - \"ValueError: Could not deserialize key data\"", "user": {"login": "mydockergit", "id": 37586216, "node_id": "MDQ6VXNlcjM3NTg2MjE2", "avatar_url": "https://avatars0.githubusercontent.com/u/37586216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mydockergit", "html_url": "https://github.com/mydockergit", "followers_url": "https://api.github.com/users/mydockergit/followers", "following_url": "https://api.github.com/users/mydockergit/following{/other_user}", "gists_url": "https://api.github.com/users/mydockergit/gists{/gist_id}", "starred_url": "https://api.github.com/users/mydockergit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mydockergit/subscriptions", "organizations_url": "https://api.github.com/users/mydockergit/orgs", "repos_url": "https://api.github.com/users/mydockergit/repos", "events_url": "https://api.github.com/users/mydockergit/events{/privacy}", "received_events_url": "https://api.github.com/users/mydockergit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-16T12:54:34Z", "updated_at": "2018-09-16T12:59:28Z", "closed_at": "2018-09-16T12:59:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Closed. Opened by mistake", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/371", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/371/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/371/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/371/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/371", "id": 357883453, "node_id": "MDU6SXNzdWUzNTc4ODM0NTM=", "number": 371, "title": "inconsistent results in Python2 - Python3", "user": {"login": "macmichael01", "id": 128222, "node_id": "MDQ6VXNlcjEyODIyMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/128222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/macmichael01", "html_url": "https://github.com/macmichael01", "followers_url": "https://api.github.com/users/macmichael01/followers", "following_url": "https://api.github.com/users/macmichael01/following{/other_user}", "gists_url": "https://api.github.com/users/macmichael01/gists{/gist_id}", "starred_url": "https://api.github.com/users/macmichael01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/macmichael01/subscriptions", "organizations_url": "https://api.github.com/users/macmichael01/orgs", "repos_url": "https://api.github.com/users/macmichael01/repos", "events_url": "https://api.github.com/users/macmichael01/events{/privacy}", "received_events_url": "https://api.github.com/users/macmichael01/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 124376467, "node_id": "MDU6TGFiZWwxMjQzNzY0Njc=", "url": "https://api.github.com/repos/jpadilla/pyjwt/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-09-07T01:09:29Z", "updated_at": "2019-01-07T19:43:54Z", "closed_at": "2019-01-07T19:43:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run the following command below. I receive inconsistent results.\r\n\r\n## Expected Result\r\n\r\nThe same token should be returned. There is one noticeable difference in the second token which is the b (byte) prefixed to the string.\r\n\r\n## Actual Result\r\n\r\ntwo different strings\r\n\r\n## Reproduction Steps\r\n\r\n```\r\n# Python 2.7.15\r\n# Name: PyJWT\r\n# Version: 1.6.4\r\n\r\n>>> import jwt\r\n>>> jwt.encode({'transaction': '6fa459ea-ee8a-4ca4-894e-db77e160355e', 'exp': 1497965640}, 'a') \r\n'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0cmFuc2FjdGlvbiI6IjZmYTQ1OWVhLWVlOGEtNGNhNC04OTRlLWRiNzdlMTYwMzU1ZSIsImV4cCI6MTQ5Nzk2NTY0MH0.-bpx5A3DfSe3-HO6aH_glS8adcCxUn8lSK1-RPxohhI'\r\n\r\n# Python 3.7.0\r\n# Name: PyJWT\r\n# Version: 1.6.4\r\n>>> import jwt\r\n>>> jwt.encode({'transaction': '6fa459ea-ee8a-4ca4-894e-db77e160355e', 'exp': 1497965640}, 'a')\r\nb'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0cmFuc2FjdGlvbiI6IjZmYTQ1OWVhLWVlOGEtNGNhNC04OTRlLWRiNzdlMTYwMzU1ZSIsImV4cCI6MTQ5Nzk2NTY0MH0.NuqwXlHt27nRxg5W2hHoP5ugnLmw-7QYBumO7lRa1i0'\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m jwt.help\r\n\r\nTested on Mac OS\r\n```\r\n{\r\n  \"cryptography\": {\r\n    \"version\": \"2.2.2\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.0\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"17.7.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyjwt\": {\r\n    \"version\": \"1.6.4\"\r\n  }\r\n}\r\n```\r\nTested on Ubuntu 16.04\r\n``` \r\n{\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.5.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.13-x86_64-node584\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyjwt\": {\r\n    \"version\": \"1.6.4\"\r\n  }\r\n}\r\n```\r\n\r\nThis command is only available on PyJWT v1.6.3 and greater. Otherwise,\r\nplease provide some basic information about your system.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/355", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/355/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/355/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/355/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/355", "id": 332444340, "node_id": "MDU6SXNzdWUzMzI0NDQzNDA=", "number": 355, "title": "pip install PyJWT fails", "user": {"login": "kosso", "id": 202782, "node_id": "MDQ6VXNlcjIwMjc4Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/202782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kosso", "html_url": "https://github.com/kosso", "followers_url": "https://api.github.com/users/kosso/followers", "following_url": "https://api.github.com/users/kosso/following{/other_user}", "gists_url": "https://api.github.com/users/kosso/gists{/gist_id}", "starred_url": "https://api.github.com/users/kosso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kosso/subscriptions", "organizations_url": "https://api.github.com/users/kosso/orgs", "repos_url": "https://api.github.com/users/kosso/repos", "events_url": "https://api.github.com/users/kosso/events{/privacy}", "received_events_url": "https://api.github.com/users/kosso/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-14T15:07:31Z", "updated_at": "2018-07-19T13:37:06Z", "closed_at": "2018-07-19T13:37:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\npip install PyJWT\r\nCollecting PyJWT\r\n  Could not fetch URL https://pypi.python.org/simple/pyjwt/: There was a problem confirming the ssl certificate: [SSL: TLSV1_ALERT_PROTOCOL_VERSION] tlsv1 alert protocol version (_ssl.c:590) - skipping\r\n  Could not find a version that satisfies the requirement PyJWT (from versions: )\r\nNo matching distribution found for PyJWT\r\n```\r\n\r\nI also tried `--trusted-host pypi.python.org` \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/354", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/354/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/354/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/354/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/354", "id": 331731303, "node_id": "MDU6SXNzdWUzMzE3MzEzMDM=", "number": 354, "title": "Problem upgrading package", "user": {"login": "SrChip15", "id": 12288245, "node_id": "MDQ6VXNlcjEyMjg4MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/12288245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SrChip15", "html_url": "https://github.com/SrChip15", "followers_url": "https://api.github.com/users/SrChip15/followers", "following_url": "https://api.github.com/users/SrChip15/following{/other_user}", "gists_url": "https://api.github.com/users/SrChip15/gists{/gist_id}", "starred_url": "https://api.github.com/users/SrChip15/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SrChip15/subscriptions", "organizations_url": "https://api.github.com/users/SrChip15/orgs", "repos_url": "https://api.github.com/users/SrChip15/repos", "events_url": "https://api.github.com/users/SrChip15/events{/privacy}", "received_events_url": "https://api.github.com/users/SrChip15/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-12T19:58:06Z", "updated_at": "2018-07-19T20:07:41Z", "closed_at": "2018-07-19T13:37:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Summary\r\n===\r\nTried updating package with the following command:\r\n`pip3 install pyjwt -U`\r\n\r\nI am using Python 3.6.5\r\n\r\nBelow is the dir level permissions info:\r\n`rw-r--r--    admin    1 KiB  Tue Dec  5 15:00:12 2017   DESCRIPTION.rst `\r\n\r\nAlso ran with sudo, like so:\r\n`sudo pip3 install pyjwt -U`\r\n\r\nwhich yielded,\r\n`The directory '/Users/<user>/Library/Caches/pip/http' or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.`\r\n\r\nSo, I checked the permissions for the above-mentioned dir too, I seem to have all permissions (rwx) and the dir is owned by me.\r\n\r\n## Expected Result\r\nSuccessfully installed PyJWT-1.6.4\r\n\r\n## Actual Result\r\nCould not install packages due to an EnvironmentError: [Errno 13] Permission denied: '/usr/local/lib/python3.6/site-packages/PyJWT-1.5.3.dist-info/DESCRIPTION.rst'\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/351", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/351/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/351/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/351/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/351", "id": 325911679, "node_id": "MDU6SXNzdWUzMjU5MTE2Nzk=", "number": 351, "title": "1.6.1 --> 1.6.3 introduced breaking API changes: .decode(token=) vs .decode(jwt=)", "user": {"login": "dlopuch", "id": 1427329, "node_id": "MDQ6VXNlcjE0MjczMjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1427329?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlopuch", "html_url": "https://github.com/dlopuch", "followers_url": "https://api.github.com/users/dlopuch/followers", "following_url": "https://api.github.com/users/dlopuch/following{/other_user}", "gists_url": "https://api.github.com/users/dlopuch/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlopuch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlopuch/subscriptions", "organizations_url": "https://api.github.com/users/dlopuch/orgs", "repos_url": "https://api.github.com/users/dlopuch/repos", "events_url": "https://api.github.com/users/dlopuch/events{/privacy}", "received_events_url": "https://api.github.com/users/dlopuch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 124376366, "node_id": "MDU6TGFiZWwxMjQzNzYzNjY=", "url": "https://api.github.com/repos/jpadilla/pyjwt/labels/bug", "name": "bug", "color": "e11d21", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-23T23:32:56Z", "updated_at": "2018-05-24T02:45:57Z", "closed_at": "2018-05-24T02:45:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "PR #344 renamed some arguments on `api_jwt` ([for example](https://github.com/jpadilla/pyjwt/pull/344/files#diff-00ea5fc2260636f8d87435daf8c3b4c7R69)).  This is a breaking API change -- although the argument normalization is appreciated and an improvement, this should have triggered a major version bump (eg 1.6.1 --> 2.0.0) or there should have been a deprecation warning when using the old arg.\r\n\r\n## Expected Result\r\n\r\n[Semver](https://semver.org/) states:\r\n\r\n> Given a version number MAJOR.MINOR.PATCH, increment the:\r\n> MAJOR version when you make incompatible API changes,\r\n> MINOR version when you add functionality in a backwards-compatible manner, and\r\n> PATCH version when you make backwards-compatible bug fixes.\r\n\r\nMy dependency manager matches pyjwt on 1.6.*, so I expected a patch version bump to be not breaking.\r\n\r\nGiven the [wide usage](https://libraries.io/pypi/PyJWT/usage) of PyJWT, API should be stable across patch releases.\r\n\r\n## Actual Result\r\n\r\nMy dependency manager pulled in 1.6.3, and suddenly my build broke.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/349", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/349/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/349/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/349/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/349", "id": 323921894, "node_id": "MDU6SXNzdWUzMjM5MjE4OTQ=", "number": 349, "title": "How to extend the effective duration of the token", "user": {"login": "52lemon", "id": 13587459, "node_id": "MDQ6VXNlcjEzNTg3NDU5", "avatar_url": "https://avatars2.githubusercontent.com/u/13587459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/52lemon", "html_url": "https://github.com/52lemon", "followers_url": "https://api.github.com/users/52lemon/followers", "following_url": "https://api.github.com/users/52lemon/following{/other_user}", "gists_url": "https://api.github.com/users/52lemon/gists{/gist_id}", "starred_url": "https://api.github.com/users/52lemon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/52lemon/subscriptions", "organizations_url": "https://api.github.com/users/52lemon/orgs", "repos_url": "https://api.github.com/users/52lemon/repos", "events_url": "https://api.github.com/users/52lemon/events{/privacy}", "received_events_url": "https://api.github.com/users/52lemon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 124376467, "node_id": "MDU6TGFiZWwxMjQzNzY0Njc=", "url": "https://api.github.com/repos/jpadilla/pyjwt/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-17T08:31:34Z", "updated_at": "2018-05-24T02:27:50Z", "closed_at": "2018-05-24T02:27:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to extend the effective duration of the token? can you give me an example!!! thanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/343", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/343/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/343/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/343/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/343", "id": 310382977, "node_id": "MDU6SXNzdWUzMTAzODI5Nzc=", "number": 343, "title": "What do you mean by this?", "user": {"login": "cppg", "id": 20104741, "node_id": "MDQ6VXNlcjIwMTA0NzQx", "avatar_url": "https://avatars3.githubusercontent.com/u/20104741?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cppg", "html_url": "https://github.com/cppg", "followers_url": "https://api.github.com/users/cppg/followers", "following_url": "https://api.github.com/users/cppg/following{/other_user}", "gists_url": "https://api.github.com/users/cppg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cppg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cppg/subscriptions", "organizations_url": "https://api.github.com/users/cppg/orgs", "repos_url": "https://api.github.com/users/cppg/repos", "events_url": "https://api.github.com/users/cppg/events{/privacy}", "received_events_url": "https://api.github.com/users/cppg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-02T03:10:39Z", "updated_at": "2018-05-10T02:40:49Z", "closed_at": "2018-05-10T02:40:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "path\uff1a jwt/api_jws.py  \r\n line:+98 ==\u300bsegments.append(base64url_encode(payload))\r\nIf you do this, what's the point of encryption? The data was completely exposed\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/342", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/342/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/342/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/342/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/342", "id": 309657925, "node_id": "MDU6SXNzdWUzMDk2NTc5MjU=", "number": 342, "title": "Can't use encrypted private key to encode token with RS256", "user": {"login": "qwez", "id": 5236981, "node_id": "MDQ6VXNlcjUyMzY5ODE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5236981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qwez", "html_url": "https://github.com/qwez", "followers_url": "https://api.github.com/users/qwez/followers", "following_url": "https://api.github.com/users/qwez/following{/other_user}", "gists_url": "https://api.github.com/users/qwez/gists{/gist_id}", "starred_url": "https://api.github.com/users/qwez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qwez/subscriptions", "organizations_url": "https://api.github.com/users/qwez/orgs", "repos_url": "https://api.github.com/users/qwez/repos", "events_url": "https://api.github.com/users/qwez/events{/privacy}", "received_events_url": "https://api.github.com/users/qwez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-29T08:07:48Z", "updated_at": "2018-05-10T02:42:29Z", "closed_at": "2018-05-10T02:42:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have an encrypted private key and try to encode token with RS256:\r\n`encoded = jwt.encode({'some': 'payload'}, private_key, algorithm='RS256')`\r\nAnd got:\r\n`TypeError: Password was not given but private key is encrypted`\r\n\r\nPlease add argument `password` to `encode()` method\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/339", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/339/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/339/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/339/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/339", "id": 308970212, "node_id": "MDU6SXNzdWUzMDg5NzAyMTI=", "number": 339, "title": "Does pyjwt support the jti claim (nonce used to prevent replays)?", "user": {"login": "mw44118", "id": 19956, "node_id": "MDQ6VXNlcjE5OTU2", "avatar_url": "https://avatars2.githubusercontent.com/u/19956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mw44118", "html_url": "https://github.com/mw44118", "followers_url": "https://api.github.com/users/mw44118/followers", "following_url": "https://api.github.com/users/mw44118/following{/other_user}", "gists_url": "https://api.github.com/users/mw44118/gists{/gist_id}", "starred_url": "https://api.github.com/users/mw44118/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mw44118/subscriptions", "organizations_url": "https://api.github.com/users/mw44118/orgs", "repos_url": "https://api.github.com/users/mw44118/repos", "events_url": "https://api.github.com/users/mw44118/events{/privacy}", "received_events_url": "https://api.github.com/users/mw44118/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-27T13:31:54Z", "updated_at": "2018-03-27T14:16:39Z", "closed_at": "2018-03-27T14:16:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to make sure a reset-password link can't be used more than once.\r\n\r\nI'm setting an \"exp\" key to make it expire after a fixed amount of time.  I see there is a \"jti\" claim described in the spec, where each JWT would have a unique key, and I could verify that I've never seen this before.\r\n\r\nDoes pyjwt have this built-in?\r\n\r\nIf not, I can still add a \"jti\" key that points to a uuid.uuid4() value and then check after I decode the string.\r\n\r\nWould you want a patch that extracts this jti key?\r\n\r\nThanks for writing this package, by the way!  It is great.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/332", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/332/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/332/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/332/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/332", "id": 298189785, "node_id": "MDU6SXNzdWUyOTgxODk3ODU=", "number": 332, "title": "MemoryError again", "user": {"login": "FilimonovAP81", "id": 32813125, "node_id": "MDQ6VXNlcjMyODEzMTI1", "avatar_url": "https://avatars2.githubusercontent.com/u/32813125?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FilimonovAP81", "html_url": "https://github.com/FilimonovAP81", "followers_url": "https://api.github.com/users/FilimonovAP81/followers", "following_url": "https://api.github.com/users/FilimonovAP81/following{/other_user}", "gists_url": "https://api.github.com/users/FilimonovAP81/gists{/gist_id}", "starred_url": "https://api.github.com/users/FilimonovAP81/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FilimonovAP81/subscriptions", "organizations_url": "https://api.github.com/users/FilimonovAP81/orgs", "repos_url": "https://api.github.com/users/FilimonovAP81/repos", "events_url": "https://api.github.com/users/FilimonovAP81/events{/privacy}", "received_events_url": "https://api.github.com/users/FilimonovAP81/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-19T08:11:32Z", "updated_at": "2018-02-24T14:35:26Z", "closed_at": "2018-02-24T14:35:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry but I think you didn't solve my problem.\r\n\r\nI don't know how to open already closed issues so I have created new one.\r\n\r\nI have the same problem like in [this issue](https://github.com/jpadilla/pyjwt/issues/330) But I have attached wrong stack trace file.\r\nIn attachment you can find correct stack trace file.\r\n[New Text Document (5).txt](https://github.com/jpadilla/pyjwt/files/1735908/New.Text.Document.5.txt)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/331", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/331/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/331/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/331/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/331", "id": 297903769, "node_id": "MDU6SXNzdWUyOTc5MDM3Njk=", "number": 331, "title": "JWT strings different between python 2 and 3", "user": {"login": "anurag90x", "id": 1813816, "node_id": "MDQ6VXNlcjE4MTM4MTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1813816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anurag90x", "html_url": "https://github.com/anurag90x", "followers_url": "https://api.github.com/users/anurag90x/followers", "following_url": "https://api.github.com/users/anurag90x/following{/other_user}", "gists_url": "https://api.github.com/users/anurag90x/gists{/gist_id}", "starred_url": "https://api.github.com/users/anurag90x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anurag90x/subscriptions", "organizations_url": "https://api.github.com/users/anurag90x/orgs", "repos_url": "https://api.github.com/users/anurag90x/repos", "events_url": "https://api.github.com/users/anurag90x/events{/privacy}", "received_events_url": "https://api.github.com/users/anurag90x/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-16T20:02:15Z", "updated_at": "2018-02-17T18:47:37Z", "closed_at": "2018-02-17T18:47:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Because python dictionaries arent ordered by default in 2 and are ordered by default in 3, pyjwt generates different jwt strings because of https://github.com/jpadilla/pyjwt/blob/master/jwt/api_jws.py#L83. This affects applications and libs that are doing jwt comparisons.\r\n\r\nWould it be acceptable to change that to use an OrderedDict instead? That way, the jwt strings will be the same between 2 and 3.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/330", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/330/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/330/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/330/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/330", "id": 297766843, "node_id": "MDU6SXNzdWUyOTc3NjY4NDM=", "number": 330, "title": "MemoryError", "user": {"login": "FilimonovAP81", "id": 32813125, "node_id": "MDQ6VXNlcjMyODEzMTI1", "avatar_url": "https://avatars2.githubusercontent.com/u/32813125?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FilimonovAP81", "html_url": "https://github.com/FilimonovAP81", "followers_url": "https://api.github.com/users/FilimonovAP81/followers", "following_url": "https://api.github.com/users/FilimonovAP81/following{/other_user}", "gists_url": "https://api.github.com/users/FilimonovAP81/gists{/gist_id}", "starred_url": "https://api.github.com/users/FilimonovAP81/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FilimonovAP81/subscriptions", "organizations_url": "https://api.github.com/users/FilimonovAP81/orgs", "repos_url": "https://api.github.com/users/FilimonovAP81/repos", "events_url": "https://api.github.com/users/FilimonovAP81/events{/privacy}", "received_events_url": "https://api.github.com/users/FilimonovAP81/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-16T12:16:52Z", "updated_at": "2018-02-18T17:27:53Z", "closed_at": "2018-02-18T16:50:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI have a problem with this lib\r\nI use python 2.7.10 and djangorestframework 3.3.2\r\nI have installed last release pyjwt and if i import jwt then I have MemoryError. If I comment import line then no error messages.\r\n\r\nDo you know potentional problem places or may be how I can localized  it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/329", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/329/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/329/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/329/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/329", "id": 297507227, "node_id": "MDU6SXNzdWUyOTc1MDcyMjc=", "number": 329, "title": "Couldn't decode the token.", "user": {"login": "praveenupadrasta", "id": 6442631, "node_id": "MDQ6VXNlcjY0NDI2MzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6442631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/praveenupadrasta", "html_url": "https://github.com/praveenupadrasta", "followers_url": "https://api.github.com/users/praveenupadrasta/followers", "following_url": "https://api.github.com/users/praveenupadrasta/following{/other_user}", "gists_url": "https://api.github.com/users/praveenupadrasta/gists{/gist_id}", "starred_url": "https://api.github.com/users/praveenupadrasta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/praveenupadrasta/subscriptions", "organizations_url": "https://api.github.com/users/praveenupadrasta/orgs", "repos_url": "https://api.github.com/users/praveenupadrasta/repos", "events_url": "https://api.github.com/users/praveenupadrasta/events{/privacy}", "received_events_url": "https://api.github.com/users/praveenupadrasta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-15T16:21:20Z", "updated_at": "2018-02-17T19:00:25Z", "closed_at": "2018-02-17T19:00:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been using JWT authentication for my recent project. But the problem is, I'm able to get the JWT encoded token but couldn't decode the same token with the same algorithm (HS256) and same 'secret_key' which I have in my django.conf.settings.\r\n\r\nHere I provide the code I'm using.\r\n This is for token generation.\r\n\r\n    def _generate_jwt_token(self):\r\n        \"\"\"\r\n        Generates a JSON Web Token that stores this user's ID and has an expiry\r\n        date set to 60 days into the future.\r\n        \"\"\"\r\n        dt = datetime.now() + timedelta(days=60)\r\n\r\n        token = jwt.encode({\r\n            'id': self.pk,\r\n            'exp': int(dt.strftime('%S'))\r\n        }, settings.SECRET_KEY, 'HS256')\r\n\r\n        return token.decode('utf-8')\r\n\r\nThe below one for token decoding.\r\n\r\n    def _authenticate_credentials(self, request, token):\r\n\r\n        try:\r\n            payload = jwt.decode(token, settings.SECRET_KEY, algorithms=['HS256'])\r\n        except:\r\n            msg = 'Invalid authentication. Could not decode token.'\r\n            raise exceptions.AuthenticationFailed(msg)\r\n\r\n        try:\r\n            user = User.objects.get(pk=payload['id'])\r\n        except User.DoesNotExist:\r\n            msg = 'No user matching this token was found.'\r\n            raise exceptions.AuthenticationFailed(msg)\r\n\r\n        return (user, token)\r\n\r\nI have decoded the token using .decode('utf-8') before passing the token to  _authenticate_credentials() method. I'm able to decode the token if I pass \"verify=false\" to the jwt.decode() method.\r\nPlease help. I'm stuck with this for 2 days.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/328", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/328/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/328/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/328/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/328", "id": 296558531, "node_id": "MDU6SXNzdWUyOTY1NTg1MzE=", "number": 328, "title": "ValueError: Could not deserialize key data.", "user": {"login": "sushovan23", "id": 14843483, "node_id": "MDQ6VXNlcjE0ODQzNDgz", "avatar_url": "https://avatars0.githubusercontent.com/u/14843483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sushovan23", "html_url": "https://github.com/sushovan23", "followers_url": "https://api.github.com/users/sushovan23/followers", "following_url": "https://api.github.com/users/sushovan23/following{/other_user}", "gists_url": "https://api.github.com/users/sushovan23/gists{/gist_id}", "starred_url": "https://api.github.com/users/sushovan23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sushovan23/subscriptions", "organizations_url": "https://api.github.com/users/sushovan23/orgs", "repos_url": "https://api.github.com/users/sushovan23/repos", "events_url": "https://api.github.com/users/sushovan23/events{/privacy}", "received_events_url": "https://api.github.com/users/sushovan23/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-12T23:13:38Z", "updated_at": "2018-04-20T14:00:25Z", "closed_at": "2018-02-13T17:22:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here is my code:\r\n\r\n```\r\n    keyfile = open (\"pubkey.pem\", 'r')\r\n    keystring = keyfile.read()\r\n\r\n    print keystring\r\n    decoded = jwt.decode(encoded, keystring, algorithms='RS256')\r\n```\r\npubkey.pem is RSA key starting with:\r\n```\r\n-----BEGIN CERTIFICATE-----\r\ncert values\r\n-----END CERTIFICATE-----\r\n```\r\nstacktrace:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"oauth_test.py\", line 47, in <module>\r\n    main()\r\n  File \"oauth_test.py\", line 44, in main\r\n    decoded = jwt.decode(encoded, keystring, algorithms='RS256')\r\n  File \"/usr/lib/python2.7/site-packages/jwt/api_jwt.py\", line 78, in decode\r\n    jwt, key=key, algorithms=algorithms, options=options, **kwargs\r\n  File \"/usr/lib/python2.7/site-packages/jwt/api_jws.py\", line 140, in decode\r\n    key, algorithms)\r\n  File \"/usr/lib/python2.7/site-packages/jwt/api_jws.py\", line 204, in _verify_signature\r\n    key = alg_obj.prepare_key(key)\r\n  File \"/usr/lib/python2.7/site-packages/jwt/algorithms.py\", line 207, in prepare_key\r\n    key = load_pem_public_key(key, backend=default_backend())\r\n  File \"/usr/lib64/python2.7/site-packages/cryptography/hazmat/primitives/serialization.py\", line 24, in load_pem_public_key\r\n    return backend.load_pem_public_key(data)\r\n  File \"/usr/lib64/python2.7/site-packages/cryptography/hazmat/backends/openssl/backend.py\", line 1041, in load_pem_public_key\r\n    self._handle_key_loading_error()\r\n  File \"/usr/lib64/python2.7/site-packages/cryptography/hazmat/backends/openssl/backend.py\", line 1292, in _handle_key_loading_error\r\n    raise ValueError(\"Could not deserialize key data.\")\r\n```\r\nPlease let me know where I may be going wrong.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/326", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/326/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/326/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/326/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/326", "id": 290072484, "node_id": "MDU6SXNzdWUyOTAwNzI0ODQ=", "number": 326, "title": "decoding a payload that is a list", "user": {"login": "david-jana", "id": 15093810, "node_id": "MDQ6VXNlcjE1MDkzODEw", "avatar_url": "https://avatars3.githubusercontent.com/u/15093810?v=4", "gravatar_id": "", "url": "https://api.github.com/users/david-jana", "html_url": "https://github.com/david-jana", "followers_url": "https://api.github.com/users/david-jana/followers", "following_url": "https://api.github.com/users/david-jana/following{/other_user}", "gists_url": "https://api.github.com/users/david-jana/gists{/gist_id}", "starred_url": "https://api.github.com/users/david-jana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/david-jana/subscriptions", "organizations_url": "https://api.github.com/users/david-jana/orgs", "repos_url": "https://api.github.com/users/david-jana/repos", "events_url": "https://api.github.com/users/david-jana/events{/privacy}", "received_events_url": "https://api.github.com/users/david-jana/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-19T18:52:17Z", "updated_at": "2018-02-17T18:59:29Z", "closed_at": "2018-02-17T18:59:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm using pyjwt with an api that accepts and returns jwt tokens.  I ran across a case where the api returned a token where the payload string encoded a list rather than a map, and the pyjwt decode() function resulted in \"jwt.exceptions.DecodeError: Invalid payload string: must be a json object\". \r\n\r\nsee https://github.com/jpadilla/pyjwt/blob/master/jwt/api_jwt.py#L84-L85\r\n\r\n I'm wondering if encoding a list in the payload string violates the JWT protocol, and if not, whether there is (or should be) a way to handle this in pyjwt.  At the least, the error message seems misleading since if json.loads() is successful, I would think the string should count as a json object.\r\n\r\nthanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/325", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/325/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/325/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/325/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/325", "id": 288915419, "node_id": "MDU6SXNzdWUyODg5MTU0MTk=", "number": 325, "title": "binascii.Error: Incorrect padding", "user": {"login": "mani1950", "id": 35493749, "node_id": "MDQ6VXNlcjM1NDkzNzQ5", "avatar_url": "https://avatars1.githubusercontent.com/u/35493749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mani1950", "html_url": "https://github.com/mani1950", "followers_url": "https://api.github.com/users/mani1950/followers", "following_url": "https://api.github.com/users/mani1950/following{/other_user}", "gists_url": "https://api.github.com/users/mani1950/gists{/gist_id}", "starred_url": "https://api.github.com/users/mani1950/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mani1950/subscriptions", "organizations_url": "https://api.github.com/users/mani1950/orgs", "repos_url": "https://api.github.com/users/mani1950/repos", "events_url": "https://api.github.com/users/mani1950/events{/privacy}", "received_events_url": "https://api.github.com/users/mani1950/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-16T13:56:08Z", "updated_at": "2018-01-16T16:14:01Z", "closed_at": "2018-01-16T16:14:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "We receive a JWT token and we need to decode it, We are able to successfully decode it in jwt.io\r\n\r\ntoken=<<My JWT token>>\r\npublic_key=<<'-----BEGINPUBLICKEY-----' \\\r\n                     public key goes here  \r\n                   '-----ENDPUBLICKEY-----'\r\n\r\ndecoded=jwt.decode(token,public_key,algorithms='RS256')\r\n\r\nWe then get the error. \r\nbinascii.Error: Incorrect padding\r\n\r\nPlease help. We are stuck with this error since 2 days.  I am unable to post the key or the token for safety reasons.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/323", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/323/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/323/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/323/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/323", "id": 287914791, "node_id": "MDU6SXNzdWUyODc5MTQ3OTE=", "number": 323, "title": "Python - General SSH error - Could not deserialize key data", "user": {"login": "pandiaraj6", "id": 22506565, "node_id": "MDQ6VXNlcjIyNTA2NTY1", "avatar_url": "https://avatars3.githubusercontent.com/u/22506565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pandiaraj6", "html_url": "https://github.com/pandiaraj6", "followers_url": "https://api.github.com/users/pandiaraj6/followers", "following_url": "https://api.github.com/users/pandiaraj6/following{/other_user}", "gists_url": "https://api.github.com/users/pandiaraj6/gists{/gist_id}", "starred_url": "https://api.github.com/users/pandiaraj6/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pandiaraj6/subscriptions", "organizations_url": "https://api.github.com/users/pandiaraj6/orgs", "repos_url": "https://api.github.com/users/pandiaraj6/repos", "events_url": "https://api.github.com/users/pandiaraj6/events{/privacy}", "received_events_url": "https://api.github.com/users/pandiaraj6/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-11T20:31:35Z", "updated_at": "2018-02-17T19:00:17Z", "closed_at": "2018-02-17T19:00:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am running the python script which using below library ,  when I run the script on my windows machine I am getting exception \"General SSH error - Could not deserialize key data\". Can some one help to find what is wrong on my key files.\r\n\r\nmy public key\r\n---- BEGIN PUBLIC KEY ----\r\nAAAAB3NzaC1yc2EAAAABJQAAAQEAlh7rcraFLyOHX+BRA+asCubmDjIFVNdNu4U1\r\n45sgAcwm+90Gxa+OGmO4U5eMcM2H+YBG+ZxrFn4nFFqwuRPH3MWmMkkpUgoV1pqW\r\nLymljBjKhomLZBxOIwal1L1uR50Ea2kSDsnE55qCOhW+zssg894c4hFjyAD5Xfpk\r\nhkMT9loHTMTRItu8Zzii+1yhARpPVrfKYe8vXKvWsF+YUwi8+U0KEijA99oWvE6c\r\nzVpJS/Co0D9vcdcJ+CyWXQJ41kza9ejy1uroFkj+aHZq0SQDdvF5DW3+MRGPma/p\r\nOCnZUrnGFJEo9nwdzWasZxH+4pFxfgS0qlCs9CvA8tiy7Q7Nkw==\r\n---- END PUBLIC KEY ----\r\n\r\n\r\nfrom pssh.pssh_client import ParallelSSHClient\r\n\r\nBelow is the code snipet where I am getting the exception. \r\nssh_client.py \r\n        except paramiko.SSHException as ex:\r\n            msg = \"General SSH error - %s\" % (ex,)\r\n            logger.error(msg)\r\n            raise SSHException(msg, host, port)\r\n\r\n@buzzrick\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/321", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/321/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/321/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/321/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/321", "id": 284559254, "node_id": "MDU6SXNzdWUyODQ1NTkyNTQ=", "number": 321, "title": "Why use local timezones for expiration?", "user": {"login": "dmitrybelyakov", "id": 178866, "node_id": "MDQ6VXNlcjE3ODg2Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/178866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmitrybelyakov", "html_url": "https://github.com/dmitrybelyakov", "followers_url": "https://api.github.com/users/dmitrybelyakov/followers", "following_url": "https://api.github.com/users/dmitrybelyakov/following{/other_user}", "gists_url": "https://api.github.com/users/dmitrybelyakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmitrybelyakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmitrybelyakov/subscriptions", "organizations_url": "https://api.github.com/users/dmitrybelyakov/orgs", "repos_url": "https://api.github.com/users/dmitrybelyakov/repos", "events_url": "https://api.github.com/users/dmitrybelyakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dmitrybelyakov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-12-26T13:55:23Z", "updated_at": "2017-12-28T10:02:36Z", "closed_at": "2017-12-27T15:03:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that when passing a UTC datetime object or timesatmp to `encode`, it gets converted to local timezone (by the use of `calendar.timegm` I presume) which results in tokens having local timezone instead of UTC one.\r\n\r\nWhat was the reason for such implementation? Would it not cause problems for cross-timezone applications? Why not just use UTC for everything?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/320", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/320/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/320/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/320/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/320", "id": 283517333, "node_id": "MDU6SXNzdWUyODM1MTczMzM=", "number": 320, "title": "TypeError: Password was not given but private key is encrypted", "user": {"login": "C0DK", "id": 9048078, "node_id": "MDQ6VXNlcjkwNDgwNzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/9048078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/C0DK", "html_url": "https://github.com/C0DK", "followers_url": "https://api.github.com/users/C0DK/followers", "following_url": "https://api.github.com/users/C0DK/following{/other_user}", "gists_url": "https://api.github.com/users/C0DK/gists{/gist_id}", "starred_url": "https://api.github.com/users/C0DK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/C0DK/subscriptions", "organizations_url": "https://api.github.com/users/C0DK/orgs", "repos_url": "https://api.github.com/users/C0DK/repos", "events_url": "https://api.github.com/users/C0DK/events{/privacy}", "received_events_url": "https://api.github.com/users/C0DK/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-20T10:31:46Z", "updated_at": "2017-12-21T02:00:13Z", "closed_at": "2017-12-21T02:00:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "How do i supply the password? I can't find the documentation part regarding this. The code i use, for reference.\r\n```\r\njwt.encode(\r\n                payload,\r\n                self.private_key,\r\n                algorithm='RS256')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/319", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/319/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/319/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/319/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/319", "id": 282289229, "node_id": "MDU6SXNzdWUyODIyODkyMjk=", "number": 319, "title": "Problem decoding token", "user": {"login": "Oxyrus", "id": 11398826, "node_id": "MDQ6VXNlcjExMzk4ODI2", "avatar_url": "https://avatars2.githubusercontent.com/u/11398826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Oxyrus", "html_url": "https://github.com/Oxyrus", "followers_url": "https://api.github.com/users/Oxyrus/followers", "following_url": "https://api.github.com/users/Oxyrus/following{/other_user}", "gists_url": "https://api.github.com/users/Oxyrus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Oxyrus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Oxyrus/subscriptions", "organizations_url": "https://api.github.com/users/Oxyrus/orgs", "repos_url": "https://api.github.com/users/Oxyrus/repos", "events_url": "https://api.github.com/users/Oxyrus/events{/privacy}", "received_events_url": "https://api.github.com/users/Oxyrus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-12-15T01:06:03Z", "updated_at": "2018-09-28T20:13:58Z", "closed_at": "2017-12-15T02:36:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, thanks for making pyjwt!\r\n\r\nI've been trying to use it in my Django application, however, something weird is happening: I can't decode the token!\r\n\r\nThis is how I'm creating the token\r\n\r\n```\r\ntoken = jwt.encode({\r\n    'user_id': user.id\r\n}, key='secret', algorithm='HS256')\r\n```\r\n\r\nAnd creating a token with `user_id: 1` gives me this token `b'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxfQ.J_RIIkoOLNXtd5IZcEwaBDGKGA3VnnYmuXnmhsmDEOs'`, however it says invalid signature in [https://jwt.io/](https://jwt.io/) for some reason.\r\n\r\nTrying to decode my token in the server throws this error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/andres/venv/zyru/lib/python3.6/site-packages/jwt/api_jws.py\", line 170, in _load\r\n    header_data = base64url_decode(header_segment)\r\n  File \"/home/andres/venv/zyru/lib/python3.6/site-packages/jwt/utils.py\", line 42, in base64url_decode\r\n    return base64.urlsafe_b64decode(input)\r\n  File \"/home/andres/venv/zyru/lib/python3.6/base64.py\", line 133, in urlsafe_b64decode\r\n    return b64decode(s)\r\n  File \"/home/andres/venv/zyru/lib/python3.6/base64.py\", line 87, in b64decode\r\n    return binascii.a2b_base64(s)\r\nbinascii.Error: Incorrect padding\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/andres/Code/Python/zyru-api/members/schema.py\", line 41, in get_user\r\n    decoded = jwt.decode(token, 'secret')\r\n  File \"/home/andres/venv/zyru/lib/python3.6/site-packages/jwt/api_jwt.py\", line 70, in decode\r\n    payload, signing_input, header, signature = self._load(jwt)\r\n  File \"/home/andres/venv/zyru/lib/python3.6/site-packages/jwt/api_jws.py\", line 172, in _load\r\n    raise DecodeError('Invalid header padding')\r\njwt.exceptions.DecodeError: Invalid header padding\r\n``` \r\n\r\nWhy is the exception happening?\r\n\r\nThanks a lot!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/317", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/317/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/317/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/317/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/317", "id": 279789875, "node_id": "MDU6SXNzdWUyNzk3ODk4NzU=", "number": 317, "title": "Using PyJWT on App Engine", "user": {"login": "intonarumori", "id": 86030, "node_id": "MDQ6VXNlcjg2MDMw", "avatar_url": "https://avatars3.githubusercontent.com/u/86030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/intonarumori", "html_url": "https://github.com/intonarumori", "followers_url": "https://api.github.com/users/intonarumori/followers", "following_url": "https://api.github.com/users/intonarumori/following{/other_user}", "gists_url": "https://api.github.com/users/intonarumori/gists{/gist_id}", "starred_url": "https://api.github.com/users/intonarumori/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/intonarumori/subscriptions", "organizations_url": "https://api.github.com/users/intonarumori/orgs", "repos_url": "https://api.github.com/users/intonarumori/repos", "events_url": "https://api.github.com/users/intonarumori/events{/privacy}", "received_events_url": "https://api.github.com/users/intonarumori/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-06T15:16:13Z", "updated_at": "2019-09-14T20:29:19Z", "closed_at": "2018-02-17T19:02:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nAs suggested by the documentation PyJWT could be used in environments where `cryptography` cannot be installed (ex. App Engine).\r\n\r\nIn a local virtualenv I installed `cryptography`, `ecdsa`, `pycrypto` to test my code.\r\n\r\nCode using the default implementation works as expected:\r\n```\r\nimport jwt\r\nkey = \"<key read from .p8 file>\"\r\nalg = 'ES256'\r\nheaders = { \"alg\": alg, \"key\": \"value\" }\r\npayload = {\"key\": \"value\"}\r\ntoken = jwt.encode(payload, key, algorithm=alg, headers=headers)\r\n```\r\n\r\nHowever using the suggested workaround registering the `ecdsa` algorithm and using the exact same code and key results in an error:\r\n```\r\nimport jwt\r\nfrom jwt.contrib.algorithms.py_ecdsa import ECAlgorithm\r\n\r\njwt.unregister_algorithm('ES256') # needs to be unregistered first for some reason\r\njwt.register_algorithm('ES256', ECAlgorithm(ECAlgorithm.SHA256))\r\n\r\nkey = \"<key read from .p8 file>\"\r\nalg = 'ES256'\r\nheaders = { \"alg\": alg, \"key\": \"value\" }\r\npayload = {\"key\": \"value\"}\r\ntoken = jwt.encode(payload, key, algorithm=alg, headers=headers)\r\n```\r\nError:\r\n```\r\nTraceback (most recent call last):\r\n...\r\n  File \"./ENV/lib/python2.7/site-packages/jwt/api_jwt.py\", line 56, in encode\r\n    json_payload, key, algorithm, headers, json_encoder\r\n  File \".../ENV/lib/python2.7/site-packages/jwt/api_jws.py\", line 102, in encode\r\n    key = alg_obj.prepare_key(key)\r\n  File \".../ENV/lib/python2.7/site-packages/jwt/contrib/algorithms/py_ecdsa.py\", line 44, in prepare_key\r\n    key = ecdsa.SigningKey.from_pem(key)\r\n  File \".../ENV/lib/python2.7/site-packages/ecdsa/keys.py\", line 159, in from_pem\r\n    privkey_pem = string[string.index(b(\"-----BEGIN EC PRIVATE KEY-----\")):]\r\nValueError: substring not found\r\n```\r\n\r\nAs I understand it `ecdsa` expects a different key format.\r\n- so I either convert my key to the expected format (still looking into this, suggestions welcome)\r\n- or PyJWT handles that conversion to provide a hassle-free fallback when needed\r\n\r\nThis issue might be `ecdsa` specific and considered out of scope for this project, but I would love to hear suggestions.\r\n\r\nAs a side note: I had to use `unregister_algorithm` before `register_algorithm` which wasn't mentioned in the documentation.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/315", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/315/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/315/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/315/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/315", "id": 277711974, "node_id": "MDU6SXNzdWUyNzc3MTE5NzQ=", "number": 315, "title": "Add InvalidSignature exception", "user": {"login": "MarkusH", "id": 475613, "node_id": "MDQ6VXNlcjQ3NTYxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/475613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarkusH", "html_url": "https://github.com/MarkusH", "followers_url": "https://api.github.com/users/MarkusH/followers", "following_url": "https://api.github.com/users/MarkusH/following{/other_user}", "gists_url": "https://api.github.com/users/MarkusH/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarkusH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarkusH/subscriptions", "organizations_url": "https://api.github.com/users/MarkusH/orgs", "repos_url": "https://api.github.com/users/MarkusH/repos", "events_url": "https://api.github.com/users/MarkusH/events{/privacy}", "received_events_url": "https://api.github.com/users/MarkusH/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 124376381, "node_id": "MDU6TGFiZWwxMjQzNzYzODE=", "url": "https://api.github.com/repos/jpadilla/pyjwt/labels/enhancement", "name": "enhancement", "color": "c7def8", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-29T11:01:26Z", "updated_at": "2017-12-01T19:11:13Z", "closed_at": "2017-12-01T19:11:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Right now the [`jws.decode()`](https://github.com/jpadilla/pyjwt/blob/e0aa10ee586bf010ce9a99c5582ee8dc9293ba1e/jwt/api_jws.py#L206) method raises a `DecodeError` when the signature verification failed. I would like to propose adding a dedicated `InvalidSignatureError` or `SignatureVerificationError` exception class.\r\n\r\nThe reasoning behind this: I'd like to implement a key-rotating feature that checks for one key and if the signature verification fails checks for the other key. The claims, algorithm, and whatnot still need to be validated. The only solution I see right now is catching the `DecodeError` and checking for `e.args[0] == 'Signature verification failed'` which feels super dirty.\r\n\r\nPlease let me know what you think about this. I'm happy to provide the corresponding backward compatible patch.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/307", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/307/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/307/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/307/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/307", "id": 275367487, "node_id": "MDU6SXNzdWUyNzUzNjc0ODc=", "number": 307, "title": "What is solution for compatible code for extracting a public key from a x509 certificate that works in Python 2 and Python2", "user": {"login": "vaibhavmule", "id": 6290791, "node_id": "MDQ6VXNlcjYyOTA3OTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/6290791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaibhavmule", "html_url": "https://github.com/vaibhavmule", "followers_url": "https://api.github.com/users/vaibhavmule/followers", "following_url": "https://api.github.com/users/vaibhavmule/following{/other_user}", "gists_url": "https://api.github.com/users/vaibhavmule/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaibhavmule/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaibhavmule/subscriptions", "organizations_url": "https://api.github.com/users/vaibhavmule/orgs", "repos_url": "https://api.github.com/users/vaibhavmule/repos", "events_url": "https://api.github.com/users/vaibhavmule/events{/privacy}", "received_events_url": "https://api.github.com/users/vaibhavmule/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 124376467, "node_id": "MDU6TGFiZWwxMjQzNzY0Njc=", "url": "https://api.github.com/repos/jpadilla/pyjwt/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-20T14:07:59Z", "updated_at": "2018-06-15T03:06:56Z", "closed_at": "2018-06-15T03:06:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/jpadilla/pyjwt/blob/master/docs/faq.rst#how-can-i-extract-a-public--private-key-from-a-x509-certificate\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/299", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/299/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/299/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/299/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/299", "id": 265214467, "node_id": "MDU6SXNzdWUyNjUyMTQ0Njc=", "number": 299, "title": "Please document/flag security issues", "user": {"login": "jayfk", "id": 2930472, "node_id": "MDQ6VXNlcjI5MzA0NzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/2930472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayfk", "html_url": "https://github.com/jayfk", "followers_url": "https://api.github.com/users/jayfk/followers", "following_url": "https://api.github.com/users/jayfk/following{/other_user}", "gists_url": "https://api.github.com/users/jayfk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayfk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayfk/subscriptions", "organizations_url": "https://api.github.com/users/jayfk/orgs", "repos_url": "https://api.github.com/users/jayfk/repos", "events_url": "https://api.github.com/users/jayfk/events{/privacy}", "received_events_url": "https://api.github.com/users/jayfk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-13T08:51:13Z", "updated_at": "2017-10-19T13:45:58Z", "closed_at": "2017-10-19T13:45:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to document security issues in the changelog, possibly in its own section?\r\n\r\nFor [CVE-2017-11424](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11424) the changelog entry is:\r\n\r\n> Guard against PKCS1 PEM encododed public keys #277\r\n\r\nFor people not familiar with the codebase it's hard to understand that this might be a security concern.\r\n\r\nIf you flag them with something like\r\n\r\n> **[Security]** Guard against PKCS1 PEM encododed public keys #277\r\n\r\nit would be much easier to see that.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/298", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/298/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/298/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/298/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/298", "id": 264892096, "node_id": "MDU6SXNzdWUyNjQ4OTIwOTY=", "number": 298, "title": "pyjwt decode --verify CLI hang ", "user": {"login": "willow2014", "id": 7882884, "node_id": "MDQ6VXNlcjc4ODI4ODQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/7882884?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willow2014", "html_url": "https://github.com/willow2014", "followers_url": "https://api.github.com/users/willow2014/followers", "following_url": "https://api.github.com/users/willow2014/following{/other_user}", "gists_url": "https://api.github.com/users/willow2014/gists{/gist_id}", "starred_url": "https://api.github.com/users/willow2014/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willow2014/subscriptions", "organizations_url": "https://api.github.com/users/willow2014/orgs", "repos_url": "https://api.github.com/users/willow2014/repos", "events_url": "https://api.github.com/users/willow2014/events{/privacy}", "received_events_url": "https://api.github.com/users/willow2014/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 124376366, "node_id": "MDU6TGFiZWwxMjQzNzYzNjY=", "url": "https://api.github.com/repos/jpadilla/pyjwt/labels/bug", "name": "bug", "color": "e11d21", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-12T10:35:12Z", "updated_at": "2017-11-06T00:05:14Z", "closed_at": "2017-11-06T00:05:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "$ pyjwt -v\r\npyjwt 1.5.3\r\n\r\n\r\n$ pyjwt decode --no-verify eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzb21lIjoicGF5bG9hZCJ9.4twFt5NiznN84AWoo1d7KO1T_yoc0Z6XOpOVswacPZg\r\n^CTraceback (most recent call last):\r\n  File \"/usr/local/bin/pyjwt\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/usr/local/lib/python2.7/dist-packages/jwt/__main__.py\", line 157, in main\r\n    output = arguments.func(arguments)\r\n  File \"/usr/local/lib/python2.7/dist-packages/jwt/__main__.py\", line 58, in decode_payload\r\n    token = sys.stdin.read()\r\n\r\n$  pyjwt decode --no-verify eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzb21lIjoicGF5bG9hZCJ9.4twFt5NiznN84AWoo1d7KO1T_yoc0Z6XOpOVswacPZg\r\n^CTraceback (most recent call last):\r\n  File \"/Users/v612996/anaconda/bin/pyjwt\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/Users/v612996/anaconda/lib/python3.6/site-packages/jwt/__main__.py\", line 157, in main\r\n    output = arguments.func(arguments)\r\n  File \"/Users/v612996/anaconda/lib/python3.6/site-packages/jwt/__main__.py\", line 58, in decode_payload\r\n    token = sys.stdin.read()\r\nKeyboardInterrupt\r\n$ python --version\r\nPython 3.6.0 :: Anaconda custom (x86_64)\r\n\r\nBut the same token decoded perfectly under python 2.6 interpreter: \r\n>>> jwt.decode(encoded,verify=False)\r\n{u'some': u'payload'}\r\n\r\n\r\nWhat is the work around of \"pyjwt decode --no-verify\" hang in the CLI? \r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/297", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/297/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/297/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/297/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/297", "id": 262786448, "node_id": "MDU6SXNzdWUyNjI3ODY0NDg=", "number": 297, "title": "Travis builds fail due to missing python2.6 and python3.3", "user": {"login": "sirosen", "id": 1300022, "node_id": "MDQ6VXNlcjEzMDAwMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1300022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sirosen", "html_url": "https://github.com/sirosen", "followers_url": "https://api.github.com/users/sirosen/followers", "following_url": "https://api.github.com/users/sirosen/following{/other_user}", "gists_url": "https://api.github.com/users/sirosen/gists{/gist_id}", "starred_url": "https://api.github.com/users/sirosen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sirosen/subscriptions", "organizations_url": "https://api.github.com/users/sirosen/orgs", "repos_url": "https://api.github.com/users/sirosen/repos", "events_url": "https://api.github.com/users/sirosen/events{/privacy}", "received_events_url": "https://api.github.com/users/sirosen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 724789883, "node_id": "MDU6TGFiZWw3MjQ3ODk4ODM=", "url": "https://api.github.com/repos/jpadilla/pyjwt/labels/good%20first%20issue", "name": "good first issue", "color": "f481d6", "default": true, "description": null}, {"id": 724789320, "node_id": "MDU6TGFiZWw3MjQ3ODkzMjA=", "url": "https://api.github.com/repos/jpadilla/pyjwt/labels/help%20wanted", "name": "help wanted", "color": "72e095", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-04T13:26:18Z", "updated_at": "2018-03-03T16:44:29Z", "closed_at": "2017-10-19T18:43:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "@jpadilla, this is probably your call in terms of what lengths you want to go to in order to support these platforms, since it doesn't look like Travis py3.6 workers have these pythons anymore.\r\n\r\nThis happened in builds for #296, and it will impact other changes too.\r\n\r\n### Drop 2.6?\r\n\r\nIf there's no testing on py2.6, pyjwt should drop the classifier for it: otherwise something like `\"{}\".format(\"foo\")` will slip in, and on 2.6 it will break.\r\n2.6 is _really old_ at this point. Is support for it important?\r\n\r\nThe last non-secuirty-fix release of 2.6 was almost a decade ago.\r\n\r\n### Drop 3.3?\r\n\r\nPython3 moves fast, and 3.3 is one of the older versions at this point.\r\nIt was released in 2012 and has been in security-fix-only maintenance since 2014 ([py3.3.7 release notes](https://www.python.org/downloads/release/python-337/)).\r\n\r\nUnlike the issues with 2.6, if it works on 2.7 and 3.4, it _probably_ works on 3.3.\r\nStill, IMO pyjwt should drop the classifier if it's not being tested.\r\n\r\n### Work hard to test 2.6 and/or 3.3?\r\n\r\nThe other option seems to be to have Travis explicitly install these pythons for tests to run.\r\nFor the reasons noted above, I don't think this is worth the work involved.\r\n\r\nIf you wanted to do it, one of the better routes is probably to refactor the way tests are run to leverage Travis' python version selection, rather than trying to run everything through tox.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/293", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/293/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/293/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/293/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/293", "id": 257386625, "node_id": "MDU6SXNzdWUyNTczODY2MjU=", "number": 293, "title": "Verifying a JWS when decoding it triggers an error", "user": {"login": "bogdanpetrea", "id": 8372264, "node_id": "MDQ6VXNlcjgzNzIyNjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/8372264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bogdanpetrea", "html_url": "https://github.com/bogdanpetrea", "followers_url": "https://api.github.com/users/bogdanpetrea/followers", "following_url": "https://api.github.com/users/bogdanpetrea/following{/other_user}", "gists_url": "https://api.github.com/users/bogdanpetrea/gists{/gist_id}", "starred_url": "https://api.github.com/users/bogdanpetrea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bogdanpetrea/subscriptions", "organizations_url": "https://api.github.com/users/bogdanpetrea/orgs", "repos_url": "https://api.github.com/users/bogdanpetrea/repos", "events_url": "https://api.github.com/users/bogdanpetrea/events{/privacy}", "received_events_url": "https://api.github.com/users/bogdanpetrea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-13T13:45:45Z", "updated_at": "2018-04-19T13:13:00Z", "closed_at": "2018-04-19T13:13:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am getting the following message when trying to decode a JWS string:\r\n```python\r\n>>> assert payload == json.loads(PyJWS().decode(jws=jws, key=key, algorithms=['RS256']))\r\n\r\n    def verify(self, msg, key, sig):\r\n        try:\r\n>           key.verify(sig, msg, padding.PKCS1v15(), self.hash_alg())\r\nE           AttributeError: '_RSAPrivateKey' object has no attribute 'verify'\r\n```\r\nSkipping the verification part with `options={'verify_signature': False}` works as expected.\r\n\r\nI might be wrong but, in the [cryptography docs](https://cryptography.io/en/latest/hazmat/primitives/asymmetric/rsa/#verification) it's stated that the public key should be used for verification. I assume a check should be made in the `RSAAlgorithm.verify` method (which can be found [here](https://github.com/jpadilla/pyjwt/blob/master/jwt/algorithms.py#L317)).\r\n\r\n```python\r\ndef verify(self, msg, key, sig):\r\n    if isinstance(key, RSAPrivateKey):\r\n        key = key.public_key()\r\n    try:\r\n        key.verify(sig, msg, padding.PKCS1v15(), self.hash_alg())\r\n    [...]\r\n```\r\n\r\nTested with cryptography versions 2.0.3, 1.9 and 1.8.2.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/292", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/292/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/292/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/292/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/292", "id": 257022975, "node_id": "MDU6SXNzdWUyNTcwMjI5NzU=", "number": 292, "title": "Expose a function for parsing a JWT without any verification", "user": {"login": "butla", "id": 1710591, "node_id": "MDQ6VXNlcjE3MTA1OTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1710591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/butla", "html_url": "https://github.com/butla", "followers_url": "https://api.github.com/users/butla/followers", "following_url": "https://api.github.com/users/butla/following{/other_user}", "gists_url": "https://api.github.com/users/butla/gists{/gist_id}", "starred_url": "https://api.github.com/users/butla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/butla/subscriptions", "organizations_url": "https://api.github.com/users/butla/orgs", "repos_url": "https://api.github.com/users/butla/repos", "events_url": "https://api.github.com/users/butla/events{/privacy}", "received_events_url": "https://api.github.com/users/butla/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-12T12:19:45Z", "updated_at": "2017-11-10T18:27:37Z", "closed_at": "2017-11-10T18:27:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "In my code, I'm implementing decoding a token that's been signed by one of the keys in a JWK Set. I'm going to aproach this according to the second option I described [here](https://github.com/jpadilla/pyjwt/issues/144#issuecomment-328619194). I found that all I need to get the header containing the key is to call this:\r\n```python\r\nimport jwt\r\ntoken = ...\r\npayload, signing_input, header, signature = jwt.PyJWS()._load(token)\r\n```\r\n\r\nBut this uses a non-public API, which is far from ideal.\r\n\r\nI've noticed, that the `_load()` method doesn't actually use `self`, so it could be made into a static method, or a standalone function. What I'm proposing is to cut the implementation out from the class and turn it into a public function. It could be called `parse_token`, or something. It'd also be cool if it returned a named tuple. What do you think?\r\n\r\nAlso, I think the code could generally use more pure functions and composition over inheritance approach. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/291", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/291/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/291/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/291/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/291", "id": 256806010, "node_id": "MDU6SXNzdWUyNTY4MDYwMTA=", "number": 291, "title": "Better documentation on using JWK needed", "user": {"login": "butla", "id": 1710591, "node_id": "MDQ6VXNlcjE3MTA1OTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1710591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/butla", "html_url": "https://github.com/butla", "followers_url": "https://api.github.com/users/butla/followers", "following_url": "https://api.github.com/users/butla/following{/other_user}", "gists_url": "https://api.github.com/users/butla/gists{/gist_id}", "starred_url": "https://api.github.com/users/butla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/butla/subscriptions", "organizations_url": "https://api.github.com/users/butla/orgs", "repos_url": "https://api.github.com/users/butla/repos", "events_url": "https://api.github.com/users/butla/events{/privacy}", "received_events_url": "https://api.github.com/users/butla/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-09-11T18:52:53Z", "updated_at": "2019-12-27T17:51:01Z", "closed_at": "2019-10-24T23:09:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was wondering whether this library (which I've used for JWTs for some time) supports JWKs. When I found issue #144 to be open, I thought I was out of luck. It seemed that another library, [python-jose](https://github.com/mpdavis/python-jose), had that already, at least that's what it said in the first few lines of the README. The problem with that library was, it used PyCrypto (which didn't have a release in a long time) instead of cryptography. I thought I was in a bind.\r\n\r\nA bit desparate, I went back to #144 to check if there was any progress, or ways I could help. It turned out, that there's a working implementation, which I could use (with some added effort) for reading the [Google OAuth public keys](https://www.googleapis.com/oauth2/v3/certs)!\r\n\r\nI think that this short story shows the importance of docs and the README. If I was less persistant, I wouldn't find this functionality. Do you agree that JWK should be advertised in the README and real usage example documented in the docs? I could probably help with that at some point.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/288", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/288/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/288/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/288/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/288", "id": 254394429, "node_id": "MDU6SXNzdWUyNTQzOTQ0Mjk=", "number": 288, "title": "Release v1.5.3", "user": {"login": "mark-adams", "id": 472350, "node_id": "MDQ6VXNlcjQ3MjM1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/472350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-adams", "html_url": "https://github.com/mark-adams", "followers_url": "https://api.github.com/users/mark-adams/followers", "following_url": "https://api.github.com/users/mark-adams/following{/other_user}", "gists_url": "https://api.github.com/users/mark-adams/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-adams/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-adams/subscriptions", "organizations_url": "https://api.github.com/users/mark-adams/orgs", "repos_url": "https://api.github.com/users/mark-adams/repos", "events_url": "https://api.github.com/users/mark-adams/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-adams/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jpadilla", "id": 83319, "node_id": "MDQ6VXNlcjgzMzE5", "avatar_url": "https://avatars0.githubusercontent.com/u/83319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpadilla", "html_url": "https://github.com/jpadilla", "followers_url": "https://api.github.com/users/jpadilla/followers", "following_url": "https://api.github.com/users/jpadilla/following{/other_user}", "gists_url": "https://api.github.com/users/jpadilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpadilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpadilla/subscriptions", "organizations_url": "https://api.github.com/users/jpadilla/orgs", "repos_url": "https://api.github.com/users/jpadilla/repos", "events_url": "https://api.github.com/users/jpadilla/events{/privacy}", "received_events_url": "https://api.github.com/users/jpadilla/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jpadilla", "id": 83319, "node_id": "MDQ6VXNlcjgzMzE5", "avatar_url": "https://avatars0.githubusercontent.com/u/83319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpadilla", "html_url": "https://github.com/jpadilla", "followers_url": "https://api.github.com/users/jpadilla/followers", "following_url": "https://api.github.com/users/jpadilla/following{/other_user}", "gists_url": "https://api.github.com/users/jpadilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpadilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpadilla/subscriptions", "organizations_url": "https://api.github.com/users/jpadilla/orgs", "repos_url": "https://api.github.com/users/jpadilla/repos", "events_url": "https://api.github.com/users/jpadilla/events{/privacy}", "received_events_url": "https://api.github.com/users/jpadilla/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-08-31T16:28:46Z", "updated_at": "2017-09-05T18:23:00Z", "closed_at": "2017-09-05T18:23:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I think we have enough to do a release. \r\n\r\nIn particular, I think some users are waiting on 3def8d80eb3936dbcead07e86b6aee96ba07bfe9 to upgrade `cryptography`.\r\n\r\nThoughts? @jpadilla ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/283", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/283/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/283/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/283/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/283", "id": 245371157, "node_id": "MDU6SXNzdWUyNDUzNzExNTc=", "number": 283, "title": "How can I shorten the length of the token ?", "user": {"login": "omidraha", "id": 397672, "node_id": "MDQ6VXNlcjM5NzY3Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/397672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omidraha", "html_url": "https://github.com/omidraha", "followers_url": "https://api.github.com/users/omidraha/followers", "following_url": "https://api.github.com/users/omidraha/following{/other_user}", "gists_url": "https://api.github.com/users/omidraha/gists{/gist_id}", "starred_url": "https://api.github.com/users/omidraha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omidraha/subscriptions", "organizations_url": "https://api.github.com/users/omidraha/orgs", "repos_url": "https://api.github.com/users/omidraha/repos", "events_url": "https://api.github.com/users/omidraha/events{/privacy}", "received_events_url": "https://api.github.com/users/omidraha/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-25T11:30:34Z", "updated_at": "2017-07-25T13:28:59Z", "closed_at": "2017-07-25T13:28:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI have the same issue as [#73](https://github.com/tymondesigns/jwt-auth/issues/73), my token with HS256 algorithm has length of around 256 bytes.\r\nI want to write this token to one device, and since reading on this device is slow ( 16 seconds for 1024 bytes),\r\nIt takes nearly 5 (4+1) seconds to read every token.\r\nIs there a way for that or not? \r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/282", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/282/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/282/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/282/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/282", "id": 244481308, "node_id": "MDU6SXNzdWUyNDQ0ODEzMDg=", "number": 282, "title": "name clash", "user": {"login": "davidedelvento", "id": 579771, "node_id": "MDQ6VXNlcjU3OTc3MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/579771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidedelvento", "html_url": "https://github.com/davidedelvento", "followers_url": "https://api.github.com/users/davidedelvento/followers", "following_url": "https://api.github.com/users/davidedelvento/following{/other_user}", "gists_url": "https://api.github.com/users/davidedelvento/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidedelvento/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidedelvento/subscriptions", "organizations_url": "https://api.github.com/users/davidedelvento/orgs", "repos_url": "https://api.github.com/users/davidedelvento/repos", "events_url": "https://api.github.com/users/davidedelvento/events{/privacy}", "received_events_url": "https://api.github.com/users/davidedelvento/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-20T20:04:38Z", "updated_at": "2017-09-05T18:28:46Z", "closed_at": "2017-09-05T18:28:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks to [this bug in pip](https://github.com/pypa/pip/issues/4625), installing pyjwt and jwt at the same time causes a whole lot of issues with no warning whatsoever to the poor user. Please see https://github.com/pypa/pip/issues/4625 and https://github.com/GehirnInc/python-jwt/issues/9 for details.\r\n\r\nAnd pretty please consider talk with the author of the other package and agree on a unique namespace.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/279", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/279/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/279/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/279/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/279", "id": 238905065, "node_id": "MDU6SXNzdWUyMzg5MDUwNjU=", "number": 279, "title": "Proposal for alternative to require_xxx options", "user": {"login": "psafont", "id": 5189409, "node_id": "MDQ6VXNlcjUxODk0MDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5189409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psafont", "html_url": "https://github.com/psafont", "followers_url": "https://api.github.com/users/psafont/followers", "following_url": "https://api.github.com/users/psafont/following{/other_user}", "gists_url": "https://api.github.com/users/psafont/gists{/gist_id}", "starred_url": "https://api.github.com/users/psafont/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psafont/subscriptions", "organizations_url": "https://api.github.com/users/psafont/orgs", "repos_url": "https://api.github.com/users/psafont/repos", "events_url": "https://api.github.com/users/psafont/events{/privacy}", "received_events_url": "https://api.github.com/users/psafont/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-06-27T16:12:17Z", "updated_at": "2020-05-14T15:07:46Z", "closed_at": "2020-05-14T15:07:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'd like to have a flexible way to verify some claims that are not dealt with in `api_jwt.py`'s `_validate_claims`.\r\n\r\nI find that having an option like `'require': ['exp', 'iat', 'email']` would suit my needs while not taking away any functionality from the library.\r\nI'd also like to know your opinion on how could I provide backwards-compatibility, I'd be implementing this enhancement, of course.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/278", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/278/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/278/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/278/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/278", "id": 237900015, "node_id": "MDU6SXNzdWUyMzc5MDAwMTU=", "number": 278, "title": "InvalidAlgorithmError with 1.5.1 release", "user": {"login": "gregoirechauvet", "id": 6739268, "node_id": "MDQ6VXNlcjY3MzkyNjg=", "avatar_url": "https://avatars2.githubusercontent.com/u/6739268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gregoirechauvet", "html_url": "https://github.com/gregoirechauvet", "followers_url": "https://api.github.com/users/gregoirechauvet/followers", "following_url": "https://api.github.com/users/gregoirechauvet/following{/other_user}", "gists_url": "https://api.github.com/users/gregoirechauvet/gists{/gist_id}", "starred_url": "https://api.github.com/users/gregoirechauvet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gregoirechauvet/subscriptions", "organizations_url": "https://api.github.com/users/gregoirechauvet/orgs", "repos_url": "https://api.github.com/users/gregoirechauvet/repos", "events_url": "https://api.github.com/users/gregoirechauvet/events{/privacy}", "received_events_url": "https://api.github.com/users/gregoirechauvet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-22T16:19:31Z", "updated_at": "2017-06-22T17:56:13Z", "closed_at": "2017-06-22T17:56:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "When updating PyJWT from 1.5.0 to 1.5.1, my Django project does not work anymore.\r\nUsing django-rest-framework, and django-rest-framework-jwt.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/site-packages/rest_framework_jwt/authentication.py\", line 33, in authenticate\r\n    payload = jwt_decode_handler(jwt_value)\r\n  File \"/usr/local/lib/python3.6/site-packages/rest_framework_jwt/utils.py\", line 113, in jwt_decode_handler\r\n    algorithms=[api_settings.JWT_ALGORITHM]\r\n  File \"/usr/local/lib/python3.6/site-packages/jwt/api_jwt.py\", line 77, in decode\r\n    **kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/jwt/api_jws.py\", line 135, in decode\r\n    key, algorithms)\r\n  File \"/usr/local/lib/python3.6/site-packages/jwt/api_jws.py\", line 199, in _verify_signature\r\n    raise InvalidAlgorithmError('The specified alg value is not allowed')\r\njwt.exceptions.InvalidAlgorithmError: The specified alg value is not allowed\r\n```\r\n\r\nThe code responsible of this issue:  \r\n```python\r\ndef _verify_signature(self, payload, signing_input, header, signature,\r\n                          key='', algorithms=None):\r\n        alg = header.get('alg')\r\n        if algorithms is not None and alg not in algorithms:\r\n            raise InvalidAlgorithmError('The specified alg value is not allowed') ...\r\n        try:\r\n            alg_obj = self._algorithms[alg]\r\n            key = alg_obj.prepare_key(key)\r\n            if not alg_obj.verify(signing_input, key, signature):\r\n```\r\n\r\nAnd local vars are:\r\nalg: `'HS256'`\r\nalgorithms: `{'verify_exp': True, 'verify_signature': True}`\r\nheader: `{'alg': 'HS256', 'typ': 'JWT'}`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/276", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/276/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/276/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/276/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/276", "id": 237702038, "node_id": "MDU6SXNzdWUyMzc3MDIwMzg=", "number": 276, "title": "jwt.encode not found", "user": {"login": "t3h2mas", "id": 598146, "node_id": "MDQ6VXNlcjU5ODE0Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/598146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t3h2mas", "html_url": "https://github.com/t3h2mas", "followers_url": "https://api.github.com/users/t3h2mas/followers", "following_url": "https://api.github.com/users/t3h2mas/following{/other_user}", "gists_url": "https://api.github.com/users/t3h2mas/gists{/gist_id}", "starred_url": "https://api.github.com/users/t3h2mas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t3h2mas/subscriptions", "organizations_url": "https://api.github.com/users/t3h2mas/orgs", "repos_url": "https://api.github.com/users/t3h2mas/repos", "events_url": "https://api.github.com/users/t3h2mas/events{/privacy}", "received_events_url": "https://api.github.com/users/t3h2mas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-22T00:39:56Z", "updated_at": "2017-06-22T00:50:21Z", "closed_at": "2017-06-22T00:50:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "env: \r\nvirtualenv using python 3\r\ninstalled using pip3\r\n\r\n```\r\nimport jwt\r\n\r\njwt.encode(...)\r\n``` \r\nresulted in not found error\r\n\r\nused `dir()` to figure out encode, decode are accessible in jwt.JWT\r\n\r\nis this a bug?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/268", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/268/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/268/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/268/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/268", "id": 231870197, "node_id": "MDU6SXNzdWUyMzE4NzAxOTc=", "number": 268, "title": "Prefer pycryptodome over pycrypto", "user": {"login": "nueverest", "id": 2917370, "node_id": "MDQ6VXNlcjI5MTczNzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/2917370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nueverest", "html_url": "https://github.com/nueverest", "followers_url": "https://api.github.com/users/nueverest/followers", "following_url": "https://api.github.com/users/nueverest/following{/other_user}", "gists_url": "https://api.github.com/users/nueverest/gists{/gist_id}", "starred_url": "https://api.github.com/users/nueverest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nueverest/subscriptions", "organizations_url": "https://api.github.com/users/nueverest/orgs", "repos_url": "https://api.github.com/users/nueverest/repos", "events_url": "https://api.github.com/users/nueverest/events{/privacy}", "received_events_url": "https://api.github.com/users/nueverest/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-28T13:45:34Z", "updated_at": "2017-05-28T14:03:15Z", "closed_at": "2017-05-28T13:47:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "pycrypto is no longer actively maintained.  \r\n\r\npycryptodome has stepped up to take its' place as an up-to-date drop in replacement for pycrypto https://github.com/Legrandin/pycryptodome", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/267", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/267/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/267/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/267/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/267", "id": 231587731, "node_id": "MDU6SXNzdWUyMzE1ODc3MzE=", "number": 267, "title": "Claims section sometimes has incorrect padding", "user": {"login": "dumptyd", "id": 16368429, "node_id": "MDQ6VXNlcjE2MzY4NDI5", "avatar_url": "https://avatars1.githubusercontent.com/u/16368429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dumptyd", "html_url": "https://github.com/dumptyd", "followers_url": "https://api.github.com/users/dumptyd/followers", "following_url": "https://api.github.com/users/dumptyd/following{/other_user}", "gists_url": "https://api.github.com/users/dumptyd/gists{/gist_id}", "starred_url": "https://api.github.com/users/dumptyd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dumptyd/subscriptions", "organizations_url": "https://api.github.com/users/dumptyd/orgs", "repos_url": "https://api.github.com/users/dumptyd/repos", "events_url": "https://api.github.com/users/dumptyd/events{/privacy}", "received_events_url": "https://api.github.com/users/dumptyd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-26T10:30:21Z", "updated_at": "2017-05-26T10:58:32Z", "closed_at": "2017-05-26T10:58:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "So this is the code I'm using to generate the token.\r\n\r\n```py\r\ntoken = jwt.encode({'email': 'abc@efgh.com', 'timestamp': time.time()},\r\n                   private_key.exportKey(), algorithm='RS256')\r\n```\r\n\r\nand then I do this to get the email address back \r\n\r\n```py\r\nclaims = token.split('.')[1]\r\nprint len(claims)\r\nclaims_decoded = base64.b64decode(claims) #   <----\r\n# this is where the incorrect padding error occurs when claims section's\r\n# length isn't a multiple of 4. Only happens like once every 10-20 times\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/265", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/265/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/265/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/265/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/265", "id": 230247161, "node_id": "MDU6SXNzdWUyMzAyNDcxNjE=", "number": 265, "title": "Mind if I add type annotations for this library to typeshed?", "user": {"login": "toolness", "id": 124687, "node_id": "MDQ6VXNlcjEyNDY4Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/124687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toolness", "html_url": "https://github.com/toolness", "followers_url": "https://api.github.com/users/toolness/followers", "following_url": "https://api.github.com/users/toolness/following{/other_user}", "gists_url": "https://api.github.com/users/toolness/gists{/gist_id}", "starred_url": "https://api.github.com/users/toolness/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toolness/subscriptions", "organizations_url": "https://api.github.com/users/toolness/orgs", "repos_url": "https://api.github.com/users/toolness/repos", "events_url": "https://api.github.com/users/toolness/events{/privacy}", "received_events_url": "https://api.github.com/users/toolness/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-21T20:38:32Z", "updated_at": "2017-05-22T14:27:23Z", "closed_at": "2017-05-22T14:27:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\n\r\nI'm interested in adding [mypy](http://www.mypy-lang.org/) type annotations for this library to the repository of third-party typings at https://github.com/python/typeshed/pull/1281.\r\n\r\nDo you mind if I do this?\r\n\r\nI can also contribute the typings to this repository if you like, just let me know!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/263", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/263/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/263/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/263/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/263", "id": 229742052, "node_id": "MDU6SXNzdWUyMjk3NDIwNTI=", "number": 263, "title": "InvalidAlgorithmError is not available as `jwt.InvalidAlgorithmError`", "user": {"login": "ezheidtmann", "id": 1178915, "node_id": "MDQ6VXNlcjExNzg5MTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1178915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezheidtmann", "html_url": "https://github.com/ezheidtmann", "followers_url": "https://api.github.com/users/ezheidtmann/followers", "following_url": "https://api.github.com/users/ezheidtmann/following{/other_user}", "gists_url": "https://api.github.com/users/ezheidtmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezheidtmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezheidtmann/subscriptions", "organizations_url": "https://api.github.com/users/ezheidtmann/orgs", "repos_url": "https://api.github.com/users/ezheidtmann/repos", "events_url": "https://api.github.com/users/ezheidtmann/events{/privacy}", "received_events_url": "https://api.github.com/users/ezheidtmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-18T17:01:57Z", "updated_at": "2017-05-19T03:37:42Z", "closed_at": "2017-05-19T03:37:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Perhaps it should be imported in `__init__.py`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/261", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/261/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/261/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/261/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/261", "id": 228291170, "node_id": "MDU6SXNzdWUyMjgyOTExNzA=", "number": 261, "title": "Token expiration is not checked if token doesn't have an `exp` value.", "user": {"login": "rinatio", "id": 426879, "node_id": "MDQ6VXNlcjQyNjg3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/426879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rinatio", "html_url": "https://github.com/rinatio", "followers_url": "https://api.github.com/users/rinatio/followers", "following_url": "https://api.github.com/users/rinatio/following{/other_user}", "gists_url": "https://api.github.com/users/rinatio/gists{/gist_id}", "starred_url": "https://api.github.com/users/rinatio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rinatio/subscriptions", "organizations_url": "https://api.github.com/users/rinatio/orgs", "repos_url": "https://api.github.com/users/rinatio/repos", "events_url": "https://api.github.com/users/rinatio/events{/privacy}", "received_events_url": "https://api.github.com/users/rinatio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-12T13:25:19Z", "updated_at": "2017-05-18T12:31:52Z", "closed_at": "2017-05-18T12:31:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nIf someone generates a token without expiration date, then expiration will not be checked. Is it by design? See https://github.com/jpadilla/pyjwt/blob/master/jwt/api_jwt.py#L103.\r\n\r\nOriginally found via [django-rest-framework-jwt](https://github.com/GetBlimp/django-rest-framework-jwt/issues/331)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/259", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/259/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/259/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/259/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/259", "id": 226669667, "node_id": "MDU6SXNzdWUyMjY2Njk2Njc=", "number": 259, "title": "Bad name reference of the CLI command and no information in the DOCs about it", "user": {"login": "mrsarm", "id": 1608415, "node_id": "MDQ6VXNlcjE2MDg0MTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1608415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrsarm", "html_url": "https://github.com/mrsarm", "followers_url": "https://api.github.com/users/mrsarm/followers", "following_url": "https://api.github.com/users/mrsarm/following{/other_user}", "gists_url": "https://api.github.com/users/mrsarm/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrsarm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrsarm/subscriptions", "organizations_url": "https://api.github.com/users/mrsarm/orgs", "repos_url": "https://api.github.com/users/mrsarm/repos", "events_url": "https://api.github.com/users/mrsarm/events{/privacy}", "received_events_url": "https://api.github.com/users/mrsarm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 179580404, "node_id": "MDU6TGFiZWwxNzk1ODA0MDQ=", "url": "https://api.github.com/repos/jpadilla/pyjwt/labels/docs", "name": "docs", "color": "444444", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-05T19:29:13Z", "updated_at": "2017-05-19T12:20:55Z", "closed_at": "2017-05-19T12:20:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Release https://github.com/jpadilla/pyjwt/releases/tag/1.5.0 says that the new name of the CLI is `jwt-cli`, but the real name is `pyjwt`.\r\n\r\nAlso, it would be useful if in the README file and in the [documentation](https://pyjwt.readthedocs.io/en/latest/) pages to have a reference about the command and its usage.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/257", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/257/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/257/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/257/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/257", "id": 222878599, "node_id": "MDU6SXNzdWUyMjI4Nzg1OTk=", "number": 257, "title": "\"Could not deserialize key data\"", "user": {"login": "abcondas", "id": 23560072, "node_id": "MDQ6VXNlcjIzNTYwMDcy", "avatar_url": "https://avatars0.githubusercontent.com/u/23560072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abcondas", "html_url": "https://github.com/abcondas", "followers_url": "https://api.github.com/users/abcondas/followers", "following_url": "https://api.github.com/users/abcondas/following{/other_user}", "gists_url": "https://api.github.com/users/abcondas/gists{/gist_id}", "starred_url": "https://api.github.com/users/abcondas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abcondas/subscriptions", "organizations_url": "https://api.github.com/users/abcondas/orgs", "repos_url": "https://api.github.com/users/abcondas/repos", "events_url": "https://api.github.com/users/abcondas/events{/privacy}", "received_events_url": "https://api.github.com/users/abcondas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-19T21:33:35Z", "updated_at": "2018-06-21T08:07:32Z", "closed_at": "2017-04-20T00:55:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.  I'm receiving a \"Could not deserialize key data\" error in the following code.  What am I doing wrong?  I have investigated high/low trying to figure out if this public_key is in PEM format and it appears as if it is but I'm not sure (how can I verify this?).  The decoding (and encoding also) works in the jwt.io debugger.  Also, I traced through the pyjwt code and it's bombing during the verification of the signature.  If I specify \"verify=False\" then the payload is returned just fine.  I'm using the latest version of all packages.  Thanks for the help.\r\n\r\nUPDATE:  I got this to work by adding line separators in the public key as follows:\r\n- Right after the begin public key:  -----BEGIN PUBLIC KEY-----\\n\r\n- And another one right before the end public key:  \\n-----END PUBLIC KEY-----\r\n\r\nI figured this out after I dove into the openssl library a little.  The following command failed with an \"Error: offset too large\" after I simply copied and pasted the entire string into my public.key file:\r\n`openssl asn1parse -inform PEM -i -in public.key`\r\nAfter adding the line separators into the file then it worked.\r\n```\r\nimport jwt\r\n\r\npayload = {\r\n    \"sub\": \"1234567890\",\r\n    \"name\": \"John Doe\",\r\n    \"iss\": \"xena princess warrior\",\r\n    \"aud\": \"very cool aud\"\r\n}\r\n\r\nprivate_key = '-----BEGIN RSA PRIVATE KEY-----MIICWwIBAAKBgQDdlatRjRjogo3WojgGHFHYLugdUWAY9iR3fy4arWNA1KoS8kVw33cJibXr8bvwUAUparCwlvdbH6dvEOfou0/gCFQsHUfQrSDv+MuSUMAe8jzKE4qW+jK+xQU9a03GUnKHkkle+Q0pX/g6jXZ7r1/xAK5Do2kQ+X5xK9cipRgEKwIDAQABAoGAD+onAtVye4ic7VR7V50DF9bOnwRwNXrARcDhq9LWNRrRGElESYYTQ6EbatXS3MCyjjX2eMhu/aF5YhXBwkppwxg+EOmXeh+MzL7Zh284OuPbkglAaGhV9bb6/5CpuGb1esyPbYW+Ty2PC0GSZfIXkXs76jXAu9TOBvD0ybc2YlkCQQDywg2R/7t3Q2OE2+yo382CLJdrlSLVROWKwb4tb2PjhY4XAwV8d1vy0RenxTB+K5Mu57uVSTHtrMK0GAtFr833AkEA6avx20OHo61Yela/4k5kQDtjEf1N0LfI+BcWZtxsS3jDM3i1Hp0KSu5rsCPb8acJo5RO26gGVrfAsDcIXKC+bQJAZZ2XIpsitLyPpuiMOvBbzPavd4gY6Z8KWrfYzJoI/Q9FuBo6rKwl4BFoToD7WIUS+hpkagwWiz+6zLoX1dbOZwJACmH5fSSjAkLRi54PKJ8TFUeOP15h9sQzydI8zJU+upvDEKZsZc/UhT/SySDOxQ4G/523Y0sz/OZtSWcol/UMgQJALesy++GdvoIDLfJX5GBQpuFgFenRiRDabxrE9MNUZ2aPFaFp+DyAe+b4nDwuJaW2LURbr8AEZga7oQj0uYxcYw==-----END RSA PRIVATE KEY-----'\r\npublic_key = '-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDdlatRjRjogo3WojgGHFHYLugdUWAY9iR3fy4arWNA1KoS8kVw33cJibXr8bvwUAUparCwlvdbH6dvEOfou0/gCFQsHUfQrSDv+MuSUMAe8jzKE4qW+jK+xQU9a03GUnKHkkle+Q0pX/g6jXZ7r1/xAK5Do2kQ+X5xK9cipRgEKwIDAQAB-----END PUBLIC KEY-----'\r\ntoken = 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaXNzIjoieGVuYSBwcmluY2VzcyB3YXJyaW9yIiwiYXVkIjoidmVyeSBjb29sIGF1ZCJ9.KHQbQ_FSUKISBVM7WbESA5k2r3D1W02VKnmiWpIvyAST4ysP_1zRH2fd-f1_Sb4uagI9u7PiFQqtPZcLflLjLqH5I1rzjb21FTfdL2nR2v8Ra3r-6AcbjFTgdmjrf9qAZ-Ii689wP1-hjJeg8gCZmg0lkyEcMtECopFaqd5jUxY'\r\n\r\ndecoded_payload = jwt.decode(token, key=public_key, algorithms=['RS256'], audience=\"very cool aud\")\r\n\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/256", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/256/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/256/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/256/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/256", "id": 222728115, "node_id": "MDU6SXNzdWUyMjI3MjgxMTU=", "number": 256, "title": "Readme not rendering in PyPI", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-19T12:52:47Z", "updated_at": "2017-04-19T12:55:18Z", "closed_at": "2017-04-19T12:55:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Looking at https://pypi.org/project/PyJWT, the readme is not rendering from RST:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/308610/25180860/8e907878-24dd-11e7-8d85-314ef8ff8c4e.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/253", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/253/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/253/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/253", "id": 222155136, "node_id": "MDU6SXNzdWUyMjIxNTUxMzY=", "number": 253, "title": "Drop hard coded pytest version requirement", "user": {"login": "nirik", "id": 1779112, "node_id": "MDQ6VXNlcjE3NzkxMTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1779112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nirik", "html_url": "https://github.com/nirik", "followers_url": "https://api.github.com/users/nirik/followers", "following_url": "https://api.github.com/users/nirik/following{/other_user}", "gists_url": "https://api.github.com/users/nirik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nirik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nirik/subscriptions", "organizations_url": "https://api.github.com/users/nirik/orgs", "repos_url": "https://api.github.com/users/nirik/repos", "events_url": "https://api.github.com/users/nirik/events{/privacy}", "received_events_url": "https://api.github.com/users/nirik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-04-17T15:27:28Z", "updated_at": "2017-04-17T16:30:55Z", "closed_at": "2017-04-17T16:30:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "In https://github.com/jpadilla/pyjwt/commit/8f2601050339b0efcba1d7b44f646bc520e8b700 the pytest version requirement was hard coded to be exactly 2.7.3 to avoid a upstream bug that was fixed, but not yet released. \r\n\r\nThat version seems to have long since been released. pytest 3.0.7 seems to run the tests fine here. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/251", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/251/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/251/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/251/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/251", "id": 219453301, "node_id": "MDU6SXNzdWUyMTk0NTMzMDE=", "number": 251, "title": "Refreshing Expired Token Requires Decoding", "user": {"login": "mazz", "id": 808934, "node_id": "MDQ6VXNlcjgwODkzNA==", "avatar_url": "https://avatars3.githubusercontent.com/u/808934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mazz", "html_url": "https://github.com/mazz", "followers_url": "https://api.github.com/users/mazz/followers", "following_url": "https://api.github.com/users/mazz/following{/other_user}", "gists_url": "https://api.github.com/users/mazz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mazz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mazz/subscriptions", "organizations_url": "https://api.github.com/users/mazz/orgs", "repos_url": "https://api.github.com/users/mazz/repos", "events_url": "https://api.github.com/users/mazz/events{/privacy}", "received_events_url": "https://api.github.com/users/mazz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 124376467, "node_id": "MDU6TGFiZWwxMjQzNzY0Njc=", "url": "https://api.github.com/repos/jpadilla/pyjwt/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-04-05T03:05:48Z", "updated_at": "2017-06-17T02:36:54Z", "closed_at": "2017-06-17T02:36:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm trying to add a refresh api by passing it an expired token and extending the `exp` time. My criteria is that the token must be expired. However I've encountered a chicken-and-egg scenario where the token needs to be decoded to check if it needs to be refreshed, but the SignatureExpired exception occurs.\r\n\r\nI've looked at jwt.decode(verify=True) but no difference from above.\r\n\r\nAny ideas? Or is refreshing an existing token a bad idea anyway?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/250", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/250/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/250/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/250/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/250", "id": 217723858, "node_id": "MDU6SXNzdWUyMTc3MjM4NTg=", "number": 250, "title": "PyJWT-1.4.2 doesn't work with cryptography-1.7.2 properly.", "user": {"login": "sumitb", "id": 1455135, "node_id": "MDQ6VXNlcjE0NTUxMzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1455135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sumitb", "html_url": "https://github.com/sumitb", "followers_url": "https://api.github.com/users/sumitb/followers", "following_url": "https://api.github.com/users/sumitb/following{/other_user}", "gists_url": "https://api.github.com/users/sumitb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sumitb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sumitb/subscriptions", "organizations_url": "https://api.github.com/users/sumitb/orgs", "repos_url": "https://api.github.com/users/sumitb/repos", "events_url": "https://api.github.com/users/sumitb/events{/privacy}", "received_events_url": "https://api.github.com/users/sumitb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-28T23:38:41Z", "updated_at": "2017-06-17T02:36:25Z", "closed_at": "2017-06-17T02:36:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "`import jwt`\r\n`jwt.encode(payload, self.signing_key, algorithm=self.jwt_algo)`\r\nI get this error: \r\nFile \".../egg/jwt/api_jwt.py\", line 56, in encode\r\n  File \".../egg/jwt/api_jws.py\", line 98, in encode\r\n  File \".../egg/jwt/algorithms.py\", line 171, in prepare_key\r\nTypeError: Expecting a PEM-formatted key.\r\n\r\nThe issue started occurring as I introduced cryptography-1.7.2 to the system. Earlier it was using the PyCrypto module.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/248", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/248/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/248/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/248/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/248", "id": 216605971, "node_id": "MDU6SXNzdWUyMTY2MDU5NzE=", "number": 248, "title": "Implementation not compatible with others", "user": {"login": "skomak", "id": 6823388, "node_id": "MDQ6VXNlcjY4MjMzODg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6823388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skomak", "html_url": "https://github.com/skomak", "followers_url": "https://api.github.com/users/skomak/followers", "following_url": "https://api.github.com/users/skomak/following{/other_user}", "gists_url": "https://api.github.com/users/skomak/gists{/gist_id}", "starred_url": "https://api.github.com/users/skomak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skomak/subscriptions", "organizations_url": "https://api.github.com/users/skomak/orgs", "repos_url": "https://api.github.com/users/skomak/repos", "events_url": "https://api.github.com/users/skomak/events{/privacy}", "received_events_url": "https://api.github.com/users/skomak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-03-23T23:51:38Z", "updated_at": "2017-04-04T19:19:42Z", "closed_at": "2017-04-04T19:19:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nPlease correct me if I am wrong but I think that using python dicts {} is not a good idea because they have no order so if I try to set up headers:\r\n\r\n```\r\n>>> a = {\"typ\":\"JWT\",\"alg\":\"HS256\"}\r\n>>> a\r\n{'alg': 'HS256', 'typ': 'JWT'}\r\n```\r\n\r\nThe keys are being sorted. In this case of course base64 will be different and HMAC also so in current situation it is incompatible with other implementations of JWT, for example with Firebase in PHP where dicts are not changing the order.\r\n\r\nFor example in your implementation:\r\n\r\n```\r\n>>> jwt.encode({\"user\":\"admin\", \"iat\":1490284641, \"exp\":1490284671}, \"1234567890\", headers={\"typ\":\"JWT\",\"alg\":\"HS256\"})\r\n'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE0OTAyODQ2NDEsInVzZXIiOiJhZG1pbiIsImV4cCI6MTQ5MDI4NDY3MX0.DW6tX95u1bnCmE4KI57Sd3YoDy-9h0jRfD6Iq710mkA'\r\n```\r\n\r\nand decoded values are with changed order so the HMAC also:\r\n\r\n```\r\n{\"alg\":\"HS256\",\"typ\":\"JWT\"}\r\n{\"iat\":1490284641,\"user\":\"admin\",\"exp\":1490284671}\r\n```\r\n\r\nIn PHP:\r\n\r\n```\r\nphp -r 'require __DIR__ . \"/vendor/autoload.php\"; use \\Firebase\\JWT\\JWT; $key=\"1234567890\"; $token=array(\"user\" => \"admin\", \"iat\" => 1490284641, \"exp\" => 1490284671); $jwt = JWT::encode($token, $key); print_r($jwt);'\r\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiYWRtaW4iLCJpYXQiOjE0OTAyODQ2NDEsImV4cCI6MTQ5MDI4NDY3MX0.-4t8mic0KewXh0e7kJ5QWqyxzQnIZ8u0YjNa1UppNtQ\r\n```\r\n\r\nThe order remains the same:\r\n\r\n```\r\n{\"typ\":\"JWT\",\"alg\":\"HS256\"}\r\n{\"user\":\"admin\",\"iat\":1490284641,\"exp\":1490284671}\r\n```\r\n\r\nCheers,\r\nDawdi", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/247", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/247/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/247/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/247/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/247", "id": 215779037, "node_id": "MDU6SXNzdWUyMTU3NzkwMzc=", "number": 247, "title": "RS256 Public Key issue", "user": {"login": "dbinetti", "id": 161722, "node_id": "MDQ6VXNlcjE2MTcyMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/161722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbinetti", "html_url": "https://github.com/dbinetti", "followers_url": "https://api.github.com/users/dbinetti/followers", "following_url": "https://api.github.com/users/dbinetti/following{/other_user}", "gists_url": "https://api.github.com/users/dbinetti/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbinetti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbinetti/subscriptions", "organizations_url": "https://api.github.com/users/dbinetti/orgs", "repos_url": "https://api.github.com/users/dbinetti/repos", "events_url": "https://api.github.com/users/dbinetti/events{/privacy}", "received_events_url": "https://api.github.com/users/dbinetti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-21T15:27:50Z", "updated_at": "2017-06-17T02:38:51Z", "closed_at": "2017-06-17T02:38:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When I follow the docs [here](https://github.com/jpadilla/pyjwt/blob/master/docs/faq.rst#how-can-i-extract-a-public--private-key-from-a-x509-certificate) I get the following error: `TypeError: initializer for ctype 'char[]' must be a bytes or list or tuple, not str`.  \r\n\r\nMy ultimate goal is to figure out how to populate the JWT_PUBLIC_KEY in djangorestframework-jwt so that I can use RS256 encryption.  But I'm getting stuck because I'm wholly unfamiliar with cryptography.  I believe I'm doing everything properly, but how do I debug  this?  Is it a bug on PyJWT?  Or is the certificate malformed (this is from Auth0, my identity provider?) Certificate attached, thanks.\r\n\r\n```\r\n-----BEGIN CERTIFICATE-----\r\nMIIC+jCCAeKgAwIBAgIJbuZM6FlzJ6TDMA0GCSqGSIb3DQEBBQUAMCQxIjAgBgNV\r\nBAMTGWJhcmJlcnNjb3JlLWRldi5hdXRoMC5jb20wHhcNMTYxMDI2MjAzNDE0WhcN\r\nMzAwNzA1MjAzNDE0WjAkMSIwIAYDVQQDExliYXJiZXJzY29yZS1kZXYuYXV0aDAu\r\nY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArktLSct+7BT6SDLJ\r\nk6P7esPEk2rWTd6+S97gB8oZ9I4WTiGx7jsPgoYn9pUltnHF2r0N1WuOM8UCUMfk\r\nb/lwHcpBGsNx2cxsvr0oVsgKEynJNn0ynRCR2EH7b/iYrtOtMyE1CXtMMgT9vMhS\r\ne/mE8VxsTvgev1nQmR8lq/jXZvLY068/BbicWsrJ11/7toSiJEMH3yEwzlK7ZRDj\r\nOorp0sp3//ZCZeP4ep9SwK/dNthUgAe1yfQokKQCnW5aMYYZgMG4RDIKND28PGMe\r\n7QmesTbSzoXTPDZBMLJC0o/CSZlQrPzg5SmfyGO0sl+ZnWt9PBeCYjLgtBbKDOH9\r\no8gNTQIDAQABoy8wLTAMBgNVHRMEBTADAQH/MB0GA1UdDgQWBBS9m0sa23+rX1a1\r\n3/2+h9f2UTlrzDANBgkqhkiG9w0BAQUFAAOCAQEALsbWOoKVb4hEFl7akai9bqRK\r\nDMxXf6ZBu7tQMFVDE3xr5Rzc11aeyUCWA9oIrv07JNHQI1OPrXHSKdd+UDAiO2N1\r\npTIfrOjySNxBoTkr0IJWp+SQjiNr+vvbJGSgThvebHmxNVIQ+WQosVmWHobuZ+tF\r\nLXyoMAxse01/vNGW3LqsMWG32icIQ4Xra2wKmXag/oQGlu4NASRuEhtP8Lp47v1D\r\nm+rablf5MmFd3dtErVU9a3cqeGUEIjYhTK18slv55LOEdMPklRgkDUlvCIxd3RA1\r\nyZw/f9vAojVPQmXNY95Kzg14aqhiRGSeNhG6BRMnDvzm3/rx4UezNmLxT6F1cg==\r\n-----END CERTIFICATE-----\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/243", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/243/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/243/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/243/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/243", "id": 214055995, "node_id": "MDU6SXNzdWUyMTQwNTU5OTU=", "number": 243, "title": "RFC 4253 (OpenSSH) ECDSA public keys are not supported", "user": {"login": "mark-adams", "id": 472350, "node_id": "MDQ6VXNlcjQ3MjM1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/472350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-adams", "html_url": "https://github.com/mark-adams", "followers_url": "https://api.github.com/users/mark-adams/followers", "following_url": "https://api.github.com/users/mark-adams/following{/other_user}", "gists_url": "https://api.github.com/users/mark-adams/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-adams/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-adams/subscriptions", "organizations_url": "https://api.github.com/users/mark-adams/orgs", "repos_url": "https://api.github.com/users/mark-adams/repos", "events_url": "https://api.github.com/users/mark-adams/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-adams/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-14T12:25:58Z", "updated_at": "2017-03-15T16:19:35Z", "closed_at": "2017-03-15T16:19:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Previously, `cryptography` did not support ECDSA OpenSSH-style public keys. Now they do so we should implement support for it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/242", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/242/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/242/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/242/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/242", "id": 214051253, "node_id": "MDU6SXNzdWUyMTQwNTEyNTM=", "number": 242, "title": "RFC4716 format not supported for ECDSA keys", "user": {"login": "ecksun", "id": 135807, "node_id": "MDQ6VXNlcjEzNTgwNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/135807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecksun", "html_url": "https://github.com/ecksun", "followers_url": "https://api.github.com/users/ecksun/followers", "following_url": "https://api.github.com/users/ecksun/following{/other_user}", "gists_url": "https://api.github.com/users/ecksun/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecksun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecksun/subscriptions", "organizations_url": "https://api.github.com/users/ecksun/orgs", "repos_url": "https://api.github.com/users/ecksun/repos", "events_url": "https://api.github.com/users/ecksun/events{/privacy}", "received_events_url": "https://api.github.com/users/ecksun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-14T12:04:35Z", "updated_at": "2017-03-15T21:00:32Z", "closed_at": "2017-03-14T13:27:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Setup\r\n\r\n## Generating keys\r\n\r\n```bash\r\nssh-keygen -f ecdsa_key -N '' -t ecdsa\r\nrm ecdsa_key.pub\r\nssh-keygen -f ecdsa_key -y > ecdsa_key.pub\r\n```\r\n\r\n## Dependencies\r\n\r\n```\r\n$ pip freeze\r\nappdirs==1.4.3\r\ncffi==1.9.1\r\ncryptography==1.7.2\r\nenum34==1.1.6\r\nidna==2.5\r\nipaddress==1.0.18\r\npackaging==16.8\r\npkg-resources==0.0.0\r\npyasn1==0.2.3\r\npycparser==2.17\r\nPyJWT==1.4.2\r\nsix==1.10.0\r\n```\r\n\r\n## test.py\r\n\r\n```python\r\n#!/usr/bin/env python\r\n\r\nimport jwt\r\n\r\nprivate_key = open('ecdsa_key', 'r').read()\r\npublic_key = open('ecdsa_key.pub', 'r').read()\r\n\r\ntoken = jwt.encode({ 'foo': 'bar' }, private_key, algorithm='ES256')\r\n\r\nprint(jwt.decode(token, public_key, algorithms=['ES256']))\r\n```\r\n\r\n## Example keys\r\n\r\n```\r\n$ cat ecdsa_key\r\n-----BEGIN EC PRIVATE KEY-----\r\nMHcCAQEEIIvjWuN04x2pouAtZ+LC1E6kVmhfWmTwN525pZLDvJltoAoGCCqGSM49\r\nAwEHoUQDQgAEjL3dYiq9D/18V8qbmbcZMmHyk4D4l4HfECI6/EZ5m5YsbMLWb9QD\r\nEa3RSrjHEZxeUliHLFCogmK3BKUrimKxFw==\r\n-----END EC PRIVATE KEY-----\r\n$ cat ecdsa_key.pub\r\necdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBIy93WIqvQ/9fFfKm5m3GTJh8pOA+JeB3xAiOvxGeZuWLGzC1m/UAxGt0Uq4xxGcXlJYhyxQqIJitwSlK4pisRc=\r\n```\r\n\r\n# Outcome\r\n\r\n```\r\n$ python test.py\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 10, in <module>\r\n    print(jwt.decode(token, public_key, algorithms=['ES256']))\r\n  File \"~/jwt/venv/local/lib/python2.7/site-packages/jwt/api_jwt.py\", line 64, in decode\r\n    options, **kwargs)\r\n  File \"~/jwt/venv/local/lib/python2.7/site-packages/jwt/api_jws.py\", line 116, in decode\r\n    key, algorithms)\r\n  File \"~/jwt/venv/local/lib/python2.7/site-packages/jwt/api_jws.py\", line 183, in _verify_signature\r\n    key = alg_obj.prepare_key(key)\r\n  File \"~/jwt/venv/local/lib/python2.7/site-packages/jwt/algorithms.py\", line 226, in prepare_key\r\n    key = load_pem_private_key(key, password=None, backend=default_backend())\r\n  File \"~/jwt/venv/local/lib/python2.7/site-packages/cryptography/hazmat/primitives/serialization.py\", line 20, in load_pem_private_key\r\n    return backend.load_pem_private_key(data, password)\r\n  File \"~/jwt/venv/local/lib/python2.7/site-packages/cryptography/hazmat/backends/multibackend.py\", line 305, in load_pem_private_key\r\n    return b.load_pem_private_key(data, password)\r\n  File \"~/jwt/venv/local/lib/python2.7/site-packages/cryptography/hazmat/backends/openssl/backend.py\", line 1084, in load_pem_private_key\r\n    password,\r\n  File \"~/jwt/venv/local/lib/python2.7/site-packages/cryptography/hazmat/backends/openssl/backend.py\", line 1253, in _load_key\r\n    self._handle_key_loading_error()\r\n  File \"~/jwt/venv/local/lib/python2.7/site-packages/cryptography/hazmat/backends/openssl/backend.py\", line 1325, in _handle_key_loading_error\r\n    raise ValueError(\"Could not unserialize key data.\")\r\nValueError: Could not unserialize key data.\r\n```\r\n\r\n# Workaround\r\n\r\nHowever, if I change the public key format to PEM PKCS8 public key everything works fine:\r\n\r\n```bash\r\n$ ssh-keygen -f ecdsa_key -e -m PKCS8 > ecdsa_key.pub\r\n$ python test.py\r\n{u'foo': u'bar'}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/241", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/241/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/241/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/241/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/241", "id": 212919273, "node_id": "MDU6SXNzdWUyMTI5MTkyNzM=", "number": 241, "title": "Release new version", "user": {"login": "jpadilla", "id": 83319, "node_id": "MDQ6VXNlcjgzMzE5", "avatar_url": "https://avatars0.githubusercontent.com/u/83319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpadilla", "html_url": "https://github.com/jpadilla", "followers_url": "https://api.github.com/users/jpadilla/followers", "following_url": "https://api.github.com/users/jpadilla/following{/other_user}", "gists_url": "https://api.github.com/users/jpadilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpadilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpadilla/subscriptions", "organizations_url": "https://api.github.com/users/jpadilla/orgs", "repos_url": "https://api.github.com/users/jpadilla/repos", "events_url": "https://api.github.com/users/jpadilla/events{/privacy}", "received_events_url": "https://api.github.com/users/jpadilla/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jpadilla", "id": 83319, "node_id": "MDQ6VXNlcjgzMzE5", "avatar_url": "https://avatars0.githubusercontent.com/u/83319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpadilla", "html_url": "https://github.com/jpadilla", "followers_url": "https://api.github.com/users/jpadilla/followers", "following_url": "https://api.github.com/users/jpadilla/following{/other_user}", "gists_url": "https://api.github.com/users/jpadilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpadilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpadilla/subscriptions", "organizations_url": "https://api.github.com/users/jpadilla/orgs", "repos_url": "https://api.github.com/users/jpadilla/repos", "events_url": "https://api.github.com/users/jpadilla/events{/privacy}", "received_events_url": "https://api.github.com/users/jpadilla/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jpadilla", "id": 83319, "node_id": "MDQ6VXNlcjgzMzE5", "avatar_url": "https://avatars0.githubusercontent.com/u/83319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpadilla", "html_url": "https://github.com/jpadilla", "followers_url": "https://api.github.com/users/jpadilla/followers", "following_url": "https://api.github.com/users/jpadilla/following{/other_user}", "gists_url": "https://api.github.com/users/jpadilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpadilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpadilla/subscriptions", "organizations_url": "https://api.github.com/users/jpadilla/orgs", "repos_url": "https://api.github.com/users/jpadilla/repos", "events_url": "https://api.github.com/users/jpadilla/events{/privacy}", "received_events_url": "https://api.github.com/users/jpadilla/received_events", "type": "User", "site_admin": false}, {"login": "mark-adams", "id": 472350, "node_id": "MDQ6VXNlcjQ3MjM1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/472350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-adams", "html_url": "https://github.com/mark-adams", "followers_url": "https://api.github.com/users/mark-adams/followers", "following_url": "https://api.github.com/users/mark-adams/following{/other_user}", "gists_url": "https://api.github.com/users/mark-adams/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-adams/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-adams/subscriptions", "organizations_url": "https://api.github.com/users/mark-adams/orgs", "repos_url": "https://api.github.com/users/mark-adams/repos", "events_url": "https://api.github.com/users/mark-adams/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-adams/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/jpadilla/pyjwt/milestones/5", "html_url": "https://github.com/jpadilla/pyjwt/milestone/5", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/milestones/5/labels", "id": 2373462, "node_id": "MDk6TWlsZXN0b25lMjM3MzQ2Mg==", "number": 5, "title": "v1.5.0", "description": "", "creator": {"login": "jpadilla", "id": 83319, "node_id": "MDQ6VXNlcjgzMzE5", "avatar_url": "https://avatars0.githubusercontent.com/u/83319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpadilla", "html_url": "https://github.com/jpadilla", "followers_url": "https://api.github.com/users/jpadilla/followers", "following_url": "https://api.github.com/users/jpadilla/following{/other_user}", "gists_url": "https://api.github.com/users/jpadilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpadilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpadilla/subscriptions", "organizations_url": "https://api.github.com/users/jpadilla/orgs", "repos_url": "https://api.github.com/users/jpadilla/repos", "events_url": "https://api.github.com/users/jpadilla/events{/privacy}", "received_events_url": "https://api.github.com/users/jpadilla/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 13, "state": "closed", "created_at": "2017-03-09T02:33:38Z", "updated_at": "2018-02-27T16:27:44Z", "due_on": "2017-03-09T08:00:00Z", "closed_at": "2018-02-27T16:27:44Z"}, "comments": 4, "created_at": "2017-03-09T02:40:58Z", "updated_at": "2017-04-19T14:41:12Z", "closed_at": "2017-04-19T14:25:06Z", "author_association": "OWNER", "active_lock_reason": null, "body": "We're a bit overdue with releasing a new version. I've created a [new milestone](https://github.com/jpadilla/pyjwt/milestone/5?closed=1) to keep track of the things that are going into this version. This will also help me update the changelog.\r\n\r\n@mark-adams whenever you got a chance, could you take a look at it and see if there's anything else missing? Also are we ok bumping a patch version? Now that I think of it it might be a minor.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/240", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/240/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/240/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/240/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/240", "id": 212628879, "node_id": "MDU6SXNzdWUyMTI2Mjg4Nzk=", "number": 240, "title": "Getting NotImplementedError: Algorithm not supported for EC256 with cryptography installed", "user": {"login": "slmnewton", "id": 11825653, "node_id": "MDQ6VXNlcjExODI1NjUz", "avatar_url": "https://avatars0.githubusercontent.com/u/11825653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slmnewton", "html_url": "https://github.com/slmnewton", "followers_url": "https://api.github.com/users/slmnewton/followers", "following_url": "https://api.github.com/users/slmnewton/following{/other_user}", "gists_url": "https://api.github.com/users/slmnewton/gists{/gist_id}", "starred_url": "https://api.github.com/users/slmnewton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slmnewton/subscriptions", "organizations_url": "https://api.github.com/users/slmnewton/orgs", "repos_url": "https://api.github.com/users/slmnewton/repos", "events_url": "https://api.github.com/users/slmnewton/events{/privacy}", "received_events_url": "https://api.github.com/users/slmnewton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-08T03:36:09Z", "updated_at": "2017-06-17T02:39:08Z", "closed_at": "2017-06-17T02:39:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've installed both pyjwt and cryptography using pip install, yet I'm still getting NotImplementedError when I try calling jwt.encode() passing 'EC256' as the algorithm. Any idea why this could be the case? After reading similar issues i'm certain it should be working the way I have it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/236", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/236/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/236/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/236/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/236", "id": 207054870, "node_id": "MDU6SXNzdWUyMDcwNTQ4NzA=", "number": 236, "title": "The specified alg value is not allowed RS256", "user": {"login": "ccverak", "id": 1001834, "node_id": "MDQ6VXNlcjEwMDE4MzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1001834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ccverak", "html_url": "https://github.com/ccverak", "followers_url": "https://api.github.com/users/ccverak/followers", "following_url": "https://api.github.com/users/ccverak/following{/other_user}", "gists_url": "https://api.github.com/users/ccverak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ccverak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ccverak/subscriptions", "organizations_url": "https://api.github.com/users/ccverak/orgs", "repos_url": "https://api.github.com/users/ccverak/repos", "events_url": "https://api.github.com/users/ccverak/events{/privacy}", "received_events_url": "https://api.github.com/users/ccverak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 124376467, "node_id": "MDU6TGFiZWwxMjQzNzY0Njc=", "url": "https://api.github.com/repos/jpadilla/pyjwt/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-02-12T14:54:16Z", "updated_at": "2017-08-25T17:38:34Z", "closed_at": "2017-08-25T17:38:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there In getting 'The specified alg value is not allowed' when trying to decrypt an auth0 token.\r\nHere are the details:\r\n\r\n```\r\ndecoded = jwt.decode(token, public_key,  algorithms=['RS256'])\r\n```\r\nInstalled packages\r\n\r\nPyJWT==1.4.2\r\ncryptography==1.7.2\r\npycrypto==2.6.1\r\necdsa==0.13\r\n\r\nPython 2.7.12\r\n\r\nCan you please tell what am I doing wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/234", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/234/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/234/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/234", "id": 194962684, "node_id": "MDU6SXNzdWUxOTQ5NjI2ODQ=", "number": 234, "title": "Could not unserialize key data (use .p8 file as private key file, use ES256 algorithm", "user": {"login": "chenhongws", "id": 10826912, "node_id": "MDQ6VXNlcjEwODI2OTEy", "avatar_url": "https://avatars0.githubusercontent.com/u/10826912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenhongws", "html_url": "https://github.com/chenhongws", "followers_url": "https://api.github.com/users/chenhongws/followers", "following_url": "https://api.github.com/users/chenhongws/following{/other_user}", "gists_url": "https://api.github.com/users/chenhongws/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenhongws/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenhongws/subscriptions", "organizations_url": "https://api.github.com/users/chenhongws/orgs", "repos_url": "https://api.github.com/users/chenhongws/repos", "events_url": "https://api.github.com/users/chenhongws/events{/privacy}", "received_events_url": "https://api.github.com/users/chenhongws/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 124376467, "node_id": "MDU6TGFiZWwxMjQzNzY0Njc=", "url": "https://api.github.com/repos/jpadilla/pyjwt/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2016-12-12T12:29:11Z", "updated_at": "2018-05-28T10:06:24Z", "closed_at": "2017-06-17T02:39:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Such was the code:**\r\nAPNS_AUTH_KEY = './APNsAuthKey_SP7C6832EZ.p8'\r\nf = open(APNS_AUTH_KEY)\r\nsecret = f.read()\r\ntoken = jwt.encode(\r\npayload={\r\n\"iss\": \"8X2A38Q9VD\",\r\n\"iat\": time.time()\r\n},\r\nkey= secret,\r\nalgorithm= 'ES256',\r\nheaders={\r\n\"alg\": \"ES256\",\r\n\"kid\": \"SP7C6832EZ\",\r\n}\r\n)\r\n\r\n**But it run with error\uff1a**\r\nTraceback (most recent call last):\r\nFile \"Http2AuthToken.py\", line 31, in \r\n\"kid\": \"SP7C6832EZ\",\r\nFile \"/usr/lib/python2.7/site-packages/jwt/api_jwt.py\", line 56, in encode\r\njson_payload, key, algorithm, headers, json_encoder\r\nFile \"/usr/lib/python2.7/site-packages/jwt/api_jws.py\", line 98, in encode\r\nkey = alg_obj.prepare_key(key)\r\nFile \"/usr/lib/python2.7/site-packages/jwt/algorithms.py\", line 226, in prepare_key\r\nkey = load_pem_private_key(key, password=None, backend=default_backend())\r\nFile \"/usr/lib64/python2.7/site-packages/cryptography/hazmat/primitives/serialization.py\", line 20, in load_pem_private_key\r\nreturn backend.load_pem_private_key(data, password)\r\nFile \"/usr/lib64/python2.7/site-packages/cryptography/hazmat/backends/multibackend.py\", line 303, in load_pem_private_key\r\nreturn b.load_pem_private_key(data, password)\r\nFile \"/usr/lib64/python2.7/site-packages/cryptography/hazmat/backends/openssl/backend.py\", line 1048, in load_pem_private_key\r\npassword,\r\nFile \"/usr/lib64/python2.7/site-packages/cryptography/hazmat/backends/openssl/backend.py\", line 1217, in _load_key\r\nself._handle_key_loading_error()\r\nFile \"/usr/lib64/python2.7/site-packages/cryptography/hazmat/backends/openssl/backend.py\", line 1289, in _handle_key_loading_error\r\nraise ValueError(\"Could not unserialize key data.\")\r\nValueError: Could not unserialize key data.\r\n\r\n**Is there somebody can explain?**", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/233", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/233/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/233/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/233/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/233", "id": 194201029, "node_id": "MDU6SXNzdWUxOTQyMDEwMjk=", "number": 233, "title": "Encrypt tokens", "user": {"login": "daredevil82", "id": 1406974, "node_id": "MDQ6VXNlcjE0MDY5NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1406974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daredevil82", "html_url": "https://github.com/daredevil82", "followers_url": "https://api.github.com/users/daredevil82/followers", "following_url": "https://api.github.com/users/daredevil82/following{/other_user}", "gists_url": "https://api.github.com/users/daredevil82/gists{/gist_id}", "starred_url": "https://api.github.com/users/daredevil82/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daredevil82/subscriptions", "organizations_url": "https://api.github.com/users/daredevil82/orgs", "repos_url": "https://api.github.com/users/daredevil82/repos", "events_url": "https://api.github.com/users/daredevil82/events{/privacy}", "received_events_url": "https://api.github.com/users/daredevil82/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-07T23:13:40Z", "updated_at": "2017-03-05T04:17:37Z", "closed_at": "2017-03-05T04:17:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Reading the documentation, one can be excused if the impression is given that the contents of a JWT are encrypted during the encoding process.  However, they are not, and if a developer includes sensitive information in the payload of a token, it is _very_ easy to retrieve the data.\r\n\r\n\timport jwt, base64\r\n\r\n\ttoken = jwt.encode({'some':'payload'}, 'secret', algorithm='HS512')\r\n\talgo, text, signature = token.split(b'.')\r\n\tdecoded_text = base64.decodebytes(text)\r\n\tprint(decoded_text)\r\n\t> b'{\"some\":\"payload\"}\r\n\r\nIn fact, you don't even need to split the token up to get the information!\r\n\r\n    In [10]: base64.decodebytes(token)\r\n    Out[10]: b'{\"typ\":\"JWT\",\"alg\":\"HS512\"}{\"some\":\"payload\"}\\x12\\x03\\'\\xcd\\xc2X\\xacIN7OA\\xc0\\xec\\x1a\\xa9\\x16{\\n\\xad\\xf4\\x9f\\xb7 M\\x91\\x89\\xaa\\xd2\\xb5`w\\xc6\\xd5\\xc1\\xa7\\x18\\x9a\\t\\x1b\\x03\\x8b\\x8f\\xa0\\x16\\x83\\xdbZ;\"M\\xdc9\\xeaw\\xd3Wy0\\xa3L,\\x00'\r\n\r\nThis is a very significant issue, since the encoding process gives a false sense of security.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jpadilla/pyjwt/issues/232", "repository_url": "https://api.github.com/repos/jpadilla/pyjwt", "labels_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/232/labels{/name}", "comments_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/232/comments", "events_url": "https://api.github.com/repos/jpadilla/pyjwt/issues/232/events", "html_url": "https://github.com/jpadilla/pyjwt/issues/232", "id": 192336787, "node_id": "MDU6SXNzdWUxOTIzMzY3ODc=", "number": 232, "title": "No way to decode headers", "user": {"login": "dgn", "id": 3501074, "node_id": "MDQ6VXNlcjM1MDEwNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3501074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgn", "html_url": "https://github.com/dgn", "followers_url": "https://api.github.com/users/dgn/followers", "following_url": "https://api.github.com/users/dgn/following{/other_user}", "gists_url": "https://api.github.com/users/dgn/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgn/subscriptions", "organizations_url": "https://api.github.com/users/dgn/orgs", "repos_url": "https://api.github.com/users/dgn/repos", "events_url": "https://api.github.com/users/dgn/events{/privacy}", "received_events_url": "https://api.github.com/users/dgn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 124376467, "node_id": "MDU6TGFiZWwxMjQzNzY0Njc=", "url": "https://api.github.com/repos/jpadilla/pyjwt/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-11-29T16:50:58Z", "updated_at": "2018-05-18T17:23:24Z", "closed_at": "2016-11-30T09:57:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "There seems to be no (public) method to decode a token's headers - we need this for our use-case. I'm now relying on using the private ``_load`` method of the PyJWT class, which is suboptimal at best.\r\n\r\nWould you mind me opening a PR with a new public method that just encapsulates that call to ``_load``, returning only the headers? Something like ``jwt.decode_headers(token)``?", "performed_via_github_app": null, "score": 1.0}]}