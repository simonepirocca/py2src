{"total_count": 168, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/nameko/nameko/issues/688", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/688/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/688/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/688/events", "html_url": "https://github.com/nameko/nameko/issues/688", "id": 662191055, "node_id": "MDU6SXNzdWU2NjIxOTEwNTU=", "number": 688, "title": "Nameko incompatible with dnspython 2.0.0", "user": {"login": "mattbennett", "id": 107611, "node_id": "MDQ6VXNlcjEwNzYxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/107611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattbennett", "html_url": "https://github.com/mattbennett", "followers_url": "https://api.github.com/users/mattbennett/followers", "following_url": "https://api.github.com/users/mattbennett/following{/other_user}", "gists_url": "https://api.github.com/users/mattbennett/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattbennett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattbennett/subscriptions", "organizations_url": "https://api.github.com/users/mattbennett/orgs", "repos_url": "https://api.github.com/users/mattbennett/repos", "events_url": "https://api.github.com/users/mattbennett/events{/privacy}", "received_events_url": "https://api.github.com/users/mattbennett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-20T19:42:04Z", "updated_at": "2020-08-13T12:59:35Z", "closed_at": "2020-08-13T12:59:35Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Raising a quick issue here to note https://github.com/eventlet/eventlet/issues/629\r\n\r\nThe currently released version of Eventlet is incompatible with the latest release of dnspython. Nameko depends on Eventlet which depends on dnspython.\r\n\r\nDNS resolution fails, e.g.\r\n\r\n```\r\n>>> import eventlet\r\n>>> eventlet.monkey_patch()\r\n>>> import socket\r\n>>> socket.getaddrinfo(\"rabbitmq\", 5672)\r\nTraceback (most recent call last):\r\n  File \"/appenv/lib/python3.7/site-packages/eventlet/support/greendns.py\", line 425, in resolve\r\n    use_network=use_network)\r\n  File \"/appenv/lib/python3.7/site-packages/eventlet/support/greendns.py\", line 380, in query\r\n    return end()\r\n  File \"/appenv/lib/python3.7/site-packages/eventlet/support/greendns.py\", line 359, in end\r\n    raise result[1]\r\n  File \"/appenv/lib/python3.7/site-packages/eventlet/support/greendns.py\", line 340, in step\r\n    a = fun(*args, **kwargs)\r\n  File \"/appenv/lib/python3.7/site-packages/dns/resolver.py\", line 1091, in query\r\n    True)\r\n  File \"/appenv/lib/python3.7/site-packages/dns/resolver.py\", line 1043, in resolve\r\n    timeout = self._compute_timeout(start, lifetime)\r\n  File \"/appenv/lib/python3.7/site-packages/dns/resolver.py\", line 950, in _compute_timeout\r\n    raise Timeout(timeout=duration)\r\ndns.exception.Timeout: The DNS operation timed out after 5.118549108505249 seconds\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/appenv/lib/python3.7/site-packages/eventlet/support/greendns.py\", line 517, in getaddrinfo\r\n    qname, addrs = _getaddrinfo_lookup(host, family, flags)\r\n  File \"/appenv/lib/python3.7/site-packages/eventlet/support/greendns.py\", line 490, in _getaddrinfo_lookup\r\n    raise err\r\n  File \"/appenv/lib/python3.7/site-packages/eventlet/support/greendns.py\", line 479, in _getaddrinfo_lookup\r\n    answer = resolve(host, qfamily, False, use_network=use_network)\r\n  File \"/appenv/lib/python3.7/site-packages/eventlet/support/greendns.py\", line 432, in resolve\r\n    raise EAI_EAGAIN_ERROR\r\n  File \"/appenv/lib/python3.7/site-packages/eventlet/support/greendns.py\", line 479, in _getaddrinfo_lookup\r\n    answer = resolve(host, qfamily, False, use_network=use_network)\r\n  File \"/appenv/lib/python3.7/site-packages/eventlet/support/greendns.py\", line 432, in resolve\r\n    raise EAI_EAGAIN_ERROR\r\nsocket.gaierror: [Errno -3] Lookup timed out\r\n```\r\n\r\nA workaround is to pin `dnspython<2` in requirements files until a fix is released.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/679", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/679/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/679/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/679/events", "html_url": "https://github.com/nameko/nameko/issues/679", "id": 598763256, "node_id": "MDU6SXNzdWU1OTg3NjMyNTY=", "number": 679, "title": "Is it dead?", "user": {"login": "vashchukmaksim", "id": 26834615, "node_id": "MDQ6VXNlcjI2ODM0NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/26834615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vashchukmaksim", "html_url": "https://github.com/vashchukmaksim", "followers_url": "https://api.github.com/users/vashchukmaksim/followers", "following_url": "https://api.github.com/users/vashchukmaksim/following{/other_user}", "gists_url": "https://api.github.com/users/vashchukmaksim/gists{/gist_id}", "starred_url": "https://api.github.com/users/vashchukmaksim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vashchukmaksim/subscriptions", "organizations_url": "https://api.github.com/users/vashchukmaksim/orgs", "repos_url": "https://api.github.com/users/vashchukmaksim/repos", "events_url": "https://api.github.com/users/vashchukmaksim/events{/privacy}", "received_events_url": "https://api.github.com/users/vashchukmaksim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-13T08:51:42Z", "updated_at": "2020-04-13T10:13:18Z", "closed_at": "2020-04-13T10:13:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is this project still maintaining and has a future plans or it is better to use other alternatives from now?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/677", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/677/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/677/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/677/events", "html_url": "https://github.com/nameko/nameko/issues/677", "id": 589597315, "node_id": "MDU6SXNzdWU1ODk1OTczMTU=", "number": 677, "title": "Extend documentation with example how to do rpc call", "user": {"login": "wieczyk", "id": 1063017, "node_id": "MDQ6VXNlcjEwNjMwMTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1063017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wieczyk", "html_url": "https://github.com/wieczyk", "followers_url": "https://api.github.com/users/wieczyk/followers", "following_url": "https://api.github.com/users/wieczyk/following{/other_user}", "gists_url": "https://api.github.com/users/wieczyk/gists{/gist_id}", "starred_url": "https://api.github.com/users/wieczyk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wieczyk/subscriptions", "organizations_url": "https://api.github.com/users/wieczyk/orgs", "repos_url": "https://api.github.com/users/wieczyk/repos", "events_url": "https://api.github.com/users/wieczyk/events{/privacy}", "received_events_url": "https://api.github.com/users/wieczyk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-28T15:23:19Z", "updated_at": "2020-03-31T22:14:10Z", "closed_at": "2020-03-31T22:14:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://nameko.readthedocs.io/en/stable/\r\n\r\nI see only example how to use `nameko shell` to invoke rpc. I think it would be more valuable to give example application, which uses nameko rpc-based service.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/672", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/672/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/672/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/672/events", "html_url": "https://github.com/nameko/nameko/issues/672", "id": 573591765, "node_id": "MDU6SXNzdWU1NzM1OTE3NjU=", "number": 672, "title": "Unable to get result for async rpc calls", "user": {"login": "sidharthramesh", "id": 18082719, "node_id": "MDQ6VXNlcjE4MDgyNzE5", "avatar_url": "https://avatars1.githubusercontent.com/u/18082719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sidharthramesh", "html_url": "https://github.com/sidharthramesh", "followers_url": "https://api.github.com/users/sidharthramesh/followers", "following_url": "https://api.github.com/users/sidharthramesh/following{/other_user}", "gists_url": "https://api.github.com/users/sidharthramesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/sidharthramesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sidharthramesh/subscriptions", "organizations_url": "https://api.github.com/users/sidharthramesh/orgs", "repos_url": "https://api.github.com/users/sidharthramesh/repos", "events_url": "https://api.github.com/users/sidharthramesh/events{/privacy}", "received_events_url": "https://api.github.com/users/sidharthramesh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-01T18:25:21Z", "updated_at": "2020-03-01T18:48:24Z", "closed_at": "2020-03-01T18:48:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nWhen `r.result()` of an async method is called, I get a runtime error. I am using docker and docker-compose. I may be doing something obviously wrong, but I can't figure out what.\r\n```\r\nstarting services: regular_checker, worker\r\nConnected to amqp://guest:**@rabbitmq:5672//\r\nerror handling worker <WorkerContext [regular_checker.ping] at 0x7fe94214d430>: This consumer has been stopped, and can no longer be used\r\nTraceback (most recent call last):\r\n...\r\n...\r\n  File \"./app.py\", line 18, in ping\r\n    results = [r.result() for r in results]\r\n  File \"./app.py\", line 18, in <listcomp>\r\n    results = [r.result() for r in results]\r\n  File \"/usr/local/lib/python3.8/site-packages/nameko/rpc.py\", line 326, in result\r\n    self.resp_body = self.reply_event.wait()\r\n  File \"/usr/local/lib/python3.8/site-packages/nameko/standalone/rpc.py\", line 52, in wait\r\n    raise RuntimeError(\r\nRuntimeError: This consumer has been stopped, and can no longer be used\r\n```\r\n**To Reproduce**\r\nI am using docker and docker-compose. To reproduce the error:\r\n\r\n*app.py*\r\n```python\r\nfrom nameko.timer import timer\r\nfrom nameko.standalone.rpc import ClusterRpcProxy\r\nfrom nameko.rpc import rpc\r\nfrom nameko.runners import ServiceRunner\r\nimport logging\r\n\r\nclass RegularChecker:\r\n    name = \"regular_checker\"\r\n    @timer(interval=1)\r\n    def ping(self):\r\n        results = []\r\n        for i in range(10):\r\n            with ClusterRpcProxy(config={\"AMQP_URI\":\"pyamqp://guest:guest@rabbitmq\"}) as cluster:\r\n                r = cluster.worker.sleep.call_async(i)\r\n                results.append(r)\r\n        \r\n        # Wait for all results to finish\r\n        results = [r.result() for r in results]\r\n        logging.info(results)\r\n\r\nclass Worker:\r\n    name = \"worker\"\r\n    @rpc\r\n    def sleep(self, number):\r\n        import time\r\n        time.sleep(0.5)\r\n        return number\r\n```\r\n\r\n*Dockerfile*\r\n```dockerfile\r\nFROM python:3.8.1\r\nRUN pip install nameko\r\nWORKDIR /src/\r\n```\r\n\r\n*docker-compose.yml*\r\n```yaml\r\nversion: \"3.7\"\r\n\r\nservices: \r\n    rabbitmq:\r\n            image: rabbitmq:3.7-alpine\r\n    app:\r\n        build: .\r\n        volumes: \r\n            - ./:/src/\r\n        depends_on: \r\n            - rabbitmq\r\n        command: nameko run app --broker rabbitmq\r\n```\r\n\r\ncommand:\r\n```\r\ndocker-compose run app\r\n```\r\n**Expected behavior**\r\nThe result gets returned without an error\r\n\r\n**Environment (please complete the following information):**\r\n - Nameko version: 2.12.0\r\n - Python version: 3.8.1\r\n - OS: Manjaro Linux 19.0\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/660", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/660/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/660/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/660/events", "html_url": "https://github.com/nameko/nameko/issues/660", "id": 505723376, "node_id": "MDU6SXNzdWU1MDU3MjMzNzY=", "number": 660, "title": "handle_result signature mess", "user": {"login": "litnimax", "id": 1144539, "node_id": "MDQ6VXNlcjExNDQ1Mzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1144539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/litnimax", "html_url": "https://github.com/litnimax", "followers_url": "https://api.github.com/users/litnimax/followers", "following_url": "https://api.github.com/users/litnimax/following{/other_user}", "gists_url": "https://api.github.com/users/litnimax/gists{/gist_id}", "starred_url": "https://api.github.com/users/litnimax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/litnimax/subscriptions", "organizations_url": "https://api.github.com/users/litnimax/orgs", "repos_url": "https://api.github.com/users/litnimax/repos", "events_url": "https://api.github.com/users/litnimax/events{/privacy}", "received_events_url": "https://api.github.com/users/litnimax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-11T08:51:20Z", "updated_at": "2019-10-25T09:15:06Z", "closed_at": "2019-10-24T12:14:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to use handle_result from the service:\r\n```\r\n    @bus('test')\r\n    def bus_test(self, message):\r\n        logger.debug('BUS TEST received: %s', message)\r\n        return {'result': 'here'}\r\n```\r\nNow in my BusEventHandler(Entrypoint) class I have:\r\n```\r\n    def handle_result(self, message, worker_ctx, result, exc_info=None):\r\n        logger.debug('Result message: %s, result: %s, worker: %s, exc: %s',\r\n                     message, result, worker_ctx, exc_info)\r\n```\r\nAnd here is what I get:\r\n```\r\nBUS TEST received: {'msg': 'This is a test'}\r\nResult message: <WorkerContext [odoo_broker.bus_test] at 0x7fb4df66c610>, result: None, worker: {'result': 'here'}, exc: None\r\n```\r\nAs you may note result is passed in worker argument. \r\nI think I found the issue.\r\nPls look at the screenshot - https://imgur.com/a/XZhTZzV\r\nThanks for your attention.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/656", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/656/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/656/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/656/events", "html_url": "https://github.com/nameko/nameko/issues/656", "id": 484097209, "node_id": "MDU6SXNzdWU0ODQwOTcyMDk=", "number": 656, "title": "support WAMP rpc & pubsub", "user": {"login": "petri", "id": 64672, "node_id": "MDQ6VXNlcjY0Njcy", "avatar_url": "https://avatars0.githubusercontent.com/u/64672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petri", "html_url": "https://github.com/petri", "followers_url": "https://api.github.com/users/petri/followers", "following_url": "https://api.github.com/users/petri/following{/other_user}", "gists_url": "https://api.github.com/users/petri/gists{/gist_id}", "starred_url": "https://api.github.com/users/petri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petri/subscriptions", "organizations_url": "https://api.github.com/users/petri/orgs", "repos_url": "https://api.github.com/users/petri/repos", "events_url": "https://api.github.com/users/petri/events{/privacy}", "received_events_url": "https://api.github.com/users/petri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-22T16:30:59Z", "updated_at": "2019-08-25T15:15:26Z", "closed_at": "2019-08-25T15:15:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "See https://wamp-proto.org. There are well-maintained client & router implementations for Python (as well as for a number of other languages).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/655", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/655/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/655/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/655/events", "html_url": "https://github.com/nameko/nameko/issues/655", "id": 480975008, "node_id": "MDU6SXNzdWU0ODA5NzUwMDg=", "number": 655, "title": "TypeError after Upgrading to kombu version 4.6.4", "user": {"login": "nuthanmunaiah", "id": 8480477, "node_id": "MDQ6VXNlcjg0ODA0Nzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/8480477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nuthanmunaiah", "html_url": "https://github.com/nuthanmunaiah", "followers_url": "https://api.github.com/users/nuthanmunaiah/followers", "following_url": "https://api.github.com/users/nuthanmunaiah/following{/other_user}", "gists_url": "https://api.github.com/users/nuthanmunaiah/gists{/gist_id}", "starred_url": "https://api.github.com/users/nuthanmunaiah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nuthanmunaiah/subscriptions", "organizations_url": "https://api.github.com/users/nuthanmunaiah/orgs", "repos_url": "https://api.github.com/users/nuthanmunaiah/repos", "events_url": "https://api.github.com/users/nuthanmunaiah/events{/privacy}", "received_events_url": "https://api.github.com/users/nuthanmunaiah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-15T03:12:22Z", "updated_at": "2020-08-01T19:49:58Z", "closed_at": "2020-08-01T19:49:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nRunning `nameko run service`, where `service` is the name of the module the code for which is included below, raises a `TypeError: open: path should be string, bytes or os.PathLike, not _NormalAccessor`. Although the bug is similar to #650 and #642, the path to exception is different. See [traceback.txt](https://github.com/nameko/nameko/files/3504167/traceback.txt) for the stack trace.\r\n\r\nNote: I am fairly certain that the bug described in this report is in `kombu`. However, I wanted to report it here because I suspect the monkey patching (using `eventlet`) done by `nameko` may be a contributor to the bug rather than the bug being inherently in `kombu`. I also found a trivial workaround that I wanted to include here for others facing the exception under similar circumstances.\r\n\r\n**To Reproduce**\r\n\r\nRun `nameko run service` with the code for `service` module as shown below.\r\n\r\n```\r\n# service.py\r\nfrom nameko.rpc import rpc\r\n\r\nclass Service:\r\n    name = 'service'\r\n\r\n    @rpc\r\n    def get(self):\r\n        return 'hello world!!!'\r\n```\r\n\r\n**Expected behavior**\r\n\r\nRunning `nameko run service` should have started the service but instead raises in `TypeError: open: path should be string, bytes or os.PathLike, not _NormalAccessor` exception.\r\n\r\n```\r\n$ nameko run service\r\nTraceback (most recent call last):\r\n  File \"/home/user/scratch/.venv/bin/nameko\", line 10, in <module>\r\n    sys.exit(main())\r\n...\r\n  File \"/home/user/scratch/.venv/lib/python3.7/site-packages/eventlet/green/os.py\", line 107, in open\r\n    fd = __original_open__(file, flags, mode, dir_fd=dir_fd)\r\nTypeError: open: path should be string, bytes or os.PathLike, not _NormalAccessor\r\n```\r\n\r\n**Environment**\r\n - Nameko version:\r\n\r\n```\r\n$ pip freeze | grep -P 'nameko|kombu'\r\nkombu==4.6.4\r\nnameko==2.12.0\r\n```\r\n - Python version:\r\n\r\n```\r\n$ python --version\r\nPython 3.7.2\r\n```\r\n\r\n - OS:\r\n\r\n```\r\n$ lsb_release -a\r\nDistributor ID: Ubuntu\r\nDescription:    Ubuntu 18.04.3 LTS\r\nRelease:        18.04\r\nCodename:       bionic\r\n```\r\n\r\n**Additional context**\r\n\r\nA _workaround_ for this bug is to downgrade the version of `kombu` to `4.6.3` which resolved the issue for me. According to [Changelog](https://github.com/celery/kombu/blob/master/Changelog) from `kombu`, `4.6.4` does not include fixes for any security vulnerabilities so downgrading to `4.6.3` may not pose a problem in the interim.\r\n\r\n```\r\n$ pip install kombu==4.6.3\r\n$ pip freeze | grep -P 'nameko|kombu'\r\nkombu==4.6.3\r\nnameko==2.12.0\r\n$ nameko run service\r\nstarting services: service\r\nConnected to amqp://guest:**@127.0.0.1:5672//\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/646", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/646/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/646/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/646/events", "html_url": "https://github.com/nameko/nameko/issues/646", "id": 464879316, "node_id": "MDU6SXNzdWU0NjQ4NzkzMTY=", "number": 646, "title": "Nameko --version CLI flag", "user": {"login": "mths0x5f", "id": 4433485, "node_id": "MDQ6VXNlcjQ0MzM0ODU=", "avatar_url": "https://avatars3.githubusercontent.com/u/4433485?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mths0x5f", "html_url": "https://github.com/mths0x5f", "followers_url": "https://api.github.com/users/mths0x5f/followers", "following_url": "https://api.github.com/users/mths0x5f/following{/other_user}", "gists_url": "https://api.github.com/users/mths0x5f/gists{/gist_id}", "starred_url": "https://api.github.com/users/mths0x5f/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mths0x5f/subscriptions", "organizations_url": "https://api.github.com/users/mths0x5f/orgs", "repos_url": "https://api.github.com/users/mths0x5f/repos", "events_url": "https://api.github.com/users/mths0x5f/events{/privacy}", "received_events_url": "https://api.github.com/users/mths0x5f/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 698907972, "node_id": "MDU6TGFiZWw2OTg5MDc5NzI=", "url": "https://api.github.com/repos/nameko/nameko/labels/contributor-friendly", "name": "contributor-friendly", "color": "006b75", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-06T18:28:36Z", "updated_at": "2019-10-24T12:15:57Z", "closed_at": "2019-10-24T12:15:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n**Is your feature request related to a problem? Please describe.**\r\nYes, because I noticed I can not tell installed Nameko version without dealing with pip. This happened when running the stable release thinking for long that was pre-release", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/642", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/642/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/642/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/642/events", "html_url": "https://github.com/nameko/nameko/issues/642", "id": 459582711, "node_id": "MDU6SXNzdWU0NTk1ODI3MTE=", "number": 642, "title": "Nameko can not work with pathlib", "user": {"login": "ScienceYuan", "id": 22323804, "node_id": "MDQ6VXNlcjIyMzIzODA0", "avatar_url": "https://avatars3.githubusercontent.com/u/22323804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ScienceYuan", "html_url": "https://github.com/ScienceYuan", "followers_url": "https://api.github.com/users/ScienceYuan/followers", "following_url": "https://api.github.com/users/ScienceYuan/following{/other_user}", "gists_url": "https://api.github.com/users/ScienceYuan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ScienceYuan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ScienceYuan/subscriptions", "organizations_url": "https://api.github.com/users/ScienceYuan/orgs", "repos_url": "https://api.github.com/users/ScienceYuan/repos", "events_url": "https://api.github.com/users/ScienceYuan/events{/privacy}", "received_events_url": "https://api.github.com/users/ScienceYuan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-23T14:34:39Z", "updated_at": "2019-08-24T12:20:53Z", "closed_at": "2019-07-01T07:34:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nnameko worker process raise an exception when calling `Path('anything').open()`. reference to [this issue](https://github.com/eventlet/eventlet/issues/534), that should caused by a bug of eventlet.\r\n\r\n**To Reproduce**\r\n`server.py`\r\n```python\r\nfrom pathlib import Path\r\nfrom nameko.rpc import rpc\r\n\r\n\r\nclass Test:\r\n    name = 'test'\r\n\r\n    @rpc\r\n    def test(self):\r\n        Path('anything').open()\r\n```\r\n`client.py`\r\n```python\r\nfrom nameko.standalone.rpc import ClusterRpcProxy\r\n\r\nwith ClusterRpcProxy({'AMQP_URI': 'pyamqp://guest:guest@localhost'}) as cluster_rpc:\r\n    cluster_rpc.test.test()\r\n```\r\nrun command line `nameko run server` and `python client.py`.\r\n**Expected behavior**\r\nclient crushed and server raised a exception. exception on my machine:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/***/.local/share/virtualenvs/judger-uPeNMyNf/lib/python3.7/site-packages/nameko/containers.py\", line 392, in _run_worker\r\n    result = method(*worker_ctx.args, **worker_ctx.kwargs)\r\n  File \"./server.py\", line 10, in test\r\n    Path('anything').open()\r\n  File \"/usr/lib64/python3.7/pathlib.py\", line 1186, in open\r\n    opener=self._opener)\r\n  File \"/usr/lib64/python3.7/pathlib.py\", line 1039, in _opener\r\n    return self._accessor.open(self, flags, mode)\r\n  File \"/home/***/.local/share/virtualenvs/judger-uPeNMyNf/lib/python3.7/site-packages/eventlet/green/os.py\", line 107, in open\r\n    fd = __original_open__(file, flags, mode, dir_fd=dir_fd)\r\nTypeError: open: path should be string, bytes or os.PathLike, not _NormalAccessor\r\n\r\n```\r\n\r\n**Environment (please complete the following information):**\r\n - Nameko version: 2.12.0\r\n - Python version: 3.7.3\r\n - OS: Manjaro/Linux\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/641", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/641/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/641/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/641/events", "html_url": "https://github.com/nameko/nameko/issues/641", "id": 459458591, "node_id": "MDU6SXNzdWU0NTk0NTg1OTE=", "number": 641, "title": "Error with default settings in virtualenv", "user": {"login": "h8hawk", "id": 33346251, "node_id": "MDQ6VXNlcjMzMzQ2MjUx", "avatar_url": "https://avatars3.githubusercontent.com/u/33346251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h8hawk", "html_url": "https://github.com/h8hawk", "followers_url": "https://api.github.com/users/h8hawk/followers", "following_url": "https://api.github.com/users/h8hawk/following{/other_user}", "gists_url": "https://api.github.com/users/h8hawk/gists{/gist_id}", "starred_url": "https://api.github.com/users/h8hawk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h8hawk/subscriptions", "organizations_url": "https://api.github.com/users/h8hawk/orgs", "repos_url": "https://api.github.com/users/h8hawk/repos", "events_url": "https://api.github.com/users/h8hawk/events{/privacy}", "received_events_url": "https://api.github.com/users/h8hawk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1418809949, "node_id": "MDU6TGFiZWwxNDE4ODA5OTQ5", "url": "https://api.github.com/repos/nameko/nameko/labels/pre-release%20bug", "name": "pre-release bug", "color": "f7d945", "default": false, "description": "A pre-release bug not affecting stable releases"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-22T09:56:49Z", "updated_at": "2019-06-27T21:59:26Z", "closed_at": "2019-06-27T21:59:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I cannot run nameko with rabbitmq , here is the log for running first [example](http://docs.nameko.io/en/stable/index.html)\r\n\r\n$nameko run helloworld\r\nTraceback (most recent call last):\r\nFile \"/home/howard/.local/share/virtualenvs/shipupline-5EExyWmr/bin/nameko\", line 10, in\r\nsys.exit(main())\r\n\r\nFile \"/home/howard/.local/share/virtualenvs/shipupline-5EExyWmr/lib/python3.7/site-packages/nameko/cli/main.py\", line 155, in main\r\nargs.main(args)\r\n\r\nFile \"/home/howard/.local/share/virtualenvs/shipupline-5EExyWmr/lib/python3.7/site-packages/nameko/cli/commands.py\", line 105, in main\r\nmain(args)\r\n\r\nFile \"/home/howard/.local/share/virtualenvs/shipupline-5EExyWmr/lib/python3.7/site-packages/nameko/cli/run.py\", line 175, in main\r\nrun(services, backdoor_port=args.backdoor_port)\r\n\r\nFile \"/home/howard/.local/share/virtualenvs/shipupline-5EExyWmr/lib/python3.7/site-packages/nameko/cli/run.py\", line 118, in run\r\nservice_runner.add_service(service_cls)\r\n\r\nFile \"/home/howard/.local/share/virtualenvs/shipupline-5EExyWmr/lib/python3.7/site-packages/nameko/runners.py\", line 50, in add_service\r\ncontainer = self.container_cls(cls)\r\n\r\nFile \"/home/howard/.local/share/virtualenvs/shipupline-5EExyWmr/lib/python3.7/site-packages/nameko/containers.py\", line 149, in init\r\nbound = entrypoint.bind(self.interface, method_name)\r\n\r\nFile \"/home/howard/.local/share/virtualenvs/shipupline-5EExyWmr/lib/python3.7/site-packages/nameko/extensions.py\", line 284, in bind\r\ninstance = super(Entrypoint, self).bind(container)\r\n\r\nFile \"/home/howard/.local/share/virtualenvs/shipupline-5EExyWmr/lib/python3.7/site-packages/nameko/extensions.py\", line 97, in bind\r\nsetattr(instance, name, ext.bind(container))\r\n\r\nFile \"/home/howard/.local/share/virtualenvs/shipupline-5EExyWmr/lib/python3.7/site-packages/nameko/extensions.py\", line 126, in bind\r\ninstance = super(SharedExtension, self).bind(container)\r\n\r\nFile \"/home/howard/.local/share/virtualenvs/shipupline-5EExyWmr/lib/python3.7/site-packages/nameko/extensions.py\", line 96, in bind\r\nfor name, ext in inspect.getmembers(self, is_extension):\r\n\r\nFile \"/usr/lib/python3.7/inspect.py\", line 341, in getmembers\r\nvalue = getattr(object, key)\r\n\r\nFile \"/home/howard/.local/share/virtualenvs/shipupline-5EExyWmr/lib/python3.7/site-packages/nameko/rpc.py\", line 66, in amqp_uri\r\nreturn config[AMQP_URI_CONFIG_KEY]\r\n\r\nFile \"/home/howard/.local/share/virtualenvs/shipupline-5EExyWmr/lib/python3.7/collections/init.py\", line 1025, in getitem\r\nraise KeyError(key)\r\nKeyError: 'AMQP_URI'\r\n\r\nrabbitmq status:\r\n`$sudo rabbitmqctl status\r\nStatus of node rabbit@howard ...\r\n[{pid,784},\r\n {running_applications,\r\n     [{rabbitmq_management,\"RabbitMQ Management Console\",\"3.7.15\"},\r\n      {rabbitmq_management_agent,\"RabbitMQ Management Agent\",\"3.7.15\"},\r\n      {rabbitmq_web_dispatch,\"RabbitMQ Web Dispatcher\",\"3.7.15\"},\r\n      {rabbit,\"RabbitMQ\",\"3.7.15\"},\r\n      {cowboy,\"Small, fast, modern HTTP server.\",\"2.6.1\"},\r\n      {amqp_client,\"RabbitMQ AMQP Client\",\"3.7.15\"},\r\n      {rabbit_common,\r\n          \"Modules shared by rabbitmq-server and rabbitmq-erlang-client\",\r\n          \"3.7.15\"},\r\n      {ranch,\"Socket acceptor pool for TCP protocols.\",\"1.7.1\"},\r\n      {ssl,\"Erlang/OTP SSL application\",\"9.3.3\"},\r\n      {public_key,\"Public key infrastructure\",\"1.6.7\"},\r\n      {asn1,\"The Erlang ASN1 compiler version 5.0.9\",\"5.0.9\"},\r\n      {observer_cli,\"Visualize Erlang Nodes On The Command Line\",\"1.5.0\"},\r\n      {sysmon_handler,\"Rate-limiting system_monitor event handler\",\"1.1.0\"},\r\n      {os_mon,\"CPO  CXC 138 46\",\"2.5\"},\r\n      {recon,\"Diagnostic tools for production use\",\"2.5.0\"},\r\n      {mnesia,\"MNESIA  CXC 138 12\",\"4.16\"},\r\n      {xmerl,\"XML parser\",\"1.3.21\"},\r\n      {cowlib,\"Support library for manipulating Web protocols.\",\"2.7.0\"},\r\n      {crypto,\"CRYPTO\",\"4.5.1\"},\r\n      {jsx,\"a streaming, evented json parsing toolkit\",\"2.9.0\"},\r\n      {inets,\"INETS  CXC 138 49\",\"7.0.8\"},\r\n      {lager,\"Erlang logging framework\",\"3.6.10\"},\r\n      {goldrush,\"Erlang event stream processor\",\"0.1.9\"},\r\n      {compiler,\"ERTS  CXC 138 10\",\"7.4.2\"},\r\n      {syntax_tools,\"Syntax tools\",\"2.2\"},\r\n      {sasl,\"SASL  CXC 138 11\",\"3.4\"},\r\n      {stdlib,\"ERTS  CXC 138 10\",\"3.9.2\"},\r\n      {kernel,\"ERTS  CXC 138 10\",\"6.4.1\"}]},\r\n {os,{unix,linux}},\r\n {erlang_version,\r\n     \"Erlang/OTP 22 [erts-10.4.3] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:64]\\n\"},\r\n {memory,\r\n     [{connection_readers,0},\r\n      {connection_writers,0},\r\n      {connection_channels,0},\r\n      {connection_other,2732},\r\n      {queue_procs,0},\r\n      {queue_slave_procs,0},\r\n      {plugins,1042548},\r\n      {other_proc,22427164},\r\n      {metrics,206628},\r\n      {mgmt_db,171864},\r\n      {mnesia,76056},\r\n      {other_ets,2788168},\r\n      {binary,117320},\r\n      {msg_index,29584},\r\n      {code,27361269},\r\n      {atom,1221849},\r\n      {other_system,12167282},\r\n      {allocated_unused,8536272},\r\n      {reserved_unallocated,3629056},\r\n      {strategy,rss},\r\n      {total,[{erlang,67612464},{rss,79777792},{allocated,76148736}]}]},\r\n {alarms,[]},\r\n {listeners,[{clustering,25672,\"::\"},{amqp,5672,\"::\"},{http,15672,\"::\"}]},\r\n {vm_memory_calculation_strategy,rss},\r\n {vm_memory_high_watermark,0.4},\r\n {vm_memory_limit,3298032025},\r\n {disk_free_limit,50000000},\r\n {disk_free,67586584576},\r\n {file_descriptors,\r\n     [{total_limit,32668},\r\n      {total_used,2},\r\n      {sockets_limit,29399},\r\n      {sockets_used,0}]},\r\n {processes,[{limit,1048576},{used,390}]},\r\n {run_queue,1},\r\n {uptime,1432},\r\n {kernel,{net_ticktime,60}}]`\r\n\r\nIt has something to do with pipenv(or virtualenv). code above run fine without pipenv environment.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/640", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/640/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/640/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/640/events", "html_url": "https://github.com/nameko/nameko/issues/640", "id": 456008209, "node_id": "MDU6SXNzdWU0NTYwMDgyMDk=", "number": 640, "title": "Rpc between 2 machines", "user": {"login": "maddypj", "id": 17556996, "node_id": "MDQ6VXNlcjE3NTU2OTk2", "avatar_url": "https://avatars3.githubusercontent.com/u/17556996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maddypj", "html_url": "https://github.com/maddypj", "followers_url": "https://api.github.com/users/maddypj/followers", "following_url": "https://api.github.com/users/maddypj/following{/other_user}", "gists_url": "https://api.github.com/users/maddypj/gists{/gist_id}", "starred_url": "https://api.github.com/users/maddypj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maddypj/subscriptions", "organizations_url": "https://api.github.com/users/maddypj/orgs", "repos_url": "https://api.github.com/users/maddypj/repos", "events_url": "https://api.github.com/users/maddypj/events{/privacy}", "received_events_url": "https://api.github.com/users/maddypj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-14T00:26:27Z", "updated_at": "2019-06-14T06:56:10Z", "closed_at": "2019-06-14T06:56:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to use rpc between 2 different machines. Trying to connect the 2 machines by rabbitmq shovels. Nameko is not able to find the remote method.  Is there a way to do rpc on a different machine?\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/638", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/638/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/638/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/638/events", "html_url": "https://github.com/nameko/nameko/issues/638", "id": 450092714, "node_id": "MDU6SXNzdWU0NTAwOTI3MTQ=", "number": 638, "title": "Is there a way to define service name by config file ?", "user": {"login": "xiaojinwhu", "id": 10114923, "node_id": "MDQ6VXNlcjEwMTE0OTIz", "avatar_url": "https://avatars0.githubusercontent.com/u/10114923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaojinwhu", "html_url": "https://github.com/xiaojinwhu", "followers_url": "https://api.github.com/users/xiaojinwhu/followers", "following_url": "https://api.github.com/users/xiaojinwhu/following{/other_user}", "gists_url": "https://api.github.com/users/xiaojinwhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaojinwhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaojinwhu/subscriptions", "organizations_url": "https://api.github.com/users/xiaojinwhu/orgs", "repos_url": "https://api.github.com/users/xiaojinwhu/repos", "events_url": "https://api.github.com/users/xiaojinwhu/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaojinwhu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-30T01:55:09Z", "updated_at": "2019-06-03T08:11:58Z", "closed_at": "2019-06-03T08:11:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for provide a nice tools for microservice by python.\r\n\r\nI find there is a little fuzzy when use docker to scale a service. \r\nA service make the same work when call it, because the service name is same.\r\nBut if need two or more environment ( development, test ...)  on the host, how can I solve it\uff1f\r\nthanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/637", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/637/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/637/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/637/events", "html_url": "https://github.com/nameko/nameko/issues/637", "id": 447525050, "node_id": "MDU6SXNzdWU0NDc1MjUwNTA=", "number": 637, "title": "backdoor complains that netcat doesn't have --close option on debian ", "user": {"login": "xqliang", "id": 4370917, "node_id": "MDQ6VXNlcjQzNzA5MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4370917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xqliang", "html_url": "https://github.com/xqliang", "followers_url": "https://api.github.com/users/xqliang/followers", "following_url": "https://api.github.com/users/xqliang/following{/other_user}", "gists_url": "https://api.github.com/users/xqliang/gists{/gist_id}", "starred_url": "https://api.github.com/users/xqliang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xqliang/subscriptions", "organizations_url": "https://api.github.com/users/xqliang/orgs", "repos_url": "https://api.github.com/users/xqliang/repos", "events_url": "https://api.github.com/users/xqliang/events{/privacy}", "received_events_url": "https://api.github.com/users/xqliang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-23T08:48:18Z", "updated_at": "2019-06-13T19:09:14Z", "closed_at": "2019-06-13T19:09:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "```bash\r\n$ nameko backdoor 8080\r\nnetcat: invalid option -- '-'\r\nnc -h for help\r\nError: Backdoor unreachable on 8080\r\n\r\n$ which netcat\r\n/bin/netcat\r\n\r\n$ readlink -f /bin/netcat \r\n/bin/nc.openbsd\r\n\r\n$ netcat localhost 8080 --close\r\nnetcat: invalid option -- '-'\r\nusage: nc [-46CDdFhklNnrStUuvZz] [-I length] [-i interval] [-O length]\r\n\t  [-P proxy_username] [-p source_port] [-q seconds] [-s source]\r\n\t  [-T toskeyword] [-V rtable] [-w timeout] [-X proxy_protocol]\r\n\t  [-x proxy_address[:port]] [destination] [port]\r\n\r\n$ cat /etc/debian_version \r\n9.5\r\n```\r\n\r\nThe line `cmd.append('--close')` at [nameko/cli/backdoor.py#L27](https://github.com/nameko/nameko/blob/master/nameko/cli/backdoor.py#L27) cause the problem:\r\n```python\r\n    cmd = [prog, str(host), str(port)]\r\n    if prog == 'netcat':\r\n        cmd.append('--close')  # XXX: cause the problem\r\n    if rlwrap is None:\r\n        rlwrap = os.system('which rlwrap &> /dev/null') == 0\r\n```\r\n\r\nIt looks like `-q` option works fine:\r\n```bash\r\n$ netcat localhost 36000 -q0\r\nPython 2.7.9 (default, Mar  1 2015, 12:57:24) \r\n[GCC 4.9.2] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n(InteractiveConsole)\r\n>>> <Press Ctrl+D here>$\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/634", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/634/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/634/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/634/events", "html_url": "https://github.com/nameko/nameko/issues/634", "id": 438702804, "node_id": "MDU6SXNzdWU0Mzg3MDI4MDQ=", "number": 634, "title": "How to make rabbitmq send a message to nameko service only once", "user": {"login": "75509151", "id": 9361858, "node_id": "MDQ6VXNlcjkzNjE4NTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/9361858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/75509151", "html_url": "https://github.com/75509151", "followers_url": "https://api.github.com/users/75509151/followers", "following_url": "https://api.github.com/users/75509151/following{/other_user}", "gists_url": "https://api.github.com/users/75509151/gists{/gist_id}", "starred_url": "https://api.github.com/users/75509151/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/75509151/subscriptions", "organizations_url": "https://api.github.com/users/75509151/orgs", "repos_url": "https://api.github.com/users/75509151/repos", "events_url": "https://api.github.com/users/75509151/events{/privacy}", "received_events_url": "https://api.github.com/users/75509151/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-30T10:17:32Z", "updated_at": "2019-04-30T20:40:28Z", "closed_at": "2019-04-30T20:40:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/630", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/630/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/630/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/630/events", "html_url": "https://github.com/nameko/nameko/issues/630", "id": 433043233, "node_id": "MDU6SXNzdWU0MzMwNDMyMzM=", "number": 630, "title": "Travis CI: reorder to speed up detection of first error", "user": {"login": "vlcinsky", "id": 635911, "node_id": "MDQ6VXNlcjYzNTkxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/635911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlcinsky", "html_url": "https://github.com/vlcinsky", "followers_url": "https://api.github.com/users/vlcinsky/followers", "following_url": "https://api.github.com/users/vlcinsky/following{/other_user}", "gists_url": "https://api.github.com/users/vlcinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlcinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlcinsky/subscriptions", "organizations_url": "https://api.github.com/users/vlcinsky/orgs", "repos_url": "https://api.github.com/users/vlcinsky/repos", "events_url": "https://api.github.com/users/vlcinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/vlcinsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-14T22:51:55Z", "updated_at": "2019-05-25T19:25:35Z", "closed_at": "2019-05-25T19:25:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, travis runs large set of tests and it takes quite some time.\r\n\r\nIt would be great, if time to detection of first error could be shorter.\r\n\r\nCurrently it e.g. builds documentation which could be safely postponed as i assume, most development happens with code and not with the docs.\r\n\r\nMy proposal for order of initial test environments is:\r\n\r\n```yaml\r\nmatrix:\r\n  include:\r\n# start with most popular predictable env. (py36)\r\n## first detect functional issues and coverage problems\r\n    - stage: test\r\n      python: 3.6\r\n      env: TOX_ENV=py36-pinned-lib\r\n## then do static checks\r\n    - stage: static\r\n      python: 3.6\r\n      env: TOX_ENV=py36-static\r\n# repeat for py27\r\n## first detect functional issues and coverage problems\r\n    - stage: test\r\n      python: 2.7\r\n      env: TOX_ENV=py27-pinned-lib\r\n## then do static checks\r\n    - stage: static\r\n      python: 2.7\r\n      env: TOX_ENV=py27-static\r\n# Build the docs\r\n    - stage: docs\r\n      python: 2.7\r\n      env: TOX_ENV=docs\r\n# Continue with whatever seems relevant\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/625", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/625/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/625/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/625/events", "html_url": "https://github.com/nameko/nameko/issues/625", "id": 430066178, "node_id": "MDU6SXNzdWU0MzAwNjYxNzg=", "number": 625, "title": "`nameko backdoor` is too shaky (depends on too many external things)", "user": {"login": "vlcinsky", "id": 635911, "node_id": "MDQ6VXNlcjYzNTkxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/635911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlcinsky", "html_url": "https://github.com/vlcinsky", "followers_url": "https://api.github.com/users/vlcinsky/followers", "following_url": "https://api.github.com/users/vlcinsky/following{/other_user}", "gists_url": "https://api.github.com/users/vlcinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlcinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlcinsky/subscriptions", "organizations_url": "https://api.github.com/users/vlcinsky/orgs", "repos_url": "https://api.github.com/users/vlcinsky/repos", "events_url": "https://api.github.com/users/vlcinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/vlcinsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-06T19:06:24Z", "updated_at": "2019-04-15T10:46:53Z", "closed_at": "2019-04-15T10:46:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Current implementation of `nameko backdoor` has following issues:\r\n- it depends on existence of either `telnet`, `nc` or `netcat`\r\n- it assumes `rlwrap` command is installed and available\r\n- it assumes existence of command can be tested by `which` command\r\n- if `nc` or `netcat` is used, which has multiple implementation with differing switch for \"return CRLF\", there are no checks for which implementation is really used\r\n\r\nFor these reasons the ` backdoor` subcommand is very likely to fail.\r\n\r\n# Proposed solutions\r\n\r\n## [doc] remove `nameko backdoor` subcommand entirely\r\nSimply describe in documentation, backdoor option exists (with `nameko run`), but to use it, one has to call locally available commands to connect.\r\n\r\n## [print] let `nameko backdoor` print instructions only\r\nAllow `nameko backdoor` to specify `--no-rlwrap` and `[host:]port`, but instead of really using it, print clear instructions what shall be called.\r\n\r\nIt shall state commands, which are assumed as installed (`telnet`, `nc` or `netcat`) plus `rlwrap`.\r\n\r\nThere shall be listed multiple options of command usages to illustrate how to do that on various OSes (like Linux, BSD, Windows ...).\r\n\r\n## [cmdchecks] let `nameko backdoor` do all checks before running real backdoor\r\nThis might be quite complex task (e.g. it would have to call `nc --help` to learn, which version of command is installed and search in helpstring for options available).\r\n\r\n## [telnetlib] implement `nameko backdoor` using python `telnetlib` from stdlib\r\nThis would prevent wide range of checks and problems.\r\n\r\nThe only remaining issue would be handling existence of `rlwrap`, which is not so difficult.\r\n\r\n# Conclusion\r\nI would propose following steps:\r\n\r\n- use [doc] initially, it would mean removing `nameko backdoor` subcommand from version 3.x entirely now.\r\n- implement [telnetlib| solution sometime later.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/624", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/624/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/624/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/624/events", "html_url": "https://github.com/nameko/nameko/issues/624", "id": 430062200, "node_id": "MDU6SXNzdWU0MzAwNjIyMDA=", "number": 624, "title": "`nameko backport` probably not working on MS Windows", "user": {"login": "vlcinsky", "id": 635911, "node_id": "MDQ6VXNlcjYzNTkxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/635911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlcinsky", "html_url": "https://github.com/vlcinsky", "followers_url": "https://api.github.com/users/vlcinsky/followers", "following_url": "https://api.github.com/users/vlcinsky/following{/other_user}", "gists_url": "https://api.github.com/users/vlcinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlcinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlcinsky/subscriptions", "organizations_url": "https://api.github.com/users/vlcinsky/orgs", "repos_url": "https://api.github.com/users/vlcinsky/repos", "events_url": "https://api.github.com/users/vlcinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/vlcinsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-06T18:24:04Z", "updated_at": "2019-04-08T10:27:33Z", "closed_at": "2019-04-08T10:27:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "As seen here: https://github.com/nameko/nameko/blob/v3.0.0-rc/nameko/cli/backdoor.py#L11\r\n\r\n`nameko` is using `which` command to detect existence of particular executable.\r\n\r\nThis is very likely to fail on MS Windows as the command with this purpose is named `where` there.\r\n\r\nExpected behaviour: Make sure, (possibly fixed) implementation runs on MS Windows too.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/623", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/623/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/623/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/623/events", "html_url": "https://github.com/nameko/nameko/issues/623", "id": 430061561, "node_id": "MDU6SXNzdWU0MzAwNjE1NjE=", "number": 623, "title": "`nameko backpoort` asking options, which are not used", "user": {"login": "vlcinsky", "id": 635911, "node_id": "MDQ6VXNlcjYzNTkxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/635911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlcinsky", "html_url": "https://github.com/vlcinsky", "followers_url": "https://api.github.com/users/vlcinsky/followers", "following_url": "https://api.github.com/users/vlcinsky/following{/other_user}", "gists_url": "https://api.github.com/users/vlcinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlcinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlcinsky/subscriptions", "organizations_url": "https://api.github.com/users/vlcinsky/orgs", "repos_url": "https://api.github.com/users/vlcinsky/repos", "events_url": "https://api.github.com/users/vlcinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/vlcinsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-06T18:16:27Z", "updated_at": "2019-04-08T10:25:34Z", "closed_at": "2019-04-08T10:25:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "```bash\r\n$ nameko backdoor --help\r\nusage: nameko backdoor [-h] [--rlwrap] [-c CONFIG] [-d KEY=VALUE] [host:]port\r\n\r\nConnect to a nameko backdoor. If a backdoor is running this will connect to a\r\nremote shell. The runner is generally available as `runner`.\r\n\r\npositional arguments:\r\n  [host:]port           (host and) port to connect to\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  --rlwrap, --no-rlwrap\r\n                        Use rlwrap\r\n  -c CONFIG, --config CONFIG\r\n                        The YAML configuration file\r\n  -d KEY=VALUE, --define KEY=VALUE\r\n                        Set config entry. Overrides value loaded from config\r\n                        file. Can be used multiple times. Example: --define\r\n                        AMQP_URI=pyamqp://guest:guest@localhost\r\n```\r\n\r\nHelpstring explains use of `--config` and `--define` options, but they are not used in real code at all.\r\n\r\nExpected behaviour: Remove usage of `--config` and `--define` options from CLI.\r\n\r\nI just want to make sure, this change is correct and acceptable for nameko 3.x. I already work on it in  my PR #620  for refactored CLI.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/621", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/621/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/621/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/621/events", "html_url": "https://github.com/nameko/nameko/issues/621", "id": 427855373, "node_id": "MDU6SXNzdWU0Mjc4NTUzNzM=", "number": 621, "title": "Parametrize timeout in entrypoint_hook method", "user": {"login": "Trojan295", "id": 5502803, "node_id": "MDQ6VXNlcjU1MDI4MDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5502803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Trojan295", "html_url": "https://github.com/Trojan295", "followers_url": "https://api.github.com/users/Trojan295/followers", "following_url": "https://api.github.com/users/Trojan295/following{/other_user}", "gists_url": "https://api.github.com/users/Trojan295/gists{/gist_id}", "starred_url": "https://api.github.com/users/Trojan295/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Trojan295/subscriptions", "organizations_url": "https://api.github.com/users/Trojan295/orgs", "repos_url": "https://api.github.com/users/Trojan295/repos", "events_url": "https://api.github.com/users/Trojan295/events{/privacy}", "received_events_url": "https://api.github.com/users/Trojan295/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-01T18:44:39Z", "updated_at": "2019-04-04T20:11:04Z", "closed_at": "2019-04-04T20:11:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\nI have a async endpoint (Nameko Events), which is processing the event for more than 30 seconds. I'm trying to use `entrypoint_hook` in my tests, but it times out\r\n\r\n**Describe the solution you'd like**\r\nI would like to define explicitly the timeout value eg. `entrypoint_hook(container, 'my_endpoint', timeout=120)`. Currently I'm using a custom `entrypoint_hook` method, where I implemented it. It basically passes the timeout parameter to the `entrypoint_waiter` call.\r\n\r\n**Describe alternatives you've considered**\r\n\r\n**Additional context**\r\n\r\nI can send a PR for this, if the feedback is positive.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/618", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/618/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/618/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/618/events", "html_url": "https://github.com/nameko/nameko/issues/618", "id": 424269009, "node_id": "MDU6SXNzdWU0MjQyNjkwMDk=", "number": 618, "title": "`nameko` CLI called without any args fails", "user": {"login": "vlcinsky", "id": 635911, "node_id": "MDQ6VXNlcjYzNTkxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/635911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlcinsky", "html_url": "https://github.com/vlcinsky", "followers_url": "https://api.github.com/users/vlcinsky/followers", "following_url": "https://api.github.com/users/vlcinsky/following{/other_user}", "gists_url": "https://api.github.com/users/vlcinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlcinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlcinsky/subscriptions", "organizations_url": "https://api.github.com/users/vlcinsky/orgs", "repos_url": "https://api.github.com/users/vlcinsky/repos", "events_url": "https://api.github.com/users/vlcinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/vlcinsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-03-22T15:33:05Z", "updated_at": "2019-04-15T10:45:36Z", "closed_at": "2019-04-15T10:45:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nWhen `nameko` command is run without any argument, it fails with traceback.\r\n**To Reproduce**\r\n```bash\r\n$ nameko\r\nTraceback (most recent call last):\r\n  File \"/home/javl/sandbox/playwith_nameko/test_roman/.venv/bin/nameko\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/home/javl/sandbox/playwith_nameko/test_roman/.venv/lib/python3.6/site-packages/nameko/cli/main.py\", line 153, in main\r\n    setup_config(args)\r\n  File \"/home/javl/sandbox/playwith_nameko/test_roman/.venv/lib/python3.6/site-packages/nameko/cli/main.py\", line 134, in setup_config\r\n    if args.config:\r\nAttributeError: 'Namespace' object has no attribute 'config'\r\n```\r\n\r\n**Expected behavior**\r\n`nameko` called without any arg shall show help or list names of all supported subcommands.\r\n\r\n**Environment (please complete the following information):**\r\n - Nameko version: 3.0.0.rc6\r\n - Python version: 3.6\r\n - OS: Debian 9.7\r\n\r\n**Additional context**\r\nIf you would accept using `click`, I would volunteer to rewrite existing `argparse` based CLI to `click` what would resolve reported issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/617", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/617/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/617/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/617/events", "html_url": "https://github.com/nameko/nameko/issues/617", "id": 424261855, "node_id": "MDU6SXNzdWU0MjQyNjE4NTU=", "number": 617, "title": "`--broker` seems exclusive to `--config` in `nameko run`", "user": {"login": "vlcinsky", "id": 635911, "node_id": "MDQ6VXNlcjYzNTkxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/635911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlcinsky", "html_url": "https://github.com/vlcinsky", "followers_url": "https://api.github.com/users/vlcinsky/followers", "following_url": "https://api.github.com/users/vlcinsky/following{/other_user}", "gists_url": "https://api.github.com/users/vlcinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlcinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlcinsky/subscriptions", "organizations_url": "https://api.github.com/users/vlcinsky/orgs", "repos_url": "https://api.github.com/users/vlcinsky/repos", "events_url": "https://api.github.com/users/vlcinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/vlcinsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-03-22T15:18:58Z", "updated_at": "2019-03-26T22:16:26Z", "closed_at": "2019-03-26T22:16:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nReading code for `nameko run` it seems, that one can either specify `--config` file or `--broker` url but not both, see https://github.com/nameko/nameko/blob/master/nameko/cli/run.py#L168\r\n\r\n**Expected behavior**\r\nWhen `--broker` value is provided, it shall update possibly loaded config content, not replace it completely.\r\n\r\nNote: this issue is based purely on reading the code.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/611", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/611/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/611/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/611/events", "html_url": "https://github.com/nameko/nameko/issues/611", "id": 421020514, "node_id": "MDU6SXNzdWU0MjEwMjA1MTQ=", "number": 611, "title": "New release of pyyaml 5.1 breaks how config.yml is loaded", "user": {"login": "tyler46", "id": 1432608, "node_id": "MDQ6VXNlcjE0MzI2MDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1432608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tyler46", "html_url": "https://github.com/tyler46", "followers_url": "https://api.github.com/users/tyler46/followers", "following_url": "https://api.github.com/users/tyler46/following{/other_user}", "gists_url": "https://api.github.com/users/tyler46/gists{/gist_id}", "starred_url": "https://api.github.com/users/tyler46/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tyler46/subscriptions", "organizations_url": "https://api.github.com/users/tyler46/orgs", "repos_url": "https://api.github.com/users/tyler46/repos", "events_url": "https://api.github.com/users/tyler46/events{/privacy}", "received_events_url": "https://api.github.com/users/tyler46/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-14T13:33:10Z", "updated_at": "2019-03-18T12:12:11Z", "closed_at": "2019-03-18T11:45:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "hi :) \r\n\r\nI think that new release of pyyaml has introduced some incompatible [changes](https://github.com/yaml/pyyaml/issues/265) that perhaps cause an issue while installing `nameko` package. In particular based on nameko's `setup.py` it's required to install `pyyaml>=3.10`. That results installing latest version of pyyaml which has caused at least to me issues running nameko, because config.yml is not loaded correctly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/608", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/608/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/608/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/608/events", "html_url": "https://github.com/nameko/nameko/issues/608", "id": 413226168, "node_id": "MDU6SXNzdWU0MTMyMjYxNjg=", "number": 608, "title": "Subprocess in Nameko Service Ignoring `errors = 'replace'`", "user": {"login": "nuthanmunaiah", "id": 8480477, "node_id": "MDQ6VXNlcjg0ODA0Nzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/8480477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nuthanmunaiah", "html_url": "https://github.com/nuthanmunaiah", "followers_url": "https://api.github.com/users/nuthanmunaiah/followers", "following_url": "https://api.github.com/users/nuthanmunaiah/following{/other_user}", "gists_url": "https://api.github.com/users/nuthanmunaiah/gists{/gist_id}", "starred_url": "https://api.github.com/users/nuthanmunaiah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nuthanmunaiah/subscriptions", "organizations_url": "https://api.github.com/users/nuthanmunaiah/orgs", "repos_url": "https://api.github.com/users/nuthanmunaiah/repos", "events_url": "https://api.github.com/users/nuthanmunaiah/events{/privacy}", "received_events_url": "https://api.github.com/users/nuthanmunaiah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-22T03:26:24Z", "updated_at": "2019-02-22T14:55:48Z", "closed_at": "2019-02-22T14:55:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nI am using `subprocess.Popen` to create a run a shell command. I expect the output from the command to include non-Unicode characters so I am using `errors = 'replace'` to ignore any Unicode decoding errors and replace the offending characters with \ufffd (the prescribed Unicode replacement character). However, the `subprocess` module that is available when I run the code as a nameko service seemed to be ignoring the `errors = 'replace'` argument to `Popen`.\r\n\r\nI am certain that the issue described is in the `eventlet` package but I am not directly using `eventlet` so I thought opening an issue here was a good starting point.\r\n\r\n**To Reproduce**\r\n\r\nI extracted the source code that is essential to demonstrate the issue and created a simple (single file) Nameko service the source code for which is included below. The output from the code when I run it as a Nameko service (using `curl localhost:8000` to invoke the service from a different console) and as a simple Python script is as follows:\r\n\r\n```\r\n$ nameko run service\r\n[service] sout - UTF-8 strict\r\n[service] serr - UTF-8 strict\r\n[service] Command Output hello world!!!\r\n\r\n^C\r\n$ python service.py\r\n[__main__] sout - UTF-8 replace\r\n[__main__] serr - UTF-8 replace\r\n[__main__] Command Output hello world!!!\r\n```\r\n\r\n```\r\n'''service.py'''\r\n\r\nimport subprocess\r\n\r\nfrom nameko.dependency_providers import Config\r\nfrom nameko.web.handlers import http\r\n\r\n\r\ndef get_output():\r\n    ostream, estream = run()\r\n    output = ostream.read()\r\n    print('[{}] Command Output {}'.format(__name__, output))\r\n    return output\r\n\r\n\r\ndef run():\r\n    command = 'echo \"hello world!!!\"'\r\n    process = subprocess.Popen(\r\n        command, shell=True, text=True, errors='replace', bufsize=1,\r\n        stdout=subprocess.PIPE, stderr=subprocess.PIPE\r\n    )\r\n    sout, serr = process.stdout, process.stderr\r\n    print('[{}] sout - {} {}'.format(__name__, sout.encoding, sout.errors))\r\n    print('[{}] serr - {} {}'.format(__name__, serr.encoding, serr.errors))\r\n    return sout, serr\r\n\r\n\r\nclass NamekoService:\r\n    name = 'nameko'\r\n\r\n    config = Config()\r\n\r\n    @http('GET', '/')\r\n    def get(self, request):\r\n        return get_output()\r\n\r\n\r\nif __name__ == '__main__':\r\n    _ = get_output()\r\n```\r\n\r\n**Expected behavior**\r\n\r\nThe `errors = 'replace'` should not have been ignored.\r\n\r\n**Environment (please complete the following information):**\r\n - Nameko version: `nameko==2.11.0`\r\n - Python version: `Python 3.7.2`\r\n - OS: `Ubuntu 18.04.2 LTS (GNU/Linux 4.15.0-45-generic x86_64)`\r\n\r\n**Additional context**\r\n\r\nThe command I am using `subprocess.Popen` to run is `git log --patch` and some of the patches will include characters that cannot be decoded to Unicode.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/604", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/604/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/604/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/604/events", "html_url": "https://github.com/nameko/nameko/issues/604", "id": 399820616, "node_id": "MDU6SXNzdWUzOTk4MjA2MTY=", "number": 604, "title": "Config method get doesn't exist", "user": {"login": "amitza", "id": 9674751, "node_id": "MDQ6VXNlcjk2NzQ3NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/9674751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amitza", "html_url": "https://github.com/amitza", "followers_url": "https://api.github.com/users/amitza/followers", "following_url": "https://api.github.com/users/amitza/following{/other_user}", "gists_url": "https://api.github.com/users/amitza/gists{/gist_id}", "starred_url": "https://api.github.com/users/amitza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amitza/subscriptions", "organizations_url": "https://api.github.com/users/amitza/orgs", "repos_url": "https://api.github.com/users/amitza/repos", "events_url": "https://api.github.com/users/amitza/events{/privacy}", "received_events_url": "https://api.github.com/users/amitza/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-16T13:58:15Z", "updated_at": "2019-01-16T21:06:57Z", "closed_at": "2019-01-16T21:06:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\n\r\nI'm using nameko 2.11.0 with python 3.7 and I'm trying to read custom config value from the .yml file according to the documentation:\r\n\r\nconfig = Config()\r\n\r\nBut the method config.get() doesn't exist. \r\n\r\nHow do I do this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/599", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/599/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/599/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/599/events", "html_url": "https://github.com/nameko/nameko/issues/599", "id": 397639255, "node_id": "MDU6SXNzdWUzOTc2MzkyNTU=", "number": 599, "title": "ImportError: No module named 'urllib2' in python3", "user": {"login": "myazid", "id": 4997147, "node_id": "MDQ6VXNlcjQ5OTcxNDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/4997147?v=4", "gravatar_id": "", "url": "https://api.github.com/users/myazid", "html_url": "https://github.com/myazid", "followers_url": "https://api.github.com/users/myazid/followers", "following_url": "https://api.github.com/users/myazid/following{/other_user}", "gists_url": "https://api.github.com/users/myazid/gists{/gist_id}", "starred_url": "https://api.github.com/users/myazid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/myazid/subscriptions", "organizations_url": "https://api.github.com/users/myazid/orgs", "repos_url": "https://api.github.com/users/myazid/repos", "events_url": "https://api.github.com/users/myazid/events{/privacy}", "received_events_url": "https://api.github.com/users/myazid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-10T01:51:59Z", "updated_at": "2019-01-10T10:51:31Z", "closed_at": "2019-01-10T10:51:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nThe urllib2 module has been split across several modules in Python 3 named urllib.request and urllib.error.\r\n\r\n**To Reproduce**\r\nRun sample http.py in document.\r\n\r\n**Expected behavior**\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.5/dist-packages/werkzeug/http.py\", line 27, in <module>\r\n    from urllib.request import parse_http_list as _parse_list_header\r\n  File \"/usr/lib/python3.5/urllib/request.py\", line 88, in <module>\r\n    import http.client\r\nImportError: No module named 'http.client'; 'http' is not a package\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/bin/nameko\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/usr/local/lib/python3.5/dist-packages/nameko/cli/main.py\", line 107, in main\r\n    args.main(args)\r\n  File \"/usr/local/lib/python3.5/dist-packages/nameko/cli/commands.py\", line 110, in main\r\n    main(args)\r\n  File \"/usr/local/lib/python3.5/dist-packages/nameko/cli/run.py\", line 181, in main\r\n    import_service(path)\r\n  File \"/usr/local/lib/python3.5/dist-packages/nameko/cli/run.py\", line 46, in import_service\r\n    __import__(module_name)\r\n  File \"./http.py\", line 4, in <module>\r\n    from nameko.web.handlers import http\r\n  File \"/usr/local/lib/python3.5/dist-packages/nameko/web/handlers.py\", line 6, in <module>\r\n    from werkzeug.routing import Rule\r\n  File \"/usr/local/lib/python3.5/dist-packages/werkzeug/__init__.py\", line 151, in <module>\r\n    __import__('werkzeug.exceptions')\r\n  File \"/usr/local/lib/python3.5/dist-packages/werkzeug/exceptions.py\", line 71, in <module>\r\n    from werkzeug.wrappers import Response\r\n  File \"/usr/local/lib/python3.5/dist-packages/werkzeug/wrappers.py\", line 27, in <module>\r\n    from werkzeug.http import HTTP_STATUS_CODES, \\\r\n  File \"/usr/local/lib/python3.5/dist-packages/werkzeug/http.py\", line 30, in <module>\r\n    from urllib2 import parse_http_list as _parse_list_header, \\\r\nImportError: No module named 'urllib2'\r\n\r\n**Environment (please complete the following information):**\r\n - Nameko version: 2.11\r\n - Python version: 3.52\r\n - OS: Ubuntu 16:04\r\n\r\n**Additional context**\r\nNone\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/598", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/598/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/598/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/598/events", "html_url": "https://github.com/nameko/nameko/issues/598", "id": 394284364, "node_id": "MDU6SXNzdWUzOTQyODQzNjQ=", "number": 598, "title": "Microservice registry", "user": {"login": "LiuG-lynx", "id": 29352057, "node_id": "MDQ6VXNlcjI5MzUyMDU3", "avatar_url": "https://avatars0.githubusercontent.com/u/29352057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LiuG-lynx", "html_url": "https://github.com/LiuG-lynx", "followers_url": "https://api.github.com/users/LiuG-lynx/followers", "following_url": "https://api.github.com/users/LiuG-lynx/following{/other_user}", "gists_url": "https://api.github.com/users/LiuG-lynx/gists{/gist_id}", "starred_url": "https://api.github.com/users/LiuG-lynx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LiuG-lynx/subscriptions", "organizations_url": "https://api.github.com/users/LiuG-lynx/orgs", "repos_url": "https://api.github.com/users/LiuG-lynx/repos", "events_url": "https://api.github.com/users/LiuG-lynx/events{/privacy}", "received_events_url": "https://api.github.com/users/LiuG-lynx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-27T03:30:33Z", "updated_at": "2019-05-20T08:31:33Z", "closed_at": "2018-12-30T12:27:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I use nameko, I can't organize micro-services very well. What is the solution?Using a microservice registration framework in another language?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/595", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/595/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/595/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/595/events", "html_url": "https://github.com/nameko/nameko/issues/595", "id": 383955270, "node_id": "MDU6SXNzdWUzODM5NTUyNzA=", "number": 595, "title": "Is there any way to stop nameko process?", "user": {"login": "wuzechuan", "id": 14210962, "node_id": "MDQ6VXNlcjE0MjEwOTYy", "avatar_url": "https://avatars1.githubusercontent.com/u/14210962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wuzechuan", "html_url": "https://github.com/wuzechuan", "followers_url": "https://api.github.com/users/wuzechuan/followers", "following_url": "https://api.github.com/users/wuzechuan/following{/other_user}", "gists_url": "https://api.github.com/users/wuzechuan/gists{/gist_id}", "starred_url": "https://api.github.com/users/wuzechuan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wuzechuan/subscriptions", "organizations_url": "https://api.github.com/users/wuzechuan/orgs", "repos_url": "https://api.github.com/users/wuzechuan/repos", "events_url": "https://api.github.com/users/wuzechuan/events{/privacy}", "received_events_url": "https://api.github.com/users/wuzechuan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-24T03:28:01Z", "updated_at": "2018-11-24T12:29:03Z", "closed_at": "2018-11-24T12:28:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I used to use celery to execute task to get celery worker queue id, And now I am using nameko,. So, how to get rpc queue id when I want to aborting the process.\r\n\r\n[Environment]:\r\nNameko version: 2.11.0\r\nPython version: 3.6.7\r\nOS: windows 10", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/588", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/588/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/588/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/588/events", "html_url": "https://github.com/nameko/nameko/issues/588", "id": 379098661, "node_id": "MDU6SXNzdWUzNzkwOTg2NjE=", "number": 588, "title": "Pycharm debugger crashes on pytest as soon as nameko package is installed ", "user": {"login": "wasmitnetzen", "id": 1819478, "node_id": "MDQ6VXNlcjE4MTk0Nzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1819478?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wasmitnetzen", "html_url": "https://github.com/wasmitnetzen", "followers_url": "https://api.github.com/users/wasmitnetzen/followers", "following_url": "https://api.github.com/users/wasmitnetzen/following{/other_user}", "gists_url": "https://api.github.com/users/wasmitnetzen/gists{/gist_id}", "starred_url": "https://api.github.com/users/wasmitnetzen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wasmitnetzen/subscriptions", "organizations_url": "https://api.github.com/users/wasmitnetzen/orgs", "repos_url": "https://api.github.com/users/wasmitnetzen/repos", "events_url": "https://api.github.com/users/wasmitnetzen/events{/privacy}", "received_events_url": "https://api.github.com/users/wasmitnetzen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-09T10:07:37Z", "updated_at": "2019-12-27T02:36:27Z", "closed_at": "2018-12-05T10:12:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "(Note: I think it is more likely to be a PyCharm bug, which is why I have also created an issue on their [bug tracker](https://youtrack.jetbrains.com/issue/PY-32611).)\r\nWhen I try to run a simple pytest in PyCharm in debug mode when nameko is installed, the debugger crashes with a SIGABRT signal.\r\n\r\n**To Reproduce**\r\n* Make a PyCharm project\r\n* Install nameko\r\n* Make a test directory\r\n* Make a test file\r\n```\r\ndef test_nameko():\r\n    assert True\r\n    print(\"Hello World!\")\r\n```\r\n\r\nRun the PyCharm debugger on this file.\r\n\r\n**Expected behavior**\r\nA normal output, as can be seen when running the file normally.\r\n\r\n**Environment:**\r\n - Nameko version: 2.11.0\r\n - Python version: 3.6.7\r\n - OS: Ubuntu 18.10\r\n\r\nThere is also #560 which might have been the same problem, but there is no helpful content there.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/584", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/584/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/584/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/584/events", "html_url": "https://github.com/nameko/nameko/issues/584", "id": 372174429, "node_id": "MDU6SXNzdWUzNzIxNzQ0Mjk=", "number": 584, "title": "'Config' object has no attribute 'get'", "user": {"login": "qqqays", "id": 22659021, "node_id": "MDQ6VXNlcjIyNjU5MDIx", "avatar_url": "https://avatars2.githubusercontent.com/u/22659021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qqqays", "html_url": "https://github.com/qqqays", "followers_url": "https://api.github.com/users/qqqays/followers", "following_url": "https://api.github.com/users/qqqays/following{/other_user}", "gists_url": "https://api.github.com/users/qqqays/gists{/gist_id}", "starred_url": "https://api.github.com/users/qqqays/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qqqays/subscriptions", "organizations_url": "https://api.github.com/users/qqqays/orgs", "repos_url": "https://api.github.com/users/qqqays/repos", "events_url": "https://api.github.com/users/qqqays/events{/privacy}", "received_events_url": "https://api.github.com/users/qqqays/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-20T05:11:14Z", "updated_at": "2018-10-22T02:34:17Z", "closed_at": "2018-10-22T02:28:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Please use the [Discourse forum](https://discourse.nameko.io/) for support requests and questions.**\r\n\r\n**Describe the bug**\r\nclass of nameko.dependency_providers.Config has no attribute 'get'\r\n\r\nfrom guide [Built-in Dependency Providers](https://nameko.readthedocs.io/en/stable/built_in_dependency_providers.html#config)\r\n\r\n**To Reproduce**\r\n`\r\nfrom nameko.dependency_providers import Config\r\n\r\nconfig = Config( )\r\n\r\nconfig.get('value')\r\n`\r\nraise exception : AttributeError: 'Config' object has no attribute 'get'\r\n\r\n**Expected behavior**\r\nI want to read YAML configuration file.\r\n$ nameko run server-Class --config config.yaml \r\n\r\n**Environment (please complete the following information):**\r\n - Nameko version:2.9.1 or 2.11.0\r\n - Python version: 3.6.3\r\n - OS: windows10\r\n\r\n**Additional context**\r\nnothing", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/571", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/571/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/571/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/571/events", "html_url": "https://github.com/nameko/nameko/issues/571", "id": 354259704, "node_id": "MDU6SXNzdWUzNTQyNTk3MDQ=", "number": 571, "title": "Pls. provide the example of how to handle the event outside nameko", "user": {"login": "wyattsuen", "id": 42318414, "node_id": "MDQ6VXNlcjQyMzE4NDE0", "avatar_url": "https://avatars1.githubusercontent.com/u/42318414?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wyattsuen", "html_url": "https://github.com/wyattsuen", "followers_url": "https://api.github.com/users/wyattsuen/followers", "following_url": "https://api.github.com/users/wyattsuen/following{/other_user}", "gists_url": "https://api.github.com/users/wyattsuen/gists{/gist_id}", "starred_url": "https://api.github.com/users/wyattsuen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wyattsuen/subscriptions", "organizations_url": "https://api.github.com/users/wyattsuen/orgs", "repos_url": "https://api.github.com/users/wyattsuen/repos", "events_url": "https://api.github.com/users/wyattsuen/events{/privacy}", "received_events_url": "https://api.github.com/users/wyattsuen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-27T10:10:12Z", "updated_at": "2018-09-03T10:00:52Z", "closed_at": "2018-09-03T10:00:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks very much for this very beatiful framework. I just use nameko in a week, and switch my most work architechture to it. I have to use kombu to accept the event message in tornado. As I see the kombu document for these days, I find it difficult for me to understand the process without the rabbitmq experience. Can you help me to provide the example how to get event_handler outside nameko using kombu.\r\n\r\n```\r\nclass ServiceA:\r\n    \"\"\" Event dispatching service. \"\"\"\r\n    name = \"service_a\"\r\n\r\n    dispatch = EventDispatcher()\r\n\r\n    @rpc\r\n    def dispatching_method(self, payload):\r\n        self.dispatch(\"event_type\", payload)\r\n```\r\n\r\nI make a simple example for it. One process can accept the message. But two processes will accept only a part of messages each. I can't find how to get the broadcast message in many processes. Because tornado websocket can not use sub thread to accept the 'while true' message, how to write the 'while true' in 'async def' coroutine to 'await drain_events()'?\r\n\r\n```\r\nfrom kombu import Connection, Exchange, Queue\r\nexchange=Exchange('service_a.events', 'topic', durable=True, auto_delete=True)\r\nqueue=Queue('hello', exchange=exchange, routing_key='event_type')\r\n\r\ndef process_msg(body, message):\r\n    print(body)\r\n    message.ack()\r\n\r\nwith Connection('pyamqp://guest:guest@localhost') as conn:\r\n    with conn.Consumer(queue, callbacks=[process_msg]) as consumer:\r\n        while True:\r\n            conn.drain_events()\r\n```\r\n\r\nHow to accept this event with SERVICE_POOL and BROADCAST method in kombu without nameko. I think the example will be very helpful to add to the nameko document. Or it is best to provide a standalone event_handler just like the standalone rpc service.\r\n\r\nAlthough I have not met the problem, but I think it useful to send the event outside nameko, and accept the event in nameko is also welcome. Guessing tornado accept a message from user, and I want to send this message to many potential services, maybe broadcast the event is useful.\r\n\r\n```\r\nclass ServiceB:\r\n    \"\"\" Event listening service. \"\"\"\r\n    name = \"service_b\"\r\n\r\n    @event_handler(\"service_a\", \"event_type\")\r\n    def handle_event(self, payload):\r\n        print(\"service b received:\", payload)\r\n```\r\n\r\nHow to send the event with SERVICE_POOL and BROADCAST method in kombu without nameko. The examples are very important for us without rabbitmq experiences. So kindly and patiently providing the examples is welcome. Thanks a lot.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/570", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/570/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/570/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/570/events", "html_url": "https://github.com/nameko/nameko/issues/570", "id": 353419392, "node_id": "MDU6SXNzdWUzNTM0MTkzOTI=", "number": 570, "title": "How can I connect event callback to tornado?", "user": {"login": "wyattsuen", "id": 42318414, "node_id": "MDQ6VXNlcjQyMzE4NDE0", "avatar_url": "https://avatars1.githubusercontent.com/u/42318414?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wyattsuen", "html_url": "https://github.com/wyattsuen", "followers_url": "https://api.github.com/users/wyattsuen/followers", "following_url": "https://api.github.com/users/wyattsuen/following{/other_user}", "gists_url": "https://api.github.com/users/wyattsuen/gists{/gist_id}", "starred_url": "https://api.github.com/users/wyattsuen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wyattsuen/subscriptions", "organizations_url": "https://api.github.com/users/wyattsuen/orgs", "repos_url": "https://api.github.com/users/wyattsuen/repos", "events_url": "https://api.github.com/users/wyattsuen/events{/privacy}", "received_events_url": "https://api.github.com/users/wyattsuen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-23T14:52:59Z", "updated_at": "2018-08-25T11:34:13Z", "closed_at": "2018-08-23T21:46:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a service to accept data from remote servers, and need to broadcast the data to my other services. These other services(I use tornado) need to show these data on websocket connections. I think event driven program is suitable. But how can I use the @event_handler outside nameko but in tornado?\r\n\r\nThe document give the example, but I have no way to send the 'payload' to my tornado websocket server.\r\n\r\n```\r\nclasss ServiceB:\r\n     name='service_b'\r\n\r\n    tornado_service=??   how can I inject the tornado websocket callback?\r\n\r\n    @event_handler('service_a', 'event_type')\r\n    def handle_event(self, payload):\r\n        print('service b received:', payload)\r\n        tornado_service.callback(payload)??       but tornado server can't embed in nameko server.\r\n```\r\n\r\nAre there any graceful way for nameko to open a standalone event handler in flask or tornado?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/569", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/569/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/569/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/569/events", "html_url": "https://github.com/nameko/nameko/issues/569", "id": 353406977, "node_id": "MDU6SXNzdWUzNTM0MDY5Nzc=", "number": 569, "title": "Kafka entrypoint", "user": {"login": "cblegare", "id": 2456133, "node_id": "MDQ6VXNlcjI0NTYxMzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2456133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cblegare", "html_url": "https://github.com/cblegare", "followers_url": "https://api.github.com/users/cblegare/followers", "following_url": "https://api.github.com/users/cblegare/following{/other_user}", "gists_url": "https://api.github.com/users/cblegare/gists{/gist_id}", "starred_url": "https://api.github.com/users/cblegare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cblegare/subscriptions", "organizations_url": "https://api.github.com/users/cblegare/orgs", "repos_url": "https://api.github.com/users/cblegare/repos", "events_url": "https://api.github.com/users/cblegare/events{/privacy}", "received_events_url": "https://api.github.com/users/cblegare/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 373226902, "node_id": "MDU6TGFiZWwzNzMyMjY5MDI=", "url": "https://api.github.com/repos/nameko/nameko/labels/feature%20request", "name": "feature request", "color": "c5def5", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-08-23T14:26:42Z", "updated_at": "2018-11-14T00:39:46Z", "closed_at": "2018-11-14T00:39:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\nWe are migrating some of our queues to [Kafka](https://kafka.apache.org/)\r\n\r\n**Describe the solution you'd like**\r\nA Kafka entrypoint!\r\n\r\n**Additional context**\r\nI am willing to contribute this entrypoint, but only if your interested to merge it.  Are you?  If not, I'll keep it as a dirty hack on my side and will not bother following Nameko's contributing guidelines.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/568", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/568/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/568/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/568/events", "html_url": "https://github.com/nameko/nameko/issues/568", "id": 351642996, "node_id": "MDU6SXNzdWUzNTE2NDI5OTY=", "number": 568, "title": "Can I use nameko to transfer some small files?", "user": {"login": "MMmaomao", "id": 4596276, "node_id": "MDQ6VXNlcjQ1OTYyNzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4596276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MMmaomao", "html_url": "https://github.com/MMmaomao", "followers_url": "https://api.github.com/users/MMmaomao/followers", "following_url": "https://api.github.com/users/MMmaomao/following{/other_user}", "gists_url": "https://api.github.com/users/MMmaomao/gists{/gist_id}", "starred_url": "https://api.github.com/users/MMmaomao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MMmaomao/subscriptions", "organizations_url": "https://api.github.com/users/MMmaomao/orgs", "repos_url": "https://api.github.com/users/MMmaomao/repos", "events_url": "https://api.github.com/users/MMmaomao/events{/privacy}", "received_events_url": "https://api.github.com/users/MMmaomao/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-17T15:40:20Z", "updated_at": "2018-08-20T08:35:54Z", "closed_at": "2018-08-20T08:35:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys,\r\nI just want to upload one small file by using nameko to the server which nameko service is running on.\r\nIs this possible in nameko?\r\nAny advice is very appreciated.\r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/567", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/567/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/567/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/567/events", "html_url": "https://github.com/nameko/nameko/issues/567", "id": 349813632, "node_id": "MDU6SXNzdWUzNDk4MTM2MzI=", "number": 567, "title": "why rpc and timer can't work together in direct running in module", "user": {"login": "wyattsuen", "id": 42318414, "node_id": "MDQ6VXNlcjQyMzE4NDE0", "avatar_url": "https://avatars1.githubusercontent.com/u/42318414?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wyattsuen", "html_url": "https://github.com/wyattsuen", "followers_url": "https://api.github.com/users/wyattsuen/followers", "following_url": "https://api.github.com/users/wyattsuen/following{/other_user}", "gists_url": "https://api.github.com/users/wyattsuen/gists{/gist_id}", "starred_url": "https://api.github.com/users/wyattsuen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wyattsuen/subscriptions", "organizations_url": "https://api.github.com/users/wyattsuen/orgs", "repos_url": "https://api.github.com/users/wyattsuen/repos", "events_url": "https://api.github.com/users/wyattsuen/events{/privacy}", "received_events_url": "https://api.github.com/users/wyattsuen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-12T13:41:39Z", "updated_at": "2018-08-13T06:05:56Z", "closed_at": "2018-08-13T06:05:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have met a strange problem, and test many times. I'm sure this is a bug, but how to solve it?\r\nwhen the code is following, and run it with command line 'nameko run module', the timer runs normally. But when I run it with command line 'python module.py', the timer doesn't work.\r\n\r\n```\r\nclass ServiceA:\r\n    name='service_a'\r\n    \r\n    @rpc\r\n    def dosomething(self):\r\n        return 'hello world'\r\n\r\n    @timer(interval=1)\r\n    def daemon(self):\r\n        print('ping')\r\n\r\nif __name__=='__main__':  \r\n    runner=ServiceRunner(config={'AMQP_URI': 'pyamqp://guest:guest@localhost'})\r\n    runner.add_service(ServiceA)\r\n    runner.start()\r\n    runner.wait()\r\n```\r\n\r\n\r\nAnd If I run following code, no matter 'nameko run module' or 'python module.py', the timer runs normally.\r\n\r\n```\r\nclass ServiceA:\r\n    name='service_a'\r\n\r\n    @timer(interval=1)\r\n    def daemon(self):\r\n        print('ping')\r\n\r\nif __name__=='__main__':  \r\n    runner=ServiceRunner(config={'AMQP_URI': 'pyamqp://guest:guest@localhost'})\r\n    runner.add_service(ServiceA)\r\n    runner.start()\r\n    runner.wait()\r\n```\r\n\r\nSo can anyone help solving it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/562", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/562/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/562/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/562/events", "html_url": "https://github.com/nameko/nameko/issues/562", "id": 347120787, "node_id": "MDU6SXNzdWUzNDcxMjA3ODc=", "number": 562, "title": "Heartbeat for Publisher and ClusterRPCProxy", "user": {"login": "bobh66", "id": 4935304, "node_id": "MDQ6VXNlcjQ5MzUzMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4935304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobh66", "html_url": "https://github.com/bobh66", "followers_url": "https://api.github.com/users/bobh66/followers", "following_url": "https://api.github.com/users/bobh66/following{/other_user}", "gists_url": "https://api.github.com/users/bobh66/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobh66/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobh66/subscriptions", "organizations_url": "https://api.github.com/users/bobh66/orgs", "repos_url": "https://api.github.com/users/bobh66/repos", "events_url": "https://api.github.com/users/bobh66/events{/privacy}", "received_events_url": "https://api.github.com/users/bobh66/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-08-02T18:16:33Z", "updated_at": "2018-08-09T13:44:32Z", "closed_at": "2018-08-09T11:38:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have several long-running services that invoke Nameko services by ClusterRPCProxy, or they send events into Nameko services using the event_dispatcher.\r\n\r\nI noticed that the RabbitMQ timeout/hearbeat for the Nameko services is always 60, but the connections from the ClusterRPCProxy and event Publisher have the heartbeat set to 0.\r\n\r\nIs there any reason not to enable the default heartbeat on the Connection objects created by the Publisher and PollingQueueConsumer objects?  It can be configurable like the ssl option that was recently added.\r\n\r\nI'm happy to submit a PR if this is acceptable.\r\n\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/561", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/561/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/561/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/561/events", "html_url": "https://github.com/nameko/nameko/issues/561", "id": 346964773, "node_id": "MDU6SXNzdWUzNDY5NjQ3NzM=", "number": 561, "title": "How to fetch list of all micro services", "user": {"login": "qqqays", "id": 22659021, "node_id": "MDQ6VXNlcjIyNjU5MDIx", "avatar_url": "https://avatars2.githubusercontent.com/u/22659021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qqqays", "html_url": "https://github.com/qqqays", "followers_url": "https://api.github.com/users/qqqays/followers", "following_url": "https://api.github.com/users/qqqays/following{/other_user}", "gists_url": "https://api.github.com/users/qqqays/gists{/gist_id}", "starred_url": "https://api.github.com/users/qqqays/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qqqays/subscriptions", "organizations_url": "https://api.github.com/users/qqqays/orgs", "repos_url": "https://api.github.com/users/qqqays/repos", "events_url": "https://api.github.com/users/qqqays/events{/privacy}", "received_events_url": "https://api.github.com/users/qqqays/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-02T11:06:53Z", "updated_at": "2018-08-03T03:02:56Z", "closed_at": "2018-08-03T02:57:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "We call the micro service functions by using methods of rpc,\r\nlike this:\r\n\r\n`from nameko.standalone.rpc import ClusterRpcProxy`\r\n`.....`\r\n`    with ClusterRpcProxy(CONFIG) as rpc:`\r\n `       result = rpc.service_name.function()`\r\n\r\nSo, how to find all micro service that the ClusterRpcProxy can call.\r\nwhether I must use python connect RabbitMQ queue for gaining the all service name.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/560", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/560/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/560/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/560/events", "html_url": "https://github.com/nameko/nameko/issues/560", "id": 346508758, "node_id": "MDU6SXNzdWUzNDY1MDg3NTg=", "number": 560, "title": "How to debug nameko with pycharm", "user": {"login": "qqqays", "id": 22659021, "node_id": "MDQ6VXNlcjIyNjU5MDIx", "avatar_url": "https://avatars2.githubusercontent.com/u/22659021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qqqays", "html_url": "https://github.com/qqqays", "followers_url": "https://api.github.com/users/qqqays/followers", "following_url": "https://api.github.com/users/qqqays/following{/other_user}", "gists_url": "https://api.github.com/users/qqqays/gists{/gist_id}", "starred_url": "https://api.github.com/users/qqqays/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qqqays/subscriptions", "organizations_url": "https://api.github.com/users/qqqays/orgs", "repos_url": "https://api.github.com/users/qqqays/repos", "events_url": "https://api.github.com/users/qqqays/events{/privacy}", "received_events_url": "https://api.github.com/users/qqqays/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-01T08:57:46Z", "updated_at": "2018-08-02T11:16:47Z", "closed_at": "2018-08-02T10:35:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I run the nameko RPC service at console with command 'nameko run service_name',\r\nbut it can't execute step by step.\r\nIs there method for debugging nameko.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/558", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/558/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/558/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/558/events", "html_url": "https://github.com/nameko/nameko/issues/558", "id": 343209746, "node_id": "MDU6SXNzdWUzNDMyMDk3NDY=", "number": 558, "title": "max_workers = 1 explanation", "user": {"login": "rizplate", "id": 3771231, "node_id": "MDQ6VXNlcjM3NzEyMzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/3771231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rizplate", "html_url": "https://github.com/rizplate", "followers_url": "https://api.github.com/users/rizplate/followers", "following_url": "https://api.github.com/users/rizplate/following{/other_user}", "gists_url": "https://api.github.com/users/rizplate/gists{/gist_id}", "starred_url": "https://api.github.com/users/rizplate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rizplate/subscriptions", "organizations_url": "https://api.github.com/users/rizplate/orgs", "repos_url": "https://api.github.com/users/rizplate/repos", "events_url": "https://api.github.com/users/rizplate/events{/privacy}", "received_events_url": "https://api.github.com/users/rizplate/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-20T18:42:24Z", "updated_at": "2018-08-13T09:29:31Z", "closed_at": "2018-08-13T09:29:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Q1\r\nIf max_workers setting is set to 1, does it mean that nameko waits until the service class method is completed and then sends the next message? i.e. work as a regular queue?\r\n\r\n### Q2\r\nalso is there a way that I can log or see current state of system i.e.\r\n- num of services \r\n- num of services-methods active\r\n- num of request/response for each service-method\r\n\r\n### Q3\r\ndoes nameko provide at-least once or at most once guarantees, is it configurable? i.e. how does retry happens? does it offload retries to rabbitmq or does something on its own, i.e. timeout or exception retry?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/555", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/555/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/555/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/555/events", "html_url": "https://github.com/nameko/nameko/issues/555", "id": 340981310, "node_id": "MDU6SXNzdWUzNDA5ODEzMTA=", "number": 555, "title": "worker_factory is not mocking dependencies as expected", "user": {"login": "muzzi92", "id": 37450505, "node_id": "MDQ6VXNlcjM3NDUwNTA1", "avatar_url": "https://avatars1.githubusercontent.com/u/37450505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/muzzi92", "html_url": "https://github.com/muzzi92", "followers_url": "https://api.github.com/users/muzzi92/followers", "following_url": "https://api.github.com/users/muzzi92/following{/other_user}", "gists_url": "https://api.github.com/users/muzzi92/gists{/gist_id}", "starred_url": "https://api.github.com/users/muzzi92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/muzzi92/subscriptions", "organizations_url": "https://api.github.com/users/muzzi92/orgs", "repos_url": "https://api.github.com/users/muzzi92/repos", "events_url": "https://api.github.com/users/muzzi92/events{/privacy}", "received_events_url": "https://api.github.com/users/muzzi92/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-07-13T11:19:03Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI'm brand new to Nameko but I have encountered an issue whilst trying to unit test my service. \r\nI am using pytest, and I was hoping to create a worker so that I can test whether my dependency's function was called inside my service's function. \r\n\r\nHowever, before getting to that stage, I was doing provisional tests on my newly created worker to check that its dependencies had been mocked with MagicMock. It is at this point it tells me the dependency is not an instance of Mock, and hence I cannot move on to setting side_effects or asserting calls.\r\n\r\nAm I missing something that allows worker dependencies to be mocked?\r\n\r\nAny tips for testing Nameko are greatly appreciated.\r\n\r\nCode below.\r\n\r\nService:\r\n```python\r\nfrom payment_service import SecondService\r\nfrom nameko.events import event_handler\r\nfrom foobar import FooBar\r\n\r\nclass FirstService(object):\r\n\r\n    name = 'first_service'\r\n\r\n    dependency = FooBar()\r\n\r\n    @event_handler('second_service', 'complete')\r\n    def foo(self, payload):\r\n        self.dependency.bar(param)\r\n```\r\n\r\nTest:\r\n```python\r\nfrom first_service import FirstService\r\nfrom nameko.testing.services import worker_factory\r\nfrom unittest.mock import Mock\r\n\r\nclass TestFirstService(object):\r\n\r\n    def test_foo(self):\r\n        service = worker_factory(FirstService)\r\n        assert isinstance(service, FirstService)           #passes\r\n        assert isinstance(service.dependency, Mock)         #fails\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/552", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/552/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/552/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/552/events", "html_url": "https://github.com/nameko/nameko/issues/552", "id": 337691220, "node_id": "MDU6SXNzdWUzMzc2OTEyMjA=", "number": 552, "title": "Trying to run two instances of rabbitMQ for Nameko.", "user": {"login": "sammy200592", "id": 40777433, "node_id": "MDQ6VXNlcjQwNzc3NDMz", "avatar_url": "https://avatars3.githubusercontent.com/u/40777433?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sammy200592", "html_url": "https://github.com/sammy200592", "followers_url": "https://api.github.com/users/sammy200592/followers", "following_url": "https://api.github.com/users/sammy200592/following{/other_user}", "gists_url": "https://api.github.com/users/sammy200592/gists{/gist_id}", "starred_url": "https://api.github.com/users/sammy200592/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sammy200592/subscriptions", "organizations_url": "https://api.github.com/users/sammy200592/orgs", "repos_url": "https://api.github.com/users/sammy200592/repos", "events_url": "https://api.github.com/users/sammy200592/events{/privacy}", "received_events_url": "https://api.github.com/users/sammy200592/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-07-02T23:01:15Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Matt,\r\n\r\nI tried the method you suggested on the link\r\n<https://github.com/nameko/nameko/issues/498>\r\n\r\nI did this:\r\n**AMQP_URI: amqp://guest:guest@localhost:562/;amqp://guest:guest@localhost:5672/**\r\n\r\nThis works fine when my first port address is set to the correct port i.e 5672 **but** it gives me an **error** when the **first port is wrong** and the **second port is right** just like in the case above.\r\n\r\nI am trying this for the Nameko service and getting the following error:\r\n**OSError: [Errno 61] ECONNREFUSED**", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/551", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/551/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/551/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/551/events", "html_url": "https://github.com/nameko/nameko/issues/551", "id": 337284820, "node_id": "MDU6SXNzdWUzMzcyODQ4MjA=", "number": 551, "title": "An error occurred while running too many services  in windows", "user": {"login": "huyidao625", "id": 9815465, "node_id": "MDQ6VXNlcjk4MTU0NjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9815465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huyidao625", "html_url": "https://github.com/huyidao625", "followers_url": "https://api.github.com/users/huyidao625/followers", "following_url": "https://api.github.com/users/huyidao625/following{/other_user}", "gists_url": "https://api.github.com/users/huyidao625/gists{/gist_id}", "starred_url": "https://api.github.com/users/huyidao625/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huyidao625/subscriptions", "organizations_url": "https://api.github.com/users/huyidao625/orgs", "repos_url": "https://api.github.com/users/huyidao625/repos", "events_url": "https://api.github.com/users/huyidao625/events{/privacy}", "received_events_url": "https://api.github.com/users/huyidao625/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-01T11:45:02Z", "updated_at": "2018-07-02T01:23:10Z", "closed_at": "2018-07-01T15:44:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n\r\n\r\n**code like this**\r\n\r\n```python\r\nclass Test:\r\n    name = \"test\"\r\n    @rpc\r\n    def do(self,name):\r\n        print (name)\r\n        return \"test, {n}!\".format(n=name)\r\n\r\nif __name__ == '__main__':\r\n    service_runner = ServiceRunner(config)\r\n    for i in range(1000):\r\n        Test.name += '_'+str(i)\r\n        service_runner.add_service(Test)\r\n        Test.name ='test'\r\n    service_runner.start()     \r\n    service_runner.wait()\r\n```\r\n\r\n**error**\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\hufei\\eclipse-workspace2\\Test\\containers2.py\", line 34, in <module>\r\n    service_runner.start()     \r\n  File \"C:\\Python36\\lib\\site-packages\\nameko\\runners.py\", line 66, in start\r\n    SpawningProxy(self.containers).start()\r\n  File \"C:\\Python36\\lib\\site-packages\\nameko\\utils\\__init__.py\", line 186, in spawning_method\r\n    return list(pool.imap(call, self._items))\r\n  File \"C:\\Python36\\lib\\site-packages\\eventlet\\greenpool.py\", line 244, in next\r\n    val = self.waiters.get().wait()\r\n  File \"C:\\Python36\\lib\\site-packages\\eventlet\\greenthread.py\", line 179, in wait\r\n    return self._exit_event.wait()\r\n  File \"C:\\Python36\\lib\\site-packages\\eventlet\\event.py\", line 121, in wait\r\n    return hubs.get_hub().switch()\r\n  File \"C:\\Python36\\lib\\site-packages\\eventlet\\hubs\\hub.py\", line 295, in switch\r\n    return self.greenlet.switch()\r\n  File \"C:\\Python36\\lib\\site-packages\\eventlet\\hubs\\hub.py\", line 349, in run\r\n    self.wait(0)\r\n  File \"C:\\Python36\\lib\\site-packages\\eventlet\\hubs\\selects.py\", line 38, in wait\r\n    r, w, er = select.select(readers.keys(), writers.keys(), all_fds, seconds)\r\nValueError: too many file descriptors in select()\r\n```\r\n\r\n\r\n**version**\r\n\r\n    os ==  Win7 _x86_64\r\n    nameko == 2.9.0\r\n    rabbitmq==3.7.4\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/550", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/550/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/550/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/550/events", "html_url": "https://github.com/nameko/nameko/issues/550", "id": 336060616, "node_id": "MDU6SXNzdWUzMzYwNjA2MTY=", "number": 550, "title": "RuntimeError: no suitable implementation for this system", "user": {"login": "xiongqiangcs", "id": 7856886, "node_id": "MDQ6VXNlcjc4NTY4ODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/7856886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiongqiangcs", "html_url": "https://github.com/xiongqiangcs", "followers_url": "https://api.github.com/users/xiongqiangcs/followers", "following_url": "https://api.github.com/users/xiongqiangcs/following{/other_user}", "gists_url": "https://api.github.com/users/xiongqiangcs/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiongqiangcs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiongqiangcs/subscriptions", "organizations_url": "https://api.github.com/users/xiongqiangcs/orgs", "repos_url": "https://api.github.com/users/xiongqiangcs/repos", "events_url": "https://api.github.com/users/xiongqiangcs/events{/privacy}", "received_events_url": "https://api.github.com/users/xiongqiangcs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-27T03:02:09Z", "updated_at": "2018-06-27T06:18:37Z", "closed_at": "2018-06-27T06:18:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "After `nameko run helloworld`,  appear\r\n\r\n```\r\nException AttributeError: \"'_SocketDuckForFd' object has no attribute '_closed'\" in <bound method _SocketDuckForFd.__del__ of _SocketDuckForFd:13> ignored\r\nException AttributeError: \"'_SocketDuckForFd' object has no attribute '_closed'\" in <bound method _SocketDuckForFd.__del__ of _SocketDuckForFd:14> ignored\r\nException AttributeError: \"'_SocketDuckForFd' object has no attribute '_closed'\" in <bound method _SocketDuckForFd.__del__ of _SocketDuckForFd:16> ignored\r\nException AttributeError: \"'_SocketDuckForFd' object has no attribute '_closed'\" in <bound method _SocketDuckForFd.__del__ of _SocketDuckForFd:17> ignored\r\nException AttributeError: \"'_SocketDuckForFd' object has no attribute '_closed'\" in <bound method _SocketDuckForFd.__del__ of _SocketDuckForFd:8> ignored\r\nException AttributeError: \"'_SocketDuckForFd' object has no attribute '_closed'\" in <bound method _SocketDuckForFd.__del__ of _SocketDuckForFd:9> ignored\r\nstarting services: greeting_service\r\nException AttributeError: \"'_SocketDuckForFd' object has no attribute '_closed'\" in <bound method _SocketDuckForFd.__del__ of _SocketDuckForFd:7> ignored\r\nException AttributeError: \"'_SocketDuckForFd' object has no attribute '_closed'\" in <bound method _SocketDuckForFd.__del__ of _SocketDuckForFd:10> ignored\r\nTraceback (most recent call last):\r\n  File \"/home/XXXXX/anaconda2/bin/nameko\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/home/XXXXX/anaconda2/lib/python2.7/site-packages/nameko/cli/main.py\", line 104, in main\r\n    args.main(args)\r\n  File \"/home/XXXXX/anaconda2/lib/python2.7/site-packages/nameko/cli/commands.py\", line 110, in main\r\n    main(args)\r\n  File \"/home/XXXXX/anaconda2/lib/python2.7/site-packages/nameko/cli/run.py\", line 184, in main\r\n    run(services, config, backdoor_port=args.backdoor_port)\r\n  File \"/home/XXXXX/anaconda2/lib/python2.7/site-packages/nameko/cli/run.py\", line 131, in run\r\n    service_runner.start()\r\n  File \"/home/XXXXX/anaconda2/lib/python2.7/site-packages/nameko/runners.py\", line 66, in start\r\n    SpawningProxy(self.containers).start()\r\n  File \"/home/XXXXX/anaconda2/lib/python2.7/site-packages/nameko/utils/__init__.py\", line 186, in spawning_method\r\n    return list(pool.imap(call, self._items))\r\n  File \"/home/XXXXX/anaconda2/lib/python2.7/site-packages/eventlet/greenpool.py\", line 175, in imap\r\n    return self.starmap(function, six.moves.zip(*iterables))\r\n  File \"/home/XXXXX/anaconda2/lib/python2.7/site-packages/eventlet/greenpool.py\", line 160, in starmap\r\n    eventlet.spawn_n(self._do_map, function, iterable, gi)\r\n  File \"/home/XXXXX/anaconda2/lib/python2.7/site-packages/eventlet/greenthread.py\", line 66, in spawn_n\r\n    return _spawn_n(0, func, args, kwargs)[1]\r\n  File \"/home/XXXXX/anaconda2/lib/python2.7/site-packages/eventlet/greenthread.py\", line 156, in _spawn_n\r\n    hub = hubs.get_hub()\r\n  File \"/home/XXXXX/anaconda2/lib/python2.7/site-packages/eventlet/hubs/__init__.py\", line 116, in get_hub\r\n    use_hub()\r\n  File \"/home/XXXXX/anaconda2/lib/python2.7/site-packages/eventlet/hubs/__init__.py\", line 70, in use_hub\r\n    mod = get_default_hub()\r\n  File \"/home/XXXXX/anaconda2/lib/python2.7/site-packages/eventlet/hubs/__init__.py\", line 38, in get_default_hub\r\n    import eventlet.hubs.epolls\r\n  File \"/home/XXXXX/anaconda2/lib/python2.7/site-packages/eventlet/hubs/epolls.py\", line 27, in <module>\r\n    from eventlet.hubs.hub import BaseHub\r\n  File \"/home/XXXXX/anaconda2/lib/python2.7/site-packages/eventlet/hubs/hub.py\", line 23, in <module>\r\n    from eventlet.support import greenlets as greenlet, clear_sys_exc_info, monotonic, six\r\n  File \"/home/XXXXX/anaconda2/lib/python2.7/site-packages/eventlet/support/monotonic.py\", line 167, in <module>\r\n    raise RuntimeError('no suitable implementation for this system')\r\nRuntimeError: no suitable implementation for this system\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/549", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/549/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/549/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/549/events", "html_url": "https://github.com/nameko/nameko/issues/549", "id": 328625155, "node_id": "MDU6SXNzdWUzMjg2MjUxNTU=", "number": 549, "title": "Importing nameko.cli.run to execute run()", "user": {"login": "gpkc", "id": 4080737, "node_id": "MDQ6VXNlcjQwODA3Mzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4080737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gpkc", "html_url": "https://github.com/gpkc", "followers_url": "https://api.github.com/users/gpkc/followers", "following_url": "https://api.github.com/users/gpkc/following{/other_user}", "gists_url": "https://api.github.com/users/gpkc/gists{/gist_id}", "starred_url": "https://api.github.com/users/gpkc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gpkc/subscriptions", "organizations_url": "https://api.github.com/users/gpkc/orgs", "repos_url": "https://api.github.com/users/gpkc/repos", "events_url": "https://api.github.com/users/gpkc/events{/privacy}", "received_events_url": "https://api.github.com/users/gpkc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-06-01T18:54:03Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it ok to use `nameko.cli.run.run()` from my code directly? I want to give nameko some configurations programmatically, using [dynaconf](https://github.com/rochacbruno/dynaconf), but I do not like the idea of copying and pasting (or \"adapting\") the contents of a run function in my program.\r\nIs `nameko.cli.run.run()` safe to import, or it is not guaranteed to maintain the interface?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/548", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/548/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/548/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/548/events", "html_url": "https://github.com/nameko/nameko/issues/548", "id": 328249821, "node_id": "MDU6SXNzdWUzMjgyNDk4MjE=", "number": 548, "title": "one of our rpc call fails and success in a sequence", "user": {"login": "gitricko", "id": 18060558, "node_id": "MDQ6VXNlcjE4MDYwNTU4", "avatar_url": "https://avatars1.githubusercontent.com/u/18060558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gitricko", "html_url": "https://github.com/gitricko", "followers_url": "https://api.github.com/users/gitricko/followers", "following_url": "https://api.github.com/users/gitricko/following{/other_user}", "gists_url": "https://api.github.com/users/gitricko/gists{/gist_id}", "starred_url": "https://api.github.com/users/gitricko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gitricko/subscriptions", "organizations_url": "https://api.github.com/users/gitricko/orgs", "repos_url": "https://api.github.com/users/gitricko/repos", "events_url": "https://api.github.com/users/gitricko/events{/privacy}", "received_events_url": "https://api.github.com/users/gitricko/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-31T18:33:20Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nJust a trying to crowdsource a possible solution or why a particular error occur. We have a few services that implement a rpc method called heartbeat. Only one particular service has this error (see below) it success and fail and repeat in this pattern. \r\n\r\nWe check our coding and there is nothing specially between this service with others. Our fix was to create rabbitmq instance again (in cloudfoundry backing service)\r\n\r\n```\r\n>>> n.rpc.etc.heartbeat()\r\nTrue\r\n>>> n.rpc.etc.heartbeat()\r\nTraceback (most recent call last):\r\n  File \"<console>\", line 1, in <module>\r\n  File \"/home/vcap/deps/0/conda/envs/dep_env/lib/python3.6/site-packages/nameko/rpc.py\", line 374, in __call__\r\n    return reply.result()\r\n  File \"/home/vcap/deps/0/conda/envs/dep_env/lib/python3.6/site-packages/nameko/rpc.py\", line 332, in result\r\n    raise deserialize(error)\r\nnameko.exceptions.MethodNotFound: heartbeat\r\n>>> n.rpc.etc.heartbeat()\r\nTrue\r\n>>> n.rpc.etc.heartbeat()\r\nTraceback (most recent call last):\r\n  File \"<console>\", line 1, in <module>\r\n  File \"/home/vcap/deps/0/conda/envs/dep_env/lib/python3.6/site-packages/nameko/rpc.py\", line 374, in __call__\r\n    return reply.result()\r\n  File \"/home/vcap/deps/0/conda/envs/dep_env/lib/python3.6/site-packages/nameko/rpc.py\", line 332, in result\r\n    raise deserialize(error)\r\nnameko.exceptions.MethodNotFound: heartbeat\r\n\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/544", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/544/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/544/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/544/events", "html_url": "https://github.com/nameko/nameko/issues/544", "id": 326297983, "node_id": "MDU6SXNzdWUzMjYyOTc5ODM=", "number": 544, "title": "Does Nameko implements gRPC?", "user": {"login": "t1m0t", "id": 3594098, "node_id": "MDQ6VXNlcjM1OTQwOTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3594098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t1m0t", "html_url": "https://github.com/t1m0t", "followers_url": "https://api.github.com/users/t1m0t/followers", "following_url": "https://api.github.com/users/t1m0t/following{/other_user}", "gists_url": "https://api.github.com/users/t1m0t/gists{/gist_id}", "starred_url": "https://api.github.com/users/t1m0t/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t1m0t/subscriptions", "organizations_url": "https://api.github.com/users/t1m0t/orgs", "repos_url": "https://api.github.com/users/t1m0t/repos", "events_url": "https://api.github.com/users/t1m0t/events{/privacy}", "received_events_url": "https://api.github.com/users/t1m0t/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-24T21:15:47Z", "updated_at": "2018-05-26T09:44:11Z", "closed_at": "2018-05-26T09:44:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nSimple question : does Nameko implement gRPC? In case not, would it be a good idea to implement it? How hard coded is nameko's RPC? I mean can we implement other RPC library/framework easily?\r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/543", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/543/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/543/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/543/events", "html_url": "https://github.com/nameko/nameko/issues/543", "id": 324059529, "node_id": "MDU6SXNzdWUzMjQwNTk1Mjk=", "number": 543, "title": "At least once events delivery", "user": {"login": "asyncee", "id": 701191, "node_id": "MDQ6VXNlcjcwMTE5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/701191?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asyncee", "html_url": "https://github.com/asyncee", "followers_url": "https://api.github.com/users/asyncee/followers", "following_url": "https://api.github.com/users/asyncee/following{/other_user}", "gists_url": "https://api.github.com/users/asyncee/gists{/gist_id}", "starred_url": "https://api.github.com/users/asyncee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asyncee/subscriptions", "organizations_url": "https://api.github.com/users/asyncee/orgs", "repos_url": "https://api.github.com/users/asyncee/repos", "events_url": "https://api.github.com/users/asyncee/events{/privacy}", "received_events_url": "https://api.github.com/users/asyncee/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-17T14:53:59Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! Is it possible to implement at least once events delivery?\r\n\r\nI have few microservices broadcasting domain events to event bus and if one of them goes down, them system can become to inconsistent state. Currently i have no idea how to fix this, because there are can be 0..N subscribers to any particular event.\r\n\r\nSo i thought that maybe it is possible that at-least-once-delivery for event messages can be implemented? For example, messages may be persisted in queue for some time until expiration timeout, or something like ReplaySubject (rxjava) may be implemented (it emits all the items of the source Observable, regardless of when the subscriber subscribes).\r\n\r\nOr, maybe, there are already good practices to solve this problem exist?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/540", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/540/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/540/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/540/events", "html_url": "https://github.com/nameko/nameko/issues/540", "id": 320155336, "node_id": "MDU6SXNzdWUzMjAxNTUzMzY=", "number": 540, "title": "config.yml file for WEB_SERVER_ADDRESS", "user": {"login": "gitricko", "id": 18060558, "node_id": "MDQ6VXNlcjE4MDYwNTU4", "avatar_url": "https://avatars1.githubusercontent.com/u/18060558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gitricko", "html_url": "https://github.com/gitricko", "followers_url": "https://api.github.com/users/gitricko/followers", "following_url": "https://api.github.com/users/gitricko/following{/other_user}", "gists_url": "https://api.github.com/users/gitricko/gists{/gist_id}", "starred_url": "https://api.github.com/users/gitricko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gitricko/subscriptions", "organizations_url": "https://api.github.com/users/gitricko/orgs", "repos_url": "https://api.github.com/users/gitricko/repos", "events_url": "https://api.github.com/users/gitricko/events{/privacy}", "received_events_url": "https://api.github.com/users/gitricko/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-04T05:10:04Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is this not possible to do?\r\n\r\n```yml\r\nWEB_SERVER_ADDRESS: '0.0.0.0:${PORT:8000}'\r\n```\r\n\r\nnow i run this command:\r\n```PORT=8080 nameko run --config config.yml trainproxy.service_mocktrainsvr```\r\n\r\nhoping webserver address will change to 8080... it does not work.\r\n\r\n```Error: Misconfigured bind address `0.0.0.0:${PORT:8000}`. Should be `[address:]port` ```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/539", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/539/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/539/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/539/events", "html_url": "https://github.com/nameko/nameko/issues/539", "id": 319438057, "node_id": "MDU6SXNzdWUzMTk0MzgwNTc=", "number": 539, "title": "A way to build a URL route", "user": {"login": "asyncee", "id": 701191, "node_id": "MDQ6VXNlcjcwMTE5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/701191?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asyncee", "html_url": "https://github.com/asyncee", "followers_url": "https://api.github.com/users/asyncee/followers", "following_url": "https://api.github.com/users/asyncee/following{/other_user}", "gists_url": "https://api.github.com/users/asyncee/gists{/gist_id}", "starred_url": "https://api.github.com/users/asyncee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asyncee/subscriptions", "organizations_url": "https://api.github.com/users/asyncee/orgs", "repos_url": "https://api.github.com/users/asyncee/repos", "events_url": "https://api.github.com/users/asyncee/events{/privacy}", "received_events_url": "https://api.github.com/users/asyncee/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-02T07:26:29Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\n\r\nI have a service with eight http endpoints and i need to build urls for it with multiple different parameters. Are there any way to implement something like `url_for` in flask:\r\n\r\nExample:\r\n\r\n```\r\nclass Service:\r\n    @http('GET', '/url-one/<token>')\r\n    def handle_url_one(self, request, token):\r\n        pass\r\n    \r\n    @rpc\r\n    def get_url_one(self):\r\n        return '/url-one/' + token   # This is not DRY and error-prone approach\r\n        # Wanted: return self.url_for(self.handle_url_one, token)\r\n```\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/538", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/538/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/538/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/538/events", "html_url": "https://github.com/nameko/nameko/issues/538", "id": 318734333, "node_id": "MDU6SXNzdWUzMTg3MzQzMzM=", "number": 538, "title": "Identifying a memory leak", "user": {"login": "raybotha", "id": 9902896, "node_id": "MDQ6VXNlcjk5MDI4OTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/9902896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raybotha", "html_url": "https://github.com/raybotha", "followers_url": "https://api.github.com/users/raybotha/followers", "following_url": "https://api.github.com/users/raybotha/following{/other_user}", "gists_url": "https://api.github.com/users/raybotha/gists{/gist_id}", "starred_url": "https://api.github.com/users/raybotha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raybotha/subscriptions", "organizations_url": "https://api.github.com/users/raybotha/orgs", "repos_url": "https://api.github.com/users/raybotha/repos", "events_url": "https://api.github.com/users/raybotha/events{/privacy}", "received_events_url": "https://api.github.com/users/raybotha/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-04-29T17:30:51Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm using the nameko backdoor to try and find the cause of a memory leak, although my service is quite simple and only uses the nameko-sqlalchemy dependency, and rpc.\r\n\r\nHowever the memory use balloons up to around 6GB after handling a few thousand requests, but running pympler does not yield any results:\r\n```\r\n>>> from pympler import muppy\r\n>>> allob = muppy.get_objects()\r\n>>> from pympler import summary\r\n>>> sum = summary.summarize(allob)\r\n>>> summary.print_(sum)\r\n                                          types |   # objects |   total size\r\n=============================================== | =========== | ============\r\n                                    <class 'str |       43963 |      5.76 MB\r\n                                   <class 'dict |        7918 |      3.52 MB\r\n                                   <class 'code |       15101 |      2.08 MB\r\n                                   <class 'type |        2055 |      2.07 MB\r\n                                    <class 'set |        1299 |    502.16 KB\r\n                                  <class 'tuple |        6963 |    472.64 KB\r\n                                   <class 'list |        3412 |    368.48 KB\r\n                                <class 'weakref |        3720 |    290.62 KB\r\n                            <class 'array.array |           2 |    260.79 KB\r\n  <class 'sqlalchemy.sql.visitors.VisitableType |         248 |    256.65 KB\r\n                            function (__init__) |        1145 |    152.07 KB\r\n                            <class 'abc.ABCMeta |         136 |    135.81 KB\r\n                      <class 'getset_descriptor |        1856 |    130.50 KB\r\n                                    <class 'int |        4373 |    122.17 KB\r\n                     <class 'wrapper_descriptor |        1466 |    114.53 KB\r\n```\r\n\r\nIs there a part of the nameko service memory that pympler can't access?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/534", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/534/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/534/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/534/events", "html_url": "https://github.com/nameko/nameko/issues/534", "id": 312203136, "node_id": "MDU6SXNzdWUzMTIyMDMxMzY=", "number": 534, "title": "How to manage lots of services in nameko", "user": {"login": "MMmaomao", "id": 4596276, "node_id": "MDQ6VXNlcjQ1OTYyNzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4596276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MMmaomao", "html_url": "https://github.com/MMmaomao", "followers_url": "https://api.github.com/users/MMmaomao/followers", "following_url": "https://api.github.com/users/MMmaomao/following{/other_user}", "gists_url": "https://api.github.com/users/MMmaomao/gists{/gist_id}", "starred_url": "https://api.github.com/users/MMmaomao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MMmaomao/subscriptions", "organizations_url": "https://api.github.com/users/MMmaomao/orgs", "repos_url": "https://api.github.com/users/MMmaomao/repos", "events_url": "https://api.github.com/users/MMmaomao/events{/privacy}", "received_events_url": "https://api.github.com/users/MMmaomao/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-07T12:36:23Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI'm wondering is there any command like linux when I have lots of services need to be managed.\r\nSo I can restart specific service after I update some code. but let some other services still run.\r\nplease see below\r\n\r\n### linux\r\n```sh\r\nservice mysql start\r\nservice mysql restart\r\nservice mysql stop\r\n```\r\n\r\n### nameko\r\n```sh\r\nnameko mysql start\r\nnameko mysql restart\r\nnameko mysql stop\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/533", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/533/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/533/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/533/events", "html_url": "https://github.com/nameko/nameko/issues/533", "id": 312180204, "node_id": "MDU6SXNzdWUzMTIxODAyMDQ=", "number": 533, "title": "RuntimeError: no suitable implementation for this system", "user": {"login": "TaceyWong", "id": 5282810, "node_id": "MDQ6VXNlcjUyODI4MTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5282810?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaceyWong", "html_url": "https://github.com/TaceyWong", "followers_url": "https://api.github.com/users/TaceyWong/followers", "following_url": "https://api.github.com/users/TaceyWong/following{/other_user}", "gists_url": "https://api.github.com/users/TaceyWong/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaceyWong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaceyWong/subscriptions", "organizations_url": "https://api.github.com/users/TaceyWong/orgs", "repos_url": "https://api.github.com/users/TaceyWong/repos", "events_url": "https://api.github.com/users/TaceyWong/events{/privacy}", "received_events_url": "https://api.github.com/users/TaceyWong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-07T07:20:53Z", "updated_at": "2018-04-25T14:33:12Z", "closed_at": "2018-04-24T14:10:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "While run the \"helloworld\" example:\r\n```sh\r\nException AttributeError: \"'_SocketDuckForFd' object has no attribute '_closed'\" in <bound method _SocketDuckForFd.__del__ of _SocketDuckForFd:14> ignored\r\nException AttributeError: \"'_SocketDuckForFd' object has no attribute '_closed'\" in <bound method _SocketDuckForFd.__del__ of _SocketDuckForFd:15> ignored\r\nException AttributeError: \"'_SocketDuckForFd' object has no attribute '_closed'\" in <bound method _SocketDuckForFd.__del__ of _SocketDuckForFd:17> ignored\r\nException AttributeError: \"'_SocketDuckForFd' object has no attribute '_closed'\" in <bound method _SocketDuckForFd.__del__ of _SocketDuckForFd:18> ignored\r\nException AttributeError: \"'_SocketDuckForFd' object has no attribute '_closed'\" in <bound method _SocketDuckForFd.__del__ of _SocketDuckForFd:8> ignored\r\nException AttributeError: \"'_SocketDuckForFd' object has no attribute '_closed'\" in <bound method _SocketDuckForFd.__del__ of _SocketDuckForFd:9> ignored\r\nstarting services: greeting_service\r\nException AttributeError: \"'_SocketDuckForFd' object has no attribute '_closed'\" in <bound method _SocketDuckForFd.__del__ of _SocketDuckForFd:7> ignored\r\nException AttributeError: \"'_SocketDuckForFd' object has no attribute '_closed'\" in <bound method _SocketDuckForFd.__del__ of _SocketDuckForFd:10> ignored\r\nTraceback (most recent call last):\r\n  File \"/usr/local/bin/nameko\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/home/tacey/.local/lib/python2.7/site-packages/nameko/cli/main.py\", line 66, in main\r\n    args.main(args)\r\n  File \"/home/tacey/.local/lib/python2.7/site-packages/nameko/cli/commands.py\", line 110, in main\r\n    main(args)\r\n  File \"/home/tacey/.local/lib/python2.7/site-packages/nameko/cli/run.py\", line 184, in main\r\n    run(services, config, backdoor_port=args.backdoor_port)\r\n  File \"/home/tacey/.local/lib/python2.7/site-packages/nameko/cli/run.py\", line 131, in run\r\n    service_runner.start()\r\n  File \"/home/tacey/.local/lib/python2.7/site-packages/nameko/runners.py\", line 66, in start\r\n    SpawningProxy(self.containers).start()\r\n  File \"/home/tacey/.local/lib/python2.7/site-packages/nameko/utils/__init__.py\", line 186, in spawning_method\r\n    return list(pool.imap(call, self._items))\r\n  File \"/home/tacey/.local/lib/python2.7/site-packages/eventlet/greenpool.py\", line 175, in imap\r\n    return self.starmap(function, six.moves.zip(*iterables))\r\n  File \"/home/tacey/.local/lib/python2.7/site-packages/eventlet/greenpool.py\", line 160, in starmap\r\n    eventlet.spawn_n(self._do_map, function, iterable, gi)\r\n  File \"/home/tacey/.local/lib/python2.7/site-packages/eventlet/greenthread.py\", line 66, in spawn_n\r\n    return _spawn_n(0, func, args, kwargs)[1]\r\n  File \"/home/tacey/.local/lib/python2.7/site-packages/eventlet/greenthread.py\", line 156, in _spawn_n\r\n    hub = hubs.get_hub()\r\n  File \"/home/tacey/.local/lib/python2.7/site-packages/eventlet/hubs/__init__.py\", line 116, in get_hub\r\n    use_hub()\r\n  File \"/home/tacey/.local/lib/python2.7/site-packages/eventlet/hubs/__init__.py\", line 70, in use_hub\r\n    mod = get_default_hub()\r\n  File \"/home/tacey/.local/lib/python2.7/site-packages/eventlet/hubs/__init__.py\", line 38, in get_default_hub\r\n    import eventlet.hubs.epolls\r\n  File \"/home/tacey/.local/lib/python2.7/site-packages/eventlet/hubs/epolls.py\", line 27, in <module>\r\n    from eventlet.hubs.hub import BaseHub\r\n  File \"/home/tacey/.local/lib/python2.7/site-packages/eventlet/hubs/hub.py\", line 23, in <module>\r\n    from eventlet.support import greenlets as greenlet, clear_sys_exc_info, monotonic, six\r\n  File \"/home/tacey/.local/lib/python2.7/site-packages/eventlet/support/monotonic.py\", line 167, in <module>\r\n    raise RuntimeError('no suitable implementation for this system')\r\nRuntimeError: no suitable implementation for this system\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/532", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/532/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/532/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/532/events", "html_url": "https://github.com/nameko/nameko/issues/532", "id": 311894533, "node_id": "MDU6SXNzdWUzMTE4OTQ1MzM=", "number": 532, "title": "Error: No module named C", "user": {"login": "MMmaomao", "id": 4596276, "node_id": "MDQ6VXNlcjQ1OTYyNzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4596276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MMmaomao", "html_url": "https://github.com/MMmaomao", "followers_url": "https://api.github.com/users/MMmaomao/followers", "following_url": "https://api.github.com/users/MMmaomao/following{/other_user}", "gists_url": "https://api.github.com/users/MMmaomao/gists{/gist_id}", "starred_url": "https://api.github.com/users/MMmaomao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MMmaomao/subscriptions", "organizations_url": "https://api.github.com/users/MMmaomao/orgs", "repos_url": "https://api.github.com/users/MMmaomao/repos", "events_url": "https://api.github.com/users/MMmaomao/events{/privacy}", "received_events_url": "https://api.github.com/users/MMmaomao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-06T08:46:05Z", "updated_at": "2018-04-07T12:37:55Z", "closed_at": "2018-04-07T12:37:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "### When I run a test service from a remote windows machine, I got this error.\r\n![image](https://user-images.githubusercontent.com/4596276/38413027-2b003686-39bd-11e8-96c2-0ce39e9b9eed.png)\r\n\r\n### test service code\r\n```py\r\n# helloworld.py\r\n\r\nfrom nameko.rpc import rpc\r\n\r\nclass GreetingService:\r\n    name = \"greeting_service\"\r\n\r\n    @rpc\r\n    def hello(self, name):\r\n        return \"Hello, {}!\".format(name)\r\n```\r\nI run a rabbitMQ server on a debian machine, and nameko shell command is run properly.\r\nDid i do something wrong?\r\nnameko version 2.8,5\r\nrabbitMQ version 3.7.4\r\n\r\n### run nameko shell is ok, and i can see the connection in rabbitMQ panel\r\n![image](https://user-images.githubusercontent.com/4596276/38412874-d56d33ea-39bc-11e8-814b-530e4ef5d196.png)\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/529", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/529/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/529/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/529/events", "html_url": "https://github.com/nameko/nameko/issues/529", "id": 309916525, "node_id": "MDU6SXNzdWUzMDk5MTY1MjU=", "number": 529, "title": "Support for init method on service", "user": {"login": "rizplate", "id": 3771231, "node_id": "MDQ6VXNlcjM3NzEyMzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/3771231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rizplate", "html_url": "https://github.com/rizplate", "followers_url": "https://api.github.com/users/rizplate/followers", "following_url": "https://api.github.com/users/rizplate/following{/other_user}", "gists_url": "https://api.github.com/users/rizplate/gists{/gist_id}", "starred_url": "https://api.github.com/users/rizplate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rizplate/subscriptions", "organizations_url": "https://api.github.com/users/rizplate/orgs", "repos_url": "https://api.github.com/users/rizplate/repos", "events_url": "https://api.github.com/users/rizplate/events{/privacy}", "received_events_url": "https://api.github.com/users/rizplate/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-29T21:56:23Z", "updated_at": "2018-08-13T09:33:18Z", "closed_at": "2018-08-13T09:33:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can the nameko framework call an init_service method on service, where we can initialize some variables? or do we have to create extensions/dependancies", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/528", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/528/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/528/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/528/events", "html_url": "https://github.com/nameko/nameko/issues/528", "id": 306684694, "node_id": "MDU6SXNzdWUzMDY2ODQ2OTQ=", "number": 528, "title": "lifecycle of service and dependancies", "user": {"login": "rizplate", "id": 3771231, "node_id": "MDQ6VXNlcjM3NzEyMzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/3771231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rizplate", "html_url": "https://github.com/rizplate", "followers_url": "https://api.github.com/users/rizplate/followers", "following_url": "https://api.github.com/users/rizplate/following{/other_user}", "gists_url": "https://api.github.com/users/rizplate/gists{/gist_id}", "starred_url": "https://api.github.com/users/rizplate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rizplate/subscriptions", "organizations_url": "https://api.github.com/users/rizplate/orgs", "repos_url": "https://api.github.com/users/rizplate/repos", "events_url": "https://api.github.com/users/rizplate/events{/privacy}", "received_events_url": "https://api.github.com/users/rizplate/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-20T00:22:12Z", "updated_at": "2018-08-13T09:33:20Z", "closed_at": "2018-08-13T09:33:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can someone point me to the documentation where the lifecycle of service and dependancies is shown?\r\ni.e. when is a service created, is its init method called? when are dependencies started, injected and their init methods called", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/527", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/527/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/527/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/527/events", "html_url": "https://github.com/nameko/nameko/issues/527", "id": 306678061, "node_id": "MDU6SXNzdWUzMDY2NzgwNjE=", "number": 527, "title": "logging setup ", "user": {"login": "rizplate", "id": 3771231, "node_id": "MDQ6VXNlcjM3NzEyMzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/3771231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rizplate", "html_url": "https://github.com/rizplate", "followers_url": "https://api.github.com/users/rizplate/followers", "following_url": "https://api.github.com/users/rizplate/following{/other_user}", "gists_url": "https://api.github.com/users/rizplate/gists{/gist_id}", "starred_url": "https://api.github.com/users/rizplate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rizplate/subscriptions", "organizations_url": "https://api.github.com/users/rizplate/orgs", "repos_url": "https://api.github.com/users/rizplate/repos", "events_url": "https://api.github.com/users/rizplate/events{/privacy}", "received_events_url": "https://api.github.com/users/rizplate/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-19T23:45:46Z", "updated_at": "2018-08-13T09:33:18Z", "closed_at": "2018-08-13T09:33:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to setup logging for the service and all its dependancies?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/526", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/526/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/526/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/526/events", "html_url": "https://github.com/nameko/nameko/issues/526", "id": 305783021, "node_id": "MDU6SXNzdWUzMDU3ODMwMjE=", "number": 526, "title": "How to config different amqp uris for different services", "user": {"login": "alleriaken", "id": 28151352, "node_id": "MDQ6VXNlcjI4MTUxMzUy", "avatar_url": "https://avatars3.githubusercontent.com/u/28151352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alleriaken", "html_url": "https://github.com/alleriaken", "followers_url": "https://api.github.com/users/alleriaken/followers", "following_url": "https://api.github.com/users/alleriaken/following{/other_user}", "gists_url": "https://api.github.com/users/alleriaken/gists{/gist_id}", "starred_url": "https://api.github.com/users/alleriaken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alleriaken/subscriptions", "organizations_url": "https://api.github.com/users/alleriaken/orgs", "repos_url": "https://api.github.com/users/alleriaken/repos", "events_url": "https://api.github.com/users/alleriaken/events{/privacy}", "received_events_url": "https://api.github.com/users/alleriaken/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-16T02:35:57Z", "updated_at": "2018-08-13T09:33:18Z", "closed_at": "2018-08-13T09:33:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to set up my project so that each service will have a different amqp uri, is there anyway to do that?\r\nhere is my idea:\r\nIn config.yml:\r\nDEFAULT_AMQP_URI: amqp://${RABBIT_USER:guest}:${RABBIT_PASSWORD:guest}@${RABBIT_HOST:localhost}:${RABBIT_PORT:5672}/\r\n\r\n{SERVICE_1_NAME}_AMQP_URI: amqp://${RABBIT_USER_1:guest}:${RABBIT_PASSWORD_1:guest}@${RABBIT_HOST_1:localhost}:${RABBIT_PORT_1:5672}/\r\n\r\n{SERVICE_2_NAME}_AMQP_URI: amqp://${RABBIT_USER_2:guest}:${RABBIT_PASSWORD_2:guest}@${RABBIT_HOST_2:localhost}:${RABBIT_PORT_2:5672}/\r\n\r\nect...\r\n\r\nSo that if a service that has config in config.yml will use its own uri, if not, it will use DEFAULT_AMQP_URI\r\n\r\nor is there any way that I can set the amqp uri inside service file?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/522", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/522/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/522/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/522/events", "html_url": "https://github.com/nameko/nameko/issues/522", "id": 304623476, "node_id": "MDU6SXNzdWUzMDQ2MjM0NzY=", "number": 522, "title": "Nameko service event_handler as a PULL job worker", "user": {"login": "rizplate", "id": 3771231, "node_id": "MDQ6VXNlcjM3NzEyMzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/3771231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rizplate", "html_url": "https://github.com/rizplate", "followers_url": "https://api.github.com/users/rizplate/followers", "following_url": "https://api.github.com/users/rizplate/following{/other_user}", "gists_url": "https://api.github.com/users/rizplate/gists{/gist_id}", "starred_url": "https://api.github.com/users/rizplate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rizplate/subscriptions", "organizations_url": "https://api.github.com/users/rizplate/orgs", "repos_url": "https://api.github.com/users/rizplate/repos", "events_url": "https://api.github.com/users/rizplate/events{/privacy}", "received_events_url": "https://api.github.com/users/rizplate/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-13T04:22:53Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "1- Can the event.handler/pub-sub be used as a job worker?\r\ni.e. instead of nameko pushing the event to the service.handler, can the service *pull* the message so as to implement a pull based events? \r\n\r\n2- If one event.handler event-let is taking 1 hr to complete? is every other event waiting to be delivered? i.e. none of other event.handler will run or does event-let primitively _pause_ the green-thread and give resources to other green-threads? I think resource hogger event.handler will block the whole system. any way around it?\r\n\r\n3- Can you explain the message data flow of inbound and outbound calls of rpc i.e. which objects of nameko are doing what when the message is received. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/519", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/519/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/519/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/519/events", "html_url": "https://github.com/nameko/nameko/issues/519", "id": 303460500, "node_id": "MDU6SXNzdWUzMDM0NjA1MDA=", "number": 519, "title": "I wrote Twilio and SendGrid dependency providers", "user": {"login": "raybotha", "id": 9902896, "node_id": "MDQ6VXNlcjk5MDI4OTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/9902896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raybotha", "html_url": "https://github.com/raybotha", "followers_url": "https://api.github.com/users/raybotha/followers", "following_url": "https://api.github.com/users/raybotha/following{/other_user}", "gists_url": "https://api.github.com/users/raybotha/gists{/gist_id}", "starred_url": "https://api.github.com/users/raybotha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raybotha/subscriptions", "organizations_url": "https://api.github.com/users/raybotha/orgs", "repos_url": "https://api.github.com/users/raybotha/repos", "events_url": "https://api.github.com/users/raybotha/events{/privacy}", "received_events_url": "https://api.github.com/users/raybotha/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-08T12:19:33Z", "updated_at": "2018-03-20T12:16:40Z", "closed_at": "2018-03-20T12:16:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, I wrote a simple dependency provider for the Twilio client for SMS and Voice.\r\n\r\nIt's on PyPi as nameko-twilio and the GitHub is here https://github.com/invictuscapital/nameko-twilio/\r\n\r\nMy company will be using it in production.\r\n\r\nI've also made one for SendGrid: https://github.com/invictuscapital/nameko-sendgrid", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/518", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/518/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/518/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/518/events", "html_url": "https://github.com/nameko/nameko/issues/518", "id": 302381020, "node_id": "MDU6SXNzdWUzMDIzODEwMjA=", "number": 518, "title": "Automatic Service Discovery", "user": {"login": "authentik8", "id": 8999454, "node_id": "MDQ6VXNlcjg5OTk0NTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/8999454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/authentik8", "html_url": "https://github.com/authentik8", "followers_url": "https://api.github.com/users/authentik8/followers", "following_url": "https://api.github.com/users/authentik8/following{/other_user}", "gists_url": "https://api.github.com/users/authentik8/gists{/gist_id}", "starred_url": "https://api.github.com/users/authentik8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/authentik8/subscriptions", "organizations_url": "https://api.github.com/users/authentik8/orgs", "repos_url": "https://api.github.com/users/authentik8/repos", "events_url": "https://api.github.com/users/authentik8/events{/privacy}", "received_events_url": "https://api.github.com/users/authentik8/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-05T17:01:00Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a method/property in the Nameko MethodProxy / ServiceProxy API that allows for the retrieval of the available RPC methods on a given service?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/517", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/517/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/517/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/517/events", "html_url": "https://github.com/nameko/nameko/issues/517", "id": 300645514, "node_id": "MDU6SXNzdWUzMDA2NDU1MTQ=", "number": 517, "title": "hanging event handlers", "user": {"login": "alexeysofin", "id": 1291445, "node_id": "MDQ6VXNlcjEyOTE0NDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1291445?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexeysofin", "html_url": "https://github.com/alexeysofin", "followers_url": "https://api.github.com/users/alexeysofin/followers", "following_url": "https://api.github.com/users/alexeysofin/following{/other_user}", "gists_url": "https://api.github.com/users/alexeysofin/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexeysofin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexeysofin/subscriptions", "organizations_url": "https://api.github.com/users/alexeysofin/orgs", "repos_url": "https://api.github.com/users/alexeysofin/repos", "events_url": "https://api.github.com/users/alexeysofin/events{/privacy}", "received_events_url": "https://api.github.com/users/alexeysofin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-02-27T14:11:19Z", "updated_at": "2018-03-05T07:35:14Z", "closed_at": "2018-03-05T07:35:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "We are currently experiencing an issue with nameko consumers hanging forever not acking messages nor consuming more. We have three queues (prefetch_count 25 each) which are event handlers. One event handler calls tpool some times (but seems like inside tpool there are no context switching - only open/os.scandir calls and some lxml processing), other two handlers just use nameko-sqlalchemy.\r\n\r\nAll three queues have 25 unacked messages and the process is just hanging not consuming nor acking messages. After stracing these tpool threads seems like thery are just sleeping in a loop\r\n\r\nselect(0, NULL, NULL, NULL, {20, 647391}) = 0 (Timeout)\r\nclock_gettime(CLOCK_MONOTONIC, {20152, 65235860}) = 0\r\nclock_gettime(CLOCK_MONOTONIC, {20152, 65326908}) = 0\r\nselect(0, NULL, NULL, NULL, {60, 0})    = 0 (Timeout)\r\nclock_gettime(CLOCK_MONOTONIC, {20212, 125662883}) = 0\r\nclock_gettime(CLOCK_MONOTONIC, {20212, 125752436}) = 0\r\nselect(0, NULL, NULL, NULL, {60, 0})    = 0 (Timeout)\r\nclock_gettime(CLOCK_MONOTONIC, {20272, 184288837}) = 0\r\nclock_gettime(CLOCK_MONOTONIC, {20272, 184380661}) = 0\r\nselect(0, NULL, NULL, NULL, {60, 0})    = 0 (Timeout)\r\nclock_gettime(CLOCK_MONOTONIC, {20332, 195832888}) = 0\r\nclock_gettime(CLOCK_MONOTONIC, {20332, 195917909}) = 0\r\nselect(0, NULL, NULL, NULL, {60, 0}\r\n\r\nstracing the main thread gives\r\n\r\nrecvfrom(6, 0x7f67bc13aac8, 7, 0, NULL, NULL) = -1 EAGAIN (Resource temporarily unavailable)\r\nclock_gettime(CLOCK_MONOTONIC, {20686, 120473825}) = 0\r\nepoll_ctl(4, EPOLL_CTL_ADD, 6, {EPOLLIN|EPOLLPRI|EPOLLERR|EPOLLHUP, {u32=6, u64=2086511330193309702}}) = 0\r\nclock_gettime(CLOCK_MONOTONIC, {20686, 120606518}) = 0\r\nclock_gettime(CLOCK_MONOTONIC, {20686, 120649753}) = 0\r\nepoll_wait(4, [], 1023, 1000)           = 0\r\nclock_gettime(CLOCK_MONOTONIC, {20687, 121990770}) = 0\r\nepoll_ctl(4, EPOLL_CTL_DEL, 6, 0x7ffd7fa5f9a0) = 0\r\nclock_gettime(CLOCK_MONOTONIC, {20687, 122235665}) = 0\r\nclock_gettime(CLOCK_MONOTONIC, {20687, 122304991}) = 0\r\nrecvfrom(6, 0x7f67bc13aac8, 7, 0, NULL, NULL) = -1 EAGAIN (Resource temporarily unavailable)\r\nclock_gettime(CLOCK_MONOTONIC, {20687, 122510493}) = 0\r\nepoll_ctl(4, EPOLL_CTL_ADD, 6, {EPOLLIN|EPOLLPRI|EPOLLERR|EPOLLHUP, {u32=6, u64=2086511330193309702}}) = 0\r\nclock_gettime(CLOCK_MONOTONIC, {20687, 122653462}) = 0\r\nclock_gettime(CLOCK_MONOTONIC, {20687, 122698273}) = 0\r\nepoll_wait(4, ^Cstrace: Process 1810 detached\r\n\r\n\r\n6 descriptor is amqp connection\r\n\r\nThe worst problem is that it happens sporadically and we have no idea how to reproduce it.\r\n\r\nThe log file shows and error \r\n\r\n`\r\nTraceback (most recent call last):\r\n  File \"/home/dev1-irm/.venv/lib/python3.5/site-packages/eventlet/hubs/hub.py\", line 458, in fire_timers\r\n    timer()\r\n  File \"/home/dev1-irm/.venv/lib/python3.5/site-packages/eventlet/hubs/timer.py\", line 58, in __call__\r\n    cb(*args, **kw)\r\n  File \"/home/dev1-irm/.venv/lib/python3.5/site-packages/eventlet/semaphore.py\", line 147, in _do_acquire\r\n    waiter.switch()\r\ngreenlet.error: cannot switch to a different thread\r\n`\r\n\r\nabout at the same time the consumers started hanging. But there is no information about from where the trace came.\r\n\r\nWe are using\r\n\r\nnameko==2.8.4\r\neventlet==0.21.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/516", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/516/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/516/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/516/events", "html_url": "https://github.com/nameko/nameko/issues/516", "id": 300018702, "node_id": "MDU6SXNzdWUzMDAwMTg3MDI=", "number": 516, "title": "Why nameko did not use something like JSON RPC for serialization?", "user": {"login": "worldmind", "id": 557004, "node_id": "MDQ6VXNlcjU1NzAwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/557004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/worldmind", "html_url": "https://github.com/worldmind", "followers_url": "https://api.github.com/users/worldmind/followers", "following_url": "https://api.github.com/users/worldmind/following{/other_user}", "gists_url": "https://api.github.com/users/worldmind/gists{/gist_id}", "starred_url": "https://api.github.com/users/worldmind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/worldmind/subscriptions", "organizations_url": "https://api.github.com/users/worldmind/orgs", "repos_url": "https://api.github.com/users/worldmind/repos", "events_url": "https://api.github.com/users/worldmind/events{/privacy}", "received_events_url": "https://api.github.com/users/worldmind/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-02-25T11:34:30Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "As I understood after reading questions #455 and #354 (not found info in docs) nameko use own, non standard, calls serialization to json.\r\nOn my opinion it make difficult using nameko in heterogeneous environments, for example yesterday on by.pycon.org I ask @tarekziade why in Mozilla they write REST microservices, and answer was because they using not only python.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/514", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/514/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/514/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/514/events", "html_url": "https://github.com/nameko/nameko/issues/514", "id": 298707552, "node_id": "MDU6SXNzdWUyOTg3MDc1NTI=", "number": 514, "title": "Eventlet 0.22", "user": {"login": "geoffjukes", "id": 1959570, "node_id": "MDQ6VXNlcjE5NTk1NzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1959570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffjukes", "html_url": "https://github.com/geoffjukes", "followers_url": "https://api.github.com/users/geoffjukes/followers", "following_url": "https://api.github.com/users/geoffjukes/following{/other_user}", "gists_url": "https://api.github.com/users/geoffjukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffjukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffjukes/subscriptions", "organizations_url": "https://api.github.com/users/geoffjukes/orgs", "repos_url": "https://api.github.com/users/geoffjukes/repos", "events_url": "https://api.github.com/users/geoffjukes/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffjukes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-20T18:52:16Z", "updated_at": "2018-02-20T20:25:30Z", "closed_at": "2018-02-20T20:25:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nEventlet 0.22 adds `socket: context manager support` which will solve an issue I am having using ftplib in my services.\r\n\r\nSo I am wondering what the status of Eventlet 0.22 compatibility is (I know Nameko is pinned to 0.21 right now)\r\n\r\nMany thanks,\r\n\r\nGeoff", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/511", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/511/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/511/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/511/events", "html_url": "https://github.com/nameko/nameko/issues/511", "id": 296722260, "node_id": "MDU6SXNzdWUyOTY3MjIyNjA=", "number": 511, "title": "RecoverableConnectionError raised on message.ack()", "user": {"login": "mattbennett", "id": 107611, "node_id": "MDQ6VXNlcjEwNzYxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/107611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattbennett", "html_url": "https://github.com/mattbennett", "followers_url": "https://api.github.com/users/mattbennett/followers", "following_url": "https://api.github.com/users/mattbennett/following{/other_user}", "gists_url": "https://api.github.com/users/mattbennett/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattbennett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattbennett/subscriptions", "organizations_url": "https://api.github.com/users/mattbennett/orgs", "repos_url": "https://api.github.com/users/mattbennett/repos", "events_url": "https://api.github.com/users/mattbennett/events{/privacy}", "received_events_url": "https://api.github.com/users/mattbennett/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819323, "node_id": "MDU6TGFiZWwyOTgxOTMyMw==", "url": "https://api.github.com/repos/nameko/nameko/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-13T12:37:17Z", "updated_at": "2018-02-19T06:51:56Z", "closed_at": "2018-02-19T06:51:56Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Discussed on the mailing list [[1]](https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!topic/nameko-dev/Hmz659s4dBY)[[2]](https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!topic/nameko-dev/n3PSBuvqIGM) but raising here for visibility.\r\n\r\nWhen a consumer connection to RabbitMQ is lost while an AMQP entrypoint is mid-execution, the broker reclaims the unack'd message but the worker continues. We attempt to acknowledge the message when the execution finally completes, and this raises a `RecoverableConnectionError` because the message's connection is closed. We naively retry on this error, but even if a new connection is established, the channel for the particular message will never recover, which ultimately results in the container dying with the `RecoverableConnectionError` exception.\r\n\r\nThis bug was probably introduced in 2.5.4.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/510", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/510/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/510/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/510/events", "html_url": "https://github.com/nameko/nameko/issues/510", "id": 296410252, "node_id": "MDU6SXNzdWUyOTY0MTAyNTI=", "number": 510, "title": "yaml env_var parsing with } in default value", "user": {"login": "ornoone", "id": 5380232, "node_id": "MDQ6VXNlcjUzODAyMzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5380232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ornoone", "html_url": "https://github.com/ornoone", "followers_url": "https://api.github.com/users/ornoone/followers", "following_url": "https://api.github.com/users/ornoone/following{/other_user}", "gists_url": "https://api.github.com/users/ornoone/gists{/gist_id}", "starred_url": "https://api.github.com/users/ornoone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ornoone/subscriptions", "organizations_url": "https://api.github.com/users/ornoone/orgs", "repos_url": "https://api.github.com/users/ornoone/repos", "events_url": "https://api.github.com/users/ornoone/events{/privacy}", "received_events_url": "https://api.github.com/users/ornoone/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819325, "node_id": "MDU6TGFiZWwyOTgxOTMyNQ==", "url": "https://api.github.com/repos/nameko/nameko/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-12T15:15:07Z", "updated_at": "2018-05-04T09:28:48Z", "closed_at": "2018-05-04T09:28:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, I found an unexpected behavior with env_var parsing in config.\r\n\r\nit's great to natively add env variable into configuration, but I found some exemples where it behavior is not what expect.\r\n\r\n## default value with '}' char\r\n``${XML_PUBLISHER_URL:www.example.com/{ref}/}`` => ``www.example.com/{ref/}``\r\nwe use this config to give a python template using str.format ({ref} key) . the env_var parser will stop at the first '}' occurence and will give us \r\n\r\n## nested env_var token\r\n`` ${XML_PUBLISHER_URL:www.example.com/${XML_PATH:/xml/}all.xml}`` => `` 'www.example.com/${XML_PATH:/xml/all.xml}'``\r\n\r\nas is saw in the code, the env_var_constructor in cli/main.py use a regex which match the first closing bracket.\r\n\r\nI will see if a recursive regex can help solve these issues and allow for a recursive env_var replacement for default value. \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/509", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/509/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/509/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/509/events", "html_url": "https://github.com/nameko/nameko/issues/509", "id": 295011935, "node_id": "MDU6SXNzdWUyOTUwMTE5MzU=", "number": 509, "title": "Why did nameko use RPC for Communication between Service?", "user": {"login": "radiegtya", "id": 2161622, "node_id": "MDQ6VXNlcjIxNjE2MjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/2161622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/radiegtya", "html_url": "https://github.com/radiegtya", "followers_url": "https://api.github.com/users/radiegtya/followers", "following_url": "https://api.github.com/users/radiegtya/following{/other_user}", "gists_url": "https://api.github.com/users/radiegtya/gists{/gist_id}", "starred_url": "https://api.github.com/users/radiegtya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/radiegtya/subscriptions", "organizations_url": "https://api.github.com/users/radiegtya/orgs", "repos_url": "https://api.github.com/users/radiegtya/repos", "events_url": "https://api.github.com/users/radiegtya/events{/privacy}", "received_events_url": "https://api.github.com/users/radiegtya/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-02-07T05:31:02Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think this is not issue, rather than just a question. Why did nameko use RPC for Communication between Service? Is there any issue when using REST? or RPC much faster for this communication purpose? Sorry I am newbie at microservices", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/508", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/508/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/508/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/508/events", "html_url": "https://github.com/nameko/nameko/issues/508", "id": 292492664, "node_id": "MDU6SXNzdWUyOTI0OTI2NjQ=", "number": 508, "title": "Custom Exchange Name", "user": {"login": "TimGraf", "id": 6503441, "node_id": "MDQ6VXNlcjY1MDM0NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/6503441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimGraf", "html_url": "https://github.com/TimGraf", "followers_url": "https://api.github.com/users/TimGraf/followers", "following_url": "https://api.github.com/users/TimGraf/following{/other_user}", "gists_url": "https://api.github.com/users/TimGraf/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimGraf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimGraf/subscriptions", "organizations_url": "https://api.github.com/users/TimGraf/orgs", "repos_url": "https://api.github.com/users/TimGraf/repos", "events_url": "https://api.github.com/users/TimGraf/events{/privacy}", "received_events_url": "https://api.github.com/users/TimGraf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-29T17:26:12Z", "updated_at": "2018-01-30T12:05:10Z", "closed_at": "2018-01-29T18:00:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to use a custom exchange name?  I've tried using a different exchange name in the YAML configuration file other than `nameko-rpc`, say something like `foo-rpc`.  Once I change this RPC does not seem to work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/506", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/506/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/506/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/506/events", "html_url": "https://github.com/nameko/nameko/issues/506", "id": 289583334, "node_id": "MDU6SXNzdWUyODk1ODMzMzQ=", "number": 506, "title": "how to deal with long running task ", "user": {"login": "jackytu256", "id": 8509844, "node_id": "MDQ6VXNlcjg1MDk4NDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/8509844?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackytu256", "html_url": "https://github.com/jackytu256", "followers_url": "https://api.github.com/users/jackytu256/followers", "following_url": "https://api.github.com/users/jackytu256/following{/other_user}", "gists_url": "https://api.github.com/users/jackytu256/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackytu256/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackytu256/subscriptions", "organizations_url": "https://api.github.com/users/jackytu256/orgs", "repos_url": "https://api.github.com/users/jackytu256/repos", "events_url": "https://api.github.com/users/jackytu256/events{/privacy}", "received_events_url": "https://api.github.com/users/jackytu256/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-18T10:46:30Z", "updated_at": "2018-01-19T11:45:21Z", "closed_at": "2018-01-19T11:45:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi author,\r\n     I am looking for one way to cope with long running task , such as preprocessing large videos ( at least 2 hours).  Cloud you please give me some tips to help me to solve this task?  \r\n\r\n\r\n Thanks!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/503", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/503/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/503/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/503/events", "html_url": "https://github.com/nameko/nameko/issues/503", "id": 288410483, "node_id": "MDU6SXNzdWUyODg0MTA0ODM=", "number": 503, "title": "Custom entrypoints", "user": {"login": "WoLfulus", "id": 412397, "node_id": "MDQ6VXNlcjQxMjM5Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/412397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WoLfulus", "html_url": "https://github.com/WoLfulus", "followers_url": "https://api.github.com/users/WoLfulus/followers", "following_url": "https://api.github.com/users/WoLfulus/following{/other_user}", "gists_url": "https://api.github.com/users/WoLfulus/gists{/gist_id}", "starred_url": "https://api.github.com/users/WoLfulus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WoLfulus/subscriptions", "organizations_url": "https://api.github.com/users/WoLfulus/orgs", "repos_url": "https://api.github.com/users/WoLfulus/repos", "events_url": "https://api.github.com/users/WoLfulus/events{/privacy}", "received_events_url": "https://api.github.com/users/WoLfulus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-01-14T14:00:01Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to automate some documentation on my services, and I'm struggling to get things to work. I'm new to nameko, only used it for testing and I'm feeling a little lost to get something more advanced like this to work. \r\n\r\nProblem is that I have no idea where/how to collect class and method information to get the data I need: the closest thing I got was to write a `class Documentation(Rpc)` and `rpc = Documentation.decorator` and use that decorator instead to access the service class with `self.container.service_cls`, but it seems that it executes for every method, and I need to group the information up. Also I have no idea how I could access the Documentation instance inside the action later.\r\n\r\nIn resume, what I want to accomplish it:\r\n\r\n- Write a normal service\r\n- Do something really simple if needed to the service (like a dependency `docs = Documentation()`)\r\n- A new rpc method \"documentation\" will be added automatically (without writing additional code) and it should return the docstrings from the class and its methods\r\n- Should be able to call n.rpc.myservice.documentation() and get the data I need\r\n\r\n# Example\r\n\r\n### How service is written\r\n\r\n```python\r\nclass Service:\r\n    \"\"\"a docstring\"\"\"\r\n    name = \"myservice\"\r\n\r\n    @rpc\r\n    def test(self):\r\n        \"\"\"another docstring\"\"\"\r\n        return True\r\n```\r\n\r\n### How service will behave like\r\n\r\n```python\r\nclass Service:\r\n    \"\"\"a docstring\"\"\"\r\n    name = \"myservice\"\r\n\r\n    @rpc\r\n    def test(self):\r\n        \"\"\"another docstring\"\"\"\r\n        return True\r\n\r\n    @rpc\r\n    def documentation(self):\r\n        return { \r\n            \"service\": \"a doc string\",\r\n            \"methods\": {\r\n                \"test\": \"another docstring\", \r\n            }\r\n        }\r\n```\r\n\r\nThoughts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/502", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/502/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/502/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/502/events", "html_url": "https://github.com/nameko/nameko/issues/502", "id": 288028659, "node_id": "MDU6SXNzdWUyODgwMjg2NTk=", "number": 502, "title": "build  multiple nodes of one service", "user": {"login": "jackytu256", "id": 8509844, "node_id": "MDQ6VXNlcjg1MDk4NDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/8509844?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackytu256", "html_url": "https://github.com/jackytu256", "followers_url": "https://api.github.com/users/jackytu256/followers", "following_url": "https://api.github.com/users/jackytu256/following{/other_user}", "gists_url": "https://api.github.com/users/jackytu256/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackytu256/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackytu256/subscriptions", "organizations_url": "https://api.github.com/users/jackytu256/orgs", "repos_url": "https://api.github.com/users/jackytu256/repos", "events_url": "https://api.github.com/users/jackytu256/events{/privacy}", "received_events_url": "https://api.github.com/users/jackytu256/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-12T07:24:26Z", "updated_at": "2018-08-13T09:33:18Z", "closed_at": "2018-08-13T09:33:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "HI All,\r\n\r\n  I am looking for a way to run multiple nodes of one service. I know there is a parameter called \"max_workers\" in cofig file, having more workers to deal with requests; however, this is not a way I can utilize at least two nodes of one service.\r\n\r\n\r\nBR\r\nJacky Tu ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/500", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/500/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/500/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/500/events", "html_url": "https://github.com/nameko/nameko/issues/500", "id": 286954125, "node_id": "MDU6SXNzdWUyODY5NTQxMjU=", "number": 500, "title": "how to specify a custom service instance when using ClusterRPCProxy?", "user": {"login": "sbhhbs", "id": 1070754, "node_id": "MDQ6VXNlcjEwNzA3NTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1070754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sbhhbs", "html_url": "https://github.com/sbhhbs", "followers_url": "https://api.github.com/users/sbhhbs/followers", "following_url": "https://api.github.com/users/sbhhbs/following{/other_user}", "gists_url": "https://api.github.com/users/sbhhbs/gists{/gist_id}", "starred_url": "https://api.github.com/users/sbhhbs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sbhhbs/subscriptions", "organizations_url": "https://api.github.com/users/sbhhbs/orgs", "repos_url": "https://api.github.com/users/sbhhbs/repos", "events_url": "https://api.github.com/users/sbhhbs/events{/privacy}", "received_events_url": "https://api.github.com/users/sbhhbs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-09T02:49:06Z", "updated_at": "2018-08-13T09:33:18Z", "closed_at": "2018-08-13T09:33:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "The use case is for example:\r\n1. the service it self requires a stable hashing, so that, for example, i can routine all traffic of the same user id to the same physical machine's service instance. \r\n2. I have a service that is updated, and like to update one service instance to test it. So I can select some user in whitelist and make their traffic always goes to the updated service instance. \r\n\r\nMy idea is when specify the service, I can always add some tags on it. And when calling the service, i can control if I'd like a service's with that tag.\r\n\r\nOr, is their any way to get a list of existing instances of a service, so that I can call that instance directly?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/498", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/498/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/498/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/498/events", "html_url": "https://github.com/nameko/nameko/issues/498", "id": 283104878, "node_id": "MDU6SXNzdWUyODMxMDQ4Nzg=", "number": 498, "title": "Connecting multiple rabbitmq host from Nameko", "user": {"login": "singhmanish09", "id": 34304915, "node_id": "MDQ6VXNlcjM0MzA0OTE1", "avatar_url": "https://avatars1.githubusercontent.com/u/34304915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/singhmanish09", "html_url": "https://github.com/singhmanish09", "followers_url": "https://api.github.com/users/singhmanish09/followers", "following_url": "https://api.github.com/users/singhmanish09/following{/other_user}", "gists_url": "https://api.github.com/users/singhmanish09/gists{/gist_id}", "starred_url": "https://api.github.com/users/singhmanish09/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/singhmanish09/subscriptions", "organizations_url": "https://api.github.com/users/singhmanish09/orgs", "repos_url": "https://api.github.com/users/singhmanish09/repos", "events_url": "https://api.github.com/users/singhmanish09/events{/privacy}", "received_events_url": "https://api.github.com/users/singhmanish09/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-19T04:57:52Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "What is the mechanism through which nameko can connect to multiple rabbitmq host configured in mirrored mode so that HA can be achieved using it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/495", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/495/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/495/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/495/events", "html_url": "https://github.com/nameko/nameko/issues/495", "id": 278937337, "node_id": "MDU6SXNzdWUyNzg5MzczMzc=", "number": 495, "title": "Argument --log-level in nameko conflicts with pytest.", "user": {"login": "zhouxiaoxiang", "id": 17511884, "node_id": "MDQ6VXNlcjE3NTExODg0", "avatar_url": "https://avatars3.githubusercontent.com/u/17511884?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhouxiaoxiang", "html_url": "https://github.com/zhouxiaoxiang", "followers_url": "https://api.github.com/users/zhouxiaoxiang/followers", "following_url": "https://api.github.com/users/zhouxiaoxiang/following{/other_user}", "gists_url": "https://api.github.com/users/zhouxiaoxiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhouxiaoxiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhouxiaoxiang/subscriptions", "organizations_url": "https://api.github.com/users/zhouxiaoxiang/orgs", "repos_url": "https://api.github.com/users/zhouxiaoxiang/repos", "events_url": "https://api.github.com/users/zhouxiaoxiang/events{/privacy}", "received_events_url": "https://api.github.com/users/zhouxiaoxiang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-12-04T10:07:12Z", "updated_at": "2017-12-11T14:31:27Z", "closed_at": "2017-12-11T14:31:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Argument in nameko conflicts with pytest\r\n\r\n##  issue\r\n\r\n- Python: 3.6.3\r\n- pytest: 3.3.0\r\n- nameko: 2.8.1\r\n\r\n```\r\n\r\n### In an empty directory, run pytest.\r\n# cd /tmp/test\r\n# pip install pytest\r\n# pip install nameko\r\n# pytest\r\n\r\n_Traceback (most recent call last):\r\n  File \"/tmp/test/py3/bin/pytest\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/tmp/test/py3/lib/python3.6/site-packages/_pytest/config.py\", line 50, in main\r\n    config = _prepareconfig(args, plugins)\r\n  File \"/tmp/test/py3/lib/python3.6/site-packages/_pytest/config.py\", line 160, in _prepareconfig\r\n    pluginmanager=pluginmanager, args=args)\r\n  File \"/tmp/test/py3/lib/python3.6/site-packages/pluggy/__init__.py\", line 617, in __call__\r\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\n  File \"/tmp/test/py3/lib/python3.6/site-packages/pluggy/__init__.py\", line 222, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/tmp/test/py3/lib/python3.6/site-packages/pluggy/__init__.py\", line 216, in <lambda>\r\n    firstresult=hook.spec_opts.get('firstresult'),\r\n  File \"/tmp/test/py3/lib/python3.6/site-packages/pluggy/callers.py\", line 196, in _multicall\r\n    gen.send(outcome)\r\n  File \"/tmp/test/py3/lib/python3.6/site-packages/_pytest/helpconfig.py\", line 68, in pytest_cmdline_parse\r\n    config = outcome.get_result()\r\n  File \"/tmp/test/py3/lib/python3.6/site-packages/pluggy/callers.py\", line 76, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/tmp/test/py3/lib/python3.6/site-packages/pluggy/callers.py\", line 180, in _multicall\r\n    res = hook_impl.function(*args)\r\n  File \"/tmp/test/py3/lib/python3.6/site-packages/_pytest/config.py\", line 942, in pytest_cmdline_parse\r\n    self.parse(args)\r\n  File \"/tmp/test/py3/lib/python3.6/site-packages/_pytest/config.py\", line 1107, in parse\r\n    self._preparse(args, addopts=addopts)\r\n  File \"/tmp/test/py3/lib/python3.6/site-packages/_pytest/config.py\", line 1072, in _preparse\r\n    self.known_args_namespace = ns = self._parser.parse_known_args(args, namespace=self.option.copy())\r\n  File \"/tmp/test/py3/lib/python3.6/site-packages/_pytest/config.py\", line 556, in parse_known_args\r\n    return self.parse_known_and_unknown_args(args, namespace=namespace)[0]\r\n  File \"/tmp/test/py3/lib/python3.6/site-packages/_pytest/config.py\", line 562, in parse_known_and_unknown_args\r\n    optparser = self._getparser()\r\n  File \"/tmp/test/py3/lib/python3.6/site-packages/_pytest/config.py\", line 541, in _getparser\r\n    arggroup.add_argument(*n, **a)\r\n  File \"/usr/lib/python3.6/argparse.py\", line 1357, in add_argument\r\n    return self._add_action(action)\r\n  File \"/usr/lib/python3.6/argparse.py\", line 1561, in _add_action\r\n    action = super(_ArgumentGroup, self)._add_action(action)\r\n  File \"/usr/lib/python3.6/argparse.py\", line 1371, in _add_action\r\n    self._check_conflict(action)\r\n  File \"/usr/lib/python3.6/argparse.py\", line 1510, in _check_conflict\r\n    conflict_handler(action, confl_optionals)\r\n  File \"/usr/lib/python3.6/argparse.py\", line 1519, in _handle_conflict_error\r\n    raise ArgumentError(action, message % conflict_string)\r\nargparse.ArgumentError: argument --log-level: conflicting option string: --log-level_\r\n\r\n```\r\n\r\n## reason\r\n\r\n  [**Nameko** ](https://github.com/nameko/nameko/blob/master/nameko/testing/pytest.py) and [**pytest**](https://github.com/pytest-dev/pytest/blob/master/_pytest/logging.py) have the same option --log-level for pytest_addoption, so pytest will raise argparse.ArgumentError.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/492", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/492/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/492/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/492/events", "html_url": "https://github.com/nameko/nameko/issues/492", "id": 275234971, "node_id": "MDU6SXNzdWUyNzUyMzQ5NzE=", "number": 492, "title": "Question: passing attributes from service to dependencies ", "user": {"login": "kiorq", "id": 23644557, "node_id": "MDQ6VXNlcjIzNjQ0NTU3", "avatar_url": "https://avatars3.githubusercontent.com/u/23644557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiorq", "html_url": "https://github.com/kiorq", "followers_url": "https://api.github.com/users/kiorq/followers", "following_url": "https://api.github.com/users/kiorq/following{/other_user}", "gists_url": "https://api.github.com/users/kiorq/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiorq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiorq/subscriptions", "organizations_url": "https://api.github.com/users/kiorq/orgs", "repos_url": "https://api.github.com/users/kiorq/repos", "events_url": "https://api.github.com/users/kiorq/events{/privacy}", "received_events_url": "https://api.github.com/users/kiorq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-20T04:35:28Z", "updated_at": "2017-11-20T04:44:41Z", "closed_at": "2017-11-20T04:44:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a service that has a session as an attribute, i want to be able to pass that into a dependency. only problem is i can't see any way to get data from the service class in the dependency provider.\r\n\r\nAny help please?\r\n\r\nIn the DependencyProvider get_dependency method i've tried using `worker_ctx.service.db`, but that just passes the instance of the DependencyProvider, not what get_dependency is suppose to return.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/490", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/490/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/490/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/490/events", "html_url": "https://github.com/nameko/nameko/issues/490", "id": 270393446, "node_id": "MDU6SXNzdWUyNzAzOTM0NDY=", "number": 490, "title": "Check if rabbitmq available before running the service to prevent app crash", "user": {"login": "aarrtteemmuuss", "id": 4533121, "node_id": "MDQ6VXNlcjQ1MzMxMjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4533121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aarrtteemmuuss", "html_url": "https://github.com/aarrtteemmuuss", "followers_url": "https://api.github.com/users/aarrtteemmuuss/followers", "following_url": "https://api.github.com/users/aarrtteemmuuss/following{/other_user}", "gists_url": "https://api.github.com/users/aarrtteemmuuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/aarrtteemmuuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aarrtteemmuuss/subscriptions", "organizations_url": "https://api.github.com/users/aarrtteemmuuss/orgs", "repos_url": "https://api.github.com/users/aarrtteemmuuss/repos", "events_url": "https://api.github.com/users/aarrtteemmuuss/events{/privacy}", "received_events_url": "https://api.github.com/users/aarrtteemmuuss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819328, "node_id": "MDU6TGFiZWwyOTgxOTMyOA==", "url": "https://api.github.com/repos/nameko/nameko/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-01T17:50:42Z", "updated_at": "2018-01-17T15:35:33Z", "closed_at": "2018-01-17T15:35:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nWe encountered an issue while using Nameko in our project. I know that if Nameko service is running and at some point it looses connection with rabbit, it will try to re-establish connection numerous amount of times, and web server will be alive so we will be able to check the status. But if after lets say re-deploy something went wrong and Nameko is not able to connect to rabbit (something happened to it and it is unavailable) at 0 point, Nameko just crashes and we can't check the status in our deployment scripts... Is there any way to avoid this crash upon starting the service?Maybe some hook to run webserver first, and then try to connect and initialize queues so we can track what exactly happened?  \r\n@mattbennett @davidszotten ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/487", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/487/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/487/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/487/events", "html_url": "https://github.com/nameko/nameko/issues/487", "id": 269082751, "node_id": "MDU6SXNzdWUyNjkwODI3NTE=", "number": 487, "title": "Connection refused: AMQP server", "user": {"login": "SaikrishnaViridis", "id": 21053870, "node_id": "MDQ6VXNlcjIxMDUzODcw", "avatar_url": "https://avatars0.githubusercontent.com/u/21053870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SaikrishnaViridis", "html_url": "https://github.com/SaikrishnaViridis", "followers_url": "https://api.github.com/users/SaikrishnaViridis/followers", "following_url": "https://api.github.com/users/SaikrishnaViridis/following{/other_user}", "gists_url": "https://api.github.com/users/SaikrishnaViridis/gists{/gist_id}", "starred_url": "https://api.github.com/users/SaikrishnaViridis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SaikrishnaViridis/subscriptions", "organizations_url": "https://api.github.com/users/SaikrishnaViridis/orgs", "repos_url": "https://api.github.com/users/SaikrishnaViridis/repos", "events_url": "https://api.github.com/users/SaikrishnaViridis/events{/privacy}", "received_events_url": "https://api.github.com/users/SaikrishnaViridis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819328, "node_id": "MDU6TGFiZWwyOTgxOTMyOA==", "url": "https://api.github.com/repos/nameko/nameko/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-27T11:59:26Z", "updated_at": "2018-01-17T15:36:07Z", "closed_at": "2018-01-17T15:36:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Scenario:\r\nWe are trying to connect to RabbitMQ using nameko through AMQP server. \r\nBelow is the traceback,\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"d:\\programfiles\\lib\\runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"d:\\programfiles\\lib\\runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"D:\\ProgramFiles\\Scripts\\nameko.exe\\__main__.py\", line 9, in <module>\r\n  File \"d:\\programfiles\\lib\\site-packages\\nameko\\cli\\main.py\", line 72, in main\r\n    args.main(args)\r\n  File \"d:\\programfiles\\lib\\site-packages\\nameko\\cli\\commands.py\", line 85, in main\r\n    main(args)\r\n  File \"d:\\programfiles\\lib\\site-packages\\nameko\\cli\\run.py\", line 182, in main\r\n    run(services, config, backdoor_port=args.backdoor_port)\r\n  File \"d:\\programfiles\\lib\\site-packages\\nameko\\cli\\run.py\", line 129, in run\r\n    service_runner.start()\r\n  File \"d:\\programfiles\\lib\\site-packages\\nameko\\runners.py\", line 66, in start\r\n    SpawningProxy(self.containers).start()\r\n  File \"d:\\programfiles\\lib\\site-packages\\nameko\\utils\\__init__.py\", line 186, in spawning_method\r\n    return list(pool.imap(call, self._items))\r\n  File \"d:\\programfiles\\lib\\site-packages\\eventlet\\greenpool.py\", line 244, in next\r\n    val = self.waiters.get().wait()\r\n  File \"d:\\programfiles\\lib\\site-packages\\eventlet\\greenthread.py\", line 179, in wait\r\n    return self._exit_event.wait()\r\n  File \"d:\\programfiles\\lib\\site-packages\\eventlet\\event.py\", line 121, in wait\r\n    return hubs.get_hub().switch()\r\n  File \"d:\\programfiles\\lib\\site-packages\\eventlet\\hubs\\hub.py\", line 295, in switch\r\n    return self.greenlet.switch()\r\n  File \"d:\\programfiles\\lib\\site-packages\\eventlet\\hubs\\hub.py\", line 347, in run\r\n    self.wait(sleep_time)\r\n  File \"d:\\programfiles\\lib\\site-packages\\eventlet\\hubs\\selects.py\", line 50, in wait\r\n    writers.get(fileno, noop).cb(fileno)\r\n  File \"d:\\programfiles\\lib\\site-packages\\eventlet\\greenthread.py\", line 218, in main\r\n    result = function(*args, **kwargs)\r\n  File \"d:\\programfiles\\lib\\site-packages\\nameko\\utils\\__init__.py\", line 181, in call\r\n    return getattr(item, name)(*args, **kwargs)\r\n  File \"d:\\programfiles\\lib\\site-packages\\nameko\\messaging.py\", line 225, in setup\r\n    verify_amqp_uri(self.amqp_uri)\r\n  File \"d:\\programfiles\\lib\\site-packages\\nameko\\amqp\\utils.py\", line 49, in verify_amqp_uri\r\n    with transport.establish_connection():\r\n  File \"d:\\programfiles\\lib\\site-packages\\kombu\\transport\\pyamqp.py\", line 116, in establish_connection\r\n    conn = self.Connection(**opts)\r\n  File \"d:\\programfiles\\lib\\site-packages\\nameko\\amqp\\utils.py\", line 26, in init\r\n    super(ConnectionTester, self).__init__(*args, **kwargs)\r\n  File \"d:\\programfiles\\lib\\site-packages\\amqp\\connection.py\", line 165, in init\r\n    self.transport = self.Transport(host, connect_timeout, ssl)\r\n  File \"d:\\programfiles\\lib\\site-packages\\amqp\\connection.py\", line 186, in Transport\r\n    return create_transport(host, connect_timeout, ssl)\r\n  File \"d:\\programfiles\\lib\\site-packages\\amqp\\transport.py\", line 299, in create_transport\r\n    return TCPTransport(host, connect_timeout)\r\n  File \"d:\\programfiles\\lib\\site-packages\\amqp\\transport.py\", line 95, in init\r\n    raise socket.error(last_err)\r\nOSError: [Errno 10061] WSAECONNREFUSED\r\n```\r\n\r\nCommand we are using to run ,\r\n`nameko run --config configuration/nameko.yml test 3000 &`\r\n\r\n**nameko.yml** file contains below configuration,\r\n**AMQP_URI: amqp://guest:guest@10.10.10.10:5672\r\nWEB_SERVER_ADDRESS: 10.10.10.10:5672**\r\n\r\n**Operating system:** \r\nWindows 10 (Python code)\r\nLinux (RabbitMQ server)\r\n\r\n\r\nPlease help us to solve this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/482", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/482/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/482/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/482/events", "html_url": "https://github.com/nameko/nameko/issues/482", "id": 264838529, "node_id": "MDU6SXNzdWUyNjQ4Mzg1Mjk=", "number": 482, "title": "How to do some setup before starting any entrypoint", "user": {"login": "xqliang", "id": 4370917, "node_id": "MDQ6VXNlcjQzNzA5MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4370917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xqliang", "html_url": "https://github.com/xqliang", "followers_url": "https://api.github.com/users/xqliang/followers", "following_url": "https://api.github.com/users/xqliang/following{/other_user}", "gists_url": "https://api.github.com/users/xqliang/gists{/gist_id}", "starred_url": "https://api.github.com/users/xqliang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xqliang/subscriptions", "organizations_url": "https://api.github.com/users/xqliang/orgs", "repos_url": "https://api.github.com/users/xqliang/repos", "events_url": "https://api.github.com/users/xqliang/events{/privacy}", "received_events_url": "https://api.github.com/users/xqliang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-10-12T07:22:45Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to do some process setup before starting any entrypoint, such as loading data from database  to local memory via [nameko-sqlalchemy DependencyProvider](https://github.com/onefinestay/nameko-sqlalchemy).\r\n\r\nBut the nameko-sqlalchemy is a DependencyProvider, and I can't create a new DependencyProvider rely on it.\r\n\r\nCan you introducing an initialization class method, which will be execute after all DependencyProvider started and before starting any EntryPoint?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/478", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/478/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/478/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/478/events", "html_url": "https://github.com/nameko/nameko/issues/478", "id": 261185745, "node_id": "MDU6SXNzdWUyNjExODU3NDU=", "number": 478, "title": "eventlet concurrency issues", "user": {"login": "akotulu", "id": 1204475, "node_id": "MDQ6VXNlcjEyMDQ0NzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1204475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akotulu", "html_url": "https://github.com/akotulu", "followers_url": "https://api.github.com/users/akotulu/followers", "following_url": "https://api.github.com/users/akotulu/following{/other_user}", "gists_url": "https://api.github.com/users/akotulu/gists{/gist_id}", "starred_url": "https://api.github.com/users/akotulu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akotulu/subscriptions", "organizations_url": "https://api.github.com/users/akotulu/orgs", "repos_url": "https://api.github.com/users/akotulu/repos", "events_url": "https://api.github.com/users/akotulu/events{/privacy}", "received_events_url": "https://api.github.com/users/akotulu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-09-28T03:53:16Z", "updated_at": "2017-10-01T22:05:01Z", "closed_at": "2017-09-30T22:13:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey!\r\n\r\nGood library, but you need to throw out eventlet and replace it with Python threads. Eventlet is somewhat useless library, sorry author, but implementing 'threading' without using low level system calls, won\u2019t make it concurrent. You\u2019re adding extra layer of complexity on top of Python processes main thread execution. Wrapping functions inside a object and calling them after one has finished, will halt when client uses external library which won\u2019t return pointer back to hub. Library would be useful if you had done all the lifting in C or equivalent and made python bindings to it, like threading library is doing, yes there are convenience methods missing, but this should be place for your library. Today\u2019s concurrency comes from low level timers; when triggered, current CPU state is saved to registers and depending on priority, next state is loaded and executed. Finally, we have discovered real bottleneck - extra complexity at low level which improved may change many things.\r\n\r\nWhen spawning a new container, code will halt at `start()` and `print` command won\u2019t be called at all if `kombu.mixins.run` waits for consumer at `restart_limit.can_consume(_tokens)`\r\n\r\n```\r\nself._pipe = ServiceContainer(ReportsService, config=self._config)\r\nself._pipe.start()\r\n\r\nprint('wurx')\r\n\r\nself._pipe.wait()\r\n```\r\n\r\n*kombu.mixins.run*\r\n\r\n```\r\ndef run(self, _tokens=1):\r\n    restart_limit = self.restart_limit\r\n    errors = (self.connection.connection_errors +\r\n              self.connection.channel_errors)\r\n    while not self.should_stop:\r\n        try:\r\n            logging.getLogger('nameko').debug('kombu.mixins.run') # added line\r\n            if restart_limit.can_consume(_tokens):\r\n                for _ in self.consume(limit=None):  # pragma: no cover\r\n                    pass\r\n            else:\r\n                sleep(restart_limit.expected_time(_tokens))\r\n        except errors:\r\n            warn(W_CONN_LOST, exc_info=1)\r\n```\r\n\r\nHere is log showing what happens. Thread ID is same for spawned kombu thread which locks up execution.\r\n\r\n```\r\nroot@0e878e34558b:/var/reports/service# python3 service.py\r\n2017-09-28 03:17:52,280 > 140068001568512 - DEBUG - 1\r\n2017-09-28 03:17:52,282 > 140068001568512 - DEBUG - starting <ServiceContainer [reports_dispatch] at 0x7f641a8cbfd0>\r\n2017-09-28 03:17:52,282 > 140068001568512 - DEBUG - ASDASDFASFSA<ServiceContainer [reports_dispatch] at 0x7f641a8cbfd0>\r\n2017-09-28 03:17:52,282 > 140068001568512 - DEBUG - SpawningSet({<RpcConsumer at 0x7f641abaaef0>, <QueueConsumer at 0x7f641a8e3470>})\r\n2017-09-28 03:17:52,284 > 140068001568512 - DEBUG - 6\r\n2017-09-28 03:17:52,284 > 140068001568512 - DEBUG - registering provider <Rpc [reports_dispatch.kill] at 0x7f641a8cbf28> for <RpcConsumer at 0x7f641abaaef0>\r\n2017-09-28 03:17:52,284 > 140068001568512 - DEBUG - 7\r\n2017-09-28 03:17:52,292 > 140068001568512 - DEBUG - Start from server, version: 0.9, properties: {'information': 'Licensed under the MPL.  See http://www.rabbitmq.com/', 'capabilities': {'exch]\r\n2017-09-28 03:17:52,293 > 140068001568512 - DEBUG - Open OK!\r\n2017-09-28 03:17:52,293 > 140068001568512 - DEBUG - 6\r\n2017-09-28 03:17:52,293 > 140068001568512 - DEBUG - registering provider <Rpc [reports_dispatch.run] at 0x7f641a8e34a8> for <RpcConsumer at 0x7f641abaaef0>\r\n2017-09-28 03:17:52,294 > 140068001568512 - DEBUG - 7\r\n2017-09-28 03:17:52,294 > 140068001568512 - DEBUG - 6\r\n2017-09-28 03:17:52,294 > 140068001568512 - DEBUG - registering provider <Rpc [reports_dispatch.ps] at 0x7f641a8cbf60> for <RpcConsumer at 0x7f641abaaef0>\r\n2017-09-28 03:17:52,294 > 140068001568512 - DEBUG - 7\r\n2017-09-28 03:17:52,294 > 140068001568512 - DEBUG - registering provider <RpcConsumer at 0x7f641abaaef0> for <QueueConsumer at 0x7f641a8e3470>\r\n2017-09-28 03:17:52,294 > 140068001568512 - DEBUG - 2\r\n2017-09-28 03:17:52,294 > 140068001568512 - DEBUG - container startedw324324<ServiceContainer [reports_dispatch] at 0x7f641a8cbfd0>\r\n2017-09-28 03:17:52,295 > 140068001568512 - DEBUG - SpawningSet({<RpcConsumer at 0x7f641abaaef0>, <QueueConsumer at 0x7f641a8e3470>})\r\n2017-09-28 03:17:52,295 > 140068001568512 - DEBUG - quee start<QueueConsumer at 0x7f641a8e3470>\r\n2017-09-28 03:17:52,295 > 140068001568512 - DEBUG - starting <QueueConsumer at 0x7f641a8e3470>\r\n2017-09-28 03:17:52,295 > 140068001568512 - DEBUG - 144<RpcConsumer at 0x7f641abaaef0>\r\n\r\n2017-09-28 03:17:52,296 > 140068001568512 - DEBUG - kombu.mixins.run\r\n\r\n2017-09-28 03:17:52,303 > 140068001568512 - DEBUG - Start from server, version: 0.9, properties: {'information': 'Licensed under the MPL.  See http://www.rabbitmq.com/', 'capabilities': {'exch]\r\n2017-09-28 03:17:52,304 > 140068001568512 - DEBUG - Open OK!\r\n2017-09-28 03:17:52,304 > 140068001568512 - DEBUG - using channel_id: 1\r\n2017-09-28 03:17:52,305 > 140068001568512 - DEBUG - Channel open\r\n2017-09-28 03:17:52,305 > 140068001568512 - DEBUG - setting up consumers <QueueConsumer at 0x7f641a8e3470>\r\n2017-09-28 03:17:52,307 > 140068001568512 - DEBUG - consumer started <QueueConsumer at 0x7f641a8e3470>\r\n2017-09-28 03:17:52,307 > 140068001568512 - DEBUG - waiting for consumer ready <QueueConsumer at 0x7f641a8e3470>\r\n2017-09-28 03:17:52,307 > 140068001568512 - DEBUG - START RELEASED QUQU<QueueConsumer at 0x7f641a8e3470>\r\n2017-09-28 03:17:52,307 > 140068001568512 - DEBUG - started <QueueConsumer at 0x7f641a8e3470>\r\n2017-09-28 03:17:52,307 > 140068001568512 - DEBUG - quee end<QueueConsumer at 0x7f641a8e3470>\r\n```\r\n\r\nProblem relies in `messages.py` line\r\n\r\n```\r\nself._gt = self.container.spawn_managed_thread(self.run)\r\n```\r\n\r\nkombu expects a thread which has its own process life cycle.\r\n\r\n\r\nSome notes.\r\n\r\nServiceRunner currenty supports static service array, but in real world everything changes (summer to winter etc), runner should support adding and removing services at runtime.\r\nServiceContainer(config={}) argument should be optional.\r\n\r\nPython was called scripting language, as you write instructions for virtual machine - nothing has changed. You should learn python and move to harder more complex things like C > asm and make improvements at lower level. As a hobby extend and help to improve your preferred language knowing how it runs (to eventlet author).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/474", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/474/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/474/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/474/events", "html_url": "https://github.com/nameko/nameko/issues/474", "id": 258761740, "node_id": "MDU6SXNzdWUyNTg3NjE3NDA=", "number": 474, "title": "Question - nameko with alternative Kombu transports (Redis)", "user": {"login": "shauns", "id": 234027, "node_id": "MDQ6VXNlcjIzNDAyNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/234027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shauns", "html_url": "https://github.com/shauns", "followers_url": "https://api.github.com/users/shauns/followers", "following_url": "https://api.github.com/users/shauns/following{/other_user}", "gists_url": "https://api.github.com/users/shauns/gists{/gist_id}", "starred_url": "https://api.github.com/users/shauns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shauns/subscriptions", "organizations_url": "https://api.github.com/users/shauns/orgs", "repos_url": "https://api.github.com/users/shauns/repos", "events_url": "https://api.github.com/users/shauns/events{/privacy}", "received_events_url": "https://api.github.com/users/shauns/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-19T09:52:31Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hey guys -- just wondering if you've heard of any nameko use with Kombu transports other than RabbitMQ/AMQP, and specifically [Redis](http://docs.celeryproject.org/projects/kombu/en/latest/userguide/connections.html#transport-comparison).\r\n\r\nPresumably(!) leaning on Kombu means things should be transport agnostic, but would be great to hear if anyone has had success in production.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/473", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/473/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/473/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/473/events", "html_url": "https://github.com/nameko/nameko/issues/473", "id": 258457183, "node_id": "MDU6SXNzdWUyNTg0NTcxODM=", "number": 473, "title": "why heartbeat param not in amqp.get_producer ", "user": {"login": "ornoone", "id": 5380232, "node_id": "MDQ6VXNlcjUzODAyMzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5380232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ornoone", "html_url": "https://github.com/ornoone", "followers_url": "https://api.github.com/users/ornoone/followers", "following_url": "https://api.github.com/users/ornoone/following{/other_user}", "gists_url": "https://api.github.com/users/ornoone/gists{/gist_id}", "starred_url": "https://api.github.com/users/ornoone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ornoone/subscriptions", "organizations_url": "https://api.github.com/users/ornoone/orgs", "repos_url": "https://api.github.com/users/ornoone/repos", "events_url": "https://api.github.com/users/ornoone/events{/privacy}", "received_events_url": "https://api.github.com/users/ornoone/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-09-18T12:09:39Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "this is a question to understand why the heartbeat feature is not used for all connections.\r\n\r\nin fact, we found out that our very small micro-service stack (5 micro-services) was consuming more and more memory of our small rabbitmq server (> 400mb ) for 1 message every minutes.\r\n\r\nwe found out that more connection (which consume around 16Mb each) was created over the time, without being closed. the \u00abstale\u00bb connections was without heartbeat.\r\n\r\nI investigated to find that nameko was opening $max_woker connections to the rabbitmq during medium load via get_produced function, but these connections was without the heartbeat parameters, and was not closed after use.\r\n\r\nI just ask if this is intended, or if this should be reworked.\r\n\r\nafter some experiment, it seem the add of heartbeat for get_producer remove the extra connection after the load has passed and thus the memory used by rabbitmq is lower for a small cluster of services.\r\n\r\nversion for testing: \r\n\r\nnameko latest master (commit 286d141af2e0fe3fc5b592228c4cea93ca495d81)\r\namqp==1.4.9\r\n\r\nRabbitMQ 3.6.10, Erlang 19.3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/471", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/471/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/471/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/471/events", "html_url": "https://github.com/nameko/nameko/issues/471", "id": 257250511, "node_id": "MDU6SXNzdWUyNTcyNTA1MTE=", "number": 471, "title": "About WsgiApp with CORS", "user": {"login": "lagelalegal", "id": 5753710, "node_id": "MDQ6VXNlcjU3NTM3MTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5753710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lagelalegal", "html_url": "https://github.com/lagelalegal", "followers_url": "https://api.github.com/users/lagelalegal/followers", "following_url": "https://api.github.com/users/lagelalegal/following{/other_user}", "gists_url": "https://api.github.com/users/lagelalegal/gists{/gist_id}", "starred_url": "https://api.github.com/users/lagelalegal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lagelalegal/subscriptions", "organizations_url": "https://api.github.com/users/lagelalegal/orgs", "repos_url": "https://api.github.com/users/lagelalegal/repos", "events_url": "https://api.github.com/users/lagelalegal/events{/privacy}", "received_events_url": "https://api.github.com/users/lagelalegal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-09-13T03:56:36Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Now, we use `http` decorator only support one method.\r\n```python\r\n@http('GET', '/hello')\r\ndef xxxx(self, request):\r\n    pass\r\n```\r\n\r\nWhy I need multiple methods support\uff1f\r\n\r\nBecause of that I use `put` or `post` method in browser, It have a default method with 'options' been caused. \r\n\r\nIt's base on `CORS`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/467", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/467/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/467/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/467/events", "html_url": "https://github.com/nameko/nameko/issues/467", "id": 252424828, "node_id": "MDU6SXNzdWUyNTI0MjQ4Mjg=", "number": 467, "title": "Sharing Methods", "user": {"login": "geoffjukes", "id": 1959570, "node_id": "MDQ6VXNlcjE5NTk1NzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1959570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffjukes", "html_url": "https://github.com/geoffjukes", "followers_url": "https://api.github.com/users/geoffjukes/followers", "following_url": "https://api.github.com/users/geoffjukes/following{/other_user}", "gists_url": "https://api.github.com/users/geoffjukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffjukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffjukes/subscriptions", "organizations_url": "https://api.github.com/users/geoffjukes/orgs", "repos_url": "https://api.github.com/users/geoffjukes/repos", "events_url": "https://api.github.com/users/geoffjukes/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffjukes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-23T21:40:05Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI feel like all I do is ask questions - Sorry! I do try to read the docs, but I come from an Ops background, so some obvious things are a mystery to me - so I figure I should just ask :)\r\n\r\nIs it considered bad practice to call a method defined in an RPC service, directly?\r\nHow 'normal' is a class that defines an RPC task?\r\n\r\nFor example, what if *all* the RPC methods have the same args - and they all do the same things, like split out a filename, an extension, etc? Normally, I'd put that in an `__init__`.\r\n\r\nA contrived example, would be a File Information method that can called via RPC when the file exists in shared storage, but is called 'directly' for a file in local storage. Each of the File information calls (such as MD5) can also be called via RPC (when the caller requires only that piece of information)\r\n\r\n```\r\nimport os\r\nimport hashlib\r\nimport tempfile\r\nimport shutil\r\nfrom nameko import rpc\r\n\r\nclass FileInfoService:\r\n    name = 'file_info'\r\n\r\n    @rpc\r\n    def summary(self, filepath):\r\n        return  {'filepath': filepath,\r\n                'filename': os.path.basename(filepath),\r\n                'location': os.path.dirname(filepath),\r\n                'size': self.size(filepath),\r\n                'md5': self.md5(filepath)}\r\n\r\n    @rpc\r\n    def size(self, filepath):\r\n        return os.path.getsize(filepath)\r\n\r\n    @rpc\r\n    def md5(self, filepath):\r\n        # Calculates the MD5 of a file at `filepath`\r\n        f = open(filepath, 'rb')\r\n        m = hashlib.md5()\r\n        while True:\r\n            data = f.read(10240)\r\n            if len(data) == 0:\r\n                break\r\n            m.update(data)\r\n        return m.hexdigest()\r\n\r\n\r\nclass FileProcess:\r\n    name = 'file_process'\r\n\r\n    def __init__(self, filepath):\r\n        self.filepath = filepath\r\n        self.filename = os.path.basename(filepath)\r\n\r\n\r\n    @rpc\r\n    def process(self, filepath):\r\n        with tempfile.TemporaryDirectory(dir='/dev/shm') as tmpdir:\r\n            tmp = os.path.join(tmpdir, self.filename)\r\n            shutil.copy(self.filepath, tmp)\r\n            return self.do_stuff()\r\n\r\n    def do_stuff(self):\r\n        # Do stuff to the file that changes it\r\n        # The file only exists in local Temp storage, so I can't make an RPC call for the MD5\r\n        return FileInfoService().summary(self.filepath)\r\n```\r\n\r\nMany thanks,\r\n\r\nGeoff", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/464", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/464/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/464/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/464/events", "html_url": "https://github.com/nameko/nameko/issues/464", "id": 249789708, "node_id": "MDU6SXNzdWUyNDk3ODk3MDg=", "number": 464, "title": "Standalone Event Dispatcher", "user": {"login": "geoffjukes", "id": 1959570, "node_id": "MDQ6VXNlcjE5NTk1NzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1959570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffjukes", "html_url": "https://github.com/geoffjukes", "followers_url": "https://api.github.com/users/geoffjukes/followers", "following_url": "https://api.github.com/users/geoffjukes/following{/other_user}", "gists_url": "https://api.github.com/users/geoffjukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffjukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffjukes/subscriptions", "organizations_url": "https://api.github.com/users/geoffjukes/orgs", "repos_url": "https://api.github.com/users/geoffjukes/repos", "events_url": "https://api.github.com/users/geoffjukes/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffjukes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-12T05:18:58Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nThe docs for the standalone event dispatcher need to be updated (I think). I trawled the code, and figured the following works (for me)\r\n\r\nI'm aiming to send a 'ping' event to all services (just like the example in the events docs).\r\n\r\nIs there an easier/more efficient way to do what I'm doing? or is this pretty much spot on?\r\n\r\n```\r\nfrom nameko.standalone.events import event_dispatcher\r\nfrom nameko.dependency_providers import Config\r\nfrom nameko_slack import rtm\r\n\r\nclass Slack:\r\n    name = 'slackbot'\r\n    config = Config()\r\n\r\n    def dispatch(self, service_name, event_type, event_data):\r\n        event_dispatcher(self.config)(service_name, event_type, event_data)\r\n\r\n    @rtm.handle_message('status')\r\n    def on_status(self, event, message):\r\n        self.dispatch(\"monitor\", \"ping\", event['channel'])\r\n```\r\n\r\nIncidentally - I am a *massive* fan of Nameko.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/461", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/461/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/461/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/461/events", "html_url": "https://github.com/nameko/nameko/issues/461", "id": 247480807, "node_id": "MDU6SXNzdWUyNDc0ODA4MDc=", "number": 461, "title": "Standalone RPC issue when using stevedore - RuntimeError: This consumer has been stopped, and can no longer be used", "user": {"login": "bobh66", "id": 4935304, "node_id": "MDQ6VXNlcjQ5MzUzMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4935304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobh66", "html_url": "https://github.com/bobh66", "followers_url": "https://api.github.com/users/bobh66/followers", "following_url": "https://api.github.com/users/bobh66/following{/other_user}", "gists_url": "https://api.github.com/users/bobh66/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobh66/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobh66/subscriptions", "organizations_url": "https://api.github.com/users/bobh66/orgs", "repos_url": "https://api.github.com/users/bobh66/repos", "events_url": "https://api.github.com/users/bobh66/events{/privacy}", "received_events_url": "https://api.github.com/users/bobh66/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-02T18:28:52Z", "updated_at": "2017-08-22T13:12:46Z", "closed_at": "2017-08-22T13:12:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm using stevedore extensions to load classes that use standalone ClusterRpcProxy to invoke microservices.  The RPC methods are called from a Flask wrapper framework.  \r\n\r\nFor example:\r\n\r\n    class MyTestClass()\r\n        proxy = ClusterRpcProxy(CONFIG)\r\n\r\n        def services_ping(self):\r\n            try:\r\n                with self.proxy as rpc:\r\n                   return rpc.services.ping()\r\n            except UnknownService:\r\n                return 404\r\n\r\nThe service works fine the first time it is called (via REST API), but all calls after that fail with:\r\n\r\n`File \"/usr/lib/python3.4/site-packages/nameko/standalone/rpc.py\", line 53, in wait\r\n    \"This consumer has been stopped, and can no longer be used\"\r\nRuntimeError: This consumer has been stopped, and can no longer be used`\r\n\r\nThe interesting thing is that the AMQP message IS sent to the far end and the far end replies, but the consumer doesn't wait around for the reply because it thinks it has been stopped.\r\n\r\nThe problem seems to be that the \"stopped\" flag for PollingQueueConsumer is set to False in the __init__() method, which is called when the class is instantiated by stevedore.  It works fine for the first invocation of the service, and the stopped flag is set to \"True\" when the proxy finishes in unregister_provider().\r\n\r\nThen when the service is called again, the __init__() class is not called because the proxy already exists, the request gets sent, but the error occurs because stopped was not reset to False by register_provider()\r\n\r\nThe fix seems to be to set self.stopped to False in register_provider() rather than in __init__() so the PollingQueueConsumer knows that the consumer has started again and will wait for the response to the message.\r\n\r\nI'll push a PR for review.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/460", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/460/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/460/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/460/events", "html_url": "https://github.com/nameko/nameko/issues/460", "id": 245851482, "node_id": "MDU6SXNzdWUyNDU4NTE0ODI=", "number": 460, "title": "Support for gevent?", "user": {"login": "bobh66", "id": 4935304, "node_id": "MDQ6VXNlcjQ5MzUzMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4935304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobh66", "html_url": "https://github.com/bobh66", "followers_url": "https://api.github.com/users/bobh66/followers", "following_url": "https://api.github.com/users/bobh66/following{/other_user}", "gists_url": "https://api.github.com/users/bobh66/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobh66/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobh66/subscriptions", "organizations_url": "https://api.github.com/users/bobh66/orgs", "repos_url": "https://api.github.com/users/bobh66/repos", "events_url": "https://api.github.com/users/bobh66/events{/privacy}", "received_events_url": "https://api.github.com/users/bobh66/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-07-26T20:54:37Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Has there been any interest in supporting gevent in addition to eventlet?\r\n\r\nI need to create a dependency on some code that already uses gevent and monkey_patching, so combining it with eventlet monkey_patching doesn't work too well.\r\n\r\nI'd like to abstract the eventlet interface so that a different loop type can be specified, either in config or explicitly, and the appropriate underlying methods would handle the event/timeout/etc processing.\r\n\r\nOr is there an easier way to handle this dependency?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/459", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/459/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/459/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/459/events", "html_url": "https://github.com/nameko/nameko/issues/459", "id": 245613525, "node_id": "MDU6SXNzdWUyNDU2MTM1MjU=", "number": 459, "title": "call_async result", "user": {"login": "geoffjukes", "id": 1959570, "node_id": "MDQ6VXNlcjE5NTk1NzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1959570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffjukes", "html_url": "https://github.com/geoffjukes", "followers_url": "https://api.github.com/users/geoffjukes/followers", "following_url": "https://api.github.com/users/geoffjukes/following{/other_user}", "gists_url": "https://api.github.com/users/geoffjukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffjukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffjukes/subscriptions", "organizations_url": "https://api.github.com/users/geoffjukes/orgs", "repos_url": "https://api.github.com/users/geoffjukes/repos", "events_url": "https://api.github.com/users/geoffjukes/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffjukes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-26T05:53:16Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm looking at bridging/exposing my nameko services to a PHP application. ~~The 2 options I have come up with are a rest service (either a dedicated flask service, or directly using the http extension) or a Celery based worker (using php-celery).~~ -- Celery requires Kombu 4, which Nameko is not compatible with. So a REST service seems like my only option.\r\n\r\nI'm open to other solutions, so please feel free to recommend an alternative approach. I kinda feel like adding additional layers to the stack detracts from the elegance of the Nameko solution. \r\n\r\nI am using Nameko to handle processing of multiple audio files. I have a master task that uses concurrent.futures.map to create a worker pool, each firing an RPCProxy task. As they come back, the master task updates some data, until they all return. The audio processing is an all-or-nothing situation, so a single failed subtask means the whole job failed. The master task marshals all the subtasks and reacts accordingly. The processing can take a few seconds, or many minutes (20+) depending on the length of the source audio, the number of files, and the type of processing. \r\n\r\nOriginally I had this written in Celery, but the 'noise' from all the subtasks was insane, and made reporting/monitoring a nightmare. Nameko really fit the purpose, as I only really care about the master task, not the individual file tasks - failures etc are logged to Graylog2 for diagnostic and troubleshooting. \r\n\r\nSo is there an easy way to submit that master task using call_async, and then check its status/result at a later date using a reference ID or something?\r\n\r\nWith Celery I can call a task, get the task ID, and use that at any time to check the task status (and in RPC mode, get the result exactly once). \r\n\r\nI guess an alternative idea might be to use call_async, and rely on event notifications to get results/status feedback. \r\n\r\nAnyway, not really a bug, but I've read the documentation and the code, and can't really figure it out. \r\n\r\nMany thanks for any help or advice. \r\n\r\nGeoff\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/455", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/455/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/455/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/455/events", "html_url": "https://github.com/nameko/nameko/issues/455", "id": 243610967, "node_id": "MDU6SXNzdWUyNDM2MTA5Njc=", "number": 455, "title": "Is there other languages nameko rpc clients?", "user": {"login": "Gwill", "id": 692980, "node_id": "MDQ6VXNlcjY5Mjk4MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/692980?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gwill", "html_url": "https://github.com/Gwill", "followers_url": "https://api.github.com/users/Gwill/followers", "following_url": "https://api.github.com/users/Gwill/following{/other_user}", "gists_url": "https://api.github.com/users/Gwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gwill/subscriptions", "organizations_url": "https://api.github.com/users/Gwill/orgs", "repos_url": "https://api.github.com/users/Gwill/repos", "events_url": "https://api.github.com/users/Gwill/events{/privacy}", "received_events_url": "https://api.github.com/users/Gwill/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-18T06:20:13Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there other languages nameko rpc clients? such as php, nodejs?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/454", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/454/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/454/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/454/events", "html_url": "https://github.com/nameko/nameko/issues/454", "id": 242647317, "node_id": "MDU6SXNzdWUyNDI2NDczMTc=", "number": 454, "title": "ZeroMQ support", "user": {"login": "vartagg", "id": 3600787, "node_id": "MDQ6VXNlcjM2MDA3ODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/3600787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vartagg", "html_url": "https://github.com/vartagg", "followers_url": "https://api.github.com/users/vartagg/followers", "following_url": "https://api.github.com/users/vartagg/following{/other_user}", "gists_url": "https://api.github.com/users/vartagg/gists{/gist_id}", "starred_url": "https://api.github.com/users/vartagg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vartagg/subscriptions", "organizations_url": "https://api.github.com/users/vartagg/orgs", "repos_url": "https://api.github.com/users/vartagg/repos", "events_url": "https://api.github.com/users/vartagg/events{/privacy}", "received_events_url": "https://api.github.com/users/vartagg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-13T09:55:13Z", "updated_at": "2018-08-13T09:33:18Z", "closed_at": "2018-08-13T09:33:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sometimes RabbitMQ is overkill. How about ZeroMQ support in nameko? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/453", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/453/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/453/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/453/events", "html_url": "https://github.com/nameko/nameko/issues/453", "id": 240056858, "node_id": "MDU6SXNzdWUyNDAwNTY4NTg=", "number": 453, "title": "Does nameko DependencyProvider not support unicode?", "user": {"login": "Blackbelly", "id": 21115885, "node_id": "MDQ6VXNlcjIxMTE1ODg1", "avatar_url": "https://avatars0.githubusercontent.com/u/21115885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blackbelly", "html_url": "https://github.com/Blackbelly", "followers_url": "https://api.github.com/users/Blackbelly/followers", "following_url": "https://api.github.com/users/Blackbelly/following{/other_user}", "gists_url": "https://api.github.com/users/Blackbelly/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blackbelly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blackbelly/subscriptions", "organizations_url": "https://api.github.com/users/Blackbelly/orgs", "repos_url": "https://api.github.com/users/Blackbelly/repos", "events_url": "https://api.github.com/users/Blackbelly/events{/privacy}", "received_events_url": "https://api.github.com/users/Blackbelly/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-03T03:03:39Z", "updated_at": "2017-07-05T15:56:40Z", "closed_at": "2017-07-05T15:56:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use nameko.extensions to connect to MongoDB with mongokit, just like nameko-sqlalchemy. Usage is as follows:\r\n```\r\nfrom nameko.rpc import rpc\r\nfrom nameko_mongokit.database import Collection\r\n\r\nclass ReplyRuleService:\r\n    name = 'replyrule'\r\n    coll = Collection(db_name='test')\r\n\r\n    @rpc\r\n    def find(self):\r\n        print(self.coll)\r\n        r = self.coll.find_random()\r\n        print(r)\r\n```\r\n\r\nI run it on terminal:\r\n`n.rpc.replyrule.find()`\r\nIt could print `self.coll` as `Collection(Database(MongoClient('localhost', 27017), 'test'), 'replyrule\u2019)`, but couldn't print `r`, and raise `nameko.exceptions.RemoteError`:\r\n```\r\nCollection(Database(MongoClient('localhost', 27017), 'test'), 'replyrule\u2019)\r\n\r\nerror handling worker <WorkerContext [replyrule.find] at 0x1049462e8>: 'ascii' codec can't encode characters in position 60-63: ordinal not in range(128)\r\nTraceback (most recent call last):\r\n  File \"/Users/apple/Documents/my_projects/venv/lib/python3.6/site-packages/nameko/containers.py\", line 384, in _run_worker\r\n    result = method(*worker_ctx.args, **worker_ctx.kwargs)\r\n  File \"./replyrule.py\", line 60, in find\r\n    print(r)\r\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 60-63: ordinal not in range(128)\r\n\r\n\r\nTraceback (most recent call last):\r\n  File \"<console>\", line 1, in <module>\r\n  File \"/Users/apple/Documents/my_projects/venv/lib/python3.6/site-packages/nameko/rpc.py\", line 393, in __call__\r\n    return reply.result()\r\n  File \"/Users/apple/Documents/my_projects/venv/lib/python3.6/site-packages/nameko/rpc.py\", line 379, in result\r\n    raise deserialize(error)\r\nnameko.exceptions.RemoteError: UnicodeEncodeError 'ascii' codec can't encode characters in position 60-63: ordinal not in range(128)\r\n```\r\n\r\nbut when I run directly using python command, there is no error:\r\n```\r\nfrom mongokit import Connection\r\n\r\nconn = Connection()\r\ncoll = conn.test.replyrule   # collection\r\nprint(coll)\r\nr = coll.find_random()\r\nprint(r)\r\n```\r\n\r\n```\r\nCollection(Database(MongoClient('localhost', 27017), 'test'), 'replyrule\u2019)\r\n\r\n{'_id': ObjectId('5955bd5a33339d067494a99e'), 'rule_name': '\u56de\u590d\u8bed\u97f3', 'create_time': 1498046133, 'reply_mode': 'random_one', 'keyword_list_info': [{'type': 'text', 'match_mode': 'contain', 'content': '\u83b7\u53d6\u8bed\u97f3'}], 'reply_list_info': [{'type': 'voice', 'content': 'oTyinC0Lthj9LNdTvvdhp6uRVJ0KbLmVTlBEo2NXa5SE5y7QZ-sTmZK7hPOCOkdy'}]}\r\n```\r\nThe field `rule_name` contains unicode characters, but it couldn't be print out with rpc proxy.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/448", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/448/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/448/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/448/events", "html_url": "https://github.com/nameko/nameko/issues/448", "id": 238326936, "node_id": "MDU6SXNzdWUyMzgzMjY5MzY=", "number": 448, "title": "Call function by name?", "user": {"login": "geoffjukes", "id": 1959570, "node_id": "MDQ6VXNlcjE5NTk1NzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1959570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffjukes", "html_url": "https://github.com/geoffjukes", "followers_url": "https://api.github.com/users/geoffjukes/followers", "following_url": "https://api.github.com/users/geoffjukes/following{/other_user}", "gists_url": "https://api.github.com/users/geoffjukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffjukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffjukes/subscriptions", "organizations_url": "https://api.github.com/users/geoffjukes/orgs", "repos_url": "https://api.github.com/users/geoffjukes/repos", "events_url": "https://api.github.com/users/geoffjukes/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffjukes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-24T16:23:48Z", "updated_at": "2017-06-24T19:36:09Z", "closed_at": "2017-06-24T19:36:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nIs it possible to call a method using a string?\r\n\r\nI just discovered nameko - awesome. Fits perfectly into our stack, without the overhead of celery for purely rpc methods. We're using it like an internal-lambda :)\r\n\r\nI have written a REST API using flask/connexion/swagger for specific rpc tasks, but I'd like to add a generic 'call' endpoint (such as `/rpc/call/{service}/{method}` and was wondering how to feed that into the cluster rpcproxy\r\n\r\nMany thanks,\r\n\r\nGeoff\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/445", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/445/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/445/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/445/events", "html_url": "https://github.com/nameko/nameko/issues/445", "id": 235515370, "node_id": "MDU6SXNzdWUyMzU1MTUzNzA=", "number": 445, "title": "request.getfuncargvalue is deprecated since PyTest 3.0", "user": {"login": "frexvahi", "id": 27341103, "node_id": "MDQ6VXNlcjI3MzQxMTAz", "avatar_url": "https://avatars1.githubusercontent.com/u/27341103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frexvahi", "html_url": "https://github.com/frexvahi", "followers_url": "https://api.github.com/users/frexvahi/followers", "following_url": "https://api.github.com/users/frexvahi/following{/other_user}", "gists_url": "https://api.github.com/users/frexvahi/gists{/gist_id}", "starred_url": "https://api.github.com/users/frexvahi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frexvahi/subscriptions", "organizations_url": "https://api.github.com/users/frexvahi/orgs", "repos_url": "https://api.github.com/users/frexvahi/repos", "events_url": "https://api.github.com/users/frexvahi/events{/privacy}", "received_events_url": "https://api.github.com/users/frexvahi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-06-13T10:59:10Z", "updated_at": "2017-06-21T08:52:19Z", "closed_at": "2017-06-21T08:52:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://docs.pytest.org/en/latest/builtin.html#_pytest.fixtures.FixtureRequest.getfuncargvalue\r\nhttps://docs.pytest.org/en/latest/changelog.html#id79\r\n\r\nYes, I know, nameko pins PyTest at version 2.7.3 in setup.py, but this `DeprecationWarning` shows up when testing code that uses nameko.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/443", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/443/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/443/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/443/events", "html_url": "https://github.com/nameko/nameko/issues/443", "id": 234187976, "node_id": "MDU6SXNzdWUyMzQxODc5NzY=", "number": 443, "title": "nameko shell display wrong banier info", "user": {"login": "ornoone", "id": 5380232, "node_id": "MDQ6VXNlcjUzODAyMzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5380232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ornoone", "html_url": "https://github.com/ornoone", "followers_url": "https://api.github.com/users/ornoone/followers", "following_url": "https://api.github.com/users/ornoone/following{/other_user}", "gists_url": "https://api.github.com/users/ornoone/gists{/gist_id}", "starred_url": "https://api.github.com/users/ornoone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ornoone/subscriptions", "organizations_url": "https://api.github.com/users/ornoone/orgs", "repos_url": "https://api.github.com/users/ornoone/repos", "events_url": "https://api.github.com/users/ornoone/events{/privacy}", "received_events_url": "https://api.github.com/users/ornoone/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-07T12:11:30Z", "updated_at": "2017-07-05T15:57:51Z", "closed_at": "2017-07-05T15:57:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I you use `nameko shell --config myconfig.yaml`, the banniere display some bad info (it seem it display the --broker value instead of the one in the config file.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/441", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/441/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/441/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/441/events", "html_url": "https://github.com/nameko/nameko/issues/441", "id": 233439452, "node_id": "MDU6SXNzdWUyMzM0Mzk0NTI=", "number": 441, "title": "Nameko may be incompatible with requests-futures ", "user": {"login": "szhjia", "id": 11793907, "node_id": "MDQ6VXNlcjExNzkzOTA3", "avatar_url": "https://avatars1.githubusercontent.com/u/11793907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/szhjia", "html_url": "https://github.com/szhjia", "followers_url": "https://api.github.com/users/szhjia/followers", "following_url": "https://api.github.com/users/szhjia/following{/other_user}", "gists_url": "https://api.github.com/users/szhjia/gists{/gist_id}", "starred_url": "https://api.github.com/users/szhjia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/szhjia/subscriptions", "organizations_url": "https://api.github.com/users/szhjia/orgs", "repos_url": "https://api.github.com/users/szhjia/repos", "events_url": "https://api.github.com/users/szhjia/events{/privacy}", "received_events_url": "https://api.github.com/users/szhjia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-04T15:12:15Z", "updated_at": "2017-06-04T16:11:28Z", "closed_at": "2017-06-04T16:11:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nI found that library [requests-futures](https://github.com/ross/requests-futures)(asynchronous) may be incompatible with nameko.\r\n\r\n When I initialize with the code: \r\n`request_session_future = FuturesSession(executor=ThreadPoolExecutor(max_workers=10))`\r\nand send post like:\r\n`def post(self, json):       \r\n        request_session_future.post(url=self.backend_url, json=json)`\r\nThe phenomenon is that after nearly 2 minutes the request sent. \r\n\r\nWhen I change back [requests](https://github.com/requests/requests)  (sync). Modify code to:\r\n`request_session = Session()`\r\n`        def post(self, json):            \r\n            request_session.post(url=self.backend_url, json=json)`\r\n\r\nIt executes post request immediately.\r\n\r\nIs there any restriction about asynchronous request ?\r\n\r\nWaiting for you reply, thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/439", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/439/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/439/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/439/events", "html_url": "https://github.com/nameko/nameko/issues/439", "id": 229935625, "node_id": "MDU6SXNzdWUyMjk5MzU2MjU=", "number": 439, "title": "WorkerContext for standalone rpc", "user": {"login": "scarchik", "id": 5052414, "node_id": "MDQ6VXNlcjUwNTI0MTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/5052414?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scarchik", "html_url": "https://github.com/scarchik", "followers_url": "https://api.github.com/users/scarchik/followers", "following_url": "https://api.github.com/users/scarchik/following{/other_user}", "gists_url": "https://api.github.com/users/scarchik/gists{/gist_id}", "starred_url": "https://api.github.com/users/scarchik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scarchik/subscriptions", "organizations_url": "https://api.github.com/users/scarchik/orgs", "repos_url": "https://api.github.com/users/scarchik/repos", "events_url": "https://api.github.com/users/scarchik/events{/privacy}", "received_events_url": "https://api.github.com/users/scarchik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-05-19T10:31:38Z", "updated_at": "2017-07-21T09:59:59Z", "closed_at": "2017-07-21T09:59:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi @mattbennett,\r\n\r\nI use standalone rpc to communicate between Flask front-end service with Nameko microservices. And I previously inherit WorkerContext to add unique request_id to each request. It needing to ensure better log investigating. My code:\r\n\r\n```\r\nclass WorkerContextWithRequestID(WorkerContext):\r\n\r\n    @property\r\n    def context_data(self):\r\n        data = self.data.copy()\r\n\r\n        data[CALL_ID_STACK_CONTEXT_KEY] = [getattr(request, 'request_id')]\r\n        data[CALL_ID_STACK_CONTEXT_KEY].extend(self.call_id_stack)\r\n\r\n        return data\r\n```\r\n\r\nAs I see it persistent context_data dictionary can't provide the same functionality.\r\nWorkerContext had been deleted from standalone rpc in https://github.com/nameko/nameko/commit/1e2e3298a5e6ca05cd8cef3ae89ef4ef6f7c0c82.\r\n\r\nCan we return WorkerContext to StandaloneProxyBase?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/428", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/428/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/428/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/428/events", "html_url": "https://github.com/nameko/nameko/issues/428", "id": 220973038, "node_id": "MDU6SXNzdWUyMjA5NzMwMzg=", "number": 428, "title": "Deadlock and AMQP reconnections when prefetched messages exceed max workers", "user": {"login": "mattbennett", "id": 107611, "node_id": "MDQ6VXNlcjEwNzYxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/107611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattbennett", "html_url": "https://github.com/mattbennett", "followers_url": "https://api.github.com/users/mattbennett/followers", "following_url": "https://api.github.com/users/mattbennett/following{/other_user}", "gists_url": "https://api.github.com/users/mattbennett/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattbennett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattbennett/subscriptions", "organizations_url": "https://api.github.com/users/mattbennett/orgs", "repos_url": "https://api.github.com/users/mattbennett/repos", "events_url": "https://api.github.com/users/mattbennett/events{/privacy}", "received_events_url": "https://api.github.com/users/mattbennett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-04-11T14:35:41Z", "updated_at": "2017-04-20T16:19:07Z", "closed_at": "2017-04-20T16:18:30Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The interaction of the AMQP `prefetch_count` and Nameko's worker pool can result in strange behaviour in some circumstances.\r\n\r\nWhen the number of unack'd messages exceeds the worker pool size, the QueueConsumer thread blocks waiting for a worker. Consequently, any outstanding message acks are not processed. This can result in deadlock if the running workers use RPC proxies.\r\n\r\nThe QueueConsumer thread is also responsible for sending heartbeats. If it thread ends up waiting for the worker pool longer two heartbearts, the broker will the connection. Any in-flight messages will be re-queued and the workers duplicated. Any currently running workers that are waiting for an RPC reply will raise \"disconnected waiting for reply\" errors upon reconnection.\r\n\r\nThis bug has been present for a long time but is easier to trigger as a result of the change in https://github.com/nameko/nameko/pull/419.\r\n\r\nThere is a simple fix, which I will raise in a PR now.\r\n\r\nThis raises the question of whether the worker pool is a useful construct or not. I am still forming an opinion but my current thoughts are:\r\n\r\n* 10 workers is way too low for the default\r\n* perhaps we should remove the restriction altogether, and just let throughput be constrained by available resources\r\n* it may be useful for some _entrypoints_ to be constrained (i.e. only run x of these types of workers concurrently) but having a global constraint shared amongst all types of workers causes confusion without really solving a problem\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/425", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/425/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/425/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/425/events", "html_url": "https://github.com/nameko/nameko/issues/425", "id": 219991452, "node_id": "MDU6SXNzdWUyMTk5OTE0NTI=", "number": 425, "title": "Fixed version of eventlet", "user": {"login": "mohamedrez", "id": 1301162, "node_id": "MDQ6VXNlcjEzMDExNjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1301162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mohamedrez", "html_url": "https://github.com/mohamedrez", "followers_url": "https://api.github.com/users/mohamedrez/followers", "following_url": "https://api.github.com/users/mohamedrez/following{/other_user}", "gists_url": "https://api.github.com/users/mohamedrez/gists{/gist_id}", "starred_url": "https://api.github.com/users/mohamedrez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mohamedrez/subscriptions", "organizations_url": "https://api.github.com/users/mohamedrez/orgs", "repos_url": "https://api.github.com/users/mohamedrez/repos", "events_url": "https://api.github.com/users/mohamedrez/events{/privacy}", "received_events_url": "https://api.github.com/users/mohamedrez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-04-06T18:31:59Z", "updated_at": "2018-08-09T10:58:12Z", "closed_at": "2018-08-09T10:58:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "ref:\r\nhttps://github.com/nameko/nameko/blob/master/setup.py#L24\r\n\r\nthe release v0.20.1 of eventlet breaked our build, I think it's more safe to specify a version instead of `>=`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/424", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/424/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/424/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/424/events", "html_url": "https://github.com/nameko/nameko/issues/424", "id": 219515141, "node_id": "MDU6SXNzdWUyMTk1MTUxNDE=", "number": 424, "title": "rcp: allow to return promise instead of forcefully synchronous result()", "user": {"login": "ornoone", "id": 5380232, "node_id": "MDQ6VXNlcjUzODAyMzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5380232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ornoone", "html_url": "https://github.com/ornoone", "followers_url": "https://api.github.com/users/ornoone/followers", "following_url": "https://api.github.com/users/ornoone/following{/other_user}", "gists_url": "https://api.github.com/users/ornoone/gists{/gist_id}", "starred_url": "https://api.github.com/users/ornoone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ornoone/subscriptions", "organizations_url": "https://api.github.com/users/ornoone/orgs", "repos_url": "https://api.github.com/users/ornoone/repos", "events_url": "https://api.github.com/users/ornoone/events{/privacy}", "received_events_url": "https://api.github.com/users/ornoone/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-04-05T09:04:40Z", "updated_at": "2017-04-05T12:43:57Z", "closed_at": "2017-04-05T12:43:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It can be a good integration to add the support for returning Promise for rpc call, along with synchronous result. \r\n\r\nfor now, it seem we can do: \r\n```python\r\nwith ClusterRpcProxy(config) as cluster_rpc:\r\n    set_handler_for_events()\r\n    hello_res = cluster_rpc.service_x.remote_method.call_async(\"hello\")\r\n    hello_res.result()\r\n    teardown_handler()\r\n\r\n\r\n````\r\nbut if we don't care for the result, but must run some code (cleanup?) after the rpc is finished, without blocking the whole function, it would be nice to do \r\n```\r\nwith ClusterRpcProxy(config) as cluster_rpc:\r\n    set_handler_for_events()\r\n    hello_res = cluster_rpc.service_x.remote_method.call_async(\"hello\")\r\n    promise = hello_res.promise()\r\n    @promise.then\r\n    def after():\r\n        teardown_handler()\r\n```\r\n\r\nthis should add a `promise` method to `RpcReply`  which return a Promise (generic). \r\n\r\nI don't know how to do without blocking. but it seem a good use case.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/417", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/417/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/417/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/417/events", "html_url": "https://github.com/nameko/nameko/issues/417", "id": 214058879, "node_id": "MDU6SXNzdWUyMTQwNTg4Nzk=", "number": 417, "title": "Performance: one service worker can only process one task per second? ", "user": {"login": "parachvte", "id": 3749551, "node_id": "MDQ6VXNlcjM3NDk1NTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/3749551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/parachvte", "html_url": "https://github.com/parachvte", "followers_url": "https://api.github.com/users/parachvte/followers", "following_url": "https://api.github.com/users/parachvte/following{/other_user}", "gists_url": "https://api.github.com/users/parachvte/gists{/gist_id}", "starred_url": "https://api.github.com/users/parachvte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/parachvte/subscriptions", "organizations_url": "https://api.github.com/users/parachvte/orgs", "repos_url": "https://api.github.com/users/parachvte/repos", "events_url": "https://api.github.com/users/parachvte/events{/privacy}", "received_events_url": "https://api.github.com/users/parachvte/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819323, "node_id": "MDU6TGFiZWwyOTgxOTMyMw==", "url": "https://api.github.com/repos/nameko/nameko/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2017-03-14T12:38:35Z", "updated_at": "2017-04-20T14:52:28Z", "closed_at": "2017-03-16T17:23:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a ServiceContainer with only one worker, as below:\r\n\r\n```Python\r\nconfig = {\r\n        AMQP_URI_CONFIG_KEY:AMQP_URL,\r\n        MAX_WORKERS_CONFIG_KEY: 1,\r\n}\r\nServiceContainer(service_class, config)\r\n```\r\n\r\nAfter sending async calls, I started the service as the consumer. But it turns out that the only one worker can do exactly one task per second, is there something wrong with my configuration?\r\n\r\nThe service simply returns a number:\r\n\r\n```Python\r\nclass Consumer(object):\r\n    name = 'test'\r\n    @rpc\r\n    def work(self):\r\n        logging.info('hello')\r\n        return 42\r\n```\r\n\r\nlogs:\r\n\r\n```\r\n[I 170314 20:39:25 main:26] hello\r\n[I 170314 20:39:26 main:26] hello\r\n[I 170314 20:39:27 main:26] hello\r\n[I 170314 20:39:28 main:26] hello\r\n[I 170314 20:39:29 main:26] hello\r\n[I 170314 20:39:30 main:26] hello\r\n[I 170314 20:39:31 main:26] hello\r\n[I 170314 20:39:32 main:26] hello\r\n[I 170314 20:39:33 main:26] hello\r\n[I 170314 20:39:34 main:26] hello\r\n[I 170314 20:39:35 main:26] hello\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/416", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/416/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/416/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/416/events", "html_url": "https://github.com/nameko/nameko/issues/416", "id": 212967778, "node_id": "MDU6SXNzdWUyMTI5Njc3Nzg=", "number": 416, "title": "Does nameko support load balancing?", "user": {"login": "erhuabushuo", "id": 1642364, "node_id": "MDQ6VXNlcjE2NDIzNjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1642364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erhuabushuo", "html_url": "https://github.com/erhuabushuo", "followers_url": "https://api.github.com/users/erhuabushuo/followers", "following_url": "https://api.github.com/users/erhuabushuo/following{/other_user}", "gists_url": "https://api.github.com/users/erhuabushuo/gists{/gist_id}", "starred_url": "https://api.github.com/users/erhuabushuo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erhuabushuo/subscriptions", "organizations_url": "https://api.github.com/users/erhuabushuo/orgs", "repos_url": "https://api.github.com/users/erhuabushuo/repos", "events_url": "https://api.github.com/users/erhuabushuo/events{/privacy}", "received_events_url": "https://api.github.com/users/erhuabushuo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29819327, "node_id": "MDU6TGFiZWwyOTgxOTMyNw==", "url": "https://api.github.com/repos/nameko/nameko/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-09T08:33:46Z", "updated_at": "2018-08-13T09:33:19Z", "closed_at": "2018-08-13T09:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does nameko support load balancing?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/414", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/414/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/414/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/414/events", "html_url": "https://github.com/nameko/nameko/issues/414", "id": 210426110, "node_id": "MDU6SXNzdWUyMTA0MjYxMTA=", "number": 414, "title": "Pylint config for dependency providers", "user": {"login": "abulte", "id": 119625, "node_id": "MDQ6VXNlcjExOTYyNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/119625?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abulte", "html_url": "https://github.com/abulte", "followers_url": "https://api.github.com/users/abulte/followers", "following_url": "https://api.github.com/users/abulte/following{/other_user}", "gists_url": "https://api.github.com/users/abulte/gists{/gist_id}", "starred_url": "https://api.github.com/users/abulte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abulte/subscriptions", "organizations_url": "https://api.github.com/users/abulte/orgs", "repos_url": "https://api.github.com/users/abulte/repos", "events_url": "https://api.github.com/users/abulte/events{/privacy}", "received_events_url": "https://api.github.com/users/abulte/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-02-27T09:13:10Z", "updated_at": "2017-02-27T16:49:25Z", "closed_at": "2017-02-27T16:49:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI've playing with nameko for the past few days and so far I'm quite impressed with it, thanks!\r\n\r\nI have one minor problem though: currently `pylint` is yelling at me when I use methods from dependency providers. For example, when using an injected `DatabaseSession` and calling `self.db.commit()` I get `E1101 Instance of DatabaseSession has no commit member`.\r\n\r\nIs there a pylint trick you're aware of that would allow me to not ignore those errors on a line by line basis?\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nameko/nameko/issues/411", "repository_url": "https://api.github.com/repos/nameko/nameko", "labels_url": "https://api.github.com/repos/nameko/nameko/issues/411/labels{/name}", "comments_url": "https://api.github.com/repos/nameko/nameko/issues/411/comments", "events_url": "https://api.github.com/repos/nameko/nameko/issues/411/events", "html_url": "https://github.com/nameko/nameko/issues/411", "id": 207323216, "node_id": "MDU6SXNzdWUyMDczMjMyMTY=", "number": 411, "title": "maximum recursion depth exceeded ", "user": {"login": "greole", "id": 4960441, "node_id": "MDQ6VXNlcjQ5NjA0NDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4960441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/greole", "html_url": "https://github.com/greole", "followers_url": "https://api.github.com/users/greole/followers", "following_url": "https://api.github.com/users/greole/following{/other_user}", "gists_url": "https://api.github.com/users/greole/gists{/gist_id}", "starred_url": "https://api.github.com/users/greole/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/greole/subscriptions", "organizations_url": "https://api.github.com/users/greole/orgs", "repos_url": "https://api.github.com/users/greole/repos", "events_url": "https://api.github.com/users/greole/events{/privacy}", "received_events_url": "https://api.github.com/users/greole/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-02-13T19:59:48Z", "updated_at": "2017-02-17T09:13:21Z", "closed_at": "2017-02-17T09:13:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to make a request from within a nameko service.\r\n\r\n```\r\nimport requests\r\n\r\nclass Service:\r\n\r\n    requests.get('https://www.python.org')\r\n\r\n    @rpc\r\n    def test(self):\r\n        return \"foo\"\r\n```\r\nHowever I am running into following error. What am I missing?\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/go/.local/bin//nameko\", line 11, in <module>\r\n    load_entry_point('nameko==2.5.1', 'console_scripts', 'nameko')()\r\n  File \"/home/go/.local/lib/python3.7/site-packages/nameko-2.5.1-py3.7.egg/nameko/cli/main.py\", line 62, in main\r\n  File \"/home/go/.local/lib/python3.7/site-packages/nameko-2.5.1-py3.7.egg/nameko/cli/commands.py\", line 85, in main\r\n  File \"/home/go/.local/lib/python3.7/site-packages/nameko-2.5.1-py3.7.egg/nameko/cli/run.py\", line 178, in main\r\n  File \"/home/go/.local/lib/python3.7/site-packages/nameko-2.5.1-py3.7.egg/nameko/cli/run.py\", line 45, in import_service\r\n  File \"./test.py\", line 12, in <module>\r\n    class Service:\r\n  File \"./test.py\", line 14, in Service\r\n    requests.get('https://www.python.org')\r\n  File \"/home/go/.local/lib/python3.7/site-packages/requests/api.py\", line 70, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"/home/go/.local/lib/python3.7/site-packages/requests/api.py\", line 56, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/home/go/.local/lib/python3.7/site-packages/requests/sessions.py\", line 488, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/home/go/.local/lib/python3.7/site-packages/requests/sessions.py\", line 609, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/home/go/.local/lib/python3.7/site-packages/requests/adapters.py\", line 423, in send\r\n    timeout=timeout\r\n  File \"/home/go/.local/lib/python3.7/site-packages/requests/packages/urllib3/connectionpool.py\", line 594, in urlopen\r\n    chunked=chunked)\r\n  File \"/home/go/.local/lib/python3.7/site-packages/requests/packages/urllib3/connectionpool.py\", line 350, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/home/go/.local/lib/python3.7/site-packages/requests/packages/urllib3/connectionpool.py\", line 835, in _validate_conn\r\n    conn.connect()\r\n  File \"/home/go/.local/lib/python3.7/site-packages/requests/packages/urllib3/connection.py\", line 311, in connect\r\n    cert_reqs=resolve_cert_reqs(self.cert_reqs),\r\n  File \"/home/go/.local/lib/python3.7/site-packages/requests/packages/urllib3/util/ssl_.py\", line 264, in create_urllib3_context\r\n    context.options |= options\r\n  File \"/usr/local/lib/python3.7/ssl.py\", line 459, in options\r\n    super(SSLContext, SSLContext).options.__set__(self, value)\r\n  File \"/usr/local/lib/python3.7/ssl.py\", line 459, in options\r\n    super(SSLContext, SSLContext).options.__set__(self, value)\r\n  File \"/usr/local/lib/python3.7/ssl.py\", line 459, in options\r\n    super(SSLContext, SSLContext).options.__set__(self, value)\r\n  [Previous line repeated 319 more times]\r\nRecursionError: maximum recursion depth exceeded\r\n```", "performed_via_github_app": null, "score": 1.0}]}