{"total_count": 214, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/528", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/528/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/528/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/528/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/528", "id": 639800437, "node_id": "MDU6SXNzdWU2Mzk4MDA0Mzc=", "number": 528, "title": "django: webargs raise 500 on validation errors as opposed to 400", "user": {"login": "nicholasamorim", "id": 2200260, "node_id": "MDQ6VXNlcjIyMDAyNjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/2200260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicholasamorim", "html_url": "https://github.com/nicholasamorim", "followers_url": "https://api.github.com/users/nicholasamorim/followers", "following_url": "https://api.github.com/users/nicholasamorim/following{/other_user}", "gists_url": "https://api.github.com/users/nicholasamorim/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicholasamorim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicholasamorim/subscriptions", "organizations_url": "https://api.github.com/users/nicholasamorim/orgs", "repos_url": "https://api.github.com/users/nicholasamorim/repos", "events_url": "https://api.github.com/users/nicholasamorim/events{/privacy}", "received_events_url": "https://api.github.com/users/nicholasamorim/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953699, "node_id": "MDU6TGFiZWw4MDk1MzY5OQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-16T16:17:25Z", "updated_at": "2020-06-29T14:40:13Z", "closed_at": "2020-06-29T14:40:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure if this is intentional. I know that the view is responsible for handling `ValidationError` but the thing is.. if I use marshmallow directly:\r\n\r\n```python\r\nfrom rest_framework.views import APIView\r\n\r\nclass TestHandler(APIView):\r\n\tdef post(self, request, *args, **kwargs):\r\n\t\tserializer = SearchRequestSchema(data=self.request.data)\r\n\t    serializer.is_valid(raise_exception=True)\r\n```\r\n\r\nAny problem in validation will properly raise a 400 with proper response.\r\n\r\nBut if I do this:\r\n\r\n```python\r\nfrom rest_framework.views import APIView\r\n\r\nclass TestHandler(APIView):\r\n\t@use_args(SearchRequestSchema(), location=\"json\")\r\n\tdef post(self, request, data, *args, **kwargs):\r\n\t    pass\r\n```\r\n\r\nA 500 is raised.\r\n\r\n```\r\n    error_headers=error_headers,\r\n  File \"/Users/nicholas/.virtualenvs/sm2accounts/lib/python3.7/site-packages/webargs/core.py\", line 537, in handle_error\r\n    raise error\r\n  File \"/Users/nicholas/.virtualenvs/sm2accounts/lib/python3.7/site-packages/webargs/core.py\", line 260, in parse\r\n    result = schema.load(location_data)\r\n  File \"/Users/nicholas/.virtualenvs/sm2accounts/lib/python3.7/site-packages/marshmallow/schema.py\", line 723, in load\r\n    data, many=many, partial=partial, unknown=unknown, postprocess=True\r\n  File \"/Users/nicholas/.virtualenvs/sm2accounts/lib/python3.7/site-packages/marshmallow/schema.py\", line 904, in _do_load\r\n    raise exc\r\nmarshmallow.exceptions.ValidationError: {'instance_id': ['Invalid value.']}\r\n```\r\n\r\nI'm not exactly sure why they behave differently if supposedly the same kind of exception is raised.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/521", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/521/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/521/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/521/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/521", "id": 627405551, "node_id": "MDU6SXNzdWU2Mjc0MDU1NTE=", "number": 521, "title": "Base MethodView with Flask", "user": {"login": "dfilter", "id": 26309722, "node_id": "MDQ6VXNlcjI2MzA5NzIy", "avatar_url": "https://avatars1.githubusercontent.com/u/26309722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfilter", "html_url": "https://github.com/dfilter", "followers_url": "https://api.github.com/users/dfilter/followers", "following_url": "https://api.github.com/users/dfilter/following{/other_user}", "gists_url": "https://api.github.com/users/dfilter/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfilter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfilter/subscriptions", "organizations_url": "https://api.github.com/users/dfilter/orgs", "repos_url": "https://api.github.com/users/dfilter/repos", "events_url": "https://api.github.com/users/dfilter/events{/privacy}", "received_events_url": "https://api.github.com/users/dfilter/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953699, "node_id": "MDU6TGFiZWw4MDk1MzY5OQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-29T16:57:49Z", "updated_at": "2020-06-09T16:43:07Z", "closed_at": "2020-06-09T15:57:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was wondering if there is a way to create a base flask MethodView that can be reused for multiple different models and schemas in conjunction with webargs. For example i have the below MethodView:\r\n```\r\nclass DocumentQueryArgs(QueryArgsSchema):\r\n    name = fields.Str()\r\n    type = fields.Str()\r\n\r\n\r\nclass DocumentMethodView(MethodView):    \r\n    @use_args(DocumentQueryArgs(), location='query')\r\n    def get(self, args, id=None):\r\n        if id:\r\n            document = Document.find_by_id(id)\r\n            return DocumentSchema().dump(document)\r\n\r\n        response = Document.find_by(**args)\r\n        response['records'] = DocumentSchema(many=True).dump(\r\n            response['records'])\r\n        return response\r\n\r\n    @use_args(DocumentSchema(), location='json')\r\n    def post(self, args):\r\n        args.commit_to_db()\r\n        return {\r\n            'message': 'Document successfully created.',\r\n            'record': DocumentSchema().dump(args)\r\n        }, 201\r\n\r\n    @use_args(DocumentSchema(), location='json')\r\n    def put(self, args, id):\r\n        args.commit_to_db()\r\n        return {\r\n            'message': 'Document successfully updated.',\r\n            'record': DocumentSchema().dump(args)\r\n        }\r\n\r\n    def delete(self, id):\r\n        document = Document.find_by_id(id)\r\n        record = DocumentSchema().dump(document)\r\n        document.delete()\r\n        return {\r\n            'message': 'Document successfully deleted.',\r\n            'record': record\r\n        }\r\n```\r\nMy MethodView for my Product model and schema looks identical. I'd like to reduce duplicated code if possible.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/518", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/518/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/518/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/518/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/518", "id": 622779208, "node_id": "MDU6SXNzdWU2MjI3NzkyMDg=", "number": 518, "title": "Parsing arguments always returns None", "user": {"login": "NaturalBornCamper", "id": 1697306, "node_id": "MDQ6VXNlcjE2OTczMDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1697306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NaturalBornCamper", "html_url": "https://github.com/NaturalBornCamper", "followers_url": "https://api.github.com/users/NaturalBornCamper/followers", "following_url": "https://api.github.com/users/NaturalBornCamper/following{/other_user}", "gists_url": "https://api.github.com/users/NaturalBornCamper/gists{/gist_id}", "starred_url": "https://api.github.com/users/NaturalBornCamper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NaturalBornCamper/subscriptions", "organizations_url": "https://api.github.com/users/NaturalBornCamper/orgs", "repos_url": "https://api.github.com/users/NaturalBornCamper/repos", "events_url": "https://api.github.com/users/NaturalBornCamper/events{/privacy}", "received_events_url": "https://api.github.com/users/NaturalBornCamper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953699, "node_id": "MDU6TGFiZWw4MDk1MzY5OQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-21T20:49:42Z", "updated_at": "2020-07-16T21:26:30Z", "closed_at": "2020-07-16T21:26:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "parsing the arguments always returns None, even if trying the most basic syntax taken from the [quick start page](https://webargs.readthedocs.io/en/latest/quickstart.html#basic-usage). Maybe I have a typo I failed to see.\r\n\r\nVersions:\r\nFlask: 1.1.2\r\nMarshmallow: 3.6.0\r\nFlask-marshmallow: 0.12\r\nwebargs: 6.1.0\r\n\r\nCode:\r\n```python\r\nfrom pprint import pprint\r\n\r\nfrom flask import request\r\nfrom flask_restful import Resource\r\nfrom webargs import fields, validate\r\nfrom webargs.flaskparser import parser\r\n\r\n# Flask-restful resource, GET method called with ?type=99999\r\nclass WebsiteList(Resource):\r\n    @classmethod\r\n    # @use_kwargs(website_args)\r\n    def get(cls):\r\n        website_args = {\r\n            'type': fields.String(\r\n                required=True,\r\n                validate=validate.Range(min=0, max=6, error=\"testing error, never triggered\")\r\n            ),\r\n        }\r\n\r\n        # Line below outputs: ImmutableMultiDict([('type', '6')])\r\n        pprint(request.args)\r\n\r\n        args = parser.parse(website_args, request)\r\n        # Line below outputs: None\r\n        pprint(args)\r\n```\r\n\r\nI have also tried the decorator @use_kwargs(website_args) (And define website_args beforehand of course), but I get a traceback for TypeError: 'NoneType' object is not iterable:\r\n```python\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Marco\\.virtualenvs\\api-kHflOUBu\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"C:\\Users\\Marco\\.virtualenvs\\api-kHflOUBu\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"C:\\Users\\Marco\\.virtualenvs\\api-kHflOUBu\\lib\\site-packages\\flask_restful\\__init__.py\", line 468, in wrapper\r\n    resp = resource(*args, **kwargs)\r\n  File \"C:\\Users\\Marco\\.virtualenvs\\api-kHflOUBu\\lib\\site-packages\\flask\\views.py\", line 89, in view\r\n    return self.dispatch_request(*args, **kwargs)\r\n  File \"C:\\Users\\Marco\\.virtualenvs\\api-kHflOUBu\\lib\\site-packages\\flask_restful\\__init__.py\", line 583, in dispatch_request\r\n    resp = meth(*args, **kwargs)\r\n  File \"C:\\Users\\Marco\\.virtualenvs\\api-kHflOUBu\\lib\\site-packages\\webargs\\core.py\", line 364, in wrapper\r\n    args, kwargs, parsed_args, as_kwargs\r\n  File \"C:\\Users\\Marco\\.virtualenvs\\api-kHflOUBu\\lib\\site-packages\\webargs\\core.py\", line 298, in _update_args_kwargs\r\n    kwargs.update(parsed_args)\r\nTypeError: 'NoneType' object is not iterable\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/511", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/511/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/511/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/511/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/511", "id": 613419287, "node_id": "MDU6SXNzdWU2MTM0MTkyODc=", "number": 511, "title": "Documentation for old versions", "user": {"login": "avilaton", "id": 2209022, "node_id": "MDQ6VXNlcjIyMDkwMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2209022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avilaton", "html_url": "https://github.com/avilaton", "followers_url": "https://api.github.com/users/avilaton/followers", "following_url": "https://api.github.com/users/avilaton/following{/other_user}", "gists_url": "https://api.github.com/users/avilaton/gists{/gist_id}", "starred_url": "https://api.github.com/users/avilaton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avilaton/subscriptions", "organizations_url": "https://api.github.com/users/avilaton/orgs", "repos_url": "https://api.github.com/users/avilaton/repos", "events_url": "https://api.github.com/users/avilaton/events{/privacy}", "received_events_url": "https://api.github.com/users/avilaton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953699, "node_id": "MDU6TGFiZWw4MDk1MzY5OQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-05-06T15:41:24Z", "updated_at": "2020-05-18T13:10:57Z", "closed_at": "2020-05-18T02:23:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\nI was looking at the documentation and was unable to find the docs for an outdated version I have to work with. The project I work on is using 1.4.0, crazy old, but the docs only show stable and dev docs. Would it be possible to keep the docs for legacy versions up there? \r\nIf I'm pointed to the right place I can code up whatever needs to be done so that readthedocs builds old versions, I just don't know where that would be.\r\nThanks in advance for all the effort. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/510", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/510/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/510/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/510/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/510", "id": 612792672, "node_id": "MDU6SXNzdWU2MTI3OTI2NzI=", "number": 510, "title": "TypeError: parse_query_string() got an unexpected keyword argument 'keep_blank'", "user": {"login": "mekanix", "id": 610855, "node_id": "MDQ6VXNlcjYxMDg1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/610855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mekanix", "html_url": "https://github.com/mekanix", "followers_url": "https://api.github.com/users/mekanix/followers", "following_url": "https://api.github.com/users/mekanix/following{/other_user}", "gists_url": "https://api.github.com/users/mekanix/gists{/gist_id}", "starred_url": "https://api.github.com/users/mekanix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mekanix/subscriptions", "organizations_url": "https://api.github.com/users/mekanix/orgs", "repos_url": "https://api.github.com/users/mekanix/repos", "events_url": "https://api.github.com/users/mekanix/events{/privacy}", "received_events_url": "https://api.github.com/users/mekanix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-05T18:05:03Z", "updated_at": "2020-05-06T07:52:10Z", "closed_at": "2020-05-06T07:44:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get that error running tests on 6.1.0 on FreeBSD. As maintainer of the package, I wanted to upgrade it to 6.1.0 from 6.0.0 (which passes the tests). Am I missing some dependent library update? So this is the whole log\r\n```\r\n===>  Testing for py37-webargs-6.1.0\r\n===>   py37-webargs-6.1.0 depends on package: py37-pytest>0 - found\r\n===>   py37-webargs-6.1.0 depends on package: py37-mock>0 - found\r\n===>   py37-webargs-6.1.0 depends on package: py37-WebTest>0 - found\r\n===>   py37-webargs-6.1.0 depends on package: py37-bottle>0 - found\r\n===>   py37-webargs-6.1.0 depends on package: py37-tornado>=4.5.2 - found\r\n===>   py37-webargs-6.1.0 depends on package: py37-Flask>=0.12.2 - found\r\n===>   py37-webargs-6.1.0 depends on package: py37-falcon>=1.4.0,<2.0 - found\r\n===>   py37-webargs-6.1.0 depends on package: py37-django*>=1.11.16 - found\r\n===>   py37-webargs-6.1.0 depends on file: /usr/local/bin/python3.7 - found\r\ncd /usr/ports/www/py-webargs/work-py37/webargs-6.1.0 && /usr/bin/env PYTHONPATH=/usr/ports/www/py-webargs/work-py37/webargs-6.1.0/src /usr/local/bin/python3.7 -m pytest -v -rs -o addopts=  --ignore-glob='*webapp2*'  --ignore-glob='*pyramid*'  --ignore-glob='*test_aiohttpparser*'\r\n============================= test session starts ==============================\r\nplatform freebsd12 -- Python 3.7.7, pytest-4.5.0, py-1.8.1, pluggy-0.13.1 -- /usr/local/bin/python3.7\r\ncachedir: .pytest_cache\r\nrootdir: /usr/ports/www/py-webargs/work-py37/webargs-6.1.0\r\ncollecting ... collected 315 items\r\n\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_querystring_args PASSED [  0%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_form PASSED     [  0%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_json PASSED     [  0%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_json_missing PASSED [  1%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_json_or_form PASSED [  1%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_querystring_default PASSED [  1%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_json_default PASSED [  2%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_json_with_charset PASSED [  2%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_ignore_extra_data PASSED [  2%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_json_empty PASSED [  3%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_json_error_unexpected_int PASSED [  3%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_json_error_unexpected_list PASSED [  3%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_json_many_schema_invalid_input PASSED [  4%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_json_many_schema PASSED [  4%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_json_many_schema_error_malformed_data PASSED [  4%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parsing_form_default PASSED [  5%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_querystring_multiple PASSED [  5%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_querystring_multiple_single_value PASSED [  5%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_form_multiple PASSED [  6%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_json_list PASSED [  6%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_json_list_error_malformed_data PASSED [  6%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_json_with_nonascii_chars PASSED [  6%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_json_with_nonutf8_chars PASSED [  7%]\r\ntests/test_bottleparser.py::TestBottleParser::test_validation_error_returns_422_response PASSED [  7%]\r\ntests/test_bottleparser.py::TestBottleParser::test_user_validation_error_returns_422_response_by_default PASSED [  7%]\r\ntests/test_bottleparser.py::TestBottleParser::test_use_args_decorator PASSED [  8%]\r\ntests/test_bottleparser.py::TestBottleParser::test_use_args_with_path_param PASSED [  8%]\r\ntests/test_bottleparser.py::TestBottleParser::test_use_args_with_validation PASSED [  8%]\r\ntests/test_bottleparser.py::TestBottleParser::test_use_kwargs_decorator PASSED [  9%]\r\ntests/test_bottleparser.py::TestBottleParser::test_use_kwargs_with_path_param PASSED [  9%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parsing_headers PASSED [  9%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parsing_cookies PASSED [ 10%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_nested_json PASSED [ 10%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_nested_many_json PASSED [ 10%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_nested_many_missing PASSED [ 11%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_files PASSED    [ 11%]\r\ntests/test_bottleparser.py::TestBottleParser::test_empty_json PASSED     [ 11%]\r\ntests/test_bottleparser.py::TestBottleParser::test_empty_json_with_headers PASSED [ 12%]\r\ntests/test_bottleparser.py::TestBottleParser::test_invalid_json FAILED   [ 12%]\r\ntests/test_bottleparser.py::TestBottleParser::test_content_type_mismatch[/echo_json-{\"name\": \"foo\"}-application/x-www-form-urlencoded] PASSED [ 12%]\r\ntests/test_bottleparser.py::TestBottleParser::test_content_type_mismatch[/echo_form-payload1-application/json] PASSED [ 13%]\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_json_with_vendor_media_type SKIPPED [ 13%]\r\ntests/test_core.py::test_load_json_called_by_parse_default PASSED        [ 13%]\r\ntests/test_core.py::test_load_nondefault_called_by_parse_with_location[querystring] PASSED [ 13%]\r\ntests/test_core.py::test_load_nondefault_called_by_parse_with_location[form] PASSED [ 14%]\r\ntests/test_core.py::test_load_nondefault_called_by_parse_with_location[headers] PASSED [ 14%]\r\ntests/test_core.py::test_load_nondefault_called_by_parse_with_location[cookies] PASSED [ 14%]\r\ntests/test_core.py::test_load_nondefault_called_by_parse_with_location[files] PASSED [ 15%]\r\ntests/test_core.py::test_parse PASSED                                    [ 15%]\r\ntests/test_core.py::test_parse_with_unknown_behavior_specified PASSED    [ 15%]\r\ntests/test_core.py::test_parse_required_arg_raises_validation_error PASSED [ 16%]\r\ntests/test_core.py::test_arg_not_required_excluded_in_parsed_output PASSED [ 16%]\r\ntests/test_core.py::test_arg_allow_none PASSED                           [ 16%]\r\ntests/test_core.py::test_parse_required_arg PASSED                       [ 17%]\r\ntests/test_core.py::test_parse_required_list PASSED                      [ 17%]\r\ntests/test_core.py::test_parse_list_allow_none PASSED                    [ 17%]\r\ntests/test_core.py::test_parse_list_dont_allow_none PASSED               [ 18%]\r\ntests/test_core.py::test_parse_empty_list PASSED                         [ 18%]\r\ntests/test_core.py::test_parse_missing_list PASSED                       [ 18%]\r\ntests/test_core.py::test_default_location PASSED                         [ 19%]\r\ntests/test_core.py::test_missing_with_default PASSED                     [ 19%]\r\ntests/test_core.py::test_default_can_be_none PASSED                      [ 19%]\r\ntests/test_core.py::test_arg_with_default_and_location PASSED            [ 20%]\r\ntests/test_core.py::test_value_error_raised_if_parse_called_with_invalid_location PASSED [ 20%]\r\ntests/test_core.py::test_handle_error_called_when_parsing_raises_error PASSED [ 20%]\r\ntests/test_core.py::test_handle_error_reraises_errors PASSED             [ 20%]\r\ntests/test_core.py::test_location_as_init_argument PASSED                [ 21%]\r\ntests/test_core.py::test_custom_error_handler PASSED                     [ 21%]\r\ntests/test_core.py::test_custom_error_handler_decorator PASSED           [ 21%]\r\ntests/test_core.py::test_custom_location_loader PASSED                   [ 22%]\r\ntests/test_core.py::test_custom_location_loader_with_data_key PASSED     [ 22%]\r\ntests/test_core.py::test_full_input_validation PASSED                    [ 22%]\r\ntests/test_core.py::test_full_input_validation_with_multiple_validators PASSED [ 23%]\r\ntests/test_core.py::test_required_with_custom_error PASSED               [ 23%]\r\ntests/test_core.py::test_required_with_custom_error_and_validation_error PASSED [ 23%]\r\ntests/test_core.py::test_full_input_validator_receives_nonascii_input PASSED [ 24%]\r\ntests/test_core.py::test_invalid_argument_for_validate PASSED            [ 24%]\r\ntests/test_core.py::test_multidict_proxy[input_dict0] PASSED             [ 24%]\r\ntests/test_core.py::test_multidict_proxy[input_dict1] PASSED             [ 25%]\r\ntests/test_core.py::test_multidict_proxy[input_dict2] PASSED             [ 25%]\r\ntests/test_core.py::test_parse_with_data_key PASSED                      [ 25%]\r\ntests/test_core.py::test_load_from_is_checked_after_given_key SKIPPED    [ 26%]\r\ntests/test_core.py::test_parse_with_data_key_retains_field_name_in_error PASSED [ 26%]\r\ntests/test_core.py::test_parse_nested_with_data_key PASSED               [ 26%]\r\ntests/test_core.py::test_parse_nested_with_missing_key_and_data_key PASSED [ 26%]\r\ntests/test_core.py::test_parse_nested_with_default PASSED                [ 27%]\r\ntests/test_core.py::test_nested_many PASSED                              [ 27%]\r\ntests/test_core.py::test_use_args PASSED                                 [ 27%]\r\ntests/test_core.py::test_use_args_stacked PASSED                         [ 28%]\r\ntests/test_core.py::test_use_kwargs_stacked PASSED                       [ 28%]\r\ntests/test_core.py::test_decorators_dont_change_docstring[use_args] PASSED [ 28%]\r\ntests/test_core.py::test_decorators_dont_change_docstring[use_kwargs] PASSED [ 29%]\r\ntests/test_core.py::test_list_allowed_missing PASSED                     [ 29%]\r\ntests/test_core.py::test_int_list_allowed_missing PASSED                 [ 29%]\r\ntests/test_core.py::test_multiple_arg_required_with_int_conversion PASSED [ 30%]\r\ntests/test_core.py::test_parse_with_callable PASSED                      [ 30%]\r\ntests/test_core.py::test_use_args_callable PASSED                        [ 30%]\r\ntests/test_core.py::TestPassingSchema::test_passing_schema_to_parse PASSED [ 31%]\r\ntests/test_core.py::TestPassingSchema::test_use_args_can_be_passed_a_schema PASSED [ 31%]\r\ntests/test_core.py::TestPassingSchema::test_passing_schema_factory_to_parse PASSED [ 31%]\r\ntests/test_core.py::TestPassingSchema::test_use_args_can_be_passed_a_schema_factory PASSED [ 32%]\r\ntests/test_core.py::TestPassingSchema::test_use_kwargs_can_be_passed_a_schema PASSED [ 32%]\r\ntests/test_core.py::TestPassingSchema::test_use_kwargs_can_be_passed_a_schema_factory PASSED [ 32%]\r\ntests/test_core.py::TestPassingSchema::test_warning_raised_if_schema_is_not_in_strict_mode SKIPPED [ 33%]\r\ntests/test_core.py::TestPassingSchema::test_use_kwargs_stacked PASSED    [ 33%]\r\ntests/test_core.py::TestPassingSchema::test_parse_does_not_add_missing_values_to_schema_validator PASSED [ 33%]\r\ntests/test_core.py::test_use_args_with_custom_location_in_parser PASSED  [ 33%]\r\ntests/test_core.py::test_use_kwargs PASSED                               [ 34%]\r\ntests/test_core.py::test_use_kwargs_with_arg_missing PASSED              [ 34%]\r\ntests/test_core.py::test_delimited_list_default_delimiter PASSED         [ 34%]\r\ntests/test_core.py::test_delimited_tuple_default_delimiter PASSED        [ 35%]\r\ntests/test_core.py::test_delimited_tuple_incorrect_arity PASSED          [ 35%]\r\ntests/test_core.py::test_delimited_list_with_datetime PASSED             [ 35%]\r\ntests/test_core.py::test_delimited_list_custom_delimiter PASSED          [ 36%]\r\ntests/test_core.py::test_delimited_tuple_custom_delimiter PASSED         [ 36%]\r\ntests/test_core.py::test_delimited_list_load_list_errors PASSED          [ 36%]\r\ntests/test_core.py::test_delimited_tuple_load_list_errors PASSED         [ 37%]\r\ntests/test_core.py::test_delimited_list_passed_invalid_type PASSED       [ 37%]\r\ntests/test_core.py::test_delimited_tuple_passed_invalid_type PASSED      [ 37%]\r\ntests/test_core.py::test_missing_list_argument_not_in_parsed_result PASSED [ 38%]\r\ntests/test_core.py::test_type_conversion_with_multiple_required PASSED   [ 38%]\r\ntests/test_core.py::test_validation_errors_in_validator_are_passed_to_handle_error PASSED [ 38%]\r\ntests/test_core.py::test_parse_basic PASSED                              [ 39%]\r\ntests/test_core.py::test_parse_raises_validation_error_if_data_invalid PASSED [ 39%]\r\ntests/test_core.py::test_dict2schema PASSED                              [ 39%]\r\ntests/test_core.py::test_dict2schema_doesnt_add_to_class_registry PASSED [ 40%]\r\ntests/test_core.py::test_dict2schema_with_nesting PASSED                 [ 40%]\r\ntests/test_core.py::test_is_json PASSED                                  [ 40%]\r\ntests/test_core.py::test_get_mimetype PASSED                             [ 40%]\r\ntests/test_core.py::test_parse_with_error_status_code_and_headers PASSED [ 41%]\r\ntests/test_core.py::test_custom_schema_class PASSED                      [ 41%]\r\ntests/test_core.py::test_custom_default_schema_class PASSED              [ 41%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_querystring_args PASSED [ 42%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_form PASSED     [ 42%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_json PASSED     [ 42%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_json_missing PASSED [ 43%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_json_or_form PASSED [ 43%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_querystring_default PASSED [ 43%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_json_default PASSED [ 44%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_json_with_charset PASSED [ 44%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_json_with_vendor_media_type PASSED [ 44%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_ignore_extra_data PASSED [ 45%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_json_empty PASSED [ 45%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_json_error_unexpected_int PASSED [ 45%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_json_error_unexpected_list PASSED [ 46%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_json_many_schema_invalid_input PASSED [ 46%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_json_many_schema PASSED [ 46%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_json_many_schema_error_malformed_data PASSED [ 46%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parsing_form_default PASSED [ 47%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_querystring_multiple PASSED [ 47%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_querystring_multiple_single_value PASSED [ 47%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_form_multiple PASSED [ 48%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_json_list PASSED [ 48%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_json_list_error_malformed_data PASSED [ 48%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_json_with_nonascii_chars PASSED [ 49%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_json_with_nonutf8_chars PASSED [ 49%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_validation_error_returns_422_response PASSED [ 49%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_user_validation_error_returns_422_response_by_default PASSED [ 50%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_use_args_decorator PASSED [ 50%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_use_args_with_path_param PASSED [ 50%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_use_kwargs_decorator PASSED [ 51%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_use_kwargs_with_path_param PASSED [ 51%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parsing_cookies PASSED [ 51%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_nested_json PASSED [ 52%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_nested_many_json PASSED [ 52%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_nested_many_missing PASSED [ 52%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parse_files PASSED    [ 53%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_empty_json PASSED     [ 53%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_empty_json_with_headers PASSED [ 53%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_invalid_json PASSED   [ 53%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_content_type_mismatch[/echo_json-{\"name\": \"foo\"}-application/x-www-form-urlencoded] PASSED [ 54%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_content_type_mismatch[/echo_form-payload1-application/json] PASSED [ 54%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_use_args_with_validation SKIPPED [ 54%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parsing_headers SKIPPED [ 55%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_parsing_in_class_based_view PASSED [ 55%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_use_args_in_class_based_view PASSED [ 55%]\r\ntests/test_djangoparser.py::TestDjangoParser::test_use_args_in_class_based_view_with_path_param PASSED [ 56%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_querystring_args PASSED [ 56%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_form FAILED     [ 56%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_json PASSED     [ 57%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_json_missing PASSED [ 57%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_json_or_form FAILED [ 57%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_querystring_default PASSED [ 58%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_json_default PASSED [ 58%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_json_with_charset PASSED [ 58%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_json_with_vendor_media_type PASSED [ 59%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_ignore_extra_data PASSED [ 59%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_json_empty PASSED [ 59%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_json_error_unexpected_int PASSED [ 60%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_json_error_unexpected_list PASSED [ 60%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_json_many_schema_invalid_input PASSED [ 60%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_json_many_schema PASSED [ 60%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_json_many_schema_error_malformed_data PASSED [ 61%]\r\ntests/test_falconparser.py::TestFalconParser::test_parsing_form_default PASSED [ 61%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_querystring_multiple PASSED [ 61%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_querystring_multiple_single_value PASSED [ 62%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_form_multiple FAILED [ 62%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_json_list PASSED [ 62%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_json_list_error_malformed_data PASSED [ 63%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_json_with_nonascii_chars PASSED [ 63%]\r\ntests/test_falconparser.py::TestFalconParser::test_validation_error_returns_422_response PASSED [ 63%]\r\ntests/test_falconparser.py::TestFalconParser::test_user_validation_error_returns_422_response_by_default PASSED [ 64%]\r\ntests/test_falconparser.py::TestFalconParser::test_use_args_decorator PASSED [ 64%]\r\ntests/test_falconparser.py::TestFalconParser::test_use_args_with_path_param PASSED [ 64%]\r\ntests/test_falconparser.py::TestFalconParser::test_use_args_with_validation FAILED [ 65%]\r\ntests/test_falconparser.py::TestFalconParser::test_use_kwargs_decorator PASSED [ 65%]\r\ntests/test_falconparser.py::TestFalconParser::test_use_kwargs_with_path_param PASSED [ 65%]\r\ntests/test_falconparser.py::TestFalconParser::test_parsing_cookies PASSED [ 66%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_nested_json PASSED [ 66%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_nested_many_json PASSED [ 66%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_nested_many_missing PASSED [ 66%]\r\ntests/test_falconparser.py::TestFalconParser::test_empty_json PASSED     [ 67%]\r\ntests/test_falconparser.py::TestFalconParser::test_empty_json_with_headers PASSED [ 67%]\r\ntests/test_falconparser.py::TestFalconParser::test_content_type_mismatch[/echo_json-{\"name\": \"foo\"}-application/x-www-form-urlencoded] PASSED [ 67%]\r\ntests/test_falconparser.py::TestFalconParser::test_content_type_mismatch[/echo_form-payload1-application/json] PASSED [ 68%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_files SKIPPED   [ 68%]\r\ntests/test_falconparser.py::TestFalconParser::test_use_args_hook PASSED  [ 68%]\r\ntests/test_falconparser.py::TestFalconParser::test_parse_json_with_nonutf8_chars PASSED [ 69%]\r\ntests/test_falconparser.py::TestFalconParser::test_invalid_json PASSED   [ 69%]\r\ntests/test_falconparser.py::TestFalconParser::test_parsing_headers PASSED [ 69%]\r\ntests/test_falconparser.py::TestFalconParser::test_body_parsing_works_with_simulate PASSED [ 70%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_querystring_args PASSED [ 70%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_form PASSED       [ 70%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_json PASSED       [ 71%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_json_missing PASSED [ 71%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_json_or_form PASSED [ 71%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_querystring_default PASSED [ 72%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_json_default PASSED [ 72%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_json_with_charset PASSED [ 72%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_json_with_vendor_media_type PASSED [ 73%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_ignore_extra_data PASSED [ 73%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_json_empty PASSED [ 73%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_json_error_unexpected_int PASSED [ 73%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_json_error_unexpected_list PASSED [ 74%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_json_many_schema_invalid_input PASSED [ 74%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_json_many_schema PASSED [ 74%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_json_many_schema_error_malformed_data PASSED [ 75%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parsing_form_default PASSED [ 75%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_querystring_multiple PASSED [ 75%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_querystring_multiple_single_value PASSED [ 76%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_form_multiple PASSED [ 76%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_json_list PASSED  [ 76%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_json_list_error_malformed_data PASSED [ 77%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_json_with_nonascii_chars PASSED [ 77%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_json_with_nonutf8_chars PASSED [ 77%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_validation_error_returns_422_response PASSED [ 78%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_user_validation_error_returns_422_response_by_default PASSED [ 78%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_use_args_decorator PASSED [ 78%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_use_args_with_path_param PASSED [ 79%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_use_args_with_validation PASSED [ 79%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_use_kwargs_decorator PASSED [ 79%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_use_kwargs_with_path_param PASSED [ 80%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parsing_headers PASSED  [ 80%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parsing_cookies PASSED  [ 80%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_nested_json PASSED [ 80%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_nested_many_json PASSED [ 81%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_nested_many_missing PASSED [ 81%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parse_files PASSED      [ 81%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_empty_json PASSED       [ 82%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_empty_json_with_headers PASSED [ 82%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_invalid_json PASSED     [ 82%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_content_type_mismatch[/echo_json-{\"name\": \"foo\"}-application/x-www-form-urlencoded] PASSED [ 83%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_content_type_mismatch[/echo_form-payload1-application/json] PASSED [ 83%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parsing_view_args PASSED [ 83%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_parsing_invalid_view_arg PASSED [ 84%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_use_args_with_view_args_parsing PASSED [ 84%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_use_args_on_a_method_view PASSED [ 84%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_use_kwargs_on_a_method_view PASSED [ 85%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_use_kwargs_with_missing_data PASSED [ 85%]\r\ntests/test_flaskparser.py::TestFlaskParser::test_nested_many_with_data_key PASSED [ 85%]\r\ntests/test_flaskparser.py::test_abort_called_on_validation_error PASSED  [ 86%]\r\ntests/test_flaskparser.py::test_load_json_returns_missing_if_no_data[None] PASSED [ 86%]\r\ntests/test_flaskparser.py::test_load_json_returns_missing_if_no_data[application/json] PASSED [ 86%]\r\ntests/test_flaskparser.py::test_abort_with_message PASSED                [ 86%]\r\ntests/test_flaskparser.py::test_abort_has_serializable_data PASSED       [ 87%]\r\ntests/test_tornadoparser.py::test_tornado_multidictproxy PASSED          [ 87%]\r\ntests/test_tornadoparser.py::TestQueryArgs::test_it_should_get_single_values PASSED [ 87%]\r\ntests/test_tornadoparser.py::TestQueryArgs::test_it_should_get_multiple_values PASSED [ 88%]\r\ntests/test_tornadoparser.py::TestQueryArgs::test_it_should_return_missing_if_not_present PASSED [ 88%]\r\ntests/test_tornadoparser.py::TestFormArgs::test_it_should_get_single_values PASSED [ 88%]\r\ntests/test_tornadoparser.py::TestFormArgs::test_it_should_get_multiple_values PASSED [ 89%]\r\ntests/test_tornadoparser.py::TestFormArgs::test_it_should_return_missing_if_not_present PASSED [ 89%]\r\ntests/test_tornadoparser.py::TestJSONArgs::test_it_should_get_single_values PASSED [ 89%]\r\ntests/test_tornadoparser.py::TestJSONArgs::test_parsing_request_with_vendor_content_type PASSED [ 90%]\r\ntests/test_tornadoparser.py::TestJSONArgs::test_it_should_get_multiple_values PASSED [ 90%]\r\ntests/test_tornadoparser.py::TestJSONArgs::test_it_should_get_multiple_nested_values PASSED [ 90%]\r\ntests/test_tornadoparser.py::TestJSONArgs::test_it_should_not_include_fieldnames_if_not_present PASSED [ 91%]\r\ntests/test_tornadoparser.py::TestJSONArgs::test_it_should_handle_type_error_on_load_json PASSED [ 91%]\r\ntests/test_tornadoparser.py::TestJSONArgs::test_it_should_handle_value_error_on_parse_json PASSED [ 91%]\r\ntests/test_tornadoparser.py::TestHeadersArgs::test_it_should_get_single_values PASSED [ 92%]\r\ntests/test_tornadoparser.py::TestHeadersArgs::test_it_should_get_multiple_values PASSED [ 92%]\r\ntests/test_tornadoparser.py::TestHeadersArgs::test_it_should_return_missing_if_not_present PASSED [ 92%]\r\ntests/test_tornadoparser.py::TestFilesArgs::test_it_should_get_single_values PASSED [ 93%]\r\ntests/test_tornadoparser.py::TestFilesArgs::test_it_should_get_multiple_values PASSED [ 93%]\r\ntests/test_tornadoparser.py::TestFilesArgs::test_it_should_return_missing_if_not_present PASSED [ 93%]\r\ntests/test_tornadoparser.py::TestErrorHandler::test_it_should_raise_httperror_on_failed_validation PASSED [ 93%]\r\ntests/test_tornadoparser.py::TestParse::test_it_should_parse_query_arguments PASSED [ 94%]\r\ntests/test_tornadoparser.py::TestParse::test_it_should_parse_form_arguments PASSED [ 94%]\r\ntests/test_tornadoparser.py::TestParse::test_it_should_parse_json_arguments PASSED [ 94%]\r\ntests/test_tornadoparser.py::TestParse::test_it_should_raise_when_json_is_invalid PASSED [ 95%]\r\ntests/test_tornadoparser.py::TestParse::test_it_should_parse_header_arguments PASSED [ 95%]\r\ntests/test_tornadoparser.py::TestParse::test_it_should_parse_cookies_arguments PASSED [ 95%]\r\ntests/test_tornadoparser.py::TestParse::test_it_should_parse_files_arguments PASSED [ 96%]\r\ntests/test_tornadoparser.py::TestParse::test_it_should_parse_required_arguments PASSED [ 96%]\r\ntests/test_tornadoparser.py::TestParse::test_it_should_parse_multiple_arg_required PASSED [ 96%]\r\ntests/test_tornadoparser.py::TestUseArgs::test_it_should_pass_parsed_as_first_argument PASSED [ 97%]\r\ntests/test_tornadoparser.py::TestUseArgs::test_it_should_pass_parsed_as_kwargs_arguments PASSED [ 97%]\r\ntests/test_tornadoparser.py::TestUseArgs::test_it_should_be_validate_arguments_when_validator_is_passed PASSED [ 97%]\r\ntests/test_tornadoparser.py::TestApp::test_get_path_param PASSED         [ 98%]\r\ntests/test_tornadoparser.py::TestApp::test_get_with_no_json_body PASSED  [ 98%]\r\ntests/test_tornadoparser.py::TestApp::test_post PASSED                   [ 98%]\r\ntests/test_tornadoparser.py::TestValidateApp::test_missing_required_field_throws_422 PASSED [ 99%]\r\ntests/test_tornadoparser.py::TestValidateApp::test_required_field_provided PASSED [ 99%]\r\ntests/test_tornadoparser.py::TestValidateApp::test_use_kwargs_with_error PASSED [ 99%]\r\ntests/test_tornadoparser.py::TestValidateApp::test_user_validator_returns_422_by_default PASSED [100%]\r\n\r\n=================================== FAILURES ===================================\r\n______________________ TestBottleParser.test_invalid_json ______________________\r\n\r\nself = <tests.test_bottleparser.TestBottleParser object at 0x805b3bfd0>\r\ntestapp = <webtest.app.TestApp object at 0x805acbe90>\r\n\r\n    def test_invalid_json(self, testapp):\r\n        res = testapp.post(\r\n            \"/echo_json\",\r\n            '{\"foo\": \"bar\", }',\r\n            headers={\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"},\r\n            expect_errors=True,\r\n        )\r\n>       assert res.status_code == 400\r\nE       assert 500 == 400\r\nE         -500\r\nE         +400\r\n\r\nsrc/webargs/testing.py:254: AssertionError\r\n_______________________ TestFalconParser.test_parse_form _______________________\r\n\r\nself = <tests.test_falconparser.TestFalconParser object at 0x804eab810>\r\ntestapp = <webtest.app.TestApp object at 0x805db7290>\r\n\r\n    def test_parse_form(self, testapp):\r\n>       assert testapp.post(\"/echo_form\", {\"name\": \"Joe\"}).json == {\"name\": \"Joe\"}\r\n\r\nsrc/webargs/testing.py:43: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n/usr/local/lib/python3.7/site-packages/webtest/app.py:382: in post\r\n    content_type=content_type)\r\n/usr/local/lib/python3.7/site-packages/webtest/app.py:758: in _gen_request\r\n    expect_errors=expect_errors)\r\n/usr/local/lib/python3.7/site-packages/webtest/app.py:628: in do_request\r\n    res = req.get_response(app, catch_exc_info=True)\r\n/usr/local/lib/python3.7/site-packages/webob/request.py:1309: in send\r\n    application, catch_exc_info=True)\r\n/usr/local/lib/python3.7/site-packages/webob/request.py:1277: in call_application\r\n    app_iter = application(self.environ, start_response)\r\n/usr/local/lib/python3.7/site-packages/webtest/lint.py:200: in lint_app\r\n    iterator = application(environ, start_response_wrapper)\r\nfalcon/api.py:248: in falcon.api.API.__call__\r\n    ???\r\nfalcon/api.py:244: in falcon.api.API.__call__\r\n    ???\r\ntests/apps/falcon_app.py:34: in on_post\r\n    parsed = parser.parse(hello_args, req, location=\"form\")\r\nsrc/webargs/core.py:258: in parse\r\n    schema=schema, req=req, location=location\r\nsrc/webargs/core.py:162: in _load_location_data\r\n    data = loader_func(req, schema)\r\nsrc/webargs/falconparser.py:94: in load_form\r\n    form = parse_form_body(req)\r\nsrc/webargs/falconparser.py:51: in parse_form_body\r\n    return parse_query_string(body, keep_blank=req.options.keep_blank_qs_values)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\nE   TypeError: parse_query_string() got an unexpected keyword argument 'keep_blank'\r\n\r\nfalcon/util/uri.py:285: TypeError\r\n___________________ TestFalconParser.test_parse_json_or_form ___________________\r\n\r\nself = <tests.test_falconparser.TestFalconParser object at 0x805edbb90>\r\ntestapp = <webtest.app.TestApp object at 0x805db7290>\r\n\r\n    def test_parse_json_or_form(self, testapp):\r\n        assert testapp.post_json(\"/echo_json_or_form\", {\"name\": \"Fred\"}).json == {\r\n            \"name\": \"Fred\"\r\n        }\r\n>       assert testapp.post(\"/echo_json_or_form\", {\"name\": \"Joe\"}).json == {\r\n            \"name\": \"Joe\"\r\n        }\r\n\r\nsrc/webargs/testing.py:57: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n/usr/local/lib/python3.7/site-packages/webtest/app.py:382: in post\r\n    content_type=content_type)\r\n/usr/local/lib/python3.7/site-packages/webtest/app.py:758: in _gen_request\r\n    expect_errors=expect_errors)\r\n/usr/local/lib/python3.7/site-packages/webtest/app.py:628: in do_request\r\n    res = req.get_response(app, catch_exc_info=True)\r\n/usr/local/lib/python3.7/site-packages/webob/request.py:1309: in send\r\n    application, catch_exc_info=True)\r\n/usr/local/lib/python3.7/site-packages/webob/request.py:1277: in call_application\r\n    app_iter = application(self.environ, start_response)\r\n/usr/local/lib/python3.7/site-packages/webtest/lint.py:200: in lint_app\r\n    iterator = application(environ, start_response_wrapper)\r\nfalcon/api.py:248: in falcon.api.API.__call__\r\n    ???\r\nfalcon/api.py:244: in falcon.api.API.__call__\r\n    ???\r\ntests/apps/falcon_app.py:46: in on_post\r\n    parsed = parser.parse(hello_args, req, location=\"json_or_form\")\r\nsrc/webargs/core.py:258: in parse\r\n    schema=schema, req=req, location=location\r\nsrc/webargs/core.py:162: in _load_location_data\r\n    data = loader_func(req, schema)\r\nsrc/webargs/core.py:483: in load_json_or_form\r\n    return self.load_form(req, schema)\r\nsrc/webargs/falconparser.py:94: in load_form\r\n    form = parse_form_body(req)\r\nsrc/webargs/falconparser.py:51: in parse_form_body\r\n    return parse_query_string(body, keep_blank=req.options.keep_blank_qs_values)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\nE   TypeError: parse_query_string() got an unexpected keyword argument 'keep_blank'\r\n\r\nfalcon/util/uri.py:285: TypeError\r\n__________________ TestFalconParser.test_parse_form_multiple ___________________\r\n\r\nself = <tests.test_falconparser.TestFalconParser object at 0x805edb810>\r\ntestapp = <webtest.app.TestApp object at 0x805db7290>\r\n\r\n    def test_parse_form_multiple(self, testapp):\r\n        expected = {\"name\": [\"steve\", \"Loria\"]}\r\n>       assert (\r\n            testapp.post(\"/echo_multi_form\", {\"name\": [\"steve\", \"Loria\"]}).json\r\n            == expected\r\n        )\r\n\r\nsrc/webargs/testing.py:133: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n/usr/local/lib/python3.7/site-packages/webtest/app.py:382: in post\r\n    content_type=content_type)\r\n/usr/local/lib/python3.7/site-packages/webtest/app.py:758: in _gen_request\r\n    expect_errors=expect_errors)\r\n/usr/local/lib/python3.7/site-packages/webtest/app.py:628: in do_request\r\n    res = req.get_response(app, catch_exc_info=True)\r\n/usr/local/lib/python3.7/site-packages/webob/request.py:1309: in send\r\n    application, catch_exc_info=True)\r\n/usr/local/lib/python3.7/site-packages/webob/request.py:1277: in call_application\r\n    app_iter = application(self.environ, start_response)\r\n/usr/local/lib/python3.7/site-packages/webtest/lint.py:200: in lint_app\r\n    iterator = application(environ, start_response_wrapper)\r\nfalcon/api.py:248: in falcon.api.API.__call__\r\n    ???\r\nfalcon/api.py:244: in falcon.api.API.__call__\r\n    ???\r\ntests/apps/falcon_app.py:84: in on_post\r\n    resp.body = json.dumps(parser.parse(hello_multiple, req, location=\"form\"))\r\nsrc/webargs/core.py:258: in parse\r\n    schema=schema, req=req, location=location\r\nsrc/webargs/core.py:162: in _load_location_data\r\n    data = loader_func(req, schema)\r\nsrc/webargs/falconparser.py:94: in load_form\r\n    form = parse_form_body(req)\r\nsrc/webargs/falconparser.py:51: in parse_form_body\r\n    return parse_query_string(body, keep_blank=req.options.keep_blank_qs_values)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\nE   TypeError: parse_query_string() got an unexpected keyword argument 'keep_blank'\r\n\r\nfalcon/util/uri.py:285: TypeError\r\n________________ TestFalconParser.test_use_args_with_validation ________________\r\n\r\nself = <tests.test_falconparser.TestFalconParser object at 0x805db81d0>\r\ntestapp = <webtest.app.TestApp object at 0x805db7290>\r\n\r\n    def test_use_args_with_validation(self, testapp):\r\n>       result = testapp.post(\"/echo_use_args_validated\", {\"value\": 43})\r\n\r\nsrc/webargs/testing.py:183: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n/usr/local/lib/python3.7/site-packages/webtest/app.py:382: in post\r\n    content_type=content_type)\r\n/usr/local/lib/python3.7/site-packages/webtest/app.py:758: in _gen_request\r\n    expect_errors=expect_errors)\r\n/usr/local/lib/python3.7/site-packages/webtest/app.py:628: in do_request\r\n    res = req.get_response(app, catch_exc_info=True)\r\n/usr/local/lib/python3.7/site-packages/webob/request.py:1309: in send\r\n    application, catch_exc_info=True)\r\n/usr/local/lib/python3.7/site-packages/webob/request.py:1277: in call_application\r\n    app_iter = application(self.environ, start_response)\r\n/usr/local/lib/python3.7/site-packages/webtest/lint.py:200: in lint_app\r\n    iterator = application(environ, start_response_wrapper)\r\nfalcon/api.py:248: in falcon.api.API.__call__\r\n    ???\r\nfalcon/api.py:244: in falcon.api.API.__call__\r\n    ???\r\nsrc/webargs/core.py:361: in wrapper\r\n    error_headers=error_headers,\r\nsrc/webargs/core.py:258: in parse\r\n    schema=schema, req=req, location=location\r\nsrc/webargs/core.py:162: in _load_location_data\r\n    data = loader_func(req, schema)\r\nsrc/webargs/falconparser.py:94: in load_form\r\n    form = parse_form_body(req)\r\nsrc/webargs/falconparser.py:51: in parse_form_body\r\n    return parse_query_string(body, keep_blank=req.options.keep_blank_qs_values)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\nE   TypeError: parse_query_string() got an unexpected keyword argument 'keep_blank'\r\n\r\nfalcon/util/uri.py:285: TypeError\r\n=============================== warnings summary ===============================\r\n/usr/local/lib/python3.7/site-packages/bottle.py:87\r\n  /usr/local/lib/python3.7/site-packages/bottle.py:87: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working\r\n    from collections import MutableMapping as DictMixin\r\n\r\n/usr/local/lib/python3.7/site-packages/html5lib/_trie/_base.py:3\r\n  /usr/local/lib/python3.7/site-packages/html5lib/_trie/_base.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working\r\n    from collections import Mapping\r\n\r\n/usr/local/lib/python3.7/site-packages/django/db/models/sql/query.py:11\r\n  /usr/local/lib/python3.7/site-packages/django/db/models/sql/query.py:11: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working\r\n    from collections import Counter, Iterator, Mapping, OrderedDict\r\n\r\n/usr/local/lib/python3.7/site-packages/django/core/paginator.py:126\r\n  /usr/local/lib/python3.7/site-packages/django/core/paginator.py:126: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working\r\n    class Page(collections.Sequence):\r\n\r\n/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py:52\r\n  /usr/local/lib/python3.7/site-packages/django/core/handlers/base.py:52: RemovedInDjango20Warning: Old-style middleware using settings.MIDDLEWARE_CLASSES is deprecated. Update your middleware and use settings.MIDDLEWARE instead.\r\n    \"instead.\", RemovedInDjango20Warning\r\n\r\ntests/test_bottleparser.py::TestBottleParser::test_parse_querystring_args\r\n  /usr/local/lib/python3.7/site-packages/webtest/lint.py:201: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working\r\n    assert isinstance(iterator, collections.Iterable), (\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n=========================== short test summary info ============================\r\nSKIPPED [1] tests/test_bottleparser.py:11: Parsing vendor media types is not supported in bottle\r\nSKIPPED [1] tests/test_core.py:470: Behaviour changed in marshmallow 3\r\nSKIPPED [1] tests/test_core.py:747: \"strict\" parameter is removed in marshmallow 3\r\nSKIPPED [1] tests/test_djangoparser.py:11: skipping because DjangoParser does not implement handle_error\r\nSKIPPED [1] tests/test_djangoparser.py:17: headers location not supported by DjangoParser\r\nSKIPPED [1] tests/test_falconparser.py:12: files location not supported for falconparser\r\n========= 5 failed, 304 passed, 6 skipped, 6 warnings in 2.75 seconds ==========\r\n*** Error code 1\r\n\r\nStop.\r\nmake: stopped in /usr/ports/www/py-webargs\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/503", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/503/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/503/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/503/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/503", "id": 603743772, "node_id": "MDU6SXNzdWU2MDM3NDM3NzI=", "number": 503, "title": "How to process many=True and many=False in same use_args? ", "user": {"login": "ColdHeat", "id": 166333, "node_id": "MDQ6VXNlcjE2NjMzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/166333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ColdHeat", "html_url": "https://github.com/ColdHeat", "followers_url": "https://api.github.com/users/ColdHeat/followers", "following_url": "https://api.github.com/users/ColdHeat/following{/other_user}", "gists_url": "https://api.github.com/users/ColdHeat/gists{/gist_id}", "starred_url": "https://api.github.com/users/ColdHeat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ColdHeat/subscriptions", "organizations_url": "https://api.github.com/users/ColdHeat/orgs", "repos_url": "https://api.github.com/users/ColdHeat/repos", "events_url": "https://api.github.com/users/ColdHeat/events{/privacy}", "received_events_url": "https://api.github.com/users/ColdHeat/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953699, "node_id": "MDU6TGFiZWw4MDk1MzY5OQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-21T06:32:26Z", "updated_at": "2020-05-14T20:04:29Z", "closed_at": "2020-05-14T20:04:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Say I want to support the following JSON bodies in the same endpoint, how would I represent this in a call to `use_args`? \r\n\r\n```\r\n{\r\n  \"name\": \"John\"\r\n  \"age\": 20,\r\n  \"hair_color\": \"brown\",\r\n}\r\n```\r\nand \r\n```\r\n[\r\n  {\r\n        \"name\": \"John\"\r\n        \"age\": 20,\r\n        \"hair_color\": \"brown\"\r\n  },\r\n  {\r\n        \"name\": \"Sarah\"\r\n        \"age\": 21,\r\n        \"hair_color\": \"blonde\"\r\n  },\r\n]\r\n```\r\n\r\nIs the correct approach to call `use_args` twice? \r\n\r\nFor example:\r\n\r\n```\r\n@use_args(PersonSchema(many=True), location=\"json\")\r\n@use_args(PersonSchema(), location=\"json\")\r\ndef post(bulk, obj):\r\n    pass\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/502", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/502/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/502/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/502/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/502", "id": 603516688, "node_id": "MDU6SXNzdWU2MDM1MTY2ODg=", "number": 502, "title": "'Not a valid tuple.'  when trying to use marshmallow fields.Tuple for argument validation", "user": {"login": "Donovant", "id": 2975437, "node_id": "MDQ6VXNlcjI5NzU0Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2975437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Donovant", "html_url": "https://github.com/Donovant", "followers_url": "https://api.github.com/users/Donovant/followers", "following_url": "https://api.github.com/users/Donovant/following{/other_user}", "gists_url": "https://api.github.com/users/Donovant/gists{/gist_id}", "starred_url": "https://api.github.com/users/Donovant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Donovant/subscriptions", "organizations_url": "https://api.github.com/users/Donovant/orgs", "repos_url": "https://api.github.com/users/Donovant/repos", "events_url": "https://api.github.com/users/Donovant/events{/privacy}", "received_events_url": "https://api.github.com/users/Donovant/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953697, "node_id": "MDU6TGFiZWw4MDk1MzY5Nw==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/enhancement", "name": "enhancement", "color": "1d76db", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-20T20:33:29Z", "updated_at": "2020-05-05T02:25:39Z", "closed_at": "2020-05-04T15:28:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to use the marshmallow fields.Tuple for querystring argument validation on a GET request using Flask.  The issue I'm running into is that no matter what type of object I declare and no matter what I use in the request, I always get the default 'Not a valid tuple.' response.  I have tried using a tuple of size 1 and 2; using fields.String and/or fields.Integer, etc with the same result.\r\n\r\n- I'm using Python 3.6.9 with these dependencies:\r\nanyjson==0.3.3\r\napipkg==1.5\r\narrow==0.15.5\r\nattrs==19.3.0\r\nbackports.functools-lru-cache==1.6.1\r\ncassandra-driver==3.22.0\r\nCerberus==1.3.2\r\ncertifi==2019.11.28\r\ncffi==1.13.2\r\nchardet==3.0.4\r\nclick==7.1.1\r\nexecnet==1.7.1\r\nFlask==1.1.1\r\nFlask-Cors==3.0.8\r\nfuncsigs==1.0.2\r\nfutures==3.1.1\r\ngeomet==0.1.2\r\ngevent==1.4.0\r\ngreenlet==0.4.13\r\ngunicorn==20.0.4\r\nidna==2.9\r\nimportlib-metadata==1.6.0\r\nitsdangerous==1.1.0\r\nJinja2==2.11.1\r\njsonklog==0.15.0\r\nMarkupSafe==1.1.1\r\nmarshmallow==3.5.1\r\nneurolab==0.3.5\r\nnumpy==1.18.1\r\npluggy==0.13.1\r\npy==1.8.1\r\npyaml==20.3.1\r\npymongo==3.10.1\r\npytest==3.3.0\r\npytest-forked==0.2\r\npytest-xdist==1.20.1\r\npython-dateutil==2.8.1\r\nPyYAML==5.3.1\r\nreadline==6.2.4.1\r\nrequests==2.23.0\r\nsix==1.14.0\r\nurllib3==1.25.8\r\nwebargs==6.0.0\r\nWerkzeug==1.0.0\r\nzipp==3.1.0\r\n\r\n- Here is an example of what I'm trying to do:\r\n```\r\nfrom flask import Flask\r\nfrom webargs.flaskparser import parser, use_kwargs\r\nfrom marshmallow import EXCLUDE, fields, Schema\r\n\r\n\r\napp = Flask(__name__)\r\n\r\n\r\n@app.errorhandler(422)\r\ndef custom_handler(error):\r\n    errors = []\r\n    if 'query' in error.data['messages']:\r\n        for arg in error.data['messages']['query']:\r\n            for item in error.data['messages']['query'][arg]:\r\n                errors.append(item)\r\n    return str(errors), 400\r\n\r\n\r\nclass test_schema(Schema):\r\n    class Meta:\r\n        unknown = EXCLUDE\r\n        strict = True\r\n    \r\n    test_tup = fields.Tuple((fields.Integer(required=True), fields.Integer(required=True)), required=True)\r\n\r\n\r\n@app.route('/test/', strict_slashes=False)\r\n@parser.use_kwargs(test_schema, location='query')\r\ndef test_the_mallow(**kwargs):\r\n    return \"True\"\r\n```\r\n\r\n- Finally, here are a couple example url's I've tried:\r\n  localhost:2300/test/?test_tup=[0,0]\r\n  localhost:2300/test/?test_tup=(0,0)\r\n  localhost:2300/test/?test_tup=0,0\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/497", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/497/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/497/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/497/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/497", "id": 598142687, "node_id": "MDU6SXNzdWU1OTgxNDI2ODc=", "number": 497, "title": "Suggest including URL variable parameters in more examples", "user": {"login": "ugultopu", "id": 9937444, "node_id": "MDQ6VXNlcjk5Mzc0NDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/9937444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ugultopu", "html_url": "https://github.com/ugultopu", "followers_url": "https://api.github.com/users/ugultopu/followers", "following_url": "https://api.github.com/users/ugultopu/following{/other_user}", "gists_url": "https://api.github.com/users/ugultopu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ugultopu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ugultopu/subscriptions", "organizations_url": "https://api.github.com/users/ugultopu/orgs", "repos_url": "https://api.github.com/users/ugultopu/repos", "events_url": "https://api.github.com/users/ugultopu/events{/privacy}", "received_events_url": "https://api.github.com/users/ugultopu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-10T23:44:52Z", "updated_at": "2020-04-11T17:59:22Z", "closed_at": "2020-04-11T17:59:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm totally new to Flask, Marshmallow, SQLAlchemy, webargs and this ecosystem. I was given a coding test and while trying to complete it, I had to use flaskparser together with an URL parameter. Not knowing how to configure them to be used together, I googled \"flaskparser\". The top 5 results are:\r\n\r\n- https://webargs.readthedocs.io/en/latest/_modules/webargs/flaskparser.html\r\n- https://webargs.readthedocs.io/en/latest/\r\n- https://webargs.readthedocs.io/en/latest/api.html\r\n- https://webargs.readthedocs.io/en/latest/advanced.html\r\n- https://webargs.readthedocs.io/en/latest/quickstart.html\r\n\r\nNone of these include an example where an URL variable parameter and webargs are used together. I found the example that I need in [Framework Support](https://github.com/marshmallow-code/webargs/blob/dev/docs/framework_support.rst) (which does not appear on the first page of the Google results) as following:\r\n\r\n```\r\nfrom webargs import fields\r\nfrom webargs.flaskparser import use_args\r\n\r\n\r\n@app.route(\"/user/<int:uid>\")\r\n@use_args({\"per_page\": fields.Int()}, location=\"query\")\r\ndef user_detail(args, uid):\r\n    return (\"The user page for user {uid}, showing {per_page} posts.\").format(\r\n        uid=uid, per_page=args[\"per_page\"]\r\n    )\r\n```\r\n\r\nSince the simpler use can can be inferred from the more complex use case, but not vice-versa, I would suggest to either include this code example in [flaskparser.py example](https://github.com/marshmallow-code/webargs/edit/dev/src/webargs/flaskparser.py), or somehow tweak the SEO for https://webargs.readthedocs.io/en/latest/framework_support.html so that it will appear on the first page of Google search results.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/494", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/494/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/494/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/494/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/494", "id": 595596078, "node_id": "MDU6SXNzdWU1OTU1OTYwNzg=", "number": 494, "title": "Nested in Nested post args not working as expected. ", "user": {"login": "venix", "id": 428944, "node_id": "MDQ6VXNlcjQyODk0NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/428944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/venix", "html_url": "https://github.com/venix", "followers_url": "https://api.github.com/users/venix/followers", "following_url": "https://api.github.com/users/venix/following{/other_user}", "gists_url": "https://api.github.com/users/venix/gists{/gist_id}", "starred_url": "https://api.github.com/users/venix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/venix/subscriptions", "organizations_url": "https://api.github.com/users/venix/orgs", "repos_url": "https://api.github.com/users/venix/repos", "events_url": "https://api.github.com/users/venix/events{/privacy}", "received_events_url": "https://api.github.com/users/venix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-07T05:13:31Z", "updated_at": "2020-04-08T09:16:58Z", "closed_at": "2020-04-08T04:35:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not sure how to display this properly so here it is: \r\n\r\nhttps://pastebin.com/GUAxc98c\r\n\r\nI am parsing post args for a POST request as follows: \r\n```\r\npost_args = {\r\n  'item_1': input_fields.Str(),\r\n  'item_2': input_fields.Str(), \r\n  'item3: input_fields.Nested({\r\n      '0.00': input_fields.Nested({'someItem': input_fields.Str(), ... }),\r\n       '0.10': input_fields.Nested({'someItem': input_fields.Str(), ... }),\r\n       '0.20': input_fields.Nested({'someItem': input_fields.Str(), ... })\r\n  })\r\n}\r\n```\r\nWhen parsed I expect to get the following: \r\n```\r\nparsed_args = {\r\n  'item1' : 'some string', \r\n  'item2': 'some other string',\r\n  'item3': { \r\n     '0.00': {'someItem': 'some useful string'},\r\n     '0.10': {'someItem': 'some useful string'},\r\n     '0.20': {'someItem': 'some useful string'}\r\n  }\r\n}\r\n```\r\nBut instead it puts item3 nested values into a dictionary with key 0 and then the nested items as follows: \r\n\r\n\r\n```\r\nparsed_args = {\r\n  'item1' : 'some string', \r\n  'item2': 'some other string',\r\n  'item3': { \r\n     '0': {\r\n           '0.00': {'someItem': 'some useful string'},\r\n           '0.10': {'someItem': 'some useful string'},\r\n           '0.20': {'someItem': 'some useful string'}\r\n      }\r\n  }\r\n}\r\n```\r\nAm I doing something wrong? Am I missing anything ? Is this supposed to happen? \r\n\r\nI can confirm that the data received in JSON are in the right structure. \r\n\r\nAny ideas?\r\n\r\n**Update** \r\nI ve noticed this happens when the keys are strings of decimals i.e 0.00 0.10 0.20 but still why can't I do that?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/492", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/492/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/492/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/492/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/492", "id": 587538494, "node_id": "MDU6SXNzdWU1ODc1Mzg0OTQ=", "number": 492, "title": "Missing data for required field error even when data passed in", "user": {"login": "odiyan", "id": 31385459, "node_id": "MDQ6VXNlcjMxMzg1NDU5", "avatar_url": "https://avatars2.githubusercontent.com/u/31385459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/odiyan", "html_url": "https://github.com/odiyan", "followers_url": "https://api.github.com/users/odiyan/followers", "following_url": "https://api.github.com/users/odiyan/following{/other_user}", "gists_url": "https://api.github.com/users/odiyan/gists{/gist_id}", "starred_url": "https://api.github.com/users/odiyan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/odiyan/subscriptions", "organizations_url": "https://api.github.com/users/odiyan/orgs", "repos_url": "https://api.github.com/users/odiyan/repos", "events_url": "https://api.github.com/users/odiyan/events{/privacy}", "received_events_url": "https://api.github.com/users/odiyan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-25T08:51:12Z", "updated_at": "2020-03-25T10:51:20Z", "closed_at": "2020-03-25T10:51:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using python3.7 and flask-restful and webargs to build an api. The endpoint `list-keydates` returns `vesselname: missing data for required field` when I query it with a value for `vesselname`. I think there are a few similar issues listed but don't quite know if it's the same as any of those.\r\n\r\n    from flask import Flask, jsonify\r\n    from flask_restful import Api, Resource\r\n    from webargs import fields\r\n    from webargs.flaskparser import use_args, use_kwargs, parser, abort\r\n\r\n    app = Flask(__name__)\r\n    api = Api(app)\r\n    \r\n    class KeydateList(Resource):\r\n        keydate_args = {\"vesselname\": fields.Str(required=True)}\r\n    \r\n        @use_args(keydate_args)\r\n        def get(self, args):\r\n            intervention_list = []\r\n            keydate_list = []\r\n            s = select([keydate.c.Intervention, keydate.c.Date])\r\n            s = s.where(keydate.c.VESSEL==args[\"vesselname\"])\r\n            rp = connection.execute(s)\r\n            for row in rp:\r\n                intervention_list.append((row[0]))\r\n                keydate_list.append((row[1]))\r\n            return jsonify({\"keydates\": keydate_list,\r\n                            \"intervention\": intervention_list})\r\n    \r\n    @parser.error_handler\r\n    def handle_request_parsing_error(err, req, schema, error_status_code, error_headers):\r\n        \"\"\"webargs error handler that uses Flask-RESTful's abort function to return\r\n        a JSON error response to the client.\r\n        \"\"\"\r\n        abort(error_status_code, errors=err.messages)\r\n    \r\n    \r\n    api.add_resource(KeydateList, '/list-keydates')\r\n    \r\n    if __name__ == '__main__':\r\n        app.run(debug=True)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/491", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/491/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/491/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/491/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/491", "id": 586521855, "node_id": "MDU6SXNzdWU1ODY1MjE4NTU=", "number": 491, "title": "Can we upgrade to passing a `dict` in lieu of `MultiDictProxy` in 6.x, or does it need to be in 7.0?", "user": {"login": "sirosen", "id": 1300022, "node_id": "MDQ6VXNlcjEzMDAwMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1300022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sirosen", "html_url": "https://github.com/sirosen", "followers_url": "https://api.github.com/users/sirosen/followers", "following_url": "https://api.github.com/users/sirosen/following{/other_user}", "gists_url": "https://api.github.com/users/sirosen/gists{/gist_id}", "starred_url": "https://api.github.com/users/sirosen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sirosen/subscriptions", "organizations_url": "https://api.github.com/users/sirosen/orgs", "repos_url": "https://api.github.com/users/sirosen/repos", "events_url": "https://api.github.com/users/sirosen/events{/privacy}", "received_events_url": "https://api.github.com/users/sirosen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-23T21:13:05Z", "updated_at": "2020-04-28T19:21:53Z", "closed_at": "2020-04-28T19:21:53Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "> It seems like I can just call `dict` on the `MultiDictProxy` object. I _think_ this works generally:\r\n> \r\n> ```python\r\n> from werkzeug.datastructures import ImmutableMultiDict\r\n> from marshmallow import Schema, fields\r\n> from webargs.multidictproxy import MultiDictProxy\r\n> \r\n> class MySchema(Schema):\r\n>     a = fields.List(fields.Str())\r\n> \r\n> d = ImmutableMultiDict([('a', 'b'), ('a', 'c')])\r\n> \r\n> mdp = MultiDictProxy(d, MySchema())\r\n> \r\n> print(dict(mdp))\r\n> ```\r\n> \r\n> That prints the dict: `{'a': ['b', 'c']}`, which looks like what we want - standard dictionary formatted to work with Marshmallow lists. The benefit of this over over pre 6.0 is that if other keys are in the original `ImmutableMultiDict` they will also be in the new dictionary. That allows the enveloping use case to work.\r\n\r\n_Originally posted by @Bangertm in https://github.com/marshmallow-code/webargs/issues/485#issuecomment-599747332_\r\n\r\n---\r\n\r\nI'm pretty sure that's correct (though it does merit more investigation).\r\nAs he points out, it makes modifying the data in a `pre_load` hook much simpler if we do this.\r\n\r\nBut... can we make the change in v6.1.0 or does it need to wait for v7.0.0? (@lafrech, @sloria ?)\r\nI'm looking at the docs and we made sure to document that everything was switching to pass `MultiDictProxy` objects. A `dict` is a _very similar_ but non-identical type, so it's a matter of how strict we want to be about backwards compatibility.\r\n\r\nFor my part, I don't really have any aversion to doing a 7.0 release in the near future -- though I'd want to be careful and make sure we're handling all of the potential pain points people find with 6.0. But I'd prefer to do this in 6.1 if we're comfortable with that level of compatibility.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/490", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/490/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/490/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/490/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/490", "id": 584643047, "node_id": "MDU6SXNzdWU1ODQ2NDMwNDc=", "number": 490, "title": "How get the value of ValidationError when I used decorator of webargs in Djando whith Class-based Views?", "user": {"login": "DesKevinMendez", "id": 32910223, "node_id": "MDQ6VXNlcjMyOTEwMjIz", "avatar_url": "https://avatars2.githubusercontent.com/u/32910223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DesKevinMendez", "html_url": "https://github.com/DesKevinMendez", "followers_url": "https://api.github.com/users/DesKevinMendez/followers", "following_url": "https://api.github.com/users/DesKevinMendez/following{/other_user}", "gists_url": "https://api.github.com/users/DesKevinMendez/gists{/gist_id}", "starred_url": "https://api.github.com/users/DesKevinMendez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DesKevinMendez/subscriptions", "organizations_url": "https://api.github.com/users/DesKevinMendez/orgs", "repos_url": "https://api.github.com/users/DesKevinMendez/repos", "events_url": "https://api.github.com/users/DesKevinMendez/events{/privacy}", "received_events_url": "https://api.github.com/users/DesKevinMendez/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953699, "node_id": "MDU6TGFiZWw4MDk1MzY5OQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-19T19:15:30Z", "updated_at": "2020-05-01T02:59:05Z", "closed_at": "2020-05-01T02:59:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I trying get the error of exception validationError, but, i could not capture this info.\r\n\r\nI have been to reading the documentation, explicity to django support, since it always returns error 500, when in the documentation it tells me that error 422 would return.\r\n\r\nMy class of marshmallow\r\n\r\n`class CategorieSchema(Schema):\r\n    categorie = fields.Str(validate=validate.Length(min=3), required = True)\r\n `\r\n\r\nMy class based view\r\n\r\n`\r\nclass CategorieListPostGet(APIView):\r\n    \r\n     ....\r\n    \r\n    @use_kwargs(CategorieSchema())\r\n    def post(self, request, **kwargs):\r\n\r\n        data = CategoriaSerializer(data=kwargs)\r\n\r\n        if data.is_valid():\r\n            data.save()\r\n            return Response(data.data, status=status.HTTP_201_CREATED)\r\n\r\n        return Response(data.errors, status=status.HTTP_400_BAD_REQUEST)\r\n            \r\n        `\r\n\r\nMy serializer\r\n\r\n`\r\nclass CategoriaSerializer(serializers.ModelSerializer):\r\n    id = serializers.PrimaryKeyRelatedField(read_only=True)\r\n    class Meta:\r\n        model = Categoria\r\n        fields = (\"id\", \"categorie\",)\r\n`\r\n\r\nInfo send from postman:\r\n\r\n> {\r\n\t\"categories\": \"Postman\",\r\n}\r\n\r\nMy response whith exist any error\r\n`raise exc\r\nmarshmallow.exceptions.ValidationError: {'categorie': ['Missing data for required field.'], 'categories': ['Unknown field.']}\r\n[19/Mar/2020 13:03:01] \"POST /api/1.0/categoria/ HTTP/1.1\" 500 18297`\r\n\r\nI haven't understood how do to get this error in my response, but it always return me error 500.\r\n\r\nWhat am I doing wrong?\r\n\r\nBy the way, I use Django-rest-framework.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/485", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/485/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/485/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/485/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/485", "id": 577114823, "node_id": "MDU6SXNzdWU1NzcxMTQ4MjM=", "number": 485, "title": "6.0.0 requires changes to some pre_load hooks", "user": {"login": "Bangertm", "id": 22827894, "node_id": "MDQ6VXNlcjIyODI3ODk0", "avatar_url": "https://avatars2.githubusercontent.com/u/22827894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bangertm", "html_url": "https://github.com/Bangertm", "followers_url": "https://api.github.com/users/Bangertm/followers", "following_url": "https://api.github.com/users/Bangertm/following{/other_user}", "gists_url": "https://api.github.com/users/Bangertm/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bangertm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bangertm/subscriptions", "organizations_url": "https://api.github.com/users/Bangertm/orgs", "repos_url": "https://api.github.com/users/Bangertm/repos", "events_url": "https://api.github.com/users/Bangertm/events{/privacy}", "received_events_url": "https://api.github.com/users/Bangertm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-03-06T18:58:02Z", "updated_at": "2020-04-11T23:00:29Z", "closed_at": "2020-04-11T23:00:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just upgraded to 6.0.0. Using `FlaskParser`, the input to `Schema.load` is now a `MultiDictProxy` wrapping a werkzeug `ImmutableMultiDict` instead of a regular dictionary. This breaks a schema I have that uses a `pre_load` hook to converts empty strings to `None`. (I'm processing an HTML form with a bunch of optional number inputs similar to some of the solutions in marshmallow-code/marshmallow#713)\r\n\r\nNot the biggest deal to work around but I thought I would mention it because I didn't see it in the change log.\r\n\r\nAlso it would be convenient if `MultiDictProxy` had a `__repr__` to make debugging more convenient.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/483", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/483/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/483/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/483/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/483", "id": 573084847, "node_id": "MDU6SXNzdWU1NzMwODQ4NDc=", "number": 483, "title": "Webargs 6.0.0 has broken Flaskparser @use_kwargs: Never parses query string or formdata", "user": {"login": "kirsle", "id": 1663507, "node_id": "MDQ6VXNlcjE2NjM1MDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1663507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirsle", "html_url": "https://github.com/kirsle", "followers_url": "https://api.github.com/users/kirsle/followers", "following_url": "https://api.github.com/users/kirsle/following{/other_user}", "gists_url": "https://api.github.com/users/kirsle/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirsle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirsle/subscriptions", "organizations_url": "https://api.github.com/users/kirsle/orgs", "repos_url": "https://api.github.com/users/kirsle/repos", "events_url": "https://api.github.com/users/kirsle/events{/privacy}", "received_events_url": "https://api.github.com/users/kirsle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2020-02-29T00:46:15Z", "updated_at": "2020-03-31T22:31:41Z", "closed_at": "2020-03-06T08:28:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nYour recent release of 6.0.0 of webargs has unexpectedly broken our Flask apps. It seems now the @use_kwargs decorator from the `webargs.flaskparser` **completely fails to parse** GET query string parameters or POST form-data parameters. Only JSON request bodies ever get parsed anymore.\r\n\r\nHere is an example Flask app that shows the problem:\r\n\r\n```python\r\nfrom flask import Flask, jsonify\r\nfrom webargs import fields\r\nfrom webargs.flaskparser import use_kwargs\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route(\"/test1\", methods=[\"GET\", \"POST\", \"PUT\"])\r\n@use_kwargs({\r\n    \"page\": fields.Int(missing=1),\r\n    \"per_page\": fields.Int(missing=20),\r\n    \"full\": fields.Bool(missing=False),\r\n})\r\ndef test1(**kwargs):\r\n    return jsonify(kwargs)\r\n\r\n@app.route(\"/test2\", methods=[\"GET\", \"POST\", \"PUT\"])\r\n@use_kwargs({\r\n    \"name\": fields.Str(required=True),\r\n})\r\ndef test2(**kwargs):\r\n    return jsonify(kwargs)\r\n\r\napp.run()\r\n```\r\n\r\nThe endpoint \"/test1\" has three optional parameters each with default values when missing. If I make a GET request (with query parameters) or a POST request with application/x-www-form-urlencoded format, webargs completely fails to pick up my parameters and only sees the defaults.\r\n\r\nIn the endpoint \"/test2\" I have a required parameter, which again fails to parse on GET or form-data post but works on JSON post only. Here are some curl examples:\r\n\r\n```bash\r\n# GET request doesn't parse any param\r\n% curl 'http://localhost:5000/test1?page=5&per_page=2&full=1'\r\n{\"full\":false,\"page\":1,\"per_page\":20}\r\n\r\n# Normal POST doesn't parse any param\r\n% curl -X POST -d page=5 -d per_page=2 -d full=1 'http://localhost:5000/test1'\r\n{\"full\":false,\"page\":1,\"per_page\":20}\r\n\r\n# JSON POST actually does parse params\r\n% curl -X POST -H 'Content-Type: application/json' -d '{\"page\": 5, \"per_page\": 2, \"full\": true}' 'http://localhost:5000/test1'\r\n{\"full\":true,\"page\":5,\"per_page\":2}\r\n\r\n# GET is \"missing required parameter\"\r\n% curl 'http://localhost:5000/test2?name=alice'\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\r\n<title>422 Unprocessable Entity</title>\r\n<h1>Unprocessable Entity</h1>\r\n<p>The request was well-formed but was unable to be followed due to semantic errors.</p>\r\n\r\n# POST is \"missing required parameter\"\r\n% curl -X POST -d name=alice 'http://localhost:5000/test2'\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\r\n<title>422 Unprocessable Entity</title>\r\n<h1>Unprocessable Entity</h1>\r\n<p>The request was well-formed but was unable to be followed due to semantic errors.</p>\r\n\r\n# POST JSON actually works\r\n% curl -X POST -H 'Content-Type: application/json' -d '{\"name\": \"alice\"}' 'http://localhost:5000/test2'\r\n{\"name\":\"alice\"}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/481", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/481/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/481/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/481/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/481", "id": 572562618, "node_id": "MDU6SXNzdWU1NzI1NjI2MTg=", "number": 481, "title": "Fix simple typo: objec -> object", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-28T06:48:52Z", "updated_at": "2020-02-28T09:13:53Z", "closed_at": "2020-02-28T09:13:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a small typo in src/webargs/flaskparser.py.\nShould read `object` rather than `objec`.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/470", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/470/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/470/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/470/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/470", "id": 558204537, "node_id": "MDU6SXNzdWU1NTgyMDQ1Mzc=", "number": 470, "title": "Importing ABC directly from collections module was removed in Python 3.9", "user": {"login": "tirkarthi", "id": 3972343, "node_id": "MDQ6VXNlcjM5NzIzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3972343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirkarthi", "html_url": "https://github.com/tirkarthi", "followers_url": "https://api.github.com/users/tirkarthi/followers", "following_url": "https://api.github.com/users/tirkarthi/following{/other_user}", "gists_url": "https://api.github.com/users/tirkarthi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirkarthi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirkarthi/subscriptions", "organizations_url": "https://api.github.com/users/tirkarthi/orgs", "repos_url": "https://api.github.com/users/tirkarthi/repos", "events_url": "https://api.github.com/users/tirkarthi/events{/privacy}", "received_events_url": "https://api.github.com/users/tirkarthi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-31T15:38:56Z", "updated_at": "2020-01-31T21:16:32Z", "closed_at": "2020-01-31T21:16:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Since the project is Python 3 only importing from collections.abc will resolve the issue. I will raise a PR.\r\n\r\nhttps://github.com/marshmallow-code/webargs/blob/1b34470908cb54862b7aeb578f794ac3285cdf38/src/webargs/pyramidparser.py#L141", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/469", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/469/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/469/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/469/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/469", "id": 557279787, "node_id": "MDU6SXNzdWU1NTcyNzk3ODc=", "number": 469, "title": "webargs==5.5.3 is NOT a minor patch update, it broke our app!", "user": {"login": "captainkw", "id": 4163975, "node_id": "MDQ6VXNlcjQxNjM5NzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4163975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/captainkw", "html_url": "https://github.com/captainkw", "followers_url": "https://api.github.com/users/captainkw/followers", "following_url": "https://api.github.com/users/captainkw/following{/other_user}", "gists_url": "https://api.github.com/users/captainkw/gists{/gist_id}", "starred_url": "https://api.github.com/users/captainkw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/captainkw/subscriptions", "organizations_url": "https://api.github.com/users/captainkw/orgs", "repos_url": "https://api.github.com/users/captainkw/repos", "events_url": "https://api.github.com/users/captainkw/events{/privacy}", "received_events_url": "https://api.github.com/users/captainkw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-01-30T05:45:25Z", "updated_at": "2020-06-09T14:16:11Z", "closed_at": "2020-02-07T22:46:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Our Python server is powered by the webargs library, which my company has been happily using so far.  All except TWO backwards incompatible incidents - one of which happened last year, one of which happened today.  The 5.5.3 update on 2020/1/28 broke our client apps' ability to make JSON POST requests to our backend, breaking key analytics data:\r\n\r\n<img width=\"733\" alt=\"Screen Shot 2020-01-29 at 8 49 58 PM\" src=\"https://user-images.githubusercontent.com/4163975/73423029-bfba0180-42df-11ea-89a0-53ddb6096825.png\">\r\nhttps://webargs.readthedocs.io/en/latest/changelog.html\r\n\r\nI am outraged.  I understand that the 5.5.3 update is to address a vulnerability (CVE-2020-7965: Don\u2019t attempt to parse JSON if request\u2019s content type is mismatched), but this is a potentially backwards compatibility breaking change, and is NOT a minor patch number update.   This at the very least should have been a 5.6.0 update instead, and would have alerted our team to do additional QA.\r\n\r\nToday's incident took me more than 2 hours to troubleshoot as I initially thought the the problem was in our Python application code, then we ruled that out, and started to look at build issues.  We had to scrutinize every Python library that got updated since the last build until we noticed this webargs 5.5.2 to 5.5.3 change.  Again, this is NOT a minor patch version update.  Today's incident gave me pause on continuing to use webargs in a production, revenue collecting operation.  \r\n\r\nPlease NEVER issue a backwards compatibility breaking change as a minor patch update again, there are production servers that depend on your library for their livelihood.\r\n\r\n@sloria  @lafrech ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/461", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/461/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/461/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/461/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/461", "id": 554607127, "node_id": "MDU6SXNzdWU1NTQ2MDcxMjc=", "number": 461, "title": "Unwanted arguments in final parsed args when schema attributes names differ from source keys", "user": {"login": "gerazenobi", "id": 7520283, "node_id": "MDQ6VXNlcjc1MjAyODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/7520283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gerazenobi", "html_url": "https://github.com/gerazenobi", "followers_url": "https://api.github.com/users/gerazenobi/followers", "following_url": "https://api.github.com/users/gerazenobi/following{/other_user}", "gists_url": "https://api.github.com/users/gerazenobi/gists{/gist_id}", "starred_url": "https://api.github.com/users/gerazenobi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gerazenobi/subscriptions", "organizations_url": "https://api.github.com/users/gerazenobi/orgs", "repos_url": "https://api.github.com/users/gerazenobi/repos", "events_url": "https://api.github.com/users/gerazenobi/events{/privacy}", "received_events_url": "https://api.github.com/users/gerazenobi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-24T08:37:39Z", "updated_at": "2020-02-06T13:53:56Z", "closed_at": "2020-02-06T13:51:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Whenever we define schema attributes whose names will differ from the actual source keys we still are going to get those keys/values within the final parsed arguments. We see this as undesirable as it forces us to do cleanups later on in the final results.\r\n\r\nI exemplify the scenario in the following simplified snippets. I provide two options for **trying** (without success evidently) to get rid of these raw key values which will not be used as we are interested only in the deserialised objects.\r\n\r\n```python\r\n# option 1\r\nclass ArgsSearchArgs(ArgsCampaign):\r\n    layer = fields.Integer(load_from=\"layer_id\", location=\"json\")\r\n    area = fields.Integer(load_from=\"area_id\", location=\"json\")\r\n\r\n    @post_load\r\n    def deserialize(self, args):\r\n        super().deserialize(args)\r\n        args[\"layer\"] = parse.get_layer(args[\"system\"], args.pop(\"layer\"))\r\n        args[\"area\"] = parse.get_area(args[\"campaign\"], args.pop(\"area\"))\r\n```\r\n```python\r\n# option 2\r\nclass ArgsSearchArgs(ArgsCampaign):\r\n    layer_id = fields.Integer(location=\"json\")\r\n    area_id = fields.Integer(location=\"json\")\r\n\r\n    @post_load\r\n    def deserialize(self, args):\r\n        super().deserialize(args)\r\n        layer_id = args.pop(\"layer_id\") # possible workaround with ultimately no effect\r\n        area_id = args.pop(\"area_id\") # possible workaround with ultimately no effect\r\n        args[\"layer\"] = parse.get_layer(args[\"campaign\"], layer_id)\r\n        args[\"area\"] = parse.get_area(args[\"campaign\"], area_id)\r\n```\r\n```python\r\n# Ideal usage of dictionary directly into a method that receives those kwargs \r\nclass Search(DefaultResource):\r\n    @use_kwargs(ArgsSearchArgs)\r\n    def post(self, campaign, **search_args):\r\n        service.search(campaign, **search_args)\r\n\r\n# Reality (unwanted ids within final parsed arguments):\r\nclass Search(DefaultResource):\r\n    @use_kwargs(ArgsSearchArgs)\r\n    def post(self, campaign, **search_args):\r\n        search_args.pop(\"layer_id\") # annoying cleanup\r\n        search_args.pop(\"area_id\") # annoying cleanup\r\n        service.search(campaign, **search_args)          \r\n```\r\n\r\nThe unwanted behaviour I am describing is due to [this line](https://github.com/marshmallow-code/webargs/blob/dev/src/webargs/core.py#L358) at the moment of parsing the data.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/460", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/460/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/460/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/460/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/460", "id": 553134111, "node_id": "MDU6SXNzdWU1NTMxMzQxMTE=", "number": 460, "title": "[RFC] Namespace error structures by location in response", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/5", "html_url": "https://github.com/marshmallow-code/webargs/milestone/5", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/5/labels", "id": 3923526, "node_id": "MDk6TWlsZXN0b25lMzkyMzUyNg==", "number": 5, "title": "6.0.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 12, "state": "closed", "created_at": "2018-12-25T21:23:59Z", "updated_at": "2020-02-29T14:35:36Z", "due_on": null, "closed_at": "2020-02-29T14:35:36Z"}, "comments": 8, "created_at": "2020-01-21T21:15:59Z", "updated_at": "2020-02-14T20:54:53Z", "closed_at": "2020-02-14T20:54:53Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I think there's a case we never really considered: two schemas in a different location with a common field name.\r\n\r\nIn webargs 5, this is not possible in a single `use_args` call. In a multi `use_args` call, it depends if the user specifies the locations. The response is ambiguous about which field is wrong.\r\n\r\nIn current implementation in webargs 6, the response is ambiguous. A way to fix this would be to namespace the error structures by location.\r\n\r\nJust thinking out loud, writing this here before I forget.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/457", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/457/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/457/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/457/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/457", "id": 545666023, "node_id": "MDU6SXNzdWU1NDU2NjYwMjM=", "number": 457, "title": "Wrong version number 6.6.0b1 instead of 6.0.0b1 \ud83e\udd26", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-06T10:54:16Z", "updated_at": "2020-01-06T14:55:14Z", "closed_at": "2020-01-06T14:49:03Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "@sloria, I typoed while bumping version number. I set 6.6.0b1 instead of 6.0.0b1.\r\n\r\nAlthought it is bad practice to delete releases once they are released, since this is a beta version, I would have deleted it from PyPI and published a bugfix release. Except I don't have required credentials to delete the wrong release on PyPI.\r\n\r\nHow should we proceed? Can you delete the wrong release and I publish a 6.0.0b2?\r\n\r\nSorry about that. Good thing it was just a pre-release.\r\n\r\nI use bumpversion on other projects and it provides an additional safety net. I did double or triple check before pushing but I didn't see that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/455", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/455/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/455/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/455/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/455", "id": 545141849, "node_id": "MDU6SXNzdWU1NDUxNDE4NDk=", "number": 455, "title": "Combine errors from nested `use_args` calls so that mixed locations still provide full errors in webargs 6.x", "user": {"login": "sirosen", "id": 1300022, "node_id": "MDQ6VXNlcjEzMDAwMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1300022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sirosen", "html_url": "https://github.com/sirosen", "followers_url": "https://api.github.com/users/sirosen/followers", "following_url": "https://api.github.com/users/sirosen/following{/other_user}", "gists_url": "https://api.github.com/users/sirosen/gists{/gist_id}", "starred_url": "https://api.github.com/users/sirosen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sirosen/subscriptions", "organizations_url": "https://api.github.com/users/sirosen/orgs", "repos_url": "https://api.github.com/users/sirosen/repos", "events_url": "https://api.github.com/users/sirosen/events{/privacy}", "received_events_url": "https://api.github.com/users/sirosen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/5", "html_url": "https://github.com/marshmallow-code/webargs/milestone/5", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/5/labels", "id": 3923526, "node_id": "MDk6TWlsZXN0b25lMzkyMzUyNg==", "number": 5, "title": "6.0.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 12, "state": "closed", "created_at": "2018-12-25T21:23:59Z", "updated_at": "2020-02-29T14:35:36Z", "due_on": null, "closed_at": "2020-02-29T14:35:36Z"}, "comments": 6, "created_at": "2020-01-03T20:05:41Z", "updated_at": "2020-01-24T04:00:29Z", "closed_at": "2020-01-24T04:00:29Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "> Won't we need to merge error messages for the stacked case?\r\n>\r\n> ```python\r\n> @use_args({\"related_id\": fields.Str(required=True))}, location=\"query\"})\r\n> @use_args({\"name\": fields.Str(required=True))}, location=\"json\")\r\n> ```\r\n>\r\n> ```python\r\n> {\"related_id\": ['Missing...'], \"name\": [\"Missing...\"]}\r\n> ```\r\n\r\n_Originally posted by @sloria in https://github.com/marshmallow-code/webargs/issues/419#issuecomment-525765453_\r\n\r\nSupporting this is desirable, since otherwise you only get partial information about validation failures. IMO, the worst part is this: the behavior depends on the order of your `use_args` calls.\r\n\r\nI've been thinking about this only a little bit since that issue and I think what's best is that `use_args` calls stash their arguments somewhere and then process them \"all at once\" before the user-supplied function.\r\n\r\nOne potential implementation path:\r\n- `use_args` adds its arguments to some private attribute of the decorated function like `func.__webargs_use_args_schemas` (initialized as an empty list)\r\n- the _innermost_ `use_args` call walks all of the `__webargs_use_args_schemas` data and evaluates _all of it_ capturing and combining any `ValidationError`s\r\n- outer `use_args` calls add data to the \"schema list\" but return the function they were given without trying to do any parsing\r\n  - we could detect this by having the innermost `use_args` set a flag like `__webargs_is_use_args_wrapped` which we check with `hasattr`\r\n\r\nI'd also like to explore whether or not it would be safe to replace the `use_args` callable with a callable object of our own design. That might make the implementation simpler than proposed above, but I'm not sure if it will work with all frameworks.\r\n\r\nSome questions:\r\n1. Is this actually a good idea? Just because we _can_ do this and it would be nice for users doesn't mean that it's worth the complexity. I'm worried that I'm looking at what's **possible** rather than what's **wise**.\r\n2. Is there a better way to do this than storing decorator arguments in a list?\r\n3. Once you've done a bunch of parsing and have multiple `ValidationError`s in hand, what's the correct way to combine them?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/448", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/448/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/448/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/448/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/448", "id": 538907255, "node_id": "MDU6SXNzdWU1Mzg5MDcyNTU=", "number": 448, "title": "falconparser is broken", "user": {"login": "dodumosu", "id": 1408662, "node_id": "MDQ6VXNlcjE0MDg2NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1408662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dodumosu", "html_url": "https://github.com/dodumosu", "followers_url": "https://api.github.com/users/dodumosu/followers", "following_url": "https://api.github.com/users/dodumosu/following{/other_user}", "gists_url": "https://api.github.com/users/dodumosu/gists{/gist_id}", "starred_url": "https://api.github.com/users/dodumosu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dodumosu/subscriptions", "organizations_url": "https://api.github.com/users/dodumosu/orgs", "repos_url": "https://api.github.com/users/dodumosu/repos", "events_url": "https://api.github.com/users/dodumosu/events{/privacy}", "received_events_url": "https://api.github.com/users/dodumosu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-17T08:15:22Z", "updated_at": "2020-01-21T10:57:28Z", "closed_at": "2020-01-21T10:57:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "`falconparser` uses `falcon.util.uri.parse_query_string`, but the keyword argument is `keep_blank`, not `keep_blank_qs_values`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/445", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/445/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/445/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/445/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/445", "id": 537844067, "node_id": "MDU6SXNzdWU1Mzc4NDQwNjc=", "number": 445, "title": "Add missing 5.5.2 git tag", "user": {"login": "koobs", "id": 1011612, "node_id": "MDQ6VXNlcjEwMTE2MTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1011612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koobs", "html_url": "https://github.com/koobs", "followers_url": "https://api.github.com/users/koobs/followers", "following_url": "https://api.github.com/users/koobs/following{/other_user}", "gists_url": "https://api.github.com/users/koobs/gists{/gist_id}", "starred_url": "https://api.github.com/users/koobs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koobs/subscriptions", "organizations_url": "https://api.github.com/users/koobs/orgs", "repos_url": "https://api.github.com/users/koobs/repos", "events_url": "https://api.github.com/users/koobs/events{/privacy}", "received_events_url": "https://api.github.com/users/koobs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-14T01:16:20Z", "updated_at": "2019-12-18T01:19:21Z", "closed_at": "2019-12-18T01:04:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Repository tag for the 5.5.2 release (per PyPI sdist) is missing. Please add it corresponding to the commit that the source distribution was based on. Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/444", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/444/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/444/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/444/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/444", "id": 534461371, "node_id": "MDU6SXNzdWU1MzQ0NjEzNzE=", "number": 444, "title": "Missing form field falls back to json by default, which throws 400 error", "user": {"login": "Deimos", "id": 9033, "node_id": "MDQ6VXNlcjkwMzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/9033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Deimos", "html_url": "https://github.com/Deimos", "followers_url": "https://api.github.com/users/Deimos/followers", "following_url": "https://api.github.com/users/Deimos/following{/other_user}", "gists_url": "https://api.github.com/users/Deimos/gists{/gist_id}", "starred_url": "https://api.github.com/users/Deimos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Deimos/subscriptions", "organizations_url": "https://api.github.com/users/Deimos/orgs", "repos_url": "https://api.github.com/users/Deimos/repos", "events_url": "https://api.github.com/users/Deimos/events{/privacy}", "received_events_url": "https://api.github.com/users/Deimos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-07T22:32:58Z", "updated_at": "2020-02-14T21:21:58Z", "closed_at": "2020-02-14T21:21:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm working on trying to update my Pyramid application to webargs > 5.0, which is requiring a lot of changes. I've just run into an unexpected error with one of my forms, where I don't think webargs' default behavior is correct. It's somewhat similar to closed issue #409, but I wasn't specifying `locations` like they were, and just using the default behavior.\r\n\r\nSpecifically, my view is for a POST endpoint, and has a decorator like this on it (along with a second one that uses a schema for the other data):\r\n\r\n    @use_kwargs({\"confirm\": Boolean(missing=False)})\r\n\r\nThe form doesn't always contain the `confirm` input (it's for a special case), so my expectation is that when they submit the form without any data for `confirm`, it should get set to `False`.\r\n\r\nHowever, because of this part of webargs' default behavior ([from here](https://webargs.readthedocs.io/en/latest/quickstart.html#request-locations)):\r\n\r\n> By default, webargs will search for arguments from the URL query string (e.g. `\"/?name=foo\"`), form data, and JSON data (in that order).\r\n\r\nWhat actually happens is that it fails to find `confirm` in the form data, so it tries to look for it in JSON, and then throws a 400 error (`pyramid.httpexceptions.HTTPBadRequest: {'json': ['Invalid JSON body.']}`) because there is no JSON on the request.\r\n\r\nIt works as expected if I specify `locations=(\"form\",)` in `@use_kwargs`, but having the default behavior cause a crash by falling back to looking for nonexistent JSON data doesn't seem right. Should the lack of JSON data be treated as \"no data\" instead of an error?\r\n\r\nEdit: wanted to also note that I'm upgrading from 4.4.1, and this worked fine in that version without crashing.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/441", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/441/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/441/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/441/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/441", "id": 525667692, "node_id": "MDU6SXNzdWU1MjU2Njc2OTI=", "number": 441, "title": "Customize argument dictionary", "user": {"login": "vasudevanv", "id": 2213055, "node_id": "MDQ6VXNlcjIyMTMwNTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2213055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vasudevanv", "html_url": "https://github.com/vasudevanv", "followers_url": "https://api.github.com/users/vasudevanv/followers", "following_url": "https://api.github.com/users/vasudevanv/following{/other_user}", "gists_url": "https://api.github.com/users/vasudevanv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vasudevanv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vasudevanv/subscriptions", "organizations_url": "https://api.github.com/users/vasudevanv/orgs", "repos_url": "https://api.github.com/users/vasudevanv/repos", "events_url": "https://api.github.com/users/vasudevanv/events{/privacy}", "received_events_url": "https://api.github.com/users/vasudevanv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-20T09:06:52Z", "updated_at": "2019-11-23T22:56:28Z", "closed_at": "2019-11-23T22:56:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a use case where some keys in the request JSON depend on others. An example is\r\n\r\n```json\r\n{\r\n  \"item_type_list\": [\"a\", \"c\", \"a\", \"b\"],\r\n  \"items\" : [ \r\n    { \r\n      \"value\": 1\r\n    }, \r\n    { \r\n      \"center\": 2, \r\n      \"value\": 2 \r\n    }, \r\n    { \r\n      \"value\": 3 \r\n    },\r\n    {\r\n      \"border\": 5, \r\n      \"value\": 2, \r\n      \"btype\": \"solid\"\r\n    } \r\n  ]\r\n} \r\n```\r\nThe value of `item_type_list` determines the type of each dict entry in `items`. Is there a method I could use to construct a custom argument dictionary for `use_args`? \r\n\r\nUsing marshmallow schema factories seems a little cumbersome. Having a way to customize the argument dictionary might be useful. For example I am thinking of a construction similar to the the marshmallow schema factory\r\n\r\n```python\r\ndef make_custom_argdict(request):\r\n    example_custom_arg_dict = { }\r\n    # do something with request.json\r\n    # .......\r\n    return example_custom_arg_dict\r\n\r\nclass MyCustomResource(Resource):\r\n    @use_args(make_custom_schema)\r\n    def post(self,args):\r\n        # do stuff with request \r\n        return result\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/440", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/440/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/440/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/440/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/440", "id": 522068215, "node_id": "MDU6SXNzdWU1MjIwNjgyMTU=", "number": 440, "title": "Drop Python 2", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/5", "html_url": "https://github.com/marshmallow-code/webargs/milestone/5", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/5/labels", "id": 3923526, "node_id": "MDk6TWlsZXN0b25lMzkyMzUyNg==", "number": 5, "title": "6.0.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 12, "state": "closed", "created_at": "2018-12-25T21:23:59Z", "updated_at": "2020-02-29T14:35:36Z", "due_on": null, "closed_at": "2020-02-29T14:35:36Z"}, "comments": 7, "created_at": "2019-11-13T09:25:56Z", "updated_at": "2020-02-14T23:22:13Z", "closed_at": "2020-02-14T23:22:12Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Let's wait on #420 to be merged first to avoid a painful rebase.\r\n\r\n- [x] Drop Python 2\r\n- [x] Make arguments keyword-only where sensible\r\n\r\nDo we also want to drop Python 3.5 ? This can be done in a later major release.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/439", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/439/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/439/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/439/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/439", "id": 521269398, "node_id": "MDU6SXNzdWU1MjEyNjkzOTg=", "number": 439, "title": "handle_request_parsing_error() missing 1 required positional argument: 'error_headers'", "user": {"login": "cubean", "id": 968094, "node_id": "MDQ6VXNlcjk2ODA5NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/968094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cubean", "html_url": "https://github.com/cubean", "followers_url": "https://api.github.com/users/cubean/followers", "following_url": "https://api.github.com/users/cubean/following{/other_user}", "gists_url": "https://api.github.com/users/cubean/gists{/gist_id}", "starred_url": "https://api.github.com/users/cubean/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cubean/subscriptions", "organizations_url": "https://api.github.com/users/cubean/orgs", "repos_url": "https://api.github.com/users/cubean/repos", "events_url": "https://api.github.com/users/cubean/events{/privacy}", "received_events_url": "https://api.github.com/users/cubean/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-12T01:05:27Z", "updated_at": "2019-11-12T01:38:36Z", "closed_at": "2019-11-12T01:38:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi:\r\n\r\nI am using python3.6 with webargs and blueprint. \r\nI suffered next issue when I am not inputing para odRequestId:\r\n\r\n```\r\nmarshmallow.exceptions.ValidationError: {'odRequestId': ['Missing data for required field.']}\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\n... \r\n\r\nFile \"/usr/local/lib/python3.6/dist-packages/webargs/core.py\", line 272, in _on_validation_error\r\n    error_handler(error, req, schema, error_status_code, error_headers)\r\nTypeError: handle_request_parsing_error() missing 1 required positional argument: 'error_headers'\r\n```\r\nNext is my code:\r\n```\r\ndetecter = Blueprint('detecter', __name__, url_prefix='/detect_image')\r\n\r\ninput_args = {\r\n    'odRequestId': fields.Str(required=True)\r\n}\r\n\r\n@detecter.route('/', methods=['GET', 'POST'])\r\n@use_args(input_args, error_status_code=422)\r\ndef detect_image(args):\r\n       ....\r\n\r\n@parser.error_handler\r\ndef handle_request_parsing_error(self, err, req, schema, error_status_code, error_headers):\r\n    \"\"\"webargs error handler that uses Flask-RESTful's abort function to return\r\n    a JSON error response to the client.\r\n    \"\"\"\r\n    logger.error(\r\n        'Flask-RESTful error: {}, {}'.format(err.messages, error_status_code))\r\n\r\n    error_msg = {\r\n        'type': -10,\r\n        'code': 0,\r\n        'message': 'Input value not correct.',\r\n        'payload': {\r\n            'statusCode': error_status_code,\r\n            'content': err.messages\r\n        }\r\n    }\r\n\r\n    abort(error_status_code, messages=error_msg, headers=error_headers)\r\n\r\n# Return validation errors as JSON\r\n@detecter.errorhandler(422)\r\n@detecter.errorhandler(400)\r\ndef handle_error(err):\r\n\r\n    headers = err.data.get(\"headers\", None)\r\n    messages = err.data.get(\"messages\", {\"errors\": \"Invalid request.\"})\r\n\r\n    logger.error('Flask error: {}, {}'.format(messages, err.code))\r\n\r\n    if headers:\r\n        return jsonify(messages), err.code, headers\r\n    else:\r\n        return jsonify(messages), err.code\r\n\r\n\r\n\r\n```\r\n\r\nWhile I was not using blueprint but using @app.route('/', methods=['GET', 'POST']), I didn't get this issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/435", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/435/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/435/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/435/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/435", "id": 508551300, "node_id": "MDU6SXNzdWU1MDg1NTEzMDA=", "number": 435, "title": "ValidationError is not raised on unknown query parameters", "user": {"login": "csirmazbendeguz", "id": 19559023, "node_id": "MDQ6VXNlcjE5NTU5MDIz", "avatar_url": "https://avatars1.githubusercontent.com/u/19559023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csirmazbendeguz", "html_url": "https://github.com/csirmazbendeguz", "followers_url": "https://api.github.com/users/csirmazbendeguz/followers", "following_url": "https://api.github.com/users/csirmazbendeguz/following{/other_user}", "gists_url": "https://api.github.com/users/csirmazbendeguz/gists{/gist_id}", "starred_url": "https://api.github.com/users/csirmazbendeguz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csirmazbendeguz/subscriptions", "organizations_url": "https://api.github.com/users/csirmazbendeguz/orgs", "repos_url": "https://api.github.com/users/csirmazbendeguz/repos", "events_url": "https://api.github.com/users/csirmazbendeguz/events{/privacy}", "received_events_url": "https://api.github.com/users/csirmazbendeguz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-17T15:21:37Z", "updated_at": "2019-10-17T15:23:40Z", "closed_at": "2019-10-17T15:23:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nclass MySchema(Schema):\r\n    class Meta:\r\n        unknown = RAISE  # ignored by webargs\r\n\r\n@app.route(...)\r\n@use_args(MySchema())\r\ndef hello_world(args):\r\n    ...\r\n```\r\n\r\nI want webargs to raise a ValidationError when the request has unknown query parameters.\r\n\r\nhttps://github.com/marshmallow-code/marshmallow/issues/524\r\n\r\nHow can I achieve this?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/430", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/430/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/430/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/430/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/430", "id": 503176280, "node_id": "MDU6SXNzdWU1MDMxNzYyODA=", "number": 430, "title": "DelimitedList not parsing properly when inside a Dict", "user": {"login": "TMiguelT", "id": 5019367, "node_id": "MDQ6VXNlcjUwMTkzNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5019367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TMiguelT", "html_url": "https://github.com/TMiguelT", "followers_url": "https://api.github.com/users/TMiguelT/followers", "following_url": "https://api.github.com/users/TMiguelT/following{/other_user}", "gists_url": "https://api.github.com/users/TMiguelT/gists{/gist_id}", "starred_url": "https://api.github.com/users/TMiguelT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TMiguelT/subscriptions", "organizations_url": "https://api.github.com/users/TMiguelT/orgs", "repos_url": "https://api.github.com/users/TMiguelT/repos", "events_url": "https://api.github.com/users/TMiguelT/events{/privacy}", "received_events_url": "https://api.github.com/users/TMiguelT/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-06T23:26:13Z", "updated_at": "2019-10-06T23:58:55Z", "closed_at": "2019-10-06T23:58:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I've written a test case for `DelimitedList`. The following code passes when using Marshmallow 3.X, but fails under Marshmallow 2.X:\r\n\r\n```python\r\nfrom webargs.core import DelimitedList\r\nfrom marshmallow.fields import String, Dict\r\n\r\ndef test_nested_delimited_list():\r\n    f2 = Dict(keys=String(), values=DelimitedList(String()))\r\n    assert f2.deserialize({\r\n        \"articles\": \"title,body\",\r\n        \"people\": \"name\"\r\n    }) == {\r\n        \"articles\": [\"title\", \"body\"],\r\n        \"people\": [\"name\"]\r\n    }\r\n\r\n```\r\n\r\n```\r\nE       AssertionError: assert {'articles': ...ople': 'name'} == {'articles': ...le': ['name']}\r\nE         Differing items:\r\nE         {'people': 'name'} != {'people': ['name']}\r\nE         {'articles': 'title,body'} != {'articles': ['title', 'body']}\r\nE         Full diff:\r\nE         - {'articles': 'title,body', 'people': 'name'}\r\nE         + {'articles': ['title', 'body'], 'people': ['name']}\r\nE         ?              +      + ++     +            +      +\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/427", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/427/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/427/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/427/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/427", "id": 497092921, "node_id": "MDU6SXNzdWU0OTcwOTI5MjE=", "number": 427, "title": "Non UTF-8 json payload produce a 500 and a stack trace", "user": {"login": "lindycoder", "id": 12926519, "node_id": "MDQ6VXNlcjEyOTI2NTE5", "avatar_url": "https://avatars2.githubusercontent.com/u/12926519?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lindycoder", "html_url": "https://github.com/lindycoder", "followers_url": "https://api.github.com/users/lindycoder/followers", "following_url": "https://api.github.com/users/lindycoder/following{/other_user}", "gists_url": "https://api.github.com/users/lindycoder/gists{/gist_id}", "starred_url": "https://api.github.com/users/lindycoder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lindycoder/subscriptions", "organizations_url": "https://api.github.com/users/lindycoder/orgs", "repos_url": "https://api.github.com/users/lindycoder/repos", "events_url": "https://api.github.com/users/lindycoder/events{/privacy}", "received_events_url": "https://api.github.com/users/lindycoder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-23T13:18:27Z", "updated_at": "2019-10-06T15:06:20Z", "closed_at": "2019-10-06T15:06:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nFirst of all thanks for thie library, while doing some testing with random payload we stumbled upon a corner case:\r\n\r\n## Actual Behavior:\r\nIf non utf-8 data is sent with header Application/Json the `core`'s `parse_json`\u00a0will raise a UnicodeDecodeError, which generates a 500.\r\n\r\n## Expected Behavior\r\nA `400 BAD REQUEST`\r\n\r\n## Notes\r\n- `Python 3.6`\r\n- `webargs==5.5.1`\r\n\r\nI would handle the problem my self but as you can see in the stack trace, my code is never reached so i would need a wrapper above `@use_args`\r\n\r\n## Reproduce\r\n\r\nCODE (From README example with `methods=` added):\r\n```\r\nfrom flask import Flask\r\nfrom webargs import fields\r\nfrom webargs.flaskparser import use_args\r\n\r\napp = Flask(__name__)\r\n\r\n\r\n@app.route(\"/\", methods=['GET', 'POST'])\r\n@use_args({\"name\": fields.Str(required=True)})\r\ndef index(args):\r\n    return \"Hello \" + args[\"name\"]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app.run()\r\n\u00a0\r\n```\r\n\r\nCurl invocation \r\n```\r\n$ curl http://localhost:5000/ -H 'Content-Type: Application/Json' -d $(python -c \"import os; import sys;  os.write(sys.stdout.fileno(), b'\\xfe')\")\r\n```\r\nOutput\r\n```\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\r\n<title>500 Internal Server Error</title>\r\n<h1>Internal Server Error</h1>\r\n<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>\r\n```\r\n\r\nFull Stack trace\r\n```\r\n.../.tox/py36/bin/python3.6 .../tests/webargs_poc.py\r\n * Serving Flask app \"webargs_poc\" (lazy loading)\r\n * Environment: production\r\n   WARNING: Do not use the development server in a production environment.\r\n   Use a production WSGI server instead.\r\n * Debug mode: off\r\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\r\n[2019-09-23 09:07:54,383] ERROR in app: Exception on / [POST]\r\nTraceback (most recent call last):\r\n  File \".../.tox/py36/lib/python3.6/site-packages/flask/app.py\", line 2292, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \".../.tox/py36/lib/python3.6/site-packages/flask/app.py\", line 1815, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \".../.tox/py36/lib/python3.6/site-packages/flask/app.py\", line 1718, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \".../.tox/py36/lib/python3.6/site-packages/flask/_compat.py\", line 35, in reraise\r\n    raise value\r\n  File \".../.tox/py36/lib/python3.6/site-packages/flask/app.py\", line 1813, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \".../.tox/py36/lib/python3.6/site-packages/flask/app.py\", line 1799, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \".../.tox/py36/lib/python3.6/site-packages/webargs/core.py\", line 444, in wrapper\r\n    error_headers=error_headers,\r\n  File \".../.tox/py36/lib/python3.6/site-packages/webargs/core.py\", line 347, in parse\r\n    schema=schema, req=req, locations=locations or self.locations\r\n  File \".../.tox/py36/lib/python3.6/site-packages/webargs/core.py\", line 263, in _parse_request\r\n    parsed_value = self.parse_arg(argname, field_obj, req, locations)\r\n  File \".../.tox/py36/lib/python3.6/site-packages/webargs/core.py\", line 226, in parse_arg\r\n    value = self._get_value(name, field, req=req, location=location)\r\n  File \".../.tox/py36/lib/python3.6/site-packages/webargs/core.py\", line 202, in _get_value\r\n    return function(req, name, argobj)\r\n  File \".../.tox/py36/lib/python3.6/site-packages/webargs/flaskparser.py\", line 69, in parse_json\r\n    self._cache[\"json\"] = json_data = core.parse_json(data)\r\n  File \".../.tox/py36/lib/python3.6/site-packages/webargs/core.py\", line 115, in parse_json\r\n    s = s.decode(encoding)\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xfe in position 0: invalid start byte\r\n127.0.0.1 - - [23/Sep/2019 09:07:54] \"POST / HTTP/1.1\" 500 -\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/426", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/426/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/426/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/426/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/426", "id": 494576115, "node_id": "MDU6SXNzdWU0OTQ1NzYxMTU=", "number": 426, "title": "Webargs not respecting preload hooks", "user": {"login": "TMiguelT", "id": 5019367, "node_id": "MDQ6VXNlcjUwMTkzNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5019367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TMiguelT", "html_url": "https://github.com/TMiguelT", "followers_url": "https://api.github.com/users/TMiguelT/followers", "following_url": "https://api.github.com/users/TMiguelT/following{/other_user}", "gists_url": "https://api.github.com/users/TMiguelT/gists{/gist_id}", "starred_url": "https://api.github.com/users/TMiguelT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TMiguelT/subscriptions", "organizations_url": "https://api.github.com/users/TMiguelT/orgs", "repos_url": "https://api.github.com/users/TMiguelT/repos", "events_url": "https://api.github.com/users/TMiguelT/events{/privacy}", "received_events_url": "https://api.github.com/users/TMiguelT/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-17T11:52:51Z", "updated_at": "2020-02-14T21:23:14Z", "closed_at": "2020-02-14T21:23:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm attempting to use marshmallow-jsonapi with webargs. Now one of the key features of the jsonapi schemas is the pre-load hook that unwraps the data from `{data: {...}}` into `{...}`. However, it seems that webargs never runs the pre-load hooks. For this reason, converting my code from:\r\n```python\r\ndef post(self):\r\n    data = SomeJsonApiSchema().load(request.json)    \r\n    # Use data somehow\r\n```\r\nto\r\n```python\r\n@use_args(SomeJsonApiSchema(), locations=('json',))\r\ndef post(self):\r\n    # Use data somehow\r\n```\r\ndoes not work! It raises the error:\r\n\r\n```\r\n{'_schema': [{'detail': 'Object must include `data` key.', 'source': {'pointer': '/'}}]}\r\n```\r\n\r\nNow, it seems like we could easily run pre_dump hooks, if we loaded the entire input object in one go. However, we seem to re-parse the input data each time we need to parse a field, hence the need for the `self._cache[\"json\"]` etc. Is there any reason for this? Why can't we get the entire input object as a dictionary, either from the query string, body, json etc? \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/423", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/423/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/423/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/423/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/423", "id": 492096696, "node_id": "MDU6SXNzdWU0OTIwOTY2OTY=", "number": 423, "title": "RFC: Only accept delimited string in DelimitedList", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 922766584, "node_id": "MDU6TGFiZWw5MjI3NjY1ODQ=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/backwards%20incompatible", "name": "backwards incompatible", "color": "d93f0b", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-11T08:40:30Z", "updated_at": "2020-01-30T16:52:19Z", "closed_at": "2020-01-30T16:52:19Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "`DelimitedList` accepts either a list or a delimited string (e.g. \"foo,bar,baz\").\r\n\r\nI'd like to make it more strict by only accepting a delimited list. Rather than adding a `strict` parameter, I'm thinking of dropping the whole \"also accept a list\" feature.\r\n\r\nAny reason to support both?\r\n\r\nI understand it inherits from `List` because once the string is parsed, it can be deserialized as a normal list. But are there cases where you'd expect either a list or a delimited string?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/422", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/422/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/422/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/422/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/422", "id": 490528862, "node_id": "MDU6SXNzdWU0OTA1Mjg4NjI=", "number": 422, "title": "Object must include `data` key", "user": {"login": "ming-codes", "id": 706212, "node_id": "MDQ6VXNlcjcwNjIxMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/706212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ming-codes", "html_url": "https://github.com/ming-codes", "followers_url": "https://api.github.com/users/ming-codes/followers", "following_url": "https://api.github.com/users/ming-codes/following{/other_user}", "gists_url": "https://api.github.com/users/ming-codes/gists{/gist_id}", "starred_url": "https://api.github.com/users/ming-codes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ming-codes/subscriptions", "organizations_url": "https://api.github.com/users/ming-codes/orgs", "repos_url": "https://api.github.com/users/ming-codes/repos", "events_url": "https://api.github.com/users/ming-codes/events{/privacy}", "received_events_url": "https://api.github.com/users/ming-codes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-06T21:24:35Z", "updated_at": "2020-02-14T21:24:45Z", "closed_at": "2020-02-14T21:24:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n{'errors': [{'detail': 'Object must include `data` key.', 'source': {'pointer': '/'}}]}\r\n```\r\n\r\nHi,\r\n\r\nI'm using `marshmallow-jsonapi` with [`flask-rest-api`](https://github.com/Nobatek/flask-rest-api). I encountered the above error when trying to load a JSONAPI document from location json.\r\n\r\nI'm not sure how `webargs` is supposed to work. It looks like it parses data twice. [once from each field](https://github.com/marshmallow-code/webargs/blob/5.4.0/src/webargs/core.py#L283) and [once again from schema.load](https://github.com/marshmallow-code/webargs/blob/5.4.0/src/webargs/core.py#L369) using the same schema. This could work for schemas where field and input matches one to one, but it's not the case JSON API.\r\n\r\nWhat would be to proper way to make this work?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/419", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/419/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/419/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/419/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/419", "id": 485690486, "node_id": "MDU6SXNzdWU0ODU2OTA0ODY=", "number": 419, "title": "RFC: Allow a single location for each field", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 922766584, "node_id": "MDU6TGFiZWw5MjI3NjY1ODQ=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/backwards%20incompatible", "name": "backwards incompatible", "color": "d93f0b", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-08-27T09:20:51Z", "updated_at": "2020-01-03T09:50:40Z", "closed_at": "2020-01-03T09:50:40Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "See discussion in https://github.com/marshmallow-code/webargs/issues/267.\r\n\r\nThe idea is that the Schema would be passed the whole data from a location, so there couldn't be fields with different location in the same Schema.\r\n\r\n- Drop `location` argument to `Field`\r\n- Only accept a single `location` in `use_args`\r\n\r\nThis is an important breaking change.\r\n\r\nIt breaks the default use case, which is to iterate on all fields, and for each field search in `DEFAULT_LOCATIONS` (by default: query string, form, then json).\r\n\r\nWe could keep a somewhat similar behaviour by trying to load the whole data from query string, then form, then json. The only added restriction is that Schema couldn't contain fields from mixed locations.\r\n\r\nI'm not convinced with the multi-location feature, so we could even\r\n\r\n- Replace `DEFAULT_LOCATIONS` with `DEFAULT_LOCATION`\r\n\r\nThe user could subclass the parser to change the default location (in our framework, we use json by default), and he would need to specify the location explicitly when it is not the default.\r\n\r\nI think all this changes allow for better documentation (e.g. in apispec).\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/418", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/418/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/418/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/418/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/418", "id": 484933061, "node_id": "MDU6SXNzdWU0ODQ5MzMwNjE=", "number": 418, "title": "Use case for `fields` in schema factory - many to many?", "user": {"login": "antgel", "id": 295571, "node_id": "MDQ6VXNlcjI5NTU3MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/295571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antgel", "html_url": "https://github.com/antgel", "followers_url": "https://api.github.com/users/antgel/followers", "following_url": "https://api.github.com/users/antgel/following{/other_user}", "gists_url": "https://api.github.com/users/antgel/gists{/gist_id}", "starred_url": "https://api.github.com/users/antgel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antgel/subscriptions", "organizations_url": "https://api.github.com/users/antgel/orgs", "repos_url": "https://api.github.com/users/antgel/repos", "events_url": "https://api.github.com/users/antgel/events{/privacy}", "received_events_url": "https://api.github.com/users/antgel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-25T13:42:09Z", "updated_at": "2019-09-04T21:06:01Z", "closed_at": "2019-09-04T21:06:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm following up from #412 , I guess my last comment there wasn't seen because the issue was closed.\r\n\r\nI'd like to ask about the use case for this. I have a many-to-many relationship between `Survey` and `Answer` in my database. I might want to indicate that `Survey` 123 was answered with `Answer` 456 with an API call (Flask-Classful) such as:\r\n\r\n`http PUT http://localhost:5000/surveys/123/answer/ answer_id=456`\r\n\r\nIf I don't add `fields`, i.e.\r\n\r\n`http PUT http://localhost:5000/incidents/10/answer/?fields=answer_id answer_id=1`\r\n\r\nI get a 422 Unprocessable Entity because I'm not supplying a value for `survey_id`. Is this a sane use case for `fields`, or am I doing something wrong in my design? Here's some code that should hopefully give some background info.\r\n\r\n```python\r\nclass SurveyAnswer(AssociationModel):\r\n    survey_id = db.Column(db.Integer, db.ForeignKey(\"survey.id\"), primary_key=True)\r\n    answer_id = db.Column(\r\n        db.Integer, db.ForeignKey(\"answer.id\"), primary_key=True\r\n    )\r\n\r\n    survey = db.relationship(\"Survey\", backref=backref(\"survey_answers\"))\r\n    answer = db.relationship(\"Answer\", backref=backref(\"answer_surveys\"))\r\n\r\nclass SurveyAnswerSchema(ma.ModelSchema):\r\n    class Meta:\r\n        include_fk = True\r\n        model = SurveyAnswer\r\n\r\nclass SurveysView(FlaskView):\r\n    @use_args(SurveyAnswerSchema)\r\n    @route(\"/<id>/answer/\", methods=[\"PUT\"])\r\n    def answer(self, args, id):\r\n        survey = Survey.query.get_or_404(id)\r\n        answer = Answer.query.get_or_404(args.answer_id)\r\n        sa = SurveyAnswer(\r\n            survey=survey, answer=answer\r\n        )\r\n        db.session.commit()\r\n        return \"\", 200\r\n```\r\n\r\nPlease let me know if what I'm asking isn't clear, thanks. :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/412", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/412/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/412/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/412/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/412", "id": 479314216, "node_id": "MDU6SXNzdWU0NzkzMTQyMTY=", "number": 412, "title": "Schema factory only variable fail - can't pass list type", "user": {"login": "antgel", "id": 295571, "node_id": "MDQ6VXNlcjI5NTU3MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/295571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antgel", "html_url": "https://github.com/antgel", "followers_url": "https://api.github.com/users/antgel/followers", "following_url": "https://api.github.com/users/antgel/following{/other_user}", "gists_url": "https://api.github.com/users/antgel/gists{/gist_id}", "starred_url": "https://api.github.com/users/antgel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antgel/subscriptions", "organizations_url": "https://api.github.com/users/antgel/orgs", "repos_url": "https://api.github.com/users/antgel/repos", "events_url": "https://api.github.com/users/antgel/events{/privacy}", "received_events_url": "https://api.github.com/users/antgel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 152384910, "node_id": "MDU6TGFiZWwxNTIzODQ5MTA=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/docs", "name": "docs", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-10T23:09:49Z", "updated_at": "2019-08-19T12:28:02Z", "closed_at": "2019-08-17T17:19:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Looking at the [schema factory docs](https://webargs.readthedocs.io/en/latest/advanced.html#schema-factories), I'm interested in trying the\r\n```\r\n# Filter based on 'fields' query parameter\r\nonly = request.args.get(\"fields\", None)\r\n```\r\npart.\r\n\r\nHowever, when I try appending something like `?fields=some_field` to my HTTP request, I get the following error:\r\n```\r\nFile \"edited/marshmallow/schema.py\", line 349, in __init__\r\n    raise StringNotCollectionError('\"only\" should be a list of strings')\r\n```\r\n\r\nAs far as I can see, webargs always passes the query string parameters as strings. I tried wrapping it in square brackets, but I think I'm barking up the wrong tree. Have I misunderstood something, or is this a bug?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/409", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/409/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/409/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/409/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/409", "id": 476473210, "node_id": "MDU6SXNzdWU0NzY0NzMyMTA=", "number": 409, "title": "parse_json fails and returns 400 when data POST in form", "user": {"login": "mozartilize", "id": 26346270, "node_id": "MDQ6VXNlcjI2MzQ2Mjcw", "avatar_url": "https://avatars1.githubusercontent.com/u/26346270?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mozartilize", "html_url": "https://github.com/mozartilize", "followers_url": "https://api.github.com/users/mozartilize/followers", "following_url": "https://api.github.com/users/mozartilize/following{/other_user}", "gists_url": "https://api.github.com/users/mozartilize/gists{/gist_id}", "starred_url": "https://api.github.com/users/mozartilize/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mozartilize/subscriptions", "organizations_url": "https://api.github.com/users/mozartilize/orgs", "repos_url": "https://api.github.com/users/mozartilize/repos", "events_url": "https://api.github.com/users/mozartilize/events{/privacy}", "received_events_url": "https://api.github.com/users/mozartilize/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953699, "node_id": "MDU6TGFiZWw4MDk1MzY5OQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-03T17:36:54Z", "updated_at": "2019-08-04T15:25:59Z", "closed_at": "2019-08-04T15:25:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "currently I have an `@use_args(LoginSchema(), locations=(\"json\", \"form\"))`\r\n\r\nIf I post data in form, the code will fail to parse json and return 400 status code instead of looking in form data", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/406", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/406/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/406/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/406/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/406", "id": 471820629, "node_id": "MDU6SXNzdWU0NzE4MjA2Mjk=", "number": 406, "title": "Improve documentation on fields.DelimitedList vs fields.List", "user": {"login": "sm-moore", "id": 43862857, "node_id": "MDQ6VXNlcjQzODYyODU3", "avatar_url": "https://avatars1.githubusercontent.com/u/43862857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sm-moore", "html_url": "https://github.com/sm-moore", "followers_url": "https://api.github.com/users/sm-moore/followers", "following_url": "https://api.github.com/users/sm-moore/following{/other_user}", "gists_url": "https://api.github.com/users/sm-moore/gists{/gist_id}", "starred_url": "https://api.github.com/users/sm-moore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sm-moore/subscriptions", "organizations_url": "https://api.github.com/users/sm-moore/orgs", "repos_url": "https://api.github.com/users/sm-moore/repos", "events_url": "https://api.github.com/users/sm-moore/events{/privacy}", "received_events_url": "https://api.github.com/users/sm-moore/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 152384910, "node_id": "MDU6TGFiZWwxNTIzODQ5MTA=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/docs", "name": "docs", "color": "fbca04", "default": false, "description": null}, {"id": 152384790, "node_id": "MDU6TGFiZWwxNTIzODQ3OTA=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-07-23T17:09:19Z", "updated_at": "2019-07-24T03:50:52Z", "closed_at": "2019-07-24T02:48:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "The docs for the fields.DelimitedList say it \"can load from either a list or a delimited string\" but I cannot get it to load from a list. `It's possible I'm doing something wrong` but When I swap out `fields.DelimitedList` for `fields.List` everything works as expected. I think either the docs should be changed, or we should fix the implementation of `DelimitedList` so that it works as expected.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/383", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/383/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/383/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/383/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/383", "id": 440388794, "node_id": "MDU6SXNzdWU0NDAzODg3OTQ=", "number": 383, "title": "Fix compatibility with Falcon 2.0", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-05T01:53:15Z", "updated_at": "2019-05-05T03:28:40Z", "closed_at": "2019-05-05T03:28:40Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Tests are currently failing when Falcon 2.0.0 is installed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/381", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/381/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/381/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/381/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/381", "id": 428341220, "node_id": "MDU6SXNzdWU0MjgzNDEyMjA=", "number": 381, "title": "Help needed to validate the request parameter based on another parameter?", "user": {"login": "kalidassweb", "id": 30006563, "node_id": "MDQ6VXNlcjMwMDA2NTYz", "avatar_url": "https://avatars1.githubusercontent.com/u/30006563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kalidassweb", "html_url": "https://github.com/kalidassweb", "followers_url": "https://api.github.com/users/kalidassweb/followers", "following_url": "https://api.github.com/users/kalidassweb/following{/other_user}", "gists_url": "https://api.github.com/users/kalidassweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/kalidassweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kalidassweb/subscriptions", "organizations_url": "https://api.github.com/users/kalidassweb/orgs", "repos_url": "https://api.github.com/users/kalidassweb/repos", "events_url": "https://api.github.com/users/kalidassweb/events{/privacy}", "received_events_url": "https://api.github.com/users/kalidassweb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953699, "node_id": "MDU6TGFiZWw4MDk1MzY5OQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-02T17:02:21Z", "updated_at": "2019-04-03T02:11:52Z", "closed_at": "2019-04-03T02:11:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nclass Collection(object):\r\n    @staticmethod\r\n    def on_get():\r\n        return {\r\n            'user_id': fields.Str(missing=None,validate=Validators.url_id_exists),\r\n            'group_id': fields.Str(missing=None,validate=Validators.group_id.exists),\r\n        }\r\n\r\n```\r\n\r\n```\r\n  @use_args(Validation.Collection.on_get(), locations=('query', 'json','view_args'))\r\n   def on_get(self, req, resp, args):{\r\n```\r\n\r\nin this above code case, I like to validate the \r\n\r\nif user_id missing group_id required\r\n\r\nif group_id missing user_id required\r\n\r\nIn documentation, I don't find any options", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/380", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/380/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/380/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/380/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/380", "id": 427380585, "node_id": "MDU6SXNzdWU0MjczODA1ODU=", "number": 380, "title": "Any way to skip validation altogether for an empty string?", "user": {"login": "ThiefMaster", "id": 179599, "node_id": "MDQ6VXNlcjE3OTU5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThiefMaster", "html_url": "https://github.com/ThiefMaster", "followers_url": "https://api.github.com/users/ThiefMaster/followers", "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}", "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions", "organizations_url": "https://api.github.com/users/ThiefMaster/orgs", "repos_url": "https://api.github.com/users/ThiefMaster/repos", "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}", "received_events_url": "https://api.github.com/users/ThiefMaster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-31T10:17:46Z", "updated_at": "2019-03-31T13:53:37Z", "closed_at": "2019-03-31T13:53:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In my schema I have this field:\r\n\r\n```\r\ntileserver_url = fields.String(validate=[\r\n    validate.URL(schemes={'http', 'https'}),\r\n    lambda value: all(x in value for x in ('{x}', '{y}', '{z}'))\r\n\r\n])\r\n```\r\n\r\nGenerally this works fine, but if I send an empty string (because it's optional) then validation still fails. Sending `null` is not really an option since then I'd not only have to change the client-side code to convert `''` to `null`, but also the  server-side code after parsing the data to convert `null` back to `'`'...\r\n\r\nI wonder if there's any way to skip validation for empty strings on the webargs level or if I really have to subclass `StringField` to do that...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/377", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/377/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/377/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/377/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/377", "id": 421979463, "node_id": "MDU6SXNzdWU0MjE5Nzk0NjM=", "number": 377, "title": "Schema factory function not receiving request?", "user": {"login": "antgel", "id": 295571, "node_id": "MDQ6VXNlcjI5NTU3MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/295571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antgel", "html_url": "https://github.com/antgel", "followers_url": "https://api.github.com/users/antgel/followers", "following_url": "https://api.github.com/users/antgel/following{/other_user}", "gists_url": "https://api.github.com/users/antgel/gists{/gist_id}", "starred_url": "https://api.github.com/users/antgel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antgel/subscriptions", "organizations_url": "https://api.github.com/users/antgel/orgs", "repos_url": "https://api.github.com/users/antgel/repos", "events_url": "https://api.github.com/users/antgel/events{/privacy}", "received_events_url": "https://api.github.com/users/antgel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953699, "node_id": "MDU6TGFiZWw4MDk1MzY5OQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-17T22:07:34Z", "updated_at": "2019-03-18T23:16:26Z", "closed_at": "2019-03-18T23:16:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to to implement a schema factory for `PATCH`. In [the docs](https://webargs.readthedocs.io/en/latest/advanced.html#schema-factories), how does `make_user_schema` receive its `request` parameter? Is it automagic? It doesn't work for me in the following configuration (or indeed using the generic helper @use_args_with as explained in the later part of the schema factory docs):\r\n\r\n```\r\n# schemas/user.py:\r\n\r\nclass UserSchema(ma.ModelSchema):\r\n    class Meta:\r\n        model = User\r\n        strict = True\r\n\r\n    def make_user_schema(self, request):\r\n        # Filter based on 'fields' query parameter\r\n        only = request.args.get(\"fields\", None)\r\n        # Respect partial updates for PATCH requests\r\n        partial = request.method == \"PATCH\"\r\n        # Add current request to the schema's context\r\n        return UserSchema(only=only, partial=partial, context={\"request\": request})\r\n\r\n# models/user.py:\r\n\r\nclass UsersView(FlaskView):\r\n    @use_args(UserSchema.make_user_schema)\r\n    def patch(self, _id, args):\r\n        # cool stuff \r\n```\r\n\r\nResults in `TypeError: make_user_schema() missing 1 required positional argument: 'request'`. I can paste the full stack trace if needed, but I'm not sure it is in this case.\r\n\r\nI'm using flask-classful, which may or may not have an impact on this, I don't know enough about the desired behaviour. I opened [this issue on f-c](https://github.com/teracyhq/flask-classful/issues/105) because it's generating the wrong route, but I'm not sure where the cause lies.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/375", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/375/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/375/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/375/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/375", "id": 421538849, "node_id": "MDU6SXNzdWU0MjE1Mzg4NDk=", "number": 375, "title": "Support custom Schema class for argmap2schema", "user": {"login": "ThiefMaster", "id": 179599, "node_id": "MDQ6VXNlcjE3OTU5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThiefMaster", "html_url": "https://github.com/ThiefMaster", "followers_url": "https://api.github.com/users/ThiefMaster/followers", "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}", "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions", "organizations_url": "https://api.github.com/users/ThiefMaster/orgs", "repos_url": "https://api.github.com/users/ThiefMaster/repos", "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}", "received_events_url": "https://api.github.com/users/ThiefMaster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-15T14:13:33Z", "updated_at": "2019-03-16T19:30:23Z", "closed_at": "2019-03-16T19:30:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This could be done by passing the Schema class to the Parser constructor.\r\n\r\nThat way someone could use a custom Schema class that has a `pre_load` hook which would then run when webargs processes data as well. My usecase for this is that my application has a plugin system and it'd be nice to let plugins not only modify the data that gets serialized (by marshmallow itself) but also the data it loads (e.g. to inject values that are usually required to be sent by the client, but overridden by the plugin).\r\n\r\nI wouldn't mind sending a PR for this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/374", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/374/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/374/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/374/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/374", "id": 419611878, "node_id": "MDU6SXNzdWU0MTk2MTE4Nzg=", "number": 374, "title": "Re-factor cache invalidation", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 922766584, "node_id": "MDU6TGFiZWw5MjI3NjY1ODQ=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/backwards%20incompatible", "name": "backwards incompatible", "color": "d93f0b", "default": false, "description": ""}, {"id": 80953697, "node_id": "MDU6TGFiZWw4MDk1MzY5Nw==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/enhancement", "name": "enhancement", "color": "1d76db", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/5", "html_url": "https://github.com/marshmallow-code/webargs/milestone/5", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/5/labels", "id": 3923526, "node_id": "MDk6TWlsZXN0b25lMzkyMzUyNg==", "number": 5, "title": "6.0.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 12, "state": "closed", "created_at": "2018-12-25T21:23:59Z", "updated_at": "2020-02-29T14:35:36Z", "due_on": null, "closed_at": "2020-02-29T14:35:36Z"}, "comments": 2, "created_at": "2019-03-11T18:09:36Z", "updated_at": "2020-01-31T21:14:39Z", "closed_at": "2020-01-31T21:14:39Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "https://github.com/marshmallow-code/webargs/issues/371#issuecomment-471578852", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/371", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/371/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/371/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/371/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/371", "id": 419408880, "node_id": "MDU6SXNzdWU0MTk0MDg4ODA=", "number": 371, "title": "Race conditions for parallel requests due to cache", "user": {"login": "ThiefMaster", "id": 179599, "node_id": "MDQ6VXNlcjE3OTU5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThiefMaster", "html_url": "https://github.com/ThiefMaster", "followers_url": "https://api.github.com/users/ThiefMaster/followers", "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}", "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions", "organizations_url": "https://api.github.com/users/ThiefMaster/orgs", "repos_url": "https://api.github.com/users/ThiefMaster/repos", "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}", "received_events_url": "https://api.github.com/users/ThiefMaster/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953695, "node_id": "MDU6TGFiZWw4MDk1MzY5NQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/bug", "name": "bug", "color": "b60205", "default": true, "description": ""}, {"id": 152384790, "node_id": "MDU6TGFiZWwxNTIzODQ3OTA=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2019-03-11T10:57:46Z", "updated_at": "2019-03-11T18:12:21Z", "closed_at": "2019-03-11T18:12:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I just noticed that something in webargs or marshmallow isn't thread-safe. Take this minimal example\"\r\n\r\n```python\r\nimport time\r\n\r\nfrom flask import Flask, jsonify, request\r\nfrom marshmallow.fields import Field\r\nfrom webargs.flaskparser import use_kwargs\r\n\r\n\r\napp = Flask(__name__)\r\n\r\n\r\nclass MyField(Field):\r\n    def _serialize(self, value, attr, obj):\r\n        return value\r\n\r\n    def _deserialize(self, value, attr, data):\r\n        print 'deserialize', request.json, value\r\n        time.sleep(0.25)\r\n        return value\r\n\r\n\r\n@app.route('/test', methods=('POST',))\r\n@use_kwargs({\r\n    'value': MyField(),\r\n})\r\ndef test(value):\r\n    time.sleep(1)\r\n    return jsonify(webargs_result=value, original_data=request.json['value'])\r\n```\r\n\r\nRun it with threading enabled:\r\n\r\n    $ FLASK_APP=webargsrace.py flask run -p 8080 --with-threads\r\n\r\nNow send two requests in parallel, with different values:\r\n\r\n    $ http post http://127.0.0.1:8080/test 'value=foo' & ; http post http://127.0.0.1:8080/test 'value=bar' &\r\n\r\nThe output from these two requests is:\r\n\r\n```json\r\n{\r\n    \"original_data\": \"bar\",\r\n    \"webargs_result\": \"bar\"\r\n}\r\n```\r\n\r\n```json\r\n{\r\n    \"original_data\": \"foo\",\r\n    \"webargs_result\": \"bar\"\r\n}\r\n```\r\n\r\nClearly not what one would have expected! :bomb: \r\n\r\nThe output of the `print` statement showing the request data and what the field receives confirms the issue:\r\n\r\n```\r\ndeserialize {u'value': u'bar'} bar\r\ndeserialize {u'value': u'foo'} bar\r\n```\r\n\r\n---\r\n\r\nTested with the latest marshmallow/webargs from PyPI, and also the marshmallow3 rc (marshmallow==3.0.0rc4, webargs==5.1.2).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/369", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/369/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/369/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/369/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/369", "id": 408199927, "node_id": "MDU6SXNzdWU0MDgxOTk5Mjc=", "number": 369, "title": "Additional fields validation error for illformed JSON in \"Unprocessable Entity\" error", "user": {"login": "xen", "id": 31260, "node_id": "MDQ6VXNlcjMxMjYw", "avatar_url": "https://avatars1.githubusercontent.com/u/31260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xen", "html_url": "https://github.com/xen", "followers_url": "https://api.github.com/users/xen/followers", "following_url": "https://api.github.com/users/xen/following{/other_user}", "gists_url": "https://api.github.com/users/xen/gists{/gist_id}", "starred_url": "https://api.github.com/users/xen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xen/subscriptions", "organizations_url": "https://api.github.com/users/xen/orgs", "repos_url": "https://api.github.com/users/xen/repos", "events_url": "https://api.github.com/users/xen/events{/privacy}", "received_events_url": "https://api.github.com/users/xen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-08T15:26:51Z", "updated_at": "2019-02-28T14:45:20Z", "closed_at": "2019-02-28T14:45:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have schema and during test found unexpected behavior for the case when JSON can't be processed. For example I have Schema with a lot of fields:\r\n\r\n```py\r\n\r\n@api.definition(\"Account\")\r\nclass AccountSchema(Schema):\r\n    class Meta:\r\n        strict = True\r\n        ordered = True\r\n        dump_only = ('id', 'uuid', 'created_at',\r\n                     'updated_at', 'last_login_at', 'locked_at',)\r\n\r\n    id = fields.Int(dump_only=True)\r\n    uuid = fields.Str()\r\n    name = fields.Str(required=True, validate=Length(min=2, max=100))\r\n    company_name = fields.Str(required=True, validate=Length(min=2, max=100))\r\n\r\n    address_country = fields.Str(\r\n        validate=(\r\n            Length(equal=2),\r\n            OneOf([i.alpha_2 for i in pycountry.countries]), ),\r\n    )\r\n    address_state = fields.Str(validate=Length(max=100))\r\n    address_postal_code = fields.Str(validate=Length(max=20))\r\n    address_line1 = fields.Str(validate=Length(max=80))\r\n    address_line2 = fields.Str(validate=Length(max=80))\r\n\r\n    created_at = fields.DateTime()\r\n    updated_at = fields.DateTime()\r\n    is_blocked = fields.Bool()\r\n```\r\n\r\nAnd trying to send this request:\r\n\r\n```json\r\n{\r\n  \"name\": \"string\",\r\n  \"company_name\": \"string\",\r\n  \"is_blocked\": wrong\r\n}\r\n```\r\n\r\nAnd instead of simple error without any mention of the other fields I'm getting:\r\n\r\n```json\r\n{\r\n  \"errors\": {\r\n    \"company_name\": [\r\n      \"Missing data for required field.\"\r\n    ],\r\n    \"name\": [\r\n      \"Missing data for required field.\"\r\n    ]\r\n  },\r\n  \"status\": \"422 Unprocessable Entity: The request was well-formed but was unable to be followed due to semantic errors.\"\r\n}\r\n```\r\n\r\nI think this is not expected result, since it confuses user.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/367", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/367/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/367/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/367/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/367", "id": 405881870, "node_id": "MDU6SXNzdWU0MDU4ODE4NzA=", "number": 367, "title": "Docs: still describing v4 behavior around missing fields?", "user": {"login": "alexandersoto", "id": 1924917, "node_id": "MDQ6VXNlcjE5MjQ5MTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1924917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexandersoto", "html_url": "https://github.com/alexandersoto", "followers_url": "https://api.github.com/users/alexandersoto/followers", "following_url": "https://api.github.com/users/alexandersoto/following{/other_user}", "gists_url": "https://api.github.com/users/alexandersoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexandersoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexandersoto/subscriptions", "organizations_url": "https://api.github.com/users/alexandersoto/orgs", "repos_url": "https://api.github.com/users/alexandersoto/repos", "events_url": "https://api.github.com/users/alexandersoto/events{/privacy}", "received_events_url": "https://api.github.com/users/alexandersoto/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 152384910, "node_id": "MDU6TGFiZWwxNTIzODQ5MTA=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/docs", "name": "docs", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-01T21:33:01Z", "updated_at": "2019-02-02T19:04:11Z", "closed_at": "2019-02-02T19:03:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I believe the docs are out of date, as they still reference replacing values with `missing`:\r\n\r\nhttps://github.com/marshmallow-code/webargs/blob/b956d0f693b6c16288c50e67ab6c0f8df588f262/docs/quickstart.rst#decorator-api \r\n\r\nwhich was deprecated in v5.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/366", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/366/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/366/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/366/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/366", "id": 405849171, "node_id": "MDU6SXNzdWU0MDU4NDkxNzE=", "number": 366, "title": "AttributeError: module 'typing' has no attribute 'NoReturn' with Python 3.5.3", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-01T19:50:52Z", "updated_at": "2019-02-04T02:28:41Z", "closed_at": "2019-02-04T02:28:41Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I get this error when running the tests with Python 3.5.3.\r\n\r\n```\r\ntests/test_py3/test_aiohttpparser_async_functions.py:6: in <module>\r\n    from webargs.aiohttpparser import parser, use_args, use_kwargs\r\nwebargs/aiohttpparser.py:72: in <module>\r\n    class AIOHTTPParser(AsyncParser):\r\nwebargs/aiohttpparser.py:148: in AIOHTTPParser\r\n    ) -> typing.NoReturn:\r\nE   AttributeError: module 'typing' has no attribute 'NoReturn'\r\n```\r\n\r\nThe docs say [`typing.NoReturn`](https://docs.python.org/3/library/typing.html#typing.NoReturn) was added in 3.6.5. However, [the tests pass on Travis](https://travis-ci.org/marshmallow-code/webargs/jobs/486701760) with Python 3.5.6.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/365", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/365/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/365/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/365/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/365", "id": 405822175, "node_id": "MDU6SXNzdWU0MDU4MjIxNzU=", "number": 365, "title": "Forgotten error.status_code and error.headers", "user": {"login": "decaz", "id": 31096, "node_id": "MDQ6VXNlcjMxMDk2", "avatar_url": "https://avatars1.githubusercontent.com/u/31096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decaz", "html_url": "https://github.com/decaz", "followers_url": "https://api.github.com/users/decaz/followers", "following_url": "https://api.github.com/users/decaz/following{/other_user}", "gists_url": "https://api.github.com/users/decaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/decaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decaz/subscriptions", "organizations_url": "https://api.github.com/users/decaz/orgs", "repos_url": "https://api.github.com/users/decaz/repos", "events_url": "https://api.github.com/users/decaz/events{/privacy}", "received_events_url": "https://api.github.com/users/decaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-02-01T18:33:04Z", "updated_at": "2019-02-02T20:36:09Z", "closed_at": "2019-02-02T20:35:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Despite #327 and #336 there are still `error.status_code` and `error.headers` at several places within the code base.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/364", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/364/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/364/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/364/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/364", "id": 404695129, "node_id": "MDU6SXNzdWU0MDQ2OTUxMjk=", "number": 364, "title": "License no longer included in sdist", "user": {"login": "mcs07", "id": 732185, "node_id": "MDQ6VXNlcjczMjE4NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/732185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcs07", "html_url": "https://github.com/mcs07", "followers_url": "https://api.github.com/users/mcs07/followers", "following_url": "https://api.github.com/users/mcs07/following{/other_user}", "gists_url": "https://api.github.com/users/mcs07/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcs07/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcs07/subscriptions", "organizations_url": "https://api.github.com/users/mcs07/orgs", "repos_url": "https://api.github.com/users/mcs07/repos", "events_url": "https://api.github.com/users/mcs07/events{/privacy}", "received_events_url": "https://api.github.com/users/mcs07/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-30T10:11:35Z", "updated_at": "2019-01-31T00:49:04Z", "closed_at": "2019-01-31T00:49:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "This commit https://github.com/marshmallow-code/webargs/commit/f41fb1b7348bc269280bf0c9d44abb3444094692 seems to have resulted in the `LICENSE` file no longer being included in the source distribution on PyPI. As a result, the conda-forge builds are failing: https://github.com/conda-forge/webargs-feedstock/pull/23", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/363", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/363/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/363/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/363/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/363", "id": 403603610, "node_id": "MDU6SXNzdWU0MDM2MDM2MTA=", "number": 363, "title": "simplejson not installed when installing webargs on Python 2.7", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953695, "node_id": "MDU6TGFiZWw4MDk1MzY5NQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/bug", "name": "bug", "color": "b60205", "default": true, "description": ""}, {"id": 152384790, "node_id": "MDU6TGFiZWwxNTIzODQ3OTA=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-27T22:35:03Z", "updated_at": "2019-01-28T22:00:47Z", "closed_at": "2019-01-28T22:00:46Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Discovered in: https://github.com/inveniosoftware/invenio-files-rest/pull/185#issuecomment-457940311\r\n\r\nWe are currently distributing a universal wheel built on Python 3.6 (in Travis). So when the wheel is built, [this conditional is never True](https://github.com/marshmallow-code/webargs/blob/1928c0dd5dfc6db84146b074dcb537092ee16065/setup.py#L7). This results in a wheel that doesn't contain `simplejson` as a dependency on Python 2.7.\r\n\r\nOne solution would be to distribute different wheels for Python 2 and for Python 3.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/362", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/362/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/362/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/362/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/362", "id": 402436725, "node_id": "MDU6SXNzdWU0MDI0MzY3MjU=", "number": 362, "title": "`use_args` does not throw an error with extra field.", "user": {"login": "lezoudali", "id": 6972813, "node_id": "MDQ6VXNlcjY5NzI4MTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/6972813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lezoudali", "html_url": "https://github.com/lezoudali", "followers_url": "https://api.github.com/users/lezoudali/followers", "following_url": "https://api.github.com/users/lezoudali/following{/other_user}", "gists_url": "https://api.github.com/users/lezoudali/gists{/gist_id}", "starred_url": "https://api.github.com/users/lezoudali/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lezoudali/subscriptions", "organizations_url": "https://api.github.com/users/lezoudali/orgs", "repos_url": "https://api.github.com/users/lezoudali/repos", "events_url": "https://api.github.com/users/lezoudali/events{/privacy}", "received_events_url": "https://api.github.com/users/lezoudali/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-23T21:26:30Z", "updated_at": "2019-01-24T05:14:18Z", "closed_at": "2019-01-24T05:14:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using `marshmallow==3.0.0rc3` and `webargs==5.1.0`\r\n\r\n```\r\nCreateUserSchema(Schema):\r\n    email = fields.Email(required=True)\r\n    password = password_field()\r\n\r\n@use_args(CreateUserSchema())\r\ndef create(args):\r\n    ....\r\n```\r\nUsing `httpie`\r\n```\r\nhttp POST <create-view-endpoint> email=john_doe@example.com password=test123 extra=value\r\n```\r\n\r\ndoes not throw an error for the `extra` field.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/361", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/361/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/361/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/361/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/361", "id": 399997258, "node_id": "MDU6SXNzdWUzOTk5OTcyNTg=", "number": 361, "title": " AttributeError with Python 2.7 on FlaskParser", "user": {"login": "llazzaro", "id": 568181, "node_id": "MDQ6VXNlcjU2ODE4MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/568181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llazzaro", "html_url": "https://github.com/llazzaro", "followers_url": "https://api.github.com/users/llazzaro/followers", "following_url": "https://api.github.com/users/llazzaro/following{/other_user}", "gists_url": "https://api.github.com/users/llazzaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/llazzaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llazzaro/subscriptions", "organizations_url": "https://api.github.com/users/llazzaro/orgs", "repos_url": "https://api.github.com/users/llazzaro/repos", "events_url": "https://api.github.com/users/llazzaro/events{/privacy}", "received_events_url": "https://api.github.com/users/llazzaro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-16T21:07:10Z", "updated_at": "2019-01-16T21:12:00Z", "closed_at": "2019-01-16T21:12:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "On line 66 of file webargs/flaskparser.py:66 we got an AttributeError.\r\nOn pytohn 2.7 json does not have the attrivute JSONDecodeError\r\n\r\n```\r\nself = <webargs.flaskparser.FlaskParser object at 0x7f125c76c510>, req = <LocalProxy unbound>, name = 'website'\r\nfield = <fields.String(default=<marshmallow.missing>, attribute=None, validate=[<Lengt... null.', u'type': u'Invalid input type.', u'invalid': u'Not a valid string.'})>                                       \r\n                                                                                                                                    \r\n    def parse_json(self, req, name, field):                                                                                                  \"\"\"Pull a json value from the request.\"\"\"\r\n        json_data = self._cache.get(\"json\")\r\n        if json_data is None:\r\n            # We decode the json manually here instead of                                                       \r\n            # using req.get_json() so that we can handle                                                                                         # JSONDecodeErrors consistently                                                                                  \r\n            data = req.get_data(cache=True)\r\n            try:                                                                                                                                     self._cache[\"json\"] = json_data = core.parse_json(data)   \r\n>           except json.JSONDecodeError as e:                                                                                       \r\nE           AttributeError: 'module' object has no attribute 'JSONDecodeError'  \r\n```\r\n\r\nJSONDecodeError is available in python 3.\r\n\r\n```\r\nPython 2.7.15 (default, Aug  4 2018, 17:15:31) \r\n[GCC 7.3.0] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import json\r\n>>> json.JSONDecodeError\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nAttributeError: 'module' object has no attribute 'JSONDecodeError'\r\n>>> \r\n```\r\n\r\nPython 3:\r\n\r\n```\r\nPython 3.6.5 (default, Apr  1 2018, 05:46:30) \r\n[GCC 7.3.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import json\r\n>>> json.JSONDecodeError\r\n<class 'json.decoder.JSONDecodeError'>\r\n>>> \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/360", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/360/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/360/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/360/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/360", "id": 399158329, "node_id": "MDU6SXNzdWUzOTkxNTgzMjk=", "number": 360, "title": "Inconsistent behavior on Python 2.7 vs. Python 3.7 on Flask", "user": {"login": "mostafa", "id": 54546, "node_id": "MDQ6VXNlcjU0NTQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/54546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mostafa", "html_url": "https://github.com/mostafa", "followers_url": "https://api.github.com/users/mostafa/followers", "following_url": "https://api.github.com/users/mostafa/following{/other_user}", "gists_url": "https://api.github.com/users/mostafa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mostafa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mostafa/subscriptions", "organizations_url": "https://api.github.com/users/mostafa/orgs", "repos_url": "https://api.github.com/users/mostafa/repos", "events_url": "https://api.github.com/users/mostafa/events{/privacy}", "received_events_url": "https://api.github.com/users/mostafa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 152384790, "node_id": "MDU6TGFiZWwxNTIzODQ3OTA=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "mostafa", "id": 54546, "node_id": "MDQ6VXNlcjU0NTQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/54546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mostafa", "html_url": "https://github.com/mostafa", "followers_url": "https://api.github.com/users/mostafa/followers", "following_url": "https://api.github.com/users/mostafa/following{/other_user}", "gists_url": "https://api.github.com/users/mostafa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mostafa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mostafa/subscriptions", "organizations_url": "https://api.github.com/users/mostafa/orgs", "repos_url": "https://api.github.com/users/mostafa/repos", "events_url": "https://api.github.com/users/mostafa/events{/privacy}", "received_events_url": "https://api.github.com/users/mostafa/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mostafa", "id": 54546, "node_id": "MDQ6VXNlcjU0NTQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/54546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mostafa", "html_url": "https://github.com/mostafa", "followers_url": "https://api.github.com/users/mostafa/followers", "following_url": "https://api.github.com/users/mostafa/following{/other_user}", "gists_url": "https://api.github.com/users/mostafa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mostafa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mostafa/subscriptions", "organizations_url": "https://api.github.com/users/mostafa/orgs", "repos_url": "https://api.github.com/users/mostafa/repos", "events_url": "https://api.github.com/users/mostafa/events{/privacy}", "received_events_url": "https://api.github.com/users/mostafa/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 12, "created_at": "2019-01-15T02:10:37Z", "updated_at": "2019-01-28T04:45:05Z", "closed_at": "2019-01-28T04:45:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey guys,\r\n\r\nI am having an issue with webargs==5.x, in that, when I upgrade it from 4.x to 5.x, using Flask==1.0.2, it works and behaves normally on python 3.7, but it behaves differently on python 2.7 on the same code base. The issue is on this pull request mostafa/grest#84 and is evident on this build: https://travis-ci.org/mostafa/grest/builds/479199700. I've tried to trace my own code to see if there is a path I am not covering, but that seems not to be the case, because it passes all tests on python 3.x.\r\n\r\nThanks,\r\nMostafa.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/359", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/359/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/359/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/359/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/359", "id": 398611632, "node_id": "MDU6SXNzdWUzOTg2MTE2MzI=", "number": 359, "title": "TypeError: handle_error() takes exactly 3 arguments (5 given)", "user": {"login": "erwinyusrizal", "id": 3752374, "node_id": "MDQ6VXNlcjM3NTIzNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3752374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erwinyusrizal", "html_url": "https://github.com/erwinyusrizal", "followers_url": "https://api.github.com/users/erwinyusrizal/followers", "following_url": "https://api.github.com/users/erwinyusrizal/following{/other_user}", "gists_url": "https://api.github.com/users/erwinyusrizal/gists{/gist_id}", "starred_url": "https://api.github.com/users/erwinyusrizal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erwinyusrizal/subscriptions", "organizations_url": "https://api.github.com/users/erwinyusrizal/orgs", "repos_url": "https://api.github.com/users/erwinyusrizal/repos", "events_url": "https://api.github.com/users/erwinyusrizal/events{/privacy}", "received_events_url": "https://api.github.com/users/erwinyusrizal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-13T02:16:29Z", "updated_at": "2019-01-13T13:45:51Z", "closed_at": "2019-01-13T13:45:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I updated webargs with the new version (5.1.0), but I got this error\r\n\r\n```\r\n File \"../python2.7/site-packages/webargs/core.py\", line 283, in _on_validation_error\r\n    error_handler(error, req, schema, error_status_code, error_headers)\r\nTypeError: handle_error() takes exactly 3 arguments (5 given)\r\n```\r\nit seems the default arguments in `self.error_callback` only has 3 args\r\n\r\nhttps://github.com/marshmallow-code/webargs/blob/1a05a6b61c2a5f8d630e4a6f5d8995d0ede12f36/webargs/core.py#L522\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/357", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/357/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/357/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/357/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/357", "id": 398477601, "node_id": "MDU6SXNzdWUzOTg0Nzc2MDE=", "number": 357, "title": "Webargs 5.0.0 incorrectly tries to parse JSON body for GET request", "user": {"login": "kirsle", "id": 1663507, "node_id": "MDQ6VXNlcjE2NjM1MDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1663507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirsle", "html_url": "https://github.com/kirsle", "followers_url": "https://api.github.com/users/kirsle/followers", "following_url": "https://api.github.com/users/kirsle/following{/other_user}", "gists_url": "https://api.github.com/users/kirsle/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirsle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirsle/subscriptions", "organizations_url": "https://api.github.com/users/kirsle/orgs", "repos_url": "https://api.github.com/users/kirsle/repos", "events_url": "https://api.github.com/users/kirsle/events{/privacy}", "received_events_url": "https://api.github.com/users/kirsle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-11T22:38:25Z", "updated_at": "2019-01-14T13:54:17Z", "closed_at": "2019-01-14T13:54:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Upon upgrading to webargs >= 5.0.0 we started to see some failures in our automated unit tests (Flask with webargs-flaskparser).\r\n\r\nWe had this simple Flask endpoint which uses a GET request and has `?page=1&per_page=20` query parameters:\r\n\r\n```python\r\n@api.route('/users')\r\n@use_kwargs({\r\n    \"page\": fields.Int(missing=1),\r\n    \"per_page\": fields.Int(missing=20),\r\n})\r\ndef get_users(page, per_page):\r\n    users = User.query.paginate(page, per_page, False)\r\n    data = {\r\n        'users': [x.to_json() for x in users.items]\r\n    }\r\n\r\n    return responses.success(data, paginate=users)\r\n```\r\n\r\nAnd our unit test used a simple Flask test client:\r\n\r\n```python\r\nclient = app.test_client()\r\nrv = client.get(\"/v1/users\")\r\n```\r\n\r\nIf I dummy out the whole `@use_kwargs` block and provide function default values, the endpoint was able to run without error. I printed the request headers and body to see what they look like for the test client, and I got:\r\n\r\n```python\r\n>>> print(request.headers)\r\nEnvironHeaders([('Host', 'localhost'), ('Content-Length', '0'), ('User-Agent', 'werkzeug/0.14.1')])\r\n>>> print(request.data)\r\nb''\r\n```\r\n\r\nAs we can see, the request did not send a Content-Type header and the webargs.flaskparser still assumed the body would be JSON and tried to parse it, and failed.\r\n\r\n**As a work-around,** we could fix our unit tests to provide a Content-Type and request body -- even though these make no sense for a GET request:\r\n\r\n```python\r\nrv = client.get(\"/v1/users\",\r\n    headers={\"Content-Type\": \"application/json\"},\r\n    data=json.dumps({}),\r\n)\r\n```\r\n\r\nException traceback:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/kirsle/.virtualenvs/within_auth34/lib/python3.4/site-packages/webargs/flaskparser.py\", line 65, in parse_json\r\n    self._cache[\"json\"] = json_data = core.parse_json(data)\r\n  File \"/home/kirsle/.virtualenvs/within_auth34/lib/python3.4/site-packages/webargs/core.py\", line 128, in parse_json\r\n    return json.loads(s)\r\n  File \"/usr/lib64/python3.4/json/__init__.py\", line 318, in loads\r\n    return _default_decoder.decode(s)\r\n  File \"/usr/lib64/python3.4/json/decoder.py\", line 343, in decode\r\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n  File \"/usr/lib64/python3.4/json/decoder.py\", line 361, in raw_decode\r\n    raise ValueError(errmsg(\"Expecting value\", s, err.value)) from None\r\nValueError: Expecting value: line 1 column 1 (char 0)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/kirsle/.virtualenvs/within_auth34/lib/python3.4/site-packages/flask/app.py\", line 1813, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/home/kirsle/.virtualenvs/within_auth34/lib/python3.4/site-packages/flask/app.py\", line 1799, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/home/kirsle/work/within_auth/within_auth/controllers/api/decorators.py\", line 79, in decorated_function\r\n    return f(*args, **kwargs)\r\n  File \"/home/kirsle/.virtualenvs/within_auth34/lib/python3.4/site-packages/webargs/core.py\", line 436, in wrapper\r\n    error_headers=error_headers,\r\n  File \"/home/kirsle/.virtualenvs/within_auth34/lib/python3.4/site-packages/webargs/core.py\", line 344, in parse\r\n    parsed = self._parse_request(schema=schema, req=req, locations=locations)\r\n  File \"/home/kirsle/.virtualenvs/within_auth34/lib/python3.4/site-packages/webargs/core.py\", line 259, in _parse_request\r\n    parsed_value = self.parse_arg(argname, field_obj, req, locations)\r\n  File \"/home/kirsle/.virtualenvs/within_auth34/lib/python3.4/site-packages/webargs/core.py\", line 231, in parse_arg\r\n    value = self._get_value(name, field, req=req, location=location)\r\n  File \"/home/kirsle/.virtualenvs/within_auth34/lib/python3.4/site-packages/webargs/core.py\", line 204, in _get_value\r\n    value = function(req, name, argobj)\r\n  File \"/home/kirsle/.virtualenvs/within_auth34/lib/python3.4/site-packages/webargs/flaskparser.py\", line 66, in parse_json\r\n    except json.JSONDecodeError as e:\r\nAttributeError: 'module' object has no attribute 'JSONDecodeError'\r\n```\r\n\r\n**Also note:** I could trigger this bug on Python 3.4.9 but it was not triggered on Python 3.6 or 3.7 strangely enough.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/355", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/355/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/355/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/355/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/355", "id": 398128118, "node_id": "MDU6SXNzdWUzOTgxMjgxMTg=", "number": 355, "title": "bug: webargs 5.0 introduces incompatibility with Flask < 1.0", "user": {"login": "hoatle", "id": 83062, "node_id": "MDQ6VXNlcjgzMDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/83062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hoatle", "html_url": "https://github.com/hoatle", "followers_url": "https://api.github.com/users/hoatle/followers", "following_url": "https://api.github.com/users/hoatle/following{/other_user}", "gists_url": "https://api.github.com/users/hoatle/gists{/gist_id}", "starred_url": "https://api.github.com/users/hoatle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hoatle/subscriptions", "organizations_url": "https://api.github.com/users/hoatle/orgs", "repos_url": "https://api.github.com/users/hoatle/repos", "events_url": "https://api.github.com/users/hoatle/events{/privacy}", "received_events_url": "https://api.github.com/users/hoatle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 922766584, "node_id": "MDU6TGFiZWw5MjI3NjY1ODQ=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/backwards%20incompatible", "name": "backwards incompatible", "color": "d93f0b", "default": false, "description": ""}, {"id": 80953695, "node_id": "MDU6TGFiZWw4MDk1MzY5NQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/bug", "name": "bug", "color": "b60205", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2019-01-11T04:31:36Z", "updated_at": "2019-01-11T09:08:09Z", "closed_at": "2019-01-11T09:06:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/marshmallow-code/webargs/blob/5.0.0/webargs/flaskparser.py#L63\r\n\r\n`_get_data_for_json` is only available since Flask >= 1.0\r\n\r\nfor Flask < 1.0, there is an error as follows:\r\n\r\n```\r\n  File \"/usr/local/lib/python2.7/site-packages/webargs/flaskparser.py\", line 63, in parse_json\r\n    data = req._get_data_for_json(cache=True)\r\n  File \"/usr/local/lib/python2.7/site-packages/werkzeug/local.py\", line 347, in __getattr__\r\n    return getattr(self._get_current_object(), name)\r\nAttributeError: 'Request' object has no attribute '_get_data_for_json'\r\n```\r\n\r\nI had to downgrade webargs to 4.4.1 to get it work.\r\n\r\nSo you need to update this framework requirement https://github.com/marshmallow-code/webargs/blob/dev/setup.py#L11 or update the code for the backward compatibility.\r\n\r\nIMHO, using `_get_data_for_json` should be avoided because it's considered private and can be changed/removed anytime.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/350", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/350/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/350/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/350/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/350", "id": 394992745, "node_id": "MDU6SXNzdWUzOTQ5OTI3NDU=", "number": 350, "title": "Remove support for legacy error handlers", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/3", "html_url": "https://github.com/marshmallow-code/webargs/milestone/3", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/3/labels", "id": 3922129, "node_id": "MDk6TWlsZXN0b25lMzkyMjEyOQ==", "number": 3, "title": "5.0.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2018-12-24T06:34:48Z", "updated_at": "2019-01-03T16:31:01Z", "due_on": null, "closed_at": "2019-01-03T16:31:01Z"}, "comments": 0, "created_at": "2018-12-31T15:07:26Z", "updated_at": "2019-01-01T22:48:52Z", "closed_at": "2019-01-01T22:48:52Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/346", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/346/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/346/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/346/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/346", "id": 394586758, "node_id": "MDU6SXNzdWUzOTQ1ODY3NTg=", "number": 346, "title": "How to post complex JSON data?", "user": {"login": "Caratpine", "id": 11403002, "node_id": "MDQ6VXNlcjExNDAzMDAy", "avatar_url": "https://avatars2.githubusercontent.com/u/11403002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Caratpine", "html_url": "https://github.com/Caratpine", "followers_url": "https://api.github.com/users/Caratpine/followers", "following_url": "https://api.github.com/users/Caratpine/following{/other_user}", "gists_url": "https://api.github.com/users/Caratpine/gists{/gist_id}", "starred_url": "https://api.github.com/users/Caratpine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Caratpine/subscriptions", "organizations_url": "https://api.github.com/users/Caratpine/orgs", "repos_url": "https://api.github.com/users/Caratpine/repos", "events_url": "https://api.github.com/users/Caratpine/events{/privacy}", "received_events_url": "https://api.github.com/users/Caratpine/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-28T09:07:07Z", "updated_at": "2019-01-14T02:04:16Z", "closed_at": "2018-12-28T21:14:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to post JSON body like this:\r\n\r\n```\r\n{\r\n\t\"key\": \"abv\",\r\n\t\"phones\": [\r\n\t\t{\r\n\t\t\t\"id\": 123,\r\n\t\t\t\"email\": 13@example.com\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"id\": 333,\r\n\t\t\t\"email\" @example.com\r\n\t\t}\r\n\t]\r\n}\r\n```\r\n\r\nHere is my code:\r\n```\r\n# coding=utf-8\r\n\r\nfrom flask import Flask, jsonify\r\nfrom webargs.flaskparser import use_args\r\nfrom marshmallow import Schema, fields\r\n\r\napp = Flask(__name__)\r\n\r\n\r\nclass Phone(Schema):\r\n    id = fields.Int()\r\n    email = fields.Str()\r\n\r\n    class Meta:\r\n        strict = True\r\n\r\n\r\nclass Phones(Schema):\r\n    list = fields.Nested(Phone, many=True)\r\n\r\n    class Meta:\r\n        strict = True\r\n\r\n\r\nclass Contact(Schema):\r\n    key = fields.Str()\r\n    phones = fields.Nested(Phones, only='list')\r\n\r\n    class Meta:\r\n        strict = True\r\n\r\n\r\n@app.route('/', methods=['POST'])\r\n@use_args(Contact())\r\ndef create_router(args):\r\n    print(args)\r\n    return jsonify(args)\r\n\r\n```\r\n\r\nBut it didn't work. `args` was empty dict.\r\n\r\nmarshmallow==2.17.0\r\nwebargs==4.2.0\r\n\r\nthanks :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/342", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/342/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/342/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/342/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/342", "id": 394049712, "node_id": "MDU6SXNzdWUzOTQwNDk3MTI=", "number": 342, "title": "RFC: Remove fill_in_missing_args behavior", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 922766584, "node_id": "MDU6TGFiZWw5MjI3NjY1ODQ=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/backwards%20incompatible", "name": "backwards incompatible", "color": "d93f0b", "default": false, "description": ""}, {"id": 152384768, "node_id": "MDU6TGFiZWwxNTIzODQ3Njg=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/feedback%20welcome", "name": "feedback welcome", "color": "0e8a16", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/3", "html_url": "https://github.com/marshmallow-code/webargs/milestone/3", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/3/labels", "id": 3922129, "node_id": "MDk6TWlsZXN0b25lMzkyMjEyOQ==", "number": 3, "title": "5.0.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2018-12-24T06:34:48Z", "updated_at": "2019-01-03T16:31:01Z", "due_on": null, "closed_at": "2019-01-03T16:31:01Z"}, "comments": 3, "created_at": "2018-12-25T21:14:05Z", "updated_at": "2019-01-01T13:43:44Z", "closed_at": "2019-01-01T13:43:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Proposal: Don't fill in missing args for `use_kwargs`.\r\n\r\nI believe this behavior was added to prevent a variable number of kwargs from being passed to view functions. However, this leads to unexpected behavior, as seen in #252 and #307. \r\n\r\n* Remove the `force_all` argument to `parse`/`use_args`/`use_kwargs`\r\n* Remove `fill_in_missing_args`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/339", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/339/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/339/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/339/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/339", "id": 394032971, "node_id": "MDU6SXNzdWUzOTQwMzI5NzE=", "number": 339, "title": "Drop support for marshmallow 3 versions older than rc1", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/3", "html_url": "https://github.com/marshmallow-code/webargs/milestone/3", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/3/labels", "id": 3922129, "node_id": "MDk6TWlsZXN0b25lMzkyMjEyOQ==", "number": 3, "title": "5.0.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2018-12-24T06:34:48Z", "updated_at": "2019-01-03T16:31:01Z", "due_on": null, "closed_at": "2019-01-03T16:31:01Z"}, "comments": 0, "created_at": "2018-12-25T15:48:17Z", "updated_at": "2018-12-27T22:51:15Z", "closed_at": "2018-12-27T22:51:15Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Remove compatibility code added in https://github.com/sloria/webargs/pull/330 to support marshmallow 3 beta versions.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/337", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/337/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/337/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/337/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/337", "id": 393892503, "node_id": "MDU6SXNzdWUzOTM4OTI1MDM=", "number": 337, "title": "Handle same name in multiple locations", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953695, "node_id": "MDU6TGFiZWw4MDk1MzY5NQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/bug", "name": "bug", "color": "b60205", "default": true, "description": ""}, {"id": 152384790, "node_id": "MDU6TGFiZWwxNTIzODQ3OTA=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-24T14:39:16Z", "updated_at": "2018-12-28T21:56:58Z", "closed_at": "2018-12-28T21:56:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "It is theoretically possible for the server to receive the same argument in multiple locations. webargs does not handle this case.\r\n\r\nThis test reproduces the issue:\r\n\r\n```python\r\ndef test_same_arg_in_multiple_locations(web_request, parser):\r\n    web_request.json = {'foo': '42'}\r\n    web_request.query = {'foo': '43'}\r\n    args = {\r\n        'foo': fields.Int(load_only=True, locations=('json', )),\r\n        'foo2': fields.Int(load_only=True, data_key='foo', locations=('query', ))\r\n    }\r\n    result = parser.parse(args, web_request)\r\n    assert result == {'foo': 42, 'foo2': 43}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/336", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/336/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/336/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/336/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/336", "id": 393892009, "node_id": "MDU6SXNzdWUzOTM4OTIwMDk=", "number": 336, "title": "Deprecate status_code and headers argument to ValidationError", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/4", "html_url": "https://github.com/marshmallow-code/webargs/milestone/4", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/4/labels", "id": 3922466, "node_id": "MDk6TWlsZXN0b25lMzkyMjQ2Ng==", "number": 4, "title": "4.2.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2018-12-24T14:34:24Z", "updated_at": "2018-12-28T21:54:52Z", "due_on": null, "closed_at": "2018-12-28T21:54:52Z"}, "comments": 0, "created_at": "2018-12-24T14:35:48Z", "updated_at": "2018-12-27T20:57:14Z", "closed_at": "2018-12-27T20:57:14Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As an incremental step towards #327, raise a deprecation warning when `status_code` is passed to `ValidationError`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/335", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/335/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/335/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/335/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/335", "id": 393889038, "node_id": "MDU6SXNzdWUzOTM4ODkwMzg=", "number": 335, "title": "Transfer to marshmallow-code GitHub organization", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/4", "html_url": "https://github.com/marshmallow-code/webargs/milestone/4", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/4/labels", "id": 3922466, "node_id": "MDk6TWlsZXN0b25lMzkyMjQ2Ng==", "number": 4, "title": "4.2.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2018-12-24T14:34:24Z", "updated_at": "2018-12-28T21:54:52Z", "due_on": null, "closed_at": "2018-12-28T21:54:52Z"}, "comments": 1, "created_at": "2018-12-24T14:15:38Z", "updated_at": "2018-12-27T22:21:05Z", "closed_at": "2018-12-27T22:21:05Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Now that marshmallow-code has more \"ecosystem\" projects and webargs uses marshmallow, it makes sense to move this project over to the marshmallow-code org.\r\n\r\nAfter all, webargs is considered an official member of the \"marshmallow stack.\" =)\r\n\r\ncc @lafrech \r\n\r\n\r\nTODO:\r\n\r\n- [x] Transfer repo\r\n- [x] Update docs and PyPI metadata\r\n- [x] Update CONTRIBUTING to link to marshmallow-code's COC\r\n- [x] Update RTD info\r\n- [x] Update Tidelift info", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/331", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/331/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/331/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/331/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/331", "id": 386402134, "node_id": "MDU6SXNzdWUzODY0MDIxMzQ=", "number": 331, "title": "Error upgrading from 3.0.2 to 4.1.2", "user": {"login": "bouzafr", "id": 130913, "node_id": "MDQ6VXNlcjEzMDkxMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/130913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bouzafr", "html_url": "https://github.com/bouzafr", "followers_url": "https://api.github.com/users/bouzafr/followers", "following_url": "https://api.github.com/users/bouzafr/following{/other_user}", "gists_url": "https://api.github.com/users/bouzafr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bouzafr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bouzafr/subscriptions", "organizations_url": "https://api.github.com/users/bouzafr/orgs", "repos_url": "https://api.github.com/users/bouzafr/repos", "events_url": "https://api.github.com/users/bouzafr/events{/privacy}", "received_events_url": "https://api.github.com/users/bouzafr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-01T00:57:51Z", "updated_at": "2018-12-01T08:55:47Z", "closed_at": "2018-12-01T08:55:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just upgraded from 3.0.2 to 4.1.2 and got the error below. Anything I can do to fix this?\r\n\r\nThanks.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/venv/lib/python3.6/site-packages/flask/app.py\", line 1813, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/venv/lib/python3.6/site-packages/flask/app.py\", line 1799, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/venv/lib/python3.6/site-packages/flask_restful/__init__.py\", line 480, in wrapper\r\n    resp = resource(*args, **kwargs)\r\n  File \"/venv/lib/python3.6/site-packages/flask/views.py\", line 88, in view\r\n    return self.dispatch_request(*args, **kwargs)\r\n  File \"/venv/lib/python3.6/site-packages/flask_restful/__init__.py\", line 595, in dispatch_request\r\n    resp = meth(*args, **kwargs)\r\n  File \"/venv/lib/python3.6/site-packages/webargs/core.py\", line 474, in wrapper\r\n    force_all=force_all,\r\n  File \"/venv/lib/python3.6/site-packages/webargs/core.py\", line 396, in parse\r\n    self._on_validation_error(error, req, schema)\r\n  File \"/venv/lib/python3.6/site-packages/webargs/core.py\", line 334, in _on_validation_error\r\n    self.error_callback(error, req, schema)\r\nTypeError: handle_request_parsing_error() takes 2 positional arguments but 3 were given\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/329", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/329/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/329/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/329/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/329", "id": 383974153, "node_id": "MDU6SXNzdWUzODM5NzQxNTM=", "number": 329, "title": "Throwing error on invalid JSON string\u2026", "user": {"login": "zedrdave", "id": 746979, "node_id": "MDQ6VXNlcjc0Njk3OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/746979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zedrdave", "html_url": "https://github.com/zedrdave", "followers_url": "https://api.github.com/users/zedrdave/followers", "following_url": "https://api.github.com/users/zedrdave/following{/other_user}", "gists_url": "https://api.github.com/users/zedrdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/zedrdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zedrdave/subscriptions", "organizations_url": "https://api.github.com/users/zedrdave/orgs", "repos_url": "https://api.github.com/users/zedrdave/repos", "events_url": "https://api.github.com/users/zedrdave/events{/privacy}", "received_events_url": "https://api.github.com/users/zedrdave/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 922766584, "node_id": "MDU6TGFiZWw5MjI3NjY1ODQ=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/backwards%20incompatible", "name": "backwards incompatible", "color": "d93f0b", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/3", "html_url": "https://github.com/marshmallow-code/webargs/milestone/3", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/3/labels", "id": 3922129, "node_id": "MDk6TWlsZXN0b25lMzkyMjEyOQ==", "number": 3, "title": "5.0.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2018-12-24T06:34:48Z", "updated_at": "2019-01-03T16:31:01Z", "due_on": null, "closed_at": "2019-01-03T16:31:01Z"}, "comments": 3, "created_at": "2018-11-24T09:32:28Z", "updated_at": "2018-12-31T14:29:32Z", "closed_at": "2018-12-31T14:08:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "_This seems too big to be an oversight, so apologies in advance if this is a design choice and it's been covered before (I looked in the issues and didn't see anything):_\r\n\r\nWhen sending an invalid JSON string, eg (note the stray comma):\r\n```\r\ncurl -X PUT \"http://localhost:5000/bar/0001\" -H \"accept: application/json\" -H \"Content-Type: application/json\" -d \"{ \\\"foo\\\": \\\"bar\\\" , }\"\r\n```\r\n\r\n\u2026 it seems that parsers are expected to simply return an empty dict `{}`, while silencing any error. Eg `flask_parser`:\r\n```\r\n        # Fail silently so that the webargs parser can handle the error\r\n        if hasattr(req, \"get_json\"):\r\n            # Flask >= 0.10.x\r\n            json_data = req.get_json(force=force, silent=True)\r\n        else:\r\n            # Flask <= 0.9.x\r\n            json_data = req.json\r\n        if json_data is None:\r\n            return core.missing\r\n```\r\n\r\nDespite what the comment implies, I don't think there is any way later on to distinguish between a real missing value, and one resulting from an invalid JSON string\u2026\r\n\r\nAs expected, assuming an empty dict is compatible with Schema validation options, no error is thrown (and adding an error handler does not seem like it would help).\r\n\r\nAm I missing something? Shouldn't JSON parsing errors be caught and trigger a 400 or 422 automatically?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/327", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/327/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/327/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/327/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/327", "id": 383482907, "node_id": "MDU6SXNzdWUzODM0ODI5MDc=", "number": 327, "title": "RFC: Don't pass a status_code as kwargs in a Field validator", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 922766584, "node_id": "MDU6TGFiZWw5MjI3NjY1ODQ=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/backwards%20incompatible", "name": "backwards incompatible", "color": "d93f0b", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/3", "html_url": "https://github.com/marshmallow-code/webargs/milestone/3", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/3/labels", "id": 3922129, "node_id": "MDk6TWlsZXN0b25lMzkyMjEyOQ==", "number": 3, "title": "5.0.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2018-12-24T06:34:48Z", "updated_at": "2019-01-03T16:31:01Z", "due_on": null, "closed_at": "2019-01-03T16:31:01Z"}, "comments": 9, "created_at": "2018-11-22T10:57:44Z", "updated_at": "2018-12-30T22:39:03Z", "closed_at": "2018-12-30T22:39:03Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "webargs's `ValidationError` adds `status_code` and `headers` to marshmallow's `ValidationError`. This allows to specify a default code for input validation error. The webserver uses this attribute to return the proper error code.\r\n\r\nThe tests show another use of this that I find a bit problematic.\r\n\r\nIt is possible to define a validator on a `Field` of the input validation `Schema` that raises a `ValidationError` with a `status_code`. The deserialization logic in marshmallow adds this attribute to the `ValidationError` that is raised at the end of the validation process.\r\n\r\nThe issue with this is the case of several fields raising with a different status code. The last one to deserialize has priority. This is probably a corner case, but it shows the feature is not 100% reliable. It looks underterministic.\r\n\r\nIn practice I don't see the use case for this in the first place. I generally use the default 422 for all validation errors and return specific codes from flask abort in view function or in specific decorator (authentication decorator,...).\r\n\r\nRelated marshmallow issue: https://github.com/marshmallow-code/marshmallow/issues/996.\r\n\r\nMy suggestion is to remove the logic that passes the kwargs in marshmallow and delete the test case here that exhibit the case of specifying a status code in a field validator.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/324", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/324/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/324/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/324/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/324", "id": 379157167, "node_id": "MDU6SXNzdWUzNzkxNTcxNjc=", "number": 324, "title": "Dependabot couldn't fetch all your path-based dependencies", "user": {"login": "dependabot-preview[bot]", "id": 27856297, "node_id": "MDM6Qm90Mjc4NTYyOTc=", "avatar_url": "https://avatars3.githubusercontent.com/in/2141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dependabot-preview%5Bbot%5D", "html_url": "https://github.com/apps/dependabot-preview", "followers_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/followers", "following_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/repos", "events_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-11-09T13:14:26Z", "updated_at": "2018-11-09T14:14:21Z", "closed_at": "2018-11-09T14:11:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Dependabot couldn't fetch one or more of your project's path-based Python dependencies. The affected dependencies were `'./setup.py`.\n\nTo use path-based dependancies with Dependabot the paths must be relative and resolve to a directory in this project's source code.\n\nYou can mention @dependabot in the comments below to contact the Dependabot team.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/323", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/323/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/323/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/323/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/323", "id": 379124186, "node_id": "MDU6SXNzdWUzNzkxMjQxODY=", "number": 323, "title": "Asymmetry of, and working with Value, None, and Blank", "user": {"login": "attack68", "id": 24256554, "node_id": "MDQ6VXNlcjI0MjU2NTU0", "avatar_url": "https://avatars0.githubusercontent.com/u/24256554?v=4", "gravatar_id": "", "url": "https://api.github.com/users/attack68", "html_url": "https://github.com/attack68", "followers_url": "https://api.github.com/users/attack68/followers", "following_url": "https://api.github.com/users/attack68/following{/other_user}", "gists_url": "https://api.github.com/users/attack68/gists{/gist_id}", "starred_url": "https://api.github.com/users/attack68/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/attack68/subscriptions", "organizations_url": "https://api.github.com/users/attack68/orgs", "repos_url": "https://api.github.com/users/attack68/repos", "events_url": "https://api.github.com/users/attack68/events{/privacy}", "received_events_url": "https://api.github.com/users/attack68/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-09T11:24:01Z", "updated_at": "2018-12-28T21:34:20Z", "closed_at": "2018-12-28T21:34:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please do correct me if I'm wrong but there is often an asymmetry between webform input fields at initialisation and a webform input fields prepopulated from a Database (or touched by user), which causes use-cases with validating the concepts of `Value`, `None` and `\"\"` (Blank).\r\n\r\nFor example a Webform might contain a text input (validated for a numeric type), which is initialised with a `null` value in JavaScript. On submit (without touching this input field) `webargs` can parse this with the `allow_none` flag set to `True`. Entered into a database a `None` value will evoke the `NULL` entry with specific meaning, or in other cases default values can be configured at time of database entry.\r\n\r\nNow suppose that the user has touched the field or that it was prepopulated with a `Value` and the user removes it creating, instead,  a `\"\"` entry.\r\n\r\nWhile `webargs` will parse this, the fields [`fields.Float()`, `fields.Int()`] throw errors: \"not a valid [number, integer]\", even when `allow_blank=True`.\r\n\r\nThus it leaves the requirement of having to either implement JavaScript on the client side to ensure that `\"\"` is converted to `null` before submitting the form for `webargs` to parse, or what might be a better pattern in some  to allow a specific option to cast `\"\"` to `None` so that this is consistent. Consider the option:\r\n\r\n`cast_blank_to_none=False`: no change to existing behaviour\r\n`cast_blank_to_none=True`: if data='': data=None, before any further parsing.\r\n\r\n**TLDR;**\r\nCan `webargs` cast `\"\"` (blank) to `None` so that a blank Numeric/Int input form is allowed, without the need to validate or augment userinput on the Javascript side.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/322", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/322/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/322/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/322/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/322", "id": 378282280, "node_id": "MDU6SXNzdWUzNzgyODIyODA=", "number": 322, "title": "Dependabot couldn't fetch all your path-based dependencies", "user": {"login": "dependabot-preview[bot]", "id": 27856297, "node_id": "MDM6Qm90Mjc4NTYyOTc=", "avatar_url": "https://avatars3.githubusercontent.com/in/2141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dependabot-preview%5Bbot%5D", "html_url": "https://github.com/apps/dependabot-preview", "followers_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/followers", "following_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/repos", "events_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-07T13:14:25Z", "updated_at": "2018-11-08T23:10:53Z", "closed_at": "2018-11-08T23:10:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Dependabot couldn't fetch one or more of your project's path-based Python dependencies. The affected dependencies were `'./setup.py`.\n\nTo use path-based dependancies with Dependabot the paths must be relative and resolve to a directory in this project's source code.\n\nYou can mention @dependabot in the comments below to contact the Dependabot team.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/321", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/321/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/321/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/321/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/321", "id": 376863768, "node_id": "MDU6SXNzdWUzNzY4NjM3Njg=", "number": 321, "title": "webargs indicate my body request as empty while using tornado httpclient's fetch method", "user": {"login": "msudgh", "id": 11756815, "node_id": "MDQ6VXNlcjExNzU2ODE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11756815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msudgh", "html_url": "https://github.com/msudgh", "followers_url": "https://api.github.com/users/msudgh/followers", "following_url": "https://api.github.com/users/msudgh/following{/other_user}", "gists_url": "https://api.github.com/users/msudgh/gists{/gist_id}", "starred_url": "https://api.github.com/users/msudgh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msudgh/subscriptions", "organizations_url": "https://api.github.com/users/msudgh/orgs", "repos_url": "https://api.github.com/users/msudgh/repos", "events_url": "https://api.github.com/users/msudgh/events{/privacy}", "received_events_url": "https://api.github.com/users/msudgh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-02T15:43:56Z", "updated_at": "2018-11-02T16:49:07Z", "closed_at": "2018-11-02T16:48:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm testing my `Tornado` resources with [`fetch`](https://www.tornadoweb.org/en/stable/httpclient.html#tornado.httpclient.HTTPRequest) method but while validation the resource schema i've got `422` http status code.\r\nCould someone help me?\r\n\r\nResource:\r\n```python\r\nfrom schema import configs\r\nfrom services import db\r\nfrom util import JsonHandler\r\nfrom webargs.tornadoparser import use_kwargs, use_args\r\nfrom tornado import log\r\nfrom marshmallow import fields\r\n\r\n\r\nclass Resource(JsonHandler):\r\n    @use_args({'name': fields.Str(required=True)})\r\n    def post(self, args):\r\n        dbc = self.settings['database']['connection']\r\n        config = args\r\n\r\n        try:\r\n            # Update/Insert document by specified criteria\r\n            dbc.database.configs.update({\r\n                'name': name,\r\n            }, config, True)\r\n\r\n            return self.make_response(config)\r\n\r\n        except:\r\n            self.write_error(500)\r\n```\r\n\r\nTest Case:\r\n```python\r\n    ...\r\n    def test_add_new_config(self):\r\n        response = self.fetch('/configs', method=\"POST\",\r\n                              body='{\"name\":\"ali\"}',\r\n                              headers={\r\n                                  'Content-Type': 'Application/Json'\r\n                              })\r\n\r\n        self.assertEqual(response.code, 200)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/318", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/318/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/318/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/318/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/318", "id": 375895892, "node_id": "MDU6SXNzdWUzNzU4OTU4OTI=", "number": 318, "title": "Keep arg as a str", "user": {"login": "bustawin", "id": 4247265, "node_id": "MDQ6VXNlcjQyNDcyNjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4247265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bustawin", "html_url": "https://github.com/bustawin", "followers_url": "https://api.github.com/users/bustawin/followers", "following_url": "https://api.github.com/users/bustawin/following{/other_user}", "gists_url": "https://api.github.com/users/bustawin/gists{/gist_id}", "starred_url": "https://api.github.com/users/bustawin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bustawin/subscriptions", "organizations_url": "https://api.github.com/users/bustawin/orgs", "repos_url": "https://api.github.com/users/bustawin/repos", "events_url": "https://api.github.com/users/bustawin/events{/privacy}", "received_events_url": "https://api.github.com/users/bustawin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-31T10:32:44Z", "updated_at": "2018-11-12T09:10:19Z", "closed_at": "2018-11-12T09:10:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI have a query field: `.../?search=foo`. This query field must always be a string, however when I do `.../?search=1` the '1' is casted to int, which then Marshmallow dislikes because the field is set as a Str. If I set the field as Raw everything works but the value is then returned to str.\r\n\r\nIs there a way to tell webargs to keep it as a str?\r\n\r\nBtw, thanks for such amazing library!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/314", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/314/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/314/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/314/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/314", "id": 374793196, "node_id": "MDU6SXNzdWUzNzQ3OTMxOTY=", "number": 314, "title": "Use tox for running tests and task running", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-28T20:10:03Z", "updated_at": "2018-11-03T14:32:08Z", "closed_at": "2018-11-03T14:32:08Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "https://github.com/marshmallow-code/marshmallow/issues/1020#issuecomment-433544037", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/308", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/308/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/308/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/308/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/308", "id": 372452944, "node_id": "MDU6SXNzdWUzNzI0NTI5NDQ=", "number": 308, "title": "ma.Schema.partial not work with use_kwargs", "user": {"login": "TTWShell", "id": 8017604, "node_id": "MDQ6VXNlcjgwMTc2MDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/8017604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TTWShell", "html_url": "https://github.com/TTWShell", "followers_url": "https://api.github.com/users/TTWShell/followers", "following_url": "https://api.github.com/users/TTWShell/following{/other_user}", "gists_url": "https://api.github.com/users/TTWShell/gists{/gist_id}", "starred_url": "https://api.github.com/users/TTWShell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TTWShell/subscriptions", "organizations_url": "https://api.github.com/users/TTWShell/orgs", "repos_url": "https://api.github.com/users/TTWShell/repos", "events_url": "https://api.github.com/users/TTWShell/events{/privacy}", "received_events_url": "https://api.github.com/users/TTWShell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-22T09:35:38Z", "updated_at": "2018-12-28T21:36:35Z", "closed_at": "2018-12-28T21:36:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/305", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/305/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/305/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/305/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/305", "id": 370666351, "node_id": "MDU6SXNzdWUzNzA2NjYzNTE=", "number": 305, "title": "ValidationError is no longer handled correctly by flask-restful", "user": {"login": "kardaj", "id": 8066362, "node_id": "MDQ6VXNlcjgwNjYzNjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8066362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kardaj", "html_url": "https://github.com/kardaj", "followers_url": "https://api.github.com/users/kardaj/followers", "following_url": "https://api.github.com/users/kardaj/following{/other_user}", "gists_url": "https://api.github.com/users/kardaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/kardaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kardaj/subscriptions", "organizations_url": "https://api.github.com/users/kardaj/orgs", "repos_url": "https://api.github.com/users/kardaj/repos", "events_url": "https://api.github.com/users/kardaj/events{/privacy}", "received_events_url": "https://api.github.com/users/kardaj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953699, "node_id": "MDU6TGFiZWw4MDk1MzY5OQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-16T15:20:22Z", "updated_at": "2018-10-17T06:52:23Z", "closed_at": "2018-10-16T23:48:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have been noticing a new behaviour in our APIs after upgrading from `3.x` to `4.x`.  Here's an example that illustrates the problem, consider this a `main.py` file:\r\n\r\n```python\r\nfrom marshmallow import Schema, validate\r\nfrom flask import Flask\r\nfrom webargs import fields\r\nfrom webargs.flaskparser import use_kwargs\r\nfrom flask_restful import Resource, Api\r\n\r\n\r\nclass MySchema(Schema):\r\n    class Meta:\r\n        strict = True\r\n    email = fields.String(location='json', validate=validate.Email(), required=True)\r\n\r\n\r\napp = Flask(__name__)\r\napi = Api(app)\r\n\r\n\r\nclass PersonalInfo(Resource):\r\n    @use_kwargs(MySchema)\r\n    def put(self, email):\r\n        print email\r\n        return {'hello': 'world'}\r\n\r\n\r\napi.add_resource(PersonalInfo, '/')\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app.run()\r\n```\r\nPrevious behaviour:\r\n```bash\r\n$ pip installl 'webargs<4.0.0'\r\n$ python main.py\r\n\r\n$ curl -X PUT http://127.0.0.1:5000/ -d email=hello -i\r\nHTTP/1.0 422 UNPROCESSABLE ENTITY\r\nContent-Type: application/json\r\nContent-Length: 62\r\nServer: Werkzeug/0.14.1 Python/2.7.15\r\nDate: Tue, 16 Oct 2018 15:04:31 GMT\r\n\r\n{\"messages\": {\"email\": [\"Missing data for required field.\"]}}\r\n```\r\nCurrent behaviour:\r\n```bash\r\n$ pip install 'webargs>=4.0.0' --upgrade\r\n$ python main.py\r\n\r\n$ curl -X PUT http://127.0.0.1:5000/ -d email=hello -i\r\nHTTP/1.0 500 INTERNAL SERVER ERROR\r\nContent-Type: application/json\r\nContent-Length: 37\r\nServer: Werkzeug/0.14.1 Python/2.7.15\r\nDate: Tue, 16 Oct 2018 15:11:01 GMT\r\n\r\n{\"message\": \"Internal Server Error\"}\r\n```\r\nThe error I get is:\r\n```\r\n[2018-10-16 17:11:01,398] ERROR in app: Exception on / [PUT]\r\nTraceback (most recent call last):\r\n  File \"/Users/hassene/Projects/personal/housing-market/env/lib/python2.7/site-packages/flask/app.py\", line 2292, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/Users/hassene/Projects/personal/housing-market/env/lib/python2.7/site-packages/flask/app.py\", line 1815, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/Users/hassene/Projects/personal/housing-market/env/lib/python2.7/site-packages/flask_restful/__init__.py\", line 273, in error_router\r\n    return original_handler(e)\r\n  File \"/Users/hassene/Projects/personal/housing-market/env/lib/python2.7/site-packages/flask/app.py\", line 1695, in handle_user_exception\r\n    assert exc_value is e\r\nAssertionError\r\n```\r\nAny idea where this is coming from? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/303", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/303/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/303/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/303/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/303", "id": 368257005, "node_id": "MDU6SXNzdWUzNjgyNTcwMDU=", "number": 303, "title": "Confused - how to use List/Nested", "user": {"login": "nazariyv", "id": 13678461, "node_id": "MDQ6VXNlcjEzNjc4NDYx", "avatar_url": "https://avatars3.githubusercontent.com/u/13678461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nazariyv", "html_url": "https://github.com/nazariyv", "followers_url": "https://api.github.com/users/nazariyv/followers", "following_url": "https://api.github.com/users/nazariyv/following{/other_user}", "gists_url": "https://api.github.com/users/nazariyv/gists{/gist_id}", "starred_url": "https://api.github.com/users/nazariyv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nazariyv/subscriptions", "organizations_url": "https://api.github.com/users/nazariyv/orgs", "repos_url": "https://api.github.com/users/nazariyv/repos", "events_url": "https://api.github.com/users/nazariyv/events{/privacy}", "received_events_url": "https://api.github.com/users/nazariyv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953699, "node_id": "MDU6TGFiZWw4MDk1MzY5OQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-10-09T15:02:47Z", "updated_at": "2018-10-09T15:57:33Z", "closed_at": "2018-10-09T15:57:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can you help me understand how to use the structure like below to achieve something like this: \r\n\r\n```py\r\n {\"config\":{\"factor_1\":[{\"comparator\":\"<=\", \"value\":\"20\"},{\"comparator\":\">=\", \"value\":\"10\"}],\r\n               \"factor_2\":[{\"comparator\":\"<=\", \"value\": \"PE\"}],\r\n               \"factor_3\":[{\"comparator\":\"exactly\", \"value\": \"AAA+\"}]}\r\n```\r\n\r\n```py\r\nclass ComparatorValue(Schema):\r\n    comparator = fields.Str(required=True)\r\n    value = fields.Str(required=True)\r\n\r\n    @validates('comparator')\r\n    def validate_comprator(self, comparator):\r\n        if comparator not in comparators:\r\n            raise ValidationError(\"Invalid comparator: {}. Allowed values: {}\".format(comparator, comparators))\r\n\r\n    class Meta:\r\n        strict = True\r\n\r\n\r\nclass ConfigSchema(Schema):\r\n    \"\"\"\r\n    {\"config\":{\"factor_1\":[{\"comparator\":\"<=\", \"value\":\"20\"},{\"comparator\":\">=\", \"value\":\"10\"}],\r\n               \"factor_2\":[{\"comparator\":\"<=\", \"value\": \"PE\"}],\r\n               \"factor_3\":[{\"comparator\":\"exactly\", \"value\": \"AAA+\"}]}\r\n    \"\"\"\r\n    config = fields.Dict(keys=fields.Str(required=True),\r\n                         values=fields.Nested(ComparatorValue), required=True)\r\n    # comparator = fields.Str()\r\n    # # value = fields.Str(required=True)\r\n    #\r\n\r\n\r\n    @validates('config')\r\n    def validate_config(self, config):\r\n        keys = list(config.keys())\r\n        vals = list(config.values())\r\n        for key in keys:\r\n            if key != '':\r\n                raise ValidationError(\"Factor name cannot be empty.\")\r\n        # for val in vals:\r\n        #     if\r\n\r\n    class Meta:\r\n        strict = True\r\n\r\ndef get_api():\r\n\r\n    class BondScreenApi(Resource):\r\n        @use_args(ConfigSchema())\r\n        def post(self, args):\r\n            # comparator = args['comparator']\r\n            # value = args['value']\r\n            print(args['config'])\r\n            print(\"Posted args: {}\".format(args))\r\n            return {\"Got\": \"Through\"}, 201\r\n\r\n    return BondScreenApi\r\n```\r\n\r\nAs soon as I add Nested/List, it stops working, as in it successfully goes through all of the validation, even though the args are not correct. For example, if for values we have `fields.List(Nested(ComparatorValue))` (this is actually what I need, I've given above a minimal example), then any request where the data is like: `{\"config\": {\"yo\":\"got through\"}}` goes through, even though the value of \"yo\" is supposed to be a `List(Nested(...))`. I am clearly misunderstanding how to use it and I cannot find a lot of examples on the Internet.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/290", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/290/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/290/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/290/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/290", "id": 361090819, "node_id": "MDU6SXNzdWUzNjEwOTA4MTk=", "number": 290, "title": "422 Unprocessable Entity", "user": {"login": "handersonc", "id": 8728986, "node_id": "MDQ6VXNlcjg3Mjg5ODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8728986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/handersonc", "html_url": "https://github.com/handersonc", "followers_url": "https://api.github.com/users/handersonc/followers", "following_url": "https://api.github.com/users/handersonc/following{/other_user}", "gists_url": "https://api.github.com/users/handersonc/gists{/gist_id}", "starred_url": "https://api.github.com/users/handersonc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/handersonc/subscriptions", "organizations_url": "https://api.github.com/users/handersonc/orgs", "repos_url": "https://api.github.com/users/handersonc/repos", "events_url": "https://api.github.com/users/handersonc/events{/privacy}", "received_events_url": "https://api.github.com/users/handersonc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953699, "node_id": "MDU6TGFiZWw4MDk1MzY5OQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-18T00:22:50Z", "updated_at": "2018-09-18T02:37:46Z", "closed_at": "2018-09-18T02:23:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI'm using flask-restful, webargs and marshmallow to build an API. \r\nAnd I'm getting this error in the response\r\n\r\n422 Unprocessable Entity\r\nUnprocessable Entity\r\nThe request was well-formed but was unable to be followed due to semantic errors.\r\n\r\nI have something like this:\r\n\r\n\r\n```\r\nclass DataSchema(MA.Schema):\r\n    language = fields.Str(required=True)\r\n\r\nclass MessageSchema(MA.Schema):\r\n   data = fields.Nested(DataSchema)\r\n\r\nclass ExampleSchema(MA.Schema):\r\n      message = fields.Nested(MessageSchema)\r\n\r\nclass BotResource(Resource):\r\n    @use_args(ExampleSchema())\r\n    def post(self, payload):\r\n          pass\r\n```\r\n\r\n\r\nIt seems that when i have nested fields and one of those fields has a required field i'm getting that error.\r\n\r\nthe ideal flow would be that if the language field is missing and this one is required the endpoint should returns that the language field is missing. But instead of that I'm getting the error. \r\n\r\n  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/273", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/273/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/273/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/273/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/273", "id": 350971423, "node_id": "MDU6SXNzdWUzNTA5NzE0MjM=", "number": 273, "title": "AioHTTPParser does not works with multiple `@use_args` at same handler", "user": {"login": "dnp1", "id": 614969, "node_id": "MDQ6VXNlcjYxNDk2OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/614969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnp1", "html_url": "https://github.com/dnp1", "followers_url": "https://api.github.com/users/dnp1/followers", "following_url": "https://api.github.com/users/dnp1/following{/other_user}", "gists_url": "https://api.github.com/users/dnp1/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnp1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnp1/subscriptions", "organizations_url": "https://api.github.com/users/dnp1/orgs", "repos_url": "https://api.github.com/users/dnp1/repos", "events_url": "https://api.github.com/users/dnp1/events{/privacy}", "received_events_url": "https://api.github.com/users/dnp1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-08-15T21:19:46Z", "updated_at": "2018-12-16T03:44:23Z", "closed_at": "2018-12-16T03:44:23Z", "author_association": "NONE", "active_lock_reason": null, "body": " According to the docs, we can use the decorator twice.\r\n\r\nhttps://webargs.readthedocs.io/en/latest/advanced.html#mixing-locations\r\nHowever, use `@use_args` decorator twice leads to an error when the first schema is valid:\r\n`assert isinstance(req, web.Request), \"Request argument not found for handler\"`\r\n`AssertionError: Request argument not found for handler`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/269", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/269/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/269/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/269/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/269", "id": 348931435, "node_id": "MDU6SXNzdWUzNDg5MzE0MzU=", "number": 269, "title": "Fix compatibility with marshmallow 3.0.0b13", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-08T23:53:00Z", "updated_at": "2018-08-19T21:38:11Z", "closed_at": "2018-08-19T21:38:11Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Tests are currently failing when marshmallow 3.0.0b13 is installed. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/268", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/268/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/268/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/268/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/268", "id": 348723829, "node_id": "MDU6SXNzdWUzNDg3MjM4Mjk=", "number": 268, "title": "Inconsistent behavior in passing request fields to Schema.load (many=True vs many=False)", "user": {"login": "tuukkamustonen", "id": 94327, "node_id": "MDQ6VXNlcjk0MzI3", "avatar_url": "https://avatars1.githubusercontent.com/u/94327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tuukkamustonen", "html_url": "https://github.com/tuukkamustonen", "followers_url": "https://api.github.com/users/tuukkamustonen/followers", "following_url": "https://api.github.com/users/tuukkamustonen/following{/other_user}", "gists_url": "https://api.github.com/users/tuukkamustonen/gists{/gist_id}", "starred_url": "https://api.github.com/users/tuukkamustonen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tuukkamustonen/subscriptions", "organizations_url": "https://api.github.com/users/tuukkamustonen/orgs", "repos_url": "https://api.github.com/users/tuukkamustonen/repos", "events_url": "https://api.github.com/users/tuukkamustonen/events{/privacy}", "received_events_url": "https://api.github.com/users/tuukkamustonen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-08-08T13:22:39Z", "updated_at": "2020-01-30T15:23:56Z", "closed_at": "2020-01-30T15:14:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With `4.0.0` (and marshmallow `3.0.0b13`):\r\n\r\n```python\r\nclass Sch(Schema):\r\n    foo = fields.Str()\r\n\r\nparser = FlaskParser()\r\n\r\nreq = Mock()\r\nreq.mimetype = 'application/json'\r\n\r\nreq.get_json = lambda *args, **kwargs: [{'extra': 1}]\r\nwith pytest.raises(UnprocessableEntity) as e:\r\n    parser.parse(Foo(many=True), req=req, locations=('json', ))\r\nassert e.value.exc.messages == {0: {'extra': ['Unknown field.']}}\r\n\r\nreq.get_json = lambda *args, **kwargs: {'extra': 1}\r\nparser.parse(Foo(), req=req, locations=('json', ))\r\n```\r\n\r\nSo the with `many=True` the extra key is actually passed to `Schema.load()` (which can then raise `ValidationError` because `unknown` defaults to `RAISE`) but with `many=False` it is passed onwards. I think it's confusing.\r\n\r\n#267 would fix this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/267", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/267/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/267/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/267/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/267", "id": 348703726, "node_id": "MDU6SXNzdWUzNDg3MDM3MjY=", "number": 267, "title": "Leave logic of deciding on extra args to schema", "user": {"login": "tuukkamustonen", "id": 94327, "node_id": "MDQ6VXNlcjk0MzI3", "avatar_url": "https://avatars1.githubusercontent.com/u/94327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tuukkamustonen", "html_url": "https://github.com/tuukkamustonen", "followers_url": "https://api.github.com/users/tuukkamustonen/followers", "following_url": "https://api.github.com/users/tuukkamustonen/following{/other_user}", "gists_url": "https://api.github.com/users/tuukkamustonen/gists{/gist_id}", "starred_url": "https://api.github.com/users/tuukkamustonen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tuukkamustonen/subscriptions", "organizations_url": "https://api.github.com/users/tuukkamustonen/orgs", "repos_url": "https://api.github.com/users/tuukkamustonen/repos", "events_url": "https://api.github.com/users/tuukkamustonen/events{/privacy}", "received_events_url": "https://api.github.com/users/tuukkamustonen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 922766584, "node_id": "MDU6TGFiZWw5MjI3NjY1ODQ=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/backwards%20incompatible", "name": "backwards incompatible", "color": "d93f0b", "default": false, "description": ""}, {"id": 152384790, "node_id": "MDU6TGFiZWwxNTIzODQ3OTA=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/5", "html_url": "https://github.com/marshmallow-code/webargs/milestone/5", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/5/labels", "id": 3923526, "node_id": "MDk6TWlsZXN0b25lMzkyMzUyNg==", "number": 5, "title": "6.0.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 12, "state": "closed", "created_at": "2018-12-25T21:23:59Z", "updated_at": "2020-02-29T14:35:36Z", "due_on": null, "closed_at": "2020-02-29T14:35:36Z"}, "comments": 20, "created_at": "2018-08-08T12:27:07Z", "updated_at": "2020-01-07T13:59:06Z", "closed_at": "2020-01-07T13:59:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Now that marshmallow 3.x is in beta and comes with configurable behavior on extra args, how about just including all fields in `Parser._parse_request()` and passing them on to  `Schema.load()`? It would be up to passed Schema to determine what to do with them.\r\n\r\nThe effect would be that:\r\n\r\n- With `RAISE`,  extra fields would be denied.\r\n- With `INCLUDE`, extra fields would be allowed and passed on.\r\n- With `EXCLUDE`, extra fields would be ignored.\r\n\r\nThis would allow something like:\r\n\r\n```python\r\n@use_args(HeaderSchema(unknown=EXCLUDE), locations=('headers', ))\r\n@use_args({'action': fields.Str()}, locations=('json',))  # default is RAISE\r\n```\r\n\r\nActually, I don't think this even needs marshmallow `3.x`. Why not just always pass all fields from `_parse_request()` to `Schema.load()`? On `2.x` you would need custom `@validates_schema` implementation in addition, but on `3.x` you would not.\r\n\r\nMaybe I'm missing something...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/266", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/266/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/266/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/266/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/266", "id": 348594930, "node_id": "MDU6SXNzdWUzNDg1OTQ5MzA=", "number": 266, "title": "Documentation site still refers to 3.0.1 as the latest", "user": {"login": "tuukkamustonen", "id": 94327, "node_id": "MDQ6VXNlcjk0MzI3", "avatar_url": "https://avatars1.githubusercontent.com/u/94327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tuukkamustonen", "html_url": "https://github.com/tuukkamustonen", "followers_url": "https://api.github.com/users/tuukkamustonen/followers", "following_url": "https://api.github.com/users/tuukkamustonen/following{/other_user}", "gists_url": "https://api.github.com/users/tuukkamustonen/gists{/gist_id}", "starred_url": "https://api.github.com/users/tuukkamustonen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tuukkamustonen/subscriptions", "organizations_url": "https://api.github.com/users/tuukkamustonen/orgs", "repos_url": "https://api.github.com/users/tuukkamustonen/repos", "events_url": "https://api.github.com/users/tuukkamustonen/events{/privacy}", "received_events_url": "https://api.github.com/users/tuukkamustonen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-08T06:42:20Z", "updated_at": "2018-08-08T14:05:56Z", "closed_at": "2018-08-08T14:05:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While 4.0.0 is already out.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/255", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/255/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/255/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/255/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/255", "id": 345263034, "node_id": "MDU6SXNzdWUzNDUyNjMwMzQ=", "number": 255, "title": "4.0.0 not returning JSON error", "user": {"login": "csheppard", "id": 1591580, "node_id": "MDQ6VXNlcjE1OTE1ODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1591580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csheppard", "html_url": "https://github.com/csheppard", "followers_url": "https://api.github.com/users/csheppard/followers", "following_url": "https://api.github.com/users/csheppard/following{/other_user}", "gists_url": "https://api.github.com/users/csheppard/gists{/gist_id}", "starred_url": "https://api.github.com/users/csheppard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csheppard/subscriptions", "organizations_url": "https://api.github.com/users/csheppard/orgs", "repos_url": "https://api.github.com/users/csheppard/repos", "events_url": "https://api.github.com/users/csheppard/events{/privacy}", "received_events_url": "https://api.github.com/users/csheppard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-27T15:09:40Z", "updated_at": "2018-08-28T02:49:28Z", "closed_at": "2018-08-28T02:49:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, I'm using marshmallow 3.0.0b12 and Flask-RESTful.\r\n\r\nAfter upgrading to webargs 4.0.0, Flask will error with a 422 but produce the default HTML error message:\r\n\r\n**webargs 4.0.0**\r\n```html\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\r\n<title>422 Unprocessable Entity</title>\r\n<h1>Unprocessable Entity</h1>\r\n<p>The request was well-formed but was unable to be followed due to semantic errors.</p>\r\n```\r\n\r\n**webargs 3.0.2**\r\n```json\r\n{\r\n    \"messages\": {\r\n        \"email\": [\r\n            \"Not a valid email address.\"\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\n```python\r\nfrom marshmallow import Schema, fields\r\n\r\nclass SomeSchema(Schema):\r\n    email = fields.Email(\r\n        missing=None,\r\n        load_only=True\r\n    )\r\n\r\n@use_args(UserSchema())\r\ndef some_route(args):\r\n    pass\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/252", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/252/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/252/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/252/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/252", "id": 342260916, "node_id": "MDU6SXNzdWUzNDIyNjA5MTY=", "number": 252, "title": "Deleted fields are always recreated with use_kwargs", "user": {"login": "piroux", "id": 438492, "node_id": "MDQ6VXNlcjQzODQ5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/438492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/piroux", "html_url": "https://github.com/piroux", "followers_url": "https://api.github.com/users/piroux/followers", "following_url": "https://api.github.com/users/piroux/following{/other_user}", "gists_url": "https://api.github.com/users/piroux/gists{/gist_id}", "starred_url": "https://api.github.com/users/piroux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/piroux/subscriptions", "organizations_url": "https://api.github.com/users/piroux/orgs", "repos_url": "https://api.github.com/users/piroux/repos", "events_url": "https://api.github.com/users/piroux/events{/privacy}", "received_events_url": "https://api.github.com/users/piroux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/4", "html_url": "https://github.com/marshmallow-code/webargs/milestone/4", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/milestones/4/labels", "id": 3922466, "node_id": "MDk6TWlsZXN0b25lMzkyMjQ2Ng==", "number": 4, "title": "4.2.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2018-12-24T14:34:24Z", "updated_at": "2018-12-28T21:54:52Z", "due_on": null, "closed_at": "2018-12-28T21:54:52Z"}, "comments": 1, "created_at": "2018-07-18T10:03:07Z", "updated_at": "2018-12-25T21:23:16Z", "closed_at": "2018-12-25T21:01:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "If one tries to `load` a json object with Marshmallow so that it validates a field but one does not wish to have it in the final loaded object, one can have it removed using a method decorated with `post_load` so that the field is validated but not exported:\r\n\r\n```python\r\n     class GeojsonFeatureCollection(Schema):\r\n         geotype = fields.String(required=True, location='json', load_from='type',\r\n                                 validate=validate.OneOf(choices=['FeatureCollection']))\r\n         features = fields.List(fields.Dict())\r\n\r\n         @post_load\r\n         def remove_geotype(self, data):\r\n             data.pop('geotype')\r\n             return data\r\n\r\n         class Meta:\r\n             strict = True\r\n```\r\n\r\nIt works well with Marshmallow.\r\n\r\nHowever, it is not working with webargs. For instance here, it will recreate the geotype member in the dictionary with  the `<marshmallow.missing>` value. Especially, the use of the `use_kwargs` decorator in the view method will force webargs to recreate all the missing fields as one can see here in the parser with the call to the `fill_in_missing_args` function: https://github.com/sloria/webargs/blob/a8640995dbe423d30248a26474f9fb12bad997f6/webargs/core.py#L399-L401\r\n\r\nIndeed, the `force_all` argument of the `parse` method is currently always equal to `True` when one uses the `use_kwargs` decorator: https://github.com/sloria/webargs/blob/a8640995dbe423d30248a26474f9fb12bad997f6/webargs/core.py#L464-L475\r\n\r\nI think one shoud be able retain in webargs the behaviour that Marshmallow provides so that the deleted fields would not be recreated by default if a flag is passed.\r\n\r\nA simple solution would be to export the `force_all` variable as a parameter, maybe with a more explicit name, like `force_recreate_missing_fields` to the `use_args` method so that  one could use it from `use_kwargs`.\r\n\r\nMoreover, I am wondering why was it required to recreate all the missing fields if the arguments have to be inserted as keyword arguments ? Was it to avoid raising an error in the views methods in case one argument was missing ? \r\nIf one adds this parameter offering more control over the missing fields, I think it would make sense now not to recreate the missing fields by default, right ? (have `force_recreate_missing_fields=False in `use_args` as parameter)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/251", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/251/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/251/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/251/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/251", "id": 341999876, "node_id": "MDU6SXNzdWUzNDE5OTk4NzY=", "number": 251, "title": "Advice wanted: returning args in response.", "user": {"login": "rclough", "id": 186589, "node_id": "MDQ6VXNlcjE4NjU4OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/186589?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rclough", "html_url": "https://github.com/rclough", "followers_url": "https://api.github.com/users/rclough/followers", "following_url": "https://api.github.com/users/rclough/following{/other_user}", "gists_url": "https://api.github.com/users/rclough/gists{/gist_id}", "starred_url": "https://api.github.com/users/rclough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rclough/subscriptions", "organizations_url": "https://api.github.com/users/rclough/orgs", "repos_url": "https://api.github.com/users/rclough/repos", "events_url": "https://api.github.com/users/rclough/events{/privacy}", "received_events_url": "https://api.github.com/users/rclough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-17T16:46:39Z", "updated_at": "2018-07-17T21:58:18Z", "closed_at": "2018-07-17T21:52:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI'm using webargs for a simple GET/POST endpoint in flask. I'm using webargs as a decorator to validate the input which can accept arguments both from URL params and JSON post.\r\n\r\nAs part of my API responses, I want to be able to return all of the request params on either a succesful or failed request, which can help with debugging, context management, etc. To do this, I'm using `parser.parse()` which sources the arguments from the various locations, which is why I'm using webargs in the first place.\r\n\r\n```Python\r\n@app.route('/info/<int:obj_id>', methods = ['GET'])\r\n@app.route('/info', methods = ['GET', 'POST'])\r\n@use_args(nn_args, as_kwargs=True, locations=('query', 'json', 'view_args'))\r\ndef info(obj_id, num_results, search_factor, context):\r\n    result = manager.get_info(obj_id, num_results, search_factor)\r\n    \r\n    results = api_response().dump({\r\n        \"results\": result.data,\r\n        \"success\": True,\r\n        \"ts\": dt.now(),\r\n        \"request\": parser.parse(nn_args, locations=('query', 'json', 'view_args'))\r\n    })\r\n    return jsonify(results.data)\r\n```\r\n\r\nUnfortunately, this becomes an issue when I need to form an error response for a `ValidationError` where one of the request params doesnt validate. I'm handling 422 error codes like so:\r\n\r\n```Python\r\n@app.errorhandler(422)\r\ndef handle_unprocessable_entity(err):\r\n    exc = getattr(err, 'exc')\r\n    if exc:\r\n        messages = exc.messages\r\n    else:\r\n        messages = ['Invalid request']\r\n    return jsonify({\r\n        'error': messages,\r\n        \"success\": False,\r\n        \"ts\": dt.now(),\r\n        'request:': parser.parse(nn_args, locations=('query', 'json', 'view_args'))\r\n    }), 422\r\n```\r\n\r\nHowever, when I call `parser.parse()` this time, it will just throw the 422 error again and again due to the validation errors.\r\n\r\nAt this point I'm pretty sure I'm not using the library correclty for what I want, so my questions:\r\n\r\n1. Is there a way to disable validation for the purposes of returning the actual arguments made in the request when an error happens?\r\n2. Should I be using a different function to get all of the arguments, potentially one without declaring a schema/validation (which would solve my need to explicitly declare a \"context\" object in the schema)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/237", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/237/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/237/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/237/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/237", "id": 334032906, "node_id": "MDU6SXNzdWUzMzQwMzI5MDY=", "number": 237, "title": "fields validation function by-passed ", "user": {"login": "yasirz", "id": 22834742, "node_id": "MDQ6VXNlcjIyODM0NzQy", "avatar_url": "https://avatars1.githubusercontent.com/u/22834742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yasirz", "html_url": "https://github.com/yasirz", "followers_url": "https://api.github.com/users/yasirz/followers", "following_url": "https://api.github.com/users/yasirz/following{/other_user}", "gists_url": "https://api.github.com/users/yasirz/gists{/gist_id}", "starred_url": "https://api.github.com/users/yasirz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yasirz/subscriptions", "organizations_url": "https://api.github.com/users/yasirz/orgs", "repos_url": "https://api.github.com/users/yasirz/repos", "events_url": "https://api.github.com/users/yasirz/events{/privacy}", "received_events_url": "https://api.github.com/users/yasirz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-20T11:19:52Z", "updated_at": "2018-09-05T11:55:30Z", "closed_at": "2018-09-05T11:55:30Z", "author_association": "NONE", "active_lock_reason": null, "body": " I have encountered an issue in fields of webargs such as **fields.Number()** and **fields.Str()**, when passing **tabs** to the **Str** and **00** in the start to the **Number**, it bypass the validate function of that field even if it is a custom function.\r\n\r\nhere  is an example params and output error:\r\n**Input:**\r\n```json\r\n \"number\": \"+3553637\t007\"\r\n```\r\n\r\n**Output error:**\r\n```json\r\n   { \"messages\": { \"user_id\": [ \"Missing data for required field.\" ] } }\r\n```\r\n\r\nHere you can see, invalid values are given to the **number** field where as error was given about the **user_id** field.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/236", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/236/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/236/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/236/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/236", "id": 333901935, "node_id": "MDU6SXNzdWUzMzM5MDE5MzU=", "number": 236, "title": "How can documentation generators introspect a webargs field?", "user": {"login": "remeika", "id": 4956098, "node_id": "MDQ6VXNlcjQ5NTYwOTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/4956098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/remeika", "html_url": "https://github.com/remeika", "followers_url": "https://api.github.com/users/remeika/followers", "following_url": "https://api.github.com/users/remeika/following{/other_user}", "gists_url": "https://api.github.com/users/remeika/gists{/gist_id}", "starred_url": "https://api.github.com/users/remeika/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/remeika/subscriptions", "organizations_url": "https://api.github.com/users/remeika/orgs", "repos_url": "https://api.github.com/users/remeika/repos", "events_url": "https://api.github.com/users/remeika/events{/privacy}", "received_events_url": "https://api.github.com/users/remeika/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953699, "node_id": "MDU6TGFiZWw4MDk1MzY5OQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-20T02:25:50Z", "updated_at": "2018-06-20T13:15:41Z", "closed_at": "2018-06-20T13:09:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "The introductory documentation to webargs lists one framework feature as:\r\n\r\n> Automatic documentation. The metadata that webargs provides can serve as an aid for automatically generating API documentation.\r\n\r\nAny pointers on where to access that metadata?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/235", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/235/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/235/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/235", "id": 333674629, "node_id": "MDU6SXNzdWUzMzM2NzQ2Mjk=", "number": 235, "title": "Feature: Accept the jQuery default serialization scheme for arrays", "user": {"login": "remeika", "id": 4956098, "node_id": "MDQ6VXNlcjQ5NTYwOTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/4956098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/remeika", "html_url": "https://github.com/remeika", "followers_url": "https://api.github.com/users/remeika/followers", "following_url": "https://api.github.com/users/remeika/following{/other_user}", "gists_url": "https://api.github.com/users/remeika/gists{/gist_id}", "starred_url": "https://api.github.com/users/remeika/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/remeika/subscriptions", "organizations_url": "https://api.github.com/users/remeika/orgs", "repos_url": "https://api.github.com/users/remeika/repos", "events_url": "https://api.github.com/users/remeika/events{/privacy}", "received_events_url": "https://api.github.com/users/remeika/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-19T13:35:09Z", "updated_at": "2018-12-16T03:45:41Z", "closed_at": "2018-12-16T03:45:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "When serializing an array in to a query string, jQuery has the following behavior:\r\n\r\n```\r\nalert($.param( {b: [ 1, 2, 3 ]} ));\r\n// alerts \"b[]=1&b[]=2&b[]=3\"\r\n```\r\n\r\n[As of jQuery 1.4, this behavior is the default](https://api.jquery.com/jquery.param/).\r\n\r\nWebargs should support deserializing fields of type List from this format.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/234", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/234/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/234/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/234", "id": 331068434, "node_id": "MDU6SXNzdWUzMzEwNjg0MzQ=", "number": 234, "title": "Automatically trim leading/trailing whitespace from argument values", "user": {"login": "ThiefMaster", "id": 179599, "node_id": "MDQ6VXNlcjE3OTU5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThiefMaster", "html_url": "https://github.com/ThiefMaster", "followers_url": "https://api.github.com/users/ThiefMaster/followers", "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}", "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions", "organizations_url": "https://api.github.com/users/ThiefMaster/orgs", "repos_url": "https://api.github.com/users/ThiefMaster/repos", "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}", "received_events_url": "https://api.github.com/users/ThiefMaster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-11T07:09:10Z", "updated_at": "2020-06-15T21:54:53Z", "closed_at": "2018-12-28T21:27:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Does webargs provide any clean way to do this? I guess leading/trailing whitespace are almost never something you want (especially when having required fields that must not be empty)...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/233", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/233/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/233/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/233/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/233", "id": 329880254, "node_id": "MDU6SXNzdWUzMjk4ODAyNTQ=", "number": 233, "title": "Flask-webargs both url path parameter and query parameter", "user": {"login": "uMtMu", "id": 1577152, "node_id": "MDQ6VXNlcjE1NzcxNTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1577152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uMtMu", "html_url": "https://github.com/uMtMu", "followers_url": "https://api.github.com/users/uMtMu/followers", "following_url": "https://api.github.com/users/uMtMu/following{/other_user}", "gists_url": "https://api.github.com/users/uMtMu/gists{/gist_id}", "starred_url": "https://api.github.com/users/uMtMu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uMtMu/subscriptions", "organizations_url": "https://api.github.com/users/uMtMu/orgs", "repos_url": "https://api.github.com/users/uMtMu/repos", "events_url": "https://api.github.com/users/uMtMu/events{/privacy}", "received_events_url": "https://api.github.com/users/uMtMu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953699, "node_id": "MDU6TGFiZWw4MDk1MzY5OQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-06T13:59:01Z", "updated_at": "2018-06-07T01:17:19Z", "closed_at": "2018-06-07T01:17:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, i have a problem about accessing request parameter. I'm using\r\n\t  flask and webargs. I can get\r\n\t  http://localhost:5000/task/12?name=mysql id=12 and name=mysql with\r\n\t  app.route but i couldn't do it with app.add_url_rule.\r\n\t  https://gist.github.com/uMtMu/be0682823140e2b1418d6795203477e0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/230", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/230/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/230/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/230", "id": 329443860, "node_id": "MDU6SXNzdWUzMjk0NDM4NjA=", "number": 230, "title": "Docs: Add example for parsing files", "user": {"login": "Kamforka", "id": 16663089, "node_id": "MDQ6VXNlcjE2NjYzMDg5", "avatar_url": "https://avatars2.githubusercontent.com/u/16663089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kamforka", "html_url": "https://github.com/Kamforka", "followers_url": "https://api.github.com/users/Kamforka/followers", "following_url": "https://api.github.com/users/Kamforka/following{/other_user}", "gists_url": "https://api.github.com/users/Kamforka/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kamforka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kamforka/subscriptions", "organizations_url": "https://api.github.com/users/Kamforka/orgs", "repos_url": "https://api.github.com/users/Kamforka/repos", "events_url": "https://api.github.com/users/Kamforka/events{/privacy}", "received_events_url": "https://api.github.com/users/Kamforka/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 152384910, "node_id": "MDU6TGFiZWwxNTIzODQ5MTA=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/docs", "name": "docs", "color": "fbca04", "default": false, "description": null}, {"id": 152384790, "node_id": "MDU6TGFiZWwxNTIzODQ3OTA=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-06-05T12:56:30Z", "updated_at": "2019-01-06T10:38:50Z", "closed_at": "2019-01-06T10:38:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey guys,\r\n\r\nI've been consulting the documentation and the web for a proper solution to parse file arguments from a post request using `webargs`, but still couldn't find an answer to my question.\r\n\r\nThe [docs says](http://webargs.readthedocs.io/en/latest/quickstart.html#request-locations) you can use the `files` location during parsing but mentions no straightforward solution on which field to use for files? \r\n\r\nCan you include an example in the docs for this one, if it's possible to do at all?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/229", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/229/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/229/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/229", "id": 326432334, "node_id": "MDU6SXNzdWUzMjY0MzIzMzQ=", "number": 229, "title": "500 when content-type is 'application/json' and body is None", "user": {"login": "explosic4", "id": 8946548, "node_id": "MDQ6VXNlcjg5NDY1NDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8946548?v=4", "gravatar_id": "", "url": "https://api.github.com/users/explosic4", "html_url": "https://github.com/explosic4", "followers_url": "https://api.github.com/users/explosic4/followers", "following_url": "https://api.github.com/users/explosic4/following{/other_user}", "gists_url": "https://api.github.com/users/explosic4/gists{/gist_id}", "starred_url": "https://api.github.com/users/explosic4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/explosic4/subscriptions", "organizations_url": "https://api.github.com/users/explosic4/orgs", "repos_url": "https://api.github.com/users/explosic4/repos", "events_url": "https://api.github.com/users/explosic4/events{/privacy}", "received_events_url": "https://api.github.com/users/explosic4/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953695, "node_id": "MDU6TGFiZWw4MDk1MzY5NQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/bug", "name": "bug", "color": "b60205", "default": true, "description": ""}, {"id": 152384790, "node_id": "MDU6TGFiZWwxNTIzODQ3OTA=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-25T08:42:57Z", "updated_at": "2018-10-25T22:40:49Z", "closed_at": "2018-10-25T22:20:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using webargs with aiohttp.\r\nWhen the incoming request has header `Content-Type: application/json` and has no body, the server returns 500 error.\r\nBelow is the error log.\r\n```\r\n[2018-05-25 16:38:46,436] ERROR Error handling request\r\nTraceback (most recent call last):\r\n  File \"/Users/explosic4/anaconda3/envs/qb/lib/python3.6/site-packages/aiohttp/web_protocol.py\", line 381, in start\r\n    resp = await self._request_handler(request)\r\n  File \"/Users/explosic4/anaconda3/envs/qb/lib/python3.6/site-packages/aiohttp/web_app.py\", line 322, in _handle\r\n    resp = await handler(request)\r\n  File \"/Users/explosic4/anaconda3/envs/qb/lib/python3.6/site-packages/aiohttp/web_middlewares.py\", line 88, in impl\r\n    return await handler(request)\r\n  File \"/Users/explosic4/qb/ot-rpc/warehouse/utils.py\", line 76, in handler_middleware\r\n    args = await parser.parse(args, request)\r\n  File \"/Users/explosic4/anaconda3/envs/qb/lib/python3.6/site-packages/webargs/async.py\", line 71, in parse\r\n    parsed = yield from self._parse_request(schema=schema, req=req, locations=locations)\r\n  File \"/Users/explosic4/anaconda3/envs/qb/lib/python3.6/site-packages/webargs/async.py\", line 45, in _parse_request\r\n    parsed_value = yield from self.parse_arg(argname, field_obj, req, locations)\r\n  File \"/Users/explosic4/anaconda3/envs/qb/lib/python3.6/site-packages/webargs/async.py\", line 102, in parse_arg\r\n    value = yield from self._get_value(name, field, req=req, location=location)\r\n  File \"/Users/explosic4/anaconda3/envs/qb/lib/python3.6/site-packages/webargs/async.py\", line 119, in _get_value\r\n    value = yield from function(req, name, argobj)\r\n  File \"/Users/explosic4/anaconda3/envs/qb/lib/python3.6/site-packages/webargs/aiohttpparser.py\", line 102, in parse_json\r\n    self._cache['json'] = json_data = yield from req.json()\r\n  File \"/Users/explosic4/anaconda3/envs/qb/lib/python3.6/site-packages/aiohttp/web_request.py\", line 537, in json\r\n    return loads(body)\r\n  File \"/Users/explosic4/anaconda3/envs/qb/lib/python3.6/json/__init__.py\", line 354, in loads\r\n    return _default_decoder.decode(s)\r\n  File \"/Users/explosic4/anaconda3/envs/qb/lib/python3.6/json/decoder.py\", line 339, in decode\r\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n  File \"/Users/explosic4/anaconda3/envs/qb/lib/python3.6/json/decoder.py\", line 357, in raw_decode\r\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\r\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/227", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/227/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/227/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/227/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/227", "id": 324368258, "node_id": "MDU6SXNzdWUzMjQzNjgyNTg=", "number": 227, "title": "How to receive id  from the url,  and the other data from json", "user": {"login": "reem-codes", "id": 19150401, "node_id": "MDQ6VXNlcjE5MTUwNDAx", "avatar_url": "https://avatars0.githubusercontent.com/u/19150401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reem-codes", "html_url": "https://github.com/reem-codes", "followers_url": "https://api.github.com/users/reem-codes/followers", "following_url": "https://api.github.com/users/reem-codes/following{/other_user}", "gists_url": "https://api.github.com/users/reem-codes/gists{/gist_id}", "starred_url": "https://api.github.com/users/reem-codes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reem-codes/subscriptions", "organizations_url": "https://api.github.com/users/reem-codes/orgs", "repos_url": "https://api.github.com/users/reem-codes/repos", "events_url": "https://api.github.com/users/reem-codes/events{/privacy}", "received_events_url": "https://api.github.com/users/reem-codes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-05-18T11:09:58Z", "updated_at": "2018-12-29T02:40:34Z", "closed_at": "2018-12-29T02:40:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello\r\n\r\nI have a UserView class like this:\r\n```python\r\nclass UserView(FlaskView):\r\n    trailing_slash = False\r\n    model = User\r\n    schema = user_schema\r\n\r\n    @use_kwargs(schema.fields)\r\n    def post(self, **kwargs):\r\n        try:\r\n            entity = self.model()\r\n\r\n            for d in kwargs:\r\n                if kwargs[d] is not missing:\r\n                    entity.__setattr__(d, kwargs[d])\r\n\r\n            db.session.add(entity)\r\n            db.session.commit()\r\n            o = self.schema.dump(entity).data\r\n            return jsonify({'{}'.format(self.model.__table__.name): o})\r\n\r\n        except IntegrityError:\r\n            return jsonify({'message': '{} exist in the database. choose another id'\r\n                   .format(self.model.__table__.name)}), 409\r\n\r\n\r\n    @use_kwargs(schema.fields)\r\n    def put(self, id, **kwargs):\r\n        entity = self.model.query.filter_by(id=id).first_or_404()\r\n\r\n        for d in kwargs:\r\n            if kwargs[d] is not missing:\r\n                entity.__setattr__(d, kwargs[d])\r\n\r\n        db.session.commit()\r\n        o = self.schema.dump(entity).data\r\n        return jsonify({'{}'.format(self.model.__table__.name): o})\r\n\r\nUserView.register(app)\r\n```\r\n\r\nhow to make it so the id is taken from the url, and all other fields to be updated from json? my implementation right now force me to specify the id in my json. and even if the id specified was different that the url the one taken in calculation is the one in json body", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/225", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/225/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/225/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/225/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/225", "id": 320852437, "node_id": "MDU6SXNzdWUzMjA4NTI0Mzc=", "number": 225, "title": "3.0 missing in changelog on RTD", "user": {"login": "ThiefMaster", "id": 179599, "node_id": "MDQ6VXNlcjE3OTU5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThiefMaster", "html_url": "https://github.com/ThiefMaster", "followers_url": "https://api.github.com/users/ThiefMaster/followers", "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}", "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions", "organizations_url": "https://api.github.com/users/ThiefMaster/orgs", "repos_url": "https://api.github.com/users/ThiefMaster/repos", "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}", "received_events_url": "https://api.github.com/users/ThiefMaster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-07T15:38:25Z", "updated_at": "2018-05-08T01:46:45Z", "closed_at": "2018-05-08T01:46:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Latest version on http://webargs.readthedocs.io/en/latest/changelog.html is 2.1.0 because the RTD build fails: https://readthedocs.org/projects/webargs/builds/7149092/", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/219", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/219/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/219/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/219/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/219", "id": 318741353, "node_id": "MDU6SXNzdWUzMTg3NDEzNTM=", "number": 219, "title": "1 test failing with Flask==1.0", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-29T19:10:42Z", "updated_at": "2018-04-30T07:28:19Z", "closed_at": "2018-04-30T07:28:19Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In `TestFlaskParser.test_user_validation_error_with_status_code`\r\n\r\n```\r\n    def __call__(self, code, *args, **kwargs):\r\n        if not args and not kwargs and not isinstance(code, integer_types):\r\n            raise HTTPException(response=code)\r\n        if code not in self.mapping:\r\n            raise LookupError('no exception for %r' % code)\r\n>       raise self.mapping[code](*args, **kwargs)\r\nE       werkzeug.exceptions.BadRequest: 400 Bad Request: The browser (or proxy) sent a request that this server could not understand.\r\n```\r\n\r\nI don't understand all the underlying details, but this is related to https://github.com/pallets/flask/issues/2735, which is fixed by https://github.com/pallets/flask/pull/2739 due to be released in Flask 1.0.1. (I tested the Flask version with the fix and the tests pass.)\r\n\r\nWhen removing `DEBUG` mode in `flask_app.py`, all tests pass.\r\n\r\n```python\r\nclass TestAppConfig:\r\n    TESTING = True\r\n    # DEBUG = True\r\n```\r\n\r\nAny reason to use `DEBUG` mode when testing?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/218", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/218/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/218/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/218/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/218", "id": 318606865, "node_id": "MDU6SXNzdWUzMTg2MDY4NjU=", "number": 218, "title": "allow_none doesn't work,  need a default none argment.", "user": {"login": "eromoe", "id": 3938751, "node_id": "MDQ6VXNlcjM5Mzg3NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/3938751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eromoe", "html_url": "https://github.com/eromoe", "followers_url": "https://api.github.com/users/eromoe/followers", "following_url": "https://api.github.com/users/eromoe/following{/other_user}", "gists_url": "https://api.github.com/users/eromoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/eromoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eromoe/subscriptions", "organizations_url": "https://api.github.com/users/eromoe/orgs", "repos_url": "https://api.github.com/users/eromoe/repos", "events_url": "https://api.github.com/users/eromoe/events{/privacy}", "received_events_url": "https://api.github.com/users/eromoe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-28T06:50:08Z", "updated_at": "2018-05-02T01:21:21Z", "closed_at": "2018-05-02T01:21:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "For example: \r\n\r\ncode:\r\n```\r\n@use_args({'corpus_id': fields.Str(allow_none =True) })\r\ndef test(args):\r\n    print('corpus_id', args['corpus_id'])\r\n```\r\n\r\n`GET  localhost:5000/test` would result  `KeyError: 'corpus_id'` .\r\n\r\nI want \r\n\r\n1.  `GET  localhost:5000/test`   get  `args['corpus_id']==None`\r\n1.  `GET  localhost:5000/test?corpus_id=1`   get  `args['corpus_id']==1`\r\n\r\nI tried `fields.Str(default=None)` and `fields.Str(allow_none=True)` , both not work\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/217", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/217/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/217/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/217/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/217", "id": 318460919, "node_id": "MDU6SXNzdWUzMTg0NjA5MTk=", "number": 217, "title": "Incompatiblity between falcon hooks and webargs (falcon >= 1.4.0)", "user": {"login": "ignacioHermosilla", "id": 4218540, "node_id": "MDQ6VXNlcjQyMTg1NDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4218540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ignacioHermosilla", "html_url": "https://github.com/ignacioHermosilla", "followers_url": "https://api.github.com/users/ignacioHermosilla/followers", "following_url": "https://api.github.com/users/ignacioHermosilla/following{/other_user}", "gists_url": "https://api.github.com/users/ignacioHermosilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/ignacioHermosilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ignacioHermosilla/subscriptions", "organizations_url": "https://api.github.com/users/ignacioHermosilla/orgs", "repos_url": "https://api.github.com/users/ignacioHermosilla/repos", "events_url": "https://api.github.com/users/ignacioHermosilla/events{/privacy}", "received_events_url": "https://api.github.com/users/ignacioHermosilla/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80953695, "node_id": "MDU6TGFiZWw4MDk1MzY5NQ==", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/bug", "name": "bug", "color": "b60205", "default": true, "description": ""}, {"id": 152384790, "node_id": "MDU6TGFiZWwxNTIzODQ3OTA=", "url": "https://api.github.com/repos/marshmallow-code/webargs/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-27T15:50:57Z", "updated_at": "2018-12-28T21:22:37Z", "closed_at": "2018-12-28T21:22:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Falcon 1.4** changed the implementation of hooks and now this is non-compatible with **Webargs**, here a sample that works only with Falcon < 1.4.0.\r\n\r\n```\r\nimport falcon\r\nfrom webargs import fields\r\nfrom webargs.falconparser import use_args\r\n\r\ndef fake_validator(req, resp, resource, params):\r\n    pass\r\n\r\nclass BlogResource(object):\r\n    request_args = {\r\n        'title': fields.Str(required=True)\r\n    }\r\n\r\n    @falcon.before(fake_validator)\r\n    @use_args({'title': fields.Str(required=True)})\r\n    def on_post(self, req, resp, args, post_id):\r\n        content = args['title']\r\n        resp.media = {'content': content}\r\n\r\napi = application = falcon.API()\r\napi.add_route('/blogs/{post_id}', BlogResource())\r\n```\r\n\r\nMy environment:\r\n\r\nfalcon==1.4.1\r\nwebargs==2.1.0\r\nPython 2.7.11\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/216", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/216/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/216/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/216/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/216", "id": 317697427, "node_id": "MDU6SXNzdWUzMTc2OTc0Mjc=", "number": 216, "title": "Dead code in core.py?", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-25T16:13:29Z", "updated_at": "2018-05-04T11:50:33Z", "closed_at": "2018-05-04T11:50:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I just noticed what seems to be dead code.\r\n\r\n1/ Unless I'm mistaken, the `instance` and `kwargs` attributes are both untested and unused in the code.\r\n\r\nhttps://github.com/sloria/webargs/blob/dev/webargs/core.py#L87\r\n\r\n```python\r\n    def argmap2schema(argmap, instance=False, **kwargs):\r\n```\r\n\r\n2/ In `load`, `argmap` is always a schema instance due to the call to `_get_schema` in `parse`, so the test is useless.\r\n\r\n```python\r\n    def load(self, data, argmap):\r\n        if isinstance(argmap, ma.Schema):\r\n            schema = argmap\r\n        else:\r\n            schema = argmap2schema(argmap)()\r\n```\r\n\r\nIn both cases, all tests pass when removing suspected dead code.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/206", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/206/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/206/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/206/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/206", "id": 302785428, "node_id": "MDU6SXNzdWUzMDI3ODU0Mjg=", "number": 206, "title": "Automatic documentation", "user": {"login": "AnakTeka", "id": 3157407, "node_id": "MDQ6VXNlcjMxNTc0MDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3157407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AnakTeka", "html_url": "https://github.com/AnakTeka", "followers_url": "https://api.github.com/users/AnakTeka/followers", "following_url": "https://api.github.com/users/AnakTeka/following{/other_user}", "gists_url": "https://api.github.com/users/AnakTeka/gists{/gist_id}", "starred_url": "https://api.github.com/users/AnakTeka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AnakTeka/subscriptions", "organizations_url": "https://api.github.com/users/AnakTeka/orgs", "repos_url": "https://api.github.com/users/AnakTeka/repos", "events_url": "https://api.github.com/users/AnakTeka/events{/privacy}", "received_events_url": "https://api.github.com/users/AnakTeka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-06T17:04:54Z", "updated_at": "2018-03-07T08:09:39Z", "closed_at": "2018-03-06T23:36:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "It stated in website that \r\n\r\n> Automatic documentation. The metadata that webargs provides can serve as an aid for automatically generating API documentation.\r\n\r\nHow do I use the automatic documentation? I'm using Falcon", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/webargs/issues/204", "repository_url": "https://api.github.com/repos/marshmallow-code/webargs", "labels_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/204/comments", "events_url": "https://api.github.com/repos/marshmallow-code/webargs/issues/204/events", "html_url": "https://github.com/marshmallow-code/webargs/issues/204", "id": 301356073, "node_id": "MDU6SXNzdWUzMDEzNTYwNzM=", "number": 204, "title": "Is Parser cached ?", "user": {"login": "erwinyusrizal", "id": 3752374, "node_id": "MDQ6VXNlcjM3NTIzNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3752374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erwinyusrizal", "html_url": "https://github.com/erwinyusrizal", "followers_url": "https://api.github.com/users/erwinyusrizal/followers", "following_url": "https://api.github.com/users/erwinyusrizal/following{/other_user}", "gists_url": "https://api.github.com/users/erwinyusrizal/gists{/gist_id}", "starred_url": "https://api.github.com/users/erwinyusrizal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erwinyusrizal/subscriptions", "organizations_url": "https://api.github.com/users/erwinyusrizal/orgs", "repos_url": "https://api.github.com/users/erwinyusrizal/repos", "events_url": "https://api.github.com/users/erwinyusrizal/events{/privacy}", "received_events_url": "https://api.github.com/users/erwinyusrizal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-01T10:40:49Z", "updated_at": "2018-03-01T11:23:12Z", "closed_at": "2018-03-01T11:23:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi I have an issue using the parser with locations=['files'], it seems parser has cached? bcos everytime I upload new file it works, but when I try to upload with the same file it doesnt work\r\n\r\n```\r\nargs = {'image': fields.Field()}\r\ndata = parser.parse(args, locations=['files'])\r\n```\r\n\r\ndata will always return empty dict, any idea ?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}]}