{"total_count": 127, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/211", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/211/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/211/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/211/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/211", "id": 663864367, "node_id": "MDU6SXNzdWU2NjM4NjQzNjc=", "number": 211, "title": "User last_login is not updated on token auth", "user": {"login": "Shannanigans", "id": 15245035, "node_id": "MDQ6VXNlcjE1MjQ1MDM1", "avatar_url": "https://avatars2.githubusercontent.com/u/15245035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Shannanigans", "html_url": "https://github.com/Shannanigans", "followers_url": "https://api.github.com/users/Shannanigans/followers", "following_url": "https://api.github.com/users/Shannanigans/following{/other_user}", "gists_url": "https://api.github.com/users/Shannanigans/gists{/gist_id}", "starred_url": "https://api.github.com/users/Shannanigans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Shannanigans/subscriptions", "organizations_url": "https://api.github.com/users/Shannanigans/orgs", "repos_url": "https://api.github.com/users/Shannanigans/repos", "events_url": "https://api.github.com/users/Shannanigans/events{/privacy}", "received_events_url": "https://api.github.com/users/Shannanigans/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-22T15:46:49Z", "updated_at": "2020-08-17T08:40:50Z", "closed_at": "2020-08-02T03:50:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I might have missed something but it appears to me that the user field 'last_login' is not updated by jwt authentication.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/209", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/209/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/209/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/209/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/209", "id": 644229333, "node_id": "MDU6SXNzdWU2NDQyMjkzMzM=", "number": 209, "title": "Use Email Authentication Method Instead of Username", "user": {"login": "atticuslin", "id": 8561497, "node_id": "MDQ6VXNlcjg1NjE0OTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/8561497?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atticuslin", "html_url": "https://github.com/atticuslin", "followers_url": "https://api.github.com/users/atticuslin/followers", "following_url": "https://api.github.com/users/atticuslin/following{/other_user}", "gists_url": "https://api.github.com/users/atticuslin/gists{/gist_id}", "starred_url": "https://api.github.com/users/atticuslin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atticuslin/subscriptions", "organizations_url": "https://api.github.com/users/atticuslin/orgs", "repos_url": "https://api.github.com/users/atticuslin/repos", "events_url": "https://api.github.com/users/atticuslin/events{/privacy}", "received_events_url": "https://api.github.com/users/atticuslin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-24T00:19:52Z", "updated_at": "2020-08-02T02:36:58Z", "closed_at": "2020-08-02T02:36:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI am trying to modify my login page such that I can use a user's email and password to login instead of the default including the username. I have tried overriding the JSONWebTokenMutation flow but have had no success. Any suggestions?\r\n\r\n\r\n`class ObtainJSONWebToken(graphql_jwt.JSONWebTokenMutation):\r\n\tuser = graphene.Field(UserType)\r\n\tprint(user)\r\n\r\n\tclass Arguments:\r\n\t\temail = graphene.String()\r\n\t\tpassword = graphene.String()\r\n\r\n\t@classmethod\r\n\tdef Field(cls, *args, **kwargs):\r\n\t\tcls._meta.arguments.update({\r\n\t\t\tget_user_model().EMAIL_FIELD: graphene.String(required=True),\r\n\t\t\t'password': graphene.String(required=True),\r\n\t\t})\r\n\t\tprint(cls._meta.arguments)\r\n\t\treturn super().Field(*args, **kwargs)\r\n\r\n\t@classmethod\r\n\t# @token_auth\r\n\tdef mutate(cls, root, info, **kwargs):\r\n\t\tuser = authenticate(email=kwargs['email'], password = kwargs['password'])\r\n\t\tif user is None:\r\n\t\t\traise Exception('Credentials are incorrect')\r\n\t\ttoken = get_token(user)\r\n\t\tinfo.context.set_jwt_cookie=token\r\n\t\treturn cls(user=user, token=token)\r\n\r\n\t@classmethod\r\n\tdef resolve(cls, root, info, **kwargs):\r\n\t\treturn cls(user=info.context.user)\r\n`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/207", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/207/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/207/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/207", "id": 635740787, "node_id": "MDU6SXNzdWU2MzU3NDA3ODc=", "number": 207, "title": "Remove Did you mean...", "user": {"login": "ckristhoff", "id": 2814894, "node_id": "MDQ6VXNlcjI4MTQ4OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2814894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ckristhoff", "html_url": "https://github.com/ckristhoff", "followers_url": "https://api.github.com/users/ckristhoff/followers", "following_url": "https://api.github.com/users/ckristhoff/following{/other_user}", "gists_url": "https://api.github.com/users/ckristhoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/ckristhoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ckristhoff/subscriptions", "organizations_url": "https://api.github.com/users/ckristhoff/orgs", "repos_url": "https://api.github.com/users/ckristhoff/repos", "events_url": "https://api.github.com/users/ckristhoff/events{/privacy}", "received_events_url": "https://api.github.com/users/ckristhoff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-09T20:36:55Z", "updated_at": "2020-08-02T04:01:50Z", "closed_at": "2020-08-02T04:01:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\nWhen you post an wrong writted query, graphql/graphene makes suggestions to you. By example, sending \"i\", it suggest \"ID\".\r\n```graphql\r\nquery{\r\n  users{\r\n        i\r\n  }\r\n}\r\n```\r\n```\r\n{\r\n  \"errors\": [\r\n    {\r\n      \"message\": \"Cannot query field \\\"i\\\" on type \\\"User\\\". Did you mean \\\"id\\\"?\",\r\n      \"locations\": [\r\n        {\r\n          \"line\": 5,\r\n          \"column\": 9\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\nHow can I remove suggestions on query errors?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/205", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/205/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/205/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/205/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/205", "id": 628928480, "node_id": "MDU6SXNzdWU2Mjg5Mjg0ODA=", "number": 205, "title": "Custom authentication backend with custom input fields", "user": {"login": "amiyatulu", "id": 2051004, "node_id": "MDQ6VXNlcjIwNTEwMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2051004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amiyatulu", "html_url": "https://github.com/amiyatulu", "followers_url": "https://api.github.com/users/amiyatulu/followers", "following_url": "https://api.github.com/users/amiyatulu/following{/other_user}", "gists_url": "https://api.github.com/users/amiyatulu/gists{/gist_id}", "starred_url": "https://api.github.com/users/amiyatulu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amiyatulu/subscriptions", "organizations_url": "https://api.github.com/users/amiyatulu/orgs", "repos_url": "https://api.github.com/users/amiyatulu/repos", "events_url": "https://api.github.com/users/amiyatulu/events{/privacy}", "received_events_url": "https://api.github.com/users/amiyatulu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-02T06:10:44Z", "updated_at": "2020-08-02T11:02:07Z", "closed_at": "2020-08-02T11:02:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I want to build a custom authentication without using password as an input field. I want to send three input variables: username, msg, publickey and validate that in a custom Django authentication backend.\r\n\r\nHow to have three fields and pass it to the authenticate method of Django authentication backend? \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/202", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/202/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/202/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/202/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/202", "id": 621027647, "node_id": "MDU6SXNzdWU2MjEwMjc2NDc=", "number": 202, "title": "Why was the user logged in signal removed ", "user": {"login": "atainton", "id": 6348377, "node_id": "MDQ6VXNlcjYzNDgzNzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/6348377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atainton", "html_url": "https://github.com/atainton", "followers_url": "https://api.github.com/users/atainton/followers", "following_url": "https://api.github.com/users/atainton/following{/other_user}", "gists_url": "https://api.github.com/users/atainton/gists{/gist_id}", "starred_url": "https://api.github.com/users/atainton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atainton/subscriptions", "organizations_url": "https://api.github.com/users/atainton/orgs", "repos_url": "https://api.github.com/users/atainton/repos", "events_url": "https://api.github.com/users/atainton/events{/privacy}", "received_events_url": "https://api.github.com/users/atainton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-19T14:33:39Z", "updated_at": "2020-05-19T15:03:03Z", "closed_at": "2020-05-19T15:03:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to this [commit](https://github.com/flavors/django-graphql-jwt/commit/7938e2c7fe3e4fceb8a2531873af4c90a7f6f404) the user logged in signal was removed. Why did you decide this?\r\n\r\nI am looking to determine when a user last logged into the application and I was hoping to use the signal to update the last login. \r\n\r\nDo you have any suggestions around this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/201", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/201/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/201/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/201/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/201", "id": 619396588, "node_id": "MDU6SXNzdWU2MTkzOTY1ODg=", "number": 201, "title": "Need 'get_all_permissions' method like in django.contrib.auth", "user": {"login": "arjun2504", "id": 4153803, "node_id": "MDQ6VXNlcjQxNTM4MDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/4153803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arjun2504", "html_url": "https://github.com/arjun2504", "followers_url": "https://api.github.com/users/arjun2504/followers", "following_url": "https://api.github.com/users/arjun2504/following{/other_user}", "gists_url": "https://api.github.com/users/arjun2504/gists{/gist_id}", "starred_url": "https://api.github.com/users/arjun2504/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arjun2504/subscriptions", "organizations_url": "https://api.github.com/users/arjun2504/orgs", "repos_url": "https://api.github.com/users/arjun2504/repos", "events_url": "https://api.github.com/users/arjun2504/events{/privacy}", "received_events_url": "https://api.github.com/users/arjun2504/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-16T06:50:30Z", "updated_at": "2020-08-02T07:37:10Z", "closed_at": "2020-08-02T07:37:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Need a way to get_all_permissions like its available in django.contrib.auth", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/200", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/200/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/200/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/200", "id": 617123892, "node_id": "MDU6SXNzdWU2MTcxMjM4OTI=", "number": 200, "title": "Doesn't support latest graphene-django v3.0.0b1", "user": {"login": "BfutureP", "id": 34347976, "node_id": "MDQ6VXNlcjM0MzQ3OTc2", "avatar_url": "https://avatars3.githubusercontent.com/u/34347976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BfutureP", "html_url": "https://github.com/BfutureP", "followers_url": "https://api.github.com/users/BfutureP/followers", "following_url": "https://api.github.com/users/BfutureP/following{/other_user}", "gists_url": "https://api.github.com/users/BfutureP/gists{/gist_id}", "starred_url": "https://api.github.com/users/BfutureP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BfutureP/subscriptions", "organizations_url": "https://api.github.com/users/BfutureP/orgs", "repos_url": "https://api.github.com/users/BfutureP/repos", "events_url": "https://api.github.com/users/BfutureP/events{/privacy}", "received_events_url": "https://api.github.com/users/BfutureP/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-13T04:05:10Z", "updated_at": "2020-08-02T02:16:47Z", "closed_at": "2020-08-02T02:16:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Latest beta version of graphene and graphene-django gives this error:- \r\n```\r\nException in thread django-main-thread:\r\nTraceback (most recent call last):\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\r\n    self.run()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py\", line 870, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"/Users/BfutureP/Desktop/BfutureP/Baniya-BE/.venv/lib/python3.8/site-packages/django/utils/autoreload.py\", line 53, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"/Users/BfutureP/Desktop/BfutureP/Baniya-BE/.venv/lib/python3.8/site-packages/django/core/management/commands/runserver.py\", line 117, in inner_run\r\n    self.check(display_num_errors=True)\r\n  File \"/Users/BfutureP/Desktop/BfutureP/Baniya-BE/.venv/lib/python3.8/site-packages/django/core/management/base.py\", line 392, in check\r\n    all_issues = self._run_checks(\r\n  File \"/Users/BfutureP/Desktop/BfutureP/Baniya-BE/.venv/lib/python3.8/site-packages/django/core/management/base.py\", line 382, in _run_checks\r\n    return checks.run_checks(**kwargs)\r\n  File \"/Users/BfutureP/Desktop/BfutureP/Baniya-BE/.venv/lib/python3.8/site-packages/django/core/checks/registry.py\", line 72, in run_checks\r\n    new_errors = check(app_configs=app_configs)\r\n  File \"/Users/BfutureP/Desktop/BfutureP/Baniya-BE/.venv/lib/python3.8/site-packages/django/core/checks/urls.py\", line 40, in check_url_namespaces_unique\r\n    all_namespaces = _load_all_namespaces(resolver)\r\n  File \"/Users/BfutureP/Desktop/BfutureP/Baniya-BE/.venv/lib/python3.8/site-packages/django/core/checks/urls.py\", line 57, in _load_all_namespaces\r\n    url_patterns = getattr(resolver, 'url_patterns', [])\r\n  File \"/Users/BfutureP/Desktop/BfutureP/Baniya-BE/.venv/lib/python3.8/site-packages/django/utils/functional.py\", line 48, in __get__\r\n    res = instance.__dict__[self.name] = self.func(instance)\r\n  File \"/Users/BfutureP/Desktop/BfutureP/Baniya-BE/.venv/lib/python3.8/site-packages/django/urls/resolvers.py\", line 588, in url_patterns\r\n    patterns = getattr(self.urlconf_module, \"urlpatterns\", self.urlconf_module)\r\n  File \"/Users/BfutureP/Desktop/BfutureP/Baniya-BE/.venv/lib/python3.8/site-packages/django/utils/functional.py\", line 48, in __get__\r\n    res = instance.__dict__[self.name] = self.func(instance)\r\n  File \"/Users/BfutureP/Desktop/BfutureP/Baniya-BE/.venv/lib/python3.8/site-packages/django/urls/resolvers.py\", line 581, in urlconf_module\r\n    return import_module(self.urlconf_name)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/importlib/__init__.py\", line 127, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1014, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 975, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 671, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 783, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"/Users/BfutureP/Desktop/BfutureP/Baniya-BE/baniya_be/baniya_be/urls.py\", line 22, in <module>\r\n    from graphql_jwt.decorators import jwt_cookie\r\n  File \"/Users/BfutureP/Desktop/BfutureP/Baniya-BE/.venv/lib/python3.8/site-packages/graphql_jwt/__init__.py\", line 1, in <module>\r\n    from . import relay\r\n  File \"/Users/BfutureP/Desktop/BfutureP/Baniya-BE/.venv/lib/python3.8/site-packages/graphql_jwt/relay.py\", line 5, in <module>\r\n    from . import mixins\r\n  File \"/Users/BfutureP/Desktop/BfutureP/Baniya-BE/.venv/lib/python3.8/site-packages/graphql_jwt/mixins.py\", line 8, in <module>\r\n    from .decorators import csrf_rotation, ensure_token, setup_jwt_cookie\r\n  File \"/Users/BfutureP/Desktop/BfutureP/Baniya-BE/.venv/lib/python3.8/site-packages/graphql_jwt/decorators.py\", line 10, in <module>\r\n    from graphql.execution.base import ResolveInfo\r\nModuleNotFoundError: No module named 'graphql.execution.base'\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/199", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/199/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/199/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/199/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/199", "id": 616153235, "node_id": "MDU6SXNzdWU2MTYxNTMyMzU=", "number": 199, "title": "Refresh tokens are being generated even when not requested.", "user": {"login": "benrussell80", "id": 47754537, "node_id": "MDQ6VXNlcjQ3NzU0NTM3", "avatar_url": "https://avatars1.githubusercontent.com/u/47754537?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benrussell80", "html_url": "https://github.com/benrussell80", "followers_url": "https://api.github.com/users/benrussell80/followers", "following_url": "https://api.github.com/users/benrussell80/following{/other_user}", "gists_url": "https://api.github.com/users/benrussell80/gists{/gist_id}", "starred_url": "https://api.github.com/users/benrussell80/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benrussell80/subscriptions", "organizations_url": "https://api.github.com/users/benrussell80/orgs", "repos_url": "https://api.github.com/users/benrussell80/repos", "events_url": "https://api.github.com/users/benrussell80/events{/privacy}", "received_events_url": "https://api.github.com/users/benrussell80/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-11T20:13:15Z", "updated_at": "2020-08-02T11:41:25Z", "closed_at": "2020-08-02T11:41:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Problem\r\nSimilar to this closed issue, #81, whenever I call `refreshToken` a new long-running refresh token is created even if I don't include `refreshToken` in the return query. In that issue, a solution was said to have been made where a new one would not be created unless it was asked for in the response, but I am still seeing more long-running refresh tokens being made.\r\n\r\n# My setup\r\n- Python 3.8.2\r\n- Ubuntu 18.04\r\n- Firefox\r\n- Output from `pip freeze`:\r\n```\r\naniso8601==7.0.0\r\nasgiref==3.2.7\r\nboto3==1.13.6\r\nbotocore==1.16.6\r\ndj-database-url==0.5.0\r\nDjango==3.0.6\r\ndjango-autoslug==1.9.7\r\ndjango-cors-headers==3.2.1\r\ndjango-filter==2.2.0\r\ndjango-graphql-jwt==0.3.1\r\ndjango-heroku==0.3.1\r\ndjango-storages==1.9.1\r\ndocutils==0.15.2\r\ngraphene==2.1.8\r\ngraphene-django==2.9.1\r\ngraphql-core==2.3.1\r\ngraphql-relay==2.0.1\r\ngunicorn==20.0.4\r\njmespath==0.9.5\r\nPillow==7.1.2\r\npromise==2.3\r\npsycopg2-binary==2.8.5\r\nPyJWT==1.7.1\r\npython-dateutil==2.8.1\r\npython-dotenv==0.13.0\r\npytz==2020.1\r\nRx==1.6.1\r\ns3transfer==0.3.3\r\nsingledispatch==3.4.0.3\r\nsix==1.14.0\r\nsqlparse==0.3.1\r\nurllib3==1.25.9\r\nwhitenoise==5.0.1\r\n```\r\n- Pertinent parts of `urls.py`\r\n```python\r\nfrom django.urls import path\r\nfrom graphene_django.views import GraphQLView\r\nfrom graphql_jwt.decorators import jwt_cookie\r\n\r\n\r\nurlpatterns = [\r\n    ...,\r\n    path('graphql/', jwt_cookie(GraphQLView.as_view(graphiql=True)), name='graphql'),\r\n    ...,\r\n]\r\n```\r\n- Mutations\r\n```python\r\nimport graphene\r\nimport graphql_jwt\r\n\r\n\r\nclass Mutation(graphene.ObjectType):\r\n    token_auth = graphql_jwt.relay.ObtainJSONWebToken.Field()\r\n    verify_token = graphql_jwt.relay.Verify.Field()\r\n    refresh_token = graphql_jwt.relay.Refresh.Field()\r\n    delete_token_cookie = graphql_jwt.relay.DeleteJSONWebTokenCookie.Field()\r\n    \r\n    revoke_token = graphql_jwt.relay.Revoke.Field()\r\n    delete_refresh_token_cookie = graphql_jwt.relay.DeleteRefreshTokenCookie.Field()\r\n```\r\n\r\n# Request Being Made\r\nI make this request in the graphiql console with `{\"refreshToken\": \"...\"}` in request variables and I get the value by copyting from the JWT-refresh-token cookie.\r\n\r\n```graphql\r\nmutation RefreshToken($refreshToken: String!) {\r\n  refreshToken(input: {refreshToken: $refreshToken}) {\r\n    token\r\n    payload\r\n  }\r\n}\r\n```\r\n\r\n# Result\r\nAfter sending that request, the JWT-refresh-token cookie changes to a different value, and there is a new one in the database (after looking at `RefreshToken.objects.count()` before and after).\r\n\r\nCould this due to the `jwt_cookie` decorator creating a new one? Is there a way to refresh the token (access token) without creating a new refresh token?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/198", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/198/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/198/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/198/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/198", "id": 615468526, "node_id": "MDU6SXNzdWU2MTU0Njg1MjY=", "number": 198, "title": "@login_required returns 200 instead of 401", "user": {"login": "PetrShchukin", "id": 46652336, "node_id": "MDQ6VXNlcjQ2NjUyMzM2", "avatar_url": "https://avatars2.githubusercontent.com/u/46652336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PetrShchukin", "html_url": "https://github.com/PetrShchukin", "followers_url": "https://api.github.com/users/PetrShchukin/followers", "following_url": "https://api.github.com/users/PetrShchukin/following{/other_user}", "gists_url": "https://api.github.com/users/PetrShchukin/gists{/gist_id}", "starred_url": "https://api.github.com/users/PetrShchukin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PetrShchukin/subscriptions", "organizations_url": "https://api.github.com/users/PetrShchukin/orgs", "repos_url": "https://api.github.com/users/PetrShchukin/repos", "events_url": "https://api.github.com/users/PetrShchukin/events{/privacy}", "received_events_url": "https://api.github.com/users/PetrShchukin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-10T20:20:46Z", "updated_at": "2020-05-17T14:10:27Z", "closed_at": "2020-05-17T14:09:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "When there is no a jwt token or token is invalid, I've got 200 status from server. That's an issue, it should return 401 status, we can't every time check a payload in a successful response. I've seen the same topic here https://github.com/flavors/django-graphql-jwt/issues/68,  but django-graphql-extensions doesn't allow to change a response status. I understand that there is no standards but in common sense if I haven't got data that's not 200. Following your logic graphene should return 200 as well when a query isn't correct. But it returns 400. If there is any way how to implement 401 status code please let me know. For me that's a blocker of using django-graphql-jwt for prod projects.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/193", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/193/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/193/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/193/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/193", "id": 602602861, "node_id": "MDU6SXNzdWU2MDI2MDI4NjE=", "number": 193, "title": "Error field not following general convention", "user": {"login": "cutamar", "id": 16025213, "node_id": "MDQ6VXNlcjE2MDI1MjEz", "avatar_url": "https://avatars2.githubusercontent.com/u/16025213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cutamar", "html_url": "https://github.com/cutamar", "followers_url": "https://api.github.com/users/cutamar/followers", "following_url": "https://api.github.com/users/cutamar/following{/other_user}", "gists_url": "https://api.github.com/users/cutamar/gists{/gist_id}", "starred_url": "https://api.github.com/users/cutamar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cutamar/subscriptions", "organizations_url": "https://api.github.com/users/cutamar/orgs", "repos_url": "https://api.github.com/users/cutamar/repos", "events_url": "https://api.github.com/users/cutamar/events{/privacy}", "received_events_url": "https://api.github.com/users/cutamar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-19T02:37:44Z", "updated_at": "2020-08-02T10:52:27Z", "closed_at": "2020-08-02T10:52:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "At the moment `django-graphql-jwt` returns errors in:\r\n```\r\n{data: {}, errors: []}\r\n```\r\nbut this error array is meant only for errors made by developers. User-made errors should be returned in the `data` attribute, like it's done in graphene serializer mutations. The way it is now it's not following the spec of e.g. the relay client. I can't get to the errors array because a real error gets raised in the client.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/192", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/192/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/192/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/192/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/192", "id": 599780690, "node_id": "MDU6SXNzdWU1OTk3ODA2OTA=", "number": 192, "title": "graphql_jwt.DeleteRefreshTokenCookie.Field() is wrong in document ", "user": {"login": "PyDevX", "id": 20132993, "node_id": "MDQ6VXNlcjIwMTMyOTkz", "avatar_url": "https://avatars2.githubusercontent.com/u/20132993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PyDevX", "html_url": "https://github.com/PyDevX", "followers_url": "https://api.github.com/users/PyDevX/followers", "following_url": "https://api.github.com/users/PyDevX/following{/other_user}", "gists_url": "https://api.github.com/users/PyDevX/gists{/gist_id}", "starred_url": "https://api.github.com/users/PyDevX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PyDevX/subscriptions", "organizations_url": "https://api.github.com/users/PyDevX/orgs", "repos_url": "https://api.github.com/users/PyDevX/repos", "events_url": "https://api.github.com/users/PyDevX/events{/privacy}", "received_events_url": "https://api.github.com/users/PyDevX/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-14T18:41:36Z", "updated_at": "2020-08-02T02:25:15Z", "closed_at": "2020-08-02T02:25:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Link : https://django-graphql-jwt.domake.io/en/latest/authentication.html#delete-cookies\r\nSection : Delete Cookies \r\nWrong  :   # Long running refresh tokens\r\n    delete_refresh_token_cookie = \\\r\n        graphql_jwt.refresh_token.DeleteRefreshTokenCookie.Field()\r\n\r\nRight :  # Long running refresh tokens\r\n    delete_refresh_token_cookie = \\\r\n        graphql_jwt.DeleteRefreshTokenCookie.Field()\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/190", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/190/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/190/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/190/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/190", "id": 596884529, "node_id": "MDU6SXNzdWU1OTY4ODQ1Mjk=", "number": 190, "title": "Auto-refresh token expiration date", "user": {"login": "aarzuagat", "id": 31313488, "node_id": "MDQ6VXNlcjMxMzEzNDg4", "avatar_url": "https://avatars0.githubusercontent.com/u/31313488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aarzuagat", "html_url": "https://github.com/aarzuagat", "followers_url": "https://api.github.com/users/aarzuagat/followers", "following_url": "https://api.github.com/users/aarzuagat/following{/other_user}", "gists_url": "https://api.github.com/users/aarzuagat/gists{/gist_id}", "starred_url": "https://api.github.com/users/aarzuagat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aarzuagat/subscriptions", "organizations_url": "https://api.github.com/users/aarzuagat/orgs", "repos_url": "https://api.github.com/users/aarzuagat/repos", "events_url": "https://api.github.com/users/aarzuagat/events{/privacy}", "received_events_url": "https://api.github.com/users/aarzuagat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-08T21:48:30Z", "updated_at": "2020-08-02T10:55:54Z", "closed_at": "2020-08-02T10:55:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have this problem: If I refresh my token every 5 minutes, I want to automatically update payload.exp if user did something in that time (before 5 minutes). I see unnecessary to token_auth to get a new token every 5 minute cause \"Signature has expired\". I want to do that automatically. How could I do?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/189", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/189/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/189/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/189/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/189", "id": 596695889, "node_id": "MDU6SXNzdWU1OTY2OTU4ODk=", "number": 189, "title": "adding @login_required to resolvers prevents people logged in from accessing", "user": {"login": "Quickinline", "id": 39879172, "node_id": "MDQ6VXNlcjM5ODc5MTcy", "avatar_url": "https://avatars3.githubusercontent.com/u/39879172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Quickinline", "html_url": "https://github.com/Quickinline", "followers_url": "https://api.github.com/users/Quickinline/followers", "following_url": "https://api.github.com/users/Quickinline/following{/other_user}", "gists_url": "https://api.github.com/users/Quickinline/gists{/gist_id}", "starred_url": "https://api.github.com/users/Quickinline/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Quickinline/subscriptions", "organizations_url": "https://api.github.com/users/Quickinline/orgs", "repos_url": "https://api.github.com/users/Quickinline/repos", "events_url": "https://api.github.com/users/Quickinline/events{/privacy}", "received_events_url": "https://api.github.com/users/Quickinline/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-08T16:12:25Z", "updated_at": "2020-04-11T16:24:43Z", "closed_at": "2020-04-09T08:38:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I setup a \"me\" query to test authentication. the query doesn't work when adding the token to the header, I'm using Insomnia and I don't know how to fix it.\r\nalthough with insomnia I'm able to verify and acquire token with the correct credentials\r\n\r\n![JWT_token_sent](https://user-images.githubusercontent.com/39879172/78807607-3a785a80-79bc-11ea-8111-26972625e735.png)\r\n![verifyToken](https://user-images.githubusercontent.com/39879172/78807629-3fd5a500-79bc-11ea-988f-9c1f96f2ac41.png)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/188", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/188/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/188/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/188/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/188", "id": 596033127, "node_id": "MDU6SXNzdWU1OTYwMzMxMjc=", "number": 188, "title": "is there any way to set SameSite option", "user": {"login": "PyDevX", "id": 20132993, "node_id": "MDQ6VXNlcjIwMTMyOTkz", "avatar_url": "https://avatars2.githubusercontent.com/u/20132993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PyDevX", "html_url": "https://github.com/PyDevX", "followers_url": "https://api.github.com/users/PyDevX/followers", "following_url": "https://api.github.com/users/PyDevX/following{/other_user}", "gists_url": "https://api.github.com/users/PyDevX/gists{/gist_id}", "starred_url": "https://api.github.com/users/PyDevX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PyDevX/subscriptions", "organizations_url": "https://api.github.com/users/PyDevX/orgs", "repos_url": "https://api.github.com/users/PyDevX/repos", "events_url": "https://api.github.com/users/PyDevX/events{/privacy}", "received_events_url": "https://api.github.com/users/PyDevX/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-07T17:28:29Z", "updated_at": "2020-08-02T13:36:41Z", "closed_at": "2020-08-02T13:36:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "is there any way to set SameSite option for cookies ? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/187", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/187/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/187/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/187/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/187", "id": 593847067, "node_id": "MDU6SXNzdWU1OTM4NDcwNjc=", "number": 187, "title": "No installed app with label 'refresh_token'", "user": {"login": "art-zhitnik", "id": 1741068, "node_id": "MDQ6VXNlcjE3NDEwNjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1741068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/art-zhitnik", "html_url": "https://github.com/art-zhitnik", "followers_url": "https://api.github.com/users/art-zhitnik/followers", "following_url": "https://api.github.com/users/art-zhitnik/following{/other_user}", "gists_url": "https://api.github.com/users/art-zhitnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/art-zhitnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/art-zhitnik/subscriptions", "organizations_url": "https://api.github.com/users/art-zhitnik/orgs", "repos_url": "https://api.github.com/users/art-zhitnik/repos", "events_url": "https://api.github.com/users/art-zhitnik/events{/privacy}", "received_events_url": "https://api.github.com/users/art-zhitnik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-04T13:03:27Z", "updated_at": "2020-04-04T22:50:50Z", "closed_at": "2020-04-04T22:50:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Trying to make authentication on 0.3.1 (python 3.6.8, django 2.1):\r\n```graphql\r\nmutation ($username: String!, $password: String!) {\r\n  tokenAuth(username: $username, password: $password) {\r\n    token\r\n  }\r\n}\r\n```\r\nGot error:\r\n```graphql\r\n{\r\n  \"errors\": [\r\n    {\r\n      \"message\": \"No installed app with label 'refresh_token'.\",\r\n      \"locations\": [\r\n        {\r\n          \"line\": 2,\r\n          \"column\": 3\r\n        }\r\n      ],\r\n      \"path\": [\r\n        \"tokenAuth\"\r\n      ]\r\n    }\r\n  ],\r\n  \"data\": {\r\n    \"tokenAuth\": null\r\n  }\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/184", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/184/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/184/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/184", "id": 590474625, "node_id": "MDU6SXNzdWU1OTA0NzQ2MjU=", "number": 184, "title": "customize the get_payload function ", "user": {"login": "aymaneMx", "id": 30264095, "node_id": "MDQ6VXNlcjMwMjY0MDk1", "avatar_url": "https://avatars1.githubusercontent.com/u/30264095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aymaneMx", "html_url": "https://github.com/aymaneMx", "followers_url": "https://api.github.com/users/aymaneMx/followers", "following_url": "https://api.github.com/users/aymaneMx/following{/other_user}", "gists_url": "https://api.github.com/users/aymaneMx/gists{/gist_id}", "starred_url": "https://api.github.com/users/aymaneMx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aymaneMx/subscriptions", "organizations_url": "https://api.github.com/users/aymaneMx/orgs", "repos_url": "https://api.github.com/users/aymaneMx/repos", "events_url": "https://api.github.com/users/aymaneMx/events{/privacy}", "received_events_url": "https://api.github.com/users/aymaneMx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-30T17:47:35Z", "updated_at": "2020-04-04T11:17:05Z", "closed_at": "2020-04-04T11:17:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "please, how can I customise the [get_payload](https://github.com/flavors/django-graphql-jwt/blob/master/graphql_jwt/utils.py#L84) function? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/183", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/183/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/183/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/183/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/183", "id": 590036445, "node_id": "MDU6SXNzdWU1OTAwMzY0NDU=", "number": 183, "title": "tokenAuth can't be executed by graphene.Schema", "user": {"login": "CSFlorin", "id": 9855031, "node_id": "MDQ6VXNlcjk4NTUwMzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/9855031?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CSFlorin", "html_url": "https://github.com/CSFlorin", "followers_url": "https://api.github.com/users/CSFlorin/followers", "following_url": "https://api.github.com/users/CSFlorin/following{/other_user}", "gists_url": "https://api.github.com/users/CSFlorin/gists{/gist_id}", "starred_url": "https://api.github.com/users/CSFlorin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CSFlorin/subscriptions", "organizations_url": "https://api.github.com/users/CSFlorin/orgs", "repos_url": "https://api.github.com/users/CSFlorin/repos", "events_url": "https://api.github.com/users/CSFlorin/events{/privacy}", "received_events_url": "https://api.github.com/users/CSFlorin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-30T06:45:15Z", "updated_at": "2020-04-04T10:26:14Z", "closed_at": "2020-04-04T10:26:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a schema like:\r\n```\r\nclass Mutation(backend.app.schema.Mutation, graphene.ObjectType):\r\n    token_auth = graphql_jwt.relay.ObtainJSONWebToken.Field()\r\n\r\nschema = graphene.Schema(mutation=Mutation)\r\n```\r\nAnd I want to generate an auth token for my tests using something like the following in a test class that inherits from `django.test.testcases.TestCase`\r\n```\r\nschema.execute(\r\n\"\"\"\r\nmutation TokenAuth($input: ObtainJSONWebTokenInput!) {\r\n    tokenAuth(input: $input) {\r\n        token\r\n    }\r\n}\r\n\"\"\",\r\nvariables={\"input\": {\"username\": \"user1\", \"password\": \"password\"}}\r\n)\r\n```\r\nHowever, executing that gives\r\n```\r\nAn error occurred while resolving field Mutation.tokenAuth\r\nTraceback (most recent call last):\r\n  File \"/Users/f/tf-web/env/lib/python3.6/site-packages/graphql/execution/executor.py\", line 452, in resolve_or_error\r\n    return executor.execute(resolve_fn, source, info, **args)\r\n  File \"/Users/f/tf-web/env/lib/python3.6/site-packages/graphql/execution/executors/sync.py\", line 16, in execute\r\n    return fn(*args, **kwargs)\r\n  File \"/Users/f/tf-web/env/lib/python3.6/site-packages/graphene/relay/mutation.py\", line 70, in mutate\r\n    result = cls.mutate_and_get_payload(root, info, **input)\r\n  File \"/Users/f/tf-web/env/lib/python3.6/site-packages/graphql_jwt/decorators.py\", line 110, in wrapper\r\n    result = f(cls, root, info, **kwargs)\r\n  File \"/Users/f/tf-web/env/lib/python3.6/site-packages/graphql_jwt/decorators.py\", line 70, in wrapper\r\n    context._jwt_token_auth = True\r\nAttributeError: 'NoneType' object has no attribute '_jwt_token_auth'\r\nTraceback (most recent call last):\r\n  File \"/Users/f/tf-web/env/lib/python3.6/site-packages/graphql/execution/executor.py\", line 452, in resolve_or_error\r\n    return executor.execute(resolve_fn, source, info, **args)\r\n  File \"/Users/f/tf-web/env/lib/python3.6/site-packages/graphql/execution/executors/sync.py\", line 16, in execute\r\n    return fn(*args, **kwargs)\r\n  File \"/Users/f/tf-web/env/lib/python3.6/site-packages/graphene/relay/mutation.py\", line 70, in mutate\r\n    result = cls.mutate_and_get_payload(root, info, **input)\r\n  File \"/Users/f/tf-web/env/lib/python3.6/site-packages/graphql_jwt/decorators.py\", line 110, in wrapper\r\n    result = f(cls, root, info, **kwargs)\r\n  File \"/Users/f/tf-web/env/lib/python3.6/site-packages/graphql_jwt/decorators.py\", line 70, in wrapper\r\n    context._jwt_token_auth = True\r\ngraphql.error.located_error.GraphQLLocatedError: 'NoneType' object has no attribute '_jwt_token_auth'\r\n\r\n[GraphQLLocatedError(\"'NoneType' object has no attribute '_jwt_token_auth'\",)]\r\n```\r\n\r\nEverything works fine if I send this as a request to my server's graphql endpoint, so I don't know what's going wrong.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/182", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/182/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/182/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/182/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/182", "id": 589804945, "node_id": "MDU6SXNzdWU1ODk4MDQ5NDU=", "number": 182, "title": "Could not deserialize key data. RS256 algorithm is failing.", "user": {"login": "Faisal-Manzer", "id": 18066439, "node_id": "MDQ6VXNlcjE4MDY2NDM5", "avatar_url": "https://avatars3.githubusercontent.com/u/18066439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Faisal-Manzer", "html_url": "https://github.com/Faisal-Manzer", "followers_url": "https://api.github.com/users/Faisal-Manzer/followers", "following_url": "https://api.github.com/users/Faisal-Manzer/following{/other_user}", "gists_url": "https://api.github.com/users/Faisal-Manzer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Faisal-Manzer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Faisal-Manzer/subscriptions", "organizations_url": "https://api.github.com/users/Faisal-Manzer/orgs", "repos_url": "https://api.github.com/users/Faisal-Manzer/repos", "events_url": "https://api.github.com/users/Faisal-Manzer/events{/privacy}", "received_events_url": "https://api.github.com/users/Faisal-Manzer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-29T14:29:56Z", "updated_at": "2020-08-02T02:18:08Z", "closed_at": "2020-08-02T02:18:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "# There is some issue in getting with `RS256` algorithm.\r\nBellow is my settings. They are working just normal other algorithms.\r\n\r\n```python\r\nJWT_PRIVATE_KEY_PATH = os.path.join(BASE_DIR, '__config__/keys/private.key')\r\nJWT_PUBLIC_KEY_PATH = os.path.join(BASE_DIR, '__config__/keys/public.key')\r\n\r\nJWT_PRIVATE_KEY = open(JWT_PRIVATE_KEY_PATH, 'r').read()\r\nJWT_PUBLIC_KEY = open(JWT_PUBLIC_KEY_PATH, 'r').read()\r\n\r\nJWT_ALGORITHM = 'RS256'\r\nJWT_REFRESH_EXPIRATION_DELTA = timedelta(days=1)\r\nJWT_EXPIRATION_DELTA = timedelta(minutes=5 if not DEBUG else 60)\r\n\r\nGRAPHQL_JWT = {\r\n    'JWT_ALGORITHM': JWT_ALGORITHM,\r\n    'JWT_PRIVATE_KEY': JWT_PRIVATE_KEY,\r\n    'JWT_PUBLIC_KEY': JWT_PUBLIC_KEY,\r\n    'JWT_EXPIRATION_DELTA': JWT_EXPIRATION_DELTA,\r\n    'JWT_REFRESH_EXPIRATION_DELTA': JWT_REFRESH_EXPIRATION_DELTA,\r\n    'JWT_AUTH_HEADER_PREFIX': 'Bearer'\r\n}\r\n```\r\n\r\nWith default algorithm (same settings but omitted `JWT_ALGORITHM`):\r\n![Screenshot 2020-03-29 at 7 52 24 PM](https://user-images.githubusercontent.com/18066439/77851504-2b90eb80-71f7-11ea-9717-a25ab4eb836a.png)\r\n\r\nWith `RS256` algorithm:\r\n![Screenshot 2020-03-29 at 7 52 43 PM](https://user-images.githubusercontent.com/18066439/77851513-419eac00-71f7-11ea-87b6-51a855d3e25f.png)\r\n\r\n<details><summary>Private key (<code>__config__/keys/private.key</code>)</summary>\r\n<p>\r\n\r\n```text\r\n-----BEGIN RSA PRIVATE KEY-----\r\nMIIJKgIBAAKCAgEAtS2UYklLHSqU6lt5/S4YMoyT+dF/GwMHtN4wmFu2zF0IXKvs\r\nE93ekDtjnDx5pBLIL3FhwPafuQqedi7ATe1X+CQGeIBvutMkkwMlAvWOjGeIisrW\r\n3UGLPrIVQpkCW7pauDJY2oXcQDzOUltWcm8ZkvmA+CJnnZ5kx4GVgLyuNmcK4xAb\r\nHFPbzwQxliZDWiwj19YprTqB24aAvaF+1cdnpShgRYvBjudOrQ04kQzhnc4FLbRE\r\nOjml43ov+ru8sExCDIyWcqKZ0MuswRAw8fq9XVzv/yqaOworKu1OkC58McNOoLmV\r\natpfLLtiudv7T+E2HU/hohFKeo4Xkq1CpAxAAvn1d0WLstvGY5YjKLLgToW341+A\r\nWE6nLi9nr95b51LPWrOQs2fNCr3hd6Rw5u4yf6JqpwGwu2lG0BIwkrumtMJF+VBA\r\nAQxcs184MVrE6ag8XaeydutMCJ4/yTPEGwxPDlquzMhIJayZq/lPbk9nxqkT2y8E\r\nnAfylsqxmSmfqScdo7wvpW4LtACDlhZjQmKuB2DI2XkjrsjOVv+Tr7OTAvTr3QvT\r\niLTq44TS3y5l1L3MUZ2XWm5oALx7l5cfPIlb+0q7alDrf/xiijDphmmlyZ41mN/J\r\njaH4YWo+DOlNNhbCX8gBJE70vb+TnbckEMujh3Af/xOgFsazva0ujp14CdcCAwEA\r\nAQKCAgEAlsEqau4ZtlcsOiWLyAOG1ujqaEDNxqgqzXDkdqI55Kq0voe/lHhVLSZ9\r\nqA8aGFAYioGJmYqdNNeFK0mTckQ/opY3XCVi0s3F7R38ug2hY2ryzqohR1G2j6CW\r\n2CeBMtpJimM6U/p2Xm06MIUX1Xhki0tY6R+XoCugJ/HHeKuHOnVbNby9EkEk8YjH\r\nyexktq9r07i8TQwV6Zhtn1y1sSSPNXn3QWcc08/cQ1pw6yEQysIWxQTukJRPWIzf\r\nR37XbsrFWrPQq+pomrgfMzZJw8+jqgAfIu9MDjxT1xBHAunrJW0iC9LgZVz3PL1f\r\nVM+aucjnwlQppzVEB94b90x72wzmZSzDAmlwGvKbcdg/ZEsUUOzjrDmUY6Cg3/zE\r\n3OG52w/e5Iytsn7UvvEwOM/5eY1oH2zCGYeScavnB2lSJlaQJzDkSnT4Hrmu36iK\r\n1zcVXF7y5h7MBUgrlK5KnIhAsEpjIk3Je1ysIvFe0tUqExwTFA6rcBo5cCUu2YKT\r\nuRpDO2GZaKeA/2XxSyvqGKbbdO6otUGyy03dDenxbz61iD6h2rer89/ZzFw/KDZt\r\nTgKxclzw1Am//01RlPT83ns9YOVzTX7AhtpPcNu/mEA9Ab2nTAbTuJFbZPDD+Ga+\r\nozLgeDDiN0Ul7C8UO8ZTH39SRvBjvtTIu0pBuuLpEZP2lXZXsQECggEBAOKHjO9n\r\nw3JGe3mJYUmkPVu+McaoAyEmG6NKFmr/buDpm1h5IYkKtgC+wDUx/AT1LNmIgvGG\r\nr/D2LirF+NM7at5R8IgGnFqhDMDPXYK9DrEc86LgLmIKN8IcnUSLCgjN/+ThFBU+\r\nehKCTOcDDE+HqAMskVg1QShee8nmQ0nM8/FPNctLJMjhDHdLFWCukj61N8l0hdmM\r\nidu/oeITcQHPee9JVh7oxx6E7gfv9QB7Z4BidNo8Xi+T76Mb0KPF2+2rNLaT1qrh\r\ndjcorzZw0BYn2+T6CCm/LniDP0YpMwlZ/1ew87lHKxMf2YpxYXP1LipBr3mIwT9b\r\n76inkGGvvHLV0TcCggEBAMy/n0djSk2yb6I82CFxkMEsOFK02wDndz7vJ1zCKxJT\r\nw/75wRghHSWewR+A+KlslWegCB0aNYpWqdOd+rR3sVCHpqR/FG3EntQj6dyEEvqB\r\nlI/OTVLacG0gGPlbdxOGQTZyn8on4siFWlu3SNOzDU7Le+mBbx9abPsi5grN5JoT\r\ntaZWGHhSU7lq9N2lYo8OEWWHrf+oI6wuwYINpdwZKAuhm+uOoWlG74JOXDfLpQlr\r\nz4gEUfEe+u3Wlnvw0i7L0iezzZWFyfKqosbYUgBzbICeSKx7ksNWtSQRMvNK/Ic/\r\npxky71oP6nx1Jny/gKc6c3rYlqdYM8ocOtQ3jUjcXGECggEBANTiGCNgez9oV193\r\nKLOBIpyWF8ceW5qKaozA8mJpXDUHtJKne0mDhFkc6hrTt4idNCHWdWAveCbV47sU\r\nw2sXOq5liMr8k3FkSkzkU3eq3iS6FYhqb4x5F79XDsC8fZiapzHcB/iS9ztvsn+i\r\n0K3oyY76Ejk4Cty6NlEeEPxJHLMZAm/jVVVmkUWGjTeHty4xNZUf6S3yMhgOdj60\r\nkI3oAipK3CE+FupqeBuDeNaUIkd3v2LcOpMxzpGVcTSHm9A2BdrTAnkiWuspU8ew\r\nqw03NiJwir1Yyn48sXjo/Op75kftpo3nAOb/FnxRYwkLT/AsPJDVYO5/IrF3j2sO\r\nMOYmZG8CggEBAL/uGOcYgjyXOeJBWvDuvhz20M1mz6znTXbnRGTFdw61CxNnF8UA\r\ntYvgZ3Sat35KVTtQXoq5WNsXJhdDDhJB6StuHZ4xqfrDx4dhKwYVoJzG/3ZWk1FJ\r\nhv4kioSlYtggj9z0Uil0fjguGWfERjZ8r8rfIIbhWENxxpscObyDCPoN48fLCSEx\r\nO16ijmt/bwZez5v3NfpjqRzsr2S0WngZ9NoCYmDL0S8Y2ceyoOuEsG5Ga8I7Gn0G\r\n534wG9yPANfxJE0nVV4Gjio2HmR7v1LA4EMpHULii88k5qSqorJB5rr5xi/u+UPZ\r\ni5ujTbK+6WDZgAr2ITM5kUKyd8sbUAuu1cECggEAB5LznJ3hspGB3wTGOBQAVEkL\r\nfQWZPoM6trRg7grRJhMwtVY0lvDf2qcriLCjVAW8ah6DFDKXyoCN41BVn5Lb1unB\r\nmyfcZLKVt/0LwPMfNPYP0mi0Ev2sRql/GHgr70WQwPws88TUxHVZjpeBY/z71r7Q\r\nDptT43yM0rhE4A9+jD12g4QESj1tZQQ+RXJ5LHPDI+w8MoTzN059K8yydbfkVZZJ\r\nDviyyZrmCbw/wWYwwN3vSb902CPKKToCf0nV0E+96oNZ5HKIjR+kB1TC+AN98RIR\r\nnugatc01Br4xigLifbJyAKFXKekxALon36nQG2ERmHX6HDtI5vHdkTgqLyP/Ew==\r\n-----END RSA PRIVATE KEY-----\r\n```\r\n</p>\r\n</details>\r\n\r\n<details><summary>Public key (<code>__config__/keys/public.key</code>)</summary>\r\n<p>\r\n\r\n```text\r\n-----BEGIN PUBLIC KEY-----\r\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAtS2UYklLHSqU6lt5/S4Y\r\nMoyT+dF/GwMHtN4wmFu2zF0IXKvsE93ekDtjnDx5pBLIL3FhwPafuQqedi7ATe1X\r\n+CQGeIBvutMkkwMlAvWOjGeIisrW3UGLPrIVQpkCW7pauDJY2oXcQDzOUltWcm8Z\r\nkvmA+CJnnZ5kx4GVgLyuNmcK4xAbHFPbzwQxliZDWiwj19YprTqB24aAvaF+1cdn\r\npShgRYvBjudOrQ04kQzhnc4FLbREOjml43ov+ru8sExCDIyWcqKZ0MuswRAw8fq9\r\nXVzv/yqaOworKu1OkC58McNOoLmVatpfLLtiudv7T+E2HU/hohFKeo4Xkq1CpAxA\r\nAvn1d0WLstvGY5YjKLLgToW341+AWE6nLi9nr95b51LPWrOQs2fNCr3hd6Rw5u4y\r\nf6JqpwGwu2lG0BIwkrumtMJF+VBAAQxcs184MVrE6ag8XaeydutMCJ4/yTPEGwxP\r\nDlquzMhIJayZq/lPbk9nxqkT2y8EnAfylsqxmSmfqScdo7wvpW4LtACDlhZjQmKu\r\nB2DI2XkjrsjOVv+Tr7OTAvTr3QvTiLTq44TS3y5l1L3MUZ2XWm5oALx7l5cfPIlb\r\n+0q7alDrf/xiijDphmmlyZ41mN/JjaH4YWo+DOlNNhbCX8gBJE70vb+TnbckEMuj\r\nh3Af/xOgFsazva0ujp14CdcCAwEAAQ==\r\n-----END PUBLIC KEY-----\r\n```\r\n</p>\r\n</details>\r\n(These are my debug keys)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/181", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/181/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/181/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/181/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/181", "id": 583926109, "node_id": "MDU6SXNzdWU1ODM5MjYxMDk=", "number": 181, "title": "Could you please release a new version with a fixed cookies?", "user": {"login": "TitanFighter", "id": 12687911, "node_id": "MDQ6VXNlcjEyNjg3OTEx", "avatar_url": "https://avatars2.githubusercontent.com/u/12687911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TitanFighter", "html_url": "https://github.com/TitanFighter", "followers_url": "https://api.github.com/users/TitanFighter/followers", "following_url": "https://api.github.com/users/TitanFighter/following{/other_user}", "gists_url": "https://api.github.com/users/TitanFighter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TitanFighter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TitanFighter/subscriptions", "organizations_url": "https://api.github.com/users/TitanFighter/orgs", "repos_url": "https://api.github.com/users/TitanFighter/repos", "events_url": "https://api.github.com/users/TitanFighter/events{/privacy}", "received_events_url": "https://api.github.com/users/TitanFighter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-18T18:33:11Z", "updated_at": "2020-04-04T10:21:47Z", "closed_at": "2020-04-04T10:21:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/178", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/178/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/178/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/178/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/178", "id": 577011708, "node_id": "MDU6SXNzdWU1NzcwMTE3MDg=", "number": 178, "title": "Doc site down", "user": {"login": "ckristhoff", "id": 2814894, "node_id": "MDQ6VXNlcjI4MTQ4OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2814894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ckristhoff", "html_url": "https://github.com/ckristhoff", "followers_url": "https://api.github.com/users/ckristhoff/followers", "following_url": "https://api.github.com/users/ckristhoff/following{/other_user}", "gists_url": "https://api.github.com/users/ckristhoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/ckristhoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ckristhoff/subscriptions", "organizations_url": "https://api.github.com/users/ckristhoff/orgs", "repos_url": "https://api.github.com/users/ckristhoff/repos", "events_url": "https://api.github.com/users/ckristhoff/events{/privacy}", "received_events_url": "https://api.github.com/users/ckristhoff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-06T15:41:41Z", "updated_at": "2020-03-06T17:06:39Z", "closed_at": "2020-03-06T17:06:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\ndoc site is down, I'm getting this\r\n```xml\r\n<Error>\r\n<Code>AuthenticationFailed</Code>\r\n<Message>\r\nServer failed to authenticate the request. Make sure the value of Authorization header is formed correctly including the signature. RequestId:282b2f04-a01e-007f-63cd-f3c309000000 Time:2020-03-06T15:39:25.0193548Z\r\n</Message>\r\n</Error>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/177", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/177/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/177/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/177/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/177", "id": 576595685, "node_id": "MDU6SXNzdWU1NzY1OTU2ODU=", "number": 177, "title": "Change in graphql-core causes warnings to be raised when testing", "user": {"login": "jackscodemonkey", "id": 16215050, "node_id": "MDQ6VXNlcjE2MjE1MDUw", "avatar_url": "https://avatars1.githubusercontent.com/u/16215050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackscodemonkey", "html_url": "https://github.com/jackscodemonkey", "followers_url": "https://api.github.com/users/jackscodemonkey/followers", "following_url": "https://api.github.com/users/jackscodemonkey/following{/other_user}", "gists_url": "https://api.github.com/users/jackscodemonkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackscodemonkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackscodemonkey/subscriptions", "organizations_url": "https://api.github.com/users/jackscodemonkey/orgs", "repos_url": "https://api.github.com/users/jackscodemonkey/repos", "events_url": "https://api.github.com/users/jackscodemonkey/events{/privacy}", "received_events_url": "https://api.github.com/users/jackscodemonkey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-05T23:37:13Z", "updated_at": "2020-04-04T11:02:23Z", "closed_at": "2020-04-04T10:59:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "graphql-core 2.3.1 raises deprecation warnings when executing pytest queries with JSONWebTokenClient.\r\n\r\nhttps://github.com/flavors/django-graphql-jwt/blob/49826780881ede1554c265fab1b3b41a4c038d05/graphql_jwt/testcases.py#L48\r\n\r\nsite-packages/graphql/backend/core.py:32: DeprecationWarning: The 'context' alias has been deprecated. Please use 'context_value' instead.\r\n    return execute(schema, document_ast, *args, **kwargs)\r\n\r\nsite-packages/graphql/backend/core.py:32: DeprecationWarning: The 'variables' alias has been deprecated. Please use 'variable_values' instead.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/176", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/176/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/176/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/176/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/176", "id": 575227693, "node_id": "MDU6SXNzdWU1NzUyMjc2OTM=", "number": 176, "title": "Using jwt for django views?", "user": {"login": "a-c-sreedhar-reddy", "id": 16081083, "node_id": "MDQ6VXNlcjE2MDgxMDgz", "avatar_url": "https://avatars3.githubusercontent.com/u/16081083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a-c-sreedhar-reddy", "html_url": "https://github.com/a-c-sreedhar-reddy", "followers_url": "https://api.github.com/users/a-c-sreedhar-reddy/followers", "following_url": "https://api.github.com/users/a-c-sreedhar-reddy/following{/other_user}", "gists_url": "https://api.github.com/users/a-c-sreedhar-reddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/a-c-sreedhar-reddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a-c-sreedhar-reddy/subscriptions", "organizations_url": "https://api.github.com/users/a-c-sreedhar-reddy/orgs", "repos_url": "https://api.github.com/users/a-c-sreedhar-reddy/repos", "events_url": "https://api.github.com/users/a-c-sreedhar-reddy/events{/privacy}", "received_events_url": "https://api.github.com/users/a-c-sreedhar-reddy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-04T08:42:17Z", "updated_at": "2020-03-06T17:47:45Z", "closed_at": "2020-03-06T17:47:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to have both graphql and django views. So how can a user be authenticated in a django view using graphql jwt?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/174", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/174/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/174/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/174/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/174", "id": 566438374, "node_id": "MDU6SXNzdWU1NjY0MzgzNzQ=", "number": 174, "title": "Authentication backends are called twice", "user": {"login": "edouardtheron", "id": 16775821, "node_id": "MDQ6VXNlcjE2Nzc1ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/16775821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edouardtheron", "html_url": "https://github.com/edouardtheron", "followers_url": "https://api.github.com/users/edouardtheron/followers", "following_url": "https://api.github.com/users/edouardtheron/following{/other_user}", "gists_url": "https://api.github.com/users/edouardtheron/gists{/gist_id}", "starred_url": "https://api.github.com/users/edouardtheron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edouardtheron/subscriptions", "organizations_url": "https://api.github.com/users/edouardtheron/orgs", "repos_url": "https://api.github.com/users/edouardtheron/repos", "events_url": "https://api.github.com/users/edouardtheron/events{/privacy}", "received_events_url": "https://api.github.com/users/edouardtheron/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-17T17:33:42Z", "updated_at": "2020-02-18T20:50:43Z", "closed_at": "2020-02-18T20:50:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to find the root cause by putting dozens of breakpoints but I failed to see where is it coming from. \r\n\r\nWhen I call the `TokenAuth` mutation, all of my authentication backends are called twice.\r\n\r\nAs far as I can tell, the [`authenticate()`](https://github.com/flavors/django-graphql-jwt/blob/master/graphql_jwt/decorators.py#L92) function from `decorators.token_auth` is called twice, but I don't understand why.\r\n\r\n---\r\nSetup: `django==3.0.3` and `django-graphql-jwt==0.3.0`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/171", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/171/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/171/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/171", "id": 562649420, "node_id": "MDU6SXNzdWU1NjI2NDk0MjA=", "number": 171, "title": "Version 0.3.0 - Queries no updated", "user": {"login": "lovecrafteolin", "id": 55882356, "node_id": "MDQ6VXNlcjU1ODgyMzU2", "avatar_url": "https://avatars1.githubusercontent.com/u/55882356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovecrafteolin", "html_url": "https://github.com/lovecrafteolin", "followers_url": "https://api.github.com/users/lovecrafteolin/followers", "following_url": "https://api.github.com/users/lovecrafteolin/following{/other_user}", "gists_url": "https://api.github.com/users/lovecrafteolin/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovecrafteolin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovecrafteolin/subscriptions", "organizations_url": "https://api.github.com/users/lovecrafteolin/orgs", "repos_url": "https://api.github.com/users/lovecrafteolin/repos", "events_url": "https://api.github.com/users/lovecrafteolin/events{/privacy}", "received_events_url": "https://api.github.com/users/lovecrafteolin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-10T15:46:15Z", "updated_at": "2020-04-04T10:19:48Z", "closed_at": "2020-04-04T10:19:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI have installed the version 0.3.0 and I don't get the new parameters like refreshExpiresIn\r\nI sure that I do something wrong :(\r\n![image](https://user-images.githubusercontent.com/55882356/74165026-cec87a00-4c24-11ea-8096-a4cdb365e9de.png)\r\n\r\n\r\nSystem information\r\nOperating system: Windows 10\r\nPython version: 3.8.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/168", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/168/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/168/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/168/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/168", "id": 559274705, "node_id": "MDU6SXNzdWU1NTkyNzQ3MDU=", "number": 168, "title": "Setting JWT_HIDE_TOKEN_FIELDS to True raises invalid keyword argument when calling RefreshToken", "user": {"login": "JSeam2", "id": 22354889, "node_id": "MDQ6VXNlcjIyMzU0ODg5", "avatar_url": "https://avatars3.githubusercontent.com/u/22354889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JSeam2", "html_url": "https://github.com/JSeam2", "followers_url": "https://api.github.com/users/JSeam2/followers", "following_url": "https://api.github.com/users/JSeam2/following{/other_user}", "gists_url": "https://api.github.com/users/JSeam2/gists{/gist_id}", "starred_url": "https://api.github.com/users/JSeam2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JSeam2/subscriptions", "organizations_url": "https://api.github.com/users/JSeam2/orgs", "repos_url": "https://api.github.com/users/JSeam2/repos", "events_url": "https://api.github.com/users/JSeam2/events{/privacy}", "received_events_url": "https://api.github.com/users/JSeam2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-03T19:07:46Z", "updated_at": "2020-02-03T20:59:29Z", "closed_at": "2020-02-03T20:59:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is with regards to the recent improvements regarding refresh tokens. Setting `JWT_HIDE_TOKEN_FIELDS: True` in `settings.py` results in an invalid keyword argument `'token' is an invalid keyword argument for Refresh`\r\n\r\nHere is the traceback for more details.\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/jseam/miniconda3/envs/grapqhl-eg/lib/python3.7/site-packages/promise/promise.py\", line 489, in _resolve_from_executor\r\n    executor(resolve, reject)\r\n  File \"/Users/jseam/miniconda3/envs/grapqhl-eg/lib/python3.7/site-packages/promise/promise.py\", line 756, in executor\r\n    return resolve(f(*args, **kwargs))\r\n  File \"/Users/jseam/miniconda3/envs/grapqhl-eg/lib/python3.7/site-packages/graphql/execution/middleware.py\", line 75, in make_it_promise\r\n    return next(*args, **kwargs)\r\n  File \"/Users/jseam/miniconda3/envs/grapqhl-eg/lib/python3.7/site-packages/graphql_jwt/mutations.py\", line 60, in mutate\r\n    return cls.refresh(*arg, **kwargs)\r\n  File \"/Users/jseam/miniconda3/envs/grapqhl-eg/lib/python3.7/site-packages/graphql_jwt/decorators.py\", line 151, in wrapper\r\n    result = f(cls, root, info, **kwargs)\r\n  File \"/Users/jseam/miniconda3/envs/grapqhl-eg/lib/python3.7/site-packages/graphql_jwt/decorators.py\", line 140, in wrapper\r\n    result = f(cls, root, info, **kwargs)\r\n  File \"/Users/jseam/miniconda3/envs/grapqhl-eg/lib/python3.7/site-packages/graphql_jwt/decorators.py\", line 129, in wrapper\r\n    result = f(cls, *args, **kwargs)\r\n  File \"/Users/jseam/miniconda3/envs/grapqhl-eg/lib/python3.7/site-packages/graphql_jwt/refresh_token/decorators.py\", line 20, in wrapper\r\n    return f(cls, root, info, refresh_token, *args, **kwargs)\r\n  File \"/Users/jseam/miniconda3/envs/grapqhl-eg/lib/python3.7/site-packages/graphql_jwt/refresh_token/mixins.py\", line 61, in refresh\r\n    refresh_token=new_refresh_token,\r\n  File \"/Users/jseam/miniconda3/envs/grapqhl-eg/lib/python3.7/site-packages/graphene/types/objecttype.py\", line 171, in __init__\r\n    list(kwargs)[0], self.__class__.__name__\r\ngraphql.error.located_error.GraphQLLocatedError: 'token' is an invalid keyword argument for Refresh\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/163", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/163/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/163/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/163", "id": 555127801, "node_id": "MDU6SXNzdWU1NTUxMjc4MDE=", "number": 163, "title": "Getting more maintainers onboard", "user": {"login": "JSeam2", "id": 22354889, "node_id": "MDQ6VXNlcjIyMzU0ODg5", "avatar_url": "https://avatars3.githubusercontent.com/u/22354889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JSeam2", "html_url": "https://github.com/JSeam2", "followers_url": "https://api.github.com/users/JSeam2/followers", "following_url": "https://api.github.com/users/JSeam2/following{/other_user}", "gists_url": "https://api.github.com/users/JSeam2/gists{/gist_id}", "starred_url": "https://api.github.com/users/JSeam2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JSeam2/subscriptions", "organizations_url": "https://api.github.com/users/JSeam2/orgs", "repos_url": "https://api.github.com/users/JSeam2/repos", "events_url": "https://api.github.com/users/JSeam2/events{/privacy}", "received_events_url": "https://api.github.com/users/JSeam2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-25T19:33:34Z", "updated_at": "2020-02-01T20:39:55Z", "closed_at": "2020-02-01T20:39:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "@mongkok will you be looking into getting more maintainers onboard? The library you've built is fantastic, but there may be quite a number of problems that people are facing and are looking to fix. As a result, I believe quite a number of us are resorting to using our own forks instead. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/162", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/162/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/162/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/162/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/162", "id": 552706855, "node_id": "MDU6SXNzdWU1NTI3MDY4NTU=", "number": 162, "title": "Cannot read JWT token for refresh", "user": {"login": "raynear", "id": 26081025, "node_id": "MDQ6VXNlcjI2MDgxMDI1", "avatar_url": "https://avatars1.githubusercontent.com/u/26081025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raynear", "html_url": "https://github.com/raynear", "followers_url": "https://api.github.com/users/raynear/followers", "following_url": "https://api.github.com/users/raynear/following{/other_user}", "gists_url": "https://api.github.com/users/raynear/gists{/gist_id}", "starred_url": "https://api.github.com/users/raynear/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raynear/subscriptions", "organizations_url": "https://api.github.com/users/raynear/orgs", "repos_url": "https://api.github.com/users/raynear/repos", "events_url": "https://api.github.com/users/raynear/events{/privacy}", "received_events_url": "https://api.github.com/users/raynear/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-21T08:50:17Z", "updated_at": "2020-02-03T09:54:14Z", "closed_at": "2020-02-03T09:54:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\n\r\nI want to refresh my JWT token.\r\nbut I cannot read JWT. because it's httponly cookie.\r\nand I set jwt_cookie on urls.py from django.\r\n\r\npath(r'graphql/', jwt_cookie(GraphQLView.as_view(graphiql=True, schema=schema)))\r\n\r\nclass Mutation(board.schema.MyMutation, graphene.ObjectType):\r\n    token_auth = graphql_jwt.ObtainJSONWebToken.Field()\r\n    verify_token = graphql_jwt.Verify.Field()\r\n    refresh_token = graphql_jwt.Refresh.Field()\r\n\r\n\r\nI cannot understand what is problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/161", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/161/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/161/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/161/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/161", "id": 549830598, "node_id": "MDU6SXNzdWU1NDk4MzA1OTg=", "number": 161, "title": "module 'jwt' has no attribute 'encode'", "user": {"login": "dev-olly", "id": 38127625, "node_id": "MDQ6VXNlcjM4MTI3NjI1", "avatar_url": "https://avatars1.githubusercontent.com/u/38127625?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dev-olly", "html_url": "https://github.com/dev-olly", "followers_url": "https://api.github.com/users/dev-olly/followers", "following_url": "https://api.github.com/users/dev-olly/following{/other_user}", "gists_url": "https://api.github.com/users/dev-olly/gists{/gist_id}", "starred_url": "https://api.github.com/users/dev-olly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dev-olly/subscriptions", "organizations_url": "https://api.github.com/users/dev-olly/orgs", "repos_url": "https://api.github.com/users/dev-olly/repos", "events_url": "https://api.github.com/users/dev-olly/events{/privacy}", "received_events_url": "https://api.github.com/users/dev-olly/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-14T21:31:59Z", "updated_at": "2020-02-01T20:37:30Z", "closed_at": "2020-02-01T20:37:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Recently i noticed this started with the **TokenAuth** Mutation, please what can be done", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/159", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/159/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/159/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/159/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/159", "id": 541479491, "node_id": "MDU6SXNzdWU1NDE0Nzk0OTE=", "number": 159, "title": "Refresh token implementation", "user": {"login": "patryk-tech", "id": 47309236, "node_id": "MDQ6VXNlcjQ3MzA5MjM2", "avatar_url": "https://avatars3.githubusercontent.com/u/47309236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patryk-tech", "html_url": "https://github.com/patryk-tech", "followers_url": "https://api.github.com/users/patryk-tech/followers", "following_url": "https://api.github.com/users/patryk-tech/following{/other_user}", "gists_url": "https://api.github.com/users/patryk-tech/gists{/gist_id}", "starred_url": "https://api.github.com/users/patryk-tech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patryk-tech/subscriptions", "organizations_url": "https://api.github.com/users/patryk-tech/orgs", "repos_url": "https://api.github.com/users/patryk-tech/repos", "events_url": "https://api.github.com/users/patryk-tech/events{/privacy}", "received_events_url": "https://api.github.com/users/patryk-tech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-12-22T17:24:29Z", "updated_at": "2020-04-04T10:11:06Z", "closed_at": "2020-04-04T10:11:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hey! First and foremost, I hope this issue doesn't come off as a complaint, as I quite like the direction this project is going, the quality of the code, test coverage, etc.\r\n\r\nThat said, I do think the way the refresh token is handled could be improved in a few areas.\r\n\r\n- The `tokenAuth` mutation can return a refresh token. However, it does not set the `JWT-refresh-token` cookie.\r\n- The `refreshToken` mutation can return the token, *and* sets the cookie correctly. However, it generates a new refresh token with every call.\r\n- This means that in order to get a `JWT-refresh-token`, you need to first send a `tokenAuth` mutation, then a `refreshToken` mutation, and you get two different tokens. Running another `refreshToken` generates a new token.\r\n- When using *long running refresh tokens*, this pollutes the database (IMO). For example, if you have 10,000 users refreshing a token every 5 minutes for 8 hours a day, during 250 work days (e.g. if they use your app all day for work), you would get 240,000,000 tokens per year. This does not scale well. It also means that you may have millions of valid tokens at any one time.\r\n- The refresh token is returned as part of the payload. Personally, I think it should be returned in a cookie only, as that would offer some protection against client-side attacks.\r\n- Relatedly, the `refreshToken` mutation expects a valid token as part of its parameters, which means that the token *has* to be exposed.\r\n\r\nAlso, the cookie currently feels kind of pointless to me (although I am admittedly far from a JWT expert, and this may be *me* misunderstanding the current implementation). Here is my understanding.\r\n\r\n- Saving the JWT inside a cookie makes it vulnerable to CSRF attacks (although Django has pretty good CSRF protection, decreasing the attack surface is always good).\r\n- The cookies are HttpOnly (as they should be), meaning they cannot be accessed from JS. This protects them from XSS, but also means that JS frameworks cannot read them to request a refresh.\r\n- The package does not read the cookies (as far as I can tell) or offer a way to read them (of course, this can be done in Django, but I think the JWT package should handle that). In that case, is there even a point in setting them?\r\n\r\nA few things I see that could improve the current implementation:\r\n\r\n- Return a refresh cookie from the `tokenAuth` mutation **if** the `refreshToken` query is requested.\r\n- Add a \"minimum age before refresh\" setting. Then, if you have a long running refresh token with a validity of e.g. 60 days, and give it a minimum age of 1 day, your 10,000 users would only get a new token every ~59 days and not every 5 minutes - closer to 60,000 tokens per year.\r\n- Modify the current `refreshToken` mutation to make the `refreshToken` parameter optional, **or** add a mutation `refreshTokenFromCookie`, and have those read the request's cookies instead. Then refreshes could be handled silently.\r\n- Add a Setting to prevent returning the refresh token in the payload? Then people like me who do not like tokens being client-side accessible could disable it.\r\n\r\nThese are all ideas, and I am just spitballing. I am not asking you to implement all these features - I would be more than happy to contribute to this project and do it myself. As I am not really a fan of project fragmentation, I'd rather volunteer to help here and see my changes pulled upstream than manage my own fork.\r\n\r\nAnyway, let me know what you think of these ideas, and if there's anything you'd like me to do. I'll try and get started on a few of those points locally in the meantime.\r\n\r\nBest regards,\r\nPat", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/156", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/156/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/156/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/156/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/156", "id": 534822341, "node_id": "MDU6SXNzdWU1MzQ4MjIzNDE=", "number": 156, "title": "Graphql-core 3.0.1", "user": {"login": "BfutureP", "id": 34347976, "node_id": "MDQ6VXNlcjM0MzQ3OTc2", "avatar_url": "https://avatars3.githubusercontent.com/u/34347976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BfutureP", "html_url": "https://github.com/BfutureP", "followers_url": "https://api.github.com/users/BfutureP/followers", "following_url": "https://api.github.com/users/BfutureP/following{/other_user}", "gists_url": "https://api.github.com/users/BfutureP/gists{/gist_id}", "starred_url": "https://api.github.com/users/BfutureP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BfutureP/subscriptions", "organizations_url": "https://api.github.com/users/BfutureP/orgs", "repos_url": "https://api.github.com/users/BfutureP/repos", "events_url": "https://api.github.com/users/BfutureP/events{/privacy}", "received_events_url": "https://api.github.com/users/BfutureP/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-09T10:11:05Z", "updated_at": "2020-02-01T22:48:51Z", "closed_at": "2020-02-01T22:48:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "It doesn't support graphql-core 3.0.1 where graphene v3 required graphql-core 3.0.1.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/155", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/155/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/155/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/155/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/155", "id": 533929144, "node_id": "MDU6SXNzdWU1MzM5MjkxNDQ=", "number": 155, "title": "How to use with django-cognito-jwt?", "user": {"login": "elcolie", "id": 18206728, "node_id": "MDQ6VXNlcjE4MjA2NzI4", "avatar_url": "https://avatars0.githubusercontent.com/u/18206728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elcolie", "html_url": "https://github.com/elcolie", "followers_url": "https://api.github.com/users/elcolie/followers", "following_url": "https://api.github.com/users/elcolie/following{/other_user}", "gists_url": "https://api.github.com/users/elcolie/gists{/gist_id}", "starred_url": "https://api.github.com/users/elcolie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elcolie/subscriptions", "organizations_url": "https://api.github.com/users/elcolie/orgs", "repos_url": "https://api.github.com/users/elcolie/repos", "events_url": "https://api.github.com/users/elcolie/events{/privacy}", "received_events_url": "https://api.github.com/users/elcolie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-06T12:11:16Z", "updated_at": "2019-12-06T12:29:53Z", "closed_at": "2019-12-06T12:29:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can I use `djagno-graphql-jwt` with  `django-cognito-jwt`?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/150", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/150/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/150/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/150/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/150", "id": 531655052, "node_id": "MDU6SXNzdWU1MzE2NTUwNTI=", "number": 150, "title": "Django 3.0 incompatibility", "user": {"login": "lassesteffen", "id": 29383763, "node_id": "MDQ6VXNlcjI5MzgzNzYz", "avatar_url": "https://avatars1.githubusercontent.com/u/29383763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lassesteffen", "html_url": "https://github.com/lassesteffen", "followers_url": "https://api.github.com/users/lassesteffen/followers", "following_url": "https://api.github.com/users/lassesteffen/following{/other_user}", "gists_url": "https://api.github.com/users/lassesteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/lassesteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lassesteffen/subscriptions", "organizations_url": "https://api.github.com/users/lassesteffen/orgs", "repos_url": "https://api.github.com/users/lassesteffen/repos", "events_url": "https://api.github.com/users/lassesteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/lassesteffen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-12-03T01:46:53Z", "updated_at": "2019-12-09T17:27:10Z", "closed_at": "2019-12-05T14:07:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Django just released version 3 of their framework https://docs.djangoproject.com/en/3.0/releases/3.0/\r\n\r\nOne change is : \r\n> django.utils.six - Remove usage of this vendored library or switch to six.\r\n> django.utils.encoding.python_2_unicode_compatible() - Alias of six.python_2_unicode_compatible().\r\n\r\nThis breaks this library because it does import six in some places.\r\n\r\nIs there anything I can do to get this fixed?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/148", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/148/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/148/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/148", "id": 523356145, "node_id": "MDU6SXNzdWU1MjMzNTYxNDU=", "number": 148, "title": "Example for asymmetric algorithms", "user": {"login": "fabull86", "id": 33875110, "node_id": "MDQ6VXNlcjMzODc1MTEw", "avatar_url": "https://avatars1.githubusercontent.com/u/33875110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabull86", "html_url": "https://github.com/fabull86", "followers_url": "https://api.github.com/users/fabull86/followers", "following_url": "https://api.github.com/users/fabull86/following{/other_user}", "gists_url": "https://api.github.com/users/fabull86/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabull86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabull86/subscriptions", "organizations_url": "https://api.github.com/users/fabull86/orgs", "repos_url": "https://api.github.com/users/fabull86/repos", "events_url": "https://api.github.com/users/fabull86/events{/privacy}", "received_events_url": "https://api.github.com/users/fabull86/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-15T09:29:10Z", "updated_at": "2020-02-03T10:53:19Z", "closed_at": "2020-02-03T10:53:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\n\r\ncould you please share an example how to enable the usage of rsa or ec algorithm? It would be very helpful for me. \r\n\r\nThanks,\r\nFabian", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/147", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/147/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/147/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/147", "id": 516205540, "node_id": "MDU6SXNzdWU1MTYyMDU1NDA=", "number": 147, "title": "Cannot change the error message on token auth", "user": {"login": "edmondlaja-quantix", "id": 55836550, "node_id": "MDQ6VXNlcjU1ODM2NTUw", "avatar_url": "https://avatars0.githubusercontent.com/u/55836550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edmondlaja-quantix", "html_url": "https://github.com/edmondlaja-quantix", "followers_url": "https://api.github.com/users/edmondlaja-quantix/followers", "following_url": "https://api.github.com/users/edmondlaja-quantix/following{/other_user}", "gists_url": "https://api.github.com/users/edmondlaja-quantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/edmondlaja-quantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edmondlaja-quantix/subscriptions", "organizations_url": "https://api.github.com/users/edmondlaja-quantix/orgs", "repos_url": "https://api.github.com/users/edmondlaja-quantix/repos", "events_url": "https://api.github.com/users/edmondlaja-quantix/events{/privacy}", "received_events_url": "https://api.github.com/users/edmondlaja-quantix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-01T16:08:31Z", "updated_at": "2020-02-02T12:22:25Z", "closed_at": "2020-02-01T23:01:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello everyone,\r\n\r\nI am trying to customise ObtainJSONWebToken so that when I call the tokenAuth and have invalid credentials, I would like to be able to have my own Exception that raises. \r\nI am trying using this [link](https://django-graphql-jwt.domake.io/en/latest/customizing.html).\r\n\r\nIs it possible, if yes how?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/146", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/146/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/146/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/146/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/146", "id": 514609090, "node_id": "MDU6SXNzdWU1MTQ2MDkwOTA=", "number": 146, "title": "Custom settings don't seem to work", "user": {"login": "fabienheureux", "id": 1702255, "node_id": "MDQ6VXNlcjE3MDIyNTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1702255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabienheureux", "html_url": "https://github.com/fabienheureux", "followers_url": "https://api.github.com/users/fabienheureux/followers", "following_url": "https://api.github.com/users/fabienheureux/following{/other_user}", "gists_url": "https://api.github.com/users/fabienheureux/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabienheureux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabienheureux/subscriptions", "organizations_url": "https://api.github.com/users/fabienheureux/orgs", "repos_url": "https://api.github.com/users/fabienheureux/repos", "events_url": "https://api.github.com/users/fabienheureux/events{/privacy}", "received_events_url": "https://api.github.com/users/fabienheureux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-30T11:55:48Z", "updated_at": "2019-10-31T09:43:12Z", "closed_at": "2019-10-31T09:43:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI am using 0.2.2 and I wanted to use custom settings for `JWT_PAYLOAD_HANDLER`. Unfortunately, my custom settings do not seem to be read by `django-graphql-jwt`. \r\n\r\nIs the `GRAPHQL_JWT` setting need to be at a specific location in `settings.py `? \r\nI have all my other django settings in the same settings.py, and every other setting is working as expected.\r\n\r\nBelow my code:\r\n```python\r\n# backend.settings.py\r\nGRAPHQL_JWT = {\r\n  'JWT_PAYLOAD_HANDLER': 'core.utils.jwt_payload',\r\n}\r\n```\r\n```python\r\n# core.utils.py\r\ndef jwt_payload(user, context=None):\r\n    username = user.get_username()\r\n\r\n    if hasattr(username, 'pk'):\r\n        username = username.pk\r\n\r\n\r\n    payload = {\r\n        user.USERNAME_FIELD: username,\r\n        'exp': datetime.utcnow() + jwt_settings.JWT_EXPIRATION_DELTA,\r\n        'id': user.id,\r\n    }\r\n\r\n    if jwt_settings.JWT_ALLOW_REFRESH:\r\n        payload['origIat'] = timegm(datetime.utcnow().utctimetuple())\r\n\r\n    if jwt_settings.JWT_AUDIENCE is not None:\r\n        payload['aud'] = jwt_settings.JWT_AUDIENCE\r\n\r\n    if jwt_settings.JWT_ISSUER is not None:\r\n        payload['iss'] = jwt_settings.JWT_ISSUER\r\n\r\n    return payload\r\n```\r\n\r\nWhen I run the `verifyToken` mutation, this function is not called.\r\nAny thoughts ? Thanks in advance :+1: ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/145", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/145/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/145/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/145/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/145", "id": 510889884, "node_id": "MDU6SXNzdWU1MTA4ODk4ODQ=", "number": 145, "title": "Get refreshToken in resolve custom method for long term running refresh tokens", "user": {"login": "ckristhoff", "id": 2814894, "node_id": "MDQ6VXNlcjI4MTQ4OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2814894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ckristhoff", "html_url": "https://github.com/ckristhoff", "followers_url": "https://api.github.com/users/ckristhoff/followers", "following_url": "https://api.github.com/users/ckristhoff/following{/other_user}", "gists_url": "https://api.github.com/users/ckristhoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/ckristhoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ckristhoff/subscriptions", "organizations_url": "https://api.github.com/users/ckristhoff/orgs", "repos_url": "https://api.github.com/users/ckristhoff/repos", "events_url": "https://api.github.com/users/ckristhoff/events{/privacy}", "received_events_url": "https://api.github.com/users/ckristhoff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-22T20:28:17Z", "updated_at": "2020-02-03T16:02:39Z", "closed_at": "2020-02-03T16:02:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi everyone\r\n\r\nI'm trying to get the token and refreshToken in my custom resolve method.\r\nHow can I get that?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/144", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/144/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/144/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/144", "id": 509570814, "node_id": "MDU6SXNzdWU1MDk1NzA4MTQ=", "number": 144, "title": "Decorator for checking group permissions", "user": {"login": "prabhupant", "id": 19776278, "node_id": "MDQ6VXNlcjE5Nzc2Mjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/19776278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prabhupant", "html_url": "https://github.com/prabhupant", "followers_url": "https://api.github.com/users/prabhupant/followers", "following_url": "https://api.github.com/users/prabhupant/following{/other_user}", "gists_url": "https://api.github.com/users/prabhupant/gists{/gist_id}", "starred_url": "https://api.github.com/users/prabhupant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prabhupant/subscriptions", "organizations_url": "https://api.github.com/users/prabhupant/orgs", "repos_url": "https://api.github.com/users/prabhupant/repos", "events_url": "https://api.github.com/users/prabhupant/events{/privacy}", "received_events_url": "https://api.github.com/users/prabhupant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-20T09:42:39Z", "updated_at": "2020-04-04T10:09:15Z", "closed_at": "2020-04-04T10:09:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Feature Request.\r\n\r\nRecently I was working on a project using django-graphql-jwt and I had to write my own decorator to check group permissions for users. I believe adding this decorator to the project will come in handy for other developers :smile:\r\n\r\n**I am working on it**. Please assign this to me ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/141", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/141/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/141/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/141", "id": 505569069, "node_id": "MDU6SXNzdWU1MDU1NjkwNjk=", "number": 141, "title": "jwt_cookie creates two/three refresh tokens upon refresh", "user": {"login": "coltonbh", "id": 16160630, "node_id": "MDQ6VXNlcjE2MTYwNjMw", "avatar_url": "https://avatars0.githubusercontent.com/u/16160630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coltonbh", "html_url": "https://github.com/coltonbh", "followers_url": "https://api.github.com/users/coltonbh/followers", "following_url": "https://api.github.com/users/coltonbh/following{/other_user}", "gists_url": "https://api.github.com/users/coltonbh/gists{/gist_id}", "starred_url": "https://api.github.com/users/coltonbh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coltonbh/subscriptions", "organizations_url": "https://api.github.com/users/coltonbh/orgs", "repos_url": "https://api.github.com/users/coltonbh/repos", "events_url": "https://api.github.com/users/coltonbh/events{/privacy}", "received_events_url": "https://api.github.com/users/coltonbh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-11T00:04:32Z", "updated_at": "2019-10-19T20:30:34Z", "closed_at": "2019-10-19T20:30:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When wrapping the `GraphQL.as_view()` in the `jwt_cookie` wrapper like so:\r\n`urlpatterns = [\r\n    path('graphql/', cookie_wrapper(GraphQLView.as_view(graphiql=True))),\r\n]`\r\n\r\nThe mutation to refreshToken creates two refresh tokens in the database (using the long running refresh token). This is caused by the jwt_cookie decorator. One token is created during the `response = view_func(request, *args, **kwargs)` step for the response. Another is created when `refresh_token = request.jwt_refresh_token` is called to set the cookie (the cookie and the returned response do not match). After removing the `refresh_token = request.jwt_refresh_token` line I still saw duplicate token creation and I believe this might be caused by the lazy function set at request.jwt_refresh_token evaluating when the wrapper is returned.\r\n\r\nI would be nice to have access to the refresh token that gets created during the request, if requested, rather than the lazy function that generates a new one for the cookie.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/139", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/139/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/139/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/139", "id": 502932863, "node_id": "MDU6SXNzdWU1MDI5MzI4NjM=", "number": 139, "title": "Error on wrapping GraphQLView.as_view with login_required decorator", "user": {"login": "charl3sj", "id": 1017170, "node_id": "MDQ6VXNlcjEwMTcxNzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1017170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charl3sj", "html_url": "https://github.com/charl3sj", "followers_url": "https://api.github.com/users/charl3sj/followers", "following_url": "https://api.github.com/users/charl3sj/following{/other_user}", "gists_url": "https://api.github.com/users/charl3sj/gists{/gist_id}", "starred_url": "https://api.github.com/users/charl3sj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charl3sj/subscriptions", "organizations_url": "https://api.github.com/users/charl3sj/orgs", "repos_url": "https://api.github.com/users/charl3sj/repos", "events_url": "https://api.github.com/users/charl3sj/events{/privacy}", "received_events_url": "https://api.github.com/users/charl3sj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-05T08:11:37Z", "updated_at": "2019-10-06T15:47:05Z", "closed_at": "2019-10-06T15:47:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to setup a private GraphQL endpoint like so:\r\n```\r\nurlpatterns += [\r\n    ....\r\n    path('graphql-staff', login_required(GraphQLView.as_view(schema=private_schema, graphiql=True)))\r\n]\r\n```\r\n\r\nHowever, when I try to query that endpoint, I get the following error:\r\n```\r\nERROR 2019-10-05 13:31:16,991 log 63362 123145503166464 Internal Server Error: /graphql-staff\r\nTraceback (most recent call last):\r\n  File \"/Users/.../lib/python3.7/site-packages/django/core/handlers/exception.py\", line 34, in inner\r\n    response = get_response(request)\r\n  File \"/Users/.../lib/python3.7/site-packages/django/core/handlers/base.py\", line 115, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/Users/.../lib/python3.7/site-packages/django/core/handlers/base.py\", line 113, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py\", line 74, in inner\r\n    return func(*args, **kwds)\r\n  File \"/Users/.../lib/python3.7/site-packages/graphql_jwt/decorators.py\", line 30, in wrapper\r\n    info = next(arg for arg in args if isinstance(arg, ResolveInfo))\r\nStopIteration\r\n```\r\n\r\nSettings:\r\n```\r\nGRAPHENE = {\r\n    'MIDDLEWARE': [\r\n        'graphql_jwt.middleware.JSONWebTokenMiddleware',\r\n    ]\r\n}\r\n\r\nGRAPHQL_JWT = {\r\n    'JWT_VERIFY_EXPIRATION': True,\r\n    'JWT_LONG_RUNNING_REFRESH_TOKEN': True,\r\n    'JWT_EXPIRATION_DELTA': timedelta(minutes=1),\r\n    'JWT_REFRESH_EXPIRATION_DELTA': timedelta(minutes=5),\r\n}\r\n```\r\n\r\nI'm not sure how to go about fixing this... any pointers would be appreciated!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/138", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/138/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/138/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/138", "id": 502087343, "node_id": "MDU6SXNzdWU1MDIwODczNDM=", "number": 138, "title": "Since DjangoMiddleware was removed, other middlewares report AnonymousUser for request.user", "user": {"login": "megri", "id": 1839427, "node_id": "MDQ6VXNlcjE4Mzk0Mjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1839427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/megri", "html_url": "https://github.com/megri", "followers_url": "https://api.github.com/users/megri/followers", "following_url": "https://api.github.com/users/megri/following{/other_user}", "gists_url": "https://api.github.com/users/megri/gists{/gist_id}", "starred_url": "https://api.github.com/users/megri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/megri/subscriptions", "organizations_url": "https://api.github.com/users/megri/orgs", "repos_url": "https://api.github.com/users/megri/repos", "events_url": "https://api.github.com/users/megri/events{/privacy}", "received_events_url": "https://api.github.com/users/megri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-03T14:03:53Z", "updated_at": "2019-10-19T20:24:17Z", "closed_at": "2019-10-19T20:24:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "My middleware list used to look like this:\r\n\r\n```python\r\nMIDDLEWARE = [\r\n# \u2026 more middlewares\r\n    'graphql_jwt.middleware.JSONWebTokenMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'my_custom_middleware1',\r\n    'my_custom_middleware2',\r\n# \u2026 more middlewares\r\n]\r\n```\r\n\r\nSince the change to remove DjangoMiddleware, the server won't start if I leave in `graphql_jwt.middleware.JSONWebTokenMiddleware` and if I remove it my custom middlewares report that `request.user == AnonymousUser`.\r\n\r\nI'm not sure how to upgrade to 0.2.2 with these changes. 0.2.1 seems to allow `graphql_jwt.middleware.JSONWebTokenMiddleware` in the \"django middleware section\".", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/137", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/137/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/137/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/137/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/137", "id": 500571231, "node_id": "MDU6SXNzdWU1MDA1NzEyMzE=", "number": 137, "title": "How to customize the input of JSONWebTokenMutation", "user": {"login": "ChangshengYan", "id": 37908328, "node_id": "MDQ6VXNlcjM3OTA4MzI4", "avatar_url": "https://avatars3.githubusercontent.com/u/37908328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChangshengYan", "html_url": "https://github.com/ChangshengYan", "followers_url": "https://api.github.com/users/ChangshengYan/followers", "following_url": "https://api.github.com/users/ChangshengYan/following{/other_user}", "gists_url": "https://api.github.com/users/ChangshengYan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChangshengYan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChangshengYan/subscriptions", "organizations_url": "https://api.github.com/users/ChangshengYan/orgs", "repos_url": "https://api.github.com/users/ChangshengYan/repos", "events_url": "https://api.github.com/users/ChangshengYan/events{/privacy}", "received_events_url": "https://api.github.com/users/ChangshengYan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-30T23:08:32Z", "updated_at": "2020-06-25T04:40:11Z", "closed_at": "2019-10-19T20:28:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nI have another question about customizing the inputs for `JSONWebTokenMutation`. From the documentation I can use `username` and `password` to authenticate a user. But I wanted to use a ticket that is issued by a third-party server. The ticket is passed to Django for validation with that third-party server and returns back the username, then Django returns back the username and token to the frontend. In this case, how could to customize the input for generating the JWT?\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/136", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/136/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/136/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/136", "id": 500558472, "node_id": "MDU6SXNzdWU1MDA1NTg0NzI=", "number": 136, "title": "Permission for Mutation created from Serializer", "user": {"login": "ChangshengYan", "id": 37908328, "node_id": "MDQ6VXNlcjM3OTA4MzI4", "avatar_url": "https://avatars3.githubusercontent.com/u/37908328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChangshengYan", "html_url": "https://github.com/ChangshengYan", "followers_url": "https://api.github.com/users/ChangshengYan/followers", "following_url": "https://api.github.com/users/ChangshengYan/following{/other_user}", "gists_url": "https://api.github.com/users/ChangshengYan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChangshengYan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChangshengYan/subscriptions", "organizations_url": "https://api.github.com/users/ChangshengYan/orgs", "repos_url": "https://api.github.com/users/ChangshengYan/repos", "events_url": "https://api.github.com/users/ChangshengYan/events{/privacy}", "received_events_url": "https://api.github.com/users/ChangshengYan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-30T22:26:16Z", "updated_at": "2019-10-19T20:29:31Z", "closed_at": "2019-10-19T20:29:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nThis is a really awesome package and I really like it. But I have a question that I cannot find in the documentation. Some of my mutations are created from `SerializerMutation` and it has update & create mutation with it:\r\n\r\n```\r\nfrom graphene_django.rest_framework.mutation import SerializerMutation\r\n\r\nclass MySerializerMutation(SerializerMutation):\r\n    class Meta:\r\n        serializer_class = MySerializer\r\n```\r\n\r\nIn this case, if I want to add permission and authentication to this mutation class I added the following code to the above class:\r\n\r\n```\r\n    @classmethod\r\n    @staff_member_required\r\n    def mutate_and_get_payload(cls, root, info, **input):\r\n        kwargs = cls.get_serializer_kwargs(root, info, **input)\r\n        serializer = cls._meta.serializer_class(**kwargs)\r\n\r\n        if serializer.is_valid():\r\n            return cls.perform_mutate(serializer, info)\r\n        else:\r\n            errors = ErrorType.from_errors(serializer.errors)\r\n\r\n            return cls(errors=errors)\r\n```\r\n\r\nThe only line I added to the source code copied from `SerializerMutation` is `@staff_member_required`, so I was wondering if there's any cleaner way to add this decorator? Do I need to repeatedly copy the classmethod `mutate_and_get_payload` and add `@staff_member_required` to it?\r\n\r\nThank you!\r\nChangsheng", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/134", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/134/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/134/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/134", "id": 499888681, "node_id": "MDU6SXNzdWU0OTk4ODg2ODE=", "number": 134, "title": "Enable extra middleware to be specified in tests", "user": {"login": "dspacejs", "id": 9282837, "node_id": "MDQ6VXNlcjkyODI4Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/9282837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dspacejs", "html_url": "https://github.com/dspacejs", "followers_url": "https://api.github.com/users/dspacejs/followers", "following_url": "https://api.github.com/users/dspacejs/following{/other_user}", "gists_url": "https://api.github.com/users/dspacejs/gists{/gist_id}", "starred_url": "https://api.github.com/users/dspacejs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dspacejs/subscriptions", "organizations_url": "https://api.github.com/users/dspacejs/orgs", "repos_url": "https://api.github.com/users/dspacejs/repos", "events_url": "https://api.github.com/users/dspacejs/events{/privacy}", "received_events_url": "https://api.github.com/users/dspacejs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-29T09:28:39Z", "updated_at": "2019-10-19T21:34:43Z", "closed_at": "2019-10-19T21:34:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "There's no way to add middleware to queries run with `JSONWebTokenClient`. \r\n\r\n[By default `JSONWebTokenMiddleware` is used](https://github.com/flavors/django-graphql-jwt/blob/master/graphql_jwt/testcases.py#L23), but there's no way to add extra middleware.\r\n\r\nHere's a workaround I've written for the meantime:\r\n\r\n```python\r\nclass TestClient(JSONWebTokenClient):\r\n\r\n    def execute(self, query, variables=None, **extra):\r\n        extra.update(self._credentials)\r\n        context = self.post('/', **extra)\r\n        return self._schema.execute(\r\n            query, context=context, variables=variables,\r\n            middleware=[MyCustomMiddleware(), JSONWebTokenMiddleware()],\r\n        )\r\n\r\n\r\nclass TestCase(JSONWebTokenTestCase):\r\n    client_class = TestClient\r\n```\r\n\r\nA simple solution would be adding a `middleware` kwarg to the `execute()` function, then appending that to the list of middleware in `self._schema.execute()`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/133", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/133/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/133/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/133", "id": 497383905, "node_id": "MDU6SXNzdWU0OTczODM5MDU=", "number": 133, "title": "0.2.2 is a breaking change", "user": {"login": "relwell", "id": 232917, "node_id": "MDQ6VXNlcjIzMjkxNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/232917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/relwell", "html_url": "https://github.com/relwell", "followers_url": "https://api.github.com/users/relwell/followers", "following_url": "https://api.github.com/users/relwell/following{/other_user}", "gists_url": "https://api.github.com/users/relwell/gists{/gist_id}", "starred_url": "https://api.github.com/users/relwell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/relwell/subscriptions", "organizations_url": "https://api.github.com/users/relwell/orgs", "repos_url": "https://api.github.com/users/relwell/repos", "events_url": "https://api.github.com/users/relwell/events{/privacy}", "received_events_url": "https://api.github.com/users/relwell/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214974, "node_id": "MDU6TGFiZWw3NDEyMTQ5NzQ=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-23T23:58:23Z", "updated_at": "2019-09-29T19:56:42Z", "closed_at": "2019-09-29T19:49:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using pipenv, when installing a new dependency or removing an old one, there's a chance you'll install this version instead of 0.2.1. This will inexplicably break your existing middleware configurations without any sort of useful error message other than a generic `TypeError: __init__() takes 1 positional argument but 2 were given` coming out of `application = get_wsgi_application()` when `self.load_middleware()` is called.\r\n\r\nThis is a breaking change. It should definitely not be considered a patch update.\r\n\r\nPlease consider adding documentation around this, or introducing a new patch version that handles this error case more gracefully.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/129", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/129/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/129/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/129", "id": 487128823, "node_id": "MDU6SXNzdWU0ODcxMjg4MjM=", "number": 129, "title": "\"AttributeError: '__proxy__' object has no attribute 'created'\" after 0.2.2 update", "user": {"login": "douglasspeights", "id": 52967923, "node_id": "MDQ6VXNlcjUyOTY3OTIz", "avatar_url": "https://avatars0.githubusercontent.com/u/52967923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/douglasspeights", "html_url": "https://github.com/douglasspeights", "followers_url": "https://api.github.com/users/douglasspeights/followers", "following_url": "https://api.github.com/users/douglasspeights/following{/other_user}", "gists_url": "https://api.github.com/users/douglasspeights/gists{/gist_id}", "starred_url": "https://api.github.com/users/douglasspeights/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/douglasspeights/subscriptions", "organizations_url": "https://api.github.com/users/douglasspeights/orgs", "repos_url": "https://api.github.com/users/douglasspeights/repos", "events_url": "https://api.github.com/users/douglasspeights/events{/privacy}", "received_events_url": "https://api.github.com/users/douglasspeights/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214965, "node_id": "MDU6TGFiZWw3NDEyMTQ5NjU=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-08-29T19:10:43Z", "updated_at": "2019-10-20T08:56:35Z", "closed_at": "2019-10-19T20:30:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "After updating to [0.2.2](https://pypi.org/project/django-graphql-jwt/0.2.2/), I'm getting the following Traceback:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/.../python3.7/site-packages/django/core/handlers/exception.py\", line 34, in inner\r\n    response = get_response(request)\r\n  File \"/.../python3.7/site-packages/django/core/handlers/base.py\", line 115, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \".../python3.7/site-packages/django/core/handlers/base.py\", line 113, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \".../python3.7/site-packages/django/views/decorators/csrf.py\", line 54, in wrapped_view\r\n    return view_func(*args, **kwargs)\r\n  File \".../python3.7/site-packages/graphql_jwt/decorators.py\", line 136, in wrapped_view\r\n    expires = refresh_token.created +\\\r\nAttributeError: '__proxy__' object has no attribute 'created\r\n```\r\n\r\nI've added `JWT_REFRESH_EXPIRED_HANDLER` to settings, but still same error.\r\n\r\nAlso, after adding the `revoke_refresh_token` [recommendation](https://django-graphql-jwt.domake.io/en/latest/refresh_token.html?highlight=revoke_refresh_token#one-time-only-use-refresh-token), the token _is_ getting revoked, as subsequent calls (after getting above Traceback error) will fail for `Invalid refresh token` ...\r\n\r\nReverting back to 0.2.1 works as expected.  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/126", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/126/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/126/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/126", "id": 482236300, "node_id": "MDU6SXNzdWU0ODIyMzYzMDA=", "number": 126, "title": "Missing tag for v0.2.2", "user": {"login": "NyanKiyoshi", "id": 6186720, "node_id": "MDQ6VXNlcjYxODY3MjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/6186720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NyanKiyoshi", "html_url": "https://github.com/NyanKiyoshi", "followers_url": "https://api.github.com/users/NyanKiyoshi/followers", "following_url": "https://api.github.com/users/NyanKiyoshi/following{/other_user}", "gists_url": "https://api.github.com/users/NyanKiyoshi/gists{/gist_id}", "starred_url": "https://api.github.com/users/NyanKiyoshi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NyanKiyoshi/subscriptions", "organizations_url": "https://api.github.com/users/NyanKiyoshi/orgs", "repos_url": "https://api.github.com/users/NyanKiyoshi/repos", "events_url": "https://api.github.com/users/NyanKiyoshi/events{/privacy}", "received_events_url": "https://api.github.com/users/NyanKiyoshi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-19T10:40:48Z", "updated_at": "2019-08-26T21:51:25Z", "closed_at": "2019-08-26T21:51:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI noticed the v0.2.2 release (4f8f3b90f53c6b3c4abb77a101587a756d7e26c3) was not tagged and the release note/changelogs don't tell the users about the middleware being no longer a DjangoMiddleware, thus potentially breaking their solution.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/124", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/124/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/124/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/124", "id": 481495082, "node_id": "MDU6SXNzdWU0ODE0OTUwODI=", "number": 124, "title": "Circular dependancy of settings and graphql_jwt", "user": {"login": "a-c-sreedhar-reddy", "id": 16081083, "node_id": "MDQ6VXNlcjE2MDgxMDgz", "avatar_url": "https://avatars3.githubusercontent.com/u/16081083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a-c-sreedhar-reddy", "html_url": "https://github.com/a-c-sreedhar-reddy", "followers_url": "https://api.github.com/users/a-c-sreedhar-reddy/followers", "following_url": "https://api.github.com/users/a-c-sreedhar-reddy/following{/other_user}", "gists_url": "https://api.github.com/users/a-c-sreedhar-reddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/a-c-sreedhar-reddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a-c-sreedhar-reddy/subscriptions", "organizations_url": "https://api.github.com/users/a-c-sreedhar-reddy/orgs", "repos_url": "https://api.github.com/users/a-c-sreedhar-reddy/repos", "events_url": "https://api.github.com/users/a-c-sreedhar-reddy/events{/privacy}", "received_events_url": "https://api.github.com/users/a-c-sreedhar-reddy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-16T08:10:04Z", "updated_at": "2019-08-16T08:21:59Z", "closed_at": "2019-08-16T08:21:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "graphql_jwt requires settings secret key. But because of circular depencancy secretkey is not set. If  graphql_jwt is imported after secretkey in settings.py everything works fine.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/123", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/123/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/123/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/123", "id": 477683600, "node_id": "MDU6SXNzdWU0Nzc2ODM2MDA=", "number": 123, "title": "Email login with custom user model", "user": {"login": "muigaiunaka", "id": 9100605, "node_id": "MDQ6VXNlcjkxMDA2MDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/9100605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/muigaiunaka", "html_url": "https://github.com/muigaiunaka", "followers_url": "https://api.github.com/users/muigaiunaka/followers", "following_url": "https://api.github.com/users/muigaiunaka/following{/other_user}", "gists_url": "https://api.github.com/users/muigaiunaka/gists{/gist_id}", "starred_url": "https://api.github.com/users/muigaiunaka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/muigaiunaka/subscriptions", "organizations_url": "https://api.github.com/users/muigaiunaka/orgs", "repos_url": "https://api.github.com/users/muigaiunaka/repos", "events_url": "https://api.github.com/users/muigaiunaka/events{/privacy}", "received_events_url": "https://api.github.com/users/muigaiunaka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-07T03:10:09Z", "updated_at": "2019-08-07T03:56:18Z", "closed_at": "2019-08-07T03:56:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have set up a custom user model for authentication. User sign up works as expected but login returns an error. When I initially implemented authentication it worked fine with username and password passed into my mutation. Any thoughts or code snippets for making tokenAuth work with email and password?\r\n<img width=\"1425\" alt=\"Screen Shot 2019-08-04 at 10 03 45 PM\" src=\"https://user-images.githubusercontent.com/9100605/62591792-c7ec3380-b89e-11e9-9fda-7d2bff4969cf.png\">\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/121", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/121/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/121/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/121", "id": 476203817, "node_id": "MDU6SXNzdWU0NzYyMDM4MTc=", "number": 121, "title": "token_issued signal", "user": {"login": "chiubaka", "id": 1732408, "node_id": "MDQ6VXNlcjE3MzI0MDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1732408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chiubaka", "html_url": "https://github.com/chiubaka", "followers_url": "https://api.github.com/users/chiubaka/followers", "following_url": "https://api.github.com/users/chiubaka/following{/other_user}", "gists_url": "https://api.github.com/users/chiubaka/gists{/gist_id}", "starred_url": "https://api.github.com/users/chiubaka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chiubaka/subscriptions", "organizations_url": "https://api.github.com/users/chiubaka/orgs", "repos_url": "https://api.github.com/users/chiubaka/repos", "events_url": "https://api.github.com/users/chiubaka/events{/privacy}", "received_events_url": "https://api.github.com/users/chiubaka/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214974, "node_id": "MDU6TGFiZWw3NDEyMTQ5NzQ=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-02T14:19:49Z", "updated_at": "2019-08-17T19:16:29Z", "closed_at": "2019-08-17T19:16:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! I noticed that there's been a recent (2 months ago) addition of a few signals to this project, including a `token_issued` signal. It also looks like there's been some experimentation with other signaling solutions, including providing an option to fire the `user_logged_in` signal upon successful JWT auth.\r\n\r\nI'm interested in having some kind of post-login hook with my token-based auth, so wanted to ask: will either of these features make it into a minor release anytime soon?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/120", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/120/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/120/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/120", "id": 472934755, "node_id": "MDU6SXNzdWU0NzI5MzQ3NTU=", "number": 120, "title": "how do i obtain token during signup?", "user": {"login": "SanskarSans", "id": 23137016, "node_id": "MDQ6VXNlcjIzMTM3MDE2", "avatar_url": "https://avatars1.githubusercontent.com/u/23137016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SanskarSans", "html_url": "https://github.com/SanskarSans", "followers_url": "https://api.github.com/users/SanskarSans/followers", "following_url": "https://api.github.com/users/SanskarSans/following{/other_user}", "gists_url": "https://api.github.com/users/SanskarSans/gists{/gist_id}", "starred_url": "https://api.github.com/users/SanskarSans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SanskarSans/subscriptions", "organizations_url": "https://api.github.com/users/SanskarSans/orgs", "repos_url": "https://api.github.com/users/SanskarSans/repos", "events_url": "https://api.github.com/users/SanskarSans/events{/privacy}", "received_events_url": "https://api.github.com/users/SanskarSans/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214974, "node_id": "MDU6TGFiZWw3NDEyMTQ5NzQ=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-25T15:34:39Z", "updated_at": "2020-06-30T14:00:05Z", "closed_at": "2019-08-17T18:05:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "When user signs up then how do i obtain the token for that user so i can login automatically just after successful signup. \r\n\r\nHere is my registration code\r\n\r\n```python\r\nclass Register(graphene.Mutation):\r\n    class Arguments:\r\n        email = graphene.String(required=True)\r\n        password = graphene.String(required=True)\r\n        password_repeat = graphene.String(required=True)\r\n\r\n    user = graphene.Field(UserQuery)\r\n    token = graphene.String()\r\n    success = graphene.Boolean()\r\n    errors = graphene.List(graphene.String)\r\n\r\n    @staticmethod\r\n    def mutate(self, info, email, password, password_repeat):\r\n        if password == password_repeat:\r\n            try:\r\n                user = User.objects.create(email=email)\r\n                user.set_password(password)\r\n                user.is_active = False\r\n                user.full_clean()\r\n                user.save()\r\n               # i need to pass token as well\r\n                return Register(success=True, user=user)\r\n            except ValidationError as e:\r\n                return Register(success=False, errors=[e])\r\n        return Register(success=False, errors=['password', 'password is not matching'])\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/119", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/119/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/119/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/119", "id": 472795431, "node_id": "MDU6SXNzdWU0NzI3OTU0MzE=", "number": 119, "title": "How do we know how old is the refresh token after it has been issued?", "user": {"login": "roelzkie15", "id": 20513403, "node_id": "MDQ6VXNlcjIwNTEzNDAz", "avatar_url": "https://avatars0.githubusercontent.com/u/20513403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roelzkie15", "html_url": "https://github.com/roelzkie15", "followers_url": "https://api.github.com/users/roelzkie15/followers", "following_url": "https://api.github.com/users/roelzkie15/following{/other_user}", "gists_url": "https://api.github.com/users/roelzkie15/gists{/gist_id}", "starred_url": "https://api.github.com/users/roelzkie15/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roelzkie15/subscriptions", "organizations_url": "https://api.github.com/users/roelzkie15/orgs", "repos_url": "https://api.github.com/users/roelzkie15/repos", "events_url": "https://api.github.com/users/roelzkie15/events{/privacy}", "received_events_url": "https://api.github.com/users/roelzkie15/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-25T10:46:11Z", "updated_at": "2020-02-03T09:54:15Z", "closed_at": "2020-02-03T09:54:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Overview\r\n\r\nBased on the concept found on [Settings](https://django-graphql-jwt.domake.io/en/stable/refresh_token.html#id1) section of Long Running Refresh Token.\r\n\r\n> It means that you need to refresh [access token] every 5 mins and you need to replace your refresh token in 7 days after it has been issued.\r\n\r\nThis will enable user to maintain refresh token session as long as we can refresh it _within_ 7 days (e.g.  `'JWT_REFRESH_EXPIRATION_DELTA': timedelta(days=7)`).\r\n\r\nNote that you **can't** call `refreshToken(refreshToken: $refreshToken) ` with an expired refresh token as this may result in `\"message\": \"Refresh token is expired\"`.\r\n\r\n## Problem\r\nNow the struggle here is how do we know that the refresh token will expire in 7 days? So we can create a logic to check if it has 1 day left for the session then trigger a `refreshToken()` mutation?\r\n\r\n## Conclusion\r\nWithout knowing the expiration date of a refresh token developers will have to integrate in storing the date after the refresh token has been issued in the client side to determine how old the refresh token is. \r\n\r\nWell if I  am missing something maybe there is already a simple approach how to handle the checking of refresh token expiration date?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/118", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/118/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/118/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/118", "id": 470008515, "node_id": "MDU6SXNzdWU0NzAwMDg1MTU=", "number": 118, "title": "`WARNING: Added kwargs argument to JSONWebTokenMutation.resolve()` is unclear", "user": {"login": "relwell", "id": 232917, "node_id": "MDQ6VXNlcjIzMjkxNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/232917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/relwell", "html_url": "https://github.com/relwell", "followers_url": "https://api.github.com/users/relwell/followers", "following_url": "https://api.github.com/users/relwell/following{/other_user}", "gists_url": "https://api.github.com/users/relwell/gists{/gist_id}", "starred_url": "https://api.github.com/users/relwell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/relwell/subscriptions", "organizations_url": "https://api.github.com/users/relwell/orgs", "repos_url": "https://api.github.com/users/relwell/repos", "events_url": "https://api.github.com/users/relwell/events{/privacy}", "received_events_url": "https://api.github.com/users/relwell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-18T21:54:28Z", "updated_at": "2019-10-19T20:42:12Z", "closed_at": "2019-10-19T20:42:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there! Thanks for this great package. It looks like the most recent update has caused an error in the `ObtainJSONWebToken` mutation. I've needed to revert to version 0.2.0 for now, but I'm hoping to understand what changes I need to make to continue using future versions of this package.\r\n\r\nThis seems backwards-incompatible. If the versioning is intended to follow semver, I have some concerns about the update being considered a patch instead of a minor or major update.\r\n\r\nCould you please update the changelog with a reference to the commit where this changed, or instructions for how to update client code? Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/117", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/117/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/117/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/117", "id": 468359328, "node_id": "MDU6SXNzdWU0NjgzNTkzMjg=", "number": 117, "title": "Invalid credentials raises exception", "user": {"login": "ckristhoff", "id": 2814894, "node_id": "MDQ6VXNlcjI4MTQ4OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2814894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ckristhoff", "html_url": "https://github.com/ckristhoff", "followers_url": "https://api.github.com/users/ckristhoff/followers", "following_url": "https://api.github.com/users/ckristhoff/following{/other_user}", "gists_url": "https://api.github.com/users/ckristhoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/ckristhoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ckristhoff/subscriptions", "organizations_url": "https://api.github.com/users/ckristhoff/orgs", "repos_url": "https://api.github.com/users/ckristhoff/repos", "events_url": "https://api.github.com/users/ckristhoff/events{/privacy}", "received_events_url": "https://api.github.com/users/ckristhoff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-15T22:15:12Z", "updated_at": "2019-10-19T20:37:44Z", "closed_at": "2019-10-19T20:37:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nAre invalid credentials supposed to raise an exception on the server? When I test tokenAuth mutation with wrong data Django server raises exception.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/cgf/.local/share/virtualenvs/testdjangoauthbackend-183R1gMP/lib/python3.7/site-packages/promise/promise.py\", line 487, in _resolve_from_executor\r\n    executor(resolve, reject)\r\n  File \"/Users/cgf/.local/share/virtualenvs/testdjangoauthbackend-183R1gMP/lib/python3.7/site-packages/promise/promise.py\", line 754, in executor\r\n    return resolve(f(*args, **kwargs))\r\n  File \"/Users/cgf/.local/share/virtualenvs/testdjangoauthbackend-183R1gMP/lib/python3.7/site-packages/graphql/execution/middleware.py\", line 75, in make_it_promise\r\n    return next(*args, **kwargs)\r\n  File \"/Users/cgf/.local/share/virtualenvs/testdjangoauthbackend-183R1gMP/lib/python3.7/site-packages/graphql_jwt/decorators.py\", line 106, in wrapper\r\n    result = f(cls, root, info, **kwargs)\r\n  File \"/Users/cgf/.local/share/virtualenvs/testdjangoauthbackend-183R1gMP/lib/python3.7/site-packages/graphql_jwt/decorators.py\", line 89, in wrapper\r\n    _('Please, enter valid credentials'))\r\ngraphql.error.located_error.GraphQLLocatedError: Please, enter valid credentials\r\n```\r\n\r\nI only was following the tutorial on documentation. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/115", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/115/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/115/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/115", "id": 467219037, "node_id": "MDU6SXNzdWU0NjcyMTkwMzc=", "number": 115, "title": "Single token refresh does not behave as described", "user": {"login": "themotu", "id": 9060082, "node_id": "MDQ6VXNlcjkwNjAwODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/9060082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/themotu", "html_url": "https://github.com/themotu", "followers_url": "https://api.github.com/users/themotu/followers", "following_url": "https://api.github.com/users/themotu/following{/other_user}", "gists_url": "https://api.github.com/users/themotu/gists{/gist_id}", "starred_url": "https://api.github.com/users/themotu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/themotu/subscriptions", "organizations_url": "https://api.github.com/users/themotu/orgs", "repos_url": "https://api.github.com/users/themotu/repos", "events_url": "https://api.github.com/users/themotu/events{/privacy}", "received_events_url": "https://api.github.com/users/themotu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-12T04:47:18Z", "updated_at": "2019-07-12T06:31:31Z", "closed_at": "2019-07-12T06:31:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "#91 re-open due to either documentation being wrong or there being a bug. Comment in bottom of 91", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/112", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/112/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/112/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/112", "id": 463280485, "node_id": "MDU6SXNzdWU0NjMyODA0ODU=", "number": 112, "title": "Does really passing Authorization:Bearer requires. bec it looks working even not passing", "user": {"login": "josnin", "id": 3206118, "node_id": "MDQ6VXNlcjMyMDYxMTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3206118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josnin", "html_url": "https://github.com/josnin", "followers_url": "https://api.github.com/users/josnin/followers", "following_url": "https://api.github.com/users/josnin/following{/other_user}", "gists_url": "https://api.github.com/users/josnin/gists{/gist_id}", "starred_url": "https://api.github.com/users/josnin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josnin/subscriptions", "organizations_url": "https://api.github.com/users/josnin/orgs", "repos_url": "https://api.github.com/users/josnin/repos", "events_url": "https://api.github.com/users/josnin/events{/privacy}", "received_events_url": "https://api.github.com/users/josnin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-02T15:01:13Z", "updated_at": "2019-07-03T12:45:38Z", "closed_at": "2019-07-03T12:45:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/111", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/111/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/111/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/111", "id": 460554132, "node_id": "MDU6SXNzdWU0NjA1NTQxMzI=", "number": 111, "title": "JSONWebTokenMiddleware raising error in GraphQLView", "user": {"login": "adityaprakash-bobby", "id": 23385459, "node_id": "MDQ6VXNlcjIzMzg1NDU5", "avatar_url": "https://avatars0.githubusercontent.com/u/23385459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adityaprakash-bobby", "html_url": "https://github.com/adityaprakash-bobby", "followers_url": "https://api.github.com/users/adityaprakash-bobby/followers", "following_url": "https://api.github.com/users/adityaprakash-bobby/following{/other_user}", "gists_url": "https://api.github.com/users/adityaprakash-bobby/gists{/gist_id}", "starred_url": "https://api.github.com/users/adityaprakash-bobby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adityaprakash-bobby/subscriptions", "organizations_url": "https://api.github.com/users/adityaprakash-bobby/orgs", "repos_url": "https://api.github.com/users/adityaprakash-bobby/repos", "events_url": "https://api.github.com/users/adityaprakash-bobby/events{/privacy}", "received_events_url": "https://api.github.com/users/adityaprakash-bobby/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-25T17:40:22Z", "updated_at": "2019-08-17T19:00:56Z", "closed_at": "2019-08-17T18:41:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Following the `Quickstart` from the `django-graphql-jwt` documentation, on adding the `JSONWebTokenMiddleware` to the `GRAPHENE_SETTINGS` fails to load the `graphiql` view. It is logging the following error. I double-checked the `settings` file in root directory, still did not get any leads. \r\n\r\n```bash\r\nEnvironment:\r\n\r\nRequest Method: GET\r\nRequest URL: http://127.0.0.1:8000/graphql/?query=mutation%20%7B%0A%20%20verifyToken(token%3A%22eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InlvaGFuIiwiZXhwIjoxNTYxNDg0MTgyLCJvcmlnX2lhdCI6MTU2MTQ4Mzg4Mn0.a_vBB3CbiN9frdeTrCxV3uSz32AtXnJJ_1N45nIDcvk%22)%20%7B%0A%20%20%20%20payload%0A%20%20%7D%0A%7D\r\n\r\nDjango Version: 2.1.4\r\nPython Version: 3.7.3\r\nInstalled Applications:\r\n['django.contrib.admin',\r\n 'django.contrib.auth',\r\n 'django.contrib.contenttypes',\r\n 'django.contrib.sessions',\r\n 'django.contrib.messages',\r\n 'django.contrib.staticfiles',\r\n 'graphene_django',\r\n 'links',\r\n 'users']\r\nInstalled Middleware:\r\n['django.middleware.security.SecurityMiddleware',\r\n 'django.contrib.sessions.middleware.SessionMiddleware',\r\n 'django.middleware.common.CommonMiddleware',\r\n 'django.middleware.csrf.CsrfViewMiddleware',\r\n 'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n 'django.contrib.messages.middleware.MessageMiddleware',\r\n 'django.middleware.clickjacking.XFrameOptionsMiddleware']\r\n\r\n\r\n\r\nTraceback:\r\n\r\nFile \"/path/to/django-project/virtualenv/lib64/python3.7/site-packages/django/core/handlers/exception.py\" in inner\r\n  34.             response = get_response(request)\r\n\r\nFile \"/path/to/django-project/virtualenv/lib64/python3.7/site-packages/django/core/handlers/base.py\" in _get_response\r\n  126.                 response = self.process_exception_by_middleware(e, request)\r\n\r\nFile \"/path/to/django-project/virtualenv/lib64/python3.7/site-packages/django/core/handlers/base.py\" in _get_response\r\n  124.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n\r\nFile \"/path/to/django-project/virtualenv/lib64/python3.7/site-packages/django/views/decorators/csrf.py\" in wrapped_view\r\n  54.         return view_func(*args, **kwargs)\r\n\r\nFile \"/path/to/django-project/virtualenv/lib64/python3.7/site-packages/django/views/generic/base.py\" in view\r\n  62.             self = cls(**initkwargs)\r\n\r\nFile \"/path/to/django-project/virtualenv/lib64/python3.7/site-packages/graphene_django/views.py\" in __init__\r\n  88.             self.middleware = list(instantiate_middleware(middleware))\r\n\r\nFile \"/path/to/django-project/virtualenv/lib64/python3.7/site-packages/graphene_django/views.py\" in instantiate_middleware\r\n  48.             yield middleware()\r\n\r\nException Type: TypeError at /graphql/\r\nException Value: __init__() missing 1 required positional argument: 'get_response'\r\n\r\n```\r\nIf tried without the `GRAPHENE['MIDDLEWARE']` value, it is giving the expected results but when I try to include it, it throws the above error. Can this behavior be explained?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/110", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/110/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/110/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/110", "id": 459689186, "node_id": "MDU6SXNzdWU0NTk2ODkxODY=", "number": 110, "title": "PermissionDenied is getting wrapped by another exception", "user": {"login": "dan-klasson", "id": 1314838, "node_id": "MDQ6VXNlcjEzMTQ4Mzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1314838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dan-klasson", "html_url": "https://github.com/dan-klasson", "followers_url": "https://api.github.com/users/dan-klasson/followers", "following_url": "https://api.github.com/users/dan-klasson/following{/other_user}", "gists_url": "https://api.github.com/users/dan-klasson/gists{/gist_id}", "starred_url": "https://api.github.com/users/dan-klasson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dan-klasson/subscriptions", "organizations_url": "https://api.github.com/users/dan-klasson/orgs", "repos_url": "https://api.github.com/users/dan-klasson/repos", "events_url": "https://api.github.com/users/dan-klasson/events{/privacy}", "received_events_url": "https://api.github.com/users/dan-klasson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-24T05:02:59Z", "updated_at": "2019-08-17T19:11:57Z", "closed_at": "2019-08-17T17:59:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to test that my login fails. But `assertRaises` does not catch `PermissionDenied` the exception being thrown. \r\n\r\n```\r\ndef test_auth(self):\r\n    from graphql_jwt.exceptions import PermissionDenied\r\n\r\n    with self.assertRaises(PermissionDenied):\r\n        response = self.client.execute(self.query)\r\n\r\n```\r\n\r\n\r\n\r\n```\r\n\r\nCreating test database for alias 'default'...\r\nSystem check identified no issues (0 silenced).\r\nTraceback (most recent call last):\r\n  File \"/home/dan/game/venv/lib/python3.7/site-packages/promise/promise.py\", line 487, in _resolve_from_executor\r\n    executor(resolve, reject)\r\n  File \"/home/dan/game/venv/lib/python3.7/site-packages/promise/promise.py\", line 754, in executor\r\n    return resolve(f(*args, **kwargs))\r\n  File \"/home/dan/game/venv/lib/python3.7/site-packages/graphql/execution/middleware.py\", line 75, in make_it_promise\r\n    return next(*args, **kwargs)\r\n  File \"/home/dan/game/venv/lib/python3.7/site-packages/graphene_django/filter/fields.py\", line 106, in connection_resolver\r\n    **args\r\n  File \"/home/dan/game/venv/lib/python3.7/site-packages/graphene_django/fields.py\", line 156, in connection_resolver\r\n    iterable = resolver(root, info, **args)\r\n  File \"/home/dan/game/venv/lib/python3.7/site-packages/graphql_jwt/decorators.py\", line 31, in wrapper\r\n    return func(info.context, *args, **kwargs)\r\n  File \"/home/dan/game/venv/lib/python3.7/site-packages/graphql_jwt/decorators.py\", line 43, in wrapper\r\n    raise exceptions.PermissionDenied()\r\ngraphql.error.located_error.GraphQLLocatedError: You do not have permission to perform this action\r\n\r\nF.\r\n======================================================================\r\nFAIL: test_auth (api.tests.test_mutations.TestGame)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/dan/game/api/tests/test_mutations.py\", line 57, in test_auth\r\n    response = self.client.execute(self.query)\r\nAssertionError: PermissionDenied not raised\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/109", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/109/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/109/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/109", "id": 459568075, "node_id": "MDU6SXNzdWU0NTk1NjgwNzU=", "number": 109, "title": "Multiple refreshTokens", "user": {"login": "Eimis", "id": 3446400, "node_id": "MDQ6VXNlcjM0NDY0MDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3446400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eimis", "html_url": "https://github.com/Eimis", "followers_url": "https://api.github.com/users/Eimis/followers", "following_url": "https://api.github.com/users/Eimis/following{/other_user}", "gists_url": "https://api.github.com/users/Eimis/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eimis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eimis/subscriptions", "organizations_url": "https://api.github.com/users/Eimis/orgs", "repos_url": "https://api.github.com/users/Eimis/repos", "events_url": "https://api.github.com/users/Eimis/events{/privacy}", "received_events_url": "https://api.github.com/users/Eimis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-23T12:02:23Z", "updated_at": "2020-02-03T09:54:15Z", "closed_at": "2020-02-03T09:54:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI have a couple of questions. I am using Long running refresh tokens, but I don't fully understand a few concepts and implementations in this library.\r\n\r\n1)\r\n```\r\nmutation RefreshToken($refreshToken: String!) {\r\n  refreshToken(refreshToken: $refreshToken) {\r\n    token\r\n    refreshToken\r\n    payload\r\n  }\r\n}\r\n```\r\nIn the docs it says \"refreshToken to refresh your _token_, using the refreshToken you already got during authorization:\". But why is it creating a new `refreshToken` every time and saving it in my database? I understand that I am asking for a `refreshToken` in return with this query every time (it's not creating a new one if I'm not asking for a `refreshToken` in my query, thanks for #72 !), but why is it generating a new `refreshToken` every time ?\r\n\r\n2) \r\n```\r\nmutation TokenAuth($email: String!, $password: String!) {\r\n  tokenAuth(email: $email, password: $password) {\r\n    token\r\n    refreshToken\r\n  }\r\n}\r\n```\r\n\r\nA very similar question. If I'm not asking for a `refreshToken`, it's not creating a new one, but if I do, it's creating a new `refreshToken` every time I'm authenticating, thus potentially leading to  polluting the database with multiple refreshTokens for a single user, which creates a mess and doesn't make much sense.\r\n\r\n1) What could be possible solutions of having only 1 `refreshToken` per user in my database ?\r\n2) I assume since I am asking for `refreshToken` every time in the query, this is the desired functionality of the library and it is my responsibility to make sure old one is removed when new one is issued ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/105", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/105/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/105/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/105", "id": 455782721, "node_id": "MDU6SXNzdWU0NTU3ODI3MjE=", "number": 105, "title": "support RS256", "user": {"login": "wesky93", "id": 5326335, "node_id": "MDQ6VXNlcjUzMjYzMzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5326335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesky93", "html_url": "https://github.com/wesky93", "followers_url": "https://api.github.com/users/wesky93/followers", "following_url": "https://api.github.com/users/wesky93/following{/other_user}", "gists_url": "https://api.github.com/users/wesky93/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesky93/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesky93/subscriptions", "organizations_url": "https://api.github.com/users/wesky93/orgs", "repos_url": "https://api.github.com/users/wesky93/repos", "events_url": "https://api.github.com/users/wesky93/events{/privacy}", "received_events_url": "https://api.github.com/users/wesky93/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-13T14:42:21Z", "updated_at": "2019-08-17T17:45:47Z", "closed_at": "2019-08-17T17:45:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/104", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/104/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/104/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/104", "id": 455782342, "node_id": "MDU6SXNzdWU0NTU3ODIzNDI=", "number": 104, "title": "support RS256", "user": {"login": "like-sinsky", "id": 43947132, "node_id": "MDQ6VXNlcjQzOTQ3MTMy", "avatar_url": "https://avatars3.githubusercontent.com/u/43947132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/like-sinsky", "html_url": "https://github.com/like-sinsky", "followers_url": "https://api.github.com/users/like-sinsky/followers", "following_url": "https://api.github.com/users/like-sinsky/following{/other_user}", "gists_url": "https://api.github.com/users/like-sinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/like-sinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/like-sinsky/subscriptions", "organizations_url": "https://api.github.com/users/like-sinsky/orgs", "repos_url": "https://api.github.com/users/like-sinsky/repos", "events_url": "https://api.github.com/users/like-sinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/like-sinsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-13T14:41:40Z", "updated_at": "2019-06-13T14:41:44Z", "closed_at": "2019-06-13T14:41:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/103", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/103/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/103/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/103", "id": 455776626, "node_id": "MDU6SXNzdWU0NTU3NzY2MjY=", "number": 103, "title": "no refresh token migration file", "user": {"login": "like-sinsky", "id": 43947132, "node_id": "MDQ6VXNlcjQzOTQ3MTMy", "avatar_url": "https://avatars3.githubusercontent.com/u/43947132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/like-sinsky", "html_url": "https://github.com/like-sinsky", "followers_url": "https://api.github.com/users/like-sinsky/followers", "following_url": "https://api.github.com/users/like-sinsky/following{/other_user}", "gists_url": "https://api.github.com/users/like-sinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/like-sinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/like-sinsky/subscriptions", "organizations_url": "https://api.github.com/users/like-sinsky/orgs", "repos_url": "https://api.github.com/users/like-sinsky/repos", "events_url": "https://api.github.com/users/like-sinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/like-sinsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-13T14:31:31Z", "updated_at": "2019-06-13T14:38:36Z", "closed_at": "2019-06-13T14:38:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "when I make migration in my project, it make new refresh token migration file.\r\nI check the problem. I can find there is no migration file when change refresh model in #80 \r\n```\r\nMigrations for 'refresh_token':\r\n  .venv/lib/python3.6/site-packages/graphql_jwt/refresh_token/migrations/0003_auto_20190613_1412.py\r\n    - Alter field user on refreshtoken\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/102", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/102/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/102/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/102", "id": 451189756, "node_id": "MDU6SXNzdWU0NTExODk3NTY=", "number": 102, "title": "How to clear or delete the cookie?", "user": {"login": "amiyatulu", "id": 2051004, "node_id": "MDQ6VXNlcjIwNTEwMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2051004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amiyatulu", "html_url": "https://github.com/amiyatulu", "followers_url": "https://api.github.com/users/amiyatulu/followers", "following_url": "https://api.github.com/users/amiyatulu/following{/other_user}", "gists_url": "https://api.github.com/users/amiyatulu/gists{/gist_id}", "starred_url": "https://api.github.com/users/amiyatulu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amiyatulu/subscriptions", "organizations_url": "https://api.github.com/users/amiyatulu/orgs", "repos_url": "https://api.github.com/users/amiyatulu/repos", "events_url": "https://api.github.com/users/amiyatulu/events{/privacy}", "received_events_url": "https://api.github.com/users/amiyatulu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-06-02T13:02:26Z", "updated_at": "2020-02-03T09:54:15Z", "closed_at": "2020-02-03T09:54:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can I clear the JWT cookie from the browser?\r\n\r\nCan it be done by javascript, or backend (django-graphql-jwt) code is required?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/98", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/98/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/98/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/98", "id": 449987396, "node_id": "MDU6SXNzdWU0NDk5ODczOTY=", "number": 98, "title": "How to log token-related activities", "user": {"login": "dsun-ge", "id": 47542977, "node_id": "MDQ6VXNlcjQ3NTQyOTc3", "avatar_url": "https://avatars2.githubusercontent.com/u/47542977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dsun-ge", "html_url": "https://github.com/dsun-ge", "followers_url": "https://api.github.com/users/dsun-ge/followers", "following_url": "https://api.github.com/users/dsun-ge/following{/other_user}", "gists_url": "https://api.github.com/users/dsun-ge/gists{/gist_id}", "starred_url": "https://api.github.com/users/dsun-ge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dsun-ge/subscriptions", "organizations_url": "https://api.github.com/users/dsun-ge/orgs", "repos_url": "https://api.github.com/users/dsun-ge/repos", "events_url": "https://api.github.com/users/dsun-ge/events{/privacy}", "received_events_url": "https://api.github.com/users/dsun-ge/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214969, "node_id": "MDU6TGFiZWw3NDEyMTQ5Njk=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 741214974, "node_id": "MDU6TGFiZWw3NDEyMTQ5NzQ=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-29T19:43:10Z", "updated_at": "2019-08-17T17:51:23Z", "closed_at": "2019-08-17T17:51:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nHow can I log user obtaining token and refreshing token activities? Like who logged in from what IP address?\r\n\r\nRegards,\r\nDayong", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/97", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/97/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/97/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/97", "id": 446469272, "node_id": "MDU6SXNzdWU0NDY0NjkyNzI=", "number": 97, "title": "Warning if inheriting from JSONWebTokenMiddleware", "user": {"login": "tetrohed", "id": 7670039, "node_id": "MDQ6VXNlcjc2NzAwMzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/7670039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tetrohed", "html_url": "https://github.com/tetrohed", "followers_url": "https://api.github.com/users/tetrohed/followers", "following_url": "https://api.github.com/users/tetrohed/following{/other_user}", "gists_url": "https://api.github.com/users/tetrohed/gists{/gist_id}", "starred_url": "https://api.github.com/users/tetrohed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tetrohed/subscriptions", "organizations_url": "https://api.github.com/users/tetrohed/orgs", "repos_url": "https://api.github.com/users/tetrohed/repos", "events_url": "https://api.github.com/users/tetrohed/events{/privacy}", "received_events_url": "https://api.github.com/users/tetrohed/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214969, "node_id": "MDU6TGFiZWw3NDEyMTQ5Njk=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-21T07:53:56Z", "updated_at": "2019-08-17T18:41:02Z", "closed_at": "2019-08-17T18:41:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "**ISSUE**\r\nFollowing Warning in **JSONWebTokenMiddleware**, gets in the way of inheriting from JSONWebTokenMiddleware\r\n`if JSONWebTokenMiddleware not in graphene_settings.MIDDLEWARE:\r\n            warnings.warn(\r\n                'Add'\r\n                '\\'graphql_jwt.middleware.JSONWebTokenMiddleware\\' '\r\n                'to your GRAPHENE[\\'MIDDLEWARE\\'] setting and remove it '\r\n                'from your Django middleware classes.'\r\n                'Please see the documentation for more information: '\r\n                '<https://github.com/flavors/django-graphql-jwt#installation>',\r\n                stacklevel=2)`\r\n\r\n**EXPECTATION**\r\nit should be possible to do \r\n`class CustomJsonWebTokenMiddleware(JSONWebTokenMiddleware):\r\n    def __init__(self, get_response=None):\r\n        super(CustomJsonWebTokenMiddleware, self).__init__(get_response)\r\n\r\n    def resolve(self, next, root, info, **kwargs):\r\n        return super(CustomJsonWebTokenMiddleware, self).resolve(next, root, info, **kwargs)`\r\n\r\n**WHY**\r\nOne might need to add some APIs to white list, to circumvent the JWT middleware altogether. This is the case if an architecture decides to use a single endpoint for public and protected APIs", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/96", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/96/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/96/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/96", "id": 443318556, "node_id": "MDU6SXNzdWU0NDMzMTg1NTY=", "number": 96, "title": "JSONWebTokenError(_('Please, enter valid credentials')) is thrown for existing, but not activated user", "user": {"login": "TitanFighter", "id": 12687911, "node_id": "MDQ6VXNlcjEyNjg3OTEx", "avatar_url": "https://avatars2.githubusercontent.com/u/12687911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TitanFighter", "html_url": "https://github.com/TitanFighter", "followers_url": "https://api.github.com/users/TitanFighter/followers", "following_url": "https://api.github.com/users/TitanFighter/following{/other_user}", "gists_url": "https://api.github.com/users/TitanFighter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TitanFighter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TitanFighter/subscriptions", "organizations_url": "https://api.github.com/users/TitanFighter/orgs", "repos_url": "https://api.github.com/users/TitanFighter/repos", "events_url": "https://api.github.com/users/TitanFighter/events{/privacy}", "received_events_url": "https://api.github.com/users/TitanFighter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-13T10:19:32Z", "updated_at": "2020-08-01T12:48:32Z", "closed_at": "2019-05-13T10:19:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "If someone faced the issue like below:\r\nIf user exists but not active (for example user just registered but has to confirm activation via email link) and if this user tries to login `django-graphql-jwt` returns the message `Please, enter valid credentials` ([source](https://github.com/flavors/django-graphql-jwt/blob/master/graphql_jwt/decorators.py#L87)).\r\n\r\n**Reason of this issue:**\r\nBefore Django v1.10 \"authenticate\" from \"django.contrib.auth\" did not check \"is_active\". Since v1.10 it was changed.\r\n\r\n**Solution:**\r\nSo, in order to let  \"authenticate\" from \"django.contrib.auth\" to continue ignoring \"is_active\", it is necessary to change `'django.contrib.auth.backends.ModelBackend'` to `'django.contrib.auth.backends.AllowAllUsersModelBackend'` in `AUTHENTICATION_BACKENDS` block of Django settings.\r\n\r\nYou can compare [v1.9](https://docs.djangoproject.com/en/1.9/ref/contrib/auth/#django.contrib.auth.models.User.is_active) `is_active` description and [v1.10](https://docs.djangoproject.com/en/1.10/ref/contrib/auth/#django.contrib.auth.models.User.is_active):\r\n\r\n**v1.9:**\r\n\r\n> is_active\r\n> \r\n>     Boolean. Designates whether this user account should be considered active. We recommend that you set this flag to False instead of deleting accounts; that way, if your applications have any foreign keys to users, the foreign keys won\u2019t break.\r\n> \r\n>     This doesn\u2019t necessarily control whether or not the user can log in. Authentication backends aren\u2019t required to check for the is_active flag, and the default backends do not. If you want to reject a login based on is_active being False, it\u2019s up to you to check that in your own login view or a custom authentication backend. However, the AuthenticationForm used by the login() view (which is the default) does perform this check, as do the permission-checking methods such as has_perm() and the authentication in the Django admin. All of those functions/methods will return False for inactive users.\r\n\r\n\r\n**v1.10:**\r\n\r\n> is_active\r\n> \r\n>     Boolean. Designates whether this user account should be considered active. We recommend that you set this flag to False instead of deleting accounts; that way, if your applications have any foreign keys to users, the foreign keys won\u2019t break.\r\n> \r\n>     This doesn\u2019t necessarily control whether or not the user can log in. Authentication backends aren\u2019t required to check for the is_active flag but the default backend (ModelBackend) and the RemoteUserBackend do. You can use AllowAllUsersModelBackend or AllowAllUsersRemoteUserBackend if you want to allow inactive users to login. In this case, you\u2019ll also want to customize the AuthenticationForm used by the login() view as it rejects inactive users. Be aware that the permission-checking methods such as has_perm() and the authentication in the Django admin all return False for inactive users.\r\n>     Changed in Django 1.10:\r\n> \r\n>     In older versions, ModelBackend and RemoteUserBackend allowed inactive users to authenticate.\r\n> \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/95", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/95/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/95/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/95", "id": 441462805, "node_id": "MDU6SXNzdWU0NDE0NjI4MDU=", "number": 95, "title": "Refresh token as cookie", "user": {"login": "nchouard", "id": 31971995, "node_id": "MDQ6VXNlcjMxOTcxOTk1", "avatar_url": "https://avatars2.githubusercontent.com/u/31971995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nchouard", "html_url": "https://github.com/nchouard", "followers_url": "https://api.github.com/users/nchouard/followers", "following_url": "https://api.github.com/users/nchouard/following{/other_user}", "gists_url": "https://api.github.com/users/nchouard/gists{/gist_id}", "starred_url": "https://api.github.com/users/nchouard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nchouard/subscriptions", "organizations_url": "https://api.github.com/users/nchouard/orgs", "repos_url": "https://api.github.com/users/nchouard/repos", "events_url": "https://api.github.com/users/nchouard/events{/privacy}", "received_events_url": "https://api.github.com/users/nchouard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214969, "node_id": "MDU6TGFiZWw3NDEyMTQ5Njk=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-07T21:54:33Z", "updated_at": "2019-10-17T06:05:08Z", "closed_at": "2019-08-17T17:40:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "The jwt_cookie feature has proven to be extremely helpful and has fixed some of my security concerns related to storing the tokens in the browser. However, because only the access token is sent as a cookie, I would still have to use local or session storage to store the refresh token if I want to use them. Doesn't this kind of defeat the purpose of having a JWT cookie? Would it be possible to send a refresh token as a cookie as well?\r\n\r\nThank you for all of your work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/94", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/94/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/94/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/94", "id": 437938918, "node_id": "MDU6SXNzdWU0Mzc5Mzg5MTg=", "number": 94, "title": "mutation for itegrating django login with jwt.", "user": {"login": "Glyphack", "id": 20788334, "node_id": "MDQ6VXNlcjIwNzg4MzM0", "avatar_url": "https://avatars0.githubusercontent.com/u/20788334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Glyphack", "html_url": "https://github.com/Glyphack", "followers_url": "https://api.github.com/users/Glyphack/followers", "following_url": "https://api.github.com/users/Glyphack/following{/other_user}", "gists_url": "https://api.github.com/users/Glyphack/gists{/gist_id}", "starred_url": "https://api.github.com/users/Glyphack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Glyphack/subscriptions", "organizations_url": "https://api.github.com/users/Glyphack/orgs", "repos_url": "https://api.github.com/users/Glyphack/repos", "events_url": "https://api.github.com/users/Glyphack/events{/privacy}", "received_events_url": "https://api.github.com/users/Glyphack/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214974, "node_id": "MDU6TGFiZWw3NDEyMTQ5NzQ=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-27T12:31:13Z", "updated_at": "2019-08-17T17:39:30Z", "closed_at": "2019-08-17T17:39:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "For some users, like me, having a login mutation that signs user in and giving them a refreshToken and authenticate with django, and a logout mutation that revokes user token and signs out user from website (and also if user used login without jwt server should generate refreshToken for them to sign-in them in app).\r\ndo you think this should be implemented in this package or there should be a guide for implementing this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/93", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/93/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/93/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/93", "id": 437199596, "node_id": "MDU6SXNzdWU0MzcxOTk1OTY=", "number": 93, "title": "Missing migration for refresh_tokens plural related_name", "user": {"login": "mobiware", "id": 2219657, "node_id": "MDQ6VXNlcjIyMTk2NTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2219657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mobiware", "html_url": "https://github.com/mobiware", "followers_url": "https://api.github.com/users/mobiware/followers", "following_url": "https://api.github.com/users/mobiware/following{/other_user}", "gists_url": "https://api.github.com/users/mobiware/gists{/gist_id}", "starred_url": "https://api.github.com/users/mobiware/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mobiware/subscriptions", "organizations_url": "https://api.github.com/users/mobiware/orgs", "repos_url": "https://api.github.com/users/mobiware/repos", "events_url": "https://api.github.com/users/mobiware/events{/privacy}", "received_events_url": "https://api.github.com/users/mobiware/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214965, "node_id": "MDU6TGFiZWw3NDEyMTQ5NjU=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-25T13:28:12Z", "updated_at": "2019-05-31T20:33:01Z", "closed_at": "2019-05-31T20:32:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following commit changed the `related_name` of `RefreshToken.user` but the accompanying migration file is missing\r\nhttps://github.com/flavors/django-graphql-jwt/commit/6f38e892d2820f99b5dd5374376970eae82abb00\r\n\r\nSo when using version `0.2.1` Django complains there are pending changes to the model", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/92", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/92/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/92/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/92", "id": 435977216, "node_id": "MDU6SXNzdWU0MzU5NzcyMTY=", "number": 92, "title": "refreshToken Does Not Take Arguments", "user": {"login": "Benjaminryejones", "id": 10845447, "node_id": "MDQ6VXNlcjEwODQ1NDQ3", "avatar_url": "https://avatars2.githubusercontent.com/u/10845447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Benjaminryejones", "html_url": "https://github.com/Benjaminryejones", "followers_url": "https://api.github.com/users/Benjaminryejones/followers", "following_url": "https://api.github.com/users/Benjaminryejones/following{/other_user}", "gists_url": "https://api.github.com/users/Benjaminryejones/gists{/gist_id}", "starred_url": "https://api.github.com/users/Benjaminryejones/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Benjaminryejones/subscriptions", "organizations_url": "https://api.github.com/users/Benjaminryejones/orgs", "repos_url": "https://api.github.com/users/Benjaminryejones/repos", "events_url": "https://api.github.com/users/Benjaminryejones/events{/privacy}", "received_events_url": "https://api.github.com/users/Benjaminryejones/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-23T03:05:12Z", "updated_at": "2019-08-17T17:22:30Z", "closed_at": "2019-08-17T17:22:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI see [in the code for the \"Refresh\" mutation type](https://github.com/flavors/django-graphql-jwt/blob/65a86a37500b50be58d6b2249570296e395af071/graphql_jwt/mutations.py) that the mutation [should take the arguments from the RefreshMixin](https://github.com/flavors/django-graphql-jwt/blob/65a86a37500b50be58d6b2249570296e395af071/graphql_jwt/mixins.py).\r\n\r\nHowever, when I try to use either the default refresh tokens or 'JWT_LONG_RUNNING_REFRESH_TOKEN': True, I am unable to pass in a \"token\" argument:\r\n![image](https://user-images.githubusercontent.com/10845447/56550123-9c387e00-6539-11e9-94e3-50d698aafa36.png)\r\n\r\nI am using python 3.6, graphql-core 2.1, django 2.1.4, graphene-django 2.0.0, django-graphql-jwt 0.2.1\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/91", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/91/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/91/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/91", "id": 435141033, "node_id": "MDU6SXNzdWU0MzUxNDEwMzM=", "number": 91, "title": "Single token refresh does not behave as described", "user": {"login": "jckw", "id": 11884004, "node_id": "MDQ6VXNlcjExODg0MDA0", "avatar_url": "https://avatars1.githubusercontent.com/u/11884004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jckw", "html_url": "https://github.com/jckw", "followers_url": "https://api.github.com/users/jckw/followers", "following_url": "https://api.github.com/users/jckw/following{/other_user}", "gists_url": "https://api.github.com/users/jckw/gists{/gist_id}", "starred_url": "https://api.github.com/users/jckw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jckw/subscriptions", "organizations_url": "https://api.github.com/users/jckw/orgs", "repos_url": "https://api.github.com/users/jckw/repos", "events_url": "https://api.github.com/users/jckw/events{/privacy}", "received_events_url": "https://api.github.com/users/jckw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214974, "node_id": "MDU6TGFiZWw3NDEyMTQ5NzQ=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-19T11:09:21Z", "updated_at": "2019-07-12T08:10:11Z", "closed_at": "2019-05-31T20:13:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "As discussed here https://github.com/flavors/django-graphql-jwt/issues/2#issuecomment-424451507, if `RefreshToken` is called after `JWT_EXPIRATION_DELTA`, an error is returned.\r\n\r\nThis makes `JWT_REFRESH_EXPIRATION_DELTA` redundant, since after `JWT_EXPIRATION_DELTA`, the token cannot be refreshed. \r\n\r\nThis behaviour is [in conflict with the docs](https://django-graphql-jwt.domake.io/en/stable/refresh_token.html#queries) that seem to suggest (in the diagrams) that refreshing a token can still be done _after_ `JWT_EXPIRATION_DELTA`. This makes a lot more sense than the current behaviour. \r\n\r\n### Possible cause\r\nThis is likely due to the `get_payload` function [not making a distinction between tokens that have `JWT_EXPIRATION_DELTA` and those that have reached `JWT_REFRESH_EXPIRATION_DELTA`](https://github.com/flavors/django-graphql-jwt/blob/0e71fa59b18b11db2a122cd2b88dcd29e241ab18/graphql_jwt/utils.py#L86).\r\n\r\nThis seems like the bug, since it makes single token refresh pretty useless unless the client sends a refresh token every 5 minutes (or whatever  `JWT_EXPIRATION_DELTA` is set to) regardless. That means that clients who are not active for more than 5 minutes will have to log in again, which isn't how JWT usually works.\r\n\r\nInstead, `JWT_REFRESH_EXPIRED_HANDLER` is called _after_ `get_payload`.\r\n\r\nTherefore the \"Refresh has expired\" exception can never be raised since \"Signature has expired\" will be raised first (as the refresh delta is usually longer than the expiration delta).\r\n\r\n### Possible fix\r\n`get_payload` should not raise any errors until the `JWT_REFRESH_EXPIRED_HANDLER` has been called.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/90", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/90/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/90/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/90", "id": 432937182, "node_id": "MDU6SXNzdWU0MzI5MzcxODI=", "number": 90, "title": "How to use with Django Rest Framework?", "user": {"login": "GiancarlosIO", "id": 17274950, "node_id": "MDQ6VXNlcjE3Mjc0OTUw", "avatar_url": "https://avatars2.githubusercontent.com/u/17274950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GiancarlosIO", "html_url": "https://github.com/GiancarlosIO", "followers_url": "https://api.github.com/users/GiancarlosIO/followers", "following_url": "https://api.github.com/users/GiancarlosIO/following{/other_user}", "gists_url": "https://api.github.com/users/GiancarlosIO/gists{/gist_id}", "starred_url": "https://api.github.com/users/GiancarlosIO/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GiancarlosIO/subscriptions", "organizations_url": "https://api.github.com/users/GiancarlosIO/orgs", "repos_url": "https://api.github.com/users/GiancarlosIO/repos", "events_url": "https://api.github.com/users/GiancarlosIO/events{/privacy}", "received_events_url": "https://api.github.com/users/GiancarlosIO/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214969, "node_id": "MDU6TGFiZWw3NDEyMTQ5Njk=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-14T06:14:44Z", "updated_at": "2020-08-06T16:05:23Z", "closed_at": "2019-10-19T20:32:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nIs there a way to authenticate an user in DRF using the same jwt of django-graphql-jwt?\r\nI have a custom Django class view and I want to access to the user if the `Authorization: jwt <token>` is in the request headers.\r\nCan I reuse the same middlewares/mixins to authenticate the user in normal Django views?\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/89", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/89/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/89/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/89", "id": 429552636, "node_id": "MDU6SXNzdWU0Mjk1NTI2MzY=", "number": 89, "title": "not authenticating against django python ldap3", "user": {"login": "arif-hanif", "id": 8672758, "node_id": "MDQ6VXNlcjg2NzI3NTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8672758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arif-hanif", "html_url": "https://github.com/arif-hanif", "followers_url": "https://api.github.com/users/arif-hanif/followers", "following_url": "https://api.github.com/users/arif-hanif/following{/other_user}", "gists_url": "https://api.github.com/users/arif-hanif/gists{/gist_id}", "starred_url": "https://api.github.com/users/arif-hanif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arif-hanif/subscriptions", "organizations_url": "https://api.github.com/users/arif-hanif/orgs", "repos_url": "https://api.github.com/users/arif-hanif/repos", "events_url": "https://api.github.com/users/arif-hanif/events{/privacy}", "received_events_url": "https://api.github.com/users/arif-hanif/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214965, "node_id": "MDU6TGFiZWw3NDEyMTQ5NjU=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-05T01:59:42Z", "updated_at": "2019-05-31T19:42:06Z", "closed_at": "2019-05-31T19:42:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/flavors/django-graphql-jwt/blob/master/graphql_jwt/decorators.py#L85\r\n\r\n`user = authenticate(\r\n            request=info.context,\r\n            username=username,\r\n            password=password,\r\n            skip_jwt_backend=True)`\r\n\r\nwhat is the purpose of the skip_jwt_backend variable?\r\n\r\nThis is causing an issue with the django ldap 3 backend", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/88", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/88/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/88/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/88", "id": 426765413, "node_id": "MDU6SXNzdWU0MjY3NjU0MTM=", "number": 88, "title": "\"You do not have permission to perform this action\" error on production server", "user": {"login": "Kendysond", "id": 5365813, "node_id": "MDQ6VXNlcjUzNjU4MTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5365813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kendysond", "html_url": "https://github.com/Kendysond", "followers_url": "https://api.github.com/users/Kendysond/followers", "following_url": "https://api.github.com/users/Kendysond/following{/other_user}", "gists_url": "https://api.github.com/users/Kendysond/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kendysond/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kendysond/subscriptions", "organizations_url": "https://api.github.com/users/Kendysond/orgs", "repos_url": "https://api.github.com/users/Kendysond/repos", "events_url": "https://api.github.com/users/Kendysond/events{/privacy}", "received_events_url": "https://api.github.com/users/Kendysond/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-29T00:42:32Z", "updated_at": "2019-03-29T02:48:29Z", "closed_at": "2019-03-29T02:48:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI recently deployed my application on a live server, and for some weird reason all my requests to mutations that are wrapped in the `@login_required` decorator keep returning the error \"You do not have permission to perform this action\". \r\n\r\nMy settings are a replica of what's on the documentation. \r\n\r\nFor more context: I use a custom login mutation where I use the ` token = get_token(user)` shortcut to generate the JWT token. \r\n\r\nAll of this works on my localhost, however it's not working in production. \r\n\r\nI did a little digging and it seems the code is not respecting the JWT passed in the header Authorization. I know this because, if I use the `graphql_jwt.ObtainJSONWebToken.Field()` mutation to login, it seems to set a cookie that then logs the user and returns the correct responses for all those endpoints wrapped in  `@login_required`\r\n\r\nAnybody experienced this before? I'm fine with it setting a cookie if that's the only way, I'd just like to know how to authenticate users with a custom function and also have the token returned in my custom sign up and login mutation. \r\n\r\nAny help would be really appreciated. \r\n\r\nThank you. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/86", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/86/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/86/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/86", "id": 421843106, "node_id": "MDU6SXNzdWU0MjE4NDMxMDY=", "number": 86, "title": "How to update JWT to include user id or any other custom properties?", "user": {"login": "chirdeeptomar", "id": 77834, "node_id": "MDQ6VXNlcjc3ODM0", "avatar_url": "https://avatars3.githubusercontent.com/u/77834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chirdeeptomar", "html_url": "https://github.com/chirdeeptomar", "followers_url": "https://api.github.com/users/chirdeeptomar/followers", "following_url": "https://api.github.com/users/chirdeeptomar/following{/other_user}", "gists_url": "https://api.github.com/users/chirdeeptomar/gists{/gist_id}", "starred_url": "https://api.github.com/users/chirdeeptomar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chirdeeptomar/subscriptions", "organizations_url": "https://api.github.com/users/chirdeeptomar/orgs", "repos_url": "https://api.github.com/users/chirdeeptomar/repos", "events_url": "https://api.github.com/users/chirdeeptomar/events{/privacy}", "received_events_url": "https://api.github.com/users/chirdeeptomar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-03-16T19:20:04Z", "updated_at": "2019-03-19T22:32:40Z", "closed_at": "2019-03-19T22:32:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a custom user model and I would like to have user_id as a part of jwt token provided from tokenAuth call. I don't think https://django-graphql-jwt.domake.io/en/stable/customizing.html is the right solution and hence would like to customise the token itself.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/85", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/85/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/85/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/85", "id": 419830360, "node_id": "MDU6SXNzdWU0MTk4MzAzNjA=", "number": 85, "title": "social auth / Oauth - insights?", "user": {"login": "gotexis", "id": 38595828, "node_id": "MDQ6VXNlcjM4NTk1ODI4", "avatar_url": "https://avatars3.githubusercontent.com/u/38595828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gotexis", "html_url": "https://github.com/gotexis", "followers_url": "https://api.github.com/users/gotexis/followers", "following_url": "https://api.github.com/users/gotexis/following{/other_user}", "gists_url": "https://api.github.com/users/gotexis/gists{/gist_id}", "starred_url": "https://api.github.com/users/gotexis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gotexis/subscriptions", "organizations_url": "https://api.github.com/users/gotexis/orgs", "repos_url": "https://api.github.com/users/gotexis/repos", "events_url": "https://api.github.com/users/gotexis/events{/privacy}", "received_events_url": "https://api.github.com/users/gotexis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-12T07:00:39Z", "updated_at": "2019-03-25T06:10:53Z", "closed_at": "2019-03-25T05:08:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "any insights?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/84", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/84/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/84/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/84", "id": 417796780, "node_id": "MDU6SXNzdWU0MTc3OTY3ODA=", "number": 84, "title": "Adding more authentication fields", "user": {"login": "Glyphack", "id": 20788334, "node_id": "MDQ6VXNlcjIwNzg4MzM0", "avatar_url": "https://avatars0.githubusercontent.com/u/20788334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Glyphack", "html_url": "https://github.com/Glyphack", "followers_url": "https://api.github.com/users/Glyphack/followers", "following_url": "https://api.github.com/users/Glyphack/following{/other_user}", "gists_url": "https://api.github.com/users/Glyphack/gists{/gist_id}", "starred_url": "https://api.github.com/users/Glyphack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Glyphack/subscriptions", "organizations_url": "https://api.github.com/users/Glyphack/orgs", "repos_url": "https://api.github.com/users/Glyphack/repos", "events_url": "https://api.github.com/users/Glyphack/events{/privacy}", "received_events_url": "https://api.github.com/users/Glyphack/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214969, "node_id": "MDU6TGFiZWw3NDEyMTQ5Njk=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-06T13:13:49Z", "updated_at": "2019-05-31T19:23:35Z", "closed_at": "2019-05-31T19:23:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nThese days authenticating with email or mobile number are very common, I also use them. one solution to add these methods is to create custom authentication methods which gets username and search the username in other fields. certainly it's not a clean solution, a better approach would be adding more fields to mutation or letting users add they're own fields and they're own authenticators which takes those fields.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/81", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/81/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/81/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/81", "id": 408531473, "node_id": "MDU6SXNzdWU0MDg1MzE0NzM=", "number": 81, "title": "generating so many refresh tokens", "user": {"login": "Glyphack", "id": 20788334, "node_id": "MDQ6VXNlcjIwNzg4MzM0", "avatar_url": "https://avatars0.githubusercontent.com/u/20788334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Glyphack", "html_url": "https://github.com/Glyphack", "followers_url": "https://api.github.com/users/Glyphack/followers", "following_url": "https://api.github.com/users/Glyphack/following{/other_user}", "gists_url": "https://api.github.com/users/Glyphack/gists{/gist_id}", "starred_url": "https://api.github.com/users/Glyphack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Glyphack/subscriptions", "organizations_url": "https://api.github.com/users/Glyphack/orgs", "repos_url": "https://api.github.com/users/Glyphack/repos", "events_url": "https://api.github.com/users/Glyphack/events{/privacy}", "received_events_url": "https://api.github.com/users/Glyphack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-10T12:45:15Z", "updated_at": "2019-03-06T12:23:11Z", "closed_at": "2019-03-06T12:23:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm using your library on my app there is something I wanted to ask you:\r\nFor every refereshToken mutation I get a new refreshToken and and a new token, the refreshToken is saved to database and the old refreshToken which was used to renew refreshToken and token will become revoked. In my opinion this is so much unnecessarry INSERT and UPDATE for the db. maybe you should not renew refreshToken every time we use refreshToken mutation and just renew it a time very close to expire date(like a day before), in this way you can reduce db operations.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/79", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/79/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/79/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/79", "id": 407555710, "node_id": "MDU6SXNzdWU0MDc1NTU3MTA=", "number": 79, "title": "After adding refresh token app into INSTALLED_APPS got an error", "user": {"login": "pythoneast", "id": 24388810, "node_id": "MDQ6VXNlcjI0Mzg4ODEw", "avatar_url": "https://avatars1.githubusercontent.com/u/24388810?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pythoneast", "html_url": "https://github.com/pythoneast", "followers_url": "https://api.github.com/users/pythoneast/followers", "following_url": "https://api.github.com/users/pythoneast/following{/other_user}", "gists_url": "https://api.github.com/users/pythoneast/gists{/gist_id}", "starred_url": "https://api.github.com/users/pythoneast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pythoneast/subscriptions", "organizations_url": "https://api.github.com/users/pythoneast/orgs", "repos_url": "https://api.github.com/users/pythoneast/repos", "events_url": "https://api.github.com/users/pythoneast/events{/privacy}", "received_events_url": "https://api.github.com/users/pythoneast/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-07T06:12:24Z", "updated_at": "2019-02-08T18:54:11Z", "closed_at": "2019-02-08T18:54:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nUnhandled exception in thread started by <function check_errors.<locals>.wrapper at 0x1111257b8>\r\nTraceback (most recent call last):\r\n  File \"/Users/pythoneast/Desktop/work/CHOCOLIFE/choco_projects/market/venv/lib/python3.6/site-packages/django/utils/autoreload.py\", line 225, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"/Users/pythoneast/Desktop/work/CHOCOLIFE/choco_projects/market/venv/lib/python3.6/site-packages/django/core/management/commands/runserver.py\", line 117, in inner_run\r\n    self.check(display_num_errors=True)\r\n  File \"/Users/pythoneast/Desktop/work/CHOCOLIFE/choco_projects/market/venv/lib/python3.6/site-packages/django/core/management/base.py\", line 379, in check\r\n    include_deployment_checks=include_deployment_checks,\r\n  File \"/Users/pythoneast/Desktop/work/CHOCOLIFE/choco_projects/market/venv/lib/python3.6/site-packages/django/core/management/base.py\", line 366, in _run_checks\r\n    return checks.run_checks(**kwargs)\r\n  File \"/Users/pythoneast/Desktop/work/CHOCOLIFE/choco_projects/market/venv/lib/python3.6/site-packages/django/core/checks/registry.py\", line 71, in run_checks\r\n    new_errors = check(app_configs=app_configs)\r\n  File \"/Users/pythoneast/Desktop/work/CHOCOLIFE/choco_projects/market/venv/lib/python3.6/site-packages/django/contrib/auth/checks.py\", line 74, in check_user_model\r\n    if isinstance(cls().is_anonymous, MethodType):\r\n  File \"/Users/pythoneast/Desktop/work/CHOCOLIFE/choco_projects/market/venv/lib/python3.6/site-packages/django/db/models/base.py\", line 470, in __init__\r\n    _setattr(self, field.attname, val)\r\n  File \"/Users/pythoneast/Desktop/work/CHOCOLIFE/choco_projects/market/venv/lib/python3.6/site-packages/django/db/models/fields/related_descriptors.py\", line 537, in __set__\r\n    % self._get_set_deprecation_msg_params(),\r\nTypeError: Direct assignment to the reverse side of a related set is prohibited. Use refresh_token.set() instead.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/78", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/78/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/78/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/78", "id": 406137513, "node_id": "MDU6SXNzdWU0MDYxMzc1MTM=", "number": 78, "title": "Cannot query field \"user\" on type \"ObtainJSONWebToken\".", "user": {"login": "zhilyaev", "id": 4854707, "node_id": "MDQ6VXNlcjQ4NTQ3MDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/4854707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhilyaev", "html_url": "https://github.com/zhilyaev", "followers_url": "https://api.github.com/users/zhilyaev/followers", "following_url": "https://api.github.com/users/zhilyaev/following{/other_user}", "gists_url": "https://api.github.com/users/zhilyaev/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhilyaev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhilyaev/subscriptions", "organizations_url": "https://api.github.com/users/zhilyaev/orgs", "repos_url": "https://api.github.com/users/zhilyaev/repos", "events_url": "https://api.github.com/users/zhilyaev/events{/privacy}", "received_events_url": "https://api.github.com/users/zhilyaev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-03T22:12:52Z", "updated_at": "2019-02-03T22:25:18Z", "closed_at": "2019-02-03T22:25:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I try customize the ObtainJSONWebToken behavior.\r\n```python\r\n# schema.py\r\nimport graphene\r\nimport graphql_jwt\r\nfrom graphene_django.types import DjangoObjectType\r\nfrom django.contrib.auth.models import User as UserModel\r\n\r\n\r\nclass ObtainJSONWebToken(graphql_jwt.JSONWebTokenMutation):\r\n    user = graphene.Field(User)\r\n\r\n    @classmethod\r\n    def resolve(cls, root, info):\r\n        return cls(user=info.context.user)\r\n\r\n\r\nclass Mutations(graphene.ObjectType):\r\n    token_auth = ObtainJSONWebToken.Field()\r\n    verify_token = graphql_jwt.Verify.Field()\r\n    refresh_token = graphql_jwt.Refresh.Field()\r\n\r\n\r\nschema = graphene.Schema(mutation=Mutations)\r\n```\r\n\r\nits work but I catch the Execption: Cannot query field \"user\" on type \"ObtainJSONWebToken\". Also autocompleting isn`t support\r\n![](https://pp.userapi.com/c851528/v851528265/a9141/entc5kIDt1M.jpg)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/74", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/74/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/74/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/74", "id": 404358716, "node_id": "MDU6SXNzdWU0MDQzNTg3MTY=", "number": 74, "title": "What about verifyToken when using long running refresh tokens?", "user": {"login": "googol7", "id": 282412, "node_id": "MDQ6VXNlcjI4MjQxMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/282412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/googol7", "html_url": "https://github.com/googol7", "followers_url": "https://api.github.com/users/googol7/followers", "following_url": "https://api.github.com/users/googol7/following{/other_user}", "gists_url": "https://api.github.com/users/googol7/gists{/gist_id}", "starred_url": "https://api.github.com/users/googol7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/googol7/subscriptions", "organizations_url": "https://api.github.com/users/googol7/orgs", "repos_url": "https://api.github.com/users/googol7/repos", "events_url": "https://api.github.com/users/googol7/events{/privacy}", "received_events_url": "https://api.github.com/users/googol7/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214969, "node_id": "MDU6TGFiZWw3NDEyMTQ5Njk=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-29T15:53:56Z", "updated_at": "2019-05-31T19:20:13Z", "closed_at": "2019-05-31T19:20:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Some clarification regarding verifyToken when using long running refresh tokens would be nice here:\r\n\r\nhttps://django-graphql-jwt.domake.io/en/stable/refresh_token.html?highlight=verifyToken#long-running-refresh-tokens", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/72", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/72/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/72/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/72", "id": 403184546, "node_id": "MDU6SXNzdWU0MDMxODQ1NDY=", "number": 72, "title": "Don't generate a refreshToken if it was not requested", "user": {"login": "ktosiek", "id": 278013, "node_id": "MDQ6VXNlcjI3ODAxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/278013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktosiek", "html_url": "https://github.com/ktosiek", "followers_url": "https://api.github.com/users/ktosiek/followers", "following_url": "https://api.github.com/users/ktosiek/following{/other_user}", "gists_url": "https://api.github.com/users/ktosiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktosiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktosiek/subscriptions", "organizations_url": "https://api.github.com/users/ktosiek/orgs", "repos_url": "https://api.github.com/users/ktosiek/repos", "events_url": "https://api.github.com/users/ktosiek/events{/privacy}", "received_events_url": "https://api.github.com/users/ktosiek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214969, "node_id": "MDU6TGFiZWw3NDEyMTQ5Njk=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-25T14:41:43Z", "updated_at": "2019-02-08T21:45:51Z", "closed_at": "2019-02-08T18:54:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently refresh tokens are created on each login. It would be great to only generate them when the refreshToken field was requested.\r\n\r\nWould that make sense as a PR?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/69", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/69/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/69/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/69", "id": 402315952, "node_id": "MDU6SXNzdWU0MDIzMTU5NTI=", "number": 69, "title": "'ResolveInfo' object has no attribute 'path' in middleware", "user": {"login": "darktal91", "id": 4509451, "node_id": "MDQ6VXNlcjQ1MDk0NTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4509451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darktal91", "html_url": "https://github.com/darktal91", "followers_url": "https://api.github.com/users/darktal91/followers", "following_url": "https://api.github.com/users/darktal91/following{/other_user}", "gists_url": "https://api.github.com/users/darktal91/gists{/gist_id}", "starred_url": "https://api.github.com/users/darktal91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darktal91/subscriptions", "organizations_url": "https://api.github.com/users/darktal91/orgs", "repos_url": "https://api.github.com/users/darktal91/repos", "events_url": "https://api.github.com/users/darktal91/events{/privacy}", "received_events_url": "https://api.github.com/users/darktal91/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214965, "node_id": "MDU6TGFiZWw3NDEyMTQ5NjU=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-23T16:14:17Z", "updated_at": "2019-05-31T19:19:08Z", "closed_at": "2019-05-31T19:19:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Whenever the server receives a request with the HTTP header `'Authorization':'JWT <token>'` the response contains the error \r\n> 'ResolveInfo' object has no attribute 'path'\r\n\r\nPlaying around with the debugger I noticed that the exception is raised from the 'resolve' method in the 'JSONWebTokenMiddleware' class of the middleware.py file.\r\n\r\nThe exception is caused by this piece of code:\r\n`field = getattr(\r\n                info.schema,\r\n                'get_{}_type'.format(info.operation.operation),\r\n            )().fields.get(info.path[0])`\r\nThe exception says that 'info' does not have the attribute 'path'. \r\nPlaying with the debugger I noticed that the 'path' attribute exists inside the 'context' object. So I tried to change the code from `info.path[0]` to `info.context.path[0]` and everything started working correctly.\r\n\r\nSince I'm fairly new to both Django and GraphQL I ask you: am I missing something here? Did I do something wrong in my code (i.e. url patterns, GraphQL types definitions, etc.) or in my settings/configurations that caused the info object to not have the expected structure? Is there something I can do to fix the problem? Obviously manually changing the library code is not the answer.\r\n\r\nThanks.\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/68", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/68/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/68/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/68", "id": 398570469, "node_id": "MDU6SXNzdWUzOTg1NzA0Njk=", "number": 68, "title": "Server sends 200 response when secret key changes, not 401", "user": {"login": "jayhale", "id": 31579448, "node_id": "MDQ6VXNlcjMxNTc5NDQ4", "avatar_url": "https://avatars2.githubusercontent.com/u/31579448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayhale", "html_url": "https://github.com/jayhale", "followers_url": "https://api.github.com/users/jayhale/followers", "following_url": "https://api.github.com/users/jayhale/following{/other_user}", "gists_url": "https://api.github.com/users/jayhale/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayhale/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayhale/subscriptions", "organizations_url": "https://api.github.com/users/jayhale/orgs", "repos_url": "https://api.github.com/users/jayhale/repos", "events_url": "https://api.github.com/users/jayhale/events{/privacy}", "received_events_url": "https://api.github.com/users/jayhale/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214965, "node_id": "MDU6TGFiZWw3NDEyMTQ5NjU=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-01-12T16:50:49Z", "updated_at": "2019-08-07T22:39:58Z", "closed_at": "2019-05-31T19:16:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "When the server secret key changes all tokens are invalidated because they can no longer be decrypted.  However, instead of returning a response with code 401-Unauthorized, the server returns a response with code 200-OK and includes the deserialization error in the response.\r\n\r\nExample response:\r\n```json\r\n{  \r\n   \"errors\":[  \r\n      {  \r\n         \"message\":\"Error decoding signature\",\r\n         \"locations\":[  \r\n            {  \r\n               \"line\":1,\r\n               \"column\":38\r\n            }\r\n         ],\r\n         \"path\":[  \r\n            \"createTeam\"\r\n         ]\r\n      }\r\n   ],\r\n   \"data\":{  \r\n      \"createTeam\":null\r\n   }\r\n}\r\n```\r\n\r\nIf time allows, I'll follow this up with a PR to correct the issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/66", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/66/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/66/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/66", "id": 395088427, "node_id": "MDU6SXNzdWUzOTUwODg0Mjc=", "number": 66, "title": "Is it possible to use it with anonymous session?", "user": {"login": "bastiW", "id": 7667003, "node_id": "MDQ6VXNlcjc2NjcwMDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/7667003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bastiW", "html_url": "https://github.com/bastiW", "followers_url": "https://api.github.com/users/bastiW/followers", "following_url": "https://api.github.com/users/bastiW/following{/other_user}", "gists_url": "https://api.github.com/users/bastiW/gists{/gist_id}", "starred_url": "https://api.github.com/users/bastiW/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bastiW/subscriptions", "organizations_url": "https://api.github.com/users/bastiW/orgs", "repos_url": "https://api.github.com/users/bastiW/repos", "events_url": "https://api.github.com/users/bastiW/events{/privacy}", "received_events_url": "https://api.github.com/users/bastiW/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-01T14:35:37Z", "updated_at": "2019-01-02T18:26:27Z", "closed_at": "2019-01-02T18:26:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to identify an anonymous website user by an anonymous session id? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/64", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/64/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/64/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/64", "id": 393642551, "node_id": "MDU6SXNzdWUzOTM2NDI1NTE=", "number": 64, "title": "Is it possible to use with Django Defender?", "user": {"login": "kennandavison", "id": 12569707, "node_id": "MDQ6VXNlcjEyNTY5NzA3", "avatar_url": "https://avatars1.githubusercontent.com/u/12569707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennandavison", "html_url": "https://github.com/kennandavison", "followers_url": "https://api.github.com/users/kennandavison/followers", "following_url": "https://api.github.com/users/kennandavison/following{/other_user}", "gists_url": "https://api.github.com/users/kennandavison/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennandavison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennandavison/subscriptions", "organizations_url": "https://api.github.com/users/kennandavison/orgs", "repos_url": "https://api.github.com/users/kennandavison/repos", "events_url": "https://api.github.com/users/kennandavison/events{/privacy}", "received_events_url": "https://api.github.com/users/kennandavison/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214969, "node_id": "MDU6TGFiZWw3NDEyMTQ5Njk=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-22T04:38:10Z", "updated_at": "2019-08-17T17:18:17Z", "closed_at": "2019-08-17T17:18:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Has anyone tried using django-defender or some login throttle library? \r\n\r\nSeems like one would need to modify decorators.py's token_auth to use custom logic like the example here: https://github.com/kencochrane/django-defender#adapting-to-other-authentication-method", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/63", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/63/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/63/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/63", "id": 391330291, "node_id": "MDU6SXNzdWUzOTEzMzAyOTE=", "number": 63, "title": "JSON Encoder", "user": {"login": "mfdeux", "id": 20100329, "node_id": "MDQ6VXNlcjIwMTAwMzI5", "avatar_url": "https://avatars2.githubusercontent.com/u/20100329?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfdeux", "html_url": "https://github.com/mfdeux", "followers_url": "https://api.github.com/users/mfdeux/followers", "following_url": "https://api.github.com/users/mfdeux/following{/other_user}", "gists_url": "https://api.github.com/users/mfdeux/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfdeux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfdeux/subscriptions", "organizations_url": "https://api.github.com/users/mfdeux/orgs", "repos_url": "https://api.github.com/users/mfdeux/repos", "events_url": "https://api.github.com/users/mfdeux/events{/privacy}", "received_events_url": "https://api.github.com/users/mfdeux/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214969, "node_id": "MDU6TGFiZWw3NDEyMTQ5Njk=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-15T01:31:23Z", "updated_at": "2019-02-05T18:54:36Z", "closed_at": "2019-02-05T18:54:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "pyJWT exposes a JSON encoder argument when encoding the payload, I suggest this is made a setting without having to make an entirely new jwt_encode function.  For example, my username field is a phone number which wasn't serializable into JSON.\r\n\r\n```python\r\ndef jwt_encode(payload, context=None):\r\n    return jwt.encode(\r\n        payload,\r\n        jwt_settings.JWT_SECRET_KEY,\r\n        jwt_settings.JWT_ALGORITHM,\r\n        json_encoder=jwt_settings.JWT_JSON_ENCODER\r\n    ).decode('utf-8')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/61", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/61/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/61/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/61", "id": 391028390, "node_id": "MDU6SXNzdWUzOTEwMjgzOTA=", "number": 61, "title": "Bug when using @login_required with mutation", "user": {"login": "Speedy1991", "id": 15920408, "node_id": "MDQ6VXNlcjE1OTIwNDA4", "avatar_url": "https://avatars3.githubusercontent.com/u/15920408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Speedy1991", "html_url": "https://github.com/Speedy1991", "followers_url": "https://api.github.com/users/Speedy1991/followers", "following_url": "https://api.github.com/users/Speedy1991/following{/other_user}", "gists_url": "https://api.github.com/users/Speedy1991/gists{/gist_id}", "starred_url": "https://api.github.com/users/Speedy1991/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Speedy1991/subscriptions", "organizations_url": "https://api.github.com/users/Speedy1991/orgs", "repos_url": "https://api.github.com/users/Speedy1991/repos", "events_url": "https://api.github.com/users/Speedy1991/events{/privacy}", "received_events_url": "https://api.github.com/users/Speedy1991/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214965, "node_id": "MDU6TGFiZWw3NDEyMTQ5NjU=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-14T09:20:32Z", "updated_at": "2019-01-30T00:15:33Z", "closed_at": "2019-01-30T00:15:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Example mutation:\r\n\r\n```\r\nfrom graphql_jwt.decorators import login_required\r\n...\r\n\r\nclass ChangeUsernameMutation(graphene.Mutation):\r\n    user = graphene.Field(UserType)\r\n\r\n    class Arguments:\r\n        username = graphene.String()\r\n\r\n    @login_required\r\n    @transaction.atomic\r\n    def mutate(self, info, username, **kwargs):\r\n        user = info.context.user\r\n        user.username = username\r\n        user.save()\r\n        return ChangeUsernameMutation(user=user)\r\n```\r\nQuery:\r\n```\r\nmutation {\r\n  changeUsername(username: \"admin@example.com\") {\r\n    user {\r\n      username\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nLeads to:\r\n\r\n```\r\n{\r\n  \"errors\": [\r\n    {\r\n      \"message\": \"tuple.index(x): x not in tuple\",\r\n      \"locations\": [\r\n        {\r\n          \"line\": 2,\r\n          \"column\": 3\r\n        }\r\n      ],\r\n      \"path\": [\r\n        \"changeUsername\"\r\n      ]\r\n    }\r\n  ],\r\n  \"data\": {\r\n    \"changeUsername\": null\r\n  }\r\n}\r\n```\r\n\r\nThe bug is here: https://github.com/flavors/django-graphql-jwt/blob/82be0dd891f43e9037f9aa32769366c48a5ead30/graphql_jwt/decorators.py#L27\r\n\r\nMutations use `kwds` instead of `info` (i don't know why)\r\n\r\nThis will fix it:\r\n\r\n```\r\ndef context(f):\r\n    def decorator(func):\r\n        def wrapper(*args, **kwargs):\r\n            try:\r\n                info = args[f.__code__.co_varnames.index('info')]\r\n            except ValueError:\r\n                info = args[f.__code__.co_varnames.index('kwds')]\r\n            return func(info.context, *args, **kwargs)\r\n        return wrapper\r\n    return decorator\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/60", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/60/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/60/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/60", "id": 390269996, "node_id": "MDU6SXNzdWUzOTAyNjk5OTY=", "number": 60, "title": "Blacklist revoked tokens", "user": {"login": "Speedy1991", "id": 15920408, "node_id": "MDQ6VXNlcjE1OTIwNDA4", "avatar_url": "https://avatars3.githubusercontent.com/u/15920408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Speedy1991", "html_url": "https://github.com/Speedy1991", "followers_url": "https://api.github.com/users/Speedy1991/followers", "following_url": "https://api.github.com/users/Speedy1991/following{/other_user}", "gists_url": "https://api.github.com/users/Speedy1991/gists{/gist_id}", "starred_url": "https://api.github.com/users/Speedy1991/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Speedy1991/subscriptions", "organizations_url": "https://api.github.com/users/Speedy1991/orgs", "repos_url": "https://api.github.com/users/Speedy1991/repos", "events_url": "https://api.github.com/users/Speedy1991/events{/privacy}", "received_events_url": "https://api.github.com/users/Speedy1991/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-12T15:12:07Z", "updated_at": "2019-08-17T17:17:57Z", "closed_at": "2019-08-17T17:17:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently there is only one way to logout the user: Remove the jwt on client side and therefore a logout-now is not possible atm.\r\n\r\nStoring the refresh token in the token will solve this problem, e.g:\r\n\r\n```\r\n{\r\n  \"username\": \"user123\",\r\n  \"exp\": 1544626946,\r\n  \"origIat\": 1544626646,\r\n  \"refresh_token\": \"2ffee69532059e3569cf69f47d611e670b8fc0b5\"\r\n}\r\n```\r\n\r\nWhen a token gets revoked we add the token to the django cache:\r\n`cache.set(refresh_token.token, refresh_token.created + JWT_REFRESH_EXPIRATION_DELTA)`\r\n\r\nIn the authentication backend we just check if the token is in the cache:\r\n\r\n\r\n```\r\ndef authenticate(self, request=None, **kwargs):\r\n        if request is None:\r\n            return None\r\n\r\n        token = get_credentials(request, **kwargs)\r\n\r\n        if token is not None:\r\n            if cache.get(token[\"refresh_token\"]):\r\n                return None\r\n            return get_user_by_token(token, request)\r\n\r\n        return None\r\n```\r\n\r\nWhat do you think about this?\r\nWe also need to build the blacklist cache on startup - a simple manage.py command should do this job", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/59", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/59/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/59/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/59", "id": 389705045, "node_id": "MDU6SXNzdWUzODk3MDUwNDU=", "number": 59, "title": "graphql_jwt.middleware.JSONWebTokenMiddleware not found as middleware", "user": {"login": "andreas-bergstrom", "id": 622887, "node_id": "MDQ6VXNlcjYyMjg4Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/622887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-bergstrom", "html_url": "https://github.com/andreas-bergstrom", "followers_url": "https://api.github.com/users/andreas-bergstrom/followers", "following_url": "https://api.github.com/users/andreas-bergstrom/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-bergstrom/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-bergstrom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-bergstrom/subscriptions", "organizations_url": "https://api.github.com/users/andreas-bergstrom/orgs", "repos_url": "https://api.github.com/users/andreas-bergstrom/repos", "events_url": "https://api.github.com/users/andreas-bergstrom/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-bergstrom/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214974, "node_id": "MDU6TGFiZWw3NDEyMTQ5NzQ=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-11T10:54:45Z", "updated_at": "2019-01-30T00:14:38Z", "closed_at": "2019-01-30T00:14:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm having issues with graphql_jwt.middleware.JSONWebTokenMiddleware not being found despite included in the middlewares. Any idea how I can troubleshoot or is this some issue with Django 2.1?\r\n\r\nDjango 2.1\r\nPython 3.5.2\r\nuWSGI 2.0.17\r\nUbuntu 16.04\r\n\r\nIn my settings.py:\r\n```\r\nGRAPHENE = {\r\n    'SCHEMA': 'schema.schema',\r\n    'MIDDLEWARE': [\r\n            'graphql_jwt.middleware.JSONWebTokenMiddleware',\r\n        ],\r\n}\r\n```\r\n\r\nIn uWSGI-log:\r\n```\r\n*** Starting uWSGI 2.0.17 (64bit) on [Tue Dec 11 10:48:00 2018] ***\r\ncompiled with version: 5.4.0 20160609 on 06 March 2018 16:38:25\r\nos: Linux-4.4.0-139-generic #165-Ubuntu SMP Wed Oct 24 10:58:50 UTC 2018\r\nnodename: 10xrecruit\r\nmachine: x86_64\r\nclock source: unix\r\ndetected number of CPU cores: 2\r\ncurrent working directory: /etc/uwsgi/sites\r\ndetected binary path: /usr/local/bin/uwsgi\r\n!!! no internal routing support, rebuild with pcre support !!!\r\nchdir() to /var/www/qa-core\r\nyour processes number limit is 15733\r\nyour memory page size is 4096 bytes\r\n *** WARNING: you have enabled harakiri without post buffering. Slow upload could be rejected on post-unbuffered webservers *** \r\ndetected max file descriptor number: 1024\r\nlock engine: pthread robust mutexes\r\nthunder lock: disabled (you can enable it with --thunder-lock)\r\nuwsgi socket 0 bound to UNIX address /run/uwsgi/tenx_qa.sock fd 3\r\nsetgid() to 33\r\nsetuid() to 33\r\nPython version: 3.5.2 (default, Nov 12 2018, 13:43:14)  [GCC 5.4.0 20160609]\r\nPEP 405 virtualenv detected: /var/www/qa-core/venv\r\nSet PythonHome to /var/www/qa-core/venv\r\nPython main interpreter initialized at 0x2097060\r\npython threads support enabled\r\nyour server socket listen backlog is limited to 100 connections\r\nyour mercy for graceful operations on workers is 60 seconds\r\nmapped 250032 bytes (244 KB) for 4 cores\r\n*** Operational MODE: preforking+threaded ***\r\n/var/www/qa-core/venv/lib/python3.5/site-packages/django/core/handlers/base.py:36: UserWarning: You do not have 'graphql_jwt.middleware.JSONWebTokenMiddleware' in your GRAPHENE['MIDDLEWARE'] setting. Please see the documentation for more information: <https://github.com/flavors/django-graphql-jwt#installation>\r\n  mw_instance = middleware(handler)\r\nWSGI app 0 (mountpoint='') ready in 1 seconds on interpreter 0x2097060 pid: 16914 (default app)\r\n*** uWSGI is running in multiple interpreter mode ***\r\nspawned uWSGI master process (pid: 16914)\r\nspawned uWSGI worker 1 (pid: 16927, cores: 2)\r\n*** Stats server enabled on /tmp/tenx_qa_stats.socket fd: 12 ***\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/58", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/58/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/58/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/58", "id": 388355496, "node_id": "MDU6SXNzdWUzODgzNTU0OTY=", "number": 58, "title": "pip install does not give decorators described in docs", "user": {"login": "valmack", "id": 8445610, "node_id": "MDQ6VXNlcjg0NDU2MTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/8445610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/valmack", "html_url": "https://github.com/valmack", "followers_url": "https://api.github.com/users/valmack/followers", "following_url": "https://api.github.com/users/valmack/following{/other_user}", "gists_url": "https://api.github.com/users/valmack/gists{/gist_id}", "starred_url": "https://api.github.com/users/valmack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/valmack/subscriptions", "organizations_url": "https://api.github.com/users/valmack/orgs", "repos_url": "https://api.github.com/users/valmack/repos", "events_url": "https://api.github.com/users/valmack/events{/privacy}", "received_events_url": "https://api.github.com/users/valmack/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214974, "node_id": "MDU6TGFiZWw3NDEyMTQ5NzQ=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-06T19:10:10Z", "updated_at": "2018-12-09T14:34:23Z", "closed_at": "2018-12-09T14:34:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have done both `$ pip install django-graphql-jwt` and `$ pip install django-graphql-jwt==0.2.0`\r\n\r\nThis is what the resulting `decorators.py` file looks like (and I point out what's missing in comments):\r\n\r\n```\r\nfrom functools import wraps\r\n\r\nfrom django.contrib.auth import authenticate, get_user_model\r\nfrom django.utils import six\r\nfrom django.utils.translation import ugettext as _\r\n\r\nfrom promise import Promise, is_thenable\r\n\r\nfrom . import exceptions\r\nfrom .refresh_token.shortcuts import create_refresh_token\r\nfrom .settings import jwt_settings\r\nfrom .shortcuts import get_token\r\nfrom .utils import get_authorization_header\r\n\r\n__all__ = [\r\n    'user_passes_test',\r\n    'login_required',\r\n    'staff_member_required',\r\n    'permission_required',\r\n    'token_auth',\r\n]\r\n\r\n\r\ndef context(f):\r\n    def decorator(func):\r\n        def wrapper(*args, **kwargs):\r\n            info = args[f.__code__.co_varnames.index('info')]\r\n            return func(info.context, *args, **kwargs)\r\n        return wrapper\r\n    return decorator\r\n\r\n\r\ndef user_passes_test(test_func):\r\n    def decorator(f):\r\n        @wraps(f)\r\n        @context(f)\r\n        def wrapper(context, *args, **kwargs):\r\n            if test_func(context.user):\r\n                return f(*args, **kwargs)\r\n            raise exceptions.PermissionDenied()\r\n        return wrapper\r\n    return decorator\r\n\r\n\r\nlogin_required = user_passes_test(lambda u: u.is_authenticated)\r\nstaff_member_required = user_passes_test(lambda u: u.is_active and u.is_staff)\r\n\r\n### MISSING:\r\n# superuser_required = user_passes_test(lambda u: u.is_active and u.is_superuser)\r\n\r\ndef permission_required(perm):\r\n    def check_perms(user):\r\n        if isinstance(perm, six.string_types):\r\n            perms = (perm,)\r\n        else:\r\n            perms = perm\r\n\r\n        if user.has_perms(perms):\r\n            return True\r\n        return False\r\n    return user_passes_test(check_perms)\r\n\r\n\r\ndef token_auth(f):\r\n    @wraps(f)\r\n    def wrapper(cls, root, info, password, **kwargs):\r\n        def on_resolve(values):\r\n            user, payload = values\r\n            payload.token = get_token(user, info.context)\r\n\r\n            if jwt_settings.JWT_LONG_RUNNING_REFRESH_TOKEN:\r\n                payload.refresh_token = create_refresh_token(user).token\r\n\r\n            return payload\r\n\r\n        username = kwargs.get(get_user_model().USERNAME_FIELD)\r\n\r\n        if get_authorization_header(info.context) is not None:\r\n            del info.context.META[jwt_settings.JWT_AUTH_HEADER_NAME]\r\n\r\n        user = authenticate(\r\n            request=info.context,\r\n            username=username,\r\n            password=password)\r\n\r\n        if user is None:\r\n            raise exceptions.JSONWebTokenError(\r\n                _('Please, enter valid credentials'))\r\n\r\n        if hasattr(info.context, 'user'):\r\n            info.context.user = user\r\n\r\n        result = f(cls, root, info, **kwargs)\r\n        values = (user, result)\r\n\r\n        if is_thenable(result):\r\n            return Promise.resolve(values).then(on_resolve)\r\n        return on_resolve(values)\r\n    return wrapper\r\n```\r\n\r\nAm I crazy? It was just missing the one line that I was trying to use...\r\n\r\nIf I'm not crazy then (1) the docs and github have a different version than what is on pip or (2) someone is fking with me", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/56", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/56/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/56/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/56", "id": 386888662, "node_id": "MDU6SXNzdWUzODY4ODg2NjI=", "number": 56, "title": "How to get user identity?", "user": {"login": "wahello", "id": 3362049, "node_id": "MDQ6VXNlcjMzNjIwNDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/3362049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wahello", "html_url": "https://github.com/wahello", "followers_url": "https://api.github.com/users/wahello/followers", "following_url": "https://api.github.com/users/wahello/following{/other_user}", "gists_url": "https://api.github.com/users/wahello/gists{/gist_id}", "starred_url": "https://api.github.com/users/wahello/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wahello/subscriptions", "organizations_url": "https://api.github.com/users/wahello/orgs", "repos_url": "https://api.github.com/users/wahello/repos", "events_url": "https://api.github.com/users/wahello/events{/privacy}", "received_events_url": "https://api.github.com/users/wahello/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214974, "node_id": "MDU6TGFiZWw3NDEyMTQ5NzQ=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-12-03T16:07:52Z", "updated_at": "2019-01-30T00:17:03Z", "closed_at": "2019-01-30T00:17:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "How  to get user identity? just like [flask-jwt-extended](https://github.com/vimalloc/flask-jwt-extended) method get_jwt_identity", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/55", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/55/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/55/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/55", "id": 386579400, "node_id": "MDU6SXNzdWUzODY1Nzk0MDA=", "number": 55, "title": " Added Per-cookie authentication", "user": {"login": "skitoo", "id": 493610, "node_id": "MDQ6VXNlcjQ5MzYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/493610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skitoo", "html_url": "https://github.com/skitoo", "followers_url": "https://api.github.com/users/skitoo/followers", "following_url": "https://api.github.com/users/skitoo/following{/other_user}", "gists_url": "https://api.github.com/users/skitoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/skitoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skitoo/subscriptions", "organizations_url": "https://api.github.com/users/skitoo/orgs", "repos_url": "https://api.github.com/users/skitoo/repos", "events_url": "https://api.github.com/users/skitoo/events{/privacy}", "received_events_url": "https://api.github.com/users/skitoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214969, "node_id": "MDU6TGFiZWw3NDEyMTQ5Njk=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-12-02T17:14:47Z", "updated_at": "2019-04-28T12:58:26Z", "closed_at": "2019-02-12T21:24:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "As mentioned in this article (https://dev.to/rdegges/please-stop-using-local-storage-1i04), storing sensitive data in localstorage is a bad idea.\r\nI think it would be good to allow the JWT token to be stored in a cookie with the \"httpOnly\" and \"secure\" flags to counter XSS attacks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/54", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/54/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/54/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/54", "id": 384518966, "node_id": "MDU6SXNzdWUzODQ1MTg5NjY=", "number": 54, "title": "Allow to pass schema to the JSONWebTokenTestCase", "user": {"login": "martini97", "id": 18130319, "node_id": "MDQ6VXNlcjE4MTMwMzE5", "avatar_url": "https://avatars0.githubusercontent.com/u/18130319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martini97", "html_url": "https://github.com/martini97", "followers_url": "https://api.github.com/users/martini97/followers", "following_url": "https://api.github.com/users/martini97/following{/other_user}", "gists_url": "https://api.github.com/users/martini97/gists{/gist_id}", "starred_url": "https://api.github.com/users/martini97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martini97/subscriptions", "organizations_url": "https://api.github.com/users/martini97/orgs", "repos_url": "https://api.github.com/users/martini97/repos", "events_url": "https://api.github.com/users/martini97/events{/privacy}", "received_events_url": "https://api.github.com/users/martini97/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214974, "node_id": "MDU6TGFiZWw3NDEyMTQ5NzQ=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-26T21:31:43Z", "updated_at": "2018-12-16T16:20:59Z", "closed_at": "2018-12-16T16:20:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Right now we need to have `GRAPHENE.SCHEMA` defined to run the tests, could we be allowed to pass the schema to the client too?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/53", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/53/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/53/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/53", "id": 383940478, "node_id": "MDU6SXNzdWUzODM5NDA0Nzg=", "number": 53, "title": "Return User with ObtainJSONWebToken and token_auth decorator", "user": {"login": "nwaxiomatic", "id": 6418424, "node_id": "MDQ6VXNlcjY0MTg0MjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/6418424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nwaxiomatic", "html_url": "https://github.com/nwaxiomatic", "followers_url": "https://api.github.com/users/nwaxiomatic/followers", "following_url": "https://api.github.com/users/nwaxiomatic/following{/other_user}", "gists_url": "https://api.github.com/users/nwaxiomatic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nwaxiomatic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nwaxiomatic/subscriptions", "organizations_url": "https://api.github.com/users/nwaxiomatic/orgs", "repos_url": "https://api.github.com/users/nwaxiomatic/repos", "events_url": "https://api.github.com/users/nwaxiomatic/events{/privacy}", "received_events_url": "https://api.github.com/users/nwaxiomatic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-23T23:17:46Z", "updated_at": "2018-11-29T18:52:59Z", "closed_at": "2018-11-29T18:52:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "currently the ObtainJSONWebToken mutation, specifically the @token_auth decorator, doesnt return the user with the token so you have to send two requests to get the user data after logging in. \r\n\r\nBecause token_auth is written as a decorator (an area I'm not super comfortable with) it makes it difficult to extend this mutation to get the user data, so you currently have to rewrite the entire decorator just to add ```payload.user = user``` in the `on_resolve` method inside it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/52", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/52/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/52/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/52", "id": 381868008, "node_id": "MDU6SXNzdWUzODE4NjgwMDg=", "number": 52, "title": "Refresh tokens are stored in plain text", "user": {"login": "rangermeier", "id": 1318556, "node_id": "MDQ6VXNlcjEzMTg1NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1318556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rangermeier", "html_url": "https://github.com/rangermeier", "followers_url": "https://api.github.com/users/rangermeier/followers", "following_url": "https://api.github.com/users/rangermeier/following{/other_user}", "gists_url": "https://api.github.com/users/rangermeier/gists{/gist_id}", "starred_url": "https://api.github.com/users/rangermeier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rangermeier/subscriptions", "organizations_url": "https://api.github.com/users/rangermeier/orgs", "repos_url": "https://api.github.com/users/rangermeier/repos", "events_url": "https://api.github.com/users/rangermeier/events{/privacy}", "received_events_url": "https://api.github.com/users/rangermeier/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 741214969, "node_id": "MDU6TGFiZWw3NDEyMTQ5Njk=", "url": "https://api.github.com/repos/flavors/django-graphql-jwt/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-17T14:31:51Z", "updated_at": "2018-12-08T13:26:10Z", "closed_at": "2018-12-08T13:26:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "The refresh tokens introduced in v0.2.0 are stored in plain text in the DB. In case someone gets access to them, he/she can impersonate any user on the site.\r\n\r\nStoring a hashed version of the refresh tokens, just like it is done with passwords, would make them useless for an attacker.\r\n\r\nAnyways, thanks for your great work on this project!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/51", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/51/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/51/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/51", "id": 380866527, "node_id": "MDU6SXNzdWUzODA4NjY1Mjc=", "number": 51, "title": "Raise custom exception with decorators", "user": {"login": "kendallroth", "id": 12562420, "node_id": "MDQ6VXNlcjEyNTYyNDIw", "avatar_url": "https://avatars1.githubusercontent.com/u/12562420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kendallroth", "html_url": "https://github.com/kendallroth", "followers_url": "https://api.github.com/users/kendallroth/followers", "following_url": "https://api.github.com/users/kendallroth/following{/other_user}", "gists_url": "https://api.github.com/users/kendallroth/gists{/gist_id}", "starred_url": "https://api.github.com/users/kendallroth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kendallroth/subscriptions", "organizations_url": "https://api.github.com/users/kendallroth/orgs", "repos_url": "https://api.github.com/users/kendallroth/repos", "events_url": "https://api.github.com/users/kendallroth/events{/privacy}", "received_events_url": "https://api.github.com/users/kendallroth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-14T20:09:25Z", "updated_at": "2018-11-28T16:06:53Z", "closed_at": "2018-11-28T16:06:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice if the decorators would support raising a custom exception (see line in decorators). I would like to implement a `@verification_required` annotation that would extend the `@user_passes_test` function to include checking the custom verification field on the `User` model. However, it currently raises the permission error, rather than my own error for verification.\r\n\r\nhttps://github.com/flavors/django-graphql-jwt/blob/master/graphql_jwt/decorators.py#L40", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/47", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/47/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/47/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/47", "id": 375992895, "node_id": "MDU6SXNzdWUzNzU5OTI4OTU=", "number": 47, "title": "Improve per-argument authentication flow", "user": {"login": "Speedy1991", "id": 15920408, "node_id": "MDQ6VXNlcjE1OTIwNDA4", "avatar_url": "https://avatars3.githubusercontent.com/u/15920408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Speedy1991", "html_url": "https://github.com/Speedy1991", "followers_url": "https://api.github.com/users/Speedy1991/followers", "following_url": "https://api.github.com/users/Speedy1991/following{/other_user}", "gists_url": "https://api.github.com/users/Speedy1991/gists{/gist_id}", "starred_url": "https://api.github.com/users/Speedy1991/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Speedy1991/subscriptions", "organizations_url": "https://api.github.com/users/Speedy1991/orgs", "repos_url": "https://api.github.com/users/Speedy1991/repos", "events_url": "https://api.github.com/users/Speedy1991/events{/privacy}", "received_events_url": "https://api.github.com/users/Speedy1991/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-10-31T14:34:36Z", "updated_at": "2018-12-08T13:27:05Z", "closed_at": "2018-12-08T13:27:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "As far i know the middlewares in graphene are evaluated for each Resolver/Field.\r\n\r\nRunning through the `JSONWebTokenMiddleware` for each Field doesn't make sense in my eyes, because Authentication should take place per request.\r\n\r\n> Added Per-argument authentication\r\n\r\nThis should be optional in my opinion, because if you use the `JSONWebTokenMiddleware` as _normal_ Middleware, you always get warnings like:\r\n\r\n> UserWarning: You do not have 'graphql_jwt.middleware.JSONWebTokenMiddleware' in your GRAPHENE['MIDDLEWARE'] setting. Please see the documentation for more information: <https://github.com/flavors/django-graphql-jwt#installation>  mw_instance = middleware(handler)\r\n\r\nMy suggestion is to make 2 kinds of Middlewares:\r\n- Old default Middleware (for users which don't need the per argument authentication)\r\n- Inherit the new Middleware from the old one and add `resolve()` + warning\r\n\r\nIf you are interested i can make a PR", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/46", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/46/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/46/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/46", "id": 374934598, "node_id": "MDU6SXNzdWUzNzQ5MzQ1OTg=", "number": 46, "title": "Login with email and username", "user": {"login": "Mhs-220", "id": 23723127, "node_id": "MDQ6VXNlcjIzNzIzMTI3", "avatar_url": "https://avatars1.githubusercontent.com/u/23723127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mhs-220", "html_url": "https://github.com/Mhs-220", "followers_url": "https://api.github.com/users/Mhs-220/followers", "following_url": "https://api.github.com/users/Mhs-220/following{/other_user}", "gists_url": "https://api.github.com/users/Mhs-220/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mhs-220/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mhs-220/subscriptions", "organizations_url": "https://api.github.com/users/Mhs-220/orgs", "repos_url": "https://api.github.com/users/Mhs-220/repos", "events_url": "https://api.github.com/users/Mhs-220/events{/privacy}", "received_events_url": "https://api.github.com/users/Mhs-220/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-29T09:53:02Z", "updated_at": "2018-10-30T06:42:59Z", "closed_at": "2018-10-30T06:42:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey! thanks for your great work\r\nhow can i override authenticate function for login, to the way that user can login with both username or email as username?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/42", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/42/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/42/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/42", "id": 368340981, "node_id": "MDU6SXNzdWUzNjgzNDA5ODE=", "number": 42, "title": "Unclear error in case of header authorization: \"Network error: Response not successful: Received status code 401\"", "user": {"login": "TitanFighter", "id": 12687911, "node_id": "MDQ6VXNlcjEyNjg3OTEx", "avatar_url": "https://avatars2.githubusercontent.com/u/12687911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TitanFighter", "html_url": "https://github.com/TitanFighter", "followers_url": "https://api.github.com/users/TitanFighter/followers", "following_url": "https://api.github.com/users/TitanFighter/following{/other_user}", "gists_url": "https://api.github.com/users/TitanFighter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TitanFighter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TitanFighter/subscriptions", "organizations_url": "https://api.github.com/users/TitanFighter/orgs", "repos_url": "https://api.github.com/users/TitanFighter/repos", "events_url": "https://api.github.com/users/TitanFighter/events{/privacy}", "received_events_url": "https://api.github.com/users/TitanFighter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-09T18:33:44Z", "updated_at": "2018-10-09T20:48:45Z", "closed_at": "2018-10-09T20:48:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I propose to make this error more clear.\r\n\r\nMy debug:\r\n  1. Lets add expired token to the header or even simple `JWT 123`;\r\n  2. Do back-end call from front-end (Insomnia does not work as a front-end because `request.user.is_anonymous` is not triggered);\r\n  3. Trace :)\r\n  3.1 middleware.py: `JSONWebTokenMiddleware.process_request()` + `user = authenticate(request=request)` called;\r\n  3.2 backend.py: `JSONWebTokenBackend.authenticate()` + `return get_user_by_token(token)` called;\r\n  3.3 shortcuts.py: `get_user_by_token()` + `payload = get_payload(token, context)` called;\r\n  3.4 utils.py: `get_payload` is called and raises either (depends on p1 above):\r\n      - `raise JSONWebTokenError(_('Signature has expired'))`\r\n      - `raise JSONWebTokenError(_('Invalid token'))`;\r\n  4. As a result `user = authenticate(request=request)` from p3.1 gets `JSONWebTokenError` and the code calls `return JsonResponse({'errors': [{'message': str(err)}],}, status=401)`, which in the logs of back-end looks like:\r\n```\r\ndjango-container | Unauthorized: /api/graphql/v1\r\ndjango-container | [09/Oct/2018 20:59:17] \"POST /api/graphql/v1 HTTP/1.1\" 401 53\r\n```\r\n\r\nor `catch` in case of front-end\r\n```\r\ntokenVerify (authToken) {\r\n  this.$apollo.mutate({\r\n    mutation: TOKEN_VERIFY,\r\n    variables: {token: authToken}\r\n  }).then((result) => {\r\n    ...\r\n  }).catch((error) => {\r\n    console.log('Problem ->', error.message)  // Problem -> Network error: Response not successful: Received status code 401\r\n  })\r\n}\r\n```\r\nwhich is not useful at all.\r\n\r\nI think it would be much much better to see real reason of the problem, which is either `Signature has expired` or `Invalid token`, which can be meaningfully handled.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/41", "repository_url": "https://api.github.com/repos/flavors/django-graphql-jwt", "labels_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/41/comments", "events_url": "https://api.github.com/repos/flavors/django-graphql-jwt/issues/41/events", "html_url": "https://github.com/flavors/django-graphql-jwt/issues/41", "id": 367911018, "node_id": "MDU6SXNzdWUzNjc5MTEwMTg=", "number": 41, "title": "Is there any reason to send token twice (in the header and in the query) in case of using verifyToken and refreshToken?", "user": {"login": "TitanFighter", "id": 12687911, "node_id": "MDQ6VXNlcjEyNjg3OTEx", "avatar_url": "https://avatars2.githubusercontent.com/u/12687911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TitanFighter", "html_url": "https://github.com/TitanFighter", "followers_url": "https://api.github.com/users/TitanFighter/followers", "following_url": "https://api.github.com/users/TitanFighter/following{/other_user}", "gists_url": "https://api.github.com/users/TitanFighter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TitanFighter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TitanFighter/subscriptions", "organizations_url": "https://api.github.com/users/TitanFighter/orgs", "repos_url": "https://api.github.com/users/TitanFighter/repos", "events_url": "https://api.github.com/users/TitanFighter/events{/privacy}", "received_events_url": "https://api.github.com/users/TitanFighter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-08T18:50:38Z", "updated_at": "2018-10-16T21:20:54Z", "closed_at": "2018-10-16T21:20:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I understand cases when we need to verify/refresh token which differs from the header, but is there any real reason to send the same token in the header and in the query in order to verify/refresh it?\r\n\r\nI think graphql-jwt should check whether token in query is provided and if no, should take it from the header and verify/refresh it (via `get_authorization_header`).", "performed_via_github_app": null, "score": 1.0}]}