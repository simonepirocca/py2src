{"total_count": 582, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/behave/behave/issues/846", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/846/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/846/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/846/events", "html_url": "https://github.com/behave/behave/issues/846", "id": 647620038, "node_id": "MDU6SXNzdWU2NDc2MjAwMzg=", "number": 846, "title": "How can I run multiple feature files with behave command ", "user": {"login": "smankena", "id": 55145492, "node_id": "MDQ6VXNlcjU1MTQ1NDky", "avatar_url": "https://avatars3.githubusercontent.com/u/55145492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smankena", "html_url": "https://github.com/smankena", "followers_url": "https://api.github.com/users/smankena/followers", "following_url": "https://api.github.com/users/smankena/following{/other_user}", "gists_url": "https://api.github.com/users/smankena/gists{/gist_id}", "starred_url": "https://api.github.com/users/smankena/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smankena/subscriptions", "organizations_url": "https://api.github.com/users/smankena/orgs", "repos_url": "https://api.github.com/users/smankena/repos", "events_url": "https://api.github.com/users/smankena/events{/privacy}", "received_events_url": "https://api.github.com/users/smankena/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-29T19:45:22Z", "updated_at": "2020-06-30T14:53:36Z", "closed_at": "2020-06-30T14:52:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to run multiple feature files and want to know how I can do it.Currently I can run one feature file with multiple tags but I cannot run multiple feature files\r\n\r\nCan I do something where I can run behave -i file_one.feature file_two.feature -D DEBUG=True ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/837", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/837/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/837/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/837/events", "html_url": "https://github.com/behave/behave/issues/837", "id": 622085381, "node_id": "MDU6SXNzdWU2MjIwODUzODE=", "number": 837, "title": "Can we get variable name used in the step definitions ", "user": {"login": "smankena", "id": 55145492, "node_id": "MDQ6VXNlcjU1MTQ1NDky", "avatar_url": "https://avatars3.githubusercontent.com/u/55145492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smankena", "html_url": "https://github.com/smankena", "followers_url": "https://api.github.com/users/smankena/followers", "following_url": "https://api.github.com/users/smankena/following{/other_user}", "gists_url": "https://api.github.com/users/smankena/gists{/gist_id}", "starred_url": "https://api.github.com/users/smankena/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smankena/subscriptions", "organizations_url": "https://api.github.com/users/smankena/orgs", "repos_url": "https://api.github.com/users/smankena/repos", "events_url": "https://api.github.com/users/smankena/events{/privacy}", "received_events_url": "https://api.github.com/users/smankena/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-20T21:07:56Z", "updated_at": "2020-06-08T16:54:28Z", "closed_at": "2020-06-08T16:54:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I know we get values of order_name and order_quantity but can we just get the variable names without the values assigned to them during the test run \r\n   \r\n @ff001_tc01\r\n    Scenario Outline: Create Order\r\n        When I make a request with name \"<order_name>\" and size \"<order_quantity>\" via API\r\nIn the step implementaion\r\n@step(\r\n    r'I make a rack creation request with name \"(?P<order_name>.*)\" and size \"(?P<order_quantity>.*)\" via API')\r\ndef step_impl(context, order_name, order_quantity):\r\n\r\nI wanted the order_name and order_quantity as as just strings not the values passed to them. Can it be acheived \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/836", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/836/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/836/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/836/events", "html_url": "https://github.com/behave/behave/issues/836", "id": 620995147, "node_id": "MDU6SXNzdWU2MjA5OTUxNDc=", "number": 836, "title": "Is this project dead?", "user": {"login": "ifalex", "id": 16538208, "node_id": "MDQ6VXNlcjE2NTM4MjA4", "avatar_url": "https://avatars0.githubusercontent.com/u/16538208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ifalex", "html_url": "https://github.com/ifalex", "followers_url": "https://api.github.com/users/ifalex/followers", "following_url": "https://api.github.com/users/ifalex/following{/other_user}", "gists_url": "https://api.github.com/users/ifalex/gists{/gist_id}", "starred_url": "https://api.github.com/users/ifalex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ifalex/subscriptions", "organizations_url": "https://api.github.com/users/ifalex/orgs", "repos_url": "https://api.github.com/users/ifalex/repos", "events_url": "https://api.github.com/users/ifalex/events{/privacy}", "received_events_url": "https://api.github.com/users/ifalex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-19T13:52:13Z", "updated_at": "2020-05-19T13:53:50Z", "closed_at": "2020-05-19T13:53:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I see last version is dated to 2018. Has been put on hold?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/835", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/835/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/835/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/835/events", "html_url": "https://github.com/behave/behave/issues/835", "id": 617765628, "node_id": "MDU6SXNzdWU2MTc3NjU2Mjg=", "number": 835, "title": "Unable to display color output in gitlab CI/CD", "user": {"login": "rileydak", "id": 50497232, "node_id": "MDQ6VXNlcjUwNDk3MjMy", "avatar_url": "https://avatars3.githubusercontent.com/u/50497232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rileydak", "html_url": "https://github.com/rileydak", "followers_url": "https://api.github.com/users/rileydak/followers", "following_url": "https://api.github.com/users/rileydak/following{/other_user}", "gists_url": "https://api.github.com/users/rileydak/gists{/gist_id}", "starred_url": "https://api.github.com/users/rileydak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rileydak/subscriptions", "organizations_url": "https://api.github.com/users/rileydak/orgs", "repos_url": "https://api.github.com/users/rileydak/repos", "events_url": "https://api.github.com/users/rileydak/events{/privacy}", "received_events_url": "https://api.github.com/users/rileydak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-13T21:26:19Z", "updated_at": "2020-06-05T09:55:46Z", "closed_at": "2020-06-05T09:55:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi team -\r\n\r\nI am working running behave in a gitlab CI/CD pipeline, and the output returns without color. According to gitlabs documentation, ANSI Color Escapes are supported. Any advice how to get color display working in a GitLab CI/CD job output?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/830", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/830/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/830/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/830/events", "html_url": "https://github.com/behave/behave/issues/830", "id": 605843124, "node_id": "MDU6SXNzdWU2MDU4NDMxMjQ=", "number": 830, "title": "Behave CLI hangs at end of test run in Powershell", "user": {"login": "HyperCharlie", "id": 54915690, "node_id": "MDQ6VXNlcjU0OTE1Njkw", "avatar_url": "https://avatars1.githubusercontent.com/u/54915690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HyperCharlie", "html_url": "https://github.com/HyperCharlie", "followers_url": "https://api.github.com/users/HyperCharlie/followers", "following_url": "https://api.github.com/users/HyperCharlie/following{/other_user}", "gists_url": "https://api.github.com/users/HyperCharlie/gists{/gist_id}", "starred_url": "https://api.github.com/users/HyperCharlie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HyperCharlie/subscriptions", "organizations_url": "https://api.github.com/users/HyperCharlie/orgs", "repos_url": "https://api.github.com/users/HyperCharlie/repos", "events_url": "https://api.github.com/users/HyperCharlie/events{/privacy}", "received_events_url": "https://api.github.com/users/HyperCharlie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-23T20:23:31Z", "updated_at": "2020-04-24T20:38:56Z", "closed_at": "2020-04-24T20:38:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running \"behave\" from a powershell CLI on Windows 10, and the tests run fine, but the app does not close at the end of the run, and it does not respond to cntl-C or any other escape clauses. The only way I can end it is by killing the \"python\" process via the task manager. I have Python 3.7 installed, only, and am not running in a VENV. I'm not sure how to recreate elsewhere as I do not have a successful example. I have just been bootstrapping it versus a dockerized version of my server for REST based testing. behave -v does not offer anything seemingly helpful, the last line is the same \"Took 0m2.326s\"", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/828", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/828/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/828/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/828/events", "html_url": "https://github.com/behave/behave/issues/828", "id": 603176382, "node_id": "MDU6SXNzdWU2MDMxNzYzODI=", "number": 828, "title": "Needs love and another maintainer", "user": {"login": "rayjlinden", "id": 42587610, "node_id": "MDQ6VXNlcjQyNTg3NjEw", "avatar_url": "https://avatars0.githubusercontent.com/u/42587610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rayjlinden", "html_url": "https://github.com/rayjlinden", "followers_url": "https://api.github.com/users/rayjlinden/followers", "following_url": "https://api.github.com/users/rayjlinden/following{/other_user}", "gists_url": "https://api.github.com/users/rayjlinden/gists{/gist_id}", "starred_url": "https://api.github.com/users/rayjlinden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rayjlinden/subscriptions", "organizations_url": "https://api.github.com/users/rayjlinden/orgs", "repos_url": "https://api.github.com/users/rayjlinden/repos", "events_url": "https://api.github.com/users/rayjlinden/events{/privacy}", "received_events_url": "https://api.github.com/users/rayjlinden/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-20T11:47:49Z", "updated_at": "2020-06-05T10:39:39Z", "closed_at": "2020-06-05T10:39:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "There are a bunch of PRs approved and not merged.  Yet so little activity on this project.  Maybe this project needs another maintainer?  It certainly needs a little love...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/825", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/825/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/825/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/825/events", "html_url": "https://github.com/behave/behave/issues/825", "id": 595999390, "node_id": "MDU6SXNzdWU1OTU5OTkzOTA=", "number": 825, "title": "Support for shared steps", "user": {"login": "athityakumar", "id": 17109060, "node_id": "MDQ6VXNlcjE3MTA5MDYw", "avatar_url": "https://avatars0.githubusercontent.com/u/17109060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/athityakumar", "html_url": "https://github.com/athityakumar", "followers_url": "https://api.github.com/users/athityakumar/followers", "following_url": "https://api.github.com/users/athityakumar/following{/other_user}", "gists_url": "https://api.github.com/users/athityakumar/gists{/gist_id}", "starred_url": "https://api.github.com/users/athityakumar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/athityakumar/subscriptions", "organizations_url": "https://api.github.com/users/athityakumar/orgs", "repos_url": "https://api.github.com/users/athityakumar/repos", "events_url": "https://api.github.com/users/athityakumar/events{/privacy}", "received_events_url": "https://api.github.com/users/athityakumar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 477914229, "node_id": "MDU6TGFiZWw0Nzc5MTQyMjk=", "url": "https://api.github.com/repos/behave/behave/labels/insufficient-information", "name": "insufficient-information", "color": "5319e7", "default": false, "description": null}, {"id": 82233946, "node_id": "MDU6TGFiZWw4MjIzMzk0Ng==", "url": "https://api.github.com/repos/behave/behave/labels/probably-mistaken", "name": "probably-mistaken", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-07T16:30:25Z", "updated_at": "2020-04-08T06:36:45Z", "closed_at": "2020-04-08T06:36:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Let's say we have 2 features that have shared step functionality and we'd like to have it as DRY (Don't Repeat Yourself) as possible. Would it be possible to have shared steps?\r\n\r\nThis setup currently gives **`behave.step_registry.AmbiguousStep: @when('generic starting condition') has already been defined in existing step @when('generic starting condition') at features/steps/shared_steps.py:2`**:\r\n\r\n```feature\r\n#! features/foo.feature\r\nFeature: feature foo\r\n  Scenario: scenario 1\r\n    Given generic starting condition\r\n    When condition_1\r\n    Then take action_1\r\n\r\n#! features/bar.feature\r\nFeature: feature bar\r\n  Scenario: scenario 1\r\n    Given generic starting condition\r\n    When condition_1\r\n    Then take action_1\r\n```\r\n\r\n```py\r\n#! features/steps/shared_steps.py\r\nfrom behave import given, when, then, step\r\n@given(\"generic starting condition\")\r\ndef step_impl(context):\r\n    # do some step which is shared between multiple features\r\n\r\n#! features/steps/foo_step.py\r\nfrom behave import given, when, then, step\r\nfrom features.steps.shared_steps import *\r\n\r\n... #! everything except for: \"Given generic starting condition\"\r\n\r\n#! features/steps/bar_step.py\r\nfrom behave import given, when, then, step\r\nfrom features.steps.shared_steps import *\r\n\r\n... #! everything except for: \"Given generic starting condition\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/822", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/822/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/822/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/822/events", "html_url": "https://github.com/behave/behave/issues/822", "id": 593765710, "node_id": "MDU6SXNzdWU1OTM3NjU3MTA=", "number": 822, "title": "Alternative use of behave (for non-testing purposes)", "user": {"login": "athityakumar", "id": 17109060, "node_id": "MDQ6VXNlcjE3MTA5MDYw", "avatar_url": "https://avatars0.githubusercontent.com/u/17109060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/athityakumar", "html_url": "https://github.com/athityakumar", "followers_url": "https://api.github.com/users/athityakumar/followers", "following_url": "https://api.github.com/users/athityakumar/following{/other_user}", "gists_url": "https://api.github.com/users/athityakumar/gists{/gist_id}", "starred_url": "https://api.github.com/users/athityakumar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/athityakumar/subscriptions", "organizations_url": "https://api.github.com/users/athityakumar/orgs", "repos_url": "https://api.github.com/users/athityakumar/repos", "events_url": "https://api.github.com/users/athityakumar/events{/privacy}", "received_events_url": "https://api.github.com/users/athityakumar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-04-04T07:37:32Z", "updated_at": "2020-06-05T10:40:58Z", "closed_at": "2020-06-05T10:40:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey there! \ud83d\udc4b \r\n\r\nThanks a lot for building behave! I was actually trying to use behave for another use-case where we'd like to expose some actions based on Gherkin DSL (easier for people to write and contribute); and just wanted to know if it's possible through the behave API.\r\n\r\nHere's my use-case. Let's say there's a flask service endpoint people can input some condition (clause) and get some response back depending on which clause they've specified. In the back-end, we have a huge nested if-else decision-tree that decides the response based on the clause the user has specified.\r\n\r\nWe're trying to port this huge nested if-else block from a centralized one to behave feature-file with lots of scenarios. That way, it'll be more distributed and easier to be crowd-sourced right? Just wanted to know if user input can somehow be plugged in to go through all different scenarios, get the matching scenario (like getting matching leaf of the decision tree) and take action only for the matching scenario.\r\n\r\n```\r\n#! decision_tree.feature\r\n\r\nFeature: Deciding based on user input\r\n\r\n  Scenario: Scenario_1_1\r\n    Given we have received action_type_1\r\n    When we have received input_1\r\n    Then we take action_1_1\r\n\r\n  Scenario: Scenario_1_2\r\n    Given we have received action_type_1\r\n    When we have received input_2\r\n    Then we take action_1_2\r\n\r\n  Scenario: Scenario_2_1\r\n    Given we have received action_type_2\r\n    When we have received input_1\r\n    Then we take action_2_1\r\n\r\n...\r\n```\r\n\r\nAnd when user gives input through flask service like `action_type=1, input=2`, I'd like to get the precise scenario (`Scenario_1_2`) and get the given-when-then blocks in that scenario. Would this be possible through the behave API?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/820", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/820/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/820/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/820/events", "html_url": "https://github.com/behave/behave/issues/820", "id": 589818023, "node_id": "MDU6SXNzdWU1ODk4MTgwMjM=", "number": 820, "title": "Long running phase stops the console output", "user": {"login": "tigstep", "id": 7043397, "node_id": "MDQ6VXNlcjcwNDMzOTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7043397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tigstep", "html_url": "https://github.com/tigstep", "followers_url": "https://api.github.com/users/tigstep/followers", "following_url": "https://api.github.com/users/tigstep/following{/other_user}", "gists_url": "https://api.github.com/users/tigstep/gists{/gist_id}", "starred_url": "https://api.github.com/users/tigstep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tigstep/subscriptions", "organizations_url": "https://api.github.com/users/tigstep/orgs", "repos_url": "https://api.github.com/users/tigstep/repos", "events_url": "https://api.github.com/users/tigstep/events{/privacy}", "received_events_url": "https://api.github.com/users/tigstep/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-29T15:32:34Z", "updated_at": "2020-03-29T23:30:43Z", "closed_at": "2020-03-29T23:30:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a simple python-behave test that uses boto3, connects to aws, runs a pipeline there, grabs the output file and validates it.\r\n\r\nHere are the phases of the above described scenario\r\n\r\n```\r\n1) @Given pipeline is initiated\r\n   kick off an emr cluster\r\n2) @And pipeline is successfully completed\r\n   wait until completed\r\n3) @Then the output should be\r\n   grab the output file and assert it is valid\r\n```\r\nThe problem that I am facing is, the 2nd phase above takes around 15 minutes to complete. When I run\r\n\r\n`behave`\r\nI can see the message for the first phase being logged on the console successfully like below\r\n\r\n```\r\nFeature: Feature Name\r\n    Feature description\r\n    Scenario: Start the pipeline\r\n        Given pipeline is initiated ... pass\r\n        And pipeline is successfully completed\r\n```\r\nbehave stops outputting anything on the console from this point.\r\n\r\nIf I modify and make the second phase execution shorter everything is being logged successfully.\r\n\r\nI went over the behave's documentation and could not find any config that would handle this. Can someone please advise if there is any way to handle this? It is crucial for me to generate successful reports, even if one of the phases is taking long to complete.\r\n\r\nThank you!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/818", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/818/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/818/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/818/events", "html_url": "https://github.com/behave/behave/issues/818", "id": 585677581, "node_id": "MDU6SXNzdWU1ODU2Nzc1ODE=", "number": 818, "title": "Cannot access properties in behave.ini", "user": {"login": "longk15t", "id": 6722910, "node_id": "MDQ6VXNlcjY3MjI5MTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/6722910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/longk15t", "html_url": "https://github.com/longk15t", "followers_url": "https://api.github.com/users/longk15t/followers", "following_url": "https://api.github.com/users/longk15t/following{/other_user}", "gists_url": "https://api.github.com/users/longk15t/gists{/gist_id}", "starred_url": "https://api.github.com/users/longk15t/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/longk15t/subscriptions", "organizations_url": "https://api.github.com/users/longk15t/orgs", "repos_url": "https://api.github.com/users/longk15t/repos", "events_url": "https://api.github.com/users/longk15t/events{/privacy}", "received_events_url": "https://api.github.com/users/longk15t/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 82233946, "node_id": "MDU6TGFiZWw4MjIzMzk0Ng==", "url": "https://api.github.com/repos/behave/behave/labels/probably-mistaken", "name": "probably-mistaken", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-22T09:31:06Z", "updated_at": "2020-04-07T20:10:11Z", "closed_at": "2020-04-07T20:10:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello guys, have a good day, I can't access data in `behave.ini` file.\r\n\r\nI have a `behave.ini` file which has a userdata property\r\n```\r\n[behave.userdata]\r\nbrowser = firefox\r\n```\r\nin `environment.py` I print the value of this `browser` property\r\n```\r\ndef before_all(context):\r\n    print(context.config.userdata[\"browser\"])\r\n```\r\nWhen I run command `behave`, I get empty dictionary `{}`\r\n`environment.py` and `behave.ini` are in the same directory. What did I miss ? Thanks in advanced.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/816", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/816/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/816/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/816/events", "html_url": "https://github.com/behave/behave/issues/816", "id": 578360179, "node_id": "MDU6SXNzdWU1NzgzNjAxNzk=", "number": 816, "title": "How to change the status of a scenario in behave python", "user": {"login": "babu1998", "id": 20140511, "node_id": "MDQ6VXNlcjIwMTQwNTEx", "avatar_url": "https://avatars3.githubusercontent.com/u/20140511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/babu1998", "html_url": "https://github.com/babu1998", "followers_url": "https://api.github.com/users/babu1998/followers", "following_url": "https://api.github.com/users/babu1998/following{/other_user}", "gists_url": "https://api.github.com/users/babu1998/gists{/gist_id}", "starred_url": "https://api.github.com/users/babu1998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/babu1998/subscriptions", "organizations_url": "https://api.github.com/users/babu1998/orgs", "repos_url": "https://api.github.com/users/babu1998/repos", "events_url": "https://api.github.com/users/babu1998/events{/privacy}", "received_events_url": "https://api.github.com/users/babu1998/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-10T06:13:14Z", "updated_at": "2020-04-17T06:21:11Z", "closed_at": "2020-03-10T08:47:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\ndef after_scenario(context, scenario):\r\n\r\nif scenario.status == Status.failed and context.status == \"negative\":\r\n\r\n    scenario.status = Status.passed\r\n\r\nif scenario.status == Status.passed and context.status == \"negative\":\r\n\r\n    scenario.status = Status.failed\r\n\r\n\r\n```\r\n\r\nI am getting HOOK-ERROR in after_scenario: AttributeError: can't set attribute", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/811", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/811/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/811/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/811/events", "html_url": "https://github.com/behave/behave/issues/811", "id": 561538111, "node_id": "MDU6SXNzdWU1NjE1MzgxMTE=", "number": 811, "title": "stage environment ", "user": {"login": "loutente", "id": 20204061, "node_id": "MDQ6VXNlcjIwMjA0MDYx", "avatar_url": "https://avatars1.githubusercontent.com/u/20204061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/loutente", "html_url": "https://github.com/loutente", "followers_url": "https://api.github.com/users/loutente/followers", "following_url": "https://api.github.com/users/loutente/following{/other_user}", "gists_url": "https://api.github.com/users/loutente/gists{/gist_id}", "starred_url": "https://api.github.com/users/loutente/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/loutente/subscriptions", "organizations_url": "https://api.github.com/users/loutente/orgs", "repos_url": "https://api.github.com/users/loutente/repos", "events_url": "https://api.github.com/users/loutente/events{/privacy}", "received_events_url": "https://api.github.com/users/loutente/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 82233946, "node_id": "MDU6TGFiZWw4MjIzMzk0Ng==", "url": "https://api.github.com/repos/behave/behave/labels/probably-mistaken", "name": "probably-mistaken", "color": "d4c5f9", "default": false, "description": null}, {"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-07T10:04:10Z", "updated_at": "2020-02-11T07:17:33Z", "closed_at": "2020-02-11T07:17:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "[Related documentation](https://behave.readthedocs.io/en/latest/new_and_noteworthy_v1.2.5.html#test-stages)\r\n\r\nWhen I call behave with my stage the dedicated stage_environment.py is never called\r\n\r\nAny idea ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/810", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/810/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/810/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/810/events", "html_url": "https://github.com/behave/behave/issues/810", "id": 561367124, "node_id": "MDU6SXNzdWU1NjEzNjcxMjQ=", "number": 810, "title": "Unable to run 'behave -n' when the search string contains bracket", "user": {"login": "xv-chris-w", "id": 23490869, "node_id": "MDQ6VXNlcjIzNDkwODY5", "avatar_url": "https://avatars0.githubusercontent.com/u/23490869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xv-chris-w", "html_url": "https://github.com/xv-chris-w", "followers_url": "https://api.github.com/users/xv-chris-w/followers", "following_url": "https://api.github.com/users/xv-chris-w/following{/other_user}", "gists_url": "https://api.github.com/users/xv-chris-w/gists{/gist_id}", "starred_url": "https://api.github.com/users/xv-chris-w/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xv-chris-w/subscriptions", "organizations_url": "https://api.github.com/users/xv-chris-w/orgs", "repos_url": "https://api.github.com/users/xv-chris-w/repos", "events_url": "https://api.github.com/users/xv-chris-w/events{/privacy}", "received_events_url": "https://api.github.com/users/xv-chris-w/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-07T01:28:03Z", "updated_at": "2020-02-09T19:41:13Z", "closed_at": "2020-02-09T19:41:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "**HOW TO REPRODUCE**\r\nHave a test name that contains brackets: \r\n\r\n> Scenario: This is a test name (1.0)\r\n>     Given A\r\n>     When B\r\n>     Then C\r\n\r\nand try run test with the full name which contains the brackets,  behave is unable to identify the test\r\n`behave -n 'This is a test name (1.0)'`.\r\n\r\n\r\n**WORKAROUND**\r\nWe will need to escape the bracket to make it work \r\n`behave -n 'This is a test name \\(1.0\\)'`\r\n\r\n\r\n**EXPECTED**\r\nWe should be able to use the bracket in the string without escaping it.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/809", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/809/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/809/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/809/events", "html_url": "https://github.com/behave/behave/issues/809", "id": 558547355, "node_id": "MDU6SXNzdWU1NTg1NDczNTU=", "number": 809, "title": "Anybody in FOSDEM?", "user": {"login": "xrg", "id": 9214, "node_id": "MDQ6VXNlcjkyMTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/9214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xrg", "html_url": "https://github.com/xrg", "followers_url": "https://api.github.com/users/xrg/followers", "following_url": "https://api.github.com/users/xrg/following{/other_user}", "gists_url": "https://api.github.com/users/xrg/gists{/gist_id}", "starred_url": "https://api.github.com/users/xrg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xrg/subscriptions", "organizations_url": "https://api.github.com/users/xrg/orgs", "repos_url": "https://api.github.com/users/xrg/repos", "events_url": "https://api.github.com/users/xrg/events{/privacy}", "received_events_url": "https://api.github.com/users/xrg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-01T14:19:59Z", "updated_at": "2020-02-04T07:20:42Z", "closed_at": "2020-02-02T22:42:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry for the off-topic, but apparently there is no other communication.\r\nIs anybody from you around in FOSDEM, should we discuss about a community?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/807", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/807/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/807/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/807/events", "html_url": "https://github.com/behave/behave/issues/807", "id": 557522924, "node_id": "MDU6SXNzdWU1NTc1MjI5MjQ=", "number": 807, "title": "scenario.name is empty in before_scenario hook", "user": {"login": "MichaelBaarzIngka", "id": 60474804, "node_id": "MDQ6VXNlcjYwNDc0ODA0", "avatar_url": "https://avatars2.githubusercontent.com/u/60474804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MichaelBaarzIngka", "html_url": "https://github.com/MichaelBaarzIngka", "followers_url": "https://api.github.com/users/MichaelBaarzIngka/followers", "following_url": "https://api.github.com/users/MichaelBaarzIngka/following{/other_user}", "gists_url": "https://api.github.com/users/MichaelBaarzIngka/gists{/gist_id}", "starred_url": "https://api.github.com/users/MichaelBaarzIngka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MichaelBaarzIngka/subscriptions", "organizations_url": "https://api.github.com/users/MichaelBaarzIngka/orgs", "repos_url": "https://api.github.com/users/MichaelBaarzIngka/repos", "events_url": "https://api.github.com/users/MichaelBaarzIngka/events{/privacy}", "received_events_url": "https://api.github.com/users/MichaelBaarzIngka/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 477914229, "node_id": "MDU6TGFiZWw0Nzc5MTQyMjk=", "url": "https://api.github.com/repos/behave/behave/labels/insufficient-information", "name": "insufficient-information", "color": "5319e7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-30T14:16:34Z", "updated_at": "2020-01-30T22:50:25Z", "closed_at": "2020-01-30T22:50:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\n\r\nI'm using now behave 1.2.6 where scenario.name is empty. In some version (I dont remember before) it has always worked.\r\n\r\ndef before_scenario(context, scenario):\r\n    raise OSError(str(scenario.name))\r\n\r\n--> return nothing, same with after_scenario hook.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/806", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/806/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/806/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/806/events", "html_url": "https://github.com/behave/behave/issues/806", "id": 555762013, "node_id": "MDU6SXNzdWU1NTU3NjIwMTM=", "number": 806, "title": "Boolean Expressions with Active Tags", "user": {"login": "bschwyn", "id": 4263126, "node_id": "MDQ6VXNlcjQyNjMxMjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/4263126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bschwyn", "html_url": "https://github.com/bschwyn", "followers_url": "https://api.github.com/users/bschwyn/followers", "following_url": "https://api.github.com/users/bschwyn/following{/other_user}", "gists_url": "https://api.github.com/users/bschwyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/bschwyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bschwyn/subscriptions", "organizations_url": "https://api.github.com/users/bschwyn/orgs", "repos_url": "https://api.github.com/users/bschwyn/repos", "events_url": "https://api.github.com/users/bschwyn/events{/privacy}", "received_events_url": "https://api.github.com/users/bschwyn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31826678, "node_id": "MDU6TGFiZWwzMTgyNjY3OA==", "url": "https://api.github.com/repos/behave/behave/labels/enhancement", "name": "enhancement", "color": "02d7e1", "default": true, "description": null}, {"id": 836638861, "node_id": "MDU6TGFiZWw4MzY2Mzg4NjE=", "url": "https://api.github.com/repos/behave/behave/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-27T18:46:40Z", "updated_at": "2020-08-16T07:12:36Z", "closed_at": "2020-08-16T07:12:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to make active tags with more complicated logic, something like:\r\n\r\n`use.with_((category1=A or category1=B or (category1=C and category2=D)) and category3=E)`\r\n\r\nor \r\n\r\n`not.with_(cateogry1=A or category1=B)`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/804", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/804/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/804/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/804/events", "html_url": "https://github.com/behave/behave/issues/804", "id": 550875888, "node_id": "MDU6SXNzdWU1NTA4NzU4ODg=", "number": 804, "title": "about the steps dictory and enviroment.py path", "user": {"login": "liujfsunshine", "id": 52985901, "node_id": "MDQ6VXNlcjUyOTg1OTAx", "avatar_url": "https://avatars0.githubusercontent.com/u/52985901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liujfsunshine", "html_url": "https://github.com/liujfsunshine", "followers_url": "https://api.github.com/users/liujfsunshine/followers", "following_url": "https://api.github.com/users/liujfsunshine/following{/other_user}", "gists_url": "https://api.github.com/users/liujfsunshine/gists{/gist_id}", "starred_url": "https://api.github.com/users/liujfsunshine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liujfsunshine/subscriptions", "organizations_url": "https://api.github.com/users/liujfsunshine/orgs", "repos_url": "https://api.github.com/users/liujfsunshine/repos", "events_url": "https://api.github.com/users/liujfsunshine/events{/privacy}", "received_events_url": "https://api.github.com/users/liujfsunshine/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-16T15:20:16Z", "updated_at": "2020-01-29T22:50:34Z", "closed_at": "2020-01-29T22:50:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have some problems to confirm:\r\n1: The features/ directory must needs a steps/ subdirectory?Can I change it to another name?\u3010ps:when I change the name,if I run the program,  I will get an error such as :can't find the steps path\u3011\r\n2:could I design a directory structure like this:\r\n+-- steps/*.py\r\n+-- features/*.feature\r\n3:enviroment.py file must under the features subdirectory?\r\n\r\nI look forward to your reply\uff0cthank you very much!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/803", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/803/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/803/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/803/events", "html_url": "https://github.com/behave/behave/issues/803", "id": 548891945, "node_id": "MDU6SXNzdWU1NDg4OTE5NDU=", "number": 803, "title": "Step Data starting with meaningful space", "user": {"login": "martingbrown", "id": 5264795, "node_id": "MDQ6VXNlcjUyNjQ3OTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/5264795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martingbrown", "html_url": "https://github.com/martingbrown", "followers_url": "https://api.github.com/users/martingbrown/followers", "following_url": "https://api.github.com/users/martingbrown/following{/other_user}", "gists_url": "https://api.github.com/users/martingbrown/gists{/gist_id}", "starred_url": "https://api.github.com/users/martingbrown/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martingbrown/subscriptions", "organizations_url": "https://api.github.com/users/martingbrown/orgs", "repos_url": "https://api.github.com/users/martingbrown/repos", "events_url": "https://api.github.com/users/martingbrown/events{/privacy}", "received_events_url": "https://api.github.com/users/martingbrown/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-13T12:14:25Z", "updated_at": "2020-01-21T23:03:06Z", "closed_at": "2020-01-21T23:03:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm writing a test scenario with a step that requires a table of data. However the test is sensitive to whether there is a space at the start of a value or not. So \" frog\" needs to be treated differently to \"frog\". This doesn't work because behave strips whitespace at the start and end. So in this case the two frog strings end up the same:\r\n\r\n|Column|\r\n| frog|\r\n|frog|\r\n\r\nI appreciate that I can lay this out with quotes added and then strip the quotes off in my step code like this:\r\n\r\n|Column|\r\n|\" frog\"|\r\n|\"frog\"|\r\n\r\nHowever I was wondering if there is any built in way to handle this with behave that wouldn't require the extra step code?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/802", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/802/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/802/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/802/events", "html_url": "https://github.com/behave/behave/issues/802", "id": 545038029, "node_id": "MDU6SXNzdWU1NDUwMzgwMjk=", "number": 802, "title": "pdb exposes strange behavior", "user": {"login": "twelve-this", "id": 59479822, "node_id": "MDQ6VXNlcjU5NDc5ODIy", "avatar_url": "https://avatars1.githubusercontent.com/u/59479822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twelve-this", "html_url": "https://github.com/twelve-this", "followers_url": "https://api.github.com/users/twelve-this/followers", "following_url": "https://api.github.com/users/twelve-this/following{/other_user}", "gists_url": "https://api.github.com/users/twelve-this/gists{/gist_id}", "starred_url": "https://api.github.com/users/twelve-this/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twelve-this/subscriptions", "organizations_url": "https://api.github.com/users/twelve-this/orgs", "repos_url": "https://api.github.com/users/twelve-this/repos", "events_url": "https://api.github.com/users/twelve-this/events{/privacy}", "received_events_url": "https://api.github.com/users/twelve-this/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-03T15:26:58Z", "updated_at": "2020-01-14T07:49:52Z", "closed_at": "2020-01-04T08:07:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI really like behave and working with it. Thanks for the effort and nice work.\r\n\r\nI like the python pdb module and love to explore and debug code by setting breakpoints.\r\n\r\nThe strange thing with behave is: pdb does not really work with behave.\r\n\r\nI use python 3.8 and behave itself works just fine.\r\n\r\nThis is the part where I struggle - a snippet from a step implementation:\r\n\r\n```python\r\n@given('some given situation')\r\ndef step_impl(context):\r\n    breakpoint()\r\n```\r\nExecuting the command `behave` will just run fine until it hits `breakpoint()`. However, the prompt from the pdb module is weird and pdb is not properly set up. I cannot really use the pdb capabilities. Strange: when inputting \"c\" and pressing enter, the program appears to normally resume.\r\n\r\nChanging `breakpoint()` to `import pdb; pdb.set_trace()` has - as expected - no effect and the result is just the same.\r\n\r\nWhat am I doing wrong here?\r\n\r\nThanks in advance!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/801", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/801/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/801/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/801/events", "html_url": "https://github.com/behave/behave/issues/801", "id": 540241810, "node_id": "MDU6SXNzdWU1NDAyNDE4MTA=", "number": 801, "title": "Exit status codes", "user": {"login": "martingbrown", "id": 5264795, "node_id": "MDQ6VXNlcjUyNjQ3OTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/5264795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martingbrown", "html_url": "https://github.com/martingbrown", "followers_url": "https://api.github.com/users/martingbrown/followers", "following_url": "https://api.github.com/users/martingbrown/following{/other_user}", "gists_url": "https://api.github.com/users/martingbrown/gists{/gist_id}", "starred_url": "https://api.github.com/users/martingbrown/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martingbrown/subscriptions", "organizations_url": "https://api.github.com/users/martingbrown/orgs", "repos_url": "https://api.github.com/users/martingbrown/repos", "events_url": "https://api.github.com/users/martingbrown/events{/privacy}", "received_events_url": "https://api.github.com/users/martingbrown/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-19T11:02:49Z", "updated_at": "2020-01-21T22:23:11Z", "closed_at": "2020-01-21T22:23:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "In bash it is common to check if an executable has succeded or failed by checking the $? variable, powershell uses $LASTEXITCODE, windows command line has %ErrorLevel%.\r\n\r\nDoes behave set the Exit Status in any predicatble way so that a script can tell if a test run has failed?\r\n\r\nIf it does, some explanation of that might be helpful on this page:\r\n\r\nhttps://behave.readthedocs.io/en/latest/behave.html#command-line-arguments", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/800", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/800/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/800/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/800/events", "html_url": "https://github.com/behave/behave/issues/800", "id": 539069730, "node_id": "MDU6SXNzdWU1MzkwNjk3MzA=", "number": 800, "title": "Not passing failed line in ParseError", "user": {"login": "otstanteplz", "id": 26417024, "node_id": "MDQ6VXNlcjI2NDE3MDI0", "avatar_url": "https://avatars3.githubusercontent.com/u/26417024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/otstanteplz", "html_url": "https://github.com/otstanteplz", "followers_url": "https://api.github.com/users/otstanteplz/followers", "following_url": "https://api.github.com/users/otstanteplz/following{/other_user}", "gists_url": "https://api.github.com/users/otstanteplz/gists{/gist_id}", "starred_url": "https://api.github.com/users/otstanteplz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/otstanteplz/subscriptions", "organizations_url": "https://api.github.com/users/otstanteplz/orgs", "repos_url": "https://api.github.com/users/otstanteplz/repos", "events_url": "https://api.github.com/users/otstanteplz/events{/privacy}", "received_events_url": "https://api.github.com/users/otstanteplz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-17T13:34:56Z", "updated_at": "2019-12-20T15:46:26Z", "closed_at": "2019-12-20T15:46:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/behave/behave/blob/4e73cabf1b2445b3c1ab6b3aed14424d32d140ac/behave/parser.py#L396", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/798", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/798/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/798/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/798/events", "html_url": "https://github.com/behave/behave/issues/798", "id": 533738062, "node_id": "MDU6SXNzdWU1MzM3MzgwNjI=", "number": 798, "title": "How to make logging.info() defined in py file take effect?", "user": {"login": "Dagon0577", "id": 31436836, "node_id": "MDQ6VXNlcjMxNDM2ODM2", "avatar_url": "https://avatars1.githubusercontent.com/u/31436836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dagon0577", "html_url": "https://github.com/Dagon0577", "followers_url": "https://api.github.com/users/Dagon0577/followers", "following_url": "https://api.github.com/users/Dagon0577/following{/other_user}", "gists_url": "https://api.github.com/users/Dagon0577/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dagon0577/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dagon0577/subscriptions", "organizations_url": "https://api.github.com/users/Dagon0577/orgs", "repos_url": "https://api.github.com/users/Dagon0577/repos", "events_url": "https://api.github.com/users/Dagon0577/events{/privacy}", "received_events_url": "https://api.github.com/users/Dagon0577/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-06T04:24:02Z", "updated_at": "2019-12-11T07:18:42Z", "closed_at": "2019-12-11T07:18:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "When learning behave, I defined a test.feature, a test.py file, and introduced a config.py file.\r\n\r\n**test.feature**  \r\n\r\n    Feature: test   \r\n        Scenario: test \r\n            Given import init sql\r\n\r\n\r\n**test.py**  \r\n\r\n    from behave import *\r\n    from config import *\r\n\r\n    @Given('import init sql')\r\n    def step_impl(context):\r\n            sql_path = \"/test/sqls/select/init\"\r\n            log_path = \"/test/logs/select.log\"\r\n            assert executeSQL(sql_path,log_path) == 1\r\n\r\n\r\n\r\n**config.py**  \r\n  \r\n    import pymysql\r\n    import os\r\n    import logging\r\n\r\n    host=\"172.100.9.2\"\r\n    user=\"root\"\r\n    password=\"123456\"\r\n    port=3306\r\n\r\n    def executeSQL(sql_path,log_path):\r\n            db = pymysql.connect(host=host,user=user,password=password,port=port)\r\n            cur = db.cursor()\r\n            logging.basicConfig(level=logging.DEBUG,\r\n                            filename=log_path,\r\n                            filemode='a',\r\n                            format='%(asctime)s - %(pathname)s[line:%(lineno)d] - %(levelname)s: %(message)s'\r\n                            )\r\n            logging.info(\"test begin!\")\r\n            ......        \r\n            db.commit()\r\n            db.close()\r\n            logging.info('test end!')\r\n            return 1\r\n\r\n\r\nI use this on the command line and it runs successfully.  \r\n\r\n    behave test.feature\r\nBut I found that \"/test/logs/select.log\" does not exist. How can I solve this problem?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/797", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/797/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/797/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/797/events", "html_url": "https://github.com/behave/behave/issues/797", "id": 533351954, "node_id": "MDU6SXNzdWU1MzMzNTE5NTQ=", "number": 797, "title": "context.USER weirdness", "user": {"login": "grahamoptibrium", "id": 54676881, "node_id": "MDQ6VXNlcjU0Njc2ODgx", "avatar_url": "https://avatars1.githubusercontent.com/u/54676881?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grahamoptibrium", "html_url": "https://github.com/grahamoptibrium", "followers_url": "https://api.github.com/users/grahamoptibrium/followers", "following_url": "https://api.github.com/users/grahamoptibrium/following{/other_user}", "gists_url": "https://api.github.com/users/grahamoptibrium/gists{/gist_id}", "starred_url": "https://api.github.com/users/grahamoptibrium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grahamoptibrium/subscriptions", "organizations_url": "https://api.github.com/users/grahamoptibrium/orgs", "repos_url": "https://api.github.com/users/grahamoptibrium/repos", "events_url": "https://api.github.com/users/grahamoptibrium/events{/privacy}", "received_events_url": "https://api.github.com/users/grahamoptibrium/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-05T13:28:45Z", "updated_at": "2019-12-15T22:24:54Z", "closed_at": "2019-12-15T22:24:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have found a 'feature' in the context variable that I can't find in the documentation:\r\n\r\n```python\r\ndef step_impl(context):\r\n    print(context.USER)  # prints 'user'\r\n    context.USER = 'something else'\r\n    print(context.USER)  # still prints 'user'\r\n```\r\n\r\nThis was weird to track down.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/796", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/796/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/796/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/796/events", "html_url": "https://github.com/behave/behave/issues/796", "id": 528031388, "node_id": "MDU6SXNzdWU1MjgwMzEzODg=", "number": 796, "title": "How to configure celery in behave tests?", "user": {"login": "gauravt1", "id": 19382904, "node_id": "MDQ6VXNlcjE5MzgyOTA0", "avatar_url": "https://avatars3.githubusercontent.com/u/19382904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gauravt1", "html_url": "https://github.com/gauravt1", "followers_url": "https://api.github.com/users/gauravt1/followers", "following_url": "https://api.github.com/users/gauravt1/following{/other_user}", "gists_url": "https://api.github.com/users/gauravt1/gists{/gist_id}", "starred_url": "https://api.github.com/users/gauravt1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gauravt1/subscriptions", "organizations_url": "https://api.github.com/users/gauravt1/orgs", "repos_url": "https://api.github.com/users/gauravt1/repos", "events_url": "https://api.github.com/users/gauravt1/events{/privacy}", "received_events_url": "https://api.github.com/users/gauravt1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-25T11:41:15Z", "updated_at": "2020-01-21T22:26:49Z", "closed_at": "2020-01-21T22:26:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Right now, I am using `celery_always_eager=True` in environment.py file, which is just executing an asynchronous celery task like a function, but I got stuck at an API where we are doing some thing like below - \r\n\r\n```\r\ndef active_status(self, request, pk):\r\n    obj = get_object_or_404(queryset, pk)\r\n    obj.active = True\r\n    obj.save()\r\n    end_date_time = 5(sec)\r\n    #......\r\n    #......\r\n    deactive_status.apply_async(kwargs=obj.__dict__, eta=end_date_time)\r\n```\r\n`deactive_status` is a celery task which update the status of object `obj` back to `False` after duration specified in `end_date_time`.\r\n\r\nBut right now due to `celery_alwasy_eager=True` setting it just picks that task and execute it right away without considering the delay duration.\r\n\r\nI thought there must be some way to configure celery in behave but not sure how it gonna accomplished, I didn't found something similar in their docs as well as other available resources.\r\n\r\nIf anybody have any idea about the same or something similar that would be really helpful. Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/794", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/794/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/794/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/794/events", "html_url": "https://github.com/behave/behave/issues/794", "id": 522867237, "node_id": "MDU6SXNzdWU1MjI4NjcyMzc=", "number": 794, "title": "Bind table headings parameter to scenario outline variables", "user": {"login": "DvirDukhan", "id": 12258836, "node_id": "MDQ6VXNlcjEyMjU4ODM2", "avatar_url": "https://avatars0.githubusercontent.com/u/12258836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DvirDukhan", "html_url": "https://github.com/DvirDukhan", "followers_url": "https://api.github.com/users/DvirDukhan/followers", "following_url": "https://api.github.com/users/DvirDukhan/following{/other_user}", "gists_url": "https://api.github.com/users/DvirDukhan/gists{/gist_id}", "starred_url": "https://api.github.com/users/DvirDukhan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DvirDukhan/subscriptions", "organizations_url": "https://api.github.com/users/DvirDukhan/orgs", "repos_url": "https://api.github.com/users/DvirDukhan/repos", "events_url": "https://api.github.com/users/DvirDukhan/events{/privacy}", "received_events_url": "https://api.github.com/users/DvirDukhan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-14T13:41:44Z", "updated_at": "2020-01-21T22:27:18Z", "closed_at": "2020-01-21T22:27:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi\r\nI see that this is an issue already handled in #631, but I'm having difficulties in getting the parameter data.\r\n\r\nI'm using behave to validate Cypher coverage for RedisGraph(https://github.com/RedisGraph/RedisGraph), using the openCypher TCK scenarios (https://github.com/opencypher/openCypher/tree/master/tck).\r\n\r\nOne of the scenarios is as follows:\r\n```\r\n    Scenario Outline: `percentileDisc()`\r\n        Given an empty graph\r\n        And having executed:\r\n            \"\"\"\r\n            CREATE ({price: 10.0}),\r\n            ({price: 20.0}),\r\n            ({price: 30.0})\r\n            \"\"\"\r\n        And parameters are:\r\n            | percentile |  <p>  |\r\n        When executing query:\r\n            \"\"\"\r\n            MATCH (n)\r\n            RETURN percentileDisc(n.price, $percentile) AS p\r\n            \"\"\"\r\n        Then the result should be:\r\n            | p        |\r\n            | <result> |\r\n        And no side effects\r\n\r\n        Examples:\r\n            | p   | result |\r\n            | 0.0 | 10.0   |\r\n            | 0.5 | 20.0   |\r\n            | 1.0 | 30.0   |\r\n```\r\nRetreving the headings of the table \r\n```\r\n| percentile |  <p>  |\r\n``` \r\nreturns the strings `percentile` and  `<p>` where I would expect to have the value of p instead.\r\n\r\nplease advise.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/793", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/793/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/793/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/793/events", "html_url": "https://github.com/behave/behave/issues/793", "id": 521624700, "node_id": "MDU6SXNzdWU1MjE2MjQ3MDA=", "number": 793, "title": "Tag expressions doesn't seem to be working", "user": {"login": "puttagunta", "id": 7988640, "node_id": "MDQ6VXNlcjc5ODg2NDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/7988640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/puttagunta", "html_url": "https://github.com/puttagunta", "followers_url": "https://api.github.com/users/puttagunta/followers", "following_url": "https://api.github.com/users/puttagunta/following{/other_user}", "gists_url": "https://api.github.com/users/puttagunta/gists{/gist_id}", "starred_url": "https://api.github.com/users/puttagunta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/puttagunta/subscriptions", "organizations_url": "https://api.github.com/users/puttagunta/orgs", "repos_url": "https://api.github.com/users/puttagunta/repos", "events_url": "https://api.github.com/users/puttagunta/events{/privacy}", "received_events_url": "https://api.github.com/users/puttagunta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-12T15:34:40Z", "updated_at": "2019-12-15T16:40:40Z", "closed_at": "2019-12-11T07:17:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Environment: python 3.7, 32-bit on windows 10\r\nSetup: Have a feature file, somefeaturefile.feature, with multiple scenarios, say 5 scenario outlines for 41 scenarios. Tag a couple with @WillAutomateLater and others with @SomeotherTag. Run behave with the following command line.\r\nCommand1:\r\nbehave --tags=\"not @WillAutomateLater\" somefeaturefile.feature\r\n0 features passed, 0 failed, 1 skipped\r\n0 scenarios passed, 0 failed, 41 skipped\r\n\r\nCommand2:\r\nbehave --tags=\"@WillAutomateLater\" somefeaturefile.feature\r\n1 feature passed, 0 failed, 0 skipped\r\n24 scenarios passed, 0 failed, 17 skipped\r\n72 steps passed, 0 failed, 51 skipped, 0 undefined\r\n\r\nCommand2 worked as expected but, Command1 did not work as expected. With Command1, I was expecting 17 scenarios passed and 24 skipped. Instead, everything is skipped.\r\nI also tried with \"@Someothertag and @WillAutomateLater\" but, did not work either.\r\n\r\nI was referring to, https://behave.readthedocs.io/en/latest/tag_expressions.html for using it with tags. Can someone help me getting it worked for me?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/792", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/792/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/792/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/792/events", "html_url": "https://github.com/behave/behave/issues/792", "id": 517788761, "node_id": "MDU6SXNzdWU1MTc3ODg3NjE=", "number": 792, "title": "Support for Accessing Tags in before_all", "user": {"login": "jwignall", "id": 46637068, "node_id": "MDQ6VXNlcjQ2NjM3MDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/46637068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwignall", "html_url": "https://github.com/jwignall", "followers_url": "https://api.github.com/users/jwignall/followers", "following_url": "https://api.github.com/users/jwignall/following{/other_user}", "gists_url": "https://api.github.com/users/jwignall/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwignall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwignall/subscriptions", "organizations_url": "https://api.github.com/users/jwignall/orgs", "repos_url": "https://api.github.com/users/jwignall/repos", "events_url": "https://api.github.com/users/jwignall/events{/privacy}", "received_events_url": "https://api.github.com/users/jwignall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-05T13:57:21Z", "updated_at": "2019-12-11T07:18:13Z", "closed_at": "2019-12-11T07:18:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\n\r\nMy apologies if this is already possible and I've just missed it, but I would like to be able to access the tags specified on the command line at runtime, preferably within the before_all method. \r\n\r\nI would like to do something along the lines of \r\n`if \"foo\" in tags: tags.append(\"~bar\")` so that I can include/exclude tests based on a tag specified on the command line. Of course, I could do this manually, but it's more so I can check the test configuration before I run in since some tags cannot run in conjunction with others. \r\n\r\nIs this possible? Does an example exist somewhere? If not, would it be plausible to add it? \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/791", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/791/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/791/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/791/events", "html_url": "https://github.com/behave/behave/issues/791", "id": 517651548, "node_id": "MDU6SXNzdWU1MTc2NTE1NDg=", "number": 791, "title": "How to write a image to behave report?", "user": {"login": "springsoft", "id": 9400242, "node_id": "MDQ6VXNlcjk0MDAyNDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/9400242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/springsoft", "html_url": "https://github.com/springsoft", "followers_url": "https://api.github.com/users/springsoft/followers", "following_url": "https://api.github.com/users/springsoft/following{/other_user}", "gists_url": "https://api.github.com/users/springsoft/gists{/gist_id}", "starred_url": "https://api.github.com/users/springsoft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/springsoft/subscriptions", "organizations_url": "https://api.github.com/users/springsoft/orgs", "repos_url": "https://api.github.com/users/springsoft/repos", "events_url": "https://api.github.com/users/springsoft/events{/privacy}", "received_events_url": "https://api.github.com/users/springsoft/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 836638861, "node_id": "MDU6TGFiZWw4MzY2Mzg4NjE=", "url": "https://api.github.com/repos/behave/behave/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-05T09:30:39Z", "updated_at": "2020-05-18T02:15:39Z", "closed_at": "2020-05-18T02:15:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to write a image to behave report\r\nHow to write a text to behave report", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/790", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/790/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/790/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/790/events", "html_url": "https://github.com/behave/behave/issues/790", "id": 514224316, "node_id": "MDU6SXNzdWU1MTQyMjQzMTY=", "number": 790, "title": "Support reading features from markdown files", "user": {"login": "tomdottom", "id": 5106166, "node_id": "MDQ6VXNlcjUxMDYxNjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/5106166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomdottom", "html_url": "https://github.com/tomdottom", "followers_url": "https://api.github.com/users/tomdottom/followers", "following_url": "https://api.github.com/users/tomdottom/following{/other_user}", "gists_url": "https://api.github.com/users/tomdottom/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomdottom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomdottom/subscriptions", "organizations_url": "https://api.github.com/users/tomdottom/orgs", "repos_url": "https://api.github.com/users/tomdottom/repos", "events_url": "https://api.github.com/users/tomdottom/events{/privacy}", "received_events_url": "https://api.github.com/users/tomdottom/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 836638861, "node_id": "MDU6TGFiZWw4MzY2Mzg4NjE=", "url": "https://api.github.com/repos/behave/behave/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-29T21:06:47Z", "updated_at": "2020-05-20T06:37:42Z", "closed_at": "2020-05-20T06:37:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice to be able keep feature tests inside other markdown formats in order to include further documentation outside the scope of the actual feature test.  [TheRobotFramework](https://robotframework.org/) and [Guage](https://gauge.org/) do something similar.\r\n\r\nThe simplest way may be to parse markdown files for code-blocks annotated with `gherkin` formatting and to consider treat code-block and independent feature file.\r\n\r\n**./features/my_feature.md**\r\n\r\n    # My File\r\n\r\n    Some markup outside of the scope of the feature background\r\n    possibly including a history of design decisions, images, diagrams, etc ...\r\n\r\n    ```gherkin\r\n    Feature: showing off behave\r\n    \r\n      Scenario: run a simple test\r\n         Given we have behave installed\r\n          When we implement a test\r\n          Then behave will test it for us!\r\n    ```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/789", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/789/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/789/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/789/events", "html_url": "https://github.com/behave/behave/issues/789", "id": 512646199, "node_id": "MDU6SXNzdWU1MTI2NDYxOTk=", "number": 789, "title": "Behave should automatically exclude hidden files", "user": {"login": "tjstub", "id": 34695980, "node_id": "MDQ6VXNlcjM0Njk1OTgw", "avatar_url": "https://avatars0.githubusercontent.com/u/34695980?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tjstub", "html_url": "https://github.com/tjstub", "followers_url": "https://api.github.com/users/tjstub/followers", "following_url": "https://api.github.com/users/tjstub/following{/other_user}", "gists_url": "https://api.github.com/users/tjstub/gists{/gist_id}", "starred_url": "https://api.github.com/users/tjstub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tjstub/subscriptions", "organizations_url": "https://api.github.com/users/tjstub/orgs", "repos_url": "https://api.github.com/users/tjstub/repos", "events_url": "https://api.github.com/users/tjstub/events{/privacy}", "received_events_url": "https://api.github.com/users/tjstub/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31826404, "node_id": "MDU6TGFiZWwzMTgyNjQwNA==", "url": "https://api.github.com/repos/behave/behave/labels/wont-fix", "name": "wont-fix", "color": "0b02e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-25T18:04:10Z", "updated_at": "2020-02-09T14:34:22Z", "closed_at": "2020-02-09T14:34:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Behave seems to attempt to run all *.feature and all files within the step directory if they hit some matching parameters. This also includes unix-style hidden files.\r\n\r\n This means that if there are any hidden files (e.g., Say editor bread-crumbs,  like Emacs' `.#steps.py`), behave will try to load them and choke on them.\r\n\r\nI can see why someone might put hidden files into behave's path, but I can't see a reason why behave would ever want to run a hidden file. Therefore, it seems that behave should automatically exclude hidden files from import/execution.\r\n\r\nThis issue is seen on behave 1.2.6", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/788", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/788/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/788/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/788/events", "html_url": "https://github.com/behave/behave/issues/788", "id": 511342813, "node_id": "MDU6SXNzdWU1MTEzNDI4MTM=", "number": 788, "title": "Start test with parametrs", "user": {"login": "Alexander-Tkachev", "id": 50906491, "node_id": "MDQ6VXNlcjUwOTA2NDkx", "avatar_url": "https://avatars2.githubusercontent.com/u/50906491?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexander-Tkachev", "html_url": "https://github.com/Alexander-Tkachev", "followers_url": "https://api.github.com/users/Alexander-Tkachev/followers", "following_url": "https://api.github.com/users/Alexander-Tkachev/following{/other_user}", "gists_url": "https://api.github.com/users/Alexander-Tkachev/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexander-Tkachev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexander-Tkachev/subscriptions", "organizations_url": "https://api.github.com/users/Alexander-Tkachev/orgs", "repos_url": "https://api.github.com/users/Alexander-Tkachev/repos", "events_url": "https://api.github.com/users/Alexander-Tkachev/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexander-Tkachev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-23T13:58:04Z", "updated_at": "2020-02-09T14:35:04Z", "closed_at": "2020-02-09T14:35:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can I pass the device name as a parameter when running the Behave test through the console? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/786", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/786/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/786/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/786/events", "html_url": "https://github.com/behave/behave/issues/786", "id": 509267966, "node_id": "MDU6SXNzdWU1MDkyNjc5NjY=", "number": 786, "title": "inconsistent API using formatters", "user": {"login": "dunossauro", "id": 6801122, "node_id": "MDQ6VXNlcjY4MDExMjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6801122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dunossauro", "html_url": "https://github.com/dunossauro", "followers_url": "https://api.github.com/users/dunossauro/followers", "following_url": "https://api.github.com/users/dunossauro/following{/other_user}", "gists_url": "https://api.github.com/users/dunossauro/gists{/gist_id}", "starred_url": "https://api.github.com/users/dunossauro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dunossauro/subscriptions", "organizations_url": "https://api.github.com/users/dunossauro/orgs", "repos_url": "https://api.github.com/users/dunossauro/repos", "events_url": "https://api.github.com/users/dunossauro/events{/privacy}", "received_events_url": "https://api.github.com/users/dunossauro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-18T19:23:44Z", "updated_at": "2020-02-09T19:43:25Z", "closed_at": "2020-02-09T19:43:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "**behave version**: 1.2.7.dev1\r\n\r\nI note little trouble in `behave` behavior when setting a formatter in behave.ini.\r\n\r\nFor example:\r\n\r\n```ini\r\n; behave.ini\r\nformat = rerun  ;rerun is just an example\r\noutfile = rerun.txt\r\n```\r\n\r\nIn this case, behave produce a `rerun.output` file. Not `rerun.txt`. But if I set in the plural form, it works fine.\r\n\r\n```ini\r\n; behave.ini\r\nformat = rerun\r\noutfiles = rerun.txt\r\n```\r\n\r\nIn this case I don't need to specify many outfiles, only one.\r\n\r\n\r\nAnother case, when I use `-f rerun -o rerun.txt`, this specifies one formatter and one outfile. Because of that works fine, generate outfile, but don't print plain on stdout.\r\n\r\nBut, if describe only in `behave.ini`, don't need to call plain formatter. Behave aways print on stdout", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/785", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/785/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/785/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/785/events", "html_url": "https://github.com/behave/behave/issues/785", "id": 509162660, "node_id": "MDU6SXNzdWU1MDkxNjI2NjA=", "number": 785, "title": "Is there a way to disable the logging of passed tests?", "user": {"login": "meeky333", "id": 24962013, "node_id": "MDQ6VXNlcjI0OTYyMDEz", "avatar_url": "https://avatars1.githubusercontent.com/u/24962013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meeky333", "html_url": "https://github.com/meeky333", "followers_url": "https://api.github.com/users/meeky333/followers", "following_url": "https://api.github.com/users/meeky333/following{/other_user}", "gists_url": "https://api.github.com/users/meeky333/gists{/gist_id}", "starred_url": "https://api.github.com/users/meeky333/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meeky333/subscriptions", "organizations_url": "https://api.github.com/users/meeky333/orgs", "repos_url": "https://api.github.com/users/meeky333/repos", "events_url": "https://api.github.com/users/meeky333/events{/privacy}", "received_events_url": "https://api.github.com/users/meeky333/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-18T15:47:09Z", "updated_at": "2020-02-09T19:44:34Z", "closed_at": "2020-02-09T19:44:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a lot of tests to run at one time, and its becoming a pain to debug. I can't just use tags to test them individually because I'm experiencing a lot of bugs that have something to do with tests being dependant on each other (and I'm trying to make them not depend on each other)\r\n\r\nIs there a way to turn off the logging on all the passed tests? So it's easier to scroll through the failed tests and compare.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/784", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/784/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/784/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/784/events", "html_url": "https://github.com/behave/behave/issues/784", "id": 509030833, "node_id": "MDU6SXNzdWU1MDkwMzA4MzM=", "number": 784, "title": "Is code completion in PyCharm compatible with Behave context?", "user": {"login": "neonfink", "id": 15730721, "node_id": "MDQ6VXNlcjE1NzMwNzIx", "avatar_url": "https://avatars0.githubusercontent.com/u/15730721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neonfink", "html_url": "https://github.com/neonfink", "followers_url": "https://api.github.com/users/neonfink/followers", "following_url": "https://api.github.com/users/neonfink/following{/other_user}", "gists_url": "https://api.github.com/users/neonfink/gists{/gist_id}", "starred_url": "https://api.github.com/users/neonfink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neonfink/subscriptions", "organizations_url": "https://api.github.com/users/neonfink/orgs", "repos_url": "https://api.github.com/users/neonfink/repos", "events_url": "https://api.github.com/users/neonfink/events{/privacy}", "received_events_url": "https://api.github.com/users/neonfink/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-18T11:49:32Z", "updated_at": "2019-11-05T23:37:48Z", "closed_at": "2019-11-05T23:37:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Possibly a naive question as I was not able to find anything about this online but I'll try my luck here.\r\nAs a simplest example, when I initiate a driver in my `environment.py` inside of `before_all()`:\r\n```\r\nfrom selenium import webdriver\r\n\r\ndef before_all(context):\r\n    driver = webdriver.Firefox()\r\n```\r\nAnd in my step definition inside of `steps.py` I want to access the methods available inside of the `driver`:\r\n```\r\n@when('I visit url \"{url}\"')\r\ndef step(context, url):\r\n    context.driver.get(url)\r\n```\r\n\r\nIs there any way to make PyCharm aware of the context as I am typing the step definitions and actually show me code suggestions as soon as I type `context.driver.` to see what methods are actually available inside? \r\nSo far I only find myself switching back and forth between my `steps.py` and `environment.py` where I can peek `driver` methods, since that is where it's initialized. \r\nAny suggestions about  how to work around this limitation are highly appreciated! :)\r\n\r\n**Added:**\r\nI did find a closed issue after I opened my own:\r\nhttps://github.com/behave/behave/issues/717\r\n\r\nSince it's almost a year old, any chance that there are any new workarounds available since then?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/782", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/782/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/782/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/782/events", "html_url": "https://github.com/behave/behave/issues/782", "id": 505393723, "node_id": "MDU6SXNzdWU1MDUzOTM3MjM=", "number": 782, "title": "Combine JUnit output or place individual files in their own folder", "user": {"login": "jonny7", "id": 6732997, "node_id": "MDQ6VXNlcjY3MzI5OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/6732997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonny7", "html_url": "https://github.com/jonny7", "followers_url": "https://api.github.com/users/jonny7/followers", "following_url": "https://api.github.com/users/jonny7/following{/other_user}", "gists_url": "https://api.github.com/users/jonny7/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonny7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonny7/subscriptions", "organizations_url": "https://api.github.com/users/jonny7/orgs", "repos_url": "https://api.github.com/users/jonny7/repos", "events_url": "https://api.github.com/users/jonny7/events{/privacy}", "received_events_url": "https://api.github.com/users/jonny7/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 836638861, "node_id": "MDU6TGFiZWw4MzY2Mzg4NjE=", "url": "https://api.github.com/repos/behave/behave/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-10T16:55:37Z", "updated_at": "2020-08-09T01:10:50Z", "closed_at": "2020-08-09T01:10:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nI have the following .ini file\r\n\r\n```\r\njunit = yes\r\njunit_directory = reports\r\n```\r\nWhich generates files by `TEST-{featurename}.xml. Wondering how I could either combine these to 1 file, or how to place them into their own folders like\r\n```\r\n- reports\r\n   - featurefile1\r\n         - TEST-featurefile1.xml\r\n   - featurefile2\r\n         - TEST-featurefile2.xml\r\n...\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/781", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/781/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/781/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/781/events", "html_url": "https://github.com/behave/behave/issues/781", "id": 505240902, "node_id": "MDU6SXNzdWU1MDUyNDA5MDI=", "number": 781, "title": "How to combine behave with hypothesis (property-based testing)", "user": {"login": "pjljvandelaar", "id": 18348654, "node_id": "MDQ6VXNlcjE4MzQ4NjU0", "avatar_url": "https://avatars1.githubusercontent.com/u/18348654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pjljvandelaar", "html_url": "https://github.com/pjljvandelaar", "followers_url": "https://api.github.com/users/pjljvandelaar/followers", "following_url": "https://api.github.com/users/pjljvandelaar/following{/other_user}", "gists_url": "https://api.github.com/users/pjljvandelaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/pjljvandelaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pjljvandelaar/subscriptions", "organizations_url": "https://api.github.com/users/pjljvandelaar/orgs", "repos_url": "https://api.github.com/users/pjljvandelaar/repos", "events_url": "https://api.github.com/users/pjljvandelaar/events{/privacy}", "received_events_url": "https://api.github.com/users/pjljvandelaar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}, {"id": 836638861, "node_id": "MDU6TGFiZWw4MzY2Mzg4NjE=", "url": "https://api.github.com/repos/behave/behave/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-10T12:34:23Z", "updated_at": "2020-04-25T05:22:35Z", "closed_at": "2020-04-25T05:22:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "As a user, I don't always want to provide a table with values.\r\nI would like a tool like [hypothesis](https://github.com/HypothesisWorks/hypothesis) to generate these values for me.\r\nThe values might have constraints that I want to specify.\r\nE.g. I might want to add the constraints that the first integer must be smaller than second integer.\r\n\r\nI can't however nowhere find how to combine behave with hypothesis.\r\nIs this impossible?\r\nIf possible, is it documented somewhere?\r\n\r\nSee also https://github.com/HypothesisWorks/hypothesis/issues/2128", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/779", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/779/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/779/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/779/events", "html_url": "https://github.com/behave/behave/issues/779", "id": 498864578, "node_id": "MDU6SXNzdWU0OTg4NjQ1Nzg=", "number": 779, "title": "Incorrect variable expansion from command line for --name parameter", "user": {"login": "chbndrhnns", "id": 7534547, "node_id": "MDQ6VXNlcjc1MzQ1NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7534547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chbndrhnns", "html_url": "https://github.com/chbndrhnns", "followers_url": "https://api.github.com/users/chbndrhnns/followers", "following_url": "https://api.github.com/users/chbndrhnns/following{/other_user}", "gists_url": "https://api.github.com/users/chbndrhnns/gists{/gist_id}", "starred_url": "https://api.github.com/users/chbndrhnns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chbndrhnns/subscriptions", "organizations_url": "https://api.github.com/users/chbndrhnns/orgs", "repos_url": "https://api.github.com/users/chbndrhnns/repos", "events_url": "https://api.github.com/users/chbndrhnns/events{/privacy}", "received_events_url": "https://api.github.com/users/chbndrhnns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-26T12:51:03Z", "updated_at": "2019-10-13T12:59:20Z", "closed_at": "2019-10-12T18:17:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to pass the list of tests to run to behave via an environment variable like this\r\n\r\n```bash\r\nexport $TESTS_SELECTOR=\"--name 'Dummy 1' --name 'Dummy 2'\"\r\n\r\n# does not work\r\nbehave ${TESTS_SELECTOR}\r\n\r\n# does work\r\nbehave --name 'Dummy 1' --name 'Dummy 2'\r\n```\r\n\r\nThis is not understood by behave. The error message I get looks like that:\r\n\r\n```\r\nbehave --verbose $TESTS_SELECTOR\r\nLoading config defaults from \"./behave.ini\"\r\nUsing defaults:\r\n          color True\r\n  show_snippets True\r\n   show_skipped True\r\n        dry_run False\r\n    show_source True\r\n   show_timings True\r\n stdout_capture True\r\n stderr_capture True\r\n    log_capture True\r\n logging_format %(levelname)s:%(name)s:%(message)s\r\n  logging_level 20\r\n  steps_catalog False\r\n        summary True\r\n          junit False\r\n          stage None\r\n       userdata {}\r\n default_format pretty\r\n   default_tags\r\nscenario_outline_annotation_schema {name} -- @{row.id} {examples.name}\r\nmore_formatters {}\r\nSupplied path: \"--name 'Scenario 1'\"\r\nTrying base directory: /Users/xxx/dev/xxx/testing/xxx-integration-tests/--name 'Scenario 1'\r\nTrying base directory: /Users/xxx/dev/xxx/testing/xxx-integration-tests\r\nTrying base directory: /Users/xxx/dev/xxx/testing\r\nTrying base directory: /Users/xxx/dev/xxx\r\nTrying base directory: /Users/xxx/dev\r\nTrying base directory: /Users/xxx\r\nTrying base directory: /Users\r\nTrying base directory: /\r\nERROR: Could not find \"steps\" directory in your specified path \"/Users/xxx/dev/xxx/testing/xxx-integration-tests/--name 'Scenario 1'\"\r\nConfigError: No steps directory in \"/Users/xxx/dev/xxx/testing/xxx-integration-tests/--name 'Scenario 1'\"\r\n````", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/777", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/777/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/777/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/777/events", "html_url": "https://github.com/behave/behave/issues/777", "id": 489073668, "node_id": "MDU6SXNzdWU0ODkwNzM2Njg=", "number": 777, "title": "French given step is not fully supported", "user": {"login": "zadigus", "id": 8761254, "node_id": "MDQ6VXNlcjg3NjEyNTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/8761254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadigus", "html_url": "https://github.com/zadigus", "followers_url": "https://api.github.com/users/zadigus/followers", "following_url": "https://api.github.com/users/zadigus/following{/other_user}", "gists_url": "https://api.github.com/users/zadigus/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadigus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadigus/subscriptions", "organizations_url": "https://api.github.com/users/zadigus/orgs", "repos_url": "https://api.github.com/users/zadigus/repos", "events_url": "https://api.github.com/users/zadigus/events{/privacy}", "received_events_url": "https://api.github.com/users/zadigus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 350389943, "node_id": "MDU6TGFiZWwzNTAzODk5NDM=", "url": "https://api.github.com/repos/behave/behave/labels/needs-analysis", "name": "needs-analysis", "color": "f9d0c4", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-09-04T10:23:47Z", "updated_at": "2019-10-12T18:19:47Z", "closed_at": "2019-10-12T18:19:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI'm using behave version 1.2.6 and write my Gherkin specification in French. I assumed that the [Gherkin reference](https://cucumber.io/docs/gherkin/reference/#overview) was the reference for behave too, but apparently not completely. For example, the following step \r\n```\r\nEtant donn\u00e9 qu'il est entr\u00e9 dans un Shop\r\n```\r\nresults in the following step skeleton proposition\r\n```\r\nYou can implement step definitions for undefined steps with these snippets:\r\n\r\n@given(u'qu\\'il est entr\u00e9 dans un Shop')\r\ndef step_impl(context):\r\n    raise NotImplementedError(u'STEP: Given qu\\'il est entr\u00e9 dans un Shop')\r\n```\r\nIn particular, you can see that the string \"qu\\'\" is part of the argument to `given`, which should not be the case. Is that intended?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/776", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/776/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/776/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/776/events", "html_url": "https://github.com/behave/behave/issues/776", "id": 488763517, "node_id": "MDU6SXNzdWU0ODg3NjM1MTc=", "number": 776, "title": "How to execute multiple steps when using use_step_matcher(\"re\")", "user": {"login": "jonny7", "id": 6732997, "node_id": "MDQ6VXNlcjY3MzI5OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/6732997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonny7", "html_url": "https://github.com/jonny7", "followers_url": "https://api.github.com/users/jonny7/followers", "following_url": "https://api.github.com/users/jonny7/following{/other_user}", "gists_url": "https://api.github.com/users/jonny7/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonny7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonny7/subscriptions", "organizations_url": "https://api.github.com/users/jonny7/orgs", "repos_url": "https://api.github.com/users/jonny7/repos", "events_url": "https://api.github.com/users/jonny7/events{/privacy}", "received_events_url": "https://api.github.com/users/jonny7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-03T18:45:45Z", "updated_at": "2019-09-04T11:49:19Z", "closed_at": "2019-09-04T11:49:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nI'm using regular expressions for my matcher but I'm unsure from the [docs ](https://behave.readthedocs.io/en/latest/api.html?highlight=execute_steps#step-macro-calling-steps-from-other-steps )how I can now execute multiple steps using variables.\r\n\r\n```python\r\n context.execute_steps(\"\"\"\r\n        ...\r\n        Given the user enters their \"(?P<code>.+)\"\r\n        ...\r\n    \"\"\".format(code=\"abc123\"))\r\n```\r\nBut when I execute this I get `Runtime.evaluate threw exception: SyntaxError: Unexpected token ?`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/775", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/775/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/775/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/775/events", "html_url": "https://github.com/behave/behave/issues/775", "id": 482418656, "node_id": "MDU6SXNzdWU0ODI0MTg2NTY=", "number": 775, "title": "before_all not called before going through step implementations", "user": {"login": "mjalas", "id": 3817021, "node_id": "MDQ6VXNlcjM4MTcwMjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/3817021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjalas", "html_url": "https://github.com/mjalas", "followers_url": "https://api.github.com/users/mjalas/followers", "following_url": "https://api.github.com/users/mjalas/following{/other_user}", "gists_url": "https://api.github.com/users/mjalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjalas/subscriptions", "organizations_url": "https://api.github.com/users/mjalas/orgs", "repos_url": "https://api.github.com/users/mjalas/repos", "events_url": "https://api.github.com/users/mjalas/events{/privacy}", "received_events_url": "https://api.github.com/users/mjalas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 82233946, "node_id": "MDU6TGFiZWw4MjIzMzk0Ng==", "url": "https://api.github.com/repos/behave/behave/labels/probably-mistaken", "name": "probably-mistaken", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-19T16:49:56Z", "updated_at": "2019-09-22T17:03:42Z", "closed_at": "2019-09-22T17:03:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to load environment variables from a `.env` file in the `before_all`hook, but it doesn't seem to be called before other python files are executed. In this particular case I have a `config.py` file that loads some environment variables, which is used inside the supporting code for the step implementations. However, for some reason the `before_all` function is not called before `config.py` file is imported, so I end up with a KeyError due to environment variable not existing. I only need to load environment variables during development, since in the pipeline they are specified dynamically. Below is the implementation of the `before_all` hook. \r\n\r\n```python\r\ndef before_all(context):\r\n    environment = context.config.userdata.get(\"environment\", \"develop\")\r\n    if environment == \"develop\":\r\n        from dotenv import load_dotenv, find_dotenv\r\n        env_path = find_dotenv()\r\n        if env_path:\r\n            load_dotenv(env_path)\r\n```\r\n\r\nShould `before_all` not be called before any step implementations are executed?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/773", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/773/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/773/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/773/events", "html_url": "https://github.com/behave/behave/issues/773", "id": 482078903, "node_id": "MDU6SXNzdWU0ODIwNzg5MDM=", "number": 773, "title": "How can i define User Keyword?", "user": {"login": "woshiwjma956", "id": 35913841, "node_id": "MDQ6VXNlcjM1OTEzODQx", "avatar_url": "https://avatars1.githubusercontent.com/u/35913841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/woshiwjma956", "html_url": "https://github.com/woshiwjma956", "followers_url": "https://api.github.com/users/woshiwjma956/followers", "following_url": "https://api.github.com/users/woshiwjma956/following{/other_user}", "gists_url": "https://api.github.com/users/woshiwjma956/gists{/gist_id}", "starred_url": "https://api.github.com/users/woshiwjma956/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/woshiwjma956/subscriptions", "organizations_url": "https://api.github.com/users/woshiwjma956/orgs", "repos_url": "https://api.github.com/users/woshiwjma956/repos", "events_url": "https://api.github.com/users/woshiwjma956/events{/privacy}", "received_events_url": "https://api.github.com/users/woshiwjma956/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31827222, "node_id": "MDU6TGFiZWwzMTgyNzIyMg==", "url": "https://api.github.com/repos/behave/behave/labels/duplicated", "name": "duplicated", "color": "e102d8", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-19T02:44:45Z", "updated_at": "2019-10-12T18:20:10Z", "closed_at": "2019-10-12T18:20:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,How Can i define my own keyword? Like Example..\r\nI want to define a keyword read data from excel.\r\nIt can read excel row deliver to every Scenario. Like Example..\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/772", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/772/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/772/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/772/events", "html_url": "https://github.com/behave/behave/issues/772", "id": 481729367, "node_id": "MDU6SXNzdWU0ODE3MjkzNjc=", "number": 772, "title": "Behave crashes when it finds 'Examples:' with no Examples table", "user": {"login": "The-QA-Geek", "id": 52050484, "node_id": "MDQ6VXNlcjUyMDUwNDg0", "avatar_url": "https://avatars0.githubusercontent.com/u/52050484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-QA-Geek", "html_url": "https://github.com/The-QA-Geek", "followers_url": "https://api.github.com/users/The-QA-Geek/followers", "following_url": "https://api.github.com/users/The-QA-Geek/following{/other_user}", "gists_url": "https://api.github.com/users/The-QA-Geek/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-QA-Geek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-QA-Geek/subscriptions", "organizations_url": "https://api.github.com/users/The-QA-Geek/orgs", "repos_url": "https://api.github.com/users/The-QA-Geek/repos", "events_url": "https://api.github.com/users/The-QA-Geek/events{/privacy}", "received_events_url": "https://api.github.com/users/The-QA-Geek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-16T18:24:06Z", "updated_at": "2019-09-22T16:11:23Z", "closed_at": "2019-09-22T16:11:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Feature: Illustrate how not to use Examples tables\r\n\r\nScenario Outline: foo\r\nGiven an 'Examples:' statement\r\nBut no Examples table\r\nWhen we run Behave\r\nThen we get an ugly crash\r\n\r\nExamples:\r\n\r\n-----------------\r\n'Examples:' can be followed by anything that isn't an Examples table - end of file, another Scenario, a second Examples keyword, etc.; all of these will cause the crash.\r\n\r\nThe crash is inside build_scenarios; it doesn't anywhere mention the offending Feature file or line of Gherkin, so it took me a long time to debug this. The best hint it gave me was \"for row_index, row in enumerate(example.table):\r\nTypeError: 'NoneType' object is not iterable\"\r\n\r\nSo I knew that it had something to do with an Examples table, but it still took a lot of searching to find it. The parser should catch this and point the user to the offending line.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/771", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/771/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/771/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/771/events", "html_url": "https://github.com/behave/behave/issues/771", "id": 481616361, "node_id": "MDU6SXNzdWU0ODE2MTYzNjE=", "number": 771, "title": "Data table from 1st scenario appears in data table in 2nd scenario from a single feature file", "user": {"login": "conordmcgrath", "id": 7883316, "node_id": "MDQ6VXNlcjc4ODMzMTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/7883316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/conordmcgrath", "html_url": "https://github.com/conordmcgrath", "followers_url": "https://api.github.com/users/conordmcgrath/followers", "following_url": "https://api.github.com/users/conordmcgrath/following{/other_user}", "gists_url": "https://api.github.com/users/conordmcgrath/gists{/gist_id}", "starred_url": "https://api.github.com/users/conordmcgrath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/conordmcgrath/subscriptions", "organizations_url": "https://api.github.com/users/conordmcgrath/orgs", "repos_url": "https://api.github.com/users/conordmcgrath/repos", "events_url": "https://api.github.com/users/conordmcgrath/events{/privacy}", "received_events_url": "https://api.github.com/users/conordmcgrath/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-16T13:43:53Z", "updated_at": "2019-08-16T16:58:55Z", "closed_at": "2019-08-16T16:58:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I have a feature file that contains 2 scenarios. In the first I have a data table single column called 'Columns' and in 2nd scenario I have one called 'NULL_Columns'. Values that are in 'Columns' are appearing in my 2nd scenario.  The code is simple for each scenario where I iterate over context.table by the header name adding to a initialised empty list. I expect only to see those values related to it's scenario. It appears to me that context.table is not cleared before entering the next scenario. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/770", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/770/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/770/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/770/events", "html_url": "https://github.com/behave/behave/issues/770", "id": 476868882, "node_id": "MDU6SXNzdWU0NzY4Njg4ODI=", "number": 770, "title": "Fix docs about rule and Background", "user": {"login": "edusantana", "id": 3603111, "node_id": "MDQ6VXNlcjM2MDMxMTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/3603111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edusantana", "html_url": "https://github.com/edusantana", "followers_url": "https://api.github.com/users/edusantana/followers", "following_url": "https://api.github.com/users/edusantana/following{/other_user}", "gists_url": "https://api.github.com/users/edusantana/gists{/gist_id}", "starred_url": "https://api.github.com/users/edusantana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edusantana/subscriptions", "organizations_url": "https://api.github.com/users/edusantana/orgs", "repos_url": "https://api.github.com/users/edusantana/repos", "events_url": "https://api.github.com/users/edusantana/events{/privacy}", "received_events_url": "https://api.github.com/users/edusantana/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 34754574, "node_id": "MDU6TGFiZWwzNDc1NDU3NA==", "url": "https://api.github.com/repos/behave/behave/labels/info", "name": "info", "color": "444444", "default": false, "description": null}, {"id": 836638861, "node_id": "MDU6TGFiZWw4MzY2Mzg4NjE=", "url": "https://api.github.com/repos/behave/behave/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-08-05T13:46:07Z", "updated_at": "2020-04-26T11:41:34Z", "closed_at": "2020-04-26T11:41:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "From [https://cucumber.io/docs/gherkin/reference/](https://cucumber.io/docs/gherkin/reference/):\r\n\r\n> The (optional) Rule keyword has been added in Gherkin v6. (Note that Gherkin 6 has not yet been incorporated into all implementation of Cucumber!) The purpose of the Rule keyword is to represent one business rule that should be implemented. It provides additional information for a feature. A Rule is used to group together several scenarios that belong to this business rule. A Rule should contain one or more scenarios that illustrate the particular rule. **A Rule cannot contain a Background**.\r\n\r\nAnd the [website](https://behave.readthedocs.io/en/latest/new_and_noteworthy_v1.2.7.html):\r\n\r\n![rule](https://user-images.githubusercontent.com/3603111/62469198-25349780-b76e-11e9-9461-1b06aa261bc3.png)\r\n\r\nI may be wrong...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/769", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/769/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/769/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/769/events", "html_url": "https://github.com/behave/behave/issues/769", "id": 476475716, "node_id": "MDU6SXNzdWU0NzY0NzU3MTY=", "number": 769, "title": "Does behave support optional text in Gherkin expressions?", "user": {"login": "eltydari", "id": 2453869, "node_id": "MDQ6VXNlcjI0NTM4Njk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2453869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eltydari", "html_url": "https://github.com/eltydari", "followers_url": "https://api.github.com/users/eltydari/followers", "following_url": "https://api.github.com/users/eltydari/following{/other_user}", "gists_url": "https://api.github.com/users/eltydari/gists{/gist_id}", "starred_url": "https://api.github.com/users/eltydari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eltydari/subscriptions", "organizations_url": "https://api.github.com/users/eltydari/orgs", "repos_url": "https://api.github.com/users/eltydari/repos", "events_url": "https://api.github.com/users/eltydari/events{/privacy}", "received_events_url": "https://api.github.com/users/eltydari/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-08-03T18:08:18Z", "updated_at": "2020-02-20T18:05:37Z", "closed_at": "2020-02-20T18:05:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to have optional text in my expressions: for example, sometimes my sentence has \"an\" or \"a\" and I want a single step to take care of both sentences.  \r\n\r\nCucumber has support in the form of parentheses: https://cucumber.io/docs/cucumber/cucumber-expressions/#optional-text\r\n\r\nBut I have tried that and it doesn't seem like it works in behave.\r\n\r\nIs there any support for it or am I missing something in the documentation?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/767", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/767/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/767/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/767/events", "html_url": "https://github.com/behave/behave/issues/767", "id": 475776015, "node_id": "MDU6SXNzdWU0NzU3NzYwMTU=", "number": 767, "title": "use_fixture_by_tag doesn't return fixture if fixture registry has bare functions", "user": {"login": "jgentil", "id": 102330, "node_id": "MDQ6VXNlcjEwMjMzMA==", "avatar_url": "https://avatars3.githubusercontent.com/u/102330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgentil", "html_url": "https://github.com/jgentil", "followers_url": "https://api.github.com/users/jgentil/followers", "following_url": "https://api.github.com/users/jgentil/following{/other_user}", "gists_url": "https://api.github.com/users/jgentil/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgentil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgentil/subscriptions", "organizations_url": "https://api.github.com/users/jgentil/orgs", "repos_url": "https://api.github.com/users/jgentil/repos", "events_url": "https://api.github.com/users/jgentil/events{/privacy}", "received_events_url": "https://api.github.com/users/jgentil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-01T16:24:34Z", "updated_at": "2019-08-07T21:19:09Z", "closed_at": "2019-08-07T21:19:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Right now if you use `use_fixture_by_tag` and your registry is bare functions (instead of function/args/kwargs tuples) the fixture itself isn't returned from `use_fixture_by_tag`.   But it is returned if the triple tuple is present.  \r\n\r\nLines in question:\r\nhttps://github.com/behave/behave/blob/c2ef9aa02334e97455d826cdb38e8e9a96b84ea2/behave/fixture.py#L273-L279", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/766", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/766/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/766/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/766/events", "html_url": "https://github.com/behave/behave/issues/766", "id": 474880171, "node_id": "MDU6SXNzdWU0NzQ4ODAxNzE=", "number": 766, "title": "Pretty Formatter: UnicodeEncodeError in Feature File", "user": {"login": "Songyu-Wang", "id": 36670132, "node_id": "MDQ6VXNlcjM2NjcwMTMy", "avatar_url": "https://avatars3.githubusercontent.com/u/36670132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Songyu-Wang", "html_url": "https://github.com/Songyu-Wang", "followers_url": "https://api.github.com/users/Songyu-Wang/followers", "following_url": "https://api.github.com/users/Songyu-Wang/following{/other_user}", "gists_url": "https://api.github.com/users/Songyu-Wang/gists{/gist_id}", "starred_url": "https://api.github.com/users/Songyu-Wang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Songyu-Wang/subscriptions", "organizations_url": "https://api.github.com/users/Songyu-Wang/orgs", "repos_url": "https://api.github.com/users/Songyu-Wang/repos", "events_url": "https://api.github.com/users/Songyu-Wang/events{/privacy}", "received_events_url": "https://api.github.com/users/Songyu-Wang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31826189, "node_id": "MDU6TGFiZWwzMTgyNjE4OQ==", "url": "https://api.github.com/repos/behave/behave/labels/not-reproducible", "name": "not-reproducible", "color": "e102d8", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-31T00:30:15Z", "updated_at": "2019-08-08T00:44:46Z", "closed_at": "2019-08-08T00:44:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI have a feature file that contains emoji that is used as input in a example table\r\n```\r\n | J   | customer            | short2     | 2000-01-30 | _                    | Pl\ud83d\ude04 N'             | \r\n```\r\nWhen I run it locally on my Mac with python3.6, it works fine and my json.pretty result is generated\r\n```\r\n    \"rows\": [\r\n              [\r\n                \"short2\",\r\n                \"RETURNED\",\r\n                \"site\",\r\n                \"short2\",\r\n                \"2000-01-30\",\r\n                \"_\",\r\n                \"Pl\\ud83d\\ude04 N'\"\r\n              ]\r\n            ]\r\n```\r\n\r\nHowever when I run the same code on Jenkins (Linux with python3.6). I get this error:\r\n```\r\n   | short2 | RETURNED | site | short2     | 2000-01-30 | _                    | Exception UnicodeEncodeError: 'ascii' codec can't encode character '\\U0001f604' in position 2: ordinal not in range(128)\r\n\t Traceback (most recent call last):\r\n\t   File \"/usr/lib64/python3.6/runpy.py\", line 193, in _run_module_as_main\r\n\t     \"__main__\", mod_spec)\r\n\t   File \"/usr/lib64/python3.6/runpy.py\", line 85, in _run_code\r\n\t     exec(code, run_globals)\r\n\t   File \"/usr/local/lib/python3.6/site-packages/behave/__main__.py\", line 187, in <module>\r\n\t     sys.exit(main())\r\n\t   File \"/usr/local/lib/python3.6/site-packages/behave/__main__.py\", line 183, in main\r\n\t     return run_behave(config)\r\n\t   File \"/usr/local/lib/python3.6/site-packages/behave/__main__.py\", line 127, in run_behave\r\n\t     failed = runner.run()\r\n\t   File \"/usr/local/lib/python3.6/site-packages/behave/runner.py\", line 804, in run\r\n\t     return self.run_with_paths()\r\n\t   File \"/usr/local/lib/python3.6/site-packages/behave/runner.py\", line 824, in run_with_paths\r\n\t     return self.run_model()\r\n\t   File \"/usr/local/lib/python3.6/site-packages/behave/runner.py\", line 626, in run_model\r\n\t     failed = feature.run(self)\r\n\t   File \"/usr/local/lib/python3.6/site-packages/behave/model.py\", line 321, in run\r\n\t     failed = scenario.run(runner)\r\n\t   File \"/usr/local/lib/python3.6/site-packages/behave/model.py\", line 1114, in run\r\n\t     failed = scenario.run(runner)\r\n\t   File \"/usr/local/lib/python3.6/site-packages/behave/model.py\", line 711, in run\r\n\t     if not step.run(runner):\r\n\t   File \"/usr/local/lib/python3.6/site-packages/behave/model.py\", line 1311, in run\r\n\t     formatter.match(match)\r\n\t   File \"/usr/local/lib/python3.6/site-packages/behave/formatter/pretty.py\", line 132, in match\r\n\t     self._match.location, self.monochrome)\r\n\t   File \"/usr/local/lib/python3.6/site-packages/behave/formatter/pretty.py\", line 330, in print_step\r\n\t     self.table(step.table)\r\n\t   File \"/usr/local/lib/python3.6/site-packages/behave/formatter/pretty.py\", line 195, in table\r\n\t     self.stream.write(self.color(cell, None, j))\r\n\t UnicodeEncodeError: 'ascii' codec can't encode character '\\U0001f604' in position 2: ordinal not in range(128)\r\n```\r\n\r\nYou can notice the \"decoded\" character is not the same from both run. I just can't figure out what may be wrong. By going through the behave code. All feature files should be read as utf-8 no matter what. And py3 default is utf-8. \r\nCan anyone think of where the encoding may be messed up? \r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/763", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/763/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/763/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/763/events", "html_url": "https://github.com/behave/behave/issues/763", "id": 468868373, "node_id": "MDU6SXNzdWU0Njg4NjgzNzM=", "number": 763, "title": "tags: --tags option not properly picking up tests (all scenarios skipped) when using logical \"or\"", "user": {"login": "glenn-barker", "id": 43016126, "node_id": "MDQ6VXNlcjQzMDE2MTI2", "avatar_url": "https://avatars1.githubusercontent.com/u/43016126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glenn-barker", "html_url": "https://github.com/glenn-barker", "followers_url": "https://api.github.com/users/glenn-barker/followers", "following_url": "https://api.github.com/users/glenn-barker/following{/other_user}", "gists_url": "https://api.github.com/users/glenn-barker/gists{/gist_id}", "starred_url": "https://api.github.com/users/glenn-barker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glenn-barker/subscriptions", "organizations_url": "https://api.github.com/users/glenn-barker/orgs", "repos_url": "https://api.github.com/users/glenn-barker/repos", "events_url": "https://api.github.com/users/glenn-barker/events{/privacy}", "received_events_url": "https://api.github.com/users/glenn-barker/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 82233946, "node_id": "MDU6TGFiZWw4MjIzMzk0Ng==", "url": "https://api.github.com/repos/behave/behave/labels/probably-mistaken", "name": "probably-mistaken", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-16T21:17:51Z", "updated_at": "2019-07-18T20:21:24Z", "closed_at": "2019-07-18T20:21:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following (very) simple feature file:\r\n\r\n```\r\nFeature: FizzBuzz\r\n  As a tester\r\n  I want to be able to run both \"Fizz\" or \"Buzz\" scenario by specifying their appropriate tags\r\n  So that I can confirm granular control over scenario execution\r\n\r\n\r\n@fizz\r\nScenario: Fizz scenario\r\n  When this scenario is executed\r\n  Then \"fizz\" should be printed to the console\r\n\r\n\r\n@buzz\r\nScenario: Buzz scenario\r\n  When this scenario is executed\r\n  Then \"buzz\" should be printed to the console\r\n```\r\n\r\nI'm able to run the scenarios on an individual basis by running:\r\n`$ behave --tags=\"fizz\"`\r\n`$ behave --tags=\"buzz\"`\r\nBoth of these produce the expected output: 1 scenario executed, 1 skipped.\r\n\r\nHowever, consider the following:\r\n`$ behave --tags=\"fizz or buzz\"`\r\n\r\nExpected behavior: 2 scenarios executed, 0 skipped.\r\nActual behavior: 0 scenarios executed, 2 skipped.\r\n\r\nBasically, trying to use \"or\" to select multiple tags to execute on just results in every scenario being skipped.\r\n\r\nREFERENCE: https://behave.readthedocs.io/en/latest/behave.html#tag-expression", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/762", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/762/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/762/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/762/events", "html_url": "https://github.com/behave/behave/issues/762", "id": 468353762, "node_id": "MDU6SXNzdWU0NjgzNTM3NjI=", "number": 762, "title": "Logging: Capture Behave Logs/Reports to file AND log informational messages to console", "user": {"login": "collin-miller", "id": 34750881, "node_id": "MDQ6VXNlcjM0NzUwODgx", "avatar_url": "https://avatars2.githubusercontent.com/u/34750881?v=4", "gravatar_id": "", "url": "https://api.github.com/users/collin-miller", "html_url": "https://github.com/collin-miller", "followers_url": "https://api.github.com/users/collin-miller/followers", "following_url": "https://api.github.com/users/collin-miller/following{/other_user}", "gists_url": "https://api.github.com/users/collin-miller/gists{/gist_id}", "starred_url": "https://api.github.com/users/collin-miller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/collin-miller/subscriptions", "organizations_url": "https://api.github.com/users/collin-miller/orgs", "repos_url": "https://api.github.com/users/collin-miller/repos", "events_url": "https://api.github.com/users/collin-miller/events{/privacy}", "received_events_url": "https://api.github.com/users/collin-miller/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-15T21:57:35Z", "updated_at": "2019-08-07T22:05:36Z", "closed_at": "2019-08-07T22:05:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to be able to capture the the standard behave logging to an output file while simultaneously log informational messages to console. The only time the messages are written to console are in the failures. I'd like to log information in positive scenarios as well.\r\n\r\nSummary:\r\n- write behave standard logs output to file\r\n- write custom (informational/debugging) logging to console (for success and failure scenarios)\r\n\r\n\r\nReasoning: the tests will execute and run against an asynchronous queued messaging system and depending on the number of messages in the queue, or other factors, the tests can run for quite some time. It would be best if we track the progress by including some custom logging; however, when I try to use the `logging` library I am unable to write informational messages to the console. \r\n\r\nIs there a recommendation for logging under these conditions?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/760", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/760/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/760/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/760/events", "html_url": "https://github.com/behave/behave/issues/760", "id": 461736324, "node_id": "MDU6SXNzdWU0NjE3MzYzMjQ=", "number": 760, "title": "json and json.pretty formatter missing Rule keys on Gherkin v6", "user": {"login": "dunossauro", "id": 6801122, "node_id": "MDQ6VXNlcjY4MDExMjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6801122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dunossauro", "html_url": "https://github.com/dunossauro", "followers_url": "https://api.github.com/users/dunossauro/followers", "following_url": "https://api.github.com/users/dunossauro/following{/other_user}", "gists_url": "https://api.github.com/users/dunossauro/gists{/gist_id}", "starred_url": "https://api.github.com/users/dunossauro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dunossauro/subscriptions", "organizations_url": "https://api.github.com/users/dunossauro/orgs", "repos_url": "https://api.github.com/users/dunossauro/repos", "events_url": "https://api.github.com/users/dunossauro/events{/privacy}", "received_events_url": "https://api.github.com/users/dunossauro/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31826189, "node_id": "MDU6TGFiZWwzMTgyNjE4OQ==", "url": "https://api.github.com/repos/behave/behave/labels/not-reproducible", "name": "not-reproducible", "color": "e102d8", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-27T20:34:50Z", "updated_at": "2019-07-01T20:25:01Z", "closed_at": "2019-07-01T20:25:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "When run features using gherkin v6 json formatters don't generate correct json.\r\n\r\nRelated #759 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/759", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/759/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/759/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/759/events", "html_url": "https://github.com/behave/behave/issues/759", "id": 461724984, "node_id": "MDU6SXNzdWU0NjE3MjQ5ODQ=", "number": 759, "title": "rerun formatter doesn't works with Gherkin v6", "user": {"login": "dunossauro", "id": 6801122, "node_id": "MDQ6VXNlcjY4MDExMjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6801122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dunossauro", "html_url": "https://github.com/dunossauro", "followers_url": "https://api.github.com/users/dunossauro/followers", "following_url": "https://api.github.com/users/dunossauro/following{/other_user}", "gists_url": "https://api.github.com/users/dunossauro/gists{/gist_id}", "starred_url": "https://api.github.com/users/dunossauro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dunossauro/subscriptions", "organizations_url": "https://api.github.com/users/dunossauro/orgs", "repos_url": "https://api.github.com/users/dunossauro/repos", "events_url": "https://api.github.com/users/dunossauro/events{/privacy}", "received_events_url": "https://api.github.com/users/dunossauro/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 350389943, "node_id": "MDU6TGFiZWwzNTAzODk5NDM=", "url": "https://api.github.com/repos/behave/behave/labels/needs-analysis", "name": "needs-analysis", "color": "f9d0c4", "default": false, "description": null}, {"id": 31826189, "node_id": "MDU6TGFiZWwzMTgyNjE4OQ==", "url": "https://api.github.com/repos/behave/behave/labels/not-reproducible", "name": "not-reproducible", "color": "e102d8", "default": false, "description": null}, {"id": 836638861, "node_id": "MDU6TGFiZWw4MzY2Mzg4NjE=", "url": "https://api.github.com/repos/behave/behave/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-27T20:08:18Z", "updated_at": "2020-01-11T22:41:47Z", "closed_at": "2020-01-11T21:24:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I create a [simple project](https://github.com/dunossauro/behave-gherkin-v6) to test gherking v6 features. And when I test rerun, formatter show this traceback.\r\n\r\nTrace:\r\n```Python\r\nTraceback (most recent call last):\r\n  File \"/home/eduardo.mendes/.local/share/virtualenvs/behave-gherkin-v6-Rx_fylZL/bin/behave\", line 10, in <module>\r\n    sys.exit(main())\r\n  File \"/home/eduardo.mendes/.local/share/virtualenvs/behave-gherkin-v6-Rx_fylZL/lib/python3.7/site-packages/behave/__main__.py\", lin\r\ne 215, in main\r\n    return run_behave(config)\r\n  File \"/home/eduardo.mendes/.local/share/virtualenvs/behave-gherkin-v6-Rx_fylZL/lib/python3.7/site-packages/behave/__main__.py\", lin\r\ne 102, in run_behave\r\n\r\n    failed = runner.run()\r\n  File \"/home/eduardo.mendes/.local/share/virtualenvs/behave-gherkin-v6-Rx_fylZL/lib/python3.7/site-packages/behave/runner.py\", line\r\n808, in run\r\n    return self.run_with_paths()\r\n  File \"/home/eduardo.mendes/.local/share/virtualenvs/behave-gherkin-v6-Rx_fylZL/lib/python3.7/site-packages/behave/runner.py\", line\r\n828, in run_with_paths\r\n    return self.run_model()\r\n  File \"/home/eduardo.mendes/.local/share/virtualenvs/behave-gherkin-v6-Rx_fylZL/lib/python3.7/site-packages/behave/runner.py\", line\r\n630, in run_model\r\n    failed = feature.run(self)\r\n  File \"/home/eduardo.mendes/.local/share/virtualenvs/behave-gherkin-v6-Rx_fylZL/lib/python3.7/site-packages/behave/model.py\", line 3\r\n93, in run\r\n    formatter_callback()\r\n  File \"/home/eduardo.mendes/.local/share/virtualenvs/behave-gherkin-v6-Rx_fylZL/lib/python3.7/site-packages/behave/formatter/rerun.p\r\ny\", line 65, in eof\r\n    for scenario in self.current_feature.walk_scenarios():\r\n  File \"/home/eduardo.mendes/.local/share/virtualenvs/behave-gherkin-v6-Rx_fylZL/lib/python3.7/site-packages/behave/model.py\", line 2\r\n31, in walk_scenarios\r\n    assert isinstance(run_item, Scenario)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/758", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/758/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/758/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/758/events", "html_url": "https://github.com/behave/behave/issues/758", "id": 460161125, "node_id": "MDU6SXNzdWU0NjAxNjExMjU=", "number": 758, "title": "Is there a way to set unique pre-conditions for each feature file?", "user": {"login": "Songyu-Wang", "id": 36670132, "node_id": "MDQ6VXNlcjM2NjcwMTMy", "avatar_url": "https://avatars3.githubusercontent.com/u/36670132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Songyu-Wang", "html_url": "https://github.com/Songyu-Wang", "followers_url": "https://api.github.com/users/Songyu-Wang/followers", "following_url": "https://api.github.com/users/Songyu-Wang/following{/other_user}", "gists_url": "https://api.github.com/users/Songyu-Wang/gists{/gist_id}", "starred_url": "https://api.github.com/users/Songyu-Wang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Songyu-Wang/subscriptions", "organizations_url": "https://api.github.com/users/Songyu-Wang/orgs", "repos_url": "https://api.github.com/users/Songyu-Wang/repos", "events_url": "https://api.github.com/users/Songyu-Wang/events{/privacy}", "received_events_url": "https://api.github.com/users/Songyu-Wang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-25T01:15:09Z", "updated_at": "2019-07-02T22:28:25Z", "closed_at": "2019-07-02T22:28:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I know I can use before_feature() to do some pre-condition\r\nHowever, is there a way that i can execute different pre-condition for different features? \r\nMaybe something like this? https://radish.readthedocs.io/en/latest/tutorial.html#scenario-precondition", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/757", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/757/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/757/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/757/events", "html_url": "https://github.com/behave/behave/issues/757", "id": 459620512, "node_id": "MDU6SXNzdWU0NTk2MjA1MTI=", "number": 757, "title": "master at 1.2.7 is incompatible with python2.7", "user": {"login": "xrg", "id": 9214, "node_id": "MDQ6VXNlcjkyMTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/9214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xrg", "html_url": "https://github.com/xrg", "followers_url": "https://api.github.com/users/xrg/followers", "following_url": "https://api.github.com/users/xrg/following{/other_user}", "gists_url": "https://api.github.com/users/xrg/gists{/gist_id}", "starred_url": "https://api.github.com/users/xrg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xrg/subscriptions", "organizations_url": "https://api.github.com/users/xrg/orgs", "repos_url": "https://api.github.com/users/xrg/repos", "events_url": "https://api.github.com/users/xrg/events{/privacy}", "received_events_url": "https://api.github.com/users/xrg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-23T21:35:45Z", "updated_at": "2019-07-01T06:10:02Z", "closed_at": "2019-07-01T05:12:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I noticed that as of tag 1.2.7dev1, the source is no longer compatible with python2.7\r\nI see the arguments about python2 becoming obsoleted etc.\r\nHowever, dropping support for the language is a big step, cannot go under a minor version.\r\n\r\nPlease release next version as 1.3.0 or something. Not in the 1.2.x series, that had python2.7 compatibility.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/756", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/756/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/756/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/756/events", "html_url": "https://github.com/behave/behave/issues/756", "id": 456134083, "node_id": "MDU6SXNzdWU0NTYxMzQwODM=", "number": 756, "title": "Do not execute background before scenario", "user": {"login": "Mina05", "id": 28011463, "node_id": "MDQ6VXNlcjI4MDExNDYz", "avatar_url": "https://avatars1.githubusercontent.com/u/28011463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mina05", "html_url": "https://github.com/Mina05", "followers_url": "https://api.github.com/users/Mina05/followers", "following_url": "https://api.github.com/users/Mina05/following{/other_user}", "gists_url": "https://api.github.com/users/Mina05/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mina05/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mina05/subscriptions", "organizations_url": "https://api.github.com/users/Mina05/orgs", "repos_url": "https://api.github.com/users/Mina05/repos", "events_url": "https://api.github.com/users/Mina05/events{/privacy}", "received_events_url": "https://api.github.com/users/Mina05/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-14T08:51:51Z", "updated_at": "2019-06-17T13:58:02Z", "closed_at": "2019-06-17T13:58:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm searching a way to avoid the background running before a scenario. My scenario is looking like the below code. I found [this](https://stackoverflow.com/questions/41637534/how-to-skip-steps-in-background-of-behave-bdd) but collecting everything in one step is not that what I need.\r\n\r\n```gherkin\r\nBackground:\r\n  Given I visit a page\r\n  And I do something special for this feature\r\n\r\n@no_background\r\nScenario: no need for background because doing something else\r\n    Given I visit another page\r\n    And I want to configure something\r\n```\r\n\r\nIf it's not possible to skip the whole background then I would need a solution to overwrite the background. I also tried to start writing a fixture for\r\n\r\n```python\r\ndef before_tag(context, tag):\r\n    if tag ==\"no_background\":\r\n        use_fixture(execute_no_background, context)\r\n```\r\n\r\nbut I could not find out how to disable/override the background.\r\n\r\nI hope someone can help me here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/755", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/755/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/755/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/755/events", "html_url": "https://github.com/behave/behave/issues/755", "id": 453497734, "node_id": "MDU6SXNzdWU0NTM0OTc3MzQ=", "number": 755, "title": "Failures with Python 3.8", "user": {"login": "hroncok", "id": 2401856, "node_id": "MDQ6VXNlcjI0MDE4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2401856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hroncok", "html_url": "https://github.com/hroncok", "followers_url": "https://api.github.com/users/hroncok/followers", "following_url": "https://api.github.com/users/hroncok/following{/other_user}", "gists_url": "https://api.github.com/users/hroncok/gists{/gist_id}", "starred_url": "https://api.github.com/users/hroncok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hroncok/subscriptions", "organizations_url": "https://api.github.com/users/hroncok/orgs", "repos_url": "https://api.github.com/users/hroncok/repos", "events_url": "https://api.github.com/users/hroncok/events{/privacy}", "received_events_url": "https://api.github.com/users/hroncok/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-06-07T12:51:12Z", "updated_at": "2020-01-24T13:22:54Z", "closed_at": "2019-07-07T11:01:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "In Fedora, we have the following failures with behave 1.2.6 and Python 3.8.0b1:\r\n\r\n```\r\n\r\n==================================== ERRORS ====================================\r\n_ ERROR at setup of TestCaptureController.test_capturing__retrieve_captured_several_times _\r\n\r\n    @pytest.fixture\r\n    def capture_controller():\r\n        \"\"\"Provides a capture_controller that is already setup and automatically\r\n        performs a teardown afterwards.\r\n        \"\"\"\r\n        capture_controller = create_capture_controller()\r\n>       setup_capture_controller(capture_controller)\r\n\r\ntests/unit/test_capture.py:42: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ntests/unit/test_capture.py:30: in setup_capture_controller\r\n    capture_controller.setup_capture(context)\r\nbehave/capture.py:147: in setup_capture\r\n    self.log_capture = LoggingCapture(self.config)\r\nbehave/log_capture.py:74: in __init__\r\n    formatter = logging.Formatter(log_format, datefmt)\r\n/usr/lib64/python3.8/logging/__init__.py:576: in __init__\r\n    self._style.validate()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <logging.PercentStyle object at 0x7f4272b01700>\r\n\r\n    def validate(self):\r\n        \"\"\"Validate the input format, ensure it matches the correct style\"\"\"\r\n>       if not self.validation_pattern.search(self._fmt):\r\nE       TypeError: expected string or bytes-like object\r\n\r\n/usr/lib64/python3.8/logging/__init__.py:428: TypeError\r\n_ ERROR at setup of TestCaptureController.test_capturing__with_several_start_stop_cycles _\r\n\r\n    @pytest.fixture\r\n    def capture_controller():\r\n        \"\"\"Provides a capture_controller that is already setup and automatically\r\n        performs a teardown afterwards.\r\n        \"\"\"\r\n        capture_controller = create_capture_controller()\r\n>       setup_capture_controller(capture_controller)\r\n\r\ntests/unit/test_capture.py:42: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ntests/unit/test_capture.py:30: in setup_capture_controller\r\n    capture_controller.setup_capture(context)\r\nbehave/capture.py:147: in setup_capture\r\n    self.log_capture = LoggingCapture(self.config)\r\nbehave/log_capture.py:74: in __init__\r\n    formatter = logging.Formatter(log_format, datefmt)\r\n/usr/lib64/python3.8/logging/__init__.py:576: in __init__\r\n    self._style.validate()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <logging.PercentStyle object at 0x7f4271516190>\r\n\r\n    def validate(self):\r\n        \"\"\"Validate the input format, ensure it matches the correct style\"\"\"\r\n>       if not self.validation_pattern.search(self._fmt):\r\nE       TypeError: expected string or bytes-like object\r\n\r\n/usr/lib64/python3.8/logging/__init__.py:428: TypeError\r\n_______ ERROR at setup of TestCaptureController.test_make_capture_report _______\r\n\r\n    @pytest.fixture\r\n    def capture_controller():\r\n        \"\"\"Provides a capture_controller that is already setup and automatically\r\n        performs a teardown afterwards.\r\n        \"\"\"\r\n        capture_controller = create_capture_controller()\r\n>       setup_capture_controller(capture_controller)\r\n\r\ntests/unit/test_capture.py:42: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ntests/unit/test_capture.py:30: in setup_capture_controller\r\n    capture_controller.setup_capture(context)\r\nbehave/capture.py:147: in setup_capture\r\n    self.log_capture = LoggingCapture(self.config)\r\nbehave/log_capture.py:74: in __init__\r\n    formatter = logging.Formatter(log_format, datefmt)\r\n/usr/lib64/python3.8/logging/__init__.py:576: in __init__\r\n    self._style.validate()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <logging.PercentStyle object at 0x7f4271520100>\r\n\r\n    def validate(self):\r\n        \"\"\"Validate the input format, ensure it matches the correct style\"\"\"\r\n>       if not self.validation_pattern.search(self._fmt):\r\nE       TypeError: expected string or bytes-like object\r\n\r\n/usr/lib64/python3.8/logging/__init__.py:428: TypeError\r\n=================================== FAILURES ===================================\r\n____________ TestRunWithPaths.test_loads_hooks_and_step_definitions ____________\r\n\r\nself = <test.test_runner.TestRunWithPaths testMethod=test_loads_hooks_and_step_definitions>\r\n\r\n    def test_loads_hooks_and_step_definitions(self):\r\n        self.feature_locations.return_value = []\r\n>       self.runner.run_with_paths()\r\n\r\ntest/test_runner.py:678: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nbehave/runner.py:824: in run_with_paths\r\n    return self.run_model()\r\nbehave/runner.py:613: in run_model\r\n    self.setup_capture()\r\nbehave/runner.py:590: in setup_capture\r\n    self.capture_controller.setup_capture(self.context)\r\nbehave/capture.py:147: in setup_capture\r\n    self.log_capture = LoggingCapture(self.config)\r\nbehave/log_capture.py:74: in __init__\r\n    formatter = logging.Formatter(log_format, datefmt)\r\n/usr/lib64/python3.8/logging/__init__.py:576: in __init__\r\n    self._style.validate()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <logging.PercentStyle object at 0x7f4272ac0610>\r\n\r\n    def validate(self):\r\n        \"\"\"Validate the input format, ensure it matches the correct style\"\"\"\r\n>       if not self.validation_pattern.search(self._fmt):\r\nE       TypeError: expected string or bytes-like object\r\n\r\n/usr/lib64/python3.8/logging/__init__.py:428: TypeError\r\n____ TestRunWithPaths.test_parses_feature_files_and_appends_to_feature_list ____\r\n\r\nself = <test.test_runner.TestRunWithPaths testMethod=test_parses_feature_files_and_appends_to_feature_list>\r\nabspath = <MagicMock name='abspath' id='139923345085536'>\r\nparse_file = <MagicMock name='parse_file' id='139923345946176'>\r\n\r\n    @patch(\"behave.parser.parse_file\")\r\n    @patch(\"os.path.abspath\")\r\n    def test_parses_feature_files_and_appends_to_feature_list(self, abspath,\r\n                                                              parse_file):\r\n        feature_locations = [\"one\", \"two\", \"three\"]\r\n        feature = Mock()\r\n        feature.tags = []\r\n        feature.__iter__ = Mock(return_value=iter([]))\r\n        feature.run.return_value = False\r\n        self.runner.feature_locations.return_value = feature_locations\r\n        abspath.side_effect = lambda x: x.upper()\r\n        self.config.lang = \"fritz\"\r\n        self.config.format = [\"plain\"]\r\n        self.config.outputs = [StreamOpener(stream=sys.stdout)]\r\n        self.config.output.encoding = None\r\n        self.config.exclude = lambda s: False\r\n        self.config.junit = False\r\n        self.config.summary = False\r\n        parse_file.return_value = feature\r\n    \r\n>       self.runner.run_with_paths()\r\n\r\ntest/test_runner.py:717: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nbehave/runner.py:824: in run_with_paths\r\n    return self.run_model()\r\nbehave/runner.py:613: in run_model\r\n    self.setup_capture()\r\nbehave/runner.py:590: in setup_capture\r\n    self.capture_controller.setup_capture(self.context)\r\nbehave/capture.py:147: in setup_capture\r\n    self.log_capture = LoggingCapture(self.config)\r\nbehave/log_capture.py:74: in __init__\r\n    formatter = logging.Formatter(log_format, datefmt)\r\n/usr/lib64/python3.8/logging/__init__.py:576: in __init__\r\n    self._style.validate()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <logging.PercentStyle object at 0x7f4272a95d00>\r\n\r\n    def validate(self):\r\n        \"\"\"Validate the input format, ensure it matches the correct style\"\"\"\r\n>       if not self.validation_pattern.search(self._fmt):\r\nE       TypeError: expected string or bytes-like object\r\n\r\n/usr/lib64/python3.8/logging/__init__.py:428: TypeError\r\n__________ TestRunWithPaths.test_runs_before_all_and_after_all_hooks ___________\r\n\r\nself = <test.test_runner.TestRunWithPaths testMethod=test_runs_before_all_and_after_all_hooks>\r\n\r\n    def test_runs_before_all_and_after_all_hooks(self):\r\n        # Make runner.feature_locations() and runner.run_hook() the same mock so\r\n        # we can make sure things happen in the right order.\r\n        self.runner.feature_locations = self.run_hook\r\n        self.runner.feature_locations.return_value = []\r\n        self.runner.context = Mock()\r\n>       self.runner.run_with_paths()\r\n\r\ntest/test_runner.py:689: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nbehave/runner.py:824: in run_with_paths\r\n    return self.run_model()\r\nbehave/runner.py:613: in run_model\r\n    self.setup_capture()\r\nbehave/runner.py:590: in setup_capture\r\n    self.capture_controller.setup_capture(self.context)\r\nbehave/capture.py:147: in setup_capture\r\n    self.log_capture = LoggingCapture(self.config)\r\nbehave/log_capture.py:74: in __init__\r\n    formatter = logging.Formatter(log_format, datefmt)\r\n/usr/lib64/python3.8/logging/__init__.py:576: in __init__\r\n    self._style.validate()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <logging.PercentStyle object at 0x7f4271395e20>\r\n\r\n    def validate(self):\r\n        \"\"\"Validate the input format, ensure it matches the correct style\"\"\"\r\n>       if not self.validation_pattern.search(self._fmt):\r\nE       TypeError: expected string or bytes-like object\r\n\r\n/usr/lib64/python3.8/logging/__init__.py:428: TypeError\r\n______________________ TestCaptureController.test_basics _______________________\r\n\r\nself = <tests.unit.test_capture.TestCaptureController object at 0x7f4271439880>\r\n\r\n    def test_basics(self):\r\n        capture_controller = create_capture_controller()\r\n        context = Mock()\r\n        context.aborted = False\r\n        context.config = capture_controller.config\r\n    \r\n>       capture_controller.setup_capture(context)\r\n\r\ntests/unit/test_capture.py:226: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nbehave/capture.py:147: in setup_capture\r\n    self.log_capture = LoggingCapture(self.config)\r\nbehave/log_capture.py:74: in __init__\r\n    formatter = logging.Formatter(log_format, datefmt)\r\n/usr/lib64/python3.8/logging/__init__.py:576: in __init__\r\n    self._style.validate()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <logging.PercentStyle object at 0x7f42719918b0>\r\n\r\n    def validate(self):\r\n        \"\"\"Validate the input format, ensure it matches the correct style\"\"\"\r\n>       if not self.validation_pattern.search(self._fmt):\r\nE       TypeError: expected string or bytes-like object\r\n\r\n/usr/lib64/python3.8/logging/__init__.py:428: TypeError\r\n```\r\n\r\nFull log: [builder.log](https://github.com/behave/behave/files/3265932/builder-live.log)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/754", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/754/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/754/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/754/events", "html_url": "https://github.com/behave/behave/issues/754", "id": 453025479, "node_id": "MDU6SXNzdWU0NTMwMjU0Nzk=", "number": 754, "title": "tags for steps", "user": {"login": "SempaiPrague", "id": 51409525, "node_id": "MDQ6VXNlcjUxNDA5NTI1", "avatar_url": "https://avatars1.githubusercontent.com/u/51409525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SempaiPrague", "html_url": "https://github.com/SempaiPrague", "followers_url": "https://api.github.com/users/SempaiPrague/followers", "following_url": "https://api.github.com/users/SempaiPrague/following{/other_user}", "gists_url": "https://api.github.com/users/SempaiPrague/gists{/gist_id}", "starred_url": "https://api.github.com/users/SempaiPrague/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SempaiPrague/subscriptions", "organizations_url": "https://api.github.com/users/SempaiPrague/orgs", "repos_url": "https://api.github.com/users/SempaiPrague/repos", "events_url": "https://api.github.com/users/SempaiPrague/events{/privacy}", "received_events_url": "https://api.github.com/users/SempaiPrague/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31826404, "node_id": "MDU6TGFiZWwzMTgyNjQwNA==", "url": "https://api.github.com/repos/behave/behave/labels/wont-fix", "name": "wont-fix", "color": "0b02e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-06-06T13:17:21Z", "updated_at": "2019-06-10T07:35:50Z", "closed_at": "2019-06-10T07:35:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "As I understood from the documentation, tags only work on feature or scenario level. \r\nIt would be nice if you can create specific tags for steps as well. \r\nCould this become a new feature in the future?\r\n\r\nBecause I have the case where I want certain steps to still fail, but not to stop the scenario run.\r\nThere is the option Scenario.continue_after_failed_step, but this by default applies to all steps in that scenario, which is unwanted. \r\nOr does there exist a current method to still fail specific steps, but not let it interrupt the scenario? (without applying to all the steps in that said scenario)\r\n\r\nMuch appreciated. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/753", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/753/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/753/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/753/events", "html_url": "https://github.com/behave/behave/issues/753", "id": 452574604, "node_id": "MDU6SXNzdWU0NTI1NzQ2MDQ=", "number": 753, "title": "Steps cannot be reused if different prefix (Given vs When)", "user": {"login": "amcgaugh", "id": 11729100, "node_id": "MDQ6VXNlcjExNzI5MTAw", "avatar_url": "https://avatars3.githubusercontent.com/u/11729100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amcgaugh", "html_url": "https://github.com/amcgaugh", "followers_url": "https://api.github.com/users/amcgaugh/followers", "following_url": "https://api.github.com/users/amcgaugh/following{/other_user}", "gists_url": "https://api.github.com/users/amcgaugh/gists{/gist_id}", "starred_url": "https://api.github.com/users/amcgaugh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amcgaugh/subscriptions", "organizations_url": "https://api.github.com/users/amcgaugh/orgs", "repos_url": "https://api.github.com/users/amcgaugh/repos", "events_url": "https://api.github.com/users/amcgaugh/events{/privacy}", "received_events_url": "https://api.github.com/users/amcgaugh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-05T15:41:10Z", "updated_at": "2019-06-08T17:42:38Z", "closed_at": "2019-06-08T17:42:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Behave is throwing an error for missing step definition when the same step has a different prefix (Given vs. When). \r\n\r\nExample:\r\nGiven I am on the home screen \r\nWhen I am on the home screen\r\n\r\nIf step definition was created for @given('I am on the home screen') it would throw an undefined step definition for the when step, when really it should take the same step (similar to cucumber frameworks). ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/752", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/752/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/752/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/752/events", "html_url": "https://github.com/behave/behave/issues/752", "id": 452310375, "node_id": "MDU6SXNzdWU0NTIzMTAzNzU=", "number": 752, "title": "What are the extensions to enhance Behave?", "user": {"login": "AlexSkrypnyk", "id": 378794, "node_id": "MDQ6VXNlcjM3ODc5NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/378794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexSkrypnyk", "html_url": "https://github.com/AlexSkrypnyk", "followers_url": "https://api.github.com/users/AlexSkrypnyk/followers", "following_url": "https://api.github.com/users/AlexSkrypnyk/following{/other_user}", "gists_url": "https://api.github.com/users/AlexSkrypnyk/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexSkrypnyk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexSkrypnyk/subscriptions", "organizations_url": "https://api.github.com/users/AlexSkrypnyk/orgs", "repos_url": "https://api.github.com/users/AlexSkrypnyk/repos", "events_url": "https://api.github.com/users/AlexSkrypnyk/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexSkrypnyk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-05T04:31:26Z", "updated_at": "2019-06-12T14:25:36Z", "closed_at": "2019-06-12T14:25:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Apologies for the noob question.\r\n\r\nI'm new to python world coming from PHP.\r\n\r\nIn PHP we have Behat which has a lot of extensions available to work with HTML (asserting for element presence etc).\r\n\r\nAre there any extensions like this for Behave? I want to test UI by loading pages and asserting element presence (also following links).\r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/750", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/750/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/750/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/750/events", "html_url": "https://github.com/behave/behave/issues/750", "id": 447095805, "node_id": "MDU6SXNzdWU0NDcwOTU4MDU=", "number": 750, "title": "Context handling is not correct in after_feature ", "user": {"login": "Vadmeggy", "id": 12214816, "node_id": "MDQ6VXNlcjEyMjE0ODE2", "avatar_url": "https://avatars0.githubusercontent.com/u/12214816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vadmeggy", "html_url": "https://github.com/Vadmeggy", "followers_url": "https://api.github.com/users/Vadmeggy/followers", "following_url": "https://api.github.com/users/Vadmeggy/following{/other_user}", "gists_url": "https://api.github.com/users/Vadmeggy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vadmeggy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vadmeggy/subscriptions", "organizations_url": "https://api.github.com/users/Vadmeggy/orgs", "repos_url": "https://api.github.com/users/Vadmeggy/repos", "events_url": "https://api.github.com/users/Vadmeggy/events{/privacy}", "received_events_url": "https://api.github.com/users/Vadmeggy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-22T12:02:46Z", "updated_at": "2019-05-22T15:15:24Z", "closed_at": "2019-05-22T15:15:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Context handling is not working properly in **after_feature** method in **environment.py**. The object reference in after_feature should equal <Foo object at 0x11033a160>, but it is <Foo object at 0x110332fd0> which was created in before_feature. after_scenario, after_tag context holds the correct object reference, after_feature is not\r\n\r\nLooks like the context is not handled between the setup teardown methods properly.\r\n\r\n```\r\nbefore_feature\r\ncontext.foo = Foo()\r\n<Foo object at 0x110332fd0>\r\nFeature: Test # test.feature:1\r\nbefore_tag\r\n<Foo object at 0x110332fd0>\r\ncontext.foo = Foo()\r\n<Foo object at 0x11033a048>\r\nbefore_scenario\r\n<Foo object at 0x11033a048>\r\ncontext.foo = Foo()\r\n<Foo object at 0x11033a160>\r\n\r\n\r\n  @tag\r\n  Scenario: Test  # test.feature:4\r\n    Given test    # steps/test_steps.py:4\r\n    Given test    # steps/test_steps.py:4 0.000s\r\n\r\n\r\nafter_scenario\r\n<Foo object at 0x11033a160>\r\nafter_tag\r\n<Foo object at 0x11033a160>\r\nafter_feature\r\n<Foo object at 0x110332fd0>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/749", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/749/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/749/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/749/events", "html_url": "https://github.com/behave/behave/issues/749", "id": 446763347, "node_id": "MDU6SXNzdWU0NDY3NjMzNDc=", "number": 749, "title": "Documentation bug in context_attributes.rst", "user": {"login": "papperlapapp", "id": 8466298, "node_id": "MDQ6VXNlcjg0NjYyOTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8466298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/papperlapapp", "html_url": "https://github.com/papperlapapp", "followers_url": "https://api.github.com/users/papperlapapp/followers", "following_url": "https://api.github.com/users/papperlapapp/following{/other_user}", "gists_url": "https://api.github.com/users/papperlapapp/gists{/gist_id}", "starred_url": "https://api.github.com/users/papperlapapp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/papperlapapp/subscriptions", "organizations_url": "https://api.github.com/users/papperlapapp/orgs", "repos_url": "https://api.github.com/users/papperlapapp/repos", "events_url": "https://api.github.com/users/papperlapapp/events{/privacy}", "received_events_url": "https://api.github.com/users/papperlapapp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-21T18:31:20Z", "updated_at": "2019-06-09T13:18:13Z", "closed_at": "2019-06-09T13:18:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the \"User Attributes\" table in `docs/context_attributes.rst`, shouldn't `after_after()` be called  `after_rule()`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/748", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/748/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/748/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/748/events", "html_url": "https://github.com/behave/behave/issues/748", "id": 442293139, "node_id": "MDU6SXNzdWU0NDIyOTMxMzk=", "number": 748, "title": "IOError: [Errno 11] Resource temporarily unavailable", "user": {"login": "bharadwajambati95", "id": 36454091, "node_id": "MDQ6VXNlcjM2NDU0MDkx", "avatar_url": "https://avatars0.githubusercontent.com/u/36454091?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bharadwajambati95", "html_url": "https://github.com/bharadwajambati95", "followers_url": "https://api.github.com/users/bharadwajambati95/followers", "following_url": "https://api.github.com/users/bharadwajambati95/following{/other_user}", "gists_url": "https://api.github.com/users/bharadwajambati95/gists{/gist_id}", "starred_url": "https://api.github.com/users/bharadwajambati95/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bharadwajambati95/subscriptions", "organizations_url": "https://api.github.com/users/bharadwajambati95/orgs", "repos_url": "https://api.github.com/users/bharadwajambati95/repos", "events_url": "https://api.github.com/users/bharadwajambati95/events{/privacy}", "received_events_url": "https://api.github.com/users/bharadwajambati95/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-09T15:20:22Z", "updated_at": "2019-05-14T03:50:04Z", "closed_at": "2019-05-13T20:49:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following traceback is found in the logs, once the behave test failed.\r\n\r\n**Exception IOError: [Errno 11] Resource temporarily unavailable\r\n23:40:31 Traceback (most recent call last):\r\n23:40:31   File \"/usr/local/bin/behave\", line 11, in <module>\r\n23:40:31     sys.exit(main())\r\n23:40:31   File \"/usr/local/lib/python2.7/dist-packages/behave/__main__.py\", line 183, in main\r\n23:40:31     return run_behave(config)\r\n23:40:31   File \"/usr/local/lib/python2.7/dist-packages/behave/__main__.py\", line 127, in run_behave\r\n23:40:31     failed = runner.run()\r\n23:40:31   File \"/usr/local/lib/python2.7/dist-packages/behave/runner.py\", line 804, in run\r\n23:40:31     return self.run_with_paths()\r\n23:40:31   File \"/usr/local/lib/python2.7/dist-packages/behave/runner.py\", line 824, in run_with_paths\r\n23:40:31     return self.run_model()\r\n23:40:31   File \"/usr/local/lib/python2.7/dist-packages/behave/runner.py\", line 626, in run_model\r\n23:40:31     failed = feature.run(self)\r\n23:40:31   File \"/usr/local/lib/python2.7/dist-packages/behave/model.py\", line 321, in run\r\n23:40:31     failed = scenario.run(runner)\r\n23:40:31   File \"/usr/local/lib/python2.7/dist-packages/behave/model.py\", line 1114, in run\r\n23:40:31     failed = scenario.run(runner)\r\n23:40:31   File \"/usr/local/lib/python2.7/dist-packages/behave/model.py\", line 711, in run\r\n23:40:31     if not step.run(runner):\r\n23:40:31   File \"/usr/local/lib/python2.7/dist-packages/behave/model.py\", line 1379, in run\r\n23:40:31     formatter.result(self)\r\n23:40:31   File \"/usr/local/lib/python2.7/dist-packages/behave/formatter/pretty.py\", line 151, in result\r\n23:40:31     self.stream.write(indent(step.error_message.strip(), u\"      \"))\r\n23:40:31   File \"/usr/lib/python2.7/codecs.py\", line 370, in write\r\n23:40:31     self.stream.write(data)\r\n23:40:31 IOError: [Errno 11] Resource temporarily unavailable**\r\n\r\nUnable to figure out why and where this IOError is popping out. Can someone help me out in resolving this issue?\r\n\r\nThanks in advance..", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/746", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/746/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/746/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/746/events", "html_url": "https://github.com/behave/behave/issues/746", "id": 437377255, "node_id": "MDU6SXNzdWU0MzczNzcyNTU=", "number": 746, "title": "Store error and captured logging separately in the model", "user": {"login": "lawnmowerlatte", "id": 1874992, "node_id": "MDQ6VXNlcjE4NzQ5OTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1874992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lawnmowerlatte", "html_url": "https://github.com/lawnmowerlatte", "followers_url": "https://api.github.com/users/lawnmowerlatte/followers", "following_url": "https://api.github.com/users/lawnmowerlatte/following{/other_user}", "gists_url": "https://api.github.com/users/lawnmowerlatte/gists{/gist_id}", "starred_url": "https://api.github.com/users/lawnmowerlatte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lawnmowerlatte/subscriptions", "organizations_url": "https://api.github.com/users/lawnmowerlatte/orgs", "repos_url": "https://api.github.com/users/lawnmowerlatte/repos", "events_url": "https://api.github.com/users/lawnmowerlatte/events{/privacy}", "received_events_url": "https://api.github.com/users/lawnmowerlatte/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 836638861, "node_id": "MDU6TGFiZWw4MzY2Mzg4NjE=", "url": "https://api.github.com/repos/behave/behave/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-25T20:12:25Z", "updated_at": "2020-05-04T01:09:22Z", "closed_at": "2020-05-04T01:09:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When debugging failed tests, if the captured logging is verbose, you can easily lose sight of the error since it is printed above the captured logs. I would like it if the error were reprinted at the bottom of the captured logs. I would implement this as a formatter, but as far as I'm aware this can only be done as part of the model code. I have implemented the change that would store the two error types separately so a formatter would be able to use them as it saw fit.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/745", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/745/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/745/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/745/events", "html_url": "https://github.com/behave/behave/issues/745", "id": 436519328, "node_id": "MDU6SXNzdWU0MzY1MTkzMjg=", "number": 745, "title": "Enhancement: make it possible to add additional import paths via configuration", "user": {"login": "nizwiz", "id": 19755352, "node_id": "MDQ6VXNlcjE5NzU1MzUy", "avatar_url": "https://avatars2.githubusercontent.com/u/19755352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nizwiz", "html_url": "https://github.com/nizwiz", "followers_url": "https://api.github.com/users/nizwiz/followers", "following_url": "https://api.github.com/users/nizwiz/following{/other_user}", "gists_url": "https://api.github.com/users/nizwiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nizwiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nizwiz/subscriptions", "organizations_url": "https://api.github.com/users/nizwiz/orgs", "repos_url": "https://api.github.com/users/nizwiz/repos", "events_url": "https://api.github.com/users/nizwiz/events{/privacy}", "received_events_url": "https://api.github.com/users/nizwiz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31826678, "node_id": "MDU6TGFiZWwzMTgyNjY3OA==", "url": "https://api.github.com/repos/behave/behave/labels/enhancement", "name": "enhancement", "color": "02d7e1", "default": true, "description": null}, {"id": 836638861, "node_id": "MDU6TGFiZWw4MzY2Mzg4NjE=", "url": "https://api.github.com/repos/behave/behave/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-24T06:32:24Z", "updated_at": "2020-06-13T07:53:43Z", "closed_at": "2020-06-13T07:53:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice to be able to configure additional import paths that are effective when executing environment.py / step definition files, via behave command line argument and / or config file or similar.\r\n\r\nLet me elaborate why. Our test setup is somewhat like this:\r\n\r\n\r\n```\r\ntest_root\r\n    - bdd_lib\r\n    |    - environments\r\n    |    |    - common_env.py\r\n    |    |    - special_env_1.py [from bdd_lib.environments.common_env import *; ...]\r\n    |    |    - ...\r\n    |    - steps\r\n    |    |    - ...\r\n    |    - helper_modules\r\n    |    |    - ...\r\n    - features\r\n    |    - feature_area_1\r\n    |    |    - environment.py [from bdd_lib.environments.common_env import *]\r\n    |    |    - steps\r\n    |    |    |    - use_step_library.py  [from bdd_lib.steps import foo_steps]\r\n    |    |    |    - area_1_steps.py [from bdd_lib.helper_modules import foo_helpers]\r\n    |    |    - test_data\r\n    |    |    |    - ...  \r\n    |    |    - some.feature\r\n    |    |    - ...\r\n    |    - feature_area_2\r\n    |    |    - environment.py [from bdd_lib.environments.special_env_1 import *]\r\n    |    |    - steps\r\n    |    |    |    - use_step_library.py  [from bdd_lib.steps import foo_steps, bar_steps]\r\n    |    |    |    - ...\r\n    |    |    - some_other.feature\r\n    |    - ...\r\n```\r\nSo we need bdd_lib to be on the import path. However, we cannot use PYTHONPATH because we would like to use command line argument -E when invoking python to execute behave tests.\r\nWe have quite a lot of feature areas, consequently quite a lot of environment.py files that basically contain only an import statement. But since it is not possible to configure the import path, we have to add this to each one of those environment.py files:\r\n```\r\n  import sys\r\n  import os\r\n  sys.path.append(os.path.join(os.getcwd(), '../..'))\r\n```\r\n\r\n(The features are executed with their respective parent folder as cwd to be able to easily access local test data).\r\n\r\nIt is also conceivable that further step / environment libraries are installed completely elsewhere, which would make it even harder to use them.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/744", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/744/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/744/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/744/events", "html_url": "https://github.com/behave/behave/issues/744", "id": 434626135, "node_id": "MDU6SXNzdWU0MzQ2MjYxMzU=", "number": 744, "title": "Separated only environment with parameter --stage=ci ", "user": {"login": "adaskow", "id": 20993889, "node_id": "MDQ6VXNlcjIwOTkzODg5", "avatar_url": "https://avatars2.githubusercontent.com/u/20993889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adaskow", "html_url": "https://github.com/adaskow", "followers_url": "https://api.github.com/users/adaskow/followers", "following_url": "https://api.github.com/users/adaskow/following{/other_user}", "gists_url": "https://api.github.com/users/adaskow/gists{/gist_id}", "starred_url": "https://api.github.com/users/adaskow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adaskow/subscriptions", "organizations_url": "https://api.github.com/users/adaskow/orgs", "repos_url": "https://api.github.com/users/adaskow/repos", "events_url": "https://api.github.com/users/adaskow/events{/privacy}", "received_events_url": "https://api.github.com/users/adaskow/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-18T07:22:11Z", "updated_at": "2019-06-09T13:28:55Z", "closed_at": "2019-06-09T13:28:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI have a question about this option `--stage=<something>`.\r\nI need a different `environment` file for CI - but with the same steps for now. I want to not duplicate `steps` directory to have also `ci_steps`. \r\n\r\nI sow that when I create `ci_environment.py` it is used when I run `behave --stage=ci` but there is a requirement to have different steps directory also.\r\n\r\nOr maybe there is some different option to run tests without something in `before_all`/`after_all`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/743", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/743/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/743/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/743/events", "html_url": "https://github.com/behave/behave/issues/743", "id": 434137668, "node_id": "MDU6SXNzdWU0MzQxMzc2Njg=", "number": 743, "title": "Stack trace for failing hooks", "user": {"login": "retorquere", "id": 132108, "node_id": "MDQ6VXNlcjEzMjEwOA==", "avatar_url": "https://avatars0.githubusercontent.com/u/132108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retorquere", "html_url": "https://github.com/retorquere", "followers_url": "https://api.github.com/users/retorquere/followers", "following_url": "https://api.github.com/users/retorquere/following{/other_user}", "gists_url": "https://api.github.com/users/retorquere/gists{/gist_id}", "starred_url": "https://api.github.com/users/retorquere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retorquere/subscriptions", "organizations_url": "https://api.github.com/users/retorquere/orgs", "repos_url": "https://api.github.com/users/retorquere/repos", "events_url": "https://api.github.com/users/retorquere/events{/privacy}", "received_events_url": "https://api.github.com/users/retorquere/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-17T07:42:05Z", "updated_at": "2020-01-15T22:06:03Z", "closed_at": "2019-07-01T05:39:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have an error somewhere in my before_all, but behave doesn't give me the stack trace, I just get \r\n\r\n```\r\nHOOK-ERROR in before_all: FileNotFoundError: [Errno 2] No such file or directory: '/Users/emile/.BBTZ5TEST.log'\r\n```\r\n\r\nIs there a way to get behave to give me the stack trace? Without it it's very hard to debug the steps.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/742", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/742/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/742/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/742/events", "html_url": "https://github.com/behave/behave/issues/742", "id": 433955166, "node_id": "MDU6SXNzdWU0MzM5NTUxNjY=", "number": 742, "title": "Importing local modules", "user": {"login": "retorquere", "id": 132108, "node_id": "MDQ6VXNlcjEzMjEwOA==", "avatar_url": "https://avatars0.githubusercontent.com/u/132108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retorquere", "html_url": "https://github.com/retorquere", "followers_url": "https://api.github.com/users/retorquere/followers", "following_url": "https://api.github.com/users/retorquere/following{/other_user}", "gists_url": "https://api.github.com/users/retorquere/gists{/gist_id}", "starred_url": "https://api.github.com/users/retorquere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retorquere/subscriptions", "organizations_url": "https://api.github.com/users/retorquere/orgs", "repos_url": "https://api.github.com/users/retorquere/repos", "events_url": "https://api.github.com/users/retorquere/events{/privacy}", "received_events_url": "https://api.github.com/users/retorquere/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-16T19:48:19Z", "updated_at": "2019-04-18T16:42:53Z", "closed_at": "2019-04-18T16:42:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have some code that I'd like to split off from `steps.py` for readability into a file called `zotero.py`. How should I import this? If I do `import zotero` I get `No module named 'zotero'`, but if I do `from . import zotero` (I'm using python 3.7) I get \r\n\r\n```\r\n  from . import zotero\r\nKeyError: \"'__name__' not in globals\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/741", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/741/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/741/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/741/events", "html_url": "https://github.com/behave/behave/issues/741", "id": 432451696, "node_id": "MDU6SXNzdWU0MzI0NTE2OTY=", "number": 741, "title": "steps.usage formatter reports step as unused if used only in execute_steps()", "user": {"login": "snke", "id": 8265234, "node_id": "MDQ6VXNlcjgyNjUyMzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/8265234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/snke", "html_url": "https://github.com/snke", "followers_url": "https://api.github.com/users/snke/followers", "following_url": "https://api.github.com/users/snke/following{/other_user}", "gists_url": "https://api.github.com/users/snke/gists{/gist_id}", "starred_url": "https://api.github.com/users/snke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/snke/subscriptions", "organizations_url": "https://api.github.com/users/snke/orgs", "repos_url": "https://api.github.com/users/snke/repos", "events_url": "https://api.github.com/users/snke/events{/privacy}", "received_events_url": "https://api.github.com/users/snke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-12T08:38:29Z", "updated_at": "2019-05-10T09:33:17Z", "closed_at": "2019-05-10T09:33:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was using the _steps.usage_ formatter with\r\n\r\n `behave --dry-run --no-summary -q --format steps.usage features/foo.feature`\r\n\r\nand one step was reported in the _UNUSED STEP DEFINITIONS_ section of the formatter output.\r\n\r\nThat step is actually not unused, but is only used within a call of context.execute_steps().\r\n\r\nIs this expected behavior?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/740", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/740/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/740/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/740/events", "html_url": "https://github.com/behave/behave/issues/740", "id": 432399043, "node_id": "MDU6SXNzdWU0MzIzOTkwNDM=", "number": 740, "title": "Enhancement: possibility to add cleanup to be called upon leaving outer context stack frames", "user": {"login": "nizwiz", "id": 19755352, "node_id": "MDQ6VXNlcjE5NzU1MzUy", "avatar_url": "https://avatars2.githubusercontent.com/u/19755352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nizwiz", "html_url": "https://github.com/nizwiz", "followers_url": "https://api.github.com/users/nizwiz/followers", "following_url": "https://api.github.com/users/nizwiz/following{/other_user}", "gists_url": "https://api.github.com/users/nizwiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nizwiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nizwiz/subscriptions", "organizations_url": "https://api.github.com/users/nizwiz/orgs", "repos_url": "https://api.github.com/users/nizwiz/repos", "events_url": "https://api.github.com/users/nizwiz/events{/privacy}", "received_events_url": "https://api.github.com/users/nizwiz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31826678, "node_id": "MDU6TGFiZWwzMTgyNjY3OA==", "url": "https://api.github.com/repos/behave/behave/labels/enhancement", "name": "enhancement", "color": "02d7e1", "default": true, "description": null}, {"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}, {"id": 836638861, "node_id": "MDU6TGFiZWw4MzY2Mzg4NjE=", "url": "https://api.github.com/repos/behave/behave/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-12T05:55:50Z", "updated_at": "2020-06-05T21:51:00Z", "closed_at": "2020-06-05T21:51:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice to be able to have a variant of add_cleanup with which you could specify upon which context stack frame exit to call the cleanup function, so that it is possible during execution of a scenario to add a cleanup which is to be called after the whole feature is done.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/739", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/739/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/739/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/739/events", "html_url": "https://github.com/behave/behave/issues/739", "id": 429877664, "node_id": "MDU6SXNzdWU0Mjk4Nzc2NjQ=", "number": 739, "title": "JSON Formatter: \u2014no-timings/-T option is not working", "user": {"login": "CollinRea", "id": 18663849, "node_id": "MDQ6VXNlcjE4NjYzODQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/18663849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CollinRea", "html_url": "https://github.com/CollinRea", "followers_url": "https://api.github.com/users/CollinRea/followers", "following_url": "https://api.github.com/users/CollinRea/following{/other_user}", "gists_url": "https://api.github.com/users/CollinRea/gists{/gist_id}", "starred_url": "https://api.github.com/users/CollinRea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CollinRea/subscriptions", "organizations_url": "https://api.github.com/users/CollinRea/orgs", "repos_url": "https://api.github.com/users/CollinRea/repos", "events_url": "https://api.github.com/users/CollinRea/events{/privacy}", "received_events_url": "https://api.github.com/users/CollinRea/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 836638861, "node_id": "MDU6TGFiZWw4MzY2Mzg4NjE=", "url": "https://api.github.com/repos/behave/behave/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-04-05T18:15:32Z", "updated_at": "2020-08-04T01:29:19Z", "closed_at": "2020-03-08T15:44:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey Team,\r\n\r\nOur command:\r\n\r\nbehave -T -f json.pretty -o output.json \r\n\r\nIs still showing durations in the output, which is causing issues on our side with some Json Validations, since we covert our behave reports into cucumber reports and cucumber does expects duration in nanoseconds.\r\n\r\nAny reasons this would not be working?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/738", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/738/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/738/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/738/events", "html_url": "https://github.com/behave/behave/issues/738", "id": 426190553, "node_id": "MDU6SXNzdWU0MjYxOTA1NTM=", "number": 738, "title": "Scenarios are skipped in report if letters NA are in the name", "user": {"login": "peter-kinzelman", "id": 45794455, "node_id": "MDQ6VXNlcjQ1Nzk0NDU1", "avatar_url": "https://avatars1.githubusercontent.com/u/45794455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-kinzelman", "html_url": "https://github.com/peter-kinzelman", "followers_url": "https://api.github.com/users/peter-kinzelman/followers", "following_url": "https://api.github.com/users/peter-kinzelman/following{/other_user}", "gists_url": "https://api.github.com/users/peter-kinzelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-kinzelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-kinzelman/subscriptions", "organizations_url": "https://api.github.com/users/peter-kinzelman/orgs", "repos_url": "https://api.github.com/users/peter-kinzelman/repos", "events_url": "https://api.github.com/users/peter-kinzelman/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-kinzelman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-27T21:24:53Z", "updated_at": "2019-07-01T20:58:21Z", "closed_at": "2019-07-01T20:57:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a parallel test runner that runs a handful of Scenarios in parallel. It reads through a Feature file and runs each Scenario independently. Noticed something very strange going on. At first i thought it was the ( ) parens i had in the name. \r\nPrereqs: \r\n\r\n- Capability for parallelized tests\r\n- Run tests with flag: **-f allure_behave.formatter:AllureFormatter**\r\n- Run tests with flag: **-o some/output/dir**\r\n- Allure installed locally\r\n\r\nSteps: \r\n\r\nIn a Feature file:\r\n- Create a Scenario with the name \"Some New Test NA\" \r\n- Create a Scenario with the name \"Some New Test ()\" \r\n- Create a Scenario with the name \"Some other - test\" \r\n- Run tests\r\n- Copy path of output directory from abovec\r\n- cd to bin of local Allure install, **allure serve {path copied from above}**\r\n\r\nActual Behaviour: 2/3 tests are listed in test report \r\n\r\nRepeat steps above excpet remove NA from first Scenario name. \r\n\r\nActual Behaviour: 3/3 tests are listed in test report\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/737", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/737/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/737/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/737/events", "html_url": "https://github.com/behave/behave/issues/737", "id": 425154258, "node_id": "MDU6SXNzdWU0MjUxNTQyNTg=", "number": 737, "title": "No content in the results.log ", "user": {"login": "jpatel13", "id": 4787794, "node_id": "MDQ6VXNlcjQ3ODc3OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4787794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpatel13", "html_url": "https://github.com/jpatel13", "followers_url": "https://api.github.com/users/jpatel13/followers", "following_url": "https://api.github.com/users/jpatel13/following{/other_user}", "gists_url": "https://api.github.com/users/jpatel13/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpatel13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpatel13/subscriptions", "organizations_url": "https://api.github.com/users/jpatel13/orgs", "repos_url": "https://api.github.com/users/jpatel13/repos", "events_url": "https://api.github.com/users/jpatel13/events{/privacy}", "received_events_url": "https://api.github.com/users/jpatel13/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}, {"id": 31826404, "node_id": "MDU6TGFiZWwzMTgyNjQwNA==", "url": "https://api.github.com/repos/behave/behave/labels/wont-fix", "name": "wont-fix", "color": "0b02e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-25T23:06:05Z", "updated_at": "2019-04-02T17:07:34Z", "closed_at": "2019-04-02T17:07:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following in the before_all() function in my environment.py: \r\n<pre><code>\r\n  context.config.format = ['pretty'] #,'allure_behave.formatter:AllureFormatter']\r\n     context.config.summary = True\r\n     context.config.outfiles = ['results/result.log']\r\n     context.config.outputs = [StreamOpener('results/result.log').open()] //have to .open() otherwise stream not openned and file not created \r\n     context.config.reporters.append(SummaryReporter(context.config))\r\n     set_environment(context)\r\n</code></pre>\r\nExpected: The result.log file should be populated with details of the test run \r\n\r\nActual: The result.log file is empty \r\n\r\nNote if I pass in via command line I get expected result, but I need to create timestamped folders and store the report in the corresponding folder.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/736", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/736/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/736/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/736/events", "html_url": "https://github.com/behave/behave/issues/736", "id": 425153189, "node_id": "MDU6SXNzdWU0MjUxNTMxODk=", "number": 736, "title": "Debugger (sset_trace) generate signal SIGSEGV", "user": {"login": "dunossauro", "id": 6801122, "node_id": "MDQ6VXNlcjY4MDExMjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6801122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dunossauro", "html_url": "https://github.com/dunossauro", "followers_url": "https://api.github.com/users/dunossauro/followers", "following_url": "https://api.github.com/users/dunossauro/following{/other_user}", "gists_url": "https://api.github.com/users/dunossauro/gists{/gist_id}", "starred_url": "https://api.github.com/users/dunossauro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dunossauro/subscriptions", "organizations_url": "https://api.github.com/users/dunossauro/orgs", "repos_url": "https://api.github.com/users/dunossauro/repos", "events_url": "https://api.github.com/users/dunossauro/events{/privacy}", "received_events_url": "https://api.github.com/users/dunossauro/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 836638861, "node_id": "MDU6TGFiZWw4MzY2Mzg4NjE=", "url": "https://api.github.com/repos/behave/behave/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-25T23:02:06Z", "updated_at": "2019-12-20T14:55:25Z", "closed_at": "2019-12-20T14:55:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I upgraded to 1.2.6\r\n\r\nUsing breakpoint sset_trace or spost_mortem, when debugger call stdout to write anything in shell, behave fails\r\n\r\nExample:\r\n```\r\n     \"\"\"\r\n      user = {\r\n          'username': 'test',\r\n          'password': '1234'\r\n      }\r\n      \"\"\"\r\n\r\n> ....py(6)check_user_in_data_base()\r\n      4 @given('...')\r\n      5 def check_user_in_data_base(context):\r\n----> 6     assert False\r\n\r\nipdb> context\r\n\r\nfish: 'behave tests/behavior_tests/fea\u2026' terminated by signal SIGSEGV \r\n```\r\n\r\nI'm using python 3.7.2, behave 1.2.6, ipdb 0.12, ipython 7.4.0\r\n\r\nIf needs more data i can send to you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/733", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/733/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/733/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/733/events", "html_url": "https://github.com/behave/behave/issues/733", "id": 422828722, "node_id": "MDU6SXNzdWU0MjI4Mjg3MjI=", "number": 733, "title": "execute_steps control", "user": {"login": "peter-kinzelman", "id": 45794455, "node_id": "MDQ6VXNlcjQ1Nzk0NDU1", "avatar_url": "https://avatars1.githubusercontent.com/u/45794455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-kinzelman", "html_url": "https://github.com/peter-kinzelman", "followers_url": "https://api.github.com/users/peter-kinzelman/followers", "following_url": "https://api.github.com/users/peter-kinzelman/following{/other_user}", "gists_url": "https://api.github.com/users/peter-kinzelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-kinzelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-kinzelman/subscriptions", "organizations_url": "https://api.github.com/users/peter-kinzelman/orgs", "repos_url": "https://api.github.com/users/peter-kinzelman/repos", "events_url": "https://api.github.com/users/peter-kinzelman/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-kinzelman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-19T16:23:27Z", "updated_at": "2019-07-01T20:59:03Z", "closed_at": "2019-07-01T20:59:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "As a best practice of BDD we want to have the top level business language describing blocks of code. Sometimes this requires using **execute_steps** for longer flows. Being able to interject login between each one of those steps would be great. \r\n\r\nExample:\r\n@step(\"some step with a lot of steps\")\r\ndef this_function(context): \r\n  context.executue_steps(\"\"\"\r\n       1 step \r\n       2 step \r\n       ....\r\n       5 steps \r\n   \"\"\") \r\n\r\nbeing able to control what happens between 1 step, 2, 3, 4,5 step would be nice. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/732", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/732/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/732/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/732/events", "html_url": "https://github.com/behave/behave/issues/732", "id": 421568854, "node_id": "MDU6SXNzdWU0MjE1Njg4NTQ=", "number": 732, "title": "Logging level being ignored", "user": {"login": "ethagnawl", "id": 289949, "node_id": "MDQ6VXNlcjI4OTk0OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/289949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ethagnawl", "html_url": "https://github.com/ethagnawl", "followers_url": "https://api.github.com/users/ethagnawl/followers", "following_url": "https://api.github.com/users/ethagnawl/following{/other_user}", "gists_url": "https://api.github.com/users/ethagnawl/gists{/gist_id}", "starred_url": "https://api.github.com/users/ethagnawl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ethagnawl/subscriptions", "organizations_url": "https://api.github.com/users/ethagnawl/orgs", "repos_url": "https://api.github.com/users/ethagnawl/repos", "events_url": "https://api.github.com/users/ethagnawl/events{/privacy}", "received_events_url": "https://api.github.com/users/ethagnawl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-15T15:15:06Z", "updated_at": "2019-06-23T16:32:12Z", "closed_at": "2019-06-23T16:32:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm unexpectedly seeing the following log entries (INFO, WARNING) while running my behave suite inside a [Djangae](https://github.com/potatolondon/djangae) project with logging_level set to FATAL.\r\n\r\n```\r\ncat behave.ini\r\n[behave]\r\nlogging_level=FATAL\r\n\r\nsource ~/environments/foo-2.7/bin/activate && django_env=test python manage.py behave --verbose\r\nINFO     2019-03-15 11:07:40,848 blobstore_service.py:74] Starting blobstore service on localhost:8080\r\nCreating test database for alias 'default'...\r\nLoading config defaults from \"./behave.ini\"\r\nUsing defaults:\r\n logging_format %(levelname)s:%(name)s:%(message)s\r\n          color True\r\n   default_tags\r\n   show_timings True\r\n stderr_capture True\r\n          stage None\r\n       userdata {}\r\n  steps_catalog False\r\n        dry_run False\r\n stdout_capture True\r\n          junit False\r\n    log_capture True\r\n        summary True\r\nmore_formatters {}\r\n   show_skipped True\r\n  show_snippets True\r\n default_format pretty\r\n  logging_level FATAL\r\nscenario_outline_annotation_schema {name} -- @{row.id} {examples.name}\r\n    show_source True\r\nUsing default path \"./features\"\r\nTrying base directory: /home/me/projects/foo/features\r\n\r\nFeature: Foos # features/foos.feature:1\r\nWARNING  2019-03-15 15:07:43,210 middleware.py:131] settings.CSRF_COOKIE_SECURE is not set to True, this is insecure\r\nWARNING  2019-03-15 15:07:43,211 middleware.py:131] settings.SESSION_COOKIE_SECURE is not set to True, this is insecure\r\n\r\n  Scenario: View foos       # features/foo.feature:3\r\n  ...\r\nWARNING  2019-03-15 15:10:50,089 middleware.py:91] SECURITY : fetching non-HTTPS url 'http://localhost:8080/_ah/gcs/foos/49/foos/None/example.jpg'\r\n  ...\r\n```\r\n\r\nIt's probably worth noting that I see the same behavior as the above when using command line flags. (It's also very possible this issue is the result of end user error or an unexpected interaction with Behave Django.)\r\n\r\nRelevant Environment:\r\nPython 2.7.13\r\nBehave 1.2.6\r\nBehave Django 1.1.0\r\nDjango 1.11.20\r\nDjangae 0.9.11", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/730", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/730/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/730/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/730/events", "html_url": "https://github.com/behave/behave/issues/730", "id": 412291239, "node_id": "MDU6SXNzdWU0MTIyOTEyMzk=", "number": 730, "title": "Get feature file name from step function", "user": {"login": "redsox10", "id": 13643095, "node_id": "MDQ6VXNlcjEzNjQzMDk1", "avatar_url": "https://avatars2.githubusercontent.com/u/13643095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/redsox10", "html_url": "https://github.com/redsox10", "followers_url": "https://api.github.com/users/redsox10/followers", "following_url": "https://api.github.com/users/redsox10/following{/other_user}", "gists_url": "https://api.github.com/users/redsox10/gists{/gist_id}", "starred_url": "https://api.github.com/users/redsox10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/redsox10/subscriptions", "organizations_url": "https://api.github.com/users/redsox10/orgs", "repos_url": "https://api.github.com/users/redsox10/repos", "events_url": "https://api.github.com/users/redsox10/events{/privacy}", "received_events_url": "https://api.github.com/users/redsox10/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-20T07:55:59Z", "updated_at": "2019-03-11T21:25:10Z", "closed_at": "2019-03-11T21:25:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nIs there a way to get the name of the feature file (gherkin) from inside a step function that is being invoked?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/729", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/729/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/729/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/729/events", "html_url": "https://github.com/behave/behave/issues/729", "id": 408878869, "node_id": "MDU6SXNzdWU0MDg4Nzg4Njk=", "number": 729, "title": "Cannot process both --format and --output in one command", "user": {"login": "brianbartilet", "id": 11679156, "node_id": "MDQ6VXNlcjExNjc5MTU2", "avatar_url": "https://avatars1.githubusercontent.com/u/11679156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianbartilet", "html_url": "https://github.com/brianbartilet", "followers_url": "https://api.github.com/users/brianbartilet/followers", "following_url": "https://api.github.com/users/brianbartilet/following{/other_user}", "gists_url": "https://api.github.com/users/brianbartilet/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianbartilet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianbartilet/subscriptions", "organizations_url": "https://api.github.com/users/brianbartilet/orgs", "repos_url": "https://api.github.com/users/brianbartilet/repos", "events_url": "https://api.github.com/users/brianbartilet/events{/privacy}", "received_events_url": "https://api.github.com/users/brianbartilet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-11T16:56:29Z", "updated_at": "2019-02-12T06:30:49Z", "closed_at": "2019-02-12T06:30:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "--format takes precedence in execution and there is no way to have both.\r\n\r\nusing this formatter:\r\nhttps://pypi.org/project/behave-teamcity/", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/728", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/728/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/728/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/728/events", "html_url": "https://github.com/behave/behave/issues/728", "id": 405637217, "node_id": "MDU6SXNzdWU0MDU2MzcyMTc=", "number": 728, "title": "How to rerun the failures in the python behave ", "user": {"login": "writetomaha14", "id": 39156123, "node_id": "MDQ6VXNlcjM5MTU2MTIz", "avatar_url": "https://avatars0.githubusercontent.com/u/39156123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/writetomaha14", "html_url": "https://github.com/writetomaha14", "followers_url": "https://api.github.com/users/writetomaha14/followers", "following_url": "https://api.github.com/users/writetomaha14/following{/other_user}", "gists_url": "https://api.github.com/users/writetomaha14/gists{/gist_id}", "starred_url": "https://api.github.com/users/writetomaha14/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/writetomaha14/subscriptions", "organizations_url": "https://api.github.com/users/writetomaha14/orgs", "repos_url": "https://api.github.com/users/writetomaha14/repos", "events_url": "https://api.github.com/users/writetomaha14/events{/privacy}", "received_events_url": "https://api.github.com/users/writetomaha14/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-01T10:18:51Z", "updated_at": "2019-02-12T06:44:34Z", "closed_at": "2019-02-07T05:34:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello All,\r\n\r\nCan anyone tell me how to re-run the failures in Python behave. \r\n\r\nI want to re-run the failed test cases automatically.\r\n\r\nbehave.ini file contains:\r\n\r\n```ini\r\n# -- file:behave.ini\r\n[behave]\r\nformat   = rerun\r\noutfiles = rerun_failing.txt\r\n```\r\n\r\npost execution i did try to execute using the command `behave @rerun.txt`\r\n\r\nI am getting the error message as:\r\n\r\n```\r\nFileNotFoundError:rerun.txt\r\n```\r\n\r\nAny help would be appreciated. \r\n\r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/725", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/725/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/725/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/725/events", "html_url": "https://github.com/behave/behave/issues/725", "id": 402635560, "node_id": "MDU6SXNzdWU0MDI2MzU1NjA=", "number": 725, "title": "Scenario Outline description lines seem to be ignored", "user": {"login": "nizwiz", "id": 19755352, "node_id": "MDQ6VXNlcjE5NzU1MzUy", "avatar_url": "https://avatars2.githubusercontent.com/u/19755352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nizwiz", "html_url": "https://github.com/nizwiz", "followers_url": "https://api.github.com/users/nizwiz/followers", "following_url": "https://api.github.com/users/nizwiz/following{/other_user}", "gists_url": "https://api.github.com/users/nizwiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nizwiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nizwiz/subscriptions", "organizations_url": "https://api.github.com/users/nizwiz/orgs", "repos_url": "https://api.github.com/users/nizwiz/repos", "events_url": "https://api.github.com/users/nizwiz/events{/privacy}", "received_events_url": "https://api.github.com/users/nizwiz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 350389669, "node_id": "MDU6TGFiZWwzNTAzODk2Njk=", "url": "https://api.github.com/repos/behave/behave/labels/bug", "name": "bug", "color": "d93f0b", "default": true, "description": null}, {"id": 31826355, "node_id": "MDU6TGFiZWwzMTgyNjM1NQ==", "url": "https://api.github.com/repos/behave/behave/labels/minor", "name": "minor", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-24T10:18:56Z", "updated_at": "2019-03-11T22:14:20Z", "closed_at": "2019-03-11T21:40:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "If a feature file contains description lines for a scenario outline (i.e. free-form text lines following the \"Scenario Outline:\" header), they do not seem to be taken over into the description attribute of the created Scenario model objects (in contrast to ordinary scenarios). Consequently, the description lines also do not appear in the files created by formatters (though I can only speak for the json formatter, as that is the only one I tried).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/724", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/724/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/724/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/724/events", "html_url": "https://github.com/behave/behave/issues/724", "id": 401658449, "node_id": "MDU6SXNzdWU0MDE2NTg0NDk=", "number": 724, "title": "Include console logs in json report?", "user": {"login": "Rangiferus", "id": 32128079, "node_id": "MDQ6VXNlcjMyMTI4MDc5", "avatar_url": "https://avatars1.githubusercontent.com/u/32128079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rangiferus", "html_url": "https://github.com/Rangiferus", "followers_url": "https://api.github.com/users/Rangiferus/followers", "following_url": "https://api.github.com/users/Rangiferus/following{/other_user}", "gists_url": "https://api.github.com/users/Rangiferus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rangiferus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rangiferus/subscriptions", "organizations_url": "https://api.github.com/users/Rangiferus/orgs", "repos_url": "https://api.github.com/users/Rangiferus/repos", "events_url": "https://api.github.com/users/Rangiferus/events{/privacy}", "received_events_url": "https://api.github.com/users/Rangiferus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}, {"id": 836638861, "node_id": "MDU6TGFiZWw4MzY2Mzg4NjE=", "url": "https://api.github.com/repos/behave/behave/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-01-22T08:54:56Z", "updated_at": "2020-08-08T07:16:12Z", "closed_at": "2020-08-08T07:16:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "As far as I understand there's no possibility to include console logs in the output json report.\r\nI think it would be a great value to be able to track the test execution details by looking at logs written for each step as in Cucumber tests.\r\nAnyone found a working solution for it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/723", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/723/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/723/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/723/events", "html_url": "https://github.com/behave/behave/issues/723", "id": 400175513, "node_id": "MDU6SXNzdWU0MDAxNzU1MTM=", "number": 723, "title": "Docs support Chinese?", "user": {"login": "9468305", "id": 4039620, "node_id": "MDQ6VXNlcjQwMzk2MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/4039620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/9468305", "html_url": "https://github.com/9468305", "followers_url": "https://api.github.com/users/9468305/followers", "following_url": "https://api.github.com/users/9468305/following{/other_user}", "gists_url": "https://api.github.com/users/9468305/gists{/gist_id}", "starred_url": "https://api.github.com/users/9468305/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/9468305/subscriptions", "organizations_url": "https://api.github.com/users/9468305/orgs", "repos_url": "https://api.github.com/users/9468305/repos", "events_url": "https://api.github.com/users/9468305/events{/privacy}", "received_events_url": "https://api.github.com/users/9468305/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}, {"id": 836638861, "node_id": "MDU6TGFiZWw4MzY2Mzg4NjE=", "url": "https://api.github.com/repos/behave/behave/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-01-17T09:09:38Z", "updated_at": "2019-12-06T15:00:29Z", "closed_at": "2019-12-06T15:00:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys,\r\nDo you have plan to support Chinese docs on https://behave.readthedocs.io ?\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/721", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/721/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/721/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/721/events", "html_url": "https://github.com/behave/behave/issues/721", "id": 396612371, "node_id": "MDU6SXNzdWUzOTY2MTIzNzE=", "number": 721, "title": "Call step by method signature, it is ok?", "user": {"login": "Free1man", "id": 3762102, "node_id": "MDQ6VXNlcjM3NjIxMDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/3762102?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Free1man", "html_url": "https://github.com/Free1man", "followers_url": "https://api.github.com/users/Free1man/followers", "following_url": "https://api.github.com/users/Free1man/following{/other_user}", "gists_url": "https://api.github.com/users/Free1man/gists{/gist_id}", "starred_url": "https://api.github.com/users/Free1man/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Free1man/subscriptions", "organizations_url": "https://api.github.com/users/Free1man/orgs", "repos_url": "https://api.github.com/users/Free1man/repos", "events_url": "https://api.github.com/users/Free1man/events{/privacy}", "received_events_url": "https://api.github.com/users/Free1man/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-07T19:11:26Z", "updated_at": "2019-01-22T20:18:00Z", "closed_at": "2019-01-10T22:50:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "HI Behave Team,\r\nAs I know I can call step as part of another step like that:\r\n\r\n```\r\n@step(\"I can confirm that details are saved in my profile\")\r\ndef step_impl(context):\r\n    context.execute_steps(u\"\"\"\r\n            given I can confirm that I can login\r\n        \"\"\")\r\n```\r\n\r\nbut from a maintenance perspective, it is not very fun for me (this Christmas I refactored all our tests and I found it painful navigate steps)\r\n\r\nso I found that I can do that: \r\n```\r\n@step(\"I can confirm that details are saved in my profile\")\r\ndef step_impl(context):\r\n     step_impl_with_some_name(context)\r\n```\r\nSo I prefer last option because of it easier to refactor and navigate code.  \r\nAny problem with that approach, it is fully supported? I was unable to find the answer in the documentation.  \r\n\r\nThanks,\r\nIlia.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/719", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/719/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/719/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/719/events", "html_url": "https://github.com/behave/behave/issues/719", "id": 395577943, "node_id": "MDU6SXNzdWUzOTU1Nzc5NDM=", "number": 719, "title": "Broken links under behave/doc", "user": {"login": "ki4070ma", "id": 1549855, "node_id": "MDQ6VXNlcjE1NDk4NTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1549855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ki4070ma", "html_url": "https://github.com/ki4070ma", "followers_url": "https://api.github.com/users/ki4070ma/followers", "following_url": "https://api.github.com/users/ki4070ma/following{/other_user}", "gists_url": "https://api.github.com/users/ki4070ma/gists{/gist_id}", "starred_url": "https://api.github.com/users/ki4070ma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ki4070ma/subscriptions", "organizations_url": "https://api.github.com/users/ki4070ma/orgs", "repos_url": "https://api.github.com/users/ki4070ma/repos", "events_url": "https://api.github.com/users/ki4070ma/events{/privacy}", "received_events_url": "https://api.github.com/users/ki4070ma/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 82234025, "node_id": "MDU6TGFiZWw4MjIzNDAyNQ==", "url": "https://api.github.com/repos/behave/behave/labels/mistaken", "name": "mistaken", "color": "5319e7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-03T13:45:24Z", "updated_at": "2019-01-09T20:40:46Z", "closed_at": "2019-01-09T20:40:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found some broken links in [behave/docs/gherkin.rst](https://github.com/behave/behave/blob/master/docs/gherkin.rst).\r\n\r\nE.g.\r\n* .. _`Python step implementations`: tutorial.html#python-step-implementations\r\n* .. _`environmental controls`: tutorial.html#environmental-controls\r\n* .. _`configuration file`: behave.html#configuration-files\r\n\r\nThese should be rst, not html.\r\nI didn't check other rst files.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/717", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/717/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/717/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/717/events", "html_url": "https://github.com/behave/behave/issues/717", "id": 394095281, "node_id": "MDU6SXNzdWUzOTQwOTUyODE=", "number": 717, "title": "Auto Complete within context", "user": {"login": "Duroxxigar", "id": 16636969, "node_id": "MDQ6VXNlcjE2NjM2OTY5", "avatar_url": "https://avatars2.githubusercontent.com/u/16636969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Duroxxigar", "html_url": "https://github.com/Duroxxigar", "followers_url": "https://api.github.com/users/Duroxxigar/followers", "following_url": "https://api.github.com/users/Duroxxigar/following{/other_user}", "gists_url": "https://api.github.com/users/Duroxxigar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Duroxxigar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Duroxxigar/subscriptions", "organizations_url": "https://api.github.com/users/Duroxxigar/orgs", "repos_url": "https://api.github.com/users/Duroxxigar/repos", "events_url": "https://api.github.com/users/Duroxxigar/events{/privacy}", "received_events_url": "https://api.github.com/users/Duroxxigar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-26T06:41:19Z", "updated_at": "2019-01-10T22:51:17Z", "closed_at": "2019-01-10T22:51:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thought I could ask here and see if anyone else is experiencing this. I currently have some objects created and stored in my context variable in the before_all hook. When I go to write the steps, and try to use those objects, I do not have intellisense. Not sure if this is how it is supposed to be or not though. Only one of my stored objects have intellisense, so that is weird.\r\n\r\nI have tried googling around and haven't seen anything about it. As well as asking around in the Reddit and Discord Python communities. I have used PyCharm and VSCode. Both do not provide intellisense for my created objects inside of the context variable. Any thoughts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/716", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/716/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/716/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/716/events", "html_url": "https://github.com/behave/behave/issues/716", "id": 393302464, "node_id": "MDU6SXNzdWUzOTMzMDI0NjQ=", "number": 716, "title": "Can not use Step Parameters", "user": {"login": "Lanuet", "id": 15651702, "node_id": "MDQ6VXNlcjE1NjUxNzAy", "avatar_url": "https://avatars1.githubusercontent.com/u/15651702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lanuet", "html_url": "https://github.com/Lanuet", "followers_url": "https://api.github.com/users/Lanuet/followers", "following_url": "https://api.github.com/users/Lanuet/following{/other_user}", "gists_url": "https://api.github.com/users/Lanuet/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lanuet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lanuet/subscriptions", "organizations_url": "https://api.github.com/users/Lanuet/orgs", "repos_url": "https://api.github.com/users/Lanuet/repos", "events_url": "https://api.github.com/users/Lanuet/events{/privacy}", "received_events_url": "https://api.github.com/users/Lanuet/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 82234025, "node_id": "MDU6TGFiZWw4MjIzNDAyNQ==", "url": "https://api.github.com/repos/behave/behave/labels/mistaken", "name": "mistaken", "color": "5319e7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-12-21T03:48:40Z", "updated_at": "2019-01-09T20:46:15Z", "closed_at": "2019-01-09T20:45:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I following this instrucstion [Use Step parameters](https://github.com/behave/behave/blob/master/docs/tutorial.rst#step-parameters) \r\nMy code:\r\n\r\n**Feature:**\r\n```gherkin\r\nScenario: Check Teko Accounting page\r\n  Given Login to FM system\r\n  When Click Teko Accounting\r\n  Then Validate text \"Bank statements\" appeared\r\n```\r\n**Steps:**\r\n```python\r\n@then('Validate text \"{text}\" appeared')\r\ndef step_impl(context, text):\r\n    text_is_displayed(context, text)\r\n```\r\nBut when i run feature file, I received a notification that my steps \"Then Validate text \"Bank satements\" appeared\" is undefined\r\n\r\nAnyone can help me?\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/715", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/715/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/715/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/715/events", "html_url": "https://github.com/behave/behave/issues/715", "id": 393044049, "node_id": "MDU6SXNzdWUzOTMwNDQwNDk=", "number": 715, "title": "How to explicitly fail test?", "user": {"login": "Duroxxigar", "id": 16636969, "node_id": "MDQ6VXNlcjE2NjM2OTY5", "avatar_url": "https://avatars2.githubusercontent.com/u/16636969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Duroxxigar", "html_url": "https://github.com/Duroxxigar", "followers_url": "https://api.github.com/users/Duroxxigar/followers", "following_url": "https://api.github.com/users/Duroxxigar/following{/other_user}", "gists_url": "https://api.github.com/users/Duroxxigar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Duroxxigar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Duroxxigar/subscriptions", "organizations_url": "https://api.github.com/users/Duroxxigar/orgs", "repos_url": "https://api.github.com/users/Duroxxigar/repos", "events_url": "https://api.github.com/users/Duroxxigar/events{/privacy}", "received_events_url": "https://api.github.com/users/Duroxxigar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-20T13:20:46Z", "updated_at": "2018-12-26T23:20:44Z", "closed_at": "2018-12-26T06:17:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "So I've been using behave for a bit and sometimes, I want to explicitly fail a test if a certain thing happens. The way that I have been handling it was to explicitly raise an Exception. However, I have run into an issue where that is not failing the feature file that contains a Scenario Outline. It only fails that specific run of the Outline. It then tries to continue on.\r\n\r\nIs there a way to force fail a test that I'm overlooking?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/714", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/714/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/714/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/714/events", "html_url": "https://github.com/behave/behave/issues/714", "id": 392950690, "node_id": "MDU6SXNzdWUzOTI5NTA2OTA=", "number": 714, "title": "Make a scenario outline with dynamic examples", "user": {"login": "Tiagojdferreira", "id": 1483616, "node_id": "MDQ6VXNlcjE0ODM2MTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1483616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tiagojdferreira", "html_url": "https://github.com/Tiagojdferreira", "followers_url": "https://api.github.com/users/Tiagojdferreira/followers", "following_url": "https://api.github.com/users/Tiagojdferreira/following{/other_user}", "gists_url": "https://api.github.com/users/Tiagojdferreira/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tiagojdferreira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tiagojdferreira/subscriptions", "organizations_url": "https://api.github.com/users/Tiagojdferreira/orgs", "repos_url": "https://api.github.com/users/Tiagojdferreira/repos", "events_url": "https://api.github.com/users/Tiagojdferreira/events{/privacy}", "received_events_url": "https://api.github.com/users/Tiagojdferreira/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31827222, "node_id": "MDU6TGFiZWwzMTgyNzIyMg==", "url": "https://api.github.com/repos/behave/behave/labels/duplicated", "name": "duplicated", "color": "e102d8", "default": false, "description": null}, {"id": 31826678, "node_id": "MDU6TGFiZWwzMTgyNjY3OA==", "url": "https://api.github.com/repos/behave/behave/labels/enhancement", "name": "enhancement", "color": "02d7e1", "default": true, "description": null}, {"id": 836638861, "node_id": "MDU6TGFiZWw4MzY2Mzg4NjE=", "url": "https://api.github.com/repos/behave/behave/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-12-20T09:06:52Z", "updated_at": "2020-07-25T03:52:26Z", "closed_at": "2020-07-25T03:52:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have recently written a test where I go to all the urls in my django app and test that they load without any javascript errors and without a 404. To do this I had to do a scenario with a main step:\r\n```\r\n@then('I should test pages are not 404')\r\ndef step_page_works(context):\r\n    pages_to_test = ...\r\n    for page in pages_to_test:\r\n        context.execute_steps(\r\n                \"\"\"\r\n            When I visit \"{page}\" page\r\n            Then I should see the page loaded\r\n            And the \"{page}\" has no javascript errors\r\n        \"\"\".format(page=page)\r\n        )\r\n```\r\nAnd my test looks like:\r\n```\r\nScenario: Anonymous user navigates pages with no arguments\r\n    Then I should test pages are not 404\r\n```\r\n\r\nIdeally I would use a scenario outline with a decorator to give the variables. (or something else similar, that would allow to set the examples to use in this scenario outline)\r\n```\r\n@examples_pages_to_test\r\nScenario Outline: Anonymous user navigates to pages\r\n    When I visit \"<page>\" page\r\n    Then I should see the page loaded\r\n    And the \"<page>\" has no javascript errors\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/713", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/713/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/713/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/713/events", "html_url": "https://github.com/behave/behave/issues/713", "id": 392672012, "node_id": "MDU6SXNzdWUzOTI2NzIwMTI=", "number": 713, "title": "Background section doesn't support description", "user": {"login": "dgou", "id": 240836, "node_id": "MDQ6VXNlcjI0MDgzNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/240836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgou", "html_url": "https://github.com/dgou", "followers_url": "https://api.github.com/users/dgou/followers", "following_url": "https://api.github.com/users/dgou/following{/other_user}", "gists_url": "https://api.github.com/users/dgou/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgou/subscriptions", "organizations_url": "https://api.github.com/users/dgou/orgs", "repos_url": "https://api.github.com/users/dgou/repos", "events_url": "https://api.github.com/users/dgou/events{/privacy}", "received_events_url": "https://api.github.com/users/dgou/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31826355, "node_id": "MDU6TGFiZWwzMTgyNjM1NQ==", "url": "https://api.github.com/repos/behave/behave/labels/minor", "name": "minor", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-19T16:10:19Z", "updated_at": "2018-12-23T20:33:47Z", "closed_at": "2018-12-23T20:23:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using Mac OS High Sierra 10.13.6\r\nand behave version:\r\n```\r\n$ behave --version\r\nbehave 1.2.6\r\n```\r\n\r\nWhen I try to use a descriptive paragraph with my Background:\r\n```\r\n$ cat background_bug.feature \r\nFeature: Background Section Contains Descriptive text\r\n  Per the documentation, behave supports the Gherkin standard\r\n  The gherkin standard says that the Background section can contain descriptive text.\r\n  (See: https://docs.cucumber.io/gherkin/reference/#descriptions )\r\n\r\n  Background: Short Description is Here\r\n    A longer description should be permitted here.\r\n\r\n    However, as of this writing, behave throws an error instead\r\n\r\n    Given a step in the Background as a placholder to show the bug\r\n\r\n  Scenario: Short Description Here\r\n    This scenario is here to satisfy the syntactic requirements for a feature file.\r\n```\r\n\r\nBehave will report a syntax error and abort:\r\n\r\n```\r\n$ behave background_bug.feature --dry-run\r\nParserError: Failed to parse \"<my directory>/background_bug.feature\": \r\nParser failure in state steps, at line 7: \"A longer description should be permitted here.\"\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/712", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/712/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/712/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/712/events", "html_url": "https://github.com/behave/behave/issues/712", "id": 392605852, "node_id": "MDU6SXNzdWUzOTI2MDU4NTI=", "number": 712, "title": "BAD-TITLE: Log steps inside steps", "user": {"login": "Tiagojdferreira", "id": 1483616, "node_id": "MDQ6VXNlcjE0ODM2MTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1483616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tiagojdferreira", "html_url": "https://github.com/Tiagojdferreira", "followers_url": "https://api.github.com/users/Tiagojdferreira/followers", "following_url": "https://api.github.com/users/Tiagojdferreira/following{/other_user}", "gists_url": "https://api.github.com/users/Tiagojdferreira/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tiagojdferreira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tiagojdferreira/subscriptions", "organizations_url": "https://api.github.com/users/Tiagojdferreira/orgs", "repos_url": "https://api.github.com/users/Tiagojdferreira/repos", "events_url": "https://api.github.com/users/Tiagojdferreira/events{/privacy}", "received_events_url": "https://api.github.com/users/Tiagojdferreira/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-19T13:39:04Z", "updated_at": "2018-12-20T08:56:12Z", "closed_at": "2018-12-20T08:56:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been looking at the issues regarding logging and I haven't found anything like this.\r\nI have a test that uses a big step that consistes of smaller steps. For example, imagine I have a step `Then I click the colored buttons` that has a loop for `['red', 'blue', 'green']` where it clicks the button and checks a color changed using `context.execute_steps`.\r\nCurrently, when I run the tests I get something like:\r\n```\r\nScenario: My test  # functional_tests/features/test.feature:10\r\n    Then I click the colored buttons                      # functional_tests/steps/test_steps.py:16\r\n```\r\nAnd what I would like to have is:\r\n```\r\nScenario: My test  # functional_tests/features/test.feature:10\r\n    Then I click the colored buttons                      # functional_tests/steps/test_steps.py:16\r\n      When I click the red button                      # functional_tests/steps/test_steps.py:16\r\n      Then I see the red box                      # functional_tests/steps/test_steps.py:16\r\n      When I click the blue button                      # functional_tests/steps/test_steps.py:16\r\n      Then I see the blue box                      # functional_tests/steps/test_steps.py:16\r\n      When I click the green button                      # functional_tests/steps/test_steps.py:16\r\n      Then I see the green box                      # functional_tests/steps/test_steps.py:16\r\n```\r\nAnd ideally if the test fails in one step, I would get the step where it failed", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/711", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/711/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/711/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/711/events", "html_url": "https://github.com/behave/behave/issues/711", "id": 391690840, "node_id": "MDU6SXNzdWUzOTE2OTA4NDA=", "number": 711, "title": "Is it possible to group steps into classes? ", "user": {"login": "zahessi", "id": 37830204, "node_id": "MDQ6VXNlcjM3ODMwMjA0", "avatar_url": "https://avatars3.githubusercontent.com/u/37830204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zahessi", "html_url": "https://github.com/zahessi", "followers_url": "https://api.github.com/users/zahessi/followers", "following_url": "https://api.github.com/users/zahessi/following{/other_user}", "gists_url": "https://api.github.com/users/zahessi/gists{/gist_id}", "starred_url": "https://api.github.com/users/zahessi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zahessi/subscriptions", "organizations_url": "https://api.github.com/users/zahessi/orgs", "repos_url": "https://api.github.com/users/zahessi/repos", "events_url": "https://api.github.com/users/zahessi/events{/privacy}", "received_events_url": "https://api.github.com/users/zahessi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-17T12:30:05Z", "updated_at": "2018-12-20T15:49:27Z", "closed_at": "2018-12-20T15:49:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. Is there a way to group steps definitions instead of stand-alone functions into the classes like \r\n\r\n```\r\nclass StepsHolder:\r\n    @step(\"I make a request\")\r\n    def step_impl(context):\r\n    ....\r\n\r\n    ....\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/710", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/710/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/710/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/710/events", "html_url": "https://github.com/behave/behave/issues/710", "id": 390747708, "node_id": "MDU6SXNzdWUzOTA3NDc3MDg=", "number": 710, "title": "[Question] Is it possible to run behave tests in parallel mode with python 3.7 and allure report?", "user": {"login": "testingplusme", "id": 17097924, "node_id": "MDQ6VXNlcjE3MDk3OTI0", "avatar_url": "https://avatars2.githubusercontent.com/u/17097924?v=4", "gravatar_id": "", "url": "https://api.github.com/users/testingplusme", "html_url": "https://github.com/testingplusme", "followers_url": "https://api.github.com/users/testingplusme/followers", "following_url": "https://api.github.com/users/testingplusme/following{/other_user}", "gists_url": "https://api.github.com/users/testingplusme/gists{/gist_id}", "starred_url": "https://api.github.com/users/testingplusme/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/testingplusme/subscriptions", "organizations_url": "https://api.github.com/users/testingplusme/orgs", "repos_url": "https://api.github.com/users/testingplusme/repos", "events_url": "https://api.github.com/users/testingplusme/events{/privacy}", "received_events_url": "https://api.github.com/users/testingplusme/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2018-12-13T16:06:25Z", "updated_at": "2020-05-24T10:27:57Z", "closed_at": "2019-01-09T20:46:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey Guys,\r\nIs it possible to run behave tests in parallel mode with python 3.7? \r\nDo you have any solution for this? Or only it's possible on python 2.7?\r\nAlso, I have a question about Allure with behave. Is it possible run behave in parallel mode with Allure report?\r\n\r\nCheers,\r\nMicha\u0142", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/709", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/709/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/709/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/709/events", "html_url": "https://github.com/behave/behave/issues/709", "id": 390452110, "node_id": "MDU6SXNzdWUzOTA0NTIxMTA=", "number": 709, "title": "How to Debug behave test in VSCode", "user": {"login": "jpatel13", "id": 4787794, "node_id": "MDQ6VXNlcjQ3ODc3OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4787794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpatel13", "html_url": "https://github.com/jpatel13", "followers_url": "https://api.github.com/users/jpatel13/followers", "following_url": "https://api.github.com/users/jpatel13/following{/other_user}", "gists_url": "https://api.github.com/users/jpatel13/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpatel13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpatel13/subscriptions", "organizations_url": "https://api.github.com/users/jpatel13/orgs", "repos_url": "https://api.github.com/users/jpatel13/repos", "events_url": "https://api.github.com/users/jpatel13/events{/privacy}", "received_events_url": "https://api.github.com/users/jpatel13/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-12T23:23:46Z", "updated_at": "2020-01-08T14:19:52Z", "closed_at": "2019-01-10T22:51:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "As per the title I would like to know how VSCode can be setup so that I can debug my Behave tests. \r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/708", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/708/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/708/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/708/events", "html_url": "https://github.com/behave/behave/issues/708", "id": 385478823, "node_id": "MDU6SXNzdWUzODU0Nzg4MjM=", "number": 708, "title": "--wip should imply --no-capture-stderr", "user": {"login": "andrejtokarcik", "id": 352262, "node_id": "MDQ6VXNlcjM1MjI2Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/352262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrejtokarcik", "html_url": "https://github.com/andrejtokarcik", "followers_url": "https://api.github.com/users/andrejtokarcik/followers", "following_url": "https://api.github.com/users/andrejtokarcik/following{/other_user}", "gists_url": "https://api.github.com/users/andrejtokarcik/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrejtokarcik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrejtokarcik/subscriptions", "organizations_url": "https://api.github.com/users/andrejtokarcik/orgs", "repos_url": "https://api.github.com/users/andrejtokarcik/repos", "events_url": "https://api.github.com/users/andrejtokarcik/events{/privacy}", "received_events_url": "https://api.github.com/users/andrejtokarcik/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 836638861, "node_id": "MDU6TGFiZWw4MzY2Mzg4NjE=", "url": "https://api.github.com/repos/behave/behave/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-28T22:11:40Z", "updated_at": "2019-06-10T23:07:01Z", "closed_at": "2019-06-10T23:07:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been surprised that although the `--wip` option does automatically imply `--no-capture` (disabling capture of lines sent to stdout), one has to pass `--no-capture-stderr` explicitly to achieve the same effect for stderr. Shouldn't `--wip` also imply `--no-capture-stderr`?\r\n\r\nMore specifically, shouldn't the following portion of `configuration.py` set `self.stderr_capture = False` in addition to `self.stdout_capture = False` which is already there?\r\nhttps://github.com/behave/behave/blob/a7d7e3ae66a99ec29d4d3b8822a2213e9804fab8/behave/configuration.py#L614", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/707", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/707/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/707/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/707/events", "html_url": "https://github.com/behave/behave/issues/707", "id": 382125758, "node_id": "MDU6SXNzdWUzODIxMjU3NTg=", "number": 707, "title": "Load Scenario outline examples at runtime (renew)", "user": {"login": "Renegade85", "id": 24212081, "node_id": "MDQ6VXNlcjI0MjEyMDgx", "avatar_url": "https://avatars3.githubusercontent.com/u/24212081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Renegade85", "html_url": "https://github.com/Renegade85", "followers_url": "https://api.github.com/users/Renegade85/followers", "following_url": "https://api.github.com/users/Renegade85/following{/other_user}", "gists_url": "https://api.github.com/users/Renegade85/gists{/gist_id}", "starred_url": "https://api.github.com/users/Renegade85/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Renegade85/subscriptions", "organizations_url": "https://api.github.com/users/Renegade85/orgs", "repos_url": "https://api.github.com/users/Renegade85/repos", "events_url": "https://api.github.com/users/Renegade85/events{/privacy}", "received_events_url": "https://api.github.com/users/Renegade85/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31827222, "node_id": "MDU6TGFiZWwzMTgyNzIyMg==", "url": "https://api.github.com/repos/behave/behave/labels/duplicated", "name": "duplicated", "color": "e102d8", "default": false, "description": null}, {"id": 31826678, "node_id": "MDU6TGFiZWwzMTgyNjY3OA==", "url": "https://api.github.com/repos/behave/behave/labels/enhancement", "name": "enhancement", "color": "02d7e1", "default": true, "description": null}, {"id": 836638861, "node_id": "MDU6TGFiZWw4MzY2Mzg4NjE=", "url": "https://api.github.com/repos/behave/behave/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-11-19T09:30:21Z", "updated_at": "2020-01-29T22:45:53Z", "closed_at": "2019-12-06T14:00:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI would like to re-open the [#622](https://github.com/behave/behave/issues/622) question/request. In the previous thread it was stated, that this functionality will be soon supported, however, the thread was closed and seems to be inactive with no feedback about it's support. Is this feature somehow supported? :-)\r\n\r\nRegarding the questions why it's needed:\r\n\r\n- We need to test a system at different coordinates (x, y, z) -> roughly 200 positions. These tests are quite time consuming, so we need to select different coordinates set for different situations -> the input set changes from time to time.\r\n- The behave scripts are also versioned, so from this perspective it's not possible to change the example tables in the feature files (would be convenient to have the input generic).\r\n- For final testing, these coordinates will be defined, but during development, they change (as stated in previous points) and they may be provided by a developer, system engineer etc. So it would be convenient to read the inputs externally and not to have them embedded in the feature files.\r\n\r\nThanks for feedback,\r\n\r\nRenegade", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/706", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/706/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/706/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/706/events", "html_url": "https://github.com/behave/behave/issues/706", "id": 381958769, "node_id": "MDU6SXNzdWUzODE5NTg3Njk=", "number": 706, "title": "flake8 reports F811 on property with same name as imported global function", "user": {"login": "namezys-at-getpatch", "id": 19419640, "node_id": "MDQ6VXNlcjE5NDE5NjQw", "avatar_url": "https://avatars0.githubusercontent.com/u/19419640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/namezys-at-getpatch", "html_url": "https://github.com/namezys-at-getpatch", "followers_url": "https://api.github.com/users/namezys-at-getpatch/followers", "following_url": "https://api.github.com/users/namezys-at-getpatch/following{/other_user}", "gists_url": "https://api.github.com/users/namezys-at-getpatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/namezys-at-getpatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/namezys-at-getpatch/subscriptions", "organizations_url": "https://api.github.com/users/namezys-at-getpatch/orgs", "repos_url": "https://api.github.com/users/namezys-at-getpatch/repos", "events_url": "https://api.github.com/users/namezys-at-getpatch/events{/privacy}", "received_events_url": "https://api.github.com/users/namezys-at-getpatch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 82234025, "node_id": "MDU6TGFiZWw4MjIzNDAyNQ==", "url": "https://api.github.com/repos/behave/behave/labels/mistaken", "name": "mistaken", "color": "5319e7", "default": false, "description": null}, {"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-18T13:10:57Z", "updated_at": "2018-11-19T20:24:20Z", "closed_at": "2018-11-19T20:24:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't find details but it can't be rare case\r\n\r\na.py\r\n```\r\ndef user():\r\n    pass\r\n```\r\n\r\nb.py\r\n```\r\nfrom .a import user   # noqa\r\n\r\n\r\nclass B:\r\n\r\n    @property\r\n    def user(self):\r\n        pass\r\n```\r\n\r\noutput:\r\n```\r\n$ flake8 b.py \r\nb.py:6:5: F811 redefinition of unused 'user' from line 1\r\n```\r\n\r\nIt looks strange", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/704", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/704/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/704/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/704/events", "html_url": "https://github.com/behave/behave/issues/704", "id": 381124299, "node_id": "MDU6SXNzdWUzODExMjQyOTk=", "number": 704, "title": "Formatter processing logic is different than what is in base.py", "user": {"login": "schidlo", "id": 914788, "node_id": "MDQ6VXNlcjkxNDc4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/914788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schidlo", "html_url": "https://github.com/schidlo", "followers_url": "https://api.github.com/users/schidlo/followers", "following_url": "https://api.github.com/users/schidlo/following{/other_user}", "gists_url": "https://api.github.com/users/schidlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/schidlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schidlo/subscriptions", "organizations_url": "https://api.github.com/users/schidlo/orgs", "repos_url": "https://api.github.com/users/schidlo/repos", "events_url": "https://api.github.com/users/schidlo/events{/privacy}", "received_events_url": "https://api.github.com/users/schidlo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-15T11:44:37Z", "updated_at": "2018-11-19T20:40:29Z", "closed_at": "2018-11-19T07:18:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently in behave/formatter/base.py in class Framtter is defined processing logic. But when I run formatter (for example pretty) the logic is different.\r\nThe part `for step in scenario.all_steps:...` it is run like this:\r\nFirst for all steps the step function is called. Then for every step is called match->match.run->result.\r\ne.g.: For steps first, second, third:\r\nstep(first)\r\nstep(second)\r\nstep(third)\r\nmatch(first)\r\nresult(first)\r\nmatch(second)\r\nresult(second)\r\nmatch(third)\r\nresult(third)\r\n    ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/703", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/703/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/703/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/703/events", "html_url": "https://github.com/behave/behave/issues/703", "id": 379560317, "node_id": "MDU6SXNzdWUzNzk1NjAzMTc=", "number": 703, "title": "Formatter printing colored step lines twice in CI", "user": {"login": "zhammer", "id": 6956487, "node_id": "MDQ6VXNlcjY5NTY0ODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6956487?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhammer", "html_url": "https://github.com/zhammer", "followers_url": "https://api.github.com/users/zhammer/followers", "following_url": "https://api.github.com/users/zhammer/following{/other_user}", "gists_url": "https://api.github.com/users/zhammer/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhammer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhammer/subscriptions", "organizations_url": "https://api.github.com/users/zhammer/orgs", "repos_url": "https://api.github.com/users/zhammer/repos", "events_url": "https://api.github.com/users/zhammer/events{/privacy}", "received_events_url": "https://api.github.com/users/zhammer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 82234025, "node_id": "MDU6TGFiZWw4MjIzNDAyNQ==", "url": "https://api.github.com/repos/behave/behave/labels/mistaken", "name": "mistaken", "color": "5319e7", "default": false, "description": null}, {"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-11-11T20:33:50Z", "updated_at": "2018-11-14T21:37:03Z", "closed_at": "2018-11-12T22:00:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Weirdly on my circleci builds,  when I run behave tests with color, the default output formatter prints out each step-line twice, first without color (and weirdly without timing info) and the second time with color and timing info.\r\n\r\nHas anyone run into this before? It's not a crucial bug but it would be nice to have color reports without double prints.\r\n\r\n### Standard run with color (every second step line is green)\r\n```\r\n#!/bin/bash -eo pipefail\r\npipenv run behave --junit --junit-directory=test-results/behave\r\nFeature: Submit a listen to morning_cd # tests/behavioral/submit_listen.feature:1\r\n\r\n  Scenario: I submit a valid song to morning.cd during the day                # tests/behavioral/submit_listen.feature:3\r\n    Given my name is \"Zach\"                                                   # tests/behavioral/steps/submit_listen.py:22\r\n    Given my name is \"Zach\"                                                   # tests/behavioral/steps/submit_listen.py:22 0.000s\r\n    And I live in new york                                                    # tests/behavioral/steps/submit_listen.py:27\r\n    And I live in new york                                                    # tests/behavioral/steps/submit_listen.py:27 0.000s\r\n...\r\n```\r\n\r\n### With `--no-color`\r\n```\r\n#!/bin/bash -eo pipefail\r\npipenv run behave --junit --junit-directory=test-results/behave --no-color\r\nFeature: Submit a listen to morning_cd # tests/behavioral/submit_listen.feature:1\r\n\r\n  Scenario: I submit a valid song to morning.cd during the day                # tests/behavioral/submit_listen.feature:3\r\n    Given my name is \"Zach\"                                                   # tests/behavioral/steps/submit_listen.py:22\r\n    And I live in new york                                                    # tests/behavioral/steps/submit_listen.py:27\r\n...\r\n```\r\n\r\n### With `--no-timings` (every second step-line is green)\r\n```\r\n#!/bin/bash -eo pipefail\r\npipenv run behave --junit --junit-directory=test-results/behave --no-timings\r\nFeature: Submit a listen to morning_cd # tests/behavioral/submit_listen.feature:1\r\n\r\n  Scenario: I submit a valid song to morning.cd during the day                # tests/behavioral/submit_listen.feature:3\r\n    Given my name is \"Zach\"                                                   # tests/behavioral/steps/submit_listen.py:22\r\n    Given my name is \"Zach\"                                                   # tests/behavioral/steps/submit_listen.py:22\r\n    And I live in new york                                                    # tests/behavioral/steps/submit_listen.py:27\r\n    And I live in new york                                                    # tests/behavioral/steps/submit_listen.py:27\r\n...\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/702", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/702/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/702/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/702/events", "html_url": "https://github.com/behave/behave/issues/702", "id": 379069010, "node_id": "MDU6SXNzdWUzNzkwNjkwMTA=", "number": 702, "title": "setup_logging disables all existing loggers silently", "user": {"login": "rafalslaby", "id": 26134501, "node_id": "MDQ6VXNlcjI2MTM0NTAx", "avatar_url": "https://avatars2.githubusercontent.com/u/26134501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafalslaby", "html_url": "https://github.com/rafalslaby", "followers_url": "https://api.github.com/users/rafalslaby/followers", "following_url": "https://api.github.com/users/rafalslaby/following{/other_user}", "gists_url": "https://api.github.com/users/rafalslaby/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafalslaby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafalslaby/subscriptions", "organizations_url": "https://api.github.com/users/rafalslaby/orgs", "repos_url": "https://api.github.com/users/rafalslaby/repos", "events_url": "https://api.github.com/users/rafalslaby/events{/privacy}", "received_events_url": "https://api.github.com/users/rafalslaby/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 82233946, "node_id": "MDU6TGFiZWw4MjIzMzk0Ng==", "url": "https://api.github.com/repos/behave/behave/labels/probably-mistaken", "name": "probably-mistaken", "color": "d4c5f9", "default": false, "description": null}, {"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-09T08:37:02Z", "updated_at": "2018-11-28T07:34:43Z", "closed_at": "2018-11-28T07:34:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Behave 1.2.6\r\nsetup_logging called as presented in docstring:\r\n```\r\ndef before_all(context):  \r\n    context.config.setup_logging()\r\n```\r\nwith configfile subsequently calls:\r\n`fileConfig(configfile)`\r\nwhich silently disables all existing loggers.\r\nSome seemingly random loggers will be disabled making it really hard to track the reason.\r\nLoggers that happened to be created before before_all which is quite common since:\r\n`logger = logging.getLogger(__name__)`\r\nat gobal level in module or in __init__.py is a common pratice.\r\n\r\nIt's actually not a bug, but it may discourage many programmers from using logging module with behave after hours of investigating why some loggers doesn't work.\r\nJust make it more explicit that existing loggers will be disabled by simply allowing to pass that flag as false to setup_logging.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/698", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/698/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/698/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/698/events", "html_url": "https://github.com/behave/behave/issues/698", "id": 371756892, "node_id": "MDU6SXNzdWUzNzE3NTY4OTI=", "number": 698, "title": "Is it possible to access variable's value in table?", "user": {"login": "aliabbasrizvi", "id": 1548776, "node_id": "MDQ6VXNlcjE1NDg3NzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1548776?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliabbasrizvi", "html_url": "https://github.com/aliabbasrizvi", "followers_url": "https://api.github.com/users/aliabbasrizvi/followers", "following_url": "https://api.github.com/users/aliabbasrizvi/following{/other_user}", "gists_url": "https://api.github.com/users/aliabbasrizvi/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliabbasrizvi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliabbasrizvi/subscriptions", "organizations_url": "https://api.github.com/users/aliabbasrizvi/orgs", "repos_url": "https://api.github.com/users/aliabbasrizvi/repos", "events_url": "https://api.github.com/users/aliabbasrizvi/events{/privacy}", "received_events_url": "https://api.github.com/users/aliabbasrizvi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-18T23:55:59Z", "updated_at": "2018-10-26T20:00:51Z", "closed_at": "2018-10-26T20:00:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/697", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/697/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/697/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/697/events", "html_url": "https://github.com/behave/behave/issues/697", "id": 369257944, "node_id": "MDU6SXNzdWUzNjkyNTc5NDQ=", "number": 697, "title": "Clean exit when resource errors occur during a behave test run", "user": {"login": "lhaskins", "id": 5166016, "node_id": "MDQ6VXNlcjUxNjYwMTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/5166016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lhaskins", "html_url": "https://github.com/lhaskins", "followers_url": "https://api.github.com/users/lhaskins/followers", "following_url": "https://api.github.com/users/lhaskins/following{/other_user}", "gists_url": "https://api.github.com/users/lhaskins/gists{/gist_id}", "starred_url": "https://api.github.com/users/lhaskins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lhaskins/subscriptions", "organizations_url": "https://api.github.com/users/lhaskins/orgs", "repos_url": "https://api.github.com/users/lhaskins/repos", "events_url": "https://api.github.com/users/lhaskins/events{/privacy}", "received_events_url": "https://api.github.com/users/lhaskins/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 836638861, "node_id": "MDU6TGFiZWw4MzY2Mzg4NjE=", "url": "https://api.github.com/repos/behave/behave/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-11T18:51:23Z", "updated_at": "2019-04-25T07:29:40Z", "closed_at": "2019-04-25T07:29:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "During our behave test runs in our CI environment, we have occasionally have resource errors that causes behave to crash with the following traceback:\r\n\r\n```\r\n06:12:57 Traceback (most recent call last):\r\n06:12:57   File \"/usr/local/bin/behave\", line 11, in <module>\r\n06:12:57     sys.exit(main())\r\n06:12:57   File \"/usr/local/lib/python2.7/dist-packages/behave/__main__.py\", line 183, in main\r\n06:12:57     return run_behave(config)\r\n06:12:57   File \"/usr/local/lib/python2.7/dist-packages/behave/__main__.py\", line 127, in run_behave\r\n06:12:57     failed = runner.run()\r\n06:12:57   File \"/usr/local/lib/python2.7/dist-packages/behave/runner.py\", line 804, in run\r\n06:12:57     return self.run_with_paths()\r\n06:12:57   File \"/usr/local/lib/python2.7/dist-packages/behave/runner.py\", line 824, in run_with_paths\r\n06:12:57     return self.run_model()\r\n06:12:57   File \"/usr/local/lib/python2.7/dist-packages/behave/runner.py\", line 626, in run_model\r\n06:12:57     failed = feature.run(self)\r\n06:12:57   File \"/usr/local/lib/python2.7/dist-packages/behave/model.py\", line 321, in run\r\n06:12:57     failed = scenario.run(runner)\r\n06:12:57   File \"/usr/local/lib/python2.7/dist-packages/behave/model.py\", line 1114, in run\r\n06:12:57     failed = scenario.run(runner)\r\n06:12:57   File \"/usr/local/lib/python2.7/dist-packages/behave/model.py\", line 711, in run\r\n06:12:57     if not step.run(runner):\r\n06:12:57   File \"/usr/local/lib/python2.7/dist-packages/behave/model.py\", line 1379, in run\r\n06:12:57     formatter.result(self)\r\n06:12:57   File \"/usr/local/lib/python2.7/dist-packages/behave/formatter/pretty.py\", line 151, in result\r\n06:12:57     self.stream.write(indent(step.error_message.strip(), u\"      \"))\r\n06:12:57   File \"/usr/lib/python2.7/codecs.py\", line 370, in write\r\n06:12:57     self.stream.write(data)\r\n06:12:57 IOError: [Errno 11] Resource temporarily unavailable\r\n```\r\n\r\nAs a result of this crash, the reports are generated based on the features that have been completed before the crash. This causes some false positives in our test suite. \r\n\r\nIdeally, if behave crashes, there will be some sort of error instead of just a traceback.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/behave/behave/issues/696", "repository_url": "https://api.github.com/repos/behave/behave", "labels_url": "https://api.github.com/repos/behave/behave/issues/696/labels{/name}", "comments_url": "https://api.github.com/repos/behave/behave/issues/696/comments", "events_url": "https://api.github.com/repos/behave/behave/issues/696/events", "html_url": "https://github.com/behave/behave/issues/696", "id": 369020672, "node_id": "MDU6SXNzdWUzNjkwMjA2NzI=", "number": 696, "title": "API for extending automatic step generation?", "user": {"login": "nataliazon", "id": 1499092, "node_id": "MDQ6VXNlcjE0OTkwOTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1499092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nataliazon", "html_url": "https://github.com/nataliazon", "followers_url": "https://api.github.com/users/nataliazon/followers", "following_url": "https://api.github.com/users/nataliazon/following{/other_user}", "gists_url": "https://api.github.com/users/nataliazon/gists{/gist_id}", "starred_url": "https://api.github.com/users/nataliazon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nataliazon/subscriptions", "organizations_url": "https://api.github.com/users/nataliazon/orgs", "repos_url": "https://api.github.com/users/nataliazon/repos", "events_url": "https://api.github.com/users/nataliazon/events{/privacy}", "received_events_url": "https://api.github.com/users/nataliazon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 447809601, "node_id": "MDU6TGFiZWw0NDc4MDk2MDE=", "url": "https://api.github.com/repos/behave/behave/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-11T09:02:03Z", "updated_at": "2018-10-25T21:43:14Z", "closed_at": "2018-10-25T21:43:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nIs there any way in behave for the user to extend the automatic step generation code?\r\n\r\nFor example, depending on the text in the gherkin step definition, I would like it to have a specific implementation. Right now I'm doing it by copy-pasting the steps skeletons which behave generates for unimplemented steps and then parsing those to add bits and pieces where needed. But, I'd like this to be handled automatically rather than having to copy and paste the steps skeleton code from console output, and then having to use my own parsing code to know where to add specific lines.\r\nThe parsing of gherkin is somewhere in behave (I haven't looked in the source of behave - I'd rather just use the API). Is there any API provided for this purpose?", "performed_via_github_app": null, "score": 1.0}]}