{"total_count": 32, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/newville/asteval/issues/63", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/63/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/63/events", "html_url": "https://github.com/newville/asteval/issues/63", "id": 521525038, "node_id": "MDU6SXNzdWU1MjE1MjUwMzg=", "number": 63, "title": "Strange behaviour when asteval throws an exception", "user": {"login": "bek0s", "id": 10430572, "node_id": "MDQ6VXNlcjEwNDMwNTcy", "avatar_url": "https://avatars3.githubusercontent.com/u/10430572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bek0s", "html_url": "https://github.com/bek0s", "followers_url": "https://api.github.com/users/bek0s/followers", "following_url": "https://api.github.com/users/bek0s/following{/other_user}", "gists_url": "https://api.github.com/users/bek0s/gists{/gist_id}", "starred_url": "https://api.github.com/users/bek0s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bek0s/subscriptions", "organizations_url": "https://api.github.com/users/bek0s/orgs", "repos_url": "https://api.github.com/users/bek0s/repos", "events_url": "https://api.github.com/users/bek0s/events{/privacy}", "received_events_url": "https://api.github.com/users/bek0s/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-12T12:36:16Z", "updated_at": "2019-11-13T18:52:46Z", "closed_at": "2019-11-13T18:52:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI have the following code:\r\n\r\n```python\r\nimport asteval\r\nexpreval = asteval.Interpreter(minimal=True, use_numpy=False)\r\nexpreval(\"a=sin('1')\")\r\nfor error in expreval.error:\r\n    print(error.get_error())\r\n```\r\n\r\nWhen I run it, it produces the following output:\r\n\r\n```\r\nTypeError\r\n   a=sin('1')\r\n      ^^^\r\nError running function call 'sin' with args ['1'] and kwargs {}: must be real number, not str\r\n('TypeError', \"   a=sin('1')\\n      ^^^\\nError running function call 'sin' with args ['1'] and kwargs {}: must be real number, not str\")\r\n('TypeError', \"   a=sin('1')\\n      ^^^\\nat expr='a=sin('1')'\")\r\n('TypeError', \"   a=sin('1')\\nat expr='a=sin('1')'\")\r\n('TypeError', \"   a=sin('1')\\nat expr='a=sin('1')'\")\r\n```\r\n\r\nI am a bit confused as to why the code results in 4 errors instead of one. To me, it seems that only `expreval.error[0]` should be generated. Is this a bug or a feature? Or maybe I am missing something?\r\n\r\nThank you\r\n\r\nPS: I am using Python 3.7\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/62", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/62/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/62/events", "html_url": "https://github.com/newville/asteval/issues/62", "id": 484969637, "node_id": "MDU6SXNzdWU0ODQ5Njk2Mzc=", "number": 62, "title": "Python 3.8 compatibility", "user": {"login": "reneeotten", "id": 12177696, "node_id": "MDQ6VXNlcjEyMTc3Njk2", "avatar_url": "https://avatars2.githubusercontent.com/u/12177696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reneeotten", "html_url": "https://github.com/reneeotten", "followers_url": "https://api.github.com/users/reneeotten/followers", "following_url": "https://api.github.com/users/reneeotten/following{/other_user}", "gists_url": "https://api.github.com/users/reneeotten/gists{/gist_id}", "starred_url": "https://api.github.com/users/reneeotten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reneeotten/subscriptions", "organizations_url": "https://api.github.com/users/reneeotten/orgs", "repos_url": "https://api.github.com/users/reneeotten/repos", "events_url": "https://api.github.com/users/reneeotten/events{/privacy}", "received_events_url": "https://api.github.com/users/reneeotten/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-08-25T19:59:42Z", "updated_at": "2019-11-15T02:36:02Z", "closed_at": "2019-11-15T02:36:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "@newville I tried to do some testing with Python 3.8 and ```lmfit```, which I will try to add to Travis after we release v0.9.14. It seems though that most of the issues I noticed were actually related to ```asteval```.\r\n\r\nAll the test pass with Python 3.7, but there are many failures with the latest ```beta3```: \r\n``` ======================== 42 failed, 15 passed in 2.04s =========================```\r\n\r\nI haven't carefully looked at it yet, but just wanted to see if you had done some work/testing on this already. There is more than a month left before the planned release, but it might be worthwhile to take a look at this before that actually happens.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/59", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/59/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/59/events", "html_url": "https://github.com/newville/asteval/issues/59", "id": 455982728, "node_id": "MDU6SXNzdWU0NTU5ODI3Mjg=", "number": 59, "title": "Comparison operators fail in a very unpredictable way in v 0.9.13", "user": {"login": "kpenev", "id": 7349174, "node_id": "MDQ6VXNlcjczNDkxNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/7349174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpenev", "html_url": "https://github.com/kpenev", "followers_url": "https://api.github.com/users/kpenev/followers", "following_url": "https://api.github.com/users/kpenev/following{/other_user}", "gists_url": "https://api.github.com/users/kpenev/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpenev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpenev/subscriptions", "organizations_url": "https://api.github.com/users/kpenev/orgs", "repos_url": "https://api.github.com/users/kpenev/repos", "events_url": "https://api.github.com/users/kpenev/events{/privacy}", "received_events_url": "https://api.github.com/users/kpenev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-13T22:38:55Z", "updated_at": "2019-06-16T16:09:26Z", "closed_at": "2019-06-16T16:09:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here is a very simple code snipped with very strange results:\r\n\r\n```\r\n>>> from asteval.asteval import Interpreter\r\n>>> interp = Interpreter()\r\n>>> interp.symtable['enabled'] = scipy.ones(10)\r\n>>> interp('enabled == 1')\r\narray([ True,  True,  True,  True,  True,  True,  True,  True,  True,\r\n        True])\r\n>>> interp('enabled < 1')\r\nValueError\r\n   enabled < 1\r\nThe truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/56", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/56/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/56/events", "html_url": "https://github.com/newville/asteval/issues/56", "id": 416587762, "node_id": "MDU6SXNzdWU0MTY1ODc3NjI=", "number": 56, "title": "Add support for Unicode identifiers", "user": {"login": "natezb", "id": 3268059, "node_id": "MDQ6VXNlcjMyNjgwNTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/3268059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/natezb", "html_url": "https://github.com/natezb", "followers_url": "https://api.github.com/users/natezb/followers", "following_url": "https://api.github.com/users/natezb/following{/other_user}", "gists_url": "https://api.github.com/users/natezb/gists{/gist_id}", "starred_url": "https://api.github.com/users/natezb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/natezb/subscriptions", "organizations_url": "https://api.github.com/users/natezb/orgs", "repos_url": "https://api.github.com/users/natezb/repos", "events_url": "https://api.github.com/users/natezb/events{/privacy}", "received_events_url": "https://api.github.com/users/natezb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-04T00:38:29Z", "updated_at": "2019-08-20T18:15:16Z", "closed_at": "2019-08-20T18:15:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Non-ASCII identifiers have been available since Python 3.0, and are described [here](https://docs.python.org/3/reference/lexical_analysis.html#identifiers). Currently, `valid_symbol_name()` does not accept such characters. I encountered this issue when using `lmfit`, a situation where using such identifiers would be very useful.\r\n\r\nI might be willing to issue a PR to fix this if it's not too involved--are there any other places in the code that might need to be modified, other than `valid_symbol_name()`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/55", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/55/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/55/events", "html_url": "https://github.com/newville/asteval/issues/55", "id": 407791811, "node_id": "MDU6SXNzdWU0MDc3OTE4MTE=", "number": 55, "title": "Python 3.X print() works with no_print=True", "user": {"login": "krzim", "id": 44442910, "node_id": "MDQ6VXNlcjQ0NDQyOTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/44442910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krzim", "html_url": "https://github.com/krzim", "followers_url": "https://api.github.com/users/krzim/followers", "following_url": "https://api.github.com/users/krzim/following{/other_user}", "gists_url": "https://api.github.com/users/krzim/gists{/gist_id}", "starred_url": "https://api.github.com/users/krzim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krzim/subscriptions", "organizations_url": "https://api.github.com/users/krzim/orgs", "repos_url": "https://api.github.com/users/krzim/repos", "events_url": "https://api.github.com/users/krzim/events{/privacy}", "received_events_url": "https://api.github.com/users/krzim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-07T16:40:38Z", "updated_at": "2019-11-14T21:00:45Z", "closed_at": "2019-11-14T21:00:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "While I know the python 3.x `print()` function is not designed to be blocked by the `no_print=True` setting, is there a plan to implement this? As a temporary workaround, I have simply removed `print` from the symtable whenever `no_print` is set. This prevents the symbol from being loaded in the `on_name()` call [here](https://github.com/newville/asteval/blob/3410fd88601ad1d7e509e8c60f7a48eb7bbd4405/asteval/asteval.py#L448-L452). I'm not sure if that's the best way to address this and haven't tested this enough to see if it breaks other sections of the interpreter. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/52", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/52/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/52/events", "html_url": "https://github.com/newville/asteval/issues/52", "id": 364964973, "node_id": "MDU6SXNzdWUzNjQ5NjQ5NzM=", "number": 52, "title": "Exception handling incorrect", "user": {"login": "jmdejong", "id": 7968950, "node_id": "MDQ6VXNlcjc5Njg5NTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/7968950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmdejong", "html_url": "https://github.com/jmdejong", "followers_url": "https://api.github.com/users/jmdejong/followers", "following_url": "https://api.github.com/users/jmdejong/following{/other_user}", "gists_url": "https://api.github.com/users/jmdejong/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmdejong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmdejong/subscriptions", "organizations_url": "https://api.github.com/users/jmdejong/orgs", "repos_url": "https://api.github.com/users/jmdejong/repos", "events_url": "https://api.github.com/users/jmdejong/events{/privacy}", "received_events_url": "https://api.github.com/users/jmdejong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-28T16:48:14Z", "updated_at": "2019-11-12T21:21:20Z", "closed_at": "2019-11-12T21:21:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Several things seem to go wrong with the execption handling.\r\nThis code:\r\n\r\n    def foo():\r\n        raise Exception(\"error in function\")\r\n\r\n    try:\r\n        foo()\r\n        print(\"still going on\")\r\n        raise Exception(\"directly raised error\")\r\n    except Exception:\r\n        print(\"error caught\")\r\n\r\nGives as result:\r\n\r\n    error caught\r\n    still going on\r\n    Exception\r\n   \r\n    directly raised error\r\n\r\n(The last 3 lines are the printed error)\r\n\r\nThere are 2 things going wrong here:\r\n- When a raised exception is caught the rest of the try block will still be executed\r\n- Catching some exception type does not catch exceptions that are raised directly in that try block\r\n\r\nThese problems are unrelated: they also show up when I test for them individually.\r\n\r\nAnother problem is that catching named errors doesn't work.\r\n\r\n    def foo():\r\n        raise Exception(\"error in function\")\r\n\r\n    try:\r\n        foo()\r\n    except Exception as ex:\r\n        print(\"caught:\", ex)\r\n\r\ngives:\r\n\r\n    NameError\r\n       <>\r\n                             ^^^\r\n    name 'ex' is not defined\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/46", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/46/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/46/events", "html_url": "https://github.com/newville/asteval/issues/46", "id": 361901191, "node_id": "MDU6SXNzdWUzNjE5MDExOTE=", "number": 46, "title": "Why is file reading enabled by default?", "user": {"login": "jmdejong", "id": 7968950, "node_id": "MDQ6VXNlcjc5Njg5NTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/7968950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmdejong", "html_url": "https://github.com/jmdejong", "followers_url": "https://api.github.com/users/jmdejong/followers", "following_url": "https://api.github.com/users/jmdejong/following{/other_user}", "gists_url": "https://api.github.com/users/jmdejong/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmdejong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmdejong/subscriptions", "organizations_url": "https://api.github.com/users/jmdejong/orgs", "repos_url": "https://api.github.com/users/jmdejong/repos", "events_url": "https://api.github.com/users/jmdejong/events{/privacy}", "received_events_url": "https://api.github.com/users/jmdejong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-19T19:49:22Z", "updated_at": "2018-11-17T19:49:55Z", "closed_at": "2018-11-17T19:49:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems to me that in almost any use case for asteval reading (possibly private) files would also pose a security risk.\r\nIt is easy to remove \"open\" from the symtable, but why is it in there by default?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/44", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/44/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/44/events", "html_url": "https://github.com/newville/asteval/issues/44", "id": 361846231, "node_id": "MDU6SXNzdWUzNjE4NDYyMzE=", "number": 44, "title": "test_dos fails on recursion", "user": {"login": "jmdejong", "id": 7968950, "node_id": "MDQ6VXNlcjc5Njg5NTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/7968950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmdejong", "html_url": "https://github.com/jmdejong", "followers_url": "https://api.github.com/users/jmdejong/followers", "following_url": "https://api.github.com/users/jmdejong/following{/other_user}", "gists_url": "https://api.github.com/users/jmdejong/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmdejong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmdejong/subscriptions", "organizations_url": "https://api.github.com/users/jmdejong/orgs", "repos_url": "https://api.github.com/users/jmdejong/repos", "events_url": "https://api.github.com/users/jmdejong/events{/privacy}", "received_events_url": "https://api.github.com/users/jmdejong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-09-19T17:16:35Z", "updated_at": "2019-11-15T03:53:41Z", "closed_at": "2019-11-15T03:53:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When trying to run the tests python stops reacting and starts eating cpu and memory once it reaches test_dos.\r\nSome debug prints suggested that the culprit is in the recursion test.\r\nIn that test the debug prints kept going for about 0.03 seconds and then just stopped while the test went out of control.\r\n\r\nI have tested this in both Python 3.7.0 and Python 2.7.15.\r\nI am running ArchLinux 64-bit", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/40", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/40/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/40/events", "html_url": "https://github.com/newville/asteval/issues/40", "id": 302333706, "node_id": "MDU6SXNzdWUzMDIzMzM3MDY=", "number": 40, "title": "built-in min() function is unexpectedly overridden by numpy", "user": {"login": "skrap", "id": 1132698, "node_id": "MDQ6VXNlcjExMzI2OTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1132698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrap", "html_url": "https://github.com/skrap", "followers_url": "https://api.github.com/users/skrap/followers", "following_url": "https://api.github.com/users/skrap/following{/other_user}", "gists_url": "https://api.github.com/users/skrap/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrap/subscriptions", "organizations_url": "https://api.github.com/users/skrap/orgs", "repos_url": "https://api.github.com/users/skrap/repos", "events_url": "https://api.github.com/users/skrap/events{/privacy}", "received_events_url": "https://api.github.com/users/skrap/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-05T15:03:41Z", "updated_at": "2018-09-21T02:47:55Z", "closed_at": "2018-09-21T02:47:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "The python built-in `min()` function is overridden by numpy by default, which makes for some weird behavior:\r\n\r\n```\r\n09:59 $ python\r\nPython 2.7.14 (default, Sep 25 2017, 09:53:22) \r\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.37)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> min(4,5)\r\n4\r\n>>> from asteval import Interpreter\r\n>>> aeval = Interpreter()\r\n>>> aeval('min(4,5)')\r\nAxisError\r\n   min(4,5)\r\nError running <function amin at 0x108552488>\r\n>>> \r\n```\r\n\r\nWorkaround:  specify use_numpy=False when creating the interpreter\r\n```\r\n>>> aeval = Interpreter(use_numpy=False)\r\n>>> aeval('min(4,5)')\r\n4\r\n```\r\n\r\nObviously there's backward compatibility concerns with changing this behavior, and I'm not sure what the right thing here is, but I'd lean in the direction of not changing the meaning of python built-ins based on the presence of an optional module.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/39", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/39/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/39/events", "html_url": "https://github.com/newville/asteval/issues/39", "id": 297689192, "node_id": "MDU6SXNzdWUyOTc2ODkxOTI=", "number": 39, "title": "string format broken", "user": {"login": "wcpettus", "id": 10961789, "node_id": "MDQ6VXNlcjEwOTYxNzg5", "avatar_url": "https://avatars3.githubusercontent.com/u/10961789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wcpettus", "html_url": "https://github.com/wcpettus", "followers_url": "https://api.github.com/users/wcpettus/followers", "following_url": "https://api.github.com/users/wcpettus/following{/other_user}", "gists_url": "https://api.github.com/users/wcpettus/gists{/gist_id}", "starred_url": "https://api.github.com/users/wcpettus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wcpettus/subscriptions", "organizations_url": "https://api.github.com/users/wcpettus/orgs", "repos_url": "https://api.github.com/users/wcpettus/repos", "events_url": "https://api.github.com/users/wcpettus/events{/privacy}", "received_events_url": "https://api.github.com/users/wcpettus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-16T06:01:38Z", "updated_at": "2018-02-16T13:12:57Z", "closed_at": "2018-02-16T13:12:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "In asteval 0.9.8, I could do this:\r\n```python\r\n>>> import asteval\r\n>>> i = asteval.Interpreter()\r\n>>> i('\"hello world {}\".format(2)')\r\n'hello world 2'\r\n```\r\n\r\nNow in asteval 0.9.11, this is broken:\r\n```python\r\n>>> import asteval\r\n>>> i = asteval.Interpreter()\r\n>>> i('\"hello world {}\".format(2)')\r\nAttributeError\r\n   \"hello world {}\".format(2)\r\n'hello world {}' object has not attribute 'format'\r\n```\r\n\r\nWas this an intentional break and is there an explanation of why the new release did this?  Or did I stumble on a bug?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/38", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/38/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/38/events", "html_url": "https://github.com/newville/asteval/issues/38", "id": 271322866, "node_id": "MDU6SXNzdWUyNzEzMjI4NjY=", "number": 38, "title": "pip install broken", "user": {"login": "wcpettus", "id": 10961789, "node_id": "MDQ6VXNlcjEwOTYxNzg5", "avatar_url": "https://avatars3.githubusercontent.com/u/10961789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wcpettus", "html_url": "https://github.com/wcpettus", "followers_url": "https://api.github.com/users/wcpettus/followers", "following_url": "https://api.github.com/users/wcpettus/following{/other_user}", "gists_url": "https://api.github.com/users/wcpettus/gists{/gist_id}", "starred_url": "https://api.github.com/users/wcpettus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wcpettus/subscriptions", "organizations_url": "https://api.github.com/users/wcpettus/orgs", "repos_url": "https://api.github.com/users/wcpettus/repos", "events_url": "https://api.github.com/users/wcpettus/events{/privacy}", "received_events_url": "https://api.github.com/users/wcpettus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-05T23:00:29Z", "updated_at": "2017-11-06T13:09:02Z", "closed_at": "2017-11-06T13:09:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Now when attempting to `pip install asteval`, it fails saying it can't import module six.  When I asked on stackoverflow someone said this was because your setup.py imports asteval? (https://stackoverflow.com/questions/47127178/pip-install-asteval-fails-on-six-dependency)\r\n\r\nI'm out of my depth here, but would really like asteval installation to work again.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/35", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/35/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/35/events", "html_url": "https://github.com/newville/asteval/issues/35", "id": 261865900, "node_id": "MDU6SXNzdWUyNjE4NjU5MDA=", "number": 35, "title": "random?", "user": {"login": "hmelberg", "id": 3296311, "node_id": "MDQ6VXNlcjMyOTYzMTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/3296311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hmelberg", "html_url": "https://github.com/hmelberg", "followers_url": "https://api.github.com/users/hmelberg/followers", "following_url": "https://api.github.com/users/hmelberg/following{/other_user}", "gists_url": "https://api.github.com/users/hmelberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/hmelberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hmelberg/subscriptions", "organizations_url": "https://api.github.com/users/hmelberg/orgs", "repos_url": "https://api.github.com/users/hmelberg/repos", "events_url": "https://api.github.com/users/hmelberg/events{/privacy}", "received_events_url": "https://api.github.com/users/hmelberg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-09-30T19:18:22Z", "updated_at": "2017-10-14T20:04:04Z", "closed_at": "2017-10-14T20:04:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I (foolishly?) tried:\r\n\r\n`aeval('x = random.normal(0,1)')`\r\n\r\nand got\r\n\r\n```\r\nNameError\r\nx = random.normal(0,1)\r\n     ^^^\r\nname 'random' is not defined\r\n```\r\nIs is possible to draw random numbers from distributions using asteval?\r\n\r\nPerhaps it would create a security problem to give access to the functions in the random module in numpy, or would it be OK? \r\n\r\nMaybe the random subfunctions could be added into the namespace at startup with the other numpy functions.\r\n\r\nWilling to help with this if you think it is a good idea.\r\n\r\nGreat package, thanks!\r\n\r\n(edited: language and typos)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/34", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/34/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/34/events", "html_url": "https://github.com/newville/asteval/issues/34", "id": 261697018, "node_id": "MDU6SXNzdWUyNjE2OTcwMTg=", "number": 34, "title": "Error in nested calls to procedures", "user": {"login": "scuenda", "id": 10206334, "node_id": "MDQ6VXNlcjEwMjA2MzM0", "avatar_url": "https://avatars2.githubusercontent.com/u/10206334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scuenda", "html_url": "https://github.com/scuenda", "followers_url": "https://api.github.com/users/scuenda/followers", "following_url": "https://api.github.com/users/scuenda/following{/other_user}", "gists_url": "https://api.github.com/users/scuenda/gists{/gist_id}", "starred_url": "https://api.github.com/users/scuenda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scuenda/subscriptions", "organizations_url": "https://api.github.com/users/scuenda/orgs", "repos_url": "https://api.github.com/users/scuenda/repos", "events_url": "https://api.github.com/users/scuenda/events{/privacy}", "received_events_url": "https://api.github.com/users/scuenda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-09-29T16:31:55Z", "updated_at": "2017-10-14T20:04:26Z", "closed_at": "2017-10-14T20:04:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all, great work. Thanks for doing this library.\r\n\r\nThe following code involving user defined functions does not run properly:\r\n\r\n```\r\nfrom asteval import Interpreter\r\n\r\naeval = Interpreter()\r\n\r\ncode=\"\"\"\r\ndef fun(x):\r\n    return x\r\n\r\ndef fun2(x):\r\n    y=fun(x)\r\n    return y+1\r\n\r\nx=1\r\ny=fun2(x)\r\nprint \"should be y={}, and it is: y={}\".format(x+1,y)\r\n# should be y=2, and it is: y=1\r\n\"\"\"\r\naeval(code)\r\n```\r\nIt seems that fun2 stops running after the return of fun.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/32", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/32/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/32/events", "html_url": "https://github.com/newville/asteval/issues/32", "id": 259963740, "node_id": "MDU6SXNzdWUyNTk5NjM3NDA=", "number": 32, "title": "Arbitrary code execution", "user": {"login": "henniss", "id": 17056237, "node_id": "MDQ6VXNlcjE3MDU2MjM3", "avatar_url": "https://avatars3.githubusercontent.com/u/17056237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henniss", "html_url": "https://github.com/henniss", "followers_url": "https://api.github.com/users/henniss/followers", "following_url": "https://api.github.com/users/henniss/following{/other_user}", "gists_url": "https://api.github.com/users/henniss/gists{/gist_id}", "starred_url": "https://api.github.com/users/henniss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henniss/subscriptions", "organizations_url": "https://api.github.com/users/henniss/orgs", "repos_url": "https://api.github.com/users/henniss/repos", "events_url": "https://api.github.com/users/henniss/events{/privacy}", "received_events_url": "https://api.github.com/users/henniss/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-09-22T23:47:22Z", "updated_at": "2017-10-14T20:05:46Z", "closed_at": "2017-10-14T20:05:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Constructing and running functions from arbitrary bytecode from within the sandbox. \r\n\r\nTested in Python 3.6.2 on Linux.\r\n\r\n```python\r\nimport asteval\r\naeval = asteval.Interpreter()\r\n\r\ncode = \"\"\"\r\n\r\n# To break out of the sandbox, we first try to get access to\r\n# object.__subclasses__. Once we have that, we can get access to\r\n# 'code' and 'function' and use these to construct new, real functions\r\n# (not Procedures) from arbitrary bytecode.\r\n\r\n# First up, lets get access to object:\r\nobject = str.__mro__[1]\r\n\r\n# Getting __subclasses__ is harder. We're going to construct a\r\n# Procedure `get_subclasses` which takes an object and returns its\r\n# __subclasses__ attribute (basically a janky, restricted version of\r\n# the built-in getattr).\r\n\r\ndef get_subclasses(x):return x.attribute\r\n\r\n# Procedures leak access to their AST:\r\n\r\n# get_subclasses.body[0].value.attr = hack_string\r\n\r\n# hack_string is going to be an object with an __eq__ method which\r\n# counts the number of times it is called until the `node.attr not in\r\n# UNSAFE_ATTRS` check on line 408 is done, then it goes and modifies\r\n# the AST of get_subclasses /again/ to replace node.attr with the plain old\r\n# string '__subclasses__'.\r\n\r\n## METHODS\r\n\r\n# These are really Procedures, not true functions, so we don't have\r\n# access to self. Maybe there's a way to fix that, but since we only\r\n# need one it's easy to just use global state instead.\r\n\r\n# I would rather count be a global integer, but that results in a\r\n# runtime error: \"attribute for storage: shouldn't be here.\"  I didn't\r\n# look carefully enough to see why that is, but a list works fine as a\r\n# counter.\r\ncount = [0]\r\ndef phony_eq(x):\r\n    count[0] += 1\r\n    if count[0] == 9:\r\n        get_subclasses.body[0].value.attr = '__subclasses__'\r\n        count[0] = 0\r\n\r\n    if count[0] <= 9:\r\n        return False\r\n\r\n# Not needed, but meant less bizarre error messages when I was writing\r\n# this\r\ndef phony_str(): return \"<hack_string>\"\r\n\r\n# We can still create new classes using 'type'. I don't think it\r\n# actualy matters that this be a str subclass.\r\n\r\nhack_string = type('HackString',\r\n                (str, ),\r\n                {'__eq__': phony_eq,\r\n                 '__str__': phony_str})()\r\n\r\n\r\n# Now we're ready to put this in place.\r\nget_subclasses.body[0].value.attr = hack_string\r\n__subclasses__ = get_subclasses(object)\r\n\r\nfor c in __subclasses__():\r\n    if c.__name__ == 'code':\r\n        code = c\r\n    if c.__name__ == 'function':\r\n        function_ = c\r\n\r\n# At this point we can create and run functions from arbitrary\r\n# bytecode:\r\n\r\n# For demonstration purposes, our function is the following:\r\n\r\n#  def my_getattr(obj, attr):\r\n#      return obj.__getattribute__(attr)\r\n\r\n# which has bytecode\r\n\r\n#  b'|\\\\x00j\\\\x00|\\\\x01\\\\x83\\\\x01S\\\\x00'\r\n\r\n# We can't enter literal bytes objects, but that's okay:\r\n\r\ngetattr_bytecode = ('|\\\\0j\\\\0|' + chr(0x1)).encode('utf-8') + chr(0x83).encode('utf-8')[1:] + (chr(0x1) + 'S\\\\0').encode('utf-8')\r\n\r\ncode_obj = code(2, 0, 2, 2, 67, getattr_bytecode, (None, ), ('__getattribute__', ), ('obj', 'attr'), '', 'my_getattr', 0, ('\\\\0' + chr(0x1)).encode('utf-8'))\r\nmy_getattr = function_(code_obj, {})\r\n\r\n\r\nprint(my_getattr({}, '__class__'))\r\n\"\"\"\r\n\r\n\r\naeval(code)\r\n```\r\n\r\nResult: \r\n\r\n```\r\n<class 'dict'>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/31", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/31/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/31/events", "html_url": "https://github.com/newville/asteval/issues/31", "id": 227599478, "node_id": "MDU6SXNzdWUyMjc1OTk0Nzg=", "number": 31, "title": "perhaps the way to make asteval unsafe?", "user": {"login": "zcyuefan", "id": 16079105, "node_id": "MDQ6VXNlcjE2MDc5MTA1", "avatar_url": "https://avatars2.githubusercontent.com/u/16079105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zcyuefan", "html_url": "https://github.com/zcyuefan", "followers_url": "https://api.github.com/users/zcyuefan/followers", "following_url": "https://api.github.com/users/zcyuefan/following{/other_user}", "gists_url": "https://api.github.com/users/zcyuefan/gists{/gist_id}", "starred_url": "https://api.github.com/users/zcyuefan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zcyuefan/subscriptions", "organizations_url": "https://api.github.com/users/zcyuefan/orgs", "repos_url": "https://api.github.com/users/zcyuefan/repos", "events_url": "https://api.github.com/users/zcyuefan/events{/privacy}", "received_events_url": "https://api.github.com/users/zcyuefan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-10T08:13:09Z", "updated_at": "2017-05-10T11:22:01Z", "closed_at": "2017-05-10T11:22:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "delete system file using asteval:\r\n---\r\n```\r\nfrom asteval import Interpreter\r\naeval = Interpreter()\r\naeval.symtable['os']=__import__('os') \r\naeval(\"os.system('rm -f foo.txt')\")\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/28", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/28/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/28/events", "html_url": "https://github.com/newville/asteval/issues/28", "id": 183929013, "node_id": "MDU6SXNzdWUxODM5MjkwMTM=", "number": 28, "title": "Problem with functions defined inside asteval.Interpreter", "user": {"login": "alemarmed", "id": 2806248, "node_id": "MDQ6VXNlcjI4MDYyNDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2806248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alemarmed", "html_url": "https://github.com/alemarmed", "followers_url": "https://api.github.com/users/alemarmed/followers", "following_url": "https://api.github.com/users/alemarmed/following{/other_user}", "gists_url": "https://api.github.com/users/alemarmed/gists{/gist_id}", "starred_url": "https://api.github.com/users/alemarmed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alemarmed/subscriptions", "organizations_url": "https://api.github.com/users/alemarmed/orgs", "repos_url": "https://api.github.com/users/alemarmed/repos", "events_url": "https://api.github.com/users/alemarmed/events{/privacy}", "received_events_url": "https://api.github.com/users/alemarmed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-10-19T10:53:48Z", "updated_at": "2016-10-20T12:30:27Z", "closed_at": "2016-10-20T12:30:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm using asteval to evaluate python code stored in database and it's awesome. But for my use case I need lot of functions definitions and there is something that I really don't understand. I found a very simple test:\n\n```\naeval = Interpreter()\ncode = \"\"\"\ndef a():\n    return 1\ndef b():\n    return 2\ndef c():\n    return a() + b()\nc()\n\"\"\"\naeval(code)  # returns 3\naeval = Interpreter()\ncode = \"\"\"\ndef a():\n    return 1\ndef b():\n    return 2\ndef c():\n    x = a()\n    y = b()\n    return x + y\nc()\n\"\"\"\naeval(code)  # returns 1\n```\n\nAre functions defined inside the interpreter only working in one-line statements? Thanks for your work!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/27", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/27/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/27/events", "html_url": "https://github.com/newville/asteval/issues/27", "id": 182528422, "node_id": "MDU6SXNzdWUxODI1Mjg0MjI=", "number": 27, "title": "error_msg not being cleared between eval() runs", "user": {"login": "mnolet", "id": 5047496, "node_id": "MDQ6VXNlcjUwNDc0OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/5047496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mnolet", "html_url": "https://github.com/mnolet", "followers_url": "https://api.github.com/users/mnolet/followers", "following_url": "https://api.github.com/users/mnolet/following{/other_user}", "gists_url": "https://api.github.com/users/mnolet/gists{/gist_id}", "starred_url": "https://api.github.com/users/mnolet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mnolet/subscriptions", "organizations_url": "https://api.github.com/users/mnolet/orgs", "repos_url": "https://api.github.com/users/mnolet/repos", "events_url": "https://api.github.com/users/mnolet/events{/privacy}", "received_events_url": "https://api.github.com/users/mnolet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-12T13:39:42Z", "updated_at": "2016-10-24T12:02:43Z", "closed_at": "2016-10-24T12:02:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello -- loving asteval!  Thanks for putting this on github.\n\nI would submit as a commit but not super confident I'm right so adding as an issue.\n\nIn `eval()` currently it resets `self.error = []` but does _not_ reset `self.error_msg`\n\nThis means that if you call `eval(*args,show_errors=False)` you end up with an incrementally growing error list.\n\nI think all that's needed is a simple `self.error_msg = None` in the first few lines of `def eval()`\n\nCheers,\n\n-Mike\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/26", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/26/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/26/events", "html_url": "https://github.com/newville/asteval/issues/26", "id": 182214020, "node_id": "MDU6SXNzdWUxODIyMTQwMjA=", "number": 26, "title": "Quiet Mode", "user": {"login": "CarstVaartjes", "id": 2722815, "node_id": "MDQ6VXNlcjI3MjI4MTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2722815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CarstVaartjes", "html_url": "https://github.com/CarstVaartjes", "followers_url": "https://api.github.com/users/CarstVaartjes/followers", "following_url": "https://api.github.com/users/CarstVaartjes/following{/other_user}", "gists_url": "https://api.github.com/users/CarstVaartjes/gists{/gist_id}", "starred_url": "https://api.github.com/users/CarstVaartjes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CarstVaartjes/subscriptions", "organizations_url": "https://api.github.com/users/CarstVaartjes/orgs", "repos_url": "https://api.github.com/users/CarstVaartjes/repos", "events_url": "https://api.github.com/users/CarstVaartjes/events{/privacy}", "received_events_url": "https://api.github.com/users/CarstVaartjes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-11T09:16:38Z", "updated_at": "2016-10-12T13:10:26Z", "closed_at": "2016-10-11T09:26:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nwe use asteval a lot, thanks for the great package! \nHowever, something that used to work, doesn't seem to work anymore, which is surpressing the text output (it can really swamp terminal output with things that aren't issues).\nWe had this solution in place:\n\n```\nclass FakeWriter(object):\n    def __init__(self):\n        def fake_write(*args):\n            pass\n\n        self.write = fake_write\n\nf = Interpreter(writer=FakeWriter())\nf('1.0 / 0.0')\n```\n\nThis used to work fine, but not anymore. Now we get still stdout for the zero division error. What changed? Is there any way to surpress it better?\nWe upgraded to the latest version, 0.9.8\n\nBR\n\nCarst\n\nP.s. the following does work:\n\n```\nf('try:\\n    1.0 / 0.0\\nexcept:\\n   pass')\n```\n\nbut that seems to be a bit over kill to me?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/25", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/25/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/25/events", "html_url": "https://github.com/newville/asteval/issues/25", "id": 179799971, "node_id": "MDU6SXNzdWUxNzk3OTk5NzE=", "number": 25, "title": "Any chances 0.9.8 will be released?", "user": {"login": "syabro", "id": 29029, "node_id": "MDQ6VXNlcjI5MDI5", "avatar_url": "https://avatars1.githubusercontent.com/u/29029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syabro", "html_url": "https://github.com/syabro", "followers_url": "https://api.github.com/users/syabro/followers", "following_url": "https://api.github.com/users/syabro/following{/other_user}", "gists_url": "https://api.github.com/users/syabro/gists{/gist_id}", "starred_url": "https://api.github.com/users/syabro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syabro/subscriptions", "organizations_url": "https://api.github.com/users/syabro/orgs", "repos_url": "https://api.github.com/users/syabro/repos", "events_url": "https://api.github.com/users/syabro/events{/privacy}", "received_events_url": "https://api.github.com/users/syabro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-09-28T15:05:05Z", "updated_at": "2016-09-29T13:12:52Z", "closed_at": "2016-09-29T13:12:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "We need this fix :)\nhttps://github.com/newville/asteval/pull/24\n\nThanks\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/21", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/21/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/21/events", "html_url": "https://github.com/newville/asteval/issues/21", "id": 167896825, "node_id": "MDU6SXNzdWUxNjc4OTY4MjU=", "number": 21, "title": "Silent evaluation failures due to too low recursion-limit(100)", "user": {"login": "ankostis", "id": 501585, "node_id": "MDQ6VXNlcjUwMTU4NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/501585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ankostis", "html_url": "https://github.com/ankostis", "followers_url": "https://api.github.com/users/ankostis/followers", "following_url": "https://api.github.com/users/ankostis/following{/other_user}", "gists_url": "https://api.github.com/users/ankostis/gists{/gist_id}", "starred_url": "https://api.github.com/users/ankostis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ankostis/subscriptions", "organizations_url": "https://api.github.com/users/ankostis/orgs", "repos_url": "https://api.github.com/users/ankostis/repos", "events_url": "https://api.github.com/users/ankostis/events{/privacy}", "received_events_url": "https://api.github.com/users/ankostis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-07-27T16:22:33Z", "updated_at": "2016-08-10T12:08:49Z", "closed_at": "2016-08-10T12:08:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While evaluating _correct_ expressions, I got `None` as result, but no error were reported (they have silently failed).\n\nWhen I tried to investigate the issue, I was receiving the following error on `Interpreter().eval()` from within my debugger (LiClipse + PyDev):\n\n```\ncannot set the recursion limit to 100 at the recursion depth 87: the limit is too low\n```\n\nObviously my debugger had pushed the stack close to that limit, \nand python-interpreter screamed at [asteval/asteval.py#L136](https://github.com/newville/asteval/blob/master/asteval/asteval.py#L136): \n\n```\nsys.setrecursionlimit(RECURSION_LIMIT)\n```\n\nSo I hand-edited [asteval/astutils.py:#L16](https://github.com/newville/asteval/blob/master/asteval/astutils.py#L16) and increased my limit to i.e. 500: \n\n```\n RECURSION_LIMIT = 100\n```\n\nBut then, all my expressions worked OK!\n\nOn first impression, I would consider `recursion-limit=100`, too low for general use.\n\nMy second thought would be to set the limit at least  `current_stack_depth + 100` and that value(100) to be user-configurable.\n\nBut as general precaution, I believe that:\n- normal code should not mess with `sys.setrecursionlimit()` because it might have serious side-effects.  \n- If this protection measure is needed, user-code should perform that invocation - the documents should explain how.  \n- At most, an \"opt-in\" keyword should do that, with something like that:\n  \n  ```\n  import inspect\n  \n  class Interpreter:\n      def __init__(..., recursion_cap=None):\n          ...\n          if recursion_cap:\n              if recursion_cap is True:\n                  recursion_cap = DEFAULT_RECURSION_CAP\n              recursion_limit = len(inspect.stack()) + recursion_cap\n              sys.setrecursionlimit(recursion_limit)\n  \n  ```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/20", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/20/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/20/events", "html_url": "https://github.com/newville/asteval/issues/20", "id": 165579868, "node_id": "MDU6SXNzdWUxNjU1Nzk4Njg=", "number": 20, "title": "Add documentation for Interpreter constructor parameters", "user": {"login": "fpischedda", "id": 1579487, "node_id": "MDQ6VXNlcjE1Nzk0ODc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1579487?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fpischedda", "html_url": "https://github.com/fpischedda", "followers_url": "https://api.github.com/users/fpischedda/followers", "following_url": "https://api.github.com/users/fpischedda/following{/other_user}", "gists_url": "https://api.github.com/users/fpischedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/fpischedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fpischedda/subscriptions", "organizations_url": "https://api.github.com/users/fpischedda/orgs", "repos_url": "https://api.github.com/users/fpischedda/repos", "events_url": "https://api.github.com/users/fpischedda/events{/privacy}", "received_events_url": "https://api.github.com/users/fpischedda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-07-14T14:47:15Z", "updated_at": "2017-10-14T20:06:12Z", "closed_at": "2017-10-14T20:06:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\ntoday I've had some problems with long computations and I had to look at the sources in order to find out how to customize max_time of Interpreter;  additional info could help others in the same situation.\n\np.s. thank you for your work, your library is awesome!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/16", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/16/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/16/events", "html_url": "https://github.com/newville/asteval/issues/16", "id": 123419629, "node_id": "MDU6SXNzdWUxMjM0MTk2Mjk=", "number": 16, "title": "Python 3.5 AttributeError: 'Call' object has no attribute 'starargs' ", "user": {"login": "timercrack", "id": 1825502, "node_id": "MDQ6VXNlcjE4MjU1MDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1825502?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timercrack", "html_url": "https://github.com/timercrack", "followers_url": "https://api.github.com/users/timercrack/followers", "following_url": "https://api.github.com/users/timercrack/following{/other_user}", "gists_url": "https://api.github.com/users/timercrack/gists{/gist_id}", "starred_url": "https://api.github.com/users/timercrack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timercrack/subscriptions", "organizations_url": "https://api.github.com/users/timercrack/orgs", "repos_url": "https://api.github.com/users/timercrack/repos", "events_url": "https://api.github.com/users/timercrack/events{/privacy}", "received_events_url": "https://api.github.com/users/timercrack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-12-22T06:03:06Z", "updated_at": "2016-04-10T21:44:48Z", "closed_at": "2016-04-10T21:43:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I got a very strange problem, when I run this in terminal:\n\n``` python\n# some_test.py\nfrom asteval import Interpreter\ninterp = Interpreter()\ninterp('print(1)')\n```\n\nIt raise an exception: \n\n``` bash\n# python some_test.py\nAttributeError\n   print(1)\n'Call' object has no attribute 'starargs'\n```\n\nAnd if I use pycharm to run unittest, all test is passed without error, but if I run unittest in terminal, it shows a lot of error. Is there something wrong?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/14", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/14/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/14/events", "html_url": "https://github.com/newville/asteval/issues/14", "id": 103833995, "node_id": "MDU6SXNzdWUxMDM4MzM5OTU=", "number": 14, "title": "place variable in for loop", "user": {"login": "babadoo", "id": 3744077, "node_id": "MDQ6VXNlcjM3NDQwNzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3744077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/babadoo", "html_url": "https://github.com/babadoo", "followers_url": "https://api.github.com/users/babadoo/followers", "following_url": "https://api.github.com/users/babadoo/following{/other_user}", "gists_url": "https://api.github.com/users/babadoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/babadoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/babadoo/subscriptions", "organizations_url": "https://api.github.com/users/babadoo/orgs", "repos_url": "https://api.github.com/users/babadoo/repos", "events_url": "https://api.github.com/users/babadoo/events{/privacy}", "received_events_url": "https://api.github.com/users/babadoo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-08-29T06:52:36Z", "updated_at": "2015-08-30T21:29:27Z", "closed_at": "2015-08-30T21:29:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "there is an issue with using a variable named \"place\" in a for loop:\n\nfrom asteval import Interpreter\ncode = \"for place in [1,2,3]: pass\"\ninterpr = Interpreter()\ninterpr.eval(code)\n\n'str' object cannot be interpreted as an integer\n\nThere is a place item in the \"FROM_NUMPY\" set in asteval, maybe there is some collision.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/13", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/13/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/13/events", "html_url": "https://github.com/newville/asteval/issues/13", "id": 88401428, "node_id": "MDU6SXNzdWU4ODQwMTQyOA==", "number": 13, "title": "variant with a subset ?", "user": {"login": "jedie", "id": 71315, "node_id": "MDQ6VXNlcjcxMzE1", "avatar_url": "https://avatars1.githubusercontent.com/u/71315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedie", "html_url": "https://github.com/jedie", "followers_url": "https://api.github.com/users/jedie/followers", "following_url": "https://api.github.com/users/jedie/following{/other_user}", "gists_url": "https://api.github.com/users/jedie/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedie/subscriptions", "organizations_url": "https://api.github.com/users/jedie/orgs", "repos_url": "https://api.github.com/users/jedie/repos", "events_url": "https://api.github.com/users/jedie/events{/privacy}", "received_events_url": "https://api.github.com/users/jedie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-06-15T11:52:28Z", "updated_at": "2017-10-14T20:07:16Z", "closed_at": "2017-10-14T20:07:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "First: Great project!\n\nI would like to have a subset of all supported stuff.\n\ne.g.: No numpy, not if/then/else, while, for etc.\n\nJust basic things like: numbers, tuple, list, dict, string, True, False, None\n\nWhat's about to make this more flexible?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/11", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/11/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/11/events", "html_url": "https://github.com/newville/asteval/issues/11", "id": 69199219, "node_id": "MDU6SXNzdWU2OTE5OTIxOQ==", "number": 11, "title": "resolve/merge divergences of asteval and lmfit/asteval", "user": {"login": "newville", "id": 304251, "node_id": "MDQ6VXNlcjMwNDI1MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/304251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newville", "html_url": "https://github.com/newville", "followers_url": "https://api.github.com/users/newville/followers", "following_url": "https://api.github.com/users/newville/following{/other_user}", "gists_url": "https://api.github.com/users/newville/gists{/gist_id}", "starred_url": "https://api.github.com/users/newville/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newville/subscriptions", "organizations_url": "https://api.github.com/users/newville/orgs", "repos_url": "https://api.github.com/users/newville/repos", "events_url": "https://api.github.com/users/newville/events{/privacy}", "received_events_url": "https://api.github.com/users/newville/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-04-17T19:13:30Z", "updated_at": "2015-06-07T15:52:41Z", "closed_at": "2015-06-07T15:52:41Z", "author_association": "OWNER", "active_lock_reason": null, "body": "several changes over the past couple months need to be merged together \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/9", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/9/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/9/events", "html_url": "https://github.com/newville/asteval/issues/9", "id": 56508115, "node_id": "MDU6SXNzdWU1NjUwODExNQ==", "number": 9, "title": "Add classifiers to show Python 3 support", "user": {"login": "cmutel", "id": 645217, "node_id": "MDQ6VXNlcjY0NTIxNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/645217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmutel", "html_url": "https://github.com/cmutel", "followers_url": "https://api.github.com/users/cmutel/followers", "following_url": "https://api.github.com/users/cmutel/following{/other_user}", "gists_url": "https://api.github.com/users/cmutel/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmutel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmutel/subscriptions", "organizations_url": "https://api.github.com/users/cmutel/orgs", "repos_url": "https://api.github.com/users/cmutel/repos", "events_url": "https://api.github.com/users/cmutel/events{/privacy}", "received_events_url": "https://api.github.com/users/cmutel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-02-04T10:19:29Z", "updated_at": "2015-02-06T01:17:22Z", "closed_at": "2015-02-06T01:17:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Not sure what you think is appropriate, but something like the following would be nice:\n\n```\nclassifiers=[\n  'Intended Audience :: End Users/Desktop',\n  'Intended Audience :: Developers',\n  'Intended Audience :: Science/Research',\n  'License :: OSI Approved :: BSD License',\n  'Operating System :: MacOS :: MacOS X',\n  'Operating System :: Microsoft :: Windows',\n  'Operating System :: POSIX',\n  'Programming Language :: Python',\n  'Programming Language :: Python :: 2.6',\n  'Programming Language :: Python :: 2.7',\n  'Programming Language :: Python :: 3.2',\n  'Programming Language :: Python :: 3.3',\n ],\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/7", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/7/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/7/events", "html_url": "https://github.com/newville/asteval/issues/7", "id": 41565120, "node_id": "MDU6SXNzdWU0MTU2NTEyMA==", "number": 7, "title": "Disable warning when numpy is not available", "user": {"login": "bblanchon", "id": 5462433, "node_id": "MDQ6VXNlcjU0NjI0MzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/5462433?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblanchon", "html_url": "https://github.com/bblanchon", "followers_url": "https://api.github.com/users/bblanchon/followers", "following_url": "https://api.github.com/users/bblanchon/following{/other_user}", "gists_url": "https://api.github.com/users/bblanchon/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblanchon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblanchon/subscriptions", "organizations_url": "https://api.github.com/users/bblanchon/orgs", "repos_url": "https://api.github.com/users/bblanchon/repos", "events_url": "https://api.github.com/users/bblanchon/events{/privacy}", "received_events_url": "https://api.github.com/users/bblanchon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-08-30T15:09:46Z", "updated_at": "2015-06-07T15:51:51Z", "closed_at": "2015-06-07T15:51:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "> Warning: numpy not available... functionality will be limited.\n\nThis is quite annoying, especially when you call `Interpreter(use_numpy=False)`.\nI think it should only appear when `use_numpy=True`\n\nAn alternative would be to set the default to `use_numpy=False` and throw an error if `use_numpy=True` and the module is not installed.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/6", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/6/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/6/events", "html_url": "https://github.com/newville/asteval/issues/6", "id": 39083568, "node_id": "MDU6SXNzdWUzOTA4MzU2OA==", "number": 6, "title": "Sandbox easily violated with getattr", "user": {"login": "jkbbwr", "id": 307167, "node_id": "MDQ6VXNlcjMwNzE2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/307167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkbbwr", "html_url": "https://github.com/jkbbwr", "followers_url": "https://api.github.com/users/jkbbwr/followers", "following_url": "https://api.github.com/users/jkbbwr/following{/other_user}", "gists_url": "https://api.github.com/users/jkbbwr/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkbbwr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkbbwr/subscriptions", "organizations_url": "https://api.github.com/users/jkbbwr/orgs", "repos_url": "https://api.github.com/users/jkbbwr/repos", "events_url": "https://api.github.com/users/jkbbwr/events{/privacy}", "received_events_url": "https://api.github.com/users/jkbbwr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-07-30T11:38:19Z", "updated_at": "2014-08-01T01:58:29Z", "closed_at": "2014-08-01T01:58:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using getattr to climb out of your sandbox, delete the unsafe attributes, get an import function, then give myself a native python shell outside your sandbox.\n\n```\ndef test(): pass\ngetattr(getattr(test.interpreter.parse, \"__func__\"), \"func_globals\")[\"UNSAFE_ATTRS\"] = []\ntest.interpreter.parse.__func__.func_globals[\"__builtins__\"][\"__import__\"](\"subprocess\").call(\"python\")\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/5", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/5/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/5/events", "html_url": "https://github.com/newville/asteval/issues/5", "id": 18026242, "node_id": "MDU6SXNzdWUxODAyNjI0Mg==", "number": 5, "title": "0.9.1 released on PyPi", "user": {"login": "oxtopus", "id": 326528, "node_id": "MDQ6VXNlcjMyNjUyOA==", "avatar_url": "https://avatars0.githubusercontent.com/u/326528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxtopus", "html_url": "https://github.com/oxtopus", "followers_url": "https://api.github.com/users/oxtopus/followers", "following_url": "https://api.github.com/users/oxtopus/following{/other_user}", "gists_url": "https://api.github.com/users/oxtopus/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxtopus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxtopus/subscriptions", "organizations_url": "https://api.github.com/users/oxtopus/orgs", "repos_url": "https://api.github.com/users/oxtopus/repos", "events_url": "https://api.github.com/users/oxtopus/events{/privacy}", "received_events_url": "https://api.github.com/users/oxtopus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-08-13T22:57:51Z", "updated_at": "2013-08-14T18:40:49Z", "closed_at": "2013-08-14T18:40:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Current version on PyPi is 0.9 as of 2012-04-09.  Is there a timeline for 0.9.1?  If it's not ready, can current master at least be released as 0.9.1-dev to indicate that it's the in-progress development version?\n\nI ran into an issue where a build of another project was failing in some circumstances because of the `import numpy` statement that has since been removed in 0.9.1, but not released.  I was able to resolve it by building and installing from source, but it would be nice if it were on PyPi so it would work nicely with pip.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/3", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/3/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/3/events", "html_url": "https://github.com/newville/asteval/issues/3", "id": 7847162, "node_id": "MDU6SXNzdWU3ODQ3MTYy", "number": 3, "title": "How would you handle infinite loops?", "user": {"login": "voidfiles", "id": 1764, "node_id": "MDQ6VXNlcjE3NjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1764?v=4", "gravatar_id": "", "url": "https://api.github.com/users/voidfiles", "html_url": "https://github.com/voidfiles", "followers_url": "https://api.github.com/users/voidfiles/followers", "following_url": "https://api.github.com/users/voidfiles/following{/other_user}", "gists_url": "https://api.github.com/users/voidfiles/gists{/gist_id}", "starred_url": "https://api.github.com/users/voidfiles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/voidfiles/subscriptions", "organizations_url": "https://api.github.com/users/voidfiles/orgs", "repos_url": "https://api.github.com/users/voidfiles/repos", "events_url": "https://api.github.com/users/voidfiles/events{/privacy}", "received_events_url": "https://api.github.com/users/voidfiles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2012-10-25T01:59:38Z", "updated_at": "2016-08-23T15:02:19Z", "closed_at": "2012-10-27T22:04:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am thinking about using this in a web service and I want to like put a timer on the execution. I was wondering if you have any ideas on how to handle this? \n\nOne idea I had was to open a thread, or use a subprocess call and then set a timer. Wondering if you had any thoughts?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/2", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/2/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/2/events", "html_url": "https://github.com/newville/asteval/issues/2", "id": 3934664, "node_id": "MDU6SXNzdWUzOTM0NjY0", "number": 2, "title": "raise differs for Python 3", "user": {"login": "newville", "id": 304251, "node_id": "MDQ6VXNlcjMwNDI1MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/304251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newville", "html_url": "https://github.com/newville", "followers_url": "https://api.github.com/users/newville/followers", "following_url": "https://api.github.com/users/newville/following{/other_user}", "gists_url": "https://api.github.com/users/newville/gists{/gist_id}", "starred_url": "https://api.github.com/users/newville/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newville/subscriptions", "organizations_url": "https://api.github.com/users/newville/orgs", "repos_url": "https://api.github.com/users/newville/repos", "events_url": "https://api.github.com/users/newville/events{/privacy}", "received_events_url": "https://api.github.com/users/newville/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2012-04-02T21:16:48Z", "updated_at": "2012-04-08T00:21:58Z", "closed_at": "2012-04-08T00:21:58Z", "author_association": "OWNER", "active_lock_reason": null, "body": "looks like raise parses differently in python3 \n\nPython2:\n\n ast.dump(ast.parse(\"raise NameError('foo')\"))\n\"Module(body=[Raise(type=Call(func=Name(id='NameError', ctx=Load()), args=[Str(s='foo')], keywords=[], starargs=None, kwargs=None), inst=None, tback=None)])\"\n\nPython3\n\"Module(body=[Raise(exc=Call(func=Name(id='NameError', ctx=Load()), args=[Str(s='foo')], keywords=[], starargs=None, kwargs=None), cause=None)])\"\n\n(that is 'type' vs 'exc').... must look for both cases\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/newville/asteval/issues/1", "repository_url": "https://api.github.com/repos/newville/asteval", "labels_url": "https://api.github.com/repos/newville/asteval/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/newville/asteval/issues/1/comments", "events_url": "https://api.github.com/repos/newville/asteval/issues/1/events", "html_url": "https://github.com/newville/asteval/issues/1", "id": 3934545, "node_id": "MDU6SXNzdWUzOTM0NTQ1", "number": 1, "title": "function def differs for python 3", "user": {"login": "newville", "id": 304251, "node_id": "MDQ6VXNlcjMwNDI1MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/304251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newville", "html_url": "https://github.com/newville", "followers_url": "https://api.github.com/users/newville/followers", "following_url": "https://api.github.com/users/newville/following{/other_user}", "gists_url": "https://api.github.com/users/newville/gists{/gist_id}", "starred_url": "https://api.github.com/users/newville/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newville/subscriptions", "organizations_url": "https://api.github.com/users/newville/orgs", "repos_url": "https://api.github.com/users/newville/repos", "events_url": "https://api.github.com/users/newville/events{/privacy}", "received_events_url": "https://api.github.com/users/newville/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2012-04-02T21:10:23Z", "updated_at": "2012-04-08T00:22:47Z", "closed_at": "2012-04-08T00:22:47Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Function arguments can be annotated 'args' in Python 3, and so parse differently.   Need to look for / handle 'arg' nodes.\n\nPython2:\n\nast.dump(ast.parse(\"\"\"def f(x):\n...     print(x)\n... \"\"\"))\n\"Module(body=[FunctionDef(name='f', args=arguments(args=[Name(id='x', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Print(dest=None, values=[Name(id='x', ctx=Load())], nl=True)], decorator_list=[])])\"\n\nPython 3:\n\n> > > ax = ast.parse(\"\"\"def f(x):  \n> > > ...     print(x)  \n> > > ... \"\"\")\n> > > ast.dump(ax)\n> > > \"Module(body=[FunctionDef(name='f', args=arguments(args=[arg(arg='x', annotation=None)], vararg=None, varargannotation=None, kwonlyargs=[], kwarg=None, kwargannotation=None, defaults=[], kw_defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[], starargs=None, kwargs=None))], decorator_list=[], returns=None)])\"\n", "performed_via_github_app": null, "score": 1.0}]}