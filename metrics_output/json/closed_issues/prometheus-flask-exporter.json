{"total_count": 54, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/70", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/70/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/70/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/70", "id": 669526823, "node_id": "MDU6SXNzdWU2Njk1MjY4MjM=", "number": 70, "title": "Add a custom function timer metric for flask restplus", "user": {"login": "shakeel-appyhigh", "id": 66372318, "node_id": "MDQ6VXNlcjY2MzcyMzE4", "avatar_url": "https://avatars1.githubusercontent.com/u/66372318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shakeel-appyhigh", "html_url": "https://github.com/shakeel-appyhigh", "followers_url": "https://api.github.com/users/shakeel-appyhigh/followers", "following_url": "https://api.github.com/users/shakeel-appyhigh/following{/other_user}", "gists_url": "https://api.github.com/users/shakeel-appyhigh/gists{/gist_id}", "starred_url": "https://api.github.com/users/shakeel-appyhigh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shakeel-appyhigh/subscriptions", "organizations_url": "https://api.github.com/users/shakeel-appyhigh/orgs", "repos_url": "https://api.github.com/users/shakeel-appyhigh/repos", "events_url": "https://api.github.com/users/shakeel-appyhigh/events{/privacy}", "received_events_url": "https://api.github.com/users/shakeel-appyhigh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-31T07:49:46Z", "updated_at": "2020-07-31T22:30:48Z", "closed_at": "2020-07-31T22:30:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI have an ML model deployed on Flask restplus which classifies incoming text and also adds some other data  through simple utility functions(without using the ML model). They are running at the same endpoint. I was able to run the default metrics and view them in in built prometheus dashboard and also grafana. But I also want to view a histogram of the time each of the functions take to process the request. Is it possible to make a histogram for viewing the time taken to process the request at the same endpoint but at different points within that endpoint?\r\n\r\nI want to do something like: \r\n```\r\nstart = time.time()\r\n//ml inference\r\nend = time.time()\r\n//histogram plot(end-start, default buckets)\r\n\r\nstart = time.time()\r\n//utility functions\r\nend = time.time()\r\n//histogram plot(end-start, default buckets)\r\n\r\n```\r\nand view these plots on the grafana dashboard.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/67", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/67/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/67/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/67", "id": 663119264, "node_id": "MDU6SXNzdWU2NjMxMTkyNjQ=", "number": 67, "title": "ConnexionPrometheusMetrics - less metrics?", "user": {"login": "larrycai", "id": 106192, "node_id": "MDQ6VXNlcjEwNjE5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/106192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/larrycai", "html_url": "https://github.com/larrycai", "followers_url": "https://api.github.com/users/larrycai/followers", "following_url": "https://api.github.com/users/larrycai/following{/other_user}", "gists_url": "https://api.github.com/users/larrycai/gists{/gist_id}", "starred_url": "https://api.github.com/users/larrycai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/larrycai/subscriptions", "organizations_url": "https://api.github.com/users/larrycai/orgs", "repos_url": "https://api.github.com/users/larrycai/repos", "events_url": "https://api.github.com/users/larrycai/events{/privacy}", "received_events_url": "https://api.github.com/users/larrycai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-21T15:45:41Z", "updated_at": "2020-07-22T20:20:11Z", "closed_at": "2020-07-22T20:20:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried the `connexion-pydantic` example in docker env.\r\n\r\n```\r\ncd connexion-pydantic\r\ndocker build -f Dockerfile -t connexion-pydantic ../../.\r\ndocker run -d --name connexion-pydantic -p 4000:4000 connexion-pydantic\r\n````\r\n\r\nAnd when I checked the `http://localhost:4000/metrics`, i only got some metrics\r\n\r\n````\r\n# HELP python_gc_objects_collected_total Objects collected during gc\r\n# TYPE python_gc_objects_collected_total counter\r\npython_gc_objects_collected_total{generation=\"0\"} 1112.0\r\n...\r\ntest_by_status_sum{code=\"200\"} 0.00013733200103160925\r\n# HELP test_by_status_created Test Request latencies by status\r\n# TYPE test_by_status_created gauge\r\ntest_by_status_created{code=\"200\"} 1.5953459881785243e+09\r\n````\r\n\r\nIf it is normal flask application, I got lots of metrics with `flask_` like\r\n\r\n````\r\n# HELP flask_http_request_duration_seconds Flask HTTP request duration in seconds\r\n# TYPE flask_http_request_duration_seconds histogram\r\nflask_http_request_duration_seconds_bucket{le=\"0.005\",method=\"GET\",path=\"/\",status=\"200\"} 1.0\r\nflask_http_request_duration_seconds_bucket{le=\"0.01\",method=\"GET\",path=\"/\",status=\"200\"} 1.0\r\nflask_http_request_duration_seconds_bucket{le=\"0.025\",method=\"GET\",path=\"/\",status=\"200\"} 2.0\r\nflask_http_request_duration_seconds_bucket{le=\"0.05\",method=\"GET\",path=\"/\",status=\"200\"} 2.0\r\nflask_http_request_duration_seconds_bucket{le=\"1.0\",method=\"GET\",path=\"/\",status=\"200\"} 2.0\r\n````\r\n\r\nAnything I missed here\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/65", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/65/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/65/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/65", "id": 657909026, "node_id": "MDU6SXNzdWU2NTc5MDkwMjY=", "number": 65, "title": "No metrics access", "user": {"login": "Younes-Benotmane", "id": 55446948, "node_id": "MDQ6VXNlcjU1NDQ2OTQ4", "avatar_url": "https://avatars3.githubusercontent.com/u/55446948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Younes-Benotmane", "html_url": "https://github.com/Younes-Benotmane", "followers_url": "https://api.github.com/users/Younes-Benotmane/followers", "following_url": "https://api.github.com/users/Younes-Benotmane/following{/other_user}", "gists_url": "https://api.github.com/users/Younes-Benotmane/gists{/gist_id}", "starred_url": "https://api.github.com/users/Younes-Benotmane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Younes-Benotmane/subscriptions", "organizations_url": "https://api.github.com/users/Younes-Benotmane/orgs", "repos_url": "https://api.github.com/users/Younes-Benotmane/repos", "events_url": "https://api.github.com/users/Younes-Benotmane/events{/privacy}", "received_events_url": "https://api.github.com/users/Younes-Benotmane/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-16T07:03:23Z", "updated_at": "2020-07-17T09:09:18Z", "closed_at": "2020-07-17T09:00:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, does anyone have any idea how to use this export with more than one object.\r\nLike in this example:\r\n```\r\napp = Flask(__name__)\r\napp.config['JSONIFY_PRETTYPRINT_REGULAR'] = True\r\nbot_server_webhook = Blueprint('bot_server_webhook', __name__, url_prefix='/webhooks/chatroom')\r\nCORS(bot_server_webhook)\r\nserver_webhook = Blueprint('server_webhook', __name__)\r\nCORS(server_webhook)\r\n```\r\nthe access to the api is operational via resources. But when I try to add resources for monitoring (URL/metrics). I don't have access to anything\r\nit's for an api contained in docker. I'm not a developer, I'm an admin sys. If anyone has an idea i'm interested.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/64", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/64/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/64/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/64", "id": 655705170, "node_id": "MDU6SXNzdWU2NTU3MDUxNzA=", "number": 64, "title": "ConnexionPrometheusMetrics - mimetype", "user": {"login": "Echronix", "id": 23086778, "node_id": "MDQ6VXNlcjIzMDg2Nzc4", "avatar_url": "https://avatars2.githubusercontent.com/u/23086778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Echronix", "html_url": "https://github.com/Echronix", "followers_url": "https://api.github.com/users/Echronix/followers", "following_url": "https://api.github.com/users/Echronix/following{/other_user}", "gists_url": "https://api.github.com/users/Echronix/gists{/gist_id}", "starred_url": "https://api.github.com/users/Echronix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Echronix/subscriptions", "organizations_url": "https://api.github.com/users/Echronix/orgs", "repos_url": "https://api.github.com/users/Echronix/repos", "events_url": "https://api.github.com/users/Echronix/events{/privacy}", "received_events_url": "https://api.github.com/users/Echronix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-13T09:39:07Z", "updated_at": "2020-07-22T14:06:32Z", "closed_at": "2020-07-22T13:53:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey there, \r\nsorry that I bother you again. The new Connexion release works mostly fine with my Code but I discovered a new problem. \r\nCalling the get_response method from Connexion without mimetype as parameter leads to the warning: \r\n```python:\r\nFutureWarning: Implicit (flask) JSON serialization will change in the next major version. This is triggered because a response body is being serialized as JSON even though the mimetype is not a JSON type. This will be replaced by something that is mimetype-specific and may raise an error instead of silently converting everything to JSON. Please make sure to specify media/mime types in your specs.\r\n  warnings.warn(\r\n```\r\nThat also leads to the problem, that the response.json part is equal None and API response can only be found in the response.data part.\r\n\r\n\r\n# Setup:\r\nUpdated example from last time:\r\n```python:\r\nfrom pydantic.dataclasses import dataclass\r\nfrom foo.main import metrics\r\n\r\n\r\n@dataclass\r\nclass Info:\r\n    foo: str\r\n\r\n\r\n@metrics.histogram(\"foo\", \"bar\", labels={\"foo\": lambda: \"bar\"})\r\ndef test() -> Info:\r\n    return Info('Test version')\r\n```\r\n\r\n```python:\r\nimport connexion\r\nfrom prometheus_flask_exporter import ConnexionPrometheusMetrics\r\n\r\napp = connexion.App(__name__)\r\nmetrics = ConnexionPrometheusMetrics(app, export_defaults=None, excluded_paths=\".\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.add_api('my_api.yaml')\r\n    app.app.run(port=5000, use_reloader=False)\r\n\r\n```\r\n\r\n```python:\r\nopenapi: 3.0.0\r\ninfo:\r\n  version: 1.0.0\r\n  title: Test\r\n\r\npaths:\r\n  /test:\r\n    get:\r\n      operationId: endpoint.test\r\n      responses:\r\n        '200':\r\n          description: Test\r\n```\r\n\r\n## Expected behaviour:\r\n```code:\r\ncurl -v GET \"http://127.0.0.1:5000/test\" \r\n* Could not resolve host: GET\r\n* Closing connection 0\r\ncurl: (6) Could not resolve host: GET\r\n*   Trying 127.0.0.1:5000...\r\n* Connected to 127.0.0.1 (127.0.0.1) port 5000 (#1)\r\n> GET /test HTTP/1.1\r\n> Host: 127.0.0.1:5000\r\n> User-Agent: curl/7.71.1\r\n> Accept: */*\r\n> \r\n* Mark bundle as not supporting multiuse\r\n* HTTP 1.0, assume close after body\r\n< HTTP/1.0 200 OK\r\n< Content-Type: application/json\r\n< Content-Length: 28\r\n< Server: Werkzeug/1.0.1 Python/3.8.3\r\n< Date: Mon, 13 Jul 2020 09:34:18 GMT\r\n< \r\n{\r\n  \"foo\": \"Test version\"\r\n}\r\n* Closing connection 1\r\n```\r\n## Actual behaviour:\r\n```code:\r\ncurl -v GET \"http://127.0.0.1:5000/test\" \r\n* Could not resolve host: GET\r\n* Closing connection 0\r\ncurl: (6) Could not resolve host: GET\r\n*   Trying 127.0.0.1:5000...\r\n* Connected to 127.0.0.1 (127.0.0.1) port 5000 (#1)\r\n> GET /test HTTP/1.1\r\n> Host: 127.0.0.1:5000\r\n> User-Agent: curl/7.71.1\r\n> Accept: */*\r\n> \r\n* Mark bundle as not supporting multiuse\r\n* HTTP 1.0, assume close after body\r\n< HTTP/1.0 200 OK\r\n< Content-Type: text/html; charset=utf-8\r\n< Content-Length: 28\r\n< Server: Werkzeug/1.0.1 Python/3.8.3\r\n< Date: Mon, 13 Jul 2020 09:34:23 GMT\r\n< \r\n{\r\n  \"foo\": \"Test version\"\r\n}\r\n* Closing connection 1\r\n```\r\n\r\nThe fact that the content-type is not application/json sadly breaks some API callers.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/62", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/62/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/62/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/62", "id": 654601906, "node_id": "MDU6SXNzdWU2NTQ2MDE5MDY=", "number": 62, "title": "The function either returned None or ended without a return statement while using with flask_restful", "user": {"login": "paurakhsharma", "id": 20378877, "node_id": "MDQ6VXNlcjIwMzc4ODc3", "avatar_url": "https://avatars3.githubusercontent.com/u/20378877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paurakhsharma", "html_url": "https://github.com/paurakhsharma", "followers_url": "https://api.github.com/users/paurakhsharma/followers", "following_url": "https://api.github.com/users/paurakhsharma/following{/other_user}", "gists_url": "https://api.github.com/users/paurakhsharma/gists{/gist_id}", "starred_url": "https://api.github.com/users/paurakhsharma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paurakhsharma/subscriptions", "organizations_url": "https://api.github.com/users/paurakhsharma/orgs", "repos_url": "https://api.github.com/users/paurakhsharma/repos", "events_url": "https://api.github.com/users/paurakhsharma/events{/privacy}", "received_events_url": "https://api.github.com/users/paurakhsharma/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-07-10T08:18:09Z", "updated_at": "2020-07-22T14:19:00Z", "closed_at": "2020-07-10T14:17:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "`flask_restful` supports returning `None` from the view function, but I am getting error this error when I use `metrics` for endpoint.\r\n\r\ne.g\r\n\r\n```python\r\n\r\nfrom flask_restful import Resource\r\n\r\nby_path_counter = metrics.counter(\r\n    'by_path_counter', 'Request count by request paths',\r\n    labels={'path': lambda: request.path}\r\n)\r\n\r\nclass FoodApi(Resource):\r\n    @by_path_counter\r\n    def post(self):\r\n        create_food()\r\n        return None, 200\r\n```\r\n\r\nIt works fine if I don't use `@by_path_counter` decorator, and returns `null` in the response.\r\n\r\nBut when I add the decorator, I get this error.\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/wartner/.local/share/virtualenvs/config_service-TDer8cy_/lib/python3.8/site-packages/flask/app.py\", line 1950, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/home/wartner/.local/share/virtualenvs/config_service-TDer8cy_/lib/python3.8/site-packages/flask/app.py\", line 1936, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/home/wartner/.local/share/virtualenvs/config_service-TDer8cy_/lib/python3.8/site-packages/flask_restful/__init__.py\", line 468, in wrapper\r\n    resp = resource(*args, **kwargs)\r\n  File \"/home/wartner/.local/share/virtualenvs/config_service-TDer8cy_/lib/python3.8/site-packages/flask/views.py\", line 89, in view\r\n    return self.dispatch_request(*args, **kwargs)\r\n  File \"/home/wartner/.local/share/virtualenvs/config_service-TDer8cy_/lib/python3.8/site-packages/flask_restful/__init__.py\", line 583, in dispatch_request\r\n    resp = meth(*args, **kwargs)\r\n  File \"/home/wartner/.local/share/virtualenvs/config_service-TDer8cy_/lib/python3.8/site-packages/prometheus_flask_exporter/__init__.py\", line 633, in func\r\n    response = make_response(response)\r\n  File \"/home/wartner/.local/share/virtualenvs/config_service-TDer8cy_/lib/python3.8/site-packages/flask/helpers.py\", line 223, in make_response\r\n    return current_app.make_response(args)\r\n  File \"/home/wartner/.local/share/virtualenvs/config_service-TDer8cy_/lib/python3.8/site-packages/flask/app.py\", line 2097, in make_response\r\n    raise TypeError(\r\nTypeError: The view function did not return a valid response. The function either returned None or ended without a return statement.\r\n```\r\n\r\nIs there any way, I can work around this? (I have to return `None`)\r\n\r\nAny kind of help will be highly appreciated, thank you :slightly_smiling_face: \r\n\r\nNote: It works fine on other view functions where I return not `None` values", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/60", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/60/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/60/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/60", "id": 653755625, "node_id": "MDU6SXNzdWU2NTM3NTU2MjU=", "number": 60, "title": "adding account info into labels", "user": {"login": "bilalbayasut", "id": 3622158, "node_id": "MDQ6VXNlcjM2MjIxNTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3622158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bilalbayasut", "html_url": "https://github.com/bilalbayasut", "followers_url": "https://api.github.com/users/bilalbayasut/followers", "following_url": "https://api.github.com/users/bilalbayasut/following{/other_user}", "gists_url": "https://api.github.com/users/bilalbayasut/gists{/gist_id}", "starred_url": "https://api.github.com/users/bilalbayasut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bilalbayasut/subscriptions", "organizations_url": "https://api.github.com/users/bilalbayasut/orgs", "repos_url": "https://api.github.com/users/bilalbayasut/repos", "events_url": "https://api.github.com/users/bilalbayasut/events{/privacy}", "received_events_url": "https://api.github.com/users/bilalbayasut/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-07-09T04:34:31Z", "updated_at": "2020-07-11T10:20:36Z", "closed_at": "2020-07-10T14:17:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "setup:\r\n1. using make_app() factory pattern\r\n\r\nquestion:\r\n1. I want to add a label containing account_id :\r\n```\r\ndef make_app():\r\n   metrics._static_labels = {\"account_id\": current_user.id}\r\n   metrics.init_app(app)\r\n   return app\r\n```\r\nbut obviously, I get `current_user` :`None` because metrics.init_app(app) and make_app() is called before the app get account info .\r\n\r\nany idea on how to set label containing account_id in make_app() ?\r\n\r\nI have tried using `lambda: request.account.id` but it doesn't give me the result, rather it gave a function object\r\n\r\n1. I have tried using `lambda: request.account.id` -> returns `<function make_app.<locals>.<lambda> at 0x7f28b6d4b730>`\r\n2. tried `PrometheusMetrics(app, group_by=custom_rule)` -> but this is about we add another default metrics, not a label.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/59", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/59/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/59/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/59", "id": 647093513, "node_id": "MDU6SXNzdWU2NDcwOTM1MTM=", "number": 59, "title": "corrupted buffer", "user": {"login": "DeoLeung", "id": 3764720, "node_id": "MDQ6VXNlcjM3NjQ3MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3764720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeoLeung", "html_url": "https://github.com/DeoLeung", "followers_url": "https://api.github.com/users/DeoLeung/followers", "following_url": "https://api.github.com/users/DeoLeung/following{/other_user}", "gists_url": "https://api.github.com/users/DeoLeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeoLeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeoLeung/subscriptions", "organizations_url": "https://api.github.com/users/DeoLeung/orgs", "repos_url": "https://api.github.com/users/DeoLeung/repos", "events_url": "https://api.github.com/users/DeoLeung/events{/privacy}", "received_events_url": "https://api.github.com/users/DeoLeung/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-29T03:55:44Z", "updated_at": "2020-08-15T03:11:08Z", "closed_at": "2020-07-10T14:22:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "seems to be problem of the low level library, shall this library handle this exception?\r\n\r\n```bash\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.8/site-packages/prometheus_flask_exporter/__init__.py\", line 567, in func\r\n    response = f(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/prometheus_flask_exporter/__init__.py\", line 635, in func\r\n    return f(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/prometheus_flask_exporter/__init__.py\", line 219, in prometheus_metrics\r\n    return generate_latest(registry), 200, headers\r\n  File \"/usr/local/lib/python3.8/site-packages/prometheus_client/exposition.py\", line 106, in generate_latest\r\n    for metric in registry.collect():\r\n  File \"/usr/local/lib/python3.8/site-packages/prometheus_client/registry.py\", line 82, in collect\r\n    for metric in collector.collect():\r\n  File \"/usr/local/lib/python3.8/site-packages/prometheus_client/multiprocess.py\", line 149, in collect\r\n    return self.merge(files, accumulate=True)\r\n  File \"/usr/local/lib/python3.8/site-packages/prometheus_client/multiprocess.py\", line 41, in merge\r\n    metrics = MultiProcessCollector._read_metrics(files)\r\n  File \"/usr/local/lib/python3.8/site-packages/prometheus_client/multiprocess.py\", line 61, in _read_metrics\r\n    file_values = MmapedDict.read_all_values_from_file(f)\r\n  File \"/usr/local/lib/python3.8/site-packages/prometheus_client/mmap_dict.py\", line 87, in read_all_values_from_file\r\n    used = _unpack_integer(data, 0)[0]\r\nstruct.error: unpack_from requires a buffer of at least 4 bytes for unpacking 4 bytes at offset 0 (actual buffer size is 0)\r\n```\r\n\r\n\r\nmaybe happen because we use docker to run our flask app, since writing files to disk invoke a lot of disk io\r\nwe map the folder into `tmpfs`\r\n\r\n```yml\r\n  environment: \r\n    prometheus_multiproc_dir: /tmp\r\n  tmpfs:\r\n    - /tmp\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/58", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/58/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/58/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/58", "id": 644589379, "node_id": "MDU6SXNzdWU2NDQ1ODkzNzk=", "number": 58, "title": "Unable to have common metric key with labels to separate type over different routes", "user": {"login": "warmfusion", "id": 2294568, "node_id": "MDQ6VXNlcjIyOTQ1Njg=", "avatar_url": "https://avatars1.githubusercontent.com/u/2294568?v=4", "gravatar_id": "", "url": "https://api.github.com/users/warmfusion", "html_url": "https://github.com/warmfusion", "followers_url": "https://api.github.com/users/warmfusion/followers", "following_url": "https://api.github.com/users/warmfusion/following{/other_user}", "gists_url": "https://api.github.com/users/warmfusion/gists{/gist_id}", "starred_url": "https://api.github.com/users/warmfusion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/warmfusion/subscriptions", "organizations_url": "https://api.github.com/users/warmfusion/orgs", "repos_url": "https://api.github.com/users/warmfusion/repos", "events_url": "https://api.github.com/users/warmfusion/events{/privacy}", "received_events_url": "https://api.github.com/users/warmfusion/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-24T12:50:37Z", "updated_at": "2020-07-10T14:21:17Z", "closed_at": "2020-07-10T14:21:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n\r\nSetup;\r\n1. Two (or more) API handling methods with their own routes\r\n2. metric registered with common name `auditls_api`\r\n3. use of `type: label` to separate values in prometheus later\r\n\r\n``` python\r\n@app.route(\"/api/v1/dns/<target>\", methods=[\"GET\"])\r\n@metrics.counter('auditls_api', 'API Calls for DNS information',\r\n         labels={'type': 'dns', 'target': lambda: request.view_args['target']})\r\ndef get_dns(target):\r\n  #do athing\r\n\r\n@app.route(\"/api/v1/http/<target>\", methods=[\"GET\"])\r\n@metrics.counter('auditls_api', 'API Calls for HTTP response information',\r\n         labels={'type': 'http', 'target': lambda: request.view_args['target']})\r\ndef get_http_status(target):\r\n   # do different thing\r\n```\r\n\r\n## Expected\r\n\r\nMetrics are collected for each API route, and exposed to prometheus such that I might do queries like  `sum by (type)(rate(autidls_api_total[5m])` so I can view the relative distribution over all the `types` of API call being handled.\r\n\r\nAt the moment, it seems the proposed implementation is to have `auditls_api_by_dns_total` and `auditls_api_by_http` as seperate metrics, but i can't then group those back together.\r\n\r\n## Actual\r\n\r\nError: `2020-06-24T12:25:00.277947666Z ValueError: Duplicated timeseries in CollectorRegistry: {'auditls_api_created', 'auditls_api_total'}\r\n`\r\n\r\n---\r\n\r\nDo you have any guidance on what I should be doing here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/56", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/56/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/56/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/56", "id": 640263074, "node_id": "MDU6SXNzdWU2NDAyNjMwNzQ=", "number": 56, "title": "I want to pass a metric to the gauge", "user": {"login": "rohanmohapatra", "id": 31756343, "node_id": "MDQ6VXNlcjMxNzU2MzQz", "avatar_url": "https://avatars2.githubusercontent.com/u/31756343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohanmohapatra", "html_url": "https://github.com/rohanmohapatra", "followers_url": "https://api.github.com/users/rohanmohapatra/followers", "following_url": "https://api.github.com/users/rohanmohapatra/following{/other_user}", "gists_url": "https://api.github.com/users/rohanmohapatra/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohanmohapatra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohanmohapatra/subscriptions", "organizations_url": "https://api.github.com/users/rohanmohapatra/orgs", "repos_url": "https://api.github.com/users/rohanmohapatra/repos", "events_url": "https://api.github.com/users/rohanmohapatra/events{/privacy}", "received_events_url": "https://api.github.com/users/rohanmohapatra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-17T08:52:12Z", "updated_at": "2020-07-10T14:20:47Z", "closed_at": "2020-07-10T14:20:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to create a gauge metric for a value?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/55", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/55/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/55/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/55", "id": 640249264, "node_id": "MDU6SXNzdWU2NDAyNDkyNjQ=", "number": 55, "title": "_total suffix getting added to metric.counter", "user": {"login": "rohanmohapatra", "id": 31756343, "node_id": "MDQ6VXNlcjMxNzU2MzQz", "avatar_url": "https://avatars2.githubusercontent.com/u/31756343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohanmohapatra", "html_url": "https://github.com/rohanmohapatra", "followers_url": "https://api.github.com/users/rohanmohapatra/followers", "following_url": "https://api.github.com/users/rohanmohapatra/following{/other_user}", "gists_url": "https://api.github.com/users/rohanmohapatra/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohanmohapatra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohanmohapatra/subscriptions", "organizations_url": "https://api.github.com/users/rohanmohapatra/orgs", "repos_url": "https://api.github.com/users/rohanmohapatra/repos", "events_url": "https://api.github.com/users/rohanmohapatra/events{/privacy}", "received_events_url": "https://api.github.com/users/rohanmohapatra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-17T08:32:04Z", "updated_at": "2020-06-17T08:50:01Z", "closed_at": "2020-06-17T08:50:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nmetrics.register_default(\r\n    metrics.counter(\r\n        'by_path_counter', 'Request count by request paths',\r\n        labels={'path': lambda: request.path}\r\n    )\r\n)\r\n```\r\nWhen I try doing this, the metric comes as `by_path_counter_total`, I don't understand why that is happening?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/54", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/54/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/54/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/54", "id": 631633960, "node_id": "MDU6SXNzdWU2MzE2MzM5NjA=", "number": 54, "title": "http.HTTPStatus not cast to int in status field", "user": {"login": "arthurlm", "id": 1571398, "node_id": "MDQ6VXNlcjE1NzEzOTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1571398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arthurlm", "html_url": "https://github.com/arthurlm", "followers_url": "https://api.github.com/users/arthurlm/followers", "following_url": "https://api.github.com/users/arthurlm/following{/other_user}", "gists_url": "https://api.github.com/users/arthurlm/gists{/gist_id}", "starred_url": "https://api.github.com/users/arthurlm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arthurlm/subscriptions", "organizations_url": "https://api.github.com/users/arthurlm/orgs", "repos_url": "https://api.github.com/users/arthurlm/repos", "events_url": "https://api.github.com/users/arthurlm/events{/privacy}", "received_events_url": "https://api.github.com/users/arthurlm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-05T14:25:22Z", "updated_at": "2020-06-11T11:57:37Z", "closed_at": "2020-06-11T11:45:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nI have the following code that use `http` module for readability purposes.\r\n\r\n```python\r\nimport http\r\n\r\nfrom flask import Flask\r\nfrom prometheus_flask_exporter import PrometheusMetrics\r\n\r\napp = Flask(\"app\")\r\nmetrics = PrometheusMetrics(app)\r\n\r\n@app.route(\"/\")\r\ndef index_json_no_content():\r\n    return {}, http.HTTPStatus.NO_CONTENT\r\n\r\n@app.route(\"/json\")\r\ndef json_route():\r\n    return {\"foo\": \"bar\"}\r\n\r\nif __name__ == \"__main__\":\r\n    app.run()\r\n```\r\n\r\nFlask perfectly understand `http.HTTPStatus`. It is an `enum.IntEnum`, so it is cast as `int` implicitly.\r\nSee bellow curl request / response:\r\n\r\n```\r\n> GET / HTTP/1.1\r\n> Host: localhost:5000\r\n> User-Agent: curl/7.58.0\r\n> Accept: */*\r\n\r\n< HTTP/1.0 204 NO CONTENT\r\n< Content-Type: application/json\r\n< Server: Werkzeug/1.0.1 Python/3.7.4\r\n< Date: Fri, 05 Jun 2020 14:01:02 GMT\r\n```\r\n\r\nHowever, metrics generated does not cast `response.status_code` as `int`.\r\nSee:\r\n\r\n- https://github.com/rycus86/prometheus_flask_exporter/blob/bed9760b59ebd2955f68d0d0b8223ddb3c368493/prometheus_flask_exporter/__init__.py#L343\r\n- https://github.com/rycus86/prometheus_flask_exporter/blob/bed9760b59ebd2955f68d0d0b8223ddb3c368493/prometheus_flask_exporter/__init__.py#L348\r\n\r\nSo produce metrics are mixing `int` and `str` status_code.\r\nSee:\r\n\r\n```\r\nflask_http_request_duration_seconds_bucket{le=\"0.05\",method=\"GET\",path=\"/\",status=\"HTTPStatus.NO_CONTENT\"} 2.0\r\nflask_http_request_duration_seconds_created{method=\"GET\",path=\"/json\",status=\"200\"} 1.5913664307018697e+09\r\n```\r\n\r\nIs it possible to cast status_code as `int`, so flask user can use `http` module (or whatever class to implement `__int__`) ?\r\nOr is there any other better way to let user be able to use `http` module and keep consistent results ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/53", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/53/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/53/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/53", "id": 630965706, "node_id": "MDU6SXNzdWU2MzA5NjU3MDY=", "number": 53, "title": "Love the tool, but one big problem, disk usage", "user": {"login": "posix4e", "id": 806363, "node_id": "MDQ6VXNlcjgwNjM2Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/806363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/posix4e", "html_url": "https://github.com/posix4e", "followers_url": "https://api.github.com/users/posix4e/followers", "following_url": "https://api.github.com/users/posix4e/following{/other_user}", "gists_url": "https://api.github.com/users/posix4e/gists{/gist_id}", "starred_url": "https://api.github.com/users/posix4e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/posix4e/subscriptions", "organizations_url": "https://api.github.com/users/posix4e/orgs", "repos_url": "https://api.github.com/users/posix4e/repos", "events_url": "https://api.github.com/users/posix4e/events{/privacy}", "received_events_url": "https://api.github.com/users/posix4e/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-04T16:13:25Z", "updated_at": "2020-07-10T14:23:16Z", "closed_at": "2020-07-10T14:23:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I filled up my drive with gauges and counters without any other than the default configuration. It's for a very busy website and we blew through 10GB of space in one day on every node. Perhaps I have configured something incorrectly?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/51", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/51/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/51/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/51", "id": 616927087, "node_id": "MDU6SXNzdWU2MTY5MjcwODc=", "number": 51, "title": "need help on usage of the tool", "user": {"login": "lordlabakdas", "id": 1252659, "node_id": "MDQ6VXNlcjEyNTI2NTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1252659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lordlabakdas", "html_url": "https://github.com/lordlabakdas", "followers_url": "https://api.github.com/users/lordlabakdas/followers", "following_url": "https://api.github.com/users/lordlabakdas/following{/other_user}", "gists_url": "https://api.github.com/users/lordlabakdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/lordlabakdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lordlabakdas/subscriptions", "organizations_url": "https://api.github.com/users/lordlabakdas/orgs", "repos_url": "https://api.github.com/users/lordlabakdas/repos", "events_url": "https://api.github.com/users/lordlabakdas/events{/privacy}", "received_events_url": "https://api.github.com/users/lordlabakdas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-12T20:09:24Z", "updated_at": "2020-05-15T22:41:01Z", "closed_at": "2020-05-15T22:41:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a flask app running at port 5006.\r\n\r\nI have included the below information:\r\n\r\n```\r\nfrom prometheus_flask_exporter import PrometheusMetrics\r\nmetrics = PrometheusMetrics(app)\r\n@app.route('/skip')\r\n@metrics.do_not_track()\r\ndef skip():\r\n    pass  # default metrics are not collected\r\n\r\n@app.route('/<item_type>')\r\n@metrics.do_not_track()\r\n@metrics.counter('invocation_by_type', 'Number of invocations by type',\r\n         labels={'item_type': lambda: request.view_args['type']})\r\ndef by_type(item_type):\r\n    pass  # only the counter is collected, not the default metrics\r\n\r\n@app.route('/long-running')\r\n@metrics.gauge('in_progress', 'Long running requests in progress')\r\ndef long_running():\r\n    pass\r\n\r\nif __name__ == '__main__':\r\n    app.debug = False\r\n    app.run(host=\"0.0.0.0\", port=5006)\r\n@app.route('/status/<int:status>')\r\n@metrics.do_not_track()\r\n@metrics.summary('requests_by_status', 'Request latencies by status',\r\n                 labels={'status': lambda r: r.status_code})\r\n@metrics.histogram('requests_by_status_and_path', 'Request latencies by status and path',\r\n                   labels={'status': lambda r: r.status_code, 'path': lambda: request.path})\r\ndef echo_status(status):\r\n    return 'Status: %s' % status, status\r\n```\r\n\r\nI also have Prometheus running on a docker container on port 9090. I have Grafana pulling these events on a dashboard listening to events on http://localhost:9090.\r\n\r\nI dont see the activity on Flask propagating to Prometheus and Grafana. Is there something I am missing in my setup?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/50", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/50/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/50/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/50", "id": 603501291, "node_id": "MDU6SXNzdWU2MDM1MDEyOTE=", "number": 50, "title": "control metrics", "user": {"login": "jichu20", "id": 31248539, "node_id": "MDQ6VXNlcjMxMjQ4NTM5", "avatar_url": "https://avatars0.githubusercontent.com/u/31248539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jichu20", "html_url": "https://github.com/jichu20", "followers_url": "https://api.github.com/users/jichu20/followers", "following_url": "https://api.github.com/users/jichu20/following{/other_user}", "gists_url": "https://api.github.com/users/jichu20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jichu20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jichu20/subscriptions", "organizations_url": "https://api.github.com/users/jichu20/orgs", "repos_url": "https://api.github.com/users/jichu20/repos", "events_url": "https://api.github.com/users/jichu20/events{/privacy}", "received_events_url": "https://api.github.com/users/jichu20/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-20T20:07:10Z", "updated_at": "2020-04-21T20:22:41Z", "closed_at": "2020-04-21T20:22:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\r\nIs it possible to use the library to generate metrics within methods and not just as annotations?\r\n\r\nThanks!!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/49", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/49/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/49/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/49", "id": 595139381, "node_id": "MDU6SXNzdWU1OTUxMzkzODE=", "number": 49, "title": "Improvement: prometheus_multiproc_dir", "user": {"login": "cal97g", "id": 1664656, "node_id": "MDQ6VXNlcjE2NjQ2NTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1664656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cal97g", "html_url": "https://github.com/cal97g", "followers_url": "https://api.github.com/users/cal97g/followers", "following_url": "https://api.github.com/users/cal97g/following{/other_user}", "gists_url": "https://api.github.com/users/cal97g/gists{/gist_id}", "starred_url": "https://api.github.com/users/cal97g/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cal97g/subscriptions", "organizations_url": "https://api.github.com/users/cal97g/orgs", "repos_url": "https://api.github.com/users/cal97g/repos", "events_url": "https://api.github.com/users/cal97g/events{/privacy}", "received_events_url": "https://api.github.com/users/cal97g/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-06T13:56:45Z", "updated_at": "2020-04-06T14:10:00Z", "closed_at": "2020-04-06T14:09:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Could this variable not be read from the application config? You could pass this value to any child process to avoid having it set within the environment. Would be nice for tests etc.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/48", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/48/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/48/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/48", "id": 590300088, "node_id": "MDU6SXNzdWU1OTAzMDAwODg=", "number": 48, "title": "Share `metrics` object across modules", "user": {"login": "trallnag", "id": 24834206, "node_id": "MDQ6VXNlcjI0ODM0MjA2", "avatar_url": "https://avatars3.githubusercontent.com/u/24834206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trallnag", "html_url": "https://github.com/trallnag", "followers_url": "https://api.github.com/users/trallnag/followers", "following_url": "https://api.github.com/users/trallnag/following{/other_user}", "gists_url": "https://api.github.com/users/trallnag/gists{/gist_id}", "starred_url": "https://api.github.com/users/trallnag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trallnag/subscriptions", "organizations_url": "https://api.github.com/users/trallnag/orgs", "repos_url": "https://api.github.com/users/trallnag/repos", "events_url": "https://api.github.com/users/trallnag/events{/privacy}", "received_events_url": "https://api.github.com/users/trallnag/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-03-30T13:40:32Z", "updated_at": "2020-07-22T15:23:35Z", "closed_at": "2020-03-31T19:38:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, my API is spread across several Blueprints and namespaces while the `metrics` object gets instantiated in my main `app.py`. Is there a built-in way to share the object across modules, maybe something like `current_app` in Flask?\r\n\r\n`app.py`\r\n```python\r\nimport api.internal\r\nimport api.external\r\n\r\napp = Flask(__name__)\r\nmetrics = GunicornPrometheusMetrics(app)\r\n```\r\n\r\nI have seen the app factory example, but there everything is set up in its own `app_setup.py`. But I cannot import `app.py` in my APIs as this would introduce circular dependencies.\r\n\r\nAm I missing something (as a beginner) or should I just create a \"singleton\" method somewhere?\r\n\r\n```python\r\nmetrics = None\r\n\r\ndef get_current_metrics(app):\r\n    global metrics\r\n\r\n    if metrics is None and app:\r\n        metrics = GunicornPrometheusMetrics(app)\r\n        \r\n    return metrics\r\n```\r\n\r\nThanks in advance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/47", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/47/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/47/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/47", "id": 588833363, "node_id": "MDU6SXNzdWU1ODg4MzMzNjM=", "number": 47, "title": "usage of flask_exporter_info", "user": {"login": "DeoLeung", "id": 3764720, "node_id": "MDQ6VXNlcjM3NjQ3MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3764720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeoLeung", "html_url": "https://github.com/DeoLeung", "followers_url": "https://api.github.com/users/DeoLeung/followers", "following_url": "https://api.github.com/users/DeoLeung/following{/other_user}", "gists_url": "https://api.github.com/users/DeoLeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeoLeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeoLeung/subscriptions", "organizations_url": "https://api.github.com/users/DeoLeung/orgs", "repos_url": "https://api.github.com/users/DeoLeung/repos", "events_url": "https://api.github.com/users/DeoLeung/events{/privacy}", "received_events_url": "https://api.github.com/users/DeoLeung/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-27T01:56:38Z", "updated_at": "2020-05-11T00:40:47Z", "closed_at": "2020-05-11T00:40:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I would like to make use of this metrics to count the active workers under gunicorn.\r\n\r\nI use the app pattern but found that when the gunicorn re-spawn a new worker, the `pid` of the old one still being export, would you give me some idea how to achieve the counting or remove the old `pid` from the metrics?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/45", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/45/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/45/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/45", "id": 572965788, "node_id": "MDU6SXNzdWU1NzI5NjU3ODg=", "number": 45, "title": "Compatibility with Counter.count_exceptions()", "user": {"login": "Geoiv", "id": 23746462, "node_id": "MDQ6VXNlcjIzNzQ2NDYy", "avatar_url": "https://avatars2.githubusercontent.com/u/23746462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geoiv", "html_url": "https://github.com/Geoiv", "followers_url": "https://api.github.com/users/Geoiv/followers", "following_url": "https://api.github.com/users/Geoiv/following{/other_user}", "gists_url": "https://api.github.com/users/Geoiv/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geoiv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geoiv/subscriptions", "organizations_url": "https://api.github.com/users/Geoiv/orgs", "repos_url": "https://api.github.com/users/Geoiv/repos", "events_url": "https://api.github.com/users/Geoiv/events{/privacy}", "received_events_url": "https://api.github.com/users/Geoiv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-28T19:43:26Z", "updated_at": "2020-03-06T21:15:07Z", "closed_at": "2020-03-06T21:15:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been using this package with a great degree of success on one of my projects. It's made my life a lot easier! There is one piece of functionality present in the `prometheus_client` package that I haven't been able to replicate with this package, however: Exception counting with `Counter.count_exceptions()`. Is it possible to replicate that functionality within this package, and if so, is there a recommended way of doing so? I've made several attempts to do so myself, but after spending a bit of time on it decided it may be better to reach out here.\r\n\r\nVery much appreciate any info you might have on this!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/43", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/43/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/43/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/43", "id": 534386550, "node_id": "MDU6SXNzdWU1MzQzODY1NTA=", "number": 43, "title": "Need help with a simple use case using Counter", "user": {"login": "julienMichaud", "id": 35925031, "node_id": "MDQ6VXNlcjM1OTI1MDMx", "avatar_url": "https://avatars0.githubusercontent.com/u/35925031?v=4", "gravatar_id": "", "url": "https://api.github.com/users/julienMichaud", "html_url": "https://github.com/julienMichaud", "followers_url": "https://api.github.com/users/julienMichaud/followers", "following_url": "https://api.github.com/users/julienMichaud/following{/other_user}", "gists_url": "https://api.github.com/users/julienMichaud/gists{/gist_id}", "starred_url": "https://api.github.com/users/julienMichaud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/julienMichaud/subscriptions", "organizations_url": "https://api.github.com/users/julienMichaud/orgs", "repos_url": "https://api.github.com/users/julienMichaud/repos", "events_url": "https://api.github.com/users/julienMichaud/events{/privacy}", "received_events_url": "https://api.github.com/users/julienMichaud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-07T10:51:01Z", "updated_at": "2019-12-09T09:07:29Z", "closed_at": "2019-12-09T09:07:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nIm very new to Flask and Python in general. \r\nI would like to expose metrics of a simple app I created. \r\n\r\nThe thing is I don't understand how to increment the value of a Counter for example.. \r\n\r\n```\r\n@app.route('/newaliment', methods=['GET', 'POST'])\r\n@login_required\r\n@metrics.counter('aliments', 'number_of_aliments_added')\r\ndef newaliment():\r\n    form = AlimentsForm()\r\n    if form.validate_on_submit():\r\n        aliment = Aliment(aliment_name = form.aliment_name.data, description =form.description.data, author=current_user )\r\n        db.session.add(aliment)\r\n        db.session.commit()\r\n        flash('Congratulations, you added a new aliment !')\r\n        return redirect(url_for('newaliment'))\r\n    return render_template('newAliment.html', title='NewAliment', form=form)\r\n```\r\n\r\nI initialize my counter but how can I increment it by \"1\" when an aliment is added in my database please ? \r\n\r\nThanks for your help and excuse my stupid question. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/42", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/42/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/42/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/42", "id": 531020186, "node_id": "MDU6SXNzdWU1MzEwMjAxODY=", "number": 42, "title": "metrics.do_not_track() blocks also metrics.summary()/\u2026", "user": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-02T10:05:30Z", "updated_at": "2019-12-04T11:22:43Z", "closed_at": "2019-12-04T10:53:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a blueprint endpoint with an variable rule:\r\n\r\n```python\r\nbp = Blueprint(\"rdap\", __name__)\r\n\r\n@bp.route(\"/domain/<string:domain>\")\r\ndef query(domain: str) -> Tuple[Dict, int]:\r\n    \u2026\r\n```\r\n\r\nSince that gives me an overwhelming cardinality, I wanted to drop the domain from the metric. There doesn't seem to be a good way, I wanted to try a custom metric and took this straight from the examples:\r\n\r\n```python\r\n@bp.route(\"/domain/<string:domain>\")\r\n@metrics.do_not_track()\r\n@metrics.summary('requests_by_status', 'Request latencies by status',\r\n                 labels={'status': lambda r: r.status_code})\r\ndef query(domain: str) -> Tuple[Dict, int]:\r\n    \u2026\r\n```\r\n\r\nUnfortunately, that doesn't work: the metric gets created, but not computed.\r\n\r\nIf I remove the `do_not_track(()`, it starts computing.  This looks like a bug to me since `do_not_track()` should only disable default metrics.  Or am I missing something?  Is this because I'm using blueprints and/or delayed app creation?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/41", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/41/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/41/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/41", "id": 521634395, "node_id": "MDU6SXNzdWU1MjE2MzQzOTU=", "number": 41, "title": "I cannot esclude some metrics using excluded_paths flag", "user": {"login": "pacospace", "id": 27498679, "node_id": "MDQ6VXNlcjI3NDk4Njc5", "avatar_url": "https://avatars3.githubusercontent.com/u/27498679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pacospace", "html_url": "https://github.com/pacospace", "followers_url": "https://api.github.com/users/pacospace/followers", "following_url": "https://api.github.com/users/pacospace/following{/other_user}", "gists_url": "https://api.github.com/users/pacospace/gists{/gist_id}", "starred_url": "https://api.github.com/users/pacospace/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pacospace/subscriptions", "organizations_url": "https://api.github.com/users/pacospace/orgs", "repos_url": "https://api.github.com/users/pacospace/repos", "events_url": "https://api.github.com/users/pacospace/events{/privacy}", "received_events_url": "https://api.github.com/users/pacospace/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-12T15:50:30Z", "updated_at": "2019-11-13T08:40:32Z", "closed_at": "2019-11-13T08:40:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have developed this [application](https://github.com/thoth-station/user-api/blob/ee2a775bef09aef866124e87b094cc2972b21f1a/thoth/user_api/openapi_server.py#L70) and we rely on this library for the metrics. I'm trying to exclude some metrics from the total count. I'm not able to exclude the endpoints described in [1] from the metrics using `excluded_paths`.\r\n\r\nI tried using:\r\n```\r\nexcluded_paths=[\"/swagger-ui\", \"/api/v1/swagger-ui\"]\r\n```\r\nbut I had no success. Anyone had a similar issue?\r\n\r\nThanks for the help\r\n\r\nReferences:\r\n[1]\r\n```\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_swagger_ui_index\",le=\"0.005\",method=\"GET\",status=\"200\"} 5.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_swagger_ui_index\",le=\"0.01\",method=\"GET\",status=\"200\"} 5.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_swagger_ui_index\",le=\"0.025\",method=\"GET\",status=\"200\"} 5.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_swagger_ui_index\",le=\"0.05\",method=\"GET\",status=\"200\"} 5.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_swagger_ui_index\",le=\"0.075\",method=\"GET\",status=\"200\"} 5.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_swagger_ui_index\",le=\"0.1\",method=\"GET\",status=\"200\"} 5.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_swagger_ui_index\",le=\"0.25\",method=\"GET\",status=\"200\"} 5.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_swagger_ui_index\",le=\"0.5\",method=\"GET\",status=\"200\"} 5.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_swagger_ui_index\",le=\"0.75\",method=\"GET\",status=\"200\"} 5.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_swagger_ui_index\",le=\"1.0\",method=\"GET\",status=\"200\"} 5.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_swagger_ui_index\",le=\"2.5\",method=\"GET\",status=\"200\"} 5.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_swagger_ui_index\",le=\"5.0\",method=\"GET\",status=\"200\"} 5.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_swagger_ui_index\",le=\"7.5\",method=\"GET\",status=\"200\"} 5.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_swagger_ui_index\",le=\"10.0\",method=\"GET\",status=\"200\"} 5.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_swagger_ui_index\",le=\"+Inf\",method=\"GET\",status=\"200\"} 5.0\r\nflask_http_request_duration_seconds_count{endpoint=\"/api/v1./api/v1_swagger_ui_index\",method=\"GET\",status=\"200\"} 5.0\r\nflask_http_request_duration_seconds_sum{endpoint=\"/api/v1./api/v1_swagger_ui_index\",method=\"GET\",status=\"200\"} 0.005000014789402485\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_openapi_json\",le=\"0.005\",method=\"GET\",status=\"200\"} 1.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_openapi_json\",le=\"0.01\",method=\"GET\",status=\"200\"} 1.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_openapi_json\",le=\"0.025\",method=\"GET\",status=\"200\"} 1.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_openapi_json\",le=\"0.05\",method=\"GET\",status=\"200\"} 1.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_openapi_json\",le=\"0.075\",method=\"GET\",status=\"200\"} 1.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_openapi_json\",le=\"0.1\",method=\"GET\",status=\"200\"} 1.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_openapi_json\",le=\"0.25\",method=\"GET\",status=\"200\"} 1.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_openapi_json\",le=\"0.5\",method=\"GET\",status=\"200\"} 1.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_openapi_json\",le=\"0.75\",method=\"GET\",status=\"200\"} 1.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_openapi_json\",le=\"1.0\",method=\"GET\",status=\"200\"} 1.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_openapi_json\",le=\"2.5\",method=\"GET\",status=\"200\"} 1.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_openapi_json\",le=\"5.0\",method=\"GET\",status=\"200\"} 1.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_openapi_json\",le=\"7.5\",method=\"GET\",status=\"200\"} 1.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_openapi_json\",le=\"10.0\",method=\"GET\",status=\"200\"} 1.0\r\nflask_http_request_duration_seconds_bucket{endpoint=\"/api/v1./api/v1_openapi_json\",le=\"+Inf\",method=\"GET\",status=\"200\"} 1.0\r\nflask_http_request_duration_seconds_count{endpoint=\"/api/v1./api/v1_openapi_json\",method=\"GET\",status=\"200\"} 1.0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/40", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/40/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/40/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/40", "id": 516882175, "node_id": "MDU6SXNzdWU1MTY4ODIxNzU=", "number": 40, "title": "Prometheus Flask exporter with __main__", "user": {"login": "klml", "id": 295778, "node_id": "MDQ6VXNlcjI5NTc3OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/295778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klml", "html_url": "https://github.com/klml", "followers_url": "https://api.github.com/users/klml/followers", "following_url": "https://api.github.com/users/klml/following{/other_user}", "gists_url": "https://api.github.com/users/klml/gists{/gist_id}", "starred_url": "https://api.github.com/users/klml/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klml/subscriptions", "organizations_url": "https://api.github.com/users/klml/orgs", "repos_url": "https://api.github.com/users/klml/repos", "events_url": "https://api.github.com/users/klml/events{/privacy}", "received_events_url": "https://api.github.com/users/klml/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-11-03T20:15:02Z", "updated_at": "2019-11-05T09:54:23Z", "closed_at": "2019-11-05T09:54:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to use Prometheus Flask exporter with [\\_\\_main__](https://docs.python.org/3.5/library/__main__.html).\r\n\r\nThis works fine by running env FLASK_APP=app.py flask run --port=80 --host='0.0.0.0':\r\n\r\n```\r\nfrom flask import Flask\r\nfrom prometheus_flask_exporter import PrometheusMetrics\r\n\r\napp = Flask(__name__)\r\nmetrics = PrometheusMetrics(app)\r\n\r\napp.debug = True\r\n\r\n@app.route(\"/\", methods=['GET'])\r\ndef index():\r\n    return \"hello world\"\r\n```\r\nBut I want to use my app in \\_\\_main__, running python app.py.\r\n\r\n```\r\nfrom flask import Flask\r\nfrom prometheus_flask_exporter import PrometheusMetrics\r\n\r\napp = Flask(__name__)\r\nmetrics = PrometheusMetrics(app=None, path='/metrics')\r\n\r\napp.debug = True\r\n\r\n@app.route(\"/\", methods=['GET'])\r\ndef index():\r\n    return \"hello world\"\r\n\r\nif __name__ == '__main__':\r\n    metrics.init_app(app)\r\n    app.run(host='0.0.0.0', port=80)\r\n```\r\n\r\nHere I get 400 on /metrics.\r\n\r\nI got no clue how to init metrics correctly.\r\n\r\nthx for helping\r\nklml\r\n\r\nPS I asked this already [stackoverflow.com](https://stackoverflow.com/questions/58432408/prometheus-flask-exporter-with-main), but got  no answer.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/39", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/39/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/39/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/39", "id": 511148341, "node_id": "MDU6SXNzdWU1MTExNDgzNDE=", "number": 39, "title": "uwsgi app stall gathering /metrics", "user": {"login": "kaminek", "id": 10036490, "node_id": "MDQ6VXNlcjEwMDM2NDkw", "avatar_url": "https://avatars2.githubusercontent.com/u/10036490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaminek", "html_url": "https://github.com/kaminek", "followers_url": "https://api.github.com/users/kaminek/followers", "following_url": "https://api.github.com/users/kaminek/following{/other_user}", "gists_url": "https://api.github.com/users/kaminek/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaminek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaminek/subscriptions", "organizations_url": "https://api.github.com/users/kaminek/orgs", "repos_url": "https://api.github.com/users/kaminek/repos", "events_url": "https://api.github.com/users/kaminek/events{/privacy}", "received_events_url": "https://api.github.com/users/kaminek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-10-23T08:02:15Z", "updated_at": "2019-11-25T09:51:24Z", "closed_at": "2019-11-25T09:51:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello \ud83d\udc4b ,\r\nI have a timeout on `/metrics` endpoint. I followed the example of `uwsgi` file:\r\n```\r\ncat app/__init__.py\r\n...\r\napp = Flask(__appname__)\r\nmetrics = UWsgiPrometheusMetrics(app)\r\nmetrics.register_endpoint('/metrics')\r\n...\r\n```\r\n```\r\ncat app/api/__init.py\r\n...\r\napp.logger.info('Starting the app...')\r\nmetrics.start_http_server(port))\r\nmetrics.info('app_info', 'Application info', version=__version__)\r\n...\r\n```\r\nThe app starts correctly. One of my resources is correctly responding, ex:\r\n```\r\n[pid: 64365|app: 0|req: 4/5] 127.0.0.1 () {24 vars in 257 bytes} [Wed Oct 23 09:47:48 2019] GET /test => generated 4 bytes in 0 msecs (HTTP/1.1 200) 2 headers in 78 bytes (2 switches on core 0)\r\n```\r\n\r\nbut the `/metrics` endpoint is not, the HTTP session timeout with:\r\n```curl -I http://localhost:9117/metrics\r\ncurl: (56) Recv failure: Connection reset by peer\r\n```\r\n\r\nAny idea?\r\n\r\n`uwsgi` config:\r\n```\r\n[uwsgi]\r\nhttp-socket = :5000\r\n; wsgi-file = wsgi.py\r\nmodule = wsgi:app\r\n; socket = /var/run/app\r\n; chdir = /usr/local/bin/app\r\n; chown-socket = www-data:www-data\r\nchmod-socket = 660\r\ncallable = app\r\nmaster = true\r\nprocesses = 2\r\ndie-on-term = true\r\n; logto = /var/log/uwsgi/app.log\r\nvenv = /tmp/venv\r\nenv = prometheus_multiproc_dir=/tmp/flask_microservice_boilerplate/metrics\r\n```\r\n\r\nthe `prometheus_multiproc_dir` dir is correctly filled with:\r\n```\r\nls /tmp/flask_microservice_boilerplate/metrics\r\ncounter_45330.db  counter_57640.db  gauge_all_45304.db  gauge_all_50896.db  gauge_all_57640.db  gauge_all_64364.db  histogram_50896.db  histogram_64364.db\r\ncounter_50895.db  counter_60502.db  gauge_all_45330.db  gauge_all_56034.db  gauge_all_60498.db  gauge_all_64365.db  histogram_57639.db  histogram_64365.db\r\ncounter_50896.db  counter_64364.db  gauge_all_50891.db  gauge_all_57636.db  gauge_all_60502.db  histogram_45330.db  histogram_57640.db\r\ncounter_57639.db  counter_64365.db  gauge_all_50895.db  gauge_all_57639.db  gauge_all_64361.db  histogram_50895.db  histogram_60502.db\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/38", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/38/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/38/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/38", "id": 506838328, "node_id": "MDU6SXNzdWU1MDY4MzgzMjg=", "number": 38, "title": "flask_http_request_total counter value is not constantly increasing", "user": {"login": "4n4nd", "id": 22333506, "node_id": "MDQ6VXNlcjIyMzMzNTA2", "avatar_url": "https://avatars0.githubusercontent.com/u/22333506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/4n4nd", "html_url": "https://github.com/4n4nd", "followers_url": "https://api.github.com/users/4n4nd/followers", "following_url": "https://api.github.com/users/4n4nd/following{/other_user}", "gists_url": "https://api.github.com/users/4n4nd/gists{/gist_id}", "starred_url": "https://api.github.com/users/4n4nd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/4n4nd/subscriptions", "organizations_url": "https://api.github.com/users/4n4nd/orgs", "repos_url": "https://api.github.com/users/4n4nd/repos", "events_url": "https://api.github.com/users/4n4nd/events{/privacy}", "received_events_url": "https://api.github.com/users/4n4nd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-14T19:39:24Z", "updated_at": "2019-10-16T19:10:48Z", "closed_at": "2019-10-16T19:10:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have a simple flask [application](https://github.com/HumairAK/anomaly-detection-demo-app/blob/master/app/__init__.py#L43) where we are creating an instance of `PrometheusMetrics`. The metrics page seems to be working fine, but the metric value for `flask_http_request_total` doesn't seem to be monotonically increasing.\r\n\r\nThe graph for that metric looks like:\r\nhttps://snapshot.raintank.io/dashboard/snapshot/NOAZB2Av46GV8Tk26heedJcE6IR4T118\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/36", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/36/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/36/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/36", "id": 496476743, "node_id": "MDU6SXNzdWU0OTY0NzY3NDM=", "number": 36, "title": "Usage with flaskRESTFUL ", "user": {"login": "captify-dieter", "id": 44162052, "node_id": "MDQ6VXNlcjQ0MTYyMDUy", "avatar_url": "https://avatars3.githubusercontent.com/u/44162052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/captify-dieter", "html_url": "https://github.com/captify-dieter", "followers_url": "https://api.github.com/users/captify-dieter/followers", "following_url": "https://api.github.com/users/captify-dieter/following{/other_user}", "gists_url": "https://api.github.com/users/captify-dieter/gists{/gist_id}", "starred_url": "https://api.github.com/users/captify-dieter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/captify-dieter/subscriptions", "organizations_url": "https://api.github.com/users/captify-dieter/orgs", "repos_url": "https://api.github.com/users/captify-dieter/repos", "events_url": "https://api.github.com/users/captify-dieter/events{/privacy}", "received_events_url": "https://api.github.com/users/captify-dieter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 25, "created_at": "2019-09-20T17:56:54Z", "updated_at": "2019-10-24T03:02:28Z", "closed_at": "2019-10-24T03:02:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can metrics be logged and customized when API is constructed using flaskRESTful library, where instead of routes, you have:\r\n\r\n```\r\nclass Coordinates(Resource):\r\n    def __init__(self):\r\n        self.parser = reqparse.RequestParser()\r\n        self.parser.add_argument('radius', type=float, required=False, help=\"Radius\", location='args', default=1)\r\n\r\n    def post(self):\r\n        args = self.parser.parse_args()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/35", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/35/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/35/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/35", "id": 491589668, "node_id": "MDU6SXNzdWU0OTE1ODk2Njg=", "number": 35, "title": "Exclude swagger requests", "user": {"login": "skecskes", "id": 3411329, "node_id": "MDQ6VXNlcjM0MTEzMjk=", "avatar_url": "https://avatars2.githubusercontent.com/u/3411329?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skecskes", "html_url": "https://github.com/skecskes", "followers_url": "https://api.github.com/users/skecskes/followers", "following_url": "https://api.github.com/users/skecskes/following{/other_user}", "gists_url": "https://api.github.com/users/skecskes/gists{/gist_id}", "starred_url": "https://api.github.com/users/skecskes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skecskes/subscriptions", "organizations_url": "https://api.github.com/users/skecskes/orgs", "repos_url": "https://api.github.com/users/skecskes/repos", "events_url": "https://api.github.com/users/skecskes/events{/privacy}", "received_events_url": "https://api.github.com/users/skecskes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-10T10:34:02Z", "updated_at": "2019-09-26T13:02:06Z", "closed_at": "2019-09-26T13:00:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just started this on clean flask app and my metrics are already polluted by many swagger mnetrics. How can I exclude endpoints which are not exposed by me, but as middleware through flask?\r\n\r\n![Screen Shot 2019-09-10 at 11 31 53](https://user-images.githubusercontent.com/3411329/64606741-d7d7c580-d3be-11e9-9d73-a2ba75ad71fb.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/34", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/34/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/34/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/34", "id": 489979592, "node_id": "MDU6SXNzdWU0ODk5Nzk1OTI=", "number": 34, "title": "Option to add new metrics or new lable", "user": {"login": "BuSHari", "id": 1271474, "node_id": "MDQ6VXNlcjEyNzE0NzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1271474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BuSHari", "html_url": "https://github.com/BuSHari", "followers_url": "https://api.github.com/users/BuSHari/followers", "following_url": "https://api.github.com/users/BuSHari/following{/other_user}", "gists_url": "https://api.github.com/users/BuSHari/gists{/gist_id}", "starred_url": "https://api.github.com/users/BuSHari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BuSHari/subscriptions", "organizations_url": "https://api.github.com/users/BuSHari/orgs", "repos_url": "https://api.github.com/users/BuSHari/repos", "events_url": "https://api.github.com/users/BuSHari/events{/privacy}", "received_events_url": "https://api.github.com/users/BuSHari/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2019-09-05T20:16:34Z", "updated_at": "2019-10-03T14:07:09Z", "closed_at": "2019-09-26T14:15:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI there an option to add a new metrics or new lable to the existing metrics?\r\nfor example, i want to add a lable with the requester ip to the default metric\r\n\r\nor add a new metric that contain the location data of the requester ip.\r\n\r\nI tried to use the group by, but it overwrite the path lable, and i cant add more than one lable.\r\n\r\n\r\nThanks,\r\nIdan", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/33", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/33/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/33/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/33", "id": 478896586, "node_id": "MDU6SXNzdWU0Nzg4OTY1ODY=", "number": 33, "title": "App factory project structure with GunicornInternalPrometheusMetrics()", "user": {"login": "mamor1", "id": 50194407, "node_id": "MDQ6VXNlcjUwMTk0NDA3", "avatar_url": "https://avatars0.githubusercontent.com/u/50194407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mamor1", "html_url": "https://github.com/mamor1", "followers_url": "https://api.github.com/users/mamor1/followers", "following_url": "https://api.github.com/users/mamor1/following{/other_user}", "gists_url": "https://api.github.com/users/mamor1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mamor1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mamor1/subscriptions", "organizations_url": "https://api.github.com/users/mamor1/orgs", "repos_url": "https://api.github.com/users/mamor1/repos", "events_url": "https://api.github.com/users/mamor1/events{/privacy}", "received_events_url": "https://api.github.com/users/mamor1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-09T09:41:27Z", "updated_at": "2020-01-29T16:24:02Z", "closed_at": "2019-08-09T11:11:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have an app that I want to run replicas of in a K8s cluster. For this I am using the GunicornInternalPrometheusMetrics class like so inside `__init__.py`:\r\n\r\n```\r\nfrom flask import Flask\r\nfrom prometheus_flask_exporter.multiprocess import GunicornInternalPrometheusMetrics\r\n\r\ndef create_app():\r\n     app = Flask(__name__)\r\n     metrics = GunicornInternalPrometheusMetrics(app)\r\n```\r\nIn the app file I define the app object like so:\r\n```\r\nfrom app import create_app\r\n\r\napp = create_app(api_config or \"default\")\r\n```\r\n\r\nHowever, this does not make the metrics decorator available for my modules (which have the routes).\r\n\r\nTherefore, I tried to make it in the app factory way:\r\n```\r\nfrom flask import Flask\r\nfrom prometheus_flask_exporter.multiprocess import GunicornInternalPrometheusMetrics\r\n\r\nmnetrics = GunicornInternalPrometheusMetrics(app=None)\r\n\r\ndef create_app():\r\n     app = Flask(__name__)\r\n     metrics.init_app(app)\r\n```\r\n\r\nHowever, this causes flask to complain that I am working outside of the context.\r\n\r\nWhat is the preferred way to do this so that the decorator (ie. something like `@metrics.gauge('in_progress', 'Long running requests in progress')`) is possible?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/32", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/32/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/32/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/32", "id": 478839558, "node_id": "MDU6SXNzdWU0Nzg4Mzk1NTg=", "number": 32, "title": "wiki: How to reset Counter..?", "user": {"login": "deepak1725", "id": 21026016, "node_id": "MDQ6VXNlcjIxMDI2MDE2", "avatar_url": "https://avatars3.githubusercontent.com/u/21026016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deepak1725", "html_url": "https://github.com/deepak1725", "followers_url": "https://api.github.com/users/deepak1725/followers", "following_url": "https://api.github.com/users/deepak1725/following{/other_user}", "gists_url": "https://api.github.com/users/deepak1725/gists{/gist_id}", "starred_url": "https://api.github.com/users/deepak1725/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deepak1725/subscriptions", "organizations_url": "https://api.github.com/users/deepak1725/orgs", "repos_url": "https://api.github.com/users/deepak1725/repos", "events_url": "https://api.github.com/users/deepak1725/events{/privacy}", "received_events_url": "https://api.github.com/users/deepak1725/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-08-09T07:27:57Z", "updated_at": "2019-08-09T11:59:23Z", "closed_at": "2019-08-09T11:59:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/31", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/31/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/31/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/31", "id": 477247321, "node_id": "MDU6SXNzdWU0NzcyNDczMjE=", "number": 31, "title": "uwsgi config \"lazy-apps: yes\"  \"should_start_http_server\" return False", "user": {"login": "xiecang", "id": 16369161, "node_id": "MDQ6VXNlcjE2MzY5MTYx", "avatar_url": "https://avatars3.githubusercontent.com/u/16369161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiecang", "html_url": "https://github.com/xiecang", "followers_url": "https://api.github.com/users/xiecang/followers", "following_url": "https://api.github.com/users/xiecang/following{/other_user}", "gists_url": "https://api.github.com/users/xiecang/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiecang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiecang/subscriptions", "organizations_url": "https://api.github.com/users/xiecang/orgs", "repos_url": "https://api.github.com/users/xiecang/repos", "events_url": "https://api.github.com/users/xiecang/events{/privacy}", "received_events_url": "https://api.github.com/users/xiecang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-08-06T08:42:18Z", "updated_at": "2019-08-07T10:45:48Z", "closed_at": "2019-08-07T06:32:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "\"UWsgiPrometheusMetrics().should_start_http_server()\"  returns False  when I set uwsgi's startup parameter \"lazy-apps:yes\".\r\n\r\nHow can I use it when setting \"lazy-apps:yes\" ?\r\nuwsgi config: \r\n```yaml\r\nuwsgi:\r\n  wsgi: wsgi:app\r\n  http-socket: 0.0.0.0:11010\r\n  processes: 4\r\n  threads: 16\r\n  master: yes\r\n  ignore-write-errors: yes\r\n  ignore-sigpipe: yes\r\n  die-on-term: yes\r\n  wsgi-disable-file-wrapper: yes\r\n  max-requests: 65535\r\n  max-requests-delta: 1024\r\n  log-prefix: uWSGI\r\n  log-date: yes\r\n  log-slow: 10000\r\n  disable-logging: yes\r\n  need-app: true\r\n  reload-mercy: 1\r\n#  lazy-apps: yes\r\n```\r\ncode: \r\n```python\r\n    from prometheus_flask_exporter.multiprocess import UWsgiPrometheusMetrics\r\n    metrics = UWsgiPrometheusMetrics(app)\r\n    metrics.start_http_server(9200, )\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/30", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/30/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/30/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/30", "id": 458955061, "node_id": "MDU6SXNzdWU0NTg5NTUwNjE=", "number": 30, "title": "Adding default label", "user": {"login": "tcmalyousef", "id": 52055990, "node_id": "MDQ6VXNlcjUyMDU1OTkw", "avatar_url": "https://avatars1.githubusercontent.com/u/52055990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tcmalyousef", "html_url": "https://github.com/tcmalyousef", "followers_url": "https://api.github.com/users/tcmalyousef/followers", "following_url": "https://api.github.com/users/tcmalyousef/following{/other_user}", "gists_url": "https://api.github.com/users/tcmalyousef/gists{/gist_id}", "starred_url": "https://api.github.com/users/tcmalyousef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tcmalyousef/subscriptions", "organizations_url": "https://api.github.com/users/tcmalyousef/orgs", "repos_url": "https://api.github.com/users/tcmalyousef/repos", "events_url": "https://api.github.com/users/tcmalyousef/events{/privacy}", "received_events_url": "https://api.github.com/users/tcmalyousef/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-21T00:53:32Z", "updated_at": "2019-06-24T12:05:54Z", "closed_at": "2019-06-24T12:05:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm kind of new to Prometheus, so my usage might not be the best approach.\r\n\r\nI have multiple flask applications and monitored within the same Prometheus. I want to be able to filter using application_name label.\r\n\r\nI want to add `application_name` label to the default exports. what is the best way to approaching this?\r\n\r\nI tried the following:\r\n\r\n```python\r\nmetrics = GunicornPrometheusMetrics(app, export_defaults=False)\r\nmetrics.info('app_info', 'Application info', version=app_info.get('version', '0.0.0'), app_name=app_name)\r\n...\r\n...\r\n@app.route(\"/\")\r\n@metrics.do_not_track()\r\n@metrics.summary('requests_by_status', 'Request latencies by status',\r\n                 labels={'status': lambda r: r.status_code, 'app_name': app_name})\r\n@metrics.histogram('requests_by_status_and_path', 'Request latencies by status and path',\r\n                   labels={'status': lambda r: r.status_code, 'path': lambda: request.path, 'app_name': app_name})\r\n@metrics.counter('invocation_by_type', 'Number of invocations by type',\r\n                 labels={'item_type': lambda: request.view_args['type'], 'app_name': app_name})\r\ndef index():\r\n...\r\n```\r\nsame decorators are replicated on each route.\r\n\r\nBut I get the following error:\r\n```\r\nValueError: Duplicated timeseries in CollectorRegistry: {'requests_by_status_count', 'requests_by_status_sum', 'requests_by_status', 'requests_by_status_created'}\r\n```\r\n\r\nAny help is appreciated!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/29", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/29/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/29/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/29", "id": 458572999, "node_id": "MDU6SXNzdWU0NTg1NzI5OTk=", "number": 29, "title": "Help Needed for metric type summary", "user": {"login": "miteshvp", "id": 17736013, "node_id": "MDQ6VXNlcjE3NzM2MDEz", "avatar_url": "https://avatars2.githubusercontent.com/u/17736013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miteshvp", "html_url": "https://github.com/miteshvp", "followers_url": "https://api.github.com/users/miteshvp/followers", "following_url": "https://api.github.com/users/miteshvp/following{/other_user}", "gists_url": "https://api.github.com/users/miteshvp/gists{/gist_id}", "starred_url": "https://api.github.com/users/miteshvp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miteshvp/subscriptions", "organizations_url": "https://api.github.com/users/miteshvp/orgs", "repos_url": "https://api.github.com/users/miteshvp/repos", "events_url": "https://api.github.com/users/miteshvp/events{/privacy}", "received_events_url": "https://api.github.com/users/miteshvp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-20T10:25:34Z", "updated_at": "2019-06-25T05:37:36Z", "closed_at": "2019-06-24T11:41:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have two questions\r\n1. Is there a way to store average latency time based on the histogram `flask_http_request_duration_seconds_sum` and `flask_http_request_duration_seconds_count`  as another metric?\r\n\r\n2. What is the best way to pass r.status_code if you do not use `@app.route` to instantiate? I am using BluePrint and Flask_restful to register and instantiate separately as in\r\n\r\nFollowing your example on creating a summary\r\n```\r\n@app.route('/status/<int:status>')\r\n@metrics.summary('requests_by_status', 'Request latencies by status', labels={'status': lambda r: r.status_code})\r\n        def echo_status(status):\r\n            return 'Status: %s' % status, status\r\n```\r\n\r\n```\r\nfrom flask import Blueprint\r\nfrom flask_restful import  Resource\r\n\r\napi_v1 = Blueprint('api_v1', __name__, url_prefix='/api/v1')\r\nrest_api_v1 = Api(api_v1, errors=errors)\r\n\r\n\r\ndef add_resource(resource, route, endpoint=None, defaults=None):\r\n    \"\"\"Add a resource for both trailing slash and no trailing slash to prevent redirects.\"\"\"\r\n    slashless = route.rstrip('/')\r\n    endpoint = endpoint or resource.__name__.lower()\r\n    defaults = defaults or {}\r\n\r\n    # resources without slashes\r\n    rest_api_v1.add_resource(resource,\r\n                             slashless,\r\n                             endpoint=endpoint + '__slashless',\r\n                             defaults=defaults)\r\n\r\nclass Test(Resource):\r\n    status = 200\r\n\r\n    @staticmethod\r\n    @metrics.summary('dummy_test', 'Test Request latencies by status',\r\n                     labels={'dummy_test': lambda r: ???})\r\n    def get():\r\n        try:\r\n            time.sleep(random.randint(0, 5))\r\n            if random.choice([True, False]):\r\n                return 'OK', 200\r\n            else:\r\n                return 'Not OK', 400\r\n        except Exception as e:\r\n            logger.error('%r' % e)\r\n\r\nadd_resource(Test, '/test', endpoint='test')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/28", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/28/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/28/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/28", "id": 455216438, "node_id": "MDU6SXNzdWU0NTUyMTY0Mzg=", "number": 28, "title": "Wiki: Need to add parameter in labels", "user": {"login": "deepak1725", "id": 21026016, "node_id": "MDQ6VXNlcjIxMDI2MDE2", "avatar_url": "https://avatars3.githubusercontent.com/u/21026016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deepak1725", "html_url": "https://github.com/deepak1725", "followers_url": "https://api.github.com/users/deepak1725/followers", "following_url": "https://api.github.com/users/deepak1725/following{/other_user}", "gists_url": "https://api.github.com/users/deepak1725/gists{/gist_id}", "starred_url": "https://api.github.com/users/deepak1725/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deepak1725/subscriptions", "organizations_url": "https://api.github.com/users/deepak1725/orgs", "repos_url": "https://api.github.com/users/deepak1725/repos", "events_url": "https://api.github.com/users/deepak1725/events{/privacy}", "received_events_url": "https://api.github.com/users/deepak1725/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-06-12T13:32:13Z", "updated_at": "2019-06-13T12:01:37Z", "closed_at": "2019-06-13T12:01:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "What is recommended way for adding Parameter in metrics... ?\r\n\r\nI mean, Currently we have:\r\n`invocation_by_type_created{item_type=\"hey\"} 1.5603457069620097e+09`\r\nWhich can be achieved by: \r\n```\r\n@metrics.counter('invocation_by_type', 'Number of invocations by type',\r\n         labels={'item_type': \"hey\"})\r\ndef echo_status(status):\r\n    return 'Status: %s' % status, status\r\n```\r\nNow,  We need to have some **timedelta** included in output metrics,\r\nsomething like:\r\n`invocation_by_type_created{item_type=\"hey\", timedelta=52} 1.5603457069620097e+09`\r\n\r\nwhich is ofcause the function execution time..", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/27", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/27/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/27/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/27", "id": 455046458, "node_id": "MDU6SXNzdWU0NTUwNDY0NTg=", "number": 27, "title": "Wiki: In Non Containerised approach, where is logs stored by default..? Can i overide the path?", "user": {"login": "deepak1725", "id": 21026016, "node_id": "MDQ6VXNlcjIxMDI2MDE2", "avatar_url": "https://avatars3.githubusercontent.com/u/21026016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deepak1725", "html_url": "https://github.com/deepak1725", "followers_url": "https://api.github.com/users/deepak1725/followers", "following_url": "https://api.github.com/users/deepak1725/following{/other_user}", "gists_url": "https://api.github.com/users/deepak1725/gists{/gist_id}", "starred_url": "https://api.github.com/users/deepak1725/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deepak1725/subscriptions", "organizations_url": "https://api.github.com/users/deepak1725/orgs", "repos_url": "https://api.github.com/users/deepak1725/repos", "events_url": "https://api.github.com/users/deepak1725/events{/privacy}", "received_events_url": "https://api.github.com/users/deepak1725/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-12T07:08:40Z", "updated_at": "2019-06-12T08:22:58Z", "closed_at": "2019-06-12T08:22:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please tell path where Metrics are stored by Default.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/26", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/26/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/26/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/26", "id": 454249400, "node_id": "MDU6SXNzdWU0NTQyNDk0MDA=", "number": 26, "title": "Setting path for GunicornPrometheusMetrics", "user": {"login": "jackdreilly", "id": 619899, "node_id": "MDQ6VXNlcjYxOTg5OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/619899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackdreilly", "html_url": "https://github.com/jackdreilly", "followers_url": "https://api.github.com/users/jackdreilly/followers", "following_url": "https://api.github.com/users/jackdreilly/following{/other_user}", "gists_url": "https://api.github.com/users/jackdreilly/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackdreilly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackdreilly/subscriptions", "organizations_url": "https://api.github.com/users/jackdreilly/orgs", "repos_url": "https://api.github.com/users/jackdreilly/repos", "events_url": "https://api.github.com/users/jackdreilly/events{/privacy}", "received_events_url": "https://api.github.com/users/jackdreilly/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-10T16:14:16Z", "updated_at": "2019-06-13T15:40:51Z", "closed_at": "2019-06-13T11:39:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am wondering whether there would be any negative side-effects to setting `GunicornPrometheusMetrics().path` to not be `None`.\r\n\r\nI prefer to service the metrics inside of the main `Flask` app, rather than its own `http` server.  \r\n\r\nIs there any reason that setting `path` was explicitly disabled in the `GunicornPrometheusMetrics` constructor?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/25", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/25/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/25/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/25", "id": 450895892, "node_id": "MDU6SXNzdWU0NTA4OTU4OTI=", "number": 25, "title": "Add flag to disable exporting python_* metrics", "user": {"login": "gdubicki", "id": 566632, "node_id": "MDQ6VXNlcjU2NjYzMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/566632?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gdubicki", "html_url": "https://github.com/gdubicki", "followers_url": "https://api.github.com/users/gdubicki/followers", "following_url": "https://api.github.com/users/gdubicki/following{/other_user}", "gists_url": "https://api.github.com/users/gdubicki/gists{/gist_id}", "starred_url": "https://api.github.com/users/gdubicki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gdubicki/subscriptions", "organizations_url": "https://api.github.com/users/gdubicki/orgs", "repos_url": "https://api.github.com/users/gdubicki/repos", "events_url": "https://api.github.com/users/gdubicki/events{/privacy}", "received_events_url": "https://api.github.com/users/gdubicki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-31T17:07:08Z", "updated_at": "2019-06-02T10:46:15Z", "closed_at": "2019-06-02T10:46:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thank you for this great library! Thanks to it I was able to add metrics to my app in no time. :)\r\n\r\nBut I would to not export metrics that I am not going to use so please add a flag to stop exporting these:\r\n\r\n```\r\ngdubicki@mac ~ $ curl  http://localhost:5000/metrics\r\n# HELP python_gc_objects_collected_total Objects collected during gc\r\n# TYPE python_gc_objects_collected_total counter\r\npython_gc_objects_collected_total{generation=\"0\"} 7789.0\r\npython_gc_objects_collected_total{generation=\"1\"} 1763.0\r\npython_gc_objects_collected_total{generation=\"2\"} 0.0\r\n# HELP python_gc_objects_uncollectable_total Uncollectable object found during GC\r\n# TYPE python_gc_objects_uncollectable_total counter\r\npython_gc_objects_uncollectable_total{generation=\"0\"} 0.0\r\npython_gc_objects_uncollectable_total{generation=\"1\"} 0.0\r\npython_gc_objects_uncollectable_total{generation=\"2\"} 0.0\r\n# HELP python_gc_collections_total Number of times this generation was collected\r\n# TYPE python_gc_collections_total counter\r\npython_gc_collections_total{generation=\"0\"} 112.0\r\npython_gc_collections_total{generation=\"1\"} 10.0\r\npython_gc_collections_total{generation=\"2\"} 0.0\r\n# HELP python_info Python platform information\r\n# TYPE python_info gauge\r\npython_info{implementation=\"CPython\",major=\"3\",minor=\"7\",patchlevel=\"2\",version=\"3.7.2\"} 1.0\r\n```\r\n\r\nThey are exported even if I set `export_defaults=False`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/24", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/24/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/24/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/24", "id": 446068382, "node_id": "MDU6SXNzdWU0NDYwNjgzODI=", "number": 24, "title": "Exceptions shouldn't bypass Flask's error handling", "user": {"login": "RazerM", "id": 1337586, "node_id": "MDQ6VXNlcjEzMzc1ODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1337586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RazerM", "html_url": "https://github.com/RazerM", "followers_url": "https://api.github.com/users/RazerM/followers", "following_url": "https://api.github.com/users/RazerM/following{/other_user}", "gists_url": "https://api.github.com/users/RazerM/gists{/gist_id}", "starred_url": "https://api.github.com/users/RazerM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RazerM/subscriptions", "organizations_url": "https://api.github.com/users/RazerM/orgs", "repos_url": "https://api.github.com/users/RazerM/repos", "events_url": "https://api.github.com/users/RazerM/events{/privacy}", "received_events_url": "https://api.github.com/users/RazerM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-20T11:36:33Z", "updated_at": "2019-05-20T12:42:53Z", "closed_at": "2019-05-20T12:41:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "When an exception occurs in the view function, prometheus_flask_exporter turns it into a custom response, bypassing all of the Flask app's error handlers:\r\n\r\nhttps://github.com/rycus86/prometheus_flask_exporter/blob/0203d62506a1119fa011c1b11036db95902d44c6/prometheus_flask_exporter/__init__.py#L456-L457\r\n\r\nIt gets returned from the function on this line:\r\n\r\nhttps://github.com/rycus86/prometheus_flask_exporter/blob/0203d62506a1119fa011c1b11036db95902d44c6/prometheus_flask_exporter/__init__.py#L477\r\n\r\nYou could instead call [Flask.handle_user_exception](http://flask.pocoo.org/docs/1.0/api/?highlight=view_functions#flask.Flask.handle_user_exception). You can see where that's usually called [here](https://github.com/pallets/flask/blob/d3e1fed7773d1a85a9e2b434c375822edb904619/flask/app.py#L1897-L1912). It should also be called for `HTTPException`.\r\n\r\nP.S. For non-error responses, `make_response` is called but isn't returned. This could be expensive (serializing a response, for example), so it should be returned rather than letting Flask call it again:\r\n\r\nhttps://github.com/rycus86/prometheus_flask_exporter/blob/0203d62506a1119fa011c1b11036db95902d44c6/prometheus_flask_exporter/__init__.py#L472", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/23", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/23/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/23/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/23", "id": 446005207, "node_id": "MDU6SXNzdWU0NDYwMDUyMDc=", "number": 23, "title": "Flask endpoint names may differ from function name", "user": {"login": "RazerM", "id": 1337586, "node_id": "MDQ6VXNlcjEzMzc1ODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1337586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RazerM", "html_url": "https://github.com/RazerM", "followers_url": "https://api.github.com/users/RazerM/followers", "following_url": "https://api.github.com/users/RazerM/following{/other_user}", "gists_url": "https://api.github.com/users/RazerM/gists{/gist_id}", "starred_url": "https://api.github.com/users/RazerM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RazerM/subscriptions", "organizations_url": "https://api.github.com/users/RazerM/orgs", "repos_url": "https://api.github.com/users/RazerM/repos", "events_url": "https://api.github.com/users/RazerM/events{/privacy}", "received_events_url": "https://api.github.com/users/RazerM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-20T09:11:57Z", "updated_at": "2019-05-20T11:39:17Z", "closed_at": "2019-05-20T11:38:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for fixing #22! It fixes the simple case but I also realised something else.\r\n\r\nThe problem with the following code is that Flask endpoint names can be different than the function name, consider `@app.route('/hello', endpoint='my_hello')`.\r\n\r\nhttps://github.com/rycus86/prometheus_flask_exporter/blob/0203d62506a1119fa011c1b11036db95902d44c6/prometheus_flask_exporter/__init__.py#L465-L472\r\n\r\nI think there is a nice solution though! See [Flask.view_functions](http://flask.pocoo.org/docs/1.0/api/?highlight=view_functions#flask.Flask.view_functions). This snippet corresponds to the quoted lines above:\r\n\r\n```python\r\n        if request.endpoint is not None:\r\n            view_func = current_app.view_functions[request.endpoint]\r\n\r\n            # There may be decorators 'above' us, but before the function is\r\n            # registered with Flask\r\n            while view_func != func:\r\n                try:\r\n                    view_func = view_func.__wrapped__\r\n                except AttributeError:\r\n                    break\r\n\r\n            if view_func == func:\r\n                # we are in a request handler method\r\n                response_for_metric = make_response(response)\r\n```\r\n\r\nNote that func is the function itself:\r\n\r\nhttps://github.com/rycus86/prometheus_flask_exporter/blob/0203d62506a1119fa011c1b11036db95902d44c6/prometheus_flask_exporter/__init__.py#L442-L443", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/22", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/22/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/22/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/22", "id": 445349452, "node_id": "MDU6SXNzdWU0NDUzNDk0NTI=", "number": 22, "title": "lable callables aren't given response objects for blueprint endpoints", "user": {"login": "RazerM", "id": 1337586, "node_id": "MDQ6VXNlcjEzMzc1ODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1337586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RazerM", "html_url": "https://github.com/RazerM", "followers_url": "https://api.github.com/users/RazerM/followers", "following_url": "https://api.github.com/users/RazerM/following{/other_user}", "gists_url": "https://api.github.com/users/RazerM/gists{/gist_id}", "starred_url": "https://api.github.com/users/RazerM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RazerM/subscriptions", "organizations_url": "https://api.github.com/users/RazerM/orgs", "repos_url": "https://api.github.com/users/RazerM/repos", "events_url": "https://api.github.com/users/RazerM/events{/privacy}", "received_events_url": "https://api.github.com/users/RazerM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-17T09:27:53Z", "updated_at": "2019-05-18T11:57:29Z", "closed_at": "2019-05-18T11:57:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "In a blueprint, `request.endpoint` is `<blueprint name>.<endpoint>`, e.g. `auth.login`\r\n\r\nThis line doesn't work:\r\n\r\nhttps://github.com/rycus86/prometheus_flask_exporter/blob/678dbf3097e82a0ddb697268406004cc1f4a26bc/prometheus_flask_exporter/__init__.py#L466\r\n\r\nExample:\r\n```python\r\nfrom flask import Flask, Blueprint\r\nfrom prometheus_flask_exporter import PrometheusMetrics\r\n\r\nmetrics = PrometheusMetrics(app=None)\r\n\r\nbp = Blueprint('myblueprint', __name__)\r\n\r\n@bp.route('/hello')\r\n@metrics.summary('requests_by_status', 'Request latencies by status',\r\n                 labels={'status': lambda r: r.status_code})\r\ndef hello():\r\n    return 'Hello!'\r\n\r\napp = Flask(__name__)\r\napp.register_blueprint(bp)\r\nmetrics.init_app(app)\r\n\r\napp.run()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/21", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/21/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/21/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/21", "id": 435327513, "node_id": "MDU6SXNzdWU0MzUzMjc1MTM=", "number": 21, "title": "Gauge with callable label_value using deprecated function", "user": {"login": "quaterneon", "id": 10671977, "node_id": "MDQ6VXNlcjEwNjcxOTc3", "avatar_url": "https://avatars0.githubusercontent.com/u/10671977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quaterneon", "html_url": "https://github.com/quaterneon", "followers_url": "https://api.github.com/users/quaterneon/followers", "following_url": "https://api.github.com/users/quaterneon/following{/other_user}", "gists_url": "https://api.github.com/users/quaterneon/gists{/gist_id}", "starred_url": "https://api.github.com/users/quaterneon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quaterneon/subscriptions", "organizations_url": "https://api.github.com/users/quaterneon/orgs", "repos_url": "https://api.github.com/users/quaterneon/repos", "events_url": "https://api.github.com/users/quaterneon/events{/privacy}", "received_events_url": "https://api.github.com/users/quaterneon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-19T23:06:30Z", "updated_at": "2019-04-23T11:23:36Z", "closed_at": "2019-04-23T11:16:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is running in python3.7 + flask, on a mac.\r\n\r\nAbbreviated (and anonymized) setup is:\r\n```\r\n@app.route('URL_RULE', methods=['POST'])\r\n@metrics.gauge('name',\r\n               'description',\r\n               labels={'group_id': lambda: request.view_args.get('group_id')},\r\n               multiprocess_mode='livesum')\r\ndef bulk_post(group_id: str):\r\n    pass\r\n```\r\n\r\nI get the following warning:\r\n```\r\nsrc/api/app.py:642: in <module>\r\n    multiprocess_mode='livesum')\r\n../../../../.local/share/virtualenvs/venv/lib/python3.7/site-packages/prometheus_flask_exporter/__init__.py:369: in gauge\r\n    before=lambda metric: metric.inc()\r\n../../../../.local/share/virtualenvs/venv/lib/python3.7/site-packages/prometheus_flask_exporter/__init__.py:426: in _track\r\n    ) if labels else tuple()\r\n../../../../.local/share/virtualenvs/venv/lib/python3.7/site-packages/prometheus_flask_exporter/__init__.py:425: in <genexpr>\r\n    for key, call in labels.items()\r\n../../../../.local/share/virtualenvs/venv/lib/python3.7/site-packages/prometheus_flask_exporter/__init__.py:418: in label_value\r\n    if inspect.getargspec(f).args:\r\n/usr/local/Cellar/python/3.7.2_2/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py:1078: in getargspec\r\n    DeprecationWarning, stacklevel=2)\r\nE   DeprecationWarning: inspect.getargspec() is deprecated since Python 3.0, use inspect.signature() or inspect.getfullargspec()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/18", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/18/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/18/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/18", "id": 399545605, "node_id": "MDU6SXNzdWUzOTk1NDU2MDU=", "number": 18, "title": "GunicornPrometheusMetrics Doesn't Export Python Metrics", "user": {"login": "mplachter", "id": 15329913, "node_id": "MDQ6VXNlcjE1MzI5OTEz", "avatar_url": "https://avatars1.githubusercontent.com/u/15329913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mplachter", "html_url": "https://github.com/mplachter", "followers_url": "https://api.github.com/users/mplachter/followers", "following_url": "https://api.github.com/users/mplachter/following{/other_user}", "gists_url": "https://api.github.com/users/mplachter/gists{/gist_id}", "starred_url": "https://api.github.com/users/mplachter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mplachter/subscriptions", "organizations_url": "https://api.github.com/users/mplachter/orgs", "repos_url": "https://api.github.com/users/mplachter/repos", "events_url": "https://api.github.com/users/mplachter/events{/privacy}", "received_events_url": "https://api.github.com/users/mplachter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-15T21:34:45Z", "updated_at": "2019-01-16T09:17:32Z", "closed_at": "2019-01-16T02:09:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using `prometheus_flask_exporter` with `gunicorn` it seems that the built in metrics `(python_gc, memory, cpu, etc)` that are usually exported when just using this with the internal `flask` server does not get pushed to `/metrics`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/17", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/17/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/17/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/17", "id": 398361456, "node_id": "MDU6SXNzdWUzOTgzNjE0NTY=", "number": 17, "title": "\"Duplicated timeseries in CollectorRegistry\" when testing", "user": {"login": "maximegregoire", "id": 2293537, "node_id": "MDQ6VXNlcjIyOTM1Mzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2293537?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maximegregoire", "html_url": "https://github.com/maximegregoire", "followers_url": "https://api.github.com/users/maximegregoire/followers", "following_url": "https://api.github.com/users/maximegregoire/following{/other_user}", "gists_url": "https://api.github.com/users/maximegregoire/gists{/gist_id}", "starred_url": "https://api.github.com/users/maximegregoire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maximegregoire/subscriptions", "organizations_url": "https://api.github.com/users/maximegregoire/orgs", "repos_url": "https://api.github.com/users/maximegregoire/repos", "events_url": "https://api.github.com/users/maximegregoire/events{/privacy}", "received_events_url": "https://api.github.com/users/maximegregoire/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-01-11T16:30:16Z", "updated_at": "2019-09-26T14:19:01Z", "closed_at": "2019-01-13T03:04:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nThanks for this awesome module!\r\n\r\nWhen testing my flask application, I instantiate a new instance of my application for every test using fixtures. For the first test, everything goes right, but on subsequent tests, I get a \"Duplicated timeseries\" error. My understanding is that `PrometheusMetrics` uses the same registry for every application. Is this the expected behavior?\r\n\r\nHere's a minimal snippet that reproduces this behaviour.\r\n\r\n```\r\nfrom flask import Flask\r\nfrom prometheus_flask_exporter import PrometheusMetrics\r\n\r\napp1 = Flask(__name__)\r\nmetrics1 = PrometheusMetrics(app1)\r\n# some test\r\n\r\napp2 = Flask(__name__)\r\nmetrics2 = PrometheusMetrics(app2)\r\n# some other test\r\n```\r\n\r\nThe output:\r\n```\r\n    metrics2 = PrometheusMetrics(app2)\r\n/usr/local/lib/python3.6/site-packages/prometheus_flask_exporter/__init__.py:115: in __init__\r\n    self.init_app(app)\r\n/usr/local/lib/python3.6/site-packages/prometheus_flask_exporter/__init__.py:137: in init_app\r\n    self._defaults_prefix, app\r\n/usr/local/lib/python3.6/site-packages/prometheus_flask_exporter/__init__.py:253: in export_defaults\r\n    **buckets_as_kwargs\r\n/usr/local/lib/python3.6/site-packages/prometheus_client/metrics.py:494: in __init__\r\n    labelvalues=labelvalues,\r\n/usr/local/lib/python3.6/site-packages/prometheus_client/metrics.py:103: in __init__\r\n    registry.register(self)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <prometheus_client.registry.CollectorRegistry object at 0x7f425acb0d68>, collector = <prometheus_client.metrics.Histogram object at 0x7f424a45c3c8>\r\n\r\n    def register(self, collector):\r\n        '''Add a collector to the registry.'''\r\n        with self._lock:\r\n            names = self._get_names(collector)\r\n            duplicates = set(self._names_to_collectors).intersection(names)\r\n            if duplicates:\r\n                raise ValueError(\r\n                    'Duplicated timeseries in CollectorRegistry: {0}'.format(\r\n>                       duplicates))\r\nE               ValueError: Duplicated timeseries in CollectorRegistry: {'flask_http_request_duration_seconds_bucket', 'flask_http_request_duration_seconds_count', 'flask_http_request_duration_seconds_sum', 'flask_http_request_duration_seconds_created'}\r\n```\r\n\r\nI was able to get rid of the error by instantiating a new CollectorRegistry at every app instantiation.\r\n\r\n```\r\nfrom flask import Flask\r\nfrom prometheus_flask_exporter import PrometheusMetrics\r\nfrom prometheus_client import CollectorRegistry\r\n\r\napp1 = Flask(__name__)\r\nmetrics1 = PrometheusMetrics(app1, registry=CollectorRegistry())\r\n\r\napp2 = Flask(__name__)\r\nmetrics2 = PrometheusMetrics(app2, registry=CollectorRegistry())\r\n```\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/16", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/16/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/16/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/16", "id": 395948300, "node_id": "MDU6SXNzdWUzOTU5NDgzMDA=", "number": 16, "title": "Restrict access to /metrics endpoint", "user": {"login": "fritjofbuettner", "id": 9321026, "node_id": "MDQ6VXNlcjkzMjEwMjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/9321026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritjofbuettner", "html_url": "https://github.com/fritjofbuettner", "followers_url": "https://api.github.com/users/fritjofbuettner/followers", "following_url": "https://api.github.com/users/fritjofbuettner/following{/other_user}", "gists_url": "https://api.github.com/users/fritjofbuettner/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritjofbuettner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritjofbuettner/subscriptions", "organizations_url": "https://api.github.com/users/fritjofbuettner/orgs", "repos_url": "https://api.github.com/users/fritjofbuettner/repos", "events_url": "https://api.github.com/users/fritjofbuettner/events{/privacy}", "received_events_url": "https://api.github.com/users/fritjofbuettner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-04T14:41:05Z", "updated_at": "2019-01-07T10:07:04Z", "closed_at": "2019-01-07T10:07:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nfor security reasons, I would like to restrict access to the `/metrics` endpoint to a certain IP address (the external Prometheus server).\r\nWhat would be the best way to implement this?\r\nThanks!\r\n\r\n----\r\n\r\n*Python 3.6, Flask 1.0.2, prometheus-flask-exporter 0.5.1*", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/15", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/15/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/15/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/15", "id": 387765603, "node_id": "MDU6SXNzdWUzODc3NjU2MDM=", "number": 15, "title": "WSGI Example with dedicated port", "user": {"login": "Miouge1", "id": 13647208, "node_id": "MDQ6VXNlcjEzNjQ3MjA4", "avatar_url": "https://avatars0.githubusercontent.com/u/13647208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Miouge1", "html_url": "https://github.com/Miouge1", "followers_url": "https://api.github.com/users/Miouge1/followers", "following_url": "https://api.github.com/users/Miouge1/following{/other_user}", "gists_url": "https://api.github.com/users/Miouge1/gists{/gist_id}", "starred_url": "https://api.github.com/users/Miouge1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Miouge1/subscriptions", "organizations_url": "https://api.github.com/users/Miouge1/orgs", "repos_url": "https://api.github.com/users/Miouge1/repos", "events_url": "https://api.github.com/users/Miouge1/events{/privacy}", "received_events_url": "https://api.github.com/users/Miouge1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-05T13:50:07Z", "updated_at": "2018-12-07T20:24:58Z", "closed_at": "2018-12-07T20:24:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nFirst off great work with `prometheus_flask_exporter` it makes instrumentation easier to get into.\r\n\r\nI am struggling to get the exporter exposed on a dedicated port (say TCP/9100) when using `gunicorn` or `uwsgi`. Do you have any example of such a setup?\r\n\r\nHere is an example with dev server on metrics on a dedicated port:\r\n```\r\nfrom flask import Flask\r\nfrom prometheus_flask_exporter import PrometheusMetrics\r\n\r\napp = Flask(__name__)\r\nmetrics = PrometheusMetrics(app, path=None)\r\n\r\n\r\n@app.route('/')\r\ndef index():\r\n    return 'Hello world'\r\n\r\n\r\nif __name__ == '__main__':\r\n    metrics.start_http_server(9100)\r\n    app.run(debug=False, port=5000)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/14", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/14/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/14/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/14", "id": 379826467, "node_id": "MDU6SXNzdWUzNzk4MjY0Njc=", "number": 14, "title": "AttributeError: 'Request' object has no attribute 'prom_start_time'", "user": {"login": "nonnib", "id": 4493631, "node_id": "MDQ6VXNlcjQ0OTM2MzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/4493631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nonnib", "html_url": "https://github.com/nonnib", "followers_url": "https://api.github.com/users/nonnib/followers", "following_url": "https://api.github.com/users/nonnib/following{/other_user}", "gists_url": "https://api.github.com/users/nonnib/gists{/gist_id}", "starred_url": "https://api.github.com/users/nonnib/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nonnib/subscriptions", "organizations_url": "https://api.github.com/users/nonnib/orgs", "repos_url": "https://api.github.com/users/nonnib/repos", "events_url": "https://api.github.com/users/nonnib/events{/privacy}", "received_events_url": "https://api.github.com/users/nonnib/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-11-12T15:26:14Z", "updated_at": "2018-11-13T09:49:16Z", "closed_at": "2018-11-13T09:43:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "`before_request` from `export_defaults()` is not guaranteed to run if some other `before_request` hook raises exception, for example for authentication.\r\n\r\nTherefore, when `after_request` is triggered `request.prom_start_time` might not be set. \r\n\r\nSuggested fix would be to skip the histogram section in `after_request` if `request` has no `prom_start_time` attribute.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/13", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/13/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/13/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/13", "id": 379824190, "node_id": "MDU6SXNzdWUzNzk4MjQxOTA=", "number": 13, "title": "Add support for grouping by url_rule", "user": {"login": "nonnib", "id": 4493631, "node_id": "MDQ6VXNlcjQ0OTM2MzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/4493631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nonnib", "html_url": "https://github.com/nonnib", "followers_url": "https://api.github.com/users/nonnib/followers", "following_url": "https://api.github.com/users/nonnib/following{/other_user}", "gists_url": "https://api.github.com/users/nonnib/gists{/gist_id}", "starred_url": "https://api.github.com/users/nonnib/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nonnib/subscriptions", "organizations_url": "https://api.github.com/users/nonnib/orgs", "repos_url": "https://api.github.com/users/nonnib/repos", "events_url": "https://api.github.com/users/nonnib/events{/privacy}", "received_events_url": "https://api.github.com/users/nonnib/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-11-12T15:21:02Z", "updated_at": "2018-11-13T11:25:17Z", "closed_at": "2018-11-13T11:21:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "In PR#3 the following flag was added: `group_by_endpoint`. This is a great addition since it allows you to group metrics by route rather then by absolute path.\r\n\r\nHowever, this will log out metrics grouped on the route name, e.g. `api.users_user` whereas it might be better to group it on the rule, e.g. `/users/<int:user_id>` (`request.url_rule`)\r\n\r\nMaybe `group_by_endpoint` can be extended to support either `url_rule` specifically or maybe make this more general by exposing `duration_group` directly?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/12", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/12/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/12/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/12", "id": 379390048, "node_id": "MDU6SXNzdWUzNzkzOTAwNDg=", "number": 12, "title": "The formatting in pypi is broken", "user": {"login": "geekodour", "id": 12918431, "node_id": "MDQ6VXNlcjEyOTE4NDMx", "avatar_url": "https://avatars3.githubusercontent.com/u/12918431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geekodour", "html_url": "https://github.com/geekodour", "followers_url": "https://api.github.com/users/geekodour/followers", "following_url": "https://api.github.com/users/geekodour/following{/other_user}", "gists_url": "https://api.github.com/users/geekodour/gists{/gist_id}", "starred_url": "https://api.github.com/users/geekodour/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geekodour/subscriptions", "organizations_url": "https://api.github.com/users/geekodour/orgs", "repos_url": "https://api.github.com/users/geekodour/repos", "events_url": "https://api.github.com/users/geekodour/events{/privacy}", "received_events_url": "https://api.github.com/users/geekodour/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-10T04:43:50Z", "updated_at": "2018-11-10T10:02:33Z", "closed_at": "2018-11-10T10:02:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://pypi.org/project/prometheus-flask-exporter/\r\n\r\nWhat can be done to fix this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/10", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/10/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/10/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/10", "id": 372467394, "node_id": "MDU6SXNzdWUzNzI0NjczOTQ=", "number": 10, "title": "Support using a prefix other than \"flask\"", "user": {"login": "jeteon", "id": 4679893, "node_id": "MDQ6VXNlcjQ2Nzk4OTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/4679893?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeteon", "html_url": "https://github.com/jeteon", "followers_url": "https://api.github.com/users/jeteon/followers", "following_url": "https://api.github.com/users/jeteon/following{/other_user}", "gists_url": "https://api.github.com/users/jeteon/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeteon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeteon/subscriptions", "organizations_url": "https://api.github.com/users/jeteon/orgs", "repos_url": "https://api.github.com/users/jeteon/repos", "events_url": "https://api.github.com/users/jeteon/events{/privacy}", "received_events_url": "https://api.github.com/users/jeteon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-22T10:27:03Z", "updated_at": "2018-10-23T11:22:25Z", "closed_at": "2018-10-23T11:16:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've noticed that all the metrics have the prefix \"flask\" hardcoded for them. In my environment, I'd like to use the library on multiple Flask based applications. It would be nice to be able to assign each one a unique prefix. Is this something that would be welcome as an addition to the library or is the official way to deal with this metric relabelling on ingest?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/9", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/9/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/9/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/9", "id": 367489585, "node_id": "MDU6SXNzdWUzNjc0ODk1ODU=", "number": 9, "title": "Doesn't seem to capture metrics for failed (500) requests?", "user": {"login": "mdz", "id": 436911, "node_id": "MDQ6VXNlcjQzNjkxMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/436911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdz", "html_url": "https://github.com/mdz", "followers_url": "https://api.github.com/users/mdz/followers", "following_url": "https://api.github.com/users/mdz/following{/other_user}", "gists_url": "https://api.github.com/users/mdz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdz/subscriptions", "organizations_url": "https://api.github.com/users/mdz/orgs", "repos_url": "https://api.github.com/users/mdz/repos", "events_url": "https://api.github.com/users/mdz/events{/privacy}", "received_events_url": "https://api.github.com/users/mdz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-06T19:45:48Z", "updated_at": "2018-10-08T20:51:02Z", "closed_at": "2018-10-08T20:48:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, thanks for sharing this, it seems very close to what I need. My use case is to collect metrics for all requests by status code, for monitoring and alerting. So it's very important that 500s be included in the metrics.\r\n\r\nAfter enabling prometheus_flask_exporter, I get metrics at `/metrics` immediately (yay!) but if I cause an unhandled exception, a 500 is returned to the client, but no metrics are captured. Is this true for others, or just me?\r\n\r\nhttp://flask.pocoo.org/docs/1.0/api/ suggests that `after_request` may not be called in this case, and it looks like that's the hook that the exporter is relying on.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/6", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/6/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/6/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/6", "id": 317194847, "node_id": "MDU6SXNzdWUzMTcxOTQ4NDc=", "number": 6, "title": "Examples of Prometheus queries", "user": {"login": "JackLeo", "id": 420622, "node_id": "MDQ6VXNlcjQyMDYyMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/420622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JackLeo", "html_url": "https://github.com/JackLeo", "followers_url": "https://api.github.com/users/JackLeo/followers", "following_url": "https://api.github.com/users/JackLeo/following{/other_user}", "gists_url": "https://api.github.com/users/JackLeo/gists{/gist_id}", "starred_url": "https://api.github.com/users/JackLeo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JackLeo/subscriptions", "organizations_url": "https://api.github.com/users/JackLeo/orgs", "repos_url": "https://api.github.com/users/JackLeo/repos", "events_url": "https://api.github.com/users/JackLeo/events{/privacy}", "received_events_url": "https://api.github.com/users/JackLeo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-24T12:04:13Z", "updated_at": "2018-05-05T12:34:39Z", "closed_at": "2018-05-05T12:34:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "There should be an example of useful queries with the default data gathered.\r\nComming to this out of the blue its a bit hard to figure out what should I inspect. For e.g. is this is a right approach?\r\n\r\n```\r\navg(\r\n    (\r\n        flask_http_request_duration_seconds_sum{status='200'} / \r\n        flask_http_request_duration_seconds_count{status='200'}\r\n    )\r\n) by (endpoint)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/5", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/5/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/5/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/5", "id": 312109994, "node_id": "MDU6SXNzdWUzMTIxMDk5OTQ=", "number": 5, "title": "wsgi daemon mode", "user": {"login": "thatcher", "id": 28306, "node_id": "MDQ6VXNlcjI4MzA2", "avatar_url": "https://avatars0.githubusercontent.com/u/28306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thatcher", "html_url": "https://github.com/thatcher", "followers_url": "https://api.github.com/users/thatcher/followers", "following_url": "https://api.github.com/users/thatcher/following{/other_user}", "gists_url": "https://api.github.com/users/thatcher/gists{/gist_id}", "starred_url": "https://api.github.com/users/thatcher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thatcher/subscriptions", "organizations_url": "https://api.github.com/users/thatcher/orgs", "repos_url": "https://api.github.com/users/thatcher/repos", "events_url": "https://api.github.com/users/thatcher/events{/privacy}", "received_events_url": "https://api.github.com/users/thatcher/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 30, "created_at": "2018-04-06T20:38:02Z", "updated_at": "2019-09-12T10:52:39Z", "closed_at": "2018-12-17T11:50:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I run my stateless flask apps with mod_wsgi/apache using daemon mode like:\r\n\r\n```\r\nWSGIDaemonProcess foo-services python-home=/opt/my_org/foo-services/_env processes=8 threads=48 maximum-requests=10000 display-name=%{GROUP}\r\nWSGIApplicationGroup %{GLOBAL}\r\nWSGISocketPrefix /var/run/wsgi\r\n\r\n\r\nAlias /image-services \"/opt/my_org/foo-services/wsgi.py\"\r\n<Location \"/for-services\">\r\nSetHandler wsgi-script\r\nOptions +ExecCGI\r\nFileETag None\r\nExpiresActive On\r\nExpiresDefault \"access plus 1 year\"\r\nWSGIProcessGroup image-services\r\n</Location>\r\n\r\n```\r\n\r\nWhich means when a request gets to the service it could be hitting 1 of 8 daemon processes each of which have their own memory in isolation of the others.  Does the metrics endpoint store the prometheus data in a way that is shared across these daemons?\r\n\r\nI can create some tests to verify if thats the case or not, just curious if the answer is already known.\r\n\r\nThanks,\r\nThatcher", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/4", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/4/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/4/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/4", "id": 306791483, "node_id": "MDU6SXNzdWUzMDY3OTE0ODM=", "number": 4, "title": "Using `start_http_server` results into undefined behaviour", "user": {"login": "sbrandtb", "id": 1580789, "node_id": "MDQ6VXNlcjE1ODA3ODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1580789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sbrandtb", "html_url": "https://github.com/sbrandtb", "followers_url": "https://api.github.com/users/sbrandtb/followers", "following_url": "https://api.github.com/users/sbrandtb/following{/other_user}", "gists_url": "https://api.github.com/users/sbrandtb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sbrandtb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sbrandtb/subscriptions", "organizations_url": "https://api.github.com/users/sbrandtb/orgs", "repos_url": "https://api.github.com/users/sbrandtb/repos", "events_url": "https://api.github.com/users/sbrandtb/events{/privacy}", "received_events_url": "https://api.github.com/users/sbrandtb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-03-20T09:43:51Z", "updated_at": "2018-12-17T13:01:24Z", "closed_at": "2018-03-20T21:42:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "When starting a Flask app in debug mode (`werkzeug` server) on port, let's say, 5000 and using `PrometheusMetrics.start_http_server` on another port, let's say 9000, Prometheus endpoint is served properly on port 9000, but _also_ on port 5000, resulting in responses that come randomly from the original or the prometheus Flask app.\r\n\r\nI'm not sure if that's a limitation of `werkzeug` - however, when running the original Flask app with another WSGI container, this behaviour disappears.\r\n\r\nSo, why not just use `start_http_server` of `prometheus_client` under the hood? Is there a particular reason to serve metrics via Flask?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/2", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/2/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/2/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/2", "id": 300323955, "node_id": "MDU6SXNzdWUzMDAzMjM5NTU=", "number": 2, "title": "Metrics per view function name instead of URL path?", "user": {"login": "nottrobin", "id": 519935, "node_id": "MDQ6VXNlcjUxOTkzNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/519935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nottrobin", "html_url": "https://github.com/nottrobin", "followers_url": "https://api.github.com/users/nottrobin/followers", "following_url": "https://api.github.com/users/nottrobin/following{/other_user}", "gists_url": "https://api.github.com/users/nottrobin/gists{/gist_id}", "starred_url": "https://api.github.com/users/nottrobin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nottrobin/subscriptions", "organizations_url": "https://api.github.com/users/nottrobin/orgs", "repos_url": "https://api.github.com/users/nottrobin/repos", "events_url": "https://api.github.com/users/nottrobin/events{/privacy}", "received_events_url": "https://api.github.com/users/nottrobin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-02-26T17:18:14Z", "updated_at": "2018-02-27T22:34:37Z", "closed_at": "2018-02-27T21:04:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A new set of metrics for each path makes for a very noisy export, in our case. There could be literally thousands of paths.\r\n\r\nWould it be possible to support tracking by the name of the function handling the request, rather than the path? Similar to what [django-prometheus](https://github.com/korfuri/django-prometheus) does.\r\n\r\nSo that the code:\r\n\r\n``` python3\r\nmetrics = prometheus_flask_exporter.PrometheusMetrics(app)\r\n\r\n@route('/<page_name>')\r\ndef process_page(page_name):\r\n    # ...\r\n```\r\n\r\nInstead of outputting:\r\n\r\n```\r\nflask_http_request_duration_seconds_bucket{le=\"0.005\",method=\"GET\",path=\"/page1\",status=\"200\"} 0.0\r\nflask_http_request_duration_seconds_bucket{le=\"+Inf\",method=\"GET\",path=\"/page1\",status=\"200\"} 1.0\r\n...\r\nflask_http_request_duration_seconds_bucket{le=\"0.005\",method=\"GET\",path=\"/page2\",status=\"200\"} 0.0\r\nflask_http_request_duration_seconds_bucket{le=\"+Inf\",method=\"GET\",path=\"/page2\",status=\"200\"} 1.0\r\n```\r\n\r\nWould output:\r\n\r\n```\r\nflask_http_request_duration_seconds_bucket{le=\"0.005\",method=\"GET\",function=\"process_page\",status=\"200\"} 0.0\r\nflask_http_request_duration_seconds_bucket{le=\"+Inf\",method=\"GET\",function=\"process_page\",status=\"200\"} 2.0\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/1", "repository_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter", "labels_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/1/comments", "events_url": "https://api.github.com/repos/rycus86/prometheus_flask_exporter/issues/1/events", "html_url": "https://github.com/rycus86/prometheus_flask_exporter/issues/1", "id": 285119786, "node_id": "MDU6SXNzdWUyODUxMTk3ODY=", "number": 1, "title": "HTTP Errors do not seem to be tracked", "user": {"login": "Lawouach", "id": 769982, "node_id": "MDQ6VXNlcjc2OTk4Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/769982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lawouach", "html_url": "https://github.com/Lawouach", "followers_url": "https://api.github.com/users/Lawouach/followers", "following_url": "https://api.github.com/users/Lawouach/following{/other_user}", "gists_url": "https://api.github.com/users/Lawouach/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lawouach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lawouach/subscriptions", "organizations_url": "https://api.github.com/users/Lawouach/orgs", "repos_url": "https://api.github.com/users/Lawouach/repos", "events_url": "https://api.github.com/users/Lawouach/events{/privacy}", "received_events_url": "https://api.github.com/users/Lawouach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-29T16:28:31Z", "updated_at": "2017-12-29T21:04:12Z", "closed_at": "2017-12-29T20:51:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nI noticed that, non-global metrics do not seem to handle HTTP errors raised by flask. For instance, for this very dummy handler:\r\n\r\n```\r\n\r\n@app.route('/')\r\n@metrics.summary('http_index_requests_by_status',\r\n                 'Request latencies by status',\r\n                 labels={'status': lambda r: r.status_code})\r\n@metrics.histogram('http_index_requests_by_status_and_path', \r\n                   'Index requests latencies by status and path',\r\n                   labels={\r\n                       'status': lambda r: r.status_code,\r\n                       'path': lambda: request.path})\r\ndef index():\r\n    if not state[\"running\"]:\r\n        return abort(500)\r\n    return 'Hello World!'\r\n```\r\n\r\nThe `http_index_requests_by_status_and_path` metric never reports the 500 whereas the global `flask_http_request_duration_seconds_count` does. I wonder if the code handles the exception that is triggered by calling \u0300abort(500)`.\r\n", "performed_via_github_app": null, "score": 1.0}]}