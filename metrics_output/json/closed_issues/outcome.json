{"total_count": 9, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/python-trio/outcome/issues/22", "repository_url": "https://api.github.com/repos/python-trio/outcome", "labels_url": "https://api.github.com/repos/python-trio/outcome/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/outcome/issues/22/comments", "events_url": "https://api.github.com/repos/python-trio/outcome/issues/22/events", "html_url": "https://github.com/python-trio/outcome/issues/22", "id": 358762174, "node_id": "MDU6SXNzdWUzNTg3NjIxNzQ=", "number": 22, "title": "Next release", "user": {"login": "RazerM", "id": 1337586, "node_id": "MDQ6VXNlcjEzMzc1ODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1337586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RazerM", "html_url": "https://github.com/RazerM", "followers_url": "https://api.github.com/users/RazerM/followers", "following_url": "https://api.github.com/users/RazerM/following{/other_user}", "gists_url": "https://api.github.com/users/RazerM/gists{/gist_id}", "starred_url": "https://api.github.com/users/RazerM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RazerM/subscriptions", "organizations_url": "https://api.github.com/users/RazerM/orgs", "repos_url": "https://api.github.com/users/RazerM/repos", "events_url": "https://api.github.com/users/RazerM/events{/privacy}", "received_events_url": "https://api.github.com/users/RazerM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-10T19:32:11Z", "updated_at": "2018-09-11T23:43:42Z", "closed_at": "2018-09-11T23:43:42Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "It's time for a release to get #13 (packaging reasons) and #21 out.\r\n\r\nAre there any objections to making it a 1.0 release with `Development Status :: 5 - Production/Stable`?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/outcome/issues/17", "repository_url": "https://api.github.com/repos/python-trio/outcome", "labels_url": "https://api.github.com/repos/python-trio/outcome/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/outcome/issues/17/comments", "events_url": "https://api.github.com/repos/python-trio/outcome/issues/17/events", "html_url": "https://github.com/python-trio/outcome/issues/17", "id": 338665101, "node_id": "MDU6SXNzdWUzMzg2NjUxMDE=", "number": 17, "title": "Unintuitive inheritance in Python 3.5+", "user": {"login": "nonsleepr", "id": 2337602, "node_id": "MDQ6VXNlcjIzMzc2MDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2337602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nonsleepr", "html_url": "https://github.com/nonsleepr", "followers_url": "https://api.github.com/users/nonsleepr/followers", "following_url": "https://api.github.com/users/nonsleepr/following{/other_user}", "gists_url": "https://api.github.com/users/nonsleepr/gists{/gist_id}", "starred_url": "https://api.github.com/users/nonsleepr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nonsleepr/subscriptions", "organizations_url": "https://api.github.com/users/nonsleepr/orgs", "repos_url": "https://api.github.com/users/nonsleepr/repos", "events_url": "https://api.github.com/users/nonsleepr/events{/privacy}", "received_events_url": "https://api.github.com/users/nonsleepr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "RazerM", "id": 1337586, "node_id": "MDQ6VXNlcjEzMzc1ODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1337586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RazerM", "html_url": "https://github.com/RazerM", "followers_url": "https://api.github.com/users/RazerM/followers", "following_url": "https://api.github.com/users/RazerM/following{/other_user}", "gists_url": "https://api.github.com/users/RazerM/gists{/gist_id}", "starred_url": "https://api.github.com/users/RazerM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RazerM/subscriptions", "organizations_url": "https://api.github.com/users/RazerM/orgs", "repos_url": "https://api.github.com/users/RazerM/repos", "events_url": "https://api.github.com/users/RazerM/events{/privacy}", "received_events_url": "https://api.github.com/users/RazerM/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "RazerM", "id": 1337586, "node_id": "MDQ6VXNlcjEzMzc1ODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1337586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RazerM", "html_url": "https://github.com/RazerM", "followers_url": "https://api.github.com/users/RazerM/followers", "following_url": "https://api.github.com/users/RazerM/following{/other_user}", "gists_url": "https://api.github.com/users/RazerM/gists{/gist_id}", "starred_url": "https://api.github.com/users/RazerM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RazerM/subscriptions", "organizations_url": "https://api.github.com/users/RazerM/orgs", "repos_url": "https://api.github.com/users/RazerM/repos", "events_url": "https://api.github.com/users/RazerM/events{/privacy}", "received_events_url": "https://api.github.com/users/RazerM/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2018-07-05T17:35:54Z", "updated_at": "2018-07-05T20:06:50Z", "closed_at": "2018-07-05T20:06:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nv = outcome.Value(100)\r\nisinstance(v, outcome.Outcome)\r\n# False\r\ne = outcome.Error(Exception('Boom!'))\r\nisinstance(e, outcome.Outcome)\r\n# False\r\n```\r\nI would expect both inherit from `outcome.Outcome`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/outcome/issues/12", "repository_url": "https://api.github.com/repos/python-trio/outcome", "labels_url": "https://api.github.com/repos/python-trio/outcome/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/outcome/issues/12/comments", "events_url": "https://api.github.com/repos/python-trio/outcome/issues/12/events", "html_url": "https://github.com/python-trio/outcome/issues/12", "id": 322063482, "node_id": "MDU6SXNzdWUzMjIwNjM0ODI=", "number": 12, "title": "outcome has a test dependency on trio, while trio has a regular dependency on outcome", "user": {"login": "catern", "id": 5394722, "node_id": "MDQ6VXNlcjUzOTQ3MjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5394722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catern", "html_url": "https://github.com/catern", "followers_url": "https://api.github.com/users/catern/followers", "following_url": "https://api.github.com/users/catern/following{/other_user}", "gists_url": "https://api.github.com/users/catern/gists{/gist_id}", "starred_url": "https://api.github.com/users/catern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catern/subscriptions", "organizations_url": "https://api.github.com/users/catern/orgs", "repos_url": "https://api.github.com/users/catern/repos", "events_url": "https://api.github.com/users/catern/events{/privacy}", "received_events_url": "https://api.github.com/users/catern/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-05-10T19:59:08Z", "updated_at": "2018-09-12T17:31:11Z", "closed_at": "2018-09-04T02:11:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "This makes it difficult to run outcome's tests while building a set of packages; if one's Python build process runs the tests for each package as it is built, then the only possibility is to just disable tests for outcome.\r\n\r\nIs it possible to break the circular dependency?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/outcome/issues/10", "repository_url": "https://api.github.com/repos/python-trio/outcome", "labels_url": "https://api.github.com/repos/python-trio/outcome/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/outcome/issues/10/comments", "events_url": "https://api.github.com/repos/python-trio/outcome/issues/10/events", "html_url": "https://github.com/python-trio/outcome/issues/10", "id": 314351649, "node_id": "MDU6SXNzdWUzMTQzNTE2NDk=", "number": 10, "title": "Monadic behavior", "user": {"login": "bluetech", "id": 1223550, "node_id": "MDQ6VXNlcjEyMjM1NTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1223550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluetech", "html_url": "https://github.com/bluetech", "followers_url": "https://api.github.com/users/bluetech/followers", "following_url": "https://api.github.com/users/bluetech/following{/other_user}", "gists_url": "https://api.github.com/users/bluetech/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluetech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluetech/subscriptions", "organizations_url": "https://api.github.com/users/bluetech/orgs", "repos_url": "https://api.github.com/users/bluetech/repos", "events_url": "https://api.github.com/users/bluetech/events{/privacy}", "received_events_url": "https://api.github.com/users/bluetech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-14T18:37:38Z", "updated_at": "2018-04-15T03:54:33Z", "closed_at": "2018-04-15T03:54:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does it make sense to have an `Outcome[Outcome[T]]`? In some languages/libraries, for example JavaScript `Promise`, this is not possible; instead this is always flattened to `Outcome[T]`.\r\n\r\nI don't think such magic is necessary in this library, but thought I'd bring it up.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/outcome/issues/9", "repository_url": "https://api.github.com/repos/python-trio/outcome", "labels_url": "https://api.github.com/repos/python-trio/outcome/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/outcome/issues/9/comments", "events_url": "https://api.github.com/repos/python-trio/outcome/issues/9/events", "html_url": "https://github.com/python-trio/outcome/issues/9", "id": 314351149, "node_id": "MDU6SXNzdWUzMTQzNTExNDk=", "number": 9, "title": "Use introspection to combine `capture` and `acapture`", "user": {"login": "bluetech", "id": 1223550, "node_id": "MDQ6VXNlcjEyMjM1NTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1223550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluetech", "html_url": "https://github.com/bluetech", "followers_url": "https://api.github.com/users/bluetech/followers", "following_url": "https://api.github.com/users/bluetech/following{/other_user}", "gists_url": "https://api.github.com/users/bluetech/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluetech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluetech/subscriptions", "organizations_url": "https://api.github.com/users/bluetech/orgs", "repos_url": "https://api.github.com/users/bluetech/repos", "events_url": "https://api.github.com/users/bluetech/events{/privacy}", "received_events_url": "https://api.github.com/users/bluetech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-14T18:29:46Z", "updated_at": "2018-04-15T03:57:35Z", "closed_at": "2018-04-15T03:57:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using some introspection, I believe it is possible to detect whether a function is sync or async. Therefore it is possible to write a `capture` which behaves like `acapture` is the function is async. So the API surface can be reduced.\r\n\r\nI don't necessarily endorse doing so but thought I'd bring it up anyway.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/outcome/issues/8", "repository_url": "https://api.github.com/repos/python-trio/outcome", "labels_url": "https://api.github.com/repos/python-trio/outcome/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/outcome/issues/8/comments", "events_url": "https://api.github.com/repos/python-trio/outcome/issues/8/events", "html_url": "https://github.com/python-trio/outcome/issues/8", "id": 314350883, "node_id": "MDU6SXNzdWUzMTQzNTA4ODM=", "number": 8, "title": "Wrap a function to return `Outcome`", "user": {"login": "bluetech", "id": 1223550, "node_id": "MDQ6VXNlcjEyMjM1NTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1223550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluetech", "html_url": "https://github.com/bluetech", "followers_url": "https://api.github.com/users/bluetech/followers", "following_url": "https://api.github.com/users/bluetech/following{/other_user}", "gists_url": "https://api.github.com/users/bluetech/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluetech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluetech/subscriptions", "organizations_url": "https://api.github.com/users/bluetech/orgs", "repos_url": "https://api.github.com/users/bluetech/repos", "events_url": "https://api.github.com/users/bluetech/events{/privacy}", "received_events_url": "https://api.github.com/users/bluetech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-14T18:26:26Z", "updated_at": "2018-04-17T12:29:37Z", "closed_at": "2018-04-17T12:29:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "The current `capture` API helps a caller of a function turn it from return value/exception to Outcome.\r\n\r\nSometimes a function itself wants to return `Outcome`. One way to do it is to return `Value`, `Error` directly. Another way, safer and more convenient, is to write the function in the usual style and then wrap it with `Outcome`. A decorator is natural for that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/outcome/issues/7", "repository_url": "https://api.github.com/repos/python-trio/outcome", "labels_url": "https://api.github.com/repos/python-trio/outcome/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/outcome/issues/7/comments", "events_url": "https://api.github.com/repos/python-trio/outcome/issues/7/events", "html_url": "https://github.com/python-trio/outcome/issues/7", "id": 310521807, "node_id": "MDU6SXNzdWUzMTA1MjE4MDc=", "number": 7, "title": "Should Outcome objects consume themselves when unwrapped?", "user": {"login": "RazerM", "id": 1337586, "node_id": "MDQ6VXNlcjEzMzc1ODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1337586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RazerM", "html_url": "https://github.com/RazerM", "followers_url": "https://api.github.com/users/RazerM/followers", "following_url": "https://api.github.com/users/RazerM/following{/other_user}", "gists_url": "https://api.github.com/users/RazerM/gists{/gist_id}", "starred_url": "https://api.github.com/users/RazerM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RazerM/subscriptions", "organizations_url": "https://api.github.com/users/RazerM/orgs", "repos_url": "https://api.github.com/users/RazerM/repos", "events_url": "https://api.github.com/users/RazerM/events{/privacy}", "received_events_url": "https://api.github.com/users/RazerM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-02T15:49:46Z", "updated_at": "2018-04-18T20:46:06Z", "closed_at": "2018-04-18T20:46:06Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "From python-trio/trio#466:\r\n\r\n@njsmith:\r\n> It's generally a mistake to unwrap the same `Result` object twice, because if it's an exception you'll end up with a corrupted traceback as the same exception object gets raised in two unrelated call stacks.\r\n>\r\n> We should at least document this, and maybe we should make `unwrap` \"consume\" the object so that if you call it twice then the second time it raises an error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/outcome/issues/5", "repository_url": "https://api.github.com/repos/python-trio/outcome", "labels_url": "https://api.github.com/repos/python-trio/outcome/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/outcome/issues/5/comments", "events_url": "https://api.github.com/repos/python-trio/outcome/issues/5/events", "html_url": "https://github.com/python-trio/outcome/issues/5", "id": 309574171, "node_id": "MDU6SXNzdWUzMDk1NzQxNzE=", "number": 5, "title": "Support **kwargs in capture/acapture?", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-29T00:02:24Z", "updated_at": "2018-04-11T20:44:49Z", "closed_at": "2018-04-11T20:44:49Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I left this out of the original version of this code because in general in trio this is a complicated issue (https://github.com/python-trio/trio/issues/470), and I figured it was better to be consistent with other trio functions like `trio.run`, where we need to reserve kwargs for controlling the parent function. But now that it's a separate library, that doesn't really apply. And `capture` and `acapture` are obviously complete as they stand; there's no way we'll ever want to add any other arguments to them.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/outcome/issues/2", "repository_url": "https://api.github.com/repos/python-trio/outcome", "labels_url": "https://api.github.com/repos/python-trio/outcome/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/outcome/issues/2/comments", "events_url": "https://api.github.com/repos/python-trio/outcome/issues/2/events", "html_url": "https://github.com/python-trio/outcome/issues/2", "id": 308809651, "node_id": "MDU6SXNzdWUzMDg4MDk2NTE=", "number": 2, "title": "MacOS CI broken", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-27T03:30:30Z", "updated_at": "2018-03-28T23:48:42Z", "closed_at": "2018-03-28T23:48:42Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "https://travis-ci.org/python-trio/outcome/jobs/358703591\r\n\r\nThis is because we're using the `pip` that comes with that python release, and it's now too old to support the version of TLS needed to connect to PyPI: https://status.python.org/incidents/hdx7w97m5hr8\r\n\r\nGiven how cranky Travis's MacOS support is, and how little platform-specific code is in this package, it might be simplest to drop MacOS testing from the test matrix.\r\n\r\n(This might affect other python-trio projects too... not sure. @smurfix, are your projects still testing on Travis's MacOS?)", "performed_via_github_app": null, "score": 1.0}]}