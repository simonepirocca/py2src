{"total_count": 79, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/260", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/260/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/260/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/260/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/260", "id": 647331442, "node_id": "MDU6SXNzdWU2NDczMzE0NDI=", "number": 260, "title": "[Question] Next release", "user": {"login": "eiband", "id": 15626879, "node_id": "MDQ6VXNlcjE1NjI2ODc5", "avatar_url": "https://avatars1.githubusercontent.com/u/15626879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eiband", "html_url": "https://github.com/eiband", "followers_url": "https://api.github.com/users/eiband/followers", "following_url": "https://api.github.com/users/eiband/following{/other_user}", "gists_url": "https://api.github.com/users/eiband/gists{/gist_id}", "starred_url": "https://api.github.com/users/eiband/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eiband/subscriptions", "organizations_url": "https://api.github.com/users/eiband/orgs", "repos_url": "https://api.github.com/users/eiband/repos", "events_url": "https://api.github.com/users/eiband/events{/privacy}", "received_events_url": "https://api.github.com/users/eiband/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-29T12:27:15Z", "updated_at": "2020-07-20T15:11:17Z", "closed_at": "2020-07-20T14:14:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "When will there be the next release? Master currently has some important fixes which are not available in 0.13.3, e.g. template parameter shouldn't match slash.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/255", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/255/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/255/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/255/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/255", "id": 638830691, "node_id": "MDU6SXNzdWU2Mzg4MzA2OTE=", "number": 255, "title": "Enum is not strict", "user": {"login": "postalXdude", "id": 25932682, "node_id": "MDQ6VXNlcjI1OTMyNjgy", "avatar_url": "https://avatars0.githubusercontent.com/u/25932682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/postalXdude", "html_url": "https://github.com/postalXdude", "followers_url": "https://api.github.com/users/postalXdude/followers", "following_url": "https://api.github.com/users/postalXdude/following{/other_user}", "gists_url": "https://api.github.com/users/postalXdude/gists{/gist_id}", "starred_url": "https://api.github.com/users/postalXdude/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/postalXdude/subscriptions", "organizations_url": "https://api.github.com/users/postalXdude/orgs", "repos_url": "https://api.github.com/users/postalXdude/repos", "events_url": "https://api.github.com/users/postalXdude/events{/privacy}", "received_events_url": "https://api.github.com/users/postalXdude/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-15T12:54:49Z", "updated_at": "2020-06-24T01:01:11Z", "closed_at": "2020-06-24T01:01:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "```yaml\r\n      - name: calendar_types\r\n        in: query\r\n        style: form\r\n        explode: false\r\n        schema:\r\n          maxItems: 3\r\n          minItems: 1\r\n          type: array\r\n          items:\r\n            type: string\r\n            enum:\r\n            - HOLIDAY\r\n            - BILLING\r\n            - PRICING_PERIOD\r\n```\r\n\r\nHi,\r\n\r\nEnum is not working ... at least not validation ... anything can be passed and error will not be raised\r\n\r\nversion is 0.13.3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/248", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/248/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/248/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/248/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/248", "id": 613259181, "node_id": "MDU6SXNzdWU2MTMyNTkxODE=", "number": 248, "title": "Is there a support for `required` field only for POST ?", "user": {"login": "sarangsbabu367", "id": 48784283, "node_id": "MDQ6VXNlcjQ4Nzg0Mjgz", "avatar_url": "https://avatars1.githubusercontent.com/u/48784283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sarangsbabu367", "html_url": "https://github.com/sarangsbabu367", "followers_url": "https://api.github.com/users/sarangsbabu367/followers", "following_url": "https://api.github.com/users/sarangsbabu367/following{/other_user}", "gists_url": "https://api.github.com/users/sarangsbabu367/gists{/gist_id}", "starred_url": "https://api.github.com/users/sarangsbabu367/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sarangsbabu367/subscriptions", "organizations_url": "https://api.github.com/users/sarangsbabu367/orgs", "repos_url": "https://api.github.com/users/sarangsbabu367/repos", "events_url": "https://api.github.com/users/sarangsbabu367/events{/privacy}", "received_events_url": "https://api.github.com/users/sarangsbabu367/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-06T11:49:35Z", "updated_at": "2020-06-09T05:54:04Z", "closed_at": "2020-06-09T05:54:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently i am using same `requestBody` structure for POST & PATCH(To reduce the schema size). But i need to use `required` only for POST requests. Is there any option in openapi-core to do that\r\n* if method==POST check required fields.\r\n* else Dont check required fields.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/242", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/242/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/242/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/242/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/242", "id": 601409375, "node_id": "MDU6SXNzdWU2MDE0MDkzNzU=", "number": 242, "title": "PathNotFound error when trying to validate request with query parameter", "user": {"login": "stojan-jovic", "id": 34024604, "node_id": "MDQ6VXNlcjM0MDI0NjA0", "avatar_url": "https://avatars0.githubusercontent.com/u/34024604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stojan-jovic", "html_url": "https://github.com/stojan-jovic", "followers_url": "https://api.github.com/users/stojan-jovic/followers", "following_url": "https://api.github.com/users/stojan-jovic/following{/other_user}", "gists_url": "https://api.github.com/users/stojan-jovic/gists{/gist_id}", "starred_url": "https://api.github.com/users/stojan-jovic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stojan-jovic/subscriptions", "organizations_url": "https://api.github.com/users/stojan-jovic/orgs", "repos_url": "https://api.github.com/users/stojan-jovic/repos", "events_url": "https://api.github.com/users/stojan-jovic/events{/privacy}", "received_events_url": "https://api.github.com/users/stojan-jovic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-16T20:01:22Z", "updated_at": "2020-05-10T14:37:43Z", "closed_at": "2020-05-10T14:37:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Found very strange bug, which is pretty critical for our work process, as it fully blocking endpoint validation (have no workaround for now).\r\n\r\nI'm working with Falcon middleware at low level, but issue can be easy reproduced with even simpler example. I will provide most minimal working example that can be used for reproducing issue.\r\n\r\nFalcon app (everything in single module, ugly, but only for testing purposes):\r\n```\r\nimport logging\r\nimport json\r\nimport falcon\r\nfrom wsgiref import simple_server\r\n\r\nfrom openapi_core import create_spec\r\nfrom openapi_spec_validator.schemas import read_yaml_file\r\nfrom openapi_core.contrib.falcon.middlewares import FalconOpenAPIMiddleware\r\n\r\nlogging.basicConfig()\r\nlogger = logging.getLogger(__name__)\r\nlogger.setLevel(logging.INFO)\r\n\r\n\r\nclass Resource(object):\r\n\r\n    def on_get(self, req, resp, path_param=None):\r\n        req_data = {}\r\n\r\n        if path_param is not None:\r\n            req_data['path'] = path_param\r\n\r\n        query_param = req.get_param('validate')\r\n        if query_param is not None:\r\n            req_data['query'] = query_param\r\n\r\n        resp.body = json.dumps(req_data)\r\n        resp.status = falcon.HTTP_200\r\n\r\n\r\nif __name__ == '__main__':\r\n    spec_dict = read_yaml_file('swagger.yml')\r\n    spec = create_spec(spec_dict)\r\n    openapi_middleware = FalconOpenAPIMiddleware.from_spec(spec)\r\n\r\n    # falcon_app = falcon.API()\r\n    falcon_app = falcon.API(middleware=[openapi_middleware])\r\n\r\n    test_resource = Resource()\r\n    falcon_app.add_route('/v1/test', test_resource)\r\n    falcon_app.add_route('/v1/test/{path_param}', test_resource)\r\n\r\n    httpd = simple_server.make_server('127.0.0.1', 8000, falcon_app)\r\n    logger.info('Now serving on port 8000')\r\n    httpd.serve_forever()\r\n```\r\n\r\nSwagger spec file content (`swagger.yml`):\r\n```\r\nopenapi: 3.0.0\r\n\r\ninfo:\r\n  version: 1.0.0\r\n  title: Test PathNotFound\r\n  description: Test PathNotFound\r\n  contact:\r\n    name: Test\r\n    url: http://www.test.com\r\n    email: support@test.com\r\n  license:\r\n    name: Test\r\n    url: https://www.test.com/terms-of-use/\r\n\r\nservers:\r\n  - url: http://localhost:8000\r\n  - url: /\r\n\r\ntags:\r\n  - name: Test\r\n    description: Test\r\n\r\npaths:\r\n  /v1/test:\r\n    get:\r\n      tags:\r\n        - Test\r\n      summary: Test\r\n      description: Test\r\n      parameters:\r\n        - name: validate\r\n          in: query\r\n          description: Test query parameter\r\n          schema:\r\n            type: string\r\n      responses:\r\n        200:\r\n          description: Successful\r\n        400:\r\n          description: BadRequest error\r\n        default:\r\n          description: Unexpected error\r\n  /v1/test/{path_param}:\r\n    get:\r\n      tags:\r\n        - Test\r\n      summary: Test\r\n      description: Test\r\n      parameters:\r\n        - name: path_param\r\n          in: path\r\n          required: true\r\n          description: Test path parameter\r\n          schema:\r\n            type: string\r\n        - name: validate\r\n          in: query\r\n          description: Test query parameter\r\n          schema:\r\n            type: string\r\n      responses:\r\n        200:\r\n          description: Successful\r\n        400:\r\n          description: BadRequest error\r\n        default:\r\n          description: Unexpected error\r\n```\r\n\r\nWhen I try to make simple `GET` request:\r\n```\r\ncurl http://localhost:8000/v1/test?validate=query_param\r\n```\r\n\r\nGetting following error:\r\n```\r\n{\r\n  \"errors\": [\r\n    {\r\n      \"title\": \"Path not found for http://localhost:8000/v1/test?validate=query_param\",\r\n      \"status\": 404,\r\n      \"class\": \"<class 'openapi_core.templating.paths.exceptions.PathNotFound'>\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nStrange thing is that if I have some path parameter in request, query parameter being properly validated, for example `GET` request:\r\n```\r\ncurl http://localhost:8000/v1/test/path_param?validate=query_param\r\n```\r\n\r\nRequest passing and returning result:\r\n```\r\n{\r\n  \"path\": \"path_param\",\r\n  \"query\": \"query_param\"\r\n}\r\n```\r\n\r\nIf we send the same requests without query parameters, everything working fine:\r\n```\r\ncurl http://localhost:8000/v1/test\r\ncurl http://localhost:8000/v1/test/path_param\r\n```\r\n\r\nHere there is stack trace for the same error (from my app, generated by my low-level middleware logic:):\r\n```\r\nTraceback (most recent call last):\r\n  File \"falcon_svc.py\", line 395, in process_resource\r\n    result.raise_for_errors()\r\n  File \"D:\\Work\\workspace2\\venvs\\.sim_venv\\lib\\site-packages\\openapi_core\\validation\\datatypes.py\", line 11, in raise_for_errors\r\n    raise error\r\n  File \"D:\\Work\\workspace2\\venvs\\.sim_venv\\lib\\site-packages\\openapi_core\\validation\\request\\validators.py\", line 29, in validate\r\n    path, operation, _, path_result, _ = self._find_path(request)\r\n  File \"D:\\Work\\workspace2\\venvs\\.sim_venv\\lib\\site-packages\\openapi_core\\validation\\validators.py\", line 19, in _find_path\r\n    return finder.find(request)\r\n  File \"D:\\Work\\workspace2\\venvs\\.sim_venv\\lib\\site-packages\\openapi_core\\templating\\paths\\finders.py\", line 23, in find\r\n    raise PathNotFound(request.full_url_pattern)\r\nopenapi_core.templating.paths.exceptions.PathNotFound: Path not found for http://localhost:8000/v1/test?validate=query_param\r\n```\r\n\r\nI did some very quick debugging and found pretty strange behavior of `PathFinder`'s `find` method (where error is raised), for example, request that has path parameter and being properly validated, looks like follows when parsed:\r\n```\r\nTemplateResult(pattern='/v1/test/{path_param}', variables={'path_param': 'path_param?validate=query_param'})\r\n```\r\nWhich does not looks to me as expected behavior and leads me to conclusion that it being validated with lucky circumstances.\r\n\r\nMy environment:\r\n```\r\nPackage                  Version                      \r\n------------------------ -----------------------------\r\nfalcon                   1.4.1\r\nopenapi-core             0.13.3\r\n```\r\n\r\nNot checked is this behavior the same with some other framework (Flask, Django), but I would say that this issue probably is not dependent on used framework. However, on the other side, it's strange that nobody found it till now?! Or I'm doing something wrong?\r\n\r\nIf there is no plans to debug this and provide fix, I would be happy to help with one PR with fix, if you can confirm that this is really bug and give me short directions where to look first!?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/240", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/240/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/240/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/240/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/240", "id": 598830428, "node_id": "MDU6SXNzdWU1OTg4MzA0Mjg=", "number": 240, "title": "Documentation does not reflect proper usage of Falcon request and response factories", "user": {"login": "stojan-jovic", "id": 34024604, "node_id": "MDQ6VXNlcjM0MDI0NjA0", "avatar_url": "https://avatars0.githubusercontent.com/u/34024604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stojan-jovic", "html_url": "https://github.com/stojan-jovic", "followers_url": "https://api.github.com/users/stojan-jovic/followers", "following_url": "https://api.github.com/users/stojan-jovic/following{/other_user}", "gists_url": "https://api.github.com/users/stojan-jovic/gists{/gist_id}", "starred_url": "https://api.github.com/users/stojan-jovic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stojan-jovic/subscriptions", "organizations_url": "https://api.github.com/users/stojan-jovic/orgs", "repos_url": "https://api.github.com/users/stojan-jovic/repos", "events_url": "https://api.github.com/users/stojan-jovic/events{/privacy}", "received_events_url": "https://api.github.com/users/stojan-jovic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-13T11:13:34Z", "updated_at": "2020-04-17T01:45:21Z", "closed_at": "2020-04-17T01:45:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "In current documentation we have something like this:\r\n```\r\nfrom openapi_core.contrib.falcon import FalconOpenAPIRequest\r\nfrom openapi_core.contrib.falcon import FalconOpenAPIResponse\r\n```\r\nBut that will not work with current `openapi-core` version (i.e. `0.13.3`).\r\n\r\nSolution is probably to add in `openapi_core.contrib.falcon` something like:\r\n```\r\n# backward compatibility\r\nFalconOpenAPIRequest = FalconOpenAPIRequestFactory.create\r\nFalconOpenAPIResponse = FalconOpenAPIResponseFactory.create\r\n```\r\n(so, similar to Flask's factories)\r\n\r\nOr simply fix documentation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/235", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/235/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/235/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/235", "id": 598114377, "node_id": "MDU6SXNzdWU1OTgxMTQzNzc=", "number": 235, "title": "Consider moving to isodate.parse_datetime as date time string unmarsaller", "user": {"login": "playpauseandstop", "id": 21325, "node_id": "MDQ6VXNlcjIxMzI1", "avatar_url": "https://avatars0.githubusercontent.com/u/21325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/playpauseandstop", "html_url": "https://github.com/playpauseandstop", "followers_url": "https://api.github.com/users/playpauseandstop/followers", "following_url": "https://api.github.com/users/playpauseandstop/following{/other_user}", "gists_url": "https://api.github.com/users/playpauseandstop/gists{/gist_id}", "starred_url": "https://api.github.com/users/playpauseandstop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/playpauseandstop/subscriptions", "organizations_url": "https://api.github.com/users/playpauseandstop/orgs", "repos_url": "https://api.github.com/users/playpauseandstop/repos", "events_url": "https://api.github.com/users/playpauseandstop/events{/privacy}", "received_events_url": "https://api.github.com/users/playpauseandstop/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1825416655, "node_id": "MDU6TGFiZWwxODI1NDE2NjU1", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/unmarshalling", "name": "area/unmarshalling", "color": "0052cc", "default": false, "description": "Indicates an issue on unmarshalling area."}, {"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-10T22:02:44Z", "updated_at": "2020-04-12T16:15:48Z", "closed_at": "2020-04-12T15:19:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've run into issue when default [format_datetime](https://github.com/p1c2u/openapi-core/blob/ca634758262f8412a07c223a067ab597735e7ae5/openapi_core/unmarshalling/schemas/util.py#L21) unmarshaller strips date time TZ as their code,\r\n\r\n```python\r\n    timestamp = strict_rfc3339.rfc3339_to_timestamp(value)\r\n    return datetime.datetime.utcfromtimestamp(timestamp)\r\n```\r\n\r\nconvert `datetime` string to timestamp and create new `datetime.datetime` instance without `tzinfo`.\r\n\r\nThis means, for schema,\r\n\r\n```yaml\r\n  value:\r\n    type: \"string\"\r\n    format: \"date-time\"\r\n```\r\n\r\nrequest or parameter data,\r\n\r\n```\r\n{\"value\": \"2020-04-01T12:00:00+02:00\"}\r\n```\r\n\r\nwill result in `value` of `datetime.datetime(2020, 4, 1, 10, 0, 0, tzinfo=None)` (tz naive datetime value) instead of tz aware datetime value.\r\n\r\nI've managed to fix it by supplying [isodate.parse_datetime](https://github.com/gweis/isodate/blob/master/src/isodate/isodatetime.py#L42) as unmarshaller for `date-time` strings in https://github.com/playpauseandstop/rororo/pull/39 and would like to ask you consider change current `format_datetime` unmarshaller to `parse_datetime` function instead.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/234", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/234/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/234/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/234", "id": 597990044, "node_id": "MDU6SXNzdWU1OTc5OTAwNDQ=", "number": 234, "title": "HttpProvider does not handle header parameters properly", "user": {"login": "stojan-jovic", "id": 34024604, "node_id": "MDQ6VXNlcjM0MDI0NjA0", "avatar_url": "https://avatars0.githubusercontent.com/u/34024604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stojan-jovic", "html_url": "https://github.com/stojan-jovic", "followers_url": "https://api.github.com/users/stojan-jovic/followers", "following_url": "https://api.github.com/users/stojan-jovic/following{/other_user}", "gists_url": "https://api.github.com/users/stojan-jovic/gists{/gist_id}", "starred_url": "https://api.github.com/users/stojan-jovic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stojan-jovic/subscriptions", "organizations_url": "https://api.github.com/users/stojan-jovic/orgs", "repos_url": "https://api.github.com/users/stojan-jovic/repos", "events_url": "https://api.github.com/users/stojan-jovic/events{/privacy}", "received_events_url": "https://api.github.com/users/stojan-jovic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1928794002, "node_id": "MDU6TGFiZWwxOTI4Nzk0MDAy", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/security", "name": "area/security", "color": "0052cc", "default": false, "description": "Indicates an issue on security area."}, {"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-10T17:00:12Z", "updated_at": "2020-04-11T12:40:06Z", "closed_at": "2020-04-11T12:09:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "My API working with Bearer JWT token and when I tried to enable security validation I found few issues. One is already reported in #223 and I'm glad to see that it's already fixed (thank you for that). Second issue is in the same `HttpProvider` class and refers to the handling of header parameters, specifically `Authorization` header - it's not case insensitive, but it should be, according to the [RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) and [RFC 7230](https://tools.ietf.org/html/rfc7230#appendix-A.2).\r\nAnd indeed, in my server logic this header field is upper-cased so current HTTP provider implementation raising error for my valid JWT token.\r\n\r\nFix should be pretty simple:\r\n```\r\nheaders = {k.lower(): v for k, v in request.parameters.header.items()}\r\nauth_header = headers.get('authorization')\r\nif auth_header is None:\r\n    raise SecurityError('Missing authorization header.')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/232", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/232/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/232/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/232/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/232", "id": 593336914, "node_id": "MDU6SXNzdWU1OTMzMzY5MTQ=", "number": 232, "title": "BUG: Unmarshalling nullable objects", "user": {"login": "berislavlopac", "id": 754090, "node_id": "MDQ6VXNlcjc1NDA5MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/754090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/berislavlopac", "html_url": "https://github.com/berislavlopac", "followers_url": "https://api.github.com/users/berislavlopac/followers", "following_url": "https://api.github.com/users/berislavlopac/following{/other_user}", "gists_url": "https://api.github.com/users/berislavlopac/gists{/gist_id}", "starred_url": "https://api.github.com/users/berislavlopac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/berislavlopac/subscriptions", "organizations_url": "https://api.github.com/users/berislavlopac/orgs", "repos_url": "https://api.github.com/users/berislavlopac/repos", "events_url": "https://api.github.com/users/berislavlopac/events{/privacy}", "received_events_url": "https://api.github.com/users/berislavlopac/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1825416655, "node_id": "MDU6TGFiZWwxODI1NDE2NjU1", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/unmarshalling", "name": "area/unmarshalling", "color": "0052cc", "default": false, "description": "Indicates an issue on unmarshalling area."}, {"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-03T12:09:11Z", "updated_at": "2020-04-12T15:19:22Z", "closed_at": "2020-04-12T15:19:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to my tests, the latest `openapi-core` release (`0.13.3` at the time of this writing) is ignoring the `nullable` keyword when unmarshalling an object, so it fails [here](https://github.com/p1c2u/openapi-core/blob/master/openapi_core/unmarshalling/schemas/unmarshallers.py#L198):\r\n\r\n```python\r\n  File \"/home/berislav/.virtualenvs/tm/lib/python3.7/site-packages/openapi_core/unmarshalling/schemas/unmarshallers.py\", line 201, in _unmarshal_properties\r\n    value_props_names = value.keys()\r\nAttributeError: 'NoneType' object has no attribute 'keys'\r\n```\r\n\r\nI will write a quick minimum test case when I have a minute, opening this now if someone can take a look.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/231", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/231/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/231/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/231/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/231", "id": 592394256, "node_id": "MDU6SXNzdWU1OTIzOTQyNTY=", "number": 231, "title": "multipart/form-data issue", "user": {"login": "sarangsbabu367", "id": 48784283, "node_id": "MDQ6VXNlcjQ4Nzg0Mjgz", "avatar_url": "https://avatars1.githubusercontent.com/u/48784283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sarangsbabu367", "html_url": "https://github.com/sarangsbabu367", "followers_url": "https://api.github.com/users/sarangsbabu367/followers", "following_url": "https://api.github.com/users/sarangsbabu367/following{/other_user}", "gists_url": "https://api.github.com/users/sarangsbabu367/gists{/gist_id}", "starred_url": "https://api.github.com/users/sarangsbabu367/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sarangsbabu367/subscriptions", "organizations_url": "https://api.github.com/users/sarangsbabu367/orgs", "repos_url": "https://api.github.com/users/sarangsbabu367/repos", "events_url": "https://api.github.com/users/sarangsbabu367/events{/privacy}", "received_events_url": "https://api.github.com/users/sarangsbabu367/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-02T06:38:49Z", "updated_at": "2020-04-03T05:31:05Z", "closed_at": "2020-04-03T05:31:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a data with content-type multipart/form-data, but in my request content-type is like, `multipart/form-data; boundary=---{some value}---` and the actual value reside in key,\r\n`multipart/form-data` so openapi-core is raising error, content for `multipart/form-data; boundary=---{some value}---` not found.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/230", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/230/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/230/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/230", "id": 589133460, "node_id": "MDU6SXNzdWU1ODkxMzM0NjA=", "number": 230, "title": "Support empty security in paths", "user": {"login": "MissiaL", "id": 6458407, "node_id": "MDQ6VXNlcjY0NTg0MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/6458407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MissiaL", "html_url": "https://github.com/MissiaL", "followers_url": "https://api.github.com/users/MissiaL/followers", "following_url": "https://api.github.com/users/MissiaL/following{/other_user}", "gists_url": "https://api.github.com/users/MissiaL/gists{/gist_id}", "starred_url": "https://api.github.com/users/MissiaL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MissiaL/subscriptions", "organizations_url": "https://api.github.com/users/MissiaL/orgs", "repos_url": "https://api.github.com/users/MissiaL/repos", "events_url": "https://api.github.com/users/MissiaL/events{/privacy}", "received_events_url": "https://api.github.com/users/MissiaL/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804496, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTY=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/question", "name": "kind/question", "color": "cc317c", "default": false, "description": ""}, {"id": 697804495, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTU=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/resolution/invalid", "name": "resolution/invalid", "color": "e6e6e6", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-27T13:27:57Z", "updated_at": "2020-03-31T20:40:32Z", "closed_at": "2020-03-31T20:40:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a schema like this\r\n```\r\n  /api/account/change-email/:\r\n    post:\r\n      operationId: deprecated:change_email\r\n      description: ''\r\n      tags:\r\n      - account\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/OldChangeEmailRequest'\r\n          application/x-www-form-urlencoded:\r\n            schema:\r\n              $ref: '#/components/schemas/OldChangeEmailRequest'\r\n          multipart/form-data:\r\n            schema:\r\n              $ref: '#/components/schemas/OldChangeEmailRequest'\r\n        required: true\r\n      security:\r\n      - cookieAuth: []\r\nsecurity:\r\n  - cookieAuth:\r\n      type: apiKey\r\n      in: cookie\r\n      name: Session\r\n```\r\nWhen i try to validate my request i get error \r\n\r\n```\r\n>       raise InvalidSecurity()\r\nE       openapi_core.validation.exceptions.InvalidSecurity: Security not valid for any requirement\r\n```\r\n\r\nI think because in my scheme is empty\r\n```\r\n      security:\r\n      - cookieAuth: []\r\n```\r\nCould you help?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/229", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/229/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/229/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/229", "id": 589107657, "node_id": "MDU6SXNzdWU1ODkxMDc2NTc=", "number": 229, "title": "Security scheme is incorrect", "user": {"login": "MissiaL", "id": 6458407, "node_id": "MDQ6VXNlcjY0NTg0MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/6458407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MissiaL", "html_url": "https://github.com/MissiaL", "followers_url": "https://api.github.com/users/MissiaL/followers", "following_url": "https://api.github.com/users/MissiaL/following{/other_user}", "gists_url": "https://api.github.com/users/MissiaL/gists{/gist_id}", "starred_url": "https://api.github.com/users/MissiaL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MissiaL/subscriptions", "organizations_url": "https://api.github.com/users/MissiaL/orgs", "repos_url": "https://api.github.com/users/MissiaL/repos", "events_url": "https://api.github.com/users/MissiaL/events{/privacy}", "received_events_url": "https://api.github.com/users/MissiaL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-27T12:43:01Z", "updated_at": "2020-03-27T13:11:43Z", "closed_at": "2020-03-27T13:11:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "As I see you Security Schemes must be under the Components Object.\r\nPlease check\r\nhttps://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#security-requirement-object\r\n\r\nYou must take the schema from the components. Now this is not done.\r\n```python\r\n        info_spec = spec_dict_deref.get('info', {})\r\n        servers_spec = spec_dict_deref.get('servers', [])\r\n        paths = spec_dict_deref.get('paths', {})\r\n        components_spec = spec_dict_deref.get('components', {})\r\n        security_spec = spec_dict_deref.get('security', [])\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/226", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/226/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/226/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/226/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/226", "id": 586246491, "node_id": "MDU6SXNzdWU1ODYyNDY0OTE=", "number": 226, "title": "PathFinder finds all patterns, who looks like my request path, and he return worst case", "user": {"login": "mrkovalchuk", "id": 18255783, "node_id": "MDQ6VXNlcjE4MjU1Nzgz", "avatar_url": "https://avatars3.githubusercontent.com/u/18255783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrkovalchuk", "html_url": "https://github.com/mrkovalchuk", "followers_url": "https://api.github.com/users/mrkovalchuk/followers", "following_url": "https://api.github.com/users/mrkovalchuk/following{/other_user}", "gists_url": "https://api.github.com/users/mrkovalchuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrkovalchuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrkovalchuk/subscriptions", "organizations_url": "https://api.github.com/users/mrkovalchuk/orgs", "repos_url": "https://api.github.com/users/mrkovalchuk/repos", "events_url": "https://api.github.com/users/mrkovalchuk/events{/privacy}", "received_events_url": "https://api.github.com/users/mrkovalchuk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}, {"id": 697804491, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTE=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/resolution/duplicate", "name": "resolution/duplicate", "color": "cccccc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-03-23T14:20:44Z", "updated_at": "2020-07-14T20:35:43Z", "closed_at": "2020-05-10T14:31:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Good day. Please start from comment in code:\r\nhttps://github.com/p1c2u/openapi-core/commit/dcb7161af7b273b824e57ed1f61e00bfe72d1899#r37991936\r\n\r\nIn my case PathFinder find three path patterns (with all him staff like a response and more...):\r\n**path_pattern** (from request): _api/some/reourse/{key}/this/path/_\r\nMatched patterns with important arg:\r\n1.  _api/some/reourse/{key}/_ mimetype: json\r\n2. _api/some/reourse/{key}/this/_ mimetype: json\r\n3. _api/some/reourse/{key}/this/path/_ mimetype: text/csv\r\n\r\nOk. Could be worse. We can see, number three - best match. But code from link say: I'll return first of them. Why? Why we use iterators everywhere, but still return one response for validation? Not the most accurate pattern. Just first. Please look like it be in 0.13.2 version. Radical changes. And I don't understand new logic =(\r\n\r\nThis behaviour produce error in schema validation process. Schema right. I checked it.\r\n\r\nThanks for help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/224", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/224/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/224/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/224/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/224", "id": 585764844, "node_id": "MDU6SXNzdWU1ODU3NjQ4NDQ=", "number": 224, "title": "Media type 'application/vnd.api+json' is not supported.", "user": {"login": "sarangsbabu367", "id": 48784283, "node_id": "MDQ6VXNlcjQ4Nzg0Mjgz", "avatar_url": "https://avatars1.githubusercontent.com/u/48784283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sarangsbabu367", "html_url": "https://github.com/sarangsbabu367", "followers_url": "https://api.github.com/users/sarangsbabu367/followers", "following_url": "https://api.github.com/users/sarangsbabu367/following{/other_user}", "gists_url": "https://api.github.com/users/sarangsbabu367/gists{/gist_id}", "starred_url": "https://api.github.com/users/sarangsbabu367/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sarangsbabu367/subscriptions", "organizations_url": "https://api.github.com/users/sarangsbabu367/orgs", "repos_url": "https://api.github.com/users/sarangsbabu367/repos", "events_url": "https://api.github.com/users/sarangsbabu367/events{/privacy}", "received_events_url": "https://api.github.com/users/sarangsbabu367/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-22T17:02:05Z", "updated_at": "2020-03-23T06:35:01Z", "closed_at": "2020-03-23T06:35:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "The content type `application/vnd.api+json` is not supported in openapi-core, When i added,\r\n`'application/vnd.api+json': json_loads`, in /deserializing/media_types/factories.py it solved the problem. Can you add this media-type ?\r\n![image](https://user-images.githubusercontent.com/48784283/77255375-ee73a900-6c8c-11ea-9a3f-9229f0ebd62d.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/223", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/223/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/223/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/223/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/223", "id": 585116222, "node_id": "MDU6SXNzdWU1ODUxMTYyMjI=", "number": 223, "title": "Support of Bearer JWT token ", "user": {"login": "funcodeio", "id": 6021556, "node_id": "MDQ6VXNlcjYwMjE1NTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6021556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funcodeio", "html_url": "https://github.com/funcodeio", "followers_url": "https://api.github.com/users/funcodeio/followers", "following_url": "https://api.github.com/users/funcodeio/following{/other_user}", "gists_url": "https://api.github.com/users/funcodeio/gists{/gist_id}", "starred_url": "https://api.github.com/users/funcodeio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funcodeio/subscriptions", "organizations_url": "https://api.github.com/users/funcodeio/orgs", "repos_url": "https://api.github.com/users/funcodeio/repos", "events_url": "https://api.github.com/users/funcodeio/events{/privacy}", "received_events_url": "https://api.github.com/users/funcodeio/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1928794002, "node_id": "MDU6TGFiZWwxOTI4Nzk0MDAy", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/security", "name": "area/security", "color": "0052cc", "default": false, "description": "Indicates an issue on security area."}, {"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-20T14:43:57Z", "updated_at": "2020-04-11T12:10:33Z", "closed_at": "2020-04-11T12:10:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "JWT token consists of three parts and they are concatenated with period('.'). Each part is encoded by base64url. However the entire concatenated string is not base64url encoding because of the period('.') in the middle.\r\n\r\nCurrently, openapi_core security validator is based on the assumption that token is base64url. So, sometimes it gives false alarm when I use JWT token string. It gives security error from time to time even tough I use correct JWT token.\r\n\r\nFor example, following token will fail although the token is correct JWT token. Whatever number of padding you add, it will fail because the function does not understand period(.) in the middle.\r\n\r\n```\r\nbase64.b64decode('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1ODQ2OTQ3NTguNzE3MzczNiwiZXhwIjoxNTg0NzMwNzU4LjcxNzM3MzYsInBheWxvYWQiOnsiZW1haWwiOiJpbmt5dUBwcmV4LmNvbSIsInVzZXJfaWQiOjIsImFjY291bnRfaWQiOjk4MDAxMDF9fQ.LpsGIDIf4sf2Vfi0JiJju2MeI6Wod2MVREOaKTMEthw')\r\nbase64.b64decode('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1ODQ2OTQ3NTguNzE3MzczNiwiZXhwIjoxNTg0NzMwNzU4LjcxNzM3MzYsInBheWxvYWQiOnsiZW1haWwiOiJpbmt5dUBwcmV4LmNvbSIsInVzZXJfaWQiOjIsImFjY291bnRfaWQiOjk4MDAxMDF9fQ.LpsGIDIf4sf2Vfi0JiJju2MeI6Wod2MVREOaKTMEthw=')\r\nbase64.b64decode('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1ODQ2OTQ3NTguNzE3MzczNiwiZXhwIjoxNTg0NzMwNzU4LjcxNzM3MzYsInBheWxvYWQiOnsiZW1haWwiOiJpbmt5dUBwcmV4LmNvbSIsInVzZXJfaWQiOjIsImFjY291bnRfaWQiOjk4MDAxMDF9fQ.LpsGIDIf4sf2Vfi0JiJju2MeI6Wod2MVREOaKTMEthw==')\r\nbase64.b64decode('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1ODQ2OTQ3NTguNzE3MzczNiwiZXhwIjoxNTg0NzMwNzU4LjcxNzM3MzYsInBheWxvYWQiOnsiZW1haWwiOiJpbmt5dUBwcmV4LmNvbSIsInVzZXJfaWQiOjIsImFjY291bnRfaWQiOjk4MDAxMDF9fQ.LpsGIDIf4sf2Vfi0JiJju2MeI6Wod2MVREOaKTMEthw===')\r\n```\r\n\r\nThe correct way of handling this token is to split by period and to try decoding each part separately.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/220", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/220/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/220/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/220/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/220", "id": 580619278, "node_id": "MDU6SXNzdWU1ODA2MTkyNzg=", "number": 220, "title": "Something funky is happening with paths after upgrade from 0.13.1 to 0.13.3", "user": {"login": "zupo", "id": 311580, "node_id": "MDQ6VXNlcjMxMTU4MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/311580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zupo", "html_url": "https://github.com/zupo", "followers_url": "https://api.github.com/users/zupo/followers", "following_url": "https://api.github.com/users/zupo/following{/other_user}", "gists_url": "https://api.github.com/users/zupo/gists{/gist_id}", "starred_url": "https://api.github.com/users/zupo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zupo/subscriptions", "organizations_url": "https://api.github.com/users/zupo/orgs", "repos_url": "https://api.github.com/users/zupo/repos", "events_url": "https://api.github.com/users/zupo/events{/privacy}", "received_events_url": "https://api.github.com/users/zupo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-03-13T13:59:48Z", "updated_at": "2020-04-02T11:19:59Z", "closed_at": "2020-03-23T12:42:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I maintain an example Pyramid app that uses openapi-core under the hood. When [upgrading the library from 0.13.1 to 0.13.3](https://github.com/niteoweb/pyramid-realworld-example-app/pull/97/files) I've encountered a strange bug: responses fail because they don't match schemas of other endpoints. Weird, right? Read on.\r\n\r\nIn the PR linked above, you can see that I had to move the endpoint definition for `/articles/{slug}/` to a position after endpoint definitions of more specific endpoints, such as `/articles/{slug}/comments`, `/articles/{slug}/comments/{id}` and `/articles/{slug}/favorite`. Otherwise, a valid request to `/articles/{slug}/comments` would fail during response validation with `ValidationError:'article' is a required property`. \r\n\r\nIt seems that something changed in how paths are registered and this change now requires that more specific subpaths are now defined *before* less specific paths. I.e. `/item/{id}` needs to be defined *below* `/item/{id}/foo` in `openapi.yaml` file. \r\n\r\nI haven't yet managed to isolate this bug further. @p1c2u do you have any ideas off the top of your head what could cause this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/219", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/219/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/219/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/219/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/219", "id": 580551690, "node_id": "MDU6SXNzdWU1ODA1NTE2OTA=", "number": 219, "title": "Bug in version 0.13.3", "user": {"login": "sarangsbabu367", "id": 48784283, "node_id": "MDQ6VXNlcjQ4Nzg0Mjgz", "avatar_url": "https://avatars1.githubusercontent.com/u/48784283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sarangsbabu367", "html_url": "https://github.com/sarangsbabu367", "followers_url": "https://api.github.com/users/sarangsbabu367/followers", "following_url": "https://api.github.com/users/sarangsbabu367/following{/other_user}", "gists_url": "https://api.github.com/users/sarangsbabu367/gists{/gist_id}", "starred_url": "https://api.github.com/users/sarangsbabu367/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sarangsbabu367/subscriptions", "organizations_url": "https://api.github.com/users/sarangsbabu367/orgs", "repos_url": "https://api.github.com/users/sarangsbabu367/repos", "events_url": "https://api.github.com/users/sarangsbabu367/events{/privacy}", "received_events_url": "https://api.github.com/users/sarangsbabu367/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-03-13T11:50:01Z", "updated_at": "2020-03-25T07:46:25Z", "closed_at": "2020-03-25T07:46:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/p1c2u/openapi-core/commit/7e920f829091f78506b99c422414569971e8071e#r37808923", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/218", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/218/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/218/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/218/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/218", "id": 579328730, "node_id": "MDU6SXNzdWU1NzkzMjg3MzA=", "number": 218, "title": "Relative servers broken since 0.13.3", "user": {"login": "zupo", "id": 311580, "node_id": "MDQ6VXNlcjMxMTU4MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/311580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zupo", "html_url": "https://github.com/zupo", "followers_url": "https://api.github.com/users/zupo/followers", "following_url": "https://api.github.com/users/zupo/following{/other_user}", "gists_url": "https://api.github.com/users/zupo/gists{/gist_id}", "starred_url": "https://api.github.com/users/zupo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zupo/subscriptions", "organizations_url": "https://api.github.com/users/zupo/orgs", "repos_url": "https://api.github.com/users/zupo/repos", "events_url": "https://api.github.com/users/zupo/events{/privacy}", "received_events_url": "https://api.github.com/users/zupo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-11T14:59:44Z", "updated_at": "2020-03-13T13:51:55Z", "closed_at": "2020-03-13T13:51:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We deploy staging on unpredictable URLs (hashes in subdomains) so the `servers` section of our `openapi.yaml` looks like so:\r\n\r\n```yaml\r\nservers:\r\n  - url: /api/v1\r\n```\r\n\r\nThis seems to be valid as per https://swagger.io/docs/specification/api-host-and-base-path/ which lists `/v1/reports` as a valid entry.\r\n\r\nHowever, the latest openapi-core fails with `ServerNotFound: Server not found for http://localhost/api/v1/foo`. The culprit seems to be in how `full_url_pattern` is split into `server_url_pattern`:\r\n\r\n```python\r\n(Pdb) l\r\n 68  \t                server_url_pattern = full_url_pattern.rsplit(path_result.resolved, 1)[0]\r\n 69  \t                server_url = server.get_absolute_url(self.base_url)\r\n 70  \t                if server_url.endswith(\"/\"):\r\n 71  \t                    server_url = server_url[:-1]\r\n 72  \t                # simple path\r\n 73  ->\t                if server_url_pattern.startswith(server_url):\r\n 74  \t                    server_result = TemplateResult(server.url, {})\r\n 75  \t                    yield (path, operation, server, path_result, server_result)\r\n 76  \t                # template path\r\n 77  \t                else:\r\n 78  \t                    result = parse(server.url, server_url_pattern)\r\n(Pdb) server_url_pattern.startswith(server_url)\r\nFalse\r\n(Pdb) server_url_pattern\r\n'http://localhost/api/v1'\r\n(Pdb) server_url\r\n'/api/v1'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/217", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/217/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/217/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/217/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/217", "id": 579036312, "node_id": "MDU6SXNzdWU1NzkwMzYzMTI=", "number": 217, "title": "Unable to install openapi-core 0.13.2 with poetry", "user": {"login": "sarangsbabu367", "id": 48784283, "node_id": "MDQ6VXNlcjQ4Nzg0Mjgz", "avatar_url": "https://avatars1.githubusercontent.com/u/48784283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sarangsbabu367", "html_url": "https://github.com/sarangsbabu367", "followers_url": "https://api.github.com/users/sarangsbabu367/followers", "following_url": "https://api.github.com/users/sarangsbabu367/following{/other_user}", "gists_url": "https://api.github.com/users/sarangsbabu367/gists{/gist_id}", "starred_url": "https://api.github.com/users/sarangsbabu367/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sarangsbabu367/subscriptions", "organizations_url": "https://api.github.com/users/sarangsbabu367/orgs", "repos_url": "https://api.github.com/users/sarangsbabu367/repos", "events_url": "https://api.github.com/users/sarangsbabu367/events{/privacy}", "received_events_url": "https://api.github.com/users/sarangsbabu367/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804491, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTE=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/resolution/duplicate", "name": "resolution/duplicate", "color": "cccccc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-11T06:23:17Z", "updated_at": "2020-03-11T10:01:54Z", "closed_at": "2020-03-11T10:01:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to install openapi-core 0.13.2 with poetry but i got this issue `Could not parse version constraint: >=\"3.0\"` In this issue https://github.com/python-poetry/poetry/issues/2119 they said it is an issue with openapi-core.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/216", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/216/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/216/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/216/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/216", "id": 578748826, "node_id": "MDU6SXNzdWU1Nzg3NDg4MjY=", "number": 216, "title": "create_spec() method taking too much time", "user": {"login": "sarangsbabu367", "id": 48784283, "node_id": "MDQ6VXNlcjQ4Nzg0Mjgz", "avatar_url": "https://avatars1.githubusercontent.com/u/48784283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sarangsbabu367", "html_url": "https://github.com/sarangsbabu367", "followers_url": "https://api.github.com/users/sarangsbabu367/followers", "following_url": "https://api.github.com/users/sarangsbabu367/following{/other_user}", "gists_url": "https://api.github.com/users/sarangsbabu367/gists{/gist_id}", "starred_url": "https://api.github.com/users/sarangsbabu367/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sarangsbabu367/subscriptions", "organizations_url": "https://api.github.com/users/sarangsbabu367/orgs", "repos_url": "https://api.github.com/users/sarangsbabu367/repos", "events_url": "https://api.github.com/users/sarangsbabu367/events{/privacy}", "received_events_url": "https://api.github.com/users/sarangsbabu367/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-03-10T17:34:56Z", "updated_at": "2020-04-19T07:06:34Z", "closed_at": "2020-04-19T07:06:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am building a large product and in this stage i have an `openapi-spec file with 28000 lines.`\r\nNow i have,\r\n\r\n- 53 path objects.\r\n\r\n- 14 schema objects.\r\n\r\nopenapi-core's `create_spec() method is taking around 29 to 34 seconds`. So my server is taking this much time to startup. Is there a remedy for this situation or is this the behaviour of openapi-core's validation ??\r\nps: So many `Dereferencing` log is present.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/207", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/207/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/207/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/207", "id": 573752870, "node_id": "MDU6SXNzdWU1NzM3NTI4NzA=", "number": 207, "title": "Http Bearer authentication broken on valid JWT token", "user": {"login": "zupo", "id": 311580, "node_id": "MDQ6VXNlcjMxMTU4MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/311580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zupo", "html_url": "https://github.com/zupo", "followers_url": "https://api.github.com/users/zupo/followers", "following_url": "https://api.github.com/users/zupo/following{/other_user}", "gists_url": "https://api.github.com/users/zupo/gists{/gist_id}", "starred_url": "https://api.github.com/users/zupo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zupo/subscriptions", "organizations_url": "https://api.github.com/users/zupo/orgs", "repos_url": "https://api.github.com/users/zupo/repos", "events_url": "https://api.github.com/users/zupo/events{/privacy}", "received_events_url": "https://api.github.com/users/zupo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-02T06:40:52Z", "updated_at": "2020-03-03T12:22:30Z", "closed_at": "2020-03-03T12:22:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "TL;DR: When using JWT HTTP Bearer auth, I get `Security not valid for any requirement` with underlying `Invalid base64 encoding.` in `security/providers.py`.\r\n\r\n## More info\r\n\r\nThis is the security part of my `openapi.yaml`:\r\n\r\n```yaml\r\n  securitySchemes:\r\n    Bearer:\r\n      type: http\r\n      scheme: bearer\r\n      bearerFormat: JWT\r\n      name: Authorization\r\n      in: header\r\n```\r\n\r\nThis is the JWT that I send via Swagger Docs in-browser generated client: `eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhYWFhYWFhYS1iYmJiLWNjY2MtZGRkZC1lZWVlZWVlZWVlZTEiLCJpYXQiOjE1ODMxMDAwNDN9.vXiR3Dea6EPar2aT4hbv79BeWbwEW0iuK0ppfUSB5qO190l1IbpTjf7TA24elc57YCyylQl9tlkC8Y6UO2quxg`. I verified it is a valid JWT via http://calebb.net/. The secret is `secret`.\r\n\r\nAnd lastly a PDB session of the above valid JWT failing to decode in `security/providers.py`:\r\n\r\n```python\r\n[25] > /tmp/test/.venv/lib/python3.7/site-packages/openapi_core/security/providers.py(44)__call__()\r\n-> return base64.b64decode(\r\n(Pdb++) encoded_credentials\r\n'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhYWFhYWFhYS1iYmJiLWNjY2MtZGRkZC1lZWVlZWVlZWVlZTEiLCJpYXQiOjE1ODMxMDAwNDN9.vXiR3Dea6EPar2aT4hbv79BeWbwEW0iuK0ppfUSB5qO190l1IbpTjf7TA24elc57YCyylQl9tlkC8Y6UO2quxg'\r\n(Pdb++) base64.b64decode(encoded_credentials.encode('ascii'))\r\n*** binascii.Error: Incorrect padding\r\nTraceback (most recent call last):\r\n  File \"/nix/store/5w2gzqgdkxchagx8kyc8g1m1i76jm4fc-python3-3.7.6/lib/python3.7/base64.py\", line 87, in b64decode\r\n    return binascii.a2b_base64(s)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/206", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/206/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/206/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/206/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/206", "id": 572641829, "node_id": "MDU6SXNzdWU1NzI2NDE4Mjk=", "number": 206, "title": "Can't install 0.13.2 with Poetry", "user": {"login": "zupo", "id": 311580, "node_id": "MDQ6VXNlcjMxMTU4MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/311580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zupo", "html_url": "https://github.com/zupo", "followers_url": "https://api.github.com/users/zupo/followers", "following_url": "https://api.github.com/users/zupo/following{/other_user}", "gists_url": "https://api.github.com/users/zupo/gists{/gist_id}", "starred_url": "https://api.github.com/users/zupo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zupo/subscriptions", "organizations_url": "https://api.github.com/users/zupo/orgs", "repos_url": "https://api.github.com/users/zupo/repos", "events_url": "https://api.github.com/users/zupo/events{/privacy}", "received_events_url": "https://api.github.com/users/zupo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-28T09:46:36Z", "updated_at": "2020-03-11T09:59:47Z", "closed_at": "2020-03-11T09:59:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "TL;DR: Version 0.13.2 of openapi-core cannot be installed using Poetry.  0.13.1 can be installed fine.\r\n\r\n### More details\r\n\r\nGiven a minimal Poetry project:\r\n\r\n```toml\r\n[tool.poetry]\r\nname = \"test\"\r\nversion = \"0.1.0\"\r\ndescription = \"\"\r\nauthors = [\"zupo\"]\r\n\r\n[tool.poetry.dependencies]\r\npython = \"^3.7\"\r\nopenapi-core = \"==0.12.0\"\r\n\r\n[tool.poetry.dev-dependencies]\r\n\r\n[build-system]\r\nrequires = [\"poetry>=0.12\"]\r\nbuild-backend = \"poetry.masonry.api\"\r\n\r\n```\r\n\r\nI can install it:\r\n\r\n```\r\n\u279c  tmp$ poetry install\r\nCreating virtualenv test-BBcLBBh7-py3.7 in /Users/zupo/Library/Caches/pypoetry/virtualenvs\r\nUpdating dependencies\r\nResolving dependencies... (1.6s)\r\n\r\nWriting lock file\r\n\r\n\r\nPackage operations: 12 installs, 0 updates, 0 removals\r\n\r\n  - Installing six (1.14.0)\r\n  - Installing zipp (3.0.0)\r\n  - Installing attrs (19.3.0)\r\n  - Installing importlib-metadata (1.5.0)\r\n  - Installing pyrsistent (0.15.7)\r\n  - Installing jsonschema (3.2.0)\r\n  - Installing pyyaml (5.3)\r\n  - Installing isodate (0.6.0)\r\n  - Installing lazy-object-proxy (1.4.3)\r\n  - Installing openapi-spec-validator (0.2.8)\r\n  - Installing strict-rfc3339 (0.7)\r\n  - Installing openapi-core (0.12.0)\r\n```\r\n\r\nThen I bump openapi-core version to `0.13.1.` and update the project:\r\n\r\n```diff\r\n- openapi-core = \"==0.12.0\"\r\n+ openapi-core = \"==0.13.1\"\r\n```\r\n\r\n```\r\n\u279c  tmp$ poetry update\r\nUpdating dependencies\r\nResolving dependencies... (0.2s)\r\n\r\nWriting lock file\r\n\r\n\r\nPackage operations: 0 installs, 12 updates, 0 removals\r\n\r\n  - Updating six (1.14.0 /Users/zupo/Library/Caches/pypoetry/virtualenvs/test-BBcLBBh7-py3.7/lib/python3.7/site-packages -> 1.14.0)\r\n  - Updating zipp (3.0.0 /Users/zupo/Library/Caches/pypoetry/virtualenvs/test-BBcLBBh7-py3.7/lib/python3.7/site-packages -> 3.0.0)\r\n  - Updating attrs (19.3.0 /Users/zupo/Library/Caches/pypoetry/virtualenvs/test-BBcLBBh7-py3.7/lib/python3.7/site-packages -> 19.3.0)\r\n  - Updating importlib-metadata (1.5.0 /Users/zupo/Library/Caches/pypoetry/virtualenvs/test-BBcLBBh7-py3.7/lib/python3.7/site-packages -> 1.5.0)\r\n  - Updating pyrsistent (0.15.7 /Users/zupo/Library/Caches/pypoetry/virtualenvs/test-BBcLBBh7-py3.7/lib/python3.7/site-packages -> 0.15.7)\r\n  - Updating jsonschema (3.2.0 /Users/zupo/Library/Caches/pypoetry/virtualenvs/test-BBcLBBh7-py3.7/lib/python3.7/site-packages -> 3.2.0)\r\n  - Updating pyyaml (5.3 /Users/zupo/Library/Caches/pypoetry/virtualenvs/test-BBcLBBh7-py3.7/lib/python3.7/site-packages -> 5.3)\r\n  - Updating isodate (0.6.0 /Users/zupo/Library/Caches/pypoetry/virtualenvs/test-BBcLBBh7-py3.7/lib/python3.7/site-packages -> 0.6.0)\r\n  - Updating lazy-object-proxy (1.4.3 /Users/zupo/Library/Caches/pypoetry/virtualenvs/test-BBcLBBh7-py3.7/lib/python3.7/site-packages -> 1.4.3)\r\n  - Updating openapi-spec-validator (0.2.8 /Users/zupo/Library/Caches/pypoetry/virtualenvs/test-BBcLBBh7-py3.7/lib/python3.7/site-packages -> 0.2.8)\r\n  - Updating strict-rfc3339 (0.7 /Users/zupo/Library/Caches/pypoetry/virtualenvs/test-BBcLBBh7-py3.7/lib/python3.7/site-packages -> 0.7)\r\n  - Updating openapi-core (0.12.0 /Users/zupo/Library/Caches/pypoetry/virtualenvs/test-BBcLBBh7-py3.7/lib/python3.7/site-packages -> 0.13.1)\r\n```\r\n\r\nSuccess! However, if I bump the version to 0.13.2, update/install fails:\r\n\r\n```diff\r\n- openapi-core = \"==0.13.1\"\r\n+ openapi-core = \"==0.13.2\"\r\n```\r\n\r\n```\r\n\u279c  tmp$ poetry update\r\nUpdating dependencies\r\nResolving dependencies... (1.7s)\r\n\r\n[ValueError]\r\nCould not parse version constraint: >=\"3.0\"\r\n```\r\n\r\nThe error is likely caused by [this line in setup.cfg](https://github.com/p1c2u/openapi-core/blob/18944893f755f910a747c80e35545292fab9c1d6/setup.cfg#L48).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/205", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/205/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/205/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/205/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/205", "id": 572291275, "node_id": "MDU6SXNzdWU1NzIyOTEyNzU=", "number": 205, "title": "Unmarshalling body does not work in 0.13.x", "user": {"login": "zupo", "id": 311580, "node_id": "MDQ6VXNlcjMxMTU4MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/311580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zupo", "html_url": "https://github.com/zupo", "followers_url": "https://api.github.com/users/zupo/followers", "following_url": "https://api.github.com/users/zupo/following{/other_user}", "gists_url": "https://api.github.com/users/zupo/gists{/gist_id}", "starred_url": "https://api.github.com/users/zupo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zupo/subscriptions", "organizations_url": "https://api.github.com/users/zupo/orgs", "repos_url": "https://api.github.com/users/zupo/repos", "events_url": "https://api.github.com/users/zupo/events{/privacy}", "received_events_url": "https://api.github.com/users/zupo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-27T19:04:14Z", "updated_at": "2020-02-29T15:17:42Z", "closed_at": "2020-02-29T15:17:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hey, me again, thanks for all your hard work! \r\n\r\nI'm [preparing `pyramid_openapi3` to support `openapi-core` `0.13.2`](https://github.com/Pylons/pyramid_openapi3/pull/60/files) and I have a problem getting marshalling of raw body values into Model objects:\r\n\r\nThis is PDB session in https://github.com/p1c2u/openapi-core/blob/master/openapi_core/validation/request/validators.py#L265:\r\n\r\n```python\r\n(Pdb) self.spec._resolver\r\n<jsonschema.validators.RefResolver object at 0x10d663b10>\r\n(Pdb) self.custom_formatters\r\n(Pdb) context=UnmarshalContext.REQUEST\r\n(Pdb) value\r\n{'title': 'Add marmalade'}\r\n(Pdb) unmarshaller\r\n<openapi_core.unmarshalling.schemas.unmarshallers.ObjectUnmarshaller object at 0x10d6c1090>\r\n(Pdb) unmarshaller(value)\r\n{'title': 'Add marmalade'}\r\n```\r\n\r\nThe last line is a dict, not a Model object. Is this expected?\r\n\r\n\r\n## More info\r\n\r\nIf it helps in any way, same PDB session, but one level higher, at: https://github.com/p1c2u/openapi-core/blob/master/openapi_core/validation/request/validators.py#L188\r\n\r\n```python\r\n(Pdb) media_type.mimetype\r\n'application/json'\r\n(Pdb) casted\r\n{'title': 'Add marmalade'}\r\n```\r\n\r\nThis bug then manifests in [my example \"todo\" app](https://github.com/Pylons/pyramid_openapi3/pull/60/files#diff-47578e848cd9079b0515a464bb812219L53-R47) like so:\r\n\r\n```diff\r\n-     item = Item(title=request.openapi_validated.body.title)\r\n+    item = Item(title=request.openapi_validated.body[\"title\"])\r\n```\r\n\r\nI.e. I cannot call `body.title` since body is now a dict and I need to use dictionary access. Is this a regression or am I missing something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/201", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/201/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/201/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/201/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/201", "id": 567568002, "node_id": "MDU6SXNzdWU1Njc1NjgwMDI=", "number": 201, "title": "Potential missing dependency", "user": {"login": "berislavlopac", "id": 754090, "node_id": "MDQ6VXNlcjc1NDA5MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/754090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/berislavlopac", "html_url": "https://github.com/berislavlopac", "followers_url": "https://api.github.com/users/berislavlopac/followers", "following_url": "https://api.github.com/users/berislavlopac/following{/other_user}", "gists_url": "https://api.github.com/users/berislavlopac/gists{/gist_id}", "starred_url": "https://api.github.com/users/berislavlopac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/berislavlopac/subscriptions", "organizations_url": "https://api.github.com/users/berislavlopac/orgs", "repos_url": "https://api.github.com/users/berislavlopac/repos", "events_url": "https://api.github.com/users/berislavlopac/events{/privacy}", "received_events_url": "https://api.github.com/users/berislavlopac/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-19T13:25:38Z", "updated_at": "2020-02-24T09:59:13Z", "closed_at": "2020-02-24T09:59:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run my tests on the latest release (`0.13.1`) I'm getting the following error:\r\n\r\n```\r\nImportError while importing test module '/home/berislav/Development/personal/pyotr/src/tests/test_server.py'.\r\nHint: make sure your test modules/packages have valid Python names.\r\nTraceback:\r\nsrc/tests/test_server.py:7: in <module>\r\n    from pyotr.server import Application\r\nsrc/pyotr/server.py:10: in <module>\r\n    from openapi_core import create_spec\r\n../../../.virtualenvs/pyotr/lib/python3.7/site-packages/openapi_core/__init__.py:3: in <module>\r\n    from openapi_core.shortcuts import (\r\n../../../.virtualenvs/pyotr/lib/python3.7/site-packages/openapi_core/shortcuts.py:4: in <module>\r\n    from openapi_core.validation.request.shortcuts import (\r\n../../../.virtualenvs/pyotr/lib/python3.7/site-packages/openapi_core/validation/request/shortcuts.py:10: in <module>\r\n    from openapi_core.validation.request.validators import RequestValidator\r\n../../../.virtualenvs/pyotr/lib/python3.7/site-packages/openapi_core/validation/request/validators.py:21: in <module>\r\n    from openapi_core.validation.request.datatypes import (\r\n../../../.virtualenvs/pyotr/lib/python3.7/site-packages/openapi_core/validation/request/datatypes.py:3: in <module>\r\n    from werkzeug.datastructures import ImmutableMultiDict\r\nE   ModuleNotFoundError: No module named 'werkzeug'\r\n```\r\n\r\n`werkzeug` is listed in `setup.cfg` under `options.extras_require`, but this error implies that it's used more generally?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/198", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/198/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/198/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/198/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/198", "id": 566785561, "node_id": "MDU6SXNzdWU1NjY3ODU1NjE=", "number": 198, "title": "Documentation is outdated", "user": {"login": "ondratu", "id": 6469029, "node_id": "MDQ6VXNlcjY0NjkwMjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6469029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ondratu", "html_url": "https://github.com/ondratu", "followers_url": "https://api.github.com/users/ondratu/followers", "following_url": "https://api.github.com/users/ondratu/following{/other_user}", "gists_url": "https://api.github.com/users/ondratu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ondratu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ondratu/subscriptions", "organizations_url": "https://api.github.com/users/ondratu/orgs", "repos_url": "https://api.github.com/users/ondratu/repos", "events_url": "https://api.github.com/users/ondratu/events{/privacy}", "received_events_url": "https://api.github.com/users/ondratu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-18T10:14:04Z", "updated_at": "2020-02-18T12:04:54Z", "closed_at": "2020-02-18T12:04:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "For example\r\n```python\r\nfrom openapi_core.shortcuts import RequestValidator\r\n```\r\ndid not work. Where is described usage of new openapi_core release ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/187", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/187/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/187/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/187/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/187", "id": 557177104, "node_id": "MDU6SXNzdWU1NTcxNzcxMDQ=", "number": 187, "title": "Any plans on validating security data in request?", "user": {"login": "playpauseandstop", "id": 21325, "node_id": "MDQ6VXNlcjIxMzI1", "avatar_url": "https://avatars0.githubusercontent.com/u/21325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/playpauseandstop", "html_url": "https://github.com/playpauseandstop", "followers_url": "https://api.github.com/users/playpauseandstop/followers", "following_url": "https://api.github.com/users/playpauseandstop/following{/other_user}", "gists_url": "https://api.github.com/users/playpauseandstop/gists{/gist_id}", "starred_url": "https://api.github.com/users/playpauseandstop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/playpauseandstop/subscriptions", "organizations_url": "https://api.github.com/users/playpauseandstop/orgs", "repos_url": "https://api.github.com/users/playpauseandstop/repos", "events_url": "https://api.github.com/users/playpauseandstop/events{/privacy}", "received_events_url": "https://api.github.com/users/playpauseandstop/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1026498613, "node_id": "MDU6TGFiZWwxMDI2NDk4NjEz", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/validation/request", "name": "area/validation/request", "color": "0052cc", "default": false, "description": "Indicates an issue on request validation area."}, {"id": 1284425216, "node_id": "MDU6TGFiZWwxMjg0NDI1MjE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/missing-implementation", "name": "kind/missing-implementation", "color": "dd8575", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-29T23:23:54Z", "updated_at": "2020-02-04T15:57:21Z", "closed_at": "2020-02-04T15:54:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nFirst of all, thanks a lot for `openapi-core` library. It (as well as `pyramid_openapi3`) helps me a lot for bringing OpenAPI 3 support for `aiohttp.web` applications (see https://github.com/playpauseandstop/rororo, if you're interested).\r\n\r\nHowever, I'd like to know whether you have any plans in providing security data validation within `openapi-core`?\r\n\r\nAs you might now [OpenAPI 3 allows user to secure operation with one or several security schemes](https://swagger.io/docs/specification/authentication/), such as,\r\n\r\n- Basic HTTP\r\n- JWT Token\r\n- API Key\r\n- OpenID Connect\r\n- OAuth2\r\n\r\nBut latest `openapi-core` release: [0.12.0](https://pypi.org/project/openapi-core/0.12.0/) doesn't allow developer to check whether request contains requested security data or not.\r\n\r\nIn my library, `rororo`, I managed to [check security data for simpler cases in Basic HTTP, JWT Token & API Key](https://github.com/playpauseandstop/rororo/blob/ecbfe4d929b7a7b82afa3d2d3eb43969cd39f32d/rororo/openapi/security.py) and wonder whether you plan to add this security check to `openapi-core`?\r\n\r\nIf you're interested, I'm willing to help with given feature.\r\n\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/181", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/181/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/181/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/181/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/181", "id": 551727389, "node_id": "MDU6SXNzdWU1NTE3MjczODk=", "number": 181, "title": "Incomplete OAS modeling", "user": {"login": "ghostbody", "id": 8371330, "node_id": "MDQ6VXNlcjgzNzEzMzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/8371330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghostbody", "html_url": "https://github.com/ghostbody", "followers_url": "https://api.github.com/users/ghostbody/followers", "following_url": "https://api.github.com/users/ghostbody/following{/other_user}", "gists_url": "https://api.github.com/users/ghostbody/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghostbody/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghostbody/subscriptions", "organizations_url": "https://api.github.com/users/ghostbody/orgs", "repos_url": "https://api.github.com/users/ghostbody/repos", "events_url": "https://api.github.com/users/ghostbody/events{/privacy}", "received_events_url": "https://api.github.com/users/ghostbody/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1284425216, "node_id": "MDU6TGFiZWwxMjg0NDI1MjE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/missing-implementation", "name": "kind/missing-implementation", "color": "dd8575", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-18T06:05:18Z", "updated_at": "2020-02-03T20:01:42Z", "closed_at": "2020-02-03T20:01:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nopenapi-core is a great repo as I am going to write a schema parse based on OAS 3.0.2.\r\n\r\nI some modeling work which is done in `openapi_core/schema` as well as `openapi_core/extensions`. But the modeling work is relatively incomplete to OAS 3.0.2 specification.\r\n\r\nFor example:\r\n\r\n`openapi_core/schema/infos/models.py` \r\n\r\n```python\r\nclass Info(object):\r\n\r\n    def __init__(self, title, version):\r\n        self.title = title\r\n        self.version = version\r\n```\r\n\r\nHowever, in OAS 3.0.2 Specification:\r\n\r\nhttps://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#infoObject\r\n\r\n\r\nField Name | Type | Description\r\n-- | -- | --\r\ntitle | string | REQUIRED. The title of the application.\r\ndescription | string | A short description of the application.\u00a0CommonMark syntax\u00a0MAY be used for rich text representation.\r\ntermsOfService | string | A URL to the Terms of Service for the API. MUST be in the format of a URL.\r\ncontact | Contact Object | The contact information for the exposed API.\r\nlicense | License Object | The license information for the exposed API.\r\nversion | string | REQUIRED. The version of the OpenAPI document (which is distinct from the\u00a0OpenAPI Specification version\u00a0or the API implementation version).\r\n\r\n`description`, `termsOfService`, `license`, `description` fields are missing.\r\n\r\n\r\nI think it's necessary to compelete thess model definitions. When I am implementing my parse for some integrated framework (i.e. sandman2), it's very hard to use a big dictionary to describe the api specification. I need something like a specification builder.\r\n\r\n```python\r\n\r\nspec = Spec()\r\nspec.info = Info(title='some title', description='some description', version='0.0.1')\r\nspec.servers = [\r\n  Server(url='some url', title='some title'),\r\n  Server(url='some url2', title='some title2')\r\n]\r\n\r\nspec.components.define_schema(\r\n    'some_schema',\r\n    Schema(...)\r\n)\r\n\r\nspec.components.define_schema(\r\n   'another_schema',\r\n   some_parser.parse(some_model_may_be_sqlalchemy)    # A function that returns a Schema Object is better than a dict!\r\n)\r\n\r\nspec.paths.register_custom_path(...)   # some customized path regsiter as long as the fucntion returns a Path Model Object \r\n\r\n```\r\n\r\nIf you think this is a decent idea, I will be glad to help with PRs, as well as soem needed documentation work.\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/178", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/178/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/178/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/178/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/178", "id": 551300723, "node_id": "MDU6SXNzdWU1NTEzMDA3MjM=", "number": 178, "title": "Show validation errors", "user": {"login": "srgkm", "id": 281661, "node_id": "MDQ6VXNlcjI4MTY2MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/281661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srgkm", "html_url": "https://github.com/srgkm", "followers_url": "https://api.github.com/users/srgkm/followers", "following_url": "https://api.github.com/users/srgkm/following{/other_user}", "gists_url": "https://api.github.com/users/srgkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/srgkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srgkm/subscriptions", "organizations_url": "https://api.github.com/users/srgkm/orgs", "repos_url": "https://api.github.com/users/srgkm/repos", "events_url": "https://api.github.com/users/srgkm/events{/privacy}", "received_events_url": "https://api.github.com/users/srgkm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-17T09:26:13Z", "updated_at": "2020-02-03T15:43:00Z", "closed_at": "2020-02-03T15:43:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to show validation errors for body? At the moment I've get to general exception with no detail about concrete property.\r\n\r\nSchema.validate has \"TODO: pass validation errors\" :)  What is the easiest way to patch this?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/175", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/175/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/175/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/175/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/175", "id": 538567672, "node_id": "MDU6SXNzdWU1Mzg1Njc2NzI=", "number": 175, "title": "Question: Why do validation errors raise InvalidMediaTypeValue?", "user": {"login": "berislavlopac", "id": 754090, "node_id": "MDQ6VXNlcjc1NDA5MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/754090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/berislavlopac", "html_url": "https://github.com/berislavlopac", "followers_url": "https://api.github.com/users/berislavlopac/followers", "following_url": "https://api.github.com/users/berislavlopac/following{/other_user}", "gists_url": "https://api.github.com/users/berislavlopac/gists{/gist_id}", "starred_url": "https://api.github.com/users/berislavlopac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/berislavlopac/subscriptions", "organizations_url": "https://api.github.com/users/berislavlopac/orgs", "repos_url": "https://api.github.com/users/berislavlopac/repos", "events_url": "https://api.github.com/users/berislavlopac/events{/privacy}", "received_events_url": "https://api.github.com/users/berislavlopac/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-16T18:04:58Z", "updated_at": "2020-02-03T15:35:49Z", "closed_at": "2020-02-03T15:35:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have noticed that, when sending an incorrect request (e.g. an object with a string where a number is expected), `MediaType.cast` and `MediaType.unmarshal` will raise `InvalidMediaTypeValue` in all cases, which is actually misleading: the media type is correct (e.g. `application/json`), but the validation raises an incorrect error. Was that on purpose?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/171", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/171/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/171/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/171", "id": 519904398, "node_id": "MDU6SXNzdWU1MTk5MDQzOTg=", "number": 171, "title": "'Contrib' part of openapi_core.contrib.flask is not working.", "user": {"login": "dipterix-a", "id": 46672240, "node_id": "MDQ6VXNlcjQ2NjcyMjQw", "avatar_url": "https://avatars0.githubusercontent.com/u/46672240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dipterix-a", "html_url": "https://github.com/dipterix-a", "followers_url": "https://api.github.com/users/dipterix-a/followers", "following_url": "https://api.github.com/users/dipterix-a/following{/other_user}", "gists_url": "https://api.github.com/users/dipterix-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/dipterix-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dipterix-a/subscriptions", "organizations_url": "https://api.github.com/users/dipterix-a/orgs", "repos_url": "https://api.github.com/users/dipterix-a/repos", "events_url": "https://api.github.com/users/dipterix-a/events{/privacy}", "received_events_url": "https://api.github.com/users/dipterix-a/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-08T09:26:16Z", "updated_at": "2019-11-08T19:29:11Z", "closed_at": "2019-11-08T19:29:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Tried yesterday as README states: \r\n`from openapi_core.contrib.flask import FlaskOpenAPIRequest, FlaskOpenAPIResponse\r\n`\r\n\r\nGet:\r\n`ModuleNotFoundError: No module named 'openapi_core.contrib'\r\n`\r\n\r\nTemp solution:\r\n`from openapi_core.wrappers.flask import FlaskOpenAPIRequest, FlaskOpenAPIResponse\r\n`\r\nworks fine.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/164", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/164/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/164/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/164/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/164", "id": 507811327, "node_id": "MDU6SXNzdWU1MDc4MTEzMjc=", "number": 164, "title": "Better way for adding custom serializers", "user": {"login": "berislavlopac", "id": 754090, "node_id": "MDQ6VXNlcjc1NDA5MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/754090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/berislavlopac", "html_url": "https://github.com/berislavlopac", "followers_url": "https://api.github.com/users/berislavlopac/followers", "following_url": "https://api.github.com/users/berislavlopac/following{/other_user}", "gists_url": "https://api.github.com/users/berislavlopac/gists{/gist_id}", "starred_url": "https://api.github.com/users/berislavlopac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/berislavlopac/subscriptions", "organizations_url": "https://api.github.com/users/berislavlopac/orgs", "repos_url": "https://api.github.com/users/berislavlopac/repos", "events_url": "https://api.github.com/users/berislavlopac/events{/privacy}", "received_events_url": "https://api.github.com/users/berislavlopac/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804492, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTI=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/enhancement", "name": "kind/enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-16T12:12:32Z", "updated_at": "2020-02-03T18:44:42Z", "closed_at": "2020-02-03T18:44:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "At the moment, I managed to add custom mimetype serializers by patching the `MEDIA_TYPE_DESERIALIZERS` dict, like this:\r\n\r\n    from openapi_core.schema.media_types.models import MEDIA_TYPE_DESERIALIZERS\r\n    import json\r\n    \r\n    MEDIA_TYPE_DESERIALIZERS['application/my.api+json'] = json.loads\r\n\r\nAm I missing a better way to do it, e.g. by passing it to the validator constructor or something? Thank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/163", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/163/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/163/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/163", "id": 505940560, "node_id": "MDU6SXNzdWU1MDU5NDA1NjA=", "number": 163, "title": "More fields for operations", "user": {"login": "berislavlopac", "id": 754090, "node_id": "MDQ6VXNlcjc1NDA5MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/754090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/berislavlopac", "html_url": "https://github.com/berislavlopac", "followers_url": "https://api.github.com/users/berislavlopac/followers", "following_url": "https://api.github.com/users/berislavlopac/following{/other_user}", "gists_url": "https://api.github.com/users/berislavlopac/gists{/gist_id}", "starred_url": "https://api.github.com/users/berislavlopac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/berislavlopac/subscriptions", "organizations_url": "https://api.github.com/users/berislavlopac/orgs", "repos_url": "https://api.github.com/users/berislavlopac/repos", "events_url": "https://api.github.com/users/berislavlopac/events{/privacy}", "received_events_url": "https://api.github.com/users/berislavlopac/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1284425216, "node_id": "MDU6TGFiZWwxMjg0NDI1MjE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/missing-implementation", "name": "kind/missing-implementation", "color": "dd8575", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-11T16:13:09Z", "updated_at": "2019-10-22T19:37:34Z", "closed_at": "2019-10-22T19:37:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "At the moment, the `Operation` spec implements only a subset of fields. It would be nice to implement the full set, as defined on https://swagger.io/specification/#operationObject\r\n\r\nThe missing ones are:\r\n\r\n* summary\r\n* description\r\n* externalDocs\r\n* callbacks\r\n* security\r\n* servers\r\n\r\nAt least the first two (or three) would be really useful.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/160", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/160/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/160/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/160/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/160", "id": 499595807, "node_id": "MDU6SXNzdWU0OTk1OTU4MDc=", "number": 160, "title": "0.12.0 regression regarding usability of validation messages", "user": {"login": "zupo", "id": 311580, "node_id": "MDQ6VXNlcjMxMTU4MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/311580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zupo", "html_url": "https://github.com/zupo", "followers_url": "https://api.github.com/users/zupo/followers", "following_url": "https://api.github.com/users/zupo/following{/other_user}", "gists_url": "https://api.github.com/users/zupo/gists{/gist_id}", "starred_url": "https://api.github.com/users/zupo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zupo/subscriptions", "organizations_url": "https://api.github.com/users/zupo/orgs", "repos_url": "https://api.github.com/users/zupo/repos", "events_url": "https://api.github.com/users/zupo/events{/privacy}", "received_events_url": "https://api.github.com/users/zupo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-09-27T18:48:55Z", "updated_at": "2020-02-17T13:54:06Z", "closed_at": "2019-10-20T17:24:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hey!\r\n\r\nI'm the author of https://github.com/Pylons/pyramid_openapi3, and today I realized a new release of openapi-core is out, yay!\r\n\r\nI immediately [prepared a PR](https://github.com/Pylons/pyramid_openapi3/pull/33/files#diff-46bb8405eeb4d8a11deb635f562f7c48R74) to bump pyramid_openapi3 to openapi-core 0.12.0, but [tests on CI failed](https://circleci.com/gh/Pylons/pyramid_openapi3/157):\r\n\r\n```\r\n======================================================================\r\nFAIL: test_name_too_short (app.FunctionalTests)\r\nA name that is too short is picked up by openapi-core validation.\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/circleci/repo/examples/singlefile/app.py\", line 142, in test_name_too_short\r\n    res.text,\r\nAssertionError: 'Invalid parameter value for `name`: Value is shorter (2) than the minimum length of 3' not found in '400 Bad Request\\n\\nRequest validation failed.\\n\\n\\nInvalid parameter value for `name`: Value not valid for schema\\n\\n'\r\n\r\n----------------------------------------------------------------------\r\n```\r\n\r\nThe test above fails [in a single-file example](https://github.com/Pylons/pyramid_openapi3/blob/master/examples/singlefile/app.py#L139) that I ship with pyramid_openapi3. It fails because in 0.11.0, the validation error is more descriptive than in 0.12.0:\r\n* 0.11.0: ```\"Invalid parameter value for `name`: Value is shorter (2) than the minimum length of 3\"```\r\n* 0.12.0: ```\"Invalid parameter value for `name`: Value not valid for schema\"```\r\n\r\nIs this an expected regression due to the move to a different validation engine that happened in 0.12.0 (or at least that is how I understood the commit messages)? Is it possible to configure the new validation to have more descriptive errors? Or am I completely missing the point here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/155", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/155/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/155/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/155/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/155", "id": 486875114, "node_id": "MDU6SXNzdWU0ODY4NzUxMTQ=", "number": 155, "title": "Validating nested `items` in array elements types", "user": {"login": "dawidgdanski", "id": 1949918, "node_id": "MDQ6VXNlcjE5NDk5MTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1949918?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dawidgdanski", "html_url": "https://github.com/dawidgdanski", "followers_url": "https://api.github.com/users/dawidgdanski/followers", "following_url": "https://api.github.com/users/dawidgdanski/following{/other_user}", "gists_url": "https://api.github.com/users/dawidgdanski/gists{/gist_id}", "starred_url": "https://api.github.com/users/dawidgdanski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dawidgdanski/subscriptions", "organizations_url": "https://api.github.com/users/dawidgdanski/orgs", "repos_url": "https://api.github.com/users/dawidgdanski/repos", "events_url": "https://api.github.com/users/dawidgdanski/events{/privacy}", "received_events_url": "https://api.github.com/users/dawidgdanski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1026496816, "node_id": "MDU6TGFiZWwxMDI2NDk2ODE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/schema", "name": "area/schema", "color": "0052cc", "default": false, "description": "Indicates an issue on schema area"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-29T10:29:04Z", "updated_at": "2019-09-13T09:13:19Z", "closed_at": "2019-09-13T09:13:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\n\r\nI encountered one problem I haven't found solution for when using the `openapi-core`:\r\n\r\nI developed the schema with an array property:\r\n\r\n```\r\n...\r\nerrors:\r\n   type: array\r\n          items:\r\n            $ref: '#/components/schemas/ErrorReference'\r\n...\r\n```\r\nI wrote the tests to verify that the `errors` array does contain the `ErrorReference` objects by comparing examplary dictionary against the schema I defined using registered schemas accessible in `Spec.components.schemas`.\r\n\r\nWhen adding nested `items` entry under the existing `items`:\r\n```\r\n...\r\nerrors:\r\n   type: array\r\n          items:\r\n               items:\r\n                  $ref: '#/components/schemas/ErrorReference'\r\n...\r\n```\r\nthen what I expected was that the upper-level `items` would be inferred with the `array` type, the lower-level `items` with `ErrorReference` type (so that we would have the array of arrays of `ErrorReference`s) and the validation would fail due to the incorrect type found in while validating examplary object dictionary against the schema.\r\n\r\nThe tests still pass and regardless of how many nested `items` entries are added.\r\n\r\nIs it a bug/missing functionality in the validation or am I not using the library correctly to validate nested arrays types?\r\n\r\nMany thanks for the response.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/154", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/154/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/154/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/154", "id": 481181864, "node_id": "MDU6SXNzdWU0ODExODE4NjQ=", "number": 154, "title": "How to validate against a schema without a request?", "user": {"login": "jkupferer", "id": 7378166, "node_id": "MDQ6VXNlcjczNzgxNjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/7378166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkupferer", "html_url": "https://github.com/jkupferer", "followers_url": "https://api.github.com/users/jkupferer/followers", "following_url": "https://api.github.com/users/jkupferer/following{/other_user}", "gists_url": "https://api.github.com/users/jkupferer/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkupferer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkupferer/subscriptions", "organizations_url": "https://api.github.com/users/jkupferer/orgs", "repos_url": "https://api.github.com/users/jkupferer/repos", "events_url": "https://api.github.com/users/jkupferer/events{/privacy}", "received_events_url": "https://api.github.com/users/jkupferer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-15T14:37:01Z", "updated_at": "2020-03-05T11:45:53Z", "closed_at": "2020-03-05T11:45:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am working on using openapi-core to validate Kubernetes resource definitions as described here:\r\n\r\nhttps://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#specifying-a-structural-schema\r\n\r\nSo far what I have figured out is validating these with a request validator, but I'd like to bypass creating a request if possible because of all the extra steps. Is there a better pattern that I can use to just validate against the schema and avoid the mock request creation?\r\n\r\n```\r\n        template_validator = openapi_core.shortcuts.RequestValidator(\r\n            openapi_core.shortcuts.create_spec({\r\n                \"openapi\": \"3.0.0\",\r\n                \"info\": { \"title\": \"\", \"version\": \"0.1\" },\r\n                \"paths\": {\r\n                    \"/claimTemplate\": {\r\n                        \"post\": {\r\n                            \"requestBody\": {\r\n                                \"required\": True,\r\n                                \"content\": {\r\n                                    \"application/json\": {\r\n                                        \"schema\": {\r\n                                            \"$ref\": \"#/components/schemas/ClaimTemplate\"\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"responses\": {}\r\n                        }\r\n                    }\r\n                },\r\n                \"components\": {\r\n                    \"schemas\": {\r\n                        \"ClaimTemplate\": openAPIV3Schema\r\n                    }\r\n                }\r\n            })\r\n        )\r\n\r\n        validation_result = template_validator.validate(\r\n            openapi_core.wrappers.mock.MockRequest(\r\n                'http://example.com', 'post', '/claimTemplate',\r\n                path_pattern='/claimTemplate',\r\n                data=json.dumps(template)\r\n            )\r\n        )\r\n        validation_result.raise_for_errors()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/153", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/153/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/153/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/153/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/153", "id": 480212795, "node_id": "MDU6SXNzdWU0ODAyMTI3OTU=", "number": 153, "title": "Fails to unmarshall free-form objects (additionalProperties)", "user": {"login": "pcrespov", "id": 32402063, "node_id": "MDQ6VXNlcjMyNDAyMDYz", "avatar_url": "https://avatars3.githubusercontent.com/u/32402063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcrespov", "html_url": "https://github.com/pcrespov", "followers_url": "https://api.github.com/users/pcrespov/followers", "following_url": "https://api.github.com/users/pcrespov/following{/other_user}", "gists_url": "https://api.github.com/users/pcrespov/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcrespov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcrespov/subscriptions", "organizations_url": "https://api.github.com/users/pcrespov/orgs", "repos_url": "https://api.github.com/users/pcrespov/repos", "events_url": "https://api.github.com/users/pcrespov/events{/privacy}", "received_events_url": "https://api.github.com/users/pcrespov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-13T15:10:13Z", "updated_at": "2020-02-03T21:07:46Z", "closed_at": "2020-02-03T21:07:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Current version can validate free-form objects but **cannot** unmarshall them.\r\n\r\nA free-form object (arbitrary property/value pairs) is defined equivalently [see reference](https://swagger.io/docs/specification/data-models/data-types/) as\r\n```yaml\r\ntype: object\r\n```\r\nor\r\n```yaml\r\ntype: object\r\nadditionalProperties: true\r\n```\r\nor\r\n```yaml\r\ntype: object\r\nadditionalProperties: {}\r\n```\r\nPR #121 address a related issue that solves validation but still unable to unmarshall. For instance, the [example](https://github.com/p1c2u/openapi-core/issues/67#issuecomment-463656001) proposed by @berend in the same pull request cannot be unmarshalled as demonstrated in a [tests I did in my fork](https://github.com/pcrespov/openapi-core/commit/c69cd04f170ccbe664994d45b6bc14b97abf8d40)\r\n\r\nAny hint on how to overcome/fix this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/151", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/151/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/151/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/151", "id": 466162875, "node_id": "MDU6SXNzdWU0NjYxNjI4NzU=", "number": 151, "title": "Consider creating a change log", "user": {"login": "pbasista", "id": 1535892, "node_id": "MDQ6VXNlcjE1MzU4OTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1535892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pbasista", "html_url": "https://github.com/pbasista", "followers_url": "https://api.github.com/users/pbasista/followers", "following_url": "https://api.github.com/users/pbasista/following{/other_user}", "gists_url": "https://api.github.com/users/pbasista/gists{/gist_id}", "starred_url": "https://api.github.com/users/pbasista/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pbasista/subscriptions", "organizations_url": "https://api.github.com/users/pbasista/orgs", "repos_url": "https://api.github.com/users/pbasista/repos", "events_url": "https://api.github.com/users/pbasista/events{/privacy}", "received_events_url": "https://api.github.com/users/pbasista/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-10T08:07:06Z", "updated_at": "2019-07-11T17:06:59Z", "closed_at": "2019-07-11T17:06:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider creating and maintaining a change log which would contain high-level overview of the changes between the released versions.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/147", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/147/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/147/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/147", "id": 464959000, "node_id": "MDU6SXNzdWU0NjQ5NTkwMDA=", "number": 147, "title": "Schemas defined by allOf are not treated as Objects", "user": {"login": "phrfpeixoto", "id": 10242829, "node_id": "MDQ6VXNlcjEwMjQyODI5", "avatar_url": "https://avatars2.githubusercontent.com/u/10242829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phrfpeixoto", "html_url": "https://github.com/phrfpeixoto", "followers_url": "https://api.github.com/users/phrfpeixoto/followers", "following_url": "https://api.github.com/users/phrfpeixoto/following{/other_user}", "gists_url": "https://api.github.com/users/phrfpeixoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/phrfpeixoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phrfpeixoto/subscriptions", "organizations_url": "https://api.github.com/users/phrfpeixoto/orgs", "repos_url": "https://api.github.com/users/phrfpeixoto/repos", "events_url": "https://api.github.com/users/phrfpeixoto/events{/privacy}", "received_events_url": "https://api.github.com/users/phrfpeixoto/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1026496816, "node_id": "MDU6TGFiZWwxMDI2NDk2ODE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/schema", "name": "area/schema", "color": "0052cc", "default": false, "description": "Indicates an issue on schema area"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-07T14:33:24Z", "updated_at": "2020-02-03T23:18:07Z", "closed_at": "2020-02-03T23:18:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've noticed that if you define a Schema using _allOf_, that particular schema will note marked as an object itself, even though it's based in other objects.\r\n\r\nOAS3 States:\r\n\r\n> Composition and Inheritance (Polymorphism)\r\n> \r\n> The OpenAPI Specification allows combining and extending model definitions using the allOf property of JSON Schema, in effect offering model composition. allOf takes an array of object definitions that are validated independently but together compose a single object.\r\n\r\nIt's clear that the result of a usage of an _allOf_ statement should produce an object.\r\n\r\nTried with:\r\n```yaml\r\ncomponents:\r\n  schemas:\r\n    Error:\r\n      type: object,\r\n      properties:\r\n        message:\r\n          type: string\r\n    TS:\r\n      type: object\r\n      properties:\r\n        moment:\r\n          type: string,\r\n          format: datetime\r\n    ExtendedError:\r\n      type: object\r\n      properties:\r\n        message:\r\n          type: string\r\n        suberror:\r\n          allOf:\r\n            - $ref: '#/components/schemas/Error'\r\n            - $ref: '#/components/schemas/TS'\r\n```\r\n\r\nIn this case the `Schema` for `suberror` have it's `type` property set to `SchemaType.Any` because of they way how the type is defined without checking on inheritance:\r\n\r\n```python\r\n\r\nself.type = SchemaType(schema_type)\r\n# ... REDACTED CODE ...\r\nself.all_of = all_of and list(all_of) or []\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/142", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/142/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/142/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/142", "id": 456932827, "node_id": "MDU6SXNzdWU0NTY5MzI4Mjc=", "number": 142, "title": "InvalidMediaTypeValue is not hashable", "user": {"login": "dz0ny", "id": 239513, "node_id": "MDQ6VXNlcjIzOTUxMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/239513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dz0ny", "html_url": "https://github.com/dz0ny", "followers_url": "https://api.github.com/users/dz0ny/followers", "following_url": "https://api.github.com/users/dz0ny/following{/other_user}", "gists_url": "https://api.github.com/users/dz0ny/gists{/gist_id}", "starred_url": "https://api.github.com/users/dz0ny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dz0ny/subscriptions", "organizations_url": "https://api.github.com/users/dz0ny/orgs", "repos_url": "https://api.github.com/users/dz0ny/repos", "events_url": "https://api.github.com/users/dz0ny/events{/privacy}", "received_events_url": "https://api.github.com/users/dz0ny/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-17T13:24:06Z", "updated_at": "2019-06-18T14:24:22Z", "closed_at": "2019-06-18T14:24:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "InvalidMediaTypeValue cannot be inspected for uniqueness (missing hash method), subsequently Raven(sentry-sdk), Stackdriver capture error reports.\r\n\r\n```python\r\n    File \"/app/.heroku/python/lib/python3.7/site-packages/pyramid_openapi3/__init__.py\", line 84, in wrapper_view \r\n      result.raise_for_errors() \r\n    File \"/app/.heroku/python/lib/python3.7/site-packages/openapi_core/validation/models.py\", line 11, in raise_for_errors \r\n      raise error \r\n    File \"/app/.heroku/python/lib/python3.7/site-packages/openapi_core/validation/response/validators.py\", line 64, in _get_data \r\n      data = media_type.unmarshal(raw_data, self.custom_formatters) \r\n    File \"/app/.heroku/python/lib/python3.7/site-packages/openapi_core/schema/media_types/models.py\", line 47, in unmarshal \r\n      raise InvalidMediaTypeValue(exc) \r\n  openapi_core.schema.media_types.exceptions.InvalidMediaTypeValue: Mimetype invalid: Invalid schema property currency: Value RON not in enum choices: ['EUR', 'GBP', 'USD'] \r\n  During handling of the above exception, another exception occurred: \r\n  Traceback (most recent call last): \r\n    File \"/app/.heroku/python/lib/python3.7/site-packages/gunicorn/workers/sync.py\", line 135, in handle \r\n      self.handle_request(listener, req, client, addr) \r\n    File \"/app/.heroku/python/lib/python3.7/site-packages/gunicorn/workers/sync.py\", line 176, in handle_request \r\n      respiter = self.wsgi(environ, resp.start_response) \r\n    File \"/app/.heroku/python/lib/python3.7/site-packages/raven/middleware.py\", line 100, in __call__ \r\n      iterable = self.application(environ, start_response) \r\n    File \"/app/.heroku/python/lib/python3.7/contextlib.py\", line 130, in __exit__ \r\n      self.gen.throw(type, value, traceback) \r\n    File \"/app/.heroku/python/lib/python3.7/site-packages/raven/middleware.py\", line 27, in common_exception_handling \r\n      client.handle_exception(environ) \r\n    File \"/app/.heroku/python/lib/python3.7/site-packages/raven/middleware.py\", line 115, in handle_exception \r\n      return self.client.captureException() \r\n    File \"/app/.heroku/python/lib/python3.7/site-packages/raven/base.py\", line 826, in captureException \r\n      'raven.events.Exception', exc_info=exc_info, **kwargs) \r\n    File \"/app/.heroku/python/lib/python3.7/site-packages/raven/base.py\", line 646, in capture \r\n      **kwargs) \r\n    File \"/app/.heroku/python/lib/python3.7/site-packages/raven/base.py\", line 394, in build_msg \r\n      result = handler.capture(**kwargs) \r\n    File \"/app/.heroku/python/lib/python3.7/site-packages/raven/events.py\", line 120, in capture \r\n      for exc_info in _chained_exceptions(exc_info): \r\n    File \"/app/.heroku/python/lib/python3.7/site-packages/raven/events.py\", line 52, in _chained_exceptions \r\n      context.add(exc) \r\n  TypeError: unhashable type: 'InvalidMediaTypeValue' \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/140", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/140/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/140/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/140/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/140", "id": 453843103, "node_id": "MDU6SXNzdWU0NTM4NDMxMDM=", "number": 140, "title": "Parameters on Path Item Object are ignored", "user": {"login": "gweis", "id": 138943, "node_id": "MDQ6VXNlcjEzODk0Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/138943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gweis", "html_url": "https://github.com/gweis", "followers_url": "https://api.github.com/users/gweis/followers", "following_url": "https://api.github.com/users/gweis/following{/other_user}", "gists_url": "https://api.github.com/users/gweis/gists{/gist_id}", "starred_url": "https://api.github.com/users/gweis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gweis/subscriptions", "organizations_url": "https://api.github.com/users/gweis/orgs", "repos_url": "https://api.github.com/users/gweis/repos", "events_url": "https://api.github.com/users/gweis/events{/privacy}", "received_events_url": "https://api.github.com/users/gweis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-08T22:48:27Z", "updated_at": "2019-06-18T21:32:52Z", "closed_at": "2019-06-18T21:32:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "OpenAPI 3 allows for parameter definition directly on a [Path Item object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#path-item-object). These parameters should be applicable to all operations under this path. However, the way validation works here is that only parameters defined on an 'Operation object' are considered for validation. \r\n\r\nI have created a few simple test cases https://github.com/gweis/openapi-core/commit/787799081db01f9b7ebe491e886e947dd270bfc2  to demonstrate the issue (happy to turn them into a pull request). \r\nIf my understanding of the spec is correct, all these tests should succeed, but currently they fail. i.e. parameter `resId` is not validated, not seen as missing, or not even parsed and returned.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/139", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/139/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/139/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/139", "id": 452924355, "node_id": "MDU6SXNzdWU0NTI5MjQzNTU=", "number": 139, "title": "Poor error reporting when using oneOf", "user": {"login": "piotr-dobrogost", "id": 92239, "node_id": "MDQ6VXNlcjkyMjM5", "avatar_url": "https://avatars2.githubusercontent.com/u/92239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/piotr-dobrogost", "html_url": "https://github.com/piotr-dobrogost", "followers_url": "https://api.github.com/users/piotr-dobrogost/followers", "following_url": "https://api.github.com/users/piotr-dobrogost/following{/other_user}", "gists_url": "https://api.github.com/users/piotr-dobrogost/gists{/gist_id}", "starred_url": "https://api.github.com/users/piotr-dobrogost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/piotr-dobrogost/subscriptions", "organizations_url": "https://api.github.com/users/piotr-dobrogost/orgs", "repos_url": "https://api.github.com/users/piotr-dobrogost/repos", "events_url": "https://api.github.com/users/piotr-dobrogost/events{/privacy}", "received_events_url": "https://api.github.com/users/piotr-dobrogost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1026496816, "node_id": "MDU6TGFiZWwxMDI2NDk2ODE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/schema", "name": "area/schema", "color": "0052cc", "default": false, "description": "Indicates an issue on schema area"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-06T09:24:43Z", "updated_at": "2019-09-13T09:13:19Z", "closed_at": "2019-09-13T09:13:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using `oneOf` and no schema validates the value the error reported is generic `Mimetype invalid: No valid schema found for value: (\u2026)`.\r\nGetting the list of reasons (one for each schema) why the value does not validate according to each schema would be very helpful.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/129", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/129/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/129/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/129", "id": 431912642, "node_id": "MDU6SXNzdWU0MzE5MTI2NDI=", "number": 129, "title": "oneOf within array's items description doesn't seem to validate/work as expected", "user": {"login": "gerazenobi", "id": 7520283, "node_id": "MDQ6VXNlcjc1MjAyODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/7520283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gerazenobi", "html_url": "https://github.com/gerazenobi", "followers_url": "https://api.github.com/users/gerazenobi/followers", "following_url": "https://api.github.com/users/gerazenobi/following{/other_user}", "gists_url": "https://api.github.com/users/gerazenobi/gists{/gist_id}", "starred_url": "https://api.github.com/users/gerazenobi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gerazenobi/subscriptions", "organizations_url": "https://api.github.com/users/gerazenobi/orgs", "repos_url": "https://api.github.com/users/gerazenobi/repos", "events_url": "https://api.github.com/users/gerazenobi/events{/privacy}", "received_events_url": "https://api.github.com/users/gerazenobi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1026496816, "node_id": "MDU6TGFiZWwxMDI2NDk2ODE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/schema", "name": "area/schema", "color": "0052cc", "default": false, "description": "Indicates an issue on schema area"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-11T09:09:36Z", "updated_at": "2020-02-03T23:17:04Z", "closed_at": "2020-02-03T23:17:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following query parameter described within a certain path:\r\n\r\n```yaml\r\n      parameters:\r\n        - in: query\r\n          name: date\r\n          required: true\r\n          explode: true\r\n          style: form\r\n          schema:\r\n            type: array\r\n            items:\r\n              oneOf:\r\n                - type: string\r\n                  format: date-time\r\n                - type: string\r\n                  pattern: '^now$|^in-(\\d+)-(minutes|hours)$'\r\n            example:\r\n              - '2019-04-07T15:30:00.000Z'\r\n              - 'in-60-minutes'\r\n```\r\nThough the parameter values are not being validated as I would expect: I can send any types (string, integer,...) and any format of string ( e.g 'non_valid_format') and the validation won't complaint about it.\r\n\r\nNote that for example If I were to specify a homogeneous array (without specifying oneOf) the specified constraints work as expected and I get the expected error messages:\r\n\r\n```yaml\r\n      parameters:\r\n        - in: query\r\n          name: date\r\n          required: true\r\n          explode: true\r\n          style: form\r\n          schema:\r\n            type: array\r\n            items:\r\n              type: string\r\n              pattern: '^now$|^in-(\\d+)-(minutes|hours)$'\r\n```\r\nCorrect response having providing wrong values: \r\n```\r\nInvalid parameter value for `date`: Value 2019-04-11T10:32:04.662007+00:00 does not match the pattern ^now$|^in-(\\d+)-(minutes|hours)$\r\n```\r\n\r\n```yaml\r\n      parameters:\r\n        - in: query\r\n          name: date\r\n          required: true\r\n          explode: true\r\n          style: form\r\n          schema:\r\n            type: array\r\n            items:\r\n              type: string\r\n              format: date-time\r\n```\r\nCorrect response having provided wrong values:\r\n```\r\nInvalid parameter value for `date`: Failed to format value in-60-minutes to format date-time\r\n```\r\nSo my guess is that the problem lies only when using the constraints within a **oneOf** in an array's items section.\r\n\r\nI am currently using `openapi-core 0.8.0`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/127", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/127/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/127/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/127", "id": 428788765, "node_id": "MDU6SXNzdWU0Mjg3ODg3NjU=", "number": 127, "title": "oneOf with array with oneOf breaks the library", "user": {"login": "diogobaeder", "id": 207168, "node_id": "MDQ6VXNlcjIwNzE2OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/207168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diogobaeder", "html_url": "https://github.com/diogobaeder", "followers_url": "https://api.github.com/users/diogobaeder/followers", "following_url": "https://api.github.com/users/diogobaeder/following{/other_user}", "gists_url": "https://api.github.com/users/diogobaeder/gists{/gist_id}", "starred_url": "https://api.github.com/users/diogobaeder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diogobaeder/subscriptions", "organizations_url": "https://api.github.com/users/diogobaeder/orgs", "repos_url": "https://api.github.com/users/diogobaeder/repos", "events_url": "https://api.github.com/users/diogobaeder/events{/privacy}", "received_events_url": "https://api.github.com/users/diogobaeder/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1026496816, "node_id": "MDU6TGFiZWwxMDI2NDk2ODE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/schema", "name": "area/schema", "color": "0052cc", "default": false, "description": "Indicates an issue on schema area"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-03T14:06:52Z", "updated_at": "2020-02-03T23:16:41Z", "closed_at": "2020-02-03T23:16:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nIf we have the below schema:\r\n\r\n```json\r\n{\r\n  \"Foo\": {\r\n    \"properties\": {\r\n      \"name\": {\r\n        \"type\": \"string\"\r\n      },\r\n      \"values\": {\r\n        \"oneOf\": [\r\n          {\r\n            \"format\": \"int32\",\r\n            \"type\": \"integer\"\r\n          },\r\n          {\r\n            \"type\": \"string\"\r\n          },\r\n          {\r\n            \"items\": {\r\n              \"oneOf\": [\r\n                {\r\n                  \"format\": \"int32\",\r\n                  \"type\": \"integer\"\r\n                },\r\n                {\r\n                  \"type\": \"string\"\r\n                }\r\n              ]\r\n            },\r\n            \"type\": \"array\"\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    \"required\": [\r\n      \"name\",\r\n      \"values\"\r\n    ],\r\n    \"type\": \"object\"\r\n  }\r\n}\r\n```\r\nand receive a value like this:\r\n```json\r\n{\r\n  \"name\": \"bar\",\r\n  \"values\": [\r\n    \"2\"\r\n  ]\r\n}\r\n```\r\nit breaks the library. The reason is that during the attempt to `cast()` the `values` field, it iterates over a set of `SchemaType`s to try to cast the value, but then there are no schemas in `self.items` for `values` itself (since it's a `oneOf`) when it matches `SchemaType.ARRAY`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/126", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/126/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/126/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/126", "id": 428311719, "node_id": "MDU6SXNzdWU0MjgzMTE3MTk=", "number": 126, "title": "New patch release", "user": {"login": "diogobaeder", "id": 207168, "node_id": "MDQ6VXNlcjIwNzE2OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/207168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diogobaeder", "html_url": "https://github.com/diogobaeder", "followers_url": "https://api.github.com/users/diogobaeder/followers", "following_url": "https://api.github.com/users/diogobaeder/following{/other_user}", "gists_url": "https://api.github.com/users/diogobaeder/gists{/gist_id}", "starred_url": "https://api.github.com/users/diogobaeder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diogobaeder/subscriptions", "organizations_url": "https://api.github.com/users/diogobaeder/orgs", "repos_url": "https://api.github.com/users/diogobaeder/repos", "events_url": "https://api.github.com/users/diogobaeder/events{/privacy}", "received_events_url": "https://api.github.com/users/diogobaeder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-02T15:58:16Z", "updated_at": "2019-05-21T12:29:56Z", "closed_at": "2019-05-21T12:29:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nThere were a few changes not yet released, especially a bugfix for additionalProperties; can we have a patch release for that?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/124", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/124/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/124/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/124", "id": 425228541, "node_id": "MDU6SXNzdWU0MjUyMjg1NDE=", "number": 124, "title": "oneOf + \"additionalProperties: false\" broken after 0.8", "user": {"login": "diogobaeder", "id": 207168, "node_id": "MDQ6VXNlcjIwNzE2OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/207168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diogobaeder", "html_url": "https://github.com/diogobaeder", "followers_url": "https://api.github.com/users/diogobaeder/followers", "following_url": "https://api.github.com/users/diogobaeder/following{/other_user}", "gists_url": "https://api.github.com/users/diogobaeder/gists{/gist_id}", "starred_url": "https://api.github.com/users/diogobaeder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diogobaeder/subscriptions", "organizations_url": "https://api.github.com/users/diogobaeder/orgs", "repos_url": "https://api.github.com/users/diogobaeder/repos", "events_url": "https://api.github.com/users/diogobaeder/events{/privacy}", "received_events_url": "https://api.github.com/users/diogobaeder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-26T05:02:58Z", "updated_at": "2019-03-26T13:35:18Z", "closed_at": "2019-03-26T13:35:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI just updated openapi-core in a project I work on, from 0.8.0 to 0.9.0, and it broke a bunch of objects I had defined in my spec. The reason is, some of my objects are spec'd as having \"superset\" fields in a `oneOf` fashion - for example, one of the schemas defines properties `foo` and `bar` and the other only defines `foo`. Previously it worked because `additionalProperties` was set to None by default, hence not allowing additional properties by default, therefore those schemas were unambiguous. However, after a few recent changes (I think after 0.8.1) it seems that the library got updated to OpenAPI 3.0.2, which specifies that `additionalProperties` has to be `true` by default, and this precise change makes those kinds of schemas ambiguous if they don't define `additionalProperties`.\r\n\r\nHowever, I tried defining `additionalProperties: false` in those schemas and it still didn't work, they're being deemed invalid. I checked the code that is on master now, and the reason why that doesn't work is because `additionalProperties` is being checked on the parent object that contains the `oneOf` items, and not on each item. So, for example, if oneOf the schemas allows only `foo`, but the value dict contains `foo` and `bar`, the validation passes because the container has `additionalProperties: true` by default (while this property should be checked in the granular schemas instead).\r\n\r\nIn summary: the recent changes make it impossible to use `oneOf` with schemas where one is a superset of another, even if they're unambiguous by being specified with `additonalProperties: false`. Something I haven't tried yet, though, is to set `additionalProperties: false` in the container with the `oneOf`, maybe this makes the validation pass, but it would make the specification wrong according to OpenAPI 3.\r\n\r\nI'm trying to implement a fix for it now, but unfortunately they seem to have broken a lot of tests, so it will take me some time; if you have a fix in mind which is easy enough to implement, please let me know. The reason why I broke a bunch of tests (hence the production code) is because I noticed that the validation at `_validate_object` and `_validate_properties` is mixing properties from the `oneOf` items with the container itself, which doesn't seem correct to me, so I tried pushing the validation to each item instead but somehow this caused some mayhem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/122", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/122/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/122/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/122", "id": 422702309, "node_id": "MDU6SXNzdWU0MjI3MDIzMDk=", "number": 122, "title": "Model with recursive items cause RecursionError", "user": {"login": "danielbradburn", "id": 29945176, "node_id": "MDQ6VXNlcjI5OTQ1MTc2", "avatar_url": "https://avatars0.githubusercontent.com/u/29945176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielbradburn", "html_url": "https://github.com/danielbradburn", "followers_url": "https://api.github.com/users/danielbradburn/followers", "following_url": "https://api.github.com/users/danielbradburn/following{/other_user}", "gists_url": "https://api.github.com/users/danielbradburn/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielbradburn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielbradburn/subscriptions", "organizations_url": "https://api.github.com/users/danielbradburn/orgs", "repos_url": "https://api.github.com/users/danielbradburn/repos", "events_url": "https://api.github.com/users/danielbradburn/events{/privacy}", "received_events_url": "https://api.github.com/users/danielbradburn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1026496816, "node_id": "MDU6TGFiZWwxMDI2NDk2ODE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/schema", "name": "area/schema", "color": "0052cc", "default": false, "description": "Indicates an issue on schema area"}, {"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-19T12:22:38Z", "updated_at": "2020-02-03T23:16:23Z", "closed_at": "2020-02-03T23:16:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The SchemaRegistry doesn't handle recursive references, for example the following schema crashes with a ``RecursionError: maximum recursion depth exceeded while calling a Python object`` while trying to parse...\r\n\r\n```\r\n    Tree:\r\n      properties:\r\n        children:\r\n          type: array\r\n          items: \r\n            $ref: '#/components/schemas/Tree'\r\n```\r\n\r\nIt looks like support was added to handle recursive properties, but recursive array items is currently not supported.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/119", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/119/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/119/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/119", "id": 418758061, "node_id": "MDU6SXNzdWU0MTg3NTgwNjE=", "number": 119, "title": "\"links\" parameter of response", "user": {"login": "MCapitani", "id": 20857137, "node_id": "MDQ6VXNlcjIwODU3MTM3", "avatar_url": "https://avatars3.githubusercontent.com/u/20857137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MCapitani", "html_url": "https://github.com/MCapitani", "followers_url": "https://api.github.com/users/MCapitani/followers", "following_url": "https://api.github.com/users/MCapitani/following{/other_user}", "gists_url": "https://api.github.com/users/MCapitani/gists{/gist_id}", "starred_url": "https://api.github.com/users/MCapitani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MCapitani/subscriptions", "organizations_url": "https://api.github.com/users/MCapitani/orgs", "repos_url": "https://api.github.com/users/MCapitani/repos", "events_url": "https://api.github.com/users/MCapitani/events{/privacy}", "received_events_url": "https://api.github.com/users/MCapitani/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1284425216, "node_id": "MDU6TGFiZWwxMjg0NDI1MjE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/missing-implementation", "name": "kind/missing-implementation", "color": "dd8575", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-08T11:58:08Z", "updated_at": "2019-05-21T12:30:36Z", "closed_at": "2019-05-21T12:30:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Similarily to #118 , I needed the \"links\" parameter of the \"Response\" object [[spec ref]](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#responselinks).\r\nI saw that it is in the model, but it is not populated.\r\nI have already an implementation (although I have some issues with complex \"requestBody\" values), if you'd like to merge it upstream, I'll open a pull request for review.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/118", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/118/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/118/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/118", "id": 418705301, "node_id": "MDU6SXNzdWU0MTg3MDUzMDE=", "number": 118, "title": "Path-level parameters", "user": {"login": "MCapitani", "id": 20857137, "node_id": "MDQ6VXNlcjIwODU3MTM3", "avatar_url": "https://avatars3.githubusercontent.com/u/20857137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MCapitani", "html_url": "https://github.com/MCapitani", "followers_url": "https://api.github.com/users/MCapitani/followers", "following_url": "https://api.github.com/users/MCapitani/following{/other_user}", "gists_url": "https://api.github.com/users/MCapitani/gists{/gist_id}", "starred_url": "https://api.github.com/users/MCapitani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MCapitani/subscriptions", "organizations_url": "https://api.github.com/users/MCapitani/orgs", "repos_url": "https://api.github.com/users/MCapitani/repos", "events_url": "https://api.github.com/users/MCapitani/events{/privacy}", "received_events_url": "https://api.github.com/users/MCapitani/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1284425216, "node_id": "MDU6TGFiZWwxMjg0NDI1MjE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/missing-implementation", "name": "kind/missing-implementation", "color": "dd8575", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-08T09:32:47Z", "updated_at": "2019-05-21T12:31:29Z", "closed_at": "2019-05-21T12:31:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently, as far as I can see, there is no support for parameters specified at the path level [[spec]](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#fixed-fields-7).\r\n\r\nI am working on a project where this is used, so I have (lightly) extended the library for my use case by adding support in PathsGenerator and the Path model as follows.\r\nAssuming I did not miss this feature somehow and you'd like to have it, I can send a pull request for review.\r\n\r\n**paths/generators.py**\r\n```\r\nclass PathsGenerator(object):\r\n\r\n    def __init__(self, dereferencer, schemas_registry):\r\n        self.dereferencer = dereferencer\r\n        self.schemas_registry = schemas_registry\r\n\r\n    def generate(self, paths):\r\n        paths_deref = self.dereferencer.dereference(paths)\r\n        for path_name, path in iteritems(paths_deref):\r\n            operations = self.operations_generator.generate(path_name, path)\r\n+           parameters = self.parameters_generator.generate_from_list(\r\n+               path.get('parameters', {})\r\n+           )\r\n+           yield path_name, Path(path_name, list(operations), parameters)\r\n\r\n    @property\r\n    @lru_cache()\r\n    def operations_generator(self):\r\n        return OperationsGenerator(self.dereferencer, self.schemas_registry)\r\n\r\n+    @property\r\n+    @lru_cache()\r\n+    def parameters_generator(self):\r\n+        return ParametersGenerator(self.dereferencer, self.schemas_registry)\r\n```\r\n**paths/models.py**\r\n```\r\nclass Path(object):\r\n    \"\"\"Represents an OpenAPI Path.\"\"\"\r\n\r\n+   def __init__(self, name, operations, parameters=None):\r\n        self.name = name\r\n        self.operations = dict(operations)\r\n+       self.parameters = dict(parameters) if parameters else {}\r\n\r\n    def __getitem__(self, http_method):\r\n        return self.operations[http_method]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/115", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/115/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/115/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/115", "id": 418317434, "node_id": "MDU6SXNzdWU0MTgzMTc0MzQ=", "number": 115, "title": "Response validation does not work in case response is an array of oneOf objects", "user": {"login": "vyakoviv-vs", "id": 15380206, "node_id": "MDQ6VXNlcjE1MzgwMjA2", "avatar_url": "https://avatars3.githubusercontent.com/u/15380206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vyakoviv-vs", "html_url": "https://github.com/vyakoviv-vs", "followers_url": "https://api.github.com/users/vyakoviv-vs/followers", "following_url": "https://api.github.com/users/vyakoviv-vs/following{/other_user}", "gists_url": "https://api.github.com/users/vyakoviv-vs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vyakoviv-vs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vyakoviv-vs/subscriptions", "organizations_url": "https://api.github.com/users/vyakoviv-vs/orgs", "repos_url": "https://api.github.com/users/vyakoviv-vs/repos", "events_url": "https://api.github.com/users/vyakoviv-vs/events{/privacy}", "received_events_url": "https://api.github.com/users/vyakoviv-vs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1026496816, "node_id": "MDU6TGFiZWwxMDI2NDk2ODE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/schema", "name": "area/schema", "color": "0052cc", "default": false, "description": "Indicates an issue on schema area"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-07T13:46:59Z", "updated_at": "2020-02-03T23:15:24Z", "closed_at": "2020-02-03T23:15:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. I am trying to validate a response which is an array of objects and this case does not work properly.\r\n\r\nspec:\r\n```\r\npaths:\r\n  /one_of:\r\n    get:\r\n      responses:\r\n        \"200\":\r\n          description: OK\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Cont'\r\n\r\ncomponents:\r\n  schemas:\r\n    Cont:\r\n      type: array\r\n      items:\r\n        oneOf:\r\n        - $ref: '#/components/schemas/Obj1'\r\n        - $ref: '#/components/schemas/Obj2'\r\n\r\n    Obj1:\r\n      type: object\r\n      properties:\r\n        a:\r\n          type: string\r\n\r\n    Obj2:\r\n      type: object\r\n      properties:\r\n        b:\r\n          type: string\r\n```\r\n\r\nIf response is [{'a': '1'}, {'c': '2'}] - validator does not raise SchemaValidationError.\r\nExpecting that {'c': '2'} is rejected.\r\n\r\n```\r\nopenapi_core-0.7.1\r\nopenapi_spec_validator-0.2.4\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/110", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/110/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/110/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/110", "id": 414635961, "node_id": "MDU6SXNzdWU0MTQ2MzU5NjE=", "number": 110, "title": "KeyError: <SchemaFormat.BYTE: 'byte'>", "user": {"login": "mnboos", "id": 22575883, "node_id": "MDQ6VXNlcjIyNTc1ODgz", "avatar_url": "https://avatars1.githubusercontent.com/u/22575883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mnboos", "html_url": "https://github.com/mnboos", "followers_url": "https://api.github.com/users/mnboos/followers", "following_url": "https://api.github.com/users/mnboos/following{/other_user}", "gists_url": "https://api.github.com/users/mnboos/gists{/gist_id}", "starred_url": "https://api.github.com/users/mnboos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mnboos/subscriptions", "organizations_url": "https://api.github.com/users/mnboos/orgs", "repos_url": "https://api.github.com/users/mnboos/repos", "events_url": "https://api.github.com/users/mnboos/events{/privacy}", "received_events_url": "https://api.github.com/users/mnboos/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-02-26T14:22:05Z", "updated_at": "2019-02-28T14:10:39Z", "closed_at": "2019-02-28T14:10:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "We encounter the following error because we use a string property with format 'byte' (for base64 strings, according to the OpenAPI specification (https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#data-types).\r\n\r\nThe properties part of the OpenAPI schema looks like this:\r\n\r\n```\r\n\"properties\": {\r\n\t\"data\": {\r\n\t\t\"type\": \"string\",\r\n\t\t\"format\": \"byte\"\r\n\t}\r\n```\r\n\r\n```\r\n  File \"/venv/lib/python3.6/site-packages/openapi_core/validation/request/validators.py\", line 37, in validate\r\n    body, body_errors = self._get_body(request, operation)\r\n  File \"/venv/lib/python3.6/site-packages/openapi_core/validation/request/validators.py\", line 82, in _get_body\r\n    body = media_type.unmarshal(raw_body, self.custom_formatters)\r\n  File \"/venv/lib/python3.6/site-packages/openapi_core/schema/media_types/models.py\", line 45, in unmarshal\r\n    unmarshalled = self.schema.unmarshal(deserialized, custom_formatters=custom_formatters)\r\n  File \"/venv/lib/python3.6/site-packages/openapi_core/schema/schemas/models.py\", line 183, in unmarshal\r\n    casted = self.cast(value, custom_formatters=custom_formatters)\r\n  File \"/venv/lib/python3.6/site-packages/openapi_core/schema/schemas/models.py\", line 173, in cast\r\n    return cast_callable(value)\r\n  File \"/venv/lib/python3.6/site-packages/openapi_core/schema/schemas/models.py\", line 263, in _unmarshal_object\r\n    value, custom_formatters=custom_formatters)\r\n  File \"/venv/lib/python3.6/site-packages/openapi_core/schema/schemas/models.py\", line 302, in _unmarshal_properties\r\n    prop_value, custom_formatters=custom_formatters)\r\n  File \"/venv/lib/python3.6/site-packages/openapi_core/schema/schemas/models.py\", line 183, in unmarshal\r\n    casted = self.cast(value, custom_formatters=custom_formatters)\r\n  File \"/venv/lib/python3.6/site-packages/openapi_core/schema/schemas/models.py\", line 173, in cast\r\n    return cast_callable(value)\r\n  File \"/venv/lib/python3.6/site-packages/openapi_core/schema/schemas/models.py\", line 263, in _unmarshal_object\r\n    value, custom_formatters=custom_formatters)\r\n  File \"/venv/lib/python3.6/site-packages/openapi_core/schema/schemas/models.py\", line 302, in _unmarshal_properties\r\n    prop_value, custom_formatters=custom_formatters)\r\n  File \"/venv/lib/python3.6/site-packages/openapi_core/schema/schemas/models.py\", line 183, in unmarshal\r\n    casted = self.cast(value, custom_formatters=custom_formatters)\r\n  File \"/venv/lib/python3.6/site-packages/openapi_core/schema/schemas/models.py\", line 173, in cast\r\n    return cast_callable(value)\r\n  File \"/venv/lib/python3.6/site-packages/openapi_core/schema/schemas/models.py\", line 206, in _unmarshal_string\r\n    formatstring = self.STRING_FORMAT_CALLABLE_GETTER[schema_format]\r\nKeyError: <SchemaFormat.BYTE: 'byte'>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/108", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/108/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/108/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/108", "id": 411349618, "node_id": "MDU6SXNzdWU0MTEzNDk2MTg=", "number": 108, "title": "Request Validation stops after first failure", "user": {"login": "riscmk", "id": 32735335, "node_id": "MDQ6VXNlcjMyNzM1MzM1", "avatar_url": "https://avatars2.githubusercontent.com/u/32735335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/riscmk", "html_url": "https://github.com/riscmk", "followers_url": "https://api.github.com/users/riscmk/followers", "following_url": "https://api.github.com/users/riscmk/following{/other_user}", "gists_url": "https://api.github.com/users/riscmk/gists{/gist_id}", "starred_url": "https://api.github.com/users/riscmk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/riscmk/subscriptions", "organizations_url": "https://api.github.com/users/riscmk/orgs", "repos_url": "https://api.github.com/users/riscmk/repos", "events_url": "https://api.github.com/users/riscmk/events{/privacy}", "received_events_url": "https://api.github.com/users/riscmk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804491, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTE=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/resolution/duplicate", "name": "resolution/duplicate", "color": "cccccc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-18T08:13:37Z", "updated_at": "2019-03-10T16:05:32Z", "closed_at": "2019-03-10T16:05:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "The validator is working fine, but if there is more than one error in the data, the validate routine only raises the first error and stops validating the rest of the data.\r\n\r\nThis is quite frustrating, since you actually want to know all the errors in your dataset, and not just the first one.\r\n\r\nIs there any way to prevent that (without overwriting a bunch of classes and methods of coruse)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/105", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/105/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/105/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/105", "id": 381117558, "node_id": "MDU6SXNzdWUzODExMTc1NTg=", "number": 105, "title": "Validation pass when object, list or integer returned instead of string for object string property (must fail)", "user": {"login": "andyceo", "id": 758910, "node_id": "MDQ6VXNlcjc1ODkxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/758910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andyceo", "html_url": "https://github.com/andyceo", "followers_url": "https://api.github.com/users/andyceo/followers", "following_url": "https://api.github.com/users/andyceo/following{/other_user}", "gists_url": "https://api.github.com/users/andyceo/gists{/gist_id}", "starred_url": "https://api.github.com/users/andyceo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andyceo/subscriptions", "organizations_url": "https://api.github.com/users/andyceo/orgs", "repos_url": "https://api.github.com/users/andyceo/repos", "events_url": "https://api.github.com/users/andyceo/events{/privacy}", "received_events_url": "https://api.github.com/users/andyceo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1026498613, "node_id": "MDU6TGFiZWwxMDI2NDk4NjEz", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/validation/request", "name": "area/validation/request", "color": "0052cc", "default": false, "description": "Indicates an issue on request validation area."}, {"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-15T11:25:23Z", "updated_at": "2019-03-23T20:56:34Z", "closed_at": "2019-03-22T11:35:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nWe faced with following bug. Some object's property declared as string, If this object's property returned by API is object itself, or integer, or list, no errors generated.\r\n\r\nIf API returns wrong property type for example int property, InvalidMediaTypeValue thrown (as expected).\r\n\r\nTested on version 0.5.0, 0.7.1, master - same results.\r\n\r\n **Expected behavior**\r\n\r\nInvalidMediaType should be thrown\r\n\r\n**Steps to reproduce**\r\n\r\n1. Install openapi-core:\r\n\r\n        pip3 install openapi-core\r\n\r\n2.. Create and save following fatless specification as `test.yml`:\r\n\r\n\topenapi: \"3.0.1\"\r\n\r\n\tinfo:\r\n\t  version: \"0.1\"\r\n\t  title: Object instead of string\r\n\t  description: Test for if returns objects instead of string\r\n\r\n\tcomponents:\r\n\t  schemas:\r\n\t\tSomeObject:\r\n\t\t  type: object\r\n\t\t  properties:\r\n\t\t\tsomeprop:\r\n\t\t\t  description: Some property\r\n\t\t\t  type: string\r\n\t\t\tsomeint:\r\n\t\t\t  type: integer\r\n\r\n\tpaths:\r\n\t  /getsomeobject:\r\n\t\tget:\r\n\t\t  summary: Get the SomeObject\r\n\t\t  operationId: getSomeObject\r\n\t\t  responses:\r\n\t\t\t'200':\r\n\t\t\t  description: This is SomeObject\r\n\t\t\t  content:\r\n\t\t\t\tapplication/json:\r\n\t\t\t\t  schema:\r\n\t\t\t\t\t$ref: '#/components/schemas/SomeObject'\r\n\r\n2. Create and save following script as `test.py`:\r\n\r\n        #!/usr/bin/env python3\r\n        \r\n        # -*- coding: utf-8 -*-\r\n        import json\r\n        import sys\r\n        import yaml\r\n        from openapi_core import create_spec\r\n        from openapi_core.shortcuts import RequestValidator, ResponseValidator\r\n        from openapi_core.wrappers.mock import MockRequest, MockResponse\r\n        \r\n        \r\n        def validate(openapi_file):\r\n            with open(openapi_file, 'r') as myfile:\r\n                spec_dict = yaml.safe_load(myfile)\r\n                spec = create_spec(spec_dict)\r\n        \r\n                openapi_request = MockRequest('localhost', 'get', '/getsomeobject')\r\n                validator = RequestValidator(spec)\r\n                result = validator.validate(openapi_request)\r\n                request_errors = result.errors\r\n        \r\n                # PASS (must PASS)\r\n                data = json.dumps({\r\n                    'someprop': 'content'\r\n                })\r\n        \r\n                # PASS (must FAIL)\r\n                data = json.dumps({\r\n                    'someprop': {\r\n                        'nested_object_property': 'content',\r\n                        'nested_object_another property': 13,\r\n                    }\r\n                })\r\n        \r\n                # PASS (must FAIL)\r\n                data = json.dumps({\r\n                    'someprop': ['dfdfdf', 'dfdfdfsssss']\r\n                })\r\n        \r\n                # PASS (must FAIL)\r\n                data = json.dumps({\r\n                    'someprop': 123\r\n                })\r\n        \r\n                # PASS (must FAIL)\r\n                data = json.dumps({\r\n                    'someprop': 123\r\n                })\r\n        \r\n                # FAIL (must FAIL)\r\n                data = json.dumps({\r\n                    'someint': 'content'\r\n                })\r\n        \r\n                # FAIL (must FAIL)\r\n                data = json.dumps({\r\n                    'someprop': 'dsdsd',\r\n                    'someint': 123,\r\n                    'not_in_scheme_prop': 123\r\n                })\r\n        \r\n                openapi_response = MockResponse(data)\r\n                validator = ResponseValidator(spec)\r\n                result = validator.validate(openapi_request, openapi_response)\r\n                response_errors = result.errors\r\n        \r\n                print('Request errors: {} Response errors: {}'.format(request_errors, response_errors))\r\n        \r\n        \r\n        if __name__ == \"__main__\":\r\n            if len(sys.argv) < 2:\r\n                print(\"Specify path to openapi.yaml file!\")\r\n                exit(1)\r\n            else:\r\n                validate(sys.argv[1])\r\n\r\n\r\n4. Execute script to validate spec:\r\n\r\n        python3 test.py test.yml\r\n\r\n5. Try to comment out test payloads to see actual results.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/103", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/103/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/103/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/103", "id": 378239638, "node_id": "MDU6SXNzdWUzNzgyMzk2Mzg=", "number": 103, "title": "can't get to validate GeoJSON features using `openapi-core`, `oneOf` and `enum`", "user": {"login": "michalmiesiak", "id": 24430111, "node_id": "MDQ6VXNlcjI0NDMwMTEx", "avatar_url": "https://avatars3.githubusercontent.com/u/24430111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michalmiesiak", "html_url": "https://github.com/michalmiesiak", "followers_url": "https://api.github.com/users/michalmiesiak/followers", "following_url": "https://api.github.com/users/michalmiesiak/following{/other_user}", "gists_url": "https://api.github.com/users/michalmiesiak/gists{/gist_id}", "starred_url": "https://api.github.com/users/michalmiesiak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michalmiesiak/subscriptions", "organizations_url": "https://api.github.com/users/michalmiesiak/orgs", "repos_url": "https://api.github.com/users/michalmiesiak/repos", "events_url": "https://api.github.com/users/michalmiesiak/events{/privacy}", "received_events_url": "https://api.github.com/users/michalmiesiak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1026496816, "node_id": "MDU6TGFiZWwxMDI2NDk2ODE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/schema", "name": "area/schema", "color": "0052cc", "default": false, "description": "Indicates an issue on schema area"}, {"id": 697804492, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTI=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/enhancement", "name": "kind/enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-07T11:00:21Z", "updated_at": "2020-02-03T23:15:57Z", "closed_at": "2020-02-03T23:15:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI'm trying to integrate `openapi-core` with the test suite of my Flask API, so that all requests that I test are verified against the  specification. Before I used the `flex.core` lib and `Swagger 2.0` specification, but now I must pass on to `OpenApi 3.0` (not supported by `flex`), so I chose `openapi-core` (my current version: `0.7.1`). I use the `FlaskOpenAPIRequest` wrapper class on the `flask.request` object, within the correct context etc.\r\n\r\nMy problem is that I can't validate any HTTP requests that contain GeoJSON geometries in their bodies. The library \"thinks\" that more than one schema satisfies the specification whereas it is not the case.  Thus, the validation always fails. The error I get is:\r\n\r\n> InvalidMediaTypeValue: Mimetype invalid: Invalid schema property areas: Invalid schema property geometry: Exactly one schema type SchemaType.OBJECT should be valid, more than one found\r\n\r\nI think this might be due to a bug with `oneOf` choosing from schemas that contain `enum`, but maybe I'm doing something wrong?\r\n\r\nBelow details on requests that I make.\r\n\r\nSo, my request has a JSON body:\r\n\r\n```  post:\r\n      tags:\r\n        - [...]\r\n      parameters:\r\n        - [...]\r\n      responses:\r\n        [...]\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/NewLayer\r\n        required: true\r\n```\r\n\r\n`NewLayer` are basically lists of geojson geometries with some additional properties, like in an example test body that I send:\r\n\r\n``` \r\n{\r\n        \"name\": \"Places in Bordeaux\",\r\n        \"areas\": [\r\n            {\r\n                \"geometry\": {\r\n                    \"type\": \"Polygon\",\r\n                    \"coordinates\": [\r\n                        [\r\n                            [\r\n                                -0.5781233310699463,\r\n                                44.84706857978168\r\n                            ],\r\n                            [\r\n                                -0.576556921005249,\r\n                                44.84687080641056\r\n                            ],\r\n                            [\r\n                                -0.5747973918914795,\r\n                                44.84725874584433\r\n                            ],\r\n                            [\r\n                                -0.5743038654327393,\r\n                                44.8486203165129\r\n                            ],\r\n                            [\r\n                                -0.5761599540710449,\r\n                                44.84973084752832\r\n                            ],\r\n                            [\r\n                                -0.579303503036499,\r\n                                44.849137552800435\r\n                            ],\r\n                            [\r\n                                -0.5795502662658691,\r\n                                44.84646765089727\r\n                            ],\r\n                            [\r\n                                -0.5781233310699463,\r\n                                44.84706857978168\r\n                            ]\r\n                        ]\r\n                    ]\r\n                },\r\n                \"area_id\": \"bdx_place_1\",\r\n                \"name\": \"test-area\"\r\n            }\r\n        ]\r\n    }\r\n``` \r\n\r\n**To resume briefly the problem,** each geometry element in my OpenApi specification has a choice of one of 5 schemas.\r\n\r\n```\r\n    Geometry:\r\n      type: object\r\n      oneOf:\r\n        - $ref: '#/components/schemas/Point'\r\n        - $ref: '#/components/schemas/LineString'\r\n        - $ref: '#/components/schemas/MultiLineString'\r\n        - $ref: '#/components/schemas/Polygon'\r\n        - $ref: '#/components/schemas/MultiPolygon'\r\n```\r\n\r\nThe elements that \"conflict\" are `MultiLineString` and `Polygon` (**if I remove any of these, all works!**).\r\nYet, they are different because they have a `type` field that is an `enum` with only one allowed value! So both can never be valid both at a time.\r\nOn the other hand, their `coordinates` fields can be both valid a time. That's what makes me think that `enum` fields are not handled correctly by the .\r\n\r\nBelow the definitions:\r\n\r\n```\r\n    MultiLineString:\r\n      type: object\r\n      required:\r\n        - type\r\n        - coordinates\r\n      properties:\r\n        type:\r\n          description: Geometry type\r\n          type: string\r\n          enum:\r\n            - MultiLineString\r\n        coordinates:\r\n          type: array\r\n          items:\r\n            type: array\r\n            items:\r\n              $ref: '#/components/schemas/Point2D'\r\n            minItems: 2\r\n\r\n    Polygon:\r\n      type: object\r\n      required:\r\n        - type\r\n        - coordinates\r\n      properties:\r\n        type:\r\n          description: Geometry type\r\n          type: string\r\n          enum:\r\n            - Polygon\r\n        coordinates:\r\n          type: array\r\n          items:\r\n            type: array\r\n            items:\r\n              $ref: '#/components/schemas/Point2D'\r\n            minItems: 3\r\n\r\n    Point2D:\r\n      type: array\r\n      maxItems: 2\r\n      minItems: 2\r\n      items:\r\n        type: number\r\n```\r\n\r\n\r\nI will be very glad for any help! :-)\r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/101", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/101/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/101/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/101", "id": 374909346, "node_id": "MDU6SXNzdWUzNzQ5MDkzNDY=", "number": 101, "title": "Can not install (python2.7)", "user": {"login": "Maskraft", "id": 42285797, "node_id": "MDQ6VXNlcjQyMjg1Nzk3", "avatar_url": "https://avatars1.githubusercontent.com/u/42285797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maskraft", "html_url": "https://github.com/Maskraft", "followers_url": "https://api.github.com/users/Maskraft/followers", "following_url": "https://api.github.com/users/Maskraft/following{/other_user}", "gists_url": "https://api.github.com/users/Maskraft/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maskraft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maskraft/subscriptions", "organizations_url": "https://api.github.com/users/Maskraft/orgs", "repos_url": "https://api.github.com/users/Maskraft/repos", "events_url": "https://api.github.com/users/Maskraft/events{/privacy}", "received_events_url": "https://api.github.com/users/Maskraft/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-29T08:41:16Z", "updated_at": "2018-10-29T10:25:22Z", "closed_at": "2018-10-29T10:25:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "> IOError: [Errno 2] No such file or directory: '/tmp/pip-build-kCtpTM/openapi-core/requirements_2.7.txt'\r\n\r\n\r\n### Would you please add this file?\u3000 \u2191\r\n### Thank you!\r\n\r\n\r\n\r\n\r\nFull error sentence\uff1a\r\n\r\n>  /usr/local/lib/python2.7/dist-packages/pip/commands/install.py:194: UserWarning: Disabling all use of wheels due to the use of --build-options / --global-options / --install-options.\r\n  cmdoptions.check_install_build_global(options)\r\nCollecting openapi-core==0.7.0\r\n  Using cached https://files.pythonhosted.org/packages/37/1e/780b34c10f3152a34cc3d96dc65664781db260b0b76c240a18753eae08f0/openapi-core-0.7.0.tar.gz\r\n    Complete output from command python setup.py egg_info:\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/tmp/pip-build-kCtpTM/openapi-core/setup.py\", line 84, in <module>\r\n        install_requires=install_requires(),\r\n      File \"/tmp/pip-build-kCtpTM/openapi-core/setup.py\", line 30, in install_requires\r\n        return read_requirements('requirements{}.txt'.format(py27))\r\n      File \"/tmp/pip-build-kCtpTM/openapi-core/setup.py\", line 12, in read_requirements\r\n        contents = read_file(filename).strip('\\n')\r\n      File \"/tmp/pip-build-kCtpTM/openapi-core/setup.py\", line 19, in read_file\r\n        with open(path) as f:\r\n    IOError: [Errno 2] No such file or directory: '/tmp/pip-build-kCtpTM/openapi-core/requirements_2.7.txt'\r\n\r\n    ----------------------------------------\r\nCommand \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-build-kCtpTM/openapi-core/\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/100", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/100/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/100/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/100", "id": 359883874, "node_id": "MDU6SXNzdWUzNTk4ODM4NzQ=", "number": 100, "title": "Multiple missing mandatory fields result in only one error", "user": {"login": "berend", "id": 673681, "node_id": "MDQ6VXNlcjY3MzY4MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/673681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/berend", "html_url": "https://github.com/berend", "followers_url": "https://api.github.com/users/berend/followers", "following_url": "https://api.github.com/users/berend/following{/other_user}", "gists_url": "https://api.github.com/users/berend/gists{/gist_id}", "starred_url": "https://api.github.com/users/berend/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/berend/subscriptions", "organizations_url": "https://api.github.com/users/berend/orgs", "repos_url": "https://api.github.com/users/berend/repos", "events_url": "https://api.github.com/users/berend/events{/privacy}", "received_events_url": "https://api.github.com/users/berend/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1026496816, "node_id": "MDU6TGFiZWwxMDI2NDk2ODE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/schema", "name": "area/schema", "color": "0052cc", "default": false, "description": "Indicates an issue on schema area"}, {"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-13T12:56:55Z", "updated_at": "2020-02-17T16:17:53Z", "closed_at": "2020-02-17T16:17:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given a openapi spec with multiple mandatory fields and a request missing several, the result of `RequestValidator.validate` only shows the first field.\r\n\r\nTo reproduce have a look at [this repo](https://github.com/berend/test-openapi-validator), it contains a simple flask app, openapi spec and a curl command to test it.\r\n\r\nThe gist of it here:\r\n\r\nOpenapi spec (extract)\r\n```\r\n\"requestBody\": {\r\n   \"required\": true,\r\n   \"content\": {\r\n      \"application/json\": {\r\n         \"schema\": {\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n               \"name\": {\r\n                  \"type\": \"string\"\r\n               },\r\n               \"brand\": {\r\n                  \"type\": \"string\"\r\n               },\r\n               \"ps\": {\r\n                  \"type\": \"integer\"\r\n               }\r\n            },\r\n            \"required\": [\r\n               \"name\",\r\n               \"brand\"\r\n            ]\r\n         },\r\n```\r\nTwo mandatory fields. When sending only the optional field like this:\r\n```\r\ncurl -X POST \\\r\n  http://127.0.0.1:8080/cars \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\"ps\": 123}'\r\n```\r\n\r\nI would expect `result.errors` to contain two entries, but there is only one: \r\n```\r\n[MissingSchemaProperty('Missing schema property name')]\r\n```\r\nThere is no notion of `brand` missing as well.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/97", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/97/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/97/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/97", "id": 358642495, "node_id": "MDU6SXNzdWUzNTg2NDI0OTU=", "number": 97, "title": "Validation always pass", "user": {"login": "rafaelcaricio", "id": 107613, "node_id": "MDQ6VXNlcjEwNzYxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/107613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafaelcaricio", "html_url": "https://github.com/rafaelcaricio", "followers_url": "https://api.github.com/users/rafaelcaricio/followers", "following_url": "https://api.github.com/users/rafaelcaricio/following{/other_user}", "gists_url": "https://api.github.com/users/rafaelcaricio/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafaelcaricio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafaelcaricio/subscriptions", "organizations_url": "https://api.github.com/users/rafaelcaricio/orgs", "repos_url": "https://api.github.com/users/rafaelcaricio/repos", "events_url": "https://api.github.com/users/rafaelcaricio/events{/privacy}", "received_events_url": "https://api.github.com/users/rafaelcaricio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-10T14:13:21Z", "updated_at": "2018-09-10T14:56:56Z", "closed_at": "2018-09-10T14:52:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Because of those lines: https://github.com/p1c2u/openapi-core/blob/master/openapi_core/schema/schemas/models.py#L224-L225\r\n\r\nValidation always pass. It will fail in the proper object validation, but the exception it caught and `continue` is called, failing silently. Then it validates on boolean type (https://github.com/p1c2u/openapi-core/blob/master/openapi_core/schema/schemas/util.py#L8-L12) because any `dict` with keys is a valid bool `true`. So the value returned is `true` which is not valid by my schema.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/93", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/93/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/93/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/93", "id": 357599838, "node_id": "MDU6SXNzdWUzNTc1OTk4Mzg=", "number": 93, "title": "Mess with paths", "user": {"login": "dbazhal", "id": 2122630, "node_id": "MDQ6VXNlcjIxMjI2MzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/2122630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbazhal", "html_url": "https://github.com/dbazhal", "followers_url": "https://api.github.com/users/dbazhal/followers", "following_url": "https://api.github.com/users/dbazhal/following{/other_user}", "gists_url": "https://api.github.com/users/dbazhal/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbazhal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbazhal/subscriptions", "organizations_url": "https://api.github.com/users/dbazhal/orgs", "repos_url": "https://api.github.com/users/dbazhal/repos", "events_url": "https://api.github.com/users/dbazhal/events{/privacy}", "received_events_url": "https://api.github.com/users/dbazhal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804491, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTE=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/resolution/duplicate", "name": "resolution/duplicate", "color": "cccccc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-09-06T10:48:48Z", "updated_at": "2018-11-15T20:34:03Z", "closed_at": "2018-11-15T15:06:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you have url pattern in flask, you'll never get your paths validated.\r\n\r\n```\r\nimport yaml\r\nfrom flask import Flask, request\r\nfrom openapi_core import create_spec\r\nfrom openapi_core.validation.request.validators import RequestValidator\r\nfrom openapi_core.wrappers.flask import FlaskOpenAPIRequest\r\n\r\nspec = \"\"\"openapi: \"3.0.0\"\r\ninfo:\r\n    version: 1.0.0\r\n    title: test\r\nservers:\r\n- url: http://127.0.0.1:8000\r\ncomponents:\r\n    parameters:\r\n        some_param:\r\n            name: some\r\n            in: path\r\n            required: true\r\n            schema:\r\n                type: string\r\npaths:\r\n    /{some}/path/:\r\n        parameters:\r\n        - $ref: '#/components/parameters/some_param'\r\n        post:\r\n            summary: anything\r\n\"\"\"\r\nTEST_SPEC = create_spec(spec)\r\n\r\nFLASK_APP = Flask(__name__)\r\n\r\n@FLASK_APP.route('/<some>/path', methods=['POST'])\r\ndef duh(some: str):\r\n    validator = RequestValidator(TEST_SPEC)\r\n    result = validator.validate(FlaskOpenAPIRequest(request))\r\n    print(result.errors)\r\n```\r\nWill always get an error\r\n```\r\n[InvalidOperation('Unknown operation path /<some>/path with method post')]\r\n```\r\nBecause flask url pattern syntax and openapi pattern syntax do not match.\r\nAn error hides here https://github.com/p1c2u/openapi-core/blob/master/openapi_core/validation/request/validators.py#L24\r\n1) path_pattern is not transformed to openapi format\r\n2) request.path_pattern is not used", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/88", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/88/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/88/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/88", "id": 353326812, "node_id": "MDU6SXNzdWUzNTMzMjY4MTI=", "number": 88, "title": "dataclasses (attrs) instead of free form data structure", "user": {"login": "domenkozar", "id": 126339, "node_id": "MDQ6VXNlcjEyNjMzOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/126339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domenkozar", "html_url": "https://github.com/domenkozar", "followers_url": "https://api.github.com/users/domenkozar/followers", "following_url": "https://api.github.com/users/domenkozar/following{/other_user}", "gists_url": "https://api.github.com/users/domenkozar/gists{/gist_id}", "starred_url": "https://api.github.com/users/domenkozar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domenkozar/subscriptions", "organizations_url": "https://api.github.com/users/domenkozar/orgs", "repos_url": "https://api.github.com/users/domenkozar/repos", "events_url": "https://api.github.com/users/domenkozar/events{/privacy}", "received_events_url": "https://api.github.com/users/domenkozar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1026496816, "node_id": "MDU6TGFiZWwxMDI2NDk2ODE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/schema", "name": "area/schema", "color": "0052cc", "default": false, "description": "Indicates an issue on schema area"}, {"id": 697804492, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTI=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/enhancement", "name": "kind/enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-23T10:49:56Z", "updated_at": "2019-04-08T07:36:32Z", "closed_at": "2018-09-06T16:01:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "For validated data structures, it would provide a lof of value if those were also assured throughout the python codebase. For example if field renames or changes type, one should get an error before runtime.\r\n\r\nEssentially could write an inverse of https://pypi.org/project/dataclasses-jsonschema/, but I haven't looked how hard that is.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/82", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/82/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/82/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/82", "id": 352233589, "node_id": "MDU6SXNzdWUzNTIyMzM1ODk=", "number": 82, "title": "Casting incorrect types", "user": {"login": "raybotha", "id": 9902896, "node_id": "MDQ6VXNlcjk5MDI4OTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/9902896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raybotha", "html_url": "https://github.com/raybotha", "followers_url": "https://api.github.com/users/raybotha/followers", "following_url": "https://api.github.com/users/raybotha/following{/other_user}", "gists_url": "https://api.github.com/users/raybotha/gists{/gist_id}", "starred_url": "https://api.github.com/users/raybotha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raybotha/subscriptions", "organizations_url": "https://api.github.com/users/raybotha/orgs", "repos_url": "https://api.github.com/users/raybotha/repos", "events_url": "https://api.github.com/users/raybotha/events{/privacy}", "received_events_url": "https://api.github.com/users/raybotha/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1026496816, "node_id": "MDU6TGFiZWwxMDI2NDk2ODE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/schema", "name": "area/schema", "color": "0052cc", "default": false, "description": "Indicates an issue on schema area"}, {"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-20T17:48:23Z", "updated_at": "2018-08-22T13:01:21Z", "closed_at": "2018-08-22T13:01:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to cast incorrect types for request bodies, or at least validate the type and throw an error.\r\n\r\nAt the moment if I submit an int instead of a string, it passes validation and causes problems elsewhere.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/77", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/77/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/77/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/77", "id": 351103165, "node_id": "MDU6SXNzdWUzNTExMDMxNjU=", "number": 77, "title": "allOf element's required keyword is ignored, if its element doesn't have properites keyword", "user": {"login": "grktsh", "id": 15605442, "node_id": "MDQ6VXNlcjE1NjA1NDQy", "avatar_url": "https://avatars3.githubusercontent.com/u/15605442?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grktsh", "html_url": "https://github.com/grktsh", "followers_url": "https://api.github.com/users/grktsh/followers", "following_url": "https://api.github.com/users/grktsh/following{/other_user}", "gists_url": "https://api.github.com/users/grktsh/gists{/gist_id}", "starred_url": "https://api.github.com/users/grktsh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grktsh/subscriptions", "organizations_url": "https://api.github.com/users/grktsh/orgs", "repos_url": "https://api.github.com/users/grktsh/repos", "events_url": "https://api.github.com/users/grktsh/events{/privacy}", "received_events_url": "https://api.github.com/users/grktsh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1026496816, "node_id": "MDU6TGFiZWwxMDI2NDk2ODE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/schema", "name": "area/schema", "color": "0052cc", "default": false, "description": "Indicates an issue on schema area"}, {"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-16T08:21:19Z", "updated_at": "2020-02-03T23:15:41Z", "closed_at": "2020-02-03T23:15:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'd like to define `PetNew` schema for `POST /pets` and `PetUpdate` schema for `PATCH /pets/{pet_id}` as following to reuse name schema:\r\n\r\n```yaml\r\ncomponents:\r\n  schemas:\r\n    PetNew:\r\n      allOf:\r\n      - $ref: '#/components/schemas/PetUpdate'\r\n      - type: object\r\n        required:\r\n        - name\r\n    PetUpdate:\r\n      type: object\r\n      properties:\r\n        name:\r\n          type: string\r\n```\r\n\r\nBut openapi-core treats PetNew's name property as optional.\r\n\r\n```python\r\ndef test_all_of_required_keyword_only_element(self):\r\n    schema = Schema('object', all_of=[\r\n        Schema('object', properties={'name': Schema('string')}),\r\n        Schema('object', required=['name']),\r\n    ])\r\n    assert schema.get_all_required_properties_names() == {'name'}\r\n```\r\n\r\nswagger-editor shows no schema errors for this definitions and openapi-generator generates required name property.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/67", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/67/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/67/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/67", "id": 345287103, "node_id": "MDU6SXNzdWUzNDUyODcxMDM=", "number": 67, "title": "additionalProperties can be a bool or schema", "user": {"login": "domenkozar", "id": 126339, "node_id": "MDQ6VXNlcjEyNjMzOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/126339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domenkozar", "html_url": "https://github.com/domenkozar", "followers_url": "https://api.github.com/users/domenkozar/followers", "following_url": "https://api.github.com/users/domenkozar/following{/other_user}", "gists_url": "https://api.github.com/users/domenkozar/gists{/gist_id}", "starred_url": "https://api.github.com/users/domenkozar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domenkozar/subscriptions", "organizations_url": "https://api.github.com/users/domenkozar/orgs", "repos_url": "https://api.github.com/users/domenkozar/repos", "events_url": "https://api.github.com/users/domenkozar/events{/privacy}", "received_events_url": "https://api.github.com/users/domenkozar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1026496816, "node_id": "MDU6TGFiZWwxMDI2NDk2ODE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/schema", "name": "area/schema", "color": "0052cc", "default": false, "description": "Indicates an issue on schema area"}, {"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-27T16:19:58Z", "updated_at": "2020-02-03T21:06:17Z", "closed_at": "2020-02-03T21:06:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As per https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#schema-object - currently it's expected to be schema.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/61", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/61/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/61/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/61", "id": 343692369, "node_id": "MDU6SXNzdWUzNDM2OTIzNjk=", "number": 61, "title": "Attribute operation_id is not populated", "user": {"login": "rafaelcaricio", "id": 107613, "node_id": "MDQ6VXNlcjEwNzYxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/107613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafaelcaricio", "html_url": "https://github.com/rafaelcaricio", "followers_url": "https://api.github.com/users/rafaelcaricio/followers", "following_url": "https://api.github.com/users/rafaelcaricio/following{/other_user}", "gists_url": "https://api.github.com/users/rafaelcaricio/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafaelcaricio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafaelcaricio/subscriptions", "organizations_url": "https://api.github.com/users/rafaelcaricio/orgs", "repos_url": "https://api.github.com/users/rafaelcaricio/repos", "events_url": "https://api.github.com/users/rafaelcaricio/events{/privacy}", "received_events_url": "https://api.github.com/users/rafaelcaricio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-07-23T15:53:10Z", "updated_at": "2018-07-23T18:42:13Z", "closed_at": "2018-07-23T18:42:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While parsing the specification file, the `operation_id` is not populated in https://github.com/p1c2u/openapi-core/blob/master/openapi_core/schema/operations/generators.py#L45\r\n\r\nI would like to make use of this value. Any reason why it's not populated since the field exists in the `Operation` class?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/56", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/56/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/56/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/56", "id": 340695411, "node_id": "MDU6SXNzdWUzNDA2OTU0MTE=", "number": 56, "title": "Custom validators for format of strings", "user": {"login": "domenkozar", "id": 126339, "node_id": "MDQ6VXNlcjEyNjMzOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/126339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domenkozar", "html_url": "https://github.com/domenkozar", "followers_url": "https://api.github.com/users/domenkozar/followers", "following_url": "https://api.github.com/users/domenkozar/following{/other_user}", "gists_url": "https://api.github.com/users/domenkozar/gists{/gist_id}", "starred_url": "https://api.github.com/users/domenkozar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domenkozar/subscriptions", "organizations_url": "https://api.github.com/users/domenkozar/orgs", "repos_url": "https://api.github.com/users/domenkozar/repos", "events_url": "https://api.github.com/users/domenkozar/events{/privacy}", "received_events_url": "https://api.github.com/users/domenkozar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804494, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTQ=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Indicates an issue ready for a new contributor."}, {"id": 697804493, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTM=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/help%20wanted", "name": "help wanted", "color": "33aa3f", "default": true, "description": "Indicates an issue that needs help from a contributor."}, {"id": 697804492, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTI=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/enhancement", "name": "kind/enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-12T15:46:23Z", "updated_at": "2019-04-04T13:12:25Z", "closed_at": "2018-08-17T10:25:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As per https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#data-types\r\n\r\n```\r\nHowever, to support documentation needs, the format property is an open string-valued property, and can have any value. Formats such as \"email\", \"uuid\", and so on, MAY be used even though undefined by this specification. Types that are not accompanied by a format property follow the type definition in the JSON Schema. Tools that do not recognize a specific format MAY default back to the type alone, as if the format is not specified.\r\n```\r\n\r\nIt would be great if openapi-core allows custom validation of `format: uuid`, etc.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/53", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/53/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/53/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/53", "id": 339082897, "node_id": "MDU6SXNzdWUzMzkwODI4OTc=", "number": 53, "title": "Uncustomizable type casting", "user": {"login": "muzhig", "id": 681616, "node_id": "MDQ6VXNlcjY4MTYxNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/681616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/muzhig", "html_url": "https://github.com/muzhig", "followers_url": "https://api.github.com/users/muzhig/followers", "following_url": "https://api.github.com/users/muzhig/following{/other_user}", "gists_url": "https://api.github.com/users/muzhig/gists{/gist_id}", "starred_url": "https://api.github.com/users/muzhig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/muzhig/subscriptions", "organizations_url": "https://api.github.com/users/muzhig/orgs", "repos_url": "https://api.github.com/users/muzhig/repos", "events_url": "https://api.github.com/users/muzhig/events{/privacy}", "received_events_url": "https://api.github.com/users/muzhig/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1026496816, "node_id": "MDU6TGFiZWwxMDI2NDk2ODE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/schema", "name": "area/schema", "color": "0052cc", "default": false, "description": "Indicates an issue on schema area"}, {"id": 697804492, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTI=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/enhancement", "name": "kind/enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-06T22:00:27Z", "updated_at": "2018-08-17T17:54:36Z", "closed_at": "2018-08-17T17:54:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently the Schema class does automatic type casting, for string it doesn't do even that.\r\nWhich actually could be not the desired behavior: some might need to force strict type match for example, just like me. I solved the problem currently by monkey-patching DEFAULT_CAST_CALLABLE_GETTER. \r\nDoes it sound reasonable to make this customizable?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/52", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/52/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/52/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/52", "id": 339082265, "node_id": "MDU6SXNzdWUzMzkwODIyNjU=", "number": 52, "title": "readOnly properties not supported", "user": {"login": "muzhig", "id": 681616, "node_id": "MDQ6VXNlcjY4MTYxNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/681616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/muzhig", "html_url": "https://github.com/muzhig", "followers_url": "https://api.github.com/users/muzhig/followers", "following_url": "https://api.github.com/users/muzhig/following{/other_user}", "gists_url": "https://api.github.com/users/muzhig/gists{/gist_id}", "starred_url": "https://api.github.com/users/muzhig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/muzhig/subscriptions", "organizations_url": "https://api.github.com/users/muzhig/orgs", "repos_url": "https://api.github.com/users/muzhig/repos", "events_url": "https://api.github.com/users/muzhig/events{/privacy}", "received_events_url": "https://api.github.com/users/muzhig/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1026496816, "node_id": "MDU6TGFiZWwxMDI2NDk2ODE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/schema", "name": "area/schema", "color": "0052cc", "default": false, "description": "Indicates an issue on schema area"}, {"id": 697804492, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTI=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/enhancement", "name": "kind/enhancement", "color": "84b6eb", "default": false, "description": ""}, {"id": 1284425216, "node_id": "MDU6TGFiZWwxMjg0NDI1MjE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/missing-implementation", "name": "kind/missing-implementation", "color": "dd8575", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-06T21:56:59Z", "updated_at": "2020-02-17T12:54:39Z", "closed_at": "2020-02-17T12:54:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to the specs, readonly properties should be validated only against response, but in requestBody they shouldn't be present.\r\nIt seems like readOnly flag is ignored at the moment.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/51", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/51/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/51/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/51", "id": 338958410, "node_id": "MDU6SXNzdWUzMzg5NTg0MTA=", "number": 51, "title": "pip version is corrupted", "user": {"login": "muzhig", "id": 681616, "node_id": "MDQ6VXNlcjY4MTYxNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/681616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/muzhig", "html_url": "https://github.com/muzhig", "followers_url": "https://api.github.com/users/muzhig/followers", "following_url": "https://api.github.com/users/muzhig/following{/other_user}", "gists_url": "https://api.github.com/users/muzhig/gists{/gist_id}", "starred_url": "https://api.github.com/users/muzhig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/muzhig/subscriptions", "organizations_url": "https://api.github.com/users/muzhig/orgs", "repos_url": "https://api.github.com/users/muzhig/repos", "events_url": "https://api.github.com/users/muzhig/events{/privacy}", "received_events_url": "https://api.github.com/users/muzhig/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-06T14:22:59Z", "updated_at": "2018-08-23T20:46:44Z", "closed_at": "2018-08-23T20:46:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "`pip install openapi-core==0.5.0`\r\ninstalled package contains different structure than this repo on github:\r\n```extensions\r\nschema\r\nvalidation\r\nwrappers\r\n__init__.py\r\ncomponents.py\r\nenums.py\r\nexceptions.py\r\ninfos.py\r\nmedia_types.py\r\nmodels.py\r\noperations.py\r\nparameters.py\r\npaths.py\r\nrequest_bodies.py\r\nresponses.py\r\nschemas.py\r\nservers.py\r\nshortcuts.py\r\nspecs.py\r\nvalidators.py\r\nwrappers.py\r\n```\r\nWhich obviously isn't functioning correctly: for example it has two different modules with same exception classes, which leads to undefined behavior.\r\n\r\nWhen installed from github, the package seems correct.\r\n(Python 3.6, MacOS)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/49", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/49/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/49/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/49", "id": 336613567, "node_id": "MDU6SXNzdWUzMzY2MTM1Njc=", "number": 49, "title": "Minimum and maximum properties are not validated", "user": {"login": "jonpoveda", "id": 16905939, "node_id": "MDQ6VXNlcjE2OTA1OTM5", "avatar_url": "https://avatars2.githubusercontent.com/u/16905939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonpoveda", "html_url": "https://github.com/jonpoveda", "followers_url": "https://api.github.com/users/jonpoveda/followers", "following_url": "https://api.github.com/users/jonpoveda/following{/other_user}", "gists_url": "https://api.github.com/users/jonpoveda/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonpoveda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonpoveda/subscriptions", "organizations_url": "https://api.github.com/users/jonpoveda/orgs", "repos_url": "https://api.github.com/users/jonpoveda/repos", "events_url": "https://api.github.com/users/jonpoveda/events{/privacy}", "received_events_url": "https://api.github.com/users/jonpoveda/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1026496816, "node_id": "MDU6TGFiZWwxMDI2NDk2ODE2", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/area/schema", "name": "area/schema", "color": "0052cc", "default": false, "description": "Indicates an issue on schema area"}, {"id": 697804494, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTQ=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Indicates an issue ready for a new contributor."}, {"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-28T13:06:55Z", "updated_at": "2018-09-09T19:27:03Z", "closed_at": "2018-09-09T19:27:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version:** 0.5.0\r\n\r\n**Expected result:** setting a number below 'minimum' or above 'maximum' properties on an should add an error in the attribute `RequestValidationResult.errors` when `RequestValidator.validate` is called.\r\n\r\n**Actual result:** Specifying the parameters 'minimum' or 'maximum' makes no difference when validating, returning a `None` when `RequestValidationResult.errors` is checked.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/48", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/48/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/48/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/48", "id": 336551287, "node_id": "MDU6SXNzdWUzMzY1NTEyODc=", "number": 48, "title": "Pyramid support", "user": {"login": "domenkozar", "id": 126339, "node_id": "MDQ6VXNlcjEyNjMzOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/126339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domenkozar", "html_url": "https://github.com/domenkozar", "followers_url": "https://api.github.com/users/domenkozar/followers", "following_url": "https://api.github.com/users/domenkozar/following{/other_user}", "gists_url": "https://api.github.com/users/domenkozar/gists{/gist_id}", "starred_url": "https://api.github.com/users/domenkozar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domenkozar/subscriptions", "organizations_url": "https://api.github.com/users/domenkozar/orgs", "repos_url": "https://api.github.com/users/domenkozar/repos", "events_url": "https://api.github.com/users/domenkozar/events{/privacy}", "received_events_url": "https://api.github.com/users/domenkozar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804492, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTI=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/enhancement", "name": "kind/enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-28T09:50:50Z", "updated_at": "2018-07-10T16:26:57Z", "closed_at": "2018-07-10T16:26:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've created https://github.com/niteoweb/pyramid_openapi3, where could we put that for people to notice, in the README?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/47", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/47/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/47/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/47", "id": 334402383, "node_id": "MDU6SXNzdWUzMzQ0MDIzODM=", "number": 47, "title": "Wheel package of 0.5.0 on pypi.org contains extra files", "user": {"login": "pbasista", "id": 1535892, "node_id": "MDQ6VXNlcjE1MzU4OTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1535892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pbasista", "html_url": "https://github.com/pbasista", "followers_url": "https://api.github.com/users/pbasista/followers", "following_url": "https://api.github.com/users/pbasista/following{/other_user}", "gists_url": "https://api.github.com/users/pbasista/gists{/gist_id}", "starred_url": "https://api.github.com/users/pbasista/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pbasista/subscriptions", "organizations_url": "https://api.github.com/users/pbasista/orgs", "repos_url": "https://api.github.com/users/pbasista/repos", "events_url": "https://api.github.com/users/pbasista/events{/privacy}", "received_events_url": "https://api.github.com/users/pbasista/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-21T09:05:33Z", "updated_at": "2018-08-23T21:08:52Z", "closed_at": "2018-08-23T21:08:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[This](https://files.pythonhosted.org/packages/0a/ac/415e02427f1adcb725bf061af32dca794ca45a6d5a8c2c0e77bee0b3d6fd/openapi_core-0.5.0-py3-none-any.whl) wheel package of version `0.5.0` hosted on [pypi.org](https://pypi.org/project/openapi-core/) contains extra files when compared to a wheel package generated locally from git tag `0.5.0` using `python setup.py bdist_wheel` command in a clean virtual environment. The full diff is [here](https://github.com/p1c2u/openapi-core/files/2122825/openapi-core.wheels.diff.txt).\r\n\r\nThe extra files, for instance `openapi_core/validators.py`, were present in the repository before PR #25 was merged. They are present in the wheel package of `0.5.0`, but not in the source package of `0.5.0`.\r\n\r\nThis probably indicates an issue with generating the wheel packages, where the files from previously generated wheel packages are somehow included in the new wheel package as well. I think it should be investigated and resolved.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/41", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/41/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/41/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/41", "id": 327383010, "node_id": "MDU6SXNzdWUzMjczODMwMTA=", "number": 41, "title": "\"format\" should accept any value", "user": {"login": "yohanboniface", "id": 146023, "node_id": "MDQ6VXNlcjE0NjAyMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/146023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yohanboniface", "html_url": "https://github.com/yohanboniface", "followers_url": "https://api.github.com/users/yohanboniface/followers", "following_url": "https://api.github.com/users/yohanboniface/following{/other_user}", "gists_url": "https://api.github.com/users/yohanboniface/gists{/gist_id}", "starred_url": "https://api.github.com/users/yohanboniface/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yohanboniface/subscriptions", "organizations_url": "https://api.github.com/users/yohanboniface/orgs", "repos_url": "https://api.github.com/users/yohanboniface/repos", "events_url": "https://api.github.com/users/yohanboniface/events{/privacy}", "received_events_url": "https://api.github.com/users/yohanboniface/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-29T15:53:08Z", "updated_at": "2018-05-30T10:38:31Z", "closed_at": "2018-05-30T08:51:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nAccording to the [spec](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#dataTypeFormat), \"format\" should accept any value:\r\n\r\n> However, to support documentation needs, the format property is an open string-valued property, and can have any value. Formats such as \"email\", \"uuid\", and so on, MAY be used even though undefined by this specification. Types that are not accompanied by a format property follow the type definition in the JSON Schema. Tools that do not recognize a specific format MAY default back to the type alone, as if the format is not specified.\r\n\r\nHowever, this will raise: `ValueError: 'custom' is not a valid SchemaFormat`\r\n\r\n```\r\nfrom openapi_core import create_spec\r\n\r\n\r\nschema = {\r\n    \"components\": {\r\n        \"schemas\": {\r\n            \"Foo\": {\r\n                \"type\": \"object\",\r\n                \"properties\": {\r\n                    \"propname\": {\r\n                        \"type\": \"string\",\r\n                        \"format\": \"custom\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"info\": {\r\n        \"title\": \"xxx\",\r\n        \"version\": \"1.0.0\"\r\n    },\r\n    \"openapi\": \"3.0.0\",\r\n    \"paths\": {\r\n        \"/simulate\": {\r\n            \"get\": {\r\n                \"responses\": {\r\n                    \"200\": {\r\n                        \"content\": {\r\n                            \"application/json\": {\r\n                                \"schema\": {\r\n                                    \"$ref\": \"#/components/schemas/Foo\"\r\n                                }\r\n                            }\r\n                        },\r\n                        \"description\": \"OK\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nspec = create_spec(schema)\r\n```\r\n\r\nAm I missing something?\r\n\r\nThanks! :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/38", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/38/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/38/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/38", "id": 326337805, "node_id": "MDU6SXNzdWUzMjYzMzc4MDU=", "number": 38, "title": "does not handle content type wildcards in requestBody", "user": {"login": "gweis", "id": 138943, "node_id": "MDQ6VXNlcjEzODk0Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/138943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gweis", "html_url": "https://github.com/gweis", "followers_url": "https://api.github.com/users/gweis/followers", "following_url": "https://api.github.com/users/gweis/following{/other_user}", "gists_url": "https://api.github.com/users/gweis/gists{/gist_id}", "starred_url": "https://api.github.com/users/gweis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gweis/subscriptions", "organizations_url": "https://api.github.com/users/gweis/orgs", "repos_url": "https://api.github.com/users/gweis/repos", "events_url": "https://api.github.com/users/gweis/events{/privacy}", "received_events_url": "https://api.github.com/users/gweis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804492, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTI=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/enhancement", "name": "kind/enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-25T00:03:05Z", "updated_at": "2018-05-30T21:40:14Z", "closed_at": "2018-05-30T14:08:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "e.g.: the spec allows mimeType wildcards like image/* (or even */*) in requestBody,  but a request sent with e.g. image/png does not match any of the above and raises InvalidContentType exception in the validator.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/37", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/37/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/37/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/37", "id": 323842136, "node_id": "MDU6SXNzdWUzMjM4NDIxMzY=", "number": 37, "title": "\"oneOf\" keyword not supported", "user": {"login": "diogobaeder", "id": 207168, "node_id": "MDQ6VXNlcjIwNzE2OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/207168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diogobaeder", "html_url": "https://github.com/diogobaeder", "followers_url": "https://api.github.com/users/diogobaeder/followers", "following_url": "https://api.github.com/users/diogobaeder/following{/other_user}", "gists_url": "https://api.github.com/users/diogobaeder/gists{/gist_id}", "starred_url": "https://api.github.com/users/diogobaeder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diogobaeder/subscriptions", "organizations_url": "https://api.github.com/users/diogobaeder/orgs", "repos_url": "https://api.github.com/users/diogobaeder/repos", "events_url": "https://api.github.com/users/diogobaeder/events{/privacy}", "received_events_url": "https://api.github.com/users/diogobaeder/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804492, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTI=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/enhancement", "name": "kind/enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-17T01:34:07Z", "updated_at": "2019-06-03T15:23:21Z", "closed_at": "2018-05-30T08:13:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Unfortunately this library doesn't support \"oneOf\", which is fundamental for using flexible/union types. The standard describes this part of the specification, but this library doesn't implement it.\r\n\r\nPlease let me know if you need help with implementing this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/33", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/33/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/33/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/33", "id": 317630626, "node_id": "MDU6SXNzdWUzMTc2MzA2MjY=", "number": 33, "title": "additionalProperties support?", "user": {"login": "yohanboniface", "id": 146023, "node_id": "MDQ6VXNlcjE0NjAyMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/146023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yohanboniface", "html_url": "https://github.com/yohanboniface", "followers_url": "https://api.github.com/users/yohanboniface/followers", "following_url": "https://api.github.com/users/yohanboniface/following{/other_user}", "gists_url": "https://api.github.com/users/yohanboniface/gists{/gist_id}", "starred_url": "https://api.github.com/users/yohanboniface/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yohanboniface/subscriptions", "organizations_url": "https://api.github.com/users/yohanboniface/orgs", "repos_url": "https://api.github.com/users/yohanboniface/repos", "events_url": "https://api.github.com/users/yohanboniface/events{/privacy}", "received_events_url": "https://api.github.com/users/yohanboniface/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804492, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTI=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/enhancement", "name": "kind/enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-25T13:34:30Z", "updated_at": "2018-07-06T12:41:58Z", "closed_at": "2018-05-30T10:36:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nNot sure if I'm doing something wrong or if `additionalProperties` is missing proper support.\r\n\r\nHere is my test case:\r\n\r\n```python3\r\nfrom openapi_core import create_spec\r\nfrom openapi_core.wrappers import MockRequest, MockResponse\r\nfrom openapi_core.validators import ResponseValidator\r\n\r\n\r\nschema = {\r\n    \"components\": {\r\n        \"schemas\": {\r\n            \"Errors\": {\r\n                \"additionalProperties\": {\r\n                    \"type\": \"string\"\r\n                },\r\n                \"type\": \"object\"\r\n            }\r\n        }\r\n    },\r\n    \"info\": {\r\n        \"title\": \"xxx\",\r\n        \"version\": \"1.0.0\"\r\n    },\r\n    \"openapi\": \"3.0.0\",\r\n    \"paths\": {\r\n        \"/simulate\": {\r\n            \"get\": {\r\n                \"responses\": {\r\n                    \"422\": {\r\n                        \"content\": {\r\n                            \"application/json\": {\r\n                                \"schema\": {\r\n                                    \"$ref\": \"#/components/schemas/Errors\"\r\n                                }\r\n                            }\r\n                        },\r\n                        \"description\": \"Error in data\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nspec = create_spec(schema)\r\n\r\nvalidator = ResponseValidator(spec)\r\nrequest = MockRequest('http://localhost', 'get', '/simulate')\r\nresponse = MockResponse('{\"error_key\": \"message\"}', 422)\r\nresult = validator.validate(request, response)\r\nresult.raise_for_errors()\r\n```\r\n\r\nWhich raises the error `openapi_core.exceptions.UndefinedSchemaProperty: Undefined properties in schema: {'error_key'}`.\r\n\r\nI'm expecting instead that any key is allowed in the `Error` schema, given I'm using `additionalProperties` (see http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.5.6 and this [discussion](https://github.com/OAI/OpenAPI-Specification/issues/668)).\r\n\r\nThanks for your inputs on this! :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/31", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/31/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/31/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/31", "id": 317302670, "node_id": "MDU6SXNzdWUzMTczMDI2NzA=", "number": 31, "title": "Recursive models cause RecursionError", "user": {"login": "erpheus", "id": 331330, "node_id": "MDQ6VXNlcjMzMTMzMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/331330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erpheus", "html_url": "https://github.com/erpheus", "followers_url": "https://api.github.com/users/erpheus/followers", "following_url": "https://api.github.com/users/erpheus/following{/other_user}", "gists_url": "https://api.github.com/users/erpheus/gists{/gist_id}", "starred_url": "https://api.github.com/users/erpheus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erpheus/subscriptions", "organizations_url": "https://api.github.com/users/erpheus/orgs", "repos_url": "https://api.github.com/users/erpheus/repos", "events_url": "https://api.github.com/users/erpheus/events{/privacy}", "received_events_url": "https://api.github.com/users/erpheus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 697804490, "node_id": "MDU6TGFiZWw2OTc4MDQ0OTA=", "url": "https://api.github.com/repos/p1c2u/openapi-core/labels/kind/bug/confirmed", "name": "kind/bug/confirmed", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-24T16:27:11Z", "updated_at": "2018-07-28T22:00:47Z", "closed_at": "2018-07-28T22:00:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "An API definition with recursive models causes a RecursionError when calling `create_spec`. The definition file does validate though (checked using *openapi_spec_validator*).\r\n\r\nHere is a small working example:\r\n\r\n```\r\nopenapi: \"3.0.0\"\r\n\r\ninfo:\r\n  title: \"Test API\"\r\n  version: \"1.0.0\"\r\n\r\npaths:\r\n  /help:\r\n    get:\r\n      summary: \"Gets general information about the service\"\r\n      responses:\r\n\r\n        default:\r\n          description: \"Unexpected error\"\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\ncomponents:\r\n  schemas:\r\n    Error:\r\n      type: object\r\n      properties:\r\n        message:\r\n          type: string\r\n        suberror:\r\n          $ref: '#/components/schemas/Error'\r\n\r\n```\r\n\r\nyields the following\r\n\r\n```\r\n    self.openapi_spec = create_spec(yaml.load(open(openapi_path)))\r\n  File \"/opt/conda/lib/python3.6/site-packages/openapi_core/shortcuts.py\", line 16, in create_spec\r\n    return spec_factory.create(spec_dict, spec_url=spec_url)\r\n  File \"/opt/conda/lib/python3.6/site-packages/openapi_core/specs.py\", line 88, in create\r\n    components = self.components_factory.create(components_spec)\r\n  File \"/opt/conda/lib/python3.6/site-packages/openapi_core/components.py\", line 37, in create\r\n    schemas=list(schemas), responses=responses, parameters=parameters,\r\n  File \"/opt/conda/lib/python3.6/site-packages/openapi_core/schemas.py\", line 245, in generate\r\n    schema, _ = self.schemas_registry.get_or_create(schema_spec)\r\n  File \"/opt/conda/lib/python3.6/site-packages/openapi_core/schemas.py\", line 232, in get_or_create\r\n    return self.create(schema_deref), True\r\n  File \"/opt/conda/lib/python3.6/site-packages/openapi_core/schemas.py\", line 207, in create\r\n    deprecated=deprecated, all_of=all_of,\r\n  File \"/opt/conda/lib/python3.6/site-packages/openapi_core/schemas.py\", line 43, in __init__\r\n    self.properties = properties and dict(properties) or {}\r\n\r\n...\r\n\r\n\r\n  File \"/opt/conda/lib/python3.6/site-packages/openapi_core/schemas.py\", line 207, in create\r\n    deprecated=deprecated, all_of=all_of,\r\n  File \"/opt/conda/lib/python3.6/site-packages/openapi_core/schemas.py\", line 43, in __init__\r\n    self.properties = properties and dict(properties) or {}\r\n  File \"/opt/conda/lib/python3.6/site-packages/openapi_core/schemas.py\", line 164, in generate\r\n    schema = self._create_schema(schema_spec)\r\n  File \"/opt/conda/lib/python3.6/site-packages/openapi_core/schemas.py\", line 168, in _create_schema\r\n    return SchemaFactory(self.dereferencer).create(schema_spec)\r\n  File \"/opt/conda/lib/python3.6/site-packages/openapi_core/schemas.py\", line 207, in create\r\n    deprecated=deprecated, all_of=all_of,\r\n  File \"/opt/conda/lib/python3.6/site-packages/openapi_core/schemas.py\", line 41, in __init__\r\n    self.type = schema_type and SchemaType(schema_type)\r\nRecursionError: maximum recursion depth exceeded while calling a Python object\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/28", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/28/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/28/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/28", "id": 316825018, "node_id": "MDU6SXNzdWUzMTY4MjUwMTg=", "number": 28, "title": "Bug: when API endpoint return list, InvalidMediaTypeValue exception was generated", "user": {"login": "andyceo", "id": 758910, "node_id": "MDQ6VXNlcjc1ODkxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/758910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andyceo", "html_url": "https://github.com/andyceo", "followers_url": "https://api.github.com/users/andyceo/followers", "following_url": "https://api.github.com/users/andyceo/following{/other_user}", "gists_url": "https://api.github.com/users/andyceo/gists{/gist_id}", "starred_url": "https://api.github.com/users/andyceo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andyceo/subscriptions", "organizations_url": "https://api.github.com/users/andyceo/orgs", "repos_url": "https://api.github.com/users/andyceo/repos", "events_url": "https://api.github.com/users/andyceo/events{/privacy}", "received_events_url": "https://api.github.com/users/andyceo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-23T13:58:33Z", "updated_at": "2018-04-24T10:00:28Z", "closed_at": "2018-04-23T22:02:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "When some API endpoint return list (array) of something, openapi-core generates `InvalidMediaTypeValue` exception:\r\n\r\n\t/peers/all\r\n\tRequest errors: [] Response errors: [InvalidMediaTypeValue('Failed to cast value of [ to SchemaType.OBJECT',)]\r\n\t [FAIL] 1 errors found \r\n\tResponse body: [\r\n\t]\r\n\r\nThis exception generated no matter list is empty or not.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/26", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/26/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/26/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/26", "id": 315454008, "node_id": "MDU6SXNzdWUzMTU0NTQwMDg=", "number": 26, "title": "Bug: list instead of object give fatal AttributeError", "user": {"login": "andyceo", "id": 758910, "node_id": "MDQ6VXNlcjc1ODkxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/758910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andyceo", "html_url": "https://github.com/andyceo", "followers_url": "https://api.github.com/users/andyceo/followers", "following_url": "https://api.github.com/users/andyceo/following{/other_user}", "gists_url": "https://api.github.com/users/andyceo/gists{/gist_id}", "starred_url": "https://api.github.com/users/andyceo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andyceo/subscriptions", "organizations_url": "https://api.github.com/users/andyceo/orgs", "repos_url": "https://api.github.com/users/andyceo/repos", "events_url": "https://api.github.com/users/andyceo/events{/privacy}", "received_events_url": "https://api.github.com/users/andyceo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-18T12:14:48Z", "updated_at": "2018-04-24T10:21:47Z", "closed_at": "2018-04-24T10:21:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nUsing your great lib, I found very annoying bug: validating wrong response (that does not corresponds to the response given in OpenAPI spec) produce fatal AttributeError and script terminates it's work.\r\n\r\n**Expected behaviour**\r\n\r\nLibrary correctly handle wrong responses, give helpful validation error, and continue to work.\r\n\r\n**Steps to reproduce**\r\n\r\n1. Install openapi-core:\r\n\r\n        pip3 install openapi-core\r\n\r\n2. Create and save following script as `listofobjectscheck.py`:\r\n\r\n        #!/usr/bin/env python3\r\n        \r\n        # -*- coding: utf-8 -*-\r\n        import json\r\n        import sys\r\n        import yaml\r\n        from openapi_core import create_spec\r\n        from openapi_core.validators import RequestValidator, ResponseValidator\r\n        from openapi_core.wrappers import MockRequest, MockResponse\r\n        \r\n        \r\n        def validate(openapi_file):\r\n            with open(openapi_file, 'r') as myfile:\r\n                spec_dict = yaml.safe_load(myfile)\r\n                spec = create_spec(spec_dict)\r\n        \r\n                openapi_request = MockRequest('localhost', 'get', '/someobjects')\r\n                validator = RequestValidator(spec)\r\n                result = validator.validate(openapi_request)\r\n                request_errors = result.errors\r\n        \r\n                data = json.dumps([\r\n                    {\r\n                        'someint': 123,\r\n                        'somestr': '123'\r\n                    },\r\n                    {\r\n                        'someint': 345,\r\n                        'somestr': '345'\r\n                    }\r\n                ])\r\n        \r\n                openapi_response = MockResponse(data)\r\n                validator = ResponseValidator(spec)\r\n                result = validator.validate(openapi_request, openapi_response)\r\n                response_errors = result.errors\r\n        \r\n                print('Request errors: {} Response errors: {}'.format(request_errors, response_errors))\r\n        \r\n        \r\n        if __name__ == \"__main__\":\r\n            if len(sys.argv) < 2:\r\n                print(\"Specify path to openapi.yaml file!\")\r\n                exit(1)\r\n            else:\r\n                validate(sys.argv[1])\r\n\r\n3. Create and save following specification as `listofobjectsfail.yaml`, that give us fatal error during validation:\r\n\r\n        openapi: \"3.0.0\"\r\n        \r\n        info:\r\n          version: \"0.1\"\r\n          title: List of objects\r\n          description: Test for list of objects\r\n        \r\n        components:\r\n          schemas:\r\n            SomeObject:\r\n              type: object\r\n              properties:\r\n                someint:\r\n                  description: Some integer\r\n                  type: integer\r\n                  format: int32\r\n                  minimum: 0\r\n                  example: 667\r\n                somestr:\r\n                  description: Some string\r\n                  type: string\r\n        \r\n        paths:\r\n          /someobjects:\r\n            get:\r\n              summary: Get the someobjects list\r\n              operationId: getSomeObjects\r\n              responses:\r\n                '200':\r\n                  description: List of someobjects\r\n                  content:\r\n                    application/json:\r\n                      schema:\r\n                        $ref: '#/components/schemas/SomeObject'\r\n\r\n4. Execute script to validate spec:\r\n\r\n        python3 listofobjectscheck.py listofobjectsfail.yaml\r\n\r\n    This give us fatal error:\r\n\r\n        $ python3 listofobjectscheck.py listofobjectsfail.yaml\r\n\t\tTraceback (most recent call last):\r\n\t\t  File \"listofobjectscheck.py\", line 45, in <module>\r\n\t\t    validate(sys.argv[1])\r\n\t\t  File \"listofobjectscheck.py\", line 34, in validate\r\n\t\t    result = validator.validate(openapi_request, openapi_response)\r\n\t\t  File \"~/.local/lib/python3.5/site-packages/openapi_core/validators.py\", line 201, in validate\r\n\t\t    data = media_type.unmarshal(raw_data)\r\n\t\t  File \"~/.local/lib/python3.5/site-packages/openapi_core/media_types.py\", line 19, in unmarshal\r\n\t\t    return self.schema.unmarshal(value)\r\n\t\t  File \"~/.local/lib/python3.5/site-packages/openapi_core/schemas.py\", line 104, in unmarshal\r\n\t\t    casted = self.cast(value)\r\n\t\t  File \"~/.local/lib/python3.5/site-packages/openapi_core/schemas.py\", line 93, in cast\r\n\t\t    return cast_callable(value)\r\n\t\t  File \"~/.local/lib/python3.5/site-packages/openapi_core/schemas.py\", line 126, in _unmarshal_object\r\n\t\t    value_keys = value.keys()\r\n\t\tAttributeError: 'list' object has no attribute 'keys'\r\n\r\n5. Fix wrong openapi file and save it as `listofobjectsok.yaml`:\r\n\r\n        openapi: \"3.0.0\"\r\n        \r\n        info:\r\n          version: \"0.1\"\r\n          title: List of objects\r\n          description: Test for list of objects\r\n        \r\n        components:\r\n          schemas:\r\n            SomeObject:\r\n              type: object\r\n              properties:\r\n                someint:\r\n                  description: Some integer\r\n                  type: integer\r\n                  format: int32\r\n                  minimum: 0\r\n                  example: 667\r\n                somestr:\r\n                  description: Some string\r\n                  type: string\r\n        \r\n        paths:\r\n          /someobjects:\r\n            get:\r\n              summary: Get the someobjects list\r\n              operationId: getSomeObjects\r\n              responses:\r\n                '200':\r\n                  description: List of someobjects\r\n                  content:\r\n                    application/json:\r\n                      schema:\r\n                        type: array\r\n                        items:\r\n                          $ref: '#/components/schemas/SomeObject'\r\n\r\n6. Sure that now validation works fine:\r\n\r\n        $ python3 listofobjectscheck.py listofobjectsok.yaml \r\n        Request errors: [] Response errors: []\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/23", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/23/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/23/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/23", "id": 313080651, "node_id": "MDU6SXNzdWUzMTMwODA2NTE=", "number": 23, "title": "validate_data Shortcut missing from __init__.py", "user": {"login": "AMcManigal", "id": 1545624, "node_id": "MDQ6VXNlcjE1NDU2MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1545624?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AMcManigal", "html_url": "https://github.com/AMcManigal", "followers_url": "https://api.github.com/users/AMcManigal/followers", "following_url": "https://api.github.com/users/AMcManigal/following{/other_user}", "gists_url": "https://api.github.com/users/AMcManigal/gists{/gist_id}", "starred_url": "https://api.github.com/users/AMcManigal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AMcManigal/subscriptions", "organizations_url": "https://api.github.com/users/AMcManigal/orgs", "repos_url": "https://api.github.com/users/AMcManigal/repos", "events_url": "https://api.github.com/users/AMcManigal/events{/privacy}", "received_events_url": "https://api.github.com/users/AMcManigal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-10T20:38:53Z", "updated_at": "2018-04-24T13:08:07Z", "closed_at": "2018-04-24T13:08:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think that the validate_data shortcut is supposed to be exported but it's not.\r\n\r\nExpected:\r\n__all__ = ['create_spec', 'validate_parameters', 'validate_body', 'validate_data']\r\n\r\nActual:\r\n__all__ = ['create_spec', 'validate_parameters', 'validate_body']", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/21", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/21/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/21/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/21", "id": 311221910, "node_id": "MDU6SXNzdWUzMTEyMjE5MTA=", "number": 21, "title": "Not Allowed to Make Pull Requests", "user": {"login": "AMcManigal", "id": 1545624, "node_id": "MDQ6VXNlcjE1NDU2MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1545624?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AMcManigal", "html_url": "https://github.com/AMcManigal", "followers_url": "https://api.github.com/users/AMcManigal/followers", "following_url": "https://api.github.com/users/AMcManigal/following{/other_user}", "gists_url": "https://api.github.com/users/AMcManigal/gists{/gist_id}", "starred_url": "https://api.github.com/users/AMcManigal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AMcManigal/subscriptions", "organizations_url": "https://api.github.com/users/AMcManigal/orgs", "repos_url": "https://api.github.com/users/AMcManigal/repos", "events_url": "https://api.github.com/users/AMcManigal/events{/privacy}", "received_events_url": "https://api.github.com/users/AMcManigal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-04T13:06:48Z", "updated_at": "2018-04-04T13:38:32Z", "closed_at": "2018-04-04T13:38:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a PR that contains a bugfix, but when I try to push it to a new branch I get a 403.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/19", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/19/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/19/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/19", "id": 310973266, "node_id": "MDU6SXNzdWUzMTA5NzMyNjY=", "number": 19, "title": "Inheritance Not handled Correctly", "user": {"login": "AMcManigal", "id": 1545624, "node_id": "MDQ6VXNlcjE1NDU2MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1545624?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AMcManigal", "html_url": "https://github.com/AMcManigal", "followers_url": "https://api.github.com/users/AMcManigal/followers", "following_url": "https://api.github.com/users/AMcManigal/following{/other_user}", "gists_url": "https://api.github.com/users/AMcManigal/gists{/gist_id}", "starred_url": "https://api.github.com/users/AMcManigal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AMcManigal/subscriptions", "organizations_url": "https://api.github.com/users/AMcManigal/orgs", "repos_url": "https://api.github.com/users/AMcManigal/repos", "events_url": "https://api.github.com/users/AMcManigal/events{/privacy}", "received_events_url": "https://api.github.com/users/AMcManigal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-03T19:49:19Z", "updated_at": "2018-04-04T10:32:51Z", "closed_at": "2018-04-04T10:32:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider the following example schema fragment.\r\n```\r\n{\r\n  \"components\": {\r\n    \"schemas\": {\r\n      \"ErrorModel\": {\r\n        \"type\": \"object\",\r\n        \"required\": [\r\n          \"message\",\r\n          \"code\"\r\n        ],\r\n        \"properties\": {\r\n          \"message\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"code\": {\r\n            \"type\": \"integer\",\r\n            \"minimum\": 100,\r\n            \"maximum\": 600\r\n          }\r\n        }\r\n      },\r\n      \"ExtendedErrorModel\": {\r\n        \"allOf\": [\r\n          {\r\n            \"$ref\": \"#/components/schemas/ErrorModel\"\r\n          },\r\n          {\r\n            \"type\": \"object\",\r\n            \"required\": [\r\n              \"rootCause\"\r\n            ],\r\n            \"properties\": {\r\n              \"rootCause\": {\r\n                \"type\": \"string\"\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nParsing the ExtendedErrorModel will fail. This is because the SchemaFactory will check for a type even though this property is not required when using inheritance.\r\n\r\n```\r\n    def create(self, schema_spec):\r\n        schema_deref = self.dereferencer.dereference(schema_spec)\r\n\r\n        schema_type = schema_deref['type']\r\n       .....\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/p1c2u/openapi-core/issues/17", "repository_url": "https://api.github.com/repos/p1c2u/openapi-core", "labels_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/17/comments", "events_url": "https://api.github.com/repos/p1c2u/openapi-core/issues/17/events", "html_url": "https://github.com/p1c2u/openapi-core/issues/17", "id": 301204804, "node_id": "MDU6SXNzdWUzMDEyMDQ4MDQ=", "number": 17, "title": "werkzeug is not listed as a dependency", "user": {"login": "pbasista", "id": 1535892, "node_id": "MDQ6VXNlcjE1MzU4OTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1535892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pbasista", "html_url": "https://github.com/pbasista", "followers_url": "https://api.github.com/users/pbasista/followers", "following_url": "https://api.github.com/users/pbasista/following{/other_user}", "gists_url": "https://api.github.com/users/pbasista/gists{/gist_id}", "starred_url": "https://api.github.com/users/pbasista/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pbasista/subscriptions", "organizations_url": "https://api.github.com/users/pbasista/orgs", "repos_url": "https://api.github.com/users/pbasista/repos", "events_url": "https://api.github.com/users/pbasista/events{/privacy}", "received_events_url": "https://api.github.com/users/pbasista/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-28T22:17:01Z", "updated_at": "2018-04-25T08:33:11Z", "closed_at": "2018-03-05T16:07:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The `werkzeug` library is not listed as a dependency in:\r\nhttps://github.com/p1c2u/openapi-core/blob/master/requirements.txt\r\nNot sure if it is intentional, but it seems like a mistake.", "performed_via_github_app": null, "score": 1.0}]}