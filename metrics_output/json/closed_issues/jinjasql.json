{"total_count": 17, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/hashedin/jinjasql/issues/31", "repository_url": "https://api.github.com/repos/hashedin/jinjasql", "labels_url": "https://api.github.com/repos/hashedin/jinjasql/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/hashedin/jinjasql/issues/31/comments", "events_url": "https://api.github.com/repos/hashedin/jinjasql/issues/31/events", "html_url": "https://github.com/hashedin/jinjasql/issues/31", "id": 630137879, "node_id": "MDU6SXNzdWU2MzAxMzc4Nzk=", "number": 31, "title": "Infinite loop when passing more than 1000 values for a param", "user": {"login": "Tetradeus", "id": 1665874, "node_id": "MDQ6VXNlcjE2NjU4NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1665874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tetradeus", "html_url": "https://github.com/Tetradeus", "followers_url": "https://api.github.com/users/Tetradeus/followers", "following_url": "https://api.github.com/users/Tetradeus/following{/other_user}", "gists_url": "https://api.github.com/users/Tetradeus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tetradeus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tetradeus/subscriptions", "organizations_url": "https://api.github.com/users/Tetradeus/orgs", "repos_url": "https://api.github.com/users/Tetradeus/repos", "events_url": "https://api.github.com/users/Tetradeus/events{/privacy}", "received_events_url": "https://api.github.com/users/Tetradeus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-03T16:19:24Z", "updated_at": "2020-06-04T01:50:30Z", "closed_at": "2020-06-04T01:50:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nAfter some investigation, I found a thread stuck here : \r\n```\r\nThread 0x00007fec7f9e2700 (most recent call first):\r\n  File \"/usr/local/lib/python3.8/site-packages/jinjasql/core.py\", line 125 in _bind_param\r\n  File \"/usr/local/lib/python3.8/site-packages/jinjasql/core.py\", line 116 in bind_in_clause\r\n  File \"<template>\", line 14 in root\r\n  File \"/usr/local/lib/python3.8/site-packages/jinja2/environment.py\", line 1088 in render\r\n  File \"/usr/local/lib/python3.8/site-packages/jinjasql/core.py\", line 179 in _prepare_query\r\n  File \"/usr/local/lib/python3.8/site-packages/jinjasql/core.py\", line 172 in prepare_query\r\n```\r\nThis happened when we passed more than 1000 values in an 'IN' query. We already fixed that call on our side but instead of a possible infinite loop we expected an error. We are using SQLServer. I also think that in postgresql, the IN query is not limited to 1000 values, so it should normally works.\r\n\r\nThanks for your help.\r\n\r\nTetra", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hashedin/jinjasql/issues/30", "repository_url": "https://api.github.com/repos/hashedin/jinjasql", "labels_url": "https://api.github.com/repos/hashedin/jinjasql/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/hashedin/jinjasql/issues/30/comments", "events_url": "https://api.github.com/repos/hashedin/jinjasql/issues/30/events", "html_url": "https://github.com/hashedin/jinjasql/issues/30", "id": 625443385, "node_id": "MDU6SXNzdWU2MjU0NDMzODU=", "number": 30, "title": "Critical: JinjaSQL fails to bind parameters in case of string concatenation", "user": {"login": "sripathikrishnan", "id": 991744, "node_id": "MDQ6VXNlcjk5MTc0NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/991744?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripathikrishnan", "html_url": "https://github.com/sripathikrishnan", "followers_url": "https://api.github.com/users/sripathikrishnan/followers", "following_url": "https://api.github.com/users/sripathikrishnan/following{/other_user}", "gists_url": "https://api.github.com/users/sripathikrishnan/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripathikrishnan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripathikrishnan/subscriptions", "organizations_url": "https://api.github.com/users/sripathikrishnan/orgs", "repos_url": "https://api.github.com/users/sripathikrishnan/repos", "events_url": "https://api.github.com/users/sripathikrishnan/events{/privacy}", "received_events_url": "https://api.github.com/users/sripathikrishnan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-27T07:17:22Z", "updated_at": "2020-05-27T14:23:01Z", "closed_at": "2020-05-27T14:23:00Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```\r\nfrom jinjasql import JinjaSql\r\nj = JinjaSql()\r\nquery, params = j.prepare_query(\"SELECT {{ '%' ~ tag ~ '%' }}\", {\"tag\": \"sql\"})\r\nprint(query)\r\nprint(params)\r\n\r\n```\r\n\r\nShould print \r\n`SELECT %s`\r\n`['%sql%']`\r\n\r\nInstead, it prints \r\n`SELECT %sql%s`\r\n`['%']`\r\n\r\n## Analysis\r\nJinjaSQL internally rewrites the query to  `SELECT {{ '%' ~ tag ~ '%' | bind('tag')}}`. The bind filter attaches itself only to the last '%', and not to the entire expression.\r\n\r\nTo fix this, JinjaSQL should enclose the entire expression in a pair of parentheses, like this - `SELECT {{ ('%' ~ tag ~ '%') | bind('tag') }}`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hashedin/jinjasql/issues/29", "repository_url": "https://api.github.com/repos/hashedin/jinjasql", "labels_url": "https://api.github.com/repos/hashedin/jinjasql/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/hashedin/jinjasql/issues/29/comments", "events_url": "https://api.github.com/repos/hashedin/jinjasql/issues/29/events", "html_url": "https://github.com/hashedin/jinjasql/issues/29", "id": 625365206, "node_id": "MDU6SXNzdWU2MjUzNjUyMDY=", "number": 29, "title": "Can I use junjasqsl for my (complicated) use case?", "user": {"login": "ghuname", "id": 15207713, "node_id": "MDQ6VXNlcjE1MjA3NzEz", "avatar_url": "https://avatars2.githubusercontent.com/u/15207713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghuname", "html_url": "https://github.com/ghuname", "followers_url": "https://api.github.com/users/ghuname/followers", "following_url": "https://api.github.com/users/ghuname/following{/other_user}", "gists_url": "https://api.github.com/users/ghuname/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghuname/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghuname/subscriptions", "organizations_url": "https://api.github.com/users/ghuname/orgs", "repos_url": "https://api.github.com/users/ghuname/repos", "events_url": "https://api.github.com/users/ghuname/events{/privacy}", "received_events_url": "https://api.github.com/users/ghuname/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 467613722, "node_id": "MDU6TGFiZWw0Njc2MTM3MjI=", "url": "https://api.github.com/repos/hashedin/jinjasql/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-05-27T04:23:41Z", "updated_at": "2020-06-11T20:03:49Z", "closed_at": "2020-06-11T20:03:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI am getting variables from outer world (not under my influence) in the following format:\r\n\r\n```\r\njson = {\r\n  \"scopedVars\": {\r\n    \"VARTEXT\": {\r\n      \"text\": \"sel_val\",\r\n      \"value\": \"sel_val\"\r\n    },\r\n    \"VARTEXT_MV\": {\r\n      \"text\": \"sel_val\",\r\n      \"value\": [\r\n        \"sel_val\"\r\n      ]\r\n    },\r\n    \"VARTEXT_MV_ALL\": {\r\n      \"text\": \"All\",\r\n      \"value\": [\r\n        \"sel_val1\",\r\n        \"sel_val2\",\r\n        \"sel_val3\"\r\n      ]\r\n    },\r\n    \"VARINT\": {\r\n      \"text\": \"48\",\r\n      \"value\": \"48\"\r\n    },\r\n    \"VARINT_MV\": {\r\n      \"text\": \"62 + 55\",\r\n      \"value\": [\r\n        \"62\",\r\n        \"55\"\r\n      ]\r\n    },\r\n    \"VARINT_MV_ALL\": {\r\n      \"text\": \"62 + 55 + 41\",\r\n      \"value\": [\r\n        \"62\",\r\n        \"55\",\r\n        \"41\"\r\n      ]\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\nIn the json above I have variation of received variables:\r\nVARTEXT - single value string variable\r\nVARTEXT_MV - multi value string variable (in this case with a single value selected, list of values from which I can choose doesn't have an \"All\" option)\r\nVARTEXT_MV_ALL - multi value string variable with selected \"All\" option \r\nVARINT - single value integer variable\r\nVARINT_MV - multi value integer variable (several values) with no \"All\" option\r\nVARINT_MV_ALL - multi value integer variable with selected \"All\" option\r\n\r\nIn all cases I have a list from which I can select single value (than I have that value in \"text\" and \"value\" keys), multiple values (than in \"text\" key I have plus sign separated values and in \"value\" i have list of selected values) or multiple values with \"All\" option (that behaves as multiple values except when \"All\" is selected, in that case \"text\" is \"All\" and \"value\" is a list of all options).\r\n\r\nAs I don't have any clue about data types, I have to maintain a separate dictionary like this one:\r\n```\r\ndtypes = {\r\n    'VARTEXT' : 'str',\r\n    'VARINT' : 'int'\r\n}\r\n```\r\n\r\nNow with information above I should create sql queries. I have to use single quote for all string variables. \r\n\r\nFor example:\r\n\r\n1. string variable - single value selected\r\n\r\nselect *\r\nfrom table\r\nwhere string_field = 'sel_val' (or string_variable in  ('sel_val')\r\n\r\n2. string variable - multiple values selected (in this case single value selected from multiple values)\r\n\r\nselect *\r\nfrom table\r\nwhere string_field in  ('sel_val')\r\n\r\n3. string variable - \"All\" selected\r\n\r\nselect *\r\nfrom table (if \"All\" is selected I don't need the condition at all)\r\n\r\n4. integer variable - single value selected\r\n\r\nselect *\r\nfrom table\r\nwhere integer_field = 48 (or integer_variable in  (48), no single quotes here)\r\n\r\n5. integer variable - multiple values selected\r\n\r\nselect *\r\nfrom table\r\nwhere integer_field in (64,55)\r\n\r\n6. integer_variable - \"All\" selected\r\n\r\nselect *\r\nfrom table (no condition)\r\n\r\nI thought, maybe to put single value in the list as well so all \"value\" keys will contain a list.\r\nThan I could use these lists always in sql in() function (and never use =).\r\nI have to decide whether I need to single quote values (string) or not (integer), and finally, if \"All\" option is selected to drop the condition.\r\n\r\nCan I use junjasql for such use case?\r\nIs it feasible, or I should use something else?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hashedin/jinjasql/issues/27", "repository_url": "https://api.github.com/repos/hashedin/jinjasql", "labels_url": "https://api.github.com/repos/hashedin/jinjasql/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/hashedin/jinjasql/issues/27/comments", "events_url": "https://api.github.com/repos/hashedin/jinjasql/issues/27/events", "html_url": "https://github.com/hashedin/jinjasql/issues/27", "id": 575848080, "node_id": "MDU6SXNzdWU1NzU4NDgwODA=", "number": 27, "title": "Best Practice:  an IDE/plugin that will execute jinjasql templated code .", "user": {"login": "avishalom", "id": 4755574, "node_id": "MDQ6VXNlcjQ3NTU1NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4755574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avishalom", "html_url": "https://github.com/avishalom", "followers_url": "https://api.github.com/users/avishalom/followers", "following_url": "https://api.github.com/users/avishalom/following{/other_user}", "gists_url": "https://api.github.com/users/avishalom/gists{/gist_id}", "starred_url": "https://api.github.com/users/avishalom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avishalom/subscriptions", "organizations_url": "https://api.github.com/users/avishalom/orgs", "repos_url": "https://api.github.com/users/avishalom/repos", "events_url": "https://api.github.com/users/avishalom/events{/privacy}", "received_events_url": "https://api.github.com/users/avishalom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-04T22:46:36Z", "updated_at": "2020-04-30T09:40:50Z", "closed_at": "2020-04-30T09:40:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Specifically when developing dbt, can you write queries using this?\r\nor is the only recommended way to wrap it in python? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hashedin/jinjasql/issues/22", "repository_url": "https://api.github.com/repos/hashedin/jinjasql", "labels_url": "https://api.github.com/repos/hashedin/jinjasql/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/hashedin/jinjasql/issues/22/comments", "events_url": "https://api.github.com/repos/hashedin/jinjasql/issues/22/events", "html_url": "https://github.com/hashedin/jinjasql/issues/22", "id": 467676116, "node_id": "MDU6SXNzdWU0Njc2NzYxMTY=", "number": 22, "title": "Sqlite3 execute fails to execute when bind_params is ordered dict type", "user": {"login": "dinosawrusrex", "id": 35418785, "node_id": "MDQ6VXNlcjM1NDE4Nzg1", "avatar_url": "https://avatars1.githubusercontent.com/u/35418785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dinosawrusrex", "html_url": "https://github.com/dinosawrusrex", "followers_url": "https://api.github.com/users/dinosawrusrex/followers", "following_url": "https://api.github.com/users/dinosawrusrex/following{/other_user}", "gists_url": "https://api.github.com/users/dinosawrusrex/gists{/gist_id}", "starred_url": "https://api.github.com/users/dinosawrusrex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dinosawrusrex/subscriptions", "organizations_url": "https://api.github.com/users/dinosawrusrex/orgs", "repos_url": "https://api.github.com/users/dinosawrusrex/repos", "events_url": "https://api.github.com/users/dinosawrusrex/events{/privacy}", "received_events_url": "https://api.github.com/users/dinosawrusrex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-13T05:51:29Z", "updated_at": "2020-05-27T12:10:14Z", "closed_at": "2020-05-27T12:10:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Again, might just be an issue pertaining to sqlite3?\r\n\r\nWhen preparing the query, the bind parameter is type ordered_dict. Executing the query and this bind parameter in sqlite3 raises a `ValueError: parameters are of unsupported type` exception. However, when we turn the bind parameter into a list (`list(bind_parameter)`), sqlite3 will execute the query just fine.\r\n\r\nI wrote a [gist](https://gist.github.com/dinosawrusrex/ab25f9f88f1072a9fcee4524879a7032) to reproduce this bug.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hashedin/jinjasql/issues/21", "repository_url": "https://api.github.com/repos/hashedin/jinjasql", "labels_url": "https://api.github.com/repos/hashedin/jinjasql/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/hashedin/jinjasql/issues/21/comments", "events_url": "https://api.github.com/repos/hashedin/jinjasql/issues/21/events", "html_url": "https://github.com/hashedin/jinjasql/issues/21", "id": 467674947, "node_id": "MDU6SXNzdWU0Njc2NzQ5NDc=", "number": 21, "title": "Default placeholder (*format) not up to date with Python 3's sqlite module", "user": {"login": "dinosawrusrex", "id": 35418785, "node_id": "MDQ6VXNlcjM1NDE4Nzg1", "avatar_url": "https://avatars1.githubusercontent.com/u/35418785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dinosawrusrex", "html_url": "https://github.com/dinosawrusrex", "followers_url": "https://api.github.com/users/dinosawrusrex/followers", "following_url": "https://api.github.com/users/dinosawrusrex/following{/other_user}", "gists_url": "https://api.github.com/users/dinosawrusrex/gists{/gist_id}", "starred_url": "https://api.github.com/users/dinosawrusrex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dinosawrusrex/subscriptions", "organizations_url": "https://api.github.com/users/dinosawrusrex/orgs", "repos_url": "https://api.github.com/users/dinosawrusrex/repos", "events_url": "https://api.github.com/users/dinosawrusrex/events{/privacy}", "received_events_url": "https://api.github.com/users/dinosawrusrex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-13T05:36:33Z", "updated_at": "2020-05-27T12:12:19Z", "closed_at": "2020-05-27T12:12:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just wondering if this is a necessary fix just pertaining to using Jinjasql with sqlite3?\r\n\r\nAccording to [Python 3's Sqlite3 documentation](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute), sqlite3 only accepts two kinds of placeholders when parameterising queries: question mark and named style. Would it be necessary to set the default `param_style` to be `qmark`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hashedin/jinjasql/issues/18", "repository_url": "https://api.github.com/repos/hashedin/jinjasql", "labels_url": "https://api.github.com/repos/hashedin/jinjasql/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/hashedin/jinjasql/issues/18/comments", "events_url": "https://api.github.com/repos/hashedin/jinjasql/issues/18/events", "html_url": "https://github.com/hashedin/jinjasql/issues/18", "id": 380585336, "node_id": "MDU6SXNzdWUzODA1ODUzMzY=", "number": 18, "title": "Sqlsafe doesn't survive template inheritance", "user": {"login": "ngenain", "id": 7217274, "node_id": "MDQ6VXNlcjcyMTcyNzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/7217274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngenain", "html_url": "https://github.com/ngenain", "followers_url": "https://api.github.com/users/ngenain/followers", "following_url": "https://api.github.com/users/ngenain/following{/other_user}", "gists_url": "https://api.github.com/users/ngenain/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngenain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngenain/subscriptions", "organizations_url": "https://api.github.com/users/ngenain/orgs", "repos_url": "https://api.github.com/users/ngenain/repos", "events_url": "https://api.github.com/users/ngenain/events{/privacy}", "received_events_url": "https://api.github.com/users/ngenain/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-14T08:26:22Z", "updated_at": "2020-05-28T00:48:37Z", "closed_at": "2020-05-28T00:48:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am having an issue with template inheritance and sqlsafe: the argument doesn't seem to propagate in the inherited templates. Here is a toy example showing my problem:\r\n.\r\n\u251c\u2500\u2500 templates\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tables.sql\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test.sql\r\n\u2514\u2500\u2500 test.py\r\n\r\nIn tables.sql you have listed all your tables you want to include in other sql files. For instance here's the content of tables.sql\r\n`{% set test_table = 'test' | sqlsafe %}`\r\n\r\nIn test.sql you include tables.sql\r\n\r\n```\r\n{% include 'templates/tables.sql' %}\r\nSELECT * FROM {{ test_table }}\r\n```\r\nAnd in test.py I have the following code:\r\n```\r\nfrom pathlib import Path\r\nfrom jinjasql import JinjaSql\r\nfrom jinja2 import Environment, FileSystemLoader\r\n\r\nrtemplate = Environment(loader=FileSystemLoader(str(Path(__file__).parent)))\r\nj = JinjaSql(param_style='pyformat', env=rtemplate)\r\n\r\nfile_name = str(Path(__file__).parent / 'templates/test.sql')\r\nwith open(file_name, 'r') as f:\r\n    template = f.read()\r\nquery_params = {}\r\nquery, bind_params = j.prepare_query(template, query_params)\r\nprint(query)\r\nprint(bind_params)\r\n```\r\n\r\nThe answer is \r\n``` \r\nSELECT * FROM %(test_table)s \r\nOrderedDict([('test_table', Undefined)])\r\n ```\r\nThe sqlsafe hasn't \"survived\" template inheritance. I also tried putting the sqlsafe parameter in the tables.sql and I got this answer:\r\n\r\n```\r\nSELECT * FROM  \r\nOrderedDict()\r\n```\r\nAm I missing something? \r\n\r\nThank you very much for your help", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hashedin/jinjasql/issues/16", "repository_url": "https://api.github.com/repos/hashedin/jinjasql", "labels_url": "https://api.github.com/repos/hashedin/jinjasql/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/hashedin/jinjasql/issues/16/comments", "events_url": "https://api.github.com/repos/hashedin/jinjasql/issues/16/events", "html_url": "https://github.com/hashedin/jinjasql/issues/16", "id": 338789226, "node_id": "MDU6SXNzdWUzMzg3ODkyMjY=", "number": 16, "title": "Infinite loops with many params", "user": {"login": "benrudolph", "id": 918514, "node_id": "MDQ6VXNlcjkxODUxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/918514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benrudolph", "html_url": "https://github.com/benrudolph", "followers_url": "https://api.github.com/users/benrudolph/followers", "following_url": "https://api.github.com/users/benrudolph/following{/other_user}", "gists_url": "https://api.github.com/users/benrudolph/gists{/gist_id}", "starred_url": "https://api.github.com/users/benrudolph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benrudolph/subscriptions", "organizations_url": "https://api.github.com/users/benrudolph/orgs", "repos_url": "https://api.github.com/users/benrudolph/repos", "events_url": "https://api.github.com/users/benrudolph/events{/privacy}", "received_events_url": "https://api.github.com/users/benrudolph/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-06T03:02:14Z", "updated_at": "2018-07-22T20:36:08Z", "closed_at": "2018-07-22T20:36:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When I attempt to render a template with 500 to 1000 bind_params performance falls off a cliff. Any insights as to where I could look to start trying to find the slow down? Can profile, but figured you might have some insider knowledge", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hashedin/jinjasql/issues/14", "repository_url": "https://api.github.com/repos/hashedin/jinjasql", "labels_url": "https://api.github.com/repos/hashedin/jinjasql/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/hashedin/jinjasql/issues/14/comments", "events_url": "https://api.github.com/repos/hashedin/jinjasql/issues/14/events", "html_url": "https://github.com/hashedin/jinjasql/issues/14", "id": 324064148, "node_id": "MDU6SXNzdWUzMjQwNjQxNDg=", "number": 14, "title": "Support passing JSON as dictionaries", "user": {"login": "Rovanion", "id": 632775, "node_id": "MDQ6VXNlcjYzMjc3NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/632775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rovanion", "html_url": "https://github.com/Rovanion", "followers_url": "https://api.github.com/users/Rovanion/followers", "following_url": "https://api.github.com/users/Rovanion/following{/other_user}", "gists_url": "https://api.github.com/users/Rovanion/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rovanion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rovanion/subscriptions", "organizations_url": "https://api.github.com/users/Rovanion/orgs", "repos_url": "https://api.github.com/users/Rovanion/repos", "events_url": "https://api.github.com/users/Rovanion/events{/privacy}", "received_events_url": "https://api.github.com/users/Rovanion/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-17T15:04:24Z", "updated_at": "2018-07-09T08:11:23Z", "closed_at": "2018-07-09T08:09:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to insert some JSON data into my database through JinjaSQL and Psycopg2. Though I'm getting stopped by JinjaSQL as it has the following check: https://github.com/hashedin/jinjasql/blob/93c9bbceedd45c2439a9b3698e9bddfc5df61958/jinjasql/core.py#L104\r\n\r\nIf we bypass this check and register an adaptor for dictionaries Psycopg2 will gladly eat the dictionary.\r\n\r\n```\r\nfrom psycopg2.extras import Json\r\nregister_adapter(dict, Json)\r\n\r\ncreateAreaTemplate=\"\"\"\r\n  insert into  area_revisions (                                                                 \r\n    area, modified_by, geo_json )                                                               \r\n  values (                                                                                      \r\n    {{ uuid }}, {{ modifiedBy }}, {{ geoJson }} )\r\n\"\"\"\r\n\r\narea = {\r\n    \"uuid\":            uuid4(),\r\n    \"modifiedBy\":      author['uuid'],\r\n    \"project\":         parentProject['uuid'],\r\n    \"geoJson\":         \"\"\r\n}\r\n\r\nquery, params = prepareQuery(createAreaTemplate, area)\r\na = list(params)\r\na[2] = {}\r\ncursor.execute(query, parameters)\r\n```\r\n\r\nWould it be possible to remove the is_dictionary check?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hashedin/jinjasql/issues/13", "repository_url": "https://api.github.com/repos/hashedin/jinjasql", "labels_url": "https://api.github.com/repos/hashedin/jinjasql/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/hashedin/jinjasql/issues/13/comments", "events_url": "https://api.github.com/repos/hashedin/jinjasql/issues/13/events", "html_url": "https://github.com/hashedin/jinjasql/issues/13", "id": 322057281, "node_id": "MDU6SXNzdWUzMjIwNTcyODE=", "number": 13, "title": "Push master to pypi", "user": {"login": "henryrizzi", "id": 20171720, "node_id": "MDQ6VXNlcjIwMTcxNzIw", "avatar_url": "https://avatars3.githubusercontent.com/u/20171720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryrizzi", "html_url": "https://github.com/henryrizzi", "followers_url": "https://api.github.com/users/henryrizzi/followers", "following_url": "https://api.github.com/users/henryrizzi/following{/other_user}", "gists_url": "https://api.github.com/users/henryrizzi/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryrizzi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryrizzi/subscriptions", "organizations_url": "https://api.github.com/users/henryrizzi/orgs", "repos_url": "https://api.github.com/users/henryrizzi/repos", "events_url": "https://api.github.com/users/henryrizzi/events{/privacy}", "received_events_url": "https://api.github.com/users/henryrizzi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-10T19:39:55Z", "updated_at": "2018-05-15T17:04:49Z", "closed_at": "2018-05-15T17:04:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI was just trying to use jinjasql when binding the same parameter twice, which breaks the named prepare query function.\r\nWould you mind making a release v0.1.7 and then pushing that to pypi?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hashedin/jinjasql/issues/12", "repository_url": "https://api.github.com/repos/hashedin/jinjasql", "labels_url": "https://api.github.com/repos/hashedin/jinjasql/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/hashedin/jinjasql/issues/12/comments", "events_url": "https://api.github.com/repos/hashedin/jinjasql/issues/12/events", "html_url": "https://github.com/hashedin/jinjasql/issues/12", "id": 313519228, "node_id": "MDU6SXNzdWUzMTM1MTkyMjg=", "number": 12, "title": "Substituting the same variable multiple times into ", "user": {"login": "notconfusing", "id": 1494283, "node_id": "MDQ6VXNlcjE0OTQyODM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1494283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notconfusing", "html_url": "https://github.com/notconfusing", "followers_url": "https://api.github.com/users/notconfusing/followers", "following_url": "https://api.github.com/users/notconfusing/following{/other_user}", "gists_url": "https://api.github.com/users/notconfusing/gists{/gist_id}", "starred_url": "https://api.github.com/users/notconfusing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notconfusing/subscriptions", "organizations_url": "https://api.github.com/users/notconfusing/orgs", "repos_url": "https://api.github.com/users/notconfusing/repos", "events_url": "https://api.github.com/users/notconfusing/events{/privacy}", "received_events_url": "https://api.github.com/users/notconfusing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-04-11T23:14:13Z", "updated_at": "2020-05-27T12:16:08Z", "closed_at": "2020-05-27T12:16:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given the example query\r\n\r\n```\r\ndrop table if exists {{population_table}};\r\ncreate table {{population_table}} as....;\r\n```\r\n\r\nIf I call: \r\n`query, bind_params = j.prepare_query(templ, params_dict)`\r\nand then\r\n`engine.execute(query, bind_params)`\r\nI get the error that there aren't enough `bind_params` to substitute into `query`. I believe this is because I've included the `{{population_table}}` variable twice in the template.\r\n\r\nHow could I go about fixing this? (It might be true that I should execute those queries separately, but it's also valid to have a case where there are several of the same substitution in one query).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hashedin/jinjasql/issues/10", "repository_url": "https://api.github.com/repos/hashedin/jinjasql", "labels_url": "https://api.github.com/repos/hashedin/jinjasql/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/hashedin/jinjasql/issues/10/comments", "events_url": "https://api.github.com/repos/hashedin/jinjasql/issues/10/events", "html_url": "https://github.com/hashedin/jinjasql/issues/10", "id": 233710046, "node_id": "MDU6SXNzdWUyMzM3MTAwNDY=", "number": 10, "title": "Support for custom filters", "user": {"login": "zdk123", "id": 2637124, "node_id": "MDQ6VXNlcjI2MzcxMjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2637124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdk123", "html_url": "https://github.com/zdk123", "followers_url": "https://api.github.com/users/zdk123/followers", "following_url": "https://api.github.com/users/zdk123/following{/other_user}", "gists_url": "https://api.github.com/users/zdk123/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdk123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdk123/subscriptions", "organizations_url": "https://api.github.com/users/zdk123/orgs", "repos_url": "https://api.github.com/users/zdk123/repos", "events_url": "https://api.github.com/users/zdk123/events{/privacy}", "received_events_url": "https://api.github.com/users/zdk123/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-06-05T21:02:48Z", "updated_at": "2017-06-14T13:31:17Z", "closed_at": "2017-06-14T13:31:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "First, thanks for developing this excellent package. It does nearly everything I need. \r\n\r\nHowever, I would like to create a custom filter. It found it easy enough to write my own bind method and extend the `JinjaSql` class to add the filter in a custom [`_prepare_environment`](https://github.com/hashedin/jinjasql/blob/93c9bbceedd45c2439a9b3698e9bddfc5df61958/jinjasql/core.py#L162-L168) method.\r\n\r\nThe remaining issue is that in the provided `SqlExtension` class, the built-in filters are hard coded as a tuple of strings within the [`filter_stream`](https://github.com/hashedin/jinjasql/blob/93c9bbceedd45c2439a9b3698e9bddfc5df61958/jinjasql/core.py#L72) method. One can extend or re-write `SqlExtension`'s `filter_stream function` anyway ... but this is an ugly hack and not future-proof.\r\n\r\nMy proposal is to provide the filter names as a class attribute and keep only 'bind' hardcoded. I realize that this may create undesired security risk, but clearly this is possible anyway with minimal effort.\r\n\r\nI can provide a pull request and an example use-case if there is any interest in this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hashedin/jinjasql/issues/8", "repository_url": "https://api.github.com/repos/hashedin/jinjasql", "labels_url": "https://api.github.com/repos/hashedin/jinjasql/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/hashedin/jinjasql/issues/8/comments", "events_url": "https://api.github.com/repos/hashedin/jinjasql/issues/8/events", "html_url": "https://github.com/hashedin/jinjasql/issues/8", "id": 212604371, "node_id": "MDU6SXNzdWUyMTI2MDQzNzE=", "number": 8, "title": "use jinjasql without django?", "user": {"login": "dckc", "id": 150986, "node_id": "MDQ6VXNlcjE1MDk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/150986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dckc", "html_url": "https://github.com/dckc", "followers_url": "https://api.github.com/users/dckc/followers", "following_url": "https://api.github.com/users/dckc/following{/other_user}", "gists_url": "https://api.github.com/users/dckc/gists{/gist_id}", "starred_url": "https://api.github.com/users/dckc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dckc/subscriptions", "organizations_url": "https://api.github.com/users/dckc/orgs", "repos_url": "https://api.github.com/users/dckc/repos", "events_url": "https://api.github.com/users/dckc/events{/privacy}", "received_events_url": "https://api.github.com/users/dckc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-08T00:44:16Z", "updated_at": "2017-03-08T06:19:02Z", "closed_at": "2017-03-08T00:48:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was a little surprised to find `django` in `requirements.txt`. So I looked at how it was used. As far as I can tell, it's used only in tests.\r\n\r\nI'd like to be able to use this package without pulling in all of django.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hashedin/jinjasql/issues/7", "repository_url": "https://api.github.com/repos/hashedin/jinjasql", "labels_url": "https://api.github.com/repos/hashedin/jinjasql/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/hashedin/jinjasql/issues/7/comments", "events_url": "https://api.github.com/repos/hashedin/jinjasql/issues/7/events", "html_url": "https://github.com/hashedin/jinjasql/issues/7", "id": 190819146, "node_id": "MDU6SXNzdWUxOTA4MTkxNDY=", "number": 7, "title": "Write tests for param_style = named and pyformat", "user": {"login": "sripathikrishnan", "id": 991744, "node_id": "MDQ6VXNlcjk5MTc0NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/991744?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripathikrishnan", "html_url": "https://github.com/sripathikrishnan", "followers_url": "https://api.github.com/users/sripathikrishnan/followers", "following_url": "https://api.github.com/users/sripathikrishnan/following{/other_user}", "gists_url": "https://api.github.com/users/sripathikrishnan/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripathikrishnan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripathikrishnan/subscriptions", "organizations_url": "https://api.github.com/users/sripathikrishnan/orgs", "repos_url": "https://api.github.com/users/sripathikrishnan/repos", "events_url": "https://api.github.com/users/sripathikrishnan/events{/privacy}", "received_events_url": "https://api.github.com/users/sripathikrishnan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-21T19:55:23Z", "updated_at": "2020-05-27T12:15:04Z", "closed_at": "2020-05-27T12:15:04Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "named and pyformat create random variable names to avoid conflicts. As a result, navie test cases will fail. Need to mock Random() object or seed it so that tests are deterministic. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hashedin/jinjasql/issues/5", "repository_url": "https://api.github.com/repos/hashedin/jinjasql", "labels_url": "https://api.github.com/repos/hashedin/jinjasql/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/hashedin/jinjasql/issues/5/comments", "events_url": "https://api.github.com/repos/hashedin/jinjasql/issues/5/events", "html_url": "https://github.com/hashedin/jinjasql/issues/5", "id": 187392081, "node_id": "MDU6SXNzdWUxODczOTIwODE=", "number": 5, "title": "Support rendering named arguments with %(name)s placeholders", "user": {"login": "jfkw", "id": 12948, "node_id": "MDQ6VXNlcjEyOTQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/12948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfkw", "html_url": "https://github.com/jfkw", "followers_url": "https://api.github.com/users/jfkw/followers", "following_url": "https://api.github.com/users/jfkw/following{/other_user}", "gists_url": "https://api.github.com/users/jfkw/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfkw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfkw/subscriptions", "organizations_url": "https://api.github.com/users/jfkw/orgs", "repos_url": "https://api.github.com/users/jfkw/repos", "events_url": "https://api.github.com/users/jfkw/events{/privacy}", "received_events_url": "https://api.github.com/users/jfkw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-04T17:24:18Z", "updated_at": "2016-11-09T15:37:30Z", "closed_at": "2016-11-09T15:37:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice to have a mode for rendering SQL arguments with %(name)s placeholders, with the names coming from the template and the bind parameters return value as dictionary instead of list.\r\n\r\nhttp://initd.org/psycopg/docs/usage.html#passing-parameters-to-sql-queries\r\n\r\n```\r\nselect username, sum(spend)\r\nfrom transactions\r\nwhere start_date > {{request.start_date}}\r\nand end_date < {{request.end_date}}\r\n{% if request.organization %}\r\nand organization = {{request.organization}}\r\n{% endif %}\r\n```\r\n```\r\nselect username, sum(spend)\r\nfrom transaction\r\nwhere start_date > %(start_date)s\r\nand end_date < %(end_date)s\r\nand organization = %(organization)s\r\n```\r\nIt may be that only some database drivers can use named placeholders. It should be possible to configure this mode as default when instantiating JinjaSQL so templates and subsequent API calls don't need to pass that detail around:\r\n\r\n`JinjaSql(named_placeholders=True)`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hashedin/jinjasql/issues/3", "repository_url": "https://api.github.com/repos/hashedin/jinjasql", "labels_url": "https://api.github.com/repos/hashedin/jinjasql/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/hashedin/jinjasql/issues/3/comments", "events_url": "https://api.github.com/repos/hashedin/jinjasql/issues/3/events", "html_url": "https://github.com/hashedin/jinjasql/issues/3", "id": 187073853, "node_id": "MDU6SXNzdWUxODcwNzM4NTM=", "number": 3, "title": "If parameter name in the query does not match with any key in the parameter value object. Getting this error \"Did you forget to apply '|inclause' to your query?\"", "user": {"login": "swapnil95", "id": 16913146, "node_id": "MDQ6VXNlcjE2OTEzMTQ2", "avatar_url": "https://avatars0.githubusercontent.com/u/16913146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swapnil95", "html_url": "https://github.com/swapnil95", "followers_url": "https://api.github.com/users/swapnil95/followers", "following_url": "https://api.github.com/users/swapnil95/following{/other_user}", "gists_url": "https://api.github.com/users/swapnil95/gists{/gist_id}", "starred_url": "https://api.github.com/users/swapnil95/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swapnil95/subscriptions", "organizations_url": "https://api.github.com/users/swapnil95/orgs", "repos_url": "https://api.github.com/users/swapnil95/repos", "events_url": "https://api.github.com/users/swapnil95/events{/privacy}", "received_events_url": "https://api.github.com/users/swapnil95/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-03T14:23:58Z", "updated_at": "2016-11-22T07:29:58Z", "closed_at": "2016-11-22T07:29:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hashedin/jinjasql/issues/2", "repository_url": "https://api.github.com/repos/hashedin/jinjasql", "labels_url": "https://api.github.com/repos/hashedin/jinjasql/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/hashedin/jinjasql/issues/2/comments", "events_url": "https://api.github.com/repos/hashedin/jinjasql/issues/2/events", "html_url": "https://github.com/hashedin/jinjasql/issues/2", "id": 185101238, "node_id": "MDU6SXNzdWUxODUxMDEyMzg=", "number": 2, "title": "Pip install jinjasql fails.  ", "user": {"login": "devashishsharma2302", "id": 16999995, "node_id": "MDQ6VXNlcjE2OTk5OTk1", "avatar_url": "https://avatars1.githubusercontent.com/u/16999995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devashishsharma2302", "html_url": "https://github.com/devashishsharma2302", "followers_url": "https://api.github.com/users/devashishsharma2302/followers", "following_url": "https://api.github.com/users/devashishsharma2302/following{/other_user}", "gists_url": "https://api.github.com/users/devashishsharma2302/gists{/gist_id}", "starred_url": "https://api.github.com/users/devashishsharma2302/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devashishsharma2302/subscriptions", "organizations_url": "https://api.github.com/users/devashishsharma2302/orgs", "repos_url": "https://api.github.com/users/devashishsharma2302/repos", "events_url": "https://api.github.com/users/devashishsharma2302/events{/privacy}", "received_events_url": "https://api.github.com/users/devashishsharma2302/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-25T12:22:37Z", "updated_at": "2016-10-26T06:03:52Z", "closed_at": "2016-10-26T06:03:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a circular dependency on Jinja2 while importing **version** from jinjasql/**init**.py in setup.py.\nWe need to externalize the version somewhere else.\n", "performed_via_github_app": null, "score": 1.0}]}