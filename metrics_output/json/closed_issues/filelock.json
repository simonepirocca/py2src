{"total_count": 35, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/69", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/69/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/69/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/69", "id": 617264286, "node_id": "MDU6SXNzdWU2MTcyNjQyODY=", "number": 69, "title": "Allow passing in a generator for poll_intervall", "user": {"login": "gaborbernat", "id": 690238, "node_id": "MDQ6VXNlcjY5MDIzOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/690238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaborbernat", "html_url": "https://github.com/gaborbernat", "followers_url": "https://api.github.com/users/gaborbernat/followers", "following_url": "https://api.github.com/users/gaborbernat/following{/other_user}", "gists_url": "https://api.github.com/users/gaborbernat/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaborbernat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaborbernat/subscriptions", "organizations_url": "https://api.github.com/users/gaborbernat/orgs", "repos_url": "https://api.github.com/users/gaborbernat/repos", "events_url": "https://api.github.com/users/gaborbernat/events{/privacy}", "received_events_url": "https://api.github.com/users/gaborbernat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-13T08:47:36Z", "updated_at": "2020-07-12T06:36:27Z", "closed_at": "2020-07-12T06:36:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "This would allow users to pass in exponential backoff generator instead of fixed periods. I can make a PR if you agree to do this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/60", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/60/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/60/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/60", "id": 560923729, "node_id": "MDU6SXNzdWU1NjA5MjM3Mjk=", "number": 60, "title": "Lock acquire blocks indefinitely if directory name in path changes ", "user": {"login": "mcsimps2", "id": 26491362, "node_id": "MDQ6VXNlcjI2NDkxMzYy", "avatar_url": "https://avatars3.githubusercontent.com/u/26491362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcsimps2", "html_url": "https://github.com/mcsimps2", "followers_url": "https://api.github.com/users/mcsimps2/followers", "following_url": "https://api.github.com/users/mcsimps2/following{/other_user}", "gists_url": "https://api.github.com/users/mcsimps2/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcsimps2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcsimps2/subscriptions", "organizations_url": "https://api.github.com/users/mcsimps2/orgs", "repos_url": "https://api.github.com/users/mcsimps2/repos", "events_url": "https://api.github.com/users/mcsimps2/events{/privacy}", "received_events_url": "https://api.github.com/users/mcsimps2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-06T10:38:05Z", "updated_at": "2020-02-06T10:40:21Z", "closed_at": "2020-02-06T10:40:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have an application whose files may change paths when users rename directories.\r\n\r\nFor example, a user may rename `C:\\\\...\\\\Desktop\\\\MyFolder\\\\sensitivefile.txt` to `C:\\\\...\\\\Desktop\\\\AnotherFolder\\\\sensitivefile.txt`\r\n\r\nI've noticed that, at least on Windows, acquiring a file lock in a directory that does not exist (or no longer exists because it was renamed) causes the program to hang indefinitely as it polls infinitely trying to acquire the lock.\r\n\r\n```\r\nfl = FileLock(\"this\\\\path\\\\does\\\\not\\\\exist.lock\")\r\nwith fl:\r\n     print(\"Filelock acquired!\")\r\n# Filelock is never acquired, program blocks indefinitely\r\n```\r\n\r\nThis can be an issue if a race condition occurs where a user changes the directory name at the right time (which has occurred for me).\r\n\r\nInstead of blocking forever, it would be better to throw some sort of error letting the developer know that the path no longer exists, so the lock file can't be created at the specified location.\r\n\r\nOne proposal: The problem is that we ignore `OSError` in the `_acquire` method.  Instead, we should let `FileNotFoundError` propagate as follows:\r\n```\r\n def _acquire(self):\r\n        open_mode = os.O_RDWR | os.O_CREAT | os.O_TRUNC\r\n\r\n        try:\r\n            fd = os.open(self._lock_file, open_mode)\r\n        except FileNotFoundError:\r\n            # Will err if the path to the parent directory does not exist.  If we do not\r\n            # raise this here, the acquire() statement will block indefinitely\r\n            raise\r\n        except OSError:\r\n            pass\r\n        else:\r\n            try:\r\n                msvcrt.locking(fd, msvcrt.LK_NBLCK, 1)\r\n            except (IOError, OSError):\r\n                os.close(fd)\r\n            else:\r\n                self._lock_file_fd = fd\r\n        return None\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/53", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/53/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/53/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/53", "id": 445943626, "node_id": "MDU6SXNzdWU0NDU5NDM2MjY=", "number": 53, "title": "3.0.11 fails to build: No such file or directory: 'LICENSE.rst'", "user": {"login": "yurivict", "id": 271906, "node_id": "MDQ6VXNlcjI3MTkwNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/271906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yurivict", "html_url": "https://github.com/yurivict", "followers_url": "https://api.github.com/users/yurivict/followers", "following_url": "https://api.github.com/users/yurivict/following{/other_user}", "gists_url": "https://api.github.com/users/yurivict/gists{/gist_id}", "starred_url": "https://api.github.com/users/yurivict/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yurivict/subscriptions", "organizations_url": "https://api.github.com/users/yurivict/orgs", "repos_url": "https://api.github.com/users/yurivict/repos", "events_url": "https://api.github.com/users/yurivict/events{/privacy}", "received_events_url": "https://api.github.com/users/yurivict/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-20T06:30:58Z", "updated_at": "2019-05-20T08:00:05Z", "closed_at": "2019-05-20T08:00:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n===>  Configuring for py27-filelock-3.0.11\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"setup.py\", line 42, in <module>\r\n    license_ = open(\"LICENSE.rst\").read()\r\nIOError: [Errno 2] No such file or directory: 'LICENSE.rst'\r\n*** Error code 1\r\n```\r\n\r\nFreeBSD, python-27, tarball from the PyPI site.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/52", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/52/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/52/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/52", "id": 445737446, "node_id": "MDU6SXNzdWU0NDU3Mzc0NDY=", "number": 52, "title": "pip fails to install filelock 3.0.11 on python2.7", "user": {"login": "cas--", "id": 606038, "node_id": "MDQ6VXNlcjYwNjAzOA==", "avatar_url": "https://avatars0.githubusercontent.com/u/606038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cas--", "html_url": "https://github.com/cas--", "followers_url": "https://api.github.com/users/cas--/followers", "following_url": "https://api.github.com/users/cas--/following{/other_user}", "gists_url": "https://api.github.com/users/cas--/gists{/gist_id}", "starred_url": "https://api.github.com/users/cas--/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cas--/subscriptions", "organizations_url": "https://api.github.com/users/cas--/orgs", "repos_url": "https://api.github.com/users/cas--/repos", "events_url": "https://api.github.com/users/cas--/events{/privacy}", "received_events_url": "https://api.github.com/users/cas--/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-18T17:36:06Z", "updated_at": "2019-05-18T22:06:28Z", "closed_at": "2019-05-18T22:06:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Latest update breaks pip install on python2.7 and breaks installing `tox` for testing so rather a critical issue!\r\n\r\n```\r\nCollecting filelock<4,>=3.0.0 (from tox)\r\n  Downloading https://files.pythonhosted.org/packages/ce/e1/7d404a13ed831b178a5af635c8b4923fcdff269925cb5839949edf11bd19/filelock-3.0.11.tar.gz\r\n    Complete output from command python setup.py egg_info:\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/tmp/pip-install-CYvThf/filelock/setup.py\", line 42, in <module>\r\n        license_ = open(\"LICENSE.rst\").read()\r\n    IOError: [Errno 2] No such file or directory: 'LICENSE.rst'\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/51", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/51/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/51/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/51", "id": 445070076, "node_id": "MDU6SXNzdWU0NDUwNzAwNzY=", "number": 51, "title": "Python 3 Status should be noted", "user": {"login": "tjstub", "id": 34695980, "node_id": "MDQ6VXNlcjM0Njk1OTgw", "avatar_url": "https://avatars0.githubusercontent.com/u/34695980?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tjstub", "html_url": "https://github.com/tjstub", "followers_url": "https://api.github.com/users/tjstub/followers", "following_url": "https://api.github.com/users/tjstub/following{/other_user}", "gists_url": "https://api.github.com/users/tjstub/gists{/gist_id}", "starred_url": "https://api.github.com/users/tjstub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tjstub/subscriptions", "organizations_url": "https://api.github.com/users/tjstub/orgs", "repos_url": "https://api.github.com/users/tjstub/repos", "events_url": "https://api.github.com/users/tjstub/events{/privacy}", "received_events_url": "https://api.github.com/users/tjstub/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-16T17:16:21Z", "updated_at": "2019-05-18T16:46:51Z", "closed_at": "2019-05-18T16:46:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "On [Python 3 Readiness](http://py3readiness.org/), filelock shows up as not supporting Python 3, even though the examples are written in Python 3. Python 3 Readiness uses caniusepython3, so it is possible some people might be erroneously holding up their updates waiting for Filelock to show as ready.\r\n\r\nPy-filelock should publish its Python 3 status.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/50", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/50/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/50/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/50", "id": 424783890, "node_id": "MDU6SXNzdWU0MjQ3ODM4OTA=", "number": 50, "title": "the latest code in master was not released", "user": {"login": "singuliere", "id": 35190819, "node_id": "MDQ6VXNlcjM1MTkwODE5", "avatar_url": "https://avatars0.githubusercontent.com/u/35190819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/singuliere", "html_url": "https://github.com/singuliere", "followers_url": "https://api.github.com/users/singuliere/followers", "following_url": "https://api.github.com/users/singuliere/following{/other_user}", "gists_url": "https://api.github.com/users/singuliere/gists{/gist_id}", "starred_url": "https://api.github.com/users/singuliere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/singuliere/subscriptions", "organizations_url": "https://api.github.com/users/singuliere/orgs", "repos_url": "https://api.github.com/users/singuliere/repos", "events_url": "https://api.github.com/users/singuliere/events{/privacy}", "received_events_url": "https://api.github.com/users/singuliere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-25T08:49:09Z", "updated_at": "2019-05-19T16:49:21Z", "closed_at": "2019-05-18T16:48:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible to publish a release and push it it to pypi? I'm mostly interested in the recently added trove classifiers :-)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/49", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/49/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/49/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/49", "id": 410813018, "node_id": "MDU6SXNzdWU0MTA4MTMwMTg=", "number": 49, "title": "document seems to have error with respect to timeout", "user": {"login": "AnkurTank", "id": 6630366, "node_id": "MDQ6VXNlcjY2MzAzNjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/6630366?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AnkurTank", "html_url": "https://github.com/AnkurTank", "followers_url": "https://api.github.com/users/AnkurTank/followers", "following_url": "https://api.github.com/users/AnkurTank/following{/other_user}", "gists_url": "https://api.github.com/users/AnkurTank/gists{/gist_id}", "starred_url": "https://api.github.com/users/AnkurTank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AnkurTank/subscriptions", "organizations_url": "https://api.github.com/users/AnkurTank/orgs", "repos_url": "https://api.github.com/users/AnkurTank/repos", "events_url": "https://api.github.com/users/AnkurTank/events{/privacy}", "received_events_url": "https://api.github.com/users/AnkurTank/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-15T15:14:19Z", "updated_at": "2019-03-25T00:51:28Z", "closed_at": "2019-03-25T00:51:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "py-filelock documentation has following information.\r\n`timeout (float) \u2013 The maximum time waited for the file lock. If timeout <= 0, there is no timeout and this method will block until the lock could be acquired. If timeout is None, the default timeout is used.`\r\n\r\nHowever in actual code when `timeout = 0`  filelock doesn't wait and raises Timeout exception if lock is acquired by someone else, which seems right but doesn't match with documentation.\r\n\r\nSo documentation should say following.\r\n`timeout (float) \u2013 The maximum time waited for the file lock. If timeout < 0, there is no timeout and this method will block until the lock could be acquired. If timeout is None, the default timeout is used.`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/48", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/48/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/48/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/48", "id": 402019580, "node_id": "MDU6SXNzdWU0MDIwMTk1ODA=", "number": 48, "title": "test.py is missing from pypi tarball", "user": {"login": "dimon222", "id": 2671025, "node_id": "MDQ6VXNlcjI2NzEwMjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/2671025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dimon222", "html_url": "https://github.com/dimon222", "followers_url": "https://api.github.com/users/dimon222/followers", "following_url": "https://api.github.com/users/dimon222/following{/other_user}", "gists_url": "https://api.github.com/users/dimon222/gists{/gist_id}", "starred_url": "https://api.github.com/users/dimon222/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dimon222/subscriptions", "organizations_url": "https://api.github.com/users/dimon222/orgs", "repos_url": "https://api.github.com/users/dimon222/repos", "events_url": "https://api.github.com/users/dimon222/events{/privacy}", "received_events_url": "https://api.github.com/users/dimon222/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-23T00:47:59Z", "updated_at": "2019-05-18T16:50:01Z", "closed_at": "2019-05-18T16:50:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "... hence not able to run tests if using pypi tarball.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/43", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/43/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/43/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/43", "id": 381990264, "node_id": "MDU6SXNzdWUzODE5OTAyNjQ=", "number": 43, "title": "test_del hangs when running tests on pypy", "user": {"login": "mgorny", "id": 110765, "node_id": "MDQ6VXNlcjExMDc2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/110765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgorny", "html_url": "https://github.com/mgorny", "followers_url": "https://api.github.com/users/mgorny/followers", "following_url": "https://api.github.com/users/mgorny/following{/other_user}", "gists_url": "https://api.github.com/users/mgorny/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgorny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgorny/subscriptions", "organizations_url": "https://api.github.com/users/mgorny/orgs", "repos_url": "https://api.github.com/users/mgorny/repos", "events_url": "https://api.github.com/users/mgorny/events{/privacy}", "received_events_url": "https://api.github.com/users/mgorny/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-18T19:12:28Z", "updated_at": "2019-03-25T00:20:22Z", "closed_at": "2019-03-25T00:20:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Both cases of `test_del` hang indefinitely on PyPy. This is probably due to the differences of how PyPy does (not) perform GC.\r\n\r\nHere's a traceback from pytest after adding a timeout:\r\n```\r\n$ pytest -v --timeout=15 test.py\r\n=============================================================== test session starts ===============================================================\r\nplatform linux2 -- Python 2.7.13[pypy-6.0.0-final], pytest-3.8.2, py-1.5.4, pluggy-0.7.1 -- /usr/bin/pypy\r\ncachedir: .pytest_cache\r\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/tmp/py-filelock/.hypothesis/examples')\r\nrootdir: /tmp/py-filelock, inifile:\r\nplugins: virtualenv-1.2.11, timeout-1.2.1, shutil-1.2.11, mock-1.10.0, hypothesis-3.74.3, backports.unittest-mock-1.4\r\ntimeout: 15.0s method: signal\r\ncollected 23 items                                                                                                                                \r\n\r\ntest.py::FileLockTest::test_context PASSED                                                                                                  [  4%]\r\ntest.py::FileLockTest::test_context1 PASSED                                                                                                 [  8%]\r\ntest.py::FileLockTest::test_default_timeout PASSED                                                                                          [ 13%]\r\ntest.py::FileLockTest::test_del FAILED                                                                                                      [ 17%]\r\ntest.py::FileLockTest::test_nested PASSED                                                                                                   [ 21%]\r\ntest.py::FileLockTest::test_nested1 PASSED                                                                                                  [ 26%]\r\ntest.py::FileLockTest::test_nested_forced_release PASSED                                                                                    [ 30%]\r\ntest.py::FileLockTest::test_simple PASSED                                                                                                   [ 34%]\r\ntest.py::FileLockTest::test_threaded PASSED                                                                                                 [ 39%]\r\ntest.py::FileLockTest::test_threaded1 PASSED                                                                                                [ 43%]\r\ntest.py::FileLockTest::test_timeout PASSED                                                                                                  [ 47%]\r\ntest.py::SoftFileLockTest::test_cleanup PASSED                                                                                              [ 52%]\r\ntest.py::SoftFileLockTest::test_context PASSED                                                                                              [ 56%]\r\ntest.py::SoftFileLockTest::test_context1 PASSED                                                                                             [ 60%]\r\ntest.py::SoftFileLockTest::test_default_timeout PASSED                                                                                      [ 65%]\r\ntest.py::SoftFileLockTest::test_del FAILED                                                                                                  [ 69%]\r\ntest.py::SoftFileLockTest::test_nested PASSED                                                                                               [ 73%]\r\ntest.py::SoftFileLockTest::test_nested1 PASSED                                                                                              [ 78%]\r\ntest.py::SoftFileLockTest::test_nested_forced_release PASSED                                                                                [ 82%]\r\ntest.py::SoftFileLockTest::test_simple PASSED                                                                                               [ 86%]\r\ntest.py::SoftFileLockTest::test_threaded PASSED                                                                                             [ 91%]\r\ntest.py::SoftFileLockTest::test_threaded1 PASSED                                                                                            [ 95%]\r\ntest.py::SoftFileLockTest::test_timeout PASSED                                                                                              [100%]\r\n\r\n==================================================================== FAILURES =====================================================================\r\n______________________________________________________________ FileLockTest.test_del ______________________________________________________________\r\n\r\nself = <test.FileLockTest testMethod=test_del>\r\n\r\n    def test_del(self):\r\n        \"\"\"\r\n            Tests, if the lock is released, when the object is deleted.\r\n            \"\"\"\r\n        lock1 = self.LOCK_TYPE(self.LOCK_PATH)\r\n        lock2 = self.LOCK_TYPE(self.LOCK_PATH)\r\n    \r\n        # Acquire lock 1.\r\n        lock1.acquire()\r\n        self.assertTrue(lock1.is_locked)\r\n        self.assertFalse(lock2.is_locked)\r\n    \r\n        # Try to acquire lock 2.\r\n        self.assertRaises(filelock.Timeout, lock2.acquire, timeout = 1) # FIXME (SoftFileLock)\r\n    \r\n        # Delete lock 1 and try to acquire lock 2 again.\r\n        del lock1\r\n    \r\n>       lock2.acquire()\r\n\r\ntest.py:355: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <filelock.UnixFileLock object at 0x000055eb24d21328>, timeout = -1.0, poll_intervall = 0.05\r\n\r\n    def acquire(self, timeout=None, poll_intervall=0.05):\r\n        \"\"\"\r\n            Acquires the file lock or fails with a :exc:`Timeout` error.\r\n    \r\n            .. code-block:: python\r\n    \r\n                # You can use this method in the context manager (recommended)\r\n                with lock.acquire():\r\n                    pass\r\n    \r\n                # Or use an equivalent try-finally construct:\r\n                lock.acquire()\r\n                try:\r\n                    pass\r\n                finally:\r\n                    lock.release()\r\n    \r\n            :arg float timeout:\r\n                The maximum time waited for the file lock.\r\n                If ``timeout <= 0``, there is no timeout and this method will\r\n                block until the lock could be acquired.\r\n                If ``timeout`` is None, the default :attr:`~timeout` is used.\r\n    \r\n            :arg float poll_intervall:\r\n                We check once in *poll_intervall* seconds if we can acquire the\r\n                file lock.\r\n    \r\n            :raises Timeout:\r\n                if the lock could not be acquired in *timeout* seconds.\r\n    \r\n            .. versionchanged:: 2.0.0\r\n    \r\n                This method returns now a *proxy* object instead of *self*,\r\n                so that it can be used in a with statement without side effects.\r\n            \"\"\"\r\n        # Use the default timeout, if no timeout is provided.\r\n        if timeout is None:\r\n            timeout = self.timeout\r\n    \r\n        # Increment the number right at the beginning.\r\n        # We can still undo it, if something fails.\r\n        with self._thread_lock:\r\n            self._lock_counter += 1\r\n    \r\n        lock_id = id(self)\r\n        lock_filename = self._lock_file\r\n        start_time = time.time()\r\n        try:\r\n            while True:\r\n                with self._thread_lock:\r\n                    if not self.is_locked:\r\n                        logger().debug('Attempting to acquire lock %s on %s', lock_id, lock_filename)\r\n                        self._acquire()\r\n    \r\n                if self.is_locked:\r\n                    logger().info('Lock %s acquired on %s', lock_id, lock_filename)\r\n                    break\r\n                elif timeout >= 0 and time.time() - start_time > timeout:\r\n                    logger().debug('Timeout on acquiring lock %s on %s', lock_id, lock_filename)\r\n                    raise Timeout(self._lock_file)\r\n                else:\r\n                    logger().debug(\r\n                        'Lock %s not acquired on %s, waiting %s seconds ...',\r\n                        lock_id, lock_filename, poll_intervall\r\n                    )\r\n>                   time.sleep(poll_intervall)\r\nE                   Failed: Timeout >15.0s\r\n\r\nfilelock.py:284: Failed\r\n____________________________________________________________ SoftFileLockTest.test_del ____________________________________________________________\r\n\r\nself = <test.SoftFileLockTest testMethod=test_del>\r\n\r\n    def test_del(self):\r\n        \"\"\"\r\n            Tests, if the lock is released, when the object is deleted.\r\n            \"\"\"\r\n        lock1 = self.LOCK_TYPE(self.LOCK_PATH)\r\n        lock2 = self.LOCK_TYPE(self.LOCK_PATH)\r\n    \r\n        # Acquire lock 1.\r\n        lock1.acquire()\r\n        self.assertTrue(lock1.is_locked)\r\n        self.assertFalse(lock2.is_locked)\r\n    \r\n        # Try to acquire lock 2.\r\n        self.assertRaises(filelock.Timeout, lock2.acquire, timeout = 1) # FIXME (SoftFileLock)\r\n    \r\n        # Delete lock 1 and try to acquire lock 2 again.\r\n        del lock1\r\n    \r\n>       lock2.acquire()\r\n\r\ntest.py:355: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <filelock.SoftFileLock object at 0x00007fb06012fbb0>, timeout = -1.0, poll_intervall = 0.05\r\n\r\n    def acquire(self, timeout=None, poll_intervall=0.05):\r\n        \"\"\"\r\n            Acquires the file lock or fails with a :exc:`Timeout` error.\r\n    \r\n            .. code-block:: python\r\n    \r\n                # You can use this method in the context manager (recommended)\r\n                with lock.acquire():\r\n                    pass\r\n    \r\n                # Or use an equivalent try-finally construct:\r\n                lock.acquire()\r\n                try:\r\n                    pass\r\n                finally:\r\n                    lock.release()\r\n    \r\n            :arg float timeout:\r\n                The maximum time waited for the file lock.\r\n                If ``timeout <= 0``, there is no timeout and this method will\r\n                block until the lock could be acquired.\r\n                If ``timeout`` is None, the default :attr:`~timeout` is used.\r\n    \r\n            :arg float poll_intervall:\r\n                We check once in *poll_intervall* seconds if we can acquire the\r\n                file lock.\r\n    \r\n            :raises Timeout:\r\n                if the lock could not be acquired in *timeout* seconds.\r\n    \r\n            .. versionchanged:: 2.0.0\r\n    \r\n                This method returns now a *proxy* object instead of *self*,\r\n                so that it can be used in a with statement without side effects.\r\n            \"\"\"\r\n        # Use the default timeout, if no timeout is provided.\r\n        if timeout is None:\r\n            timeout = self.timeout\r\n    \r\n        # Increment the number right at the beginning.\r\n        # We can still undo it, if something fails.\r\n        with self._thread_lock:\r\n            self._lock_counter += 1\r\n    \r\n        lock_id = id(self)\r\n        lock_filename = self._lock_file\r\n        start_time = time.time()\r\n        try:\r\n            while True:\r\n                with self._thread_lock:\r\n                    if not self.is_locked:\r\n                        logger().debug('Attempting to acquire lock %s on %s', lock_id, lock_filename)\r\n                        self._acquire()\r\n    \r\n                if self.is_locked:\r\n                    logger().info('Lock %s acquired on %s', lock_id, lock_filename)\r\n                    break\r\n                elif timeout >= 0 and time.time() - start_time > timeout:\r\n                    logger().debug('Timeout on acquiring lock %s on %s', lock_id, lock_filename)\r\n                    raise Timeout(self._lock_file)\r\n                else:\r\n                    logger().debug(\r\n                        'Lock %s not acquired on %s, waiting %s seconds ...',\r\n                        lock_id, lock_filename, poll_intervall\r\n                    )\r\n>                   time.sleep(poll_intervall)\r\nE                   Failed: Timeout >15.0s\r\n\r\nfilelock.py:284: Failed\r\n====================================================== 2 failed, 21 passed in 38.50 seconds =======================================================\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/41", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/41/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/41/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/41", "id": 367933549, "node_id": "MDU6SXNzdWUzNjc5MzM1NDk=", "number": 41, "title": "Missing git tags for releases", "user": {"login": "felixonmars", "id": 1006477, "node_id": "MDQ6VXNlcjEwMDY0Nzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1006477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felixonmars", "html_url": "https://github.com/felixonmars", "followers_url": "https://api.github.com/users/felixonmars/followers", "following_url": "https://api.github.com/users/felixonmars/following{/other_user}", "gists_url": "https://api.github.com/users/felixonmars/gists{/gist_id}", "starred_url": "https://api.github.com/users/felixonmars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felixonmars/subscriptions", "organizations_url": "https://api.github.com/users/felixonmars/orgs", "repos_url": "https://api.github.com/users/felixonmars/repos", "events_url": "https://api.github.com/users/felixonmars/events{/privacy}", "received_events_url": "https://api.github.com/users/felixonmars/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-08T20:04:07Z", "updated_at": "2018-11-01T17:25:29Z", "closed_at": "2018-11-01T17:25:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice to keep PyPI releases and git tags in sync :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/40", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/40/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/40/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/40", "id": 367730744, "node_id": "MDU6SXNzdWUzNjc3MzA3NDQ=", "number": 40, "title": "release wheel files", "user": {"login": "gaborbernat", "id": 690238, "node_id": "MDQ6VXNlcjY5MDIzOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/690238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaborbernat", "html_url": "https://github.com/gaborbernat", "followers_url": "https://api.github.com/users/gaborbernat/followers", "following_url": "https://api.github.com/users/gaborbernat/following{/other_user}", "gists_url": "https://api.github.com/users/gaborbernat/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaborbernat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaborbernat/subscriptions", "organizations_url": "https://api.github.com/users/gaborbernat/orgs", "repos_url": "https://api.github.com/users/gaborbernat/repos", "events_url": "https://api.github.com/users/gaborbernat/events{/privacy}", "received_events_url": "https://api.github.com/users/gaborbernat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-08T10:39:34Z", "updated_at": "2019-03-25T10:11:06Z", "closed_at": "2019-03-25T01:15:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible to release wheel files for pypy too alongside the source distribution? Or alternatively, consider adding a ``pyproject.toml`` specifying build requirements :+1: ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/37", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/37/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/37/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/37", "id": 358243547, "node_id": "MDU6SXNzdWUzNTgyNDM1NDc=", "number": 37, "title": "Memory leak", "user": {"login": "raulcota", "id": 3325676, "node_id": "MDQ6VXNlcjMzMjU2NzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/3325676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raulcota", "html_url": "https://github.com/raulcota", "followers_url": "https://api.github.com/users/raulcota/followers", "following_url": "https://api.github.com/users/raulcota/following{/other_user}", "gists_url": "https://api.github.com/users/raulcota/gists{/gist_id}", "starred_url": "https://api.github.com/users/raulcota/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raulcota/subscriptions", "organizations_url": "https://api.github.com/users/raulcota/orgs", "repos_url": "https://api.github.com/users/raulcota/repos", "events_url": "https://api.github.com/users/raulcota/events{/privacy}", "received_events_url": "https://api.github.com/users/raulcota/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-07T23:54:33Z", "updated_at": "2018-09-09T09:45:54Z", "closed_at": "2018-09-09T03:45:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "The acquire function defines \r\nclass ReturnProxy(object):\r\ninside its function. \r\nThis results in an obscure circular reference on the class (at least in Python 2) and memory is leaked. What leaks is the class (not the instance of the class) . \r\n\r\nI noticed because when we run our test suite we enable gc debug . To reproduce you can do the code below. It will render the object being leaked. If you want to prove memory is indeed being leaked, just change the if 0 for if 1 and see your RAM shoot up.\r\n\r\nFor now I worked around it myself by taking the class out of the function.\r\n\r\n```python\r\nfrom filelock import FileLock\r\n\r\nimport os\r\nimport gc\r\n\r\ngc.enable(  )\r\ngc.set_debug(gc.DEBUG_LEAK)\r\n\r\nclass Blah(object):\r\n    \"\"\"Reproduce leak outside of filelock\"\"\"\r\n    def something(self):\r\n        \r\n        class Inner(object):\r\n            a = range(1000000) #Make it a big class\r\n            pass\r\n        \r\n        return None\r\n    \r\ndef test():\r\n    if 0:\r\n        #If you want to drive your process out of memory, run \r\n        #this simple test (look at Task Manager in windows RAM consumption shoot up)\r\n        for i in range(100000):\r\n            \r\n            #If it does not leak, then c\r\n            #will be destroyed and cleared from memory\r\n            c = Blah()\r\n            c.something()\r\n            \r\n        \r\n    if 1:\r\n        lockPath = r'C:\\temp\\temp.txt.lock'\r\n        lock = FileLock(lockPath)\r\n        ret = lock.acquire()\r\n        print 'hola'\r\n        lock.release()\r\n        #ret.lock = None\r\n        #with lock:\r\n        #    print 'hola'\r\n    \r\n    \r\n    \r\ntest()\r\n\r\ngc.collect()\r\n\r\nprint \"\\nGARBAGE OBJECTS:\"\r\ncnt = 0\r\nfor x in gc.garbage:\r\n    \r\n    cnt += 1\r\n    if cnt > 1000:\r\n        print \"Still more garbage. Quitting ...\"\r\n        break\r\n    try:\r\n        s = str(x)\r\n    except:\r\n        s = 'ERROR TO STRING'\r\n    print type(x),\r\n    if len(s) > 120: s = s[:117]+'...'\r\n    \r\n    \r\n    print 'o=\"%s\"' % s\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/34", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/34/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/34/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/34", "id": 343428006, "node_id": "MDU6SXNzdWUzNDM0MjgwMDY=", "number": 34, "title": "Question", "user": {"login": "berkowitze", "id": 10499901, "node_id": "MDQ6VXNlcjEwNDk5OTAx", "avatar_url": "https://avatars2.githubusercontent.com/u/10499901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/berkowitze", "html_url": "https://github.com/berkowitze", "followers_url": "https://api.github.com/users/berkowitze/followers", "following_url": "https://api.github.com/users/berkowitze/following{/other_user}", "gists_url": "https://api.github.com/users/berkowitze/gists{/gist_id}", "starred_url": "https://api.github.com/users/berkowitze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/berkowitze/subscriptions", "organizations_url": "https://api.github.com/users/berkowitze/orgs", "repos_url": "https://api.github.com/users/berkowitze/repos", "events_url": "https://api.github.com/users/berkowitze/events{/privacy}", "received_events_url": "https://api.github.com/users/berkowitze/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-22T18:31:07Z", "updated_at": "2018-08-07T16:58:37Z", "closed_at": "2018-08-07T16:58:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm writing a program with a lot of file reading/writing, so I'm trying to make the code more manageable.\r\n\r\nI'd like a function like this:\r\n```python\r\ndef locked_open(filename, mode='r'):\r\n    lock = FileLock(filename)\r\n    with lock:\r\n        <not sure what to put here, return open(filename, mode) doesn't work>\r\n\r\n....\r\n\r\nwith locked_open(filename, mode):\r\n    <do stuff>\r\n```\r\n\r\nCan you think of a way to do this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/33", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/33/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/33/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/33", "id": 334543509, "node_id": "MDU6SXNzdWUzMzQ1NDM1MDk=", "number": 33, "title": "Locks across machines", "user": {"login": "mzakharocsc", "id": 12261637, "node_id": "MDQ6VXNlcjEyMjYxNjM3", "avatar_url": "https://avatars3.githubusercontent.com/u/12261637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzakharocsc", "html_url": "https://github.com/mzakharocsc", "followers_url": "https://api.github.com/users/mzakharocsc/followers", "following_url": "https://api.github.com/users/mzakharocsc/following{/other_user}", "gists_url": "https://api.github.com/users/mzakharocsc/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzakharocsc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzakharocsc/subscriptions", "organizations_url": "https://api.github.com/users/mzakharocsc/orgs", "repos_url": "https://api.github.com/users/mzakharocsc/repos", "events_url": "https://api.github.com/users/mzakharocsc/events{/privacy}", "received_events_url": "https://api.github.com/users/mzakharocsc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-21T15:23:17Z", "updated_at": "2018-08-22T19:23:28Z", "closed_at": "2018-08-22T19:23:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I am trying to implement locking across machines. However,  SoftFileLock can deadlock sometimes if process ends abruptly. Are there any other solutions that can ensure that deadlocks do not occur?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/31", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/31/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/31/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/31", "id": 290562355, "node_id": "MDU6SXNzdWUyOTA1NjIzNTU=", "number": 31, "title": "Random assertions failing in test.py ", "user": {"login": "satta", "id": 27732, "node_id": "MDQ6VXNlcjI3NzMy", "avatar_url": "https://avatars1.githubusercontent.com/u/27732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/satta", "html_url": "https://github.com/satta", "followers_url": "https://api.github.com/users/satta/followers", "following_url": "https://api.github.com/users/satta/following{/other_user}", "gists_url": "https://api.github.com/users/satta/gists{/gist_id}", "starred_url": "https://api.github.com/users/satta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/satta/subscriptions", "organizations_url": "https://api.github.com/users/satta/orgs", "repos_url": "https://api.github.com/users/satta/repos", "events_url": "https://api.github.com/users/satta/events{/privacy}", "received_events_url": "https://api.github.com/users/satta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-22T18:09:18Z", "updated_at": "2018-01-29T23:08:29Z", "closed_at": "2018-01-29T23:08:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm maintaining py-filelock for Debian (https://packages.qa.debian.org/p/python-filelock.html). We are running`test.py` in a clean chroot during the package build to verify that all tests pass in the version to be packaged. However, we recently noticed that current versions of the library fail their `test.py` runs with random assertions being hit:\r\n\r\n```\r\nPYTHONPATH=. python2 /build/python-filelock-3.0.0/debian/test.py\r\n.........FF..F........\r\n======================================================================\r\nFAIL: test_threaded1 (__main__.FileLockTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/build/python-filelock-3.0.0/debian/test.py\", line 233, in test_threaded1\r\n    threads1[i].join()\r\n  File \"/build/python-filelock-3.0.0/debian/test.py\", line 66, in join\r\n    raise (wrapper_ex.__class__, wrapper_ex, self.ex[2])\r\nAssertionError\r\n\r\n======================================================================\r\nFAIL: test_timeout (__main__.FileLockTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/build/python-filelock-3.0.0/debian/test.py\", line 253, in test_timeout\r\n    self.assertRaises(filelock.Timeout, lock2.acquire, timeout=1)\r\nAssertionError: Timeout not raised\r\n\r\n======================================================================\r\nFAIL: test_default_timeout (__main__.SoftFileLockTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/build/python-filelock-3.0.0/debian/test.py\", line 278, in test_default_timeout\r\n    self.assertRaises(filelock.Timeout, lock2.acquire)\r\nAssertionError: Timeout not raised\r\n\r\n----------------------------------------------------------------------\r\nRan 22 tests in 6.045s\r\n```\r\n\r\nPatching the source to revert cb1d83d6cb18cc60fb6249fa59e2b47631161244 seems to reliably fix the issue but I'm not sure stray lock files are left lying around. Any comments?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/30", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/30/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/30/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/30", "id": 287144159, "node_id": "MDU6SXNzdWUyODcxNDQxNTk=", "number": 30, "title": "Cross process locking", "user": {"login": "antspy", "id": 625297, "node_id": "MDQ6VXNlcjYyNTI5Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/625297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antspy", "html_url": "https://github.com/antspy", "followers_url": "https://api.github.com/users/antspy/followers", "following_url": "https://api.github.com/users/antspy/following{/other_user}", "gists_url": "https://api.github.com/users/antspy/gists{/gist_id}", "starred_url": "https://api.github.com/users/antspy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antspy/subscriptions", "organizations_url": "https://api.github.com/users/antspy/orgs", "repos_url": "https://api.github.com/users/antspy/repos", "events_url": "https://api.github.com/users/antspy/events{/privacy}", "received_events_url": "https://api.github.com/users/antspy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-09T16:13:27Z", "updated_at": "2018-01-22T23:16:57Z", "closed_at": "2018-01-22T23:16:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nDoes this work across independent processes? So lock a file in one process, then tomorrow spawn another, independent process and find the file locked?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/29", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/29/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/29/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/29", "id": 285224033, "node_id": "MDU6SXNzdWUyODUyMjQwMzM=", "number": 29, "title": "Filelock deletes file in 2.0.14!", "user": {"login": "ecamaj", "id": 1902307, "node_id": "MDQ6VXNlcjE5MDIzMDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1902307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecamaj", "html_url": "https://github.com/ecamaj", "followers_url": "https://api.github.com/users/ecamaj/followers", "following_url": "https://api.github.com/users/ecamaj/following{/other_user}", "gists_url": "https://api.github.com/users/ecamaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecamaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecamaj/subscriptions", "organizations_url": "https://api.github.com/users/ecamaj/orgs", "repos_url": "https://api.github.com/users/ecamaj/repos", "events_url": "https://api.github.com/users/ecamaj/events{/privacy}", "received_events_url": "https://api.github.com/users/ecamaj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-12-30T21:10:20Z", "updated_at": "2018-01-05T10:44:00Z", "closed_at": "2018-01-05T10:43:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Deployed new version of system and it grabbed new version of filelock and this part of code actually deletes file in file_path variable!\r\n\r\n```\r\n    file_path = get_project_path(project_slug) + '/' + settings.PROJECT_JSON\r\n    with FileLock(file_path):\r\n        project_file = open(file_path, 'w')\r\n        project_file.write(json.dumps(data))\r\n        project_file.close()\r\n```\r\n\r\nI've put print `os.path.exists` just before and after this part of code and this is from log:\r\n\r\n```\r\nTrue\r\n2017-12-30 21:00:33,622 - filelock - DEBUG - Attempting to acquire lock 140185207182392 on /.../project.json\r\n2017-12-30 21:00:33,622 - filelock - INFO - Lock 140185207182392 acquired on /.../project.json\r\n2017-12-30 21:00:33,622 - filelock - DEBUG - Attempting to release lock 140185207182392 on /.../project.json\r\n2017-12-30 21:00:33,623 - filelock - INFO - Lock 140185207182392 released on /.../project.json\r\nFalse\r\n```\r\n\r\nDO NOT INSTALL LATEST VERSION or you might have your files deleted!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/27", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/27/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/27/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/27", "id": 284247686, "node_id": "MDU6SXNzdWUyODQyNDc2ODY=", "number": 27, "title": "Delete released lock files on unix", "user": {"login": "spokorski", "id": 14926863, "node_id": "MDQ6VXNlcjE0OTI2ODYz", "avatar_url": "https://avatars0.githubusercontent.com/u/14926863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spokorski", "html_url": "https://github.com/spokorski", "followers_url": "https://api.github.com/users/spokorski/followers", "following_url": "https://api.github.com/users/spokorski/following{/other_user}", "gists_url": "https://api.github.com/users/spokorski/gists{/gist_id}", "starred_url": "https://api.github.com/users/spokorski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spokorski/subscriptions", "organizations_url": "https://api.github.com/users/spokorski/orgs", "repos_url": "https://api.github.com/users/spokorski/repos", "events_url": "https://api.github.com/users/spokorski/events{/privacy}", "received_events_url": "https://api.github.com/users/spokorski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-12-22T20:35:56Z", "updated_at": "2019-09-27T19:48:09Z", "closed_at": "2017-12-28T11:18:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "After they are released, an attempt is made to delete the lock files in both the `WindowsFileLock `and `SoftFileLock `classes, but not in `UnixFileLock`.  Is there a reason this is missing from `UnixFileLock`?  It seems strange that lock files clean up after themselves on some systems but not on others.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/26", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/26/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/26/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/26", "id": 275924305, "node_id": "MDU6SXNzdWUyNzU5MjQzMDU=", "number": 26, "title": "WindowsFileLock._acquire vs UnixFileLock._acquire", "user": {"login": "vkykv", "id": 33881153, "node_id": "MDQ6VXNlcjMzODgxMTUz", "avatar_url": "https://avatars0.githubusercontent.com/u/33881153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vkykv", "html_url": "https://github.com/vkykv", "followers_url": "https://api.github.com/users/vkykv/followers", "following_url": "https://api.github.com/users/vkykv/following{/other_user}", "gists_url": "https://api.github.com/users/vkykv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vkykv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vkykv/subscriptions", "organizations_url": "https://api.github.com/users/vkykv/orgs", "repos_url": "https://api.github.com/users/vkykv/repos", "events_url": "https://api.github.com/users/vkykv/events{/privacy}", "received_events_url": "https://api.github.com/users/vkykv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-22T02:27:36Z", "updated_at": "2017-11-25T05:53:00Z", "closed_at": "2017-11-25T05:51:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a general question about the implementation of the _acquire methods. I apologize if this is not the best place to ask this question. \r\n.\r\nThe portions of code concerning my questions:\r\n. \r\nUnixFileLock._acquire:\r\n``` python\r\ntry:\r\n    fd = os.open(self._lock_file, open_mode)\r\nexcept OSError:\r\n    pass\r\nelse:\r\n    ...\r\n```\r\nUnixFileLock._acquire:\r\n``` python\r\nfd = os.open(self._lock_file, open_mode)\r\n...\r\n```\r\n\r\nWhat resources/documenation should I be looking at to understand the behavior of os.open under different operating systems.... When is OSError raised? Why is it unnecessary to handle the exception when running on unix systems?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/25", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/25/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/25/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/25", "id": 267199097, "node_id": "MDU6SXNzdWUyNjcxOTkwOTc=", "number": 25, "title": "tags ?", "user": {"login": "neok-m4700", "id": 13423344, "node_id": "MDQ6VXNlcjEzNDIzMzQ0", "avatar_url": "https://avatars2.githubusercontent.com/u/13423344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neok-m4700", "html_url": "https://github.com/neok-m4700", "followers_url": "https://api.github.com/users/neok-m4700/followers", "following_url": "https://api.github.com/users/neok-m4700/following{/other_user}", "gists_url": "https://api.github.com/users/neok-m4700/gists{/gist_id}", "starred_url": "https://api.github.com/users/neok-m4700/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neok-m4700/subscriptions", "organizations_url": "https://api.github.com/users/neok-m4700/orgs", "repos_url": "https://api.github.com/users/neok-m4700/repos", "events_url": "https://api.github.com/users/neok-m4700/events{/privacy}", "received_events_url": "https://api.github.com/users/neok-m4700/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-20T14:43:42Z", "updated_at": "2017-11-05T21:37:26Z", "closed_at": "2017-11-05T21:37:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to push tags (Releases) on the github repo, as what is done on pypi, when incrementing build numbers ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/24", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/24/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/24/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/24", "id": 264908844, "node_id": "MDU6SXNzdWUyNjQ5MDg4NDQ=", "number": 24, "title": "filelock.py gets logger on global level", "user": {"login": "vladak", "id": 2934284, "node_id": "MDQ6VXNlcjI5MzQyODQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2934284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vladak", "html_url": "https://github.com/vladak", "followers_url": "https://api.github.com/users/vladak/followers", "following_url": "https://api.github.com/users/vladak/following{/other_user}", "gists_url": "https://api.github.com/users/vladak/gists{/gist_id}", "starred_url": "https://api.github.com/users/vladak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vladak/subscriptions", "organizations_url": "https://api.github.com/users/vladak/orgs", "repos_url": "https://api.github.com/users/vladak/repos", "events_url": "https://api.github.com/users/vladak/events{/privacy}", "received_events_url": "https://api.github.com/users/vladak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-12T11:41:33Z", "updated_at": "2017-11-05T22:02:54Z", "closed_at": "2017-11-05T22:02:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://fangpenlin.com/posts/2012/08/26/good-logging-practice-in-python/ explains why this is not a good practice.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/22", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/22/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/22/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/22", "id": 255178253, "node_id": "MDU6SXNzdWUyNTUxNzgyNTM=", "number": 22, "title": "[documentation] Beginners view on the README", "user": {"login": "dneise", "id": 8200858, "node_id": "MDQ6VXNlcjgyMDA4NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/8200858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dneise", "html_url": "https://github.com/dneise", "followers_url": "https://api.github.com/users/dneise/followers", "following_url": "https://api.github.com/users/dneise/following{/other_user}", "gists_url": "https://api.github.com/users/dneise/gists{/gist_id}", "starred_url": "https://api.github.com/users/dneise/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dneise/subscriptions", "organizations_url": "https://api.github.com/users/dneise/orgs", "repos_url": "https://api.github.com/users/dneise/repos", "events_url": "https://api.github.com/users/dneise/events{/privacy}", "received_events_url": "https://api.github.com/users/dneise/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-05T07:03:23Z", "updated_at": "2018-01-22T23:23:33Z", "closed_at": "2018-01-22T23:23:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! I think this is a great package. Maybe you are interested in an outsiders view at the README. \r\n\r\nUse case: I was about to write to processes which were *supposed* to run at different times and both would update the same file. Since I cannot guarantee that one process would not take much longer than anticipated, I thought about ways for these processes to communicate. I heard about lock files so I googled for python implementations, as I also heard one needs to be careful with this stuff and use a lot of atomic operations ... stuff I have no idea about. \r\nI found these packages:\r\n\r\n * [lockfile 0.12.2](https://pypi.python.org/pypi/lockfile/0.12.2) which says it is **deprecated**\r\n * [filelock 2.0.12](https://pypi.python.org/pypi/filelock) which is already a version 2 not zero, so it created a feeling of trustworthyness. :+1: \r\n\r\nThen I read the README (on pypi)\r\n\r\n >  [...] This means, when locking the same lock object twice, it will not block.\r\n\r\nThis puzzled me a lot. I thought: \"Isn't blocking exactly the expected behaviour of a lockfile? when somebody already has aquired the lock?\"\r\n\r\nSo I tested it using two ipython sessions:\r\n\r\nUpper:\r\n```ipython\r\nIn [1]: from filelock import FileLock\r\nIn [2]: lock = FileLock('.lock')\r\nIn [3]: lock.acquire()\r\nOut[3]: <filelock.BaseFileLock.acquire.<locals>.ReturnProxy at 0x...>\r\n```\r\n\r\nLower:\r\n```ipython\r\nIn [1]: from filelock import FileLock\r\nIn [2]: lock = FileLock('.lock')\r\nIn [3]: lock.acquire()\r\n# it blocks!\r\n```\r\n\r\n----\r\n\r\nSo your package works exactly as I expected it to work **before** reading the README. After reading the README I was puzzled, and after testing I was happy again. \r\n\r\nNow after reading a bit more ... I think I get the point that sentence is trying to make. Apparently **inside the same process** `acquire()`-ing the same lock multiple times does not block the process itself. As a beginner I can not imagine why one would actually want to acquire the lock multiple times within the same process, but I guess there are use cases. \r\n\r\nI was wondering if you would like to smooth out the path for using your great package for beginners a little bit. Maybe one could be a bit more elaborate in the first part of the README. So after this:\r\n\r\n> This package contains a single module, which implements a platform independent file lock in Python.\r\n\r\n one could maybe say:\r\n\r\n> File locking is a mechanism that restricts access to a computer file by allowing only one process to access it in a specific time. Another process trying to `acquire` the same FileLock will block.\r\n\r\nAnd then further down\r\n\r\n> The lock includes a lock counter and is thread safe. This means, when [the same process] is acquiring the same lock object twice, it will not block.\r\n\r\n----\r\n\r\nI could make a PR for this if you like.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/20", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/20/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/20/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/20", "id": 243149334, "node_id": "MDU6SXNzdWUyNDMxNDkzMzQ=", "number": 20, "title": "Please label it as working in python2 and python3", "user": {"login": "yurivict", "id": 271906, "node_id": "MDQ6VXNlcjI3MTkwNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/271906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yurivict", "html_url": "https://github.com/yurivict", "followers_url": "https://api.github.com/users/yurivict/followers", "following_url": "https://api.github.com/users/yurivict/following{/other_user}", "gists_url": "https://api.github.com/users/yurivict/gists{/gist_id}", "starred_url": "https://api.github.com/users/yurivict/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yurivict/subscriptions", "organizations_url": "https://api.github.com/users/yurivict/orgs", "repos_url": "https://api.github.com/users/yurivict/repos", "events_url": "https://api.github.com/users/yurivict/events{/privacy}", "received_events_url": "https://api.github.com/users/yurivict/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-15T03:12:53Z", "updated_at": "2017-07-19T17:49:20Z", "closed_at": "2017-07-19T17:49:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "setup.py currently says \"Python :: 3\"\r\n\r\nAlso, in the first line of setup.py python3 should be changed to ```#!/usr/bin/env python``` to make it universal.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/19", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/19/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/19/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/19", "id": 230853262, "node_id": "MDU6SXNzdWUyMzA4NTMyNjI=", "number": 19, "title": "filelock is erasing file contents", "user": {"login": "zauberparacelsus", "id": 548168, "node_id": "MDQ6VXNlcjU0ODE2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/548168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zauberparacelsus", "html_url": "https://github.com/zauberparacelsus", "followers_url": "https://api.github.com/users/zauberparacelsus/followers", "following_url": "https://api.github.com/users/zauberparacelsus/following{/other_user}", "gists_url": "https://api.github.com/users/zauberparacelsus/gists{/gist_id}", "starred_url": "https://api.github.com/users/zauberparacelsus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zauberparacelsus/subscriptions", "organizations_url": "https://api.github.com/users/zauberparacelsus/orgs", "repos_url": "https://api.github.com/users/zauberparacelsus/repos", "events_url": "https://api.github.com/users/zauberparacelsus/events{/privacy}", "received_events_url": "https://api.github.com/users/zauberparacelsus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-23T21:31:51Z", "updated_at": "2017-07-19T17:49:54Z", "closed_at": "2017-07-19T17:49:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was trying out this library, but found that opening a file for reading while under a lock would completely erase the file's contents.\r\n\r\nThe following code reproduces the issue:\r\n```\r\n#!/usr/bin/python3\r\n\r\nimport filelock\r\n\r\nwith open(\"test.txt\", \"w\") as f:\r\n\tf.write(\"This is some testing text\")\r\n\r\nlock = filelock.FileLock(\"test.txt\")\r\nwith lock:\r\n\twith open(\"test.txt\", \"r\") as f:\r\n\t\ta = f.read()\r\n\t\tprint(a)\r\n```\r\n\r\n* This issue occurs on 64bit Ubuntu 17.04, using Python 3.5.3\r\n* I have no idea if there is a particular way I am supposed to open files with filelock.  If there is, it wasn't covered in the readthedocs page, which has absolutely no information on reading or writing files.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/18", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/18/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/18/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/18", "id": 217586535, "node_id": "MDU6SXNzdWUyMTc1ODY1MzU=", "number": 18, "title": "Publish version 2.0.8", "user": {"login": "expobrain", "id": 2404909, "node_id": "MDQ6VXNlcjI0MDQ5MDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2404909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/expobrain", "html_url": "https://github.com/expobrain", "followers_url": "https://api.github.com/users/expobrain/followers", "following_url": "https://api.github.com/users/expobrain/following{/other_user}", "gists_url": "https://api.github.com/users/expobrain/gists{/gist_id}", "starred_url": "https://api.github.com/users/expobrain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/expobrain/subscriptions", "organizations_url": "https://api.github.com/users/expobrain/orgs", "repos_url": "https://api.github.com/users/expobrain/repos", "events_url": "https://api.github.com/users/expobrain/events{/privacy}", "received_events_url": "https://api.github.com/users/expobrain/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-28T14:50:15Z", "updated_at": "2017-07-12T14:31:44Z", "closed_at": "2017-03-29T17:11:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is there anything preventing the version 2.0.8 to be published on Pypi?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/15", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/15/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/15/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/15", "id": 196662775, "node_id": "MDU6SXNzdWUxOTY2NjI3NzU=", "number": 15, "title": "Unexpected and different behaviors on Windows and Linux", "user": {"login": "kmdouglass", "id": 3697676, "node_id": "MDQ6VXNlcjM2OTc2NzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/3697676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmdouglass", "html_url": "https://github.com/kmdouglass", "followers_url": "https://api.github.com/users/kmdouglass/followers", "following_url": "https://api.github.com/users/kmdouglass/following{/other_user}", "gists_url": "https://api.github.com/users/kmdouglass/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmdouglass/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmdouglass/subscriptions", "organizations_url": "https://api.github.com/users/kmdouglass/orgs", "repos_url": "https://api.github.com/users/kmdouglass/repos", "events_url": "https://api.github.com/users/kmdouglass/events{/privacy}", "received_events_url": "https://api.github.com/users/kmdouglass/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-12-20T12:38:39Z", "updated_at": "2016-12-29T21:07:04Z", "closed_at": "2016-12-29T21:07:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\nWhen I run the following script, it runs successfully on Linux but fails on Windows 10:\r\n\r\n```python\r\nimport filelock\r\n\r\nlock = filelock.FileLock('test.txt')\r\nwith lock:\r\n    f = open('test.txt', 'w')\r\n    f.write('hello')\r\n    f.close()\r\n```\r\n\r\nThe error on Windows is:\r\n```\r\nPermissionError: [Errno 13] Permission denied\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"lock.py\", line 9, in <module>\r\n    f.close()\r\nPermissionError: [Errno 13] Permission denied\r\n```\r\n\r\n**However**, if I move `f.close()` outside of the context manager, the script successfully runs on Windows and Linux:\r\n\r\n```python\r\nlock = filelock.FileLock('test.txt')\r\nwith lock:\r\n    f = open('test.txt', 'w')\r\n    f.write('hello')\r\nf.close()\r\n```\r\n\r\nWhy exactly must the `f.close()` be placed outside the context manager on Windows, but not on Linux? Is it related to msvcrt.locking()?\r\n\r\nI'm using filelock 2.0.7, Windows 10 (x64) and Debian Jessie (x64).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/14", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/14/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/14/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/14", "id": 185894210, "node_id": "MDU6SXNzdWUxODU4OTQyMTA=", "number": 14, "title": "Installs LICENSE and README into the environment root", "user": {"login": "vfaronov", "id": 300211, "node_id": "MDQ6VXNlcjMwMDIxMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/300211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vfaronov", "html_url": "https://github.com/vfaronov", "followers_url": "https://api.github.com/users/vfaronov/followers", "following_url": "https://api.github.com/users/vfaronov/following{/other_user}", "gists_url": "https://api.github.com/users/vfaronov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vfaronov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vfaronov/subscriptions", "organizations_url": "https://api.github.com/users/vfaronov/orgs", "repos_url": "https://api.github.com/users/vfaronov/repos", "events_url": "https://api.github.com/users/vfaronov/events{/privacy}", "received_events_url": "https://api.github.com/users/vfaronov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-28T10:50:58Z", "updated_at": "2016-11-05T17:46:41Z", "closed_at": "2016-11-05T17:46:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\n$ virtualenv env2\n$ env2/bin/pip install filelock\n$ ls env2\nbin  include  lib  LICENSE.rst  local  pip-selfcheck.json  README.rst  share\n```\n\nThese `LICENSE.rst` and `README.rst` appear because they are listed in filelock\u2019s `setup.py` as `data_files`. It\u2019s better to list them in a [`MANIFEST.in`](https://docs.python.org/2/distutils/sourcedist.html#manifest) instead, so that they are included in a source distribution but are not actually installed.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/9", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/9/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/9/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/9", "id": 133484237, "node_id": "MDU6SXNzdWUxMzM0ODQyMzc=", "number": 9, "title": "locking seems to erase the file!", "user": {"login": "Mabooka", "id": 17226107, "node_id": "MDQ6VXNlcjE3MjI2MTA3", "avatar_url": "https://avatars0.githubusercontent.com/u/17226107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mabooka", "html_url": "https://github.com/Mabooka", "followers_url": "https://api.github.com/users/Mabooka/followers", "following_url": "https://api.github.com/users/Mabooka/following{/other_user}", "gists_url": "https://api.github.com/users/Mabooka/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mabooka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mabooka/subscriptions", "organizations_url": "https://api.github.com/users/Mabooka/orgs", "repos_url": "https://api.github.com/users/Mabooka/repos", "events_url": "https://api.github.com/users/Mabooka/events{/privacy}", "received_events_url": "https://api.github.com/users/Mabooka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-02-13T23:55:11Z", "updated_at": "2016-09-30T10:22:41Z", "closed_at": "2016-09-30T10:22:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\nif I do\n   with lock.acquire(timeout = 5):\n        fp = open(flnm, \"a\")\n        print >> fp, \"some text\"\n        fp.close()\nand then look at the file, I only see one line of text in it (no matter what was in it before).\nWhat am I doing wrong?\n\nI am attaching my code that demonstrates the issue.\nplease run:\n1) python issue_filelock.py 1 \n   several times, and then \n2) python issue_filelock.py 2\n\nyou will see that the file gets truncated. \nAnd the only difference is one line: \nwith lock.acquire(timeout = 5):\n\n[issue_filelock.py.zip](https://github.com/benediktschmitt/py-filelock/files/129459/issue_filelock.py.zip)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/7", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/7/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/7/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/7", "id": 106527499, "node_id": "MDU6SXNzdWUxMDY1Mjc0OTk=", "number": 7, "title": "support multiprocess ?", "user": {"login": "rfyiamcool", "id": 3785409, "node_id": "MDQ6VXNlcjM3ODU0MDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/3785409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rfyiamcool", "html_url": "https://github.com/rfyiamcool", "followers_url": "https://api.github.com/users/rfyiamcool/followers", "following_url": "https://api.github.com/users/rfyiamcool/following{/other_user}", "gists_url": "https://api.github.com/users/rfyiamcool/gists{/gist_id}", "starred_url": "https://api.github.com/users/rfyiamcool/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rfyiamcool/subscriptions", "organizations_url": "https://api.github.com/users/rfyiamcool/orgs", "repos_url": "https://api.github.com/users/rfyiamcool/repos", "events_url": "https://api.github.com/users/rfyiamcool/events{/privacy}", "received_events_url": "https://api.github.com/users/rfyiamcool/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-15T10:26:51Z", "updated_at": "2015-09-16T16:47:15Z", "closed_at": "2015-09-16T16:47:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "support multiprocess ?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/6", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/6/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/6/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/6", "id": 97764431, "node_id": "MDU6SXNzdWU5Nzc2NDQzMQ==", "number": 6, "title": "fcntl requires correctly configured mounts", "user": {"login": "matthewatabet", "id": 6320630, "node_id": "MDQ6VXNlcjYzMjA2MzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/6320630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewatabet", "html_url": "https://github.com/matthewatabet", "followers_url": "https://api.github.com/users/matthewatabet/followers", "following_url": "https://api.github.com/users/matthewatabet/following{/other_user}", "gists_url": "https://api.github.com/users/matthewatabet/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewatabet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewatabet/subscriptions", "organizations_url": "https://api.github.com/users/matthewatabet/orgs", "repos_url": "https://api.github.com/users/matthewatabet/repos", "events_url": "https://api.github.com/users/matthewatabet/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewatabet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-07-28T17:59:02Z", "updated_at": "2016-09-30T10:23:14Z", "closed_at": "2016-09-30T10:23:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there!\n\nI'd like to use this module, but it won't work in my case since I'm dealing with some nfs mounts which have 'nolock' set. In this case, flock() we be a no-op.\n\nThere's more info here:\nhttp://linux.die.net/man/5/nfs\n\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/5", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/5/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/5/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/5", "id": 87257545, "node_id": "MDU6SXNzdWU4NzI1NzU0NQ==", "number": 5, "title": "Test  failed on Windows", "user": {"login": "dkw72n", "id": 4378007, "node_id": "MDQ6VXNlcjQzNzgwMDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/4378007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkw72n", "html_url": "https://github.com/dkw72n", "followers_url": "https://api.github.com/users/dkw72n/followers", "following_url": "https://api.github.com/users/dkw72n/following{/other_user}", "gists_url": "https://api.github.com/users/dkw72n/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkw72n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkw72n/subscriptions", "organizations_url": "https://api.github.com/users/dkw72n/orgs", "repos_url": "https://api.github.com/users/dkw72n/repos", "events_url": "https://api.github.com/users/dkw72n/events{/privacy}", "received_events_url": "https://api.github.com/users/dkw72n/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-06-11T08:21:59Z", "updated_at": "2015-06-15T03:47:54Z", "closed_at": "2015-06-13T10:55:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\nH:\\>python test.py\n..EE......E\n======================================================================\nERROR: test_default_timeout (__main__.TestFileLock)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"test.py\", line 213, in test_default_timeout\n    self.assertRaises(filelock.Timeout, lock2.acquire)\n  File \"C:\\Python27\\lib\\unittest\\case.py\", line 475, in assertRaises\n    callableObj(*args, **kwargs)\n  File \"H:\\filelock.py\", line 230, in acquire\n    self._acquire()\n  File \"H:\\filelock.py\", line 312, in _acquire\n    msvcrt.locking(fd, msvcrt.LK_NBLCK, 1)\nIOError: [Errno 13] Permission denied\n\n======================================================================\nERROR: test_del (__main__.TestFileLock)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"test.py\", line 265, in test_del\n    self.assertRaises(filelock.Timeout, lock2.acquire, timeout = 0)\n  File \"C:\\Python27\\lib\\unittest\\case.py\", line 475, in assertRaises\n    callableObj(*args, **kwargs)\n  File \"H:\\filelock.py\", line 230, in acquire\n    self._acquire()\n  File \"H:\\filelock.py\", line 312, in _acquire\n    msvcrt.locking(fd, msvcrt.LK_NBLCK, 1)\nIOError: [Errno 13] Permission denied\n\n======================================================================\nERROR: test_timeout (__main__.TestFileLock)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"test.py\", line 192, in test_timeout\n    self.assertRaises(filelock.Timeout, lock2.acquire, timeout=1)\n  File \"C:\\Python27\\lib\\unittest\\case.py\", line 475, in assertRaises\n    callableObj(*args, **kwargs)\n  File \"H:\\filelock.py\", line 230, in acquire\n    self._acquire()\n  File \"H:\\filelock.py\", line 312, in _acquire\n    msvcrt.locking(fd, msvcrt.LK_NBLCK, 1)\nIOError: [Errno 13] Permission denied\n\n----------------------------------------------------------------------\nRan 11 tests in 0.988s\n\nFAILED (errors=3)\n```\n\nAccording to https://docs.python.org/2/library/msvcrt.html :\n msvcrt.locking \"Raises IOError on failure.\" instead of OSError\n After changing the ''OSError'' to 'IOError', all tests passed.\n\n```\nH:\\>python test.py\n...........\n----------------------------------------------------------------------\nRan 11 tests in 3.170s\n\nOK\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/4", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/4/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/4/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/4", "id": 83866017, "node_id": "MDU6SXNzdWU4Mzg2NjAxNw==", "number": 4, "title": "Json load and Filelock", "user": {"login": "jenson86", "id": 12708973, "node_id": "MDQ6VXNlcjEyNzA4OTcz", "avatar_url": "https://avatars1.githubusercontent.com/u/12708973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jenson86", "html_url": "https://github.com/jenson86", "followers_url": "https://api.github.com/users/jenson86/followers", "following_url": "https://api.github.com/users/jenson86/following{/other_user}", "gists_url": "https://api.github.com/users/jenson86/gists{/gist_id}", "starred_url": "https://api.github.com/users/jenson86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jenson86/subscriptions", "organizations_url": "https://api.github.com/users/jenson86/orgs", "repos_url": "https://api.github.com/users/jenson86/repos", "events_url": "https://api.github.com/users/jenson86/events{/privacy}", "received_events_url": "https://api.github.com/users/jenson86/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-06-02T06:21:28Z", "updated_at": "2015-06-03T14:11:24Z", "closed_at": "2015-06-03T13:46:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey Benedikt,\n\ni'm really new to Python and work for a state monitoring for a RPi and different functions with the internal Watchdog at the moment. \n\nI tried the following, but it doesn't work because either pemission denied in Windows or there is no file anymore (Raspbian):\n\n``` python\npath='ConfigLED.json'\nlock=filelock.FileLock(path)\n\nwith lock:\n    with open(path) as config:\n        data=json.load(config)\n\n    print(data)\nlock.release(True)\n```\n\nI think the problem is, that the lock is to the file and only with the object, which is combined with the lock, I can load the data. But the property (fd) is privat, right? Can you help me, how to realize that or is it not possible?\n\nBR Jens\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/3", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/3/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/3/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/3", "id": 80286775, "node_id": "MDU6SXNzdWU4MDI4Njc3NQ==", "number": 3, "title": "using with and providing a timeout", "user": {"login": "benprew", "id": 37847, "node_id": "MDQ6VXNlcjM3ODQ3", "avatar_url": "https://avatars3.githubusercontent.com/u/37847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benprew", "html_url": "https://github.com/benprew", "followers_url": "https://api.github.com/users/benprew/followers", "following_url": "https://api.github.com/users/benprew/following{/other_user}", "gists_url": "https://api.github.com/users/benprew/gists{/gist_id}", "starred_url": "https://api.github.com/users/benprew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benprew/subscriptions", "organizations_url": "https://api.github.com/users/benprew/orgs", "repos_url": "https://api.github.com/users/benprew/repos", "events_url": "https://api.github.com/users/benprew/events{/privacy}", "received_events_url": "https://api.github.com/users/benprew/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 82151554, "node_id": "MDU6TGFiZWw4MjE1MTU1NA==", "url": "https://api.github.com/repos/benediktschmitt/py-filelock/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-05-24T22:10:42Z", "updated_at": "2015-05-29T05:02:15Z", "closed_at": "2015-05-28T22:54:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to be able to use the `with` and specify a timeout.\n\nDoing this:\n\n```\nwith self.lock.acquire(timeout=10):\n```\n\nResults in a nested lock (since `__enter__` acquires a lock too).  I couldn't see a way to do this without explicitly releasing the lock.\n\nAny suggestions for how to use with and timeout together?\n\nThanks\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/2", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/2/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/2/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/2", "id": 79419159, "node_id": "MDU6SXNzdWU3OTQxOTE1OQ==", "number": 2, "title": "Specify timeout in __init__", "user": {"login": "p3trus", "id": 1489787, "node_id": "MDQ6VXNlcjE0ODk3ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1489787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/p3trus", "html_url": "https://github.com/p3trus", "followers_url": "https://api.github.com/users/p3trus/followers", "following_url": "https://api.github.com/users/p3trus/following{/other_user}", "gists_url": "https://api.github.com/users/p3trus/gists{/gist_id}", "starred_url": "https://api.github.com/users/p3trus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/p3trus/subscriptions", "organizations_url": "https://api.github.com/users/p3trus/orgs", "repos_url": "https://api.github.com/users/p3trus/repos", "events_url": "https://api.github.com/users/p3trus/events{/privacy}", "received_events_url": "https://api.github.com/users/p3trus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 82151556, "node_id": "MDU6TGFiZWw4MjE1MTU1Ng==", "url": "https://api.github.com/repos/benediktschmitt/py-filelock/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "benediktschmitt", "id": 5073305, "node_id": "MDQ6VXNlcjUwNzMzMDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/5073305?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benediktschmitt", "html_url": "https://github.com/benediktschmitt", "followers_url": "https://api.github.com/users/benediktschmitt/followers", "following_url": "https://api.github.com/users/benediktschmitt/following{/other_user}", "gists_url": "https://api.github.com/users/benediktschmitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/benediktschmitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benediktschmitt/subscriptions", "organizations_url": "https://api.github.com/users/benediktschmitt/orgs", "repos_url": "https://api.github.com/users/benediktschmitt/repos", "events_url": "https://api.github.com/users/benediktschmitt/events{/privacy}", "received_events_url": "https://api.github.com/users/benediktschmitt/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "benediktschmitt", "id": 5073305, "node_id": "MDQ6VXNlcjUwNzMzMDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/5073305?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benediktschmitt", "html_url": "https://github.com/benediktschmitt", "followers_url": "https://api.github.com/users/benediktschmitt/followers", "following_url": "https://api.github.com/users/benediktschmitt/following{/other_user}", "gists_url": "https://api.github.com/users/benediktschmitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/benediktschmitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benediktschmitt/subscriptions", "organizations_url": "https://api.github.com/users/benediktschmitt/orgs", "repos_url": "https://api.github.com/users/benediktschmitt/repos", "events_url": "https://api.github.com/users/benediktschmitt/events{/privacy}", "received_events_url": "https://api.github.com/users/benediktschmitt/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2015-05-22T11:34:10Z", "updated_at": "2015-05-28T22:59:11Z", "closed_at": "2015-05-28T22:59:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice if a timeout could be specified at creation time as well, e.g:\n\n```\nlock = FileLock('.lock', timeout=10)\nwith lock:\n    ...\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/1", "repository_url": "https://api.github.com/repos/benediktschmitt/py-filelock", "labels_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/1/comments", "events_url": "https://api.github.com/repos/benediktschmitt/py-filelock/issues/1/events", "html_url": "https://github.com/benediktschmitt/py-filelock/issues/1", "id": 70078837, "node_id": "MDU6SXNzdWU3MDA3ODgzNw==", "number": 1, "title": "Time delay if first acquire() succeeds.", "user": {"login": "p3trus", "id": 1489787, "node_id": "MDQ6VXNlcjE0ODk3ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1489787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/p3trus", "html_url": "https://github.com/p3trus", "followers_url": "https://api.github.com/users/p3trus/followers", "following_url": "https://api.github.com/users/p3trus/following{/other_user}", "gists_url": "https://api.github.com/users/p3trus/gists{/gist_id}", "starred_url": "https://api.github.com/users/p3trus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/p3trus/subscriptions", "organizations_url": "https://api.github.com/users/p3trus/orgs", "repos_url": "https://api.github.com/users/p3trus/repos", "events_url": "https://api.github.com/users/p3trus/events{/privacy}", "received_events_url": "https://api.github.com/users/p3trus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-04-22T09:54:23Z", "updated_at": "2015-04-22T14:57:24Z", "closed_at": "2015-04-22T14:57:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the method `acquire()`: If the call to to `_acquire()` succeeds I still have to wait a single polll interval.\n", "performed_via_github_app": null, "score": 1.0}]}