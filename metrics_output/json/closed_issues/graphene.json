{"total_count": 785, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/graphql-python/graphene/issues/1249", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1249/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1249/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1249/events", "html_url": "https://github.com/graphql-python/graphene/issues/1249", "id": 675578413, "node_id": "MDU6SXNzdWU2NzU1Nzg0MTM=", "number": 1249, "title": "incompatible JSONField  for django 3.1", "user": {"login": "hyusetiawan", "id": 1062920, "node_id": "MDQ6VXNlcjEwNjI5MjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1062920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hyusetiawan", "html_url": "https://github.com/hyusetiawan", "followers_url": "https://api.github.com/users/hyusetiawan/followers", "following_url": "https://api.github.com/users/hyusetiawan/following{/other_user}", "gists_url": "https://api.github.com/users/hyusetiawan/gists{/gist_id}", "starred_url": "https://api.github.com/users/hyusetiawan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hyusetiawan/subscriptions", "organizations_url": "https://api.github.com/users/hyusetiawan/orgs", "repos_url": "https://api.github.com/users/hyusetiawan/repos", "events_url": "https://api.github.com/users/hyusetiawan/events{/privacy}", "received_events_url": "https://api.github.com/users/hyusetiawan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481170, "node_id": "MDU6TGFiZWwyNjQ0ODExNzA=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%F0%9F%90%9B%20bug", "name": "\ud83d\udc1b bug", "color": "fc2929", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-08T19:46:32Z", "updated_at": "2020-08-10T21:45:21Z", "closed_at": "2020-08-10T21:45:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Note: for support questions, please use stackoverflow**. This repository's issues are reserved for feature requests and bug reports.\r\n\r\n* **What is the current behavior?**\r\nDjango 3.1 has a common JSONField that applies to all db not just postgres. I changed the field from django.contrib.pg version to 3.1 common JSONField (as suggested by the warning when you `./manage.py runserver`), the converter throws the following error:\r\n`Exception: Don't know how to convert the Django field api.ObjectInstance.content (<class 'django.db.models.fields.json.JSONField'>)`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1247", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1247/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1247/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1247/events", "html_url": "https://github.com/graphql-python/graphene/issues/1247", "id": 675436588, "node_id": "MDU6SXNzdWU2NzU0MzY1ODg=", "number": 1247, "title": "V3 subscription field with arguments throws an error", "user": {"login": "hyusetiawan", "id": 1062920, "node_id": "MDQ6VXNlcjEwNjI5MjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1062920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hyusetiawan", "html_url": "https://github.com/hyusetiawan", "followers_url": "https://api.github.com/users/hyusetiawan/followers", "following_url": "https://api.github.com/users/hyusetiawan/following{/other_user}", "gists_url": "https://api.github.com/users/hyusetiawan/gists{/gist_id}", "starred_url": "https://api.github.com/users/hyusetiawan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hyusetiawan/subscriptions", "organizations_url": "https://api.github.com/users/hyusetiawan/orgs", "repos_url": "https://api.github.com/users/hyusetiawan/repos", "events_url": "https://api.github.com/users/hyusetiawan/events{/privacy}", "received_events_url": "https://api.github.com/users/hyusetiawan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481170, "node_id": "MDU6TGFiZWwyNjQ0ODExNzA=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%F0%9F%90%9B%20bug", "name": "\ud83d\udc1b bug", "color": "fc2929", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-08T05:43:57Z", "updated_at": "2020-08-12T21:43:36Z", "closed_at": "2020-08-12T21:43:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Note: for support questions, please use stackoverflow**. This repository's issues are reserved for feature requests and bug reports.\r\n\r\n* **What is the current behavior?**\r\nI specify a subscription like so:\r\n```\r\nclass SubscriptionDocument:\r\n    # document_block_updates = graphene.List(\r\n    #     DocumentBlockType, doc_uid=graphene.Argument(graphene.UUID, name=\"docUID\")\r\n    # )\r\n    document_updates = graphene.Field(DocumentType, doc_uid=graphene.UUID())\r\n\r\n    # async def subscribe_block_updates(self, info, **kwargs):\r\n    #     while True:\r\n    #         yield Document.objects.first()\r\n    #         await asyncio.sleep(5)\r\n\r\n    async def subscribe_document_updates(self, info, *args, **kwargs):\r\n        count = 0\r\n        doc_uid: UUID = kwargs.get(\"doc_uid\", None)\r\n\r\n        while True:\r\n            count += 1\r\n            yield sync_to_async(Document.objects.filter)(uid=doc_uid)\r\n            await asyncio.sleep(5)\r\n```\r\nand I am getting an error:\r\n`identity_resolve() got an unexpected keyword argument 'doc_uid'`\r\n\r\nbut the generated graphql schema works as expected and if I remove that doc_uid argument.\r\n\r\n* **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem** via\r\na github repo, https://repl.it or similar.\r\n\r\n\r\n\r\n* **What is the expected behavior?**\r\nworks the way regular query should work\r\n\r\n\r\n* **What is the motivation / use case for changing the behavior?**\r\nnot changing\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1244", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1244/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1244/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1244/events", "html_url": "https://github.com/graphql-python/graphene/issues/1244", "id": 673608840, "node_id": "MDU6SXNzdWU2NzM2MDg4NDA=", "number": 1244, "title": "Union types cannot be resovled. Documentation incomplete", "user": {"login": "jmandt", "id": 50832869, "node_id": "MDQ6VXNlcjUwODMyODY5", "avatar_url": "https://avatars3.githubusercontent.com/u/50832869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmandt", "html_url": "https://github.com/jmandt", "followers_url": "https://api.github.com/users/jmandt/followers", "following_url": "https://api.github.com/users/jmandt/following{/other_user}", "gists_url": "https://api.github.com/users/jmandt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmandt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmandt/subscriptions", "organizations_url": "https://api.github.com/users/jmandt/orgs", "repos_url": "https://api.github.com/users/jmandt/repos", "events_url": "https://api.github.com/users/jmandt/events{/privacy}", "received_events_url": "https://api.github.com/users/jmandt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481170, "node_id": "MDU6TGFiZWwyNjQ0ODExNzA=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%F0%9F%90%9B%20bug", "name": "\ud83d\udc1b bug", "color": "fc2929", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-05T15:01:25Z", "updated_at": "2020-08-05T21:15:21Z", "closed_at": "2020-08-05T18:29:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am setting up a GraphQL Server with Python using Starlette and Graphene and ran into a problem I cannot find a solution for. The Graphene Documentation does not go into detail regarding the union type, which I am trying to implement. I set up a minimum example based on the graphene documentation which you can run to replicate this problem\r\n\r\n```\r\nimport os\r\n\r\nimport uvicorn\r\nfrom graphene import ObjectType, Field, List, String, Int, Union\r\nfrom graphene import Schema\r\nfrom starlette.applications import Starlette\r\nfrom starlette.graphql import GraphQLApp\r\nfrom starlette.routing import Route\r\n\r\nmock_data = {\r\n    \"episode\": 3,\r\n    \"characters\": [\r\n        {\r\n            \"type\": \"Droid\",\r\n            \"name\": \"R2-D2\",\r\n            \"primaryFunction\": \"Astromech\"\r\n        },\r\n        {\r\n            \"type\": \"Human\",\r\n            \"name\": \"Luke Skywalker\",\r\n            \"homePlanet\": \"Tatooine\"\r\n        },\r\n        {\r\n            \"type\": \"Starship\",\r\n            \"name\": \"Millennium Falcon\",\r\n            \"length\": 35\r\n        }\r\n    ]\r\n}\r\n\r\n\r\nclass Human(ObjectType):\r\n    name = String()\r\n    homePlanet = String()\r\n\r\n\r\nclass Droid(ObjectType):\r\n    name = String()\r\n    primary_function = String()\r\n\r\n\r\nclass Starship(ObjectType):\r\n    name = String()\r\n    length = Int()\r\n\r\n\r\nclass Characters(Union):\r\n    class Meta:\r\n        types = (Human, Droid, Starship)\r\n\r\n\r\nclass SearchResult(ObjectType):\r\n    characters = List(Characters)\r\n    episode = Int()\r\n\r\n\r\nclass RootQuery(ObjectType):\r\n    result = Field(SearchResult)\r\n\r\n    @staticmethod\r\n    def resolve_result(_, info):\r\n        return mock_data\r\n\r\n\r\ngraphql_app = GraphQLApp(schema=Schema(query=RootQuery))\r\n\r\nroutes = [\r\n    Route(\"/graphql\", graphql_app),\r\n]\r\n\r\napi = Starlette(routes=routes)\r\n\r\nif __name__ == \"__main__\":\r\n    uvicorn.run(api, host=\"127.0.0.1\", port=int(os.environ.get(\"PORT\", 8080)))\r\n```\r\nIf you then go to http://localhost:8080/graphq and enter the following query\r\n\r\n```\r\nquery Humans{\r\n  result {\r\n    episode\r\n    characters {\r\n      ... on Human {\r\n        name\r\n      }\r\n    }\r\n  }\r\n}\r\nI get this error\r\n\r\n {\r\n    \"data\": {\r\n        \"result\": {\r\n            \"episode\": 3,\r\n            \"characters\": null\r\n        }\r\n    },\r\n    \"errors\": [\r\n        {\r\n            \"message\": \"Abstract type Characters must resolve to an Object type at runtime for field SearchResult.characters with value \\\"[{'type': 'Droid', 'name': 'R2-D2', 'primaryFunction': 'Astromech'}, {'type': 'Human', 'name': 'Luke Skywalker', 'homePlanet': 'Tatooine'}, {'type': 'Starship', 'name': 'Millennium Falcon', 'length': 35}]\\\", received \\\"None\\\".\",\r\n            \"locations\": [\r\n                {\r\n                    \"line\": 4,\r\n                    \"column\": 5\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}\r\n```\r\nwhich I am now stuck with. Maybe someone has done this already and can help out? How can I resolve this at runtime. I have already tried different approaches for example I changed classes Character and RootQuery:\r\n```\r\nclass Character(Union):\r\n    class Meta:\r\n        types = (Human, Droid, Starship)\r\n\r\n    def __init__(self, data, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        self.data = data\r\n        self.type = data.get(\"type\")\r\n\r\n    def resolve_type(self, info):\r\n        if self.type == \"Human\":\r\n            return Human\r\n        if self.type == \"Droid\":\r\n            return Droid\r\n        if self.type == \"Starship\":\r\n            return Starship\r\n\r\n\r\nclass RootQuery(ObjectType):\r\n    result = Field(SearchResult)\r\n    \r\n    @staticmethod\r\n    def resolve_result(_, info):\r\n        return {**mock_data, \"characters\": [Character(character) for character in mock_data.get('characters')]}\r\n```\r\nresulting in\r\n\r\n```\r\n{\r\n    \"data\": {\r\n        \"result\": {\r\n            \"episode\": 3,\r\n            \"characters\": [\r\n                {},\r\n                {\r\n                    \"name\": null\r\n                },\r\n                {}\r\n            ]\r\n        }\r\n    }\r\n}\r\n```\r\nAny ideas would be very appreciated!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1243", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1243/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1243/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1243/events", "html_url": "https://github.com/graphql-python/graphene/issues/1243", "id": 672028556, "node_id": "MDU6SXNzdWU2NzIwMjg1NTY=", "number": 1243, "title": "dataloader returns nulls", "user": {"login": "ghdna", "id": 5051750, "node_id": "MDQ6VXNlcjUwNTE3NTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/5051750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghdna", "html_url": "https://github.com/ghdna", "followers_url": "https://api.github.com/users/ghdna/followers", "following_url": "https://api.github.com/users/ghdna/following{/other_user}", "gists_url": "https://api.github.com/users/ghdna/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghdna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghdna/subscriptions", "organizations_url": "https://api.github.com/users/ghdna/orgs", "repos_url": "https://api.github.com/users/ghdna/repos", "events_url": "https://api.github.com/users/ghdna/events{/privacy}", "received_events_url": "https://api.github.com/users/ghdna/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481170, "node_id": "MDU6TGFiZWwyNjQ0ODExNzA=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%F0%9F%90%9B%20bug", "name": "\ud83d\udc1b bug", "color": "fc2929", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-03T12:05:39Z", "updated_at": "2020-08-03T21:58:25Z", "closed_at": "2020-08-03T21:58:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using dataloader but the values returned are all null.  Here is my setup. \r\n\r\n\r\n```python\r\nclass UserLoader(DataLoader):\r\n    def batch_load_fn(self, keys):\r\n        print(inspect.stack()[0][3])\r\n        print(keys) #This also returns the correct arrays with all keys\r\n        response = collection_lmtdLblty.find({\"mbrUid\": {\"$in\": keys}})\r\n        \r\n        responseMap = {}\r\n        for key in response:\r\n            responseMap[key[\"mbrUid\"]] = key\r\n\r\n        print([responseMap.get(key) for key in keys]) #This returns correct values\r\n        return Promise.resolve([responseMap.get(key) for key in keys])\r\n\r\n\r\nuser_loader = UserLoader()\r\n```\r\nThen further down \r\n```python\r\nclass Members(ObjectType):\r\n\r\n    mbrUid = String()\r\n    limitedLiability = List(lambda: LimitedLiability,\r\n                            description=\"Join with limited liability.\")\r\n\r\n    def resolve_limitedLiability(self, info):\r\n        return user_loader.load(self[\"mbrUid\"])\r\n```\r\n\r\nBut this renders the values of all fields in limitedLiability as null. No errors as such. Just nulls wherever it found an id match. Wherever it didn't, its an empty array. \r\n\r\n\r\n  - Version:Graphene 2.1.8\r\n  - Platform: Python 3.8.5\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1242", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1242/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1242/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1242/events", "html_url": "https://github.com/graphql-python/graphene/issues/1242", "id": 671859277, "node_id": "MDU6SXNzdWU2NzE4NTkyNzc=", "number": 1242, "title": "SUBSCRIPTION_PATH is ignored in v3?", "user": {"login": "hyusetiawan", "id": 1062920, "node_id": "MDQ6VXNlcjEwNjI5MjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1062920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hyusetiawan", "html_url": "https://github.com/hyusetiawan", "followers_url": "https://api.github.com/users/hyusetiawan/followers", "following_url": "https://api.github.com/users/hyusetiawan/following{/other_user}", "gists_url": "https://api.github.com/users/hyusetiawan/gists{/gist_id}", "starred_url": "https://api.github.com/users/hyusetiawan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hyusetiawan/subscriptions", "organizations_url": "https://api.github.com/users/hyusetiawan/orgs", "repos_url": "https://api.github.com/users/hyusetiawan/repos", "events_url": "https://api.github.com/users/hyusetiawan/events{/privacy}", "received_events_url": "https://api.github.com/users/hyusetiawan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481170, "node_id": "MDU6TGFiZWwyNjQ0ODExNzA=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%F0%9F%90%9B%20bug", "name": "\ud83d\udc1b bug", "color": "fc2929", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-03T07:20:30Z", "updated_at": "2020-08-06T19:55:36Z", "closed_at": "2020-08-06T19:55:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Note: for support questions, please use stackoverflow**. This repository's issues are reserved for feature requests and bug reports.\r\n\r\n* **What is the current behavior?**\r\nfrom this doc: https://docs.graphene-python.org/projects/django/en/latest/subscriptions/\r\nI set SUBSCRIPTION_PATH like so:\r\n```\r\nGRAPHENE = {\r\n    \"SCHEMA\": \"api.schema.schema\",\r\n    \"MIDDLEWARE\": [],\r\n    \"SUBSCRIPTION_PATH\": \"/ws/test/\",\r\n}\r\n```\r\nand I am using the subscription example here: https://docs.graphene-python.org/en/latest/execution/execute/#schemaexecute\r\nrunning graphiql with the following query:\r\n```\r\nsubscription {\r\n  timeOfDay\r\n}\r\n```\r\nand the result is `timeOfDay: null` with no websocket connection being made according to dev console\r\n\r\n\r\n* **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem** via\r\na github repo, https://repl.it or similar.\r\n\r\n\r\n\r\n* **What is the expected behavior?**\r\ncreate a websocket connection to `/ws/test`\r\n\r\n\r\n\r\n* **Please tell us about your environment:**\r\n\r\n  - Version: graphene==3.0.0b4 Django==3.0.8 channels==2.4.0\r\n\r\n\r\n\r\n  - Platform: mac os\r\n\r\n* **Other information** (e.g. detailed explanation, stacktraces, related issues, suggestions how to fix, links for us to have context, eg. stackoverflow)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1231", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1231/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1231/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1231/events", "html_url": "https://github.com/graphql-python/graphene/issues/1231", "id": 657942651, "node_id": "MDU6SXNzdWU2NTc5NDI2NTE=", "number": 1231, "title": "NormalCursorWrapper falls with UnicodeDecodeError in python 2", "user": {"login": "subv13", "id": 5451490, "node_id": "MDQ6VXNlcjU0NTE0OTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/5451490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/subv13", "html_url": "https://github.com/subv13", "followers_url": "https://api.github.com/users/subv13/followers", "following_url": "https://api.github.com/users/subv13/following{/other_user}", "gists_url": "https://api.github.com/users/subv13/gists{/gist_id}", "starred_url": "https://api.github.com/users/subv13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/subv13/subscriptions", "organizations_url": "https://api.github.com/users/subv13/orgs", "repos_url": "https://api.github.com/users/subv13/repos", "events_url": "https://api.github.com/users/subv13/events{/privacy}", "received_events_url": "https://api.github.com/users/subv13/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481170, "node_id": "MDU6TGFiZWwyNjQ0ODExNzA=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%F0%9F%90%9B%20bug", "name": "\ud83d\udc1b bug", "color": "fc2929", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-16T07:43:41Z", "updated_at": "2020-07-16T08:23:48Z", "closed_at": "2020-07-16T08:23:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **Current behavior**\r\n`graphene_django.debug.sql.tracking.NormalCursorWrapper._quote_expr` falls with `UnicodeDecodeError` in python 2\r\n\r\n\r\n* **Steps to reproduce** \r\nhttps://gist.github.com/subv13/826a0f6e34159f6c27bdf8c4f4fa5f2e\r\n\r\n\r\n\r\n* **Expected behavior**\r\n`graphene_django.debug.sql.tracking.NormalCursorWrapper._quote_expr` don't falls with `UnicodeDecodeError` in python 2 \ud83d\ude09 \r\n\r\n\r\n* **Environment:**\r\n  - Version: python 2.7.15\r\n  - Platform: MacOS Catalina\r\n\r\n* **Other information** \r\nI think properly use `django.utils.encoding.force_tex`t inside `_quote_expr` instead of `django.utils.encoding.force_str`. If i'm right i can fix it and send PR\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1228", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1228/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1228/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1228/events", "html_url": "https://github.com/graphql-python/graphene/issues/1228", "id": 655533113, "node_id": "MDU6SXNzdWU2NTU1MzMxMTM=", "number": 1228, "title": "Does graphene support multiple input types", "user": {"login": "shmilyhurt", "id": 55658709, "node_id": "MDQ6VXNlcjU1NjU4NzA5", "avatar_url": "https://avatars0.githubusercontent.com/u/55658709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shmilyhurt", "html_url": "https://github.com/shmilyhurt", "followers_url": "https://api.github.com/users/shmilyhurt/followers", "following_url": "https://api.github.com/users/shmilyhurt/following{/other_user}", "gists_url": "https://api.github.com/users/shmilyhurt/gists{/gist_id}", "starred_url": "https://api.github.com/users/shmilyhurt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shmilyhurt/subscriptions", "organizations_url": "https://api.github.com/users/shmilyhurt/orgs", "repos_url": "https://api.github.com/users/shmilyhurt/repos", "events_url": "https://api.github.com/users/shmilyhurt/events{/privacy}", "received_events_url": "https://api.github.com/users/shmilyhurt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481170, "node_id": "MDU6TGFiZWwyNjQ0ODExNzA=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%F0%9F%90%9B%20bug", "name": "\ud83d\udc1b bug", "color": "fc2929", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-13T02:16:02Z", "updated_at": "2020-07-13T09:30:40Z", "closed_at": "2020-07-13T09:30:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I maybe need this:\r\n\r\n```\r\nquery GetData{\r\n   name(a:\"www\")\r\n}\r\n```\r\nand\r\n\r\n```\r\nquery GetData{\r\n   name(a:{\"host\":\"www\"})\r\n}\r\n```\r\n\r\nIs there any way to support multiple input types\uff1f\r\nthanks\uff01", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1222", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1222/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1222/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1222/events", "html_url": "https://github.com/graphql-python/graphene/issues/1222", "id": 649922830, "node_id": "MDU6SXNzdWU2NDk5MjI4MzA=", "number": 1222, "title": "No type verification", "user": {"login": "tobiasfeil", "id": 17533713, "node_id": "MDQ6VXNlcjE3NTMzNzEz", "avatar_url": "https://avatars1.githubusercontent.com/u/17533713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobiasfeil", "html_url": "https://github.com/tobiasfeil", "followers_url": "https://api.github.com/users/tobiasfeil/followers", "following_url": "https://api.github.com/users/tobiasfeil/following{/other_user}", "gists_url": "https://api.github.com/users/tobiasfeil/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobiasfeil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobiasfeil/subscriptions", "organizations_url": "https://api.github.com/users/tobiasfeil/orgs", "repos_url": "https://api.github.com/users/tobiasfeil/repos", "events_url": "https://api.github.com/users/tobiasfeil/events{/privacy}", "received_events_url": "https://api.github.com/users/tobiasfeil/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481170, "node_id": "MDU6TGFiZWwyNjQ0ODExNzA=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%F0%9F%90%9B%20bug", "name": "\ud83d\udc1b bug", "color": "fc2929", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-02T13:15:54Z", "updated_at": "2020-07-03T07:41:09Z", "closed_at": "2020-07-02T17:49:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I define a class like this\r\n```\r\nclass Person(graphene.ObjectType):\r\n    age = graphene.Int()\r\n```\r\nand later instantiate it like this:\r\n```\r\nPerson(age='five')\r\n```\r\nno type error is thrown, even though I specified that age should be an Int.\r\n\r\nI suppose this is not on purpose?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1220", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1220/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1220/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1220/events", "html_url": "https://github.com/graphql-python/graphene/issues/1220", "id": 647469857, "node_id": "MDU6SXNzdWU2NDc0Njk4NTc=", "number": 1220, "title": "Non-null InputField with default_value is not supported", "user": {"login": "radekwlsk", "id": 9338199, "node_id": "MDQ6VXNlcjkzMzgxOTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/9338199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/radekwlsk", "html_url": "https://github.com/radekwlsk", "followers_url": "https://api.github.com/users/radekwlsk/followers", "following_url": "https://api.github.com/users/radekwlsk/following{/other_user}", "gists_url": "https://api.github.com/users/radekwlsk/gists{/gist_id}", "starred_url": "https://api.github.com/users/radekwlsk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/radekwlsk/subscriptions", "organizations_url": "https://api.github.com/users/radekwlsk/orgs", "repos_url": "https://api.github.com/users/radekwlsk/repos", "events_url": "https://api.github.com/users/radekwlsk/events{/privacy}", "received_events_url": "https://api.github.com/users/radekwlsk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481170, "node_id": "MDU6TGFiZWwyNjQ0ODExNzA=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%F0%9F%90%9B%20bug", "name": "\ud83d\udc1b bug", "color": "fc2929", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-06-29T15:27:54Z", "updated_at": "2020-06-30T14:01:53Z", "closed_at": "2020-06-30T13:33:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "According to GraphQL spec change introduced in this pull request https://github.com/graphql/graphql-spec/pull/418 it should be possible to define input field as non-null with default and make it take that default value if not provided.\r\n\r\n* **What is the current behavior?**\r\n\r\n```python\r\nclass MyInput(graphene.InputObjectType):\r\n    name = graphene.String(required=True)\r\n    myInput = graphene.InputField(\r\n        graphene.Boolean,\r\n        default_value=True,\r\n        required=True,\r\n    )\r\n```\r\n\r\n```graphql\r\ninput MyInput {\r\n    name: String!\r\n    myValue: Boolean! = true\r\n}\r\n```\r\nwhen provided as `{\"name\": \"foo\"}` results in\r\n\r\n> `{'errors': [{'message': 'Variable \"$input\" got invalid value {\"name\": \"foo\"}.\\nIn field \"myValue\": Expected \"Boolean!\", found null.'}]}`\r\n\r\n* **What is the expected behavior?**\r\n\r\nWhen input field has a default (`true` here) and is non-null providing `{\"name\": \"foo\"}` should results in passing `{\"name\": \"foo\", \"myValue\": true}` to the mutation and no errors.\r\n\r\n\r\nError\r\n> `{'errors': [{'message': 'Variable \"$input\" got invalid value {\"name\": \"foo\"}.\\nIn field \"myValue\": Expected \"Boolean!\", found null.'}]}`\r\n\r\nshould only occur when input has `myValue` explicitly provided as `null`/`None`.\r\n\r\n\r\n* **What is the motivation / use case for changing the behavior?**\r\n\r\nThat should be the default behaviour according to GraphQL spec: https://github.com/graphql/graphql-spec/pull/418", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1218", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1218/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1218/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1218/events", "html_url": "https://github.com/graphql-python/graphene/issues/1218", "id": 646538316, "node_id": "MDU6SXNzdWU2NDY1MzgzMTY=", "number": 1218, "title": "Allow pass extra context values to - handle_graphql", "user": {"login": "MabaKalox", "id": 52936597, "node_id": "MDQ6VXNlcjUyOTM2NTk3", "avatar_url": "https://avatars2.githubusercontent.com/u/52936597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MabaKalox", "html_url": "https://github.com/MabaKalox", "followers_url": "https://api.github.com/users/MabaKalox/followers", "following_url": "https://api.github.com/users/MabaKalox/following{/other_user}", "gists_url": "https://api.github.com/users/MabaKalox/gists{/gist_id}", "starred_url": "https://api.github.com/users/MabaKalox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MabaKalox/subscriptions", "organizations_url": "https://api.github.com/users/MabaKalox/orgs", "repos_url": "https://api.github.com/users/MabaKalox/repos", "events_url": "https://api.github.com/users/MabaKalox/events{/privacy}", "received_events_url": "https://api.github.com/users/MabaKalox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481172, "node_id": "MDU6TGFiZWwyNjQ0ODExNzI=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%E2%9C%A8%20enhancement", "name": "\u2728 enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-26T22:15:29Z", "updated_at": "2020-06-26T23:07:11Z", "closed_at": "2020-06-26T23:07:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\nI need to pass database session to context of grqphql request, but handle_graphql accept only one argument - request\r\n\r\n**Describe the solution you'd like**\r\nTo method *handle_graphql* add extra argument - context_values\r\nand add them to context like so:\r\n        context = {\"request\": request, \"background\": background}\r\n        context.update(context_values)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1217", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1217/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1217/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1217/events", "html_url": "https://github.com/graphql-python/graphene/issues/1217", "id": 646189948, "node_id": "MDU6SXNzdWU2NDYxODk5NDg=", "number": 1217, "title": "When raise exception I got graphql error", "user": {"login": "Bunlong", "id": 1308397, "node_id": "MDQ6VXNlcjEzMDgzOTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1308397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bunlong", "html_url": "https://github.com/Bunlong", "followers_url": "https://api.github.com/users/Bunlong/followers", "following_url": "https://api.github.com/users/Bunlong/following{/other_user}", "gists_url": "https://api.github.com/users/Bunlong/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bunlong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bunlong/subscriptions", "organizations_url": "https://api.github.com/users/Bunlong/orgs", "repos_url": "https://api.github.com/users/Bunlong/repos", "events_url": "https://api.github.com/users/Bunlong/events{/privacy}", "received_events_url": "https://api.github.com/users/Bunlong/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481170, "node_id": "MDU6TGFiZWwyNjQ0ODExNzA=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%F0%9F%90%9B%20bug", "name": "\ud83d\udc1b bug", "color": "fc2929", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-26T11:12:40Z", "updated_at": "2020-07-08T10:58:28Z", "closed_at": "2020-07-08T10:58:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just move from using `responder` library to `starlette`. I got the graphql error when I raise exception.\r\n\r\nServer:\r\n\r\n```js\r\napp = Starlette(debug=True, routes=[\r\n    Route('/', show_version),\r\n    Route('/healthz', check_health),\r\n    Route('/graphql', GraphQLApp(schema=schema)),\r\n])\r\n\r\nif __name__ == '__main__':\r\n    uvicorn.run(app, host='0.0.0.0', port=9090)\r\n```\r\n\r\nSchema:\r\n\r\n```\r\n...\r\n\r\nraise Exception('Something wrong')\r\n\r\n...\r\n```\r\n\r\nError:\r\n\r\n![Screenshot from 2020-06-24 13-40-48](https://user-images.githubusercontent.com/1308397/85851238-80cda080-b7d8-11ea-8f39-efef4aeff30f.png)\r\n\r\nWhat I expect is it return error message `Something wrong`. instead of error above. \r\n\r\n- Version: 2.1.3\r\n- Platform: Linux (Ubuntu)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1210", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1210/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1210/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1210/events", "html_url": "https://github.com/graphql-python/graphene/issues/1210", "id": 642557228, "node_id": "MDU6SXNzdWU2NDI1NTcyMjg=", "number": 1210, "title": "documentation about arguments in middleware", "user": {"login": "tobiasfeil", "id": 17533713, "node_id": "MDQ6VXNlcjE3NTMzNzEz", "avatar_url": "https://avatars1.githubusercontent.com/u/17533713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobiasfeil", "html_url": "https://github.com/tobiasfeil", "followers_url": "https://api.github.com/users/tobiasfeil/followers", "following_url": "https://api.github.com/users/tobiasfeil/following{/other_user}", "gists_url": "https://api.github.com/users/tobiasfeil/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobiasfeil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobiasfeil/subscriptions", "organizations_url": "https://api.github.com/users/tobiasfeil/orgs", "repos_url": "https://api.github.com/users/tobiasfeil/repos", "events_url": "https://api.github.com/users/tobiasfeil/events{/privacy}", "received_events_url": "https://api.github.com/users/tobiasfeil/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481172, "node_id": "MDU6TGFiZWwyNjQ0ODExNzI=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%E2%9C%A8%20enhancement", "name": "\u2728 enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-21T12:47:51Z", "updated_at": "2020-06-21T13:04:52Z", "closed_at": "2020-06-21T13:04:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the docs, it says that when defining middleware, you can pass **args. It says \"args is the dict of arguments passed to the field\". But how exactly is that done? How and where can I pass the arguments? Within `schema.execute`, or somewhere else?\r\n\r\nI've looked for a long time now and haven't found any examples/explanation how to pass arguments.\r\n\r\nBackground: I'm trying to implement authorization letting the user get only their own data from a database. In order to do that, I have to pass the username to the middleware, right? Or is there a better way?\r\n\r\nThanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1208", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1208/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1208/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1208/events", "html_url": "https://github.com/graphql-python/graphene/issues/1208", "id": 638946267, "node_id": "MDU6SXNzdWU2Mzg5NDYyNjc=", "number": 1208, "title": "Drop Unidecode Dependency", "user": {"login": "AlecRosenbaum", "id": 1953412, "node_id": "MDQ6VXNlcjE5NTM0MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1953412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlecRosenbaum", "html_url": "https://github.com/AlecRosenbaum", "followers_url": "https://api.github.com/users/AlecRosenbaum/followers", "following_url": "https://api.github.com/users/AlecRosenbaum/following{/other_user}", "gists_url": "https://api.github.com/users/AlecRosenbaum/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlecRosenbaum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlecRosenbaum/subscriptions", "organizations_url": "https://api.github.com/users/AlecRosenbaum/orgs", "repos_url": "https://api.github.com/users/AlecRosenbaum/repos", "events_url": "https://api.github.com/users/AlecRosenbaum/events{/privacy}", "received_events_url": "https://api.github.com/users/AlecRosenbaum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481170, "node_id": "MDU6TGFiZWwyNjQ0ODExNzA=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%F0%9F%90%9B%20bug", "name": "\ud83d\udc1b bug", "color": "fc2929", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "jkimbo", "id": 691952, "node_id": "MDQ6VXNlcjY5MTk1Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/691952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkimbo", "html_url": "https://github.com/jkimbo", "followers_url": "https://api.github.com/users/jkimbo/followers", "following_url": "https://api.github.com/users/jkimbo/following{/other_user}", "gists_url": "https://api.github.com/users/jkimbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkimbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkimbo/subscriptions", "organizations_url": "https://api.github.com/users/jkimbo/orgs", "repos_url": "https://api.github.com/users/jkimbo/repos", "events_url": "https://api.github.com/users/jkimbo/events{/privacy}", "received_events_url": "https://api.github.com/users/jkimbo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jkimbo", "id": 691952, "node_id": "MDQ6VXNlcjY5MTk1Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/691952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkimbo", "html_url": "https://github.com/jkimbo", "followers_url": "https://api.github.com/users/jkimbo/followers", "following_url": "https://api.github.com/users/jkimbo/following{/other_user}", "gists_url": "https://api.github.com/users/jkimbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkimbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkimbo/subscriptions", "organizations_url": "https://api.github.com/users/jkimbo/orgs", "repos_url": "https://api.github.com/users/jkimbo/repos", "events_url": "https://api.github.com/users/jkimbo/events{/privacy}", "received_events_url": "https://api.github.com/users/jkimbo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-06-15T15:31:44Z", "updated_at": "2020-06-25T02:21:41Z", "closed_at": "2020-06-25T02:21:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Related: https://github.com/graphql-python/graphene/issues/1079\r\n\r\nPR https://github.com/graphql-python/graphene/pull/1080 (which fixes the above linked issue) added a new dependency to this project, `Unidecode`.\r\n\r\nI'd like to suggest dropping this dependency, and possibly removing this utility function.\r\n\r\nFrom what I can tell the `to_const` utility is not actually used in this library at all, and just from spot checking seems to only be used by `graphene-django`. The linked issue specifically uses a `graphene-django` example. If this is only used upstream in one spot, it might be worth moving the utility + dependency there instead.\r\n\r\nIt's possible the average use case also involves `graphene-djagno` and would require this dependency regardless, but for those that don't it would be nice not to require `unidecode` for a single-line utility function that may or may not be used.\r\n\r\nWhile neither package is huge, [`unidecode`](https://pypi.org/project/Unidecode/#files) is a few times larger than [`graphene`](https://pypi.org/project/graphene/3.0b2/#files) according to pypi's downloads.\r\n\r\nDepending on what the best option forward here is, I am happy to submit a PR that either:\r\n* removes the `to_const` function + drops `unidecode`\r\n* makes `unidecode` an optional dependency specified by\r\n  ```extras_require: { 'unidecode': \"unidecode>=1.1.1,<2\", ... }```\r\n* reverts to a simpler unicode decode handler, with something like `str(string, errors=\"ignore\")` + drops `unidecode`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1207", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1207/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1207/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1207/events", "html_url": "https://github.com/graphql-python/graphene/issues/1207", "id": 637160151, "node_id": "MDU6SXNzdWU2MzcxNjAxNTE=", "number": 1207, "title": "Compose Queries like in Apollo", "user": {"login": "japrogramer", "id": 1387859, "node_id": "MDQ6VXNlcjEzODc4NTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1387859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japrogramer", "html_url": "https://github.com/japrogramer", "followers_url": "https://api.github.com/users/japrogramer/followers", "following_url": "https://api.github.com/users/japrogramer/following{/other_user}", "gists_url": "https://api.github.com/users/japrogramer/gists{/gist_id}", "starred_url": "https://api.github.com/users/japrogramer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japrogramer/subscriptions", "organizations_url": "https://api.github.com/users/japrogramer/orgs", "repos_url": "https://api.github.com/users/japrogramer/repos", "events_url": "https://api.github.com/users/japrogramer/events{/privacy}", "received_events_url": "https://api.github.com/users/japrogramer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481172, "node_id": "MDU6TGFiZWwyNjQ0ODExNzI=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%E2%9C%A8%20enhancement", "name": "\u2728 enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-11T16:28:09Z", "updated_at": "2020-06-11T17:56:51Z", "closed_at": "2020-06-11T17:56:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have some mutations/queries that i want to compose into a single query/mutation.\r\n\r\nfor ex.\r\n```\r\norganization = \"\"\"\r\nmutation ( $organization: OrganizationInput!) {\r\n  Organization: createOrfOrganization (details: $organization) {\r\n    obj {\r\n      id\r\n    }\r\n    status\r\n    errors\r\n  }\r\n}\r\n\"\"\"\r\n\r\ntaxonomy = \"\"\"\r\nmutation ($taxonomy: TaxonomyInput!) {\r\n  Taxonomy: createOrfTaxonomy (details: $taxonomy) {\r\n    obj {\r\n      id\r\n    }\r\n    status\r\n    errors\r\n  }\r\n}\r\n\"\"\"\r\n```\r\n\r\nI would like to have a function that can take the code above and do something like this\r\n```\r\n>>> compose(organization, taxonomy)\r\nmutation ( $organization: OrganizationInput!, $taxonomy: TaxonomyInput!) {\r\n  Organization: createOrfOrganization (details: $organization) {\r\n    obj {\r\n      id\r\n    }\r\n    status\r\n    errors\r\n  }\r\n  Taxonomy: createOrfTaxonomy (details: $taxonomy) {\r\n    obj {\r\n      id\r\n    }\r\n    status\r\n    errors\r\n  }\r\n}\r\n```\r\n\r\nThis is an important feature that the python code should support.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1205", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1205/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1205/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1205/events", "html_url": "https://github.com/graphql-python/graphene/issues/1205", "id": 636492410, "node_id": "MDU6SXNzdWU2MzY0OTI0MTA=", "number": 1205, "title": "Should Mutation.mutate be @staticmethod or not", "user": {"login": "vshih", "id": 52390, "node_id": "MDQ6VXNlcjUyMzkw", "avatar_url": "https://avatars1.githubusercontent.com/u/52390?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vshih", "html_url": "https://github.com/vshih", "followers_url": "https://api.github.com/users/vshih/followers", "following_url": "https://api.github.com/users/vshih/following{/other_user}", "gists_url": "https://api.github.com/users/vshih/gists{/gist_id}", "starred_url": "https://api.github.com/users/vshih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vshih/subscriptions", "organizations_url": "https://api.github.com/users/vshih/orgs", "repos_url": "https://api.github.com/users/vshih/repos", "events_url": "https://api.github.com/users/vshih/events{/privacy}", "received_events_url": "https://api.github.com/users/vshih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481170, "node_id": "MDU6TGFiZWwyNjQ0ODExNzA=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%F0%9F%90%9B%20bug", "name": "\ud83d\udc1b bug", "color": "fc2929", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-10T19:27:39Z", "updated_at": "2020-06-25T02:19:00Z", "closed_at": "2020-06-25T02:19:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Note: for support questions, please use stackoverflow**. This repository's issues are reserved for feature requests and bug reports.\r\n\r\n* **What is the current behavior?**\r\n\r\nhttps://github.com/graphql-python/graphene/blob/master/docs/types/mutations.rst#L22\r\n\r\ndoes not specify the `@staticmethod` decorator, vs.\r\n\r\nhttps://github.com/graphql-python/graphene/blob/master/docs/types/mutations.rst#L107\r\n\r\ndoes.\r\n\r\n\r\n* **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem** via\r\na github repo, https://repl.it or similar.\r\n\r\n\r\n\r\n* **What is the expected behavior?**\r\nOne or the other.\r\n\r\n\r\n* **What is the motivation / use case for changing the behavior?**\r\n\r\n\r\n\r\n* **Please tell us about your environment:**\r\n\r\n  - Version:\r\n  - Platform:\r\n\r\n* **Other information** (e.g. detailed explanation, stacktraces, related issues, suggestions how to fix, links for us to have context, eg. stackoverflow)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1203", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1203/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1203/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1203/events", "html_url": "https://github.com/graphql-python/graphene/issues/1203", "id": 631337011, "node_id": "MDU6SXNzdWU2MzEzMzcwMTE=", "number": 1203, "title": "Need help with 415 Unsupported media type ", "user": {"login": "licht1stein", "id": 35418634, "node_id": "MDQ6VXNlcjM1NDE4NjM0", "avatar_url": "https://avatars2.githubusercontent.com/u/35418634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/licht1stein", "html_url": "https://github.com/licht1stein", "followers_url": "https://api.github.com/users/licht1stein/followers", "following_url": "https://api.github.com/users/licht1stein/following{/other_user}", "gists_url": "https://api.github.com/users/licht1stein/gists{/gist_id}", "starred_url": "https://api.github.com/users/licht1stein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/licht1stein/subscriptions", "organizations_url": "https://api.github.com/users/licht1stein/orgs", "repos_url": "https://api.github.com/users/licht1stein/repos", "events_url": "https://api.github.com/users/licht1stein/events{/privacy}", "received_events_url": "https://api.github.com/users/licht1stein/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481170, "node_id": "MDU6TGFiZWwyNjQ0ODExNzA=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%F0%9F%90%9B%20bug", "name": "\ud83d\udc1b bug", "color": "fc2929", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-05T06:06:43Z", "updated_at": "2020-06-05T07:06:25Z", "closed_at": "2020-06-05T07:06:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have asked a question on SO, sorry to write here as well but I'm quite stuck \ud83e\udd26\u200d\u2642\ufe0f \r\n\r\nhttps://stackoverflow.com/questions/62199677/http-415-on-graphql-query-from-apollo-client-to-graphene-python", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1202", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1202/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1202/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1202/events", "html_url": "https://github.com/graphql-python/graphene/issues/1202", "id": 631231708, "node_id": "MDU6SXNzdWU2MzEyMzE3MDg=", "number": 1202, "title": "Question regarding UUID returned by schema.execute", "user": {"login": "cglacet", "id": 28622118, "node_id": "MDQ6VXNlcjI4NjIyMTE4", "avatar_url": "https://avatars2.githubusercontent.com/u/28622118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cglacet", "html_url": "https://github.com/cglacet", "followers_url": "https://api.github.com/users/cglacet/followers", "following_url": "https://api.github.com/users/cglacet/following{/other_user}", "gists_url": "https://api.github.com/users/cglacet/gists{/gist_id}", "starred_url": "https://api.github.com/users/cglacet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cglacet/subscriptions", "organizations_url": "https://api.github.com/users/cglacet/orgs", "repos_url": "https://api.github.com/users/cglacet/repos", "events_url": "https://api.github.com/users/cglacet/events{/privacy}", "received_events_url": "https://api.github.com/users/cglacet/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481172, "node_id": "MDU6TGFiZWwyNjQ0ODExNzI=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%E2%9C%A8%20enhancement", "name": "\u2728 enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-05T00:41:14Z", "updated_at": "2020-06-06T16:12:59Z", "closed_at": "2020-06-06T11:45:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I struggle finding a way to retrieve my identifiers from base (UUID) using a simple query: \r\n\r\n```graphql\r\nfindUser(login: \"cglacet\"){ id }\r\n```\r\n\r\nThe ID for this user is supposed to be `6ed2b747-e6bd-4853-b7a1-e3f611549940`, but I get the following result: \r\n\r\n```json\r\n{\r\n    \"data\": {\r\n        \"findUser\": {\r\n            \"id\": \"VXNlcjo2ZWQyYjc0Ny1lNmJkLTQ4NTMtYjdhMS1lM2Y2MTE1NDk5NDA=\"\r\n        },\r\n    }\r\n}\r\n```\r\n\r\nI investigated a bit and it seems that the problem arise somewhere between the result I get in my resolver (which has the correct ID value) and the schema.execute return value (which doesn't have the correct ID value).\r\n\r\n### Model/schema\r\n\r\nFor context, here are my model and schema:\r\n\r\n```python\r\nclass User(database.Base):\r\n    __tablename__ = 'users'\r\n\r\n    id = Column(UUID(as_uuid=True), primary_key=True, nullable=False, default=uuid.uuid4)\r\n    login = Column(String(100), nullable=False, index=True, unique=True)\r\n    password = Column(String(60), nullable=False)\r\n\r\n    @validates('password')\r\n    def validate_password(self, key, raw_password):\r\n        return bcrypt.hash(raw_password)\r\n```\r\n\r\n```python\r\nclass User(SQLAlchemyObjectType):\r\n    class Meta:\r\n        model = models.User\r\n        interfaces = (relay.Node, )\r\n```\r\n\r\n### UUID from within the resolver\r\n\r\nFrom within the resolver I get the expected UUID (the one stored in my postgres database):\r\n\r\n```python\r\nclass Query(graphene.ObjectType):\r\n    \r\n    find_user = graphene.Field(lambda: User, login=graphene.String())\r\n    \r\n    def resolve_find_user(self, info, login=None):\r\n        query = User.get_query(info)\r\n        user = query.filter(models.User.login == login).first()\r\n        logging.info(f\"Resolver user.id = {user.id}\")\r\n        return user\r\n```\r\n\r\n```bash\r\nINFO:     Resolver user.id = 6ed2b747-e6bd-4853-b7a1-e3f611549940\r\n```\r\n\r\n### UUID output from execute\r\n\r\nWhen using executing the query from `schema`:\r\n\r\n```python\r\nresult = schema.execute(\"\"\"{\r\n    findUser(login: \"cglacet\"){\r\n        lastname,\r\n        id\r\n    }\r\n}\"\"\")\r\nlogging.info(f\"Schema user.id = {result.data['findUser']['id']}\")\r\n```\r\n\r\nOutputs: \r\n\r\n```bash\r\nINFO: Schema user.id = VXNlcjo2ZWQyYjc0Ny1lNmJkLTQ4NTMtYjdhMS1lM2Y2MTE1NDk5NDA=\r\n```\r\n\r\nAm I doing something wrong? Or is this the expected behaviour, couldn't find any information on this and I struggle finding what is causing this. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1199", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1199/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1199/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1199/events", "html_url": "https://github.com/graphql-python/graphene/issues/1199", "id": 625610775, "node_id": "MDU6SXNzdWU2MjU2MTA3NzU=", "number": 1199, "title": "Date Scalar exception via value_from_ast utility function", "user": {"login": "paultop6", "id": 3258230, "node_id": "MDQ6VXNlcjMyNTgyMzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3258230?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paultop6", "html_url": "https://github.com/paultop6", "followers_url": "https://api.github.com/users/paultop6/followers", "following_url": "https://api.github.com/users/paultop6/following{/other_user}", "gists_url": "https://api.github.com/users/paultop6/gists{/gist_id}", "starred_url": "https://api.github.com/users/paultop6/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paultop6/subscriptions", "organizations_url": "https://api.github.com/users/paultop6/orgs", "repos_url": "https://api.github.com/users/paultop6/repos", "events_url": "https://api.github.com/users/paultop6/events{/privacy}", "received_events_url": "https://api.github.com/users/paultop6/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481170, "node_id": "MDU6TGFiZWwyNjQ0ODExNzA=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%F0%9F%90%9B%20bug", "name": "\ud83d\udc1b bug", "color": "fc2929", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-27T11:24:27Z", "updated_at": "2020-06-05T04:31:02Z", "closed_at": "2020-06-05T04:31:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Note: for support questions, please use stackoverflow**. This repository's issues are reserved for feature requests and bug reports.\r\n\r\n* **What is the current behavior?**\r\nWhen passing variables to the graphql query, there is an exception raised when trying to use Date Scalar.  This originates in value_from_ast utility function.  When variables are defined, it calls type_.parse_literal(value_node, variables), but the Date.parse_literal function definition can only handle one parameter (value_node)\r\n\r\n\r\n* **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem** via\r\na github repo, https://repl.it or similar.\r\nhttps://repl.it/repls/FlickeringAggravatingInterchangeability#main.py\r\n\r\n\r\n* **What is the expected behavior?**\r\nShould be able to handle variables without issue\r\n\r\n\r\n* **What is the motivation / use case for changing the behavior?**\r\nFix bug\r\n\r\n\r\n* **Please tell us about your environment:**\r\n\r\n  - Version:\r\n3.0.0b2\r\n  - Platform:\r\nUbuntu 18.04, python 3.7.6\r\n\r\n* **Other information** (e.g. detailed explanation, stacktraces, related issues, suggestions how to fix, links for us to have context, eg. stackoverflow)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1196", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1196/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1196/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1196/events", "html_url": "https://github.com/graphql-python/graphene/issues/1196", "id": 620009230, "node_id": "MDU6SXNzdWU2MjAwMDkyMzA=", "number": 1196, "title": "Support generation of graphql query from ObjectType", "user": {"login": "jnoortheen", "id": 6702219, "node_id": "MDQ6VXNlcjY3MDIyMTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6702219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jnoortheen", "html_url": "https://github.com/jnoortheen", "followers_url": "https://api.github.com/users/jnoortheen/followers", "following_url": "https://api.github.com/users/jnoortheen/following{/other_user}", "gists_url": "https://api.github.com/users/jnoortheen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jnoortheen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jnoortheen/subscriptions", "organizations_url": "https://api.github.com/users/jnoortheen/orgs", "repos_url": "https://api.github.com/users/jnoortheen/repos", "events_url": "https://api.github.com/users/jnoortheen/events{/privacy}", "received_events_url": "https://api.github.com/users/jnoortheen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481172, "node_id": "MDU6TGFiZWwyNjQ0ODExNzI=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%E2%9C%A8%20enhancement", "name": "\u2728 enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-18T08:25:19Z", "updated_at": "2020-05-21T12:18:18Z", "closed_at": "2020-05-21T12:18:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\nIt is hard to write grqphql query as strings without any syntax validation during tests.\r\n```\r\nquery = '''query { \r\n  ...\r\n }'''\r\n```\r\n\r\n**Describe the solution you'd like**\r\nIf it is possible to automatically generate the graphql queries from `ObjectType ` classes, then this overhead can be minimized. Also is it possible to incorporate something similar to [quiz](https://quiz.readthedocs.io/en/latest/guide.html#constructing-graphql) 's way of constructing queries?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1193", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1193/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1193/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1193/events", "html_url": "https://github.com/graphql-python/graphene/issues/1193", "id": 609033414, "node_id": "MDU6SXNzdWU2MDkwMzM0MTQ=", "number": 1193, "title": "Import error with graphene==3.0b1", "user": {"login": "asodeur", "id": 38456167, "node_id": "MDQ6VXNlcjM4NDU2MTY3", "avatar_url": "https://avatars2.githubusercontent.com/u/38456167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asodeur", "html_url": "https://github.com/asodeur", "followers_url": "https://api.github.com/users/asodeur/followers", "following_url": "https://api.github.com/users/asodeur/following{/other_user}", "gists_url": "https://api.github.com/users/asodeur/gists{/gist_id}", "starred_url": "https://api.github.com/users/asodeur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asodeur/subscriptions", "organizations_url": "https://api.github.com/users/asodeur/orgs", "repos_url": "https://api.github.com/users/asodeur/repos", "events_url": "https://api.github.com/users/asodeur/events{/privacy}", "received_events_url": "https://api.github.com/users/asodeur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-29T12:53:30Z", "updated_at": "2020-04-29T13:19:48Z", "closed_at": "2020-04-29T13:19:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`graphene==3.0b1` and `graphql-core==3.1.0` do not seem to get along. On import you get\r\n```\r\nTraceback (most recent call last):\r\n  File \"d:\\localdata\\pycharmprojects\\vaporweb2\\py\\vapor\\relay_vapor\\vapor_types.py\", line 4, in <module>\r\n    from graphene import Boolean, Field, Float, InputObjectType, Int, Interface, List, ObjectType, String, Union\r\n  File \"D:\\localdata\\virtualenvs\\vapor-FkdI2ftv-py3.8\\lib\\site-packages\\graphene\\__init__.py\", line 3, in <module>\r\n    from .types import (\r\n  File \"D:\\localdata\\virtualenvs\\vapor-FkdI2ftv-py3.8\\lib\\site-packages\\graphene\\types\\__init__.py\", line 2, in <module>\r\n    from graphql import GraphQLResolveInfo as ResolveInfo\r\nImportError: cannot import name 'GraphQLResolveInfo' from 'graphql' (D:\\localdata\\virtualenvs\\vapor-FkdI2ftv-py3.8\\lib\\site-packages\\graphql\\__init__.py)\r\n```\r\n`GraphQLResolveInfo` seems to be renamed to `ResolveInfo` in  `graphql-core==3.1.0` Not sure if the import statement should be changed or the dependency specification (`\"graphql-core>=3.1.0b1,<4\"`) needs to be tightened.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1191", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1191/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1191/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1191/events", "html_url": "https://github.com/graphql-python/graphene/issues/1191", "id": 608352060, "node_id": "MDU6SXNzdWU2MDgzNTIwNjA=", "number": 1191, "title": "Import error when using graphene", "user": {"login": "boiledbuns", "id": 8891315, "node_id": "MDQ6VXNlcjg4OTEzMTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/8891315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boiledbuns", "html_url": "https://github.com/boiledbuns", "followers_url": "https://api.github.com/users/boiledbuns/followers", "following_url": "https://api.github.com/users/boiledbuns/following{/other_user}", "gists_url": "https://api.github.com/users/boiledbuns/gists{/gist_id}", "starred_url": "https://api.github.com/users/boiledbuns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boiledbuns/subscriptions", "organizations_url": "https://api.github.com/users/boiledbuns/orgs", "repos_url": "https://api.github.com/users/boiledbuns/repos", "events_url": "https://api.github.com/users/boiledbuns/events{/privacy}", "received_events_url": "https://api.github.com/users/boiledbuns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-04-28T14:13:10Z", "updated_at": "2020-05-01T16:59:56Z", "closed_at": "2020-05-01T16:59:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get an error when I'm trying to import graphene into a simple project:\r\n```\r\nError: While importing \"stronk.app\", an ImportError was raised:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/markw/.local/lib/python3.6/site-packages/flask/cli.py\", line 240, in locate_app\r\n    __import__(module_name)\r\n  File \"/home/markw/Desktop/REPO/stronk-backend/stronk/__init__.py\", line 7, in <module>\r\n    from graphene import ObjectType, String, Schema\r\n  File \"/home/markw/.local/lib/python3.6/site-packages/graphene/__init__.py\", line 3, in <module>\r\n    from .types import (\r\n  File \"/home/markw/.local/lib/python3.6/site-packages/graphene/types/__init__.py\", line 2, in <module>\r\n    from graphql import ResolveInfo\r\nImportError: cannot import name 'ResolveInfo'\r\n```\r\n\r\nI checked other similar issues in the `graphene-django` repo (https://github.com/graphql-python/graphene-django/issues/737),  but I don't have a `graphql` folder in the root of my project. Any advice would be helpful :)\r\n\r\nhere's my requirements.txt\r\n```\r\nFlask==1.1.1\r\nFlask-SQLAlchemy==2.4.1\r\nSQLAlchemy==1.3.12\r\nFlask-Migrate==2.5.2\r\npsycopg2-binary==2.8.4\r\npython-dotenv==0.11.0\r\nfirebase-admin==4.1.0\r\ngraphene==2.0.0\r\n```\r\nI've tried other versions of graphene, but the issue persists\r\n\r\nhere's the output of my pip3 freeze\r\n```\r\nalembic==1.4.2\r\naniso8601==7.0.0\r\nappdirs==1.4.3\r\napturl==0.5.2\r\nasn1crypto==0.24.0\r\nastroid==2.3.3\r\nattrs==19.3.0\r\nautopep8==1.5\r\nbcrypt==3.1.7\r\nblinker==1.4\r\nBrlapi==0.6.6\r\nCacheControl==0.12.6\r\ncached-property==1.5.1\r\ncachetools==4.1.0\r\ncertifi==2020.4.5.1\r\ncffi==1.13.2\r\nchardet==3.0.4\r\nclick==7.1.2\r\ncolorama==0.3.7\r\ncommand-not-found==0.3\r\ncryptography==2.8\r\ncupshelpers==1.0\r\ndefer==1.0.6\r\ndistlib==0.3.0\r\ndistro==1.0.1\r\ndistro-info===0.18ubuntu0.18.04.1\r\ndocker==4.1.0\r\ndocker-compose==1.25.2\r\ndockerpty==0.4.1\r\ndocopt==0.6.2\r\nevdev==0.7.0\r\nfilelock==3.0.12\r\nfirebase-admin==4.1.0\r\nFlask==1.1.1\r\nFlask-GraphQL==2.0.1\r\nFlask-Migrate==2.5.2\r\nFlask-SQLAlchemy==2.4.1\r\ngoogle-api-core==1.17.0\r\ngoogle-api-python-client==1.8.2\r\ngoogle-auth==1.14.1\r\ngoogle-auth-httplib2==0.0.3\r\ngoogle-cloud-core==1.3.0\r\ngoogle-cloud-firestore==1.6.2\r\ngoogle-cloud-storage==1.28.0\r\ngoogle-resumable-media==0.5.0\r\ngoogleapis-common-protos==1.51.0\r\ngraphene==2.1.8\r\ngraphql-core==3.1.0\r\ngraphql-relay==3.0.0\r\ngraphql-server-core==1.2.0\r\ngrpcio==1.28.1\r\nGuake==3.0.5\r\nhttplib2==0.17.3\r\nidna==2.9\r\nimportlib-metadata==1.4.0\r\nimportlib-resources==1.0.2\r\nisort==4.3.21\r\nitsdangerous==1.1.0\r\nJinja2==2.11.2\r\njsonschema==3.2.0\r\nkeyring==10.6.0\r\nkeyrings.alt==3.0\r\nlanguage-selector==0.1\r\nlaunchpadlib==1.10.6\r\nlazr.restfulclient==0.13.5\r\nlazr.uri==1.0.3\r\nlazy-object-proxy==1.4.3\r\nlouis==3.5.0\r\nlutris==0.5.5\r\nmacaroonbakery==1.1.3\r\nMako==1.1.2\r\nMarkupSafe==1.1.1\r\nmccabe==0.6.1\r\nmore-itertools==8.1.0\r\nmsgpack==1.0.0\r\nnetifaces==0.10.4\r\noauth==1.0.1\r\nolefile==0.45.1\r\nparamiko==2.7.1\r\npbr==3.1.1\r\npexpect==4.2.1\r\nPillow==5.1.0\r\npromise==2.3\r\nprotobuf==3.11.3\r\npsutil==5.4.2\r\npsycopg2-binary==2.8.4\r\npyasn1==0.4.8\r\npyasn1-modules==0.2.8\r\npycairo==1.16.2\r\nPyChromecast==0.8.1\r\npycodestyle==2.5.0\r\npycparser==2.19\r\npycrypto==2.6.1\r\npycups==1.9.73\r\npygobject==3.26.1\r\npyinotify==0.9.6\r\npylint==2.4.4\r\npymacaroons==0.13.0\r\nPyNaCl==1.3.0\r\npyOpenSSL==17.5.0\r\npyRFC3339==1.0\r\npyrsistent==0.15.7\r\npython-apt==1.6.5+ubuntu0.2\r\npython-dateutil==2.8.1\r\npython-debian==0.1.32\r\npython-distutils-extra==2.39\r\npython-dotenv==0.11.0\r\npython-editor==1.0.4\r\npython-Levenshtein==0.12.0\r\npytz==2020.1\r\npyxattr==0.6.0\r\npyxdg==0.25\r\nPyYAML==5.3\r\nreportlab==3.4.0\r\nrequests==2.23.0\r\nrequests-unixsocket==0.1.5\r\nrsa==4.0\r\nRx==1.6.1\r\nSecretStorage==2.3.1\r\nsetproctitle==1.1.10\r\nsimplejson==3.13.2\r\nsix==1.14.0\r\nSQLAlchemy==1.3.12\r\nsystem-service==0.3\r\nsystemd-python==234\r\ntexttable==1.6.2\r\ntyped-ast==1.4.1\r\nubuntu-drivers-common==0.0.0\r\nufw==0.36\r\nulauncher==5.4.0\r\nunattended-upgrades==0.1\r\nuritemplate==3.0.1\r\nurllib3==1.25.9\r\nusb-creator==0.3.3\r\nvirtualenv==20.0.2\r\nwadllib==1.3.2\r\nwebsocket-client==0.57.0\r\nWerkzeug==1.0.1\r\nwrapt==1.11.2\r\nxkit==0.0.0\r\nyoutube-dl==2018.3.14\r\nzeroconf==0.19.1\r\nzipp==2.0.0\r\nzope.interface==4.3.2\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1188", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1188/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1188/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1188/events", "html_url": "https://github.com/graphql-python/graphene/issues/1188", "id": 605811159, "node_id": "MDU6SXNzdWU2MDU4MTExNTk=", "number": 1188, "title": "Chaining mutations", "user": {"login": "shinhermit", "id": 1219827, "node_id": "MDQ6VXNlcjEyMTk4Mjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1219827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shinhermit", "html_url": "https://github.com/shinhermit", "followers_url": "https://api.github.com/users/shinhermit/followers", "following_url": "https://api.github.com/users/shinhermit/following{/other_user}", "gists_url": "https://api.github.com/users/shinhermit/gists{/gist_id}", "starred_url": "https://api.github.com/users/shinhermit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shinhermit/subscriptions", "organizations_url": "https://api.github.com/users/shinhermit/orgs", "repos_url": "https://api.github.com/users/shinhermit/repos", "events_url": "https://api.github.com/users/shinhermit/events{/privacy}", "received_events_url": "https://api.github.com/users/shinhermit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-23T19:38:09Z", "updated_at": "2020-04-26T11:45:47Z", "closed_at": "2020-04-26T11:45:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, thanks a lot for your work on Graphene :)\r\n\r\nWhile searching about nested mutations, I came accross the [issue 944](https://github.com/graphql-python/graphene/issues/944). I [asked a question](https://github.com/graphql-python/graphene/issues/944#issuecomment-617055036) in the comments, and then the [same question on stackoverflow](https://stackoverflow.com/questions/61340137/graphene-graphql-how-to-chain-mutations).\r\n\r\nI happened to send 2 separated requests to a Graphql API (Python3 + Graphene) in order to:\r\n\r\n1. Create an object\r\n2. Update another object so that it relates to the created one.\r\n\r\nI sensed this might not be in the \"spirit\" of Graphql, so I searched and read about nested migrations. Unforutnately, I also found that it was bad practice because nested migrations are not sequential and it might lead clients in hard to debug problems due to race conditions.\r\n\r\nI'm trying to use sequential root mutations in order to implement the use cases where nested migrations were considered.\r\n\r\nHow do you recommend to achieve this goal ?\r\n\r\nCould you give me you opinion about the ideas below ?\r\n\r\n# Client-generate ID for mutations\r\n\r\nLet's image I have User and Group entities, and I want, from the client form to update a group, to be able to not only add a user, but also create a user to be added in a group if the user does not exist. The users have ids named uid (user id) and groups gid (groupd id), just to highlight the difference. So using root mutations, I imagine doing a query like:\r\n\r\n```graphql\r\nmutation {\r\n    createUser(uid: \"b53a20f1b81b439\", username: \"new user\", password: \"secret\"){\r\n        uid\r\n        username\r\n    }\r\n\r\n    updateGroup(gid: \"group id\", userIds: [\"b53a20f1b81b439\", ...]){\r\n        gid\r\n        name\r\n    }\r\n}\r\n```\r\n\r\nYou noticed that I provide the user id in the input of the `createUser` mutation. My problem is that to make the `updateGroup` mutation, I need the ID of the newly created user. I don't know  a way to get that in graphene inside the mutate methods resolving `updateGroup`, so I imagined querying a UUID from the API while loading the client form data. So before sending the mutation above, at the initial loading of my client, I would do something like:\r\n\r\n```graphql\r\nquery {\r\n    uuid\r\n\r\n    group (gid: \"group id\") {\r\n        gid\r\n        name\r\n    }\r\n}\r\n```\r\n\r\nThen I would use the uuid from the response of this query in the mutation request (the value would be `b53a20f1b81b439`, as in the the first scriptlet above).\r\n\r\n# Sharing sequential mutation results\r\n\r\nI have been thinking about this problem and also the fact that it seems to be a recurring question among developers. I have come to conclude that may we miss something in the way we want to edit our graph, namely edge operations. I think we try to do edges operations with node operations. To illustrate this, a graph creation in a language like dot (Graphviz) may look like:\r\n\r\n```graphviz\r\ndigraph D {\r\n\r\n  /* Nodes */\r\n  A \r\n  B\r\n  C\r\n\r\n  /* Edges */\r\n\r\n  A -> B\r\n  A -> C\r\n  A -> D\r\n\r\n}\r\n```\r\n\r\nFollowing this pattern, maybe the graphql mutation in the question should look like:\r\n\r\n```graphql\r\nmutation {\r\n\r\n    # Nodes\r\n\r\n    n1: createUser(username: \"new user\", password: \"secret\"){\r\n        uid\r\n        username\r\n    }\r\n\r\n    n2: updateGroup(gid: \"group id\"){\r\n        gid\r\n        name\r\n    }\r\n\r\n    # Edges\r\n\r\n    addUserToGroup(user: \"n1\", group: \"n2\"){\r\n        status\r\n    }\r\n}\r\n```\r\n\r\nThe inputs of the _\"edge operation\"_ `addUserToGroup` would be the aliases of the previous nodes in the mutation query.\r\n\r\nThis would also allow to decorate edge operations with permission checks (permissions to create a relation may differ from permissions on each object).\r\n\r\nWe can definitely resolve a query like this already. What is less sure is if backend frameworks, Graphene-python in particular, provide mechanisms to allow the implementation of `addUserToGroup` (having the previous mutation results in the resolution context). I'm thinking of injecting a `dict` of the previous results in the Graphene context. I'll try and complete the answer with technical details if successful.\r\n\r\nMaybe there exist way to achieve something like this already, I will also look for that and complete the answer if found.\r\n\r\nIf it turns out the pattern above is not possible or found bad practice, I think I will stick to 2 separate mutations.\r\n\r\n## Implementing sequential mutation results sharing\r\n\r\nI tested a way of resolving a query like above, using a [middleware](https://docs.graphene-python.org/en/latest/execution/middleware/) and a base mutation class to handle sharing the results. I created a [one-file python program available on Github](https://github.com/shinhermit/graphene-graphql-chained-mutation/blob/master/shared_results_mutation.py) to test this. [Also we can play with it on Repl](https://repl.it/@shinhermit/graphenegraphqlchainedmutations).\r\n\r\n\r\nThe middleware is quite simple and adds a dict as `kwarg` parameter to the resolvers:\r\n\r\n```python\r\nclass ShareResultMiddleware:\r\n\r\n    shared_results = {}\r\n\r\n    def resolve(self, next, root, info, **args):\r\n        return next(root, info, shared_results=self.shared_results, **args)\r\n\r\n```\r\n\r\nThe base class is also quite simple and manages the insertion of results in the dictionary:\r\n\r\n```python\r\nclass SharedResultMutation(graphene.Mutation):\r\n\r\n    @classmethod\r\n    def mutate(cls, root: None, info: graphene.ResolveInfo, shared_results: dict, *args, **kwargs):\r\n        result = cls.mutate_and_share_result(root, info, *args, **kwargs)\r\n        if root is None:\r\n            node = info.path[0]\r\n            shared_results[node] = result\r\n        return result\r\n\r\n    @staticmethod\r\n    def mutate_and_share_result(*_, **__):\r\n        return SharedResultMutation()  # override\r\n```\r\n\r\nA node-like mutation that need to comply with the shared result pattern would inherit from `SharedResultMutation` in stead of `Mutation` and override `mutate_and_share_result` instead of `mutate`:\r\n\r\n```python\r\nclass UpsertParent(SharedResultMutation, ParentType):\r\n    class Arguments:\r\n        data = ParentInput()\r\n\r\n    @staticmethod\r\n    def mutate_and_share_result(root: None, info: graphene.ResolveInfo, data: ParentInput, *___, **____):\r\n        return UpsertParent(id=1, name=\"test\")  # <-- example\r\n```\r\n\r\nThe edge-like mutations need to access the `shared_results` dict, so they override `mutate` directly:\r\n\r\n```python\r\nclass AddSibling(SharedResultMutation):\r\n    class Arguments:\r\n        node1 = graphene.String(required=True)\r\n        node2 = graphene.String(required=True)\r\n\r\n    ok = graphene.Boolean()\r\n\r\n    @staticmethod\r\n    def mutate(root: None, info: graphene.ResolveInfo, shared_results: dict, node1: str, node2: str):  # ISSUE: this breaks type awareness\r\n        node1_ : ChildType = shared_results.get(node1)\r\n        node2_ : ChildType = shared_results.get(node2)\r\n        # do stuff\r\n        return AddSibling(ok=True)\r\n```\r\n\r\nAnd that's basically it (the rest is common Graphene boilerplate and test mocks). We can now execute a query like:\r\n\r\n```graphql\r\nmutation ($parent: ParentInput, $child1: ChildInput, $child2: ChildInput) {\r\n    n1: upsertParent(data: $parent) {\r\n        pk\r\n        name\r\n    }\r\n    \r\n    n2: upsertChild(data: $child1) {\r\n        pk\r\n        name\r\n    }\r\n    \r\n    n3: upsertChild(data: $child2) {\r\n        pk\r\n        name\r\n    }\r\n    \r\n    e1: setParent(parent: \"n1\", child: \"n2\") { ok }\r\n    \r\n    e2: setParent(parent: \"n1\", child: \"n3\") { ok }\r\n    \r\n    e3: addSibling(node1: \"n2\", node2: \"n3\") { ok }\r\n}\r\n```\r\n\r\nThe issue with this is that the edge-like mutation arguments do not satisfy the _type awareness_ that GraphQL promotes: in the GraphQL spirit, `node1` and `node2` should be typed `graphene.Field(ChildType)`, instead of `graphene.String()` as in this implementation. **EDIT** [Added basic type checking for edge-like mutation](https://github.com/shinhermit/graphene-graphql-chained-mutation/blob/master/shared_results_mutation.py#L157) input nodes.\r\n\r\n# Nesting creations only\r\n\r\nFor comparison, I also implemented a nesting pattern where only creations are resolved (it the only case where we cannot have the data in previous query), [one-file program available on Github](https://github.com/shinhermit/graphene-graphql-chained-mutation/blob/master/nested_creation_mutation.py).\r\n\r\nIt is classic Graphene, except for the mutation `UpsertChild` were we add field to solve nested creations *and* their resolvers:\r\n\r\n```python\r\nclass UpsertChild(graphene.Mutation, ChildType):\r\n    class Arguments:\r\n        data = ChildInput()\r\n\r\n    create_parent = graphene.Field(ParentType, data=graphene.Argument(ParentInput))\r\n    create_sibling = graphene.Field(ParentType, data=graphene.Argument(lambda: ChildInput))\r\n\r\n    @staticmethod\r\n    def mutate(_: None, __: graphene.ResolveInfo, data: ChildInput):\r\n        return Child(\r\n            pk=data.pk\r\n            ,name=data.name\r\n            ,parent=FakeParentDB.get(data.parent)\r\n            ,siblings=[FakeChildDB[pk] for pk in data.siblings or []]\r\n        )  # <-- example\r\n\r\n    @staticmethod\r\n    def resolve_create_parent(child: Child, __: graphene.ResolveInfo, data: ParentInput):\r\n        parent = UpsertParent.mutate(None, __, data)\r\n        child.parent = parent.pk\r\n        return parent\r\n\r\n    @staticmethod\r\n    def resolve_create_sibling(node1: Child, __: graphene.ResolveInfo, data: 'ChildInput'):\r\n        node2 = UpsertChild.mutate(None, __, data)\r\n        node1.siblings.append(node2.pk)\r\n        node2.siblings.append(node1.pk)\r\n        return node2\r\n```\r\n\r\nSo the quantity of extra _stuff_ is small compared to to the node+edge pattern. We can now execute a query like:\r\n\r\n```graphql\r\nmutation ($parent: ParentInput, $child1: ChildInput, $child2: ChildInput) {\r\n    n1: upsertChild(data: $child1) {\r\n        pk\r\n        name\r\n        siblings { pk name }\r\n        \r\n        parent: createParent(data: $parent) { pk name }\r\n        \r\n        newSibling: createSibling(data: $child2) { pk name }\r\n    }\r\n}\r\n```\r\n\r\nHowever, we can see that, in contrast to what was possible with the node+edge pattern,(shared_result_mutation.py) we cannot set the parent of the new sibling in the same mutation. The obvious reason is that we don't have its data (its pk in particular). The other reason is because order is not guaranteed for nested mutations. So cannot create, for example, a data-less mutation `assignParentToSiblings` that would set the parent of all siblings of the current *root* child, because the nested sibling may be created before the nested parent.\r\n\r\nIn some practical cases though, we just need to create a new object and\r\nand then link it to an exiting object. Nesting can satisfy these use cases.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1186", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1186/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1186/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1186/events", "html_url": "https://github.com/graphql-python/graphene/issues/1186", "id": 601299646, "node_id": "MDU6SXNzdWU2MDEyOTk2NDY=", "number": 1186, "title": "graphene.test.Client freezes on execute", "user": {"login": "Baddhizm", "id": 34471467, "node_id": "MDQ6VXNlcjM0NDcxNDY3", "avatar_url": "https://avatars1.githubusercontent.com/u/34471467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Baddhizm", "html_url": "https://github.com/Baddhizm", "followers_url": "https://api.github.com/users/Baddhizm/followers", "following_url": "https://api.github.com/users/Baddhizm/following{/other_user}", "gists_url": "https://api.github.com/users/Baddhizm/gists{/gist_id}", "starred_url": "https://api.github.com/users/Baddhizm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Baddhizm/subscriptions", "organizations_url": "https://api.github.com/users/Baddhizm/orgs", "repos_url": "https://api.github.com/users/Baddhizm/repos", "events_url": "https://api.github.com/users/Baddhizm/events{/privacy}", "received_events_url": "https://api.github.com/users/Baddhizm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-16T18:09:55Z", "updated_at": "2020-04-21T16:24:31Z", "closed_at": "2020-04-21T16:24:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Clear python 3.5.3 venv:\r\n```\r\naniso8601==7.0.0\r\ngraphene==2.1.8\r\ngraphql-core==2.3.1\r\ngraphql-relay==2.0.1\r\npromise==2.3\r\nRx==1.6.1\r\nsix==1.14.0\r\n```\r\n\r\nCode:\r\n```python\r\nimport graphene\r\nfrom graphene import Schema\r\nfrom graphene.test import Client\r\n\r\n\r\nclass SimpleMutation(graphene.Mutation):\r\n    class Arguments:\r\n        arg_one = graphene.Int(required=False)\r\n\r\n    ok = graphene.Boolean()\r\n\r\n    async def mutate(self, info, arg_one: int = 0):\r\n        return SimpleMutation(\r\n            ok=True\r\n        )\r\n\r\n\r\nclass Mutations(graphene.ObjectType):\r\n    \"\"\"\r\n    All created mutations\r\n    \"\"\"\r\n    simple_mutation = SimpleMutation.Field()\r\n\r\n\r\nschema = Schema(\r\n    mutation=Mutations,\r\n)\r\n\r\n\r\ndef test_simple_mutation_without_arg():\r\n    graphene_client = Client(schema)\r\n    executed = graphene_client.execute(\r\n        '''\r\n          mutation TestMutation {\r\n            simpleMutation {\r\n              ok\r\n            }\r\n          }\r\n        '''\r\n    )\r\n    print(executed)\r\n    assert executed == {'data': {'ok': True}}\r\n\r\n\r\ndef test_simple_mutation_with_arg():\r\n    graphene_client = Client(schema)\r\n    executed = graphene_client.execute(\r\n        '''\r\n          mutation TestMutation {\r\n            simpleMutation(argOne: 1) {\r\n              ok\r\n            }\r\n          }\r\n        '''\r\n    )\r\n    print(executed)\r\n    assert executed == {'data': {'ok': True}}\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_simple_mutation_without_arg()\r\n    test_simple_mutation_with_arg()\r\n```\r\n\r\nWhats wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1185", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1185/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1185/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1185/events", "html_url": "https://github.com/graphql-python/graphene/issues/1185", "id": 601039117, "node_id": "MDU6SXNzdWU2MDEwMzkxMTc=", "number": 1185, "title": "How to perform partial update using mutation?", "user": {"login": "mciastek", "id": 3169629, "node_id": "MDQ6VXNlcjMxNjk2Mjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/3169629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mciastek", "html_url": "https://github.com/mciastek", "followers_url": "https://api.github.com/users/mciastek/followers", "following_url": "https://api.github.com/users/mciastek/following{/other_user}", "gists_url": "https://api.github.com/users/mciastek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mciastek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mciastek/subscriptions", "organizations_url": "https://api.github.com/users/mciastek/orgs", "repos_url": "https://api.github.com/users/mciastek/repos", "events_url": "https://api.github.com/users/mciastek/events{/privacy}", "received_events_url": "https://api.github.com/users/mciastek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-16T13:09:33Z", "updated_at": "2020-04-16T13:41:40Z", "closed_at": "2020-04-16T13:41:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to perform partial update using graphene. I'm following [docs for serializers](https://docs.graphene-python.org/projects/django/en/latest/mutations/#create-update-operations), but I can't run the mutation, because of required fields. Here's an example.\r\n\r\n**Serializer**\r\n```python\r\nclass StudySerializer(serializers.ModelSerializer):\r\n  class Meta:\r\n    model = Study\r\n    fields = '__all__'\r\n    # required for accepting \"id\" in mutation's arguments\r\n    # see https://github.com/graphql-python/graphene-django/issues/906#issuecomment-602078174\r\n    extra_kwargs = {'id': {'read_only': False, 'required': False}}\r\n```\r\n\r\n**Mutation**\r\n```python\r\nclass UpdateStudy(SerializerMutation):\r\n  class Meta:\r\n    serializer_class = StudySerializer\r\n    model_operations = ['update']\r\n```\r\n\r\nGraphQL is complaining about missing fields in mutation, but they should be optional\r\n\r\n![Screenshot 2020-04-16 at 15 07 52](https://user-images.githubusercontent.com/3169629/79459823-2fdd4700-7ff4-11ea-8beb-7fc6ba2a417f.png)\r\n\r\nIs there any workaround for this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1182", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1182/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1182/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1182/events", "html_url": "https://github.com/graphql-python/graphene/issues/1182", "id": 598778131, "node_id": "MDU6SXNzdWU1OTg3NzgxMzE=", "number": 1182, "title": "How to use middleware for all queries?", "user": {"login": "datamusee", "id": 60007298, "node_id": "MDQ6VXNlcjYwMDA3Mjk4", "avatar_url": "https://avatars1.githubusercontent.com/u/60007298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datamusee", "html_url": "https://github.com/datamusee", "followers_url": "https://api.github.com/users/datamusee/followers", "following_url": "https://api.github.com/users/datamusee/following{/other_user}", "gists_url": "https://api.github.com/users/datamusee/gists{/gist_id}", "starred_url": "https://api.github.com/users/datamusee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datamusee/subscriptions", "organizations_url": "https://api.github.com/users/datamusee/orgs", "repos_url": "https://api.github.com/users/datamusee/repos", "events_url": "https://api.github.com/users/datamusee/events{/privacy}", "received_events_url": "https://api.github.com/users/datamusee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-13T09:18:50Z", "updated_at": "2020-07-01T17:30:54Z", "closed_at": "2020-04-18T13:50:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello\r\n\r\nI'm trying to use middlewares to do logging and to manage authorization. But I doen't find how to configure a middleware. \r\nI've a \r\nclass Query(ObjectType):\r\n... here some fields definition...\r\n\r\nthen\r\nschema = Schema(query=Query)\r\nvfonc = GraphQLView.as_view('graphql', schema=schema, graphiql=True)\r\nflask_app.add_url_rule('/graphql', view_func=vfonc)\r\n...\r\nand I've 2 middlewares build after the model here:\r\nhttps://docs.graphene-python.org/en/latest/execution/middleware/\r\nBut, that page describe how to add a middleware when you directly call schema.execute, which is an action that I never do.\r\n\r\nI've read a lot (graphene  doc, stack overflow...)\r\nI think that I've seen answers in the Django context, but not applicable in my context (Flask).\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1180", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1180/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1180/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1180/events", "html_url": "https://github.com/graphql-python/graphene/issues/1180", "id": 598119610, "node_id": "MDU6SXNzdWU1OTgxMTk2MTA=", "number": 1180, "title": "Unable to compare two instances of graphene.ObjectType classes", "user": {"login": "spacether", "id": 1912028, "node_id": "MDQ6VXNlcjE5MTIwMjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1912028?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spacether", "html_url": "https://github.com/spacether", "followers_url": "https://api.github.com/users/spacether/followers", "following_url": "https://api.github.com/users/spacether/following{/other_user}", "gists_url": "https://api.github.com/users/spacether/gists{/gist_id}", "starred_url": "https://api.github.com/users/spacether/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spacether/subscriptions", "organizations_url": "https://api.github.com/users/spacether/orgs", "repos_url": "https://api.github.com/users/spacether/repos", "events_url": "https://api.github.com/users/spacether/events{/privacy}", "received_events_url": "https://api.github.com/users/spacether/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481172, "node_id": "MDU6TGFiZWwyNjQ0ODExNzI=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%E2%9C%A8%20enhancement", "name": "\u2728 enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-10T22:20:28Z", "updated_at": "2020-05-01T23:10:18Z", "closed_at": "2020-05-01T23:10:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "`__eq__` is not defined on graphene.ObjectType classes\r\nPlease add it so we can compare two instances of classes which inherit from graphene.ObjectType\r\nusing `self.assertEquals(obj, obj_other)`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1175", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1175/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1175/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1175/events", "html_url": "https://github.com/graphql-python/graphene/issues/1175", "id": 596307340, "node_id": "MDU6SXNzdWU1OTYzMDczNDA=", "number": 1175, "title": "Code error in relay/mutations document", "user": {"login": "asvrada", "id": 10403782, "node_id": "MDQ6VXNlcjEwNDAzNzgy", "avatar_url": "https://avatars1.githubusercontent.com/u/10403782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvrada", "html_url": "https://github.com/asvrada", "followers_url": "https://api.github.com/users/asvrada/followers", "following_url": "https://api.github.com/users/asvrada/following{/other_user}", "gists_url": "https://api.github.com/users/asvrada/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvrada/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvrada/subscriptions", "organizations_url": "https://api.github.com/users/asvrada/orgs", "repos_url": "https://api.github.com/users/asvrada/repos", "events_url": "https://api.github.com/users/asvrada/events{/privacy}", "received_events_url": "https://api.github.com/users/asvrada/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-08T04:53:49Z", "updated_at": "2020-04-18T22:45:08Z", "closed_at": "2020-04-18T22:45:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Link: https://docs.graphene-python.org/en/latest/relay/mutations/\r\n\r\nIn the first code example\r\n```\r\n...\r\n        ship_name = input.ship_name\r\n        faction_id = input.faction_id\r\n...\r\n```\r\n\r\nShould be\r\n```\r\n        ship_name = input[\"ship_name\"]\r\n        faction_id = input[\"faction_id\"]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1172", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1172/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1172/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1172/events", "html_url": "https://github.com/graphql-python/graphene/issues/1172", "id": 592475484, "node_id": "MDU6SXNzdWU1OTI0NzU0ODQ=", "number": 1172, "title": "JWT authentication during snapshot tests", "user": {"login": "shravan-v", "id": 62104643, "node_id": "MDQ6VXNlcjYyMTA0NjQz", "avatar_url": "https://avatars1.githubusercontent.com/u/62104643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shravan-v", "html_url": "https://github.com/shravan-v", "followers_url": "https://api.github.com/users/shravan-v/followers", "following_url": "https://api.github.com/users/shravan-v/following{/other_user}", "gists_url": "https://api.github.com/users/shravan-v/gists{/gist_id}", "starred_url": "https://api.github.com/users/shravan-v/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shravan-v/subscriptions", "organizations_url": "https://api.github.com/users/shravan-v/orgs", "repos_url": "https://api.github.com/users/shravan-v/repos", "events_url": "https://api.github.com/users/shravan-v/events{/privacy}", "received_events_url": "https://api.github.com/users/shravan-v/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-02T09:09:11Z", "updated_at": "2020-04-28T07:05:05Z", "closed_at": "2020-04-28T07:05:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to authenticate JWT using flask_jwt_extended library while testing mutation function using snapshot testing? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1169", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1169/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1169/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1169/events", "html_url": "https://github.com/graphql-python/graphene/issues/1169", "id": 589882976, "node_id": "MDU6SXNzdWU1ODk4ODI5NzY=", "number": 1169, "title": "Using mutation String argument with multiline text", "user": {"login": "realsuayip", "id": 17948971, "node_id": "MDQ6VXNlcjE3OTQ4OTcx", "avatar_url": "https://avatars0.githubusercontent.com/u/17948971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/realsuayip", "html_url": "https://github.com/realsuayip", "followers_url": "https://api.github.com/users/realsuayip/followers", "following_url": "https://api.github.com/users/realsuayip/following{/other_user}", "gists_url": "https://api.github.com/users/realsuayip/gists{/gist_id}", "starred_url": "https://api.github.com/users/realsuayip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/realsuayip/subscriptions", "organizations_url": "https://api.github.com/users/realsuayip/orgs", "repos_url": "https://api.github.com/users/realsuayip/repos", "events_url": "https://api.github.com/users/realsuayip/events{/privacy}", "received_events_url": "https://api.github.com/users/realsuayip/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-29T20:52:43Z", "updated_at": "2020-04-01T15:22:21Z", "closed_at": "2020-04-01T15:22:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "What's the proper way to send a multiline text to a mutation argument? Sending a text with newline characters causes  `Syntax Error GraphQL (xxx) Unterminated string`. Using this [reference](https://github.com/graphql/graphql-js/pull/926), I tried block strings, but it didn't really work.\r\n\r\nSet up:\r\n\r\n```\r\nclass WishTopic(Mutation):\r\n    class Arguments:\r\n        title = String()\r\n        hint = String()\r\n\r\n    feedback = String()\r\n    ...\r\n```\r\n\r\nQuery:\r\n```\r\nmutation {\r\n  topic {\r\n    wish(title: \"foo\", hint: \"\"\"bar\"\"\") {\r\n      feedback\r\n    }\r\n  }\r\n}\r\n```\r\nResult:\r\n`Syntax Error GraphQL (xxx) Expected Name, found String `\r\n\r\nAm I missing something?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1168", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1168/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1168/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1168/events", "html_url": "https://github.com/graphql-python/graphene/issues/1168", "id": 589683089, "node_id": "MDU6SXNzdWU1ODk2ODMwODk=", "number": 1168, "title": "Unable to implement a Custom Node", "user": {"login": "datamusee", "id": 60007298, "node_id": "MDQ6VXNlcjYwMDA3Mjk4", "avatar_url": "https://avatars1.githubusercontent.com/u/60007298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datamusee", "html_url": "https://github.com/datamusee", "followers_url": "https://api.github.com/users/datamusee/followers", "following_url": "https://api.github.com/users/datamusee/following{/other_user}", "gists_url": "https://api.github.com/users/datamusee/gists{/gist_id}", "starred_url": "https://api.github.com/users/datamusee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datamusee/subscriptions", "organizations_url": "https://api.github.com/users/datamusee/orgs", "repos_url": "https://api.github.com/users/datamusee/repos", "events_url": "https://api.github.com/users/datamusee/events{/privacy}", "received_events_url": "https://api.github.com/users/datamusee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-28T23:51:55Z", "updated_at": "2020-03-29T07:47:10Z", "closed_at": "2020-03-29T07:47:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm new with graphene\r\nI have some trouble with creating a custom node type, as described here:\r\n\r\nhttp://docs.graphene-python.org/en/latest/relay/nodes/#custom-nodes\r\n\r\nI need a custom node because I have custom IDs (RDF URIs as global ids)\r\nI'm able to implement my own method to get the type from the ID, but then I can't understand how to implement a function like get_user(id) in the sample.\r\n\r\nFor example, I've tried \r\n        if type == 'SiteType':\r\n            return getSite(global_id) #my id and global_id are the same, because my ids are globally unique\r\nwith getSite building a dict with all the fields defined for my SiteType type.\r\nIf getSite, force the type of the result with return SiteType(result), I get\r\n{\r\n  \"data\": {\r\n    \"node\": {\r\n      \"id\": \"{'id': 'http://datamusee.givingsense.eu/onto/site/127514', 'city': 'London', 'lang': 'en'}\",\r\n      \"__typename\": \"SiteType\"\r\n    }\r\n  }\r\n}\r\n(the id result contains the result returned by my getSite method\r\nwhen the query is\r\n{\r\n  node(id:\"http://datamusee.givingsense.eu/onto/site/127514\") {\r\n    id\r\n  __typename\r\n    \r\n}\r\n}\r\n\r\nThen without forcing the type, I get\r\n{\r\n  \"errors\": [\r\n    {\r\n      \"message\": \"Abstract type DMNode must resolve to an Object type at runtime for field Query.node with value \\\"{'id': 'http://datamusee.givingsense.eu/onto/site/127514', 'city': 'London', 'lang': 'en'}\\\", received \\\"None\\\".\",\r\n      \"locations\": [\r\n        {\r\n          \"line\": 2,\r\n          \"column\": 3\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"data\": {\r\n    \"node\": null\r\n  }\r\n}\r\nDMNode is the name of my custom Node class\r\nand the SiteType type begins by\r\nclass SiteType(graphene.ObjectType):\r\n    class Meta:\r\n        interfaces = (DMNode, ) #relay.Node,)\r\n        name = \"SiteType\"\r\n\r\n    id = graphene.ID(required=True)\r\n    uri = graphene.String(required=True, description=\"Linked data URI\")\r\n    prefLabel = graphene.String(required=True, description=\"Label recommand\u00e9\")\r\n    ...\r\n\r\nAfter a lot of search and try in the code and the web, I'm stuck.\r\nAny advices welcome\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1167", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1167/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1167/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1167/events", "html_url": "https://github.com/graphql-python/graphene/issues/1167", "id": 588836671, "node_id": "MDU6SXNzdWU1ODg4MzY2NzE=", "number": 1167, "title": "latest graphene on pip is not working.", "user": {"login": "huseyinyilmaz", "id": 344587, "node_id": "MDQ6VXNlcjM0NDU4Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/344587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huseyinyilmaz", "html_url": "https://github.com/huseyinyilmaz", "followers_url": "https://api.github.com/users/huseyinyilmaz/followers", "following_url": "https://api.github.com/users/huseyinyilmaz/following{/other_user}", "gists_url": "https://api.github.com/users/huseyinyilmaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/huseyinyilmaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huseyinyilmaz/subscriptions", "organizations_url": "https://api.github.com/users/huseyinyilmaz/orgs", "repos_url": "https://api.github.com/users/huseyinyilmaz/repos", "events_url": "https://api.github.com/users/huseyinyilmaz/events{/privacy}", "received_events_url": "https://api.github.com/users/huseyinyilmaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-27T02:07:49Z", "updated_at": "2020-03-28T22:03:51Z", "closed_at": "2020-03-28T22:03:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI am trying to use graphene with fastapi. When I install graphene with `pip install graphene` it gives an import in graphene source code.\r\n```\r\n(venv) huseyin@admins-MBP recomendar % pip install graphene\r\nCollecting graphene\r\n  Using cached https://files.pythonhosted.org/packages/05/97/45e743b372f65a619f8d1eb2897efb74fb1b0ffddc731ad37e0aa187ec5c/graphene-2.1.8-py2.py3-none-any.whl\r\nCollecting graphql-core<3,>=2.1 (from graphene)\r\n  Using cached https://files.pythonhosted.org/packages/a8/e4/838a3747ca511bcd7a6842dfc619c13eb298063ca1681af7bd1b4f8358ef/graphql_core-2.3.1-py2.py3-none-any.whl\r\nCollecting aniso8601<=7,>=3 (from graphene)\r\n  Using cached https://files.pythonhosted.org/packages/45/a4/b4fcadbdab46c2ec2d2f6f8b4ab3f64fd0040789ac7f065eba82119cd602/aniso8601-7.0.0-py2.py3-none-any.whl\r\nCollecting graphql-relay<3,>=2 (from graphene)\r\n  Using cached https://files.pythonhosted.org/packages/94/48/6022ea2e89cb936c3b933a0409c6e29bf8a68c050fe87d97f98aff6e5e9e/graphql_relay-2.0.1-py3-none-any.whl\r\nRequirement already satisfied: six<2,>=1.10.0 in ./venv/lib/python3.7/site-packages (from graphene) (1.14.0)\r\nCollecting rx<2,>=1.6 (from graphql-core<3,>=2.1->graphene)\r\n  Using cached https://files.pythonhosted.org/packages/33/0f/5ef4ac78e2a538cc1b054eb86285fe0bf7a5dbaeaac2c584757c300515e2/Rx-1.6.1-py2.py3-none-any.whl\r\nCollecting promise<3,>=2.3 (from graphql-core<3,>=2.1->graphene)\r\n  Using cached https://files.pythonhosted.org/packages/cf/9c/fb5d48abfe5d791cd496e4242ebcf87a4bb2e0c3dcd6e0ae68c11426a528/promise-2.3.tar.gz\r\nInstalling collected packages: rx, promise, graphql-core, aniso8601, graphql-relay, graphene\r\n  Running setup.py install for promise ... done\r\nSuccessfully installed aniso8601-7.0.0 graphene-2.1.8 graphql-core-2.3.1 graphql-relay-2.0.1 promise-2.3 rx-1.6.1\r\nYou are using pip version 19.0.3, however version 20.0.2 is available.\r\nYou should consider upgrading via the 'pip install --upgrade pip' command.\r\n(venv) huseyin@admins-MBP recomendar % make dev\r\npython src/devserver.py\r\nTraceback (most recent call last):\r\n  File \"src/devserver.py\", line 8, in <module>\r\n    from src.main import app  # noqa: E402\r\n  File \"/Users/huseyin/GIVVA/recomendar/src/main.py\", line 10, in <module>\r\n    import src.graphql.schema\r\n  File \"/Users/huseyin/GIVVA/recomendar/src/graphql/schema.py\", line 1, in <module>\r\n    import graphene\r\n  File \"/Users/huseyin/GIVVA/recomendar/venv/lib/python3.7/site-packages/graphene/__init__.py\", line 3, in <module>\r\n    from .types import (\r\n  File \"/Users/huseyin/GIVVA/recomendar/venv/lib/python3.7/site-packages/graphene/types/__init__.py\", line 2, in <module>\r\n    from graphql import ResolveInfo\r\nImportError: cannot import name 'ResolveInfo' from 'graphql' (/Users/huseyin/GIVVA/recomendar/src/graphql/__init__.py)\r\nmake: *** [dev] Error 1\r\n(venv) huseyin@admins-MBP recomendar %\r\n```\r\n\r\nIf I understand the situation correctly, this is a dependency version conflict problem and it will probaby be solved when graphene==3.0 is out. But currently, I could not find any graphql-core, graphene version pair that works. Can you provide graphene, graphql-core, graphql-relay versions that we can pin. \r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1165", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1165/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1165/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1165/events", "html_url": "https://github.com/graphql-python/graphene/issues/1165", "id": 588639367, "node_id": "MDU6SXNzdWU1ODg2MzkzNjc=", "number": 1165, "title": "AttributeError: 'InputField' has no attribute '_meta' when using graphene.List with graphene.InputField", "user": {"login": "estuelke", "id": 55104465, "node_id": "MDQ6VXNlcjU1MTA0NDY1", "avatar_url": "https://avatars0.githubusercontent.com/u/55104465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estuelke", "html_url": "https://github.com/estuelke", "followers_url": "https://api.github.com/users/estuelke/followers", "following_url": "https://api.github.com/users/estuelke/following{/other_user}", "gists_url": "https://api.github.com/users/estuelke/gists{/gist_id}", "starred_url": "https://api.github.com/users/estuelke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estuelke/subscriptions", "organizations_url": "https://api.github.com/users/estuelke/orgs", "repos_url": "https://api.github.com/users/estuelke/repos", "events_url": "https://api.github.com/users/estuelke/events{/privacy}", "received_events_url": "https://api.github.com/users/estuelke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-26T18:36:14Z", "updated_at": "2020-07-03T10:53:24Z", "closed_at": "2020-07-03T10:53:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to be able to pass in a list of `InputObjectType`s when using a specific mutation, but I keep getting an error saying InputField has no attribute '_meta'.  I'm guessing it is similar to #157 in that I should pass `InputField` and not `InputField(...)` to `graphene.List`.  \r\n\r\nSo how would one go about passing a list of `BatchInput` objects nested inside the `CreateCompoundInput` object in a mutation?\r\n\r\nThis is how my current InputObjects are set up (the CompoundAttribute and BatchAttribute classes all have normal graphene objects):\r\n\r\n```python\r\nclass CreateCompoundInput(InputObjectType, CompoundAttribute):\r\n    batches = graphene.List(\r\n        graphene.InputField(\r\n            BatchInput,\r\n            description='Batch information for this compound.'\r\n        )\r\n    )\r\n```\r\n\r\n```python\r\nclass BatchInput(InputObjectType, BatchAttribute):\r\n    pass\r\n```\r\n\r\nIf I remove `graphene.List` it works fine, but then I can only pass one at a time.\r\n\r\n\r\nI also did some digging and in the stack trace it's throwing the error at this point:\r\n\r\n> File \"..\\lib\\site-packages\\graphene\\types\\typemap.py\", line 337, in get_field_type\r\n>     return map.get(type._meta.name)\r\n\r\nAnd I noticed other types inherit from `BaseType` which has the `_meta` attribute, but `InputType` does not inherit from that.\r\n\r\nI'm also really new to graphene/graphql, so maybe I am on the wrong path.  Any help is appreciated.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1163", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1163/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1163/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1163/events", "html_url": "https://github.com/graphql-python/graphene/issues/1163", "id": 586655208, "node_id": "MDU6SXNzdWU1ODY2NTUyMDg=", "number": 1163, "title": "Changing resolver in Mutation class", "user": {"login": "sydoluciani", "id": 60237469, "node_id": "MDQ6VXNlcjYwMjM3NDY5", "avatar_url": "https://avatars2.githubusercontent.com/u/60237469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sydoluciani", "html_url": "https://github.com/sydoluciani", "followers_url": "https://api.github.com/users/sydoluciani/followers", "following_url": "https://api.github.com/users/sydoluciani/following{/other_user}", "gists_url": "https://api.github.com/users/sydoluciani/gists{/gist_id}", "starred_url": "https://api.github.com/users/sydoluciani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sydoluciani/subscriptions", "organizations_url": "https://api.github.com/users/sydoluciani/orgs", "repos_url": "https://api.github.com/users/sydoluciani/repos", "events_url": "https://api.github.com/users/sydoluciani/events{/privacy}", "received_events_url": "https://api.github.com/users/sydoluciani/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-24T02:58:57Z", "updated_at": "2020-06-24T14:31:46Z", "closed_at": "2020-06-24T14:31:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Changing mutate method to some thing else not working, and for a quick test just added resolver equal to mutate :\r\nclass CreatePerson(graphene.Mutation):\r\n    class Meta:\r\n        resolver = mutate\r\n\r\nAnd still received error:\r\n    resolver = mutate\r\nNameError: name 'mutate' is not defined\r\n\r\nHave tried changing mutate function name to different name matching the resolver value and still didn't work.\r\n\r\nIs this the right way of changing resolver in Mutation class?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1162", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1162/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1162/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1162/events", "html_url": "https://github.com/graphql-python/graphene/issues/1162", "id": 586650277, "node_id": "MDU6SXNzdWU1ODY2NTAyNzc=", "number": 1162, "title": "Question about mutation document", "user": {"login": "sydoluciani", "id": 60237469, "node_id": "MDQ6VXNlcjYwMjM3NDY5", "avatar_url": "https://avatars2.githubusercontent.com/u/60237469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sydoluciani", "html_url": "https://github.com/sydoluciani", "followers_url": "https://api.github.com/users/sydoluciani/followers", "following_url": "https://api.github.com/users/sydoluciani/following{/other_user}", "gists_url": "https://api.github.com/users/sydoluciani/gists{/gist_id}", "starred_url": "https://api.github.com/users/sydoluciani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sydoluciani/subscriptions", "organizations_url": "https://api.github.com/users/sydoluciani/orgs", "repos_url": "https://api.github.com/users/sydoluciani/repos", "events_url": "https://api.github.com/users/sydoluciani/events{/privacy}", "received_events_url": "https://api.github.com/users/sydoluciani/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-24T02:44:35Z", "updated_at": "2020-06-25T02:22:23Z", "closed_at": "2020-06-25T02:22:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Document says:\r\n# We must define a query for our schema\r\nhttps://docs.graphene-python.org/en/latest/types/mutations/#quick-example\r\n\r\nBut removing Query class, not causing problem and following code runs with no error:\r\n\r\n```\r\nimport graphene\r\n\r\nclass Person(graphene.ObjectType):\r\n    user_name = graphene.String()\r\n    age = graphene.Int()\r\n\r\nclass CreatePerson(graphene.Mutation):\r\n    class Arguments:\r\n        name = graphene.String()\r\n\r\n    ok = graphene.Boolean()\r\n    person = graphene.Field(lambda: Person)\r\n\r\n    def mutate(self, info, name):\r\n        person = Person(user_name=name)\r\n        ok = True\r\n        return CreatePerson(person=person, ok=ok)\r\n\r\nclass MyMutations(graphene.ObjectType):\r\n    make_person = CreatePerson.Field()\r\n\r\nschema = graphene.Schema(mutation=MyMutations)\r\n\r\nquery_str = \"\"\"\r\n    mutation myFirstMutation {\r\n        makePerson(name: \"Peter\") {\r\n            person {\r\n                __typename\r\n                userName\r\n            }\r\n            ok\r\n        }\r\n    }\r\n\"\"\"\r\n\r\nresult = schema.execute(query_str)\r\nprint(result.data)\r\n```\r\n\r\nIs it a document error ?\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1152", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1152/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1152/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1152/events", "html_url": "https://github.com/graphql-python/graphene/issues/1152", "id": 578059131, "node_id": "MDU6SXNzdWU1NzgwNTkxMzE=", "number": 1152, "title": "AssertionError: The type Droid does not match with the associated graphene type Droid.", "user": {"login": "iamsaurabhgupt", "id": 43205009, "node_id": "MDQ6VXNlcjQzMjA1MDA5", "avatar_url": "https://avatars2.githubusercontent.com/u/43205009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iamsaurabhgupt", "html_url": "https://github.com/iamsaurabhgupt", "followers_url": "https://api.github.com/users/iamsaurabhgupt/followers", "following_url": "https://api.github.com/users/iamsaurabhgupt/following{/other_user}", "gists_url": "https://api.github.com/users/iamsaurabhgupt/gists{/gist_id}", "starred_url": "https://api.github.com/users/iamsaurabhgupt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iamsaurabhgupt/subscriptions", "organizations_url": "https://api.github.com/users/iamsaurabhgupt/orgs", "repos_url": "https://api.github.com/users/iamsaurabhgupt/repos", "events_url": "https://api.github.com/users/iamsaurabhgupt/events{/privacy}", "received_events_url": "https://api.github.com/users/iamsaurabhgupt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-09T17:09:32Z", "updated_at": "2020-03-09T19:37:27Z", "closed_at": "2020-03-09T19:37:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi everyone,\r\n\r\nI am trying to understand the working of interfaces using the starwars example given in this code.\r\nThe execution of a simple query  leads to an AssertionError\r\n    query = \"\"\"\r\n        query HeroNameQuery {\r\n          hero {\r\n            name\r\n          }\r\n        }\r\n    \"\"\"\r\n\r\nAssertionError: The type Droid does not match with the associated graphene type Droid.\r\n\r\nAfter spending a lot of time searching a resolution of this issue, I couldn't find a right answer.\r\nThe relevant files are attached.\r\nPlease help.\r\n[starwars.zip](https://github.com/graphql-python/graphene/files/4308007/starwars.zip)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1149", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1149/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1149/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1149/events", "html_url": "https://github.com/graphql-python/graphene/issues/1149", "id": 575575011, "node_id": "MDU6SXNzdWU1NzU1NzUwMTE=", "number": 1149, "title": "How to monitor and debug? ", "user": {"login": "simkessy", "id": 5871660, "node_id": "MDQ6VXNlcjU4NzE2NjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/5871660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simkessy", "html_url": "https://github.com/simkessy", "followers_url": "https://api.github.com/users/simkessy/followers", "following_url": "https://api.github.com/users/simkessy/following{/other_user}", "gists_url": "https://api.github.com/users/simkessy/gists{/gist_id}", "starred_url": "https://api.github.com/users/simkessy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simkessy/subscriptions", "organizations_url": "https://api.github.com/users/simkessy/orgs", "repos_url": "https://api.github.com/users/simkessy/repos", "events_url": "https://api.github.com/users/simkessy/events{/privacy}", "received_events_url": "https://api.github.com/users/simkessy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-04T16:58:27Z", "updated_at": "2020-06-06T11:47:07Z", "closed_at": "2020-06-06T11:47:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "We are getting performance issues and \"request timed out\" randomly in out application. Wondering what utilities or tools I can use to debug resolver performance and track errors? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1145", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1145/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1145/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1145/events", "html_url": "https://github.com/graphql-python/graphene/issues/1145", "id": 572149477, "node_id": "MDU6SXNzdWU1NzIxNDk0Nzc=", "number": 1145, "title": "graphene error", "user": {"login": "mmayor", "id": 16427753, "node_id": "MDQ6VXNlcjE2NDI3NzUz", "avatar_url": "https://avatars0.githubusercontent.com/u/16427753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmayor", "html_url": "https://github.com/mmayor", "followers_url": "https://api.github.com/users/mmayor/followers", "following_url": "https://api.github.com/users/mmayor/following{/other_user}", "gists_url": "https://api.github.com/users/mmayor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmayor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmayor/subscriptions", "organizations_url": "https://api.github.com/users/mmayor/orgs", "repos_url": "https://api.github.com/users/mmayor/repos", "events_url": "https://api.github.com/users/mmayor/events{/privacy}", "received_events_url": "https://api.github.com/users/mmayor/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-27T15:17:02Z", "updated_at": "2020-06-26T18:40:45Z", "closed_at": "2020-06-26T18:40:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "from graphene.types.objecttype import ObjectTypeMeta\r\nImportError: cannot import name 'ObjectTypeMeta'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1142", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1142/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1142/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1142/events", "html_url": "https://github.com/graphql-python/graphene/issues/1142", "id": 571586202, "node_id": "MDU6SXNzdWU1NzE1ODYyMDI=", "number": 1142, "title": "Graphene v3 crashes on import", "user": {"login": "jaydenwindle", "id": 10178895, "node_id": "MDQ6VXNlcjEwMTc4ODk1", "avatar_url": "https://avatars2.githubusercontent.com/u/10178895?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaydenwindle", "html_url": "https://github.com/jaydenwindle", "followers_url": "https://api.github.com/users/jaydenwindle/followers", "following_url": "https://api.github.com/users/jaydenwindle/following{/other_user}", "gists_url": "https://api.github.com/users/jaydenwindle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaydenwindle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaydenwindle/subscriptions", "organizations_url": "https://api.github.com/users/jaydenwindle/orgs", "repos_url": "https://api.github.com/users/jaydenwindle/repos", "events_url": "https://api.github.com/users/jaydenwindle/events{/privacy}", "received_events_url": "https://api.github.com/users/jaydenwindle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-26T18:51:31Z", "updated_at": "2020-02-26T20:18:14Z", "closed_at": "2020-02-26T20:18:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm running some benchmarks on different Python GraphQL servers, and tried testing with the dev version of Graphene v3 from PyPi. When importing the library, I got the following error:\r\n\r\n```python\r\n  File \"./server.py\", line 4, in <module>\r\n    import graphene\r\n  File \"venv/lib/python3.7/site-packages/graphene/__init__.py\", line 3, in <module>\r\n    from .types import (\r\n  File \"venv/lib/python3.7/site-packages/graphene/types/__init__.py\", line 8, in <module>\r\n    from .datetime import Date, DateTime, Time\r\n  File \"venv/lib/python3.7/site-packages/graphene/types/datetime.py\", line 6, in <module>\r\n    from graphql.error import INVALID\r\nImportError: cannot import name 'INVALID' from 'graphql.error' (venv/lib/python3.7/site-packages/graphql/error/__init__.py)\r\n```\r\n\r\nIt looks like `graphene/types/datetime.py` tried to import `INVALID` from the wrong module (`graphql.error` in instead of `graphql`).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1141", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1141/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1141/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1141/events", "html_url": "https://github.com/graphql-python/graphene/issues/1141", "id": 569675104, "node_id": "MDU6SXNzdWU1Njk2NzUxMDQ=", "number": 1141, "title": "Does graphql/graphene support list of union?", "user": {"login": "abawchen", "id": 2952415, "node_id": "MDQ6VXNlcjI5NTI0MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2952415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abawchen", "html_url": "https://github.com/abawchen", "followers_url": "https://api.github.com/users/abawchen/followers", "following_url": "https://api.github.com/users/abawchen/following{/other_user}", "gists_url": "https://api.github.com/users/abawchen/gists{/gist_id}", "starred_url": "https://api.github.com/users/abawchen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abawchen/subscriptions", "organizations_url": "https://api.github.com/users/abawchen/orgs", "repos_url": "https://api.github.com/users/abawchen/repos", "events_url": "https://api.github.com/users/abawchen/events{/privacy}", "received_events_url": "https://api.github.com/users/abawchen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-24T07:18:14Z", "updated_at": "2020-02-25T10:37:01Z", "closed_at": "2020-02-25T10:37:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi guys,\r\n\r\nIs there any document or hint to do that? or is it possible to do that at this moment?\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1140", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1140/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1140/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1140/events", "html_url": "https://github.com/graphql-python/graphene/issues/1140", "id": 569105380, "node_id": "MDU6SXNzdWU1NjkxMDUzODA=", "number": 1140, "title": "Schema introspection can't handle List of Strings type", "user": {"login": "anton-kozlovsky", "id": 55976782, "node_id": "MDQ6VXNlcjU1OTc2Nzgy", "avatar_url": "https://avatars1.githubusercontent.com/u/55976782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anton-kozlovsky", "html_url": "https://github.com/anton-kozlovsky", "followers_url": "https://api.github.com/users/anton-kozlovsky/followers", "following_url": "https://api.github.com/users/anton-kozlovsky/following{/other_user}", "gists_url": "https://api.github.com/users/anton-kozlovsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/anton-kozlovsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anton-kozlovsky/subscriptions", "organizations_url": "https://api.github.com/users/anton-kozlovsky/orgs", "repos_url": "https://api.github.com/users/anton-kozlovsky/repos", "events_url": "https://api.github.com/users/anton-kozlovsky/events{/privacy}", "received_events_url": "https://api.github.com/users/anton-kozlovsky/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-21T18:09:28Z", "updated_at": "2020-06-05T00:01:17Z", "closed_at": "2020-06-05T00:01:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been trying to add a parameter for filtration. It should be a list of string values.\r\nIdeally, I would like to use `django_filters.ModelMultipleChoiceFilter` but `graphene` recognize it as a List of IDs which is not what I expect. But even if I try to use this, I'll receive validation errors.\r\n\r\n```\r\n assigned_turnovers = DjangoFilterConnectionField(\r\n        types.Turnover,\r\n        project_id=graphene.SmartID(),\r\n        id=graphene.SmartID(),\r\n        filterset_class=filters.turnover.TurnoverFilter,\r\n    )\r\n```\r\n\r\n```\r\nclass TurnoverFilter(BaseFilter):\r\n    task_shot_bid_status = django_filters.CharFilter(field_name=\"task_shots__bids__status\")\r\n```\r\n`schema.json`\r\n```\r\n               {\r\n                  \"defaultValue\": null,\r\n                  \"description\": null,\r\n                  \"name\": \"taskShotBidStatus\",\r\n                  \"type\": {\r\n                    \"kind\": \"LIST\",\r\n                    \"name\": null,\r\n                    \"ofType\": {\r\n                      \"kind\": \"SCALAR\",\r\n                      \"name\": \"ID\",\r\n                      \"ofType\": null\r\n                    }\r\n                  }\r\n                },\r\n```\r\n<img width=\"1411\" alt=\"Screen Shot 2020-02-21 at 20 56 15\" src=\"https://user-images.githubusercontent.com/55976782/75059154-6cf1f500-54ed-11ea-92d4-802a0d0608ff.png\">\r\n<img width=\"1435\" alt=\"Screen Shot 2020-02-21 at 20 56 43\" src=\"https://user-images.githubusercontent.com/55976782/75059160-70857c00-54ed-11ea-9bf6-c26e8da71e75.png\">\r\nOn the screenshots you can see that the errors contradict each other.\r\n\r\nOK, what if I try to define a parameter in `DjangoFilterConnectionField`?\r\n```\r\n assigned_turnovers = DjangoFilterConnectionField(\r\n        types.Turnover,\r\n        project_id=graphene.SmartID(),\r\n        id=graphene.SmartID(),\r\n        list_of_strings=graphene.List(graphene.String),\r\n        filterset_class=filters.turnover.TurnoverFilter,\r\n    )\r\n```\r\n\r\n`schema.json`\r\n```\r\n                {\r\n                  \"defaultValue\": null,\r\n                  \"description\": null,\r\n                  \"name\": \"listOfStrings\",\r\n                  \"type\": {\r\n                    \"kind\": \"LIST\",\r\n                    \"name\": null,\r\n                    \"ofType\": {\r\n                      \"kind\": \"SCALAR\",\r\n                      \"name\": \"String\",\r\n                      \"ofType\": null\r\n                    }\r\n                  }\r\n                },\r\n```\r\n<img width=\"1425\" alt=\"Screen Shot 2020-02-21 at 21 08 30\" src=\"https://user-images.githubusercontent.com/55976782/75059609-657f1b80-54ee-11ea-8321-45d6dde2ecd0.png\">\r\n<img width=\"1440\" alt=\"Screen Shot 2020-02-21 at 21 08 46\" src=\"https://user-images.githubusercontent.com/55976782/75059615-66b04880-54ee-11ea-9b52-ae83105fb2e7.png\">\r\n\r\nAs you can see the same errors.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1138", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1138/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1138/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1138/events", "html_url": "https://github.com/graphql-python/graphene/issues/1138", "id": 568252507, "node_id": "MDU6SXNzdWU1NjgyNTI1MDc=", "number": 1138, "title": "Optional JSONString input throws error if left empty", "user": {"login": "ashishnitinpatil", "id": 3517381, "node_id": "MDQ6VXNlcjM1MTczODE=", "avatar_url": "https://avatars0.githubusercontent.com/u/3517381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashishnitinpatil", "html_url": "https://github.com/ashishnitinpatil", "followers_url": "https://api.github.com/users/ashishnitinpatil/followers", "following_url": "https://api.github.com/users/ashishnitinpatil/following{/other_user}", "gists_url": "https://api.github.com/users/ashishnitinpatil/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashishnitinpatil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashishnitinpatil/subscriptions", "organizations_url": "https://api.github.com/users/ashishnitinpatil/orgs", "repos_url": "https://api.github.com/users/ashishnitinpatil/repos", "events_url": "https://api.github.com/users/ashishnitinpatil/events{/privacy}", "received_events_url": "https://api.github.com/users/ashishnitinpatil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-20T12:03:00Z", "updated_at": "2020-02-20T12:23:18Z", "closed_at": "2020-02-20T12:23:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "If we have an optional json input argument, e.g.\r\n```python\r\ngraphene.types.json.JSONString(required=False)\r\n```\r\n\r\nand we don't send / pass the argument in the mutation query, then it is throwing -\r\n\r\n```python\r\n/usr/local/lib/python3.7/json/decoder.py in raw_decode\r\n            raise JSONDecodeError(\"Expecting value\", s, err.value) from None \r\n```\r\n\r\nPrimarily an issue when trying to make additions to an existing API & keeping it backwards compatible (new field not required).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1137", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1137/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1137/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1137/events", "html_url": "https://github.com/graphql-python/graphene/issues/1137", "id": 567167016, "node_id": "MDU6SXNzdWU1NjcxNjcwMTY=", "number": 1137, "title": "resolver returning a list and having a parameter", "user": {"login": "datamusee", "id": 60007298, "node_id": "MDQ6VXNlcjYwMDA3Mjk4", "avatar_url": "https://avatars1.githubusercontent.com/u/60007298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datamusee", "html_url": "https://github.com/datamusee", "followers_url": "https://api.github.com/users/datamusee/followers", "following_url": "https://api.github.com/users/datamusee/following{/other_user}", "gists_url": "https://api.github.com/users/datamusee/gists{/gist_id}", "starred_url": "https://api.github.com/users/datamusee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datamusee/subscriptions", "organizations_url": "https://api.github.com/users/datamusee/orgs", "repos_url": "https://api.github.com/users/datamusee/repos", "events_url": "https://api.github.com/users/datamusee/events{/privacy}", "received_events_url": "https://api.github.com/users/datamusee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-18T21:23:54Z", "updated_at": "2020-02-19T11:03:17Z", "closed_at": "2020-02-19T11:03:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here is my schema\r\nclass Query(graphene.ObjectType):\r\n    hello = graphene.String(name=graphene.String(default_value=\"toi\"))\r\n    allSites = graphene.List(SiteType, fede=graphene.String(default_value=\"all\"))\r\n    def resolve_allSites(root, info, fede):\r\n        sites = getSites(fede)\r\n        return sites\r\n\r\n    def resolve_hello(root, info, name):\r\n        return 'Coucou {name}!'.format(name=name)\r\n\r\nThe resolve_hello works as expected, with or without the name parameter\r\nbut the resolve_allSites works as expected without a fede parameter, but the fede parameter isn't recognized. It is very similar to the resolve_hello resolver, but has a List of SiteType objects as result in place of a String.\r\nI'm newbie with graphene. I doesn't find how to add parameter to a resolver which need to return a list.\r\nAdvices?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1136", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1136/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1136/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1136/events", "html_url": "https://github.com/graphql-python/graphene/issues/1136", "id": 566867347, "node_id": "MDU6SXNzdWU1NjY4NjczNDc=", "number": 1136, "title": "Can't figure out how to get a parameter sent to a field", "user": {"login": "ztolley", "id": 56056, "node_id": "MDQ6VXNlcjU2MDU2", "avatar_url": "https://avatars1.githubusercontent.com/u/56056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ztolley", "html_url": "https://github.com/ztolley", "followers_url": "https://api.github.com/users/ztolley/followers", "following_url": "https://api.github.com/users/ztolley/following{/other_user}", "gists_url": "https://api.github.com/users/ztolley/gists{/gist_id}", "starred_url": "https://api.github.com/users/ztolley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ztolley/subscriptions", "organizations_url": "https://api.github.com/users/ztolley/orgs", "repos_url": "https://api.github.com/users/ztolley/repos", "events_url": "https://api.github.com/users/ztolley/events{/privacy}", "received_events_url": "https://api.github.com/users/ztolley/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-18T12:42:49Z", "updated_at": "2020-06-01T17:09:16Z", "closed_at": "2020-06-01T17:09:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not so much a bug, more a cry for help:\r\n\r\nI have a query\r\n\r\n```\r\nquery {\r\n  car(id:'1') {\r\n    make\r\n    model\r\n    rate {\r\n      speed(units: 'miles') {\r\n        value\r\n        accuracy\r\n      }\r\n      flow(units: 'gallon') {\r\n       value\r\n       accuracy\r\n     }\r\n    }\r\n  }\r\n\r\n```\r\n```\r\nclass Speed(ObjectType):\r\n    value = Int()\r\n    accuracy = Int()\r\n\r\n    @staticmethod\r\n    def resolve_value(root, info, **kwargs):\r\n        # How do I get the units arg here so I can potentially convert the value\r\n        return root\r\n\r\n    @staticmethod\r\n    def resolve_accuracy(root, info, **kwargs):\r\n        return root\r\n```\r\n\r\n\r\nI have a resolver for Speed but I want to know how the 'value' field in the Speed can get access to the units parameter.\r\n\r\nI think issue #510 is similar but no answer was found as far as I can see.\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1133", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1133/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1133/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1133/events", "html_url": "https://github.com/graphql-python/graphene/issues/1133", "id": 561802323, "node_id": "MDU6SXNzdWU1NjE4MDIzMjM=", "number": 1133, "title": "Can't use JSON string as input ", "user": {"login": "simkessy", "id": 5871660, "node_id": "MDQ6VXNlcjU4NzE2NjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/5871660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simkessy", "html_url": "https://github.com/simkessy", "followers_url": "https://api.github.com/users/simkessy/followers", "following_url": "https://api.github.com/users/simkessy/following{/other_user}", "gists_url": "https://api.github.com/users/simkessy/gists{/gist_id}", "starred_url": "https://api.github.com/users/simkessy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simkessy/subscriptions", "organizations_url": "https://api.github.com/users/simkessy/orgs", "repos_url": "https://api.github.com/users/simkessy/repos", "events_url": "https://api.github.com/users/simkessy/events{/privacy}", "received_events_url": "https://api.github.com/users/simkessy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-07T18:32:53Z", "updated_at": "2020-05-31T22:49:00Z", "closed_at": "2020-05-31T22:49:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to write a test that takes in json as a value for one of my fields and it's failing: \r\n\r\nI wrote the mutation like this: \r\n\r\n```\r\n        query = '''mutation {\r\n            createScorecard(\r\n                name: \"Test Scorecard\",\r\n                creatorId: 395549257913,\r\n                questionData: \"[{\\\"title\\\":\\\"This is a test question\\\",\\\"description\\\":\\\"Test question description\\\",\\\"answers\\\":[{\\\"text\\\":\\\"Yes\\\",\\\"point\\\":50,\\\"autofail\\\":true},{\\\"text\\\":\\\"No\\\",\\\"point\\\":50,\\\"autofail\\\":false}]}]\"\r\n            ) {\r\n                scorecard {\r\n                    name\r\n                }\r\n                error\r\n            }\r\n        }'''\r\n```\r\n\r\nBut i keep getting this error: \r\n\r\n> \r\n{'errors': [{'message': 'Syntax Error GraphQL (5:40) Expected :, found String \":\"\\n\\n4:                 creatorId: 395549257913,\\n5:                 questionData: \"[{\"title\":\"This is a test question\",\"description\":\"Test question description\",\"answers\":[{\"text\":\"Yes\",\"point\":50,\"autofail\":true},{\"text\":\"No\",\"point\":50,\"autofail\":false}]}]\"\\n                                          ^\\n6:             ) {\\n', 'locations': [{'line': 5, 'column': 40}]}]}\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1132", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1132/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1132/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1132/events", "html_url": "https://github.com/graphql-python/graphene/issues/1132", "id": 559293028, "node_id": "MDU6SXNzdWU1NTkyOTMwMjg=", "number": 1132, "title": "Small errors in tutorial", "user": {"login": "asexto", "id": 8999841, "node_id": "MDQ6VXNlcjg5OTk4NDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/8999841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asexto", "html_url": "https://github.com/asexto", "followers_url": "https://api.github.com/users/asexto/followers", "following_url": "https://api.github.com/users/asexto/following{/other_user}", "gists_url": "https://api.github.com/users/asexto/gists{/gist_id}", "starred_url": "https://api.github.com/users/asexto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asexto/subscriptions", "organizations_url": "https://api.github.com/users/asexto/orgs", "repos_url": "https://api.github.com/users/asexto/repos", "events_url": "https://api.github.com/users/asexto/events{/privacy}", "received_events_url": "https://api.github.com/users/asexto/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-03T19:44:19Z", "updated_at": "2020-05-19T00:45:54Z", "closed_at": "2020-05-19T00:45:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not completely sure about this, but while I was following the tutorial (https://docs.graphene-python.org/projects/django/en/latest/tutorial-plain/) some parts where not completely clear for me and I had to change two details when importing the schema:\r\n\r\n* I didn't seem obvious to me that I should create the ingredients application inside the cookbook project and not at the same level. This got obvious after checking the source code of the tutorial, but adding explicit information about this would make things easier.\r\n* I had problems trying to make Django find the scheme. I had to change some code from the \"Hello GraphQL - Schema and Object Types\" section:\r\n   * In 'cookbook/ingredients/schema.py' I changed '''from cookbook.ingredients.models import Category, Ingredient\"  to '''from .models import Category, Ingredient'''\r\n   * In 'cookbook/schema.py' I changed \"import cookbook.ingredients.schema\" to \"import ingredients.schema\"\r\n\r\nIn fact the code of the demo show differences in these two last places comparing it to the snippets shown in the tutorial. Or maybe I did something wrong, so please correct me if this was my mistake.\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1131", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1131/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1131/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1131/events", "html_url": "https://github.com/graphql-python/graphene/issues/1131", "id": 557511547, "node_id": "MDU6SXNzdWU1NTc1MTE1NDc=", "number": 1131, "title": "how to use distinct?", "user": {"login": "YankeeTube", "id": 34546950, "node_id": "MDQ6VXNlcjM0NTQ2OTUw", "avatar_url": "https://avatars1.githubusercontent.com/u/34546950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YankeeTube", "html_url": "https://github.com/YankeeTube", "followers_url": "https://api.github.com/users/YankeeTube/followers", "following_url": "https://api.github.com/users/YankeeTube/following{/other_user}", "gists_url": "https://api.github.com/users/YankeeTube/gists{/gist_id}", "starred_url": "https://api.github.com/users/YankeeTube/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YankeeTube/subscriptions", "organizations_url": "https://api.github.com/users/YankeeTube/orgs", "repos_url": "https://api.github.com/users/YankeeTube/repos", "events_url": "https://api.github.com/users/YankeeTube/events{/privacy}", "received_events_url": "https://api.github.com/users/YankeeTube/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-30T13:57:48Z", "updated_at": "2020-01-30T15:15:40Z", "closed_at": "2020-01-30T15:15:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "i use flask and sqlalchemy.\r\nand i have hashtag table\r\n\r\nbut i want to hashtag distinct and count.\r\n\r\n```sql\r\nselect distinct count(hashtag) from tag_table;\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1129", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1129/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1129/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1129/events", "html_url": "https://github.com/graphql-python/graphene/issues/1129", "id": 557433570, "node_id": "MDU6SXNzdWU1NTc0MzM1NzA=", "number": 1129, "title": "Question/Discussion: Supporting the Apollo Graph Manager ", "user": {"login": "fabianriewe", "id": 25394608, "node_id": "MDQ6VXNlcjI1Mzk0NjA4", "avatar_url": "https://avatars0.githubusercontent.com/u/25394608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabianriewe", "html_url": "https://github.com/fabianriewe", "followers_url": "https://api.github.com/users/fabianriewe/followers", "following_url": "https://api.github.com/users/fabianriewe/following{/other_user}", "gists_url": "https://api.github.com/users/fabianriewe/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabianriewe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabianriewe/subscriptions", "organizations_url": "https://api.github.com/users/fabianriewe/orgs", "repos_url": "https://api.github.com/users/fabianriewe/repos", "events_url": "https://api.github.com/users/fabianriewe/events{/privacy}", "received_events_url": "https://api.github.com/users/fabianriewe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-30T11:30:55Z", "updated_at": "2020-05-20T15:34:27Z", "closed_at": "2020-05-20T15:34:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello everyone,\r\nis there a way to build a wrapper or something similar, which would provide support for the [Apollo Graph Manager](https://www.apollographql.com/docs/graph-manager/)? I was not able to find a existing project on this. Is anyone interested in building or collaborating on this feature?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1128", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1128/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1128/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1128/events", "html_url": "https://github.com/graphql-python/graphene/issues/1128", "id": 556954402, "node_id": "MDU6SXNzdWU1NTY5NTQ0MDI=", "number": 1128, "title": "get_unbound_function is a noop", "user": {"login": "bjoernricks", "id": 897575, "node_id": "MDQ6VXNlcjg5NzU3NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/897575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjoernricks", "html_url": "https://github.com/bjoernricks", "followers_url": "https://api.github.com/users/bjoernricks/followers", "following_url": "https://api.github.com/users/bjoernricks/following{/other_user}", "gists_url": "https://api.github.com/users/bjoernricks/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjoernricks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjoernricks/subscriptions", "organizations_url": "https://api.github.com/users/bjoernricks/orgs", "repos_url": "https://api.github.com/users/bjoernricks/repos", "events_url": "https://api.github.com/users/bjoernricks/events{/privacy}", "received_events_url": "https://api.github.com/users/bjoernricks/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-29T15:55:26Z", "updated_at": "2020-05-12T23:54:24Z", "closed_at": "2020-05-12T23:54:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "`get_unbound_function` from graphene utils always returns the same passed function.\r\n\r\n```python\r\n>>> from graphene.utils.get_unbound_function import get_unbound_function\r\n>>> class Foo:\r\n...   def bar(self):\r\n...     pass\r\n... \r\n>>> f = Foo()\r\n>>> f.bar\r\n<bound method Foo.bar of <__main__.Foo object at 0x7f57f94b9bd0>>\r\n>>> get_unbound_function(f.bar)\r\n<bound method Foo.bar of <__main__.Foo object at 0x7f57f94b9bd0>>\r\n>>> hasattr(f.bar, '__self__')\r\nTrue\r\n>>> f.bar == get_unbound_function(f.bar)\r\nTrue\r\n```\r\n\r\nIMHO this if clause\r\nhttps://github.com/graphql-python/graphene/blob/bd6d8d086dc350ab23f2ba56aee16de12bad53cf/graphene/utils/get_unbound_function.py#L2\r\ncan never evaluate to true. If the function hasn't a `__self__` prop getatttr evaluates to true and `bool(getattr(func, '__self__'))` is also true if the property exists.\r\n\r\nI guess the line should be\r\n```python\r\nif hasattr(func, \"__self__\", False):\r\n```\r\nor just use\r\n```python\r\ndef get_unbound_function(func):\r\n    return gettattr(func, '__func__', func)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1125", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1125/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1125/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1125/events", "html_url": "https://github.com/graphql-python/graphene/issues/1125", "id": 553026548, "node_id": "MDU6SXNzdWU1NTMwMjY1NDg=", "number": 1125, "title": "Graphiql Offline *.js Support", "user": {"login": "usmcamp0811", "id": 17965629, "node_id": "MDQ6VXNlcjE3OTY1NjI5", "avatar_url": "https://avatars0.githubusercontent.com/u/17965629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usmcamp0811", "html_url": "https://github.com/usmcamp0811", "followers_url": "https://api.github.com/users/usmcamp0811/followers", "following_url": "https://api.github.com/users/usmcamp0811/following{/other_user}", "gists_url": "https://api.github.com/users/usmcamp0811/gists{/gist_id}", "starred_url": "https://api.github.com/users/usmcamp0811/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usmcamp0811/subscriptions", "organizations_url": "https://api.github.com/users/usmcamp0811/orgs", "repos_url": "https://api.github.com/users/usmcamp0811/repos", "events_url": "https://api.github.com/users/usmcamp0811/events{/privacy}", "received_events_url": "https://api.github.com/users/usmcamp0811/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-21T17:35:06Z", "updated_at": "2020-01-29T11:04:36Z", "closed_at": "2020-01-29T11:04:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just tried to spin up an API at work on an offline server and found out that Graphene is using CDNs for Graphiql. How can I use Graphiql without being able to get to the CDNs? Can we include the *.js files with the Graphene install? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1124", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1124/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1124/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1124/events", "html_url": "https://github.com/graphql-python/graphene/issues/1124", "id": 552365557, "node_id": "MDU6SXNzdWU1NTIzNjU1NTc=", "number": 1124, "title": "Schema is not configured for mutations", "user": {"login": "1XuMuK1", "id": 58918975, "node_id": "MDQ6VXNlcjU4OTE4OTc1", "avatar_url": "https://avatars2.githubusercontent.com/u/58918975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1XuMuK1", "html_url": "https://github.com/1XuMuK1", "followers_url": "https://api.github.com/users/1XuMuK1/followers", "following_url": "https://api.github.com/users/1XuMuK1/following{/other_user}", "gists_url": "https://api.github.com/users/1XuMuK1/gists{/gist_id}", "starred_url": "https://api.github.com/users/1XuMuK1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1XuMuK1/subscriptions", "organizations_url": "https://api.github.com/users/1XuMuK1/orgs", "repos_url": "https://api.github.com/users/1XuMuK1/repos", "events_url": "https://api.github.com/users/1XuMuK1/events{/privacy}", "received_events_url": "https://api.github.com/users/1XuMuK1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-20T15:22:26Z", "updated_at": "2020-01-20T15:34:48Z", "closed_at": "2020-01-20T15:34:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1123", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1123/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1123/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1123/events", "html_url": "https://github.com/graphql-python/graphene/issues/1123", "id": 547864579, "node_id": "MDU6SXNzdWU1NDc4NjQ1Nzk=", "number": 1123, "title": "Export graphql", "user": {"login": "viperfx", "id": 328257, "node_id": "MDQ6VXNlcjMyODI1Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/328257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viperfx", "html_url": "https://github.com/viperfx", "followers_url": "https://api.github.com/users/viperfx/followers", "following_url": "https://api.github.com/users/viperfx/following{/other_user}", "gists_url": "https://api.github.com/users/viperfx/gists{/gist_id}", "starred_url": "https://api.github.com/users/viperfx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viperfx/subscriptions", "organizations_url": "https://api.github.com/users/viperfx/orgs", "repos_url": "https://api.github.com/users/viperfx/repos", "events_url": "https://api.github.com/users/viperfx/events{/privacy}", "received_events_url": "https://api.github.com/users/viperfx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-10T04:52:06Z", "updated_at": "2020-01-11T13:47:02Z", "closed_at": "2020-01-11T13:47:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to export the schema as a graphql type file\r\n\r\nE.g.\r\n\r\n```\r\ntype User {\r\n  id: Int!\r\n  name: String!\r\n  email: String!\r\n  recipes: [Recipe!]!\r\n}\r\n\r\ntype Recipe {\r\n  id: Int!\r\n  title: String!\r\n  ingredients: String!\r\n  direction: String!\r\n  user: User!\r\n}\r\n\r\ntype Query {\r\n  user(id: Int!): User\r\n  allRecipes: [Recipe!]!\r\n  recipe(id: Int!): Recipe\r\n}\r\n\r\ntype Mutation {\r\n  createUser(name: String!, email: String!, password: String!): User!\r\n  createRecipe(\r\n    userId: Int!\r\n    title: String!\r\n    ingredients: String!\r\n    direction: String!\r\n  ): Recipe!\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1122", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1122/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1122/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1122/events", "html_url": "https://github.com/graphql-python/graphene/issues/1122", "id": 547227870, "node_id": "MDU6SXNzdWU1NDcyMjc4NzA=", "number": 1122, "title": "Login Required for specific group of queries and mutations", "user": {"login": "viperfx", "id": 328257, "node_id": "MDQ6VXNlcjMyODI1Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/328257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viperfx", "html_url": "https://github.com/viperfx", "followers_url": "https://api.github.com/users/viperfx/followers", "following_url": "https://api.github.com/users/viperfx/following{/other_user}", "gists_url": "https://api.github.com/users/viperfx/gists{/gist_id}", "starred_url": "https://api.github.com/users/viperfx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viperfx/subscriptions", "organizations_url": "https://api.github.com/users/viperfx/orgs", "repos_url": "https://api.github.com/users/viperfx/repos", "events_url": "https://api.github.com/users/viperfx/events{/privacy}", "received_events_url": "https://api.github.com/users/viperfx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-09T03:34:58Z", "updated_at": "2020-04-23T00:23:33Z", "closed_at": "2020-04-23T00:23:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "The docs show that LoginRequired can be applied to the whole graphql layer. \r\n\r\nUsing http://docs.graphene-python.org/projects/django/en/latest/authorization/#adding-login-required\r\n\r\nWhat I am looking to have is a group of graphql mutations and queries that are required to be login required. \r\n\r\nHere are some common use cases why a group of non-login required mutations and queries may be needed:\r\n- Password forget\r\n- Login required\r\n- Fetching data (that is not tied to a user)\r\n\r\nHow can this be achieved with graphene? \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1121", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1121/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1121/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1121/events", "html_url": "https://github.com/graphql-python/graphene/issues/1121", "id": 542656489, "node_id": "MDU6SXNzdWU1NDI2NTY0ODk=", "number": 1121, "title": "Add support for `NullValue`", "user": {"login": "staticfox", "id": 6256971, "node_id": "MDQ6VXNlcjYyNTY5NzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/6256971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/staticfox", "html_url": "https://github.com/staticfox", "followers_url": "https://api.github.com/users/staticfox/followers", "following_url": "https://api.github.com/users/staticfox/following{/other_user}", "gists_url": "https://api.github.com/users/staticfox/gists{/gist_id}", "starred_url": "https://api.github.com/users/staticfox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/staticfox/subscriptions", "organizations_url": "https://api.github.com/users/staticfox/orgs", "repos_url": "https://api.github.com/users/staticfox/repos", "events_url": "https://api.github.com/users/staticfox/events{/privacy}", "received_events_url": "https://api.github.com/users/staticfox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-26T19:54:21Z", "updated_at": "2019-12-27T11:51:46Z", "closed_at": "2019-12-27T11:51:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI'm running in to the following error when trying to use the `null` keyword:\r\n\r\n```\r\nSyntax Error GraphQL (2:29) Unexpected Name \"null\"\r\n```\r\n\r\nI seem to recall a PR opened years ago that added support for null, but it looks like all development focus has shifted towards v3 of this library. Unfortunately, v3 will not be compatible for me as there seems to be no progress for v3 compatibility towards graphene-sqlalchemy and flask-graphql. Are there any plans to support `null` for the current version of this library?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1118", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1118/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1118/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1118/events", "html_url": "https://github.com/graphql-python/graphene/issues/1118", "id": 542043777, "node_id": "MDU6SXNzdWU1NDIwNDM3Nzc=", "number": 1118, "title": "name 'relay' is not defined", "user": {"login": "yaserrahimi", "id": 19384196, "node_id": "MDQ6VXNlcjE5Mzg0MTk2", "avatar_url": "https://avatars3.githubusercontent.com/u/19384196?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaserrahimi", "html_url": "https://github.com/yaserrahimi", "followers_url": "https://api.github.com/users/yaserrahimi/followers", "following_url": "https://api.github.com/users/yaserrahimi/following{/other_user}", "gists_url": "https://api.github.com/users/yaserrahimi/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaserrahimi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaserrahimi/subscriptions", "organizations_url": "https://api.github.com/users/yaserrahimi/orgs", "repos_url": "https://api.github.com/users/yaserrahimi/repos", "events_url": "https://api.github.com/users/yaserrahimi/events{/privacy}", "received_events_url": "https://api.github.com/users/yaserrahimi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}, {"id": 440761370, "node_id": "MDU6TGFiZWw0NDA3NjEzNzA=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%F0%9F%91%80%20more%20info%20needed", "name": "\ud83d\udc40 more info needed", "color": "d815be", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-12-24T08:30:16Z", "updated_at": "2020-04-14T13:01:55Z", "closed_at": "2020-04-14T13:01:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I install graphene-django now when i want use relay i get this error \r\nmy code is:\r\n```\r\nimport graphene\r\nfrom graphene_django import DjangoObjectType\r\nfrom graphene_django.filter import DjangoFilterConnectionField\r\nfrom main.models import Fish\r\n\r\n\r\nclass FishNode(DjangoObjectType):\r\n    class Meta:\r\n        model = Fish\r\n        filter = ['name', 'serial']\r\n        interfaces = (graphene.relay.Node,)\r\n\r\n\r\nclass Query(graphene.ObjectType):\r\n    fish_r = graphene.relay.Node.Field(FishNode)\r\n    all_fish_r = DjangoFilterConnectionField(FishNode)\r\n```\r\nmy graphene and graphene-django version:\r\n```\r\ngraphene          2.1.8  \r\ngraphene-django   2.7.1 \r\n```\r\nerror text:\r\n```\r\nWatching for file changes with StatReloader\r\nPerforming system checks...\r\n\r\nSystem check identified no issues (0 silenced).\r\nDecember 24, 2019 - 08:27:41\r\nDjango version 3.0, using settings 'efish.settings'\r\nStarting development server at http://127.0.0.1:8000/\r\nQuit the server with CONTROL-C.\r\nInternal Server Error: /graphql\r\nTraceback (most recent call last):\r\n  File \"/home/yaser/.virtualenvs/efish/lib/python3.6/site-packages/django/core/handlers/exception.py\", line 34, in inner\r\n    response = get_response(request)\r\n  File \"/home/yaser/.virtualenvs/efish/lib/python3.6/site-packages/django/core/handlers/base.py\", line 115, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/home/yaser/.virtualenvs/efish/lib/python3.6/site-packages/django/core/handlers/base.py\", line 113, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/home/yaser/.virtualenvs/efish/lib/python3.6/site-packages/django/views/generic/base.py\", line 62, in view\r\n    self = cls(**initkwargs)\r\n  File \"/home/yaser/.virtualenvs/efish/lib/python3.6/site-packages/graphene_django/views.py\", line 79, in __init__\r\n    schema = graphene_settings.SCHEMA\r\n  File \"/home/yaser/.virtualenvs/efish/lib/python3.6/site-packages/graphene_django/settings.py\", line 117, in __getattr__\r\n    val = perform_import(val, attr)\r\n  File \"/home/yaser/.virtualenvs/efish/lib/python3.6/site-packages/graphene_django/settings.py\", line 56, in perform_import\r\n    return import_from_string(val, setting_name)\r\n  File \"/home/yaser/.virtualenvs/efish/lib/python3.6/site-packages/graphene_django/settings.py\", line 70, in import_from_string\r\n    module = importlib.import_module(module_path)\r\n  File \"/home/yaser/.virtualenvs/efish/lib/python3.6/importlib/__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 994, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 678, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"/home/yaser/Desktop/e-fish/efish/efish/schema.py\", line 7, in <module>\r\n    api.fish-relay.schema.Query,\r\nNameError: name 'relay' is not defined\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1117", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1117/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1117/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1117/events", "html_url": "https://github.com/graphql-python/graphene/issues/1117", "id": 541578753, "node_id": "MDU6SXNzdWU1NDE1Nzg3NTM=", "number": 1117, "title": "Request-level middleware", "user": {"login": "melvinkcx", "id": 16914545, "node_id": "MDQ6VXNlcjE2OTE0NTQ1", "avatar_url": "https://avatars2.githubusercontent.com/u/16914545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/melvinkcx", "html_url": "https://github.com/melvinkcx", "followers_url": "https://api.github.com/users/melvinkcx/followers", "following_url": "https://api.github.com/users/melvinkcx/following{/other_user}", "gists_url": "https://api.github.com/users/melvinkcx/gists{/gist_id}", "starred_url": "https://api.github.com/users/melvinkcx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/melvinkcx/subscriptions", "organizations_url": "https://api.github.com/users/melvinkcx/orgs", "repos_url": "https://api.github.com/users/melvinkcx/repos", "events_url": "https://api.github.com/users/melvinkcx/events{/privacy}", "received_events_url": "https://api.github.com/users/melvinkcx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-23T05:17:08Z", "updated_at": "2020-05-14T13:03:55Z", "closed_at": "2020-05-14T13:03:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using Graphene with Django, and I have a middleware that checks user auth token.  I'm having an issue with the middleware being executed at the field-level. Each field resolution triggers a call to check user's token in my case. \r\n\r\nAny suggestions to improve this? Any plans for supporting request-level middleware?\r\n\r\nI have some idea:\r\n1. Move auth checking into a Django middleware, but that means any exception raised will not be serialized into GraphQLResponse.\r\n2. Add a flag  `is_authenticated` into `info.context` object, if the value of `info.context.is_authenticated` is True, skip the middleware by calling `next()`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1116", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1116/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1116/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1116/events", "html_url": "https://github.com/graphql-python/graphene/issues/1116", "id": 541330520, "node_id": "MDU6SXNzdWU1NDEzMzA1MjA=", "number": 1116, "title": "Nested DRF Serializer raises AttributeError: 'NoneType' object has no attribute '_meta'", "user": {"login": "elcolie", "id": 18206728, "node_id": "MDQ6VXNlcjE4MjA2NzI4", "avatar_url": "https://avatars0.githubusercontent.com/u/18206728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elcolie", "html_url": "https://github.com/elcolie", "followers_url": "https://api.github.com/users/elcolie/followers", "following_url": "https://api.github.com/users/elcolie/following{/other_user}", "gists_url": "https://api.github.com/users/elcolie/gists{/gist_id}", "starred_url": "https://api.github.com/users/elcolie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elcolie/subscriptions", "organizations_url": "https://api.github.com/users/elcolie/orgs", "repos_url": "https://api.github.com/users/elcolie/repos", "events_url": "https://api.github.com/users/elcolie/events{/privacy}", "received_events_url": "https://api.github.com/users/elcolie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-21T14:07:00Z", "updated_at": "2020-08-16T13:52:28Z", "closed_at": "2020-04-03T14:48:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can use `Query` and `Mutation`. But after I add `SerializerMutation`\r\n```python\r\nfrom graphene_django.rest_framework.mutation import SerializerMutation\r\n\r\nfrom multy_herr.objections.api.serializers import ObjectionSerializer\r\n\r\n\r\nclass ObjectionMutation(SerializerMutation):\r\n    class Meta:\r\n        serializer_class = ObjectionSerializer\r\n        model_operations = ['create', 'update']\r\n        lookup_fields = 'id'\r\n\r\n```\r\n`serializers.py`\r\n```python\r\nimport datetime\r\nfrom datetime import datetime as dt\r\nfrom typing import Any\r\n\r\nfrom actstream import action\r\nfrom django.conf import settings\r\nfrom rest_framework import serializers\r\n\r\nfrom multy_herr.objections.models import Objection\r\nfrom multy_herr.taskapp.celery import report_tweet, auto_hide_tweet\r\nfrom multy_herr.tweets.api.serializers import TweetSerializer\r\nfrom multy_herr.tweets.models import Tweet\r\n\r\n\r\nclass ObjectionSerializer(serializers.ModelSerializer):\r\n    tweet_detail = TweetSerializer(read_only=True)\r\n\r\n    class Meta:\r\n        model = Objection\r\n        fields = [\r\n            'id',\r\n            'tweet',\r\n            'tweet_detail',\r\n            'hidden',\r\n            'report',\r\n            'detail',\r\n        ]\r\n\r\n    def validate_tweet(self, value: Tweet):\r\n        user = self.context['request'].user\r\n        if value.created_by == user:\r\n            raise serializers.ValidationError(detail=f\"I know how do you feel...\")\r\n        if Objection.objects.filter(tweet=value, created_by=user, hidden=True).exists():\r\n            raise serializers.ValidationError(detail=f\"You have hide this tweet already!\")\r\n        return value\r\n\r\n    def create(self, validated_data: Any) -> Any:\r\n        user = self.context['request'].user\r\n        validated_data['created_by'] = user\r\n        objection = super().create(validated_data)\r\n\r\n        # Create `Action`\r\n        tuple_list = action.send(user, verb='objected', action_object=objection, target=validated_data['tweet'])\r\n\r\n        if settings.PRODUCTION:\r\n            # Dispatch job to worker and let developers knows the problem\r\n            tweet = validated_data['tweet']\r\n            report_tweet.delay(tweet.id)\r\n            current_dt = dt.utcnow()\r\n            dead_line = current_dt + datetime.timedelta(days=1)\r\n            auto_hide_tweet.apply_async(args=(tweet.id,), eta=dead_line)\r\n        else:\r\n            report_tweet(validated_data['tweet'].id)\r\n        return objection\r\n```\r\n\r\n`schema.py`\r\n```python\r\nimport graphene\r\nimport graphql_jwt\r\n\r\nfrom multy_herr.objections.grapheql.mutations import ObjectionMutation\r\nfrom multy_herr.objections.grapheql.queries import ObjectionQuery\r\n\r\n\r\nclass Query(ObjectionQuery, graphene.ObjectType):\r\n    pass\r\n\r\n\r\nclass Mutation(graphene.ObjectType):\r\n    token_auth = graphql_jwt.ObtainJSONWebToken.Field()\r\n    verify_token = graphql_jwt.Verify.Field()\r\n    refresh_token = graphql_jwt.Refresh.Field()\r\n\r\n    objection = ObjectionMutation.Field() # This line\r\n\r\n\r\nschema = graphene.Schema(query=Query, mutation=Mutation)\r\n```\r\n\r\nHere is my full traceback\r\n```bash\r\n/Users/sarit/.pyenv/versions/multy_herr/bin/python /Users/sarit/mein-codes/multy_herr/manage.py runserver 8000\r\nINFO|21/Dec/2019 14:02:41|Watching for file changes with StatReloader\r\nPerforming system checks...\r\n\r\nException in thread django-main-thread:\r\nTraceback (most recent call last):\r\n  File \"/Users/sarit/.pyenv/versions/3.8.1/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\r\n    self.run()\r\n  File \"/Users/sarit/.pyenv/versions/3.8.1/lib/python3.8/threading.py\", line 870, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/django/utils/autoreload.py\", line 53, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/django/core/management/commands/runserver.py\", line 117, in inner_run\r\n    self.check(display_num_errors=True)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/django/core/management/base.py\", line 392, in check\r\n    all_issues = self._run_checks(\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/django/core/management/base.py\", line 382, in _run_checks\r\n    return checks.run_checks(**kwargs)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/django/core/checks/registry.py\", line 72, in run_checks\r\n    new_errors = check(app_configs=app_configs)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/django/core/checks/urls.py\", line 13, in check_url_config\r\n    return check_resolver(resolver)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/django/core/checks/urls.py\", line 23, in check_resolver\r\n    return check_method()\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/django/urls/resolvers.py\", line 407, in check\r\n    for pattern in self.url_patterns:\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/django/utils/functional.py\", line 48, in __get__\r\n    res = instance.__dict__[self.name] = self.func(instance)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/django/urls/resolvers.py\", line 588, in url_patterns\r\n    patterns = getattr(self.urlconf_module, \"urlpatterns\", self.urlconf_module)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/django/utils/functional.py\", line 48, in __get__\r\n    res = instance.__dict__[self.name] = self.func(instance)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/django/urls/resolvers.py\", line 581, in urlconf_module\r\n    return import_module(self.urlconf_name)\r\n  File \"/Users/sarit/.pyenv/versions/3.8.1/lib/python3.8/importlib/__init__.py\", line 127, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1014, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 975, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 671, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 783, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"/Users/sarit/mein-codes/multy_herr/config/urls.py\", line 21, in <module>\r\n    from schema import schema\r\n  File \"/Users/sarit/mein-codes/multy_herr/schema.py\", line 20, in <module>\r\n    schema = graphene.Schema(query=Query, mutation=Mutation)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/graphene/types/schema.py\", line 78, in __init__\r\n    self.build_typemap()\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/graphene/types/schema.py\", line 167, in build_typemap\r\n    self._type_map = TypeMap(\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/graphene/types/typemap.py\", line 80, in __init__\r\n    super(TypeMap, self).__init__(types)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/graphql/type/typemap.py\", line 28, in __init__\r\n    self.update(reduce(self.reducer, types, OrderedDict()))  # type: ignore\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/graphene/types/typemap.py\", line 88, in reducer\r\n    return self.graphene_reducer(map, type)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/graphene/types/typemap.py\", line 117, in graphene_reducer\r\n    return GraphQLTypeMap.reducer(map, internal_type)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/graphql/type/typemap.py\", line 106, in reducer\r\n    field_map = type.fields\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/graphql/pyutils/cached_property.py\", line 22, in __get__\r\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/graphql/type/definition.py\", line 226, in fields\r\n    return define_field_map(self, self._fields)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/graphql/type/definition.py\", line 240, in define_field_map\r\n    field_map = field_map()\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/graphene/types/typemap.py\", line 275, in construct_fields_for_type\r\n    map = self.reducer(map, field.type)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/graphene/types/typemap.py\", line 88, in reducer\r\n    return self.graphene_reducer(map, type)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/graphene/types/typemap.py\", line 117, in graphene_reducer\r\n    return GraphQLTypeMap.reducer(map, internal_type)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/graphql/type/typemap.py\", line 106, in reducer\r\n    field_map = type.fields\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/graphql/pyutils/cached_property.py\", line 22, in __get__\r\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/graphql/type/definition.py\", line 226, in fields\r\n    return define_field_map(self, self._fields)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/graphql/type/definition.py\", line 240, in define_field_map\r\n    field_map = field_map()\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/graphene/types/typemap.py\", line 276, in construct_fields_for_type\r\n    field_type = self.get_field_type(map, field.type)\r\n  File \"/Users/sarit/.pyenv/versions/multy_herr/lib/python3.8/site-packages/graphene/types/typemap.py\", line 337, in get_field_type\r\n    return map.get(type._meta.name)\r\nAttributeError: 'NoneType' object has no attribute '_meta'\r\n```\r\n\r\nHere is my `requirements.txt`\r\n```bash\r\n#\r\n# This file is autogenerated by pip-compile\r\n# To update, run:\r\n#\r\n#    pip-compile requirements.in\r\n#\r\n-e git+git@github.com:justquick/django-activity-stream.git@master#egg=django-activity-stream\r\n-e git+git@github.com:jazzband/django-push-notifications.git@master#egg=django-push-notifications\r\n-e git+git@github.com:elcolie/rest-framework-generic-relations.git@master#egg=rest-framework-generic-relations\r\nalabaster==0.7.12         # via sphinx\r\namqp==2.5.2               # via kombu\r\naniso8601==7.0.0          # via graphene\r\napns2==0.7.1\r\nappnope==0.1.0            # via ipython\r\nargon2-cffi==19.2.0\r\narrow==0.15.4\r\nasgiref==3.2.3            # via django\r\nattrs==19.3.0             # via pytest\r\nbabel==2.7.0              # via flower, sphinx\r\nbackcall==0.1.0           # via ipython\r\nbilliard==3.6.1.0         # via celery\r\nboto3==1.10.44            # via django-storages\r\nbotocore==1.13.44         # via boto3\r\ncelery==4.4.0\r\ncertifi==2019.11.28       # via requests, sentry-sdk\r\ncffi==1.13.2              # via argon2-cffi, cryptography\r\nchardet==3.0.4            # via requests\r\ncollectfast==1.3.1\r\ncoreapi==2.3.3\r\ncoreschema==0.0.4         # via coreapi\r\ncoverage==5.0\r\ncryptography==2.8         # via apns2, http-ece, py-vapid, pywebpush\r\ndecorator==4.4.1          # via ipython\r\ndefusedxml==0.6.0         # via python3-openid\r\ndjango-allauth==0.41.0\r\ndjango-anymail[mailgun]==7.0.0\r\ndjango-celery-results==1.1.2\r\ndjango-cors-headers==3.2.0\r\ndjango-coverage-plugin==1.6.0\r\ndjango-crispy-forms==1.8.1\r\ndjango-debug-toolbar==2.1\r\ndjango-environ==0.4.5\r\ndjango-extensions==2.2.5\r\ndjango-extra-fields==2.0.2\r\ndjango-filter==2.2.0\r\ndjango-graphql-jwt==0.3.0\r\ndjango-js-asset==1.2.2    # via django-mptt\r\ndjango-model-utils==4.0.0\r\ndjango-mptt==0.10.0\r\ndjango-redis==4.11.0\r\ndjango-rest-auth==0.9.5\r\ndjango-storages[boto3]==1.8\r\ndjango-templated-mail==1.1.1  # via djoser\r\ndjango==3.0.1\r\ndjangorestframework-jwt==1.11.0\r\ndjangorestframework-simplejwt==4.4.0\r\ndjangorestframework==3.10.3\r\ndjoser==2.0.3\r\ndocutils==0.15.2          # via botocore, sphinx\r\nentrypoints==0.3          # via flake8\r\nfactory-boy==2.12.0\r\nfaker==3.0.0              # via factory-boy\r\nflake8==3.7.9\r\nflower==0.9.3\r\nfreezegun==0.3.12\r\ngraphene-django==2.7.1\r\ngraphene==2.1.8           # via graphene-django\r\ngraphql-core==2.2.1       # via django-graphql-jwt, graphene, graphene-django, graphql-relay\r\ngraphql-relay==2.0.1      # via graphene\r\ngunicorn==20.0.4\r\nh2==2.6.2                 # via hyper\r\nhpack==3.0.0              # via h2\r\nhttp-ece==1.1.0           # via pywebpush\r\nhyper==0.7.0              # via apns2\r\nhyperframe==3.2.0         # via h2, hyper\r\nidna==2.8                 # via requests\r\nimagesize==1.1.0          # via sphinx\r\nipdb==0.12.3\r\nipython==7.10.2           # via ipdb\r\nitypes==1.1.0             # via coreapi\r\njedi==0.15.2              # via ipython\r\njinja2==2.10.3            # via coreschema, sphinx\r\njmespath==0.9.4           # via boto3, botocore\r\nkombu==4.6.7              # via celery\r\nmarkdown==3.1.1\r\nmarkupsafe==1.1.1         # via jinja2\r\nmccabe==0.6.1             # via flake8\r\nmodel-mommy==2.0.0\r\nmore-itertools==8.0.2     # via pytest\r\noauthlib==3.1.0           # via requests-oauthlib\r\npackaging==19.2           # via pytest, pytest-sugar, sphinx\r\nparso==0.5.2              # via jedi\r\npexpect==4.7.0            # via ipython\r\npickleshare==0.7.5        # via ipython\r\npillow==6.2.1\r\npluggy==0.13.1            # via pytest\r\npromise==2.3              # via graphene-django, graphql-core, graphql-relay\r\nprompt-toolkit==3.0.2     # via ipython\r\npsycopg2==2.8.4\r\npubnub==4.1.7\r\npy-vapid==1.7.0           # via pywebpush\r\npy==1.8.0                 # via pytest\r\npycodestyle==2.5.0        # via flake8\r\npycparser==2.19           # via cffi\r\npycryptodomex==3.9.4      # via pubnub\r\npyflakes==2.1.1           # via flake8\r\npygments==2.5.2           # via ipython, sphinx\r\npyjwt==1.7.1              # via apns2, django-graphql-jwt, djangorestframework-jwt, djangorestframework-simplejwt\r\npytest-django==3.7.0\r\npytest-sugar==0.9.2\r\npytest==5.3.2\r\npython-dateutil==2.8.1    # via arrow, botocore, faker, freezegun\r\npython-slugify==4.0.0\r\npython3-openid==3.1.0     # via django-allauth\r\npytz==2019.3\r\npywebpush==1.10.1\r\nraven==6.10.0\r\nredis==3.3.11\r\nrequests-oauthlib==1.3.0  # via django-allauth\r\nrequests==2.22.0          # via coreapi, django-allauth, django-anymail, pubnub, pywebpush, requests-oauthlib, sphinx\r\nrx==1.6.1                 # via graphql-core\r\ns3transfer==0.2.1         # via boto3\r\nsentry-sdk==0.13.5\r\nsingledispatch==3.4.0.3   # via graphene-django\r\nsix==1.13.0               # via argon2-cffi, cryptography, django-anymail, django-coverage-plugin, django-extensions, django-rest-auth, faker, freezegun, graphene, graphene-django, graphql-core, graphql-relay, promise, pubnub, python-dateutil, singledispatch\r\nsnowballstemmer==2.0.0    # via sphinx\r\nsphinx==2.3.0\r\nsphinxcontrib-applehelp==1.0.1  # via sphinx\r\nsphinxcontrib-devhelp==1.0.1  # via sphinx\r\nsphinxcontrib-htmlhelp==1.0.2  # via sphinx\r\nsphinxcontrib-jsmath==1.0.1  # via sphinx\r\nsphinxcontrib-qthelp==1.0.2  # via sphinx\r\nsphinxcontrib-serializinghtml==1.1.3  # via sphinx\r\nsqlparse==0.3.0           # via django, django-debug-toolbar\r\ntermcolor==1.1.0          # via pytest-sugar\r\ntext-unidecode==1.3       # via faker, python-slugify\r\ntornado==5.1.1            # via flower\r\ntraitlets==4.3.3          # via ipython\r\ntyping-extensions==3.7.4.1  # via collectfast\r\ntyping==3.7.4.1           # via collectfast\r\nuritemplate==3.0.1        # via coreapi\r\nurllib3==1.25.7           # via botocore, requests, sentry-sdk\r\nvine==1.3.0               # via amqp, celery\r\nwcwidth==0.1.7            # via prompt-toolkit, pytest\r\nwerkzeug==0.16.0\r\n\r\n# The following packages are considered to be unsafe in a requirements file:\r\n# setuptools\r\n```\r\n\r\nIs it `SerializerMutation` support nested serializer?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1114", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1114/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1114/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1114/events", "html_url": "https://github.com/graphql-python/graphene/issues/1114", "id": 540216901, "node_id": "MDU6SXNzdWU1NDAyMTY5MDE=", "number": 1114, "title": "How can I add comparison operators to filter data using Graphene?", "user": {"login": "jrajak10", "id": 38230021, "node_id": "MDQ6VXNlcjM4MjMwMDIx", "avatar_url": "https://avatars2.githubusercontent.com/u/38230021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrajak10", "html_url": "https://github.com/jrajak10", "followers_url": "https://api.github.com/users/jrajak10/followers", "following_url": "https://api.github.com/users/jrajak10/following{/other_user}", "gists_url": "https://api.github.com/users/jrajak10/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrajak10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrajak10/subscriptions", "organizations_url": "https://api.github.com/users/jrajak10/orgs", "repos_url": "https://api.github.com/users/jrajak10/repos", "events_url": "https://api.github.com/users/jrajak10/events{/privacy}", "received_events_url": "https://api.github.com/users/jrajak10/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-19T10:19:11Z", "updated_at": "2020-03-18T12:50:07Z", "closed_at": "2020-03-18T12:50:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to find a way to create comparison operators for a GraphQL query. I have come across an example website, where you are able to filter the results based on whether an item is less than a certain value.The query is below:\r\n\r\n  ```\r\nall_product (where: {size_lt: 20}){\r\n    items {\r\n      title\r\n      price_in_usd\r\n      color\r\n        size\r\n\r\n    }\r\n  }\r\n}\r\n```\r\nAnd the full url is here: https://www.contentstack.com/docs/apis/graphql-content-delivery-api/explorer/?api_key=blt20962a819b57e233&access_token=cscd5a86465a89929407f8fd9c&environment=production&query=query%20%7B%0A%20%20all_product%20(where%3A%20%7Bsize_lt%3A%2020%7D)%7B%0A%20%20%20%20items%20%7B%0A%20%20%20%20%20%20title%0A%20%20%20%20%20%20price_in_usd%0A%20%20%20%20%20%20color%0A%20%20%20%20%20%09size%0A%20%20%20%20%20%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D\r\n\r\nWhat I want to know is how you can resolve the 'where' (in all_products when you click on Docs) filter using graphene/python. I can't figure it out, and the documentation for Graphene is so vague I don't know where to start...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1113", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1113/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1113/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1113/events", "html_url": "https://github.com/graphql-python/graphene/issues/1113", "id": 539999550, "node_id": "MDU6SXNzdWU1Mzk5OTk1NTA=", "number": 1113, "title": "DataLoader doesn't work", "user": {"login": "pollaro", "id": 30908497, "node_id": "MDQ6VXNlcjMwOTA4NDk3", "avatar_url": "https://avatars0.githubusercontent.com/u/30908497?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pollaro", "html_url": "https://github.com/pollaro", "followers_url": "https://api.github.com/users/pollaro/followers", "following_url": "https://api.github.com/users/pollaro/following{/other_user}", "gists_url": "https://api.github.com/users/pollaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/pollaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pollaro/subscriptions", "organizations_url": "https://api.github.com/users/pollaro/orgs", "repos_url": "https://api.github.com/users/pollaro/repos", "events_url": "https://api.github.com/users/pollaro/events{/privacy}", "received_events_url": "https://api.github.com/users/pollaro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-19T00:24:42Z", "updated_at": "2019-12-30T19:46:53Z", "closed_at": "2019-12-20T07:10:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've tried to implement the DataLoader in my schema. I've attempted a very simple implementation before I go more complex. It's very very similar to the documentation. Unfortunately, it goes through and creates all the Promises, but it doesn't batch them all together. It just runs them sequentially. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1112", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1112/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1112/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1112/events", "html_url": "https://github.com/graphql-python/graphene/issues/1112", "id": 537003705, "node_id": "MDU6SXNzdWU1MzcwMDM3MDU=", "number": 1112, "title": "graphene-sqlalchemy does not support sqlalchemy.dialects.mysql.LONGBLOB types.", "user": {"login": "ygbourhis", "id": 1560334, "node_id": "MDQ6VXNlcjE1NjAzMzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1560334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ygbourhis", "html_url": "https://github.com/ygbourhis", "followers_url": "https://api.github.com/users/ygbourhis/followers", "following_url": "https://api.github.com/users/ygbourhis/following{/other_user}", "gists_url": "https://api.github.com/users/ygbourhis/gists{/gist_id}", "starred_url": "https://api.github.com/users/ygbourhis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ygbourhis/subscriptions", "organizations_url": "https://api.github.com/users/ygbourhis/orgs", "repos_url": "https://api.github.com/users/ygbourhis/repos", "events_url": "https://api.github.com/users/ygbourhis/events{/privacy}", "received_events_url": "https://api.github.com/users/ygbourhis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-12T14:14:42Z", "updated_at": "2020-04-23T00:23:34Z", "closed_at": "2020-04-23T00:23:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Imagine you have a model like this:\r\n\r\n```python\r\nclass CSITECONTENT(Base):\r\n    __tablename__ = 'C_SITE_CONTENT'\r\n\r\n    CONTENT_KEY = Column(String(50), primary_key=True)\r\n    CONTENT_VAL = Column(LONGBLOB, nullable=False)\r\n    MIME_TYPE = Column(String(50), nullable=False)\r\n    CREATED_DATE = Column(TIMESTAMP, nullable=False, server_default=text(\"'0000-00-00 00:00:00'\"))\r\n    MODIFIED_DATE = Column(TIMESTAMP, nullable=False, server_default=text(\"'0000-00-00 00:00:00'\"))\r\n```\r\ngraphene-sqlalchemy will raise:\r\n\r\n```\r\nException: Don't know how to convert the SQLAlchemy field C_SITE_CONTENT.CONTENT_VAL (<class 'sqlalchemy.sql.schema.Column'>)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1110", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1110/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1110/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1110/events", "html_url": "https://github.com/graphql-python/graphene/issues/1110", "id": 535589446, "node_id": "MDU6SXNzdWU1MzU1ODk0NDY=", "number": 1110, "title": "examples are added to site-packages", "user": {"login": "marnixlenoble", "id": 46998471, "node_id": "MDQ6VXNlcjQ2OTk4NDcx", "avatar_url": "https://avatars3.githubusercontent.com/u/46998471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marnixlenoble", "html_url": "https://github.com/marnixlenoble", "followers_url": "https://api.github.com/users/marnixlenoble/followers", "following_url": "https://api.github.com/users/marnixlenoble/following{/other_user}", "gists_url": "https://api.github.com/users/marnixlenoble/gists{/gist_id}", "starred_url": "https://api.github.com/users/marnixlenoble/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marnixlenoble/subscriptions", "organizations_url": "https://api.github.com/users/marnixlenoble/orgs", "repos_url": "https://api.github.com/users/marnixlenoble/repos", "events_url": "https://api.github.com/users/marnixlenoble/events{/privacy}", "received_events_url": "https://api.github.com/users/marnixlenoble/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481172, "node_id": "MDU6TGFiZWwyNjQ0ODExNzI=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%E2%9C%A8%20enhancement", "name": "\u2728 enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-12-10T09:07:09Z", "updated_at": "2020-04-19T09:59:04Z", "closed_at": "2020-04-19T09:59:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "When installing graphene using pip it creates an examples directory in site-packages with the star wars example schema.\r\n\r\nI feel like it's improper to add a base examples directory. Either it should not be added or placed inside the graphene directory.\r\n\r\nSteps to reproduce:\r\n\r\nStart empty pipenv project\r\n\r\nRun `pipenv install graphene`\r\n\r\nIn a python file: `from examples.starwars.schema import schema`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1109", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1109/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1109/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1109/events", "html_url": "https://github.com/graphql-python/graphene/issues/1109", "id": 534288704, "node_id": "MDU6SXNzdWU1MzQyODg3MDQ=", "number": 1109, "title": "Set default value to a List of Enum values", "user": {"login": "Msordet", "id": 45397025, "node_id": "MDQ6VXNlcjQ1Mzk3MDI1", "avatar_url": "https://avatars3.githubusercontent.com/u/45397025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Msordet", "html_url": "https://github.com/Msordet", "followers_url": "https://api.github.com/users/Msordet/followers", "following_url": "https://api.github.com/users/Msordet/following{/other_user}", "gists_url": "https://api.github.com/users/Msordet/gists{/gist_id}", "starred_url": "https://api.github.com/users/Msordet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Msordet/subscriptions", "organizations_url": "https://api.github.com/users/Msordet/orgs", "repos_url": "https://api.github.com/users/Msordet/repos", "events_url": "https://api.github.com/users/Msordet/events{/privacy}", "received_events_url": "https://api.github.com/users/Msordet/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-12-06T22:32:03Z", "updated_at": "2020-07-04T19:15:07Z", "closed_at": "2020-07-04T19:15:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm having a hard time trying to set a default value to a List of enum values.\r\nHere's how the code looks:\r\n\r\n```python\r\nget_products = graphene.relay.ConnectionField(ProductConnection, dict(\r\n    statuses=graphene.List(ProductNode.status, default_value=[ProductStatus.DRAFT, ProductStatus.ACTIVE])\r\n))\r\n# Note that if I set:\r\n# graphene.NonNull(graphene.Enum.from_enum(ProductStatus))\r\n# instead of ProductNode.status I get the following error:\r\n# AssertionError: Found different types with the same name in the schema: ProductStatus, ProductStatus.\r\n\r\n\r\nclass ProductStatus(str, enum.Enum):\r\n    DRAFT = \"DRAFT\"\r\n    ACTIVE = \"ACTIVE\"\r\n    DELETED = \"DELETED\"\r\n\r\n\r\nclass ProductNode(graphene.ObjectType):\r\n    status = graphene.NonNull(graphene.Enum.from_enum(ProductStatus))\r\n\r\n\r\nclass ProductConnection(NonNullConnection):\r\n    \"\"\" Paginated Product \"\"\"\r\n\r\n    class Meta:\r\n        node = ProductNode\r\n```\r\n\r\nThe schema generated:\r\n```json\r\n\r\n{\r\n  \"name\": \"statuses\",\r\n  \"description\": null,\r\n  \"type\": {\r\n    \"kind\": \"LIST\",\r\n    \"name\": null,\r\n    \"ofType\": {\r\n      \"kind\": \"NON_NULL\",\r\n      \"name\": null,\r\n      \"ofType\": {\r\n        \"kind\": \"ENUM\",\r\n        \"name\": \"ProductStatus\",\r\n        \"ofType\": null\r\n      }\r\n    }\r\n  },\r\n  \"defaultValue\": null\r\n},\r\n```\r\n\r\nWhat am I missing? \ud83d\udc40 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1108", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1108/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1108/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1108/events", "html_url": "https://github.com/graphql-python/graphene/issues/1108", "id": 532621093, "node_id": "MDU6SXNzdWU1MzI2MjEwOTM=", "number": 1108, "title": "MySQL fetching the columns which are only needed", "user": {"login": "VISWESWARAN1998", "id": 16797137, "node_id": "MDQ6VXNlcjE2Nzk3MTM3", "avatar_url": "https://avatars1.githubusercontent.com/u/16797137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VISWESWARAN1998", "html_url": "https://github.com/VISWESWARAN1998", "followers_url": "https://api.github.com/users/VISWESWARAN1998/followers", "following_url": "https://api.github.com/users/VISWESWARAN1998/following{/other_user}", "gists_url": "https://api.github.com/users/VISWESWARAN1998/gists{/gist_id}", "starred_url": "https://api.github.com/users/VISWESWARAN1998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VISWESWARAN1998/subscriptions", "organizations_url": "https://api.github.com/users/VISWESWARAN1998/orgs", "repos_url": "https://api.github.com/users/VISWESWARAN1998/repos", "events_url": "https://api.github.com/users/VISWESWARAN1998/events{/privacy}", "received_events_url": "https://api.github.com/users/VISWESWARAN1998/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-04T11:21:58Z", "updated_at": "2020-08-01T14:00:06Z", "closed_at": "2019-12-06T07:46:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a piece of python 3.6, graphene, flask code like this, \r\n\r\n```python\r\n# SWAMI KARUPPASWAMI THUNNAI\r\n\r\nimport graphene\r\nfrom flask_graphql import GraphQLView\r\nfrom auth.helper import medease_token\r\nfrom database.get_connection import get_connection\r\n\r\n\r\nclass Manufacturer(graphene.ObjectType):\r\n    manufacturer_id = graphene.ID()\r\n    manufacturer_name = graphene.String()\r\n    manufacturer_website = graphene.String()\r\n    manufacturer_image = graphene.String()\r\n\r\n\r\nclass ManufacturerDetail(graphene.ObjectType):\r\n\r\n    manufacturer_id_list = graphene.Field(graphene.List(Manufacturer), args={'value': graphene.List(graphene.Int)})\r\n\r\n    @staticmethod\r\n    def resolve_manufacturer_id_list(root, info, value):\r\n        response = []\r\n        try:\r\n            connection = get_connection()\r\n            cursor = connection.cursor()\r\n            for manufacturer_id in value:\r\n                cursor.execute(\"select name, website, image from manufacturer where id=%s limit 1\", (manufacturer_id, ))\r\n                result = cursor.fetchone()\r\n                if result is None:\r\n                    manufacturer_name = \"NOT FOUND\"\r\n                    manufacturer_website = \"NOT FOUND\"\r\n                    image = \"NOT FOUND\"\r\n                else:\r\n                    manufacturer_name = result[\"name\"]\r\n                    manufacturer_website = result[\"website\"]\r\n                    image = result[\"image\"]\r\n                response.append(Manufacturer(manufacturer_id=manufacturer_id, manufacturer_name=manufacturer_name,\r\n                                             manufacturer_website=manufacturer_website, manufacturer_image=image))\r\n        finally:\r\n            cursor.close()\r\n            connection.close()\r\n        return response\r\n\r\n\r\ndef manufacturer_detail_wrapper():\r\n    view = GraphQLView.as_view(\"graphql\", schema=graphene.Schema(query=ManufacturerDetail), graphiql=True)\r\n    return medease_token(view)\r\n```\r\n\r\nwhich works completely fine an example query\r\n\r\n```\r\n{\r\n\tmanufacturerIdList(value: [1, 2]){\r\n    manufacturerId,\r\n    manufacturerName,\r\n    manufacturerWebsite,\r\n    manufacturerImage\r\n  }\r\n```\r\n\r\nwill give \r\n\r\n```json\r\n{\r\n    \"data\": {\r\n        \"manufacturerIdList\": [\r\n            {\r\n                \"manufacturerId\": \"1\",\r\n                \"manufacturerName\": \"Cepia\",\r\n                \"manufacturerWebsite\": \"cepia.com\",\r\n                \"manufacturerImage\": \"b64 image data\"\r\n            },\r\n            {\r\n                \"manufacturerId\": \"2\",\r\n                \"manufacturerName\": \"NOT FOUND\",\r\n                \"manufacturerWebsite\": \"NOT FOUND\",\r\n                \"manufacturerImage\": \"NOT FOUND\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\n\r\nbut you can see in the resolver the sql query is fetching every column even if I request for a single value, how to prevent this?\r\n\r\nAny ideas?\r\n\r\nThanks and Regards,\r\nVisweswaran N", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1106", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1106/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1106/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1106/events", "html_url": "https://github.com/graphql-python/graphene/issues/1106", "id": 531722484, "node_id": "MDU6SXNzdWU1MzE3MjI0ODQ=", "number": 1106, "title": "Coercing Parent Value Object to ObjectType", "user": {"login": "vishalkuo", "id": 7549938, "node_id": "MDQ6VXNlcjc1NDk5Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7549938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishalkuo", "html_url": "https://github.com/vishalkuo", "followers_url": "https://api.github.com/users/vishalkuo/followers", "following_url": "https://api.github.com/users/vishalkuo/following{/other_user}", "gists_url": "https://api.github.com/users/vishalkuo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishalkuo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishalkuo/subscriptions", "organizations_url": "https://api.github.com/users/vishalkuo/orgs", "repos_url": "https://api.github.com/users/vishalkuo/repos", "events_url": "https://api.github.com/users/vishalkuo/events{/privacy}", "received_events_url": "https://api.github.com/users/vishalkuo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-03T05:02:21Z", "updated_at": "2019-12-03T18:35:04Z", "closed_at": "2019-12-03T18:35:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given a Parent Value Object type, is there an easy way to convert this into a given ObjectType outside the context of a query? For context - I have a mutation:\r\n\r\n```python3\r\nclass TestGQLType(graphene.ObjectType):\r\n  arg_1 = Field(String, required=True, resolver=lambda obj, info: obj.renamed_arg)\r\n\r\nclass CreateTest(graphene.Mutation):\r\n  class Arguments:\r\n    arg_1 = graphene.String()\r\n\r\n  ok = graphene.Boolean()\r\n  ret = graphene.Field(lambda: TestGQLType)\r\n\r\n  def mutate(root, info, arg_1):\r\n    test_orm_type = TestORMType(renamed_arg=arg1) \r\n    db.session.add(test_orm_type)\r\n    db.session.commit()\r\n    return CreateTest(ok=True, ret=?)\r\n``` \r\n\r\nin the last line of the snippet above, I want to marshal the parent value object `test_orm_type` into a `TestGQLType`. I assume I should be able to do this since there's already field level resolvers on `TestGQLType` but I'm not sure how to actually handle this. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1105", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1105/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1105/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1105/events", "html_url": "https://github.com/graphql-python/graphene/issues/1105", "id": 531325982, "node_id": "MDU6SXNzdWU1MzEzMjU5ODI=", "number": 1105, "title": "Relay settings do not apply to ConnectionField, only DjangoConnectionField", "user": {"login": "sandwichsudo", "id": 4517593, "node_id": "MDQ6VXNlcjQ1MTc1OTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/4517593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandwichsudo", "html_url": "https://github.com/sandwichsudo", "followers_url": "https://api.github.com/users/sandwichsudo/followers", "following_url": "https://api.github.com/users/sandwichsudo/following{/other_user}", "gists_url": "https://api.github.com/users/sandwichsudo/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandwichsudo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandwichsudo/subscriptions", "organizations_url": "https://api.github.com/users/sandwichsudo/orgs", "repos_url": "https://api.github.com/users/sandwichsudo/repos", "events_url": "https://api.github.com/users/sandwichsudo/events{/privacy}", "received_events_url": "https://api.github.com/users/sandwichsudo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-02T17:27:16Z", "updated_at": "2020-03-16T14:39:40Z", "closed_at": "2020-03-16T14:39:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hiya, apologies if this is just a misunderstanding, but it looks like the `DjangoConnectionField` makes use of `RELAY_CONNECTION_ENFORCE_FIRST_OR_LAST` and `RELAY_CONNECTION_MAX_LIMIT` settings, but the standard `ConnectionField` does not. If this is expected, I'm happy to make a PR to clarify it in the docs?\r\n\r\nThe code seemed to suggest it should work with Connection Field https://github.com/graphql-python/graphene-django/blob/master/graphene_django/settings.py#L36.\r\n\r\n\r\nI've copied over the DjangoConnectionField class and pulled out the Django bits to make this subclass of connection field that seems to do the trick - does this seem about right and if so would you like a PR to add it?\r\n\r\n```\r\nfrom functools import partial\r\n\r\nimport graphene\r\nimport graphql\r\nfrom django.conf import settings\r\n\r\n\r\nclass ConnectionField(graphene.ConnectionField):\r\n    def __init__(self, type, *args, **kwargs):\r\n        self.max_limit = kwargs.pop(\"max_limit\", settings.GRAPHENE[\"RELAY_CONNECTION_MAX_LIMIT\"])\r\n        self.enforce_first_or_last = kwargs.pop(\r\n            \"enforce_first_or_last\", settings.GRAPHENE[\"RELAY_CONNECTION_ENFORCE_FIRST_OR_LAST\"]\r\n        )\r\n        super(ConnectionField, self).__init__(type, *args, **kwargs)\r\n\r\n    @classmethod\r\n    def connection_resolver(\r\n        cls, resolver, connection_type, max_limit, enforce_first_or_last, root, info, **args\r\n    ):\r\n        first = args.get(\"first\")\r\n        last = args.get(\"last\")\r\n\r\n        if enforce_first_or_last and not (first or last):\r\n            raise graphql.GraphQLError(\r\n                (\r\n                    \"You must provide a `first` or `last` value to properly paginate the `{}` connection.\"\r\n                ).format(info.field_name)\r\n            )\r\n\r\n        if max_limit:\r\n            if first and not first <= max_limit:\r\n                raise graphql.GraphQLError(\r\n                    (\r\n                        \"Requesting {} records on the `{}` connection exceeds the `first` limit of {} records.\"\r\n                    ).format(first, info.field_name, max_limit)\r\n                )\r\n                args[\"first\"] = min(first, max_limit)\r\n\r\n            if last and not (last <= max_limit):\r\n                raise graphql.GraphQLError(\r\n                    (\r\n                        \"Requesting {} records on the `{}` connection exceeds the `last` limit of {} records.\"\r\n                    ).format(last, info.field_name, max_limit)\r\n                )\r\n                args[\"last\"] = min(last, max_limit)\r\n\r\n        return super().connection_resolver(resolver, connection_type, root, info, **args)\r\n\r\n    def get_resolver(self, parent_resolver):\r\n        return partial(\r\n            self.connection_resolver,\r\n            parent_resolver,\r\n            self.connection_type,\r\n            self.max_limit,\r\n            self.enforce_first_or_last,\r\n        )\r\n\r\n    @property\r\n    def connection_type(self):\r\n        type = self.type\r\n        if isinstance(type, graphene.NonNull):\r\n            return type.of_type\r\n        return type\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1104", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1104/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1104/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1104/events", "html_url": "https://github.com/graphql-python/graphene/issues/1104", "id": 531150803, "node_id": "MDU6SXNzdWU1MzExNTA4MDM=", "number": 1104, "title": "Query taking too long to resolve. Take around 3 Minutes or so.", "user": {"login": "anilwarbhe", "id": 47546834, "node_id": "MDQ6VXNlcjQ3NTQ2ODM0", "avatar_url": "https://avatars2.githubusercontent.com/u/47546834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anilwarbhe", "html_url": "https://github.com/anilwarbhe", "followers_url": "https://api.github.com/users/anilwarbhe/followers", "following_url": "https://api.github.com/users/anilwarbhe/following{/other_user}", "gists_url": "https://api.github.com/users/anilwarbhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/anilwarbhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anilwarbhe/subscriptions", "organizations_url": "https://api.github.com/users/anilwarbhe/orgs", "repos_url": "https://api.github.com/users/anilwarbhe/repos", "events_url": "https://api.github.com/users/anilwarbhe/events{/privacy}", "received_events_url": "https://api.github.com/users/anilwarbhe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-02T14:07:30Z", "updated_at": "2020-05-11T11:08:10Z", "closed_at": "2020-05-11T11:08:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using graphene with mongoengine (graphene-mongo).  I have 3000000 documents in the \"products\" collection. I want to paginate through products, so I am using following setup. It never returns the result. Why? I am doing something wrong here? Please suggest.\r\n```\r\nclass ProductConnection(Connection):\r\n    class Meta:\r\n        node = ProductType\r\n\r\nclass ProductQuery():\r\n    page_products = ConnectionField(ProductConnection)\r\n    def resolve_page_products(self, info, **args):\r\n        products = ProductsModel.objects.all()\r\n        return products\r\n```\r\nWhen I use a query like:\r\n```\r\n{\r\n  pageProducts(first:6){\r\n    edges{\r\n      node{\r\n        title\r\n        brand\r\n      }\r\n    }\r\n    pageInfo{\r\n      hasNextPage\r\n      hasPreviousPage\r\n      startCursor\r\n      endCursor\r\n    }\r\n  }\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1103", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1103/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1103/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1103/events", "html_url": "https://github.com/graphql-python/graphene/issues/1103", "id": 530284241, "node_id": "MDU6SXNzdWU1MzAyODQyNDE=", "number": 1103, "title": "Edit data Query using graphene", "user": {"login": "Olivier-Metzinger", "id": 38937820, "node_id": "MDQ6VXNlcjM4OTM3ODIw", "avatar_url": "https://avatars3.githubusercontent.com/u/38937820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Olivier-Metzinger", "html_url": "https://github.com/Olivier-Metzinger", "followers_url": "https://api.github.com/users/Olivier-Metzinger/followers", "following_url": "https://api.github.com/users/Olivier-Metzinger/following{/other_user}", "gists_url": "https://api.github.com/users/Olivier-Metzinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Olivier-Metzinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Olivier-Metzinger/subscriptions", "organizations_url": "https://api.github.com/users/Olivier-Metzinger/orgs", "repos_url": "https://api.github.com/users/Olivier-Metzinger/repos", "events_url": "https://api.github.com/users/Olivier-Metzinger/events{/privacy}", "received_events_url": "https://api.github.com/users/Olivier-Metzinger/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-29T10:57:05Z", "updated_at": "2020-03-12T17:04:39Z", "closed_at": "2020-03-12T17:04:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello I am very new to GraphQl !\r\n\r\nI would like to edit data with a query (GraphQL) using graphene\r\n\r\nGroup Model:\r\n\r\n```\r\nclass GroupEntity(models.Model):\r\n\r\nid = models.CharField(max_length=100, primary_key='true')\r\nuuid = models.TextField()\r\nnamegroup = models.CharField(max_length=100)\r\ndescription = models.TextField()\r\nprofilimage = models.TextField()\r\n```\r\n\r\nI have a query to getall groups and their data\r\n\r\n```\r\nclass Query(object):\r\nall_entitygroup = graphene.List(EntityType)\r\n\r\ndef resolve_all_entitygroup(self, info, **kwargs):\r\n    return GroupEntity.objects.all()\r\n```\r\n\r\nAnd I can get the data with a query this by:\r\n\r\n```\r\n{\r\n  \"data\": {\r\n    \"allEntitygroup\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"description\": \"descrlol\",\r\n        \"uuid\": \"11112\",\r\n        \"namegroup\": \"nom\",\r\n        \"profilimage\": \"img\"\r\n      }\r\n}\r\n```\r\n\r\nHow can I modify this data, for example if I want to change the 'uuid' of this specific user ?\r\n\r\nThank you in advance !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1102", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1102/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1102/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1102/events", "html_url": "https://github.com/graphql-python/graphene/issues/1102", "id": 527816008, "node_id": "MDU6SXNzdWU1Mjc4MTYwMDg=", "number": 1102, "title": "The code sample in the official documentation can't execute correctly", "user": {"login": "mrdulin", "id": 17866683, "node_id": "MDQ6VXNlcjE3ODY2Njgz", "avatar_url": "https://avatars2.githubusercontent.com/u/17866683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrdulin", "html_url": "https://github.com/mrdulin", "followers_url": "https://api.github.com/users/mrdulin/followers", "following_url": "https://api.github.com/users/mrdulin/following{/other_user}", "gists_url": "https://api.github.com/users/mrdulin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrdulin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrdulin/subscriptions", "organizations_url": "https://api.github.com/users/mrdulin/orgs", "repos_url": "https://api.github.com/users/mrdulin/repos", "events_url": "https://api.github.com/users/mrdulin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrdulin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jkimbo", "id": 691952, "node_id": "MDQ6VXNlcjY5MTk1Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/691952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkimbo", "html_url": "https://github.com/jkimbo", "followers_url": "https://api.github.com/users/jkimbo/followers", "following_url": "https://api.github.com/users/jkimbo/following{/other_user}", "gists_url": "https://api.github.com/users/jkimbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkimbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkimbo/subscriptions", "organizations_url": "https://api.github.com/users/jkimbo/orgs", "repos_url": "https://api.github.com/users/jkimbo/repos", "events_url": "https://api.github.com/users/jkimbo/events{/privacy}", "received_events_url": "https://api.github.com/users/jkimbo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jkimbo", "id": 691952, "node_id": "MDQ6VXNlcjY5MTk1Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/691952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkimbo", "html_url": "https://github.com/jkimbo", "followers_url": "https://api.github.com/users/jkimbo/followers", "following_url": "https://api.github.com/users/jkimbo/following{/other_user}", "gists_url": "https://api.github.com/users/jkimbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkimbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkimbo/subscriptions", "organizations_url": "https://api.github.com/users/jkimbo/orgs", "repos_url": "https://api.github.com/users/jkimbo/repos", "events_url": "https://api.github.com/users/jkimbo/events{/privacy}", "received_events_url": "https://api.github.com/users/jkimbo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-11-25T03:08:09Z", "updated_at": "2020-01-30T12:18:02Z", "closed_at": "2020-01-30T12:18:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I follow this section of official guide: \r\n\r\nhttps://docs.graphene-python.org/en/latest/types/objecttypes/#default-resolver\r\n\r\n```py\r\nfrom collections import namedtuple\r\nPersonValueObject = namedtuple('Person', 'first_name', 'last_name')\r\n```\r\n\r\nWhen run this script, it throw an error:\r\n\r\n> TypeError: namedtuple() takes 2 positional arguments but 3 were given\r\n\r\nAfter change it to\r\n\r\n```py\r\nPersonValueObject = namedtuple('Person', ('first_name', 'last_name'))\r\n```\r\n\r\nIt works fine.\r\n\r\nBesides, there is another issue in the code sample below:\r\n\r\n```py\r\nassert result['data']['me'] == {\"firstName\": \"Lin\", 'lastName': 'Du'}\r\n```\r\nWhen I run the script, it throw an error:\r\n\r\n```bash\r\nTraceback (most recent call last):\r\n  File \"./src/01-getting-started/default-resolver.py\", line 38, in <module>\r\n    assert result['data']['me'] == {\"firstName\": \"Lin\", 'lastName': 'Du'}\r\nTypeError: 'ExecutionResult' object is not subscriptable\r\n```\r\n\r\nAfter change it to:\r\n\r\n```py\r\nassert result.data['me'] == {'firstName': 'Lin', 'lastName': 'Du'}\r\n```\r\nIt works fine.\r\n\r\nSo, the code sample in the official documentation can't execute correctly. Do I miss anything or any context?\r\n\r\n## environment\r\n\r\nPython 3.7.4\r\ngraphene 2.1.8 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1101", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1101/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1101/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1101/events", "html_url": "https://github.com/graphql-python/graphene/issues/1101", "id": 527487709, "node_id": "MDU6SXNzdWU1Mjc0ODc3MDk=", "number": 1101, "title": "Parsing of graphene booleans are not strict enough", "user": {"login": "asia653", "id": 2181584, "node_id": "MDQ6VXNlcjIxODE1ODQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2181584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asia653", "html_url": "https://github.com/asia653", "followers_url": "https://api.github.com/users/asia653/followers", "following_url": "https://api.github.com/users/asia653/following{/other_user}", "gists_url": "https://api.github.com/users/asia653/gists{/gist_id}", "starred_url": "https://api.github.com/users/asia653/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asia653/subscriptions", "organizations_url": "https://api.github.com/users/asia653/orgs", "repos_url": "https://api.github.com/users/asia653/repos", "events_url": "https://api.github.com/users/asia653/events{/privacy}", "received_events_url": "https://api.github.com/users/asia653/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-23T01:16:43Z", "updated_at": "2020-03-06T04:17:07Z", "closed_at": "2020-03-06T04:17:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "the boolean scalar essentially accepts any value because it calls python's bool to convert, I think this is a common source of bugs and we would find value in enforcing strict booleans", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1099", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1099/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1099/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1099/events", "html_url": "https://github.com/graphql-python/graphene/issues/1099", "id": 526414424, "node_id": "MDU6SXNzdWU1MjY0MTQ0MjQ=", "number": 1099, "title": "How to make subscriptions with graphene v3", "user": {"login": "rob-blackbourn", "id": 2880305, "node_id": "MDQ6VXNlcjI4ODAzMDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2880305?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rob-blackbourn", "html_url": "https://github.com/rob-blackbourn", "followers_url": "https://api.github.com/users/rob-blackbourn/followers", "following_url": "https://api.github.com/users/rob-blackbourn/following{/other_user}", "gists_url": "https://api.github.com/users/rob-blackbourn/gists{/gist_id}", "starred_url": "https://api.github.com/users/rob-blackbourn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rob-blackbourn/subscriptions", "organizations_url": "https://api.github.com/users/rob-blackbourn/orgs", "repos_url": "https://api.github.com/users/rob-blackbourn/repos", "events_url": "https://api.github.com/users/rob-blackbourn/events{/privacy}", "received_events_url": "https://api.github.com/users/rob-blackbourn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-11-21T07:28:58Z", "updated_at": "2020-08-02T23:26:47Z", "closed_at": "2020-06-17T05:04:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm trying to use subscriptions in graphene 3.\r\n\r\nMy naive example below doesn't work. How do I do this?\r\n\r\nThanks,\r\nRob\r\n\r\n```python\r\nimport asyncio\r\nfrom datetime import datetime\r\nfrom graphene import ObjectType, String, Schema, Field\r\n\r\nclass Query(ObjectType):\r\n    hello = String()\r\n\r\n    def resolve_hello(root, info):\r\n        return 'Hello, world!'\r\n\r\nclass Subscription(ObjectType):\r\n    time_of_day = Field(String)\r\n\r\n    async def resolve_time_of_day(root, info):\r\n        while True:\r\n            yield datetime.now().isoformat()\r\n            await asyncio.sleep(1)\r\n\r\nschema = Schema(query=Query, subscription=Subscription)\r\n\r\nasync def main():\r\n    subscription = 'subscription { timeOfDay }'\r\n    result = await schema.execute_async(subscription)\r\n    async for item in result:\r\n        print(item)\r\n\r\nasyncio.run(main())\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1098", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1098/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1098/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1098/events", "html_url": "https://github.com/graphql-python/graphene/issues/1098", "id": 525786707, "node_id": "MDU6SXNzdWU1MjU3ODY3MDc=", "number": 1098, "title": "Parsing of DateTime objects is too strict", "user": {"login": "crazyscientist", "id": 1128117, "node_id": "MDQ6VXNlcjExMjgxMTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1128117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crazyscientist", "html_url": "https://github.com/crazyscientist", "followers_url": "https://api.github.com/users/crazyscientist/followers", "following_url": "https://api.github.com/users/crazyscientist/following{/other_user}", "gists_url": "https://api.github.com/users/crazyscientist/gists{/gist_id}", "starred_url": "https://api.github.com/users/crazyscientist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crazyscientist/subscriptions", "organizations_url": "https://api.github.com/users/crazyscientist/orgs", "repos_url": "https://api.github.com/users/crazyscientist/repos", "events_url": "https://api.github.com/users/crazyscientist/events{/privacy}", "received_events_url": "https://api.github.com/users/crazyscientist/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-20T12:56:10Z", "updated_at": "2020-03-05T14:07:45Z", "closed_at": "2020-03-05T14:07:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nbeing used to how I can filter `DateTime` objects in (Postre)SQL and Django using only a `Date` object, I kind of stepped into this small trap:\r\n\r\nI have a Django model looking like this (stripped of irrelevant lines):\r\n\r\n```python\r\nclass Request(Model):\r\n    end_date = models.DateTimeField(null=True, default=None)\r\n```\r\n\r\nAnd my schema definition looking like this (stripped of irrelevant lines):\r\n\r\n```python\r\nclass RequestType(DjangoObjectType):\r\n    class Meta:\r\n        model = models.Request\r\n        interfaces = (graphene.relay.Node,)\r\n        filter_fields = {\r\n            \"end_date\": [\"gt\", 'lt'],\r\n    }\r\n```\r\n\r\nRunning such a query will be successful:\r\n\r\n```\r\n{\r\n  requests(endDate_Gt: \"2018-12-31T00:00:00\"){\r\n    edges{\r\n      node{\r\n        id\r\n        endDate\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nBeing lazy and only typing the relevant part of the DateTime like this:\r\n```\r\n{\r\n  requests(status_Name_Iexact:\"accepted\", kind: \"RR\", endDate_Gt: \"2018-12-31\"){\r\n    edges{\r\n      node{\r\n        id\r\n        endDate\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nwill cause an error:\r\n```\r\n{\r\n  \"errors\": [\r\n    {\r\n      \"message\": \"Argument \\\"endDate_Gt\\\" has invalid value \\\"2018-12-31\\\".\\nExpected type \\\"DateTime\\\", found \\\"2018-12-31\\\".\",\r\n      \"locations\": [\r\n        {\r\n          \"line\": 2,\r\n          \"column\": 67\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nIn a strict manner of speaking this error certainly is correct, but it would be cool, if a string-date could be interpreted as a DateTime, too.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1097", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1097/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1097/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1097/events", "html_url": "https://github.com/graphql-python/graphene/issues/1097", "id": 522576012, "node_id": "MDU6SXNzdWU1MjI1NzYwMTI=", "number": 1097, "title": "Querying with NDB", "user": {"login": "steinnat", "id": 20133620, "node_id": "MDQ6VXNlcjIwMTMzNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/20133620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steinnat", "html_url": "https://github.com/steinnat", "followers_url": "https://api.github.com/users/steinnat/followers", "following_url": "https://api.github.com/users/steinnat/following{/other_user}", "gists_url": "https://api.github.com/users/steinnat/gists{/gist_id}", "starred_url": "https://api.github.com/users/steinnat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steinnat/subscriptions", "organizations_url": "https://api.github.com/users/steinnat/orgs", "repos_url": "https://api.github.com/users/steinnat/repos", "events_url": "https://api.github.com/users/steinnat/events{/privacy}", "received_events_url": "https://api.github.com/users/steinnat/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-14T01:56:59Z", "updated_at": "2020-02-26T19:17:56Z", "closed_at": "2020-02-26T19:17:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "When querying a datetime property from an entity in NDB i.e:\r\nModel:\r\ndate = ndb.DateTimeProperty()\r\n\r\nModel.query()\r\n\r\nThe response of the datetime property for each node returns the datetime in utc regardless of the datetime submitted inside the datastore which is pst.\r\nHow can I get the date to show pst instead?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1096", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1096/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1096/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1096/events", "html_url": "https://github.com/graphql-python/graphene/issues/1096", "id": 521437913, "node_id": "MDU6SXNzdWU1MjE0Mzc5MTM=", "number": 1096, "title": "How to pass unknown fields to Graphene mutation?", "user": {"login": "prabhupant", "id": 19776278, "node_id": "MDQ6VXNlcjE5Nzc2Mjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/19776278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prabhupant", "html_url": "https://github.com/prabhupant", "followers_url": "https://api.github.com/users/prabhupant/followers", "following_url": "https://api.github.com/users/prabhupant/following{/other_user}", "gists_url": "https://api.github.com/users/prabhupant/gists{/gist_id}", "starred_url": "https://api.github.com/users/prabhupant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prabhupant/subscriptions", "organizations_url": "https://api.github.com/users/prabhupant/orgs", "repos_url": "https://api.github.com/users/prabhupant/repos", "events_url": "https://api.github.com/users/prabhupant/events{/privacy}", "received_events_url": "https://api.github.com/users/prabhupant/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-12T09:44:39Z", "updated_at": "2020-02-27T14:23:07Z", "closed_at": "2020-02-27T14:23:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "As per the GraphQL spec https://graphql.github.io/graphql-spec/draft/#sec-Input-Objects\r\n\r\n> the input object literal or unordered map must not contain any entries with names not defined by a field of this input object type, otherwise an error must be thrown.\r\n\r\nLet's say I have a project which has a user called `buyer`, the schema for which is as follows\r\n```\r\ntype Buyer {\r\n     id: ID!\r\n     name: String!\r\n     address: String!\r\n     email: String!\r\n}\r\n```\r\nNow I can write a graphene schema for it\r\n\r\n```python\r\nclass BuyerType(DjangoObjectType):\r\n    class Meta:\r\n        model = Buyer\r\n```\r\n\r\nand make a mutation for this\r\n\r\n```python\r\nclass BuyerInput(graphene.InputObjectType):\r\n    name = graphene.String(required=False, default_value='')\r\n    address = graphene.String(required=False, default_value='')\r\n    email = graphene.String(required=False, default_value='')\r\n\r\n\r\nclass BuyerMutation(graphene.Mutation):\r\n    \"\"\"\r\n    API to create applicant\r\n    \"\"\"\r\n    class Arguments:\r\n        buyer_data = BuyerInput(required=True)\r\n        \r\n\r\n    buyer = graphene.Field(BuyerType)\r\n    ok = graphene.Boolean()\r\n\r\n    def mutate(self, info, buyer_data=None):\r\n           buyer = Buyer(name=buyer.name, address=buyer.address, email=buyer.email)\r\n           buyer.save()\r\n           return BuyerMutation(buyer=buyer, ok=True)\r\n```\r\n\r\nand write the resolvers functions and query and mutation class. Pretty basic stuff so far.\r\n\r\nAnd now to create a new buyer, I just call the mutation \r\n\r\n```\r\nmutation {\r\n   createBuyer(\r\n           name: \"New Buyer\"\r\n           address: \"Earth\"\r\n           email: \"abc@example.com\"\r\n  ) {\r\n      ok\r\n  }\r\n}\r\n```\r\n\r\nI pass some undefined argument to the mutation, it throws an error for Unknown Field, which is completely fine. But I want to make process for frontend devs easier. Rather than mentioning each field in the argument of mutation, they can just pass a dict which contains these three fields and also other arguments that might originate from a form submission, and then read the dict in the backend and only extract the fields that I need, much like it is done with REST APIs. \r\n\r\nIf this is possible, then how can I implement this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1095", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1095/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1095/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1095/events", "html_url": "https://github.com/graphql-python/graphene/issues/1095", "id": 520275827, "node_id": "MDU6SXNzdWU1MjAyNzU4Mjc=", "number": 1095, "title": "Mutation raising errors on Enum and Custom Fields", "user": {"login": "pollaro", "id": 30908497, "node_id": "MDQ6VXNlcjMwOTA4NDk3", "avatar_url": "https://avatars0.githubusercontent.com/u/30908497?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pollaro", "html_url": "https://github.com/pollaro", "followers_url": "https://api.github.com/users/pollaro/followers", "following_url": "https://api.github.com/users/pollaro/following{/other_user}", "gists_url": "https://api.github.com/users/pollaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/pollaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pollaro/subscriptions", "organizations_url": "https://api.github.com/users/pollaro/orgs", "repos_url": "https://api.github.com/users/pollaro/repos", "events_url": "https://api.github.com/users/pollaro/events{/privacy}", "received_events_url": "https://api.github.com/users/pollaro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-08T23:06:56Z", "updated_at": "2019-11-12T21:24:52Z", "closed_at": "2019-11-12T21:24:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I wrote a mutation that takes an input. In this input there are some strings, an enum, and then three fields that are custom for their model. When I run my mutation\r\n```class CreateBillingProfile(graphene.Mutation):\r\n    class Arguments:\r\n        input = BillingProfileInput()\r\n\r\n    ok = graphene.Boolean()\r\n    billing_profile = graphene.Field(BillingProfileType)\r\n\r\n    def mutate(self, info, input):\r\n        doctor_id = input.get('doctor', None)\r\n        if doctor_id is not None:\r\n            doctor = Doctor.objects.get(id=doctor_id)\r\n        else:\r\n            doctor = info.context.currentDoctor\r\n\r\n        billing_profile = BillingProfile.objects.create(\r\n            id=input.get('id'),\r\n            doctor=doctor,\r\n            name=input.get('name', \"New Billing Profile\"),\r\n            archived=input.get('archived', False),\r\n            profile_type=input.get('profile_type', 'ICD10')\r\n        )\r\n        for code in input.get('codes', []):\r\n            profile_code = BillingProfileCode.objects.create(\r\n                billing_profile_id=billing_profile.id,\r\n                code=code.get('code'),\r\n                code_type=code.get('code_type'),\r\n                description=code.get('description'),\r\n                extra_description=code.get('extra_description'),\r\n                short_description=code.get('short_description'),\r\n                dx_ptrs_icd10=code.get('dx_ptrs_icd10'),\r\n                diagnosis_pointers=code.get('diagnosis_pointers'),\r\n                modifiers=code.get('modifiers'),\r\n                price=code.get('price', 0.00)\r\n            )\r\n            if code.get('ndc'):\r\n                ndc = code.get('ndc')\r\n                BillingProfileCodeNDC.objects.create(\r\n                    billing_profile_code=profile_code.id,\r\n                    ndc_package_code=ndc.get('ndc_package_code'),\r\n                    quantity=ndc.get('quantity'),\r\n                    units=ndc.get('units')\r\n                )\r\n        ok = True\r\n        return CreateBillingProfile(billing_profile=billing_profile, ok=ok)```\r\n\r\nI get this error: ```message: \"Variable \"$input\" got invalid value {\"codes\": [{\"code\": \"A0120\", \"code_type\": \"HCPCS\", \"description\": \"Noner transport mini-bus\", \"diagnosis_pointers\": [1, 0, 0, 0], \"dx_ptrs_icd10\": [1, 0, 0, 0], \"modifiers\": [\"\", \"\", \"\", \"\"], \"ndc\": [], \"price\": 0, \"quantity\": \"1.00\"}], \"name\": \"t\"}.\u21b5In field \"codes\": In element #0: In field \"code_type\": Unknown field.\u21b5In field \"codes\": In element #0: In field \"diagnosis_pointers\": Unknown field.\u21b5In field \"codes\": In element #0: In field \"dx_ptrs_icd10\": Unknown field.\"```\r\n\r\nWhen I try this is graphiQL, it works. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1094", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1094/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1094/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1094/events", "html_url": "https://github.com/graphql-python/graphene/issues/1094", "id": 519553310, "node_id": "MDU6SXNzdWU1MTk1NTMzMTA=", "number": 1094, "title": "Why does graphene.Enum resolves to enum.name as String?", "user": {"login": "ethankong113", "id": 17715975, "node_id": "MDQ6VXNlcjE3NzE1OTc1", "avatar_url": "https://avatars1.githubusercontent.com/u/17715975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ethankong113", "html_url": "https://github.com/ethankong113", "followers_url": "https://api.github.com/users/ethankong113/followers", "following_url": "https://api.github.com/users/ethankong113/following{/other_user}", "gists_url": "https://api.github.com/users/ethankong113/gists{/gist_id}", "starred_url": "https://api.github.com/users/ethankong113/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ethankong113/subscriptions", "organizations_url": "https://api.github.com/users/ethankong113/orgs", "repos_url": "https://api.github.com/users/ethankong113/repos", "events_url": "https://api.github.com/users/ethankong113/events{/privacy}", "received_events_url": "https://api.github.com/users/ethankong113/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-07T22:37:48Z", "updated_at": "2020-02-20T00:30:45Z", "closed_at": "2020-02-20T00:30:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a field defined as a graphene enum:\r\n\r\n```\r\nclass Color(enum.Enum):\r\n  red = 1\r\n  blue = 2\r\n\r\n\r\ncolor = graphene.Field(\r\n        type=graphene.Enum.from_enum(Color),\r\n        required=True\r\n    )\r\n```\r\n\r\nAnd when I try to run a query, this is what I get:\r\n\r\n`\r\n\"data\": {\r\n  \"color\": \"red\"\r\n}\r\n`\r\n\r\nIt resolves to \"red\" instead of \"Color.red\". The documentation is not very clear on why a graphene enum would resolve into the enum.name", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1093", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1093/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1093/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1093/events", "html_url": "https://github.com/graphql-python/graphene/issues/1093", "id": 517205455, "node_id": "MDU6SXNzdWU1MTcyMDU0NTU=", "number": 1093, "title": "Possible issue with output type mutations ", "user": {"login": "marcelombc", "id": 1358796, "node_id": "MDQ6VXNlcjEzNTg3OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1358796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcelombc", "html_url": "https://github.com/marcelombc", "followers_url": "https://api.github.com/users/marcelombc/followers", "following_url": "https://api.github.com/users/marcelombc/following{/other_user}", "gists_url": "https://api.github.com/users/marcelombc/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcelombc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcelombc/subscriptions", "organizations_url": "https://api.github.com/users/marcelombc/orgs", "repos_url": "https://api.github.com/users/marcelombc/repos", "events_url": "https://api.github.com/users/marcelombc/events{/privacy}", "received_events_url": "https://api.github.com/users/marcelombc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-04T14:54:29Z", "updated_at": "2020-05-16T22:54:43Z", "closed_at": "2020-05-16T22:54:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I'm having a problem when using output style mutations. I have the following example:\r\n\r\n```python\r\nclass PersonType(graphene.ObjectType):\r\n    first_name = graphene.String()\r\n    last_name = graphene.String()\r\n\r\n    @staticmethod\r\n    def resolve_first_name(parent, info):\r\n        return 'Marcelo'\r\n\r\n    @staticmethod\r\n    def resolve_last_name(parent, info):\r\n        return 'Concei\u00e7\u00e3o'\r\n\r\nclass SetPerson(graphene.ClientIDMutation):\r\n    class Input:\r\n        first_name = graphene.String()\r\n        last_name = graphene.String()\r\n\r\n    Output = PersonType\r\n\r\n    @classmethod\r\n    def mutate_and_get_payload(cls, root, info, first_name, last_name):\r\n        return PersonType(first_name=first_name, last_name=last_name)\r\n\r\nclass Query(graphene.ObjectType):\r\n    person = graphene.Field(PersonType)\r\n\r\n    @staticmethod\r\n    def resolve_person(parent, info, **kwargs):\r\n        return PersonType()\r\n\r\nclass Mutation(graphene.ObjectType):\r\n    set_person = SetPerson.Field()\r\n\r\nschema = graphene.Schema(query=Query, mutation=Mutation)\r\n```\r\n\r\nWhen I run the following query:\r\n\r\n```graphql\r\nquery {\r\n  person {\r\n    firstName\r\n    lastName\r\n  }\r\n}\r\n```\r\n\r\nI get the correct output which is:\r\n\r\n```json\r\n{\r\n  \"data\": {\r\n    \"person\": {\r\n      \"firstName\": \"Marcelo\",\r\n      \"lastName\": \"Concei\u00e7\u00e3o\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nBut when I run the mutation:\r\n\r\n```graphql\r\nmutation SetPerson {\r\n  setPerson(input: { firstName: \"Another\", lastName: \"Name\" }) {\r\n    firstName\r\n    lastName\r\n  }\r\n}\r\n```\r\n\r\nThe output is the same as the previous query instead of receiving \"Another\" as `firstName` and \"Name\" as `lastName`. When I run the mutation I notice that the resolvers are being called even if I return a `PersonType` with `first_name` and `last_name`.\r\nOne thing that I can do is check if the parent already has the attribute inside the resolver like this:\r\n\r\n```python\r\nclass PersonType(graphene.ObjectType):\r\n    first_name = graphene.String()\r\n    last_name = graphene.String()\r\n\r\n    @staticmethod\r\n    def resolve_first_name(parent, info):\r\n        return getattr(parent, 'first_name', None) or 'Marcelo'\r\n\r\n    @staticmethod\r\n    def resolve_last_name(parent, info):\r\n        return getattr(parent, 'last_name', None) or 'Concei\u00e7\u00e3o'\r\n```\r\n\r\nBut I think this is kinda of a workaround. I'm wondering if this is the right behaviour?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1092", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1092/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1092/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1092/events", "html_url": "https://github.com/graphql-python/graphene/issues/1092", "id": 517061662, "node_id": "MDU6SXNzdWU1MTcwNjE2NjI=", "number": 1092, "title": "AttributeError: module 'enum' has no attribute 'IntFlag'", "user": {"login": "makskant", "id": 12694767, "node_id": "MDQ6VXNlcjEyNjk0NzY3", "avatar_url": "https://avatars3.githubusercontent.com/u/12694767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/makskant", "html_url": "https://github.com/makskant", "followers_url": "https://api.github.com/users/makskant/followers", "following_url": "https://api.github.com/users/makskant/following{/other_user}", "gists_url": "https://api.github.com/users/makskant/gists{/gist_id}", "starred_url": "https://api.github.com/users/makskant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/makskant/subscriptions", "organizations_url": "https://api.github.com/users/makskant/orgs", "repos_url": "https://api.github.com/users/makskant/repos", "events_url": "https://api.github.com/users/makskant/events{/privacy}", "received_events_url": "https://api.github.com/users/makskant/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-04T10:26:28Z", "updated_at": "2020-03-05T13:07:45Z", "closed_at": "2020-03-05T13:07:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't run a simple example.\r\n\r\nThe setup is a fresh virtual environment.\r\n\r\nrequirements.txt file containes one line: `graphene`\r\n\r\nPip freeze outputs:\r\n`aniso8601==6.0.0\r\ngraphene==2.1.8\r\ngraphql-core==2.2.1\r\ngraphql-relay==2.0.0\r\npromise==2.2.1\r\nRx==1.6.1\r\nsix==1.12.0\r\n`\r\nFile called **test.py** contains:\r\n```\r\nimport graphene\r\n\r\n\r\nclass Query(graphene.ObjectType):\r\n  hello = graphene.String(name=graphene.String(default_value=\"World\"))\r\n\r\n  def resolve_hello(self, info, name):\r\n    return 'Hello ' + name\r\n\r\n\r\nschema = graphene.Schema(query=Query)\r\nresult = schema.execute('{ hello }')\r\nprint(result.data['hello']) # \"Hello World\"\r\n```\r\nI am running in terminal after activating venv using `python test.py`\r\n\r\nThe error \r\n```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 1, in <module>\r\n    import graphene\r\n  File \"/Users/MaksimSu/sandbox/venv/lib/python3.7/site-packages/graphene/__init__.py\", line 1, in <module>\r\n    from .pyutils.version import get_version\r\n  File \"/Users/MaksimSu/sandbox/venv/lib/python3.7/site-packages/graphene/pyutils/version.py\", line 5, in <module>\r\n    import subprocess\r\n  File \"/usr/local/Cellar/python/3.7.2_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py\", line 50, in <module>\r\n    import signal\r\n  File \"/usr/local/Cellar/python/3.7.2_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/signal.py\", line 4, in <module>\r\n    from enum import IntEnum as _IntEnum\r\n  File \"/usr/local/Cellar/python/3.7.2_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/enum.py\", line 2, in <module>\r\n    from types import MappingProxyType, DynamicClassAttribute\r\n  File \"/Users/MaksimSu/sandbox/app/types.py\", line 1, in <module>\r\n    import typing\r\n  File \"/usr/local/Cellar/python/3.7.2_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py\", line 28, in <module>\r\n    import re as stdlib_re  # Avoid confusion with the re we export.\r\n  File \"/usr/local/Cellar/python/3.7.2_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/re.py\", line 143, in <module>\r\n    class RegexFlag(enum.IntFlag):\r\nAttributeError: module 'enum' has no attribute 'IntFlag'\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1091", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1091/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1091/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1091/events", "html_url": "https://github.com/graphql-python/graphene/issues/1091", "id": 516817858, "node_id": "MDU6SXNzdWU1MTY4MTc4NTg=", "number": 1091, "title": "Is Graphene being actively developed?", "user": {"login": "ztolley", "id": 56056, "node_id": "MDQ6VXNlcjU2MDU2", "avatar_url": "https://avatars1.githubusercontent.com/u/56056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ztolley", "html_url": "https://github.com/ztolley", "followers_url": "https://api.github.com/users/ztolley/followers", "following_url": "https://api.github.com/users/ztolley/following{/other_user}", "gists_url": "https://api.github.com/users/ztolley/gists{/gist_id}", "starred_url": "https://api.github.com/users/ztolley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ztolley/subscriptions", "organizations_url": "https://api.github.com/users/ztolley/orgs", "repos_url": "https://api.github.com/users/ztolley/repos", "events_url": "https://api.github.com/users/ztolley/events{/privacy}", "received_events_url": "https://api.github.com/users/ztolley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-03T12:03:17Z", "updated_at": "2020-01-16T10:05:24Z", "closed_at": "2020-01-16T10:05:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Looking at options for a GraphQL library and have found Graphene to be easy to use and gets the job done but I have one question. Is the library being actively developed? Recent commit history seems to be extremely quiet.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1087", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1087/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1087/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1087/events", "html_url": "https://github.com/graphql-python/graphene/issues/1087", "id": 513912020, "node_id": "MDU6SXNzdWU1MTM5MTIwMjA=", "number": 1087, "title": "Example in types/objecttypes is out of date", "user": {"login": "tompao", "id": 2155288, "node_id": "MDQ6VXNlcjIxNTUyODg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2155288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tompao", "html_url": "https://github.com/tompao", "followers_url": "https://api.github.com/users/tompao/followers", "following_url": "https://api.github.com/users/tompao/following{/other_user}", "gists_url": "https://api.github.com/users/tompao/gists{/gist_id}", "starred_url": "https://api.github.com/users/tompao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tompao/subscriptions", "organizations_url": "https://api.github.com/users/tompao/orgs", "repos_url": "https://api.github.com/users/tompao/repos", "events_url": "https://api.github.com/users/tompao/events{/privacy}", "received_events_url": "https://api.github.com/users/tompao/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 840326102, "node_id": "MDU6TGFiZWw4NDAzMjYxMDI=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%F0%9F%93%96%20documentation", "name": "\ud83d\udcd6 documentation", "color": "ffccf2", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-29T13:20:29Z", "updated_at": "2019-12-26T20:07:42Z", "closed_at": "2019-12-26T20:07:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "1. namedtuple is not created correctly\r\n2. result object is not subscriptable as result['data']\r\n3. result data key is incorrect (my_best_friend -> myBestFriend)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1086", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1086/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1086/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1086/events", "html_url": "https://github.com/graphql-python/graphene/issues/1086", "id": 509137156, "node_id": "MDU6SXNzdWU1MDkxMzcxNTY=", "number": 1086, "title": "ImportError: cannot import name 'get_default_backend'", "user": {"login": "mikkokotila", "id": 7943188, "node_id": "MDQ6VXNlcjc5NDMxODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/7943188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikkokotila", "html_url": "https://github.com/mikkokotila", "followers_url": "https://api.github.com/users/mikkokotila/followers", "following_url": "https://api.github.com/users/mikkokotila/following{/other_user}", "gists_url": "https://api.github.com/users/mikkokotila/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikkokotila/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikkokotila/subscriptions", "organizations_url": "https://api.github.com/users/mikkokotila/orgs", "repos_url": "https://api.github.com/users/mikkokotila/repos", "events_url": "https://api.github.com/users/mikkokotila/events{/privacy}", "received_events_url": "https://api.github.com/users/mikkokotila/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-10-18T15:01:47Z", "updated_at": "2020-03-14T17:06:28Z", "closed_at": "2020-03-14T17:06:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "In a fresh env I get the below:\r\n\r\n```\r\nMikkos-Air:Studio-Stream mikko$ python app.py\r\nTraceback (most recent call last):\r\n  File \"app.py\", line 3, in <module>\r\n    from flask_graphql import GraphQLView\r\n  File \"/Users/mikko/miniconda3/lib/python3.6/site-packages/Flask_GraphQL-2.0.0-py3.6.egg/flask_graphql/__init__.py\", line 1, in <module>\r\n    from .blueprint import GraphQL\r\n  File \"/Users/mikko/miniconda3/lib/python3.6/site-packages/Flask_GraphQL-2.0.0-py3.6.egg/flask_graphql/blueprint.py\", line 5, in <module>\r\n    from .graphqlview import GraphQLView\r\n  File \"/Users/mikko/miniconda3/lib/python3.6/site-packages/Flask_GraphQL-2.0.0-py3.6.egg/flask_graphql/graphqlview.py\", line 7, in <module>\r\n    from graphql_server import (HttpQueryError, default_format_error,\r\n  File \"/Users/mikko/miniconda3/lib/python3.6/site-packages/graphql_server_core-1.1.1-py3.6.egg/graphql_server/__init__.py\", line 5, in <module>\r\n    from graphql import get_default_backend\r\nImportError: cannot import name 'get_default_backend'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1085", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1085/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1085/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1085/events", "html_url": "https://github.com/graphql-python/graphene/issues/1085", "id": 509109850, "node_id": "MDU6SXNzdWU1MDkxMDk4NTA=", "number": 1085, "title": "Problem with graphql-core imports", "user": {"login": "Arfey", "id": 10367100, "node_id": "MDQ6VXNlcjEwMzY3MTAw", "avatar_url": "https://avatars3.githubusercontent.com/u/10367100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arfey", "html_url": "https://github.com/Arfey", "followers_url": "https://api.github.com/users/Arfey/followers", "following_url": "https://api.github.com/users/Arfey/following{/other_user}", "gists_url": "https://api.github.com/users/Arfey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arfey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arfey/subscriptions", "organizations_url": "https://api.github.com/users/Arfey/orgs", "repos_url": "https://api.github.com/users/Arfey/repos", "events_url": "https://api.github.com/users/Arfey/events{/privacy}", "received_events_url": "https://api.github.com/users/Arfey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}, {"id": 440761370, "node_id": "MDU6TGFiZWw0NDA3NjEzNzA=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/%F0%9F%91%80%20more%20info%20needed", "name": "\ud83d\udc40 more info needed", "color": "d815be", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-10-18T14:15:56Z", "updated_at": "2020-05-13T13:00:47Z", "closed_at": "2020-05-13T13:00:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have this problem:\r\n\r\n```\r\nModuleNotFoundError: No module named 'graphql.execution.executors'\r\n```\r\n\r\ngraphql-core has this module but graphene use other package.\r\n\r\nAfter installed graphene we have some package which named `graphql` with version `3.0.0b1`. And this package don't have `graphql.execution.executors`.\r\n\r\n*reproduce:* \r\n\r\n```\r\npip install graphene\r\n```\r\n\r\n```\r\npython3             \r\nPython 3.7.3 (default, Mar 27 2019, 09:23:15) \r\n[Clang 10.0.1 (clang-1001.0.46.3)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from graphql.execution.executors.asyncio import AsyncioExecutor\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nModuleNotFoundError: No module named 'graphql.execution.executors'\r\n>>> \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1082", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1082/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1082/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1082/events", "html_url": "https://github.com/graphql-python/graphene/issues/1082", "id": 503732714, "node_id": "MDU6SXNzdWU1MDM3MzI3MTQ=", "number": 1082, "title": "How to have an Input type use an ID for id, instead of an Int?", "user": {"login": "dannytatom", "id": 60604, "node_id": "MDQ6VXNlcjYwNjA0", "avatar_url": "https://avatars2.githubusercontent.com/u/60604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dannytatom", "html_url": "https://github.com/dannytatom", "followers_url": "https://api.github.com/users/dannytatom/followers", "following_url": "https://api.github.com/users/dannytatom/following{/other_user}", "gists_url": "https://api.github.com/users/dannytatom/gists{/gist_id}", "starred_url": "https://api.github.com/users/dannytatom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dannytatom/subscriptions", "organizations_url": "https://api.github.com/users/dannytatom/orgs", "repos_url": "https://api.github.com/users/dannytatom/repos", "events_url": "https://api.github.com/users/dannytatom/events{/privacy}", "received_events_url": "https://api.github.com/users/dannytatom/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-07T22:54:29Z", "updated_at": "2020-04-04T09:44:36Z", "closed_at": "2020-04-04T09:44:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a a node like this. In the model itself, the ID is an integer.\r\n\r\n```py\r\nclass HouseNode(DjangoObjectType):\r\n    class Meta:\r\n        model = House\r\n        interfaces = (relay.Node,)\r\n```\r\n\r\nIf i have a query like this, it returns ID as the `ID` type.\r\n\r\n```py\r\nget_house = relay.Node.Field(HouseNode)\r\n```\r\n\r\nBut if I have a mutation, that uses a serializer (from REST Framework), ID for the Input type is expected to be an `Int`.\r\n\r\n```py\r\nclass UpdateHouse(SerializerMutation):\r\n    class Meta:\r\n        serializer_class = HouseDetailViewSerializer\r\n\r\n# \r\n# Generates a type like:\r\n#\r\n# UpdateHouseInput {\r\n#   id: Int\r\n#   created: DateTime\r\n#   updated: DateTime\r\n#   name: String!\r\n# }\r\n#\r\n```\r\n\r\nIs it possible to have the Input expect the same encoded ID as a query returns? Otherwise, in the UI, I need to decode the ID from the query response in order to pass it to the update mutation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1079", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1079/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1079/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1079/events", "html_url": "https://github.com/graphql-python/graphene/issues/1079", "id": 502415679, "node_id": "MDU6SXNzdWU1MDI0MTU2Nzk=", "number": 1079, "title": "to_const doesn't support unicode", "user": {"login": "henrythor", "id": 3781670, "node_id": "MDQ6VXNlcjM3ODE2NzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/3781670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henrythor", "html_url": "https://github.com/henrythor", "followers_url": "https://api.github.com/users/henrythor/followers", "following_url": "https://api.github.com/users/henrythor/following{/other_user}", "gists_url": "https://api.github.com/users/henrythor/gists{/gist_id}", "starred_url": "https://api.github.com/users/henrythor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henrythor/subscriptions", "organizations_url": "https://api.github.com/users/henrythor/orgs", "repos_url": "https://api.github.com/users/henrythor/repos", "events_url": "https://api.github.com/users/henrythor/events{/privacy}", "received_events_url": "https://api.github.com/users/henrythor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-04T04:17:12Z", "updated_at": "2020-02-08T17:22:52Z", "closed_at": "2020-02-08T17:22:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Let's say I have a model in Django with a field that has choices. Only, because I'm Icelandic, those choices might be in Icelandic and contain utf-8 characters. Generating an enum from my model will fail.\r\n\r\nF.ex.:\r\n```python\r\nclass School(models.Model):\r\n    MUNICIPALITIES = (\r\n        ('Hafnarfjar\u00f0arkaupsta\u00f0ur', 'Hafnarfjar\u00f0arkaupsta\u00f0ur'),\r\n        ('Reykjanesb\u00e6r', 'Reykjanesb\u00e6r'),\r\n        ('Gar\u00f0ab\u00e6r', 'Gar\u00f0ab\u00e6r'),\r\n        ...\r\n    )\r\n    name = models.CharField(max_length=128)\r\n    municipality = models.CharField(max_length=32, blank=True, null=True, choices=MUNICIPALITIES)\r\n```\r\n\r\nI then try to create a Query object:\r\n```python\r\nclass SchoolNode(DjangoObjectType):\r\n    @classmethod\r\n    class Meta:\r\n        model = School\r\n        filter_fields = [\r\n            'id',\r\n            'name',\r\n        ]\r\n        exclude_fields = [\r\n        ]\r\n        interfaces = (relay.Node,)\r\n\r\n\r\nclass Query(object):\r\n    school = relay.Node.Field(SchoolNode)\r\n    all_schools = DjangoFilterConnectionField(SchoolNode)\r\n```\r\nThis will then fail in `graphql.utils.assert_valid_name.assert_valid_name` at schema evaluation since to_const doesn't handle converting unicode characters to ascii:\r\n`Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"A_HAFNARFJAR\u00d0ARKAUPSTA\u00d0UR\" does not.`\r\n\r\nI really doubt I'm the only one running into this. Most people just handle this stuff differently I suppose? Manually switch out code, or use an actual Enum() in the choices?\r\n\r\nMy proposed solution is to use the unidecode package, specifically designed for this. I'll throw together a PR.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1077", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1077/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1077/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1077/events", "html_url": "https://github.com/graphql-python/graphene/issues/1077", "id": 501706448, "node_id": "MDU6SXNzdWU1MDE3MDY0NDg=", "number": 1077, "title": "AttributeError: Type \"execute_async\" not found in the Schema.", "user": {"login": "JacobMillner", "id": 7264099, "node_id": "MDQ6VXNlcjcyNjQwOTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/7264099?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JacobMillner", "html_url": "https://github.com/JacobMillner", "followers_url": "https://api.github.com/users/JacobMillner/followers", "following_url": "https://api.github.com/users/JacobMillner/following{/other_user}", "gists_url": "https://api.github.com/users/JacobMillner/gists{/gist_id}", "starred_url": "https://api.github.com/users/JacobMillner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JacobMillner/subscriptions", "organizations_url": "https://api.github.com/users/JacobMillner/orgs", "repos_url": "https://api.github.com/users/JacobMillner/repos", "events_url": "https://api.github.com/users/JacobMillner/events{/privacy}", "received_events_url": "https://api.github.com/users/JacobMillner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-10-02T20:22:47Z", "updated_at": "2019-11-06T13:39:00Z", "closed_at": "2019-11-06T13:39:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there, \r\nI am using graphene 2.1.8 with the tornado framework. I am trying to setup an async graphene mutation and it appears to not think the function exists on the graphene Schema class. My code is roughly setup like this:\r\n\r\n```python\r\ngraphql = graphene.Schema(query=Query, mutation=Mutations, subscription=Subscriptions)\r\nasync def query_async(self, query, queueLayer, variables, context):\r\n        return await graphql.execute_async(query, variables=variables, context=context)\r\n```\r\n\r\nAnd I get this error:\r\n\r\n```\r\n| 2019-10-02 20:16:48,976 tornado.application ERROR    Uncaught exception POST /async (192.168.80.1)\r\n HTTPServerRequest(protocol='http', host='localhost:8081', method='POST', uri='/async', version='HTTP/1.1', remote_ip='192.168.80.1')\r\n Traceback (most recent call last):\r\n   File \"/usr/local/lib/python3.7/site-packages/tornado/web.py\", line 1699, in _execute\r\n    result = await result\r\n   File \"/usr/local/lib/python3.7/site-packages/tornado/gen.py\", line 742, in run\r\n    yielded = self.gen.throw(*exc_info)  # type: ignore\r\n  File \"/work/server/handlers.py\", line 152, in post\r\n     response = yield asyncio.ensure_future(self.session.exec_query_async(self.get_request_token(), query, variables, self.queueLayer))\r\n   File \"/usr/local/lib/python3.7/site-packages/tornado/gen.py\", line 735, in run\r\n     value = future.result()\r\nFile \"/work/datastore/session/sessions.py\", line 52, in exec_query_async\r\nesult = await Schema.query_async(session, query, queueLayer, variables, dict(session=session, auth=token))\r\nFile \"/work/schema/__init__.py\", line 22, in query_async\r\n return await graphql.execute_async(query, variables=variables, context=context, middleware=[QueueLayerMiddleware(queueLayer)])\r\nFile \"/usr/local/lib/python3.7/site-packages/graphene/types/schema.py\", line 98, in __getattr__\r\nraise AttributeError('Type \"{}\" not found in the Schema'.format(type_name))\r\nAttributeError: Type \"execute_async\" not found in the Schema\r\n```\r\nEDIT: I tried setting up a very basic example of execute_async using the example in graphene/tests_asyncio/test_relay_mutation.py and it is still giving me a similar error.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1076", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1076/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1076/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1076/events", "html_url": "https://github.com/graphql-python/graphene/issues/1076", "id": 501101049, "node_id": "MDU6SXNzdWU1MDExMDEwNDk=", "number": 1076, "title": "ImportError while trying import graphene", "user": {"login": "Kunalm77", "id": 54607869, "node_id": "MDQ6VXNlcjU0NjA3ODY5", "avatar_url": "https://avatars3.githubusercontent.com/u/54607869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kunalm77", "html_url": "https://github.com/Kunalm77", "followers_url": "https://api.github.com/users/Kunalm77/followers", "following_url": "https://api.github.com/users/Kunalm77/following{/other_user}", "gists_url": "https://api.github.com/users/Kunalm77/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kunalm77/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kunalm77/subscriptions", "organizations_url": "https://api.github.com/users/Kunalm77/orgs", "repos_url": "https://api.github.com/users/Kunalm77/repos", "events_url": "https://api.github.com/users/Kunalm77/events{/privacy}", "received_events_url": "https://api.github.com/users/Kunalm77/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-01T19:32:34Z", "updated_at": "2019-10-02T03:12:45Z", "closed_at": "2019-10-02T03:12:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am unsure why I am getting this import error while trying to do a simple example. Please refer to the screenshot attached.\r\n\r\n![image](https://user-images.githubusercontent.com/54607869/65994142-a81d5a00-e460-11e9-8e22-2ecda4a84136.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1075", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1075/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1075/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1075/events", "html_url": "https://github.com/graphql-python/graphene/issues/1075", "id": 500957567, "node_id": "MDU6SXNzdWU1MDA5NTc1Njc=", "number": 1075, "title": "Improve the DataLoader batching documentation", "user": {"login": "wojcikstefan", "id": 1718372, "node_id": "MDQ6VXNlcjE3MTgzNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1718372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wojcikstefan", "html_url": "https://github.com/wojcikstefan", "followers_url": "https://api.github.com/users/wojcikstefan/followers", "following_url": "https://api.github.com/users/wojcikstefan/following{/other_user}", "gists_url": "https://api.github.com/users/wojcikstefan/gists{/gist_id}", "starred_url": "https://api.github.com/users/wojcikstefan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wojcikstefan/subscriptions", "organizations_url": "https://api.github.com/users/wojcikstefan/orgs", "repos_url": "https://api.github.com/users/wojcikstefan/repos", "events_url": "https://api.github.com/users/wojcikstefan/events{/privacy}", "received_events_url": "https://api.github.com/users/wojcikstefan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-01T15:01:29Z", "updated_at": "2020-06-03T16:06:33Z", "closed_at": "2020-06-03T16:06:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you follow the [documentation on batching](https://github.com/graphql-python/graphene/blob/5cb7d91aaad028ad186f9453c6d7cc7c1e63e8a1/docs/execution/dataloader.rst#batching) directly, you might easily come to a conclusion that the `DataLoader` is not working as advertised.\r\n\r\nTo make this more concrete, see this script, which is directly following the documentation:\r\n```py\r\nfrom promise import Promise\r\nfrom promise.dataloader import DataLoader\r\n\r\nclass UserLoader(DataLoader):\r\n    def batch_load_fn(self, keys):\r\n        print(\"Batch loading\", keys)\r\n        return Promise.resolve(keys)\r\n\r\nuser_loader = UserLoader()\r\nuser_loader.load(1)\r\nuser_loader.load(2)\r\n```\r\n\r\nThis results in the following output:\r\n```\r\nBatch loading [1]\r\nBatch loading [2]\r\n```\r\ninstead of `Batch loading [1, 2]`.\r\n\r\nThe only way (that I've found) to make this work correctly is to run this:\r\n```\r\ndef test(res):\r\n    user_loader.load(1)\r\n    user_loader.load(2)\r\n\r\nPromise.resolve(None).then(test)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1073", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1073/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1073/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1073/events", "html_url": "https://github.com/graphql-python/graphene/issues/1073", "id": 495471025, "node_id": "MDU6SXNzdWU0OTU0NzEwMjU=", "number": 1073, "title": "turn off pagination (get rid of edges)", "user": {"login": "squarewave24", "id": 843437, "node_id": "MDQ6VXNlcjg0MzQzNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/843437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/squarewave24", "html_url": "https://github.com/squarewave24", "followers_url": "https://api.github.com/users/squarewave24/followers", "following_url": "https://api.github.com/users/squarewave24/following{/other_user}", "gists_url": "https://api.github.com/users/squarewave24/gists{/gist_id}", "starred_url": "https://api.github.com/users/squarewave24/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/squarewave24/subscriptions", "organizations_url": "https://api.github.com/users/squarewave24/orgs", "repos_url": "https://api.github.com/users/squarewave24/repos", "events_url": "https://api.github.com/users/squarewave24/events{/privacy}", "received_events_url": "https://api.github.com/users/squarewave24/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-18T21:47:06Z", "updated_at": "2019-09-23T18:56:07Z", "closed_at": "2019-09-22T19:19:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "is it possible to turn off pagination? \r\n\r\ni'd like to just get the data back, instead of edges/node \r\n\r\non my new setup, it appears by default and i can't figure out how to get rid of it\r\n\r\n```\r\n{ allRecords {\r\n  edges {\r\n    node {\r\n      id\r\n    }\r\n  }\r\n} }\r\n```\r\n\r\nthe issue im facing is that it adds unnecessary complexity in React Apollo client \r\n\r\ngraphql-python code: \r\n```\r\nclass MyClass(SQLAlchemyObjectType):\r\n    class Meta:\r\n        model = MyClassModel\r\n        interfaces = (relay.Node, )\r\n\r\nclass MyClassConnection(relay.Connection):\r\n    class Meta:\r\n        node = MyClass\r\n\r\nclass Query(graphene.ObjectType):\r\n    node = relay.Node.Field()\r\n    all_records = SQLAlchemyConnectionField(MyClassConnection, sort=None)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1071", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1071/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1071/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1071/events", "html_url": "https://github.com/graphql-python/graphene/issues/1071", "id": 493272393, "node_id": "MDU6SXNzdWU0OTMyNzIzOTM=", "number": 1071, "title": "Missing clientIDMutation when using relay.ClientIDMutation", "user": {"login": "sandwichsudo", "id": 4517593, "node_id": "MDQ6VXNlcjQ1MTc1OTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/4517593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandwichsudo", "html_url": "https://github.com/sandwichsudo", "followers_url": "https://api.github.com/users/sandwichsudo/followers", "following_url": "https://api.github.com/users/sandwichsudo/following{/other_user}", "gists_url": "https://api.github.com/users/sandwichsudo/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandwichsudo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandwichsudo/subscriptions", "organizations_url": "https://api.github.com/users/sandwichsudo/orgs", "repos_url": "https://api.github.com/users/sandwichsudo/repos", "events_url": "https://api.github.com/users/sandwichsudo/events{/privacy}", "received_events_url": "https://api.github.com/users/sandwichsudo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-13T11:21:31Z", "updated_at": "2019-12-31T09:56:35Z", "closed_at": "2019-12-31T09:56:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm using an example relay.ClientIDMutation from the [docs](https://docs.graphene-python.org/projects/django/en/latest/mutations/#relay) but the clientIDMutation argument seems to missing? Looking at the source code, it looks like it's been [commented out](https://github.com/graphql-python/graphene/blob/master/graphene/relay/mutation.py#L37)? \r\n\r\nI'm wondering whether this is intentional and we should add it ourselves like so:\r\n\r\n```\r\nclass QuestionMutation(relay.ClientIDMutation):\r\n    class Input:\r\n        text = graphene.String(required=True)\r\n        id = graphene.ID()\r\n        client_mutation_id = graphene.String()\r\n\r\n    question = graphene.Field(QuestionType)\r\n\r\n    @classmethod\r\n    def mutate_and_get_payload(cls, root, info, text, id):\r\n        question = Question.objects.get(pk=from_global_id(id)[1])\r\n        question.text = text\r\n        question.save()\r\n        return QuestionMutation(question=question)\r\n```\r\n\r\n\r\n or whether it's a bug?\r\n\r\n\r\n\r\nMany thanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1069", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1069/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1069/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1069/events", "html_url": "https://github.com/graphql-python/graphene/issues/1069", "id": 490791303, "node_id": "MDU6SXNzdWU0OTA3OTEzMDM=", "number": 1069, "title": "Directives", "user": {"login": "adrianschneider94", "id": 17550019, "node_id": "MDQ6VXNlcjE3NTUwMDE5", "avatar_url": "https://avatars3.githubusercontent.com/u/17550019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrianschneider94", "html_url": "https://github.com/adrianschneider94", "followers_url": "https://api.github.com/users/adrianschneider94/followers", "following_url": "https://api.github.com/users/adrianschneider94/following{/other_user}", "gists_url": "https://api.github.com/users/adrianschneider94/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrianschneider94/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrianschneider94/subscriptions", "organizations_url": "https://api.github.com/users/adrianschneider94/orgs", "repos_url": "https://api.github.com/users/adrianschneider94/repos", "events_url": "https://api.github.com/users/adrianschneider94/events{/privacy}", "received_events_url": "https://api.github.com/users/adrianschneider94/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-08T19:03:44Z", "updated_at": "2019-09-20T14:48:06Z", "closed_at": "2019-09-20T14:48:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm currently writing a code generator for graphene as plugin to https://graphql-code-generator.com. I would like to implement directives as well.\r\n\r\nI see that one can define directives:\r\nhttps://github.com/graphql-python/graphene/issues/1006\r\n\r\nHowever, the types used there are from the core library. Are those interchangeable with the graphene types or must I use the core types?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1068", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1068/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1068/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1068/events", "html_url": "https://github.com/graphql-python/graphene/issues/1068", "id": 490785063, "node_id": "MDU6SXNzdWU0OTA3ODUwNjM=", "number": 1068, "title": "Forward reference for interfaces", "user": {"login": "adrianschneider94", "id": 17550019, "node_id": "MDQ6VXNlcjE3NTUwMDE5", "avatar_url": "https://avatars3.githubusercontent.com/u/17550019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrianschneider94", "html_url": "https://github.com/adrianschneider94", "followers_url": "https://api.github.com/users/adrianschneider94/followers", "following_url": "https://api.github.com/users/adrianschneider94/following{/other_user}", "gists_url": "https://api.github.com/users/adrianschneider94/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrianschneider94/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrianschneider94/subscriptions", "organizations_url": "https://api.github.com/users/adrianschneider94/orgs", "repos_url": "https://api.github.com/users/adrianschneider94/repos", "events_url": "https://api.github.com/users/adrianschneider94/events{/privacy}", "received_events_url": "https://api.github.com/users/adrianschneider94/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-08T18:12:34Z", "updated_at": "2019-12-21T19:13:04Z", "closed_at": "2019-12-21T19:13:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm currently writing a code generator (GraphQL -> Graphene, plugin to https://graphql-code-generator.com). This works fine so far, but there is a little issue with interfaces:\r\n\r\nFor Fields etc. the `lambda: Class`-Notation allows forward references. However, this does not apply to the interfaces in the Meta-Class.\r\n\r\nI would need something like this:\r\n```\r\nclass Notification(ObjectType):\r\n    class Meta:\r\n        interfaces = [lambda: Test]\r\n\r\nclass Test(Interface):\r\n    id = Field(lambda: NonNull(ID))\r\n    la = Field(lambda: String)\r\n```\r\n\r\nWould be great, if someone could give me a hint how this could be done!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1067", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1067/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1067/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1067/events", "html_url": "https://github.com/graphql-python/graphene/issues/1067", "id": 490740626, "node_id": "MDU6SXNzdWU0OTA3NDA2MjY=", "number": 1067, "title": "Graphene test client does not call hook before_request", "user": {"login": "thanhpd-teko", "id": 47600586, "node_id": "MDQ6VXNlcjQ3NjAwNTg2", "avatar_url": "https://avatars1.githubusercontent.com/u/47600586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thanhpd-teko", "html_url": "https://github.com/thanhpd-teko", "followers_url": "https://api.github.com/users/thanhpd-teko/followers", "following_url": "https://api.github.com/users/thanhpd-teko/following{/other_user}", "gists_url": "https://api.github.com/users/thanhpd-teko/gists{/gist_id}", "starred_url": "https://api.github.com/users/thanhpd-teko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thanhpd-teko/subscriptions", "organizations_url": "https://api.github.com/users/thanhpd-teko/orgs", "repos_url": "https://api.github.com/users/thanhpd-teko/repos", "events_url": "https://api.github.com/users/thanhpd-teko/events{/privacy}", "received_events_url": "https://api.github.com/users/thanhpd-teko/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-08T11:03:51Z", "updated_at": "2019-12-21T12:13:01Z", "closed_at": "2019-12-21T12:13:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I write test api using graphene.test.Client class in Flask app. However it does not call flask hook before_request function. How to make it work? Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1065", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1065/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1065/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1065/events", "html_url": "https://github.com/graphql-python/graphene/issues/1065", "id": 489879895, "node_id": "MDU6SXNzdWU0ODk4Nzk4OTU=", "number": 1065, "title": "Support for GEOS fields-- PointField, LineString etc...", "user": {"login": "EverWinter23", "id": 21227016, "node_id": "MDQ6VXNlcjIxMjI3MDE2", "avatar_url": "https://avatars0.githubusercontent.com/u/21227016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EverWinter23", "html_url": "https://github.com/EverWinter23", "followers_url": "https://api.github.com/users/EverWinter23/followers", "following_url": "https://api.github.com/users/EverWinter23/following{/other_user}", "gists_url": "https://api.github.com/users/EverWinter23/gists{/gist_id}", "starred_url": "https://api.github.com/users/EverWinter23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EverWinter23/subscriptions", "organizations_url": "https://api.github.com/users/EverWinter23/orgs", "repos_url": "https://api.github.com/users/EverWinter23/repos", "events_url": "https://api.github.com/users/EverWinter23/events{/privacy}", "received_events_url": "https://api.github.com/users/EverWinter23/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-05T16:46:43Z", "updated_at": "2019-09-05T17:01:27Z", "closed_at": "2019-09-05T17:01:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can we add support for fields offered by ``django.contrib.gis.geos``--  [GEOS](https://docs.djangoproject.com/en/2.2/ref/contrib/gis/geos/). ``django-graphql-geojson`` package comes closest to solving the problem, however, the particular implementation has a major drawback that it converts the whole *model* into *GeoJSON*, which causes problems with external interfaces which are defined on *non-geometric* fields. (May also break internal ones.)\r\n\r\nConverting *GEOS* fields into *GeoJSON* should more than sufficient for most use cases because it provides you with pre-built interfaces and filters on non-geometric types.\r\n\r\nHow would one go about adding support for serialization of these fields?  Having gone through the codebase-- adding them to ``converter.py`` coupled with ``tests.py`` should be sufficient or am I missing something?\r\n\r\n**Edit** Wrong Repository. Sorry.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1064", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1064/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1064/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1064/events", "html_url": "https://github.com/graphql-python/graphene/issues/1064", "id": 489783650, "node_id": "MDU6SXNzdWU0ODk3ODM2NTA=", "number": 1064, "title": "Wrong example of custom scalars in documentation", "user": {"login": "Yura-D", "id": 38992276, "node_id": "MDQ6VXNlcjM4OTkyMjc2", "avatar_url": "https://avatars0.githubusercontent.com/u/38992276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yura-D", "html_url": "https://github.com/Yura-D", "followers_url": "https://api.github.com/users/Yura-D/followers", "following_url": "https://api.github.com/users/Yura-D/following{/other_user}", "gists_url": "https://api.github.com/users/Yura-D/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yura-D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yura-D/subscriptions", "organizations_url": "https://api.github.com/users/Yura-D/orgs", "repos_url": "https://api.github.com/users/Yura-D/repos", "events_url": "https://api.github.com/users/Yura-D/events{/privacy}", "received_events_url": "https://api.github.com/users/Yura-D/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-05T14:16:52Z", "updated_at": "2019-12-18T15:07:58Z", "closed_at": "2019-12-18T15:07:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the documentation, you have the wrong example. Here:\r\nhttps://docs.graphene-python.org/en/latest/types/scalars/\r\nI'm used the source code and its work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1063", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1063/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1063/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1063/events", "html_url": "https://github.com/graphql-python/graphene/issues/1063", "id": 488681366, "node_id": "MDU6SXNzdWU0ODg2ODEzNjY=", "number": 1063, "title": "Including self-referential fields in InputObjectType subclass", "user": {"login": "seandavi", "id": 92435, "node_id": "MDQ6VXNlcjkyNDM1", "avatar_url": "https://avatars1.githubusercontent.com/u/92435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seandavi", "html_url": "https://github.com/seandavi", "followers_url": "https://api.github.com/users/seandavi/followers", "following_url": "https://api.github.com/users/seandavi/following{/other_user}", "gists_url": "https://api.github.com/users/seandavi/gists{/gist_id}", "starred_url": "https://api.github.com/users/seandavi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seandavi/subscriptions", "organizations_url": "https://api.github.com/users/seandavi/orgs", "repos_url": "https://api.github.com/users/seandavi/repos", "events_url": "https://api.github.com/users/seandavi/events{/privacy}", "received_events_url": "https://api.github.com/users/seandavi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-09-03T15:40:46Z", "updated_at": "2019-09-04T10:42:50Z", "closed_at": "2019-09-03T19:53:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to create an InputObjectType that has dynamic fields that is meant for complex filtering of fields but that also contains a couple of self-referencing fields to allow boolean operations (AND, OR). Here is a concrete example of what I am trying to do, taken from [here](https://www.contentful.com/developers/docs/references/graphql/#/reference/collection-filters):\r\n\r\n```\r\ninput FriendlyUserFilter {\r\n  sys: SysFilter\r\n  name: String\r\n  name_not: String\r\n  name_exists: Boolean\r\n  name_contains: String\r\n  # ... more name filters\r\n  age: Number\r\n  age_gt: Number\r\n  age_lt: Number\r\n  # ... more age filters\r\n  AND: [FriendlyUserFilter]\r\n  OR: [FriendlyUserFilter]\r\n}\r\n```\r\n\r\nI am using the technique described [here](https://github.com/graphql-python/graphene/issues/945#issuecomment-484588866) to do so. I'm curious how to implement the `AND` and `OR` functionality that includes a reference to the class itself. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1062", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1062/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1062/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1062/events", "html_url": "https://github.com/graphql-python/graphene/issues/1062", "id": 487773271, "node_id": "MDU6SXNzdWU0ODc3NzMyNzE=", "number": 1062, "title": "`subscribe` not passed when constructing `GraphQLField`", "user": {"login": "ericls", "id": 4508461, "node_id": "MDQ6VXNlcjQ1MDg0NjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4508461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericls", "html_url": "https://github.com/ericls", "followers_url": "https://api.github.com/users/ericls/followers", "following_url": "https://api.github.com/users/ericls/following{/other_user}", "gists_url": "https://api.github.com/users/ericls/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericls/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericls/subscriptions", "organizations_url": "https://api.github.com/users/ericls/orgs", "repos_url": "https://api.github.com/users/ericls/repos", "events_url": "https://api.github.com/users/ericls/events{/privacy}", "received_events_url": "https://api.github.com/users/ericls/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-31T14:03:22Z", "updated_at": "2019-12-13T18:55:32Z", "closed_at": "2019-12-13T18:55:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the `construct_fields_for_type` method, `subscribe` is not passed in as an argument when constructing `GraphQLField`, which is used as `resolve_fn` when executing the subscription. \r\n\r\nProbably can just reuse the logic of `get_resolver` and `get_resolver_for_type` to automatically bind subscribe_{name}", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1061", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1061/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1061/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1061/events", "html_url": "https://github.com/graphql-python/graphene/issues/1061", "id": 487741596, "node_id": "MDU6SXNzdWU0ODc3NDE1OTY=", "number": 1061, "title": "invitation to the Slack channel", "user": {"login": "SillyScribe95", "id": 50992181, "node_id": "MDQ6VXNlcjUwOTkyMTgx", "avatar_url": "https://avatars1.githubusercontent.com/u/50992181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SillyScribe95", "html_url": "https://github.com/SillyScribe95", "followers_url": "https://api.github.com/users/SillyScribe95/followers", "following_url": "https://api.github.com/users/SillyScribe95/following{/other_user}", "gists_url": "https://api.github.com/users/SillyScribe95/gists{/gist_id}", "starred_url": "https://api.github.com/users/SillyScribe95/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SillyScribe95/subscriptions", "organizations_url": "https://api.github.com/users/SillyScribe95/orgs", "repos_url": "https://api.github.com/users/SillyScribe95/repos", "events_url": "https://api.github.com/users/SillyScribe95/events{/privacy}", "received_events_url": "https://api.github.com/users/SillyScribe95/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-31T07:31:50Z", "updated_at": "2019-09-22T19:06:45Z", "closed_at": "2019-09-22T19:06:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, can I get an invitation to the Slack channel? The email is sillyscribe95 AT gmail.com\r\n\r\nThanks!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1060", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1060/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1060/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1060/events", "html_url": "https://github.com/graphql-python/graphene/issues/1060", "id": 487346909, "node_id": "MDU6SXNzdWU0ODczNDY5MDk=", "number": 1060, "title": "Invitation to slack channel", "user": {"login": "luisbosque", "id": 93268, "node_id": "MDQ6VXNlcjkzMjY4", "avatar_url": "https://avatars3.githubusercontent.com/u/93268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbosque", "html_url": "https://github.com/luisbosque", "followers_url": "https://api.github.com/users/luisbosque/followers", "following_url": "https://api.github.com/users/luisbosque/following{/other_user}", "gists_url": "https://api.github.com/users/luisbosque/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbosque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbosque/subscriptions", "organizations_url": "https://api.github.com/users/luisbosque/orgs", "repos_url": "https://api.github.com/users/luisbosque/repos", "events_url": "https://api.github.com/users/luisbosque/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbosque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-30T08:05:07Z", "updated_at": "2019-09-22T19:06:53Z", "closed_at": "2019-09-22T19:06:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, can I get an invitation to the Slack channel? The email is luisico AT gmail.com\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1059", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1059/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1059/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1059/events", "html_url": "https://github.com/graphql-python/graphene/issues/1059", "id": 486772031, "node_id": "MDU6SXNzdWU0ODY3NzIwMzE=", "number": 1059, "title": "ModuleNotFoundError: No module named 'graphql'", "user": {"login": "dsw0214", "id": 8275702, "node_id": "MDQ6VXNlcjgyNzU3MDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8275702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dsw0214", "html_url": "https://github.com/dsw0214", "followers_url": "https://api.github.com/users/dsw0214/followers", "following_url": "https://api.github.com/users/dsw0214/following{/other_user}", "gists_url": "https://api.github.com/users/dsw0214/gists{/gist_id}", "starred_url": "https://api.github.com/users/dsw0214/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dsw0214/subscriptions", "organizations_url": "https://api.github.com/users/dsw0214/orgs", "repos_url": "https://api.github.com/users/dsw0214/repos", "events_url": "https://api.github.com/users/dsw0214/events{/privacy}", "received_events_url": "https://api.github.com/users/dsw0214/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-08-29T06:52:18Z", "updated_at": "2019-09-03T10:44:28Z", "closed_at": "2019-09-03T10:44:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "The Python virtual environment use created with virtualenv ,python version is\r\n```\r\n#python --version\r\nPython 3.7.3\r\n```\r\nWhen I execute the following commands\uff1a\r\n```\r\n#py.test graphene/relay/ \r\n```\r\nThe following error occurred\uff1a\r\n\r\n```\r\nHint: make sure your test modules/packages have valid Python names.\r\nTraceback:\r\ngraphene/__init__.py:3: in <module>\r\n    from .types import (\r\ngraphene/types/__init__.py:2: in <module>\r\n    from graphql import GraphQLResolveInfo as ResolveInfo\r\nE   ModuleNotFoundError: No module named 'graphql'\r\n```\r\n\r\nBut when I execute the following commands install graphql extension\uff0chave following error\uff1a\r\n\r\n```\r\n# pip install graphql\r\n```\r\n\r\n```\r\nComplete output (10 lines):\r\n  running bdist_wheel\r\n  running build\r\n  running build_py\r\n  creating build\r\n  creating build/lib.macosx-10.7-x86_64-3.7\r\n  creating build/lib.macosx-10.7-x86_64-3.7/graphql\r\n  copying graphql/__init__.py -> build/lib.macosx-10.7-x86_64-3.7/graphql\r\n  running build_ext\r\n  building 'graphql_ext' extension\r\n  error: unknown file type '.pyx' (from 'graphql/graphql_ext.pyx')\r\n  ----------------------------------------\r\n  ERROR: Failed building wheel for graphql\r\n```\r\nI wonder if you have encountered this problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1058", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1058/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1058/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1058/events", "html_url": "https://github.com/graphql-python/graphene/issues/1058", "id": 486001446, "node_id": "MDU6SXNzdWU0ODYwMDE0NDY=", "number": 1058, "title": "graphql+docker(minimal container) fails to build (unknown file type '.pyx')", "user": {"login": "srevenant", "id": 10660963, "node_id": "MDQ6VXNlcjEwNjYwOTYz", "avatar_url": "https://avatars0.githubusercontent.com/u/10660963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srevenant", "html_url": "https://github.com/srevenant", "followers_url": "https://api.github.com/users/srevenant/followers", "following_url": "https://api.github.com/users/srevenant/following{/other_user}", "gists_url": "https://api.github.com/users/srevenant/gists{/gist_id}", "starred_url": "https://api.github.com/users/srevenant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srevenant/subscriptions", "organizations_url": "https://api.github.com/users/srevenant/orgs", "repos_url": "https://api.github.com/users/srevenant/repos", "events_url": "https://api.github.com/users/srevenant/events{/privacy}", "received_events_url": "https://api.github.com/users/srevenant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-27T19:50:36Z", "updated_at": "2019-08-27T21:05:22Z", "closed_at": "2019-08-27T21:05:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Doing this in docker, I may just be missing a dependency that needs to be installed?\r\n\r\nDockerfile:\r\n```\r\nFROM python:3.7-stretch\r\nRUN apt-get update && \\\r\n    apt-get install -y gcc &&\\\r\n    pip3 install cython &&\\\r\n    pip3 install graphql\r\n```\r\n\r\nThis is following the install instructions on the home page. I have also tried it with other build tools but none seem to resolve the problem.\r\n\r\nI might be missing something, but from what I've read this appears to be something around how the setup.py is defined and how it calls setuptools.\r\n\r\nHas anybody come across this problem before?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1057", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1057/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1057/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1057/events", "html_url": "https://github.com/graphql-python/graphene/issues/1057", "id": 485439776, "node_id": "MDU6SXNzdWU0ODU0Mzk3NzY=", "number": 1057, "title": "External call to graphene API", "user": {"login": "graforlock", "id": 7515380, "node_id": "MDQ6VXNlcjc1MTUzODA=", "avatar_url": "https://avatars3.githubusercontent.com/u/7515380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graforlock", "html_url": "https://github.com/graforlock", "followers_url": "https://api.github.com/users/graforlock/followers", "following_url": "https://api.github.com/users/graforlock/following{/other_user}", "gists_url": "https://api.github.com/users/graforlock/gists{/gist_id}", "starred_url": "https://api.github.com/users/graforlock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graforlock/subscriptions", "organizations_url": "https://api.github.com/users/graforlock/orgs", "repos_url": "https://api.github.com/users/graforlock/repos", "events_url": "https://api.github.com/users/graforlock/events{/privacy}", "received_events_url": "https://api.github.com/users/graforlock/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-26T20:38:22Z", "updated_at": "2019-08-30T17:27:26Z", "closed_at": "2019-08-30T16:28:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't see the example anywhere but I assume it should be pretty basic functionality.\r\n\r\nIn the microservice architecture, if I have multiple python servers talking to graphene API, how do I accomplish this basic scenario? Is there any graphene client for this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene/issues/1056", "repository_url": "https://api.github.com/repos/graphql-python/graphene", "labels_url": "https://api.github.com/repos/graphql-python/graphene/issues/1056/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene/issues/1056/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene/issues/1056/events", "html_url": "https://github.com/graphql-python/graphene/issues/1056", "id": 485369038, "node_id": "MDU6SXNzdWU0ODUzNjkwMzg=", "number": 1056, "title": "AttributeError: entity", "user": {"login": "david-freistrom", "id": 1495876, "node_id": "MDQ6VXNlcjE0OTU4NzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1495876?v=4", "gravatar_id": "", "url": "https://api.github.com/users/david-freistrom", "html_url": "https://github.com/david-freistrom", "followers_url": "https://api.github.com/users/david-freistrom/followers", "following_url": "https://api.github.com/users/david-freistrom/following{/other_user}", "gists_url": "https://api.github.com/users/david-freistrom/gists{/gist_id}", "starred_url": "https://api.github.com/users/david-freistrom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/david-freistrom/subscriptions", "organizations_url": "https://api.github.com/users/david-freistrom/orgs", "repos_url": "https://api.github.com/users/david-freistrom/repos", "events_url": "https://api.github.com/users/david-freistrom/events{/privacy}", "received_events_url": "https://api.github.com/users/david-freistrom/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 264481176, "node_id": "MDU6TGFiZWwyNjQ0ODExNzY=", "url": "https://api.github.com/repos/graphql-python/graphene/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-26T18:12:39Z", "updated_at": "2020-05-19T04:18:09Z", "closed_at": "2019-12-08T19:06:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python 3.7.4\r\nSQLAlchemy          1.3.7\r\ngraphene-sqlalchemy 2.2.2\r\nFlask               1.1.1\r\nFlask-SQLAlchemy    2.4.0\r\npsycopg2            2.8.3 \r\n\r\nLinux xxx 5.1.21-200.fc29.x86_64 #1 SMP Mon Jul 29 15:30:04 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\nThe following code snippets show just a simple One-to-Many Relationship. I tried it with and  back_populates and with backref, Uni- and Bidirectional. I also tried Many-to-Many relationships with a association Table. But nothing helped.\r\n\r\nI always get the error shown in the last Bash-snippet.\r\n\r\nWhats wrong here? \r\nI found out, that sqlalchemy.orm.relationships.RelationshipProperty give that exception when I try to call .entity on it.\r\n\r\nI already opened an issue on the sqlalchemy github [https://github.com/sqlalchemy/sqlalchemy/issues/4819](url) and got the answer above. Hopefully it helps you to help me to fix this issue ;)\r\n\r\nI also opened an issue at graphene-sqlalchemy [https://github.com/graphql-python/graphene-sqlalchemy/issues/245](url)\r\n\r\nIts not really clear where the issue is coming from.\r\n\r\n> that stack trace is not very easy to create as it involves an unusual attribute error being generated when mappings are being resolved, and it is masquerading as an attribute error for the \"entity\" attribute, which is in fact a function. in python 3, any ofher kind of exception will be displayed as is, so it's very strange for it to be an attribute error.\r\n>\r\n>in case that doesn't make sense, it means there is another exception happening that we're not able to see.\r\n>\r\n>I unfortunately cannot reproduce your error with your mappings. The condition may be due to whatever graphene-sqlalchemy is doing, The method call here:\r\n>\r\n>File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/graphene/utils/subclass_with_meta.py\", line 52, in init_subclass\r\n>super_class.init_subclass_with_meta(**options)\r\n>\r\n>which is then calling down to class_mapper(), looks suspicious to me; I would first off not be using a metaclass for anything in conjunction wtih SQLAlchemy declarative because metaclasses are very unwieldy and declarative is already using one (they should use mixin classes or class decorators for whatever it is they need to add to SQLAlchemy models) and if I were, I'd not be trying to run class_mapper() inside of it as this could in theory lead to some difficult re-entrant conditions which is likely what's happening here.\r\n>\r\n>in short I think you need to report this to graphene-sqlalchemy.\r\n\r\nIt is happen in sqlalchemy/orm/mapper.py(1947)_post_configure_properties() on line 1947\r\n\r\n```python\r\n1932        def _post_configure_properties(self):                                                                                                                                   \u2502\r\n1933            \"\"\"Call the ``init()`` method on all ``MapperProperties``                                                                                                           \u2502\r\n1934            attached to this mapper.                                                                                                                                            \u2502\r\n1935                                                                                                                                                                                \u2502\r\n1936            This is a deferred configuration step which is intended                                                                                                             \u2502\r\n1937            to execute once all mappers have been constructed.                                                                                                                  \u2502\r\n1938                                                                                                                                                                                \u2502\r\n1939            \"\"\"                                                                                                                                                                 \u2502\r\n1940                                                                                                                                                                                \u2502\r\n1941            self._log(\"_post_configure_properties() started\")                                                                                                                   \u2502\r\n1942            l = [(key, prop) for key, prop in self._props.items()]                                                                                                              \u2502\r\n1943            for key, prop in l:                                                                                                                                                 \u2502\r\n1944                self._log(\"initialize prop %s\", key)                                                                                                                            \u2502\r\n1945                                                                                                                                                                                \u2502\r\n1946                if prop.parent is self and not prop._configure_started:                                                                                                         \u2502\r\n1947 ->                 prop.init()                                                                                                                                                 \u2502\r\n1948                                                                                                                                                                                \u2502\r\n1949                if prop._configure_finished:                                                                                                                                    \u2502\r\n1950                    prop.post_instrument_class(self)                                                                                                                            \u2502\r\n1951                                                                                      \r\n```\r\n\r\n```python\r\n(Pdb) dir(prop)\r\n['Comparator', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattr__', '__getattribute__', '__gt__', '__hash__', '__init__','__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_add_reverse_property', '_all_strategies', '_cascade', '_check_cascade_settings', '_check_conflicts', '_columns_are_mapped', '_configure_finished', '_configure_started', '_create_joins', '_creation_order', '_default_path_loader_key', '_dependency_processor', '_fallback_getattr', '_generate_backref', '_get_attr_w_warn_on_none', '_get_cascade', '_get_context_loader', '_get_strategy', '_is_internal_proxy', '_is_self_referential', '_lazy_none_clause', '_memoized_attr__default_path_loader_key', '_memoized_attr_wildcard_token', '_memoized_attr_info', '_optimized_compare', '_persists_for', '_post_init', '_process_dependent_arguments', '_reverse_property', '_set_cascade', '_setup_join_conditions', '_should_log_debug', '_should_log_info', '_strategies', '_strategy_lookup', '_use_get', '_user_defined_foreign_keys', '_value_as_iterable', '_wildcard_token', '_with_parent', 'active_history', 'argument', 'back_populates', 'backref', 'bake_queries', 'cascade', 'cascade_backrefs', 'cascade_iterator', 'class_attribute', 'collection_class', 'comparator', 'comparator_factory', 'create_row_processor', 'direction', 'distinct_target_key', 'do_init', 'doc', 'enable_typechecks', 'entity', 'extension', 'extension_type', 'info', 'init', 'innerjoin', 'instrument_class', 'is_aliased_class', 'is_attribute', 'is_clause_element', 'is_instance', 'is_mapper', 'is_property', 'is_selectable', 'join_depth', 'key', 'lazy', 'load_on_pending', 'local_remote_pairs', 'logger', 'mapper', 'merge', 'omit_join', 'order_by', 'parent', 'passive_deletes', 'passive_updates', 'post_instrument_class', 'post_update', 'primaryjoin', 'query_class', 'remote_side', 'secondary', 'secondaryjoin', 'set_parent', 'setup', 'single_parent', 'strategy', 'strategy_for', 'strategy_key', 'strategy_wildcard_key', 'uselist', 'viewonly']\r\n(Pdb) prop.entity\r\n*** AttributeError: entity                                   \r\n(Pdb) prop.__class__\r\n<class 'sqlalchemy.orm.relationships.RelationshipProperty'>\r\n```\r\n\r\n\r\n\r\n> app/models/roles.py\r\n\r\n```python\r\nfrom ..models import db, bcrypt\r\nfrom sqlalchemy import Column, Integer, String, Boolean, Binary\r\n\r\nclass Role(db.Model):\r\n  __tablename__ = \"roles\" \r\n\r\n  id = Column(Integer, primary_key=True, autoincrement=True)\r\n  name = Column(String(80), unique=True)\r\n  description = Column(String(255))\r\n  users = db.relationship(\"models.User\", backref=db.backref('role', lazy='joined'), lazy=True)\r\n\r\n  def __repr__(self):\r\n    return '<Role %r>' % (self.name)\r\n\r\n__all__ = [ Role ]\r\n```\r\n\r\n> app/models/users.py\r\n```python\r\nfrom ..models import db, bcrypt\r\nfrom sqlalchemy import Column, Integer, String, Boolean, Binary, DateTime, Text, ForeignKey\r\nfrom sqlalchemy.ext.hybrid import hybrid_property, hybrid_method\r\n\r\nclass User(db.Model):\r\n  __tablename__ = \"users\" \r\n\r\n  id = Column(Integer, primary_key=True, autoincrement=True)\r\n  first_name = Column(String(255), nullable=False)\r\n  last_name = Column(String(255), nullable=False)\r\n  email = Column(String(255), unique=True, nullable=False)\r\n  public_key = Column(Text, unique=True)\r\n  _secret_access_key = Column(Binary(60), unique=True)\r\n  access_key_id = Column(String(255), unique=True)\r\n  active = Column(Boolean())\r\n  confirmed_at = Column(DateTime())\r\n  confirmation_token = Column(String(255), unique=True)\r\n  confirmation_sent_at = Column(DateTime())\r\n  role_id = Column(Integer, ForeignKey(\"roles.id\"), nullable=False)\r\n\r\n  @hybrid_property\r\n  def secret_access_key(self):\r\n    return self._secret_access_key\r\n\r\n  @secret_access_key.setter\r\n  def secret_access_key(self, plaintext_key):\r\n    self._secret_access_key = bcrypt.generate_password_hash(plaintext_key, 15)\r\n \r\n  @hybrid_method\r\n  def is_correct_secret_access_key(self, plaintext_key):\r\n    return bcrypt.check_password_hash(self.secret_access_key, plaintext_key)\r\n\r\n  def __repr__(self):\r\n    return '<User %r %r>' % (self.first_name, self.last_name)\r\n\r\n__all__ = [ User ]\r\n```\r\n\r\n> app/models/__init__.py\r\n```python\r\nfrom flask.cli import with_appcontext\r\nimport click\r\nfrom flask.cli import AppGroup\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_bcrypt import Bcrypt\r\nimport pdb\r\n\r\ndb = SQLAlchemy()\r\nbcrypt = Bcrypt()\r\n\r\nrole_cli = AppGroup('role')\r\nuser_cli = AppGroup('user')\r\n\r\ndef init_app(app):\r\n  print(\"app.models.__init__.init_app()\")\r\n\r\n  db.init_app(app)\r\n  bcrypt.init_app(app)\r\n  app.cli.add_command(role_cli)\r\n  app.cli.add_command(user_cli)\r\n  app.cli.add_command(init_db)\r\n  app.cli.add_command(seed)\r\n\r\n@click.command('init-db')\r\n@with_appcontext\r\ndef init_db():\r\n  pdb.set_trace()\r\n  db.create_all()\r\n  click.echo('Initialized the database.')\r\n\r\n@role_cli.command('create')\r\n@click.argument(\"name\")\r\n@click.argument(\"description\")\r\n@with_appcontext\r\ndef create_role(name, description):\r\n  from .roles import Role\r\n  role = Role(name=name, description=description)\r\n  db.session.add(role)\r\n  db.session.commit()\r\n  click.echo('Role created.')\r\n\r\n@user_cli.command('create')\r\n@click.argument(\"first_name\")\r\n@click.argument(\"last_name\")\r\n@click.argument(\"email\")\r\n@with_appcontext\r\ndef create_role(first_name, last_name, email):\r\n  from .users import User\r\n  from ..tasks.mailer import send_confirmation_mail\r\n  user = User(first_name=first_name, last_name=last_name, email=email)\r\n  db.session.add(user)\r\n  db.session.commit()\r\n  send_confirmation_mail.delay({'subject': 'Please complete your registration confirmation', 'to': user.email, 'from': 'xxx@yyy.zz'})\r\n  click.echo('User created.')\r\n\r\n@click.command('seed')\r\n@with_appcontext\r\ndef seed():\r\n  from .roles import Role\r\n  from .users import User\r\n  from flask import current_app\r\n  from datetime import datetime\r\n  import secrets\r\n\r\n  entities = []\r\n  entities.append(Role(name='Admin', description='Administrator'))\r\n  entities.append(Role(name='ClusterAdmin', description='Administrator of one Redis Cluster'))\r\n  \r\n  secret_access_key=secrets.token_hex()\r\n  entities.append(User(\r\n    first_name=current_app.config[\"ADMIN\"][\"FIRST_NAME\"], \r\n    last_name=current_app.config[\"ADMIN\"][\"LAST_NAME\"],\r\n    email=current_app.config[\"ADMIN\"][\"EMAIL\"],\r\n    confirmed_at=datetime.now(),\r\n    public_key=current_app.config[\"ADMIN\"][\"PUBLIC_KEY\"],\r\n    access_key_id=secrets.token_hex(),\r\n    secret_access_key=secret_access_key\r\n  ))\r\n\r\n  for entity in entities:\r\n    try:\r\n      db.session.add(entity)\r\n      db.session.commit()\r\n      click.echo(\"Add Entity \" + str(entity) +\" to Database.\")\r\n      if isinstance(entity, User):\r\n        click.echo(\"SECRET_ACCESS_KEY: \" + secret_access_key)\r\n        click.echo(\"ACCESS_KEY_ID: \" + entity.access_key_id)\r\n    except Exception as err:\r\n      click.echo(\"Entity \" + str(entity) + \" already exist!\")\r\n\r\n  click.echo('Database seeding Done.')\r\n\r\nfrom .users import User\r\nfrom .roles import Role\r\nfrom .clusters import Cluster\r\nfrom .groups import Group\r\nfrom .workers import Worker\r\n__all__ = [Role, User, Worker, Cluster, Group]\r\n```\r\n\r\n\r\n```bash\r\n(Qubic) [david@doha Qubic]$ export FLASK_APP=app\r\n(Qubic) [david@doha Qubic]$ export FLASK_ENV=development\r\n(Qubic) [david@doha Qubic]$ flask init-db\r\napp.schemas.user.UserObject\r\nTraceback (most recent call last):\r\n  File \"/home/david/projects/Qubic/bin/flask\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/flask/cli.py\", line 966, in main\r\n    cli.main(prog_name=\"python -m flask\" if as_module else None)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/flask/cli.py\", line 586, in main\r\n    return super(FlaskGroup, self).main(*args, **kwargs)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/click/core.py\", line 717, in main\r\n    rv = self.invoke(ctx)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/click/core.py\", line 1132, in invoke\r\n    cmd_name, cmd, args = self.resolve_command(ctx, args)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/click/core.py\", line 1171, in resolve_command\r\n    cmd = self.get_command(ctx, cmd_name)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/flask/cli.py\", line 542, in get_command\r\n    rv = info.load_app().cli.get_command(ctx, name)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/flask/cli.py\", line 388, in load_app\r\n    app = locate_app(self, import_name, name)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/flask/cli.py\", line 240, in locate_app\r\n    __import__(module_name)\r\n  File \"/home/david/projects/Qubic/app/__init__.py\", line 6, in <module>\r\n    from . import schemas\r\n  File \"/home/david/projects/Qubic/app/schemas/__init__.py\", line 14, in <module>\r\n    from .user import UserObject, UserObjectConnection, CreateUser, UpdateUser, DeleteUser, DeleteAllUser, ConfirmUser\r\n  File \"/home/david/projects/Qubic/app/schemas/user.py\", line 18, in <module>\r\n    class UserObject(SQLAlchemyObjectType):\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/graphene/utils/subclass_with_meta.py\", line 52, in __init_subclass__\r\n    super_class.__init_subclass_with_meta__(**options)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/graphene_sqlalchemy/types.py\", line 224, in __init_subclass_with_meta__\r\n    assert is_mapped_class(model), (\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/graphene_sqlalchemy/utils.py\", line 28, in is_mapped_class\r\n    class_mapper(cls)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/orm/base.py\", line 441, in class_mapper\r\n    mapper = _inspect_mapped_class(class_, configure=configure)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/orm/base.py\", line 420, in _inspect_mapped_class\r\n    mapper._configure_all()\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/orm/mapper.py\", line 1337, in _configure_all\r\n    configure_mappers()\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/orm/mapper.py\", line 3229, in configure_mappers\r\n    mapper._post_configure_properties()\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/orm/mapper.py\", line 1947, in _post_configure_properties\r\n    prop.init()\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/orm/interfaces.py\", line 196, in init\r\n    self.do_init()\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/orm/relationships.py\", line 1860, in do_init\r\n    self._process_dependent_arguments()\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/orm/relationships.py\", line 1922, in _process_dependent_arguments\r\n    self.target = self.entity.persist_selectable\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/util/langhelpers.py\", line 949, in __getattr__\r\n    return self._fallback_getattr(key)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/util/langhelpers.py\", line 923, in _fallback_getattr\r\n    raise AttributeError(key)\r\nAttributeError: entity\r\n```", "performed_via_github_app": null, "score": 1.0}]}