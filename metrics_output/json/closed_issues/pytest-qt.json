{"total_count": 144, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/311", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/311/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/311/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/311/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/311", "id": 671761851, "node_id": "MDU6SXNzdWU2NzE3NjE4NTE=", "number": 311, "title": "Should macOS be included in CI?", "user": {"login": "altendky", "id": 543719, "node_id": "MDQ6VXNlcjU0MzcxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/543719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/altendky", "html_url": "https://github.com/altendky", "followers_url": "https://api.github.com/users/altendky/followers", "following_url": "https://api.github.com/users/altendky/following{/other_user}", "gists_url": "https://api.github.com/users/altendky/gists{/gist_id}", "starred_url": "https://api.github.com/users/altendky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/altendky/subscriptions", "organizations_url": "https://api.github.com/users/altendky/orgs", "repos_url": "https://api.github.com/users/altendky/repos", "events_url": "https://api.github.com/users/altendky/events{/privacy}", "received_events_url": "https://api.github.com/users/altendky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-03T03:08:53Z", "updated_at": "2020-08-15T12:09:20Z", "closed_at": "2020-08-15T12:09:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was having some trouble over in https://github.com/altendky/qtrio/pull/126 with the macOS builds and a test where I `qtbot.mouseClick(button, QtCore.Qt.LeftButton)`.  Switching to `button.click()` seemed to fix it.  Sometimes the signal processing would be delayed or maybe just not happen.  This is admittedly mixing Qt with Trio so sure, extra stuff to worry about.  But I went ahead and tried running pytest-qt against macOS in GitHub Actions and found it does in fact fail a few signal related tests.  I have included the failures below but really addressing them would presumably belong in another/other ticket(s).  Possibly against Qt, I don't know.\r\n\r\nSo, should macOS testing be added to pytest-qt CI?  (at least after the tests pass)\r\n\r\nI'll admit that the issue does seem at least a bit specific to GitHub Actions.  The QTrio tests passed fine on my MacStadium-donated macOS system.\r\n\r\nhttps://github.com/altendky/pytest-qt/pull/1/checks?check_run_id=938879883\r\nhttps://gist.github.com/altendky/36f75acb06ffdc9b49d7658c11b88543#file-gistfile1-txt-L674-L677\r\n```\r\n2020-08-03T02:51:36.1804550Z FAILED tests/test_wait_signal.py::test_signal_triggered[200-None-True-context_manager_wait-True]\r\n2020-08-03T02:51:36.1805670Z FAILED tests/test_wait_signal.py::test_signal_triggered[200-None-True-context_manager_wait-False]\r\n2020-08-03T02:51:36.1806460Z FAILED tests/test_wait_signal.py::test_signal_triggered_multiple[200-300-400-True-explicit_wait-True]\r\n2020-08-03T02:51:36.1807260Z FAILED tests/test_wait_signal.py::test_signal_triggered_multiple[200-300-400-True-context_manager_wait-True]\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/309", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/309/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/309/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/309/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/309", "id": 638788684, "node_id": "MDU6SXNzdWU2Mzg3ODg2ODQ=", "number": 309, "title": "compare QTextCharFormat", "user": {"login": "jgirardet", "id": 30120358, "node_id": "MDQ6VXNlcjMwMTIwMzU4", "avatar_url": "https://avatars3.githubusercontent.com/u/30120358?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgirardet", "html_url": "https://github.com/jgirardet", "followers_url": "https://api.github.com/users/jgirardet/followers", "following_url": "https://api.github.com/users/jgirardet/following{/other_user}", "gists_url": "https://api.github.com/users/jgirardet/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgirardet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgirardet/subscriptions", "organizations_url": "https://api.github.com/users/jgirardet/orgs", "repos_url": "https://api.github.com/users/jgirardet/repos", "events_url": "https://api.github.com/users/jgirardet/events{/privacy}", "received_events_url": "https://api.github.com/users/jgirardet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-15T11:50:32Z", "updated_at": "2020-06-15T20:28:12Z", "closed_at": "2020-06-15T20:28:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\nwould y ou accept a PR to compare QTextCharFormat and QTextBlockFormat ?\r\nsomething like that :\r\n```python\r\ndef compare_char_format(lhs, rhs, exclude=[]):\r\n    attrs = [\r\n        \"anchorHref\",\r\n        \"anchorName\",\r\n        \"anchorNames\",\r\n        \"font\",\r\n        \"fontCapitalization\",\r\n        \"fontFamilies\",\r\n        \"fontFamily\",\r\n        \"fontFixedPitch\",\r\n        \"fontHintingPreference\",\r\n        \"fontItalic\",\r\n        \"fontKerning\",\r\n        \"fontLetterSpacing\",\r\n        \"fontLetterSpacingType\",\r\n        \"fontOverline\",\r\n        \"fontPointSize\",\r\n        \"fontStretch\",\r\n        \"fontStrikeOut\",\r\n        \"fontStyleHint\",\r\n        \"fontStyleName\",\r\n        \"fontStyleStrategy\",\r\n        \"fontUnderline\",\r\n        \"fontWeight\",\r\n        \"tableCellColumnSpan\",\r\n        \"tableCellRowSpan\",\r\n        \"textOutline\",\r\n        \"toolTip\",\r\n        \"underlineColor\",\r\n        \"underlineStyle\",\r\n        \"verticalAlignment\",\r\n    ]\r\n\r\n    for attr in attrs:\r\n        if attr in exclude:\r\n            continue\r\n        r = getattr(lhs, attr)()\r\n        l = getattr(rhs, attr)()\r\n        assert r == l, f\"{attr}: {r}!={l}\"\r\n    return True\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/305", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/305/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/305/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/305/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/305", "id": 619526347, "node_id": "MDU6SXNzdWU2MTk1MjYzNDc=", "number": 305, "title": "Segfault when using Python Exception as parameter in pyqtSignal", "user": {"login": "digulla", "id": 159306, "node_id": "MDQ6VXNlcjE1OTMwNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/159306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/digulla", "html_url": "https://github.com/digulla", "followers_url": "https://api.github.com/users/digulla/followers", "following_url": "https://api.github.com/users/digulla/following{/other_user}", "gists_url": "https://api.github.com/users/digulla/gists{/gist_id}", "starred_url": "https://api.github.com/users/digulla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/digulla/subscriptions", "organizations_url": "https://api.github.com/users/digulla/orgs", "repos_url": "https://api.github.com/users/digulla/repos", "events_url": "https://api.github.com/users/digulla/events{/privacy}", "received_events_url": "https://api.github.com/users/digulla/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-16T18:02:15Z", "updated_at": "2020-05-19T10:43:02Z", "closed_at": "2020-05-19T10:43:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've stumbled over a bug which makes pytest-qt crash. I tried to reproduce it with a smaller example but failed. When I just run the app itself, the same code works.\r\n\r\nThe code which makes it fail is in this PR: https://github.com/digulla/PyMavenRunner/pull/1\r\n\r\nIf I replace the last parameter of `errorCreatingMatcher` with `str(ex)`, then it works.\r\n\r\nHappens both on Windows and Linux. To see the error, run the script `./run_tests.sh` or just `pipenv run pytest tests/test_custom_pattern_dialog.py`\r\n\r\nThe script `prepare_tests.sh` will set up the dev environment and install everything (or at least tell you what you need to do).\r\n\r\nVersions:\r\nPython 3.7.7\r\nPyQt5 5.14.2\r\npytest-qt 3.3.0\r\nlibQt5Core5 5.9.7", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/303", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/303/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/303/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/303/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/303", "id": 614810276, "node_id": "MDU6SXNzdWU2MTQ4MTAyNzY=", "number": 303, "title": "Use PyPI token in GitHub actions", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-08T15:22:15Z", "updated_at": "2020-08-12T20:35:16Z", "closed_at": "2020-08-12T20:35:16Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I just noticed this:\r\n\r\nhttps://github.com/pytest-dev/pytest-qt/blob/e8080068d3ed215051231d5d5fd43fd1268e4eaa/.github/workflows/main.yml#L83-L86\r\n\r\nIt looks like https://github.com/pypa/pypi-support/issues/98 was taken care of.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/299", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/299/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/299/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/299/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/299", "id": 614590140, "node_id": "MDU6SXNzdWU2MTQ1OTAxNDA=", "number": 299, "title": "Output captured on abort despite -s", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-08T08:21:28Z", "updated_at": "2020-05-14T18:51:09Z", "closed_at": "2020-05-14T18:51:09Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We've had various people having issues with segfaults/aborts where there is no output. There isn't much we can do about that, except recommending running with `-s`. However, I just noticed that, even with `-s`, *something* in pytest/pytest-qt still seems to be hiding the output.\r\n\r\nI'm reproducing this in `docker run -it ubuntu:20.04 /bin/bash` and then doing:\r\n\r\n- `apt update`\r\n- `apt install python3 python3-venv libgl1 libglib2.0-0`\r\n- `python3 -m venv .venv`\r\n- `.venv/bin/pip install pytest pytest-qt PyQt5`\r\n\r\nThis installs the pure minimum so QtWidgets can be imported, but does *not* install libraries needed for Qt to load its xcb plugins.\r\n\r\nAfter that, running Python normally gets us an error message:\r\n\r\n```\r\n# .venv/bin/python3 -c \"from PyQt5.QtWidgets import QApplication; app = QApplication([])\"\r\nqt.qpa.plugin: Could not load the Qt platform plugin \"xcb\" in \"\" even though it was found.\r\nThis application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.\r\n\r\nAvailable platform plugins are: eglfs, linuxfb, minimal, minimalegl, offscreen, vnc, wayland-egl, wayland, wayland-xcomposite-egl, wayland-xcomposite-glx, webgl, xcb.\r\n\r\nAborted (core dumped)\r\n```\r\n\r\nHowever, running `pytest -s test_qt.py` on the following file:\r\n\r\n```python\r\ndef test_qt(qapp):\r\n    pass\r\n```\r\n\r\nresults in:\r\n\r\n```\r\ntest_qt.py Fatal Python error: Aborted\r\n\r\nCurrent thread 0x00007fe91e017740 (most recent call first):\r\n  File \"/root/.venv/lib/python3.8/site-packages/pytestqt/plugin.py\", line 57 in qapp\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/fixtures.py\", line 792 in call_fixture_func\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/fixtures.py\", line 964 in pytest_fixture_setup\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/fixtures.py\", line 914 in execute\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/fixtures.py\", line 584 in _compute_fixture_value\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/fixtures.py\", line 503 in _get_active_fixturedef\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/fixtures.py\", line 487 in getfixturevalue\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/fixtures.py\", line 477 in _fillfixtures\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/fixtures.py\", line 297 in fillfixtures\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/python.py\", line 1485 in setup\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/runner.py\", line 373 in prepare\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/runner.py\", line 123 in pytest_runtest_setup\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/runner.py\", line 217 in <lambda>\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/runner.py\", line 244 in from_call\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/runner.py\", line 216 in call_runtest_hook\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/runner.py\", line 186 in call_and_report\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/runner.py\", line 94 in runtestprotocol\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/runner.py\", line 85 in pytest_runtest_protocol\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/main.py\", line 272 in pytest_runtestloop\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/main.py\", line 247 in _main\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/main.py\", line 191 in wrap_session\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/main.py\", line 240 in pytest_cmdline_main\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/root/.venv/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/root/.venv/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 124 in main\r\n  File \".venv/bin/pytest\", line 8 in <module>\r\nAborted (core dumped)\r\n```\r\n\r\nOpening this here for now because I suppose @nicoddemus could have an idea what's going on there - however, I'm guessing this is a bug in pytest core in some way?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/297", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/297/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/297/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/297/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/297", "id": 603764540, "node_id": "MDU6SXNzdWU2MDM3NjQ1NDA=", "number": 297, "title": "Increase default timeout for waitExposed?", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898025, "node_id": "MDU6TGFiZWwyOTg5ODAyNQ==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/enhancement%20:cool:", "name": "enhancement :cool:", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-21T07:13:53Z", "updated_at": "2020-04-27T22:13:27Z", "closed_at": "2020-04-27T22:13:27Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently, the `waitExposed` default timeout is `1000`, i.e. one second. The default for the underlying [qWaitForWindowExposed](https://doc.qt.io/qt-5/qtest.html#qWaitForWindowExposed-1) has a default timeout of `5000`, i.e. 5 seconds.\r\n\r\nIn my experience, 1s is sometimes too short on Travis CI (when under heavy load), even for relatively simple widgets. Is there a good reason to deviate from the default 5s timeout Qt has? Maybe we should set it to `5000` instead as well?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/296", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/296/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/296/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/296/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/296", "id": 598383353, "node_id": "MDU6SXNzdWU1OTgzODMzNTM=", "number": 296, "title": "Qt5 application built on C++", "user": {"login": "cnachiappan", "id": 54961143, "node_id": "MDQ6VXNlcjU0OTYxMTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/54961143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cnachiappan", "html_url": "https://github.com/cnachiappan", "followers_url": "https://api.github.com/users/cnachiappan/followers", "following_url": "https://api.github.com/users/cnachiappan/following{/other_user}", "gists_url": "https://api.github.com/users/cnachiappan/gists{/gist_id}", "starred_url": "https://api.github.com/users/cnachiappan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cnachiappan/subscriptions", "organizations_url": "https://api.github.com/users/cnachiappan/orgs", "repos_url": "https://api.github.com/users/cnachiappan/repos", "events_url": "https://api.github.com/users/cnachiappan/events{/privacy}", "received_events_url": "https://api.github.com/users/cnachiappan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-12T01:00:59Z", "updated_at": "2020-04-21T07:10:02Z", "closed_at": "2020-04-21T07:10:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for developing this super useful plugin!!\r\n\r\nFrom the documentation I understand it supports PyQt5 and PySide2 applications\r\nJust curious to know if it will support native Qt5 applications developed in C++", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/293", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/293/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/293/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/293/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/293", "id": 596492389, "node_id": "MDU6SXNzdWU1OTY0OTIzODk=", "number": 293, "title": "qtbot with PySide2 fails in github actions", "user": {"login": "jgirardet", "id": 30120358, "node_id": "MDQ6VXNlcjMwMTIwMzU4", "avatar_url": "https://avatars3.githubusercontent.com/u/30120358?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgirardet", "html_url": "https://github.com/jgirardet", "followers_url": "https://api.github.com/users/jgirardet/followers", "following_url": "https://api.github.com/users/jgirardet/following{/other_user}", "gists_url": "https://api.github.com/users/jgirardet/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgirardet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgirardet/subscriptions", "organizations_url": "https://api.github.com/users/jgirardet/orgs", "repos_url": "https://api.github.com/users/jgirardet/repos", "events_url": "https://api.github.com/users/jgirardet/events{/privacy}", "received_events_url": "https://api.github.com/users/jgirardet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-08T11:01:36Z", "updated_at": "2020-04-09T19:53:00Z", "closed_at": "2020-04-08T11:05:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "hi,\r\nHi the following bug in github actions  CI not locally:\r\n```\r\n2020-04-08T10:54:24.2278599Z ##[group]Run python -m pytest -vvv -s\r\n2020-04-08T10:54:24.2279416Z \u001b[36;1mpython -m pytest -vvv -s\u001b[0m\r\n2020-04-08T10:54:24.2321201Z shell: /bin/bash -e {0}\r\n2020-04-08T10:54:24.2321307Z env:\r\n2020-04-08T10:54:24.2321402Z   DISPLAY: :99.0\r\n2020-04-08T10:54:24.2321482Z   pythonLocation: /opt/hostedtoolcache/Python/3.7.6/x64\r\n2020-04-08T10:54:24.2321584Z ##[endgroup]\r\n2020-04-08T10:54:24.6769440Z ============================= test session starts ==============================\r\n2020-04-08T10:54:24.6770421Z platform linux -- Python 3.7.6, pytest-5.3.2, py-1.8.1, pluggy-0.13.1 -- /opt/hostedtoolcache/Python/3.7.6/x64/bin/python\r\n2020-04-08T10:54:24.6778989Z cachedir: .pytest_cache\r\n2020-04-08T10:54:24.6779452Z PySide2 5.14.1 -- Qt runtime 5.14.1 -- Qt compiled 5.14.1\r\n2020-04-08T10:54:24.6779578Z rootdir: /home/runner/work/MyCartable/MyCartable\r\n2020-04-08T10:54:24.6779806Z plugins: qt-3.3.0\r\n2020-04-08T10:54:29.2367912Z collecting ... collected 1 item\r\n2020-04-08T10:54:29.2371413Z \r\n2020-04-08T10:54:29.5635621Z Fatal Python error: Aborted\r\n2020-04-08T10:54:29.5636386Z \r\n2020-04-08T10:54:29.5636717Z Current thread 0x00007f29af350680 (most recent call first):\r\n2020-04-08T10:54:29.5637935Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pytestqt/plugin.py\", line 57 in qapp\r\n2020-04-08T10:54:29.5638869Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/fixtures.py\", line 787 in call_fixture_func\r\n2020-04-08T10:54:29.5639674Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/fixtures.py\", line 957 in pytest_fixture_setup\r\n2020-04-08T10:54:29.5640725Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n2020-04-08T10:54:29.5641520Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/manager.py\", line 87 in <lambda>\r\n2020-04-08T10:54:29.5642447Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n2020-04-08T10:54:29.5643218Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n2020-04-08T10:54:29.5644061Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/fixtures.py\", line 908 in execute\r\n2020-04-08T10:54:29.5644857Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/fixtures.py\", line 579 in _compute_fixture_value\r\n2020-04-08T10:54:29.5646315Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/fixtures.py\", line 498 in _get_active_fixturedef\r\n2020-04-08T10:54:29.5647420Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/fixtures.py\", line 482 in getfixturevalue\r\n2020-04-08T10:54:29.5648200Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/fixtures.py\", line 472 in _fillfixtures\r\n2020-04-08T10:54:29.5648954Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/fixtures.py\", line 293 in fillfixtures\r\n2020-04-08T10:54:29.5649714Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/python.py\", line 1439 in setup\r\n2020-04-08T10:54:29.5650562Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/runner.py\", line 364 in prepare\r\n2020-04-08T10:54:29.5651703Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/runner.py\", line 119 in pytest_runtest_setup\r\n2020-04-08T10:54:29.5652460Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n2020-04-08T10:54:29.5653656Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/manager.py\", line 87 in <lambda>\r\n2020-04-08T10:54:29.5654687Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n2020-04-08T10:54:29.5655769Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n2020-04-08T10:54:29.5658033Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/runner.py\", line 207 in <lambda>\r\n2020-04-08T10:54:29.5658900Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/runner.py\", line 234 in from_call\r\n2020-04-08T10:54:29.5659717Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/runner.py\", line 207 in call_runtest_hook\r\n2020-04-08T10:54:29.5660392Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/runner.py\", line 182 in call_and_report\r\n2020-04-08T10:54:29.5661048Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/runner.py\", line 90 in runtestprotocol\r\n2020-04-08T10:54:29.5661714Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/runner.py\", line 81 in pytest_runtest_protocol\r\n2020-04-08T10:54:29.5662367Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n2020-04-08T10:54:29.5663014Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/manager.py\", line 87 in <lambda>\r\n2020-04-08T10:54:29.5663710Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n2020-04-08T10:54:29.5664356Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n2020-04-08T10:54:29.5665159Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/main.py\", line 270 in pytest_runtestloop\r\n2020-04-08T10:54:29.5665796Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n2020-04-08T10:54:29.5666588Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/manager.py\", line 87 in <lambda>\r\n2020-04-08T10:54:29.5673468Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n2020-04-08T10:54:29.5674585Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n2020-04-08T10:54:29.5675579Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/main.py\", line 246 in _main\r\n2020-04-08T10:54:29.5676250Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/main.py\", line 196 in wrap_session\r\n2020-04-08T10:54:29.5676742Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/main.py\", line 239 in pytest_cmdline_main\r\n2020-04-08T10:54:29.5677212Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n2020-04-08T10:54:29.5677669Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/manager.py\", line 87 in <lambda>\r\n2020-04-08T10:54:29.5678125Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n2020-04-08T10:54:29.5678599Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n2020-04-08T10:54:29.5679069Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/_pytest/config/__init__.py\", line 92 in main\r\n2020-04-08T10:54:29.5679525Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/pytest/__main__.py\", line 7 in <module>\r\n2020-04-08T10:54:29.5679746Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/runpy.py\", line 85 in _run_code\r\n2020-04-08T10:54:29.5679971Z   File \"/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/runpy.py\", line 193 in _run_module_as_main\r\n2020-04-08T10:54:39.0807343Z /home/runner/work/_temp/9af4350e-c569-4f21-afd2-8566d9a0c474.sh: line 1:  2584 Aborted                 (core dumped) python -m pytest -vvv -s\r\n2020-04-08T10:54:39.0807950Z tests/test_main.py::test_un \r\n2020-04-08T10:54:39.0813192Z ##[error]Process completed with exit code 134.\r\n2020-04-08T10:54:39.0827961Z Cleaning up orphan processes\r\n2020-04-08T10:54:39.1122098Z Terminate orphan process: pid (2582) (Xvfb)\r\n```\r\n\r\nthe only test is  (no import in file):\r\n```\r\ndef test_un(qtbot):\r\n    assert True\r\n\r\n```\r\nconftest file empty.\r\n\r\nNot sure if it could be related to #202 or #206\r\n\r\nthanks for help", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/292", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/292/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/292/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/292/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/292", "id": 592059790, "node_id": "MDU6SXNzdWU1OTIwNTk3OTA=", "number": 292, "title": "Segmentation Fault - wait_signal.wait & _WaitWidgetContextManager.__exit__", "user": {"login": "hhslepicka", "id": 8185425, "node_id": "MDQ6VXNlcjgxODU0MjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/8185425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hhslepicka", "html_url": "https://github.com/hhslepicka", "followers_url": "https://api.github.com/users/hhslepicka/followers", "following_url": "https://api.github.com/users/hhslepicka/following{/other_user}", "gists_url": "https://api.github.com/users/hhslepicka/gists{/gist_id}", "starred_url": "https://api.github.com/users/hhslepicka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hhslepicka/subscriptions", "organizations_url": "https://api.github.com/users/hhslepicka/orgs", "repos_url": "https://api.github.com/users/hhslepicka/repos", "events_url": "https://api.github.com/users/hhslepicka/events{/privacy}", "received_events_url": "https://api.github.com/users/hhslepicka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-01T16:50:56Z", "updated_at": "2020-05-08T22:17:20Z", "closed_at": "2020-05-08T22:17:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nWith python 3.8 I am getting a segmentation fault at some wait functions when using macOS and WIndows. I could not reproduce it with Linux.\r\nWith Python 3.7 and 2.7 everything works fine for all OS flavors.\r\n\r\n## Versions:\r\nOS: macOS 10.14.6\r\nQt: 5.12.5 (conda-forge)\r\nPyQt: 5.12.3 (conda-forge)\r\npytest-qt: master\r\npytest: 5.4.1 (conda-forge)\r\n\r\n## Stacktrace - wait_signal.wait\r\nFor this particular test I am using `qtbot.waitSignal`.\r\n\r\n```\r\nFatal Python error: Segmentation fault\r\n\r\nCurrent thread 0x00000001098155c0 (most recent call first):\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pytestqt/wait_signal.py\", line 51 in wait\r\n  File \"/Users/slepicka/sandbox/git-slaclab/pydm-git/pydm/tests/widgets/test_rules.py\", line 97 in test_rules_full\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/_pytest/python.py\", line 184 in pytest_pyfunc_call\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/_pytest/python.py\", line 1479 in runtest\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/_pytest/runner.py\", line 135 in pytest_runtest_call\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/_pytest/runner.py\", line 217 in <lambda>\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/_pytest/runner.py\", line 244 in from_call\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/_pytest/runner.py\", line 216 in call_runtest_hook\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/_pytest/runner.py\", line 186 in call_and_report\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/_pytest/runner.py\", line 100 in runtestprotocol\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/_pytest/runner.py\", line 85 in pytest_runtest_protocol\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/_pytest/main.py\", line 272 in pytest_runtestloop\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/_pytest/main.py\", line 247 in _main\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/_pytest/main.py\", line 191 in wrap_session\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/_pytest/main.py\", line 240 in pytest_cmdline_main\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/Users/slepicka/mc/envs/py38/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 124 in main\r\n  File \"run_tests.py\", line 21 in <module>\r\nSegmentation fault: 11\r\n```\r\n\r\n## Stacktrace.- _WaitWidgetContextManager.__exit__\r\n\r\nIn this case my test was using `qtbot.waitExposed`.\r\n\r\n```\r\nCurrent thread 0x000000010f0e35c0 (most recent call first):\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pytestqt/qtbot.py\", line 723 in __exit__\r\n  File \"/Users/runner/runners/2.165.2/work/1/s/pydm/tests/widgets/test_drawing.py\", line 508 in test_pydmdrawingline_draw_item\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/_pytest/python.py\", line 184 in pytest_pyfunc_call\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/_pytest/python.py\", line 1479 in runtest\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/_pytest/runner.py\", line 135 in pytest_runtest_call\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/_pytest/runner.py\", line 217 in <lambda>\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/_pytest/runner.py\", line 244 in from_call\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/_pytest/runner.py\", line 216 in call_runtest_hook\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/_pytest/runner.py\", line 186 in call_and_report\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/_pytest/runner.py\", line 100 in runtestprotocol\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/_pytest/runner.py\", line 85 in pytest_runtest_protocol\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/_pytest/main.py\", line 272 in pytest_runtestloop\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/_pytest/main.py\", line 247 in _main\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/_pytest/main.py\", line 191 in wrap_session\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/_pytest/main.py\", line 240 in pytest_cmdline_main\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/usr/local/miniconda/envs/test-environment-3.8/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 124 in main\r\n  File \"run_tests.py\", line 21 in <module>\r\n/Users/runner/runners/2.165.2/work/_temp/7e5f89e4-e30b-455e-83d2-e2695b1f105e.sh: line 2:   955 Segmentation fault: 11 \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/291", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/291/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/291/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/291/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/291", "id": 590835975, "node_id": "MDU6SXNzdWU1OTA4MzU5NzU=", "number": 291, "title": "sockets automatically terminated while running with pytest-qt", "user": {"login": "danielhrisca", "id": 20952040, "node_id": "MDQ6VXNlcjIwOTUyMDQw", "avatar_url": "https://avatars1.githubusercontent.com/u/20952040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhrisca", "html_url": "https://github.com/danielhrisca", "followers_url": "https://api.github.com/users/danielhrisca/followers", "following_url": "https://api.github.com/users/danielhrisca/following{/other_user}", "gists_url": "https://api.github.com/users/danielhrisca/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhrisca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhrisca/subscriptions", "organizations_url": "https://api.github.com/users/danielhrisca/orgs", "repos_url": "https://api.github.com/users/danielhrisca/repos", "events_url": "https://api.github.com/users/danielhrisca/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhrisca/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-31T06:35:02Z", "updated_at": "2020-04-02T19:13:38Z", "closed_at": "2020-04-02T19:13:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to test a PyQt application using pytest and pytest-qt. The setup is this:\r\n\r\n1. the SERVER (the tested application) is running a TCP server for remote control. The MainWindow is handed to the qtbot\r\n2. a CLIENT driver class sends commands to the SERVER\r\n\r\nThe CLIENT successfully connects to the TCP server. The CLIENT then sends the first message to the SERVER. When the SERVER tries to send back the reply, the sockets on both ends are terminated by the operating system.\r\n\r\nThere is no problem running the SERVER and CLIENT as regular python scripts, the problem only appears running with pytest.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/290", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/290/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/290/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/290/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/290", "id": 583897046, "node_id": "MDU6SXNzdWU1ODM4OTcwNDY=", "number": 290, "title": "Add type checking for qtbot.addWidget()?", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898025, "node_id": "MDU6TGFiZWwyOTg5ODAyNQ==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/enhancement%20:cool:", "name": "enhancement :cool:", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-18T17:39:58Z", "updated_at": "2020-04-09T19:50:50Z", "closed_at": "2020-04-09T19:50:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In a training I was giving, someone accidentally passed a model rather than the corresponding view into `qtbot.addWidget()`. When doing this together with, the following happens:\r\n\r\n```\r\n    def test_view(qtbot, df_view, df_model, qtmodeltester):\r\n        qtmodeltester.check(df_model)\r\n        index = df_model.index(2, 0)\r\n        df_view.selectionModel().setCurrentIndex(index, QtCore.QItemSelectionModel.Current)\r\n>       qtbot.stop()\r\n \r\ntest_pandas_model.py:36:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n \r\nself = <pytestqt.qtbot.QtBot object at 0x0000000003EA40A0>\r\n \r\n    def stopForInteraction(self):\r\n        \"\"\"\r\n        Stops the current test flow, letting the user interact with any visible widget.\r\n   \r\n        This is mainly useful so that you can verify the current state of the program while writing\r\n        tests.\r\n   \r\n        Closing the windows should resume the test run, with ``qtbot`` attempting to restore visibility\r\n        of the widgets as they were before this call.\r\n   \r\n        .. note:: As a convenience, it is also aliased as `stop`.\r\n        \"\"\"\r\n        widget_and_visibility = []\r\n        for weak_widget in _iter_widgets(self._request.node):\r\n            widget = weak_widget()\r\n            if widget is not None:\r\n>               widget_and_visibility.append((widget, widget.isVisible()))\r\nE               AttributeError: 'DataFrameModel' object has no attribute 'isVisible'\r\n \r\n..\\..\\AppData\\Local\\Continuum\\anaconda3\\envs\\pyside\\lib\\site-packages\\pytestqt\\qtbot.py:273: AttributeError\r\nE\r\ntest_pandas_model.py:31 (test_view)\r\nitem = <Function test_view>\r\n \r\n    @pytest.mark.hookwrapper\r\n    @pytest.mark.trylast\r\n    def pytest_runtest_teardown(item):\r\n        \"\"\"\r\n        Hook called after each test tear down, to process any pending events and\r\n        avoiding leaking events to the next test. Also, if exceptions have\r\n        been captured during fixtures teardown, fail the test.\r\n        \"\"\"\r\n        _process_events()\r\n>       _close_widgets(item)\r\n \r\n..\\..\\AppData\\Local\\Continuum\\anaconda3\\envs\\pyside\\lib\\site-packages\\pytestqt\\plugin.py:181:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n \r\nitem = <Function test_view>\r\n \r\n    def _close_widgets(item):\r\n        \"\"\"\r\n        Close all widgets registered in the pytest item.\r\n        \"\"\"\r\n        widgets = getattr(item, \"qt_widgets\", None)\r\n        if widgets:\r\n            for w, before_close_func in item.qt_widgets:\r\n                w = w()\r\n                if w is not None:\r\n                    if before_close_func is not None:\r\n                        before_close_func(w)\r\n>                   w.close()\r\nE                   AttributeError: 'DataFrameModel' object has no attribute 'close'\r\n \r\n..\\..\\AppData\\Local\\Continuum\\anaconda3\\envs\\pyside\\lib\\site-packages\\pytestqt\\qtbot.py:682: AttributeError\r\n                                                  [100%]\r\n \r\n```\r\n\r\nThat's a lot of output (actually [even more in reality](https://paste.the-compiler.org/view/6b29f2f4)), and it's difficult to see what's going on there. Thus, I was wondering: Should we maybe have an `isinstance(..., QWidget)` check and bail out early if `addWidget()` is used incorrectly? What do you think?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/287", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/287/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/287/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/287/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/287", "id": 566775425, "node_id": "MDU6SXNzdWU1NjY3NzU0MjU=", "number": 287, "title": "Segmentation faults on macOS when using --forked", "user": {"login": "MShekow", "id": 10126618, "node_id": "MDQ6VXNlcjEwMTI2NjE4", "avatar_url": "https://avatars2.githubusercontent.com/u/10126618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MShekow", "html_url": "https://github.com/MShekow", "followers_url": "https://api.github.com/users/MShekow/followers", "following_url": "https://api.github.com/users/MShekow/following{/other_user}", "gists_url": "https://api.github.com/users/MShekow/gists{/gist_id}", "starred_url": "https://api.github.com/users/MShekow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MShekow/subscriptions", "organizations_url": "https://api.github.com/users/MShekow/orgs", "repos_url": "https://api.github.com/users/MShekow/repos", "events_url": "https://api.github.com/users/MShekow/events{/privacy}", "received_events_url": "https://api.github.com/users/MShekow/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898027, "node_id": "MDU6TGFiZWwyOTg5ODAyNw==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/question%20:question:", "name": "question :question:", "color": "cc317c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-18T09:57:14Z", "updated_at": "2020-03-12T13:10:38Z", "closed_at": "2020-03-09T20:19:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "For the trivial test case:\r\n```\r\nfrom pytestqt.qtbot import QtBot\r\nclass TestDummy:\r\n    def test_qt(self, qtbot: QtBot):\r\n        pass\r\n```\r\nyou will get a stack trace like this one:\r\n```\r\nLaunching pytest with arguments --forked dummy_test.py::TestDummy in /Users/myusers/myproject/sources/tests\r\n\r\n============================= test session starts ==============================\r\nplatform darwin -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1 -- /Users/myuser/myproject/venv/bin/python\r\ncachedir: .pytest_cache\r\nPyQt5 5.13.2 -- Qt runtime 5.13.2 -- Qt compiled 5.13.2\r\nrootdir: /Users/myuser/myproject/sources/tests, inifile: pytest.ini\r\nplugins: celery-4.4.0, mock-2.0.0, xdist-1.31.0, flaky-3.6.1, forked-1.1.3, qt-3.3.0\r\ncollecting ... collected 1 item\r\nFatal Python error: Segmentation fault\r\n\r\nCurrent thread 0x00000001169d6dc0 (most recent call first):\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pytestqt/plugin.py\", line 57 in qapp\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/fixtures.py\", line 788 in call_fixture_func\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/fixtures.py\", line 958 in pytest_fixture_setup\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/manager.py\", line 87 in <lambda>\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/fixtures.py\", line 909 in execute\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/fixtures.py\", line 580 in _compute_fixture_value\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/fixtures.py\", line 499 in _get_active_fixturedef\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/fixtures.py\", line 483 in getfixturevalue\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/fixtures.py\", line 473 in _fillfixtures\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/fixtures.py\", line 294 in fillfixtures\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/python.py\", line 1449 in setup\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/runner.py\", line 370 in prepare\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/runner.py\", line 122 in pytest_runtest_setup\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/manager.py\", line 87 in <lambda>\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/runner.py\", line 210 in <lambda>\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/runner.py\", line 237 in from_call\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/runner.py\", line 210 in call_runtest_hook\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/runner.py\", line 185 in call_and_report\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/runner.py\", line 93 in runtestprotocol\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pytest_forked/__init__.py\", line 57 in runforked\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/py/_process/forkedfunc.py\", line 65 in _child\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/py/_process/forkedfunc.py\", line 50 in __init__\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pytest_forked/__init__.py\", line 62 in forked_run_report\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pytest_forked/__init__.py\", line 42 in pytest_runtest_protocol\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/manager.py\", line 87 in <lambda>\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/main.py\", line 271 in pytest_runtestloop\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/manager.py\", line 87 in <lambda>\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/main.py\", line 247 in _main\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/main.py\", line 197 in wrap_session\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/main.py\", line 240 in pytest_cmdline_main\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/manager.py\", line 87 in <lambda>\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/Users/myuser/myproject/venv/lib/python3.7/site-packages/_pytest/config/__init__.py\", line 93 in main\r\n  File \"/Applications/PyCharm.app/Contents/helpers/pycharm/_jb_pytest_runner.py\", line 42 in <module>\r\n\r\ndummy_test.py::TestDummy::test_qt FAILED                                 [100%]\r\n\r\n=================================== FAILURES ===================================\r\n______________________________ TestDummy.test_qt _______________________________\r\n:-1: running the test CRASHED with signal 11\r\n============================== 1 failed in 0.06s ===============================\r\nThe process has forked and you cannot use this CoreFoundation functionality safely. You MUST exec().\r\nBreak on __THE_PROCESS_HAS_FORKED_AND_YOU_CANNOT_USE_THIS_COREFOUNDATION_FUNCTIONALITY___YOU_MUST_EXEC__() to debug.\r\n\r\nProcess finished with exit code 0\r\n```\r\n\r\nAs I'm forced to use `--forked` (due to weird bugs in the libraries I use, leaking resources), I can basically no longer run my test suites.\r\n\r\nThis happens on macOS 10.15.2.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/286", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/286/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/286/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/286/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/286", "id": 557741825, "node_id": "MDU6SXNzdWU1NTc3NDE4MjU=", "number": 286, "title": "Do clicks on parent widgets get propagated to child widgets?", "user": {"login": "mchlnix", "id": 2623773, "node_id": "MDQ6VXNlcjI2MjM3NzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2623773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mchlnix", "html_url": "https://github.com/mchlnix", "followers_url": "https://api.github.com/users/mchlnix/followers", "following_url": "https://api.github.com/users/mchlnix/following{/other_user}", "gists_url": "https://api.github.com/users/mchlnix/gists{/gist_id}", "starred_url": "https://api.github.com/users/mchlnix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mchlnix/subscriptions", "organizations_url": "https://api.github.com/users/mchlnix/orgs", "repos_url": "https://api.github.com/users/mchlnix/repos", "events_url": "https://api.github.com/users/mchlnix/events{/privacy}", "received_events_url": "https://api.github.com/users/mchlnix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-30T20:43:03Z", "updated_at": "2020-01-30T21:29:15Z", "closed_at": "2020-01-30T21:29:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\n\r\nI have a `QMainWindow`, with a `QScrollArea` and a therein a normal `QWidget`.\r\n\r\nWhen I use `qtbot.mouseClick(main_window, ...)` I do not get a reaction in the child widgets. Is this by design, or am I doing something wrong?\r\n\r\n(Left out the MVCE, as it's more of a concept question, I hope.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/285", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/285/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/285/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/285/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/285", "id": 557738048, "node_id": "MDU6SXNzdWU1NTc3MzgwNDg=", "number": 285, "title": "ReadTheDocs is not up to date", "user": {"login": "mchlnix", "id": 2623773, "node_id": "MDQ6VXNlcjI2MjM3NzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2623773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mchlnix", "html_url": "https://github.com/mchlnix", "followers_url": "https://api.github.com/users/mchlnix/followers", "following_url": "https://api.github.com/users/mchlnix/following{/other_user}", "gists_url": "https://api.github.com/users/mchlnix/gists{/gist_id}", "starred_url": "https://api.github.com/users/mchlnix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mchlnix/subscriptions", "organizations_url": "https://api.github.com/users/mchlnix/orgs", "repos_url": "https://api.github.com/users/mchlnix/repos", "events_url": "https://api.github.com/users/mchlnix/events{/privacy}", "received_events_url": "https://api.github.com/users/mchlnix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-30T20:36:03Z", "updated_at": "2020-01-30T21:24:46Z", "closed_at": "2020-01-30T21:24:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just wanted to update the \"QTest API\" link in the reference section, since it was pointing to a dead link, only to find, that it already is updated in the source code.\r\n\r\nCould it be, that the docs weren't built recently, so that the online version is out of date?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/283", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/283/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/283/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/283/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/283", "id": 549659348, "node_id": "MDU6SXNzdWU1NDk2NTkzNDg=", "number": 283, "title": "Warning \"numpy.ufunc size changed\" when importing scipy.optimize", "user": {"login": "mhantke", "id": 445177, "node_id": "MDQ6VXNlcjQ0NTE3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/445177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mhantke", "html_url": "https://github.com/mhantke", "followers_url": "https://api.github.com/users/mhantke/followers", "following_url": "https://api.github.com/users/mhantke/following{/other_user}", "gists_url": "https://api.github.com/users/mhantke/gists{/gist_id}", "starred_url": "https://api.github.com/users/mhantke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mhantke/subscriptions", "organizations_url": "https://api.github.com/users/mhantke/orgs", "repos_url": "https://api.github.com/users/mhantke/repos", "events_url": "https://api.github.com/users/mhantke/events{/privacy}", "received_events_url": "https://api.github.com/users/mhantke/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898027, "node_id": "MDU6TGFiZWwyOTg5ODAyNw==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/question%20:question:", "name": "question :question:", "color": "cc317c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-14T15:55:33Z", "updated_at": "2020-01-15T11:25:06Z", "closed_at": "2020-01-15T11:25:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "During the import of scipy.optimize in my test I am observing a worrisome warning:\r\n\r\nRuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject\r\n\r\nIf pytest-qt is not installed the warning disappears. Any ideas why this is happening?\r\n\r\n---\r\n\r\nThe test file test_scipy_import.py can be as simple as that:\r\n\r\n```python\r\nimport scipy.optimize\r\n```\r\n\r\nPip freeze:\r\n\r\n```\r\natomicwrites==1.3.0\r\nattrs==19.3.0\r\ncolorama==0.4.3\r\nimportlib-metadata==1.4.0\r\nmore-itertools==8.1.0\r\nnumpy==1.18.1\r\npackaging==20.0\r\npluggy==0.13.1\r\npy==1.8.1\r\npyparsing==2.4.6\r\nPySide2==5.14.0\r\npytest==5.3.2\r\npytest-qt==3.3.0\r\nscipy==1.4.1\r\nshiboken2==5.14.0\r\nsix==1.13.0\r\nwcwidth==0.1.8\r\nzipp==1.0.0\r\n\r\n```\r\n\r\nOutput from: \r\n\r\n```\r\npython -m pytest -W error\r\n=============================================================================== test session starts ===============================================================================\r\nplatform win32 -- Python 3.7.5, pytest-5.3.2, py-1.8.1, pluggy-0.13.1\r\nPySide2 5.14.0 -- Qt runtime 5.14.0 -- Qt compiled 5.14.0\r\nrootdir: .\r\nplugins: qt-3.3.0\r\ncollected 0 items / 1 error\r\n\r\n===================================================================================== ERRORS ======================================================================================\r\n_________________________________________________________________ ERROR collecting testTests/test_scipy_import.py _________________________________________________________________\r\ntest_scipy_import.py:5: in <module>\r\n    import scipy.optimize\r\nenv_empty\\lib\\site-packages\\scipy\\optimize\\__init__.py:390: in <module>\r\n    from ._minimize import *\r\nenv_empty\\lib\\site-packages\\scipy\\optimize\\_minimize.py:26: in <module>\r\n    from ._trustregion_dogleg import _minimize_dogleg\r\nenv_empty\\lib\\site-packages\\scipy\\optimize\\_trustregion_dogleg.py:5: in <module>\r\n    import scipy.linalg\r\nenv_empty\\lib\\site-packages\\scipy\\linalg\\__init__.py:196: in <module>\r\n    from .basic import *\r\nenv_empty\\lib\\site-packages\\scipy\\linalg\\basic.py:17: in <module>\r\n    from ._solve_toeplitz import levinson\r\n__init__.pxd:918: in init scipy.linalg._solve_toeplitz\r\n    ???\r\nE   RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n================================================================================ 1 error in 0.24s =================================================================================\r\n(\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/282", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/282/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/282/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/282/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/282", "id": 540846569, "node_id": "MDU6SXNzdWU1NDA4NDY1Njk=", "number": 282, "title": "Core dump occurs when running tests on Travis CI with xvfb", "user": {"login": "luyuhuang", "id": 10300685, "node_id": "MDQ6VXNlcjEwMzAwNjg1", "avatar_url": "https://avatars3.githubusercontent.com/u/10300685?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luyuhuang", "html_url": "https://github.com/luyuhuang", "followers_url": "https://api.github.com/users/luyuhuang/followers", "following_url": "https://api.github.com/users/luyuhuang/following{/other_user}", "gists_url": "https://api.github.com/users/luyuhuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/luyuhuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luyuhuang/subscriptions", "organizations_url": "https://api.github.com/users/luyuhuang/orgs", "repos_url": "https://api.github.com/users/luyuhuang/repos", "events_url": "https://api.github.com/users/luyuhuang/events{/privacy}", "received_events_url": "https://api.github.com/users/luyuhuang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-20T08:14:41Z", "updated_at": "2019-12-20T12:46:40Z", "closed_at": "2019-12-20T12:42:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi All,\r\n\r\nI'm using pytest-qt on Travis CI, but it aborted while running `pytest`. This is the Travis Job:\r\n\r\nhttps://travis-ci.org/luyuhuang/DWords/jobs/627603386\r\n\r\nAnd This is my test case:\r\n\r\n```py\r\nimport random\r\nfrom DWords import danmuku\r\n\r\ndef test_danmuku(qtbot):\r\n    widget = danmuku.Danmuku(\"apple\", \"\u82f9\u679c\", random.randrange(0, 200))\r\n    qtbot.addWidget(widget)\r\n\r\n    assert widget._word_label.text() == \"apple\"\r\n\r\ndef test_danmuku_with_paraphrase(qtbot):\r\n    widget = danmuku.Danmuku(\"apple\", \"\u82f9\u679c\", random.randrange(0, 200), True)\r\n    qtbot.addWidget(widget)\r\n\r\n    assert widget._word_label.text() == \"apple \u82f9\u679c\"\r\n```\r\n\r\nI also tried running tests using `xvfb-run -a pytest`, but it also failed. See https://travis-ci.org/luyuhuang/DWords/jobs/627597976\r\n\r\nCould you help me resolve this issue? Thank you very much.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/276", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/276/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/276/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/276/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/276", "id": 525161788, "node_id": "MDU6SXNzdWU1MjUxNjE3ODg=", "number": 276, "title": "Using QThread causes sefault", "user": {"login": "drone-ah", "id": 2621325, "node_id": "MDQ6VXNlcjI2MjEzMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2621325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drone-ah", "html_url": "https://github.com/drone-ah", "followers_url": "https://api.github.com/users/drone-ah/followers", "following_url": "https://api.github.com/users/drone-ah/following{/other_user}", "gists_url": "https://api.github.com/users/drone-ah/gists{/gist_id}", "starred_url": "https://api.github.com/users/drone-ah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drone-ah/subscriptions", "organizations_url": "https://api.github.com/users/drone-ah/orgs", "repos_url": "https://api.github.com/users/drone-ah/repos", "events_url": "https://api.github.com/users/drone-ah/events{/privacy}", "received_events_url": "https://api.github.com/users/drone-ah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-19T17:41:37Z", "updated_at": "2019-11-19T19:44:48Z", "closed_at": "2019-11-19T18:02:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have just started using pytest-qt and have run across an issue with the use of `QThread`.\r\n\r\nI have been able to isolate it into a simple example:\r\n\r\n```\r\nfrom PySide2.QtCore import QThread\r\n\r\n\r\ndef test_load(qtbot):\r\n    thread = QThread()\r\n    thread.start()\r\n\r\n```\r\n\r\nRunning on Linux:\r\n```\r\n=============================================================================================== test session starts ===============================================================================================\r\nplatform linux -- Python 3.7.3rc1, pytest-4.6.3, py-1.8.0, pluggy-0.12.0\r\nPySide2 5.13.0 -- Qt runtime 5.13.0 -- Qt compiled 5.13.0\r\nrootdir: /mnt/e/Projects/Desktop/YerToob.py\r\nplugins: cov-2.7.1, mock-1.10.4, qt-3.2.2, testmon-0.9.16\r\ncollected 1 item                                                                                                                                                                                                  \r\n\r\n../../tests/ui/test_login.py Aborted (core dumped)\r\n```\r\n\r\nRunning on Windows (through pycharm)\r\n```\r\naunching pytest with arguments E:/Projects/Desktop/YerToob.py/tests/ui/test_login.py in E:\\Projects\\Desktop\\YerToob.py\\tests\\ui\r\n\r\n============================= test session starts =============================\r\nplatform win32 -- Python 3.6.5, pytest-4.6.3, py-1.8.0, pluggy-0.12.0 -- E:\\Projects\\Desktop\\YerToob.py\\venv\\Scripts\\python.exe\r\ncachedir: .pytest_cache\r\nPySide2 5.13.0 -- Qt runtime 5.13.0 -- Qt compiled 5.13.0\r\nrootdir: E:\\Projects\\Desktop\\YerToob.py\r\nplugins: cov-2.7.1, mock-1.10.4, qt-3.2.2, testmon-0.9.16\r\ncollecting ... collected 1 item\r\n\r\ntest_login.py::test_load \r\nProcess finished with exit code -1073740791 (0xC0000409)\r\n```\r\n\r\nAny ideas on what might be causing this? Googling did not help me much though it does suggest the loading of multiple app instances as a possibility.\r\n\r\nAny help in getting to the bottom of this would be appreciated.\r\n\r\nThank you :D ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/275", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/275/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/275/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/275/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/275", "id": 525013878, "node_id": "MDU6SXNzdWU1MjUwMTM4Nzg=", "number": 275, "title": "Can some one explain how to use or init qtbot with some example", "user": {"login": "santoshreddy254", "id": 24219280, "node_id": "MDQ6VXNlcjI0MjE5Mjgw", "avatar_url": "https://avatars0.githubusercontent.com/u/24219280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/santoshreddy254", "html_url": "https://github.com/santoshreddy254", "followers_url": "https://api.github.com/users/santoshreddy254/followers", "following_url": "https://api.github.com/users/santoshreddy254/following{/other_user}", "gists_url": "https://api.github.com/users/santoshreddy254/gists{/gist_id}", "starred_url": "https://api.github.com/users/santoshreddy254/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/santoshreddy254/subscriptions", "organizations_url": "https://api.github.com/users/santoshreddy254/orgs", "repos_url": "https://api.github.com/users/santoshreddy254/repos", "events_url": "https://api.github.com/users/santoshreddy254/events{/privacy}", "received_events_url": "https://api.github.com/users/santoshreddy254/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-19T13:35:59Z", "updated_at": "2019-11-19T13:43:13Z", "closed_at": "2019-11-19T13:43:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/272", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/272/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/272/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/272/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/272", "id": 487950619, "node_id": "MDU6SXNzdWU0ODc5NTA2MTk=", "number": 272, "title": "Wrong import in docs?", "user": {"login": "danielmcquillen", "id": 119496, "node_id": "MDQ6VXNlcjExOTQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/119496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielmcquillen", "html_url": "https://github.com/danielmcquillen", "followers_url": "https://api.github.com/users/danielmcquillen/followers", "following_url": "https://api.github.com/users/danielmcquillen/following{/other_user}", "gists_url": "https://api.github.com/users/danielmcquillen/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielmcquillen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielmcquillen/subscriptions", "organizations_url": "https://api.github.com/users/danielmcquillen/orgs", "repos_url": "https://api.github.com/users/danielmcquillen/repos", "events_url": "https://api.github.com/users/danielmcquillen/events{/privacy}", "received_events_url": "https://api.github.com/users/danielmcquillen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-02T00:46:30Z", "updated_at": "2019-09-03T18:46:03Z", "closed_at": "2019-09-03T18:45:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just getting started with this library (thanks).\r\n\r\nThe \"Qt Logging Capture\" section in the docs has this:\r\n\r\n```\r\nfrom pytestqt.qt_compat import qWarning\r\n\r\n\r\ndef do_something():\r\n    qWarning(\"this is a WARNING message\")\r\n\r\n\r\ndef test_foo():\r\n    do_something()\r\n    assert 0\r\n```\r\n\r\n...but that import will fail. Shouldn't it be this?...\r\n\r\n\r\n```\r\nfrom pytestqt.qt_compat import qt_api\r\n\r\ndef do_something():\r\n    qt_api.qWarning(\"this is a WARNING message\")\r\n\r\n\r\ndef test_foo():\r\n    do_something()\r\n    assert 0\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/271", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/271/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/271/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/271/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/271", "id": 482000443, "node_id": "MDU6SXNzdWU0ODIwMDA0NDM=", "number": 271, "title": "Is it possible to use qbot outside of pytest?", "user": {"login": "jfemiani", "id": 2800407, "node_id": "MDQ6VXNlcjI4MDA0MDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2800407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfemiani", "html_url": "https://github.com/jfemiani", "followers_url": "https://api.github.com/users/jfemiani/followers", "following_url": "https://api.github.com/users/jfemiani/following{/other_user}", "gists_url": "https://api.github.com/users/jfemiani/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfemiani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfemiani/subscriptions", "organizations_url": "https://api.github.com/users/jfemiani/orgs", "repos_url": "https://api.github.com/users/jfemiani/repos", "events_url": "https://api.github.com/users/jfemiani/events{/privacy}", "received_events_url": "https://api.github.com/users/jfemiani/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898027, "node_id": "MDU6TGFiZWwyOTg5ODAyNw==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/question%20:question:", "name": "question :question:", "color": "cc317c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-18T14:29:15Z", "updated_at": "2019-08-19T13:02:01Z", "closed_at": "2019-08-19T13:01:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a question. \r\nI want to work out how to test the UI by interactively controlling it using qbot in a terminal. \r\nThat is, I want to type code using qbot, see the app respond, and decide what to type next. In this way I think I can more easily create the code for test cases.  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/269", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/269/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/269/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/269/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/269", "id": 473590570, "node_id": "MDU6SXNzdWU0NzM1OTA1NzA=", "number": 269, "title": "[Question] `customContextMenuRequested` signal  not emit when RightButton click", "user": {"login": "625781186", "id": 30521429, "node_id": "MDQ6VXNlcjMwNTIxNDI5", "avatar_url": "https://avatars1.githubusercontent.com/u/30521429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/625781186", "html_url": "https://github.com/625781186", "followers_url": "https://api.github.com/users/625781186/followers", "following_url": "https://api.github.com/users/625781186/following{/other_user}", "gists_url": "https://api.github.com/users/625781186/gists{/gist_id}", "starred_url": "https://api.github.com/users/625781186/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/625781186/subscriptions", "organizations_url": "https://api.github.com/users/625781186/orgs", "repos_url": "https://api.github.com/users/625781186/repos", "events_url": "https://api.github.com/users/625781186/events{/privacy}", "received_events_url": "https://api.github.com/users/625781186/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-27T02:48:47Z", "updated_at": "2019-07-27T12:52:24Z", "closed_at": "2019-07-27T12:52:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I manual RightButton click view , this signal can emit.\r\nbut use mouseClick can not emit.\r\nI'm not sure that's qt's problem.\r\n\r\n![image](https://user-images.githubusercontent.com/30521429/61992257-5d611980-b08e-11e9-97d4-9d94ba8abddf.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/268", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/268/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/268/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/268/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/268", "id": 472690432, "node_id": "MDU6SXNzdWU0NzI2OTA0MzI=", "number": 268, "title": "Have a complete example to quick started?", "user": {"login": "625781186", "id": 30521429, "node_id": "MDQ6VXNlcjMwNTIxNDI5", "avatar_url": "https://avatars1.githubusercontent.com/u/30521429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/625781186", "html_url": "https://github.com/625781186", "followers_url": "https://api.github.com/users/625781186/followers", "following_url": "https://api.github.com/users/625781186/following{/other_user}", "gists_url": "https://api.github.com/users/625781186/gists{/gist_id}", "starred_url": "https://api.github.com/users/625781186/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/625781186/subscriptions", "organizations_url": "https://api.github.com/users/625781186/orgs", "repos_url": "https://api.github.com/users/625781186/repos", "events_url": "https://api.github.com/users/625781186/events{/privacy}", "received_events_url": "https://api.github.com/users/625781186/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-25T06:35:58Z", "updated_at": "2019-07-25T09:22:53Z", "closed_at": "2019-07-25T09:22:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "can push doc's [Tutorial](https://pytest-qt.readthedocs.io/en/latest/tutorial.html) to github repo? \r\n\r\nI think it's too fragmented to affect my reading.\r\n\r\nIt's best to have a working example.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/266", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/266/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/266/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/266/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/266", "id": 465929607, "node_id": "MDU6SXNzdWU0NjU5Mjk2MDc=", "number": 266, "title": "Pytest-qt on travis", "user": {"login": "Czaki", "id": 3826210, "node_id": "MDQ6VXNlcjM4MjYyMTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/3826210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Czaki", "html_url": "https://github.com/Czaki", "followers_url": "https://api.github.com/users/Czaki/followers", "following_url": "https://api.github.com/users/Czaki/following{/other_user}", "gists_url": "https://api.github.com/users/Czaki/gists{/gist_id}", "starred_url": "https://api.github.com/users/Czaki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Czaki/subscriptions", "organizations_url": "https://api.github.com/users/Czaki/orgs", "repos_url": "https://api.github.com/users/Czaki/repos", "events_url": "https://api.github.com/users/Czaki/events{/privacy}", "received_events_url": "https://api.github.com/users/Czaki/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1033747530, "node_id": "MDU6TGFiZWwxMDMzNzQ3NTMw", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/docs%20:book:", "name": "docs :book:", "color": "f9cb4a", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-09T18:42:31Z", "updated_at": "2020-05-08T14:50:37Z", "closed_at": "2020-05-08T14:50:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Add \r\n```\r\nbefore_install:\r\n        - sudo apt-get install -y libdbus-1-3 libxkbcommon-x11-0\r\n```\r\nto .travis.yml allows to run qt interface test on travis (xenial) without miniconda. \r\nMaybe add this to documentation? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/265", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/265/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/265/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/265/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/265", "id": 461426694, "node_id": "MDU6SXNzdWU0NjE0MjY2OTQ=", "number": 265, "title": "Is there a problem when PyQt5 is installed in .eggs instead of site-packages?", "user": {"login": "RichardFetzel", "id": 52278583, "node_id": "MDQ6VXNlcjUyMjc4NTgz", "avatar_url": "https://avatars2.githubusercontent.com/u/52278583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RichardFetzel", "html_url": "https://github.com/RichardFetzel", "followers_url": "https://api.github.com/users/RichardFetzel/followers", "following_url": "https://api.github.com/users/RichardFetzel/following{/other_user}", "gists_url": "https://api.github.com/users/RichardFetzel/gists{/gist_id}", "starred_url": "https://api.github.com/users/RichardFetzel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RichardFetzel/subscriptions", "organizations_url": "https://api.github.com/users/RichardFetzel/orgs", "repos_url": "https://api.github.com/users/RichardFetzel/repos", "events_url": "https://api.github.com/users/RichardFetzel/events{/privacy}", "received_events_url": "https://api.github.com/users/RichardFetzel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898027, "node_id": "MDU6TGFiZWwyOTg5ODAyNw==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/question%20:question:", "name": "question :question:", "color": "cc317c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-06-27T09:41:45Z", "updated_at": "2019-06-28T12:19:30Z", "closed_at": "2019-06-28T11:41:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using setup.cfg and the install_requires variable to manage my project dependencies. When I run \"python setup.py test\" in my project, the dependencies are downloaded and installed to the \".eggs\" folder in my project. When the tests are executed pytest-qt does not find PyQt5 in the .eggs folder (all the other dependencies are found). \r\nIf I install PyQt5 using pip, everything works fine. PyQt5 is then in the site-packages folder of my virtualenv.\r\nI have this problem on Windows and Linux using python 3.6.7 and 3.5.2\r\n\r\nError message:\r\nRuntimeError: pytest-qt requires either PySide, PySide2, PyQt4 or PyQt5 to be installed\r\n  PyQt4.QtCore: No module named 'PyQt4'\r\n  PyQt5.QtCore: No module named 'PyQt5.sip'\r\n  PySide.QtCore: No module named 'PySide'\r\n  PySide2.QtCore: No module named 'PySide2'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/262", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/262/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/262/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/262/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/262", "id": 450528040, "node_id": "MDU6SXNzdWU0NTA1MjgwNDA=", "number": 262, "title": "How i can test code with QMessageBox?", "user": {"login": "theperelomov", "id": 37098738, "node_id": "MDQ6VXNlcjM3MDk4NzM4", "avatar_url": "https://avatars0.githubusercontent.com/u/37098738?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theperelomov", "html_url": "https://github.com/theperelomov", "followers_url": "https://api.github.com/users/theperelomov/followers", "following_url": "https://api.github.com/users/theperelomov/following{/other_user}", "gists_url": "https://api.github.com/users/theperelomov/gists{/gist_id}", "starred_url": "https://api.github.com/users/theperelomov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theperelomov/subscriptions", "organizations_url": "https://api.github.com/users/theperelomov/orgs", "repos_url": "https://api.github.com/users/theperelomov/repos", "events_url": "https://api.github.com/users/theperelomov/events{/privacy}", "received_events_url": "https://api.github.com/users/theperelomov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-30T22:07:19Z", "updated_at": "2019-05-31T06:39:02Z", "closed_at": "2019-05-31T06:39:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry if something is wrong, I just started to learn automatic testing, and I'm sorry, I'm not English speaking.\r\nHere is my code:\r\n```\r\ndef button_start_clicked(self):\r\n    try:\r\n        vertices_count = int(self.line_edit_count_vertices.text())\r\n        if vertices_count < 5:\r\n            raise ValueError\r\n    except ValueError:\r\n        QMessageBox.warning(self, \"header\", \"text\", QMessageBox.Close, QMessageBox.Close)\r\n```\r\nThe problem is that the QMessageBox does not close. \r\nPlease explain how to test this code correctly.\r\n\r\nHere is my simple test\r\n```\r\n@pytest.mark.parametrize(\"value\", [4, 5, \"text\"])\r\ndef test_button_start_clicked(value):\r\n    window = Window()\r\n    window.line_edit_count_vertices.setText(str(value))\r\n    window.button_start_clicked()\r\n```\r\nUPD after 30 minutes of thinking: \r\nhere is my simple solution, but I think that it is not perfect\r\n```\r\napplication = QApplication()\r\n    \r\n@pytest.mark.parametrize(\"value\", [4, 5, \"text\"])\r\ndef test_button_start_clicked(self, value):\r\n    def close_window():\r\n        sleep(0.5)\r\n        if type(application.activeWindow()) is QMessageBox:\r\n            application.activeWindow().accept()\r\n    window = Window()\r\n    window.line_edit_count_vertices.setText(str(value))\r\n    ThreadPoolExecutor().submit(close_window)\r\n    window.button_start_clicked()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/260", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/260/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/260/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/260/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/260", "id": 440835531, "node_id": "MDU6SXNzdWU0NDA4MzU1MzE=", "number": 260, "title": "Unable to test drag and drop", "user": {"login": "90ender", "id": 4604387, "node_id": "MDQ6VXNlcjQ2MDQzODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4604387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/90ender", "html_url": "https://github.com/90ender", "followers_url": "https://api.github.com/users/90ender/followers", "following_url": "https://api.github.com/users/90ender/following{/other_user}", "gists_url": "https://api.github.com/users/90ender/gists{/gist_id}", "starred_url": "https://api.github.com/users/90ender/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/90ender/subscriptions", "organizations_url": "https://api.github.com/users/90ender/orgs", "repos_url": "https://api.github.com/users/90ender/repos", "events_url": "https://api.github.com/users/90ender/events{/privacy}", "received_events_url": "https://api.github.com/users/90ender/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898027, "node_id": "MDU6TGFiZWwyOTg5ODAyNw==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/question%20:question:", "name": "question :question:", "color": "cc317c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-06T18:50:37Z", "updated_at": "2019-05-07T15:44:46Z", "closed_at": "2019-05-07T15:44:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have noticed that using qtbot mouse signals fails to trigger drag events. While mouse press and release are detected, mouse move doesn't trigger the drag action. Here is my example code.\r\n\r\nNote: I am using a qt compatibility module, so you will need to fix the qt imports at the top to match your setup.\r\n\r\n[https://pastebin.com/tphMypVF](url)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/259", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/259/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/259/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/259/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/259", "id": 436598077, "node_id": "MDU6SXNzdWU0MzY1OTgwNzc=", "number": 259, "title": "Simple test fails on Azure Pipelines (but passes locally)", "user": {"login": "cbrnr", "id": 4377312, "node_id": "MDQ6VXNlcjQzNzczMTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/4377312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbrnr", "html_url": "https://github.com/cbrnr", "followers_url": "https://api.github.com/users/cbrnr/followers", "following_url": "https://api.github.com/users/cbrnr/following{/other_user}", "gists_url": "https://api.github.com/users/cbrnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbrnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbrnr/subscriptions", "organizations_url": "https://api.github.com/users/cbrnr/orgs", "repos_url": "https://api.github.com/users/cbrnr/repos", "events_url": "https://api.github.com/users/cbrnr/events{/privacy}", "received_events_url": "https://api.github.com/users/cbrnr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-04-24T09:44:27Z", "updated_at": "2019-05-02T00:33:31Z", "closed_at": "2019-04-25T06:57:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have set up Azure Pipelines to test my PyQt5 app, but the following simple test (which passes locally) fails:\r\n\r\n```\r\nfrom PyQt5.QtWidgets import QWidget\r\n\r\ndef test_pyqt(qtbot):\r\n    widget = QWidget()\r\n```\r\n\r\nThe detailed log can be accessed here (click on the failed task): https://dev.azure.com/clemensbrunner/clemensbrunner/_build/results?buildId=72\r\n\r\nAny ideas what the issue might be?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/258", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/258/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/258/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/258/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/258", "id": 435127929, "node_id": "MDU6SXNzdWU0MzUxMjc5Mjk=", "number": 258, "title": "AttributeError: attribute '__signature__' of 'type' objects is not writable", "user": {"login": "henriquegemignani", "id": 884928, "node_id": "MDQ6VXNlcjg4NDkyOA==", "avatar_url": "https://avatars0.githubusercontent.com/u/884928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henriquegemignani", "html_url": "https://github.com/henriquegemignani", "followers_url": "https://api.github.com/users/henriquegemignani/followers", "following_url": "https://api.github.com/users/henriquegemignani/following{/other_user}", "gists_url": "https://api.github.com/users/henriquegemignani/gists{/gist_id}", "starred_url": "https://api.github.com/users/henriquegemignani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henriquegemignani/subscriptions", "organizations_url": "https://api.github.com/users/henriquegemignani/orgs", "repos_url": "https://api.github.com/users/henriquegemignani/repos", "events_url": "https://api.github.com/users/henriquegemignani/events{/privacy}", "received_events_url": "https://api.github.com/users/henriquegemignani/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-19T10:17:08Z", "updated_at": "2019-05-11T05:39:17Z", "closed_at": "2019-05-08T11:17:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "After upgrading to Python 3.7.3, some of my tests have started to fail.\r\n\r\n```\r\n=============================================================================== FAILURES ===============================================================================\r\n______________________________________________________________ DefaultWidgetSizeTestCase.test_mock_error _______________________________________________________________\r\n\r\nself = <test_case.DefaultWidgetSizeTestCase testMethod=test_mock_error>\r\n\r\n    def test_mock_error(self):\r\n>       with patch(__name__ + \".AClass\", autospec=True):\r\n\r\ntest_case.py:12:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/usr/lib/python3.7/unittest/mock.py:1349: in __enter__\r\n    _name=self.attribute, **kwargs)\r\n/usr/lib/python3.7/unittest/mock.py:2211: in create_autospec\r\n    _check_signature(spec, mock, is_type, instance)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nfunc = <function AClass.__init__ at 0x7f9213b67b70>, mock = <MagicMock name='AClass' spec='AClass' id='140265372704328'>, skipfirst = True, instance = False\r\n\r\n    def _check_signature(func, mock, skipfirst, instance=False):\r\n        sig = _get_signature_object(func, instance, skipfirst)\r\n        if sig is None:\r\n            return\r\n        func, sig = sig\r\n        def checksig(_mock_self, *args, **kwargs):\r\n            sig.bind(*args, **kwargs)\r\n        _copy_func_details(func, checksig)\r\n        type(mock)._mock_check_sig = checksig\r\n>       type(mock).__signature__ = sig\r\nE       AttributeError: attribute '__signature__' of 'type' objects is not writable\r\n\r\n/usr/lib/python3.7/unittest/mock.py:105: AttributeError\r\n```\r\n\r\n\r\nMinimal repo:\r\nInstall packages: PySide2 pytest-qt pytest\r\nTest case:\r\n```python\r\nimport unittest\r\nfrom unittest.mock import patch\r\n\r\n\r\nclass AClass:\r\n    def __init__(self, seed):\r\n        pass\r\n\r\n\r\nclass DefaultWidgetSizeTestCase(unittest.TestCase):\r\n    def test_mock_error(self):\r\n        with patch(__name__ + \".AClass\", autospec=True):\r\n            pass\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    unittest.main()\r\n```\r\n`pip freeze` for the repro case:\r\n```\r\natomicwrites==1.3.0\r\nattrs==19.1.0\r\nmore-itertools==7.0.0\r\npkg-resources==0.0.0\r\npluggy==0.9.0\r\npy==1.8.0\r\nPySide2==5.12.2\r\npytest==4.4.1\r\npytest-qt==3.2.2\r\nshiboken2==5.12.2\r\nsix==1.12.0\r\n```\r\n\r\nOS:\r\n* Windows 10 1809 Pro x64, with Python 3.7.3 x64\r\n* Debian busted/sid running on WSL, with Python 3.7.3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/257", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/257/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/257/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/257/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/257", "id": 426388650, "node_id": "MDU6SXNzdWU0MjYzODg2NTA=", "number": 257, "title": "Is there a way to interact to the pyqt GUI through sources other than qtbot during a test?", "user": {"login": "Nagendraprasath-R", "id": 11360864, "node_id": "MDQ6VXNlcjExMzYwODY0", "avatar_url": "https://avatars0.githubusercontent.com/u/11360864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nagendraprasath-R", "html_url": "https://github.com/Nagendraprasath-R", "followers_url": "https://api.github.com/users/Nagendraprasath-R/followers", "following_url": "https://api.github.com/users/Nagendraprasath-R/following{/other_user}", "gists_url": "https://api.github.com/users/Nagendraprasath-R/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nagendraprasath-R/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nagendraprasath-R/subscriptions", "organizations_url": "https://api.github.com/users/Nagendraprasath-R/orgs", "repos_url": "https://api.github.com/users/Nagendraprasath-R/repos", "events_url": "https://api.github.com/users/Nagendraprasath-R/events{/privacy}", "received_events_url": "https://api.github.com/users/Nagendraprasath-R/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898027, "node_id": "MDU6TGFiZWwyOTg5ODAyNw==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/question%20:question:", "name": "question :question:", "color": "cc317c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-03-28T09:34:32Z", "updated_at": "2020-05-08T15:58:54Z", "closed_at": "2020-05-08T15:58:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any way to interact with the GUI in the middle of a test, through sources other than qtbot like manual mouse/key clicks, windows dll calls or some other UI automation libraries like pywinauto?\r\n\r\n**stopForInteraction** will not work since the GUI has to be closed after interacting from other source and the state of the GUI will be restored before the function call.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/256", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/256/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/256/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/256/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/256", "id": 426379136, "node_id": "MDU6SXNzdWU0MjYzNzkxMzY=", "number": 256, "title": "How to handle modal dialog in pytest-qt without mocking the dialog", "user": {"login": "Nagendraprasath-R", "id": 11360864, "node_id": "MDQ6VXNlcjExMzYwODY0", "avatar_url": "https://avatars0.githubusercontent.com/u/11360864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nagendraprasath-R", "html_url": "https://github.com/Nagendraprasath-R", "followers_url": "https://api.github.com/users/Nagendraprasath-R/followers", "following_url": "https://api.github.com/users/Nagendraprasath-R/following{/other_user}", "gists_url": "https://api.github.com/users/Nagendraprasath-R/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nagendraprasath-R/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nagendraprasath-R/subscriptions", "organizations_url": "https://api.github.com/users/Nagendraprasath-R/orgs", "repos_url": "https://api.github.com/users/Nagendraprasath-R/repos", "events_url": "https://api.github.com/users/Nagendraprasath-R/events{/privacy}", "received_events_url": "https://api.github.com/users/Nagendraprasath-R/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898027, "node_id": "MDU6TGFiZWwyOTg5ODAyNw==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/question%20:question:", "name": "question :question:", "color": "cc317c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-03-28T09:14:37Z", "updated_at": "2019-04-08T06:34:26Z", "closed_at": "2019-03-29T21:02:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using pytest-qt to automate the testing of a PyQt GUI. The dialogs need to be handled as a part of the testing(dialogs should not be mocked).\r\n\r\nFor example, file dialog that comes after a button-click has to be handled. There are 2 problems\r\n\r\n1. After the button click command, the program control goes to the event handler and not to the next line where I can try to send mouseclick/keystrokes to the dialog.\r\n\r\n2. Since the QDialog is not added to the main widget, it is not being listed among the children of the main widget. So how to get the reference of the QDialog?\r\n\r\nI tried multi-threading but that didn't work, later I found that QObjects are not thread-safe.\r\n\r\n```\r\ndef test_filedialog(qtbot, window):\r\n    qtbot.mouseClick(window.browseButton, QtCore.Qt.LeftButton, delay=1)    \r\n    print(\"After mouse click\")    \r\n    #This is where I need to get the reference of QDialog and handle it\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/253", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/253/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/253/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/253", "id": 391985405, "node_id": "MDU6SXNzdWUzOTE5ODU0MDU=", "number": 253, "title": "QTimer taking twice as long with waitSignal", "user": {"login": "Wallboy", "id": 8422894, "node_id": "MDQ6VXNlcjg0MjI4OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/8422894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wallboy", "html_url": "https://github.com/Wallboy", "followers_url": "https://api.github.com/users/Wallboy/followers", "following_url": "https://api.github.com/users/Wallboy/following{/other_user}", "gists_url": "https://api.github.com/users/Wallboy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wallboy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wallboy/subscriptions", "organizations_url": "https://api.github.com/users/Wallboy/orgs", "repos_url": "https://api.github.com/users/Wallboy/repos", "events_url": "https://api.github.com/users/Wallboy/events{/privacy}", "received_events_url": "https://api.github.com/users/Wallboy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-18T03:48:06Z", "updated_at": "2018-12-18T06:51:46Z", "closed_at": "2018-12-18T06:51:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nimport pytest\r\n\r\nfrom PyQt5.QtCore import QTimer\r\n\r\n\r\ndef test_testing123(qtbot):\r\n    timer = QTimer()\r\n    timer.setSingleShot(True)\r\n    with qtbot.waitSignal(timer.timeout, timeout=None):\r\n        timer.start(5000)\r\n    assert False\r\n\r\n\r\npytest.main()\r\n```\r\n\r\nI just started using pytest and pytest-qt and wanted to run a quick test to make sure I'm understanding it's usage. I would expect this test to take 5 seconds, but instead it takes 10 seconds (twice as long as the timer) before the assert is finally reached. \r\n\r\nWhat am I not doing right?\r\n\r\n**EDIT:** The problem only happens when using the `pytest.main()` invocation method. If I run the test from the command line using `pytest test_module.py` the test completes in 5 seconds.\r\n\r\n**EDIT 2:** Putting `pytest.main()` in a `if __name__ == '__main__':` condition and it works fine now.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/251", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/251/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/251/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/251/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/251", "id": 388782410, "node_id": "MDU6SXNzdWUzODg3ODI0MTA=", "number": 251, "title": "[Question] How to use with QML applications?", "user": {"login": "j9ac9k", "id": 646398, "node_id": "MDQ6VXNlcjY0NjM5OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/646398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/j9ac9k", "html_url": "https://github.com/j9ac9k", "followers_url": "https://api.github.com/users/j9ac9k/followers", "following_url": "https://api.github.com/users/j9ac9k/following{/other_user}", "gists_url": "https://api.github.com/users/j9ac9k/gists{/gist_id}", "starred_url": "https://api.github.com/users/j9ac9k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/j9ac9k/subscriptions", "organizations_url": "https://api.github.com/users/j9ac9k/orgs", "repos_url": "https://api.github.com/users/j9ac9k/repos", "events_url": "https://api.github.com/users/j9ac9k/events{/privacy}", "received_events_url": "https://api.github.com/users/j9ac9k/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-07T19:23:18Z", "updated_at": "2018-12-14T23:36:34Z", "closed_at": "2018-12-14T23:29:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I came across #204; but as the issue is closed and more than 6 months old, I figured I would open a new one.\r\n\r\nI'm trying to make use of pytest-qt with a QML application, my understanding is that qtbot needs to add a widget, but from `QQmlApplicationEngine` I can only get a `QWindow`, not a widget.\r\n\r\n```python\r\n@pytest.fixture()\r\ndef window(qtbot):\r\n    engine = QQmlApplicationEngine()\r\n    engine.load(QUrl(\"main.qml\")\r\n    window = engine.rootObjects()[0]  # this gives a QWindow object\r\n    qtbot.add_widget(window)  # probably not what I actually want to do\r\n    window.show()\r\n    return window\r\n\r\ndef test_window_title(window):\r\n    assert window.title() == \"some title\"\r\n```\r\n\r\nRunning this results in:\r\n\r\n```\r\n____________________ ERROR at teardown of test_window_title ____________________\r\nitem = <Function 'test_window_title'>\r\n    @pytest.mark.hookwrapper\r\n    @pytest.mark.trylast\r\n    def pytest_runtest_teardown(item):\r\n        \"\"\"\r\n        Hook called after each test tear down, to process any pending events and\r\n        avoiding leaking events to the next test. Also, if exceptions have\r\n        been captured during fixtures teardown, fail the test.\r\n        \"\"\"\r\n        _process_events()\r\n>       _close_widgets(item)\r\n.venv/lib/python3.7/site-packages/pytestqt/plugin.py:181: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nitem = <Function 'test_window_title'>\r\n    def _close_widgets(item):\r\n        \"\"\"\r\n        Close all widgets registered in the pytest item.\r\n        \"\"\"\r\n        widgets = getattr(item, \"qt_widgets\", None)\r\n        if widgets:\r\n            for w in item.qt_widgets:\r\n                w = w()\r\n                if w is not None:\r\n>                   w.close()\r\nE                   RuntimeError: Internal C++ object (PySide2.QtGui.QWindow) already deleted.\r\n```\r\n\r\nShould I be trying something else?\r\n\r\nBTW thanks for the awesome pytest plugin, it's been very helpful w/ my non-QML based PyQt based applications.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/250", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/250/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/250/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/250/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/250", "id": 377110436, "node_id": "MDU6SXNzdWUzNzcxMTA0MzY=", "number": 250, "title": "Any way to run qtmodeltester on QFileSystemModel?", "user": {"login": "willsALMANJ", "id": 1178780, "node_id": "MDQ6VXNlcjExNzg3ODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1178780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willsALMANJ", "html_url": "https://github.com/willsALMANJ", "followers_url": "https://api.github.com/users/willsALMANJ/followers", "following_url": "https://api.github.com/users/willsALMANJ/following{/other_user}", "gists_url": "https://api.github.com/users/willsALMANJ/gists{/gist_id}", "starred_url": "https://api.github.com/users/willsALMANJ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willsALMANJ/subscriptions", "organizations_url": "https://api.github.com/users/willsALMANJ/orgs", "repos_url": "https://api.github.com/users/willsALMANJ/repos", "events_url": "https://api.github.com/users/willsALMANJ/events{/privacy}", "received_events_url": "https://api.github.com/users/willsALMANJ/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898027, "node_id": "MDU6TGFiZWwyOTg5ODAyNw==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/question%20:question:", "name": "question :question:", "color": "cc317c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-04T01:24:47Z", "updated_at": "2020-05-08T14:54:44Z", "closed_at": "2020-05-08T14:54:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was hoping to be able to run the model tester on a subclass of `QFileSystemModel`. However, `QFileSystemModel` uses the root of the file system as the top level parent of the model. When you call `setRootPath()` on the model, it changes the file system level that is shown in a view but the underlying model still encompasses the entire file system. The model tester starts at the root of the model and walks down 10 levels deep checking child items. This much walking of the file system for me causes the test to work at max CPU for hours without ending. Is there any way to work around this or should I just not use the model tester in this case?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/248", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/248/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/248/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/248/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/248", "id": 376453816, "node_id": "MDU6SXNzdWUzNzY0NTM4MTY=", "number": 248, "title": "typo in modeltest._on_rows_about_to_be_inserted", "user": {"login": "ext-jmmugnes", "id": 44406832, "node_id": "MDQ6VXNlcjQ0NDA2ODMy", "avatar_url": "https://avatars1.githubusercontent.com/u/44406832?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ext-jmmugnes", "html_url": "https://github.com/ext-jmmugnes", "followers_url": "https://api.github.com/users/ext-jmmugnes/followers", "following_url": "https://api.github.com/users/ext-jmmugnes/following{/other_user}", "gists_url": "https://api.github.com/users/ext-jmmugnes/gists{/gist_id}", "starred_url": "https://api.github.com/users/ext-jmmugnes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ext-jmmugnes/subscriptions", "organizations_url": "https://api.github.com/users/ext-jmmugnes/orgs", "repos_url": "https://api.github.com/users/ext-jmmugnes/repos", "events_url": "https://api.github.com/users/ext-jmmugnes/events{/privacy}", "received_events_url": "https://api.github.com/users/ext-jmmugnes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898023, "node_id": "MDU6TGFiZWwyOTg5ODAyMw==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/bug%20:bug:", "name": "bug :bug:", "color": "fc2929", "default": false, "description": ""}, {"id": 1113779251, "node_id": "MDU6TGFiZWwxMTEzNzc5MjUx", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/easy%20:cake:", "name": "easy :cake:", "color": "13bf57", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-01T15:54:37Z", "updated_at": "2018-12-13T16:30:42Z", "closed_at": "2018-12-13T16:30:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\njust to mention that, in modeltest._on_rows_about_to_be_inserted,  the following line (549):\r\n\r\n`last_data = self._model.data(last_index) if start - 1 > 0 else None`\r\n\r\nshould be:\r\n\r\n`last_data = self._model.data(last_index) if start - 1 >= 0 else None`\r\n\r\nsince start can be equal to 1.\r\n\r\nIt is actually like this in the [qt5 source code](https://code.woboq.org/qt5/qtbase/src/testlib/qabstractitemmodeltester.cpp.html#_ZN31QAbstractItemModelTesterPrivate21rowsAboutToBeInsertedERK11QModelIndexii) (line 643):\r\n\r\n`c.last = (start - 1 >= 0) ? model->index(start - 1, 0, parent).data() : QVariant();`\r\n\r\nThank you.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/247", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/247/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/247/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/247/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/247", "id": 375314247, "node_id": "MDU6SXNzdWUzNzUzMTQyNDc=", "number": 247, "title": "from pyqt import QT_VERSION is error", "user": {"login": "wakanawakana", "id": 24972079, "node_id": "MDQ6VXNlcjI0OTcyMDc5", "avatar_url": "https://avatars2.githubusercontent.com/u/24972079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wakanawakana", "html_url": "https://github.com/wakanawakana", "followers_url": "https://api.github.com/users/wakanawakana/followers", "following_url": "https://api.github.com/users/wakanawakana/following{/other_user}", "gists_url": "https://api.github.com/users/wakanawakana/gists{/gist_id}", "starred_url": "https://api.github.com/users/wakanawakana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wakanawakana/subscriptions", "organizations_url": "https://api.github.com/users/wakanawakana/orgs", "repos_url": "https://api.github.com/users/wakanawakana/repos", "events_url": "https://api.github.com/users/wakanawakana/events{/privacy}", "received_events_url": "https://api.github.com/users/wakanawakana/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-30T04:17:36Z", "updated_at": "2018-10-30T06:50:58Z", "closed_at": "2018-10-30T06:50:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "from qtpy import QT_VERSION\r\nImportError: cannot import name QT_VERSION", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/246", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/246/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/246/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/246/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/246", "id": 371000787, "node_id": "MDU6SXNzdWUzNzEwMDA3ODc=", "number": 246, "title": "model tester testParent fails on assertion that seems incorrect", "user": {"login": "p0las", "id": 4241912, "node_id": "MDQ6VXNlcjQyNDE5MTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4241912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/p0las", "html_url": "https://github.com/p0las", "followers_url": "https://api.github.com/users/p0las/followers", "following_url": "https://api.github.com/users/p0las/following{/other_user}", "gists_url": "https://api.github.com/users/p0las/gists{/gist_id}", "starred_url": "https://api.github.com/users/p0las/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/p0las/subscriptions", "organizations_url": "https://api.github.com/users/p0las/orgs", "repos_url": "https://api.github.com/users/p0las/repos", "events_url": "https://api.github.com/users/p0las/events{/privacy}", "received_events_url": "https://api.github.com/users/p0las/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-17T10:17:52Z", "updated_at": "2018-10-17T14:43:05Z", "closed_at": "2018-10-17T11:05:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "line 377\r\n```\r\n   top_left_child = self._model.index(0, 0, parent)\r\n        assert not self._model.hasIndex(rows, 0, parent)\r\n        assert not self._model.hasIndex(rows + 1, 0, parent)\r\n\r\n        for r in range(rows):\r\n            assert not self._model.hasIndex(r, columns, parent)\r\n```\r\nIn the loop **\"r\"** starts from 0 which means the first index tested is (0, columns, parent)\r\nin my case columns=0 so the element is the same as **\"top_left_child\"** which, in turn, has a valid index. Does it expect \"columns\">0 and my model gives it a wrong value? \r\nAm I missing something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/243", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/243/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/243/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/243/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/243", "id": 364071011, "node_id": "MDU6SXNzdWUzNjQwNzEwMTE=", "number": 243, "title": "Tests failed while qtmodeltester.check testing string_types for DisplayRole", "user": {"login": "smedisetti", "id": 32895063, "node_id": "MDQ6VXNlcjMyODk1MDYz", "avatar_url": "https://avatars3.githubusercontent.com/u/32895063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smedisetti", "html_url": "https://github.com/smedisetti", "followers_url": "https://api.github.com/users/smedisetti/followers", "following_url": "https://api.github.com/users/smedisetti/following{/other_user}", "gists_url": "https://api.github.com/users/smedisetti/gists{/gist_id}", "starred_url": "https://api.github.com/users/smedisetti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smedisetti/subscriptions", "organizations_url": "https://api.github.com/users/smedisetti/orgs", "repos_url": "https://api.github.com/users/smedisetti/repos", "events_url": "https://api.github.com/users/smedisetti/events{/privacy}", "received_events_url": "https://api.github.com/users/smedisetti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-26T14:50:34Z", "updated_at": "2018-09-26T15:30:32Z", "closed_at": "2018-09-26T15:21:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "`pytest-qt v3.1.0 ` explicitly testing string_types for DisplayRole of data. Which is not the case for older versions. It has broken our tests because we return object (`int`, `str`, etc.,) for DispalyRole of data which we think reasonable (aren't we?). \r\n\r\nCould you please share your reason for doing so? \r\n\r\n\r\nTechnologies:\r\nPython 2.7.x x64 and Pyside v1.2.4\r\nOS:\r\nWindows 7 machine", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/232", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/232/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/232/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/232/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/232", "id": 356223546, "node_id": "MDU6SXNzdWUzNTYyMjM1NDY=", "number": 232, "title": "Proper tests for qInfo when it becomes fully available", "user": {"login": "nicoddemus", "id": 1085180, "node_id": "MDQ6VXNlcjEwODUxODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1085180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicoddemus", "html_url": "https://github.com/nicoddemus", "followers_url": "https://api.github.com/users/nicoddemus/followers", "following_url": "https://api.github.com/users/nicoddemus/following{/other_user}", "gists_url": "https://api.github.com/users/nicoddemus/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicoddemus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicoddemus/subscriptions", "organizations_url": "https://api.github.com/users/nicoddemus/orgs", "repos_url": "https://api.github.com/users/nicoddemus/repos", "events_url": "https://api.github.com/users/nicoddemus/events{/privacy}", "received_events_url": "https://api.github.com/users/nicoddemus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 675153818, "node_id": "MDU6TGFiZWw2NzUxNTM4MTg=", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/infrastructure%20:computer:", "name": "infrastructure :computer:", "color": "5319e7", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-01T18:30:37Z", "updated_at": "2018-09-15T13:41:44Z", "closed_at": "2018-09-13T13:04:38Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Followup to #225, `qInfo` is not currently exposed by the bindings. As suggested in https://github.com/pytest-dev/pytest-qt/issues/225#issuecomment-417868188, we can workaround that by using `QMessageLogger`, but sadly that's not exposed by `PySide` yet.\r\n\r\nFor now we can make a simple test for INFO messages, but when `QMessageLogger` is available (or even better `qInfo`) we should update the other tests to issue/capture INFO messages.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/228", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/228/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/228/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/228/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/228", "id": 355758190, "node_id": "MDU6SXNzdWUzNTU3NTgxOTA=", "number": 228, "title": "Drop support for Python 2.7 and PyQt4 ", "user": {"login": "nicoddemus", "id": 1085180, "node_id": "MDQ6VXNlcjEwODUxODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1085180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicoddemus", "html_url": "https://github.com/nicoddemus", "followers_url": "https://api.github.com/users/nicoddemus/followers", "following_url": "https://api.github.com/users/nicoddemus/following{/other_user}", "gists_url": "https://api.github.com/users/nicoddemus/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicoddemus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicoddemus/subscriptions", "organizations_url": "https://api.github.com/users/nicoddemus/orgs", "repos_url": "https://api.github.com/users/nicoddemus/repos", "events_url": "https://api.github.com/users/nicoddemus/events{/privacy}", "received_events_url": "https://api.github.com/users/nicoddemus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 675153818, "node_id": "MDU6TGFiZWw2NzUxNTM4MTg=", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/infrastructure%20:computer:", "name": "infrastructure :computer:", "color": "5319e7", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2018-08-30T21:18:38Z", "updated_at": "2020-02-18T16:07:57Z", "closed_at": "2020-02-18T16:07:57Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Dropping this we can also use plain `pip` to install `PyQt5` and `PySide2`, getting the latest versions.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/225", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/225/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/225/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/225/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/225", "id": 355450515, "node_id": "MDU6SXNzdWUzNTU0NTA1MTU=", "number": 225, "title": "Logging capture causes test errors", "user": {"login": "willsALMANJ", "id": 1178780, "node_id": "MDQ6VXNlcjExNzg3ODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1178780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willsALMANJ", "html_url": "https://github.com/willsALMANJ", "followers_url": "https://api.github.com/users/willsALMANJ/followers", "following_url": "https://api.github.com/users/willsALMANJ/following{/other_user}", "gists_url": "https://api.github.com/users/willsALMANJ/gists{/gist_id}", "starred_url": "https://api.github.com/users/willsALMANJ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willsALMANJ/subscriptions", "organizations_url": "https://api.github.com/users/willsALMANJ/orgs", "repos_url": "https://api.github.com/users/willsALMANJ/repos", "events_url": "https://api.github.com/users/willsALMANJ/events{/privacy}", "received_events_url": "https://api.github.com/users/willsALMANJ/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898023, "node_id": "MDU6TGFiZWwyOTg5ODAyMw==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/bug%20:bug:", "name": "bug :bug:", "color": "fc2929", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2018-08-30T07:01:50Z", "updated_at": "2018-09-01T20:49:22Z", "closed_at": "2018-08-30T23:04:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run a test using the `qtbot` fixture with PySide2, I get the following error\r\n\r\n```\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.7.0, pytest-3.7.3, py-1.5.4, pluggy-0.7.1\r\nPySide2 5.11.1 -- Qt runtime 5.11.1 -- Qt compiled 5.11.1\r\nrootdir: /home/user/Documents/Writing/Coding/Python/myproject, inifile:\r\nplugins: qt-3.0.0, pudb-0.6, cov-2.5.1\r\ncollected 1 item\r\n\r\ntest_pytestqt.py E                                                       [100%]\r\n\r\n==================================== ERRORS ====================================\r\n_____________________ ERROR at setup of test_preselection ______________________\r\n\r\nqapp_args = []\r\n\r\n    @pytest.yield_fixture(scope='session')\r\n    def qapp(qapp_args):\r\n        \"\"\"\r\n        Fixture that instantiates the QApplication instance that will be used by\r\n        the tests.\r\n    \r\n        You can use the ``qapp`` fixture in tests which require a ``QApplication``\r\n        to run, but where you don't need full ``qtbot`` functionality.\r\n        \"\"\"\r\n        app = qt_api.QApplication.instance()\r\n        if app is None:\r\n            global _qapp_instance\r\n>           _qapp_instance = qt_api.QApplication(qapp_args)\r\n\r\n/home/user/.local/share/virtualenvs/myproject-TS3ABiG4/lib/python3.7/site-packages/pytestqt/plugin.py:50: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n/home/user/.local/share/virtualenvs/myproject-TS3ABiG4/lib/python3.7/site-packages/pytestqt/logging.py:186: in _handle_with_context\r\n    self._append_new_record(msg_type, message, context=context)\r\n/home/user/.local/share/virtualenvs/myproject-TS3ABiG4/lib/python3.7/site-packages/pytestqt/logging.py:172: in _append_new_record\r\n    self._records.append(Record(msg_type, message, ignored, context))\r\n/home/user/.local/share/virtualenvs/myproject-TS3ABiG4/lib/python3.7/site-packages/pytestqt/logging.py:217: in __init__\r\n    self._type_name = self._get_msg_type_name(msg_type)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'pytestqt.logging.Record'>\r\nmsg_type = PySide2.QtCore.QtMsgType.QtInfoMsg\r\n\r\n    @classmethod\r\n    def _get_msg_type_name(cls, msg_type):\r\n        \"\"\"\r\n            Return a string representation of the given QtMsgType enum\r\n            value.\r\n            \"\"\"\r\n        if not getattr(cls, '_type_name_map', None):\r\n            cls._type_name_map = {\r\n                qt_api.QtDebugMsg: 'QtDebugMsg',\r\n                qt_api.QtWarningMsg: 'QtWarningMsg',\r\n                qt_api.QtCriticalMsg: 'QtCriticalMsg',\r\n                qt_api.QtFatalMsg: 'QtFatalMsg',\r\n            }\r\n>       return cls._type_name_map[msg_type]\r\nE       KeyError: PySide2.QtCore.QtMsgType.QtInfoMsg\r\n\r\n/home/user/.local/share/virtualenvs/myproject-TS3ABiG4/lib/python3.7/site-packages/pytestqt/logging.py:244: KeyError\r\n=========================== 1 error in 0.17 seconds ============================\r\n```\r\n\r\nI get this error even for a test module with these contents:\r\n\r\n```\r\ndef test_preselection(qtbot):\r\n    pass\r\n```\r\nThe output of `pip freeze` is\r\n\r\n```\r\nastroid==2.0.4                                                                                                                                                                                                   \r\natomicwrites==1.2.0                                                                                                                                                                                               \r\nattrs==18.1.0                                                                                                                                                                                        \r\ncoverage==4.5.1                                                                                                                                                                                                   \r\nisort==4.3.4                                                                                                                                                                                                      \r\nlazy-object-proxy==1.3.1                                                                                                                                                          \r\nmccabe==0.6.1                                                                                                                                                                                                     \r\nmore-itertools==4.3.0                          \r\nmypy==0.620                                                                                                                                                                                                        \r\npluggy==0.7.1                                                                                                                                                                                                      \r\npudb==2018.1                                                                                                                                                                                                       \r\npy==1.5.4                                                                                                \r\npycodestyle==2.4.0                                                                                                                                                                                                \r\nPygments==2.2.0                                                                                                                                                                                                    \r\npylint==2.1.1                                                                                                                                                                                                     \r\nPySide2==5.11.1                                                                                                                                                                                                   \r\npytest==3.7.3                                                                                                                                                                                                     \r\npytest-cov==2.5.1                                                                                                                                                                                                 \r\npytest-pudb==0.6                                                                                                                                                                                                   \r\npytest-qt==3.0.0            \r\n```\r\n\r\nSwitching from PySide2 to PyQt5, I get a different  error message:\r\n\r\n```\r\n===================================================================================================== ERRORS ======================================================================================================\r\n_______________________________________________________________________________________ ERROR at setup of test_preselection _______________________________________________________________________________________\r\nSETUP ERROR: Qt exceptions in virtual methods:\r\n________________________________________________________________________________\r\nTraceback (most recent call last):\r\n  File \"/home/user/.local/share/virtualenvs/myproject-TS3ABiG4/lib/python3.7/site-packages/pytestqt/logging.py\", line 186, in _handle_with_context                                                           \r\n    self._append_new_record(msg_type, message, context=context)\r\n  File \"/home/user/.local/share/virtualenvs/myproject-TS3ABiG4/lib/python3.7/site-packages/pytestqt/logging.py\", line 172, in _append_new_record                                                             \r\n    self._records.append(Record(msg_type, message, ignored, context))\r\n  File \"/home/user/.local/share/virtualenvs/myproject-TS3ABiG4/lib/python3.7/site-packages/pytestqt/logging.py\", line 217, in __init__                                                                       \r\n    self._type_name = self._get_msg_type_name(msg_type)\r\n  File \"/home/user/.local/share/virtualenvs/myproject-TS3ABiG4/lib/python3.7/site-packages/pytestqt/logging.py\", line 244, in _get_msg_type_name                                                             \r\n    return cls._type_name_map[msg_type]\r\nKeyError: 4\r\n________________________________________________________________________________\r\n\r\n---------------------------------------------------------------------------------------------- Captured stderr setup ----------------------------------------------------------------------------------------------\r\nQt exceptions in virtual methods:\r\n________________________________________________________________________________\r\nTraceback (most recent call last):\r\n  File \"/home/user/.local/share/virtualenvs/myproject-TS3ABiG4/lib/python3.7/site-packages/pytestqt/logging.py\", line 186, in _handle_with_context                                                           \r\n    self._append_new_record(msg_type, message, context=context)\r\n  File \"/home/user/.local/share/virtualenvs/myproject-TS3ABiG4/lib/python3.7/site-packages/pytestqt/logging.py\", line 172, in _append_new_record                                                             \r\n    self._records.append(Record(msg_type, message, ignored, context))\r\n  File \"/home/user/.local/share/virtualenvs/myproject-TS3ABiG4/lib/python3.7/site-packages/pytestqt/logging.py\", line 217, in __init__                                                                       \r\n    self._type_name = self._get_msg_type_name(msg_type)\r\n  File \"/home/user/.local/share/virtualenvs/myproject-TS3ABiG4/lib/python3.7/site-packages/pytestqt/logging.py\", line 244, in _get_msg_type_name                                                             \r\n    return cls._type_name_map[msg_type]\r\nKeyError: 4\r\n```\r\n\r\nFor both PySide2 and PyQt, the test runs successfully when using `pytest --no-qt-log`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/224", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/224/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/224/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/224/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/224", "id": 353605601, "node_id": "MDU6SXNzdWUzNTM2MDU2MDE=", "number": 224, "title": "Add docs on how to create custom QApplications", "user": {"login": "nicoddemus", "id": 1085180, "node_id": "MDQ6VXNlcjEwODUxODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1085180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicoddemus", "html_url": "https://github.com/nicoddemus", "followers_url": "https://api.github.com/users/nicoddemus/followers", "following_url": "https://api.github.com/users/nicoddemus/following{/other_user}", "gists_url": "https://api.github.com/users/nicoddemus/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicoddemus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicoddemus/subscriptions", "organizations_url": "https://api.github.com/users/nicoddemus/orgs", "repos_url": "https://api.github.com/users/nicoddemus/repos", "events_url": "https://api.github.com/users/nicoddemus/events{/privacy}", "received_events_url": "https://api.github.com/users/nicoddemus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1033747530, "node_id": "MDU6TGFiZWwxMDMzNzQ3NTMw", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/docs%20:book:", "name": "docs :book:", "color": "f9cb4a", "default": false, "description": ""}, {"id": 1113779251, "node_id": "MDU6TGFiZWwxMTEzNzc5MjUx", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/easy%20:cake:", "name": "easy :cake:", "color": "13bf57", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-24T00:56:18Z", "updated_at": "2020-03-03T12:29:09Z", "closed_at": "2020-03-03T12:29:09Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Follow up from https://github.com/pytest-dev/pytest-qt/issues/172#issuecomment-415588753", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/223", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/223/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/223/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/223/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/223", "id": 351892798, "node_id": "MDU6SXNzdWUzNTE4OTI3OTg=", "number": 223, "title": "How to troubleshoot post-test hang?", "user": {"login": "enkore", "id": 1330164, "node_id": "MDQ6VXNlcjEzMzAxNjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1330164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/enkore", "html_url": "https://github.com/enkore", "followers_url": "https://api.github.com/users/enkore/followers", "following_url": "https://api.github.com/users/enkore/following{/other_user}", "gists_url": "https://api.github.com/users/enkore/gists{/gist_id}", "starred_url": "https://api.github.com/users/enkore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/enkore/subscriptions", "organizations_url": "https://api.github.com/users/enkore/orgs", "repos_url": "https://api.github.com/users/enkore/repos", "events_url": "https://api.github.com/users/enkore/events{/privacy}", "received_events_url": "https://api.github.com/users/enkore/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-19T10:44:38Z", "updated_at": "2018-08-19T10:55:42Z", "closed_at": "2018-08-19T10:55:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "What are possible causes for pytest-qt to hang *after* the test function returns but *before* py.test prints the \"dot of success\"?\r\n\r\nAborting with ^C always yields this message:\r\n\r\n```\r\nICE default IO error handler doing an exit(), pid = 27288, errno = 4\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/222", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/222/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/222/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/222/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/222", "id": 342016854, "node_id": "MDU6SXNzdWUzNDIwMTY4NTQ=", "number": 222, "title": "Improve waitUntil timeout message", "user": {"login": "Sup3rGeo", "id": 20566367, "node_id": "MDQ6VXNlcjIwNTY2MzY3", "avatar_url": "https://avatars2.githubusercontent.com/u/20566367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sup3rGeo", "html_url": "https://github.com/Sup3rGeo", "followers_url": "https://api.github.com/users/Sup3rGeo/followers", "following_url": "https://api.github.com/users/Sup3rGeo/following{/other_user}", "gists_url": "https://api.github.com/users/Sup3rGeo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sup3rGeo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sup3rGeo/subscriptions", "organizations_url": "https://api.github.com/users/Sup3rGeo/orgs", "repos_url": "https://api.github.com/users/Sup3rGeo/repos", "events_url": "https://api.github.com/users/Sup3rGeo/events{/privacy}", "received_events_url": "https://api.github.com/users/Sup3rGeo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898025, "node_id": "MDU6TGFiZWwyOTg5ODAyNQ==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/enhancement%20:cool:", "name": "enhancement :cool:", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-17T17:37:41Z", "updated_at": "2019-12-11T17:10:44Z", "closed_at": "2019-12-11T17:10:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Documentation says:\r\n\r\n> If a timeout is reached, the last assertion error re-raised and the test will fail\r\n\r\nI actually wasn't aware of the timeout and took some time to go back to documentation and understand why the waitUntil function was raising, when previously it had never raised (of course on this specific case the wait took more than 1 second, the default).\r\n\r\nSo I would like to propose that something informing that a Timeout has actually happen. This would be helpful and possibly save some time for new users.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/221", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/221/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/221/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/221/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/221", "id": 341030843, "node_id": "MDU6SXNzdWUzNDEwMzA4NDM=", "number": 221, "title": "Update model tester based on Qt changes", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 675153818, "node_id": "MDU6TGFiZWw2NzUxNTM4MTg=", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/infrastructure%20:computer:", "name": "infrastructure :computer:", "color": "5319e7", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-07-13T14:01:45Z", "updated_at": "2018-09-23T01:21:09Z", "closed_at": "2018-09-23T01:21:09Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "It looks like the Qt modeltester had [some changes](https://github.com/qt/qtbase/commits/5.11/src/testlib/qabstractitemmodeltester.cpp) (and a [bigger refactoring](https://github.com/qt/qtbase/commit/b3e4be2d8b9debf217657436139da0152f6f8797#diff-227bd803a8cca931ce30cdfbe060dd0e)) recently. Maybe there are even changes in [the old file location](http://code.qt.io/cgit/qt/qtbase.git/log/tests/auto/other/modeltest/modeltest.cpp) which we didn't pick up yet.\r\n\r\nWe should probably try to adopt those.\r\n\r\nThis also means links to the old `modeltest.cpp` are invalid and need updating.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/218", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/218/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/218/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/218/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/218", "id": 337737637, "node_id": "MDU6SXNzdWUzMzc3Mzc2Mzc=", "number": 218, "title": "Pytest-qt doesn't recognise Python 3.4 + PyQt5 5.11.2", "user": {"login": "Julian-O", "id": 945973, "node_id": "MDQ6VXNlcjk0NTk3Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/945973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Julian-O", "html_url": "https://github.com/Julian-O", "followers_url": "https://api.github.com/users/Julian-O/followers", "following_url": "https://api.github.com/users/Julian-O/following{/other_user}", "gists_url": "https://api.github.com/users/Julian-O/gists{/gist_id}", "starred_url": "https://api.github.com/users/Julian-O/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Julian-O/subscriptions", "organizations_url": "https://api.github.com/users/Julian-O/orgs", "repos_url": "https://api.github.com/users/Julian-O/repos", "events_url": "https://api.github.com/users/Julian-O/events{/privacy}", "received_events_url": "https://api.github.com/users/Julian-O/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-03T04:00:51Z", "updated_at": "2018-07-03T07:58:15Z", "closed_at": "2018-07-03T07:58:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "A new version of PyQt5 was released in the last 24 hours.\r\n\r\nSince around then, some of the CI tests on the nucleic\\enaml project have stopped working on Python 3.5 (on Windows), because pytest-qt complains:\r\n\r\n> INTERNALERROR> RuntimeError: pytest-qt requires either PySide, PySide2, PyQt4 or PyQt5 to be installed\r\n\r\nconda list confirms (excerpted):\r\n\r\n    > conda list\r\n    PyQt5                     5.11.2                    <pip>\r\n    PyQt5_sip                 4.19.11                   <pip>\r\n    pytest                    3.6.2                     <pip>\r\n    pytest-cov                2.5.1                     <pip>\r\n    pytest-qt                 2.4.1                     <pip>\r\n    python                    3.5.2                         0  \r\n    QtPy                      1.4.2                     <pip>\r\n\r\n\r\nIt continues to work on Python 2.7 and 3.6.\r\nIt continues to work if the installed version of PyQT5 is fixed to the previous version.\r\n\r\n(I haven't researched the changes, and whether it is best to be fixed in Pytest-qt or PyQt5.)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/215", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/215/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/215/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/215/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/215", "id": 327308336, "node_id": "MDU6SXNzdWUzMjczMDgzMzY=", "number": 215, "title": "pytest-qt is not printing the cause of exceptions on python 3", "user": {"login": "fabioz", "id": 117621, "node_id": "MDQ6VXNlcjExNzYyMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/117621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabioz", "html_url": "https://github.com/fabioz", "followers_url": "https://api.github.com/users/fabioz/followers", "following_url": "https://api.github.com/users/fabioz/following{/other_user}", "gists_url": "https://api.github.com/users/fabioz/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabioz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabioz/subscriptions", "organizations_url": "https://api.github.com/users/fabioz/orgs", "repos_url": "https://api.github.com/users/fabioz/repos", "events_url": "https://api.github.com/users/fabioz/events{/privacy}", "received_events_url": "https://api.github.com/users/fabioz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898023, "node_id": "MDU6TGFiZWwyOTg5ODAyMw==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/bug%20:bug:", "name": "bug :bug:", "color": "fc2929", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-29T12:55:46Z", "updated_at": "2018-06-06T14:09:37Z", "closed_at": "2018-06-06T14:09:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider the code below: The line `Error 1` should appear in the stderr, but only `Error 2` appears.\r\n\r\nThis happens because `exceptions.format_captured_exceptions` is a custom exception printer that doesn't take into account the exception cause.\r\n\r\n```\r\nfrom pytestqt.qt_compat import qt_api\r\n\r\nclass MyWidget(qt_api.QWidget):\r\n\r\n    def method(self):\r\n        raise RuntimeError('Error 1')\r\n\r\n    def event(self, ev):\r\n        called.append(1)\r\n        try:\r\n            self.method()\r\n        finally:\r\n            raise RuntimeError('Error 2')\r\n\r\n\r\nweak_ref = None\r\ncalled = []\r\n\r\n\r\ndef test_1(qapp):\r\n    global weak_ref\r\n    w = MyWidget()\r\n    qapp.postEvent(w, qt_api.QEvent(qt_api.QEvent.User))\r\n    qapp.processEvents()\r\n    assert len(called) > 0\r\n    w.deleteLater()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/211", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/211/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/211/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/211/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/211", "id": 323409599, "node_id": "MDU6SXNzdWUzMjM0MDk1OTk=", "number": 211, "title": "blocker.all_signals_and_args is empty when using PySide2", "user": {"login": "zephmann", "id": 26681914, "node_id": "MDQ6VXNlcjI2NjgxOTE0", "avatar_url": "https://avatars3.githubusercontent.com/u/26681914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zephmann", "html_url": "https://github.com/zephmann", "followers_url": "https://api.github.com/users/zephmann/followers", "following_url": "https://api.github.com/users/zephmann/following{/other_user}", "gists_url": "https://api.github.com/users/zephmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/zephmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zephmann/subscriptions", "organizations_url": "https://api.github.com/users/zephmann/orgs", "repos_url": "https://api.github.com/users/zephmann/repos", "events_url": "https://api.github.com/users/zephmann/events{/privacy}", "received_events_url": "https://api.github.com/users/zephmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898023, "node_id": "MDU6TGFiZWwyOTg5ODAyMw==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/bug%20:bug:", "name": "bug :bug:", "color": "fc2929", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-15T22:45:46Z", "updated_at": "2020-05-14T19:43:42Z", "closed_at": "2020-05-14T19:43:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "First and foremost, pytest-qt has been tremendously useful. Thank you!\r\n\r\nI am working on a UI that needs to be compatible with both PyQt5 and PySide2. When testing I noticed that with PyQt5, the all_signals_and_args seems to be populated correctly with the args from the multile signals, however, when testing with PySide2, the list is empty.\r\n\r\n```\r\ndef test_status_complete(qtbot):\r\n    app = Application()\r\n\r\n    signals = [app.worker.status, app.worker.finished]\r\n    with qtbot.waitSignals(signals, raising=True) as blocker:\r\n        app.worker.start()\r\n\r\n    print(blocker.all_signals_and_args)\r\n    assert False\r\n```\r\n\r\ntesting with PyQt5\r\n```\r\n>>> [<pytestqt.wait_signal.SignalAndArgs instance at 0x7f93c771fdd0>, <pytestqt.wait_signal.SignalAndArgs instance at 0x7f93c771fef0>]\r\n```\r\n\r\ntesting with PySide2\r\n```\r\n>>> []\r\n```\r\n\r\nJust wanted to pass this along. Thanks again!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/208", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/208/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/208/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/208/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/208", "id": 319741720, "node_id": "MDU6SXNzdWUzMTk3NDE3MjA=", "number": 208, "title": "qtbot mouseClick doesn't seem to generate the mouse button click event", "user": {"login": "hmbui", "id": 36712473, "node_id": "MDQ6VXNlcjM2NzEyNDcz", "avatar_url": "https://avatars3.githubusercontent.com/u/36712473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hmbui", "html_url": "https://github.com/hmbui", "followers_url": "https://api.github.com/users/hmbui/followers", "following_url": "https://api.github.com/users/hmbui/following{/other_user}", "gists_url": "https://api.github.com/users/hmbui/gists{/gist_id}", "starred_url": "https://api.github.com/users/hmbui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hmbui/subscriptions", "organizations_url": "https://api.github.com/users/hmbui/orgs", "repos_url": "https://api.github.com/users/hmbui/repos", "events_url": "https://api.github.com/users/hmbui/events{/privacy}", "received_events_url": "https://api.github.com/users/hmbui/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898027, "node_id": "MDU6TGFiZWwyOTg5ODAyNw==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/question%20:question:", "name": "question :question:", "color": "cc317c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-02T23:08:26Z", "updated_at": "2018-05-04T01:03:58Z", "closed_at": "2018-05-04T00:13:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm new to Qt, and I've been trying to figure out why this pytest code doesn't work:\r\n\r\n```python\r\nimport pytest\r\nfrom ...PyQt import QtCore\r\nfrom ...PyQt.QtCore import Qt\r\nfrom ...PyQt.QtGui import QLabel, QMenu\r\n\r\nclass TextLabel(QLabel):\r\n    def __init__(self, parent=None):\r\n        super(QLabel, self).__init__(parent)\r\n        self.setContextMenuPolicy(Qt.DefaultContextMenu)\r\n        self.contextMenuEvent = self.open_context_menu\r\n\r\n    def generate_context_menu(self):\r\n        menu = QMenu(parent=self)\r\n        return menu\r\n\r\n    def open_context_menu(self, ev):\r\n        menu = self.generate_context_menu()\r\n        action = menu.exec_(self.mapToGlobal(ev.pos()))\r\n        del menu\r\n\r\n\r\ndef test_open_context_menu(qtbot):\r\n    label = TextLabel()\r\n    label.resize(200, 300)\r\n    label.move(0, 0)\r\n    qtbot.addWidget(label)\r\n\r\n    with qtbot.waitExposed(label):\r\n        label.show()\r\n\r\n    #qtbot.waitActive(label, timeout=5000)\r\n    assert label.isVisible()\r\n\r\n    #label.grabMouse()\r\n    #mouse_grabber = label.mouseGrabber()\r\n    #assert isinstance(mouse_grabber, TextLabel)\r\n\r\n    #qtbot.stopForInteraction()\r\n    qtbot.mouseClick(label, QtCore.Qt.RightButton, pos=QtCore.QPoint(100, 100))\r\n\r\n    #label.releaseMouse()\r\n```\r\n\r\n\r\nWhat this code is supposed to do is that it generates a right-button mouse click, which, during debugging, will hit the breakpoints placed at open_context_menu() and generate_context_menu(). These breakpoints are not hit, however, hence the issue.\r\n\r\nThe commented code is what I was trying, but didn't work. In fact, I don't think grabbing the mouse would be necessary, but I'm not sure.\r\n\r\nI found issue #27, and suspect my qtbot could be hitting outside of the client area of the widget. That was when I added the move(0, 0) and added the pos param to mouseClick(), but that didn't help.\r\n\r\nWhen I used stopForInteraction(), and right click on the active widget, I was able to trigger open_context_menu() and generate_context_menu(), as expected.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/206", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/206/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/206/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/206/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/206", "id": 318246467, "node_id": "MDU6SXNzdWUzMTgyNDY0Njc=", "number": 206, "title": "Issues when runnning tests with Xvfb", "user": {"login": "hhslepicka", "id": 8185425, "node_id": "MDQ6VXNlcjgxODU0MjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/8185425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hhslepicka", "html_url": "https://github.com/hhslepicka", "followers_url": "https://api.github.com/users/hhslepicka/followers", "following_url": "https://api.github.com/users/hhslepicka/following{/other_user}", "gists_url": "https://api.github.com/users/hhslepicka/gists{/gist_id}", "starred_url": "https://api.github.com/users/hhslepicka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hhslepicka/subscriptions", "organizations_url": "https://api.github.com/users/hhslepicka/orgs", "repos_url": "https://api.github.com/users/hhslepicka/repos", "events_url": "https://api.github.com/users/hhslepicka/events{/privacy}", "received_events_url": "https://api.github.com/users/hhslepicka/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898027, "node_id": "MDU6TGFiZWwyOTg5ODAyNw==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/question%20:question:", "name": "question :question:", "color": "cc317c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-04-27T01:15:31Z", "updated_at": "2018-04-27T22:47:34Z", "closed_at": "2018-04-27T21:15:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am trying to run some tests with pytest-qt using Travis and to simulate at my workstation the same issue I am using pytest-xvfb.\r\n\r\nThe following test works when running at my computer without the Xvfb but something very similar fails at Travis and also at my computer when using Xvfb.\r\n\r\n```python\r\nfrom PyQt5.QtWidgets import QLineEdit\r\n\r\ndef test_focus(qtbot):\r\n    line_edit = QLineEdit()\r\n    qtbot.addWidget(line_edit)\r\n    with qtbot.waitExposed(line_edit):\r\n        line_edit.show()\r\n\r\n    line_edit.setFocus()\r\n\r\n    qtbot.waitUntil(lambda: line_edit.hasFocus())\r\n\r\n    assert line_edit.hasFocus()\r\n```\r\n\r\nI tried to follow the same as the solution on this issue in here: https://github.com/pytest-dev/pytest-qt/issues/160 but no lucky so far.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/205", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/205/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/205/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/205/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/205", "id": 314165146, "node_id": "MDU6SXNzdWUzMTQxNjUxNDY=", "number": 205, "title": "QStringModel not in QtGui but QtCore on Pyside2", "user": {"login": "skoudoro", "id": 23106443, "node_id": "MDQ6VXNlcjIzMTA2NDQz", "avatar_url": "https://avatars2.githubusercontent.com/u/23106443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skoudoro", "html_url": "https://github.com/skoudoro", "followers_url": "https://api.github.com/users/skoudoro/followers", "following_url": "https://api.github.com/users/skoudoro/following{/other_user}", "gists_url": "https://api.github.com/users/skoudoro/gists{/gist_id}", "starred_url": "https://api.github.com/users/skoudoro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skoudoro/subscriptions", "organizations_url": "https://api.github.com/users/skoudoro/orgs", "repos_url": "https://api.github.com/users/skoudoro/repos", "events_url": "https://api.github.com/users/skoudoro/events{/privacy}", "received_events_url": "https://api.github.com/users/skoudoro/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898027, "node_id": "MDU6TGFiZWwyOTg5ODAyNw==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/question%20:question:", "name": "question :question:", "color": "cc317c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-04-13T16:04:32Z", "updated_at": "2018-05-15T22:12:33Z", "closed_at": "2018-05-15T20:59:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nWhen I run `pytest`, I got this error:\r\n\r\n`INTERNALERROR> AttributeError: module 'PySide2.QtGui' has no attribute 'QStringListModel'`\r\n\r\nThe doc [here](https://doc-snapshots.qt.io/qtforpython/PySide2/QtGui/QStringListModel.html) is a bit confusing for `QStringListModel` but this model seems to be in QtCore.\r\n\r\nFurthermore, it seems this model is not present in all pyside2 as you can see [here](https://wiki.qt.io/PySide2_Missing_Bindings)\r\n\r\nam I right or did I do something wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/204", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/204/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/204/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/204", "id": 305557433, "node_id": "MDU6SXNzdWUzMDU1NTc0MzM=", "number": 204, "title": "[Question] Can I use for QML applications?", "user": {"login": "rafaeldelucena", "id": 307344, "node_id": "MDQ6VXNlcjMwNzM0NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/307344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafaeldelucena", "html_url": "https://github.com/rafaeldelucena", "followers_url": "https://api.github.com/users/rafaeldelucena/followers", "following_url": "https://api.github.com/users/rafaeldelucena/following{/other_user}", "gists_url": "https://api.github.com/users/rafaeldelucena/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafaeldelucena/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafaeldelucena/subscriptions", "organizations_url": "https://api.github.com/users/rafaeldelucena/orgs", "repos_url": "https://api.github.com/users/rafaeldelucena/repos", "events_url": "https://api.github.com/users/rafaeldelucena/events{/privacy}", "received_events_url": "https://api.github.com/users/rafaeldelucena/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898027, "node_id": "MDU6TGFiZWwyOTg5ODAyNw==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/question%20:question:", "name": "question :question:", "color": "cc317c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-03-15T13:42:49Z", "updated_at": "2018-06-22T07:39:14Z", "closed_at": "2018-05-15T21:01:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/202", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/202/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/202/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/202/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/202", "id": 305393062, "node_id": "MDU6SXNzdWUzMDUzOTMwNjI=", "number": 202, "title": "PySide2 segmentation faults after test session in Travis and AppVeyor", "user": {"login": "nicoddemus", "id": 1085180, "node_id": "MDQ6VXNlcjEwODUxODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1085180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicoddemus", "html_url": "https://github.com/nicoddemus", "followers_url": "https://api.github.com/users/nicoddemus/followers", "following_url": "https://api.github.com/users/nicoddemus/following{/other_user}", "gists_url": "https://api.github.com/users/nicoddemus/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicoddemus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicoddemus/subscriptions", "organizations_url": "https://api.github.com/users/nicoddemus/orgs", "repos_url": "https://api.github.com/users/nicoddemus/repos", "events_url": "https://api.github.com/users/nicoddemus/events{/privacy}", "received_events_url": "https://api.github.com/users/nicoddemus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 675153818, "node_id": "MDU6TGFiZWw2NzUxNTM4MTg=", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/infrastructure%20:computer:", "name": "infrastructure :computer:", "color": "5319e7", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-03-15T02:23:33Z", "updated_at": "2020-05-08T15:08:48Z", "closed_at": "2020-05-08T15:08:48Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Sample builds:\r\n\r\n* https://ci.appveyor.com/project/nicoddemus/pytest-qt/build/1.0.480\r\n* https://travis-ci.org/pytest-dev/pytest-qt/builds/353613828", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/200", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/200/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/200/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/200", "id": 303836002, "node_id": "MDU6SXNzdWUzMDM4MzYwMDI=", "number": 200, "title": "High memory usage, possible memory leakage?", "user": {"login": "CameronJRAllan", "id": 5111743, "node_id": "MDQ6VXNlcjUxMTE3NDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5111743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CameronJRAllan", "html_url": "https://github.com/CameronJRAllan", "followers_url": "https://api.github.com/users/CameronJRAllan/followers", "following_url": "https://api.github.com/users/CameronJRAllan/following{/other_user}", "gists_url": "https://api.github.com/users/CameronJRAllan/gists{/gist_id}", "starred_url": "https://api.github.com/users/CameronJRAllan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CameronJRAllan/subscriptions", "organizations_url": "https://api.github.com/users/CameronJRAllan/orgs", "repos_url": "https://api.github.com/users/CameronJRAllan/repos", "events_url": "https://api.github.com/users/CameronJRAllan/events{/privacy}", "received_events_url": "https://api.github.com/users/CameronJRAllan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898027, "node_id": "MDU6TGFiZWwyOTg5ODAyNw==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/question%20:question:", "name": "question :question:", "color": "cc317c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-09T13:10:04Z", "updated_at": "2018-03-16T12:08:26Z", "closed_at": "2018-03-16T12:08:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have ~200 tests, spread across several files, most of which have a structure as shown below:\r\n\r\n```python\r\nclass TestAppPoC():\r\n  @pytest.fixture(scope=\"function\", autouse=True)\r\n  # Fixture to run before every function begins\r\n  def setup(self, qtbot):\r\n    # Dialog\r\n    self.dialog = QtWidgets.QMainWindow()\r\n\r\n    # Event loop\r\n    self.app = application.mainWindow(self.dialog)\r\n\r\n  def test_volumeSlider(self):\r\n    assert(self.app.vSlider.value() == 100)\r\n```\r\n\r\nAs it stands, there is no teardown fixture specified, as I assumed from the documentation that this is handled automatically (as is the creation of a qApp instance). Many of the tests do not require qtBot, but rather the programmatic availability of the objects created by the dialog window in PyQt.\r\n\r\nWhen running my tests, while previously I had no issue, it now gets to approximately 50 tests run before memory usage is at 5GB and my system freezes to a halt. When running only a single containing 20 tests the memory usage hits 4GB.\r\n\r\nI ran PyTest from the terminal, rather than PyCharm and experienced the same behaviour.\r\n\r\nIs my fixture set-up incorrect, or is there a memory leak / teardown issue occurring with pytest-qt? It appears that after a test has completed, the entire state of the dialog remains in memory (by default ~200MB) and hence when several tests have run, the memory usage grows hugely. I'm afraid I lack the knowledge to fully debug myself but any pointers would be appreciated.\r\n\r\nLibrary information (taken from PyCharm):    \r\n```\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.6.4, pytest-3.4.2, py-1.5.2, pluggy-0.6.0\r\nPyQt5 5.10.1 -- Qt runtime 5.10.1 -- Qt compiled 5.10.1\r\nrootdir: /home/cameron/PycharmProjects/Meta-Data/tests, inifile: pytest.ini\r\nplugins: qt-2.3.1, mock-1.6.2, leaks-0.2.2\r\ncollected 21 items\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/199", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/199/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/199/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/199/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/199", "id": 296203076, "node_id": "MDU6SXNzdWUyOTYyMDMwNzY=", "number": 199, "title": "waitSignal occasionally hangs indefinitely", "user": {"login": "alisianoi", "id": 962850, "node_id": "MDQ6VXNlcjk2Mjg1MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/962850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alisianoi", "html_url": "https://github.com/alisianoi", "followers_url": "https://api.github.com/users/alisianoi/followers", "following_url": "https://api.github.com/users/alisianoi/following{/other_user}", "gists_url": "https://api.github.com/users/alisianoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/alisianoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alisianoi/subscriptions", "organizations_url": "https://api.github.com/users/alisianoi/orgs", "repos_url": "https://api.github.com/users/alisianoi/repos", "events_url": "https://api.github.com/users/alisianoi/events{/privacy}", "received_events_url": "https://api.github.com/users/alisianoi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-11T16:28:51Z", "updated_at": "2018-02-18T14:16:43Z", "closed_at": "2018-02-11T16:41:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, [here is a quick MWE][1] for the problem I am about to describe (follow the README.md to install and reproduce)\r\n\r\nIn a nutshell, I would like to test a controller class that uses an instance of `QThreadPool` to dispatch and then collect the results of `QRunnable`s. I use `qtbot.waitSignal` to hook to the signals coming from the controller. The signals are emitted once some `QRunnable` successfully (or not) terminates.\r\n\r\nWhat I observe is that if I run my test many times (for example with `pytest --count 100`), there is a good chance it will hang indefinitely or segfault (the latter is rare). I have tried looking for some kind of a concurrency mistake in my MWE but could not find any: my controller creates an instance of `Worker(QObject)`, connects callbacks to a couple of its signals, then wraps it into a `QRunnable` and passes into its own instance of `QThreadPool`. Should be straightforward enough.\r\n\r\nAt the same time I see open issues about `waitSignal` here: [one][2] and [two][3]. In any case, my MWE might be useful on its own. Any ideas what I am doing wrong or if there is a `waitSignal` bug?\r\n\r\nEdit:\r\n\r\nMy python is `3.6.4`, my `uname -a` is an Archlinux box:\r\nLinux k-2so 4.15.1-2-ARCH #1 SMP Sun Feb 4 22:27:45 UTC 2018 x86_64 GNU/Linux\r\nMy Qt is `5.10.0-4` and my PyQt/pytest/pytest-qt versions are in the [`requirements.txt`][4]\r\n\r\nEdit2:\r\n\r\nAlso, I highly doubt that this is a problem with `pytest-repeat` plugin. The problem happens also if you run `pytest` several times manually, it just takes longer.\r\n\r\nEdit3:\r\n\r\nOh, apologies. My MWE actually works fine, the problem was that the timeout for the waitSignal was 1 second and my random sleep was betwee 0 and 3. With the increased timeout the MWE does not fail, so my problem is somewhere else. Will close until I make a better MWE or find out my problem.\r\n\r\n[1]: https://github.com/alisianoi/pytest-qt-wait-mwe\r\n[2]: https://github.com/pytest-dev/pytest-qt/issues/183\r\n[3]: https://github.com/pytest-dev/pytest-qt/issues/156\r\n[4]: https://github.com/alisianoi/pytest-qt-wait-mwe/blob/master/requirements.txt", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/195", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/195/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/195/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/195/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/195", "id": 280530206, "node_id": "MDU6SXNzdWUyODA1MzAyMDY=", "number": 195, "title": "Click on a menu action", "user": {"login": "dhenryFabrice", "id": 7690555, "node_id": "MDQ6VXNlcjc2OTA1NTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/7690555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhenryFabrice", "html_url": "https://github.com/dhenryFabrice", "followers_url": "https://api.github.com/users/dhenryFabrice/followers", "following_url": "https://api.github.com/users/dhenryFabrice/following{/other_user}", "gists_url": "https://api.github.com/users/dhenryFabrice/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhenryFabrice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhenryFabrice/subscriptions", "organizations_url": "https://api.github.com/users/dhenryFabrice/orgs", "repos_url": "https://api.github.com/users/dhenryFabrice/repos", "events_url": "https://api.github.com/users/dhenryFabrice/events{/privacy}", "received_events_url": "https://api.github.com/users/dhenryFabrice/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898027, "node_id": "MDU6TGFiZWwyOTg5ODAyNw==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/question%20:question:", "name": "question :question:", "color": "cc317c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-08T15:45:50Z", "updated_at": "2018-02-15T14:24:31Z", "closed_at": "2018-02-15T14:24:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nHow can I simulate a click on a menu action?\r\n\r\nBest regards\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/194", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/194/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/194/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/194/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/194", "id": 280236926, "node_id": "MDU6SXNzdWUyODAyMzY5MjY=", "number": 194, "title": "QtBot Interaction with QTreeView / QListView", "user": {"login": "CameronJRAllan", "id": 5111743, "node_id": "MDQ6VXNlcjUxMTE3NDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5111743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CameronJRAllan", "html_url": "https://github.com/CameronJRAllan", "followers_url": "https://api.github.com/users/CameronJRAllan/followers", "following_url": "https://api.github.com/users/CameronJRAllan/following{/other_user}", "gists_url": "https://api.github.com/users/CameronJRAllan/gists{/gist_id}", "starred_url": "https://api.github.com/users/CameronJRAllan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CameronJRAllan/subscriptions", "organizations_url": "https://api.github.com/users/CameronJRAllan/orgs", "repos_url": "https://api.github.com/users/CameronJRAllan/repos", "events_url": "https://api.github.com/users/CameronJRAllan/events{/privacy}", "received_events_url": "https://api.github.com/users/CameronJRAllan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898027, "node_id": "MDU6TGFiZWwyOTg5ODAyNw==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/question%20:question:", "name": "question :question:", "color": "cc317c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-12-07T18:45:57Z", "updated_at": "2019-01-08T14:40:02Z", "closed_at": "2017-12-09T13:07:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there functionality available for clicking a particular index in a QListView or QTreeView in a window? I.e, click the top item in the list widget?\r\n\r\nI've looked at the documentation for help on this with no luck, as well as experimenting with the qtbot.mouseClick function to see if I could find the relevant syntax.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/192", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/192/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/192/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/192/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/192", "id": 264811390, "node_id": "MDU6SXNzdWUyNjQ4MTEzOTA=", "number": 192, "title": "exception when no Qt available - is it necessary?", "user": {"login": "p0las", "id": 4241912, "node_id": "MDQ6VXNlcjQyNDE5MTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4241912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/p0las", "html_url": "https://github.com/p0las", "followers_url": "https://api.github.com/users/p0las/followers", "following_url": "https://api.github.com/users/p0las/following{/other_user}", "gists_url": "https://api.github.com/users/p0las/gists{/gist_id}", "starred_url": "https://api.github.com/users/p0las/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/p0las/subscriptions", "organizations_url": "https://api.github.com/users/p0las/orgs", "repos_url": "https://api.github.com/users/p0las/repos", "events_url": "https://api.github.com/users/p0las/events{/privacy}", "received_events_url": "https://api.github.com/users/p0las/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-12T04:35:10Z", "updated_at": "2017-10-24T23:43:21Z", "closed_at": "2017-10-24T23:43:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "INTERNALERROR>   File \"site-packages\\pytestqt\\plugin.py\", line 167, in pytest_configure\r\nINTERNALERROR>     qt_api.set_qt_api(config.getini('qt_api'))\r\nINTERNALERROR>   File \"site-packages\\pytestqt\\qt_compat.py\", line 60, in set_qt_api\r\nINTERNALERROR>     raise RuntimeError(msg)\r\nINTERNALERROR> RuntimeError: pytest-qt requires either PySide, PySide2, PyQt4 or PyQt5 to be installed\r\n\r\non our system we have multiple python versions available on demand and we try to keep compatible site-packages outside of them. This includes one version of pytest to serve all of them. Some of python configurations are very clean and do not have any interface related libraries. Just having pytest-qt in the environment makes unittests (that do not use it) break with the above runtime error.\r\nis there a way to remove the compatibility checks?\r\n\r\n(btw we are loving pytest-qt :-))", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/191", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/191/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/191/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/191/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/191", "id": 263078732, "node_id": "MDU6SXNzdWUyNjMwNzg3MzI=", "number": 191, "title": "Create tests which return QBrush for BackgroundColorRole and TextColorRole ", "user": {"login": "nicoddemus", "id": 1085180, "node_id": "MDQ6VXNlcjEwODUxODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1085180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicoddemus", "html_url": "https://github.com/nicoddemus", "followers_url": "https://api.github.com/users/nicoddemus/followers", "following_url": "https://api.github.com/users/nicoddemus/following{/other_user}", "gists_url": "https://api.github.com/users/nicoddemus/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicoddemus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicoddemus/subscriptions", "organizations_url": "https://api.github.com/users/nicoddemus/orgs", "repos_url": "https://api.github.com/users/nicoddemus/repos", "events_url": "https://api.github.com/users/nicoddemus/events{/privacy}", "received_events_url": "https://api.github.com/users/nicoddemus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-05T10:42:45Z", "updated_at": "2018-09-23T01:21:43Z", "closed_at": "2018-09-23T01:21:43Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As commented: https://github.com/pytest-dev/pytest-qt/pull/190#issuecomment-334370227", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/189", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/189/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/189/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/189/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/189", "id": 262666565, "node_id": "MDU6SXNzdWUyNjI2NjY1NjU=", "number": 189, "title": "pyside2 setBacground on an item breaks model test", "user": {"login": "p0las", "id": 4241912, "node_id": "MDQ6VXNlcjQyNDE5MTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4241912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/p0las", "html_url": "https://github.com/p0las", "followers_url": "https://api.github.com/users/p0las/followers", "following_url": "https://api.github.com/users/p0las/following{/other_user}", "gists_url": "https://api.github.com/users/p0las/gists{/gist_id}", "starred_url": "https://api.github.com/users/p0las/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/p0las/subscriptions", "organizations_url": "https://api.github.com/users/p0las/orgs", "repos_url": "https://api.github.com/users/p0las/repos", "events_url": "https://api.github.com/users/p0las/events{/privacy}", "received_events_url": "https://api.github.com/users/p0las/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-10-04T05:11:39Z", "updated_at": "2017-10-05T00:44:27Z", "closed_at": "2017-10-05T00:44:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "in pyside2 setBackground on standartItem requires a brush. However it seems that qtmodeltester fixture assumes it to be QColor\r\n\r\n```python\r\nmodel = QtGui.QStandardItemModel()\r\nitem = QtGui.QStandardItem(\"test\")\r\nmodel.appendRow([item])\r\nbrush = QtGui.QBrush(QtGui.QColor(\"#DDDDDD\"), QtCore.Qt.SolidPattern)\r\nitem.setBackground(brush)\r\nqtmodeltester.check(model)\r\n```\r\n\r\n\r\n```\r\nE           AssertionError: PySide.QtCore.Qt.ItemDataRole.BackgroundColorRole\r\nE           assert (<PySide.QtGui.QBrush(QColor(AHSV 1, -1, 0, 0.235294) , NoBrush )   at 0x000000000A0C3608> == None or False)\r\nE            +  where False = isinstance(<PySide.QtGui.QBrush(QColor(AHSV 1, -1, 0, 0.235294) , SolidPattern )   at 0x000000000A0C3608>, <type 'PySide.QtGui.QColor'>)\r\n```\r\n\r\nEDIT by @nicoddemus: formatting", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/187", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/187/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/187/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/187/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/187", "id": 260090366, "node_id": "MDU6SXNzdWUyNjAwOTAzNjY=", "number": 187, "title": "Properly clear exceptions after test", "user": {"login": "fabioz", "id": 117621, "node_id": "MDQ6VXNlcjExNzYyMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/117621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabioz", "html_url": "https://github.com/fabioz", "followers_url": "https://api.github.com/users/fabioz/followers", "following_url": "https://api.github.com/users/fabioz/following{/other_user}", "gists_url": "https://api.github.com/users/fabioz/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabioz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabioz/subscriptions", "organizations_url": "https://api.github.com/users/fabioz/orgs", "repos_url": "https://api.github.com/users/fabioz/repos", "events_url": "https://api.github.com/users/fabioz/events{/privacy}", "received_events_url": "https://api.github.com/users/fabioz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-09-24T14:48:28Z", "updated_at": "2018-07-13T11:37:16Z", "closed_at": "2018-07-12T22:58:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If an exception is thrown and is captured by pytestqt, it's keep alive (found it while trying to discover why PySide was crashing on the process exit when a test failed -- the reason was that pytestqt was keeping variables alive longer than it should and variables weren't cleared in the proper order because of that).\r\n\r\nWill provide a fix shortly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/184", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/184/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/184/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/184", "id": 257999645, "node_id": "MDU6SXNzdWUyNTc5OTk2NDU=", "number": 184, "title": "Integration with qtpy", "user": {"login": "rth", "id": 630936, "node_id": "MDQ6VXNlcjYzMDkzNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/630936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rth", "html_url": "https://github.com/rth", "followers_url": "https://api.github.com/users/rth/followers", "following_url": "https://api.github.com/users/rth/following{/other_user}", "gists_url": "https://api.github.com/users/rth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rth/subscriptions", "organizations_url": "https://api.github.com/users/rth/orgs", "repos_url": "https://api.github.com/users/rth/repos", "events_url": "https://api.github.com/users/rth/events{/privacy}", "received_events_url": "https://api.github.com/users/rth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-15T10:45:16Z", "updated_at": "2018-06-21T10:32:33Z", "closed_at": "2018-06-21T10:32:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The support of multiple PyQt / PySide backends is a recurrent problem for any project working with Qt in Python. In pytest-qt it is solved by providing a compatibility `_QtApi` interface in `qt_compat.py` (that is not in the public interface). At the same time there are packages that specialize in providing such a compatibility interface, namely [spyder-ide/qtpy](https://github.com/spyder-ide/qtpy) and [mottosso/Qt.py](https://github.com/mottosso/Qt.py). For project that use one of those packages (e.g. matplotlib is [considering it](https://github.com/matplotlib/matplotlib/issues/6118)), and wanting to test it with with pytest-qt it would mean that they would not, technically be testing the project in the same conditions (and it would also mean setting differently named environment variables twice `PYTEST_QT_API` and `QT_API` or `QT_PREFERRED_BINDING`.) \r\n\r\nI think the integration could be straightforward: e.g. to integrate with qtpy, the following should almost work,\r\n\r\nAt the end of [**pytestqt/qt_compat.py**](https://github.com/pytest-dev/pytest-qt/blob/master/pytestqt/qt_compat.py#L192)\r\n```py\r\ntry:\r\n    if 'QT_API' not in os.environ and 'PYTEST_QT_API' in os.environ:\r\n        os.environ['QT_API'] = os.environ['PYTEST_QT_API']\r\n    import qtpy\r\n    qt_api = qtpy\r\n    qt_api.pytest_qt_api = qtpy.API\r\nexcept ImportError:\r\n     # fallback to the built-in compatibility layer..\r\n    qt_api = _QtApi()\r\n```\r\n\r\nAnd maybe one extra environment in TravisCI for testing..\r\n\r\nWhat do you think?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/180", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/180/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/180/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/180/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/180", "id": 257420128, "node_id": "MDU6SXNzdWUyNTc0MjAxMjg=", "number": 180, "title": "Consider using conda for CI environement", "user": {"login": "rth", "id": 630936, "node_id": "MDQ6VXNlcjYzMDkzNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/630936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rth", "html_url": "https://github.com/rth", "followers_url": "https://api.github.com/users/rth/followers", "following_url": "https://api.github.com/users/rth/following{/other_user}", "gists_url": "https://api.github.com/users/rth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rth/subscriptions", "organizations_url": "https://api.github.com/users/rth/orgs", "repos_url": "https://api.github.com/users/rth/repos", "events_url": "https://api.github.com/users/rth/events{/privacy}", "received_events_url": "https://api.github.com/users/rth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-09-13T15:16:55Z", "updated_at": "2017-09-14T12:14:55Z", "closed_at": "2017-09-14T12:14:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have been trying to setup PySide2 CI for  https://github.com/pytest-dev/pytest-qt/pull/161 following the [installation instructions from PySide2 wheels](https://github.com/fredrikaverpil/pyside2-wheels/blob/master/QUICKSTART.md#ubuntu-1404-trusty) and after a few hours, I'm still not able to make Travis install PySide2 correctly  (cf last build [status here](https://travis-ci.org/rth/pytest-qt/jobs/275061857) ):\r\n  - on PY3 This is due to PySide2 not being able to see some environment variables that should have been set by sourcing `/opt/qt56/bin/qt56-env.sh` (but sourcing this file fails on Travis or file doesn't exist etc) and so it cannot find `libQt5Core`\r\n  - ~~on PY2 installing the Pyside2 wheel produces the `PySide2-5.6-cp27-cp34m-linux_x86_64.whl is not a supported wheel on this platform.` error.~~ **Edit**: The download URL was wrong.\r\n\r\n Anyway, my point is that `scripts/install-qt.py` a bit complicated as it is and adding PySide2 setup will add [even more custom installation logic](https://github.com/pytest-dev/pytest-qt/compare/master...rth:pyside2-support?expand=1#diff-7bba75ab0917e3ebc7e3cd551194d185). All of this is also specific to Ubuntu 14.04 currently on Travis and will probably need updating for the next Ubuntu release. I have not even started looking into the Appveyor setup.\r\n\r\nMy question is whether you would consider using conda for setting up the CI environments? PySide2 [is now on conda-forge](https://github.com/conda-forge/pyside2-feedstock), so all the installation could be done  roughly with,\r\n```\r\nconda create -n test-env -c conda-forge pyside2 pytest python=3.4\r\nsource activate test-env\r\n```\r\nThe advantages is that,\r\n  * it would allow a much simpler  (and easier to maintain) installation setup that would be more consistent between Linux and Windows\r\n  * would allow migrating [from legacy to container-baser Travis CI setup](https://docs.travis-ci.com/user/migrating-from-legacy/)\r\n\r\nThe limitation is that I'm not sure how well conda integrates with tox...\r\n\r\nMight be related to https://github.com/pytest-dev/pytest-qt/pull/165\r\n\r\nWhat do you think?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/177", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/177/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/177/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/177/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/177", "id": 242355082, "node_id": "MDU6SXNzdWUyNDIzNTUwODI=", "number": 177, "title": "Automatic deploy not working on Travis after sudo changes", "user": {"login": "nicoddemus", "id": 1085180, "node_id": "MDQ6VXNlcjEwODUxODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1085180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicoddemus", "html_url": "https://github.com/nicoddemus", "followers_url": "https://api.github.com/users/nicoddemus/followers", "following_url": "https://api.github.com/users/nicoddemus/following{/other_user}", "gists_url": "https://api.github.com/users/nicoddemus/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicoddemus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicoddemus/subscriptions", "organizations_url": "https://api.github.com/users/nicoddemus/orgs", "repos_url": "https://api.github.com/users/nicoddemus/repos", "events_url": "https://api.github.com/users/nicoddemus/events{/privacy}", "received_events_url": "https://api.github.com/users/nicoddemus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-12T11:57:22Z", "updated_at": "2017-07-13T02:15:31Z", "closed_at": "2017-07-13T02:15:31Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Build log: https://travis-ci.org/pytest-dev/pytest-qt/jobs/252774175", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/173", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/173/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/173/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/173/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/173", "id": 241988243, "node_id": "MDU6SXNzdWUyNDE5ODgyNDM=", "number": 173, "title": "New release of pytest-qt", "user": {"login": "ghisvail", "id": 1964655, "node_id": "MDQ6VXNlcjE5NjQ2NTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1964655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghisvail", "html_url": "https://github.com/ghisvail", "followers_url": "https://api.github.com/users/ghisvail/followers", "following_url": "https://api.github.com/users/ghisvail/following{/other_user}", "gists_url": "https://api.github.com/users/ghisvail/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghisvail/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghisvail/subscriptions", "organizations_url": "https://api.github.com/users/ghisvail/orgs", "repos_url": "https://api.github.com/users/ghisvail/repos", "events_url": "https://api.github.com/users/ghisvail/events{/privacy}", "received_events_url": "https://api.github.com/users/ghisvail/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-07-11T09:45:23Z", "updated_at": "2017-07-13T02:23:24Z", "closed_at": "2017-07-12T12:02:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Please consider uploading a new release with the recent fixes introduced for Python 3.6. The latter is due to become the default Python in Debian, so it is essential that the package builds and tests properly with this version onwards.\r\n\r\nI'd also be interested in having both the docs and tests (#171) included in the source tarball uploaded on PyPI. PyPI is the preferred canonical location for Python source code on Debian.\r\n\r\nCheers, ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/172", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/172/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/172/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/172/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/172", "id": 238379411, "node_id": "MDU6SXNzdWUyMzgzNzk0MTE=", "number": 172, "title": "Add ability to specify custom QApplication subclass for qapp() fixture", "user": {"login": "timmwagener", "id": 2694225, "node_id": "MDQ6VXNlcjI2OTQyMjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2694225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timmwagener", "html_url": "https://github.com/timmwagener", "followers_url": "https://api.github.com/users/timmwagener/followers", "following_url": "https://api.github.com/users/timmwagener/following{/other_user}", "gists_url": "https://api.github.com/users/timmwagener/gists{/gist_id}", "starred_url": "https://api.github.com/users/timmwagener/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timmwagener/subscriptions", "organizations_url": "https://api.github.com/users/timmwagener/orgs", "repos_url": "https://api.github.com/users/timmwagener/repos", "events_url": "https://api.github.com/users/timmwagener/events{/privacy}", "received_events_url": "https://api.github.com/users/timmwagener/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-06-25T13:02:06Z", "updated_at": "2020-01-01T16:14:40Z", "closed_at": "2017-06-25T16:16:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Add ability to specify custom `QApplication` subclass for `qapp()` fixture\r\n:information_source: _I didn't find any guide on that in the docs or a related/answered issue, so I'm opening up one anew about this._\r\n\r\n#### Proposal in a nutshell\r\n\r\n---\r\nMany Pyside projects seem to implement their own custom `QApplication` subclasses to handle project specific setup. It would be great if the `qapp()` fixture could be customized with a `QApplication` subclass type that is then used for instantiation instead of the default `QtGui.QApplication`.\r\n\r\n#### Pseudo-code mockup\r\n\r\n---\r\nA quick peak into the source code makes me believe that maybe some edits in `qt_compat._QtApi` might do the trick. _(However, maybe that's too easy...)_. Here is some quick pseudo-code:\r\n```python\r\n# qt_compat.py\r\n\r\nclass _QtApi:\r\n\r\n    ...\r\n\r\n    def _get_qt_application_from_pytest_configuration(self):\r\n        \"\"\"Pseudo-code. Reads standard import path as configuration parameter\r\n        from pytest.ini. Returns None if no parameter specified.\r\n\r\n        Example:\r\n            # pytest.ini\r\n            ...\r\n            [pytest-qt]\r\n            CustomQApplication = myproject.ui.core.custom_application:CustomQApplication\r\n            ...\r\n        \"\"\"\r\n        return pytest.get_value_from_config(\"CustomQApplication\")\r\n\r\n    def get_custom_qt_application_class(self):\r\n        \"\"\"Pseudo-code\"\"\"\r\n\r\n        qapplication_config_value = self._get_qt_application_from_pytest_configuration()\r\n\r\n        # config value not set\r\n        if (qapplication_config_value is None):\r\n            raise KeyError(\"No custom QApplication specified\")\r\n\r\n        # config value wrong\r\n        if (isinstance(qapplication_config_value, basestring) is False):\r\n            raise ValueError(\"Custom QApplication specified with wrong format\")\r\n\r\n        # check correct syntax (path.x.y:class_name)\r\n\r\n        # possibly more checks...\r\n\r\n        # extract import path and qapplication class name\r\n        import_path, application_class_name = qapplication_config_value.split(\":\")\r\n\r\n        # import, check and return\r\n        _module = __import__(import_path, globals(), locals(), [application_class_name], 0)\r\n        application_class = getattr(_module, application_class_name)\r\n        assert issubclass(application_class, self.QApplication)\r\n        \r\n        return application_class\r\n\r\n    def set_qt_api(self, api):\r\n        \r\n        ...\r\n\r\n            self.extract_from_variant = extract_from_variant\r\n            self.make_variant = make_variant\r\n\r\n        # exchange custom QApplication at the end\r\n        try:\r\n            custom_application_class = self.get_custom_qt_application_class()\r\n        except KeyError:\r\n            pass\r\n        except (ValueError, ImportError, AssertionError, ) as  exception_instance:\r\n            msg = \"Error loading custom QApplication, using default. ({0})\"\r\n            msg = msg.format(exception_instance)\r\n            raise RuntimeError(msg)\r\n        else:\r\n            self.QApplication = custom_application_class\r\n\r\n\r\n\r\nqt_api = _QtApi()\r\n```\r\n#### Notes\r\n\r\n---\r\n* Does this seem feasible?\r\n* Did I miss some obvious way, how it should be done? Some hooks or such?\r\n* Is this something that points to a design flaw, when widgets are coupled tightly with custom `QApplication` classes? However I think it is a pretty common pattern to store globally accessable state/handlers on the qApp.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/171", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/171/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/171/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/171", "id": 231668898, "node_id": "MDU6SXNzdWUyMzE2Njg4OTg=", "number": 171, "title": "Include 'tests' directory in PyPI sdist", "user": {"login": "nicoddemus", "id": 1085180, "node_id": "MDQ6VXNlcjEwODUxODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1085180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicoddemus", "html_url": "https://github.com/nicoddemus", "followers_url": "https://api.github.com/users/nicoddemus/followers", "following_url": "https://api.github.com/users/nicoddemus/following{/other_user}", "gists_url": "https://api.github.com/users/nicoddemus/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicoddemus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicoddemus/subscriptions", "organizations_url": "https://api.github.com/users/nicoddemus/orgs", "repos_url": "https://api.github.com/users/nicoddemus/repos", "events_url": "https://api.github.com/users/nicoddemus/events{/privacy}", "received_events_url": "https://api.github.com/users/nicoddemus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-26T16:03:34Z", "updated_at": "2017-07-12T11:13:52Z", "closed_at": "2017-07-12T11:13:52Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This enables us to test the conda package more thoroughly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/170", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/170/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/170/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/170/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/170", "id": 228115498, "node_id": "MDU6SXNzdWUyMjgxMTU0OTg=", "number": 170, "title": "InvocationError when testing via tox but not via pytest called directly", "user": {"login": "ixjlyons", "id": 943602, "node_id": "MDQ6VXNlcjk0MzYwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/943602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ixjlyons", "html_url": "https://github.com/ixjlyons", "followers_url": "https://api.github.com/users/ixjlyons/followers", "following_url": "https://api.github.com/users/ixjlyons/following{/other_user}", "gists_url": "https://api.github.com/users/ixjlyons/gists{/gist_id}", "starred_url": "https://api.github.com/users/ixjlyons/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ixjlyons/subscriptions", "organizations_url": "https://api.github.com/users/ixjlyons/orgs", "repos_url": "https://api.github.com/users/ixjlyons/repos", "events_url": "https://api.github.com/users/ixjlyons/events{/privacy}", "received_events_url": "https://api.github.com/users/ixjlyons/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-05-11T20:44:35Z", "updated_at": "2018-04-16T13:04:37Z", "closed_at": "2017-05-31T21:54:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've set up a minimally reproducible example as a repo [here](https://github.com/ixjlyons/qtbottest). The README explains how I've invoked the test using pytest directly and with tox, and I can't figure out why it doesn't work with tox.\r\n\r\nIf I've made an obvious error in my tox.ini somewhere, I'd appreciate finding out what to fix. [This](https://github.com/tox-dev/tox/blob/2b2a51f8cd845fb6df3f87bb6e83f3e9cc72ab28/tox/session.py#L199) is the only place in the tox code that prints out the `InvocationError` without any other information except the command in question (what I'm seeing).\r\n\r\nIt should also be noted that I can run pytest-qt's tests with tox just fine. Also, if I comment out the test function's contents and remove the use of the `qtbot` fixture, the test runs fine with tox.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/169", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/169/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/169/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/169/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/169", "id": 226664231, "node_id": "MDU6SXNzdWUyMjY2NjQyMzE=", "number": 169, "title": "Error in checking hasIndex()", "user": {"login": "white-cold", "id": 1110533, "node_id": "MDQ6VXNlcjExMTA1MzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1110533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/white-cold", "html_url": "https://github.com/white-cold", "followers_url": "https://api.github.com/users/white-cold/followers", "following_url": "https://api.github.com/users/white-cold/following{/other_user}", "gists_url": "https://api.github.com/users/white-cold/gists{/gist_id}", "starred_url": "https://api.github.com/users/white-cold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/white-cold/subscriptions", "organizations_url": "https://api.github.com/users/white-cold/orgs", "repos_url": "https://api.github.com/users/white-cold/repos", "events_url": "https://api.github.com/users/white-cold/events{/privacy}", "received_events_url": "https://api.github.com/users/white-cold/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-05-05T19:04:36Z", "updated_at": "2017-05-05T21:11:59Z", "closed_at": "2017-05-05T20:56:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm testing a QAbstractListModel, and pytest gives an error in the hasIndex function, which is not reimplemented.\r\n```\r\nself = <pytestqt.modeltest.ModelTester object at 0x105651588>\r\n\r\n    def _test_has_index(self):\r\n        \"\"\"Test model's implementation of hasIndex().\r\n    \r\n            hasIndex() is tested more extensively in _check_children(),\r\n            but this catches the big mistakes.\r\n            \"\"\"\r\n        # Make sure that invalid values return an invalid index\r\n        assert not self._model.hasIndex(-2, -2)\r\n        assert not self._model.hasIndex(-2, 0)\r\n        assert not self._model.hasIndex(0, -2)\r\n    \r\n        rows = self._model.rowCount()\r\n        columns = self._column_count()\r\n    \r\n        # check out of bounds\r\n        assert not self._model.hasIndex(rows, columns)\r\n        assert not self._model.hasIndex(rows + 1, columns + 1)\r\n    \r\n        if rows > 0:\r\n>           assert self._model.hasIndex(0, 0)\r\nE           assert False\r\nE            +  where False = <built-in method hasIndex of UserModel object at 0x105646f78>(0, 0)\r\nE            +    where <built-in method hasIndex of UserModel object at 0x105646f78> = <UserModel.UserModel object at 0x105646f78>.hasIndex\r\nE            +      where <UserModel.UserModel object at 0x105646f78> = <pytestqt.modeltest.ModelTester object at 0x105651588>._model\r\n\r\n/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/pytestqt/modeltest.py:252: AssertionError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/166", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/166/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/166/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/166/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/166", "id": 205599015, "node_id": "MDU6SXNzdWUyMDU1OTkwMTU=", "number": 166, "title": "AttributeError: '_QtApi' object has no attribute 'QtCore'", "user": {"login": "ghisvail", "id": 1964655, "node_id": "MDQ6VXNlcjE5NjQ2NTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1964655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghisvail", "html_url": "https://github.com/ghisvail", "followers_url": "https://api.github.com/users/ghisvail/followers", "following_url": "https://api.github.com/users/ghisvail/following{/other_user}", "gists_url": "https://api.github.com/users/ghisvail/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghisvail/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghisvail/subscriptions", "organizations_url": "https://api.github.com/users/ghisvail/orgs", "repos_url": "https://api.github.com/users/ghisvail/repos", "events_url": "https://api.github.com/users/ghisvail/events{/privacy}", "received_events_url": "https://api.github.com/users/ghisvail/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2017-02-06T14:26:41Z", "updated_at": "2017-02-08T14:28:09Z", "closed_at": "2017-02-08T14:28:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Running:\r\n```\r\nfrom pytestqt.qt_compat import qt_api\r\nprint(qt_api.QtCore)\r\n```\r\nresults in the following error:\r\n```\r\nAttributeError: '_QtApi' object has no attribute 'QtCore'\r\n```\r\n\r\nThis error arises when `pytest` collects the test cases from `tests/test_modeltest.py`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/163", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/163/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/163/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/163", "id": 185251606, "node_id": "MDU6SXNzdWUxODUyNTE2MDY=", "number": 163, "title": "Automatic deploy is not uploading wheels", "user": {"login": "nicoddemus", "id": 1085180, "node_id": "MDQ6VXNlcjEwODUxODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1085180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicoddemus", "html_url": "https://github.com/nicoddemus", "followers_url": "https://api.github.com/users/nicoddemus/followers", "following_url": "https://api.github.com/users/nicoddemus/following{/other_user}", "gists_url": "https://api.github.com/users/nicoddemus/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicoddemus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicoddemus/subscriptions", "organizations_url": "https://api.github.com/users/nicoddemus/orgs", "repos_url": "https://api.github.com/users/nicoddemus/repos", "events_url": "https://api.github.com/users/nicoddemus/events{/privacy}", "received_events_url": "https://api.github.com/users/nicoddemus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-10-25T22:32:37Z", "updated_at": "2017-07-12T12:02:09Z", "closed_at": "2017-07-12T12:02:09Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I just implemented the same technique used in `pytest-xdist` to publish `pytest-qt` and noticed that it did not upload wheels as expected.\n\nLooking at the [deployment output](https://travis-ci.org/pytest-dev/pytest-qt/jobs/170608219) from the build triggered by the tag I noticed this right `sdist` has been uploaded:\n\n```\nrunning upload_docs\ncreating build\ncreating build/docs\nerror: no files found in upload directory 'build/docs'\n```\n\nThis is a known issue (travis-ci/dpl#334) with Travis deployment on PyPI and there's even travis-ci/dpl#349 with a fix, but that PR seems somewhat abandoned.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/160", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/160/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/160/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/160/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/160", "id": 183833634, "node_id": "MDU6SXNzdWUxODM4MzM2MzQ=", "number": 160, "title": "Failure on travis: waitActive time-outs", "user": {"login": "nicoddemus", "id": 1085180, "node_id": "MDQ6VXNlcjEwODUxODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1085180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicoddemus", "html_url": "https://github.com/nicoddemus", "followers_url": "https://api.github.com/users/nicoddemus/followers", "following_url": "https://api.github.com/users/nicoddemus/following{/other_user}", "gists_url": "https://api.github.com/users/nicoddemus/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicoddemus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicoddemus/subscriptions", "organizations_url": "https://api.github.com/users/nicoddemus/orgs", "repos_url": "https://api.github.com/users/nicoddemus/repos", "events_url": "https://api.github.com/users/nicoddemus/events{/privacy}", "received_events_url": "https://api.github.com/users/nicoddemus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-10-19T00:02:20Z", "updated_at": "2016-10-26T10:59:05Z", "closed_at": "2016-10-26T10:59:05Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "`test_wait_window` for `waitActive` on the `py34-qt5` environment on Travis fails with:\n\n```\n=================================== FAILURES ===================================\n______________________ test_wait_window[waitActive-True] _______________________\nshow = True, method_name = 'waitActive'\nqtbot = <pytestqt.qtbot.QtBot object at 0x7ff758477780>\n    @pytest.mark.parametrize('show', [True, False])\n    @pytest.mark.parametrize('method_name', ['waitExposed', 'waitActive'])\n    def test_wait_window(show, method_name, qtbot):\n        \"\"\"\n        Using one of the wait-widget methods should not raise anything if the widget\n        is properly displayed, otherwise should raise a TimeoutError.\n        \"\"\"\n        method = getattr(qtbot, method_name)\n        if qt_api.pytest_qt_api != 'pyqt5':\n            with pytest.raises(RuntimeError) as exc_info:\n                with method(None, None):\n                    pass\n            assert str(exc_info.value) == 'Available in PyQt5 only'\n        else:\n            widget = qt_api.QLineEdit()\n            qtbot.add_widget(widget)\n            if show:\n                with method(widget, timeout=1000):\n                    widget.move(100, 100)\n                    widget.resize(100, 100)\n                    widget.setFocus()\n>                   widget.show()\nE                   pytestqt.qtbot.TimeoutError: widget <PyQt5.QtWidgets.QLineEdit object at 0x7ff7584cb828> not activated in 1000 ms.\n```\n\nIt was tried to move and resize the window based on the docs for `qWaitForWindowActive`:\n\n``` c++\n    inline static bool qWaitForWindowActive(QWindow *window, int timeout = 5000)\n    {\n        QElapsedTimer timer;\n        timer.start();\n        while (!window->isActive()) {\n            int remaining = timeout - int(timer.elapsed());\n            if (remaining <= 0)\n                break;\n            QCoreApplication::processEvents(QEventLoop::AllEvents, remaining);\n            QCoreApplication::sendPostedEvents(0, QEvent::DeferredDelete);\n            QTest::qSleep(10);\n        }\n        // Try ensuring the platform window receives the real position.\n        // (i.e. that window->pos() reflects reality)\n        // isActive() ( == FocusIn in case of X) does not guarantee this. It seems some WMs randomly\n        // send the final ConfigureNotify (the one with the non-bogus 0,0 position) after the FocusIn.\n        // If we just let things go, every mapTo/FromGlobal call the tests perform directly after\n        // qWaitForWindowShown() will generate bogus results.\n        if (window->isActive()) {\n            int waitNo = 0; // 0, 0 might be a valid position after all, so do not wait for ever\n            while (window->position().isNull()) {\n                if (waitNo++ > timeout / 10)\n                    break;\n                qWait(10);\n            }\n        }\n        return window->isActive();\n    }\n\n```\n\nBut so far no good.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/158", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/158/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/158/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/158/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/158", "id": 177161014, "node_id": "MDU6SXNzdWUxNzcxNjEwMTQ=", "number": 158, "title": "waitForWindowShown doesn't handle timeout", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-15T12:17:51Z", "updated_at": "2016-10-19T00:07:59Z", "closed_at": "2016-10-19T00:07:58Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Qt's [`qWaitForWindowShown`](https://doc.qt.io/qt-5/qtest-obsolete.html#qWaitForWindowShown) (or [`qWaitForWindowExposed`](https://doc.qt.io/qt-5/qtest.html#qWaitForWindowExposed) which supersedes it since Qt 5.0) has a `timeout` argument, and returns a `bool` saying if the waiting has timed out or not.\n\npytest-qt's wrapper over it doesn't have the `timeout` argument, discards the return value and doesn't raise an exception either in case there was a timeout.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/156", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/156/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/156/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/156/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/156", "id": 171718925, "node_id": "MDU6SXNzdWUxNzE3MTg5MjU=", "number": 156, "title": "qtbot.waitCallback", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-17T17:48:17Z", "updated_at": "2018-09-22T21:05:59Z", "closed_at": "2018-09-22T21:05:59Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I think we talked about this but never really opened an issue.\n\nI generalized by code in qutebrowser a bit today:\n\n``` python\nclass CallbackChecker(QObject):\n\n    \"\"\"Check if a value provided by a callback is the expected one.\"\"\"\n\n    got_result = pyqtSignal(object)\n    UNSET = object()\n\n    def __init__(self, qtbot, parent=None):\n        super().__init__(parent)\n        self._qtbot = qtbot\n        self._result = self.UNSET\n\n    def callback(self, result):\n        self._result = result\n        self.got_result.emit(result)\n\n    def check(self, expected):\n        if self._result is self.UNSET:\n            with self._qtbot.waitSignal(self.got_result):\n                pass\n        assert self._result == expected\n\n\n@pytest.fixture\ndef callback_checker(qtbot):\n    return CallbackChecker(qtbot)\n```\n\nExample usage:\n\n``` python\ndef test_foo(callback_checker, webengineview)\n    expected = 2\n    webengineview.page().runJavaScript('1 + 1', callback_checker.callback)\n    callback_checker.check(expected)\n```\n\nNext step would be to add this to pytest-qt, which I'll hopefully do soon\u2122\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/154", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/154/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/154/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/154", "id": 171645145, "node_id": "MDU6SXNzdWUxNzE2NDUxNDU=", "number": 154, "title": "Allow to capture Qt virtual method exceptions in a block", "user": {"login": "fogo", "id": 1321318, "node_id": "MDQ6VXNlcjEzMjEzMTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1321318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fogo", "html_url": "https://github.com/fogo", "followers_url": "https://api.github.com/users/fogo/followers", "following_url": "https://api.github.com/users/fogo/following{/other_user}", "gists_url": "https://api.github.com/users/fogo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fogo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fogo/subscriptions", "organizations_url": "https://api.github.com/users/fogo/orgs", "repos_url": "https://api.github.com/users/fogo/repos", "events_url": "https://api.github.com/users/fogo/events{/privacy}", "received_events_url": "https://api.github.com/users/fogo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-17T12:28:49Z", "updated_at": "2016-08-17T18:13:13Z", "closed_at": "2016-08-17T18:13:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently it is possible to do this already, but it requires importing some modules that probably would be better left hidden. I guess allowing code like example below be created using just public `qtbot` interface would be better.\n\n``` python\n@pytest.mark.qt_no_exception_capture\ndef test_foo(qtbot):\n    from PyQt5.QtCore import pyqtSignal\n    from PyQt5.QtWidgets import QWidget\n\n    class FooWidget(QWidget):\n\n        on_event = pyqtSignal()\n\n    widget = FooWidget()\n    qtbot.addWidget(widget)\n\n    def raise_on_event():\n        raise RuntimeError(\"ops\")\n\n    widget.on_event.connect(raise_on_event)\n\n    from pytestqt.plugin import capture_exceptions\n    with capture_exceptions() as exceptions:\n        widget.on_event.emit()\n\n    assert len(exceptions) == 1\n    assert exceptions[0][1].message == \"ops\"\n```\n\nI can create the PR myself if you just guide me how you'd prefer this to be implemented.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/151", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/151/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/151/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/151", "id": 169098949, "node_id": "MDU6SXNzdWUxNjkwOTg5NDk=", "number": 151, "title": "Improve waitSignal/waitSignals TimeoutError messages and catch arguments", "user": {"login": "MShekow", "id": 10126618, "node_id": "MDQ6VXNlcjEwMTI2NjE4", "avatar_url": "https://avatars2.githubusercontent.com/u/10126618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MShekow", "html_url": "https://github.com/MShekow", "followers_url": "https://api.github.com/users/MShekow/followers", "following_url": "https://api.github.com/users/MShekow/following{/other_user}", "gists_url": "https://api.github.com/users/MShekow/gists{/gist_id}", "starred_url": "https://api.github.com/users/MShekow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MShekow/subscriptions", "organizations_url": "https://api.github.com/users/MShekow/orgs", "repos_url": "https://api.github.com/users/MShekow/repos", "events_url": "https://api.github.com/users/MShekow/events{/privacy}", "received_events_url": "https://api.github.com/users/MShekow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-08-03T10:27:49Z", "updated_at": "2016-09-16T00:08:13Z", "closed_at": "2016-09-16T00:08:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. I've started thinking about implementing these 2 features (as they are closely related). Originally @nicoddemus [suggested](https://github.com/pytest-dev/pytest-qt/pull/141/#discussion_r70916993) that `SignalBlocker` could show the following message:\n\n```\nTimeoutError:  `text_received` emitted with ['WAIT_CLIENTS', 'PROCESSING'] \nbut did not satisfy the `is_disconnected` callback.\n```\n\nI investigated a bit and it seems that it's not possible to get the actual name of the signal (here: `text_received`) within `SignalBlocker`. The reason is that Signal objects don't have a `__name__` attribute. PyQt4/5 signals have an internal `signal` field which contains the name of the signal itself, prefixed with a `'2'` (don't ask me why, I'll ask in the pyqt mailing list), whereas PySide signals have no attributes at all, their `str()` representation is just something like `<PySide.QtCore.SignalInstance object at 0x05D82880>`.\n\nI'm not sure how to continue now. For `SignalBlocker` it's not much of an issue, as the `wait()` call of the blocker expects just one signal anyway, and the code line number in the stack trace of a failed test will allow the test engineer to figure out which signal exactly failed.\n\nHowever, I'd also like to add this feature to `MultiSignalBlocker`. Here it would be nice to have a human-readable form of all caught signals, including their parameters. From what we currently know, it wouldn't be possible to get the name of the emitted signals.\n\nAfter a bit more digging, I found that there could be a solution, if we can get `_AbstractSignalBlocker` to inherit from `QObject`. Because then we can get the signal by getting the signal's sender and iterating over its attributes, as follows:\n\n```\n# the following code (Python 3) works when placed inside SignalBlocker._quit_loop_by_signal() and\n# you manually change that _AbstractSignalBlocker inherits from QObject of some Qt framework\ndef get_signal_name():\n    sender = self.sender()\n    possible_signal_names = [possible_signal_name for possible_signal_name in sender.__dict__]\n    if not possible_signal_names:\n        # e.g. PyQt5 has an empty __dict__ for some reason...\n        possible_signal_names = dir(self.sender())\n    for possible_signal_name in possible_signal_names:\n        possible_signal = getattr(sender, possible_signal_name, None)\n        if possible_signal and str(self._signals[0]) == str(possible_signal):\n            return possible_signal_name\n    return \"UNKNOWN SIGNAL\"\n```\n\nIs there a way to have `_AbstractSignalBlocker` inherit from the configuration-specific QObject implementation?\n\nCheers!\nMarius\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/148", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/148/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/148/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/148", "id": 168688549, "node_id": "MDU6SXNzdWUxNjg2ODg1NDk=", "number": 148, "title": "version 2.0.0 breaks pyqt4 api v2", "user": {"login": "montefra", "id": 1394820, "node_id": "MDQ6VXNlcjEzOTQ4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1394820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/montefra", "html_url": "https://github.com/montefra", "followers_url": "https://api.github.com/users/montefra/followers", "following_url": "https://api.github.com/users/montefra/following{/other_user}", "gists_url": "https://api.github.com/users/montefra/gists{/gist_id}", "starred_url": "https://api.github.com/users/montefra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/montefra/subscriptions", "organizations_url": "https://api.github.com/users/montefra/orgs", "repos_url": "https://api.github.com/users/montefra/repos", "events_url": "https://api.github.com/users/montefra/events{/privacy}", "received_events_url": "https://api.github.com/users/montefra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-08-01T16:35:37Z", "updated_at": "2016-10-19T00:08:34Z", "closed_at": "2016-10-19T00:08:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Running tests via tox with pytest-qt==2.0.0 with pyqt4 and api v2 gives me:\n\n> py27 runtests: commands[1] | py.test\n> INTERNALERROR> Traceback (most recent call last):\n> INTERNALERROR>   File \"/.../.tox/py27/local/lib/python2.7/site-packages/_pytest/main.py\", line 90, in wrap_session\n> INTERNALERROR>     config._do_configure()\n> INTERNALERROR>   File \"/.../.tox/py27/local/lib/python2.7/site-packages/_pytest/config.py\", line 839, in _do_configure\n> INTERNALERROR>     self.hook.pytest_configure.call_historic(kwargs=dict(config=self))\n> INTERNALERROR>   File \"/.../.tox/py27/local/lib/python2.7/site-packages/_pytest/vendored_packages/pluggy.py\", line 729, in call_historic\n> INTERNALERROR>     self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\n> INTERNALERROR>   File \"/.../.tox/py27/local/lib/python2.7/site-packages/_pytest/vendored_packages/pluggy.py\", line 338, in _hookexec\n> INTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\n> INTERNALERROR>   File \"/.../.tox/py27/local/lib/python2.7/site-packages/_pytest/vendored_packages/pluggy.py\", line 333, in <lambda>\n> INTERNALERROR>     _MultiCall(methods, kwargs, hook.spec_opts).execute()\n> INTERNALERROR>   File \"/.../.tox/py27/local/lib/python2.7/site-packages/_pytest/vendored_packages/pluggy.py\", line 596, in execute\n> INTERNALERROR>     res = hook_impl.function(*args)\n> INTERNALERROR>   File \"/.../.tox/py27/local/lib/python2.7/site-packages/pytestqt/plugin.py\", line 167, in pytest_configure\n> INTERNALERROR>     qt_api.set_qt_api(config.getini('qt_api'))\n> INTERNALERROR>   File \"/.../.tox/py27/local/lib/python2.7/site-packages/pytestqt/qt_compat.py\", line 74, in set_qt_api\n> INTERNALERROR>     sip.setapi(\"QDate\", 2)\n> INTERNALERROR> ValueError: API 'QDate' has already been set to version 1\n> ERROR: InvocationError: '/.../.tox/py27/bin/py.test'\n\nVersion 1.11.0 runs correctly.\n\nAccording to git bisects the offending commit is:\n\n commit aaada5b98b3b15611f63d2d85a4ef18ba349c09c\nAuthor: Bruno Oliveira nicoddemus@gmail.com\nDate:   Thu May 12 20:19:54 2016 -0300\n\n```\nQt API lazy load in qt_compat and qt_api config option\n\nFix #129\n```\n\nI think that the problem is that now PyQt4 is loaded before setting the API version. This is a problems only for PyQt4 under python2, but unfortunatly I have it's a combination I have to provide.\n\nFor the moment I'll fix the required version to pytest-qt to <= 1.11. If I have I'll try to figure out the issue.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/147", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/147/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/147/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/147", "id": 168302104, "node_id": "MDU6SXNzdWUxNjgzMDIxMDQ=", "number": 147, "title": "Missing bits from pytest-qt 2.0 docs", "user": {"login": "nicoddemus", "id": 1085180, "node_id": "MDQ6VXNlcjEwODUxODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1085180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicoddemus", "html_url": "https://github.com/nicoddemus", "followers_url": "https://api.github.com/users/nicoddemus/followers", "following_url": "https://api.github.com/users/nicoddemus/following{/other_user}", "gists_url": "https://api.github.com/users/nicoddemus/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicoddemus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicoddemus/subscriptions", "organizations_url": "https://api.github.com/users/nicoddemus/orgs", "repos_url": "https://api.github.com/users/nicoddemus/repos", "events_url": "https://api.github.com/users/nicoddemus/events{/privacy}", "received_events_url": "https://api.github.com/users/nicoddemus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-07-29T11:06:45Z", "updated_at": "2016-10-19T00:08:52Z", "closed_at": "2016-10-19T00:08:52Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "@The-Compiler \n\n>  I'm a bit late, but I just realised check_params_cb and order aren't mentioned in the signal docs at all, and order isn't even in the changelog.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/144", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/144/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/144/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/144", "id": 167187014, "node_id": "MDU6SXNzdWUxNjcxODcwMTQ=", "number": 144, "title": "Make qtbot an invocation-scoped fixture", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-23T14:39:53Z", "updated_at": "2018-09-23T01:22:18Z", "closed_at": "2018-09-23T01:22:12Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I need to use `qtbot.waitSignal` from a session-scoped fixture in some places - so now that we have invocation scoped fixtures in pytest, I guess `qtbot` could be one?\n\nThere are some methods using `self._request.node` though - I guess they could just be disallowed when not using function-scope?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/143", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/143/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/143/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/143/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/143", "id": 165932113, "node_id": "MDU6SXNzdWUxNjU5MzIxMTM=", "number": 143, "title": "Pytest hanging when qtbot fixture is used", "user": {"login": "GandaG", "id": 10326223, "node_id": "MDQ6VXNlcjEwMzI2MjIz", "avatar_url": "https://avatars3.githubusercontent.com/u/10326223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GandaG", "html_url": "https://github.com/GandaG", "followers_url": "https://api.github.com/users/GandaG/followers", "following_url": "https://api.github.com/users/GandaG/following{/other_user}", "gists_url": "https://api.github.com/users/GandaG/gists{/gist_id}", "starred_url": "https://api.github.com/users/GandaG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GandaG/subscriptions", "organizations_url": "https://api.github.com/users/GandaG/orgs", "repos_url": "https://api.github.com/users/GandaG/repos", "events_url": "https://api.github.com/users/GandaG/events{/privacy}", "received_events_url": "https://api.github.com/users/GandaG/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-16T14:43:46Z", "updated_at": "2016-07-16T19:32:07Z", "closed_at": "2016-07-16T19:32:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "It simply [hangs](http://goo.gl/BXrBzW).\n\nI'm in cygwin, under vagrant. The command used, inv test, is an invoke command (a normal py.test command was also used, still hangs) that is pretty much a shortcut to a larger py.test command. The relevant function is here:\n\n```\n@task\ndef clean_test():\n    from shutil import rmtree\n\n    rmtree(\"htmlcov\", ignore_errors=True)\n    print(\"Test caches cleaned.\")\n\n\n@task(clean_test)\ndef test():\n    from os import system\n\n    system(\"py.test --cov=designer --cov-report html --cov-report term -vv tests/\")\n```\n\nThe test function that is being stalled is this:\n\n```\ndef test_qt(qtbot):\n    assert 0\n```\n\nAm I doing something wrong?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/134", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/134/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/134/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/134", "id": 162273092, "node_id": "MDU6SXNzdWUxNjIyNzMwOTI=", "number": 134, "title": "Change license to MIT?", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/milestones/1", "html_url": "https://github.com/pytest-dev/pytest-qt/milestone/1", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/milestones/1/labels", "id": 1848091, "node_id": "MDk6TWlsZXN0b25lMTg0ODA5MQ==", "number": 1, "title": "2.0", "description": "", "creator": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2016-06-25T08:55:57Z", "updated_at": "2018-01-05T00:00:14Z", "due_on": null, "closed_at": "2018-01-05T00:00:14Z"}, "comments": 6, "created_at": "2016-06-25T09:38:12Z", "updated_at": "2016-06-27T05:22:26Z", "closed_at": "2016-06-27T05:22:26Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "@nicoddemus and I would like to change the license of pytest-qt to MIT for the upcoming 2.0 release, which means all contributors have to agree.\n\nCould you please either :+1: this comment or add a new comment if you're okay with that?\n- [x] @fabioz \n- [x] @montefra\n- [x] @jdreaver\n- [x] @snorfalorpagus\n- [x] @gqmelo\n- [x] @estan\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/129", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/129/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/129/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/129", "id": 153989578, "node_id": "MDU6SXNzdWUxNTM5ODk1Nzg=", "number": 129, "title": "Configuring Qt API in pytest.ini", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/milestones/1", "html_url": "https://github.com/pytest-dev/pytest-qt/milestone/1", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/milestones/1/labels", "id": 1848091, "node_id": "MDk6TWlsZXN0b25lMTg0ODA5MQ==", "number": 1, "title": "2.0", "description": "", "creator": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2016-06-25T08:55:57Z", "updated_at": "2018-01-05T00:00:14Z", "due_on": null, "closed_at": "2018-01-05T00:00:14Z"}, "comments": 3, "created_at": "2016-05-10T12:02:28Z", "updated_at": "2016-07-28T23:14:01Z", "closed_at": "2016-07-28T23:14:01Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In `#pylib` I discussed with @estan if there's some good way to configure `PYTEST_QT_API` in a way which doesn't require passing it on the commandline, for cases where you always need it to be e.g. `pyqt5`.\n\nUnfortunately using [pytest-env](https://github.com/MobileDynasty/pytest-env) doesn't work as it uses `pytest_load_initial_conftestst` which will be run after `pytest-qt` is already imported.\n\nOne possibility would be to change `pytest-qt` so it reads the API version from `pytest.ini`. This should be doable but is probably quite painful, as it reqires delaying any imports from `qt_compat` until after `pytest_load_initial_conftests` (i.e. moving a lot of imports inside functions...).\n\nAnother possibility would be to add an `env` option to pytest's core, but pytest would need to read it (and set the environment variables) before any plugins are loaded...\n\nAlternatively `pytest-qt` could search a `pytestqt.ini` or so in the current directory, but that'd also break in various circumstances and isn't really nice either.\n\nWhat do you think?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/128", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/128/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/128/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/128", "id": 149684418, "node_id": "MDU6SXNzdWUxNDk2ODQ0MTg=", "number": 128, "title": "Assert none of a set of signals are emitted", "user": {"login": "estan", "id": 86675, "node_id": "MDQ6VXNlcjg2Njc1", "avatar_url": "https://avatars3.githubusercontent.com/u/86675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estan", "html_url": "https://github.com/estan", "followers_url": "https://api.github.com/users/estan/followers", "following_url": "https://api.github.com/users/estan/following{/other_user}", "gists_url": "https://api.github.com/users/estan/gists{/gist_id}", "starred_url": "https://api.github.com/users/estan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estan/subscriptions", "organizations_url": "https://api.github.com/users/estan/orgs", "repos_url": "https://api.github.com/users/estan/repos", "events_url": "https://api.github.com/users/estan/events{/privacy}", "received_events_url": "https://api.github.com/users/estan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-04-20T07:34:11Z", "updated_at": "2016-04-20T07:57:42Z", "closed_at": "2016-04-20T07:57:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'd like to be able to assert that none of a set of signals are emitted, so it would be nice if `qtbot.assertNotEmitted` could take a list. Or is there some API for this I'm missing?\n\nAt the moment I'm doing\n\n``` python\ndef test_set_name_same():\n    project = Project()\n    project.setName('Some name')\n\n    assert project.name() == 'Some name'\n\n    spies = [\n        QSignalSpy(project.nameChanged),\n        QSignalSpy(project.changed)\n    ]\n\n    project.setName('Some name')\n\n    assert project.name() == 'Some name'\n    assert all(map(lambda spy: len(spy) == 0, spies))\n```\n\nBut the failure message for the assert on `all` is not very nice.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/125", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/125/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/125/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/125", "id": 144041385, "node_id": "MDU6SXNzdWUxNDQwNDEzODU=", "number": 125, "title": "How to test QML Components?", "user": {"login": "Siecje", "id": 4069476, "node_id": "MDQ6VXNlcjQwNjk0NzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4069476?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Siecje", "html_url": "https://github.com/Siecje", "followers_url": "https://api.github.com/users/Siecje/followers", "following_url": "https://api.github.com/users/Siecje/following{/other_user}", "gists_url": "https://api.github.com/users/Siecje/gists{/gist_id}", "starred_url": "https://api.github.com/users/Siecje/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Siecje/subscriptions", "organizations_url": "https://api.github.com/users/Siecje/orgs", "repos_url": "https://api.github.com/users/Siecje/repos", "events_url": "https://api.github.com/users/Siecje/events{/privacy}", "received_events_url": "https://api.github.com/users/Siecje/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-03-28T18:07:34Z", "updated_at": "2016-05-16T19:43:31Z", "closed_at": "2016-05-16T19:43:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm wondering how you would test a QML application. Here is how I am creating my QML application. What should I call on qtbot?\n\n``` Python\nclass UsersManager(QtCore.QObject):\n    users = QtCore.pyqtSignal(QtCore.QVariant)\n\n    @QtCore.pyqtSlot()\n    def LoadUsers(self):\n        def thread():\n            users = FetchUsers()\n            self.users.emit(users)\n\n        threading.Thread(target=thread).start()\n\napp = QtGui.QGuiApplication(sys.argv)\nQtQml.qmlRegisterType(UsersManager, 'UsersManager', 1, 0, 'UsersManager')\nengine = QtQml.QQmlApplicationEngine(\"Main.qml\")\napp.exec_()\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/120", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/120/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/120/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/120", "id": 123008847, "node_id": "MDU6SXNzdWUxMjMwMDg4NDc=", "number": 120, "title": "Config to default to raising=True with waitSignal", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-18T19:12:02Z", "updated_at": "2016-01-07T23:22:52Z", "closed_at": "2016-01-07T23:22:52Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I'd like a config option to default to `raising=True` for `waitSignal`/`waitSignals`, as I often forget adding it :wink:\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/118", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/118/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/118/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/118", "id": 122671453, "node_id": "MDU6SXNzdWUxMjI2NzE0NTM=", "number": 118, "title": "Waiting for a signal with certain arguments", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 17, "created_at": "2015-12-17T06:33:43Z", "updated_at": "2016-10-19T00:09:14Z", "closed_at": "2016-10-19T00:09:14Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I have some scenarios where I'd like to do something like:\n\n``` python\nwith qtbot.waitSignal(got_line, args=['foo']):\n    ...\n```\n\nAnd qtbot would wait until the signal is emitted with exactly those args.\n\nI also have another case where I do some more sophisticated checking:\n\n``` python\n    spy = QSignalSpy(self.new_data)\n    elapsed_timer = QElapsedTimer()\n    elapsed_timer.start()\n\n    while True:\n        got_signal = spy.wait(timeout)\n        if not got_signal or elapsed_timer.hasExpired(timeout):\n            raise WaitForTimeout(\"Timed out after {}ms waiting for \"\n                                 \"{!r}.\".format(timeout, kwargs))\n\n        for args in spy:\n            assert len(args) == 1\n            line = args[0]\n\n            matches = []\n\n            for key, expected in kwargs.items():\n                value = getattr(line, key)\n                matches.append(self._match_data(value, expected))\n\n            if all(matches):\n                return line\n```\n\nI'm thinking if it makes sense or not to do something like:\n\n``` python\ndef check_args(*args):\n    return args == ['foo', 2342]\n\nwith qtbot.waitSignal(got_line, callback=check_args):\n    ...\n```\n\nThen `qtbot` will only stop waiting when the callback returned something true.\n\nMaybe `args` isn't even necessary then, as you could do:\n\n``` python\nwith qtbot.waitSignal(got_line, callback=lambda *args: args == ['foo']):\n    ...\n```\n\nWhat do you think? Neither? Only `args`? `args` and `callback`? Both?\n\n(edited to rename `arg_callback` to `callback` as it could be used to check other stuff as well.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/117", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/117/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/117/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/117", "id": 122668366, "node_id": "MDU6SXNzdWUxMjI2NjgzNjY=", "number": 117, "title": "MultiSignalBlocker.args", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2015-12-17T06:11:14Z", "updated_at": "2016-10-19T00:11:16Z", "closed_at": "2016-10-19T00:11:16Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "It actually would be nice to have an `.args` attribute for `MultiSignalBlocker` too, which is just a list of emitted argument lists, e.g. `[['foo', 2342], ['bar', 1234]]`.\n\nI'll work on this soon (I hope :laughing:)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/114", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/114/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/114/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/114", "id": 122436845, "node_id": "MDU6SXNzdWUxMjI0MzY4NDU=", "number": 114, "title": "Hang when exception is raised in _quit_loop_by_signal", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-12-16T06:10:31Z", "updated_at": "2015-12-16T13:59:06Z", "closed_at": "2015-12-16T13:59:06Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I haven't investigated that closely yet, thought I'd open an issue before I forget.\n\nWhen raising an exception in `_quit_loop_by_signal`:\n\n``` diff\ndiff --git a/pytestqt/wait_signal.py b/pytestqt/wait_signal.py\nindex c32a76c..7efc019 100644\n--- a/pytestqt/wait_signal.py\n+++ b/pytestqt/wait_signal.py\n@@ -111,6 +111,7 @@ class SignalBlocker(_AbstractSignalBlocker):\n         \"\"\"\n         quits the event loop and marks that we finished because of a signal.\n         \"\"\"\n+        raise Exception\n         self.signal_triggered = True\n         self._loop.quit()\n         self._cleanup()\n```\n\nThen pytest-qt's tests seem to hang:\n\n```\n$ tox -e py35-pyqt5 -- tests/test_wait_signal.py -v \n[...]\ntest_wait_signal.py::test_signal_blocker_exception PASSED\ntest_wait_signal.py::test_signal_triggered[200-None-True-wait_function0-True] \n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/112", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/112/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/112/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/112", "id": 118680146, "node_id": "MDU6SXNzdWUxMTg2ODAxNDY=", "number": 112, "title": "AttributeError: 'NoneType' object has no attribute '_loop'", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-11-24T19:00:44Z", "updated_at": "2016-05-10T12:06:06Z", "closed_at": "2016-05-10T12:06:06Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This is somewhat similar to #69 - I've seen this from time to time on Ubuntu Trusty (on Travis):\n\n```\n================ ERRORS ================\n ERROR at setup of TestGitStrSubprocess.test_real_git \nSETUP ERROR: Qt exceptions in virtual methods:\n________________________________________________________________________________\n  File \"/home/travis/build/The-Compiler/qutebrowser/.tox/unittests-nodisp/lib/python3.4/site-packages/pytestqt/wait_signal.py\", line 51, in _quit_loop_by_timeout\n    self._loop.quit()\nAttributeError: 'NoneType' object has no attribute '_loop'\n________________________________________________________________________________\n  File \"/home/travis/build/The-Compiler/qutebrowser/.tox/unittests-nodisp/lib/python3.4/site-packages/pytestqt/wait_signal.py\", line 51, in _quit_loop_by_timeout\n    self._loop.quit()\nAttributeError: 'NoneType' object has no attribute '_loop'\n________________________________________________________________________________\n  File \"/home/travis/build/The-Compiler/qutebrowser/.tox/unittests-nodisp/lib/python3.4/site-packages/pytestqt/wait_signal.py\", line 51, in _quit_loop_by_timeout\n    self._loop.quit()\nAttributeError: 'NoneType' object has no attribute '_loop'\n________________________________________________________________________________\n  File \"/home/travis/build/The-Compiler/qutebrowser/.tox/unittests-nodisp/lib/python3.4/site-packages/pytestqt/wait_signal.py\", line 51, in _quit_loop_by_timeout\n    self._loop.quit()\nAttributeError: 'NoneType' object has no attribute '_loop'\n________________________________________________________________________________\n  File \"/home/travis/build/The-Compiler/qutebrowser/.tox/unittests-nodisp/lib/python3.4/site-packages/pytestqt/wait_signal.py\", line 51, in _quit_loop_by_timeout\n    self._loop.quit()\nAttributeError: 'NoneType' object has no attribute '_loop'\n________________________________________________________________________________\n```\n\nRerunning the tests always made them pass so far...\n\nAny idea what could cause this? If not, what are your thoughts on working around this by adding a `if self._loop is None: return` in `_quit_loop_by_timeout`?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/109", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/109/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/109/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/109", "id": 114263070, "node_id": "MDU6SXNzdWUxMTQyNjMwNzA=", "number": 109, "title": "Raise RuntimeError instead of ImportError when neither PyQt or PySide are installed", "user": {"login": "nicoddemus", "id": 1085180, "node_id": "MDQ6VXNlcjEwODUxODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1085180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicoddemus", "html_url": "https://github.com/nicoddemus", "followers_url": "https://api.github.com/users/nicoddemus/followers", "following_url": "https://api.github.com/users/nicoddemus/following{/other_user}", "gists_url": "https://api.github.com/users/nicoddemus/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicoddemus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicoddemus/subscriptions", "organizations_url": "https://api.github.com/users/nicoddemus/orgs", "repos_url": "https://api.github.com/users/nicoddemus/repos", "events_url": "https://api.github.com/users/nicoddemus/events{/privacy}", "received_events_url": "https://api.github.com/users/nicoddemus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-10-30T12:48:44Z", "updated_at": "2015-10-31T00:14:28Z", "closed_at": "2015-10-31T00:14:28Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "See pytest-dev/pytest-mock#22\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/107", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/107/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/107/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/107", "id": 113553778, "node_id": "MDU6SXNzdWUxMTM1NTM3Nzg=", "number": 107, "title": "Add qtbot.wait()", "user": {"login": "rossant", "id": 1942359, "node_id": "MDQ6VXNlcjE5NDIzNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1942359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rossant", "html_url": "https://github.com/rossant", "followers_url": "https://api.github.com/users/rossant/followers", "following_url": "https://api.github.com/users/rossant/following{/other_user}", "gists_url": "https://api.github.com/users/rossant/gists{/gist_id}", "starred_url": "https://api.github.com/users/rossant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rossant/subscriptions", "organizations_url": "https://api.github.com/users/rossant/orgs", "repos_url": "https://api.github.com/users/rossant/repos", "events_url": "https://api.github.com/users/rossant/events{/privacy}", "received_events_url": "https://api.github.com/users/rossant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-10-27T10:36:23Z", "updated_at": "2015-10-30T18:30:25Z", "closed_at": "2015-10-30T18:30:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible to add a simple `qtbot.wait()` method to wait for X milliseconds? For example, the following seems to work currently:\n\n``` python\ndef wait(x):\n    from pytestqt.qt_compat import QtTest\n    QtTest.QTest.qWait(x)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/106", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/106/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/106/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/106", "id": 113078976, "node_id": "MDU6SXNzdWUxMTMwNzg5NzY=", "number": 106, "title": "Close widgets before tearing down other fixtures", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-10-23T18:51:08Z", "updated_at": "2015-10-30T11:50:50Z", "closed_at": "2015-10-30T11:50:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In https://github.com/The-Compiler/qutebrowser/pull/1048#issuecomment-150660769 I noticed a problem: I use a fixture to provide a `config` object in my object registry (basically a dict mapping strings to global objects).\n\nHowever, on OS X, closing the widget seems to call `minimumSizeHint` on it, which causes the widget to get the config - but at the point `qtbot` calls `close` on the widget, the other fixture already is torn down.\n\nI think the widget cleanup from `qtbot` should happen as early as possible.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/105", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/105/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/105/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/105", "id": 113078637, "node_id": "MDU6SXNzdWUxMTMwNzg2Mzc=", "number": 105, "title": "Setup/teardown exception capturing as early/late as possible to catch all exceptions", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-10-23T18:49:07Z", "updated_at": "2015-10-30T11:50:50Z", "closed_at": "2015-10-30T11:50:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I noticed sometimes, an exception happens and PyQt5 calls `abort`, even with `pytest-qt`.\n\nIt seems this happens when an exception happens in a virtual Qt method during setup or teardown, e.g. with a `yield_fixture` or when `qtbot` calls `close()` on the widget.\n\nI think `pytest-qt` should do the exception capturing setup/teardown as early/late as possible.\n\nSee https://github.com/The-Compiler/qutebrowser/pull/1048#issuecomment-150660769 for an example.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/101", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/101/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/101/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/101", "id": 111017691, "node_id": "MDU6SXNzdWUxMTEwMTc2OTE=", "number": 101, "title": "Test py26 on AppVeyor", "user": {"login": "nicoddemus", "id": 1085180, "node_id": "MDQ6VXNlcjEwODUxODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1085180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicoddemus", "html_url": "https://github.com/nicoddemus", "followers_url": "https://api.github.com/users/nicoddemus/followers", "following_url": "https://api.github.com/users/nicoddemus/following{/other_user}", "gists_url": "https://api.github.com/users/nicoddemus/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicoddemus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicoddemus/subscriptions", "organizations_url": "https://api.github.com/users/nicoddemus/orgs", "repos_url": "https://api.github.com/users/nicoddemus/repos", "events_url": "https://api.github.com/users/nicoddemus/events{/privacy}", "received_events_url": "https://api.github.com/users/nicoddemus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-10-12T17:13:16Z", "updated_at": "2016-10-19T00:11:53Z", "closed_at": "2016-10-19T00:11:53Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/99", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/99/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/99/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/99", "id": 110909062, "node_id": "MDU6SXNzdWUxMTA5MDkwNjI=", "number": 99, "title": "Add extend=True to qt_log_ignore marker", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-10-12T04:59:37Z", "updated_at": "2015-10-15T13:10:08Z", "closed_at": "2015-10-12T17:47:40Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "To extend the patterns from `pytest.ini` rather than overriding them.\n\nSee #97.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/98", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/98/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/98/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/98", "id": 110908857, "node_id": "MDU6SXNzdWUxMTA5MDg4NTc=", "number": 98, "title": "Logging hookwrapper hides exceptions", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-10-12T04:55:21Z", "updated_at": "2015-10-14T23:53:04Z", "closed_at": "2015-10-14T23:51:49Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I'm currently investigating a problem with `pytest-bdd` where it raises an `INTERNALERROR>` - unfortunately, `pytest-qt` hides it with another one :wink:\n\n```\nINTERNALERROR> Traceback (most recent call last):\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/main.py\", line 90, in wrap_session\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/main.py\", line 121, in _main\nINTERNALERROR>     config.hook.pytest_runtestloop(session=session)\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 724, in __call__\nINTERNALERROR>     return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 338, in _hookexec\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 333, in <lambda>\nINTERNALERROR>     _MultiCall(methods, kwargs, hook.spec_opts).execute()\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 596, in execute\nINTERNALERROR>     res = hook_impl.function(*args)\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/main.py\", line 146, in pytest_runtestloop\nINTERNALERROR>     item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 724, in __call__\nINTERNALERROR>     return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 338, in _hookexec\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 333, in <lambda>\nINTERNALERROR>     _MultiCall(methods, kwargs, hook.spec_opts).execute()\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 595, in execute\nINTERNALERROR>     return _wrapped_call(hook_impl.function(*args), self.execute)\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 253, in _wrapped_call\nINTERNALERROR>     return call_outcome.get_result()\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 278, in get_result\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 264, in __init__\nINTERNALERROR>     self.result = func()\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 595, in execute\nINTERNALERROR>     return _wrapped_call(hook_impl.function(*args), self.execute)\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 253, in _wrapped_call\nINTERNALERROR>     return call_outcome.get_result()\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 278, in get_result\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 264, in __init__\nINTERNALERROR>     self.result = func()\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 596, in execute\nINTERNALERROR>     res = hook_impl.function(*args)\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/runner.py\", line 65, in pytest_runtest_protocol\nINTERNALERROR>     runtestprotocol(item, nextitem=nextitem)\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/runner.py\", line 75, in runtestprotocol\nINTERNALERROR>     reports.append(call_and_report(item, \"call\", log))\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/runner.py\", line 121, in call_and_report\nINTERNALERROR>     report = hook.pytest_runtest_makereport(item=item, call=call)\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 724, in __call__\nINTERNALERROR>     return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 338, in _hookexec\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 333, in <lambda>\nINTERNALERROR>     _MultiCall(methods, kwargs, hook.spec_opts).execute()\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 595, in execute\nINTERNALERROR>     return _wrapped_call(hook_impl.function(*args), self.execute)\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 249, in _wrapped_call\nINTERNALERROR>     wrap_controller.send(call_outcome)\nINTERNALERROR>   File \"/home/florian/proj/qutebrowser/git/.tox/py35/lib/python3.5/site-packages/pytestqt/logging.py\", line 43, in pytest_runtest_makereport\nINTERNALERROR>     report = outcome.result\nINTERNALERROR> AttributeError: '_CallOutcome' object has no attribute 'result'\n```\n\nLooking at it with `pdb`, that seems to be the case because there was an exception:\n\n```\n(Pdb) outcome.result\n*** AttributeError: '_CallOutcome' object has no attribute 'result'\n(Pdb) outcome.excinfo\n(<class 'IndexError'>, IndexError('list index out of range',), <traceback object at 0x7f1645d85688>)\n```\n\nShouldn't `pytest-qt` use `outcome.get_result()` instead which raises the exception if there is any?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/97", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/97/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/97/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/97", "id": 110801264, "node_id": "MDU6SXNzdWUxMTA4MDEyNjQ=", "number": 97, "title": "Test fails with ignored Qt warning", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-10-10T15:37:28Z", "updated_at": "2015-10-12T04:59:45Z", "closed_at": "2015-10-12T04:59:45Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I have no idea what's going on... Looking at e.g. [this build](http://qutebrowser.org:8010/builders/osx/builds/923/steps/unittests/logs/stdio), the tests fail because of a Qt message:\n\n```\n=================================== FAILURES ===================================\n_____________________ test_err_windows[''-''-'exception'] ______________________\ntests/unit/utils/test_error.py:75: Failure: Qt messages with level WARNING or above emitted\n----------------------------- Captured Qt messages -----------------------------\nNone:None:0:\n    QtWarningMsg: virtual void QSslSocketBackendPrivate::transmit() SSLRead failed with: -9805\nNone:None:0:\n    QtWarningMsg: virtual void QSslSocketBackendPrivate::transmit() SSLRead failed with: -9805\nNone:None:0:\n    QtWarningMsg: virtual void QSslSocketBackendPrivate::transmit() SSLRead failed with: -9805\nNone:None:0:\n    QtWarningMsg: virtual void QSslSocketBackendPrivate::transmit() SSLRead failed with: -9805\nNone:None:0:\n    QtWarningMsg: virtual void QSslSocketBackendPrivate::transmit() SSLRead failed with: -9805\nNone:None:0:\n    QtWarningMsg: virtual void QSslSocketBackendPrivate::transmit() SSLRead failed with: -9805\n```\n\nHowever, this exact message is ignored in my `pytest.ini`:\n\n``` ini\nqt_log_ignore =\n    ^SpellCheck: .*\n    ^SetProcessDpiAwareness failed: .*\n    ^QWindowsWindow::setGeometryDp: Unable to set geometry .*\n    ^QProcess: Destroyed while process .* is still running\\.\n    ^\"Method \"GetAll\" with signature \"s\" on interface \"org\\.freedesktop\\.DBus\\.Properties\" doesn't exist\n    ^virtual void QSslSocketBackendPrivate::transmit\\(\\) SSL write failed with error: -9805\n    ^virtual void QSslSocketBackendPrivate::transmit\\(\\) SSLRead failed with: -9805\n```\n\nUnfortunately I can't trigger the message reliably. When I write a test which uses the same message with a `qWarning`, it passes:\n\n``` python\ndef test_suppressed_qwarning():\n    qWarning(\"virtual void QSslSocketBackendPrivate::transmit() SSLRead failed with: -9805\")\n```\n\nSo I wonder what's going on... any idea?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/92", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/92/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/92/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/92", "id": 104829471, "node_id": "MDU6SXNzdWUxMDQ4Mjk0NzE=", "number": 92, "title": "assertSignal", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 29898025, "node_id": "MDU6TGFiZWwyOTg5ODAyNQ==", "url": "https://api.github.com/repos/pytest-dev/pytest-qt/labels/enhancement%20:cool:", "name": "enhancement :cool:", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2015-09-04T04:41:00Z", "updated_at": "2016-01-06T23:22:29Z", "closed_at": "2016-01-06T23:22:29Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I'd like to add a `qtbot.assertSignal` to pytest-qt\n\n/cc @acogneau\n# Motivation\n\nSomething I need to do regularily is to make sure a given code snippet calls a signal, or doesn't - but I don't want to wait for the signal.\n\nThe current way to do that works, but is unpythonic:\n\n``` python\nspy = QSignalSpy(foo.signal)\nfoo.do_stuff()\nassert len(spy) == 1\nassert spy[1] == \"signal_arg\"\n```\n\n``` python\nspy = QSignalSpy(foo.error)\nfoo.do_stuff()\nassert not spy\n```\n# API\n\nAfter some thinking, I think a context manager with this signature would be best:\n\n``` python\nqtbot.assertSignal(signal, count=None) -> QSignalSpy\n```\n- `signal`: The signal it should listen to\n- `count`: Either `None` (in which case it expects the signal to be emitted >= 1 times), or an int. By setting `count` to `0`, it can be ensured the signal is _not_ emitted.\n- return value: A `QSignalSpy` which can be used to check the signal arguments.\n# Examples\n\n``` python\nwith qtbot.assertSignal(foo.signal, count=1) as spy:\n    foo.do_stuff()\nassert spy[1] == \"signal_arg\"\n```\n\n``` python\nwith qtbot.assertSignal(foo.error, count=0):\n    foo.do_stuff()\n```\n# Alternatives\n\nI came up with some other ideas while thinking about this, but I think all of them are worse:\n- `qtbot.assertSignal(signal, emitted=True)`: Doesn't give you the possibility to check a signal was emitted exactly once, and isn't better in any way.\n- `qtbot.assertSignal(signal, calls=[(\"signal arg 1\", \"signal arg 2\")])`: Too complicated, and can be done easier by checking the `QSignalSpy`\n- `qtbot.assertNotEmitted(signal)` - less functionality, and I think passing `count=0` is okay if you want that (that was the usecase I had in mind originally)\n- Shoehorning this function into `waitSignal` - it's complex enough already, and `qtbot.waitSignal(signal, do_not_actually_wait=True)` just sounds wrong :wink:\n- Adding a multi-signal variant (AND): Simply use `with qtbot.assertSignal(foo), qtbot.assertSignal(bar):` instead - that isn't an issue because it doesn't _wait_ for the signal.\n- Adding a multi-signal variant (OR): I don't really see the usecase for it.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/90", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/90/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/90/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/90", "id": 104401360, "node_id": "MDU6SXNzdWUxMDQ0MDEzNjA=", "number": 90, "title": "Plugin move broke using pytestqt.plugin.SignalBlocker", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-09-02T04:41:12Z", "updated_at": "2015-09-02T17:19:19Z", "closed_at": "2015-09-02T17:19:19Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I have a test where I use a `pytestqt.plugin.SignalBlocker` manually, because I need it in a session-scoped fixture, and `qtbot` is a function-scoped one.\n\nThis broke with #87 - I think every public class/function which was in `plugin.py` should also be imported there after the move. Who knows what other crazy stuff people did :wink:\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/85", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/85/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/85/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/85", "id": 104127157, "node_id": "MDU6SXNzdWUxMDQxMjcxNTc=", "number": 85, "title": "Easing the use of QSettings", "user": {"login": "PatrickMassot", "id": 14060883, "node_id": "MDQ6VXNlcjE0MDYwODgz", "avatar_url": "https://avatars1.githubusercontent.com/u/14060883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PatrickMassot", "html_url": "https://github.com/PatrickMassot", "followers_url": "https://api.github.com/users/PatrickMassot/followers", "following_url": "https://api.github.com/users/PatrickMassot/following{/other_user}", "gists_url": "https://api.github.com/users/PatrickMassot/gists{/gist_id}", "starred_url": "https://api.github.com/users/PatrickMassot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PatrickMassot/subscriptions", "organizations_url": "https://api.github.com/users/PatrickMassot/orgs", "repos_url": "https://api.github.com/users/PatrickMassot/repos", "events_url": "https://api.github.com/users/PatrickMassot/events{/privacy}", "received_events_url": "https://api.github.com/users/PatrickMassot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-08-31T20:22:05Z", "updated_at": "2015-09-02T04:42:00Z", "closed_at": "2015-09-02T04:42:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to easily tell the great qapp fixture of pytest-qt where it should look for settings?\n\nSay my main code has `app = QApplication([])` followed by `app.setOrganizationName('MyOrg')` and `app.setApplicationName('MyApp')`. Maybe I'm doing this wrong but, since I don't want my tests to rely on (or alter) real world settings I would like my test to use `app.setOrganizationName('MyOrg')` and `app.setApplicationName('MyAppTest')`.\n\nAssuming the above is not completely wrong, I'd like the qtbot fixture of pytest-qt to use (through the qapp fixture) those settings. One solution that I see and doesn't seem to cost anything is to put in my conftest.py \n\n``` python\ndef pytest_namespace():\n    return {'organizationName': 'MyOrg',\n            'applicationName': 'MyAppTest'\n            }\n```\n\nand then modify the plugin in the qapp fixture to replace \n\n``` python\n    if app is None:\n        global _qapp_instance\n        _qapp_instance = QApplication([])\n        yield _qapp_instance\n```\n\nby\n\n``` python\n    if app is None:\n        global _qapp_instance\n        _qapp_instance = QApplication([])\n        _qapp_instance.setOrganizationName(\n                getattr(pytest, 'organizationName', '')\n                )\n        _qapp_instance.setApplicationName(\n                getattr(pytest, 'applicationName', '')\n                )\n        yield _qapp_instance\n```\n\nDoes it make sense? Should I do something completely different?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/82", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-qt", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/82/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-qt/issues/82/events", "html_url": "https://github.com/pytest-dev/pytest-qt/issues/82", "id": 103757080, "node_id": "MDU6SXNzdWUxMDM3NTcwODA=", "number": 82, "title": "New event processing changes behaviour of tests which delete objects", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-08-28T17:06:46Z", "updated_at": "2015-08-31T18:53:57Z", "closed_at": "2015-08-31T18:53:57Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In #79, you switched pytest-qt's `waitSignal` to use busy loops because using `QEventLoop` caused a weird segfault.\n\nI recently wrote a test which fails with the new way of looping without realizing it.\n\nThe test is making sure that some function behaves properly if an object is already deleted:\n\n``` python\n@pytest.mark.parametrize('delete', [True, False])\ndef test_set_register_stylesheet(delete, qtbot, config_stub, caplog):\n    config_stub.data = {'fonts': {'foo': 'bar'}, 'colors': {}}\n    obj = Obj(\"{{ font['foo'] }}\")\n\n    with caplog.atLevel(9):  # VDEBUG\n        style.set_register_stylesheet(obj)\n\n    records = caplog.records()\n    assert len(records) == 1\n    assert records[0].message == 'stylesheet for Obj: font: bar;'\n\n    assert obj.rendered_stylesheet == 'font: bar;'\n\n    if delete:\n        with qtbot.waitSignal(obj.destroyed):\n            obj.deleteLater()\n\n    config_stub.data = {'fonts': {'foo': 'baz'}, 'colors': {}}\n    style.get_stylesheet.cache_clear()\n    config_stub.changed.emit('fonts', 'foo')\n\n    if delete:\n        expected = 'font: bar;'\n    else:\n        expected = 'font: baz;'\n    assert obj.rendered_stylesheet == expected\n```\n\nThe code under test:\n\n``` python\ndef set_register_stylesheet(obj):\n    \"\"\"Set the stylesheet for an object based on it's STYLESHEET attribute.\n\n    Also, register an update when the config is changed.\n\n    Args:\n        obj: The object to set the stylesheet for and register.\n             Must have a STYLESHEET attribute.\n    \"\"\"\n    qss = get_stylesheet(obj.STYLESHEET)\n    log.config.vdebug(\"stylesheet for {}: {}\".format(\n        obj.__class__.__name__, qss))\n    obj.setStyleSheet(qss)\n    objreg.get('config').changed.connect(\n        functools.partial(update_stylesheet, obj))\n\n\ndef update_stylesheet(obj):\n    \"\"\"Update the stylesheet for obj.\"\"\"\n    if not sip.isdeleted(obj):\n        obj.setStyleSheet(get_stylesheet(obj.STYLESHEET))\n```\n\nThose tests now fail, presumably because the object never got deleted:\n\ntest_set_register_stylesheet[True]:\n\n```\n>       assert obj.rendered_stylesheet == expected\nE       assert 'font: baz;' == 'font: bar;'\nE         - font: baz;\nE         ?         ^\nE         + font: bar;\nE         ?         ^\n```\n\ntest_set_register_stylesheet[False]:\n\n```\n    @pytest.mark.parametrize('delete', [True, False])\n    def test_set_register_stylesheet(delete, qtbot, config_stub, caplog):\n        config_stub.data = {'fonts': {'foo': 'bar'}, 'colors': {}}\n        obj = Obj(\"{{ font['foo'] }}\")\n\n        with caplog.atLevel(9):  # VDEBUG\n            style.set_register_stylesheet(obj)\n\n        records = caplog.records()\n        assert len(records) == 1\n>       assert records[0].message == 'stylesheet for Obj: font: bar;'\nE       assert 'stylesheet f...j: font: baz;' == 'stylesheet fo...j: font: bar;'\nE         - stylesheet for Obj: font: baz;\nE         ?                             ^\nE         + stylesheet for Obj: font: bar;\nE         ?                             ^\n```\n\nHere I can imagine I'm not the only one with such a kind of test...\n\nI think the best way to implement SignalBlocker would actually be a [QSignalSpy](http://doc.qt.io/qt-5/qsignalspy.html) (which would also make #64 easier) - however it only takes one signal, so `SignalBlocker.connect` and `MultiSignalBlocker` won't work with that...\n", "performed_via_github_app": null, "score": 1.0}]}