{"total_count": 25, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/syrusakbary/promise/issues/84", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/84/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/84/events", "html_url": "https://github.com/syrusakbary/promise/issues/84", "id": 546733266, "node_id": "MDU6SXNzdWU1NDY3MzMyNjY=", "number": 84, "title": "traceback is lost when using Promise.all", "user": {"login": "lexdene", "id": 694227, "node_id": "MDQ6VXNlcjY5NDIyNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/694227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lexdene", "html_url": "https://github.com/lexdene", "followers_url": "https://api.github.com/users/lexdene/followers", "following_url": "https://api.github.com/users/lexdene/following{/other_user}", "gists_url": "https://api.github.com/users/lexdene/gists{/gist_id}", "starred_url": "https://api.github.com/users/lexdene/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lexdene/subscriptions", "organizations_url": "https://api.github.com/users/lexdene/orgs", "repos_url": "https://api.github.com/users/lexdene/repos", "events_url": "https://api.github.com/users/lexdene/events{/privacy}", "received_events_url": "https://api.github.com/users/lexdene/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-08T09:12:07Z", "updated_at": "2020-01-08T14:44:48Z", "closed_at": "2020-01-08T14:44:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "the following code:\r\n\r\n    from promise import Promise\r\n\r\n    def foo(v):\r\n        if v == 4:\r\n            raise ValueError(v)\r\n\r\n        return v + 1\r\n\r\n    def main():\r\n        p = Promise.all([\r\n            Promise.promisify(foo)(number)\r\n            for number in range(5)\r\n        ])\r\n        p.get()\r\n\r\n    main()\r\n\r\nI think its traceback should be like this:\r\n\r\n    Traceback (most recent call last):\r\n      File \".../venv/promise/promise.py\", line 500, in _resolve_from_executor\r\n        executor(resolve, reject)\r\n      File \".../venv/promise/promise.py\", line 770, in executor\r\n        return resolve(f(*args, **kwargs))\r\n    File \"foo.py\", line 6, in foo\r\n        raise ValueError(v)\r\n    ValueError: 4\r\n\r\nActually its traceback is:\r\n\r\n    Traceback (most recent call last):\r\n      File \"foo.py\", line 16, in <module>\r\n        main()\r\n      File \"foo.py\", line 14, in main\r\n        p.get()\r\n      File \".../venv/promise/promise.py\", line 526, in get\r\n        return self._target_settled_value(_raise=True)\r\n      File \".../venv/promise/promise.py\", line 530, in _target_settled_value\r\n        return self._target()._settled_value(_raise)\r\n      File \".../venv/promise/promise.py\", line 235, in _settled_value\r\n        reraise(type(raise_val), raise_val, self._traceback)\r\n      File \"<string>\", line 3, in reraise\r\n    ValueError: 4\r\n\r\nIt makes me hard to debug when error happens.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/77", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/77/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/77/events", "html_url": "https://github.com/syrusakbary/promise/issues/77", "id": 483519950, "node_id": "MDU6SXNzdWU0ODM1MTk5NTA=", "number": 77, "title": "Fix Iterable import for Python 3.8", "user": {"login": "Siecje", "id": 4069476, "node_id": "MDQ6VXNlcjQwNjk0NzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4069476?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Siecje", "html_url": "https://github.com/Siecje", "followers_url": "https://api.github.com/users/Siecje/followers", "following_url": "https://api.github.com/users/Siecje/following{/other_user}", "gists_url": "https://api.github.com/users/Siecje/gists{/gist_id}", "starred_url": "https://api.github.com/users/Siecje/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Siecje/subscriptions", "organizations_url": "https://api.github.com/users/Siecje/orgs", "repos_url": "https://api.github.com/users/Siecje/repos", "events_url": "https://api.github.com/users/Siecje/events{/privacy}", "received_events_url": "https://api.github.com/users/Siecje/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-21T16:18:06Z", "updated_at": "2019-12-16T15:06:54Z", "closed_at": "2019-12-16T15:06:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n/site-packages/promise/promise_list.py:2: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n  from collections import Iterable\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/75", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/75/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/75/events", "html_url": "https://github.com/syrusakbary/promise/issues/75", "id": 470320002, "node_id": "MDU6SXNzdWU0NzAzMjAwMDI=", "number": 75, "title": "Possible out-of-memory due to unlimited cache _type_done_callbacks if dynamically generated types are used", "user": {"login": "freininghaus", "id": 7966441, "node_id": "MDQ6VXNlcjc5NjY0NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/7966441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/freininghaus", "html_url": "https://github.com/freininghaus", "followers_url": "https://api.github.com/users/freininghaus/followers", "following_url": "https://api.github.com/users/freininghaus/following{/other_user}", "gists_url": "https://api.github.com/users/freininghaus/gists{/gist_id}", "starred_url": "https://api.github.com/users/freininghaus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/freininghaus/subscriptions", "organizations_url": "https://api.github.com/users/freininghaus/orgs", "repos_url": "https://api.github.com/users/freininghaus/repos", "events_url": "https://api.github.com/users/freininghaus/events{/privacy}", "received_events_url": "https://api.github.com/users/freininghaus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-19T13:18:20Z", "updated_at": "2019-12-18T07:40:28Z", "closed_at": "2019-12-18T07:40:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "We found that an application which has functions with local classes that end up in Promise resolutions can go out of memory if it runs sufficiently long.\r\n\r\nThe reason is that the `type` of the local classes is different every time the functions are called, such that the lookup in the `dict` `promise.promise._type_done_callbacks` fails, and the new type is inserted into the `dict`. This prevents that the local classes are garbage collected, and causes a continuous increase of the memory usage.\r\n\r\nI will submit a pull request with a fix and unit test soon.\r\n\r\nExample to reproduce the problem:\r\n```python\r\nimport promise\r\nimport time\r\n\r\n# Uncomment the following two lines to fix the OOM issue:\r\n# import weakref\r\n# promise.promise._type_done_callbacks = weakref.WeakKeyDictionary()\r\n\r\ndef function_with_local_type():\r\n    class A:\r\n        # Attach a lot of data to the type 'A' to make the OOM issue show up faster\r\n        data = [0] * 1024 * 1024\r\n\r\n    a = A()\r\n\r\n    # Resolving a Promise with 'a' causes the type 'A' to end up\r\n    # in the dict promise.promise._type_done_callbacks...\r\n    assert a == promise.Promise.resolve(a).get()\r\n\r\n# Watch the script's memory usage, e.g., in htop, while the loop runs...\r\nfor _ in range(32 * 1024):\r\n    function_with_local_type()\r\n    time.sleep(0.01)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/68", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/68/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/68/events", "html_url": "https://github.com/syrusakbary/promise/issues/68", "id": 378395274, "node_id": "MDU6SXNzdWUzNzgzOTUyNzQ=", "number": 68, "title": "How thread safe are promises?", "user": {"login": "dongryphon", "id": 722969, "node_id": "MDQ6VXNlcjcyMjk2OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/722969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dongryphon", "html_url": "https://github.com/dongryphon", "followers_url": "https://api.github.com/users/dongryphon/followers", "following_url": "https://api.github.com/users/dongryphon/following{/other_user}", "gists_url": "https://api.github.com/users/dongryphon/gists{/gist_id}", "starred_url": "https://api.github.com/users/dongryphon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dongryphon/subscriptions", "organizations_url": "https://api.github.com/users/dongryphon/orgs", "repos_url": "https://api.github.com/users/dongryphon/repos", "events_url": "https://api.github.com/users/dongryphon/events{/privacy}", "received_events_url": "https://api.github.com/users/dongryphon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-11-07T17:37:16Z", "updated_at": "2019-12-18T07:39:19Z", "closed_at": "2019-12-18T07:39:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "After reading through the source for some time I do not see any use of locks (like the imported and ignored `from threading import RLock`) to protect one thread adding a callback to a promise instance from another thread that is resolving/rejecting that promise...\r\n\r\nSo is such use of a promise invalid or does it work because of the GIL? ... or something else?\r\n\r\nThanks for the awesome code!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/62", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/62/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/62/events", "html_url": "https://github.com/syrusakbary/promise/issues/62", "id": 365346173, "node_id": "MDU6SXNzdWUzNjUzNDYxNzM=", "number": 62, "title": "Question: JavaScript Code", "user": {"login": "netcatt", "id": 42355410, "node_id": "MDQ6VXNlcjQyMzU1NDEw", "avatar_url": "https://avatars0.githubusercontent.com/u/42355410?v=4", "gravatar_id": "", "url": "https://api.github.com/users/netcatt", "html_url": "https://github.com/netcatt", "followers_url": "https://api.github.com/users/netcatt/followers", "following_url": "https://api.github.com/users/netcatt/following{/other_user}", "gists_url": "https://api.github.com/users/netcatt/gists{/gist_id}", "starred_url": "https://api.github.com/users/netcatt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/netcatt/subscriptions", "organizations_url": "https://api.github.com/users/netcatt/orgs", "repos_url": "https://api.github.com/users/netcatt/repos", "events_url": "https://api.github.com/users/netcatt/events{/privacy}", "received_events_url": "https://api.github.com/users/netcatt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-01T07:54:25Z", "updated_at": "2020-05-06T16:22:33Z", "closed_at": "2018-10-15T05:33:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I AM nre to promise. How I can write thie on python.\r\n\r\nreturn new Promise((resolve, reject) => {\r\n      drivelist.list((error, drives) => {\r\n        if (error) return reject(err);\r\n        resolve(drives);\r\n      });\r\n    });\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/59", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/59/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/59/events", "html_url": "https://github.com/syrusakbary/promise/issues/59", "id": 339380006, "node_id": "MDU6SXNzdWUzMzkzODAwMDY=", "number": 59, "title": "New version", "user": {"login": "marcelombc", "id": 1358796, "node_id": "MDQ6VXNlcjEzNTg3OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1358796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcelombc", "html_url": "https://github.com/marcelombc", "followers_url": "https://api.github.com/users/marcelombc/followers", "following_url": "https://api.github.com/users/marcelombc/following{/other_user}", "gists_url": "https://api.github.com/users/marcelombc/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcelombc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcelombc/subscriptions", "organizations_url": "https://api.github.com/users/marcelombc/orgs", "repos_url": "https://api.github.com/users/marcelombc/repos", "events_url": "https://api.github.com/users/marcelombc/events{/privacy}", "received_events_url": "https://api.github.com/users/marcelombc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-09T09:50:54Z", "updated_at": "2019-12-18T07:42:33Z", "closed_at": "2019-12-18T07:42:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any plans to release a new version? Last released version was more than one year ago.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/56", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/56/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/56/events", "html_url": "https://github.com/syrusakbary/promise/issues/56", "id": 321760605, "node_id": "MDU6SXNzdWUzMjE3NjA2MDU=", "number": 56, "title": "License file in pypi archive", "user": {"login": "toddrme2178", "id": 4181796, "node_id": "MDQ6VXNlcjQxODE3OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4181796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toddrme2178", "html_url": "https://github.com/toddrme2178", "followers_url": "https://api.github.com/users/toddrme2178/followers", "following_url": "https://api.github.com/users/toddrme2178/following{/other_user}", "gists_url": "https://api.github.com/users/toddrme2178/gists{/gist_id}", "starred_url": "https://api.github.com/users/toddrme2178/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toddrme2178/subscriptions", "organizations_url": "https://api.github.com/users/toddrme2178/orgs", "repos_url": "https://api.github.com/users/toddrme2178/repos", "events_url": "https://api.github.com/users/toddrme2178/events{/privacy}", "received_events_url": "https://api.github.com/users/toddrme2178/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-05-09T23:33:22Z", "updated_at": "2018-06-22T05:40:29Z", "closed_at": "2018-06-22T05:40:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "The pypi source archive isn't including the `LICENSE` file. Would it be possible to add it? It is very helpful when packaging this for Linux distributions. Thank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/53", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/53/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/53/events", "html_url": "https://github.com/syrusakbary/promise/issues/53", "id": 304129443, "node_id": "MDU6SXNzdWUzMDQxMjk0NDM=", "number": 53, "title": "What's the Difference", "user": {"login": "vikramdurai", "id": 7627362, "node_id": "MDQ6VXNlcjc2MjczNjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/7627362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vikramdurai", "html_url": "https://github.com/vikramdurai", "followers_url": "https://api.github.com/users/vikramdurai/followers", "following_url": "https://api.github.com/users/vikramdurai/following{/other_user}", "gists_url": "https://api.github.com/users/vikramdurai/gists{/gist_id}", "starred_url": "https://api.github.com/users/vikramdurai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vikramdurai/subscriptions", "organizations_url": "https://api.github.com/users/vikramdurai/orgs", "repos_url": "https://api.github.com/users/vikramdurai/repos", "events_url": "https://api.github.com/users/vikramdurai/events{/privacy}", "received_events_url": "https://api.github.com/users/vikramdurai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-11T04:28:39Z", "updated_at": "2018-10-31T10:34:43Z", "closed_at": "2018-10-31T10:34:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "What's the difference between calling `Promise.resolve(func())` and `Promise.promisify(func)`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/51", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/51/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/51/events", "html_url": "https://github.com/syrusakbary/promise/issues/51", "id": 289005316, "node_id": "MDU6SXNzdWUyODkwMDUzMTY=", "number": 51, "title": "Feature request: timeout for dataloader caching", "user": {"login": "balthild", "id": 2662758, "node_id": "MDQ6VXNlcjI2NjI3NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2662758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/balthild", "html_url": "https://github.com/balthild", "followers_url": "https://api.github.com/users/balthild/followers", "following_url": "https://api.github.com/users/balthild/following{/other_user}", "gists_url": "https://api.github.com/users/balthild/gists{/gist_id}", "starred_url": "https://api.github.com/users/balthild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/balthild/subscriptions", "organizations_url": "https://api.github.com/users/balthild/orgs", "repos_url": "https://api.github.com/users/balthild/repos", "events_url": "https://api.github.com/users/balthild/events{/privacy}", "received_events_url": "https://api.github.com/users/balthild/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-16T18:10:17Z", "updated_at": "2018-01-19T00:03:31Z", "closed_at": "2018-01-19T00:03:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "For example:\r\n\r\n```python\r\ndef _get_user(key):\r\n    print(\"load: \" + str(key))\r\n\r\n\r\nclass UserLoader(DataLoader):\r\n    def batch_load_fn(self, keys):\r\n        return Promise.resolve([_get_user(key) for key in keys])\r\n\r\n\r\nuser_loader = UserLoader(cache=True, timeout=300)\r\n\r\nuser_loader.load(1)\r\n# load: 1\r\nuser_loader.load(2)\r\n# load: 2\r\nuser_loader.load(1)\r\n# nothing printed\r\n\r\n# 10 mins later\r\nuser_loader.load(1)\r\n# load: 1\r\nuser_loader.load(2)\r\n# load: 2\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/46", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/46/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/46/events", "html_url": "https://github.com/syrusakbary/promise/issues/46", "id": 273170431, "node_id": "MDU6SXNzdWUyNzMxNzA0MzE=", "number": 46, "title": "call() missing 1 required positional argument: 'fn' when using the AsyncioScheduler", "user": {"login": "mandx", "id": 535282, "node_id": "MDQ6VXNlcjUzNTI4Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/535282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mandx", "html_url": "https://github.com/mandx", "followers_url": "https://api.github.com/users/mandx/followers", "following_url": "https://api.github.com/users/mandx/following{/other_user}", "gists_url": "https://api.github.com/users/mandx/gists{/gist_id}", "starred_url": "https://api.github.com/users/mandx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mandx/subscriptions", "organizations_url": "https://api.github.com/users/mandx/orgs", "repos_url": "https://api.github.com/users/mandx/repos", "events_url": "https://api.github.com/users/mandx/events{/privacy}", "received_events_url": "https://api.github.com/users/mandx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-11T19:38:06Z", "updated_at": "2017-11-15T06:41:45Z", "closed_at": "2017-11-15T06:41:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "For this small (but complete) server code, every schema-related request gets stuck indefinitely (the GraphiQL UI loads fine in all cases):\r\n\r\n```python\r\nfrom aiohttp import web\r\nfrom aiohttp_graphql import GraphQLView\r\nfrom graphene import relay\r\nfrom graphql.execution.executors.asyncio import AsyncioExecutor\r\nfrom promise import set_default_scheduler\r\nfrom promise.schedulers.asyncio import AsyncioScheduler\r\nimport graphene\r\n\r\nclass Viewer(graphene.ObjectType, interfaces=(relay.Node,)):\r\n    hello = graphene.String()\r\n\r\n    def resolve_hello(self, info):\r\n        return 'Hello!'\r\n\r\nclass Query(graphene.ObjectType):\r\n    viewer = graphene.Field(Viewer)\r\n\r\n    def resolve_viewer(self, info):\r\n        return Viewer()\r\n\r\nSchema = graphene.Schema(query=Query)\r\n\r\nset_default_scheduler(AsyncioScheduler)\r\n\r\napp = web.Application()\r\nGraphQLView.attach(app, schema=Schema, graphiql=True, executor=AsyncioExecutor())\r\nweb.run_app(app, host='0.0.0.0', port=8000)\r\n```\r\nIf we only remove the `executor` parameter from the `GraphQLView.attach` call, we get this error (as the JSON body)\r\n```json\r\n{\"errors\":[{\"message\":\"call() missing 1 required positional argument: 'fn'\"}]}\r\n```\r\nWhich I was able to track it down (I believe) to the method\r\n`promise.async_.Async.queue_tick`, specifically this call `self.schedule.call(self.drain_queues)` (line 120 at the moment).\r\n\r\nAnd if we don't set a promise scheduler, then it does works, when omitting the `executor` param, and also when passing `AsyncioExecutor` to it.\r\n\r\nThis is causing some really weird behavior (specially the getting stuck part) specially when using dataloaders, which is understandable because they rely heavily on promises.\r\n\r\nVersions (this is inside a virtual environment generated using `python3 -m venv .env`, where `python3` is coming from Ubuntu 17.10):\r\n```bash\r\n$ python3 --version                                                                                                                                                       \r\nPython 3.6.3\r\n$ pip freeze\r\naiohttp==2.3.2\r\naiohttp-graphql==1.0.0\r\nasync-timeout==2.0.0\r\nchardet==3.0.4\r\ngraphene==2.0\r\ngraphql-core==2.0\r\ngraphql-relay==0.4.5\r\ngraphql-server-core==1.0.dev20170322001\r\nmultidict==3.3.2\r\npkg-resources==0.0.0\r\npromise==2.1\r\npytest-runner==3.0\r\nRx==1.6.0\r\nsix==1.11.0\r\ntyping==3.6.2\r\nyarl==0.14.0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/43", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/43/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/43/events", "html_url": "https://github.com/syrusakbary/promise/issues/43", "id": 261708217, "node_id": "MDU6SXNzdWUyNjE3MDgyMTc=", "number": 43, "title": "Installation Issue", "user": {"login": "jeremytiki", "id": 1173792, "node_id": "MDQ6VXNlcjExNzM3OTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1173792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremytiki", "html_url": "https://github.com/jeremytiki", "followers_url": "https://api.github.com/users/jeremytiki/followers", "following_url": "https://api.github.com/users/jeremytiki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremytiki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremytiki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremytiki/subscriptions", "organizations_url": "https://api.github.com/users/jeremytiki/orgs", "repos_url": "https://api.github.com/users/jeremytiki/repos", "events_url": "https://api.github.com/users/jeremytiki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremytiki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-29T17:19:10Z", "updated_at": "2017-10-13T08:42:23Z", "closed_at": "2017-10-13T08:42:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using `pip freeze` with Python3, promise shows the following:\r\n\r\n```\r\n...\r\npromise==2.1.dev0\r\n...\r\n```\r\n\r\nHowever if you try to install via `pip install -r requirements` with this entry I recieve the following error:\r\n\r\n```\r\npip install promise==2.1.dev0\r\nCollecting promise==2.1.dev0\r\n  Could not find a version that satisfies the requirement promise==2.1.dev0 (from versions: 0.1.0, 0.2.0, 0.2.1, 0.2.2, 0.4, 0.4.1, 0.4.2, 0.4.3, 1.0.0, 1.0.1, 2.0.dev20170313081902, 2.0.dev20170313082331, 2.0.dev20170314074715, 2.0.dev20170317055346, 2.0b1, 2.0rc1, 2.0rc2, 2.0, 2.0.1, 2.0.2, 2.1.dev20170724043809)\r\nNo matching distribution found for promise==2.1.dev0\r\n\r\n```\r\nI'm using pip 9.0.1 with Python 3.5", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/33", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/33/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/33/events", "html_url": "https://github.com/syrusakbary/promise/issues/33", "id": 226087138, "node_id": "MDU6SXNzdWUyMjYwODcxMzg=", "number": 33, "title": "Threading issue in 2.0", "user": {"login": "addyess", "id": 10090033, "node_id": "MDQ6VXNlcjEwMDkwMDMz", "avatar_url": "https://avatars2.githubusercontent.com/u/10090033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/addyess", "html_url": "https://github.com/addyess", "followers_url": "https://api.github.com/users/addyess/followers", "following_url": "https://api.github.com/users/addyess/following{/other_user}", "gists_url": "https://api.github.com/users/addyess/gists{/gist_id}", "starred_url": "https://api.github.com/users/addyess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/addyess/subscriptions", "organizations_url": "https://api.github.com/users/addyess/orgs", "repos_url": "https://api.github.com/users/addyess/repos", "events_url": "https://api.github.com/users/addyess/events{/privacy}", "received_events_url": "https://api.github.com/users/addyess/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-05-03T19:17:14Z", "updated_at": "2017-07-22T23:23:59Z", "closed_at": "2017-07-22T23:23:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This test locks up in python2.7\r\n\r\n```\r\ndef test_get_after_get_in_promise():\r\n    def do(x):\r\n        v = Promise.resolve(\"ok\").then(lambda x: x).get()  # the wait inside get waits forever\r\n        return v\r\n\r\n    p = Promise.resolve(None).then(do)\r\n    assert p.get() == \"ok\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/32", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/32/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/32/events", "html_url": "https://github.com/syrusakbary/promise/issues/32", "id": 225128952, "node_id": "MDU6SXNzdWUyMjUxMjg5NTI=", "number": 32, "title": "then() doesn't take on promise returned by called handler", "user": {"login": "Nakroma", "id": 6236201, "node_id": "MDQ6VXNlcjYyMzYyMDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/6236201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nakroma", "html_url": "https://github.com/Nakroma", "followers_url": "https://api.github.com/users/Nakroma/followers", "following_url": "https://api.github.com/users/Nakroma/following{/other_user}", "gists_url": "https://api.github.com/users/Nakroma/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nakroma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nakroma/subscriptions", "organizations_url": "https://api.github.com/users/Nakroma/orgs", "repos_url": "https://api.github.com/users/Nakroma/repos", "events_url": "https://api.github.com/users/Nakroma/events{/privacy}", "received_events_url": "https://api.github.com/users/Nakroma/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-28T16:19:21Z", "updated_at": "2017-04-28T16:54:59Z", "closed_at": "2017-04-28T16:54:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the docs its stated that `The call to .then also returns a promise. If the handler that is called returns a promise, the promise returned by .then takes on the state of that returned promise.`  \r\nSo .then(my_func()) should take on the promise returned by my_func()  \r\n\r\nTake a look at this example:\r\n```\r\ndef testfunc():\r\n    return Promise(lambda resolve, reject: resolve(\"second\"))\r\n\r\nPromise(lambda resolve, reject: resolve(\"first\")).then(testfunc()).then(lambda res: print(res))\r\n```\r\n\r\nThe first `.then` should take on the state of the promise returned by testfunc(), so in theory the second `.then` should print out \"second\". But this is not what happens, instead it prints out \"first\" from the first promise.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/30", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/30/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/30/events", "html_url": "https://github.com/syrusakbary/promise/issues/30", "id": 224763100, "node_id": "MDU6SXNzdWUyMjQ3NjMxMDA=", "number": 30, "title": "Thread safety using 2.0", "user": {"login": "rslinckx", "id": 373249, "node_id": "MDQ6VXNlcjM3MzI0OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/373249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rslinckx", "html_url": "https://github.com/rslinckx", "followers_url": "https://api.github.com/users/rslinckx/followers", "following_url": "https://api.github.com/users/rslinckx/following{/other_user}", "gists_url": "https://api.github.com/users/rslinckx/gists{/gist_id}", "starred_url": "https://api.github.com/users/rslinckx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rslinckx/subscriptions", "organizations_url": "https://api.github.com/users/rslinckx/orgs", "repos_url": "https://api.github.com/users/rslinckx/repos", "events_url": "https://api.github.com/users/rslinckx/events{/privacy}", "received_events_url": "https://api.github.com/users/rslinckx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-27T12:10:12Z", "updated_at": "2017-07-22T23:24:10Z", "closed_at": "2017-07-22T23:24:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The new version introduces the concept of event loop, and uses a Context class to be able to chain contexts.\r\n\r\nThere is however a global variable \"context_stack\" which is accessed when pushing/popping contexts.\r\n\r\nI think this will lead to errors if i use for example gevent, or event regular threads, the global variable will get messed up across threads.\r\n\r\nFrameworks usually use some kind of threadlocal context stack (such as flask) or explicit stack management to be able to work when using threads.\r\n\r\nI think the actual implementation will just break any thread of greenletted application using it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/29", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/29/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/29/events", "html_url": "https://github.com/syrusakbary/promise/issues/29", "id": 224735089, "node_id": "MDU6SXNzdWUyMjQ3MzUwODk=", "number": 29, "title": "KeyError in DataLoader leads to a stuck event loop", "user": {"login": "rslinckx", "id": 373249, "node_id": "MDQ6VXNlcjM3MzI0OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/373249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rslinckx", "html_url": "https://github.com/rslinckx", "followers_url": "https://api.github.com/users/rslinckx/followers", "following_url": "https://api.github.com/users/rslinckx/following{/other_user}", "gists_url": "https://api.github.com/users/rslinckx/gists{/gist_id}", "starred_url": "https://api.github.com/users/rslinckx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rslinckx/subscriptions", "organizations_url": "https://api.github.com/users/rslinckx/orgs", "repos_url": "https://api.github.com/users/rslinckx/repos", "events_url": "https://api.github.com/users/rslinckx/events{/privacy}", "received_events_url": "https://api.github.com/users/rslinckx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-04-27T10:07:19Z", "updated_at": "2017-04-28T08:10:55Z", "closed_at": "2017-04-28T08:10:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "    from promise.dataloader import DataLoader\r\n\r\n    def batch_load_foo(keys):\r\n\t    return 23\r\n\r\n    loader = DataLoader(batch_load_foo)\r\n    loader.load(1)\r\n    loader.load(2)\r\n\r\nThis will attempt to dispatch key=1, will correctly queue in the event loop the batch loader, which will then receive the incorrect return value of '23' from the batch_load_fn.\r\n\r\nIt will then call failed_dispatch with the error, which will attempt to reject all pending promises, and also call loader.clear(1). The problem is:\r\n\r\n    def clear(self, key):\r\n        cache_key = self.get_cache_key(key)\r\n        del self._promise_cache[cache_key]\r\n        return self\r\n\r\nthis will throw a KeyError because the promise hasn't been cached yet, and will stall the event loop. Worse, the exception is catched by the SyncScheduler and things just stop.\r\n\r\nA fix would be to self._promise_cache.pop(cache_key, None) for example, but i'm not sure if it has deeper implications...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/28", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/28/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/28/events", "html_url": "https://github.com/syrusakbary/promise/issues/28", "id": 224239403, "node_id": "MDU6SXNzdWUyMjQyMzk0MDM=", "number": 28, "title": "2.0.1 tag?", "user": {"login": "boneill42", "id": 897229, "node_id": "MDQ6VXNlcjg5NzIyOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/897229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boneill42", "html_url": "https://github.com/boneill42", "followers_url": "https://api.github.com/users/boneill42/followers", "following_url": "https://api.github.com/users/boneill42/following{/other_user}", "gists_url": "https://api.github.com/users/boneill42/gists{/gist_id}", "starred_url": "https://api.github.com/users/boneill42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boneill42/subscriptions", "organizations_url": "https://api.github.com/users/boneill42/orgs", "repos_url": "https://api.github.com/users/boneill42/repos", "events_url": "https://api.github.com/users/boneill42/events{/privacy}", "received_events_url": "https://api.github.com/users/boneill42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-25T18:59:15Z", "updated_at": "2017-04-26T03:36:42Z", "closed_at": "2017-04-26T03:36:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I see that 2.0.1 is available on PyPi, but I don't see a corresponding tag.\r\nhttps://pypi.python.org/pypi/promise/2.0.1\r\n\r\nIs there a way to determine what code went out in that release?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/26", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/26/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/26/events", "html_url": "https://github.com/syrusakbary/promise/issues/26", "id": 221035905, "node_id": "MDU6SXNzdWUyMjEwMzU5MDU=", "number": 26, "title": "Promises stuck", "user": {"login": "jhakonen", "id": 1950698, "node_id": "MDQ6VXNlcjE5NTA2OTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1950698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhakonen", "html_url": "https://github.com/jhakonen", "followers_url": "https://api.github.com/users/jhakonen/followers", "following_url": "https://api.github.com/users/jhakonen/following{/other_user}", "gists_url": "https://api.github.com/users/jhakonen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhakonen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhakonen/subscriptions", "organizations_url": "https://api.github.com/users/jhakonen/orgs", "repos_url": "https://api.github.com/users/jhakonen/repos", "events_url": "https://api.github.com/users/jhakonen/events{/privacy}", "received_events_url": "https://api.github.com/users/jhakonen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-11T18:13:07Z", "updated_at": "2017-04-12T19:49:15Z", "closed_at": "2017-04-12T05:42:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI took the promise 2.0b1 into use, but I ran into a bug where the promises stop working after a rejection. Any .then() handlers just refuse to trigger.\r\n\r\nEven something as simple as this does not work:\r\n```\r\nfrom __future__ import print_function\r\n...\r\nPromise.resolve(None).then(lambda x: print(\"Hello World\"))\r\n```\r\nHowever, I managed to reproduce the bug with your test suite.\r\n\r\nI added following test to tests/test_issues.py:\r\n```\r\ndef test_my_issue():\r\n    context = {\"success\": False}\r\n    promise1 = Promise(lambda resolve, reject: context.update({\"promise1_reject\": reject}))\r\n    promise1.then(lambda x: None)\r\n    promise1.then(lambda x: None)\r\n    context[\"promise1_reject\"](RuntimeError(\"Ooops!\"))\r\n\r\n    promise2 = Promise(lambda resolve, reject: context.update({\"promise2_resolve\": resolve}))\r\n    promise2.then(lambda x: context.update({\"success\": True}))\r\n    context[\"promise2_resolve\"](None)\r\n\r\n    assert context[\"success\"]\r\n```\r\n\r\nRunning test suite:\r\n```\r\n py.test tests --cov=promise --benchmark-skip -s\r\n============================= test session starts =============================\r\nplatform win32 -- Python 2.7.10, pytest-3.0.7, py-1.4.33, pluggy-0.4.0\r\nbenchmark: 3.0.0 (defaults: timer=time.clock disable_gc=False min_rounds=5 min_time=5.00us max_time=1.00s calibration_precision=10 warmup=False warmup_iterations=100000)\r\nrootdir: C:\\Tiedostot\\Henkilokohtainen\\Projektit\\World of Tanks\\Modit\\TessuMod\\promise, inifile:\r\nplugins: cov-2.4.0, benchmark-3.0.0\r\ncollected 113 items\r\n\r\ntests\\test_benchmark.py sssssssss\r\ntests\\test_complex_threads.py .\r\ntests\\test_context.py .....\r\ntests\\test_dataloader.py ..............\r\ntests\\test_extra.py ............................................\r\ntests\\test_issues.py ...F\r\ntests\\test_promise_list.py ......\r\n```\r\nThe execution remains stuck in test_promise_list.py, have to kill it with CTRL+C.\r\n\r\nIf you remove one or both `promise1.then(lambda x: None)` lines from the test, the test suite goes through fine without fails nor ending stuck.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/17", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/17/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/17/events", "html_url": "https://github.com/syrusakbary/promise/issues/17", "id": 193034549, "node_id": "MDU6SXNzdWUxOTMwMzQ1NDk=", "number": 17, "title": "Coroutines are not thenable when should", "user": {"login": "syrusakbary", "id": 188257, "node_id": "MDQ6VXNlcjE4ODI1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/188257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syrusakbary", "html_url": "https://github.com/syrusakbary", "followers_url": "https://api.github.com/users/syrusakbary/followers", "following_url": "https://api.github.com/users/syrusakbary/following{/other_user}", "gists_url": "https://api.github.com/users/syrusakbary/gists{/gist_id}", "starred_url": "https://api.github.com/users/syrusakbary/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syrusakbary/subscriptions", "organizations_url": "https://api.github.com/users/syrusakbary/orgs", "repos_url": "https://api.github.com/users/syrusakbary/repos", "events_url": "https://api.github.com/users/syrusakbary/events{/privacy}", "received_events_url": "https://api.github.com/users/syrusakbary/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-12-02T04:56:49Z", "updated_at": "2016-12-02T04:58:02Z", "closed_at": "2016-12-02T04:58:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Executing `promise.is_thenable` over a asyncio `coroutine` returns `False`, however `promisify` is able to handle coroutines correctly.\r\n\r\nRelated PR: https://github.com/graphql-python/graphene/pull/379\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/11", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/11/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/11/events", "html_url": "https://github.com/syrusakbary/promise/issues/11", "id": 171384262, "node_id": "MDU6SXNzdWUxNzEzODQyNjI=", "number": 11, "title": "Reject function in Promise", "user": {"login": "mega7star", "id": 1462355, "node_id": "MDQ6VXNlcjE0NjIzNTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1462355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mega7star", "html_url": "https://github.com/mega7star", "followers_url": "https://api.github.com/users/mega7star/followers", "following_url": "https://api.github.com/users/mega7star/following{/other_user}", "gists_url": "https://api.github.com/users/mega7star/gists{/gist_id}", "starred_url": "https://api.github.com/users/mega7star/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mega7star/subscriptions", "organizations_url": "https://api.github.com/users/mega7star/orgs", "repos_url": "https://api.github.com/users/mega7star/repos", "events_url": "https://api.github.com/users/mega7star/events{/privacy}", "received_events_url": "https://api.github.com/users/mega7star/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-16T11:20:34Z", "updated_at": "2016-10-15T22:52:22Z", "closed_at": "2016-10-15T22:30:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why i not get a value from reject function?\nExample:\n\n``` python\nPython 3.5.1 (v3.5.1:37a07cee5969, Dec  6 2015, 01:54:25) [MSC v.1900 64 bit (AM\nD64)] on win32                                                                  \nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.          \n>>> from promise import Promise                                                 \n>>> def test(x):                                                                \n...   def my(resolve, reject):                                                  \n...     if x > 0:                                                               \n...       resolve(x)                                                            \n...     else:                                                                   \n...       reject(x)                                                             \n...   return Promise(my)                                                        \n...                                                                             \n>>>                                                                             \n>>> test(42).then(lambda x: print('Test: ', x))                                 \nTest:  42                                                                       \n<promise.promise.Promise object at 0x0000004620FB9CC0>                          \n>>>                                                                             \n>>> test(-42).then(None, lambda x: print('Test: ', x))                          \nTest:               # <------------- why not 'Test: -42' ?                                                            \n<promise.promise.Promise object at 0x0000004620FC1908>                          \n>>>                                                                             \n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/9", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/9/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/9/events", "html_url": "https://github.com/syrusakbary/promise/issues/9", "id": 169083462, "node_id": "MDU6SXNzdWUxNjkwODM0NjI=", "number": 9, "title": "onResolved handler is called in the same execution context", "user": {"login": "qbolec", "id": 133093, "node_id": "MDQ6VXNlcjEzMzA5Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/133093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qbolec", "html_url": "https://github.com/qbolec", "followers_url": "https://api.github.com/users/qbolec/followers", "following_url": "https://api.github.com/users/qbolec/following{/other_user}", "gists_url": "https://api.github.com/users/qbolec/gists{/gist_id}", "starred_url": "https://api.github.com/users/qbolec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qbolec/subscriptions", "organizations_url": "https://api.github.com/users/qbolec/orgs", "repos_url": "https://api.github.com/users/qbolec/repos", "events_url": "https://api.github.com/users/qbolec/events{/privacy}", "received_events_url": "https://api.github.com/users/qbolec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2016-08-03T09:09:24Z", "updated_at": "2017-04-12T07:30:04Z", "closed_at": "2017-04-12T07:30:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems to me that current implementation is non-compliant with https://promisesaplus.com/ spec with regard to\n\n> 2.2.4 Fulfilled or onRejected must not be called until the execution context stack contains only platform code. [3.1].\n\nThis manifests in inconsistencies between situations where Promise is resolved immediately (such us during unit-testing with mock data) vs situations where it resolves asynchronously after a while, leading to some bugs in implementation manifesting only after deploying to production.\n\nConsider following toy program with a subtle bug:\n\n``` python\nimport concurrent.futures\nimport time\nexecutor = concurrent.futures.ThreadPoolExecutor(max_workers=40000);\nfrom promise import Promise\n\ndef identity(x):\n  #time.sleep(1)\n  return x\ndef promise_something(x):\n  return Promise.promisify(executor.submit(identity,x));\n\n\nprint Promise.all([ promise_something(x).then(lambda result: result*x)  for x in [0,1,2,3]]).get()\n```\n\nIt is supposed to produce sequence of squares, and indeed when run, it prints:\n\n```\n$ python concurrency_test.py\n[0, 1, 4, 9]\n```\n\nBut there is a bug lurking in the implementation: the `x` variable used in list comprehension is bound by reference to the closure of `lambda: result*x`, not by value, so the code works only because the lambda passed to `then()` is called synchronously and the current value of `x` is used. If however, you uncomment the `time.sleep(1)` line, you will get a different output:\n\n```\n$ python concurrency_test.py\n[0, 3, 6, 9]\n```\n\nThis time, the same value of `x`, namely `3` was used for all invocations of the lambda, because that was the value variable `x` retained after iterating over whole array `[0,1,2,3]`.\n\nThis is just a toy example, but the more complicated version of the same bug occurred in real life scenario to me in code like this:\n\n``` python\nreturn Promise.all([\n    diarize_single_wave(diarizationEngine,pathOfWave).then(lambda result : judge_single_result(path_to_name(pathOfWave),result))\n    for pathOfWave in glob.glob(join(\"input-data\",\"*.wav\"))\n  ])\n```\n\nand it took me a while to figure out what was wrong, as the problem manifested half the time only (namely when run on a clean working directory, without cached results - in case when I already had some cached results on the disk, the Promise returned immediately masking the bug).\n\nOnce again: there is a bug in my program, and I know it. But then there is also the Promieses/A+ spec which clearly states, that the callback should not be called before the current stack completes, which I believe leads to more consistent behavior. The README.md of this project proudly claims \"Its fully compatible with the Promises/A+ spec\", so I think it is a bug in the implementation of this library.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/8", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/8/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/8/events", "html_url": "https://github.com/syrusakbary/promise/issues/8", "id": 168039172, "node_id": "MDU6SXNzdWUxNjgwMzkxNzI=", "number": 8, "title": "Combining with futures seems problematic", "user": {"login": "qbolec", "id": 133093, "node_id": "MDQ6VXNlcjEzMzA5Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/133093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qbolec", "html_url": "https://github.com/qbolec", "followers_url": "https://api.github.com/users/qbolec/followers", "following_url": "https://api.github.com/users/qbolec/following{/other_user}", "gists_url": "https://api.github.com/users/qbolec/gists{/gist_id}", "starred_url": "https://api.github.com/users/qbolec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qbolec/subscriptions", "organizations_url": "https://api.github.com/users/qbolec/orgs", "repos_url": "https://api.github.com/users/qbolec/repos", "events_url": "https://api.github.com/users/qbolec/events{/privacy}", "received_events_url": "https://api.github.com/users/qbolec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-07-28T08:20:42Z", "updated_at": "2016-08-03T07:40:53Z", "closed_at": "2016-07-30T06:25:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a difficulty in combining promises with futures.\nHere is a minimal program which reproduces my issue:\n\n```\nimport concurrent.futures\nfrom promise import Promise\nexecutor = concurrent.futures.ThreadPoolExecutor(max_workers=40000);\n\ndef combine(r,n):\n  print \"Completed promise_factorial({})={}*promise_factorial({})\".format(n,n,n-1)\n  return r*n\n\ndef promise_factorial(n):\n  print \"Inside promise_factorial({})\".format(n)\n  if n < 2 :\n    return 1\n  print \"Schedulling promise_factorial({})\".format(n-1)\n  a = executor.submit(promise_factorial,n-1)\n  print \"Making a promise promise_factorial({})\".format(n-1)\n  return Promise.promisify(a).then(lambda r:  combine(r,n))\n\n\ndef done(r):\n  print \"Done all computations! Results is {}\".format(r)\n\npromise_factorial(10).then(lambda r: done(r))\n```\n\nWhen I run it with `python concurrency_test.py` it non-deterministically either fully succeeds, or fails silently like this:\n\n```\n$ python concurrency_test.py\nInside promise_factorial(10)\nSchedulling promise_factorial(9)\nInside promise_factorial(9)\nSchedulling promise_factorial(8)\n Making a promise promise_factorial(9)\nInside promise_factorial(8)\n Making a promise promise_factorial(8)\nSchedulling promise_factorial(7)\n$ echo $?\n0\n```\n\nMy machine has 64 cores.\nI am not skilled in reasoning about concurrent processes and race conditions like that, but I suspect that there are some problems when the promise is not fulfilled before I return from the thread main function - am I right? If so: is there any way to block and wait till the promise is fulfilled before exiting a thread?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/7", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/7/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/7/events", "html_url": "https://github.com/syrusakbary/promise/issues/7", "id": 166550126, "node_id": "MDU6SXNzdWUxNjY1NTAxMjY=", "number": 7, "title": "Python-futures is a python-2 only package", "user": {"login": "Millak", "id": 3628555, "node_id": "MDQ6VXNlcjM2Mjg1NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3628555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Millak", "html_url": "https://github.com/Millak", "followers_url": "https://api.github.com/users/Millak/followers", "following_url": "https://api.github.com/users/Millak/following{/other_user}", "gists_url": "https://api.github.com/users/Millak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Millak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Millak/subscriptions", "organizations_url": "https://api.github.com/users/Millak/orgs", "repos_url": "https://api.github.com/users/Millak/repos", "events_url": "https://api.github.com/users/Millak/events{/privacy}", "received_events_url": "https://api.github.com/users/Millak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-20T10:33:18Z", "updated_at": "2016-08-07T05:17:53Z", "closed_at": "2016-08-07T05:17:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I attempt to run the test suite using python-3, it complains about futures missing.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/6", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/6/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/6/events", "html_url": "https://github.com/syrusakbary/promise/issues/6", "id": 165247791, "node_id": "MDU6SXNzdWUxNjUyNDc3OTE=", "number": 6, "title": "Question: compatibility with asyncio's event loop? ", "user": {"login": "bevensteven", "id": 10735730, "node_id": "MDQ6VXNlcjEwNzM1NzMw", "avatar_url": "https://avatars3.githubusercontent.com/u/10735730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bevensteven", "html_url": "https://github.com/bevensteven", "followers_url": "https://api.github.com/users/bevensteven/followers", "following_url": "https://api.github.com/users/bevensteven/following{/other_user}", "gists_url": "https://api.github.com/users/bevensteven/gists{/gist_id}", "starred_url": "https://api.github.com/users/bevensteven/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bevensteven/subscriptions", "organizations_url": "https://api.github.com/users/bevensteven/orgs", "repos_url": "https://api.github.com/users/bevensteven/repos", "events_url": "https://api.github.com/users/bevensteven/events{/privacy}", "received_events_url": "https://api.github.com/users/bevensteven/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-07-13T06:36:45Z", "updated_at": "2017-04-12T07:31:47Z", "closed_at": "2017-04-12T07:31:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nGreat module you got going on! I am attempting to make Python function identically to NodeJS as part of a personal project. Currently, I am using your Promises in a fashion that follows A+ but still have some trouble understanding how this module would interact with an `asyncio` event loop.\n\nDoes the event loop recognize when a `Promise` is `fulfilled` - similarly to how an `asyncio.Future` is given a result (via `set_result`) and marked as done? \n\nIf you have time, a toy example implementation of using your Promises with the `asyncio` event loop (mimicking Node's event loop) would help a lot.\n\nThanks! \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/5", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/5/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/5/events", "html_url": "https://github.com/syrusakbary/promise/issues/5", "id": 160196686, "node_id": "MDU6SXNzdWUxNjAxOTY2ODY=", "number": 5, "title": "hangs if dict values of promise_for_dict are not promises", "user": {"login": "Globegitter", "id": 2580254, "node_id": "MDQ6VXNlcjI1ODAyNTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2580254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Globegitter", "html_url": "https://github.com/Globegitter", "followers_url": "https://api.github.com/users/Globegitter/followers", "following_url": "https://api.github.com/users/Globegitter/following{/other_user}", "gists_url": "https://api.github.com/users/Globegitter/gists{/gist_id}", "starred_url": "https://api.github.com/users/Globegitter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Globegitter/subscriptions", "organizations_url": "https://api.github.com/users/Globegitter/orgs", "repos_url": "https://api.github.com/users/Globegitter/repos", "events_url": "https://api.github.com/users/Globegitter/events{/privacy}", "received_events_url": "https://api.github.com/users/Globegitter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-14T14:31:49Z", "updated_at": "2016-10-16T02:42:29Z", "closed_at": "2016-10-16T02:42:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Not such a major deal but might be nice if it would thrown an error if the values of the passed in dict are not a `Promise` (I accidentally passed in the futures).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/syrusakbary/promise/issues/2", "repository_url": "https://api.github.com/repos/syrusakbary/promise", "labels_url": "https://api.github.com/repos/syrusakbary/promise/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/syrusakbary/promise/issues/2/comments", "events_url": "https://api.github.com/repos/syrusakbary/promise/issues/2/events", "html_url": "https://github.com/syrusakbary/promise/issues/2", "id": 156572946, "node_id": "MDU6SXNzdWUxNTY1NzI5NDY=", "number": 2, "title": "TypeError: unbound method reject() must be called with Promise instance as first argument", "user": {"login": "cmeadows", "id": 6526632, "node_id": "MDQ6VXNlcjY1MjY2MzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6526632?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmeadows", "html_url": "https://github.com/cmeadows", "followers_url": "https://api.github.com/users/cmeadows/followers", "following_url": "https://api.github.com/users/cmeadows/following{/other_user}", "gists_url": "https://api.github.com/users/cmeadows/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmeadows/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmeadows/subscriptions", "organizations_url": "https://api.github.com/users/cmeadows/orgs", "repos_url": "https://api.github.com/users/cmeadows/repos", "events_url": "https://api.github.com/users/cmeadows/events{/privacy}", "received_events_url": "https://api.github.com/users/cmeadows/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-05-24T18:08:16Z", "updated_at": "2016-06-01T05:08:14Z", "closed_at": "2016-06-01T05:08:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have tried the following:\n\n`except Exception, e:`\n`return Promise.reject(e)`\n\n`return Promise.reject(Exception(e))`\n\nBoth return the following error:\n\n`TypeError: unbound method reject() must be called with Promise instance as first argument (got Exception instance instead)`\n", "performed_via_github_app": null, "score": 1.0}]}