{"total_count": 410, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/python/typing/issues/745", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/745/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/745/comments", "events_url": "https://api.github.com/repos/python/typing/issues/745/events", "html_url": "https://github.com/python/typing/issues/745", "id": 679327044, "node_id": "MDU6SXNzdWU2NzkzMjcwNDQ=", "number": 745, "title": "[Feature request] Include typing type variables in public API", "user": {"login": "NiklasRosenstein", "id": 1318438, "node_id": "MDQ6VXNlcjEzMTg0Mzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1318438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NiklasRosenstein", "html_url": "https://github.com/NiklasRosenstein", "followers_url": "https://api.github.com/users/NiklasRosenstein/followers", "following_url": "https://api.github.com/users/NiklasRosenstein/following{/other_user}", "gists_url": "https://api.github.com/users/NiklasRosenstein/gists{/gist_id}", "starred_url": "https://api.github.com/users/NiklasRosenstein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NiklasRosenstein/subscriptions", "organizations_url": "https://api.github.com/users/NiklasRosenstein/orgs", "repos_url": "https://api.github.com/users/NiklasRosenstein/repos", "events_url": "https://api.github.com/users/NiklasRosenstein/events{/privacy}", "received_events_url": "https://api.github.com/users/NiklasRosenstein/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-14T18:18:20Z", "updated_at": "2020-08-14T23:34:39Z", "closed_at": "2020-08-14T23:34:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Type**: Feature Request  \r\n\r\n```py\r\nfrom typing import KT, T, T_co\r\n```\r\n\r\nIf all you need is a `T` type variable, you have to import `TypeVar` and create a new instance. However the `typing` module already declares common type variables that could be re-used in many cases, but they are not part of the public API (according to `typing.__all__`).\r\n\r\nThis is a feature request to include the type variables defined in the `typing` module in `typing.__all__`, which will ultimately allow importing these type variables without adding `# type: ignore` if the code is checked with Mypy.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/744", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/744/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/744/comments", "events_url": "https://api.github.com/repos/python/typing/issues/744/events", "html_url": "https://github.com/python/typing/issues/744", "id": 667125273, "node_id": "MDU6SXNzdWU2NjcxMjUyNzM=", "number": 744, "title": "zip() parameters typing information is lost?", "user": {"login": "kalessin", "id": 342426, "node_id": "MDQ6VXNlcjM0MjQyNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/342426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kalessin", "html_url": "https://github.com/kalessin", "followers_url": "https://api.github.com/users/kalessin/followers", "following_url": "https://api.github.com/users/kalessin/following{/other_user}", "gists_url": "https://api.github.com/users/kalessin/gists{/gist_id}", "starred_url": "https://api.github.com/users/kalessin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kalessin/subscriptions", "organizations_url": "https://api.github.com/users/kalessin/orgs", "repos_url": "https://api.github.com/users/kalessin/repos", "events_url": "https://api.github.com/users/kalessin/events{/privacy}", "received_events_url": "https://api.github.com/users/kalessin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-28T14:34:54Z", "updated_at": "2020-07-28T14:53:18Z", "closed_at": "2020-07-28T14:41:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I have:\r\n\r\n```\r\nf: Tuple[Tuple[str, float], ...] = zip(('bla', 'ble', 'blo'), (5.0, 6.0, 7.0))\r\n```\r\ntype checking gives error:\r\n\r\n_Incompatible types in assignment (expression has type \"Tuple[Tuple[object, ...], Tuple[object, ...], Tuple[object, ...]]\", variable has type \"Tuple[Tuple[str, float], ...]\")_\r\n\r\nis this a problem with python or with mypy?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/743", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/743/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/743/comments", "events_url": "https://api.github.com/repos/python/typing/issues/743/events", "html_url": "https://github.com/python/typing/issues/743", "id": 666387251, "node_id": "MDU6SXNzdWU2NjYzODcyNTE=", "number": 743, "title": "AttributeError: module 'package.module' has no attribute 'attribute' on cyclic import with annotations ", "user": {"login": "mde-pach", "id": 12986913, "node_id": "MDQ6VXNlcjEyOTg2OTEz", "avatar_url": "https://avatars1.githubusercontent.com/u/12986913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mde-pach", "html_url": "https://github.com/mde-pach", "followers_url": "https://api.github.com/users/mde-pach/followers", "following_url": "https://api.github.com/users/mde-pach/following{/other_user}", "gists_url": "https://api.github.com/users/mde-pach/gists{/gist_id}", "starred_url": "https://api.github.com/users/mde-pach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mde-pach/subscriptions", "organizations_url": "https://api.github.com/users/mde-pach/orgs", "repos_url": "https://api.github.com/users/mde-pach/repos", "events_url": "https://api.github.com/users/mde-pach/events{/privacy}", "received_events_url": "https://api.github.com/users/mde-pach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-27T15:33:28Z", "updated_at": "2020-07-27T16:30:01Z", "closed_at": "2020-07-27T16:30:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I make a cyclic import for typing annotation needs, I got an AtributeError at runtime:\r\n\r\n```\r\nsome_package\r\n\u251c\u2500\u2500 __init__.py\r\n\u251c\u2500\u2500 bar.py\r\n\u2514\u2500\u2500 foo.py\r\n```\r\n___\r\n```python\r\n$> cat some_package/bar.py\r\nfrom . import foo\r\n\r\nclass Bar:\r\n    def return_data(self, arg: foo.Data) -> Data:  # use foo.Data for typing annotation\r\n        return Data()\r\n\r\nclass Data:\r\n    pass\r\n```\r\n```python\r\n$> cat some_package/bar.py\r\nfrom . import bar\r\n\r\nclass Foo:\r\n    def __init__(self) -> None:\r\n        self._bar = bar.Bar()\r\n\r\n    def return_data(self) -> bar.Data: # use bar.Data for typing annotation\r\n        self._bar.return_data(Data())\r\n\r\nclass Data:\r\n    pass\r\n```\r\n___\r\n```\r\n$> python3\r\n>>> from some_package import bar\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/some_package /bar.py\", line 1, in <module>\r\n    from . import foo\r\n  File \"/some_package /foo.py\", line 3, in <module>\r\n    class Foo:\r\n  File \"/some_package /foo.py\", line 7, in Foo\r\n    def return_data(self) -> bar.Data:\r\nAttributeError: module 'some_package.bar' has no attribute 'Data'\r\n>>>\r\n```\r\n___\r\nIt looks like a strange behavior and I though even if it was due to a misuse of I, I could reference it here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/741", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/741/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/741/comments", "events_url": "https://api.github.com/repos/python/typing/issues/741/events", "html_url": "https://github.com/python/typing/issues/741", "id": 662809595, "node_id": "MDU6SXNzdWU2NjI4MDk1OTU=", "number": 741, "title": "Please bump setup.py when tagging releases", "user": {"login": "alucryd", "id": 1561084, "node_id": "MDQ6VXNlcjE1NjEwODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1561084?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alucryd", "html_url": "https://github.com/alucryd", "followers_url": "https://api.github.com/users/alucryd/followers", "following_url": "https://api.github.com/users/alucryd/following{/other_user}", "gists_url": "https://api.github.com/users/alucryd/gists{/gist_id}", "starred_url": "https://api.github.com/users/alucryd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alucryd/subscriptions", "organizations_url": "https://api.github.com/users/alucryd/orgs", "repos_url": "https://api.github.com/users/alucryd/repos", "events_url": "https://api.github.com/users/alucryd/events{/privacy}", "received_events_url": "https://api.github.com/users/alucryd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-21T09:40:42Z", "updated_at": "2020-07-23T11:12:45Z", "closed_at": "2020-07-22T14:31:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys, could you please make sure you always bump setup.py when tagging releases? It's been really hit or miss with this repo, and when it's miss it's really annoying for packagers. Thanks in advance :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/740", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/740/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/740/comments", "events_url": "https://api.github.com/repos/python/typing/issues/740/events", "html_url": "https://github.com/python/typing/issues/740", "id": 657644924, "node_id": "MDU6SXNzdWU2NTc2NDQ5MjQ=", "number": 740, "title": "Cant create a NewType from a subscriptable type", "user": {"login": "nhumrich", "id": 4661889, "node_id": "MDQ6VXNlcjQ2NjE4ODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/4661889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhumrich", "html_url": "https://github.com/nhumrich", "followers_url": "https://api.github.com/users/nhumrich/followers", "following_url": "https://api.github.com/users/nhumrich/following{/other_user}", "gists_url": "https://api.github.com/users/nhumrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhumrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhumrich/subscriptions", "organizations_url": "https://api.github.com/users/nhumrich/orgs", "repos_url": "https://api.github.com/users/nhumrich/repos", "events_url": "https://api.github.com/users/nhumrich/events{/privacy}", "received_events_url": "https://api.github.com/users/nhumrich/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-15T20:48:05Z", "updated_at": "2020-07-15T22:41:49Z", "closed_at": "2020-07-15T22:41:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to create a unique type, which is mostly just an alias for `Optional`. \r\nTypically, this is done with `NewType`. For example:\r\n\r\n```python\r\nMyType = typing.NewType('MyType', str)\r\n```\r\n\r\nBut, this does not work on subscript-able types, because it causes a type error while python is parsing the code:\r\n```python\r\nMyType = typing.NewType('MyType', typing.Optional)\r\na: MyType[str] = 'cabbages'\r\n```\r\nproduces:\r\n> TypeError: 'function' object is not subscriptable\r\n\r\nbecause MyType is actually a function. `<function NewType.<locals>.new_type at 0xXXXXXXXXXXX>`\r\n\r\nShould `NewType` work for aliasing subscript able types? \r\n\r\n--- \r\nI have also tried the below, which also doesn't work, for a completely different reason.\r\n```\r\nK = typing.TypeVar('K')\r\nclass MyType(Optional[K]):\r\n    pass\r\n# TypeError: Cannot subclass <class 'typing._SpecialForm'>", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/739", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/739/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/739/comments", "events_url": "https://api.github.com/repos/python/typing/issues/739/events", "html_url": "https://github.com/python/typing/issues/739", "id": 655042492, "node_id": "MDU6SXNzdWU2NTUwNDI0OTI=", "number": 739, "title": "Recent bump to 3.7.4.2 fails projects that depend on typing", "user": {"login": "vkuzmin-uber", "id": 32653799, "node_id": "MDQ6VXNlcjMyNjUzNzk5", "avatar_url": "https://avatars1.githubusercontent.com/u/32653799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vkuzmin-uber", "html_url": "https://github.com/vkuzmin-uber", "followers_url": "https://api.github.com/users/vkuzmin-uber/followers", "following_url": "https://api.github.com/users/vkuzmin-uber/following{/other_user}", "gists_url": "https://api.github.com/users/vkuzmin-uber/gists{/gist_id}", "starred_url": "https://api.github.com/users/vkuzmin-uber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vkuzmin-uber/subscriptions", "organizations_url": "https://api.github.com/users/vkuzmin-uber/orgs", "repos_url": "https://api.github.com/users/vkuzmin-uber/repos", "events_url": "https://api.github.com/users/vkuzmin-uber/events{/privacy}", "received_events_url": "https://api.github.com/users/vkuzmin-uber/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2020-07-10T21:20:26Z", "updated_at": "2020-07-14T16:59:31Z", "closed_at": "2020-07-14T16:59:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "After recent bump https://github.com/python/typing/blob/master/setup.py we started to see problem:\r\n\r\n\"ERROR: You need Python 2.7 or 3.4 to install the typing package.\"\r\n\r\nIt introduces problem for projects that used py 2.7 and 3.7 if it used \"typing\" w/o pinned version", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/738", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/738/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/738/comments", "events_url": "https://api.github.com/repos/python/typing/issues/738/events", "html_url": "https://github.com/python/typing/issues/738", "id": 654634411, "node_id": "MDU6SXNzdWU2NTQ2MzQ0MTE=", "number": 738, "title": "py3 whl for 3.7.4.2 ?", "user": {"login": "jywu-msft", "id": 43355415, "node_id": "MDQ6VXNlcjQzMzU1NDE1", "avatar_url": "https://avatars0.githubusercontent.com/u/43355415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jywu-msft", "html_url": "https://github.com/jywu-msft", "followers_url": "https://api.github.com/users/jywu-msft/followers", "following_url": "https://api.github.com/users/jywu-msft/following{/other_user}", "gists_url": "https://api.github.com/users/jywu-msft/gists{/gist_id}", "starred_url": "https://api.github.com/users/jywu-msft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jywu-msft/subscriptions", "organizations_url": "https://api.github.com/users/jywu-msft/orgs", "repos_url": "https://api.github.com/users/jywu-msft/repos", "events_url": "https://api.github.com/users/jywu-msft/events{/privacy}", "received_events_url": "https://api.github.com/users/jywu-msft/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-10T09:05:28Z", "updated_at": "2020-07-10T23:15:51Z", "closed_at": "2020-07-10T15:27:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "the pypi release for 3.7.4.2 seems to be missing the py3 whl? \r\nhttps://pypi.org/project/typing/#files\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/734", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/734/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/734/comments", "events_url": "https://api.github.com/repos/python/typing/issues/734/events", "html_url": "https://github.com/python/typing/issues/734", "id": 644256368, "node_id": "MDU6SXNzdWU2NDQyNTYzNjg=", "number": 734, "title": "Issue using Protocol as a base class with Python 3.5.2", "user": {"login": "Slonegg", "id": 2404864, "node_id": "MDQ6VXNlcjI0MDQ4NjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2404864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Slonegg", "html_url": "https://github.com/Slonegg", "followers_url": "https://api.github.com/users/Slonegg/followers", "following_url": "https://api.github.com/users/Slonegg/following{/other_user}", "gists_url": "https://api.github.com/users/Slonegg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Slonegg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Slonegg/subscriptions", "organizations_url": "https://api.github.com/users/Slonegg/orgs", "repos_url": "https://api.github.com/users/Slonegg/repos", "events_url": "https://api.github.com/users/Slonegg/events{/privacy}", "received_events_url": "https://api.github.com/users/Slonegg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-24T01:47:54Z", "updated_at": "2020-08-03T23:50:06Z", "closed_at": "2020-08-03T23:50:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python: 3.5.2\r\nOS: macOS Mojave\r\n\r\nSeems that `_generic_new` implementation from `typing_extensions` module is outdated or incorrect. When `typing_extensions` relies on its own implementation of `_generic_new` I get the following error.\r\n\r\nScript to reproduce:\r\n```\r\nimport abc\r\nfrom typing_extensions import Protocol, runtime_checkable\r\n\r\n\r\n@runtime_checkable\r\nclass Proto(Protocol):\r\n    @abc.abstractmethod\r\n    def foo(self):\r\n        pass\r\n\r\n\r\nclass SomeClass(Proto):\r\n    def __init__(self, some_arg):\r\n        pass\r\n\r\n    def foo(self):\r\n        return 5\r\n\r\n\r\nx = SomeClass(3)\r\n```\r\n\r\nTraceback:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/dikobraz/repro.py\", line 20, in <module>\r\n    x = SomeClass(3)\r\n  File \"/Users/dikobraz/env-py-3.5-tf-2/lib/python3.5/site-packages/typing_extensions.py\", line 1357, in __new__\r\n    return _generic_new(cls.__next_in_mro__, cls, *args, **kwds)\r\n  File \"/Users/dikobraz/env-py-3.5-tf-2/lib/python3.5/site-packages/typing_extensions.py\", line 87, in _generic_new\r\n    return base_cls.__new__(cls, *args, **kwargs)\r\nTypeError: object() takes no parameters\r\n```\r\n\r\nIn debugger:\r\n<img width=\"1035\" alt=\"Screen Shot 2020-06-23 at 6 47 37 PM\" src=\"https://user-images.githubusercontent.com/2404864/85487864-381caa00-b582-11ea-94d1-15b79656ad7e.png\">", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/728", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/728/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/728/comments", "events_url": "https://api.github.com/repos/python/typing/issues/728/events", "html_url": "https://github.com/python/typing/issues/728", "id": 626122918, "node_id": "MDU6SXNzdWU2MjYxMjI5MTg=", "number": 728, "title": "`typing` should have a single-method protocol for`__lt__`", "user": {"login": "ramalho", "id": 29944, "node_id": "MDQ6VXNlcjI5OTQ0", "avatar_url": "https://avatars2.githubusercontent.com/u/29944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramalho", "html_url": "https://github.com/ramalho", "followers_url": "https://api.github.com/users/ramalho/followers", "following_url": "https://api.github.com/users/ramalho/following{/other_user}", "gists_url": "https://api.github.com/users/ramalho/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramalho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramalho/subscriptions", "organizations_url": "https://api.github.com/users/ramalho/orgs", "repos_url": "https://api.github.com/users/ramalho/repos", "events_url": "https://api.github.com/users/ramalho/events{/privacy}", "received_events_url": "https://api.github.com/users/ramalho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-28T00:20:28Z", "updated_at": "2020-06-21T17:42:53Z", "closed_at": "2020-06-21T17:42:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "On `typeshed` there are several issues that can be fixed with a protocol like this:\r\n\r\n```\r\nclass _Sortable(Protocol):\r\n        def __lt__(self, other) -> bool: ...\r\n_SortableT = TypeVar(\"_SortableT\", bound=_Sortable)\r\n```\r\n\r\nThat protocol is already defined _ad hoc_ in [`statistics.pyi`](https://github.com/python/typeshed/blob/6575bd06bb8c8f3f0a45f878e5766be57beb939e/stdlib/3/statistics.pyi#L12), to solve a couple of cases there, but it can also be used in `builtins.pyi` for `max()`, `min()` `sorted()`, `list.sort()` or any other function that depends on sorting items to do its job.\r\n\r\nFor many user-defined functions that use one of these functions internally, a protocol like `_Sortable` is needed to provide accurate type hints. That's the case of `statistics.median_high` and `median_low`: the use cases that prompted the definition of `_Sortable` in `statistics.pyi`.\r\n\r\nI'm not sure what its name should be. A few options:\r\n\r\n- `Sortable` is OK by me.\r\n- PEP 484 has an [example](https://www.python.org/dev/peps/pep-0484/#type-variables-with-an-upper-bound) ABC named `Comparable` that defines `__lt__`\u2014but the text suggests the other comparison operators would be part of that ABC.\r\n- `typing` has a bunch of `SupportsXyz` protocols, so maybe `SupportsLessThan`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/726", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/726/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/726/comments", "events_url": "https://api.github.com/repos/python/typing/issues/726/events", "html_url": "https://github.com/python/typing/issues/726", "id": 623177284, "node_id": "MDU6SXNzdWU2MjMxNzcyODQ=", "number": 726, "title": "Exploring the validity of adding typings to general namespace", "user": {"login": "mahmoudajawad", "id": 316734, "node_id": "MDQ6VXNlcjMxNjczNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/316734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahmoudajawad", "html_url": "https://github.com/mahmoudajawad", "followers_url": "https://api.github.com/users/mahmoudajawad/followers", "following_url": "https://api.github.com/users/mahmoudajawad/following{/other_user}", "gists_url": "https://api.github.com/users/mahmoudajawad/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahmoudajawad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahmoudajawad/subscriptions", "organizations_url": "https://api.github.com/users/mahmoudajawad/orgs", "repos_url": "https://api.github.com/users/mahmoudajawad/repos", "events_url": "https://api.github.com/users/mahmoudajawad/events{/privacy}", "received_events_url": "https://api.github.com/users/mahmoudajawad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-22T12:36:11Z", "updated_at": "2020-05-22T21:48:03Z", "closed_at": "2020-05-22T21:48:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using type-hinting is becoming the norm in python community. in fact, it is helping driving the development process of the different projects in better direction.\r\n\r\nThat said, I wanted to hear from the squad steering python development process about the validity of adding the popular typings, such as 'Dict, List, Any, ..etc', to the general namespace, without requiring importing them. I understand this is a breaking change to those using the same naming schemes, so here's my suggestion to explore:\r\n\r\n* Plan adding the typings to the language without requiring developers to import them to upcoming python 3.9 which flags enough time to current developers to update conflicting naming scheme.\r\n* For current python 3.8, add a CLI arg/param to get the typings available without needing to import them, such as running python with `-t` arg/param from typing (not to confuse python 2.x `-t` warning for mixed indention style).\r\n* This will keep current project safe, while giving developers who are planning to annotate-all-things having the access to typings without manually importing them every time.\r\n\r\nI have to say, this looks to me like a common-sense matter, and not having it means I'm missing some part of the puzzle, and for that this is more of a request to understand the limitation of not being able to implement this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/723", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/723/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/723/comments", "events_url": "https://api.github.com/repos/python/typing/issues/723/events", "html_url": "https://github.com/python/typing/issues/723", "id": 617280429, "node_id": "MDU6SXNzdWU2MTcyODA0Mjk=", "number": 723, "title": "Add `SupportsIndex` to `typing_extensions`", "user": {"login": "srittau", "id": 52799, "node_id": "MDQ6VXNlcjUyNzk5", "avatar_url": "https://avatars3.githubusercontent.com/u/52799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srittau", "html_url": "https://github.com/srittau", "followers_url": "https://api.github.com/users/srittau/followers", "following_url": "https://api.github.com/users/srittau/following{/other_user}", "gists_url": "https://api.github.com/users/srittau/gists{/gist_id}", "starred_url": "https://api.github.com/users/srittau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srittau/subscriptions", "organizations_url": "https://api.github.com/users/srittau/orgs", "repos_url": "https://api.github.com/users/srittau/repos", "events_url": "https://api.github.com/users/srittau/events{/privacy}", "received_events_url": "https://api.github.com/users/srittau/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-13T09:09:48Z", "updated_at": "2020-05-13T16:10:09Z", "closed_at": "2020-05-13T16:10:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Cf python/typeshed#3974.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/721", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/721/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/721/comments", "events_url": "https://api.github.com/repos/python/typing/issues/721/events", "html_url": "https://github.com/python/typing/issues/721", "id": 611213652, "node_id": "MDU6SXNzdWU2MTEyMTM2NTI=", "number": 721, "title": "_abc_registry errors with py3.8", "user": {"login": "awais786", "id": 445320, "node_id": "MDQ6VXNlcjQ0NTMyMA==", "avatar_url": "https://avatars3.githubusercontent.com/u/445320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awais786", "html_url": "https://github.com/awais786", "followers_url": "https://api.github.com/users/awais786/followers", "following_url": "https://api.github.com/users/awais786/following{/other_user}", "gists_url": "https://api.github.com/users/awais786/gists{/gist_id}", "starred_url": "https://api.github.com/users/awais786/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awais786/subscriptions", "organizations_url": "https://api.github.com/users/awais786/orgs", "repos_url": "https://api.github.com/users/awais786/repos", "events_url": "https://api.github.com/users/awais786/events{/privacy}", "received_events_url": "https://api.github.com/users/awais786/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2020-05-02T15:29:03Z", "updated_at": "2020-07-13T23:24:40Z", "closed_at": "2020-07-09T23:00:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n    from typing import Any\r\n  File \"/.tox/django22/lib/python3.8/site-packages/typing.py\", line 1357, in <module>\r\n    class Callable(extra=collections_abc.Callable, metaclass=CallableMeta):\r\n  File \"/.tox/django22/lib/python3.8/site-packages/typing.py\", line 1005, in __new__\r\n    self._abc_registry = extra._abc_registry\r\nAttributeError: type object 'Callable' has no attribute '_abc_registry'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/717", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/717/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/717/comments", "events_url": "https://api.github.com/repos/python/typing/issues/717/events", "html_url": "https://github.com/python/typing/issues/717", "id": 606722085, "node_id": "MDU6SXNzdWU2MDY3MjIwODU=", "number": 717, "title": "No straightforward way to get repr of Optional", "user": {"login": "Endilll", "id": 12883766, "node_id": "MDQ6VXNlcjEyODgzNzY2", "avatar_url": "https://avatars2.githubusercontent.com/u/12883766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Endilll", "html_url": "https://github.com/Endilll", "followers_url": "https://api.github.com/users/Endilll/followers", "following_url": "https://api.github.com/users/Endilll/following{/other_user}", "gists_url": "https://api.github.com/users/Endilll/gists{/gist_id}", "starred_url": "https://api.github.com/users/Endilll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Endilll/subscriptions", "organizations_url": "https://api.github.com/users/Endilll/orgs", "repos_url": "https://api.github.com/users/Endilll/repos", "events_url": "https://api.github.com/users/Endilll/events{/privacy}", "received_events_url": "https://api.github.com/users/Endilll/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-25T08:44:05Z", "updated_at": "2020-04-25T18:42:12Z", "closed_at": "2020-04-25T18:42:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "What we're currently left with is `typing.Union[T, NoneType]` when source code is not available, which is noisy compared to `typing.Optional[T]`.\r\n\r\n### Usecase\r\n\r\nConsider the following: C++ library has C++ plugins, supplied by user. It provides Python wrappers for their functions, dynamically filling out their type annotations.\r\n\r\nUser asks his favorite autocompletion engine for signature of one of the wrapped functions, and all it has to generate nice human-readable string is a bunch of `typing` objects without any source code they've been generated from.\r\n\r\n### Workaround\r\n\r\nOf course it's possible to do some string replacements downstream, like I did in [this Jedi PR](https://github.com/davidhalter/jedi/pull/1441), but I wonder if `typing` can enable us to achieve this in a clean way.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/714", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/714/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/714/comments", "events_url": "https://api.github.com/repos/python/typing/issues/714/events", "html_url": "https://github.com/python/typing/issues/714", "id": 598482666, "node_id": "MDU6SXNzdWU1OTg0ODI2NjY=", "number": 714, "title": "NameError: name 'Clazz' is not defined", "user": {"login": "urain39", "id": 16981964, "node_id": "MDQ6VXNlcjE2OTgxOTY0", "avatar_url": "https://avatars2.githubusercontent.com/u/16981964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urain39", "html_url": "https://github.com/urain39", "followers_url": "https://api.github.com/users/urain39/followers", "following_url": "https://api.github.com/users/urain39/following{/other_user}", "gists_url": "https://api.github.com/users/urain39/gists{/gist_id}", "starred_url": "https://api.github.com/users/urain39/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urain39/subscriptions", "organizations_url": "https://api.github.com/users/urain39/orgs", "repos_url": "https://api.github.com/users/urain39/repos", "events_url": "https://api.github.com/users/urain39/events{/privacy}", "received_events_url": "https://api.github.com/users/urain39/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-12T13:17:39Z", "updated_at": "2020-04-12T15:45:21Z", "closed_at": "2020-04-12T15:28:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "My code:\r\n```py\r\nclass Clazz():\r\n\tdef method(self) -> Clazz:\r\n\t\treturn self\r\n\r\nClazz().method().method()\r\n```\r\n\r\nMy mypy config:\r\n```ini\r\n[mypy]\r\nstrict=true\r\n```\r\n\r\nRun log:\r\n```log\r\n$ mypy test2.py\r\nSuccess: no issues found in 1 source file\r\n$ python test2.py\r\nTraceback (most recent call last):\r\n  File \"test2.py\", line 1, in <module>\r\n    class Clazz():\r\n  File \"test2.py\", line 2, in Clazz\r\n    def method(self) -> Clazz:\r\nNameError: name 'Clazz' is not defined\r\n```\r\n\r\nMy Python version:\r\n```sh\r\n$ python -V\r\nPython 3.8.2\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/713", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/713/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/713/comments", "events_url": "https://api.github.com/repos/python/typing/issues/713/events", "html_url": "https://github.com/python/typing/issues/713", "id": 598087489, "node_id": "MDU6SXNzdWU1OTgwODc0ODk=", "number": 713, "title": "Typing decorated function (\"Callable[..., Any]\" has no attribute \"__wrapped__\")", "user": {"login": "maximderbin", "id": 2700538, "node_id": "MDQ6VXNlcjI3MDA1Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2700538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maximderbin", "html_url": "https://github.com/maximderbin", "followers_url": "https://api.github.com/users/maximderbin/followers", "following_url": "https://api.github.com/users/maximderbin/following{/other_user}", "gists_url": "https://api.github.com/users/maximderbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/maximderbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maximderbin/subscriptions", "organizations_url": "https://api.github.com/users/maximderbin/orgs", "repos_url": "https://api.github.com/users/maximderbin/repos", "events_url": "https://api.github.com/users/maximderbin/events{/privacy}", "received_events_url": "https://api.github.com/users/maximderbin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-10T20:46:32Z", "updated_at": "2020-04-10T22:47:41Z", "closed_at": "2020-04-10T22:47:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, just ran into issue with typing decorated function, did some googling but no luck.\r\n\r\nHere is the example:\r\n```python\r\ndef my_function(\r\n    method: Callable[..., Any],\r\n    kwargs: Dict[str, Any],\r\n) -> Callable[..., Any]:\r\n    if hasattr(method, \"__wrapped__\"):\r\n        return method.__wrapped__  # error: \"Callable[..., Any]\" has no attribute \"__wrapped__\"\r\n    else:\r\n        return method\r\n```\r\n\r\nWhat will be the best way to specify that function object may or may not be decorated aka have `__wrapped__` attribute?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/711", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/711/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/711/comments", "events_url": "https://api.github.com/repos/python/typing/issues/711/events", "html_url": "https://github.com/python/typing/issues/711", "id": 595116933, "node_id": "MDU6SXNzdWU1OTUxMTY5MzM=", "number": 711, "title": "[Feature Inquiry] Runtime @overload information", "user": {"login": "Tinche", "id": 1909233, "node_id": "MDQ6VXNlcjE5MDkyMzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1909233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tinche", "html_url": "https://github.com/Tinche", "followers_url": "https://api.github.com/users/Tinche/followers", "following_url": "https://api.github.com/users/Tinche/following{/other_user}", "gists_url": "https://api.github.com/users/Tinche/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tinche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tinche/subscriptions", "organizations_url": "https://api.github.com/users/Tinche/orgs", "repos_url": "https://api.github.com/users/Tinche/repos", "events_url": "https://api.github.com/users/Tinche/events{/privacy}", "received_events_url": "https://api.github.com/users/Tinche/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-06T13:29:01Z", "updated_at": "2020-04-06T23:17:57Z", "closed_at": "2020-04-06T19:09:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nthis issue was originally filed over at https://github.com/python/mypy, but this might be a better place for it.\r\n\r\nThe @overload functionality is very useful. It would be even more useful if we could access the overloads programmatically, during runtime. To give a little context, I'm the author of [cattrs](https://github.com/Tinche/cattrs), which uses runtime type information heavily for de/serialization purposes.\r\n\r\nFor example, given a class like:\r\n```\r\nfrom typing import overload\r\nimport attr\r\n\r\n\r\n@attr.s\r\nclass Test:\r\n    @overload\r\n    def a(self, b: int) -> int:\r\n        ...\r\n\r\n    @overload\r\n    def a(self, b: float) -> float:\r\n        ...\r\n\r\n    def a(self, x):\r\n        return x\r\n```\r\n\r\nIt would be amazing if `Test.a` (or just `Test`) could be inspected for all overloads. As far as I can see, this information gets completely lost at runtime. I'm not sure what amount of black magic would make this possible?\r\n\r\nI would be happy to go into more detail about why this would be very useful to be able to do if the authors are unconvinced of its utility.\r\n\r\nOver at the original issue, @ethanhs mentioned this might even be technically impossible to do right now, so I'd be interested in brainstorming workarounds too.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/710", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/710/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/710/comments", "events_url": "https://api.github.com/repos/python/typing/issues/710/events", "html_url": "https://github.com/python/typing/issues/710", "id": 591783181, "node_id": "MDU6SXNzdWU1OTE3ODMxODE=", "number": 710, "title": "Support isinstance check for typing.Type", "user": {"login": "penguinolog", "id": 16033331, "node_id": "MDQ6VXNlcjE2MDMzMzMx", "avatar_url": "https://avatars1.githubusercontent.com/u/16033331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/penguinolog", "html_url": "https://github.com/penguinolog", "followers_url": "https://api.github.com/users/penguinolog/followers", "following_url": "https://api.github.com/users/penguinolog/following{/other_user}", "gists_url": "https://api.github.com/users/penguinolog/gists{/gist_id}", "starred_url": "https://api.github.com/users/penguinolog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/penguinolog/subscriptions", "organizations_url": "https://api.github.com/users/penguinolog/orgs", "repos_url": "https://api.github.com/users/penguinolog/repos", "events_url": "https://api.github.com/users/penguinolog/events{/privacy}", "received_events_url": "https://api.github.com/users/penguinolog/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-01T09:51:09Z", "updated_at": "2020-04-01T20:40:13Z", "closed_at": "2020-04-01T20:40:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently objects like `typing.Type[type]` do not support `isinstance` check, btw it can be simple implemented as:\r\n\r\n```python\r\ndef __instancecheck__(self, instance: Any) -> bool:\r\n    return self.__args__[0] == instance\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/709", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/709/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/709/comments", "events_url": "https://api.github.com/repos/python/typing/issues/709/events", "html_url": "https://github.com/python/typing/issues/709", "id": 589420681, "node_id": "MDU6SXNzdWU1ODk0MjA2ODE=", "number": 709, "title": "Bump typing_extensions version", "user": {"login": "apadmarao", "id": 6343687, "node_id": "MDQ6VXNlcjYzNDM2ODc=", "avatar_url": "https://avatars3.githubusercontent.com/u/6343687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apadmarao", "html_url": "https://github.com/apadmarao", "followers_url": "https://api.github.com/users/apadmarao/followers", "following_url": "https://api.github.com/users/apadmarao/following{/other_user}", "gists_url": "https://api.github.com/users/apadmarao/gists{/gist_id}", "starred_url": "https://api.github.com/users/apadmarao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apadmarao/subscriptions", "organizations_url": "https://api.github.com/users/apadmarao/orgs", "repos_url": "https://api.github.com/users/apadmarao/repos", "events_url": "https://api.github.com/users/apadmarao/events{/privacy}", "received_events_url": "https://api.github.com/users/apadmarao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-03-27T21:24:35Z", "updated_at": "2020-04-03T20:05:10Z", "closed_at": "2020-04-02T17:48:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm wondering if we can bump typing_extensions. I'm hoping to depend on the changes to TypedDict in #687 and #700", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/707", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/707/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/707/comments", "events_url": "https://api.github.com/repos/python/typing/issues/707/events", "html_url": "https://github.com/python/typing/issues/707", "id": 587857931, "node_id": "MDU6SXNzdWU1ODc4NTc5MzE=", "number": 707, "title": "Cannot Import Literal", "user": {"login": "sarthak212", "id": 33999269, "node_id": "MDQ6VXNlcjMzOTk5MjY5", "avatar_url": "https://avatars2.githubusercontent.com/u/33999269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sarthak212", "html_url": "https://github.com/sarthak212", "followers_url": "https://api.github.com/users/sarthak212/followers", "following_url": "https://api.github.com/users/sarthak212/following{/other_user}", "gists_url": "https://api.github.com/users/sarthak212/gists{/gist_id}", "starred_url": "https://api.github.com/users/sarthak212/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sarthak212/subscriptions", "organizations_url": "https://api.github.com/users/sarthak212/orgs", "repos_url": "https://api.github.com/users/sarthak212/repos", "events_url": "https://api.github.com/users/sarthak212/events{/privacy}", "received_events_url": "https://api.github.com/users/sarthak212/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-25T17:16:53Z", "updated_at": "2020-03-25T17:19:21Z", "closed_at": "2020-03-25T17:19:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python version: Python 3.7.5\r\nOs: Kali linux 2020.1\r\n\r\nWhen try to import Literal it Shows a error that Cannot import literal from typing\r\n`ImportError: cannot import name 'Literal' from 'typing' (/usr/lib/python3.7/typing.py)`\r\nIs literal deprecated in new python version? Because Literal is present in python2 typing.py script file but not in new typing.py script file.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/706", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/706/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/706/comments", "events_url": "https://api.github.com/repos/python/typing/issues/706/events", "html_url": "https://github.com/python/typing/issues/706", "id": 577307035, "node_id": "MDU6SXNzdWU1NzczMDcwMzU=", "number": 706, "title": "Generic version of MethodType?", "user": {"login": "kawing-chiu", "id": 5235260, "node_id": "MDQ6VXNlcjUyMzUyNjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/5235260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kawing-chiu", "html_url": "https://github.com/kawing-chiu", "followers_url": "https://api.github.com/users/kawing-chiu/followers", "following_url": "https://api.github.com/users/kawing-chiu/following{/other_user}", "gists_url": "https://api.github.com/users/kawing-chiu/gists{/gist_id}", "starred_url": "https://api.github.com/users/kawing-chiu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kawing-chiu/subscriptions", "organizations_url": "https://api.github.com/users/kawing-chiu/orgs", "repos_url": "https://api.github.com/users/kawing-chiu/repos", "events_url": "https://api.github.com/users/kawing-chiu/events{/privacy}", "received_events_url": "https://api.github.com/users/kawing-chiu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-07T09:24:11Z", "updated_at": "2020-03-08T21:38:30Z", "closed_at": "2020-03-08T21:38:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm thinking of something like this:\r\n```python\r\nfrom types import MethodType\r\n# or\r\n# from typing import MethodType\r\n\r\nclass SomeType:\r\n    def method(self):\r\n        pass\r\n\r\n# this function only accepts methods bound to instances of MyType:\r\ndef f(handler: MethodType[SomeType]):\r\n    pass\r\n\r\ns = SomeType()\r\nf(s.method)  # OK\r\n```\r\nMaybe I'm missing something but I can't find a way to express this. I think it's quite natural for `MethodType` to be a generic.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/705", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/705/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/705/comments", "events_url": "https://api.github.com/repos/python/typing/issues/705/events", "html_url": "https://github.com/python/typing/issues/705", "id": 576665307, "node_id": "MDU6SXNzdWU1NzY2NjUzMDc=", "number": 705, "title": "Final qualifier for unpacked values?", "user": {"login": "Tatsh", "id": 724848, "node_id": "MDQ6VXNlcjcyNDg0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/724848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tatsh", "html_url": "https://github.com/Tatsh", "followers_url": "https://api.github.com/users/Tatsh/followers", "following_url": "https://api.github.com/users/Tatsh/following{/other_user}", "gists_url": "https://api.github.com/users/Tatsh/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tatsh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tatsh/subscriptions", "organizations_url": "https://api.github.com/users/Tatsh/orgs", "repos_url": "https://api.github.com/users/Tatsh/repos", "events_url": "https://api.github.com/users/Tatsh/events{/privacy}", "received_events_url": "https://api.github.com/users/Tatsh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-06T03:03:24Z", "updated_at": "2020-03-06T05:03:41Z", "closed_at": "2020-03-06T05:03:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I looked at [PEP 591](https://www.python.org/dev/peps/pep-0591/) and saw no mention of unpacking.\r\n\r\nCurrently (AFAIK) there does not appear to be a way to make unpacked variables `Final`, either inline or by declaring variables first. Some lines which look like they might work but don't:\r\n\r\n```python\r\nx: Final, y: Final = True, False\r\n\r\n(x, y): Final = True, False  # *only single target (not tuple) can be annotated  [syntax]*\r\n\r\nx, y: Final = True, False  # syntax error, confusing\r\n\r\n(x, y) = Final[(True, False)]  # syntax ok but x and y inferred by Mypy as Any, error at runtime\r\n```\r\n\r\nOf course the first is very verbose and usually you wouldn't want to have one value be final and another not when unpacking.\r\n\r\nThe second makes some sense except it would be nice to retain the optional parentheses feature.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/697", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/697/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/697/comments", "events_url": "https://api.github.com/repos/python/typing/issues/697/events", "html_url": "https://github.com/python/typing/issues/697", "id": 553073669, "node_id": "MDU6SXNzdWU1NTMwNzM2Njk=", "number": 697, "title": "PEP 586: using asterisk (*) unpacking notation with Literal such as Literal[*some_list]", "user": {"login": "jeanmonet", "id": 15112920, "node_id": "MDQ6VXNlcjE1MTEyOTIw", "avatar_url": "https://avatars1.githubusercontent.com/u/15112920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeanmonet", "html_url": "https://github.com/jeanmonet", "followers_url": "https://api.github.com/users/jeanmonet/followers", "following_url": "https://api.github.com/users/jeanmonet/following{/other_user}", "gists_url": "https://api.github.com/users/jeanmonet/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeanmonet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeanmonet/subscriptions", "organizations_url": "https://api.github.com/users/jeanmonet/orgs", "repos_url": "https://api.github.com/users/jeanmonet/repos", "events_url": "https://api.github.com/users/jeanmonet/events{/privacy}", "received_events_url": "https://api.github.com/users/jeanmonet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-21T19:14:22Z", "updated_at": "2020-01-22T14:08:58Z", "closed_at": "2020-01-22T11:50:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "It appears that a syntax error is currently raised if I try to define the Literal contents via *unpacking (unless mistaken this has not been discussed elsewhere).\r\n\r\nThe use case is a list of keys for a dictionary `AllowedKeys = Literal['key1', 'key2', 'key3']` where one would want to use an existing list of those keys `keys_list = ['key1', 'key2', 'key3']` to define the `AllowedKeys = Literal[*keys_list]`.\r\n\r\nIs there anything standing against this notation and usage, or could it be implemented in the future?\r\n(one limitation would probably be that the `keys_list` would need to be a pre-defined list or tuple and not dynamically defined at runtime from external input)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/696", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/696/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/696/comments", "events_url": "https://api.github.com/repos/python/typing/issues/696/events", "html_url": "https://github.com/python/typing/issues/696", "id": 549143291, "node_id": "MDU6SXNzdWU1NDkxNDMyOTE=", "number": 696, "title": "Partial Type Specifications For Callable", "user": {"login": "rmorshea", "id": 4041990, "node_id": "MDQ6VXNlcjQwNDE5OTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/4041990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmorshea", "html_url": "https://github.com/rmorshea", "followers_url": "https://api.github.com/users/rmorshea/followers", "following_url": "https://api.github.com/users/rmorshea/following{/other_user}", "gists_url": "https://api.github.com/users/rmorshea/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmorshea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmorshea/subscriptions", "organizations_url": "https://api.github.com/users/rmorshea/orgs", "repos_url": "https://api.github.com/users/rmorshea/repos", "events_url": "https://api.github.com/users/rmorshea/events{/privacy}", "received_events_url": "https://api.github.com/users/rmorshea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-01-13T19:47:51Z", "updated_at": "2020-08-15T22:32:52Z", "closed_at": "2020-08-15T22:32:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "# The Feature Request\r\n\r\nIt would be awesome if it were possible to create a partial type spec for `Callable`. For example, I might want to be able to specify that the first argument of a function must be an integer, but that any other parameters are allowed. This could be accomplished with the following extension to PEP-484 which would allow `...` to be included in the argument list to `Callable` if it followed any [extended callable types](https://mypy.readthedocs.io/en/latest/additional_features.html#extended-callable-types). As a result we could write a type spec `FirstArgIsInt` which would match all the following functions and any number of other arbitrary functions so long as their first argument is an integer:\r\n\r\n```python\r\nFirstArgIsInt = Callable[[Arg(int), ...], int]\r\n\r\nf1: FirstArgIsInt\r\ndef f1(x: int) -> int: ...\r\n\r\nf2: FirstArgIsInt\r\ndef f2(x: int, y: int) -> int: ...\r\n\r\nf3: FirstArgIsInt\r\ndef f3(x: int, *args, **kwargs) -> int: ...\r\n```\r\n\r\n# A Real World Use Case\r\n\r\nPartial type specifications for `Callable` are useful if parameters are being passed on to a function from a decorator as in request handlers for many web frameworks like [Django's view funtions](https://docs.djangoproject.com/en/3.0/topics/http/views/) or [Sanic's routes](https://sanic.readthedocs.io/en/latest/sanic/routing.html#request-parameters):\r\n\r\n```python\r\ndef route_1(request: Request) -> Response: ...\r\ndef route_2(request: Request, username: str) -> Response: ...\r\ndef route_3(request: Request, comment_id: int, content: str) -> Response: ...\r\n# adinfinitum...\r\n```\r\n\r\nImagine that you wanted to write an `authenticated` decorator which ensures a user who accesses any particular route is logged in. What would be the type of `RouteHandler` if not `Callable[..., Response]`:\r\n\r\n```python\r\nRouteHandler = ?\r\n\r\ndef authenticated(r: RouteHandler) -> RouteHandler: ...\r\n```\r\n\r\nIt would be `Callable[[Arg(Request), ...], Any]`, or some other expression of the same idea.\r\n\r\n# Current Work Arounds\r\n\r\n1. `Callable[..., Response]`, however this provides no precision for the function parameters.\r\n2. Use `Callable[[Arg(Request), VarArg(), KwArg()], Response]` however this is problematic since, these route handlers don't actually need to be able to accept arbitrary arguments.\r\n3. Use `Protocol` with overloads, however there are cases (e.g. decorators for route handlers as above) where it's not feasible to enumerate all possible route handler implementations.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/690", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/690/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/690/comments", "events_url": "https://api.github.com/repos/python/typing/issues/690/events", "html_url": "https://github.com/python/typing/issues/690", "id": 532963013, "node_id": "MDU6SXNzdWU1MzI5NjMwMTM=", "number": 690, "title": "Misleading documentation when installing via `pip install -t . typing`", "user": {"login": "lingxiaoyang", "id": 8630726, "node_id": "MDQ6VXNlcjg2MzA3MjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/8630726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lingxiaoyang", "html_url": "https://github.com/lingxiaoyang", "followers_url": "https://api.github.com/users/lingxiaoyang/followers", "following_url": "https://api.github.com/users/lingxiaoyang/following{/other_user}", "gists_url": "https://api.github.com/users/lingxiaoyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/lingxiaoyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lingxiaoyang/subscriptions", "organizations_url": "https://api.github.com/users/lingxiaoyang/orgs", "repos_url": "https://api.github.com/users/lingxiaoyang/repos", "events_url": "https://api.github.com/users/lingxiaoyang/events{/privacy}", "received_events_url": "https://api.github.com/users/lingxiaoyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-04T22:05:58Z", "updated_at": "2019-12-10T23:55:33Z", "closed_at": "2019-12-10T23:55:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following words are misleading because they do not hold true when installing via `pip install -t . typing`:\r\n\r\n> NOTE: in Python 3.5 and later, the typing module lives in the stdlib,\r\n> and installing this package has NO EFFECT.\r\n\r\nNormally, the installation has no effect because Python standard library takes higher precedence than `site-packages`. \r\n\r\nHowever, when installing with `-t .`, `typing.py` is pulled in current directory and thus `import typing` will reach out to this library and break any Python 3.7 environment that uses `typing` with an error like:\r\n\r\n```\r\nAttributeError: type object 'Callable' has no attribute '_abc_registry'\r\nTraceback (most recent call last):\r\n  ...\r\n  File \"/var/task/sentry_sdk/_types.py\", line 2, in <module>\r\n    from typing import TYPE_CHECKING as MYPY\r\n  File \"/var/task/typing.py\", line 1357, in <module>\r\n    class Callable(extra=collections_abc.Callable, metaclass=CallableMeta):\r\n  File \"/var/task/typing.py\", line 1005, in __new__\r\n    self._abc_registry = extra._abc_registry\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/684", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/684/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/684/comments", "events_url": "https://api.github.com/repos/python/typing/issues/684/events", "html_url": "https://github.com/python/typing/issues/684", "id": 514895051, "node_id": "MDU6SXNzdWU1MTQ4OTUwNTE=", "number": 684, "title": "Support Ellipsis as a type per se", "user": {"login": "max-sixty", "id": 5635139, "node_id": "MDQ6VXNlcjU2MzUxMzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/max-sixty", "html_url": "https://github.com/max-sixty", "followers_url": "https://api.github.com/users/max-sixty/followers", "following_url": "https://api.github.com/users/max-sixty/following{/other_user}", "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}", "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions", "organizations_url": "https://api.github.com/users/max-sixty/orgs", "repos_url": "https://api.github.com/users/max-sixty/repos", "events_url": "https://api.github.com/users/max-sixty/events{/privacy}", "received_events_url": "https://api.github.com/users/max-sixty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-30T18:36:21Z", "updated_at": "2019-11-04T12:36:13Z", "closed_at": "2019-11-04T12:36:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Referenced from https://github.com/python/mypy/issues/7818\r\n\r\nWe use an Ellipsis as an easy-to-understand, easy-to-import sentinel value to mean \"everything else\". \r\n\r\nBut it's not possible to use fully with type checking, since mypy doesn't exclude it from a type when it's been excluded with an `if`, as it does for `None`, or `Enum`s per https://github.com/python/typing/pull/240). I've moved the issue here since it's apparently a python typing issue rather than a mypy implementation.\r\n\r\nI've included below a MCVE of the behavior below, and here's an example of how we use it, given @gvanrossum has [already asked](https://github.com/python/mypy/issues/2180) whether it's important to use an Ellipsis:\r\n\r\n\r\n<details>\r\n\r\nFor example, to transpose an array, these are equivalent:\r\n\r\n```python\r\n\r\nIn [1]: import xarray as xr\r\n\r\nIn [2]: ds = xr.tutorial.scatter_example_dataset()\r\n\r\nIn [3]: ds\r\nOut[3]:\r\n<xarray.Dataset>\r\nDimensions:  (w: 4, x: 3, y: 11, z: 4)\r\nCoordinates:\r\n  * x        (x) int64 0 1 2\r\n  * y        (y) float64 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\r\n  * z        (z) int64 0 1 2 3\r\n  * w        (w) <U5 'one' 'two' 'three' 'five'\r\nData variables:\r\n    A        (x, y, z, w) float64 0.02074 0.04807 -0.1059 ... -0.1809 -0.04862\r\n    B        (x, y, z, w) float64 0.0 0.0 0.0 0.0 ... 1.406 1.414 1.368 1.408\r\n\r\nIn [4]: ds.transpose('w','x','y','z')\r\nOut[4]:\r\n<xarray.Dataset>\r\nDimensions:  (w: 4, x: 3, y: 11, z: 4)\r\nCoordinates:\r\n  * x        (x) int64 0 1 2\r\n  * y        (y) float64 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\r\n  * z        (z) int64 0 1 2 3\r\n  * w        (w) <U5 'one' 'two' 'three' 'five'\r\nData variables:\r\n    A        (w, x, y, z) float64 0.02074 0.02074 0.02074 ... -0.03076 -0.04862\r\n    B        (w, x, y, z) float64 0.0 0.002074 0.004147 ... 1.403 1.405 1.408\r\n\r\n\r\nIn [5]: ds.transpose('w',...) # use an Ellipsis to indicate 'all other dimensions'\r\nOut[5]:\r\n<xarray.Dataset>\r\nDimensions:  (w: 4, x: 3, y: 11, z: 4)\r\nCoordinates:\r\n  * x        (x) int64 0 1 2\r\n  * y        (y) float64 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\r\n  * z        (z) int64 0 1 2 3\r\n  * w        (w) <U5 'one' 'two' 'three' 'five'\r\nData variables:\r\n    A        (w, x, y, z) float64 0.02074 0.02074 0.02074 ... -0.03076 -0.04862\r\n    B        (w, x, y, z) float64 0.0 0.002074 0.004147 ... 1.403 1.405 1.408\r\n```\r\n\r\n</details>\r\n\r\nCode example with existing mypy:\r\n\r\n```python\r\nimport builtins\r\nfrom typing import List, Union\r\n\r\n\r\ndef fun(x: Union[builtins.ellipsis, List], y: List):\r\n    if x is not Ellipsis:\r\n        y = x #  error: Incompatible types in assignment (expression has type \"Union[ellipsis, List[Any]]\", variable has type \"List[Any]\")\r\n\r\n    return y\r\n\r\n# another attempt:\r\ndef fun2(x: Union[Ellipsis, List], y: List): # error: Variable \"builtins.Ellipsis\" is not valid as a type\r\n    if x is not Ellipsis:\r\n        y = x\r\n\r\n    return y\r\n\r\n```\r\n\r\nThank you!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/682", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/682/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/682/comments", "events_url": "https://api.github.com/repos/python/typing/issues/682/events", "html_url": "https://github.com/python/typing/issues/682", "id": 510149196, "node_id": "MDU6SXNzdWU1MTAxNDkxOTY=", "number": 682, "title": "Release typing_extensions 3.7.4.1", "user": {"login": "tomzx", "id": 188960, "node_id": "MDQ6VXNlcjE4ODk2MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/188960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomzx", "html_url": "https://github.com/tomzx", "followers_url": "https://api.github.com/users/tomzx/followers", "following_url": "https://api.github.com/users/tomzx/following{/other_user}", "gists_url": "https://api.github.com/users/tomzx/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomzx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomzx/subscriptions", "organizations_url": "https://api.github.com/users/tomzx/orgs", "repos_url": "https://api.github.com/users/tomzx/repos", "events_url": "https://api.github.com/users/tomzx/events{/privacy}", "received_events_url": "https://api.github.com/users/tomzx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-21T17:36:46Z", "updated_at": "2019-10-28T13:31:13Z", "closed_at": "2019-10-28T13:31:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\n\r\nI'm not sure this is the right place to ask, but here goes:\r\n\r\nIt appears a release of [`typing`](https://pypi.org/project/typing/#history) 3.7.4.1 is available on pypi. However, the associated version of [`typing_extensions`](https://pypi.org/project/typing-extensions/#history) does not appear to have been released.\r\n\r\nCould you please make a pypi release for `typing_extensions` 3.7.4.1?\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/681", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/681/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/681/comments", "events_url": "https://api.github.com/repos/python/typing/issues/681/events", "html_url": "https://github.com/python/typing/issues/681", "id": 507264737, "node_id": "MDU6SXNzdWU1MDcyNjQ3Mzc=", "number": 681, "title": "Generic __new__ has serious performance overhead", "user": {"login": "bartv", "id": 10819, "node_id": "MDQ6VXNlcjEwODE5", "avatar_url": "https://avatars2.githubusercontent.com/u/10819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bartv", "html_url": "https://github.com/bartv", "followers_url": "https://api.github.com/users/bartv/followers", "following_url": "https://api.github.com/users/bartv/following{/other_user}", "gists_url": "https://api.github.com/users/bartv/gists{/gist_id}", "starred_url": "https://api.github.com/users/bartv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bartv/subscriptions", "organizations_url": "https://api.github.com/users/bartv/orgs", "repos_url": "https://api.github.com/users/bartv/repos", "events_url": "https://api.github.com/users/bartv/events{/privacy}", "received_events_url": "https://api.github.com/users/bartv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-10-15T13:59:33Z", "updated_at": "2020-01-12T05:15:24Z", "closed_at": "2019-10-20T15:11:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "In our code base (https://github.com/inmanta/inmanta) we are in progress of typing our code. We progressed pretty far and now noticed in our compiler that it has a serious overhead. In a certain performance benchmark ```Generic.__new__``` amounts to 8.7% of the execution time. (It is called ~1M times)\r\n\r\nThe following piece of code demonstrates the large difference in performance:\r\n```\r\nimport time\r\nfrom typing import *\r\n\r\nT = TypeVar(\"T\")\r\n\r\nclass Test(Generic[T]):\r\n    def __init__(self, x: T) -> None:\r\n        pass\r\n\r\nclass Test2():\r\n    def __init__(self, x) -> None:\r\n        pass\r\n\r\na = time.time()\r\n[Test(\"test\") for i in range(1, 1000000)]\r\nb = time.time()\r\n[Test2(\"test\") for i in range(1, 1000000)]\r\nc = time.time()\r\n\r\nprint(f\"Generic {b-a}\")\r\nprint(f\"Non-Generic {c-b}\")\r\n```\r\n\r\nWith python 3.7.4 the results are:\r\n```\r\nGeneric 0.8733069896697998\r\nNon-Generic 0.3357818126678467\r\n```\r\nWith python 3.6 the results are slightly worse (but not so relevant due to the new implementation)\r\n\r\n(#196 seems related but because the implementation is entirely different I did not post it there)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/680", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/680/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/680/comments", "events_url": "https://api.github.com/repos/python/typing/issues/680/events", "html_url": "https://github.com/python/typing/issues/680", "id": 506560366, "node_id": "MDU6SXNzdWU1MDY1NjAzNjY=", "number": 680, "title": "Generic classes narrowed by @overloaded __init__", "user": {"login": "srittau", "id": 52799, "node_id": "MDQ6VXNlcjUyNzk5", "avatar_url": "https://avatars3.githubusercontent.com/u/52799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srittau", "html_url": "https://github.com/srittau", "followers_url": "https://api.github.com/users/srittau/followers", "following_url": "https://api.github.com/users/srittau/following{/other_user}", "gists_url": "https://api.github.com/users/srittau/gists{/gist_id}", "starred_url": "https://api.github.com/users/srittau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srittau/subscriptions", "organizations_url": "https://api.github.com/users/srittau/orgs", "repos_url": "https://api.github.com/users/srittau/repos", "events_url": "https://api.github.com/users/srittau/events{/privacy}", "received_events_url": "https://api.github.com/users/srittau/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-10-14T10:10:42Z", "updated_at": "2019-12-04T22:01:55Z", "closed_at": "2019-11-05T13:52:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Quite often in typeshed we have the case that a generic class can be narrowed by the arguments provided to `__init__`. One example are file classes that are generic over `AnyStr`, where a `mode` argument narrows the type. It would be useful if this could be described somehow in typing, possibly by extending the `@overload` decorator or with some other mechanism.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/677", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/677/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/677/comments", "events_url": "https://api.github.com/repos/python/typing/issues/677/events", "html_url": "https://github.com/python/typing/issues/677", "id": 495335109, "node_id": "MDU6SXNzdWU0OTUzMzUxMDk=", "number": 677, "title": "Backport python/cpython#16222", "user": {"login": "gvanrossum", "id": 2894642, "node_id": "MDQ6VXNlcjI4OTQ2NDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2894642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gvanrossum", "html_url": "https://github.com/gvanrossum", "followers_url": "https://api.github.com/users/gvanrossum/followers", "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}", "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}", "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions", "organizations_url": "https://api.github.com/users/gvanrossum/orgs", "repos_url": "https://api.github.com/users/gvanrossum/repos", "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}", "received_events_url": "https://api.github.com/users/gvanrossum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-18T16:35:25Z", "updated_at": "2019-11-24T10:45:38Z", "closed_at": "2019-11-24T10:45:38Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In https://github.com/python/cpython/pull/16222, Serhiy fixed the constructors for TypedDict and NamedTuple to use `*args, **kwds` so that the names of the positional arguments (e.g. `self`, `typename` and `field` in the case of NamedTuple) are not barred from being used as field names. Let's copy that fix here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/676", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/676/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/676/comments", "events_url": "https://api.github.com/repos/python/typing/issues/676/events", "html_url": "https://github.com/python/typing/issues/676", "id": 491489695, "node_id": "MDU6SXNzdWU0OTE0ODk2OTU=", "number": 676, "title": "No backwards compatibility for typing attributes", "user": {"login": "nitzanst", "id": 45848203, "node_id": "MDQ6VXNlcjQ1ODQ4MjAz", "avatar_url": "https://avatars1.githubusercontent.com/u/45848203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nitzanst", "html_url": "https://github.com/nitzanst", "followers_url": "https://api.github.com/users/nitzanst/followers", "following_url": "https://api.github.com/users/nitzanst/following{/other_user}", "gists_url": "https://api.github.com/users/nitzanst/gists{/gist_id}", "starred_url": "https://api.github.com/users/nitzanst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nitzanst/subscriptions", "organizations_url": "https://api.github.com/users/nitzanst/orgs", "repos_url": "https://api.github.com/users/nitzanst/repos", "events_url": "https://api.github.com/users/nitzanst/events{/privacy}", "received_events_url": "https://api.github.com/users/nitzanst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-10T07:04:32Z", "updated_at": "2019-09-10T07:40:56Z", "closed_at": "2019-09-10T07:40:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "In Python 3.5 typing classes, e.g List had attribute __name__.\r\nIn Python 3.7 typing classes have instead attribute _name and don't have __name__ attribute.\r\n\r\nWouldn't it be reasonable to backwards compatible on this case\r\n![typing_bug](https://user-images.githubusercontent.com/45848203/64591401-5da14400-d3b2-11e9-843f-ef20bb8a4011.png)\r\n?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/675", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/675/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/675/comments", "events_url": "https://api.github.com/repos/python/typing/issues/675/events", "html_url": "https://github.com/python/typing/issues/675", "id": 486097503, "node_id": "MDU6SXNzdWU0ODYwOTc1MDM=", "number": 675, "title": "Variance should be properties of generic classes not type variables", "user": {"login": "poscat0x04", "id": 53291983, "node_id": "MDQ6VXNlcjUzMjkxOTgz", "avatar_url": "https://avatars3.githubusercontent.com/u/53291983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poscat0x04", "html_url": "https://github.com/poscat0x04", "followers_url": "https://api.github.com/users/poscat0x04/followers", "following_url": "https://api.github.com/users/poscat0x04/following{/other_user}", "gists_url": "https://api.github.com/users/poscat0x04/gists{/gist_id}", "starred_url": "https://api.github.com/users/poscat0x04/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poscat0x04/subscriptions", "organizations_url": "https://api.github.com/users/poscat0x04/orgs", "repos_url": "https://api.github.com/users/poscat0x04/repos", "events_url": "https://api.github.com/users/poscat0x04/events{/privacy}", "received_events_url": "https://api.github.com/users/poscat0x04/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-28T00:20:48Z", "updated_at": "2019-08-28T00:37:55Z", "closed_at": "2019-08-28T00:37:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "More specifically the property of the type parameters", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/673", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/673/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/673/comments", "events_url": "https://api.github.com/repos/python/typing/issues/673/events", "html_url": "https://github.com/python/typing/issues/673", "id": 484872656, "node_id": "MDU6SXNzdWU0ODQ4NzI2NTY=", "number": 673, "title": "Using typing with Pycharm", "user": {"login": "JackDandy", "id": 1459670, "node_id": "MDQ6VXNlcjE0NTk2NzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1459670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JackDandy", "html_url": "https://github.com/JackDandy", "followers_url": "https://api.github.com/users/JackDandy/followers", "following_url": "https://api.github.com/users/JackDandy/following{/other_user}", "gists_url": "https://api.github.com/users/JackDandy/gists{/gist_id}", "starred_url": "https://api.github.com/users/JackDandy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JackDandy/subscriptions", "organizations_url": "https://api.github.com/users/JackDandy/orgs", "repos_url": "https://api.github.com/users/JackDandy/repos", "events_url": "https://api.github.com/users/JackDandy/events{/privacy}", "received_events_url": "https://api.github.com/users/JackDandy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-24T23:33:24Z", "updated_at": "2019-08-27T08:53:08Z", "closed_at": "2019-08-25T13:05:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\n`typing library 3.7.4.1`\r\n`PyCharm Pro 2019.2.1`\r\n`Python 2.7.16`\r\n`Win 10 x64`\r\n\r\nI include an annotated image with a couple of issues in Pycharm,  \r\nthe image also demonstrates how to replicate the issues....\r\n\r\n<img src=\"https://i.vgy.me/MzFkiC.png\">\r\n\r\nAm I doing something wrong, or are these real issues ?\r\n\r\nThanks.\r\n\r\n#### test code\r\n```\r\n#\r\n# a test file to highlight issues in Pycharm\r\n#\r\n\r\n# issue 1: in the following line `AnyStr` is grey as it regarded as unused import statement, yet `List` is fine\r\n\r\nfrom typing import AnyStr, List\r\n\r\n\r\ndef test_func(test_arg=None, test_arg2=None):\r\n    \"\"\"\r\n    Just a test func. to highlight\r\n    1) even tho AnyStr is used here, it is classed as unused in the above import line,\r\n    this doesn't occur for other types used solely in a docstring.\r\n\r\n    2) the callee test_func is underlined with what seems to be a nonsense message...\r\n    Expected Optional[List], got 'list' instead\r\n\r\n    :param test_arg:\r\n    :type test_arg: AnyStr or None\r\n    :param test_arg2:\r\n    :type test_arg2: List or None\r\n    :return: tuple\r\n    :rtype: tuple\r\n    \"\"\"\r\n    return test_arg, test_arg2\r\n\r\n\r\nsave_map = []\r\nt1, t2 = test_func(test_arg='', test_arg2=save_map)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/672", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/672/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/672/comments", "events_url": "https://api.github.com/repos/python/typing/issues/672/events", "html_url": "https://github.com/python/typing/issues/672", "id": 484433336, "node_id": "MDU6SXNzdWU0ODQ0MzMzMzY=", "number": 672, "title": "Cannot create weak reference to NamedTuple", "user": {"login": "Qu4tro", "id": 3855652, "node_id": "MDQ6VXNlcjM4NTU2NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/3855652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qu4tro", "html_url": "https://github.com/Qu4tro", "followers_url": "https://api.github.com/users/Qu4tro/followers", "following_url": "https://api.github.com/users/Qu4tro/following{/other_user}", "gists_url": "https://api.github.com/users/Qu4tro/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qu4tro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qu4tro/subscriptions", "organizations_url": "https://api.github.com/users/Qu4tro/orgs", "repos_url": "https://api.github.com/users/Qu4tro/repos", "events_url": "https://api.github.com/users/Qu4tro/events{/privacy}", "received_events_url": "https://api.github.com/users/Qu4tro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-23T09:38:12Z", "updated_at": "2019-08-23T13:15:03Z", "closed_at": "2019-08-23T12:26:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey there.\r\n\r\nI'm creating this issue in the follow up of https://github.com/pydanny/cached-property/issues/168 and https://github.com/pydanny/cached-property/pull/137\r\n\r\nAs @althonos mentioned, NamedTuple doesn't have a `__weakref__` slot. My question is here, if there's any implementation detail that prohibits NamedTuple to have it or if it's just missing.\r\n\r\nYou can use this repo as an example:\r\nhttps://github.com/Qu4tro/cachedproperty_immutable_classes/\r\n\r\nThanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/667", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/667/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/667/comments", "events_url": "https://api.github.com/repos/python/typing/issues/667/events", "html_url": "https://github.com/python/typing/issues/667", "id": 478849039, "node_id": "MDU6SXNzdWU0Nzg4NDkwMzk=", "number": 667, "title": "Infinite recursion with get_type_hints", "user": {"login": "vg0377467", "id": 53932858, "node_id": "MDQ6VXNlcjUzOTMyODU4", "avatar_url": "https://avatars2.githubusercontent.com/u/53932858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vg0377467", "html_url": "https://github.com/vg0377467", "followers_url": "https://api.github.com/users/vg0377467/followers", "following_url": "https://api.github.com/users/vg0377467/following{/other_user}", "gists_url": "https://api.github.com/users/vg0377467/gists{/gist_id}", "starred_url": "https://api.github.com/users/vg0377467/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vg0377467/subscriptions", "organizations_url": "https://api.github.com/users/vg0377467/orgs", "repos_url": "https://api.github.com/users/vg0377467/repos", "events_url": "https://api.github.com/users/vg0377467/events{/privacy}", "received_events_url": "https://api.github.com/users/vg0377467/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 133486138, "node_id": "MDU6TGFiZWwxMzM0ODYxMzg=", "url": "https://api.github.com/repos/python/typing/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-08-09T07:52:20Z", "updated_at": "2020-03-06T17:43:04Z", "closed_at": "2020-03-06T17:43:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I encountered one condition where calling get_type_hints causes infinite recursion when dealing with forward declaration and cyclic types.\r\n\r\nHere's an example:\r\n\r\n```\r\nfrom typing import Union, List, get_type_hints\r\n\r\nValueList = List['Value']\r\nValue = Union[str, ValueList]\r\n\r\nclass A:\r\n    a: List[Value]\r\n\r\nget_type_hints(A, globals(), locals())\r\n```\r\n\r\nThis reaches the recursion limit as of 3.8.0b2.\r\n\r\nIt seems that the combining `_GenericAlias` with `ForwardRef` is what triggers this condition:\r\n- `ForwardRef._evaluate` sets `__forward_value__` on its first call on a given instance\r\n- `_GenericAlias` tries to compare its args post evaluation\r\nIf one of the arguments is a previously evaluated forward reference containing a cycle, then it will infinitely recurse in the hash function when building a frozen set for the comparison.\r\n\r\nThe above is, of course, a very artificial example, but I can imagine this happening a lot in code with trees or similar structures.\r\nMy initial reproduction case was using `_eval_type` to resolve forward references returned by `get_args` (side note: it would be nice to have a public function to do that).\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/665", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/665/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/665/comments", "events_url": "https://api.github.com/repos/python/typing/issues/665/events", "html_url": "https://github.com/python/typing/issues/665", "id": 477698109, "node_id": "MDU6SXNzdWU0Nzc2OTgxMDk=", "number": 665, "title": "Maybe one-liners such as `(a: int, b: int) = do_the_thing(1, 2)` then? ", "user": {"login": "guillaume-chevalier", "id": 11862328, "node_id": "MDQ6VXNlcjExODYyMzI4", "avatar_url": "https://avatars3.githubusercontent.com/u/11862328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guillaume-chevalier", "html_url": "https://github.com/guillaume-chevalier", "followers_url": "https://api.github.com/users/guillaume-chevalier/followers", "following_url": "https://api.github.com/users/guillaume-chevalier/following{/other_user}", "gists_url": "https://api.github.com/users/guillaume-chevalier/gists{/gist_id}", "starred_url": "https://api.github.com/users/guillaume-chevalier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guillaume-chevalier/subscriptions", "organizations_url": "https://api.github.com/users/guillaume-chevalier/orgs", "repos_url": "https://api.github.com/users/guillaume-chevalier/repos", "events_url": "https://api.github.com/users/guillaume-chevalier/events{/privacy}", "received_events_url": "https://api.github.com/users/guillaume-chevalier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-07T04:15:45Z", "updated_at": "2019-08-07T10:00:11Z", "closed_at": "2019-08-07T04:54:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd love it to avoid doing this: \r\n```\r\n    a: int = None\r\n    b: int = None\r\n    a, b = do_the_thing(1, 2)\r\n```\r\nSupposing that the return type of the callable `do_the_thing` is unclear or too broad. The context is normal (e.g.: doing this code within the body of a function, not in a function argument list). \r\n\r\nPrevious issue: https://github.com/python/typing/issues/664 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/664", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/664/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/664/comments", "events_url": "https://api.github.com/repos/python/typing/issues/664/events", "html_url": "https://github.com/python/typing/issues/664", "id": 477555054, "node_id": "MDU6SXNzdWU0Nzc1NTUwNTQ=", "number": 664, "title": "Please allow doing one-liners such as `a: int, b: int = 1, 2`", "user": {"login": "guillaume-chevalier", "id": 11862328, "node_id": "MDQ6VXNlcjExODYyMzI4", "avatar_url": "https://avatars3.githubusercontent.com/u/11862328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guillaume-chevalier", "html_url": "https://github.com/guillaume-chevalier", "followers_url": "https://api.github.com/users/guillaume-chevalier/followers", "following_url": "https://api.github.com/users/guillaume-chevalier/following{/other_user}", "gists_url": "https://api.github.com/users/guillaume-chevalier/gists{/gist_id}", "starred_url": "https://api.github.com/users/guillaume-chevalier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guillaume-chevalier/subscriptions", "organizations_url": "https://api.github.com/users/guillaume-chevalier/orgs", "repos_url": "https://api.github.com/users/guillaume-chevalier/repos", "events_url": "https://api.github.com/users/guillaume-chevalier/events{/privacy}", "received_events_url": "https://api.github.com/users/guillaume-chevalier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-06T19:28:37Z", "updated_at": "2019-08-07T10:05:16Z", "closed_at": "2019-08-06T22:04:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "By the way, if this is not the proper place to open the issue, could you please link to the good place or existing issue and close this one? Thx! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/660", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/660/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/660/comments", "events_url": "https://api.github.com/repos/python/typing/issues/660/events", "html_url": "https://github.com/python/typing/issues/660", "id": 475171232, "node_id": "MDU6SXNzdWU0NzUxNzEyMzI=", "number": 660, "title": "typing_extensions 3.7.4 - Pulls typing dependency if used with python3.7 and poetry", "user": {"login": "gcarq", "id": 4720529, "node_id": "MDQ6VXNlcjQ3MjA1Mjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4720529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gcarq", "html_url": "https://github.com/gcarq", "followers_url": "https://api.github.com/users/gcarq/followers", "following_url": "https://api.github.com/users/gcarq/following{/other_user}", "gists_url": "https://api.github.com/users/gcarq/gists{/gist_id}", "starred_url": "https://api.github.com/users/gcarq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gcarq/subscriptions", "organizations_url": "https://api.github.com/users/gcarq/orgs", "repos_url": "https://api.github.com/users/gcarq/repos", "events_url": "https://api.github.com/users/gcarq/events{/privacy}", "received_events_url": "https://api.github.com/users/gcarq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-31T14:15:32Z", "updated_at": "2020-05-08T21:17:59Z", "closed_at": "2019-08-01T14:54:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "typing_extensions has a conditional check if `typing` should be pulled in depending on the python version, although in https://pypi.org/pypi/typing-extensions/json its specified as required dependency.\r\n\r\nThat leads to the following exception if used with python3.7:\r\n```\r\n  Traceback (most recent call last):                                          \r\n    File \"/usr/local/lib/python3.7/runpy.py\", line 193, in _run_module_as_ma  \r\nin                                                                            \r\n      \"__main__\", mod_spec)                                                   \r\n    File \"/usr/local/lib/python3.7/runpy.py\", line 85, in _run_code           \r\n      exec(code, run_globals)                                                 \r\n    File \"/usr/local/lib/python3.7/site-packages/pip/__main__.py\", line 16,   \r\nin <module>                                                                   \r\n      from pip._internal import main as _main  # isort:skip # noqa            \r\n    File \"/usr/local/lib/python3.7/site-packages/pip/_internal/__init__.py\",  \r\n line 40, in <module>                                                         \r\n      from pip._internal.cli.autocompletion import autocomplete               \r\n    File \"/usr/local/lib/python3.7/site-packages/pip/_internal/cli/autocompl  \r\netion.py\", line 8, in <module>                                                \r\n      from pip._internal.cli.main_parser import create_main_parser            \r\n    File \"/usr/local/lib/python3.7/site-packages/pip/_internal/cli/main_pars  \r\ner.py\", line 7, in <module>                                                   \r\n      from pip._internal.cli import cmdoptions                                \r\n    File \"/usr/local/lib/python3.7/site-packages/pip/_internal/cli/cmdoption  \r\ns.py\", line 24, in <module>                                                   \r\n      from pip._internal.models.search_scope import SearchScope               \r\n    File \"/usr/local/lib/python3.7/site-packages/pip/_internal/models/search  \r\n_scope.py\", line 11, in <module>                                              \r\n      from pip._internal.utils.misc import normalize_path, redact_password_f  \r\nrom_url                                                                       \r\n    File \"/usr/local/lib/python3.7/site-packages/pip/_internal/utils/misc.py  \r\n\", line 58, in <module>                                                       \r\n      from typing import cast, Tuple                                          \r\n    File \"/usr/local/lib/python3.7/site-packages/typing.py\", line 1357, in <  \r\nmodule>                                                                       \r\n      class Callable(extra=collections_abc.Callable, metaclass=CallableMeta)  \r\n:                                                                             \r\n    File \"/usr/local/lib/python3.7/site-packages/typing.py\", line 1005, in _  \r\n_new__                                                                        \r\n      self._abc_registry = extra._abc_registry                                \r\n  AttributeError: type object 'Callable' has no attribute '_abc_registry'   \r\n```\r\n\r\n> Poetry does not execute the setup.py file for security reasons so it can't see it and if you take a look at https://pypi.org/pypi/typing-extensions/json you will see in the info.requires_dist section that typing is declared as an unconditional dependency.\r\n\r\nUsing a environment marker instead should fix this:\r\n```\r\ninstall_requires = [\"typing >= 3.7.4; python_version < '3.5'\"]\r\n```\r\n\r\nRelated poetry issue: https://github.com/sdispater/poetry/issues/1258", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/657", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/657/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/657/comments", "events_url": "https://api.github.com/repos/python/typing/issues/657/events", "html_url": "https://github.com/python/typing/issues/657", "id": 464980387, "node_id": "MDU6SXNzdWU0NjQ5ODAzODc=", "number": 657, "title": "Type annotation of a subclass method that return an instance of the class", "user": {"login": "Andreyisakov", "id": 13241661, "node_id": "MDQ6VXNlcjEzMjQxNjYx", "avatar_url": "https://avatars2.githubusercontent.com/u/13241661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreyisakov", "html_url": "https://github.com/Andreyisakov", "followers_url": "https://api.github.com/users/Andreyisakov/followers", "following_url": "https://api.github.com/users/Andreyisakov/following{/other_user}", "gists_url": "https://api.github.com/users/Andreyisakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreyisakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreyisakov/subscriptions", "organizations_url": "https://api.github.com/users/Andreyisakov/orgs", "repos_url": "https://api.github.com/users/Andreyisakov/repos", "events_url": "https://api.github.com/users/Andreyisakov/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreyisakov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-07T18:38:13Z", "updated_at": "2019-07-08T09:15:32Z", "closed_at": "2019-07-08T09:15:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running into an issue when a subclass has an internal state that is not visible by the parent.  I able to explain the issue by the following concrete example: \r\n\r\nI have a `MeasurementBase` abstract parent class that have the following functionality: (1) public `serialize()` & `deserialize()` \r\n\r\n\r\nI would love to implement the common logic on the parent public methods and to define the private `_serialize()` &  `_deserialize()` abstract. \r\n\r\n\r\nThe base class implementation is as follows:\r\n\r\n```\r\nimport json\r\nfrom abc import ABC, abstractmethod\r\nfrom typing import Any, Dict, Generic, TypeVar\r\n\r\n\r\nTMeasurement = TypeVar(\"TMeasurement\")\r\n\r\n\r\nclass MeasurementBase(ABC, Generic[TMeasurement]):\r\n\r\n    def serialize(self) -> str:\r\n        properties: Dict[str, Any] = {}\r\n        properties[\"measurement_name\"] = self.__class__.__name__\r\n        properties[\"value\"] = self._serialize()\r\n        return json.dumps(properties)\r\n\r\n    @abstractmethod\r\n    def _serialize(self) -> Any:\r\n        pass  # pragma: no cover\r\n\r\n    @classmethod\r\n    def deserialize(cls, json_str: str) -> TMeasurement:\r\n        try:\r\n            properties = json.loads(json_str)\r\n            class_name = properties[\"measurement_name\"]\r\n            if cls.__name__ != class_name:\r\n                raise KeyError()\r\n\r\n            return cls._deserialize(properties[\"value\"])\r\n        except KeyError:\r\n            raise KeyError()\r\n\r\n    @classmethod\r\n    @abstractmethod\r\n    def _deserialize(cls, obj: Any) -> TMeasurement:\r\n        pass  # pragma: no cover\r\n```\r\n\r\n\r\n\r\n\r\nThen, I created a new subclass with internal `_val` state that implements the abstract methods: \r\n\r\n\r\n\r\n```\r\nclass MeasurementBaseMock(MeasurementBase[\"MeasurementBaseMock\"]):\r\n    def __init__(self, val: int) -> None:\r\n        self._val = val\r\n\r\n    def _serialize(self) -> Any:\r\n        return self._val\r\n\r\n    @classmethod\r\n    def _deserialize(cls, obj: int) -> \"MeasurementBaseMock\":\r\n        return MeasurementBaseMock(obj)\r\n\r\n```\r\n\r\n\r\n\r\nThen, when testing the above: \r\n\r\n```\r\nproperties = {\"value\": 324, \"measurement_name\": MeasurementBaseMock.__name__}\r\nmeasurement = MeasurementBaseMock.deserialize(json.dumps(properties))\r\nprint(measurement._val)\r\n\r\n```\r\n\r\nI got the following error: \r\n\r\n`error: \"TMeasurement\" has no attribute \"_val\"` \r\n\r\n\r\nHow do I annotate the `_deserialize` return type to support the typecker? \r\n\r\n\r\nThings that I tried: \r\n- I tried using the `TMeasurement = TypeVar(\"TMeasurement\", bound = \"MeasurementBase\")` - didnt work and had much more mypy error. \r\n- I moved all the state's initialization to parent class - this one did work, but I prefer not using such design. \r\n\r\n- I tried also using cls annotations but had the same error. \r\n\r\n```\r\n> mypy --version\r\nmypy 0.660\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/656", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/656/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/656/comments", "events_url": "https://api.github.com/repos/python/typing/issues/656/events", "html_url": "https://github.com/python/typing/issues/656", "id": 464612137, "node_id": "MDU6SXNzdWU0NjQ2MTIxMzc=", "number": 656, "title": "Tests failing on Python 2", "user": {"login": "lwfitzgerald", "id": 90507, "node_id": "MDQ6VXNlcjkwNTA3", "avatar_url": "https://avatars2.githubusercontent.com/u/90507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lwfitzgerald", "html_url": "https://github.com/lwfitzgerald", "followers_url": "https://api.github.com/users/lwfitzgerald/followers", "following_url": "https://api.github.com/users/lwfitzgerald/following{/other_user}", "gists_url": "https://api.github.com/users/lwfitzgerald/gists{/gist_id}", "starred_url": "https://api.github.com/users/lwfitzgerald/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lwfitzgerald/subscriptions", "organizations_url": "https://api.github.com/users/lwfitzgerald/orgs", "repos_url": "https://api.github.com/users/lwfitzgerald/repos", "events_url": "https://api.github.com/users/lwfitzgerald/events{/privacy}", "received_events_url": "https://api.github.com/users/lwfitzgerald/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 133486138, "node_id": "MDU6TGFiZWwxMzM0ODYxMzg=", "url": "https://api.github.com/repos/python/typing/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-05T12:11:32Z", "updated_at": "2019-08-22T13:17:12Z", "closed_at": "2019-08-22T13:17:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Tests are failing on the `3.7.4` tag on Python 2\r\n```\r\n# python --version\r\nPython 2.7.13 :: Continuum Analytics, Inc.\r\n```\r\n```\r\n# python test_typing.py\r\n.................................................................................................................................................................E.......E..E..........................................................\r\n======================================================================\r\nERROR: test_protocol_instance_works (__main__.ProtocolTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"test_typing.py\", line 1057, in test_protocol_instance_works\r\n    self.assertNotIsInstance('no', typing.SupportsAbs)\r\n  File \"/usr/lib/python2.7/unittest/case.py\", line 971, in assertNotIsInstance\r\n    if isinstance(obj, cls):\r\n  File \"/home/lwfitzgerald/typing/python2/typing.py\", line 1824, in __instancecheck__\r\n    issubclass(instance.__class__, self)):\r\n  File \"/home/lwfitzgerald/typing/python2/typing.py\", line 1847, in __subclasscheck__\r\n    return super(_ProtocolMeta, self).__subclasscheck__(cls)\r\n  File \"/home/lwfitzgerald/typing/python2/typing.py\", line 1407, in __subclasscheck__\r\n    return super(GenericMeta, self).__subclasscheck__(cls)\r\n  File \"/usr/lib/python2.7/abc.py\", line 180, in __subclasscheck__\r\n    if issubclass(subclass, scls):\r\n  File \"/home/lwfitzgerald/typing/python2/typing.py\", line 1847, in __subclasscheck__\r\n    return super(_ProtocolMeta, self).__subclasscheck__(cls)\r\n  File \"/home/lwfitzgerald/typing/python2/typing.py\", line 1401, in __subclasscheck__\r\n    raise TypeError(\"Parameterized generics cannot be used with class \"\r\nTypeError: Parameterized generics cannot be used with class or instance checks\r\n\r\n======================================================================\r\nERROR: test_reversible (__main__.ProtocolTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"test_typing.py\", line 1049, in test_reversible\r\n    self.assertNotIsSubclass(int, typing.Reversible)\r\n  File \"test_typing.py\", line 42, in assertNotIsSubclass\r\n    if issubclass(cls, class_or_tuple):\r\n  File \"/home/lwfitzgerald/typing/python2/typing.py\", line 1847, in __subclasscheck__\r\n    return super(_ProtocolMeta, self).__subclasscheck__(cls)\r\n  File \"/home/lwfitzgerald/typing/python2/typing.py\", line 1407, in __subclasscheck__\r\n    return super(GenericMeta, self).__subclasscheck__(cls)\r\n  File \"/usr/lib/python2.7/abc.py\", line 180, in __subclasscheck__\r\n    if issubclass(subclass, scls):\r\n  File \"/home/lwfitzgerald/typing/python2/typing.py\", line 1847, in __subclasscheck__\r\n    return super(_ProtocolMeta, self).__subclasscheck__(cls)\r\n  File \"/home/lwfitzgerald/typing/python2/typing.py\", line 1401, in __subclasscheck__\r\n    raise TypeError(\"Parameterized generics cannot be used with class \"\r\nTypeError: Parameterized generics cannot be used with class or instance checks\r\n\r\n======================================================================\r\nERROR: test_supports_abs (__main__.ProtocolTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"test_typing.py\", line 1045, in test_supports_abs\r\n    self.assertNotIsSubclass(str, typing.SupportsAbs)\r\n  File \"test_typing.py\", line 42, in assertNotIsSubclass\r\n    if issubclass(cls, class_or_tuple):\r\n  File \"/home/lwfitzgerald/typing/python2/typing.py\", line 1847, in __subclasscheck__\r\n    return super(_ProtocolMeta, self).__subclasscheck__(cls)\r\n  File \"/home/lwfitzgerald/typing/python2/typing.py\", line 1407, in __subclasscheck__\r\n    return super(GenericMeta, self).__subclasscheck__(cls)\r\n  File \"/usr/lib/python2.7/abc.py\", line 180, in __subclasscheck__\r\n    if issubclass(subclass, scls):\r\n  File \"/home/lwfitzgerald/typing/python2/typing.py\", line 1847, in __subclasscheck__\r\n    return super(_ProtocolMeta, self).__subclasscheck__(cls)\r\n  File \"/home/lwfitzgerald/typing/python2/typing.py\", line 1401, in __subclasscheck__\r\n    raise TypeError(\"Parameterized generics cannot be used with class \"\r\nTypeError: Parameterized generics cannot be used with class or instance checks\r\n\r\n----------------------------------------------------------------------\r\nRan 231 tests in 0.339s\r\n\r\nFAILED (errors=3)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/655", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/655/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/655/comments", "events_url": "https://api.github.com/repos/python/typing/issues/655/events", "html_url": "https://github.com/python/typing/issues/655", "id": 464261174, "node_id": "MDU6SXNzdWU0NjQyNjExNzQ=", "number": 655, "title": "False positive error with custom property descriptor.", "user": {"login": "mostrows2", "id": 12176143, "node_id": "MDQ6VXNlcjEyMTc2MTQz", "avatar_url": "https://avatars0.githubusercontent.com/u/12176143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mostrows2", "html_url": "https://github.com/mostrows2", "followers_url": "https://api.github.com/users/mostrows2/followers", "following_url": "https://api.github.com/users/mostrows2/following{/other_user}", "gists_url": "https://api.github.com/users/mostrows2/gists{/gist_id}", "starred_url": "https://api.github.com/users/mostrows2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mostrows2/subscriptions", "organizations_url": "https://api.github.com/users/mostrows2/orgs", "repos_url": "https://api.github.com/users/mostrows2/repos", "events_url": "https://api.github.com/users/mostrows2/events{/privacy}", "received_events_url": "https://api.github.com/users/mostrows2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-04T13:15:17Z", "updated_at": "2019-07-04T14:44:32Z", "closed_at": "2019-07-04T14:44:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Code example and Mypy output below.\r\n\r\nIt doesn't seem to be possible to create an explicit descriptor class that behaves\r\nthe same way as @property does with respect to methods of sub-types declaring more constrained return types.\r\n\r\nIn the example below, we have classes \"Obj\" > \"Foo\", and \"AA\" > \"BB\".\r\nAll methods of Obj return AA.   Foo overrides all methods of Obj, but all of those methods\r\nreturn \"BB\".  Note that all methods of Foo are still consistent with the definitions in\r\nObj.\r\n\r\nThe method func1 has no decorators and is accepted without complaints, and its types are correctly recognized.\r\n\r\nMethod func3 is decorated with \"@property\".  Here too, mypy handles this case without error.\r\n\r\nMethod func2 is decorated with \"@prop\", which is a custom property descriptor.\r\nThe revealed types for func2 are consistent with func3 -- hence the typing for the \"prop\" class appears to be consistent with what \"@property\" does.  However, mypy flags an error that\r\nFoo.func2 is not consistent with the super type definition Obj.func2.  (As a related issue, I haven't been able to come up with a better typing scheme for \"prop\" without using \"type:ignore\", which still gives the same type results.)\r\n\r\nIn this example below, I'd expect mypy to report no errors on either func2 or func3, or to report errors for both.   As it stands, it appears that it's not possible to create a typing scheme for a descriptor that fully mirrors mypy's special handling for \"@property\".\r\n\r\n```\r\n\r\nfrom typing import Generic, TypeVar,Type, Callable,Any, Union, overload,Optional\r\n\r\nOwnerType = TypeVar(\"OwnerType\", bound=object)\r\nT = TypeVar('T', covariant=True)\r\nCallableType = TypeVar(\"CallableType\", bound=Callable)\r\n\r\n\r\nclass prop(Generic[T]):\r\n    def __init__(self, func: Callable[[Any], T]):\r\n        self.func = func\r\n\r\n    def __get__(self, obj: Any, owner: Type[Any]) -> T:\r\n        if obj is None:\r\n            return self # type: ignore\r\n        return self.func(obj)\r\n\r\nclass AA:\r\n    def foo(self) -> int:\r\n        return 1\r\n\r\nclass BB(AA):\r\n    def bar(self) -> int:\r\n        return 1\r\n\r\n    \r\nclass Obj:\r\n    def func1(self) -> AA:\r\n        return AA()\r\n    @prop\r\n    def func2(self) -> AA:\r\n        return AA()\r\n    @property\r\n    def func3(self) -> AA:\r\n        return AA()        \r\n\r\nclass Foo(Obj):\r\n    def func1(self) -> BB:\r\n        return BB()\r\n    @prop\r\n    def func2(self) -> BB:\r\n        return BB()\r\n    @property\r\n    def func3(self) -> BB:\r\n        return BB()    \r\n\r\n\r\nx = Obj()\r\ny = Foo()\r\nreveal_type(Obj.func1)\r\nreveal_type(Obj.func2)\r\nreveal_type(Obj.func3)\r\nreveal_type(Foo.func1)\r\nreveal_type(Foo.func2)\r\nreveal_type(Foo.func3)\r\nreveal_type(x.func1)\r\nreveal_type(x.func2)\r\nreveal_type(x.func3)\r\nreveal_type(y.func1)\r\nreveal_type(y.func2)\r\nreveal_type(y.func3)\r\n```\r\n\r\nMypy output:\r\n\r\n/tmp/xx.py:40: error: Signature of \"func2\" incompatible with supertype \"Obj\"\r\n/tmp/xx.py:49: note: Revealed type is 'def (self: xx.Obj) -> xx.AA'\r\n/tmp/xx.py:50: note: Revealed type is 'xx.AA*'\r\n/tmp/xx.py:51: note: Revealed type is 'def (self: xx.Obj) -> xx.AA'\r\n/tmp/xx.py:52: note: Revealed type is 'def (self: xx.Foo) -> xx.BB'\r\n/tmp/xx.py:53: note: Revealed type is 'xx.BB*'\r\n/tmp/xx.py:54: note: Revealed type is 'def (self: xx.Foo) -> xx.BB'\r\n/tmp/xx.py:55: note: Revealed type is 'def () -> xx.AA'\r\n/tmp/xx.py:56: note: Revealed type is 'xx.AA*'\r\n/tmp/xx.py:57: note: Revealed type is 'xx.AA'\r\n/tmp/xx.py:58: note: Revealed type is 'def () -> xx.BB'\r\n/tmp/xx.py:59: note: Revealed type is 'xx.BB*'\r\n/tmp/xx.py:60: note: Revealed type is 'xx.BB'\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/648", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/648/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/648/comments", "events_url": "https://api.github.com/repos/python/typing/issues/648/events", "html_url": "https://github.com/python/typing/issues/648", "id": 456592712, "node_id": "MDU6SXNzdWU0NTY1OTI3MTI=", "number": 648, "title": "Add Protocol, runtime_checkable, Final, final, Literal, and TypedDict to typing on Python 2", "user": {"login": "ilevkivskyi", "id": 12005495, "node_id": "MDQ6VXNlcjEyMDA1NDk1", "avatar_url": "https://avatars1.githubusercontent.com/u/12005495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilevkivskyi", "html_url": "https://github.com/ilevkivskyi", "followers_url": "https://api.github.com/users/ilevkivskyi/followers", "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}", "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions", "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs", "repos_url": "https://api.github.com/users/ilevkivskyi/repos", "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}", "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ilevkivskyi", "id": 12005495, "node_id": "MDQ6VXNlcjEyMDA1NDk1", "avatar_url": "https://avatars1.githubusercontent.com/u/12005495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilevkivskyi", "html_url": "https://github.com/ilevkivskyi", "followers_url": "https://api.github.com/users/ilevkivskyi/followers", "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}", "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions", "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs", "repos_url": "https://api.github.com/users/ilevkivskyi/repos", "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}", "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ilevkivskyi", "id": 12005495, "node_id": "MDQ6VXNlcjEyMDA1NDk1", "avatar_url": "https://avatars1.githubusercontent.com/u/12005495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilevkivskyi", "html_url": "https://github.com/ilevkivskyi", "followers_url": "https://api.github.com/users/ilevkivskyi/followers", "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}", "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions", "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs", "repos_url": "https://api.github.com/users/ilevkivskyi/repos", "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}", "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2019-06-16T01:59:13Z", "updated_at": "2019-06-17T16:32:48Z", "closed_at": "2019-06-17T16:32:48Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "These should be essentially just copied from `typing_extensions`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/646", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/646/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/646/comments", "events_url": "https://api.github.com/repos/python/typing/issues/646/events", "html_url": "https://github.com/python/typing/issues/646", "id": 455753367, "node_id": "MDU6SXNzdWU0NTU3NTMzNjc=", "number": 646, "title": "Local-scoped annotations for \"global\" functions & objects", "user": {"login": "castarco", "id": 251364, "node_id": "MDQ6VXNlcjI1MTM2NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/251364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/castarco", "html_url": "https://github.com/castarco", "followers_url": "https://api.github.com/users/castarco/followers", "following_url": "https://api.github.com/users/castarco/following{/other_user}", "gists_url": "https://api.github.com/users/castarco/gists{/gist_id}", "starred_url": "https://api.github.com/users/castarco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/castarco/subscriptions", "organizations_url": "https://api.github.com/users/castarco/orgs", "repos_url": "https://api.github.com/users/castarco/repos", "events_url": "https://api.github.com/users/castarco/events{/privacy}", "received_events_url": "https://api.github.com/users/castarco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-13T13:49:10Z", "updated_at": "2019-06-17T13:51:01Z", "closed_at": "2019-06-17T13:51:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "This comes from a previous issue I opened in MyPy's repository ( https://github.com/python/mypy/issues/6947 ).\r\n\r\nIt started with the quite common topic of immutability and the usual stoppers (having to annotate very big libraries & stubs to make the mutability/immutability annotations useful at all).\r\n\r\nThe basic idea is to introduce local-scoped annotations that refer to objects & functions defined outside the particular scope where the annotation is introduced, in order to make the type checker happy (of course, it would be a \"good faith\" annotation).\r\n\r\nThe expected benefit is to allow programmers to define more strongly typed interfaces without having to wait for the whole Python ecosystem to annotate core & basic libraries.\r\n\r\nAs an example:\r\n```python\r\ndef bar(x):\r\n    # No annotations at all here\r\n    return x.to_str()\r\n\r\ndef foo(x: Immutable[C]) -> str:\r\n    # We attach a local annotation to a function/callable, so the type checker\r\n    # won't complain for calling a function that does not provide the guarantees\r\n    # that `foo`'s signature is promising.\r\n    #\r\n    # annotate(bar): Callable[[Immutable[C]], str]\r\n    return bar(x)\r\n\r\ndef moo(x: Immutable[C]) -> str:\r\n    # This should generate a warning, because the annotation is redundant\r\n    # annotate(foo): Callable[[Immutable[C]], str]\r\n    return foo(x)\r\n\r\ndef func(x: Immutable[C]) -> int:\r\n    # This should generate an error, because the annotation is not compatible\r\n    # annotate(foo): Callable[[Immutable[C]], int]\r\n    return foo(x)\r\n```\r\n\r\nDoes it make sense to implement something on these lines? I could try to formalize this idea further if enough people find it interesting.\r\n\r\nP.D.: This is currently possible by performing an assignment operation, and probably it's optimized out when Python is translated to its bytecode, although I'm not sure:\r\n```python\r\ndef foo(x: Immutable[C]) -> str:\r\n    # Instead of using a new syntax inside comments, we can rely on\r\n    # mechanisms that already exist.\r\n    bar: Callable[[Immutable[C]], str] = bar\r\n    return bar(x)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/645", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/645/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/645/comments", "events_url": "https://api.github.com/repos/python/typing/issues/645/events", "html_url": "https://github.com/python/typing/issues/645", "id": 454872353, "node_id": "MDU6SXNzdWU0NTQ4NzIzNTM=", "number": 645, "title": "Expose a cast variant to remove Optional", "user": {"login": "cjerdonek", "id": 355822, "node_id": "MDQ6VXNlcjM1NTgyMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/355822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjerdonek", "html_url": "https://github.com/cjerdonek", "followers_url": "https://api.github.com/users/cjerdonek/followers", "following_url": "https://api.github.com/users/cjerdonek/following{/other_user}", "gists_url": "https://api.github.com/users/cjerdonek/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjerdonek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjerdonek/subscriptions", "organizations_url": "https://api.github.com/users/cjerdonek/orgs", "repos_url": "https://api.github.com/users/cjerdonek/repos", "events_url": "https://api.github.com/users/cjerdonek/events{/privacy}", "received_events_url": "https://api.github.com/users/cjerdonek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-06-11T19:49:00Z", "updated_at": "2019-06-12T17:16:58Z", "closed_at": "2019-06-11T23:10:40Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I recently noticed that it would be useful to have a `cast()` variant that removes `Optional` (e.g. for DRY purposes). This would be useful in cases where earlier code has ruled out the `None` case and e.g. mypy's type inference isn't able to detect it. I believe this could also help prevent errors because as it is people can pass the wrong `typ` into `cast()` (or code can change over time, etc).\r\n\r\nThis is related to (or a special case of) issue #565. My apologies in advance if this feature already exists or if the idea has already been rejected.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/643", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/643/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/643/comments", "events_url": "https://api.github.com/repos/python/typing/issues/643/events", "html_url": "https://github.com/python/typing/issues/643", "id": 453788815, "node_id": "MDU6SXNzdWU0NTM3ODg4MTU=", "number": 643, "title": "python-typing-extensions fails to build with Python 3.8", "user": {"login": "hegjon", "id": 12933, "node_id": "MDQ6VXNlcjEyOTMz", "avatar_url": "https://avatars1.githubusercontent.com/u/12933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hegjon", "html_url": "https://github.com/hegjon", "followers_url": "https://api.github.com/users/hegjon/followers", "following_url": "https://api.github.com/users/hegjon/following{/other_user}", "gists_url": "https://api.github.com/users/hegjon/gists{/gist_id}", "starred_url": "https://api.github.com/users/hegjon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hegjon/subscriptions", "organizations_url": "https://api.github.com/users/hegjon/orgs", "repos_url": "https://api.github.com/users/hegjon/repos", "events_url": "https://api.github.com/users/hegjon/events{/privacy}", "received_events_url": "https://api.github.com/users/hegjon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-08T12:23:18Z", "updated_at": "2019-06-16T09:44:16Z", "closed_at": "2019-06-16T09:44:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "python-typing-extensions fails to build with Python 3.8.0b1.\r\n\r\nFrom the build log, it looks like some of the extensions were moved to Python's own typing module, invalidating the tests' expectations:\r\n```\r\n======================================================================\r\nFAIL: test_typing_extensions_defers_when_possible (__main__.AllTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"src_py3/test_typing_extensions.py\", line 1384, in test_typing_extensions_defers_when_possible\r\n    self.assertIs(\r\nAssertionError: <function final at 0x7fd16783f280> is not <function final at 0x7fd167c929d0>\r\n======================================================================\r\nFAIL: test_repr (__main__.LiteralTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"src_py3/test_typing_extensions.py\", line 237, in test_repr\r\n    self.assertEqual(repr(Literal[1]), \"typing_extensions.Literal[1]\")\r\nAssertionError: 'typing.Literal[1]' != 'typing_extensions.Literal[1]'\r\n- typing.Literal[1]\r\n+ typing_extensions.Literal[1]\r\n?       +++++++++++\r\n----------------------------------------------------------------------\r\n\r\n\r\n```\r\nFor the build logs, see:\r\nhttps://copr-be.cloud.fedoraproject.org/results/@python/python3.8/fedora-rawhide-x86_64/00927854-python-typing-extensions/\r\n\r\nThe original issue was submitted here: https://bugzilla.redhat.com/show_bug.cgi?id=1718366", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/638", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/638/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/638/comments", "events_url": "https://api.github.com/repos/python/typing/issues/638/events", "html_url": "https://github.com/python/typing/issues/638", "id": 450807577, "node_id": "MDU6SXNzdWU0NTA4MDc1Nzc=", "number": 638, "title": "Proposal: syntactic sugar/language-level support for protocols", "user": {"login": "antonagestam", "id": 218551, "node_id": "MDQ6VXNlcjIxODU1MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/218551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antonagestam", "html_url": "https://github.com/antonagestam", "followers_url": "https://api.github.com/users/antonagestam/followers", "following_url": "https://api.github.com/users/antonagestam/following{/other_user}", "gists_url": "https://api.github.com/users/antonagestam/gists{/gist_id}", "starred_url": "https://api.github.com/users/antonagestam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antonagestam/subscriptions", "organizations_url": "https://api.github.com/users/antonagestam/orgs", "repos_url": "https://api.github.com/users/antonagestam/repos", "events_url": "https://api.github.com/users/antonagestam/events{/privacy}", "received_events_url": "https://api.github.com/users/antonagestam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-31T13:46:24Z", "updated_at": "2019-06-01T23:16:06Z", "closed_at": "2019-06-01T23:16:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Protocols are arguably something different from other classes in Python, they have their own semantic meaning and works in different way (structural instead of nominal sub-typing). I think mirroring this in the syntax could be helpful to emphasize the fact that they are something else. In other words I think they're different enough to warrant their own keyword.\r\n\r\nThe syntax I suggest is to replace the `class` keyword with a new `protocol` keyword.\r\n\r\n```python\r\nprotocol Point:\r\n    x: int\r\n    y: int\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/624", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/624/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/624/comments", "events_url": "https://api.github.com/repos/python/typing/issues/624/events", "html_url": "https://github.com/python/typing/issues/624", "id": 433210219, "node_id": "MDU6SXNzdWU0MzMyMTAyMTk=", "number": 624, "title": ".travis.yml: The 'sudo' tag is now deprecated in Travis CI", "user": {"login": "cclauss", "id": 3709715, "node_id": "MDQ6VXNlcjM3MDk3MTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cclauss", "html_url": "https://github.com/cclauss", "followers_url": "https://api.github.com/users/cclauss/followers", "following_url": "https://api.github.com/users/cclauss/following{/other_user}", "gists_url": "https://api.github.com/users/cclauss/gists{/gist_id}", "starred_url": "https://api.github.com/users/cclauss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cclauss/subscriptions", "organizations_url": "https://api.github.com/users/cclauss/orgs", "repos_url": "https://api.github.com/users/cclauss/repos", "events_url": "https://api.github.com/users/cclauss/events{/privacy}", "received_events_url": "https://api.github.com/users/cclauss/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-15T10:35:49Z", "updated_at": "2019-04-18T02:59:37Z", "closed_at": "2019-04-18T02:59:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[Travis are now recommending removing the __sudo__ tag](https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration).\n\n\"_If you currently specify __sudo: false__ in your __.travis.yml__, we recommend removing that configuration_\" ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/623", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/623/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/623/comments", "events_url": "https://api.github.com/repos/python/typing/issues/623/events", "html_url": "https://github.com/python/typing/issues/623", "id": 431711047, "node_id": "MDU6SXNzdWU0MzE3MTEwNDc=", "number": 623, "title": "a way to refer to overloaded functions", "user": {"login": "bwo", "id": 68839, "node_id": "MDQ6VXNlcjY4ODM5", "avatar_url": "https://avatars1.githubusercontent.com/u/68839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bwo", "html_url": "https://github.com/bwo", "followers_url": "https://api.github.com/users/bwo/followers", "following_url": "https://api.github.com/users/bwo/following{/other_user}", "gists_url": "https://api.github.com/users/bwo/gists{/gist_id}", "starred_url": "https://api.github.com/users/bwo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bwo/subscriptions", "organizations_url": "https://api.github.com/users/bwo/orgs", "repos_url": "https://api.github.com/users/bwo/repos", "events_url": "https://api.github.com/users/bwo/events{/privacy}", "received_events_url": "https://api.github.com/users/bwo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-10T20:52:34Z", "updated_at": "2019-04-11T10:55:08Z", "closed_at": "2019-04-11T10:55:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to refer to overloaded functions in argument position? It seems as if there isn't; `reveal_type` displays such functions as `Overload(\u2026)`, but there is no `Overload` exported from `typing` or `typing_extensions`.\r\n\r\nMy use case is generic functions:\r\n\r\nfrom typing import overload, TypeVar, Generic, Callable, Union, cast\r\n\r\n```python\r\nA = TypeVar('A')\r\nB = TypeVar('B')\r\nS = TypeVar('S')\r\nT = TypeVar('T')\r\n\r\n\r\nclass Spam(Generic[A, B]):\r\n    def __init__(self, a, b):\r\n        # type: (A, B) -> None\r\n        self.a = a\r\n        self.b = b\r\n\r\n    def map(self, f, g):\r\n        # type: (Callable[[A], S], Callable[[B], T]) -> Spam[S, T]\r\n        return Spam(f(self.a), g(self.b))\r\n\r\n    def mapone(self, f):\r\n        # type: ??? -> Spam[S, T]\r\n        return self.map(\r\n            cast(Callable[[A], S], f),  # ideally these casts would not be necessary either\r\n            cast(Callable[[B], T], f)\r\n        )\r\n```\r\n\r\nGiven this:\r\n\r\n```python\r\n@overload\r\ndef eggs(x):\r\n    # type: (int) -> str\r\n    pass\r\n\r\n\r\n@overload\r\ndef eggs(x):\r\n    # type: (str) -> bool\r\n    pass\r\n\r\n\r\ndef eggs(x):\r\n    return str(x) if isinstance(x, int) else False\r\n```\r\n\r\nI want to be able to do:\r\n\r\n```python\r\nSpam(1, \"2\").mapone(eggs)\r\n```\r\n\r\nBut this doesn't work. Although mypy recognizes that `eggs` is both a function `str -> bool` and a function `int -> str`, and the following typechecks:\r\n\r\n```python\r\nSpam(1, \"2\").map(eggs, eggs)\r\n```\r\n\r\n, giving `mapone` the type `Union[Callable[[A], S], Callable[[B], T]] -> Spam[S, T]`  requires me to give a type annotation to the second line here:\r\n\r\n```\r\nf = Spam(\"a\", 1)\r\ng = f.mapone(eggs)\r\n```\r\n\r\nand types `g` as `Any`. Any type annotation I give is accepted.\r\n\r\nGiving `mapone` the alternative annotation `Callable[[Union[A, B]], Union[S, T]] -> Spam[S, T]` gives the error `Argument 1 to \"mapone\" of \"Spam\" has incompatible type overloaded function; expected \"Callable[[Union[str, int]], <nothing>]\"`\r\n\r\n(Come to think of it, if it were possible to refer to overloaded functions in argument position like this, it would probably also be possible just to use `Overload` or whatever in the initial annotation of overloaded functions and avoid the repeated names, but that is a separate thing, I suppose.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/622", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/622/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/622/comments", "events_url": "https://api.github.com/repos/python/typing/issues/622/events", "html_url": "https://github.com/python/typing/issues/622", "id": 431561170, "node_id": "MDU6SXNzdWU0MzE1NjExNzA=", "number": 622, "title": "Protocol for immutable fields", "user": {"login": "quodlibetor", "id": 277161, "node_id": "MDQ6VXNlcjI3NzE2MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/277161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quodlibetor", "html_url": "https://github.com/quodlibetor", "followers_url": "https://api.github.com/users/quodlibetor/followers", "following_url": "https://api.github.com/users/quodlibetor/following{/other_user}", "gists_url": "https://api.github.com/users/quodlibetor/gists{/gist_id}", "starred_url": "https://api.github.com/users/quodlibetor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quodlibetor/subscriptions", "organizations_url": "https://api.github.com/users/quodlibetor/orgs", "repos_url": "https://api.github.com/users/quodlibetor/repos", "events_url": "https://api.github.com/users/quodlibetor/events{/privacy}", "received_events_url": "https://api.github.com/users/quodlibetor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-10T15:14:00Z", "updated_at": "2019-04-10T15:25:02Z", "closed_at": "2019-04-10T15:17:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "related to #621 , I am trying to verify `NamedTuples`, and I can't figure out if there is a way to get protocols to understand that fields can be immutable:\r\n\r\n```python\r\n# NamedTuple\r\nfrom __future__ import annotations\r\n\r\nfrom typing import NamedTuple, Protocol, Optional\r\n\r\nclass ImmutableBase(NamedTuple):\r\n    one: Optional[int]\r\n\r\n    def as_verified(self) -> ImmutableVerified:\r\n        assert self.one is not None\r\n        return self\r\n\r\nclass ImmutableVerified(Protocol):\r\n    one: int\r\n```\r\n\r\nwhich gives an extra \"expected settable variable, got read-only attribute\" issue:\r\n\r\n```text\r\n$ mypy example_immutable.py\r\nexample_immutable.py:11: error: Incompatible return value type (got \"ImmutableBase\", expected \"ImmutableVerified\")\r\nexample_immutable.py:11: note: Following member(s) of \"ImmutableBase\" have conflicts:\r\nexample_immutable.py:11: note:     one: expected \"int\", got \"Optional[int]\"\r\nexample_immutable.py:11: note: Protocol member ImmutableVerified.one expected settable variable, got read-only attribute\r\n```\r\n\r\nI would actually like to mark `ImmutableVerified.two` as immutable, and I don't see that there is any way to do that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/621", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/621/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/621/comments", "events_url": "https://api.github.com/repos/python/typing/issues/621/events", "html_url": "https://github.com/python/typing/issues/621", "id": 431560029, "node_id": "MDU6SXNzdWU0MzE1NjAwMjk=", "number": 621, "title": "Protocols for types with fields that can be verified", "user": {"login": "quodlibetor", "id": 277161, "node_id": "MDQ6VXNlcjI3NzE2MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/277161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quodlibetor", "html_url": "https://github.com/quodlibetor", "followers_url": "https://api.github.com/users/quodlibetor/followers", "following_url": "https://api.github.com/users/quodlibetor/following{/other_user}", "gists_url": "https://api.github.com/users/quodlibetor/gists{/gist_id}", "starred_url": "https://api.github.com/users/quodlibetor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quodlibetor/subscriptions", "organizations_url": "https://api.github.com/users/quodlibetor/orgs", "repos_url": "https://api.github.com/users/quodlibetor/repos", "events_url": "https://api.github.com/users/quodlibetor/events{/privacy}", "received_events_url": "https://api.github.com/users/quodlibetor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-10T15:11:45Z", "updated_at": "2019-04-11T17:54:47Z", "closed_at": "2019-04-10T16:40:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure if this should be reported to this repo or the mypy repo, ultimately I'm sure if protocols are _supposed_ to support this, so here I am.\r\n\r\nI have some complex objects that can be in one of several states once they have been verified, and I'd like to represent that verification as different types, but I'm having a hard time getting it to work with protocols.\r\n\r\nI believe that something like this should work:\r\n\r\n```python\r\nfrom __future__ import annotations\r\nfrom typing import NamedTuple, Protocol, Optional\r\n\r\nclass Simple:\r\n    two: Optional[int]\r\n\r\n    def as_simpl_verified(self) -> SimpleVerified:\r\n        assert self.two is not None\r\n        return self\r\n\r\nclass SimpleVerified(Protocol):\r\n    two: int\r\n```\r\n\r\n```\r\n$ pip freeze | rg mypy\r\nmypy-extensions==0.4.1\r\nmypy-mypyc==0.670\r\n```\r\n\r\nbut I get this error:\r\n\r\n```term\r\n$ mypy example_simple.py\r\nexample_simple.py:11: error: Incompatible return value type (got \"Simple\", expected \"SimpleVerified\")\r\nexample_simple.py:11: note: Following member(s) of \"Simple\" have conflicts:\r\nexample_simple.py:11: note:     two: expected \"int\", got \"Optional[int]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/620", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/620/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/620/comments", "events_url": "https://api.github.com/repos/python/typing/issues/620/events", "html_url": "https://github.com/python/typing/issues/620", "id": 426405883, "node_id": "MDU6SXNzdWU0MjY0MDU4ODM=", "number": 620, "title": "snehu2015@gmail.com", "user": {"login": "snehasiby", "id": 36875715, "node_id": "MDQ6VXNlcjM2ODc1NzE1", "avatar_url": "https://avatars1.githubusercontent.com/u/36875715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/snehasiby", "html_url": "https://github.com/snehasiby", "followers_url": "https://api.github.com/users/snehasiby/followers", "following_url": "https://api.github.com/users/snehasiby/following{/other_user}", "gists_url": "https://api.github.com/users/snehasiby/gists{/gist_id}", "starred_url": "https://api.github.com/users/snehasiby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/snehasiby/subscriptions", "organizations_url": "https://api.github.com/users/snehasiby/orgs", "repos_url": "https://api.github.com/users/snehasiby/repos", "events_url": "https://api.github.com/users/snehasiby/events{/privacy}", "received_events_url": "https://api.github.com/users/snehasiby/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-28T10:10:45Z", "updated_at": "2019-03-29T02:01:20Z", "closed_at": "2019-03-28T11:47:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "TypeError: descriptor '__subclasses__' of 'type' object needs an argument\r\nMakefile:31: recipe for target 'train-core' failed\r\nmake: *** [train-core] Error 1\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/617", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/617/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/617/comments", "events_url": "https://api.github.com/repos/python/typing/issues/617/events", "html_url": "https://github.com/python/typing/issues/617", "id": 415151070, "node_id": "MDU6SXNzdWU0MTUxNTEwNzA=", "number": 617, "title": "Subclassing Callable", "user": {"login": "DaniGuardiola", "id": 8862967, "node_id": "MDQ6VXNlcjg4NjI5Njc=", "avatar_url": "https://avatars3.githubusercontent.com/u/8862967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DaniGuardiola", "html_url": "https://github.com/DaniGuardiola", "followers_url": "https://api.github.com/users/DaniGuardiola/followers", "following_url": "https://api.github.com/users/DaniGuardiola/following{/other_user}", "gists_url": "https://api.github.com/users/DaniGuardiola/gists{/gist_id}", "starred_url": "https://api.github.com/users/DaniGuardiola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DaniGuardiola/subscriptions", "organizations_url": "https://api.github.com/users/DaniGuardiola/orgs", "repos_url": "https://api.github.com/users/DaniGuardiola/repos", "events_url": "https://api.github.com/users/DaniGuardiola/events{/privacy}", "received_events_url": "https://api.github.com/users/DaniGuardiola/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-27T14:26:41Z", "updated_at": "2019-02-27T17:07:21Z", "closed_at": "2019-02-27T14:56:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a bunch of types defined like this:\r\n\r\n```python\r\nt_wrapped_deferred_return = Dict[str, any]\r\nt_deferred_return = Dict[str, any]\r\nt_sync_return = Dict[str, str]\r\nt_return = Union[t_sync_return, t_deferred_return]\r\n\r\n\r\nclass OperationCallable(Callable[[Stack, Union[bytes, None]], t_return]):\r\n    type: str\r\n```\r\n\r\nThen I'm using a function typed with `OperationCallable` elsewhere, like this:\r\n\r\n```python\r\nsome_instance.fn(**kwargs)\r\n```\r\n\r\nThis is throwing a mypy (I assume, I'm using PyCharm) error:\r\n\r\n```\r\n'OperationCallable' object is not callable\r\n```\r\n\r\nAm I missing something? Is there a different way to go about this?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/616", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/616/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/616/comments", "events_url": "https://api.github.com/repos/python/typing/issues/616/events", "html_url": "https://github.com/python/typing/issues/616", "id": 413462516, "node_id": "MDU6SXNzdWU0MTM0NjI1MTY=", "number": 616, "title": "Classmethod doesn't pass generic type", "user": {"login": "Peilonrayz", "id": 5623093, "node_id": "MDQ6VXNlcjU2MjMwOTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5623093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Peilonrayz", "html_url": "https://github.com/Peilonrayz", "followers_url": "https://api.github.com/users/Peilonrayz/followers", "following_url": "https://api.github.com/users/Peilonrayz/following{/other_user}", "gists_url": "https://api.github.com/users/Peilonrayz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Peilonrayz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Peilonrayz/subscriptions", "organizations_url": "https://api.github.com/users/Peilonrayz/orgs", "repos_url": "https://api.github.com/users/Peilonrayz/repos", "events_url": "https://api.github.com/users/Peilonrayz/events{/privacy}", "received_events_url": "https://api.github.com/users/Peilonrayz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-22T15:48:27Z", "updated_at": "2019-06-20T09:01:53Z", "closed_at": "2019-06-20T09:01:52Z", "author_association": "NONE", "active_lock_reason": null, "body": " - This may be related to #123.\r\n - [PEP 484, says the type is assumed to be `Type[type(cls(...))]`][0].\r\n - [`classmethod` says a class method receives the class as implicit first argument][1].\r\n\r\nI'd assume that `Obj[int]` is it's own class, different from `Obj`. However `classmethod` doesn't work this way. This means that I can't use `Obj[int].from_str()` to make an `Obj[int]`, much like I can use `Obj.from_str()` to make an `Obj`. This can be seen in the following example.\r\n\r\n```\r\nfrom typing import Generic, TypeVar, Type\r\n\r\nT = TypeVar('T')\r\n\r\n\r\nclass Obj(Generic[T]):\r\n    value: T\r\n\r\n    def __init__(self, value: T):\r\n        self.value = value\r\n\r\n    def __str__(self):\r\n        name = getattr(self, '__orig_class__', type(self).__name__)\r\n        return f'{name}(value={self.value!r})'\r\n\r\n    @classmethod\r\n    def from_str(cls, value: str):\r\n        fn = getattr(cls, '__args__', [str])[0]\r\n        return cls(fn(value))\r\n\r\n\r\ndef from_str(cls: Type[Obj[T]], value) -> Obj[T]:\r\n    fn = getattr(cls, '__args__', [str])[0]\r\n    return cls(fn(value))\r\n\r\n\r\nif __name__ == '__main__':\r\n    # untyped\r\n    print(Obj.from_str('1'))\r\n    print(from_str(Obj, '1'))\r\n\r\n    # typed\r\n    print(Obj[int].from_str('1'))\r\n    print(from_str(Obj[int], '1'))\r\n```\r\n\r\nWhich outputs:\r\n\r\n```\r\nObj(value='1')\r\nObj(value='1')\r\nObj(value='1')\r\n__main__.Obj[int](value=1)\r\n```\r\n\r\nIt seems like `classmethod` and typing agree that it shouldn't be passed the generic type. However I think passing the type as well to be better than having to make all `classmethods` outside the class to support the generic type. It also doesn't look like it'd destroy current code as `cls` seems to work the same way whether it's typed or not.\r\n\r\n  [0]: https://www.python.org/dev/peps/pep-0484/#annotating-instance-and-class-methods\r\n  [1]: https://docs.python.org/3/library/functions.html#classmethod", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/612", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/612/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/612/comments", "events_url": "https://api.github.com/repos/python/typing/issues/612/events", "html_url": "https://github.com/python/typing/issues/612", "id": 406136686, "node_id": "MDU6SXNzdWU0MDYxMzY2ODY=", "number": 612, "title": "Python 2 port's GeneralMeta.__instancecheck__ fails on old style classes ", "user": {"login": "felixonmars", "id": 1006477, "node_id": "MDQ6VXNlcjEwMDY0Nzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1006477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felixonmars", "html_url": "https://github.com/felixonmars", "followers_url": "https://api.github.com/users/felixonmars/followers", "following_url": "https://api.github.com/users/felixonmars/following{/other_user}", "gists_url": "https://api.github.com/users/felixonmars/gists{/gist_id}", "starred_url": "https://api.github.com/users/felixonmars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felixonmars/subscriptions", "organizations_url": "https://api.github.com/users/felixonmars/orgs", "repos_url": "https://api.github.com/users/felixonmars/repos", "events_url": "https://api.github.com/users/felixonmars/events{/privacy}", "received_events_url": "https://api.github.com/users/felixonmars/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-03T22:03:50Z", "updated_at": "2019-02-04T10:29:51Z", "closed_at": "2019-02-04T10:29:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "An old style class is not an instance of `type`, nor does it have `.__class__`, so the `__instancecheck__` method fails with an AttributeError.\r\n\r\nTo reproduce:\r\n\r\n```\r\n>>> from typing import Generic, TypeVar\r\n>>> Ex = TypeVar(\"Ex\", covariant=True)\r\n>>> class a: pass\r\n...\r\n>>> class b(Generic[Ex]): pass\r\n...\r\n>>> isinstance(a, b)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python2.7/site-packages/typing.py\", line 1259, in __instancecheck__\r\n    return issubclass(instance.__class__, self)\r\nAttributeError: class a has no attribute '__class__'\r\n```\r\n\r\nThis breaks hypothesis' test suite when the python2 port of typing is installed, see https://github.com/HypothesisWorks/hypothesis/issues/1793", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/611", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/611/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/611/comments", "events_url": "https://api.github.com/repos/python/typing/issues/611/events", "html_url": "https://github.com/python/typing/issues/611", "id": 405972205, "node_id": "MDU6SXNzdWU0MDU5NzIyMDU=", "number": 611, "title": "How to annotate hash algorithms", "user": {"login": "fametrano", "id": 3296421, "node_id": "MDQ6VXNlcjMyOTY0MjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/3296421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fametrano", "html_url": "https://github.com/fametrano", "followers_url": "https://api.github.com/users/fametrano/followers", "following_url": "https://api.github.com/users/fametrano/following{/other_user}", "gists_url": "https://api.github.com/users/fametrano/gists{/gist_id}", "starred_url": "https://api.github.com/users/fametrano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fametrano/subscriptions", "organizations_url": "https://api.github.com/users/fametrano/orgs", "repos_url": "https://api.github.com/users/fametrano/repos", "events_url": "https://api.github.com/users/fametrano/events{/privacy}", "received_events_url": "https://api.github.com/users/fametrano/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-02T10:53:01Z", "updated_at": "2019-02-02T13:29:57Z", "closed_at": "2019-02-02T13:29:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "How should the hash algorithm `hf` be annotated?\r\n\r\n```python\r\nimport hashlib\r\n\r\ndef f1(hf, b1: bytes, b2: bytes) -> bytes:\r\n    h = hf()\r\n    h.update(b1)\r\n    h.update(b2)\r\n    return h.digest()\r\n\r\ndef f2(hf, b1: bytes, b2: bytes) -> bytes:\r\n    h = hf(b1)\r\n    h.update(b2)\r\n    return h.digest()\r\n\r\ndef f3(hf, b1: bytes, b2: bytes) -> bytes:\r\n    return hf(b1+b2).digest()\r\n\r\nfoo = b'foo'\r\nbar = b'bar'\r\n\r\nprint(f1(hashlib.sha256, foo, bar))\r\nprint(f2(hashlib.sha256, foo, bar))\r\nprint(f3(hashlib.sha256, foo, bar))\r\n```\r\n\r\nAs a side question: is there a way to annotate the `b1` and `b2` variables as bytes-like (e.g. `bytearray`, etc.) ?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/610", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/610/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/610/comments", "events_url": "https://api.github.com/repos/python/typing/issues/610/events", "html_url": "https://github.com/python/typing/issues/610", "id": 405388036, "node_id": "MDU6SXNzdWU0MDUzODgwMzY=", "number": 610, "title": "typing 3.5.2 not installable", "user": {"login": "Teptnologic", "id": 11357475, "node_id": "MDQ6VXNlcjExMzU3NDc1", "avatar_url": "https://avatars1.githubusercontent.com/u/11357475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Teptnologic", "html_url": "https://github.com/Teptnologic", "followers_url": "https://api.github.com/users/Teptnologic/followers", "following_url": "https://api.github.com/users/Teptnologic/following{/other_user}", "gists_url": "https://api.github.com/users/Teptnologic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Teptnologic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Teptnologic/subscriptions", "organizations_url": "https://api.github.com/users/Teptnologic/orgs", "repos_url": "https://api.github.com/users/Teptnologic/repos", "events_url": "https://api.github.com/users/Teptnologic/events{/privacy}", "received_events_url": "https://api.github.com/users/Teptnologic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-31T18:52:26Z", "updated_at": "2019-01-31T19:34:20Z", "closed_at": "2019-01-31T19:34:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "When run `pip install typing==3.5.2` when is specified on the PyPI website. The command returns error message `No matching distribution found`. The actual installable version is 3.5.2.2.\r\n\r\nThis makes it difficult to parse the PyPI information to install the correct version of typing.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/609", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/609/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/609/comments", "events_url": "https://api.github.com/repos/python/typing/issues/609/events", "html_url": "https://github.com/python/typing/issues/609", "id": 404849860, "node_id": "MDU6SXNzdWU0MDQ4NDk4NjA=", "number": 609, "title": "Deprecated qualifier?", "user": {"login": "jbasko", "id": 632910, "node_id": "MDQ6VXNlcjYzMjkxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/632910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbasko", "html_url": "https://github.com/jbasko", "followers_url": "https://api.github.com/users/jbasko/followers", "following_url": "https://api.github.com/users/jbasko/following{/other_user}", "gists_url": "https://api.github.com/users/jbasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbasko/subscriptions", "organizations_url": "https://api.github.com/users/jbasko/orgs", "repos_url": "https://api.github.com/users/jbasko/repos", "events_url": "https://api.github.com/users/jbasko/events{/privacy}", "received_events_url": "https://api.github.com/users/jbasko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-30T16:20:14Z", "updated_at": "2019-06-20T10:49:31Z", "closed_at": "2019-06-20T09:31:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Are there any plans or existing ways to specify a thing as deprecated apart from issuing DeprecationWarning?\r\n\r\n```\r\nx: Deprecated[int]\r\n\r\nclass S:\r\n    y: Deprecated[ClassVar[int]]\r\n\r\ndef x() -> Deprecated[int]:\r\n    return 5\r\n\r\nclass A:\r\n    pass\r\n\r\nclass B(Deprecated[A]):\r\n    pass\r\n```\r\n\r\nIf it was in the language, a tool like PyCharm could benefit from it.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/608", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/608/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/608/comments", "events_url": "https://api.github.com/repos/python/typing/issues/608/events", "html_url": "https://github.com/python/typing/issues/608", "id": 401677509, "node_id": "MDU6SXNzdWU0MDE2Nzc1MDk=", "number": 608, "title": "Forward-comapbility of my \"Parametrized-generic\" class", "user": {"login": "Levitanus", "id": 29713891, "node_id": "MDQ6VXNlcjI5NzEzODkx", "avatar_url": "https://avatars0.githubusercontent.com/u/29713891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Levitanus", "html_url": "https://github.com/Levitanus", "followers_url": "https://api.github.com/users/Levitanus/followers", "following_url": "https://api.github.com/users/Levitanus/following{/other_user}", "gists_url": "https://api.github.com/users/Levitanus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Levitanus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Levitanus/subscriptions", "organizations_url": "https://api.github.com/users/Levitanus/orgs", "repos_url": "https://api.github.com/users/Levitanus/repos", "events_url": "https://api.github.com/users/Levitanus/events{/privacy}", "received_events_url": "https://api.github.com/users/Levitanus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 133486143, "node_id": "MDU6TGFiZWwxMzM0ODYxNDM=", "url": "https://api.github.com/repos/python/typing/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-01-22T09:43:22Z", "updated_at": "2019-01-22T11:33:59Z", "closed_at": "2019-01-22T11:33:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry for questioning here... If there is a better place will be grateful for pointing to :)\r\n\r\nI'm looking for code-saving algorithm of construction generics. And, explored typing module a bit, came to the solution, workes for me:\r\n```python\r\nimport typing as ty\r\nT = ty.TypeVar('T')\r\nclass A(ty.Generic[T]):\r\n    # __args are unique every instantiation\r\n    __args: ty.Optional[ty.Tuple[ty.Type[T]]] = None\r\n    value: T\r\n\r\n    def __init__(self, value: ty.Optional[T]=None) -> None:\r\n        \"\"\"Get actual type of generic and initizalize it's value.\"\"\"\r\n        cls = ty.cast(A, self.__class__)\r\n        if cls.__args:\r\n            self.ref = cls.__args[0]\r\n        else:\r\n            self.ref = type(value)\r\n        if value:\r\n            self.value = value\r\n        else:\r\n            self.value = self.ref()\r\n        cls.__args = None\r\n\r\n    def __class_getitem__(cls, *args: type) -> ty.Type['A']:\r\n        \"\"\"Recive type args, if passed any before initialization.\"\"\"\r\n        cls.__args = ty.cast(ty.Tuple[ty.Type[T]], args)\r\n        return super().__class_getitem__(*args, **kwargs)  # type: ignore\r\n\r\na = A[int]()\r\nb = A(int())\r\nc = A[str]()\r\nprint([a.value, b.value, c.value])  # [0, 0, '']\r\n```\r\nHow dangerous to use this internal interpretation of typing public API?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/606", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/606/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/606/comments", "events_url": "https://api.github.com/repos/python/typing/issues/606/events", "html_url": "https://github.com/python/typing/issues/606", "id": 399960229, "node_id": "MDU6SXNzdWUzOTk5NjAyMjk=", "number": 606, "title": "Using Inference at Runtime", "user": {"login": "saulshanabrook", "id": 1186124, "node_id": "MDQ6VXNlcjExODYxMjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1186124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saulshanabrook", "html_url": "https://github.com/saulshanabrook", "followers_url": "https://api.github.com/users/saulshanabrook/followers", "following_url": "https://api.github.com/users/saulshanabrook/following{/other_user}", "gists_url": "https://api.github.com/users/saulshanabrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/saulshanabrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saulshanabrook/subscriptions", "organizations_url": "https://api.github.com/users/saulshanabrook/orgs", "repos_url": "https://api.github.com/users/saulshanabrook/repos", "events_url": "https://api.github.com/users/saulshanabrook/events{/privacy}", "received_events_url": "https://api.github.com/users/saulshanabrook/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-16T19:26:56Z", "updated_at": "2019-05-04T14:56:02Z", "closed_at": "2019-05-04T14:56:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to be able to infer types at runtime, based on the type annotations.\r\n\r\nFor example, if I define an `identity` function and call that with an `int`, I want to know that I will get back an int:\r\n\r\n```python\r\nT = typing.TypeVar(\"T\")\r\n\r\ndef identity(x: T) -> T:\r\n    ...\r\n\r\ny: int\r\nx = identity(y)\r\nreveal_type(x)\r\n# builtins.int*\r\n```\r\n\r\nSo, at runtime, I would like to be able to understand what type the `identity` function will return given some args. Something like this:\r\n\r\n```python\r\nx_type = compute_return_type(identity, int)\r\nassert x_type == int\r\n```\r\n\r\nI know that this is something that MyPy does internally, so I am wondering if you think it's advisable to try to import MyPy at runtime and use it's mechanism for type inference to write something like a `compute_return_type` function.\r\n\r\nIf not, do you know of any other projects trying to do this? \r\n\r\nI apologize if this isn't the right venue for this discussion, I am happy to close this and move it somewhere else if that is preferred. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/603", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/603/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/603/comments", "events_url": "https://api.github.com/repos/python/typing/issues/603/events", "html_url": "https://github.com/python/typing/issues/603", "id": 395783230, "node_id": "MDU6SXNzdWUzOTU3ODMyMzA=", "number": 603, "title": "Internal error on NamedTuple factory", "user": {"login": "lbenezriravin", "id": 25595051, "node_id": "MDQ6VXNlcjI1NTk1MDUx", "avatar_url": "https://avatars1.githubusercontent.com/u/25595051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbenezriravin", "html_url": "https://github.com/lbenezriravin", "followers_url": "https://api.github.com/users/lbenezriravin/followers", "following_url": "https://api.github.com/users/lbenezriravin/following{/other_user}", "gists_url": "https://api.github.com/users/lbenezriravin/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbenezriravin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbenezriravin/subscriptions", "organizations_url": "https://api.github.com/users/lbenezriravin/orgs", "repos_url": "https://api.github.com/users/lbenezriravin/repos", "events_url": "https://api.github.com/users/lbenezriravin/events{/privacy}", "received_events_url": "https://api.github.com/users/lbenezriravin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-04T01:38:14Z", "updated_at": "2019-01-04T09:39:05Z", "closed_at": "2019-01-04T09:39:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to create a factory following the pattern here:\r\nhttps://github.com/python/typing/issues/58#issuecomment-326240794\r\n\r\nBig thank you to the maintainers. This is a pretty trivial issue -- just thought I'd post it since mypy asked me so nicely :)\r\n\r\nEdit: fwiw, my workaround is to use a dataclass instead of a NamedTuple, and that works fine.\r\n\r\nEnvironment:\r\n```\r\n$ pipenv run python --version\r\nPython 3.7.1\r\n$ pipenv graph\r\nmypy==0.650\r\n  - mypy-extensions [required: >=0.4.0,<0.5.0, installed: 0.4.1]\r\n  - typed-ast [required: >=1.1.0,<1.2.0, installed: 1.1.1]\r\n```\r\n\r\nReproduce with:\r\n```\r\nfrom typing import NamedTuple, Type, TypeVar\r\n\r\nT = TypeVar('T', bound='TrivialClass')\r\n\r\nclass TrivialClass(NamedTuple):\r\n    foo: int\r\n\r\n    @classmethod\r\n    def from_str(cls: Type[T], foo: str) -> T:\r\n        return cls(int(foo))\r\n```\r\n\r\nResult:\r\n```\r\n$ pipenv run mypy ex.py --show-traceback\r\nex.py:10: error: INTERNAL ERROR -- please report a bug at https://github.com/python/mypy/issues version: 0.650\r\nTraceback (most recent call last):\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/bin/mypy\", line 11, in <module>\r\n    sys.exit(console_entry())\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/__main__.py\", line 7, in console_entry\r\n    main(None)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/main.py\", line 92, in main\r\n    res = build.build(sources, options, None, flush_errors, fscache)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/build.py\", line 156, in build\r\n    result = _build(sources, options, alt_lib_path, flush_errors, fscache)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/build.py\", line 206, in _build\r\n    graph = dispatch(sources, manager)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/build.py\", line 2232, in dispatch\r\n    process_graph(graph, manager)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/build.py\", line 2532, in process_graph\r\n    process_stale_scc(graph, scc, manager)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/build.py\", line 2655, in process_stale_scc\r\n    graph[id].type_check_first_pass()\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/build.py\", line 1791, in type_check_first_pass\r\n    self.type_checker().check_first_pass()\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checker.py\", line 282, in check_first_pass\r\n    self.accept(d)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checker.py\", line 393, in accept\r\n    stmt.accept(self)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/nodes.py\", line 848, in accept\r\n    return visitor.visit_class_def(self)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checker.py\", line 1536, in visit_class_def\r\n    self.accept(defn.defs)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checker.py\", line 393, in accept\r\n    stmt.accept(self)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/nodes.py\", line 913, in accept\r\n    return visitor.visit_block(self)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checker.py\", line 1688, in visit_block\r\n    self.accept(s)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checker.py\", line 393, in accept\r\n    stmt.accept(self)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/nodes.py\", line 691, in accept\r\n    return visitor.visit_decorator(self)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checker.py\", line 3018, in visit_decorator\r\n    self.check_func_item(e.func, name=e.func.name())\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checker.py\", line 770, in check_func_item\r\n    self.check_func_def(defn, typ, name)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checker.py\", line 934, in check_func_def\r\n    self.accept(item.body)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checker.py\", line 393, in accept\r\n    stmt.accept(self)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/nodes.py\", line 913, in accept\r\n    return visitor.visit_block(self)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checker.py\", line 1688, in visit_block\r\n    self.accept(s)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checker.py\", line 393, in accept\r\n    stmt.accept(self)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/nodes.py\", line 1046, in accept\r\n    return visitor.visit_return_stmt(self)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checker.py\", line 2627, in visit_return_stmt\r\n    self.check_return_stmt(s)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checker.py\", line 2660, in check_return_stmt\r\n    allow_none_return=allow_none_func_call)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checkexpr.py\", line 3067, in accept\r\n    typ = node.accept(self)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/nodes.py\", line 1421, in accept\r\n    return visitor.visit_call_expr(self)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checkexpr.py\", line 229, in visit_call_expr\r\n    return self.visit_call_expr_inner(e, allow_none_return=allow_none_return)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checkexpr.py\", line 296, in visit_call_expr_inner\r\n    ret_type = self.check_call_expr_with_callee_type(callee_type, e, fullname, object_type)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checkexpr.py\", line 633, in check_call_expr_with_callee_type\r\n    object_type=object_type)[0]\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checkexpr.py\", line 767, in check_call\r\n    callable_node, arg_messages)\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/checkexpr.py\", line 675, in check_call\r\n    if (callee.is_type_obj() and callee.type_object().is_abstract\r\n  File \"/home/user/.local/share/virtualenvs/myp-yC5yP7uq/lib/python3.7/site-packages/mypy/types.py\", line 834, in type_object\r\n    assert isinstance(ret, Instance)\r\nAssertionError: \r\nex.py:10: : note: use --pdb to drop into pdb\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/602", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/602/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/602/comments", "events_url": "https://api.github.com/repos/python/typing/issues/602/events", "html_url": "https://github.com/python/typing/issues/602", "id": 394058544, "node_id": "MDU6SXNzdWUzOTQwNTg1NDQ=", "number": 602, "title": "Trouble instantiating asyncio.Queue in a type definition ", "user": {"login": "Thirdegree", "id": 5179444, "node_id": "MDQ6VXNlcjUxNzk0NDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/5179444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thirdegree", "html_url": "https://github.com/Thirdegree", "followers_url": "https://api.github.com/users/Thirdegree/followers", "following_url": "https://api.github.com/users/Thirdegree/following{/other_user}", "gists_url": "https://api.github.com/users/Thirdegree/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thirdegree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thirdegree/subscriptions", "organizations_url": "https://api.github.com/users/Thirdegree/orgs", "repos_url": "https://api.github.com/users/Thirdegree/repos", "events_url": "https://api.github.com/users/Thirdegree/events{/privacy}", "received_events_url": "https://api.github.com/users/Thirdegree/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-26T00:37:39Z", "updated_at": "2018-12-27T12:29:12Z", "closed_at": "2018-12-27T12:29:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "When specifying the type normally, i.e.\r\n\r\n```python\r\nimport asyncio\r\na_var: asyncio.Queue[int] = asyncio.Queue()\r\n\r\n```\r\nEverything works as expected, mypy passes it fine, etc.\r\n\r\nHowever, if I want to do \r\n\r\n```python\r\nimport asyncio\r\n\r\nMyQueue = asyncio.Queue[int]\r\ndef myfunc(queue: MyQueue):\r\n    ...\r\n```\r\nor \r\n```python\r\nimport asyncio\r\n\r\ndef myfunc(queue: asyncio.Queue[int]):\r\n    ...\r\n```\r\nI get \r\n```\r\ndef myfunc(queue: asyncio.Queue[int])\r\nTypeError: 'type' object is not subscriptable\r\n```\r\n\r\nFor the second, quoting `'asyncio.Queue[int]'` works fine, but the the first mypy gives me \r\n```\r\nInvalid type \"module.MyQueue\"\r\n```\r\nWhat/is there a good way to achieve this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/598", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/598/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/598/comments", "events_url": "https://api.github.com/repos/python/typing/issues/598/events", "html_url": "https://github.com/python/typing/issues/598", "id": 388502349, "node_id": "MDU6SXNzdWUzODg1MDIzNDk=", "number": 598, "title": "Callable type is missing the __signature__ attribute", "user": {"login": "jrideout", "id": 197338, "node_id": "MDQ6VXNlcjE5NzMzOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/197338?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrideout", "html_url": "https://github.com/jrideout", "followers_url": "https://api.github.com/users/jrideout/followers", "following_url": "https://api.github.com/users/jrideout/following{/other_user}", "gists_url": "https://api.github.com/users/jrideout/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrideout/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrideout/subscriptions", "organizations_url": "https://api.github.com/users/jrideout/orgs", "repos_url": "https://api.github.com/users/jrideout/repos", "events_url": "https://api.github.com/users/jrideout/events{/privacy}", "received_events_url": "https://api.github.com/users/jrideout/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-07T04:33:33Z", "updated_at": "2018-12-07T09:57:39Z", "closed_at": "2018-12-07T09:57:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nfrom typing import Callable\r\n\r\ndef test(f: Callable) -> None:\r\n    f.__signature__ = ''\r\n\r\n```\r\n\r\nmypy returns:\r\n\r\n```\r\nerror: \"Callable[..., Any]\" has no attribute \"__signature__\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/597", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/597/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/597/comments", "events_url": "https://api.github.com/repos/python/typing/issues/597/events", "html_url": "https://github.com/python/typing/issues/597", "id": 387548174, "node_id": "MDU6SXNzdWUzODc1NDgxNzQ=", "number": 597, "title": "Classes available during type checking only", "user": {"login": "srittau", "id": 52799, "node_id": "MDQ6VXNlcjUyNzk5", "avatar_url": "https://avatars3.githubusercontent.com/u/52799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srittau", "html_url": "https://github.com/srittau", "followers_url": "https://api.github.com/users/srittau/followers", "following_url": "https://api.github.com/users/srittau/following{/other_user}", "gists_url": "https://api.github.com/users/srittau/gists{/gist_id}", "starred_url": "https://api.github.com/users/srittau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srittau/subscriptions", "organizations_url": "https://api.github.com/users/srittau/orgs", "repos_url": "https://api.github.com/users/srittau/repos", "events_url": "https://api.github.com/users/srittau/events{/privacy}", "received_events_url": "https://api.github.com/users/srittau/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2018-12-05T01:05:10Z", "updated_at": "2019-04-12T22:51:51Z", "closed_at": "2019-04-12T22:51:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This came up in srittau/type-stub-pep#21: Stubs may need to define classes that are not available at runtime. Best examples are the return types of `re.compile()` and `re.match()`, although those are handled specially in `typing`.\r\n\r\nOne solution we came up with is to add a class decorator to `typing`, for example `@type_check_only`. While type checking this is a no-op, during runtime it mangles the name of the class, so that it is not available in the module namespace under its original name.\r\n\r\nThis is mostly intended for type stubs, but could be used in implementations (starting in Python 3.8). We would add it to typeshed without a version check, so it can be used in stubs immediately. Alternatively, type checkers could special case the import. The documentation should also recommend to make the real class available in own code, instead of using the decorator,\r\n\r\n@rchen152 @solumin\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/595", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/595/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/595/comments", "events_url": "https://api.github.com/repos/python/typing/issues/595/events", "html_url": "https://github.com/python/typing/issues/595", "id": 385272129, "node_id": "MDU6SXNzdWUzODUyNzIxMjk=", "number": 595, "title": "typing Match  has no attribute \"group\"", "user": {"login": "zsluedem", "id": 13496262, "node_id": "MDQ6VXNlcjEzNDk2MjYy", "avatar_url": "https://avatars0.githubusercontent.com/u/13496262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zsluedem", "html_url": "https://github.com/zsluedem", "followers_url": "https://api.github.com/users/zsluedem/followers", "following_url": "https://api.github.com/users/zsluedem/following{/other_user}", "gists_url": "https://api.github.com/users/zsluedem/gists{/gist_id}", "starred_url": "https://api.github.com/users/zsluedem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zsluedem/subscriptions", "organizations_url": "https://api.github.com/users/zsluedem/orgs", "repos_url": "https://api.github.com/users/zsluedem/repos", "events_url": "https://api.github.com/users/zsluedem/events{/privacy}", "received_events_url": "https://api.github.com/users/zsluedem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-28T13:38:50Z", "updated_at": "2018-11-28T13:51:50Z", "closed_at": "2018-11-28T13:51:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "The codes in `a.py` : \r\n```python\r\nimport re\r\n\r\ndef sss(f) -> str:\r\n    a = re.search(\"kk\", f)\r\n\r\n    return a.group(1)\r\n```\r\n\r\nrun `mypy a.py`\r\nan error occured:\r\n`error: Item \"None\" of \"Optional[Match[Any]]\" has no attribute \"group\"`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/590", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/590/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/590/comments", "events_url": "https://api.github.com/repos/python/typing/issues/590/events", "html_url": "https://github.com/python/typing/issues/590", "id": 379461869, "node_id": "MDU6SXNzdWUzNzk0NjE4Njk=", "number": 590, "title": "Please join the typing-sig mailing list", "user": {"login": "gvanrossum", "id": 2894642, "node_id": "MDQ6VXNlcjI4OTQ2NDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2894642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gvanrossum", "html_url": "https://github.com/gvanrossum", "followers_url": "https://api.github.com/users/gvanrossum/followers", "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}", "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}", "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions", "organizations_url": "https://api.github.com/users/gvanrossum/orgs", "repos_url": "https://api.github.com/users/gvanrossum/repos", "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}", "received_events_url": "https://api.github.com/users/gvanrossum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-10T21:10:07Z", "updated_at": "2018-11-19T23:44:21Z", "closed_at": "2018-11-19T23:44:21Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "For people who want to contribute to the design of future static typing features for Python, there's now a mailing list: https://mail.python.org/mailman3/lists/typing-sig.python.org/ -- everyone is welcome, but this is not meant to be a list for questions about mypy.\r\n\r\n(Obviously I am abusing the tracker here. I'll close this issue in a week.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/589", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/589/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/589/comments", "events_url": "https://api.github.com/repos/python/typing/issues/589/events", "html_url": "https://github.com/python/typing/issues/589", "id": 374743621, "node_id": "MDU6SXNzdWUzNzQ3NDM2MjE=", "number": 589, "title": "Prefer flat namespace over using typing.io and typing.re", "user": {"login": "srittau", "id": 52799, "node_id": "MDQ6VXNlcjUyNzk5", "avatar_url": "https://avatars3.githubusercontent.com/u/52799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srittau", "html_url": "https://github.com/srittau", "followers_url": "https://api.github.com/users/srittau/followers", "following_url": "https://api.github.com/users/srittau/following{/other_user}", "gists_url": "https://api.github.com/users/srittau/gists{/gist_id}", "starred_url": "https://api.github.com/users/srittau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srittau/subscriptions", "organizations_url": "https://api.github.com/users/srittau/orgs", "repos_url": "https://api.github.com/users/srittau/repos", "events_url": "https://api.github.com/users/srittau/events{/privacy}", "received_events_url": "https://api.github.com/users/srittau/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-10-28T11:29:30Z", "updated_at": "2018-10-29T18:20:46Z", "closed_at": "2018-10-29T16:37:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The conclusion of python/typeshed#1652 says that importing from `typing` instead of `typing.io` and `typing.re` should be encouraged. That requires changes to PEP 484 as well the standard library documentation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/588", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/588/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/588/comments", "events_url": "https://api.github.com/repos/python/typing/issues/588/events", "html_url": "https://github.com/python/typing/issues/588", "id": 372916135, "node_id": "MDU6SXNzdWUzNzI5MTYxMzU=", "number": 588, "title": "NamedTuple with a TypeVar", "user": {"login": "mehdigmira", "id": 13655536, "node_id": "MDQ6VXNlcjEzNjU1NTM2", "avatar_url": "https://avatars3.githubusercontent.com/u/13655536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mehdigmira", "html_url": "https://github.com/mehdigmira", "followers_url": "https://api.github.com/users/mehdigmira/followers", "following_url": "https://api.github.com/users/mehdigmira/following{/other_user}", "gists_url": "https://api.github.com/users/mehdigmira/gists{/gist_id}", "starred_url": "https://api.github.com/users/mehdigmira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mehdigmira/subscriptions", "organizations_url": "https://api.github.com/users/mehdigmira/orgs", "repos_url": "https://api.github.com/users/mehdigmira/repos", "events_url": "https://api.github.com/users/mehdigmira/events{/privacy}", "received_events_url": "https://api.github.com/users/mehdigmira/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-23T10:03:28Z", "updated_at": "2018-10-23T17:08:00Z", "closed_at": "2018-10-23T17:08:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nThis is a question concerning NamedTuples. I'm using python 3.5.\r\n\r\nIs there a way to create a namedtuple that relies on a typevar ?\r\n\r\nI've tried this:\r\n\r\n```python\r\nfrom typing import Optional, TypeVar, NamedTuple, Dict, Tuple, Generic\r\n\r\nMetaDataT = TypeVar(\"MetaDataT\")\r\n\r\ndef f(m: MetaDataT):\r\n    State = NamedTuple(\"State\", [(\"metadata\", MetaDataT), (\"new\", bool), (\"update\", MetaDataT)])\r\n```\r\n\r\nBut mypy complains by saying: `error: 'MetaDataT' is a type variable and only valid in type context`\r\n\r\nSo I tried to declare `State` outside of the function such as:\r\n\r\n```python\r\nfrom typing import Optional, TypeVar, NamedTuple, Dict, Tuple, Generic\r\n\r\nMetaDataT = TypeVar(\"MetaDataT\")\r\n\r\nState = NamedTuple(\"State\", [(\"metadata\", MetaDataT), (\"new\", bool), (\"update\", MetaDataT)])\r\n```\r\n\r\nBut this time mypy complains by saying: `error: Invalid type \"debug.MetaDataT\"`\r\n\r\nI guess something like this coul work:\r\n\r\n```python\r\nclass S(NamedTuple, Generic[MetaDataT]):\r\n     pass\r\n```\r\n\r\nBut I'm using python 3.5 and this syntax is not supported. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/585", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/585/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/585/comments", "events_url": "https://api.github.com/repos/python/typing/issues/585/events", "html_url": "https://github.com/python/typing/issues/585", "id": 366131497, "node_id": "MDU6SXNzdWUzNjYxMzE0OTc=", "number": 585, "title": "Set lower bound on `TypeVar`s", "user": {"login": "TV4Fun", "id": 4702728, "node_id": "MDQ6VXNlcjQ3MDI3Mjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/4702728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TV4Fun", "html_url": "https://github.com/TV4Fun", "followers_url": "https://api.github.com/users/TV4Fun/followers", "following_url": "https://api.github.com/users/TV4Fun/following{/other_user}", "gists_url": "https://api.github.com/users/TV4Fun/gists{/gist_id}", "starred_url": "https://api.github.com/users/TV4Fun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TV4Fun/subscriptions", "organizations_url": "https://api.github.com/users/TV4Fun/orgs", "repos_url": "https://api.github.com/users/TV4Fun/repos", "events_url": "https://api.github.com/users/TV4Fun/events{/privacy}", "received_events_url": "https://api.github.com/users/TV4Fun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-03T00:40:46Z", "updated_at": "2018-10-03T00:46:55Z", "closed_at": "2018-10-03T00:46:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I know [this has been discussed before](https://github.com/python/typing/issues/59), and in the original discussion, lower bounds were not implemented as they were not considered especially useful, but I thought I would provide a good use case for them. I have a class which inherits from `Collection[_Type]` and, for a provided score function, keeps the top `k` scored items:\r\n\r\n```python\r\n_Type = TypeVar('_Type')\r\n_ComparableType = TypeVar('_ComparableType', bound=Comparable)\r\n_ScoreFuncType = Callable[[_Type], _ComparableType]\r\n\r\n\r\nclass KBestSelector(Collection[_Type]):\r\n    def __init__(self, k: int, score_func: _ScoreFuncType[_Type, _ComparableType] = hash) -> None: ...\r\n```\r\n`score_func` defaults to `hash`, but should be able to accept any `Callable` that can accept a `_Type`, which is to say, any `Callable` with one argument that is a supertype of `_Type`. Note that I can't just make `_Type` contravariant, as it is also used as the generic type for `KBestSelector`, which needs to be able to return iterators over `_Type`s. What I would like to do is specify something like this:\r\n```python\r\n_Type = TypeVar('_Type')\r\n_ComparableType = TypeVar('_ComparableType', bound=Comparable)\r\n_ArgType = TypeVar('_ArgType', lower_bound=_Type)\r\n_ScoreFuncType = Callable[[_ArgType], _ComparableType]\r\n\r\n\r\nclass KBestSelector(Collection[_Type]):\r\n    def __init__(self, k: int, score_func: _ScoreFuncType[_ArgType, _ComparableType] = hash) -> None: ...\r\n```\r\nOf course, this would also require [`TypeVar`s to be bound by other `TypeVar`s](https://github.com/python/mypy/issues/2756), but that is another discussion.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/579", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/579/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/579/comments", "events_url": "https://api.github.com/repos/python/typing/issues/579/events", "html_url": "https://github.com/python/typing/issues/579", "id": 354021058, "node_id": "MDU6SXNzdWUzNTQwMjEwNTg=", "number": 579, "title": "Runtime Protocols can't be tested against certain objects", "user": {"login": "erikwright", "id": 187063, "node_id": "MDQ6VXNlcjE4NzA2Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/187063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikwright", "html_url": "https://github.com/erikwright", "followers_url": "https://api.github.com/users/erikwright/followers", "following_url": "https://api.github.com/users/erikwright/following{/other_user}", "gists_url": "https://api.github.com/users/erikwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikwright/subscriptions", "organizations_url": "https://api.github.com/users/erikwright/orgs", "repos_url": "https://api.github.com/users/erikwright/repos", "events_url": "https://api.github.com/users/erikwright/events{/privacy}", "received_events_url": "https://api.github.com/users/erikwright/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-25T15:28:10Z", "updated_at": "2018-10-11T14:41:11Z", "closed_at": "2018-10-11T14:41:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I discovered this bug when I tried to scan a module containing PyTest fixtures for instances of a Protocol. `isinstance(fixture, protocol)` fails with `TypeError: argument of type 'getset_descriptor' is not iterable`.\r\n\r\nI haven't dug sufficiently into what `@pytest.fixture` does to upset the `isinstance` check, but here is a relatively simple repro:\r\n\r\n```python\r\nIn [1]: import typing_extensions\r\n\r\nIn [2]: import pytest\r\n\r\nIn [3]: @typing_extensions.runtime\r\n   ...: class MyProtocol(typing_extensions.Protocol):\r\n   ...:     member: str\r\n   ...:     \r\n\r\nIn [4]: @pytest.fixture\r\n   ...: def fix():\r\n   ...:     return 1\r\n   ...: \r\n\r\nIn [5]: class C:\r\n   ...:     def __init__(self):\r\n   ...:         self.member = 'value'\r\n   ...:         \r\n\r\nIn [6]: isinstance(C(), MyProtocol)\r\nOut[6]: True\r\n\r\nIn [7]: isinstance(fix, MyProtocol)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-7-f1a1c6b96adc> in <module>()\r\n----> 1 isinstance(fix, MyProtocol)\r\n\r\n/Users/erikwright/.pyenv/virtualenvs/crucible/3.6.5/lib/python3.6/site-packages/typing_extensions.py in __instancecheck__(self, instance)\r\n    891                         for attr in _get_protocol_attrs(self)):\r\n    892                     return True\r\n--> 893             return super(GenericMeta, self).__instancecheck__(instance)\r\n    894 \r\n    895         def __subclasscheck__(self, cls):\r\n\r\n/Users/erikwright/.pyenv/virtualenvs/crucible/3.6.5/lib/python3.6/abc.py in __instancecheck__(cls, instance)\r\n    191                 return False\r\n    192             # Fall back to the subclass check.\r\n--> 193             return cls.__subclasscheck__(subclass)\r\n    194         return any(cls.__subclasscheck__(c) for c in {subclass, subtype})\r\n    195 \r\n\r\n/Users/erikwright/.pyenv/virtualenvs/crucible/3.6.5/lib/python3.6/site-packages/typing_extensions.py in __subclasscheck__(self, cls)\r\n    908                     not _is_callable_members_only(self)):\r\n    909                 if sys._getframe(1).f_globals['__name__'] in ['abc', 'functools', 'typing']:\r\n--> 910                     return super(GenericMeta, self).__subclasscheck__(cls)\r\n    911                 raise TypeError(\"Protocols with non-method members\"\r\n    912                                 \" don't support issubclass()\")\r\n\r\n/Users/erikwright/.pyenv/virtualenvs/crucible/3.6.5/lib/python3.6/abc.py in __subclasscheck__(cls, subclass)\r\n    207             return False\r\n    208         # Check the subclass hook\r\n--> 209         ok = cls.__subclasshook__(subclass)\r\n    210         if ok is not NotImplemented:\r\n    211             assert isinstance(ok, bool)\r\n\r\n/Users/erikwright/.pyenv/virtualenvs/crucible/3.6.5/lib/python3.6/site-packages/typing_extensions.py in _proto_hook(other)\r\n    869                                 return NotImplemented\r\n    870                             break\r\n--> 871                         if (attr in getattr(base, '__annotations__', {}) and\r\n    872                                 isinstance(other, _ProtocolMeta) and other._is_protocol):\r\n    873                             break\r\n\r\nTypeError: argument of type 'getset_descriptor' is not iterable\r\n\r\nIn [8]: \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/578", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/578/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/578/comments", "events_url": "https://api.github.com/repos/python/typing/issues/578/events", "html_url": "https://github.com/python/typing/issues/578", "id": 348866408, "node_id": "MDU6SXNzdWUzNDg4NjY0MDg=", "number": 578, "title": "dataclasses.asdict() mishandles dataclass attributes that are instances of subclassed typing.NamedTuple", "user": {"login": "alexdelorenzo", "id": 3579286, "node_id": "MDQ6VXNlcjM1NzkyODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/3579286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexdelorenzo", "html_url": "https://github.com/alexdelorenzo", "followers_url": "https://api.github.com/users/alexdelorenzo/followers", "following_url": "https://api.github.com/users/alexdelorenzo/following{/other_user}", "gists_url": "https://api.github.com/users/alexdelorenzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexdelorenzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexdelorenzo/subscriptions", "organizations_url": "https://api.github.com/users/alexdelorenzo/orgs", "repos_url": "https://api.github.com/users/alexdelorenzo/repos", "events_url": "https://api.github.com/users/alexdelorenzo/events{/privacy}", "received_events_url": "https://api.github.com/users/alexdelorenzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-08T19:46:58Z", "updated_at": "2018-08-08T20:13:44Z", "closed_at": "2018-08-08T20:13:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Reproduced on Python 3.7.0 on Linux and macOS.\r\n\r\nTo reproduce:\r\n\r\n```python\r\nfrom typing import NamedTuple\r\nfrom dataclasses import dataclass, asdict\r\n\r\nclass NamedTupleAttribute(NamedTuple):\r\n    example: bool = True\r\n\r\n@dataclass\r\nclass Data:\r\n    attr1: bool\r\n    attr2: NamedTupleAttribute\r\n\r\ndata = Data(True, NamedTupleAttribute(example=True))\r\nnamedtuple_attr = asdict(data)['attr2']\r\nprint(type(namedtuple_attr.example))\r\n>>> generator\r\n```\r\n\r\nOne would expect that the printed type would be of type bool.\r\n\r\nCross referenced with python.org issue tracker: https://bugs.python.org/issue34363", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/577", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/577/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/577/comments", "events_url": "https://api.github.com/repos/python/typing/issues/577/events", "html_url": "https://github.com/python/typing/issues/577", "id": 346702540, "node_id": "MDU6SXNzdWUzNDY3MDI1NDA=", "number": 577, "title": "Abstract class methods?", "user": {"login": "sid-kap", "id": 6425077, "node_id": "MDQ6VXNlcjY0MjUwNzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6425077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sid-kap", "html_url": "https://github.com/sid-kap", "followers_url": "https://api.github.com/users/sid-kap/followers", "following_url": "https://api.github.com/users/sid-kap/following{/other_user}", "gists_url": "https://api.github.com/users/sid-kap/gists{/gist_id}", "starred_url": "https://api.github.com/users/sid-kap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sid-kap/subscriptions", "organizations_url": "https://api.github.com/users/sid-kap/orgs", "repos_url": "https://api.github.com/users/sid-kap/repos", "events_url": "https://api.github.com/users/sid-kap/events{/privacy}", "received_events_url": "https://api.github.com/users/sid-kap/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-08-01T17:49:16Z", "updated_at": "2018-08-02T00:27:27Z", "closed_at": "2018-08-01T19:09:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "This might not be the right place to put this, but is there any interest in adding a decorator for abstract class methods? (And potentially supporting it in MyPy?)\r\n\r\nCurrently, annotating a method with both `@abstractmethod` and `@classmethod` results in a runtime error. I see some suggestions on how to make this work on [StackOverflow](https://stackoverflow.com/questions/11217878/python-2-7-combine-abc-abstractmethod-and-classmethod), but of course those custom decorators would not be supported in MyPy.\r\n\r\nI would be interested in either making using both decorators work, or adding a new decorator.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/575", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/575/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/575/comments", "events_url": "https://api.github.com/repos/python/typing/issues/575/events", "html_url": "https://github.com/python/typing/issues/575", "id": 344758924, "node_id": "MDU6SXNzdWUzNDQ3NTg5MjQ=", "number": 575, "title": "bug: IO.closed should be a property rather than method", "user": {"login": "suutari", "id": 2368817, "node_id": "MDQ6VXNlcjIzNjg4MTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2368817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suutari", "html_url": "https://github.com/suutari", "followers_url": "https://api.github.com/users/suutari/followers", "following_url": "https://api.github.com/users/suutari/following{/other_user}", "gists_url": "https://api.github.com/users/suutari/gists{/gist_id}", "starred_url": "https://api.github.com/users/suutari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suutari/subscriptions", "organizations_url": "https://api.github.com/users/suutari/orgs", "repos_url": "https://api.github.com/users/suutari/repos", "events_url": "https://api.github.com/users/suutari/events{/privacy}", "received_events_url": "https://api.github.com/users/suutari/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-26T09:10:13Z", "updated_at": "2018-08-17T13:47:29Z", "closed_at": "2018-08-17T13:47:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently the `IO` base class has the following definition for the `closed` attribute: https://github.com/python/typing/blob/ff2084eb9ab5eea778d744c706e6a6aad05ea4bd/src/typing.py#L2272-L2274\r\n\r\nIt should be `@abstractproperty` instead.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/570", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/570/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/570/comments", "events_url": "https://api.github.com/repos/python/typing/issues/570/events", "html_url": "https://github.com/python/typing/issues/570", "id": 339178170, "node_id": "MDU6SXNzdWUzMzkxNzgxNzA=", "number": 570, "title": "How to test type compatibility in Python 3.7?", "user": {"login": "Kimi-Arthur", "id": 2446305, "node_id": "MDQ6VXNlcjI0NDYzMDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2446305?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimi-Arthur", "html_url": "https://github.com/Kimi-Arthur", "followers_url": "https://api.github.com/users/Kimi-Arthur/followers", "following_url": "https://api.github.com/users/Kimi-Arthur/following{/other_user}", "gists_url": "https://api.github.com/users/Kimi-Arthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimi-Arthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimi-Arthur/subscriptions", "organizations_url": "https://api.github.com/users/Kimi-Arthur/orgs", "repos_url": "https://api.github.com/users/Kimi-Arthur/repos", "events_url": "https://api.github.com/users/Kimi-Arthur/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimi-Arthur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-07T22:03:49Z", "updated_at": "2019-06-20T00:37:55Z", "closed_at": "2019-06-20T00:37:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "With the new fixes done in Python 3.7. We cannot test type compatibility like:\r\n\r\n```python\r\ntype_info = List[int]\r\nissubclass(type_info, list)\r\n\r\n# Or\r\n\r\nissubclass(type_info, List)\r\n```\r\n\r\nThis is expected as mentioned in [PEP560](https://www.python.org/dev/peps/pep-0560/). So I'm not saying I should continue to write code like that.\r\n\r\nBut since it's still useful to inspect whether type is a list or not (e.g. when you inspect the object's type hints and generate a default value for it), I wonder whether these is already a known way to test such compatibility.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/569", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/569/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/569/comments", "events_url": "https://api.github.com/repos/python/typing/issues/569/events", "html_url": "https://github.com/python/typing/issues/569", "id": 337286656, "node_id": "MDU6SXNzdWUzMzcyODY2NTY=", "number": 569, "title": "A different annotation for *args and **kwargs", "user": {"login": "tedstoychev", "id": 1466111, "node_id": "MDQ6VXNlcjE0NjYxMTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1466111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tedstoychev", "html_url": "https://github.com/tedstoychev", "followers_url": "https://api.github.com/users/tedstoychev/followers", "following_url": "https://api.github.com/users/tedstoychev/following{/other_user}", "gists_url": "https://api.github.com/users/tedstoychev/gists{/gist_id}", "starred_url": "https://api.github.com/users/tedstoychev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tedstoychev/subscriptions", "organizations_url": "https://api.github.com/users/tedstoychev/orgs", "repos_url": "https://api.github.com/users/tedstoychev/repos", "events_url": "https://api.github.com/users/tedstoychev/events{/privacy}", "received_events_url": "https://api.github.com/users/tedstoychev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-07-01T12:17:54Z", "updated_at": "2018-07-02T22:51:20Z", "closed_at": "2018-07-02T22:51:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to ask we annotate `*args` and `**kwargs` with container types instead of element types.\r\n\r\nContainer types are already used when packing values into a variable:\r\n```\r\nx: int\r\ny: int\r\nz: List[int]\r\nx, y, *z = [10, 20, 30, 40, 50]\r\n```\r\n\r\nHere is an example of how we would annotate `*args` in TypeScript:\r\n```\r\nfunction f(...args: Array<number>): void {}\r\n\r\nlet args: Array<number> = [10, 20, 30];\r\nf(...args);\r\n```\r\n\r\nHere is an example of how we would annotate `*args` in Python with a container type:\r\n```\r\ndef f(*args: Sequence[int]) -> None: ...\r\n\r\nargs1: List[int] = [10, 20, 30]\r\nargs2: Tuple[int, ...] = (10, 20, 30)\r\n\r\nf(*args1)\r\nf(*args2)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/568", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/568/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/568/comments", "events_url": "https://api.github.com/repos/python/typing/issues/568/events", "html_url": "https://github.com/python/typing/issues/568", "id": 335113896, "node_id": "MDU6SXNzdWUzMzUxMTM4OTY=", "number": 568, "title": "Python 3.6: Signature of {method} incompatible with super type {Class}", "user": {"login": "pmatias", "id": 1588271, "node_id": "MDQ6VXNlcjE1ODgyNzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1588271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmatias", "html_url": "https://github.com/pmatias", "followers_url": "https://api.github.com/users/pmatias/followers", "following_url": "https://api.github.com/users/pmatias/following{/other_user}", "gists_url": "https://api.github.com/users/pmatias/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmatias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmatias/subscriptions", "organizations_url": "https://api.github.com/users/pmatias/orgs", "repos_url": "https://api.github.com/users/pmatias/repos", "events_url": "https://api.github.com/users/pmatias/events{/privacy}", "received_events_url": "https://api.github.com/users/pmatias/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-23T16:36:47Z", "updated_at": "2018-06-24T15:13:05Z", "closed_at": "2018-06-24T15:12:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "While trying to update my code to be PEP-484 compliant (I'm using `mypy` 0.610) I've ran into the following report:\r\n\r\n`$ mypy mymodule --strict-optional --ignore-missing-imports --disallow-untyped-calls --python-version 3.6`\r\n\r\n`myfile.py:154: error: Signature of \"deliver\" incompatible with supertype \"MyClass\"`\r\n\r\nMyClass:\r\n```\r\nfrom abc import abstractmethod\r\n\r\nfrom typing import Any\r\n\r\n\r\nclass MyClass(object):\r\n\r\n    @abstractmethod\r\n    def deliver(self, *args: Any, **kwargs: Any) -> bool:\r\n        raise NotImplementedError\r\n```\r\n\r\nmyfile.py:\r\n```\r\nclass MyImplementation(MyClass):\r\n\r\n...\r\n\r\n    def deliver(self, source_path: str,\r\n                dest_branches: list,\r\n                commit_msg: str = None,\r\n                exclude_files: list = None) -> bool:\r\n\r\n...\r\n\r\nreturn True\r\n```\r\n\r\nI'm definitely doing something wrong here, but I can't quite understand what :)\r\n\r\nAny pointers would be much appreciated.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/563", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/563/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/563/comments", "events_url": "https://api.github.com/repos/python/typing/issues/563/events", "html_url": "https://github.com/python/typing/issues/563", "id": 332594142, "node_id": "MDU6SXNzdWUzMzI1OTQxNDI=", "number": 563, "title": "Enhancement: Make typing.DeafultDict work like typing.NamedTuple", "user": {"login": "gappleto97", "id": 1554778, "node_id": "MDQ6VXNlcjE1NTQ3Nzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1554778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gappleto97", "html_url": "https://github.com/gappleto97", "followers_url": "https://api.github.com/users/gappleto97/followers", "following_url": "https://api.github.com/users/gappleto97/following{/other_user}", "gists_url": "https://api.github.com/users/gappleto97/gists{/gist_id}", "starred_url": "https://api.github.com/users/gappleto97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gappleto97/subscriptions", "organizations_url": "https://api.github.com/users/gappleto97/orgs", "repos_url": "https://api.github.com/users/gappleto97/repos", "events_url": "https://api.github.com/users/gappleto97/events{/privacy}", "received_events_url": "https://api.github.com/users/gappleto97/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-14T23:05:50Z", "updated_at": "2018-06-15T01:52:27Z", "closed_at": "2018-06-15T01:52:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice if you could have a tuple of types at the end, like you can with a NamedTuple. Something like:\r\n\r\n```python\r\nfrom typing import DefaultDict\r\n\r\na = DefaultDict(list, (str, List[int]))\r\na['example'].append(3)\r\n```\r\n\r\nThis both reduces the amount of code one needs to write, and makes it semantically similar to other parts of the module", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/559", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/559/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/559/comments", "events_url": "https://api.github.com/repos/python/typing/issues/559/events", "html_url": "https://github.com/python/typing/issues/559", "id": 321507688, "node_id": "MDU6SXNzdWUzMjE1MDc2ODg=", "number": 559, "title": "Issues with caching of equivalent but not identical generic types", "user": {"login": "mitar", "id": 585279, "node_id": "MDQ6VXNlcjU4NTI3OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitar", "html_url": "https://github.com/mitar", "followers_url": "https://api.github.com/users/mitar/followers", "following_url": "https://api.github.com/users/mitar/following{/other_user}", "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitar/subscriptions", "organizations_url": "https://api.github.com/users/mitar/orgs", "repos_url": "https://api.github.com/users/mitar/repos", "events_url": "https://api.github.com/users/mitar/events{/privacy}", "received_events_url": "https://api.github.com/users/mitar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-09T10:01:19Z", "updated_at": "2018-05-09T22:56:23Z", "closed_at": "2018-05-09T22:56:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is as expected:\r\n\r\n```python\r\n>>> from typing import *\r\n>>> Union[int, None] is Union[None, int]\r\nFalse\r\n>>> Union[int, None] == Union[None, int]\r\nTrue\r\n```\r\n\r\nWhen order is not the same, types are equivalent, but not identical.\r\n\r\nBut, when used inside generic, then a surprise happens:\r\n\r\n```python\r\n>>> from typing import *\r\n>>> List[Union[int, None]] is List[Union[None, int]]\r\nTrue\r\n>>> List[Union[int, None]] == List[Union[None, int]]\r\nTrue\r\n```\r\n\r\nThe issue is that the first instance of `List[Union[int, None]]` is cached and returned for `List[Union[None, int]]` as well. So:\r\n\r\n```python\r\n>>> from typing import *\r\n>>> A = Union[int, None]\r\n>>> B = Union[None, int]\r\n>>> List[A]\r\ntyping.List[typing.Union[int, NoneType]]\r\n>>> List[B]\r\ntyping.List[typing.Union[int, NoneType]]\r\n>>> assert List[B].__args__[0] is B\r\nAssertionError\r\n```\r\n\r\nI think caching should cache only identical generic types, not equivalent generic types.\r\n\r\nIn our case this is a problem because we inspect types and generate JSON description of types. And now it is happening that JSON descriptions are changing (because order of values in `Union` is changing) depending on the order of code loading and which generic type is loaded first during runtime.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/556", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/556/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/556/comments", "events_url": "https://api.github.com/repos/python/typing/issues/556/events", "html_url": "https://github.com/python/typing/issues/556", "id": 318715997, "node_id": "MDU6SXNzdWUzMTg3MTU5OTc=", "number": 556, "title": "MyPy failing to pick up files correctly", "user": {"login": "scherrey", "id": 878591, "node_id": "MDQ6VXNlcjg3ODU5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/878591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scherrey", "html_url": "https://github.com/scherrey", "followers_url": "https://api.github.com/users/scherrey/followers", "following_url": "https://api.github.com/users/scherrey/following{/other_user}", "gists_url": "https://api.github.com/users/scherrey/gists{/gist_id}", "starred_url": "https://api.github.com/users/scherrey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scherrey/subscriptions", "organizations_url": "https://api.github.com/users/scherrey/orgs", "repos_url": "https://api.github.com/users/scherrey/repos", "events_url": "https://api.github.com/users/scherrey/events{/privacy}", "received_events_url": "https://api.github.com/users/scherrey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-29T13:12:20Z", "updated_at": "2020-04-26T12:22:09Z", "closed_at": "2019-06-20T00:45:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running mypy 0.590 using python 3.6.3 under Kubuntu linux 14.04 LTS.\r\n\r\n\"mypy --ignore-missing-imports -v .\" returns \". is not a valid Python package name\".\r\n\r\nWild cards are failing as well:\r\n```bash\r\n(grab_listing) scherrey@satriani:~/projects/property/elmspace/grab_listing$ mypy --ignore-missing-imports -v *.py \r\n\r\nLOG:  Mypy version 0.590\r\nLOG:  Loaded graph with 69 nodes (0.020 sec)\r\nLOG:  Found 58 SCCs; largest has 8 nodes\r\nLOG:  58 fresh SCCs (69 nodes) left in queue (and will remain unprocessed)\r\nLOG:  Build finished in 0.022 seconds with 0 modules, and 0 errors\r\n(grab_listing) scherrey@satriani:~/projects/property/elmspace/grab_listing$ mypy --ignore-missing-imports -v *.py tests\r\n\r\nLOG:  Mypy version 0.590\r\nLOG:  Could not load cache for tests: could not find .mypy_cache/3.6/tests/__init__.meta.json\r\nLOG:  Metadata not found for tests\r\nLOG:  Parsing tests/__init__.py (tests)\r\nLOG:  Could not load cache for tests.test_grab_listing: could not find .mypy_cache/3.6/tests/test_grab_listing.meta.json\r\nLOG:  Metadata not found for tests.test_grab_listing\r\nLOG:  Parsing tests/test_grab_listing.py (tests.test_grab_listing)\r\nLOG:  Could not load cache for tests.test_listing_server: could not find .mypy_cache/3.6/tests/test_listing_server.meta.json\r\nLOG:  Metadata not found for tests.test_listing_server\r\nLOG:  Parsing tests/test_listing_server.py (tests.test_listing_server)\r\nLOG:  Metadata abandoned for .grab_listing: attributes are missing\r\nLOG:  Metadata not found for .grab_listing\r\nLOG:  Parsing /home/scherrey/projects/property/elmspace/grab_listing/grab_listing.py (.grab_listing)\r\nLOG:  Metadata abandoned for .listing_server: attributes are missing\r\nLOG:  Metadata not found for .listing_server\r\nLOG:  Parsing /home/scherrey/projects/property/elmspace/grab_listing/listing_server.py (.listing_server)\r\nLOG:  Build finished in 0.009 seconds with 5 modules, and 0 errors\r\nTraceback (most recent call last):\r\n  File \"/home/scherrey/develop/virtualenvs/grab_listing/bin/mypy\", line 11, in <module>\r\n    sys.exit(console_entry())\r\n  File \"/home/scherrey/develop/virtualenvs/grab_listing/lib/python3.6/site-packages/mypy/__main__.py\", line 7, in console_entry\r\n    main(None)\r\n  File \"/home/scherrey/develop/virtualenvs/grab_listing/lib/python3.6/site-packages/mypy/main.py\", line 85, in main\r\n    type_check_only(sources, bin_dir, options, flush_errors)\r\n  File \"/home/scherrey/develop/virtualenvs/grab_listing/lib/python3.6/site-packages/mypy/main.py\", line 134, in type_check_only\r\n    flush_errors=flush_errors)\r\n  File \"/home/scherrey/develop/virtualenvs/grab_listing/lib/python3.6/site-packages/mypy/build.py\", line 183, in build\r\n    flush_errors, fscache)\r\n  File \"/home/scherrey/develop/virtualenvs/grab_listing/lib/python3.6/site-packages/mypy/build.py\", line 268, in _build\r\n    graph = dispatch(sources, manager)\r\n  File \"/home/scherrey/develop/virtualenvs/grab_listing/lib/python3.6/site-packages/mypy/build.py\", line 2156, in dispatch\r\n    graph = load_graph(sources, manager)\r\n  File \"/home/scherrey/develop/virtualenvs/grab_listing/lib/python3.6/site-packages/mypy/build.py\", line 2318, in load_graph\r\n    ancestor_for=st)\r\n  File \"/home/scherrey/develop/virtualenvs/grab_listing/lib/python3.6/site-packages/mypy/build.py\", line 1519, in __init__\r\n    assert id or path or source is not None, \"Neither id, path nor source given\"\r\nAssertionError: Neither id, path nor source given\r\n(grab_listing) scherrey@satriani:~/projects/property/elmspace/grab_listing$\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/554", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/554/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/554/comments", "events_url": "https://api.github.com/repos/python/typing/issues/554/events", "html_url": "https://github.com/python/typing/issues/554", "id": 316654685, "node_id": "MDU6SXNzdWUzMTY2NTQ2ODU=", "number": 554, "title": "Support for Range Types?", "user": {"login": "chang", "id": 16146623, "node_id": "MDQ6VXNlcjE2MTQ2NjIz", "avatar_url": "https://avatars0.githubusercontent.com/u/16146623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chang", "html_url": "https://github.com/chang", "followers_url": "https://api.github.com/users/chang/followers", "following_url": "https://api.github.com/users/chang/following{/other_user}", "gists_url": "https://api.github.com/users/chang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chang/subscriptions", "organizations_url": "https://api.github.com/users/chang/orgs", "repos_url": "https://api.github.com/users/chang/repos", "events_url": "https://api.github.com/users/chang/events{/privacy}", "received_events_url": "https://api.github.com/users/chang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-23T04:03:03Z", "updated_at": "2019-07-10T14:57:00Z", "closed_at": "2019-07-10T14:57:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to define a range of integers as a type? Sometimes we might want to constrain an input to a certain range of values.\r\n\r\nFor example, a US ZIP code must be a 5 digit value. I didn't know this before to opening the issue, but apparently the lowest ZIP code is in Holtsville, New York (00501) and the highest ZIP code is in Ketchikan, Alaska (99950). It would be great if we could define a type like this:\r\n\r\n```python\r\nfrom typing import RangeType, Tuple\r\n\r\nZipCode = RangeType(low=501, high=99950):\r\n\r\ndef get_gps_coordinate(code: ZipCode) -> Tuple[float, float]:\r\n    ...\r\n```\r\n\r\nAnother language that has range types is Ada, which lets you define range types like so:\r\n```ada\r\ntype ZipCode is range 00501 .. 99950;\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/553", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/553/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/553/comments", "events_url": "https://api.github.com/repos/python/typing/issues/553/events", "html_url": "https://github.com/python/typing/issues/553", "id": 316214350, "node_id": "MDU6SXNzdWUzMTYyMTQzNTA=", "number": 553, "title": "TYPE_CHECKING use case in annotation error ", "user": {"login": "zsluedem", "id": 13496262, "node_id": "MDQ6VXNlcjEzNDk2MjYy", "avatar_url": "https://avatars0.githubusercontent.com/u/13496262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zsluedem", "html_url": "https://github.com/zsluedem", "followers_url": "https://api.github.com/users/zsluedem/followers", "following_url": "https://api.github.com/users/zsluedem/following{/other_user}", "gists_url": "https://api.github.com/users/zsluedem/gists{/gist_id}", "starred_url": "https://api.github.com/users/zsluedem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zsluedem/subscriptions", "organizations_url": "https://api.github.com/users/zsluedem/orgs", "repos_url": "https://api.github.com/users/zsluedem/repos", "events_url": "https://api.github.com/users/zsluedem/events{/privacy}", "received_events_url": "https://api.github.com/users/zsluedem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-20T10:28:11Z", "updated_at": "2019-07-17T09:31:42Z", "closed_at": "2018-04-20T11:03:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "based on https://github.com/python/typing/issues/105#issuecomment-382969250\r\nHere is the situation.\r\nI have a `a.py`:\r\n```\r\nclass A():\r\n    pass\r\n```\r\n\r\nAnd I have a `b.py`:\r\n```\r\nfrom typing import TYPE_CHECKING\r\n\r\nif TYPE_CHECKING:\r\n    from a import A\r\n    \r\ndef foo(a:A):\r\n    pass\r\n```\r\n\r\nThe directory tree is like : \r\n```\r\n.\r\n\u251c\u2500\u2500 __init__.py\r\n\u251c\u2500\u2500 a.py\r\n\u2514\u2500\u2500 b.py\r\n```\r\n\r\nWhen I try to run `b.py`,I got the error below:\r\n```\r\n$ python3 ./b.py\r\nTraceback (most recent call last):\r\n  File \"/Users/will/work/finance/untitled/b.py\", line 7, in <module>\r\n    def foo(a:A):\r\nNameError: name 'A' is not defined\r\n\r\n```\r\n\r\nI am not sure if I use it right.\r\n\r\nOS: MacOS 10.13.3\r\nPython version: 3.6.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/551", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/551/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/551/comments", "events_url": "https://api.github.com/repos/python/typing/issues/551/events", "html_url": "https://github.com/python/typing/issues/551", "id": 311917156, "node_id": "MDU6SXNzdWUzMTE5MTcxNTY=", "number": 551, "title": "Return type based on input", "user": {"login": "beruic", "id": 724716, "node_id": "MDQ6VXNlcjcyNDcxNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/724716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beruic", "html_url": "https://github.com/beruic", "followers_url": "https://api.github.com/users/beruic/followers", "following_url": "https://api.github.com/users/beruic/following{/other_user}", "gists_url": "https://api.github.com/users/beruic/gists{/gist_id}", "starred_url": "https://api.github.com/users/beruic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beruic/subscriptions", "organizations_url": "https://api.github.com/users/beruic/orgs", "repos_url": "https://api.github.com/users/beruic/repos", "events_url": "https://api.github.com/users/beruic/events{/privacy}", "received_events_url": "https://api.github.com/users/beruic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-06T09:58:22Z", "updated_at": "2018-04-09T08:23:24Z", "closed_at": "2018-04-09T08:23:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have some functions that follow the pattern\r\n\r\n    def parse(data: str, return_type: Type):\r\n        ....\r\n\r\nHow do I annotate the return type to be the one provided in the `return_type` argument?\r\n\r\nAs far as I can see this is not possible as all, and I therefore report this issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/550", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/550/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/550/comments", "events_url": "https://api.github.com/repos/python/typing/issues/550/events", "html_url": "https://github.com/python/typing/issues/550", "id": 310930369, "node_id": "MDU6SXNzdWUzMTA5MzAzNjk=", "number": 550, "title": "Moving Protocols from typing_extensions into typing", "user": {"login": "gvanrossum", "id": 2894642, "node_id": "MDQ6VXNlcjI4OTQ2NDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2894642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gvanrossum", "html_url": "https://github.com/gvanrossum", "followers_url": "https://api.github.com/users/gvanrossum/followers", "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}", "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}", "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions", "organizations_url": "https://api.github.com/users/gvanrossum/orgs", "repos_url": "https://api.github.com/users/gvanrossum/repos", "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}", "received_events_url": "https://api.github.com/users/gvanrossum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2018-04-03T17:37:00Z", "updated_at": "2019-06-20T00:31:58Z", "closed_at": "2019-06-20T00:31:58Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This is a placeholder issue so we can have the discussion from #549 outside the context of a specific PR. Relevant comments:\r\n\r\n- https://github.com/python/typing/pull/549#issue-178886712\r\n- https://github.com/python/typing/pull/549#issuecomment-378001736\r\n- https://github.com/python/typing/pull/549#issuecomment-378024927\r\n\r\n@ilevkivskyi, if you don't mind splitting off the debate, I will write my response to the last bullet below here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/547", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/547/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/547/comments", "events_url": "https://api.github.com/repos/python/typing/issues/547/events", "html_url": "https://github.com/python/typing/issues/547", "id": 309500531, "node_id": "MDU6SXNzdWUzMDk1MDA1MzE=", "number": 547, "title": "On Python 2, typing registers bytearray as a subclass of collections.Sequence", "user": {"login": "li-dan", "id": 26881569, "node_id": "MDQ6VXNlcjI2ODgxNTY5", "avatar_url": "https://avatars1.githubusercontent.com/u/26881569?v=4", "gravatar_id": "", "url": "https://api.github.com/users/li-dan", "html_url": "https://github.com/li-dan", "followers_url": "https://api.github.com/users/li-dan/followers", "following_url": "https://api.github.com/users/li-dan/following{/other_user}", "gists_url": "https://api.github.com/users/li-dan/gists{/gist_id}", "starred_url": "https://api.github.com/users/li-dan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/li-dan/subscriptions", "organizations_url": "https://api.github.com/users/li-dan/orgs", "repos_url": "https://api.github.com/users/li-dan/repos", "events_url": "https://api.github.com/users/li-dan/events{/privacy}", "received_events_url": "https://api.github.com/users/li-dan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-03-28T19:31:29Z", "updated_at": "2018-03-28T22:26:07Z", "closed_at": "2018-03-28T22:26:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "It's surprising that importing typing has this side effect:\r\n\r\n```\r\n$ python2\r\nPython 2.7.14 (default, Nov  2 2017, 17:39:03)\r\n[GCC 5.3.1 20160406 (Red Hat 5.3.1-6)] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import collections\r\n>>> issubclass(bytearray, collections.Sequence)\r\nFalse\r\n>>> import typing\r\n>>> issubclass(bytearray, collections.Sequence)\r\nTrue\r\n```\r\n\r\nI think this is because `bytearray` is registered as a subclass of `ByteString`: https://github.com/python/typing/blob/fcb6f4c31bcc30a26d8c9a63579d9179db3cebff/python2/typing.py#L1795", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/546", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/546/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/546/comments", "events_url": "https://api.github.com/repos/python/typing/issues/546/events", "html_url": "https://github.com/python/typing/issues/546", "id": 309363491, "node_id": "MDU6SXNzdWUzMDkzNjM0OTE=", "number": 546, "title": "Write docs", "user": {"login": "KOLANICH", "id": 240344, "node_id": "MDQ6VXNlcjI0MDM0NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/240344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KOLANICH", "html_url": "https://github.com/KOLANICH", "followers_url": "https://api.github.com/users/KOLANICH/followers", "following_url": "https://api.github.com/users/KOLANICH/following{/other_user}", "gists_url": "https://api.github.com/users/KOLANICH/gists{/gist_id}", "starred_url": "https://api.github.com/users/KOLANICH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KOLANICH/subscriptions", "organizations_url": "https://api.github.com/users/KOLANICH/orgs", "repos_url": "https://api.github.com/users/KOLANICH/repos", "events_url": "https://api.github.com/users/KOLANICH/events{/privacy}", "received_events_url": "https://api.github.com/users/KOLANICH/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-28T13:19:13Z", "updated_at": "2018-03-28T13:30:47Z", "closed_at": "2018-03-28T13:30:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello. I have tried to create a generic, marking an argument with a flag (java `final` should look like\r\n```python\r\ndef func(a:Final[int]):\r\n   pass\r\n```\r\n, it has no python counterpart, it's just for IPython shell for more clarity), but failed: I constantly get various errors and I surely don't want to dig deeply into this code. Could you create the docs on how to create own generic type annotation classes. And why they are classes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/544", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/544/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/544/comments", "events_url": "https://api.github.com/repos/python/typing/issues/544/events", "html_url": "https://github.com/python/typing/issues/544", "id": 306219212, "node_id": "MDU6SXNzdWUzMDYyMTkyMTI=", "number": 544, "title": "Unsound generic function", "user": {"login": "nilehmann", "id": 2400776, "node_id": "MDQ6VXNlcjI0MDA3NzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2400776?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nilehmann", "html_url": "https://github.com/nilehmann", "followers_url": "https://api.github.com/users/nilehmann/followers", "following_url": "https://api.github.com/users/nilehmann/following{/other_user}", "gists_url": "https://api.github.com/users/nilehmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nilehmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nilehmann/subscriptions", "organizations_url": "https://api.github.com/users/nilehmann/orgs", "repos_url": "https://api.github.com/users/nilehmann/repos", "events_url": "https://api.github.com/users/nilehmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nilehmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-03-18T07:25:58Z", "updated_at": "2018-03-19T11:03:17Z", "closed_at": "2018-03-18T15:16:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was playing with mypy for the first time and realize that it allows me to write the following unsound code.\r\n\r\n```python\r\nfrom typing import List, TypeVar\r\n\r\nT = TypeVar(\"T\")\r\n\r\ndef listify(obj: T) -> List[T]:\r\n    if isinstance(obj, list):\r\n        return obj\r\n    return [obj]\r\n\r\nlistify([1])[0].append(1)\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/541", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/541/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/541/comments", "events_url": "https://api.github.com/repos/python/typing/issues/541/events", "html_url": "https://github.com/python/typing/issues/541", "id": 302592487, "node_id": "MDU6SXNzdWUzMDI1OTI0ODc=", "number": 541, "title": "divmod does not support overloaded arithmetic (e.g., with __divmod__)", "user": {"login": "shoyer", "id": 1217238, "node_id": "MDQ6VXNlcjEyMTcyMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shoyer", "html_url": "https://github.com/shoyer", "followers_url": "https://api.github.com/users/shoyer/followers", "following_url": "https://api.github.com/users/shoyer/following{/other_user}", "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions", "organizations_url": "https://api.github.com/users/shoyer/orgs", "repos_url": "https://api.github.com/users/shoyer/repos", "events_url": "https://api.github.com/users/shoyer/events{/privacy}", "received_events_url": "https://api.github.com/users/shoyer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-06T07:32:32Z", "updated_at": "2018-03-06T16:56:38Z", "closed_at": "2018-03-06T16:56:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "It is only defined on int and float:\r\nhttps://github.com/python/typeshed/blob/50c71883000f14ae0bfe622906d3fc4ba1e29875/stdlib/3/builtins.pyi#L804-L805\r\n\r\nThis came up in typing NumPy, which also supports `divmod()` on numpy arrays.\r\n\r\nI doubt it's really worth adding a `SupportsDivmod` class to typing, so let's save this until we have support for custom protocols?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/540", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/540/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/540/comments", "events_url": "https://api.github.com/repos/python/typing/issues/540/events", "html_url": "https://github.com/python/typing/issues/540", "id": 301132488, "node_id": "MDU6SXNzdWUzMDExMzI0ODg=", "number": 540, "title": "Missing SupportsStr", "user": {"login": "OJFord", "id": 3946014, "node_id": "MDQ6VXNlcjM5NDYwMTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/3946014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OJFord", "html_url": "https://github.com/OJFord", "followers_url": "https://api.github.com/users/OJFord/followers", "following_url": "https://api.github.com/users/OJFord/following{/other_user}", "gists_url": "https://api.github.com/users/OJFord/gists{/gist_id}", "starred_url": "https://api.github.com/users/OJFord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OJFord/subscriptions", "organizations_url": "https://api.github.com/users/OJFord/orgs", "repos_url": "https://api.github.com/users/OJFord/repos", "events_url": "https://api.github.com/users/OJFord/events{/privacy}", "received_events_url": "https://api.github.com/users/OJFord/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-28T18:27:08Z", "updated_at": "2018-02-28T22:19:43Z", "closed_at": "2018-02-28T22:19:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is the lack of a `SupportsStr` protocol just an oversight, or due to some technical limitation?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/539", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/539/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/539/comments", "events_url": "https://api.github.com/repos/python/typing/issues/539/events", "html_url": "https://github.com/python/typing/issues/539", "id": 300601276, "node_id": "MDU6SXNzdWUzMDA2MDEyNzY=", "number": 539, "title": "Correct way to use typing when a value may be cast", "user": {"login": "kura", "id": 109507, "node_id": "MDQ6VXNlcjEwOTUwNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/109507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kura", "html_url": "https://github.com/kura", "followers_url": "https://api.github.com/users/kura/followers", "following_url": "https://api.github.com/users/kura/following{/other_user}", "gists_url": "https://api.github.com/users/kura/gists{/gist_id}", "starred_url": "https://api.github.com/users/kura/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kura/subscriptions", "organizations_url": "https://api.github.com/users/kura/orgs", "repos_url": "https://api.github.com/users/kura/repos", "events_url": "https://api.github.com/users/kura/events{/privacy}", "received_events_url": "https://api.github.com/users/kura/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-27T11:55:39Z", "updated_at": "2018-03-01T14:09:19Z", "closed_at": "2018-02-27T16:14:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need the ability to read values from a config file where the type may be interpreted as a string when the value is going to be cast to an int.\r\n\r\nWhat would the correct way of doing this be?\r\n\r\nCurrently I use a setter to set the value in to the class and cast it.\r\n\r\n```python\r\nclass A:\r\n\r\n\t...\r\n\r\n\t# read in data from the config file\r\n\t# start setting var -> value using the setters.\r\n\r\n\t...\r\n\r\n\t_timeout = 0  # type: int\r\n\r\n\t@property\r\n\tdef timeout(self) -> int:\r\n\t\treturn self._timeout\r\n\r\n\t@timeout.setter\r\n\tdef timeout(self, timeout: int) -> None:\r\n\t\tself._timeout = int(timeout)\r\n```\r\n\r\nI'm pretty sure this isn't correct, but I'm unsure how exactly to change the typing in the setter signature to allow for a string that will be casted.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/536", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/536/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/536/comments", "events_url": "https://api.github.com/repos/python/typing/issues/536/events", "html_url": "https://github.com/python/typing/issues/536", "id": 292603850, "node_id": "MDU6SXNzdWUyOTI2MDM4NTA=", "number": 536, "title": "Do not simplify Union at runtime?", "user": {"login": "ilevkivskyi", "id": 12005495, "node_id": "MDQ6VXNlcjEyMDA1NDk1", "avatar_url": "https://avatars1.githubusercontent.com/u/12005495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilevkivskyi", "html_url": "https://github.com/ilevkivskyi", "followers_url": "https://api.github.com/users/ilevkivskyi/followers", "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}", "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions", "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs", "repos_url": "https://api.github.com/users/ilevkivskyi/repos", "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}", "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-01-29T23:50:52Z", "updated_at": "2018-05-18T23:00:39Z", "closed_at": "2018-05-18T23:00:39Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Currently unions are simplified at runtime, for example:\r\n```python\r\nclass B: ...\r\nclass C(B): ...\r\nassert Union[C, B] is B\r\n```\r\nAlso they are flattened, for example `Union[A, Union[B, C]]` evaluates to `Union[A, B, C]`. There are however some downsides:\r\n* Simplification of unions is a concept related to static types, applying it at runtime might blur the distinction between static types and runtime classes.\r\n* Implementation of this feature had bugs, all of them related to the fact that `issublcass` is only applicable to proper classes, and it is not always easy to detect those beforehand.\r\n* This has some (although minor) runtime costs.\r\n\r\nOn the positive side:\r\n* This still teaches people how unions work with subclasses\r\n* It may be too late to change this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/534", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/534/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/534/comments", "events_url": "https://api.github.com/repos/python/typing/issues/534/events", "html_url": "https://github.com/python/typing/issues/534", "id": 291918481, "node_id": "MDU6SXNzdWUyOTE5MTg0ODE=", "number": 534, "title": "Need a solution for long lines in Python 2 ", "user": {"login": "stephenfin", "id": 1690835, "node_id": "MDQ6VXNlcjE2OTA4MzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1690835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stephenfin", "html_url": "https://github.com/stephenfin", "followers_url": "https://api.github.com/users/stephenfin/followers", "following_url": "https://api.github.com/users/stephenfin/following{/other_user}", "gists_url": "https://api.github.com/users/stephenfin/gists{/gist_id}", "starred_url": "https://api.github.com/users/stephenfin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stephenfin/subscriptions", "organizations_url": "https://api.github.com/users/stephenfin/orgs", "repos_url": "https://api.github.com/users/stephenfin/repos", "events_url": "https://api.github.com/users/stephenfin/events{/privacy}", "received_events_url": "https://api.github.com/users/stephenfin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-26T14:32:16Z", "updated_at": "2019-03-03T23:38:56Z", "closed_at": "2019-03-03T23:38:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a continuation of #186 and, like that change, has also been reported to [mypy](python/mypy#4511). I propose reading onto the following line for comments:\r\n\r\n```python\r\nimport collections\r\nfrom typing import DefaultDict, List\r\n\r\n\r\ndef test(pools):\r\n    really_long_attribute = collections.defaultdict(list)\r\n    # type: DefaultDict[str, List[str]]\r\n    for pool in pools:\r\n        pass  # meaningful stuff in here\r\n```\r\n\r\nThis seems clear enough and should require minimal changes to the parser. I'm happy to propose an amendment to the PEP, but I'd like to get some input first.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/533", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/533/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/533/comments", "events_url": "https://api.github.com/repos/python/typing/issues/533/events", "html_url": "https://github.com/python/typing/issues/533", "id": 291418277, "node_id": "MDU6SXNzdWUyOTE0MTgyNzc=", "number": 533, "title": "Fix typing_extensions for PEP 560 and release a new version", "user": {"login": "gvanrossum", "id": 2894642, "node_id": "MDQ6VXNlcjI4OTQ2NDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2894642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gvanrossum", "html_url": "https://github.com/gvanrossum", "followers_url": "https://api.github.com/users/gvanrossum/followers", "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}", "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}", "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions", "organizations_url": "https://api.github.com/users/gvanrossum/orgs", "repos_url": "https://api.github.com/users/gvanrossum/repos", "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}", "received_events_url": "https://api.github.com/users/gvanrossum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ilevkivskyi", "id": 12005495, "node_id": "MDQ6VXNlcjEyMDA1NDk1", "avatar_url": "https://avatars1.githubusercontent.com/u/12005495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilevkivskyi", "html_url": "https://github.com/ilevkivskyi", "followers_url": "https://api.github.com/users/ilevkivskyi/followers", "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}", "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions", "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs", "repos_url": "https://api.github.com/users/ilevkivskyi/repos", "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}", "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ilevkivskyi", "id": 12005495, "node_id": "MDQ6VXNlcjEyMDA1NDk1", "avatar_url": "https://avatars1.githubusercontent.com/u/12005495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilevkivskyi", "html_url": "https://github.com/ilevkivskyi", "followers_url": "https://api.github.com/users/ilevkivskyi/followers", "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}", "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions", "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs", "repos_url": "https://api.github.com/users/ilevkivskyi/repos", "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}", "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-01-25T01:20:00Z", "updated_at": "2018-05-07T23:33:29Z", "closed_at": "2018-05-07T23:33:29Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "See https://github.com/python/typing/issues/532#issuecomment-360328654 and those around it -- the typing Travis-CI build is currently broken due to this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/532", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/532/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/532/comments", "events_url": "https://api.github.com/repos/python/typing/issues/532/events", "html_url": "https://github.com/python/typing/issues/532", "id": 291408972, "node_id": "MDU6SXNzdWUyOTE0MDg5NzI=", "number": 532, "title": "typing release 3.6.4", "user": {"login": "gvanrossum", "id": 2894642, "node_id": "MDQ6VXNlcjI4OTQ2NDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2894642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gvanrossum", "html_url": "https://github.com/gvanrossum", "followers_url": "https://api.github.com/users/gvanrossum/followers", "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}", "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}", "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions", "organizations_url": "https://api.github.com/users/gvanrossum/orgs", "repos_url": "https://api.github.com/users/gvanrossum/repos", "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}", "received_events_url": "https://api.github.com/users/gvanrossum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-01-25T00:25:58Z", "updated_at": "2018-01-25T01:18:55Z", "closed_at": "2018-01-25T01:18:55Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I'm going to release typing version 3.6.4.\r\n\r\nThis is going to match what's in the CPython repo tagged with \"v3.6.4\" except for some immaterial details in test_typing.py:\r\n- A change to the argument name for `magic_decorator()` (from https://github.com/python/cpython/commit/205dd4e14de77f9c8ed2903ddebbcf9968bbb6a9); this seems immaterial\r\n- A bunch of places have `collections_abc.SomeClass` here but still have `collections.SomeClass` in CPython branch 3.6; here the typing repo is better, the changes were committed in https://github.com/python/typing/commit/d9e477ede48f5ec5f50213f0d9db6c7d92cc3287, which claims they came from the CPython repo, resumably they weren't backported there (and there's no reason to)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/531", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/531/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/531/comments", "events_url": "https://api.github.com/repos/python/typing/issues/531/events", "html_url": "https://github.com/python/typing/issues/531", "id": 290948061, "node_id": "MDU6SXNzdWUyOTA5NDgwNjE=", "number": 531, "title": "Compare two stub files to detect interface changes?", "user": {"login": "henryJack", "id": 22593502, "node_id": "MDQ6VXNlcjIyNTkzNTAy", "avatar_url": "https://avatars1.githubusercontent.com/u/22593502?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryJack", "html_url": "https://github.com/henryJack", "followers_url": "https://api.github.com/users/henryJack/followers", "following_url": "https://api.github.com/users/henryJack/following{/other_user}", "gists_url": "https://api.github.com/users/henryJack/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryJack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryJack/subscriptions", "organizations_url": "https://api.github.com/users/henryJack/orgs", "repos_url": "https://api.github.com/users/henryJack/repos", "events_url": "https://api.github.com/users/henryJack/events{/privacy}", "received_events_url": "https://api.github.com/users/henryJack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-01-23T18:36:32Z", "updated_at": "2018-01-26T11:28:36Z", "closed_at": "2018-01-26T11:28:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm looking to create a tool to compare interface differences between the public parts of a module in its current state vs a previously released state. With this tool, it should be possible to determine whether or not you've made a breaking change, added a feature or just made a bug fix (i.e no interface changes) to the module with respect to a previous version of it.\r\n\r\nMy thinking for this was to generate the stubs for the OLD version of a module and a NEW version of the module and compare these to identify differences in the public interface. This feels good because I can just use [stubgen](https://github.com/python/mypy/blob/master/mypy/stubgen.py) for this...\r\n\r\nThe next step in this process would be to compare the functions and classes in the NEW and OLD version of the module. However, the usual way to [inspect.getmembers](https://docs.python.org/3.5/library/inspect.html#inspect.getmembers) and [inspect.signature](https://docs.python.org/3/library/inspect.html#inspect.signature) do not work as the functions and classes in the stubs are `.pyi` files and not `.py` files. \r\n\r\nDo you have any ideas what would be the best way to compare stub files? The most useful similar tool i've found is a feature of googles [pytype](https://github.com/google/pytype):\r\n\r\npytype has an option to test a .pyi file against the .py implementation:\r\n\r\n`pytype --check file.py:file.pyi`\r\n\r\nIt won't do everything, but it will find:\r\n\r\n- Methods,classes or constants declared in the .pyi, but missing in the .py.\r\n- Argument types in the .pyi that cause type errors in the .py.\r\n- Methods returning values incompatible with what is declared in the .pyi.\r\n\r\nHowever, this doesn't compare 2 `.pyi` files and you need python 2.7 to run it...\r\n\r\nDo you have any ideas what would be the best way to compare stub files?\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/530", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/530/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/530/comments", "events_url": "https://api.github.com/repos/python/typing/issues/530/events", "html_url": "https://github.com/python/typing/issues/530", "id": 290935493, "node_id": "MDU6SXNzdWUyOTA5MzU0OTM=", "number": 530, "title": "ImportError: cannot import name 'AsyncGenerator'", "user": {"login": "jerodestapa", "id": 3231799, "node_id": "MDQ6VXNlcjMyMzE3OTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3231799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jerodestapa", "html_url": "https://github.com/jerodestapa", "followers_url": "https://api.github.com/users/jerodestapa/followers", "following_url": "https://api.github.com/users/jerodestapa/following{/other_user}", "gists_url": "https://api.github.com/users/jerodestapa/gists{/gist_id}", "starred_url": "https://api.github.com/users/jerodestapa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jerodestapa/subscriptions", "organizations_url": "https://api.github.com/users/jerodestapa/orgs", "repos_url": "https://api.github.com/users/jerodestapa/repos", "events_url": "https://api.github.com/users/jerodestapa/events{/privacy}", "received_events_url": "https://api.github.com/users/jerodestapa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-23T17:55:11Z", "updated_at": "2018-01-24T04:26:53Z", "closed_at": "2018-01-24T04:26:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I may be missing something embarrassingly obvious here, but I'm getting a consistent import error for AsyncGenerator using 3.6.0. All other imports are working fine, as far as I can tell.\r\n\r\nIt's listed among the group of imports that are only added if their non-generic counterparts are not in stdlib:\r\n\r\n`# The following are added depending on presence\r\n    # of their non-generic counterparts in stdlib:\r\n    # Awaitable,\r\n    # AsyncIterator,\r\n    # AsyncIterable,\r\n    # Coroutine,\r\n    # Collection,\r\n    # AsyncGenerator,\r\n    # AsyncContextManager`\r\n\r\nIs this possibly a local issue?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/529", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/529/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/529/comments", "events_url": "https://api.github.com/repos/python/typing/issues/529/events", "html_url": "https://github.com/python/typing/issues/529", "id": 289683114, "node_id": "MDU6SXNzdWUyODk2ODMxMTQ=", "number": 529, "title": "It should be possible to describe an expression as useable according to two types", "user": {"login": "nathanielmanistaatgoogle", "id": 10131044, "node_id": "MDQ6VXNlcjEwMTMxMDQ0", "avatar_url": "https://avatars0.githubusercontent.com/u/10131044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanielmanistaatgoogle", "html_url": "https://github.com/nathanielmanistaatgoogle", "followers_url": "https://api.github.com/users/nathanielmanistaatgoogle/followers", "following_url": "https://api.github.com/users/nathanielmanistaatgoogle/following{/other_user}", "gists_url": "https://api.github.com/users/nathanielmanistaatgoogle/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanielmanistaatgoogle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanielmanistaatgoogle/subscriptions", "organizations_url": "https://api.github.com/users/nathanielmanistaatgoogle/orgs", "repos_url": "https://api.github.com/users/nathanielmanistaatgoogle/repos", "events_url": "https://api.github.com/users/nathanielmanistaatgoogle/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanielmanistaatgoogle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-01-18T16:04:17Z", "updated_at": "2019-02-04T09:02:33Z", "closed_at": "2019-02-04T09:02:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "When we designed gRPC Python we wanted to keep the API surface as minimal as possible, so we have a few places where rather than introduce a new type that is merely the union of two types we simply say \"this value is usable according to two types\". Consider [the return value of `grpc.UnaryUnaryMultiCallable.future`: \"An object that is both a [`grpc.`]`Call` for the RPC and a [`grpc.`]`Future`.\"](https://github.com/grpc/grpc/blob/5eb6148ab4e95ea472af2033bd976317992fe18f/src/python/grpcio/grpc/__init__.py#L666-L671).\r\n\r\nWe'd like to use pytype in gRPC Python but it will need to understand code shaped like this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/528", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/528/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/528/comments", "events_url": "https://api.github.com/repos/python/typing/issues/528/events", "html_url": "https://github.com/python/typing/issues/528", "id": 288639590, "node_id": "MDU6SXNzdWUyODg2Mzk1OTA=", "number": 528, "title": "How it can be determined that variable is an Union?", "user": {"login": "Pitometsu", "id": 2434691, "node_id": "MDQ6VXNlcjI0MzQ2OTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2434691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pitometsu", "html_url": "https://github.com/Pitometsu", "followers_url": "https://api.github.com/users/Pitometsu/followers", "following_url": "https://api.github.com/users/Pitometsu/following{/other_user}", "gists_url": "https://api.github.com/users/Pitometsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pitometsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pitometsu/subscriptions", "organizations_url": "https://api.github.com/users/Pitometsu/orgs", "repos_url": "https://api.github.com/users/Pitometsu/repos", "events_url": "https://api.github.com/users/Pitometsu/events{/privacy}", "received_events_url": "https://api.github.com/users/Pitometsu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-15T15:52:08Z", "updated_at": "2018-01-15T18:20:42Z", "closed_at": "2018-01-15T18:20:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\n>>> v = Union[int, str]\r\n>>> type(v)\r\ntyping.Union\r\n>>> type(v) == Union\r\nFalse\r\n>>> v is Union\r\nFalse\r\n>>> issubclass(v, Union)\r\n*** TypeError: Unions cannot be used with issubclass().\r\n>>> isinstance(v, Union)\r\n*** TypeError: Unions cannot be used with isinstance().\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/524", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/524/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/524/comments", "events_url": "https://api.github.com/repos/python/typing/issues/524/events", "html_url": "https://github.com/python/typing/issues/524", "id": 284814292, "node_id": "MDU6SXNzdWUyODQ4MTQyOTI=", "number": 524, "title": "`typing_extensions` incompatible with -OO", "user": {"login": "rkr-at-dbx", "id": 22892753, "node_id": "MDQ6VXNlcjIyODkyNzUz", "avatar_url": "https://avatars1.githubusercontent.com/u/22892753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkr-at-dbx", "html_url": "https://github.com/rkr-at-dbx", "followers_url": "https://api.github.com/users/rkr-at-dbx/followers", "following_url": "https://api.github.com/users/rkr-at-dbx/following{/other_user}", "gists_url": "https://api.github.com/users/rkr-at-dbx/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkr-at-dbx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkr-at-dbx/subscriptions", "organizations_url": "https://api.github.com/users/rkr-at-dbx/orgs", "repos_url": "https://api.github.com/users/rkr-at-dbx/repos", "events_url": "https://api.github.com/users/rkr-at-dbx/events{/privacy}", "received_events_url": "https://api.github.com/users/rkr-at-dbx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 133486138, "node_id": "MDU6TGFiZWwxMzM0ODYxMzg=", "url": "https://api.github.com/repos/python/typing/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-12-27T23:41:49Z", "updated_at": "2018-01-27T11:34:39Z", "closed_at": "2018-01-27T11:34:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "If docstrings are stripped (as by the -OO flag), then under Py3, `typing_extensions` will crash at import time when it tries to alter `Protocol.__doc__`:\r\n\r\n>```\r\n>    Protocol.__doc__ = Protocol.__doc__.format(bases=\"Protocol, Generic[T]\" if\r\n>                                               OLD_GENERICS else \"Protocol[T]\")\r\n>```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/523", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/523/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/523/comments", "events_url": "https://api.github.com/repos/python/typing/issues/523/events", "html_url": "https://github.com/python/typing/issues/523", "id": 284468736, "node_id": "MDU6SXNzdWUyODQ0Njg3MzY=", "number": 523, "title": "RuntimeError: maximum recursion depth exceeded while calling a Python object", "user": {"login": "Pitometsu", "id": 2434691, "node_id": "MDQ6VXNlcjI0MzQ2OTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2434691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pitometsu", "html_url": "https://github.com/Pitometsu", "followers_url": "https://api.github.com/users/Pitometsu/followers", "following_url": "https://api.github.com/users/Pitometsu/following{/other_user}", "gists_url": "https://api.github.com/users/Pitometsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pitometsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pitometsu/subscriptions", "organizations_url": "https://api.github.com/users/Pitometsu/orgs", "repos_url": "https://api.github.com/users/Pitometsu/repos", "events_url": "https://api.github.com/users/Pitometsu/events{/privacy}", "received_events_url": "https://api.github.com/users/Pitometsu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2017-12-25T20:56:42Z", "updated_at": "2020-04-08T15:26:58Z", "closed_at": "2017-12-26T08:42:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nv = 1\r\nt = int\r\nfor _ in range(0, 1000):\r\n    v = (1, v, 1)\r\n    t = tp.Tuple[int, t, int]\r\ne = (v, t)\r\nprint e\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/netsu/.virtualenvs/csr-44kfYsMA/lib/python2.7/site-packages/IPython/core/interactiveshell.py\", line 2882, in run_code\r\n    exec(code_obj, self.user_global_ns, self.user_ns)\r\n  File \"<ipython-input-174-01b42d124d17>\", line 5, in <module>\r\n    t = tp.Tuple[int, t, int]\r\n  File \"/Users/netsu/.local/share/virtualenvs/csr-44kfYsMA/lib/python2.7/site-packages/typing.py\", line 754, in inner\r\n    value = func(*args)\r\n  File \"/Users/netsu/.local/share/virtualenvs/csr-44kfYsMA/lib/python2.7/site-packages/typing.py\", line 1374, in __getitem__\r\n    return super(TupleMeta, self).__getitem__(parameters)\r\n  File \"/Users/netsu/.local/share/virtualenvs/csr-44kfYsMA/lib/python2.7/site-packages/typing.py\", line 754, in inner\r\n    value = func(*args)\r\n  File \"/Users/netsu/.local/share/virtualenvs/csr-44kfYsMA/lib/python2.7/site-packages/typing.py\", line 1254, in __getitem__\r\n    orig_bases=self.__orig_bases__)\r\n  File \"/Users/netsu/.local/share/virtualenvs/csr-44kfYsMA/lib/python2.7/site-packages/typing.py\", line 1113, in __new__\r\n    self.__tree_hash__ = (hash(self._subs_tree()) if origin else\r\n  File \"/Users/netsu/.local/share/virtualenvs/csr-44kfYsMA/lib/python2.7/site-packages/typing.py\", line 1197, in _subs_tree\r\n    tree_args = _subs_tree(self, tvars, args)\r\n  File \"/Users/netsu/.local/share/virtualenvs/csr-44kfYsMA/lib/python2.7/site-packages/typing.py\", line 675, in _subs_tree\r\n    tree_args.append(_replace_arg(arg, tvars, args))\r\n  File \"/Users/netsu/.local/share/virtualenvs/csr-44kfYsMA/lib/python2.7/site-packages/typing.py\", line 634, in _replace_arg\r\n    return arg._subs_tree(tvars, args)\r\n  File \"/Users/netsu/.local/share/virtualenvs/csr-44kfYsMA/lib/python2.7/site-packages/typing.py\", line 1197, in _subs_tree\r\n    tree_args = _subs_tree(self, tvars, args)\r\n  File \"/Users/netsu/.local/share/virtualenvs/csr-44kfYsMA/lib/python2.7/site-packages/typing.py\", line 675, in _subs_tree\r\n    tree_args.append(_replace_arg(arg, tvars, args))\r\n  File \"/Users/netsu/.local/share/virtualenvs/csr-44kfYsMA/lib/python2.7/site-packages/typing.py\", line 634, in _replace_arg\r\n    return arg._subs_tree(tvars, args)\r\n  File \"/Users/netsu/.local/share/virtualenvs/csr-44kfYsMA/lib/python2.7/site-packages/typing.py\", line 1197, in _subs_tree\r\n    tree_args = _subs_tree(self, tvars, args)\r\n\r\n\r\n . . .\r\n\r\n  File \"/Users/netsu/.local/share/virtualenvs/csr-44kfYsMA/lib/python2.7/site-packages/typing.py\", line 675, in _subs_tree\r\n    tree_args.append(_replace_arg(arg, tvars, args))\r\n  File \"/Users/netsu/.local/share/virtualenvs/csr-44kfYsMA/lib/python2.7/site-packages/typing.py\", line 635, in _replace_arg\r\n    if isinstance(arg, TypeVar):\r\nRuntimeError: maximum recursion depth exceeded while calling a Python object\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/522", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/522/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/522/comments", "events_url": "https://api.github.com/repos/python/typing/issues/522/events", "html_url": "https://github.com/python/typing/issues/522", "id": 284359783, "node_id": "MDU6SXNzdWUyODQzNTk3ODM=", "number": 522, "title": "Wrappers for generic types", "user": {"login": "mitar", "id": 585279, "node_id": "MDQ6VXNlcjU4NTI3OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitar", "html_url": "https://github.com/mitar", "followers_url": "https://api.github.com/users/mitar/followers", "following_url": "https://api.github.com/users/mitar/following{/other_user}", "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitar/subscriptions", "organizations_url": "https://api.github.com/users/mitar/orgs", "repos_url": "https://api.github.com/users/mitar/repos", "events_url": "https://api.github.com/users/mitar/events{/privacy}", "received_events_url": "https://api.github.com/users/mitar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 133486143, "node_id": "MDU6TGFiZWwxMzM0ODYxNDM=", "url": "https://api.github.com/repos/python/typing/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-24T12:23:54Z", "updated_at": "2019-06-20T00:51:06Z", "closed_at": "2019-06-20T00:51:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am trying to define a wrapper for a generic type:\r\n\r\n```python\r\nimport typing\r\n\r\nT = typing.TypeVar('T')\r\n\r\nclass List(typing.List[T]):\r\n    pass\r\n\r\nclass ImmutableList(List):\r\n    def __init__(self, mutable_list) -> None:\r\n        pass\r\n```\r\n\r\nSo the idea is that you can pass a mutable list to `ImmutableList` constructor and you would get an instance of `ImmutableList` sharing all elements of the mutable list, but one could not change them.\r\n\r\nThe question is how to define types here. How to make it so that it is clear that elements of `ImmutableList` instance are the same as `mutable_list` argument had as type of elements.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/521", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/521/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/521/comments", "events_url": "https://api.github.com/repos/python/typing/issues/521/events", "html_url": "https://github.com/python/typing/issues/521", "id": 283647802, "node_id": "MDU6SXNzdWUyODM2NDc4MDI=", "number": 521, "title": "Allow specifying type arguments which cannot be inferred", "user": {"login": "gabbard", "id": 7139661, "node_id": "MDQ6VXNlcjcxMzk2NjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/7139661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabbard", "html_url": "https://github.com/gabbard", "followers_url": "https://api.github.com/users/gabbard/followers", "following_url": "https://api.github.com/users/gabbard/following{/other_user}", "gists_url": "https://api.github.com/users/gabbard/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabbard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabbard/subscriptions", "organizations_url": "https://api.github.com/users/gabbard/orgs", "repos_url": "https://api.github.com/users/gabbard/repos", "events_url": "https://api.github.com/users/gabbard/events{/privacy}", "received_events_url": "https://api.github.com/users/gabbard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-12-20T18:00:00Z", "updated_at": "2018-01-03T20:59:53Z", "closed_at": "2018-01-03T20:59:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to specify at a function's call-site a type which cannot be inferred? For example, in Java, if a static method of a class has a type variable which does not appear as the type of an argument (e.g. `static <T> MyClass.Builder<T> builder()`) you can specify it like this `MyClass.<Foo>builder())`. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python/typing/issues/520", "repository_url": "https://api.github.com/repos/python/typing", "labels_url": "https://api.github.com/repos/python/typing/issues/520/labels{/name}", "comments_url": "https://api.github.com/repos/python/typing/issues/520/comments", "events_url": "https://api.github.com/repos/python/typing/issues/520/events", "html_url": "https://github.com/python/typing/issues/520", "id": 282883314, "node_id": "MDU6SXNzdWUyODI4ODMzMTQ=", "number": 520, "title": "Cannot define a dict between TypeVars and types", "user": {"login": "mitar", "id": 585279, "node_id": "MDQ6VXNlcjU4NTI3OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitar", "html_url": "https://github.com/mitar", "followers_url": "https://api.github.com/users/mitar/followers", "following_url": "https://api.github.com/users/mitar/following{/other_user}", "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitar/subscriptions", "organizations_url": "https://api.github.com/users/mitar/orgs", "repos_url": "https://api.github.com/users/mitar/repos", "events_url": "https://api.github.com/users/mitar/events{/privacy}", "received_events_url": "https://api.github.com/users/mitar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-12-18T13:44:34Z", "updated_at": "2019-06-20T09:49:41Z", "closed_at": "2019-06-20T01:21:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following fails:\r\n\r\n```\r\nimport typing\r\ntyping.Dict[typing.TypeVar, type]\r\n```\r\n\r\n```\r\n  File \"/usr/lib/python3.6/typing.py\", line 679, in inner\r\n    return cached(*args, **kwds)\r\n  File \"/usr/lib/python3.6/typing.py\", line 1106, in __getitem__\r\n    params = tuple(_type_check(p, msg) for p in params)\r\n  File \"/usr/lib/python3.6/typing.py\", line 1106, in <genexpr>\r\n    params = tuple(_type_check(p, msg) for p in params)\r\n  File \"/usr/lib/python3.6/typing.py\", line 379, in _type_check\r\n    isinstance(arg, TypingMeta) and arg._gorg in (Generic, _Protocol)\r\nAttributeError: type object 'TypeVar' has no attribute '_gorg'\r\n```\r\n\r\nPython 3.6.3.", "performed_via_github_app": null, "score": 1.0}]}