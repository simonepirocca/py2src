{"total_count": 19, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/clarkduvall/serpy/issues/69", "repository_url": "https://api.github.com/repos/clarkduvall/serpy", "labels_url": "https://api.github.com/repos/clarkduvall/serpy/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/clarkduvall/serpy/issues/69/comments", "events_url": "https://api.github.com/repos/clarkduvall/serpy/issues/69/events", "html_url": "https://github.com/clarkduvall/serpy/issues/69", "id": 374240647, "node_id": "MDU6SXNzdWUzNzQyNDA2NDc=", "number": 69, "title": "Is it still under active development?", "user": {"login": "rajeshyogeshwar", "id": 7311146, "node_id": "MDQ6VXNlcjczMTExNDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/7311146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rajeshyogeshwar", "html_url": "https://github.com/rajeshyogeshwar", "followers_url": "https://api.github.com/users/rajeshyogeshwar/followers", "following_url": "https://api.github.com/users/rajeshyogeshwar/following{/other_user}", "gists_url": "https://api.github.com/users/rajeshyogeshwar/gists{/gist_id}", "starred_url": "https://api.github.com/users/rajeshyogeshwar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rajeshyogeshwar/subscriptions", "organizations_url": "https://api.github.com/users/rajeshyogeshwar/orgs", "repos_url": "https://api.github.com/users/rajeshyogeshwar/repos", "events_url": "https://api.github.com/users/rajeshyogeshwar/events{/privacy}", "received_events_url": "https://api.github.com/users/rajeshyogeshwar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-26T06:13:02Z", "updated_at": "2018-10-30T05:09:01Z", "closed_at": "2018-10-30T05:09:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am planning to use this library for one of my Django projects. But the last commit I see is more than a month old. I am curious to know if the library is still under active development?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/clarkduvall/serpy/issues/61", "repository_url": "https://api.github.com/repos/clarkduvall/serpy", "labels_url": "https://api.github.com/repos/clarkduvall/serpy/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/clarkduvall/serpy/issues/61/comments", "events_url": "https://api.github.com/repos/clarkduvall/serpy/issues/61/events", "html_url": "https://github.com/clarkduvall/serpy/issues/61", "id": 278273920, "node_id": "MDU6SXNzdWUyNzgyNzM5MjA=", "number": 61, "title": "No way to omit field from output", "user": {"login": "ahankinson", "id": 163183, "node_id": "MDQ6VXNlcjE2MzE4Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/163183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahankinson", "html_url": "https://github.com/ahankinson", "followers_url": "https://api.github.com/users/ahankinson/followers", "following_url": "https://api.github.com/users/ahankinson/following{/other_user}", "gists_url": "https://api.github.com/users/ahankinson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahankinson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahankinson/subscriptions", "organizations_url": "https://api.github.com/users/ahankinson/orgs", "repos_url": "https://api.github.com/users/ahankinson/repos", "events_url": "https://api.github.com/users/ahankinson/events{/privacy}", "received_events_url": "https://api.github.com/users/ahankinson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-11-30T21:21:33Z", "updated_at": "2019-05-14T07:17:30Z", "closed_at": "2018-02-27T13:43:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With the reversion of #38, it seems there is currently no way to omit a value from the serialized output. I'm happy to submit a PR, but would appreciate some direction to know what would be an appropriate solution:\r\n\r\n - Add an option to the field, `omit_if_null`\r\n - Add an option to the serializer initializer, `omit_if_null`\r\n - ???", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/clarkduvall/serpy/issues/56", "repository_url": "https://api.github.com/repos/clarkduvall/serpy", "labels_url": "https://api.github.com/repos/clarkduvall/serpy/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/clarkduvall/serpy/issues/56/comments", "events_url": "https://api.github.com/repos/clarkduvall/serpy/issues/56/events", "html_url": "https://github.com/clarkduvall/serpy/issues/56", "id": 277250075, "node_id": "MDU6SXNzdWUyNzcyNTAwNzU=", "number": 56, "title": "serpy no longer supports None as field values", "user": {"login": "terite", "id": 44259, "node_id": "MDQ6VXNlcjQ0MjU5", "avatar_url": "https://avatars3.githubusercontent.com/u/44259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terite", "html_url": "https://github.com/terite", "followers_url": "https://api.github.com/users/terite/followers", "following_url": "https://api.github.com/users/terite/following{/other_user}", "gists_url": "https://api.github.com/users/terite/gists{/gist_id}", "starred_url": "https://api.github.com/users/terite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terite/subscriptions", "organizations_url": "https://api.github.com/users/terite/orgs", "repos_url": "https://api.github.com/users/terite/repos", "events_url": "https://api.github.com/users/terite/events{/privacy}", "received_events_url": "https://api.github.com/users/terite/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-28T03:53:27Z", "updated_at": "2017-11-28T05:00:48Z", "closed_at": "2017-11-28T04:49:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "As a result of #38 serpy the following things happen when `None` is returned from a `MethodField`\r\n* If `required=True` (default), serialization throws an exception\r\n* If `required=False`, the key and value are not included in the output dictionary.\r\n\r\nI'm using MethodField because it's a concrete example. I believe the same thing happens with most (if not all) other fields.\r\n\r\nAs you might expect, this breaks any use case of serpy that needs to return None.\r\n\r\nThe [django rest framework docs](http://www.django-rest-framework.org/api-guide/fields/#required) state\r\n> Setting this to False also allows the object attribute or dictionary key to be omitted from output when serializing the instance. If the key is not present it will simply not be included in the output representation.\r\n\r\nIn concrete terms, the following serializer returns the data as seen below\r\n\r\n```python\r\nclass DrfSerializer(serializers.Serializer):\r\n    value = serializers.IntegerField(required=...)\r\n```\r\n\r\n| DRF 3.7.3 | `required=True` | `required=False` |\r\n| --- | --- | --- |\r\n| `data = {'value': 1}` |  `{'value': 1}` |  `{'value': 1}` |\r\n| `data = {'value': None}` |  `{'value': None}` |  `{'value': None}` |\r\n| `data = {}` |  `KeyError(u\"Got KeyError when...` |  `{}` |\r\n\r\nWhen using the following serpy 0.2.0 serializer I get the results below\r\n\r\n```python\r\nclass SerpySerializer(serpy.DictSerializer):\r\n    value = serpy.Field(required=...)\r\n```\r\n\r\n| serpy 0.2.0 | `required=True` | `required=False` |\r\n| --- | --- | --- |\r\n| `data = {'value': 1}` |  `{'value': 1}` |  `{'value': 1}` |\r\n| `data = {'value': None}` |  `TypeError('Field {0} is required', 'value')` |  `{}` |\r\n| `data = {}` |  `KeyError('value',)` |  `KeyError('value',)` |\r\n\r\nFor reference, this is the output from serpy 0.1.1\r\n\r\n| serpy 0.1.1 | `required=True` | `required=False` |\r\n| --- | --- | --- |\r\n| `data = {'value': 1}` |  `{'value': 1}` |  `{'value': 1}` |\r\n| `data = {'value': None}` |  `{'value': None}` |  `{'value': None}` |\r\n| `data = {}` |  `KeyError('value',)` |  `KeyError('value',)` |\r\n\r\nAs seen in the tables, PR #38 does the following things\r\n* breaks cases that previously matched DRF behavior\r\n* adds no new cases that match DRF behavior\r\n* breaks any serializers that wanted to return `None`.\r\n\r\nFor these reasons I'd like to suggest #38 be reverted.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/clarkduvall/serpy/issues/54", "repository_url": "https://api.github.com/repos/clarkduvall/serpy", "labels_url": "https://api.github.com/repos/clarkduvall/serpy/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/clarkduvall/serpy/issues/54/comments", "events_url": "https://api.github.com/repos/clarkduvall/serpy/issues/54/events", "html_url": "https://github.com/clarkduvall/serpy/issues/54", "id": 272262111, "node_id": "MDU6SXNzdWUyNzIyNjIxMTE=", "number": 54, "title": "Serializing properties which may or may not be present in object being passed in", "user": {"login": "JoelBennett", "id": 3631501, "node_id": "MDQ6VXNlcjM2MzE1MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/3631501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoelBennett", "html_url": "https://github.com/JoelBennett", "followers_url": "https://api.github.com/users/JoelBennett/followers", "following_url": "https://api.github.com/users/JoelBennett/following{/other_user}", "gists_url": "https://api.github.com/users/JoelBennett/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoelBennett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoelBennett/subscriptions", "organizations_url": "https://api.github.com/users/JoelBennett/orgs", "repos_url": "https://api.github.com/users/JoelBennett/repos", "events_url": "https://api.github.com/users/JoelBennett/events{/privacy}", "received_events_url": "https://api.github.com/users/JoelBennett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-08T16:28:09Z", "updated_at": "2017-11-09T15:51:09Z", "closed_at": "2017-11-09T15:51:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Forgive me if my terminology is a bit off.  So far I've been pretty impressed with Serpy - we were able to get some serious performance out of it compared to the Django Rest Framework serializer when returning several thousand objects in a single call (don't ask).\r\n\r\nI have run into a small challenge, and I'm not quite sure the best way to overcome it.  I've got a Serializer that inherits from serpy.Serializer, which has a number of fields (let's call them a, b, c, d, etc.).  These fields may or may not be present in the object which I need to serialize, but I'd always like to make sure that they are present with a value of None in the serialized data.  So my serializer looks something like:\r\n```\r\nclass MySerializer(serpy.Serializer):\r\n    a = serpy.FloatField()\r\n    b = serpy.FloatField()\r\n    c = serpy.FloatField()\r\n    # ... and so on, for a bunch of fields\r\n```\r\nInside of a Django view, the QuerySet of objects is filtered, and passed into the serializer.\r\n```\r\n# someObjects is a QuerySet of objects, which may or may not contain a, b, c, etc.\r\nserializer = MySerializer(someObjects, many=True)\r\n```\r\nThis raises the following exception:\r\n```\r\n... views.py\", line 80, in get\r\n    return Response(serializer.data)\r\n  File \"C:\\Python27\\lib\\site-packages\\serpy\\serializer.py\", line 139, in data\r\n    self._data = self.to_value(self.instance)\r\n  File \"C:\\Python27\\lib\\site-packages\\serpy\\serializer.py\", line 128, in to_value\r\n    return [serialize(o, fields) for o in instance]\r\n  File \"C:\\Python27\\lib\\site-packages\\serpy\\serializer.py\", line 116, in _serialize\r\n    result = to_value(result)\r\nTypeError: float() argument must be a string or a number```\r\nSwitching the FloatFields to be required=False no longer raises the exception, but it no longer puts the corresponding dictionary key in the output.  Ideally I would like the value of a, b, c, etc. to always be present in the output but with a value of None.  Is there a way to do this en-mass, without having to do something for every field I have that is like this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/clarkduvall/serpy/issues/51", "repository_url": "https://api.github.com/repos/clarkduvall/serpy", "labels_url": "https://api.github.com/repos/clarkduvall/serpy/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/clarkduvall/serpy/issues/51/comments", "events_url": "https://api.github.com/repos/clarkduvall/serpy/issues/51/events", "html_url": "https://github.com/clarkduvall/serpy/issues/51", "id": 261837021, "node_id": "MDU6SXNzdWUyNjE4MzcwMjE=", "number": 51, "title": "Non-required key raises key error when not present", "user": {"login": "ahankinson", "id": 163183, "node_id": "MDQ6VXNlcjE2MzE4Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/163183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahankinson", "html_url": "https://github.com/ahankinson", "followers_url": "https://api.github.com/users/ahankinson/followers", "following_url": "https://api.github.com/users/ahankinson/following{/other_user}", "gists_url": "https://api.github.com/users/ahankinson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahankinson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahankinson/subscriptions", "organizations_url": "https://api.github.com/users/ahankinson/orgs", "repos_url": "https://api.github.com/users/ahankinson/repos", "events_url": "https://api.github.com/users/ahankinson/events{/privacy}", "received_events_url": "https://api.github.com/users/ahankinson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-30T11:05:00Z", "updated_at": "2017-11-28T07:45:47Z", "closed_at": "2017-11-28T07:45:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In serpy 0.2, if a field set to `required=False` is not present in the object to be serialized, it will raise a `KeyError`. Based on my understanding of how DRF works, if a field set to `required=False` has a missing key, it will just skip it and move on. \r\n\r\nhttp://www.django-rest-framework.org/api-guide/fields/#required\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/clarkduvall/serpy/issues/39", "repository_url": "https://api.github.com/repos/clarkduvall/serpy", "labels_url": "https://api.github.com/repos/clarkduvall/serpy/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/clarkduvall/serpy/issues/39/comments", "events_url": "https://api.github.com/repos/clarkduvall/serpy/issues/39/events", "html_url": "https://github.com/clarkduvall/serpy/issues/39", "id": 206232844, "node_id": "MDU6SXNzdWUyMDYyMzI4NDQ=", "number": 39, "title": "Inconsistent: child serializer required=False returns None", "user": {"login": "anentropic", "id": 147840, "node_id": "MDQ6VXNlcjE0Nzg0MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/147840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anentropic", "html_url": "https://github.com/anentropic", "followers_url": "https://api.github.com/users/anentropic/followers", "following_url": "https://api.github.com/users/anentropic/following{/other_user}", "gists_url": "https://api.github.com/users/anentropic/gists{/gist_id}", "starred_url": "https://api.github.com/users/anentropic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anentropic/subscriptions", "organizations_url": "https://api.github.com/users/anentropic/orgs", "repos_url": "https://api.github.com/users/anentropic/repos", "events_url": "https://api.github.com/users/anentropic/events{/privacy}", "received_events_url": "https://api.github.com/users/anentropic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-02-08T15:36:06Z", "updated_at": "2017-02-08T18:14:14Z", "closed_at": "2017-02-08T15:44:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Serpy seems to be designed to omit a field from the serialized data if the field has `required=False`\r\n\r\nHowever if you use a Serializer as a field, i.e. a child serializer, then the field is always present in the data.\r\n\r\nIs this inconsistency deliberate?\r\n\r\n...or should this part maybe not be indented as part of the `else` block?\r\nhttps://github.com/clarkduvall/serpy/blob/master/serpy/serializer.py#L110", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/clarkduvall/serpy/issues/36", "repository_url": "https://api.github.com/repos/clarkduvall/serpy", "labels_url": "https://api.github.com/repos/clarkduvall/serpy/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/clarkduvall/serpy/issues/36/comments", "events_url": "https://api.github.com/repos/clarkduvall/serpy/issues/36/events", "html_url": "https://github.com/clarkduvall/serpy/issues/36", "id": 194537474, "node_id": "MDU6SXNzdWUxOTQ1Mzc0NzQ=", "number": 36, "title": "Patch for compatibility with RelatedManager (reverse foreign-key)", "user": {"login": "davidtgq", "id": 14155110, "node_id": "MDQ6VXNlcjE0MTU1MTEw", "avatar_url": "https://avatars1.githubusercontent.com/u/14155110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtgq", "html_url": "https://github.com/davidtgq", "followers_url": "https://api.github.com/users/davidtgq/followers", "following_url": "https://api.github.com/users/davidtgq/following{/other_user}", "gists_url": "https://api.github.com/users/davidtgq/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtgq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtgq/subscriptions", "organizations_url": "https://api.github.com/users/davidtgq/orgs", "repos_url": "https://api.github.com/users/davidtgq/repos", "events_url": "https://api.github.com/users/davidtgq/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtgq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-09T08:17:39Z", "updated_at": "2016-12-09T21:48:40Z", "closed_at": "2016-12-09T21:46:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "It wasn't working with nested reverse foreign-keys, need to add `.all()`:\r\n\r\n    def to_value(self, instance):\r\n        fields = self._compiled_fields\r\n        if self.many:\r\n            serialize = self._serialize\r\n            return [serialize(o, fields) for o in instance.all()]\r\n        return self._serialize(instance, fields)\r\n\r\nThis enables to do something like:\r\n\r\n    class ParentSerpy(serpy.Serializer):\r\n        children = ChildSerpy(attr='child_set', many=True)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/clarkduvall/serpy/issues/31", "repository_url": "https://api.github.com/repos/clarkduvall/serpy", "labels_url": "https://api.github.com/repos/clarkduvall/serpy/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/clarkduvall/serpy/issues/31/comments", "events_url": "https://api.github.com/repos/clarkduvall/serpy/issues/31/events", "html_url": "https://github.com/clarkduvall/serpy/issues/31", "id": 171566997, "node_id": "MDU6SXNzdWUxNzE1NjY5OTc=", "number": 31, "title": "Methods are not overridden by the child class's implementation", "user": {"login": "jscn", "id": 113335, "node_id": "MDQ6VXNlcjExMzMzNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/113335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jscn", "html_url": "https://github.com/jscn", "followers_url": "https://api.github.com/users/jscn/followers", "following_url": "https://api.github.com/users/jscn/following{/other_user}", "gists_url": "https://api.github.com/users/jscn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jscn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jscn/subscriptions", "organizations_url": "https://api.github.com/users/jscn/orgs", "repos_url": "https://api.github.com/users/jscn/repos", "events_url": "https://api.github.com/users/jscn/events{/privacy}", "received_events_url": "https://api.github.com/users/jscn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-08-17T03:33:10Z", "updated_at": "2016-08-17T04:10:42Z", "closed_at": "2016-08-17T04:10:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If I have a serializer, `TopLevelSerializer` with a `MethodField` which uses a method `get_thing` to calculate the value of the field, when I create another serializer which inherits from `TopLevelSerializer` and re-implement `get_thing` on that child class, I expect the child class's implementation of `get_thing` to be called when I serialize an object with the child class. However, the `TopLevelSerializer`'s implementation is always called. This breaks the standard way that inheritance is supposed to work in Python.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/clarkduvall/serpy/issues/28", "repository_url": "https://api.github.com/repos/clarkduvall/serpy", "labels_url": "https://api.github.com/repos/clarkduvall/serpy/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/clarkduvall/serpy/issues/28/comments", "events_url": "https://api.github.com/repos/clarkduvall/serpy/issues/28/events", "html_url": "https://github.com/clarkduvall/serpy/issues/28", "id": 158135154, "node_id": "MDU6SXNzdWUxNTgxMzUxNTQ=", "number": 28, "title": "Remove Python 2.6 from testing matrix", "user": {"login": "ahankinson", "id": 163183, "node_id": "MDQ6VXNlcjE2MzE4Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/163183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahankinson", "html_url": "https://github.com/ahankinson", "followers_url": "https://api.github.com/users/ahankinson/followers", "following_url": "https://api.github.com/users/ahankinson/following{/other_user}", "gists_url": "https://api.github.com/users/ahankinson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahankinson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahankinson/subscriptions", "organizations_url": "https://api.github.com/users/ahankinson/orgs", "repos_url": "https://api.github.com/users/ahankinson/repos", "events_url": "https://api.github.com/users/ahankinson/events{/privacy}", "received_events_url": "https://api.github.com/users/ahankinson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-02T13:01:57Z", "updated_at": "2017-09-29T15:29:14Z", "closed_at": "2017-09-29T15:29:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Should python 2.6 be removed from the Travis testing matrix? It is no longer supported by Django...\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/clarkduvall/serpy/issues/26", "repository_url": "https://api.github.com/repos/clarkduvall/serpy", "labels_url": "https://api.github.com/repos/clarkduvall/serpy/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/clarkduvall/serpy/issues/26/comments", "events_url": "https://api.github.com/repos/clarkduvall/serpy/issues/26/events", "html_url": "https://github.com/clarkduvall/serpy/issues/26", "id": 157825844, "node_id": "MDU6SXNzdWUxNTc4MjU4NDQ=", "number": 26, "title": "Can't install serpy from source", "user": {"login": "jscn", "id": 113335, "node_id": "MDQ6VXNlcjExMzMzNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/113335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jscn", "html_url": "https://github.com/jscn", "followers_url": "https://api.github.com/users/jscn/followers", "following_url": "https://api.github.com/users/jscn/following{/other_user}", "gists_url": "https://api.github.com/users/jscn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jscn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jscn/subscriptions", "organizations_url": "https://api.github.com/users/jscn/orgs", "repos_url": "https://api.github.com/users/jscn/repos", "events_url": "https://api.github.com/users/jscn/events{/privacy}", "received_events_url": "https://api.github.com/users/jscn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-06-01T05:26:04Z", "updated_at": "2016-08-15T23:49:06Z", "closed_at": "2016-08-15T23:49:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems like it's not possible to install serpy from source:\n\n``` sh\n<trimmed>\nObtaining serpy from git+git://github.com/infoxchange/serpy.git@88c9362b5430e9902670a2460d84f0dad684fec9#egg=serpy (from -r requirements.txt (line 104))\n  Cloning git://github.com/infoxchange/serpy.git (to 88c9362b5430e9902670a2460d84f0dad684fec9) to /virtualenv/src/serpy\n  Could not find a tag or branch '88c9362b5430e9902670a2460d84f0dad684fec9', assuming commit.\n    Complete output from command python setup.py egg_info:\n    Traceback (most recent call last):\n      File \"<string>\", line 1, in <module>\n      File \"/virtualenv/src/serpy/setup.py\", line 4, in <module>\n        import serpy\n      File \"serpy/__init__.py\", line 1, in <module>\n        from serpy.fields import (\n      File \"serpy/fields.py\", line 1, in <module>\n        import six\n    ImportError: No module named six\n```\n\nIt looks like `setup.py` imports serpy in order to get the version string from `/serpy/__init__.py`. `__init__.py` in turn tries to import `six`, which hasn't been installed as a dependency because `setup()` hasn't run yet.\n\n`tox.ini` installs `six` separately, which I guess is why this hasn't been seen in travis...\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/clarkduvall/serpy/issues/23", "repository_url": "https://api.github.com/repos/clarkduvall/serpy", "labels_url": "https://api.github.com/repos/clarkduvall/serpy/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/clarkduvall/serpy/issues/23/comments", "events_url": "https://api.github.com/repos/clarkduvall/serpy/issues/23/events", "html_url": "https://github.com/clarkduvall/serpy/issues/23", "id": 154877056, "node_id": "MDU6SXNzdWUxNTQ4NzcwNTY=", "number": 23, "title": "MethodField's staticmethod expects self parameter, unused and inconsistent with DRF", "user": {"login": "davidtgq", "id": 14155110, "node_id": "MDQ6VXNlcjE0MTU1MTEw", "avatar_url": "https://avatars1.githubusercontent.com/u/14155110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtgq", "html_url": "https://github.com/davidtgq", "followers_url": "https://api.github.com/users/davidtgq/followers", "following_url": "https://api.github.com/users/davidtgq/following{/other_user}", "gists_url": "https://api.github.com/users/davidtgq/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtgq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtgq/subscriptions", "organizations_url": "https://api.github.com/users/davidtgq/orgs", "repos_url": "https://api.github.com/users/davidtgq/repos", "events_url": "https://api.github.com/users/davidtgq/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtgq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-05-14T21:41:53Z", "updated_at": "2016-12-26T17:55:07Z", "closed_at": "2016-12-26T17:54:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Django Rest Framework's SerializerMethodField expects something like this:\n\n```\n@staticmethod\ndef get_field(data):\n    return ret\n```\n\nWhereas Serpy requires the self parameter:\n\n```\n@staticmethod\ndef get_field(self, data):\n    return ret\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/clarkduvall/serpy/issues/18", "repository_url": "https://api.github.com/repos/clarkduvall/serpy", "labels_url": "https://api.github.com/repos/clarkduvall/serpy/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/clarkduvall/serpy/issues/18/comments", "events_url": "https://api.github.com/repos/clarkduvall/serpy/issues/18/events", "html_url": "https://github.com/clarkduvall/serpy/issues/18", "id": 141095030, "node_id": "MDU6SXNzdWUxNDEwOTUwMzA=", "number": 18, "title": "Push a new release to PyPI", "user": {"login": "ahankinson", "id": 163183, "node_id": "MDQ6VXNlcjE2MzE4Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/163183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahankinson", "html_url": "https://github.com/ahankinson", "followers_url": "https://api.github.com/users/ahankinson/followers", "following_url": "https://api.github.com/users/ahankinson/following{/other_user}", "gists_url": "https://api.github.com/users/ahankinson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahankinson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahankinson/subscriptions", "organizations_url": "https://api.github.com/users/ahankinson/orgs", "repos_url": "https://api.github.com/users/ahankinson/repos", "events_url": "https://api.github.com/users/ahankinson/events{/privacy}", "received_events_url": "https://api.github.com/users/ahankinson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-03-15T20:54:23Z", "updated_at": "2016-04-12T01:44:40Z", "closed_at": "2016-04-12T01:44:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Would it be possible to create a new release and push it up to PyPI? Thanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/clarkduvall/serpy/issues/17", "repository_url": "https://api.github.com/repos/clarkduvall/serpy", "labels_url": "https://api.github.com/repos/clarkduvall/serpy/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/clarkduvall/serpy/issues/17/comments", "events_url": "https://api.github.com/repos/clarkduvall/serpy/issues/17/events", "html_url": "https://github.com/clarkduvall/serpy/issues/17", "id": 137690476, "node_id": "MDU6SXNzdWUxMzc2OTA0NzY=", "number": 17, "title": "How to serialize django model using serpy?", "user": {"login": "adampotocki", "id": 2486725, "node_id": "MDQ6VXNlcjI0ODY3MjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2486725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adampotocki", "html_url": "https://github.com/adampotocki", "followers_url": "https://api.github.com/users/adampotocki/followers", "following_url": "https://api.github.com/users/adampotocki/following{/other_user}", "gists_url": "https://api.github.com/users/adampotocki/gists{/gist_id}", "starred_url": "https://api.github.com/users/adampotocki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adampotocki/subscriptions", "organizations_url": "https://api.github.com/users/adampotocki/orgs", "repos_url": "https://api.github.com/users/adampotocki/repos", "events_url": "https://api.github.com/users/adampotocki/events{/privacy}", "received_events_url": "https://api.github.com/users/adampotocki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-03-01T21:20:54Z", "updated_at": "2018-03-25T18:02:00Z", "closed_at": "2016-03-10T17:14:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Kinda new to python and django so I apologize if this is a noobish question.  How would I serialize this following related models using Serpy instead of DRF ModelSerializer and then use the serpy serializer in a DRF ModelViewSet?\n\n**Models:**\n\n``` python\nclass Person(models.Model):\n    first_name = models.CharField(_(\"First Name\"), max_length=128, null=True)\n    middle_name = models.CharField(_(\"Middle Name\"), max_length=128, blank=True, null=True)\n    last_name = models.CharField(_(\"Last Name\"), max_length=128, null=True)\n    email = models.EmailField(_(\"Email\"), blank=True, null=True)\n\n    def __unicode__ (self):\n        return '%s: %s %s %s' % (self.id, self.first_name, self.middle_name, self.last_name)\n\nclass Bookmark(models.Model):\n    person = models.ForeignKey(Person, related_name='bookmarks', on_delete=models.CASCADE)\n    title = models.CharField(_(\"Title\"), max_length=9999, blank=True, null=True)\n    url = models.URLField(_(\"Url\"), max_length=9999, blank=True, null=True)\n\n    def __unicode__ (self):\n        return '%s %s' % (self.title, self.url)\n```\n\n**DRF ModelSerializers:**\n\n``` python\nclass BookmarkSerializer(ModelSerializer):\n    class Meta:\n        model = Bookmark\n        fields = ('id', 'title', 'url', 'person')\n\nclass PersonSerializer(ModelSerializer):\n    bookmarks = BookmarkSerializer(many=True, read_only=True)\n\n    class Meta:\n        model = Person\n        fields = ('id', 'first_name', 'middle_name', 'last_name', 'email', 'bookmarks')\n```\n\n**DRF ModelViewSet:**\n\n``` python\nclass PersonViewSet(viewsets.ModelViewSet):\n    queryset = Person.objects.all()\n    serializer_class = PersonSerializer\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/clarkduvall/serpy/issues/16", "repository_url": "https://api.github.com/repos/clarkduvall/serpy", "labels_url": "https://api.github.com/repos/clarkduvall/serpy/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/clarkduvall/serpy/issues/16/comments", "events_url": "https://api.github.com/repos/clarkduvall/serpy/issues/16/events", "html_url": "https://github.com/clarkduvall/serpy/issues/16", "id": 136669178, "node_id": "MDU6SXNzdWUxMzY2NjkxNzg=", "number": 16, "title": "Context is not set on serializers", "user": {"login": "ahankinson", "id": 163183, "node_id": "MDQ6VXNlcjE2MzE4Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/163183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahankinson", "html_url": "https://github.com/ahankinson", "followers_url": "https://api.github.com/users/ahankinson/followers", "following_url": "https://api.github.com/users/ahankinson/following{/other_user}", "gists_url": "https://api.github.com/users/ahankinson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahankinson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahankinson/subscriptions", "organizations_url": "https://api.github.com/users/ahankinson/orgs", "repos_url": "https://api.github.com/users/ahankinson/repos", "events_url": "https://api.github.com/users/ahankinson/events{/privacy}", "received_events_url": "https://api.github.com/users/ahankinson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-02-26T11:21:55Z", "updated_at": "2016-04-12T01:22:30Z", "closed_at": "2016-04-12T01:22:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a context keyword argument, but values passed there are not set on the object.\n\nSee: https://github.com/clarkduvall/serpy/blob/master/serpy/serializer.py#L87\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/clarkduvall/serpy/issues/14", "repository_url": "https://api.github.com/repos/clarkduvall/serpy", "labels_url": "https://api.github.com/repos/clarkduvall/serpy/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/clarkduvall/serpy/issues/14/comments", "events_url": "https://api.github.com/repos/clarkduvall/serpy/issues/14/events", "html_url": "https://github.com/clarkduvall/serpy/issues/14", "id": 133808496, "node_id": "MDU6SXNzdWUxMzM4MDg0OTY=", "number": 14, "title": "Control over labels", "user": {"login": "ahankinson", "id": 163183, "node_id": "MDQ6VXNlcjE2MzE4Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/163183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahankinson", "html_url": "https://github.com/ahankinson", "followers_url": "https://api.github.com/users/ahankinson/followers", "following_url": "https://api.github.com/users/ahankinson/following{/other_user}", "gists_url": "https://api.github.com/users/ahankinson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahankinson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahankinson/subscriptions", "organizations_url": "https://api.github.com/users/ahankinson/orgs", "repos_url": "https://api.github.com/users/ahankinson/repos", "events_url": "https://api.github.com/users/ahankinson/events{/privacy}", "received_events_url": "https://api.github.com/users/ahankinson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-02-15T20:25:29Z", "updated_at": "2016-02-28T23:57:43Z", "closed_at": "2016-02-28T23:57:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There are cases where an application may need control over the output label where it might differ from the attribute name.\n\nThe case I am working on is a JSON-LD serializer, where labels can start with the `@` prefix: `@id`, `@type`, etc. This is not a valid attribute name in Python, but it should be reflected in the serialized output.\n\nI've tried to get around this with custom subclasses, but adherence to the attribute name as output label is fairly deep in the functioning of the serializer. \n\nSo what I propose is to add an (optional) label to serializer fields, `label`, that would get carried along in the `_compile_field_to_tuple` tuple. If `label` is not `None`, the `_serializer` method uses it as the key in the output instead of `name`. \n\nIf this sounds like something you would find useful, I could put together a pull request and send it upstream.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/clarkduvall/serpy/issues/13", "repository_url": "https://api.github.com/repos/clarkduvall/serpy", "labels_url": "https://api.github.com/repos/clarkduvall/serpy/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/clarkduvall/serpy/issues/13/comments", "events_url": "https://api.github.com/repos/clarkduvall/serpy/issues/13/events", "html_url": "https://github.com/clarkduvall/serpy/issues/13", "id": 126258413, "node_id": "MDU6SXNzdWUxMjYyNTg0MTM=", "number": 13, "title": "Question: RelatedManager (Django)", "user": {"login": "MrChoclate", "id": 4561963, "node_id": "MDQ6VXNlcjQ1NjE5NjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/4561963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MrChoclate", "html_url": "https://github.com/MrChoclate", "followers_url": "https://api.github.com/users/MrChoclate/followers", "following_url": "https://api.github.com/users/MrChoclate/following{/other_user}", "gists_url": "https://api.github.com/users/MrChoclate/gists{/gist_id}", "starred_url": "https://api.github.com/users/MrChoclate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MrChoclate/subscriptions", "organizations_url": "https://api.github.com/users/MrChoclate/orgs", "repos_url": "https://api.github.com/users/MrChoclate/repos", "events_url": "https://api.github.com/users/MrChoclate/events{/privacy}", "received_events_url": "https://api.github.com/users/MrChoclate/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-01-12T19:39:02Z", "updated_at": "2016-02-16T17:04:16Z", "closed_at": "2016-02-16T17:04:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I currently do an ugly hack to serialize object with a RelatedManager attribute.\n\nI got two objects. House and Door. A house have several doors. I want to serialize an house with nested serialization. \n\n``` python\nhome.doors = home.door_set.all()\ndata = HomeSerializer(home).data\n```\n\nI mainly do this because RelatedManager is not iterable. Do you have a better way?\nI would like to use the same serializer for a Door and for a RelatedManager of Door. \n\n``` python\nclass HomeSerializer(serpy.Serializer):\n    door_set = DoorSerializer(many=True)  # Does not work\n```\n\nBut I could not find a proper way to do this. I only start using your lib (which is awesome btw !) yesterday, so I may be missing something.\n\nIt would be great if you can add an example of object with RelatedManager attribute in the documentation.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/clarkduvall/serpy/issues/12", "repository_url": "https://api.github.com/repos/clarkduvall/serpy", "labels_url": "https://api.github.com/repos/clarkduvall/serpy/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/clarkduvall/serpy/issues/12/comments", "events_url": "https://api.github.com/repos/clarkduvall/serpy/issues/12/events", "html_url": "https://github.com/clarkduvall/serpy/issues/12", "id": 125751532, "node_id": "MDU6SXNzdWUxMjU3NTE1MzI=", "number": 12, "title": "accessing request object in method field?", "user": {"login": "philippeluickx", "id": 836866, "node_id": "MDQ6VXNlcjgzNjg2Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/836866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philippeluickx", "html_url": "https://github.com/philippeluickx", "followers_url": "https://api.github.com/users/philippeluickx/followers", "following_url": "https://api.github.com/users/philippeluickx/following{/other_user}", "gists_url": "https://api.github.com/users/philippeluickx/gists{/gist_id}", "starred_url": "https://api.github.com/users/philippeluickx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philippeluickx/subscriptions", "organizations_url": "https://api.github.com/users/philippeluickx/orgs", "repos_url": "https://api.github.com/users/philippeluickx/repos", "events_url": "https://api.github.com/users/philippeluickx/events{/privacy}", "received_events_url": "https://api.github.com/users/philippeluickx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-01-09T10:33:35Z", "updated_at": "2016-01-10T11:43:57Z", "closed_at": "2016-01-10T11:43:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I provide data based on the user that is currently authenticated.\nWith DRF I simply access self.context.request. I see the serializer accepts the context object, but leaves it at None. Is this a choice by design or a feature to be implemented?\nDealbreaker for me in any case.\n\nIn terms of performance testing, FYI I am getting 50% gains compared to DRF. Which is significant and would be great to have in prod...!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/clarkduvall/serpy/issues/10", "repository_url": "https://api.github.com/repos/clarkduvall/serpy", "labels_url": "https://api.github.com/repos/clarkduvall/serpy/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/clarkduvall/serpy/issues/10/comments", "events_url": "https://api.github.com/repos/clarkduvall/serpy/issues/10/events", "html_url": "https://github.com/clarkduvall/serpy/issues/10", "id": 113567443, "node_id": "MDU6SXNzdWUxMTM1Njc0NDM=", "number": 10, "title": "Can't seem to run benchmarks from a clone", "user": {"login": "kezabelle", "id": 118377, "node_id": "MDQ6VXNlcjExODM3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/118377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kezabelle", "html_url": "https://github.com/kezabelle", "followers_url": "https://api.github.com/users/kezabelle/followers", "following_url": "https://api.github.com/users/kezabelle/following{/other_user}", "gists_url": "https://api.github.com/users/kezabelle/gists{/gist_id}", "starred_url": "https://api.github.com/users/kezabelle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kezabelle/subscriptions", "organizations_url": "https://api.github.com/users/kezabelle/orgs", "repos_url": "https://api.github.com/users/kezabelle/repos", "events_url": "https://api.github.com/users/kezabelle/events{/privacy}", "received_events_url": "https://api.github.com/users/kezabelle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-10-27T12:02:46Z", "updated_at": "2015-11-15T04:05:42Z", "closed_at": "2015-11-15T04:05:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Docs say do this:\n\n```\n$ git clone https://github.com/clarkduvall/serpy.git && cd serpy\n$ tox -e benchmarks\n```\n\nSo:\n\n```\n$ mktmpenv --python=`which python3`\n$ python -V\nPython 3.4.3\n$ git clone https://github.com/clarkduvall/serpy.git && cd serpy\n$ pip install -r requirements.txt   # this line is missing from the docs btw\n$ tox -e benchmarks\nGLOB sdist-make: /path/tmp-64a1638fe69a816/serpy/setup.py\nbenchmarks create: /path/tmp-64a1638fe69a816/serpy/.tox/benchmarks\nbenchmarks installdeps: Django==1.7.7, djangorestframework==3.1.1, marshmallow==1.2.4\nbenchmarks inst: /path/tmp-64a1638fe69a816/serpy/.tox/dist/serpy-0.1.0.zip\n...\nTraceback (most recent call last):\n      File \"<string>\", line 20, in <module>\n      File \"/path/pip-ipr7v027-build/setup.py\", line 4, in <module>\n        import serpy\n      File \"/path/pip-ipr7v027-build/serpy/__init__.py\", line 1, in <module>\n        from serpy.fields import (\n      File \"/path/pip-ipr7v027-build/serpy/fields.py\", line 1, in <module>\n        import six\n    ImportError: No module named 'six'\n```\n\nSeems like maybe the `deps` for `testenv` aren't being carried across to `testenv:benchmarks` and nor is the `install_requires` from the `setup.py` being picked up?\n\nOther `tox -e` invocations work fine.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/clarkduvall/serpy/issues/7", "repository_url": "https://api.github.com/repos/clarkduvall/serpy", "labels_url": "https://api.github.com/repos/clarkduvall/serpy/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/clarkduvall/serpy/issues/7/comments", "events_url": "https://api.github.com/repos/clarkduvall/serpy/issues/7/events", "html_url": "https://github.com/clarkduvall/serpy/issues/7", "id": 105574600, "node_id": "MDU6SXNzdWUxMDU1NzQ2MDA=", "number": 7, "title": "REST framework compat.", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-09-09T11:05:05Z", "updated_at": "2015-09-11T17:41:09Z", "closed_at": "2015-09-11T16:50:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Couple of easy API changes that'd make serpy directly compatible with `serializer_class = ...` in the generic views with REST framework.\n- Accept but ignore the `context` argument.\n- Accept but error on the `data` argument, with \"serpy serializers do not support input validation\".\n\n(Anything else I'm missing?)\n\nBe interested to know if you think that'd be worth doing. If so then we could probably link to `serpy` as an alternative for read-only endpoints.\n\nWe'd also want to do a decent job of explaining what use-cases serpy does and doesn't support vs REST framework serializers, but we could address that once we're ready to link to it as an alternative third party package, some obvious points here for later reference:\n- Serialization only, no deserialization.\n- Unordered.\n- No relational types.\n", "performed_via_github_app": null, "score": 1.0}]}