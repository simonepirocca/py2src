{"total_count": 68, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/pypa/pipfile/issues/126", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/126/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/126/events", "html_url": "https://github.com/pypa/pipfile/issues/126", "id": 616471549, "node_id": "MDU6SXNzdWU2MTY0NzE1NDk=", "number": 126, "title": "Security Vulnerability Alerts (in examples/Pipfile.lock)", "user": {"login": "pfmoore", "id": 1110419, "node_id": "MDQ6VXNlcjExMTA0MTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1110419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pfmoore", "html_url": "https://github.com/pfmoore", "followers_url": "https://api.github.com/users/pfmoore/followers", "following_url": "https://api.github.com/users/pfmoore/following{/other_user}", "gists_url": "https://api.github.com/users/pfmoore/gists{/gist_id}", "starred_url": "https://api.github.com/users/pfmoore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pfmoore/subscriptions", "organizations_url": "https://api.github.com/users/pfmoore/orgs", "repos_url": "https://api.github.com/users/pfmoore/repos", "events_url": "https://api.github.com/users/pfmoore/events{/privacy}", "received_events_url": "https://api.github.com/users/pfmoore/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-12T08:39:44Z", "updated_at": "2020-05-15T13:13:14Z", "closed_at": "2020-05-15T13:13:13Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I'm seeing security vulnerability alerts for it that and the last commit was 18 months ago. Is this still being used, or should it be archived somehow?\r\n\r\nAs a PyPA project, I think it should at a minimum be keeping up with security alerts.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/113", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/113/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/113/events", "html_url": "https://github.com/pypa/pipfile/issues/113", "id": 357625435, "node_id": "MDU6SXNzdWUzNTc2MjU0MzU=", "number": 113, "title": "Support install of package options", "user": {"login": "yunti", "id": 1826271, "node_id": "MDQ6VXNlcjE4MjYyNzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1826271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yunti", "html_url": "https://github.com/yunti", "followers_url": "https://api.github.com/users/yunti/followers", "following_url": "https://api.github.com/users/yunti/following{/other_user}", "gists_url": "https://api.github.com/users/yunti/gists{/gist_id}", "starred_url": "https://api.github.com/users/yunti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yunti/subscriptions", "organizations_url": "https://api.github.com/users/yunti/orgs", "repos_url": "https://api.github.com/users/yunti/repos", "events_url": "https://api.github.com/users/yunti/events{/privacy}", "received_events_url": "https://api.github.com/users/yunti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-06T12:08:30Z", "updated_at": "2018-09-06T13:34:48Z", "closed_at": "2018-09-06T13:34:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently when trying to add packages to be installed with pipenv to the pipfile such as\r\n\r\n`django-storages[boto3]`\r\n`django-anymail[mailgun]`\r\n\r\nthese generate a syntax error with the TOML format.\r\n\r\nIt's not clear from the docs (or past issues) whether these are supported or what the alternative should be?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/112", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/112/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/112/events", "html_url": "https://github.com/pypa/pipfile/issues/112", "id": 352118131, "node_id": "MDU6SXNzdWUzNTIxMTgxMzE=", "number": 112, "title": "Feature Request: Nicer way to use PIPENV_VENV_IN_PROJECT", "user": {"login": "iddan", "id": 12671072, "node_id": "MDQ6VXNlcjEyNjcxMDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/12671072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iddan", "html_url": "https://github.com/iddan", "followers_url": "https://api.github.com/users/iddan/followers", "following_url": "https://api.github.com/users/iddan/following{/other_user}", "gists_url": "https://api.github.com/users/iddan/gists{/gist_id}", "starred_url": "https://api.github.com/users/iddan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iddan/subscriptions", "organizations_url": "https://api.github.com/users/iddan/orgs", "repos_url": "https://api.github.com/users/iddan/repos", "events_url": "https://api.github.com/users/iddan/events{/privacy}", "received_events_url": "https://api.github.com/users/iddan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-20T12:44:03Z", "updated_at": "2018-08-20T15:04:31Z", "closed_at": "2018-08-20T15:04:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I feel like `PIPENV_VENV_IN_PROJECT` is a second class citizen in the CLI while it is a common solution in other tools (like PyCharm) and seem like more of an option than an actual environment variable.\r\n\r\nI'd like to propose the syntax:\r\n```bash\r\npipenv --python 3 --in-project;\r\n```\r\n```bash\r\npipenv install --in-project;\r\n```\r\n\r\nInstead of:\r\n\r\n```bash\r\nexport PIPENV_VENV_IN_PROJECT=1;\r\npipenv --python 3;\r\n```\r\n```bash\r\nexport PIPENV_VENV_IN_PROJECT=1;\r\npipenv install;\r\n```\r\n\r\nAnother way to solve this issue is making it the default and managing hidden virtual envs with magic.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/102", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/102/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/102/events", "html_url": "https://github.com/pypa/pipfile/issues/102", "id": 288940339, "node_id": "MDU6SXNzdWUyODg5NDAzMzk=", "number": 102, "title": "pipenv install records versioning as '*' in the Pipfile", "user": {"login": "Dowwie", "id": 2601236, "node_id": "MDQ6VXNlcjI2MDEyMzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2601236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dowwie", "html_url": "https://github.com/Dowwie", "followers_url": "https://api.github.com/users/Dowwie/followers", "following_url": "https://api.github.com/users/Dowwie/following{/other_user}", "gists_url": "https://api.github.com/users/Dowwie/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dowwie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dowwie/subscriptions", "organizations_url": "https://api.github.com/users/Dowwie/orgs", "repos_url": "https://api.github.com/users/Dowwie/repos", "events_url": "https://api.github.com/users/Dowwie/events{/privacy}", "received_events_url": "https://api.github.com/users/Dowwie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-16T15:08:53Z", "updated_at": "2018-01-16T15:48:24Z", "closed_at": "2018-01-16T15:48:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "The version of a package that is installed by pipenv ought to be recorded in the Pipfile.  Instead, pipenv records the version as \"*\" in the Pipefile.\r\n\r\nWhat is the reason for this?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/100", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/100/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/100/events", "html_url": "https://github.com/pypa/pipfile/issues/100", "id": 278006660, "node_id": "MDU6SXNzdWUyNzgwMDY2NjA=", "number": 100, "title": "Pipfile.lock should use flat collection of dependencies", "user": {"login": "taion", "id": 3112159, "node_id": "MDQ6VXNlcjMxMTIxNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3112159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taion", "html_url": "https://github.com/taion", "followers_url": "https://api.github.com/users/taion/followers", "following_url": "https://api.github.com/users/taion/following{/other_user}", "gists_url": "https://api.github.com/users/taion/gists{/gist_id}", "starred_url": "https://api.github.com/users/taion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taion/subscriptions", "organizations_url": "https://api.github.com/users/taion/orgs", "repos_url": "https://api.github.com/users/taion/repos", "events_url": "https://api.github.com/users/taion/events{/privacy}", "received_events_url": "https://api.github.com/users/taion/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-30T05:54:53Z", "updated_at": "2017-12-13T19:15:53Z", "closed_at": "2017-12-13T19:02:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently, `Pipfile.lock` puts groups at top-level, then lists out locked dependencies for each group separately.\r\n\r\nThis is not, for example, how npm or Yarn handle this. Both of those package managers have a flat list of locked packages, with `dev` as a flag for each package.\r\n\r\nThe latter setup is superior, as it would make it structurally impossible to have version conflicts in the lockfile per https://github.com/kennethreitz/pipenv/issues/1137.\r\n\r\nAs such, `Pipfile.lock` should use a flat collection of dependencies, as by construction it should not be possible for locked default and development to conflict, as that would give rise to inconsistencies and unsatisfied transitive dependencies.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/97", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/97/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/97/events", "html_url": "https://github.com/pypa/pipfile/issues/97", "id": 276616320, "node_id": "MDU6SXNzdWUyNzY2MTYzMjA=", "number": 97, "title": "Using pipfile from distutils", "user": {"login": "waghanza", "id": 1440729, "node_id": "MDQ6VXNlcjE0NDA3Mjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1440729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/waghanza", "html_url": "https://github.com/waghanza", "followers_url": "https://api.github.com/users/waghanza/followers", "following_url": "https://api.github.com/users/waghanza/following{/other_user}", "gists_url": "https://api.github.com/users/waghanza/gists{/gist_id}", "starred_url": "https://api.github.com/users/waghanza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/waghanza/subscriptions", "organizations_url": "https://api.github.com/users/waghanza/orgs", "repos_url": "https://api.github.com/users/waghanza/repos", "events_url": "https://api.github.com/users/waghanza/events{/privacy}", "received_events_url": "https://api.github.com/users/waghanza/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-24T13:25:20Z", "updated_at": "2017-12-13T19:03:10Z", "closed_at": "2017-12-13T19:03:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI found this **awesome** project to clearly manage requirements for a `python` project.\r\n\r\nThe actual `requirements.txt` file could be used to give **requirements** to install on `setup.py`.\r\n\r\nIn my `setup.py` file, I am doing\r\n\r\n~~~python\r\ninstall_requires=open('requirements.txt').readlines()\r\n~~~\r\n\r\nI want to do this to manage my dependencies in one place.\r\n\r\nHowever, with `pipenv` I have to do\r\n\r\n~~~python\r\ninstall_requires=toml.loads(open('Pipfile').read())['packages'].keys()\r\n~~~\r\n\r\nWhich requires `toml` module to be installed.\r\n\r\nIs there any workaround ?\r\n\r\nRegards,", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/96", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/96/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/96/events", "html_url": "https://github.com/pypa/pipfile/issues/96", "id": 276181472, "node_id": "MDU6SXNzdWUyNzYxODE0NzI=", "number": 96, "title": "[idea] Support env variable expansion", "user": {"login": "jakekdodd", "id": 6845693, "node_id": "MDQ6VXNlcjY4NDU2OTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6845693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakekdodd", "html_url": "https://github.com/jakekdodd", "followers_url": "https://api.github.com/users/jakekdodd/followers", "following_url": "https://api.github.com/users/jakekdodd/following{/other_user}", "gists_url": "https://api.github.com/users/jakekdodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakekdodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakekdodd/subscriptions", "organizations_url": "https://api.github.com/users/jakekdodd/orgs", "repos_url": "https://api.github.com/users/jakekdodd/repos", "events_url": "https://api.github.com/users/jakekdodd/events{/privacy}", "received_events_url": "https://api.github.com/users/jakekdodd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-22T19:28:50Z", "updated_at": "2018-07-19T15:23:44Z", "closed_at": "2018-07-19T15:23:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think support for environment variable expansion in Pipfiles would be a nice middle ground between a spec that's an executable, and one that's a plain ol' flat file (as it is now). I'm already running into issues and frustrations with Pipfile-based projects due to the spec's completely static nature.\r\n\r\nOne objection I can anticipate is that environment variable expansion is not within the TOML spec. However, support for expansion at the TOML implementation/library/application layer is exactly the approach [suggested by Tom himself](https://github.com/toml-lang/toml/issues/255#issuecomment-62277325).\r\n\r\nI'm conscious of the goal to keep the spec minimal and bloat-free\u2014but I think this is an addition seriously worth considering.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/93", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/93/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/93/events", "html_url": "https://github.com/pypa/pipfile/issues/93", "id": 275069009, "node_id": "MDU6SXNzdWUyNzUwNjkwMDk=", "number": 93, "title": "editable line to use egg packagage", "user": {"login": "gsemet", "id": 133498, "node_id": "MDQ6VXNlcjEzMzQ5OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/133498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gsemet", "html_url": "https://github.com/gsemet", "followers_url": "https://api.github.com/users/gsemet/followers", "following_url": "https://api.github.com/users/gsemet/following{/other_user}", "gists_url": "https://api.github.com/users/gsemet/gists{/gist_id}", "starred_url": "https://api.github.com/users/gsemet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gsemet/subscriptions", "organizations_url": "https://api.github.com/users/gsemet/orgs", "repos_url": "https://api.github.com/users/gsemet/repos", "events_url": "https://api.github.com/users/gsemet/events{/privacy}", "received_events_url": "https://api.github.com/users/gsemet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-11-18T10:10:38Z", "updated_at": "2018-04-07T10:55:28Z", "closed_at": "2017-12-01T01:24:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\n\r\nI would like to propose the following amendement for the equivalent of `pip install -e .`\r\n\r\nInstead of:\r\n```\r\n\"e1839a8\" = {path = \".\", editable = true}\r\n```\r\n\r\nI would like to have:\r\n```\r\n\"mypackage\" = {path = \".\", editable = true}\r\n```\r\nThis would allow to get directly the name of the egg I am working on only by reading the Pipfile", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/91", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/91/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/91/events", "html_url": "https://github.com/pypa/pipfile/issues/91", "id": 273921396, "node_id": "MDU6SXNzdWUyNzM5MjEzOTY=", "number": 91, "title": "Question - Pipfile usage: From dev to production", "user": {"login": "vphilippon", "id": 2819376, "node_id": "MDQ6VXNlcjI4MTkzNzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2819376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vphilippon", "html_url": "https://github.com/vphilippon", "followers_url": "https://api.github.com/users/vphilippon/followers", "following_url": "https://api.github.com/users/vphilippon/following{/other_user}", "gists_url": "https://api.github.com/users/vphilippon/gists{/gist_id}", "starred_url": "https://api.github.com/users/vphilippon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vphilippon/subscriptions", "organizations_url": "https://api.github.com/users/vphilippon/orgs", "repos_url": "https://api.github.com/users/vphilippon/repos", "events_url": "https://api.github.com/users/vphilippon/events{/privacy}", "received_events_url": "https://api.github.com/users/vphilippon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-14T19:53:33Z", "updated_at": "2017-11-14T20:33:38Z", "closed_at": "2017-11-14T19:56:02Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I've been thinking about the usage of `Pipfile`, and this question kept bugging me:\r\nIs the `Pipfile` for a project meant to be the same file used both for the dev and prod environments (and any other environment, like QA setups and such, if it applies)?\r\n\r\nIf yes, how do you do so? \r\nIn development, users will usually install one (or many) packages in editable mode, which doesn't match how it should be installed when in production.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/90", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/90/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/90/events", "html_url": "https://github.com/pypa/pipfile/issues/90", "id": 270742503, "node_id": "MDU6SXNzdWUyNzA3NDI1MDM=", "number": 90, "title": "How to install from local folder?", "user": {"login": "wooyek", "id": 222570, "node_id": "MDQ6VXNlcjIyMjU3MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/222570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wooyek", "html_url": "https://github.com/wooyek", "followers_url": "https://api.github.com/users/wooyek/followers", "following_url": "https://api.github.com/users/wooyek/following{/other_user}", "gists_url": "https://api.github.com/users/wooyek/gists{/gist_id}", "starred_url": "https://api.github.com/users/wooyek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wooyek/subscriptions", "organizations_url": "https://api.github.com/users/wooyek/orgs", "repos_url": "https://api.github.com/users/wooyek/repos", "events_url": "https://api.github.com/users/wooyek/events{/privacy}", "received_events_url": "https://api.github.com/users/wooyek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-11-02T17:35:02Z", "updated_at": "2020-03-31T23:48:25Z", "closed_at": "2017-12-13T19:03:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "We use internal proprietary libraries and we found that:\r\n\r\n1. putting `--find-links=requirements/local` int `requirement.in`, \r\n2. listing  an unfreezed proprietary dependency in a `requirement.in`,\r\n3. dropping a proper package version `whl` file in `requirements/local` project folder,\r\n4. freezing versions in `requirements.txt` file just before release with `pip-compile`,\r\n5. and shipping `requirements/local` folder contents to the server with project.\r\n\r\nis the most easy solution for using private libraries. No need to setup private pypi server/source and use that securely.\r\n\r\nWhen dependency has a newer version that we want we just drop this dependency `whl` file new version in the `requirements/local` and remove the old file. No need to update `requirements.in` by hand, update dependency path or whatever. This is also an easy update to be made by scripts, just delete old `requirements/local/dependency-*.whl` and put a new one, no need to parse and replace destination requirement files.\r\n\r\nI was wondering how to recreate this with `Pipfile`. I was trying to do it with `[[source]]` but I'm not sure how to point to a project relative `requirements/local` folder in `url` attribute.\r\n\r\nIs it doable? Can I somehow recreate `--find-links=requirements/local` effect in Pipfile?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/86", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/86/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/86/events", "html_url": "https://github.com/pypa/pipfile/issues/86", "id": 265838784, "node_id": "MDU6SXNzdWUyNjU4Mzg3ODQ=", "number": 86, "title": "site documentation is not found", "user": {"login": "gutierri", "id": 1111356, "node_id": "MDQ6VXNlcjExMTEzNTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1111356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gutierri", "html_url": "https://github.com/gutierri", "followers_url": "https://api.github.com/users/gutierri/followers", "following_url": "https://api.github.com/users/gutierri/following{/other_user}", "gists_url": "https://api.github.com/users/gutierri/gists{/gist_id}", "starred_url": "https://api.github.com/users/gutierri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gutierri/subscriptions", "organizations_url": "https://api.github.com/users/gutierri/orgs", "repos_url": "https://api.github.com/users/gutierri/repos", "events_url": "https://api.github.com/users/gutierri/events{/privacy}", "received_events_url": "https://api.github.com/users/gutierri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-16T16:48:10Z", "updated_at": "2017-12-15T01:24:00Z", "closed_at": "2017-12-13T19:03:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://pipfile.pypa.io/ - Server Not found", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/85", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/85/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/85/events", "html_url": "https://github.com/pypa/pipfile/issues/85", "id": 263172503, "node_id": "MDU6SXNzdWUyNjMxNzI1MDM=", "number": 85, "title": "Import / include settings from other files by reference", "user": {"login": "brianmhunt", "id": 135528, "node_id": "MDQ6VXNlcjEzNTUyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/135528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianmhunt", "html_url": "https://github.com/brianmhunt", "followers_url": "https://api.github.com/users/brianmhunt/followers", "following_url": "https://api.github.com/users/brianmhunt/following{/other_user}", "gists_url": "https://api.github.com/users/brianmhunt/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianmhunt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianmhunt/subscriptions", "organizations_url": "https://api.github.com/users/brianmhunt/orgs", "repos_url": "https://api.github.com/users/brianmhunt/repos", "events_url": "https://api.github.com/users/brianmhunt/events{/privacy}", "received_events_url": "https://api.github.com/users/brianmhunt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-05T15:39:36Z", "updated_at": "2017-10-23T18:24:40Z", "closed_at": "2017-10-06T17:25:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Putting common settings into a separate file and including them by reference can simplify config files, aid in clarity, and improve reusability.\r\n\r\nA potential format might be e.g.\r\n\r\n```toml\r\n# Include everything\r\n[[include]]\r\nsource = \"../UseEverything\"\r\n\r\n# Include only specific parts\r\n[[include]]\r\nsource = \"../OnlyRequires\"\r\nparts = ['requires']\r\n\r\n# Link from the Internet\r\n[[include]]\r\nsource = \"https://example.com/someInternetSettings\"\r\nsha256 = \"edeaaff3f1774ad2888673770c6d64097e391bc362d7d6fb34982ddf0efd18cb\"\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/82", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/82/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/82/events", "html_url": "https://github.com/pypa/pipfile/issues/82", "id": 258653019, "node_id": "MDU6SXNzdWUyNTg2NTMwMTk=", "number": 82, "title": "Is .lock a poor choice on UNIX systems?", "user": {"login": "philtay", "id": 7722913, "node_id": "MDQ6VXNlcjc3MjI5MTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/7722913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philtay", "html_url": "https://github.com/philtay", "followers_url": "https://api.github.com/users/philtay/followers", "following_url": "https://api.github.com/users/philtay/following{/other_user}", "gists_url": "https://api.github.com/users/philtay/gists{/gist_id}", "starred_url": "https://api.github.com/users/philtay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philtay/subscriptions", "organizations_url": "https://api.github.com/users/philtay/orgs", "repos_url": "https://api.github.com/users/philtay/repos", "events_url": "https://api.github.com/users/philtay/events{/privacy}", "received_events_url": "https://api.github.com/users/philtay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-18T23:39:12Z", "updated_at": "2017-09-19T00:17:59Z", "closed_at": "2017-09-19T00:17:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Have a look [here](https://github.com/golang/dep/issues/1139) and [here](https://github.com/bundler/bundler/issues/694).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/81", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/81/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/81/events", "html_url": "https://github.com/pypa/pipfile/issues/81", "id": 258245880, "node_id": "MDU6SXNzdWUyNTgyNDU4ODA=", "number": 81, "title": "Why source is an array and why is it needed?", "user": {"login": "Woile", "id": 2585816, "node_id": "MDQ6VXNlcjI1ODU4MTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2585816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Woile", "html_url": "https://github.com/Woile", "followers_url": "https://api.github.com/users/Woile/followers", "following_url": "https://api.github.com/users/Woile/following{/other_user}", "gists_url": "https://api.github.com/users/Woile/gists{/gist_id}", "starred_url": "https://api.github.com/users/Woile/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Woile/subscriptions", "organizations_url": "https://api.github.com/users/Woile/orgs", "repos_url": "https://api.github.com/users/Woile/repos", "events_url": "https://api.github.com/users/Woile/events{/privacy}", "received_events_url": "https://api.github.com/users/Woile/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-16T17:24:58Z", "updated_at": "2017-10-27T21:50:43Z", "closed_at": "2017-09-16T17:26:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys, I would like to understand why we are using this, and why source is an array:\r\n```\r\n[[source]]\r\nurl = \"https://pypi.python.org/simple\"\r\nverify_ssl = true\r\n```\r\ninstead of something straightforwards like:\r\n```\r\nurl = \"https://pypi.python.org/simple\"\r\nverify_ssl = true\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/80", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/80/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/80/events", "html_url": "https://github.com/pypa/pipfile/issues/80", "id": 256908391, "node_id": "MDU6SXNzdWUyNTY5MDgzOTE=", "number": 80, "title": "Is there an estimate on when pip will support Pipfile?", "user": {"login": "ofek", "id": 9677399, "node_id": "MDQ6VXNlcjk2NzczOTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/9677399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ofek", "html_url": "https://github.com/ofek", "followers_url": "https://api.github.com/users/ofek/followers", "following_url": "https://api.github.com/users/ofek/following{/other_user}", "gists_url": "https://api.github.com/users/ofek/gists{/gist_id}", "starred_url": "https://api.github.com/users/ofek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ofek/subscriptions", "organizations_url": "https://api.github.com/users/ofek/orgs", "repos_url": "https://api.github.com/users/ofek/repos", "events_url": "https://api.github.com/users/ofek/events{/privacy}", "received_events_url": "https://api.github.com/users/ofek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-12T03:40:30Z", "updated_at": "2019-01-23T08:04:22Z", "closed_at": "2017-09-16T17:26:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/79", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/79/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/79/events", "html_url": "https://github.com/pypa/pipfile/issues/79", "id": 254883682, "node_id": "MDU6SXNzdWUyNTQ4ODM2ODI=", "number": 79, "title": "Shouldn't python_version support version ranges?", "user": {"login": "grv87", "id": 2035596, "node_id": "MDQ6VXNlcjIwMzU1OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2035596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grv87", "html_url": "https://github.com/grv87", "followers_url": "https://api.github.com/users/grv87/followers", "following_url": "https://api.github.com/users/grv87/following{/other_user}", "gists_url": "https://api.github.com/users/grv87/gists{/gist_id}", "starred_url": "https://api.github.com/users/grv87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grv87/subscriptions", "organizations_url": "https://api.github.com/users/grv87/orgs", "repos_url": "https://api.github.com/users/grv87/repos", "events_url": "https://api.github.com/users/grv87/events{/privacy}", "received_events_url": "https://api.github.com/users/grv87/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-03T16:07:08Z", "updated_at": "2017-09-16T17:27:20Z", "closed_at": "2017-09-16T17:27:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "E.g. pessimistic:\r\n```\r\n[requires]\r\npython_version = '~= 3.0'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/78", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/78/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/78/events", "html_url": "https://github.com/pypa/pipfile/issues/78", "id": 249932005, "node_id": "MDU6SXNzdWUyNDk5MzIwMDU=", "number": 78, "title": "Why is Pipfile toml and other questions?", "user": {"login": "amjith", "id": 49260, "node_id": "MDQ6VXNlcjQ5MjYw", "avatar_url": "https://avatars1.githubusercontent.com/u/49260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amjith", "html_url": "https://github.com/amjith", "followers_url": "https://api.github.com/users/amjith/followers", "following_url": "https://api.github.com/users/amjith/following{/other_user}", "gists_url": "https://api.github.com/users/amjith/gists{/gist_id}", "starred_url": "https://api.github.com/users/amjith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amjith/subscriptions", "organizations_url": "https://api.github.com/users/amjith/orgs", "repos_url": "https://api.github.com/users/amjith/repos", "events_url": "https://api.github.com/users/amjith/events{/privacy}", "received_events_url": "https://api.github.com/users/amjith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-14T04:44:04Z", "updated_at": "2017-08-15T07:29:18Z", "closed_at": "2017-08-14T21:06:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm interested in this project. I'd like to understand the reasoning behind some of the design decisions. I had asked the following questions in the #pypa irc channel. But I figured this is an appropriate forum for them.\r\n\r\n* Why is the Pipfile a `toml` file instead of a JSON?\r\n* Since pipfile is inspired by yarn and cargo, is there a plan to support a more holistic approach to packaging? Such as `init`, `publish`, `test`, `run`, `build` etc?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/77", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/77/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/77/events", "html_url": "https://github.com/pypa/pipfile/issues/77", "id": 241928739, "node_id": "MDU6SXNzdWUyNDE5Mjg3Mzk=", "number": 77, "title": "How to specify a second pypi-type repository", "user": {"login": "rkhwaja", "id": 511154, "node_id": "MDQ6VXNlcjUxMTE1NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/511154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkhwaja", "html_url": "https://github.com/rkhwaja", "followers_url": "https://api.github.com/users/rkhwaja/followers", "following_url": "https://api.github.com/users/rkhwaja/following{/other_user}", "gists_url": "https://api.github.com/users/rkhwaja/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkhwaja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkhwaja/subscriptions", "organizations_url": "https://api.github.com/users/rkhwaja/orgs", "repos_url": "https://api.github.com/users/rkhwaja/repos", "events_url": "https://api.github.com/users/rkhwaja/events{/privacy}", "received_events_url": "https://api.github.com/users/rkhwaja/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-11T05:27:15Z", "updated_at": "2017-09-16T17:27:42Z", "closed_at": "2017-09-16T17:27:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have\r\n`[[source]]\r\nurl = \"https://pypi.python.org/simple\"`\r\n\r\nHow do I specify a second source for a private repository?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/76", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/76/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/76/events", "html_url": "https://github.com/pypa/pipfile/issues/76", "id": 237888163, "node_id": "MDU6SXNzdWUyMzc4ODgxNjM=", "number": 76, "title": "Consider indicating sub-dependencies in pipfile package list", "user": {"login": "elanorigby", "id": 6318948, "node_id": "MDQ6VXNlcjYzMTg5NDg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6318948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elanorigby", "html_url": "https://github.com/elanorigby", "followers_url": "https://api.github.com/users/elanorigby/followers", "following_url": "https://api.github.com/users/elanorigby/following{/other_user}", "gists_url": "https://api.github.com/users/elanorigby/gists{/gist_id}", "starred_url": "https://api.github.com/users/elanorigby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elanorigby/subscriptions", "organizations_url": "https://api.github.com/users/elanorigby/orgs", "repos_url": "https://api.github.com/users/elanorigby/repos", "events_url": "https://api.github.com/users/elanorigby/events{/privacy}", "received_events_url": "https://api.github.com/users/elanorigby/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-06-22T15:39:37Z", "updated_at": "2017-09-02T18:01:03Z", "closed_at": "2017-09-02T18:01:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "pipdeptree style\r\n\r\n```\r\npipdeptree==0.10.1\r\n  - pip [required: >=6.0.0, installed: 9.0.1]\r\nSphinx==1.6.2\r\n  - alabaster [required: >=0.7,<0.8, installed: 0.7.10]\r\n  - babel [required: !=2.0,>=1.3, installed: 2.4.0]\r\n    - pytz [required: >=0a, installed: 2017.2]\r\n  - docutils [required: >=0.11, installed: 0.13.1]\r\n  - imagesize [required: Any, installed: 0.7.1]\r\n  - Jinja2 [required: >=2.3, installed: 2.9.6]\r\n    - MarkupSafe [required: >=0.23, installed: 1.0]\r\n  - Pygments [required: >=2.0, installed: 2.2.0]\r\n  - requests [required: >=2.0.0, installed: 2.17.3]\r\n    - certifi [required: >=2017.4.17, installed: 2017.4.17]\r\n    - chardet [required: >=3.0.2,<3.1.0, installed: 3.0.3]\r\n    - idna [required: <2.6,>=2.5, installed: 2.5]\r\n    - urllib3 [required: >=1.21.1,<1.22, installed: 1.21.1]\r\n  - setuptools [required: Any, installed: 36.0.1]\r\n  - six [required: >=1.5, installed: 1.10.0]\r\n  - snowballstemmer [required: >=1.1, installed: 1.2.1]\r\n  - sphinxcontrib-websupport [required: Any, installed: 1.0.1]\r\n``` \r\n\r\nis more friendly and explicit than\r\n\r\n```\r\nalabaster = \"==0.7.10\"\r\nBabel = \"==2.4.0\"\r\ncertifi = \"==2017.4.17\"\r\nchardet = \"==3.0.3\"\r\ndocutils = \"==0.13.1\"\r\nidna = \"==2.5\"\r\nimagesize = \"==0.7.1\"\r\nJinja2 = \"==2.9.6\"\r\nMarkupSafe = \"==1.0\"\r\npipdeptree = \"==0.10.1\"\r\nPygments = \"==2.2.0\"\r\npytz = \"==2017.2\"\r\nrequests = \"==2.17.3\"\r\nsnowballstemmer = \"==1.2.1\"\r\nSphinx = \"==1.6.2\"\r\nsphinxcontrib-websupport = \"==1.0.1\"\r\nurllib3 = \"==1.21.1\"\r\n```\r\n\r\nI'm not saying copy the syntax, just the idea of showing which package installed / is dependent upon which package. It is nice.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/74", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/74/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/74/events", "html_url": "https://github.com/pypa/pipfile/issues/74", "id": 231797386, "node_id": "MDU6SXNzdWUyMzE3OTczODY=", "number": 74, "title": "How to deploy ranged version for library", "user": {"login": "gsemet", "id": 133498, "node_id": "MDQ6VXNlcjEzMzQ5OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/133498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gsemet", "html_url": "https://github.com/gsemet", "followers_url": "https://api.github.com/users/gsemet/followers", "following_url": "https://api.github.com/users/gsemet/following{/other_user}", "gists_url": "https://api.github.com/users/gsemet/gists{/gist_id}", "starred_url": "https://api.github.com/users/gsemet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gsemet/subscriptions", "organizations_url": "https://api.github.com/users/gsemet/orgs", "repos_url": "https://api.github.com/users/gsemet/repos", "events_url": "https://api.github.com/users/gsemet/events{/privacy}", "received_events_url": "https://api.github.com/users/gsemet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-27T12:09:10Z", "updated_at": "2017-09-02T17:58:50Z", "closed_at": "2017-09-02T17:58:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\n\r\nI differential python library to \"application\". A library ends up typically on pypi to be used by another application. One should never do a `pip install thislibrary` in production. Should comes from a `pip install thisapplication` that consequently install other apps and libraries.\r\n\r\nFor me, application should indeed have frozen dependencies, to ensure perfect reproduction. But libraries deployed on pypi should better be using \"range\" for acceptable version. For exemple, if two libraries depends on frozen version of another lib (say `1.0` and `2.0`), there will be a conflict. Libraries dependencies are better described with range (I know my lib will work with this dependencies from version `1.0` to `3.0`, or require a version `>1.1`, and so on).\r\n\r\nIs it possible to do this with the pipfile and how? It is possible to describe this subtility in the documentation? \"How to handle dependencies of a library or an application\" ?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/73", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/73/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/73/events", "html_url": "https://github.com/pypa/pipfile/issues/73", "id": 230199647, "node_id": "MDU6SXNzdWUyMzAxOTk2NDc=", "number": 73, "title": "Support for requiring packages at install time", "user": {"login": "bocklund", "id": 7681751, "node_id": "MDQ6VXNlcjc2ODE3NTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/7681751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bocklund", "html_url": "https://github.com/bocklund", "followers_url": "https://api.github.com/users/bocklund/followers", "following_url": "https://api.github.com/users/bocklund/following{/other_user}", "gists_url": "https://api.github.com/users/bocklund/gists{/gist_id}", "starred_url": "https://api.github.com/users/bocklund/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bocklund/subscriptions", "organizations_url": "https://api.github.com/users/bocklund/orgs", "repos_url": "https://api.github.com/users/bocklund/repos", "events_url": "https://api.github.com/users/bocklund/events{/privacy}", "received_events_url": "https://api.github.com/users/bocklund/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-21T06:04:21Z", "updated_at": "2017-09-02T17:32:55Z", "closed_at": "2017-09-02T17:32:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there support or planned support for installing packages *before* installation the current package (at build time), such as Cython or NumPy, as described in https://www.python.org/dev/peps/pep-0518/", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/72", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/72/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/72/events", "html_url": "https://github.com/pypa/pipfile/issues/72", "id": 226858529, "node_id": "MDU6SXNzdWUyMjY4NTg1Mjk=", "number": 72, "title": "Add usage to readme", "user": {"login": "npentrel", "id": 5212232, "node_id": "MDQ6VXNlcjUyMTIyMzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5212232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npentrel", "html_url": "https://github.com/npentrel", "followers_url": "https://api.github.com/users/npentrel/followers", "following_url": "https://api.github.com/users/npentrel/following{/other_user}", "gists_url": "https://api.github.com/users/npentrel/gists{/gist_id}", "starred_url": "https://api.github.com/users/npentrel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npentrel/subscriptions", "organizations_url": "https://api.github.com/users/npentrel/orgs", "repos_url": "https://api.github.com/users/npentrel/repos", "events_url": "https://api.github.com/users/npentrel/events{/privacy}", "received_events_url": "https://api.github.com/users/npentrel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-07T13:12:57Z", "updated_at": "2017-09-02T17:05:04Z", "closed_at": "2017-09-02T17:04:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been looking for about 15 minutes now after discovering a Pipfile in a project I was looking at. I can't figure out how to use it. Maybe you could add a simple example usage to your readme? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/70", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/70/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/70/events", "html_url": "https://github.com/pypa/pipfile/issues/70", "id": 211528097, "node_id": "MDU6SXNzdWUyMTE1MjgwOTc=", "number": 70, "title": "Custom Pipfile naming", "user": {"login": "jontonsoup", "id": 845636, "node_id": "MDQ6VXNlcjg0NTYzNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/845636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jontonsoup", "html_url": "https://github.com/jontonsoup", "followers_url": "https://api.github.com/users/jontonsoup/followers", "following_url": "https://api.github.com/users/jontonsoup/following{/other_user}", "gists_url": "https://api.github.com/users/jontonsoup/gists{/gist_id}", "starred_url": "https://api.github.com/users/jontonsoup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jontonsoup/subscriptions", "organizations_url": "https://api.github.com/users/jontonsoup/orgs", "repos_url": "https://api.github.com/users/jontonsoup/repos", "events_url": "https://api.github.com/users/jontonsoup/events{/privacy}", "received_events_url": "https://api.github.com/users/jontonsoup/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-02T21:46:52Z", "updated_at": "2017-09-02T17:58:37Z", "closed_at": "2017-09-02T17:58:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to give a custom name for Pipfiles? \r\n\r\nSee here for context: \r\nhttps://github.com/kennethreitz/pipenv/issues/248", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/69", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/69/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/69/events", "html_url": "https://github.com/pypa/pipfile/issues/69", "id": 210200919, "node_id": "MDU6SXNzdWUyMTAyMDA5MTk=", "number": 69, "title": "Outdated README example?", "user": {"login": "haochi", "id": 351715, "node_id": "MDQ6VXNlcjM1MTcxNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/351715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haochi", "html_url": "https://github.com/haochi", "followers_url": "https://api.github.com/users/haochi/followers", "following_url": "https://api.github.com/users/haochi/following{/other_user}", "gists_url": "https://api.github.com/users/haochi/gists{/gist_id}", "starred_url": "https://api.github.com/users/haochi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haochi/subscriptions", "organizations_url": "https://api.github.com/users/haochi/orgs", "repos_url": "https://api.github.com/users/haochi/repos", "events_url": "https://api.github.com/users/haochi/events{/privacy}", "received_events_url": "https://api.github.com/users/haochi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-25T01:49:39Z", "updated_at": "2017-09-02T17:18:03Z", "closed_at": "2017-09-02T17:17:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the README, the `develop` and `default` are both JSON arrays, but in the `Pipfile.lock` file in the `examples` folder, they are objects. e.g.\r\n\r\n[README](https://github.com/pypa/pipfile/blob/036e3c7162b0a9742bd0bb719e36ef5d3834db30/README.rst#pipfilelock):\r\n```json\r\n    \"development\": [\r\n        {\"name\": \"nose\", \"version\": \"1.3.7\", \"hash\": \"...\"},\r\n    ]\r\n```\r\n\r\n[examples/Pipfile.lock](https://github.com/pypa/pipfile/blob/b05485daf7784b5b7df65828ae56cfedbd007996/examples/Pipfile.lock):\r\n```\r\n    \"develop\": {\r\n        \"nose\": {\r\n            \"version\": \"==1.3.7\",\r\n            \"hash\": \"sha256:dadcddc0aefbf99eea214e0f1232b94f2fa9bd98fa8353711dacb112bfcbbb2a\"\r\n        }\r\n    }\r\n```\r\n\r\nShould it be assumed that the one `examples/Pipfile.lock` is the current spec since that's the generated format?\r\n\r\nAlso one is `development` and the other is `develop`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/68", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/68/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/68/events", "html_url": "https://github.com/pypa/pipfile/issues/68", "id": 206998946, "node_id": "MDU6SXNzdWUyMDY5OTg5NDY=", "number": 68, "title": "How should Extra-index-url be treated in Pipfile?", "user": {"login": "arruda", "id": 369058, "node_id": "MDQ6VXNlcjM2OTA1OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/369058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arruda", "html_url": "https://github.com/arruda", "followers_url": "https://api.github.com/users/arruda/followers", "following_url": "https://api.github.com/users/arruda/following{/other_user}", "gists_url": "https://api.github.com/users/arruda/gists{/gist_id}", "starred_url": "https://api.github.com/users/arruda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arruda/subscriptions", "organizations_url": "https://api.github.com/users/arruda/orgs", "repos_url": "https://api.github.com/users/arruda/repos", "events_url": "https://api.github.com/users/arruda/events{/privacy}", "received_events_url": "https://api.github.com/users/arruda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-02-11T18:37:34Z", "updated_at": "2017-02-11T18:50:19Z", "closed_at": "2017-02-11T18:43:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Will it be just another entry in `[[source]]` with a boolean `extra=True`?\r\nOr pipfile will consider extra-index-url to be just like any other source? if so, anything that uses Pipfile will have to do some try/excepts to see if the current package is present in each of the listed sources (because some of them can be a extra, and contain just some specific listed packages)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/67", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/67/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/67/events", "html_url": "https://github.com/pypa/pipfile/issues/67", "id": 205714257, "node_id": "MDU6SXNzdWUyMDU3MTQyNTc=", "number": 67, "title": "[request] Another release on pypi", "user": {"login": "AleksanderGondek", "id": 6681509, "node_id": "MDQ6VXNlcjY2ODE1MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/6681509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AleksanderGondek", "html_url": "https://github.com/AleksanderGondek", "followers_url": "https://api.github.com/users/AleksanderGondek/followers", "following_url": "https://api.github.com/users/AleksanderGondek/following{/other_user}", "gists_url": "https://api.github.com/users/AleksanderGondek/gists{/gist_id}", "starred_url": "https://api.github.com/users/AleksanderGondek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AleksanderGondek/subscriptions", "organizations_url": "https://api.github.com/users/AleksanderGondek/orgs", "repos_url": "https://api.github.com/users/AleksanderGondek/repos", "events_url": "https://api.github.com/users/AleksanderGondek/events{/privacy}", "received_events_url": "https://api.github.com/users/AleksanderGondek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-06T21:33:41Z", "updated_at": "2017-09-02T22:58:55Z", "closed_at": "2017-09-02T22:58:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Could we please consider releasing another version on [pypi](https://pypi.python.org/pypi/pipfile), which incorporates [changes]( https://github.com/pypa/pipfile/commit/eed9a35b56fbd14233a792c7a3dc920989388193) allowing for it to work better in Windows environment? \r\n\r\nThis would greatly help in allowing basic functionality in pipenv on Windows.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/66", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/66/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/66/events", "html_url": "https://github.com/pypa/pipfile/issues/66", "id": 205622783, "node_id": "MDU6SXNzdWUyMDU2MjI3ODM=", "number": 66, "title": "installing packages from git broken", "user": {"login": "evertlammerts", "id": 2683350, "node_id": "MDQ6VXNlcjI2ODMzNTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/2683350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evertlammerts", "html_url": "https://github.com/evertlammerts", "followers_url": "https://api.github.com/users/evertlammerts/followers", "following_url": "https://api.github.com/users/evertlammerts/following{/other_user}", "gists_url": "https://api.github.com/users/evertlammerts/gists{/gist_id}", "starred_url": "https://api.github.com/users/evertlammerts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evertlammerts/subscriptions", "organizations_url": "https://api.github.com/users/evertlammerts/orgs", "repos_url": "https://api.github.com/users/evertlammerts/repos", "events_url": "https://api.github.com/users/evertlammerts/events{/privacy}", "received_events_url": "https://api.github.com/users/evertlammerts/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-06T15:42:52Z", "updated_at": "2017-02-06T16:02:54Z", "closed_at": "2017-02-06T16:02:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Fresh install:\r\n\r\n```\r\n$ pipenv --version\r\npipenv, version 3.3.6\r\n```\r\n\r\nSimple Pipfile:\r\n\r\n```\r\n$ cat Pipfile\r\n[[source]]\r\nurl = \"https://pypi.python.org/simple\"\r\nverify_ssl = true\r\n\r\n[packages]\r\ncrayons = { git=\"https://github.com/kennethreitz/crayons.git\", ref=\"v0.1.2\" }\r\n```\r\n\r\nCreate lock file:\r\n\r\n```\r\n$ pipenv lock\r\nCreating a virtualenv for this project...\r\n[...]\r\nLocking [dev-packages] dependencies...\r\nLocking [packages] dependencies...\r\nUpdated Pipfile.lock!\r\n```\r\n\r\n... which generates this:\r\n\r\n```\r\n$ cat Pipfile.lock\r\n{\r\n    \"_meta\": {\r\n        \"hash\": {\r\n            \"sha256\": \"39b2447b7dd6976804de490321577a2db0f4fc4327e0795a93436ea69afad9a8\"\r\n        },\r\n        \"requires\": {},\r\n        \"sources\": [\r\n            {\r\n                \"verify_ssl\": true,\r\n                \"url\": \"https://pypi.python.org/simple\"\r\n            }\r\n        ]\r\n    },\r\n    \"default\": {\r\n        \"crayons from git+https://github.com/kennethreitz/crayons.git@v0.1.2#egg=crayons\": {\r\n            \"hash\": \"sha256:a292b7ef29131345fd329ff5a94d1e2e59569be4dbd9fa8b99ff7114d72102a6\",\r\n            \"version\": \"==0.1.2\"\r\n        },\r\n        \"colorama\": {\r\n            \"hash\": \"sha256:a4c0f5bc358a62849653471e309dcc991223cf86abafbec17cd8f41327279e89\",\r\n            \"version\": \"==0.3.7\"\r\n        }\r\n    },\r\n    \"develop\": {}\r\n}\r\n```\r\n\r\nAnd now installing breaks:\r\n\r\n```\r\n$ pipenv install\r\nNo package provided, installing all dependencies.\r\nPipfile found at /[...]/Pipfile. Considering this to be the project home.\r\nInstalling dependencies from Pipfile.lock...\r\nAn error occured while installing!\r\nInvalid requirement: 'crayons from git+https://github.com/kennethreitz/crayons.git@v0.1.2#egg=crayons==0.1.2'\r\nIt looks like a path. Does it exist ?\r\n\r\n\r\nTo activate this project's virtualenv, run the following:\r\n $ pipenv shell\r\n```\r\n\r\nThese are the versions in my env:\r\n\r\n```\r\n$ pip freeze\r\nappdirs==1.4.0\r\nblindspin==2.0.0\r\nclick==6.7\r\nclick-completion==0.2.1\r\ncolorama==0.3.7\r\ncrayons==0.1.2\r\ndelegator.py==0.0.8\r\nJinja2==2.9.5\r\nMarkupSafe==0.23\r\npackaging==16.8\r\nparse==1.6.6\r\npew==0.1.26\r\npexpect==4.2.1\r\npipenv==3.3.6\r\npipfile==0.0.1\r\nptyprocess==0.5.1\r\npyparsing==2.1.10\r\npythonz-bd==1.11.4\r\nrequests==2.13.0\r\nrequirements-parser==0.1.0\r\nresumable-urlretrieve==0.1.4\r\nsix==1.10.0\r\ntoml==0.9.2\r\nvirtualenv==15.1.0\r\nvirtualenv-clone==0.2.6\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/65", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/65/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/65/events", "html_url": "https://github.com/pypa/pipfile/issues/65", "id": 204710063, "node_id": "MDU6SXNzdWUyMDQ3MTAwNjM=", "number": 65, "title": "find's max_depth off by one?", "user": {"login": "spiliopoulos", "id": 8586010, "node_id": "MDQ6VXNlcjg1ODYwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/8586010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spiliopoulos", "html_url": "https://github.com/spiliopoulos", "followers_url": "https://api.github.com/users/spiliopoulos/followers", "following_url": "https://api.github.com/users/spiliopoulos/following{/other_user}", "gists_url": "https://api.github.com/users/spiliopoulos/gists{/gist_id}", "starred_url": "https://api.github.com/users/spiliopoulos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spiliopoulos/subscriptions", "organizations_url": "https://api.github.com/users/spiliopoulos/orgs", "repos_url": "https://api.github.com/users/spiliopoulos/repos", "events_url": "https://api.github.com/users/spiliopoulos/events{/privacy}", "received_events_url": "https://api.github.com/users/spiliopoulos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-02-01T21:26:07Z", "updated_at": "2017-02-02T14:21:12Z", "closed_at": "2017-02-02T14:21:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "find with max_depth=1 will fail even if pipfile is in the current directory. Is that intentional?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/64", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/64/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/64/events", "html_url": "https://github.com/pypa/pipfile/issues/64", "id": 204571930, "node_id": "MDU6SXNzdWUyMDQ1NzE5MzA=", "number": 64, "title": "[question] How to integrate with setup.py?", "user": {"login": "robsonpeixoto", "id": 124390, "node_id": "MDQ6VXNlcjEyNDM5MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/124390?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robsonpeixoto", "html_url": "https://github.com/robsonpeixoto", "followers_url": "https://api.github.com/users/robsonpeixoto/followers", "following_url": "https://api.github.com/users/robsonpeixoto/following{/other_user}", "gists_url": "https://api.github.com/users/robsonpeixoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/robsonpeixoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robsonpeixoto/subscriptions", "organizations_url": "https://api.github.com/users/robsonpeixoto/orgs", "repos_url": "https://api.github.com/users/robsonpeixoto/repos", "events_url": "https://api.github.com/users/robsonpeixoto/events{/privacy}", "received_events_url": "https://api.github.com/users/robsonpeixoto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-01T12:32:33Z", "updated_at": "2017-02-08T13:15:00Z", "closed_at": "2017-02-08T13:15:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using `requirements.txt` I can do it:\r\n\r\n```python\r\nfrom pip.req import parse_requirements\r\nrequirements = [str(r.req) for r in\r\n                parse_requirements('requirements.txt', session=False)]\r\ntest_requirements = [str(r.req) for r in\r\n                     parse_requirements('requirements-test.txt', session=False)]\r\n```\r\n\r\nHow can I do the same using Pipfile?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/63", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/63/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/63/events", "html_url": "https://github.com/pypa/pipfile/issues/63", "id": 204437332, "node_id": "MDU6SXNzdWUyMDQ0MzczMzI=", "number": 63, "title": ".freeze renamed to .lock?", "user": {"login": "mahmoud", "id": 130193, "node_id": "MDQ6VXNlcjEzMDE5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/130193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahmoud", "html_url": "https://github.com/mahmoud", "followers_url": "https://api.github.com/users/mahmoud/followers", "following_url": "https://api.github.com/users/mahmoud/following{/other_user}", "gists_url": "https://api.github.com/users/mahmoud/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahmoud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahmoud/subscriptions", "organizations_url": "https://api.github.com/users/mahmoud/orgs", "repos_url": "https://api.github.com/users/mahmoud/repos", "events_url": "https://api.github.com/users/mahmoud/events{/privacy}", "received_events_url": "https://api.github.com/users/mahmoud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-01-31T22:04:18Z", "updated_at": "2017-01-31T22:50:49Z", "closed_at": "2017-01-31T22:46:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I recall a long discussion on #43 and elsewhere, where a decent consensus was reached to change to freeze files, so as to avoid confusion with [file locking](https://en.wikipedia.org/wiki/File_locking). I may be confused, but this seems to have been unilaterally reverted? I can't find any further discussion.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/62", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/62/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/62/events", "html_url": "https://github.com/pypa/pipfile/issues/62", "id": 203892308, "node_id": "MDU6SXNzdWUyMDM4OTIzMDg=", "number": 62, "title": "Consider scripts section similar to npm package.json", "user": {"login": "proofit404", "id": 1862725, "node_id": "MDQ6VXNlcjE4NjI3MjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1862725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/proofit404", "html_url": "https://github.com/proofit404", "followers_url": "https://api.github.com/users/proofit404/followers", "following_url": "https://api.github.com/users/proofit404/following{/other_user}", "gists_url": "https://api.github.com/users/proofit404/gists{/gist_id}", "starred_url": "https://api.github.com/users/proofit404/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/proofit404/subscriptions", "organizations_url": "https://api.github.com/users/proofit404/orgs", "repos_url": "https://api.github.com/users/proofit404/repos", "events_url": "https://api.github.com/users/proofit404/events{/privacy}", "received_events_url": "https://api.github.com/users/proofit404/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-01-29T20:02:43Z", "updated_at": "2017-01-30T19:04:20Z", "closed_at": "2017-01-30T11:56:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, thanks for yet another awesome tool!\r\n\r\nI wander if there is any plans to add commands abbreviations for example in scripts section.\r\n\r\nSo instead of typing each time pipenv run python -m unittest discover it will be enough to run pipenv test (or maybe pipenv apply test) if we have this in the Pipfile:\r\n\r\n```toml\r\n[[scripts]]\r\ntest = \"python -m unittest discover\"\r\n```\r\nMoved from https://github.com/kennethreitz/pipenv/issues/153", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/61", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/61/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/61/events", "html_url": "https://github.com/pypa/pipfile/issues/61", "id": 203885213, "node_id": "MDU6SXNzdWUyMDM4ODUyMTM=", "number": 61, "title": "Possible usecase for multiple groups.", "user": {"login": "proofit404", "id": 1862725, "node_id": "MDQ6VXNlcjE4NjI3MjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1862725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/proofit404", "html_url": "https://github.com/proofit404", "followers_url": "https://api.github.com/users/proofit404/followers", "following_url": "https://api.github.com/users/proofit404/following{/other_user}", "gists_url": "https://api.github.com/users/proofit404/gists{/gist_id}", "starred_url": "https://api.github.com/users/proofit404/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/proofit404/subscriptions", "organizations_url": "https://api.github.com/users/proofit404/orgs", "repos_url": "https://api.github.com/users/proofit404/repos", "events_url": "https://api.github.com/users/proofit404/events{/privacy}", "received_events_url": "https://api.github.com/users/proofit404/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-01-29T18:11:15Z", "updated_at": "2017-11-17T02:15:54Z", "closed_at": "2017-01-31T22:46:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. I remember that we agree to do only default and dev group at this moment.\r\n\r\nI want to explain my seeing of this feature if you decide to revisit this issue in the future.\r\n\r\nWe have customer who runs our web application written in python in its own cloud. Our application depends on few closed source packages developed for our customer by another team. We don't have access to this packages, but know provided api.\r\n\r\nFor testing purpose this team create stubs packages which we can install from PyPI installation running by our customer.\r\n\r\nBefore deploying new app release to staging infrastructure new code is reviewed by customer programmers team. In staging environment customer devops install real packages with known names from another PyPI instance running at customer staging environment. After QA engineers approved new release same installation shipped to the production environment where customer PyPI instance running on another url.\r\n\r\nSo it's good to have something that can handle this tricky setup easily. I see it like\r\n\r\n```\r\n[packages]\r\ncustomer_package_foo = \"*\"\r\ncustomer_package_bar = \"*\"\r\n\r\n[packages:staging]\r\n<<inherit packages from previous section>>\r\n<<pin real dependencies of foo and bar packages>>\r\n<<provide staging pypi url>>\r\n\r\n[package:prod]\r\n<<inherit packages from staging>>\r\n<<provide prod pypi url>>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/59", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/59/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/59/events", "html_url": "https://github.com/pypa/pipfile/issues/59", "id": 203698499, "node_id": "MDU6SXNzdWUyMDM2OTg0OTk=", "number": 59, "title": "Double requirements given", "user": {"login": "asyncee", "id": 701191, "node_id": "MDQ6VXNlcjcwMTE5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/701191?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asyncee", "html_url": "https://github.com/asyncee", "followers_url": "https://api.github.com/users/asyncee/followers", "following_url": "https://api.github.com/users/asyncee/following{/other_user}", "gists_url": "https://api.github.com/users/asyncee/gists{/gist_id}", "starred_url": "https://api.github.com/users/asyncee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asyncee/subscriptions", "organizations_url": "https://api.github.com/users/asyncee/orgs", "repos_url": "https://api.github.com/users/asyncee/repos", "events_url": "https://api.github.com/users/asyncee/events{/privacy}", "received_events_url": "https://api.github.com/users/asyncee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-27T17:51:35Z", "updated_at": "2017-01-30T15:58:19Z", "closed_at": "2017-01-30T15:57:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! When using pipenv i have an pipfile error: Double requirements given.\r\n\r\nYou can reproduce it with [this Pipfile](https://raw.githubusercontent.com/asyncee/django-project-template/feature/alpha-5/Pipfile) using a command `pipenv install`.\r\n\r\nI am not sure if it is pipenv or Pipfile's problem, so i decided to submit and issue here. As far as i know, many users are facing this problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/58", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/58/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/58/events", "html_url": "https://github.com/pypa/pipfile/issues/58", "id": 203571890, "node_id": "MDU6SXNzdWUyMDM1NzE4OTA=", "number": 58, "title": "Is this project considers to be an official replacement for pip's requirements.txt?", "user": {"login": "jungornti", "id": 10721388, "node_id": "MDQ6VXNlcjEwNzIxMzg4", "avatar_url": "https://avatars3.githubusercontent.com/u/10721388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jungornti", "html_url": "https://github.com/jungornti", "followers_url": "https://api.github.com/users/jungornti/followers", "following_url": "https://api.github.com/users/jungornti/following{/other_user}", "gists_url": "https://api.github.com/users/jungornti/gists{/gist_id}", "starred_url": "https://api.github.com/users/jungornti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jungornti/subscriptions", "organizations_url": "https://api.github.com/users/jungornti/orgs", "repos_url": "https://api.github.com/users/jungornti/repos", "events_url": "https://api.github.com/users/jungornti/events{/privacy}", "received_events_url": "https://api.github.com/users/jungornti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-27T07:18:35Z", "updated_at": "2017-01-27T07:38:02Z", "closed_at": "2017-01-27T07:38:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! Sorry for asking such a question as an issue, but search did not helped me about official position of this project.\r\n\r\nIs this project considers to be an official replacement for pip's requirements.txt?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/53", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/53/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/53/events", "html_url": "https://github.com/pypa/pipfile/issues/53", "id": 202661459, "node_id": "MDU6SXNzdWUyMDI2NjE0NTk=", "number": 53, "title": "Idea: using YAML instead of TOML", "user": {"login": "refi64", "id": 1690697, "node_id": "MDQ6VXNlcjE2OTA2OTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1690697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/refi64", "html_url": "https://github.com/refi64", "followers_url": "https://api.github.com/users/refi64/followers", "following_url": "https://api.github.com/users/refi64/following{/other_user}", "gists_url": "https://api.github.com/users/refi64/gists{/gist_id}", "starred_url": "https://api.github.com/users/refi64/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/refi64/subscriptions", "organizations_url": "https://api.github.com/users/refi64/orgs", "repos_url": "https://api.github.com/users/refi64/repos", "events_url": "https://api.github.com/users/refi64/events{/privacy}", "received_events_url": "https://api.github.com/users/refi64/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-01-23T21:52:24Z", "updated_at": "2018-11-08T17:41:24Z", "closed_at": "2017-01-23T21:52:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Kind of like [shards does](https://github.com/crystal-lang/shards#usage). It's quite a bit more concise than TOML and even looks kind of Python-y.\r\n\r\nI know the answer to this is probably going to be \"big change, not enough gain\", \"conciseness isn't a good reason to switch\", \"harder to parse\", etc...but I figured this still is worth a shot. ;)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/52", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/52/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/52/events", "html_url": "https://github.com/pypa/pipfile/issues/52", "id": 202639686, "node_id": "MDU6SXNzdWUyMDI2Mzk2ODY=", "number": 52, "title": "Rename Pipfile to Pipfile.toml", "user": {"login": "Phrohdoh", "id": 4861023, "node_id": "MDQ6VXNlcjQ4NjEwMjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/4861023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phrohdoh", "html_url": "https://github.com/Phrohdoh", "followers_url": "https://api.github.com/users/Phrohdoh/followers", "following_url": "https://api.github.com/users/Phrohdoh/following{/other_user}", "gists_url": "https://api.github.com/users/Phrohdoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phrohdoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phrohdoh/subscriptions", "organizations_url": "https://api.github.com/users/Phrohdoh/orgs", "repos_url": "https://api.github.com/users/Phrohdoh/repos", "events_url": "https://api.github.com/users/Phrohdoh/events{/privacy}", "received_events_url": "https://api.github.com/users/Phrohdoh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-01-23T20:18:36Z", "updated_at": "2019-06-18T16:17:00Z", "closed_at": "2017-01-23T20:49:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is no benefit in not including the extension (a sense of mystery?).\r\nIn fact you will only have things to gain (editor highlighting, etc).\r\n\r\nref: Initially opened [here](https://github.com/kennethreitz/pipenv/issues/49).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/51", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/51/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/51/events", "html_url": "https://github.com/pypa/pipfile/issues/51", "id": 202556457, "node_id": "MDU6SXNzdWUyMDI1NTY0NTc=", "number": 51, "title": "Consider support for file like objects instead of filenames", "user": {"login": "jayfk", "id": 2930472, "node_id": "MDQ6VXNlcjI5MzA0NzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/2930472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayfk", "html_url": "https://github.com/jayfk", "followers_url": "https://api.github.com/users/jayfk/followers", "following_url": "https://api.github.com/users/jayfk/following{/other_user}", "gists_url": "https://api.github.com/users/jayfk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayfk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayfk/subscriptions", "organizations_url": "https://api.github.com/users/jayfk/orgs", "repos_url": "https://api.github.com/users/jayfk/repos", "events_url": "https://api.github.com/users/jayfk/events{/privacy}", "received_events_url": "https://api.github.com/users/jayfk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-23T14:58:30Z", "updated_at": "2017-01-31T22:46:39Z", "closed_at": "2017-01-31T22:46:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "The API is currently designed in a way that it tightly coupled with the file system. The `parse` function for example expects the `Pipfile` to be a filename: https://github.com/pypa/pipfile/blob/master/pipfile/api.py#L70\r\n\r\nIt'd great if we could find a way to decouple the API from the filesystem, at least in parts.  This won't work for functions like `walk_up`, but when I look at `parse` it'd relatively easy to just pass in a file like object:\r\n\r\n```\r\ndef parse(self, file_handle):\r\n    # Open the Pipfile.\r\n    content = f.read()\r\n    ...\r\n```\r\n\r\nSame goes for the `find` function. Instead of calling `os.getcwd` explicitly in `find`, call it in `walk_up`:\r\n\r\n```\r\n @staticmethod\r\ndef find(max_depth=3):\r\n     \"\"\"Returns the path of a Pipfile in parent directories.\"\"\"\r\n     i = 0\r\n     for c, d, f in walk_up():\r\n     ...\r\n```\r\n\r\n```\r\ndef walk_up(bottom):\r\n    \"\"\"mimic os.walk, but walk 'up' instead of down the directory tree.\r\n    From: https://gist.github.com/zdavkeos/1098474\r\n    \"\"\"\r\n\r\n    bottom = os.path.realpath(os.getcwd())\r\n    ...\r\n```\r\n\r\nThis would help external tools a lot to work with the API. There are probably still a lot of design decisions to make here, but if there's any interest in supporting external tools I'd be happy to submit a PR that addresses some of the points I mentioned earlier.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/50", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/50/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/50/events", "html_url": "https://github.com/pypa/pipfile/issues/50", "id": 202519455, "node_id": "MDU6SXNzdWUyMDI1MTk0NTU=", "number": 50, "title": "specifying relative path as source for package", "user": {"login": "caedn", "id": 23618713, "node_id": "MDQ6VXNlcjIzNjE4NzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/23618713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caedn", "html_url": "https://github.com/caedn", "followers_url": "https://api.github.com/users/caedn/followers", "following_url": "https://api.github.com/users/caedn/following{/other_user}", "gists_url": "https://api.github.com/users/caedn/gists{/gist_id}", "starred_url": "https://api.github.com/users/caedn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caedn/subscriptions", "organizations_url": "https://api.github.com/users/caedn/orgs", "repos_url": "https://api.github.com/users/caedn/repos", "events_url": "https://api.github.com/users/caedn/events{/privacy}", "received_events_url": "https://api.github.com/users/caedn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-01-23T12:19:57Z", "updated_at": "2018-11-03T13:41:22Z", "closed_at": "2017-09-02T17:33:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've seen the example for using a git repository as an alternative source:\r\n\r\n    pinax = { git = 'git://github.com/pinax/pinax.git', ref = '1.4', editable = true }\r\n\r\nWhat would the `-e .` in requirements.txt equivalent be?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/48", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/48/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/48/events", "html_url": "https://github.com/pypa/pipfile/issues/48", "id": 200804854, "node_id": "MDU6SXNzdWUyMDA4MDQ4NTQ=", "number": 48, "title": "Arbitrary group definitions with new toml file format.", "user": {"login": "proofit404", "id": 1862725, "node_id": "MDQ6VXNlcjE4NjI3MjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1862725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/proofit404", "html_url": "https://github.com/proofit404", "followers_url": "https://api.github.com/users/proofit404/followers", "following_url": "https://api.github.com/users/proofit404/following{/other_user}", "gists_url": "https://api.github.com/users/proofit404/gists{/gist_id}", "starred_url": "https://api.github.com/users/proofit404/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/proofit404/subscriptions", "organizations_url": "https://api.github.com/users/proofit404/orgs", "repos_url": "https://api.github.com/users/proofit404/repos", "events_url": "https://api.github.com/users/proofit404/events{/privacy}", "received_events_url": "https://api.github.com/users/proofit404/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-01-14T13:52:57Z", "updated_at": "2017-01-14T19:07:26Z", "closed_at": "2017-01-14T18:00:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I understand correctly previous version of Pipfile was build around python like syntax and allows define arbitrary groups like that:\r\n\r\n```python\r\npackage('django')\r\n\r\nwith group('develop'):\r\n    package('django-debug-toolbar')\r\n\r\nwith group('test'):\r\n    package('pytest')\r\n\r\nwith group('develop', 'test'):\r\n    package('django-extensions')\r\n```\r\nAnd I could define any group I want and install it explicitly, correct?\r\n\r\nHow can I define similar pipfile with recent toml syntax?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/46", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/46/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/46/events", "html_url": "https://github.com/pypa/pipfile/issues/46", "id": 200171705, "node_id": "MDU6SXNzdWUyMDAxNzE3MDU=", "number": 46, "title": "Format of Pipfile", "user": {"login": "pradyunsg", "id": 3275593, "node_id": "MDQ6VXNlcjMyNzU1OTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/3275593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pradyunsg", "html_url": "https://github.com/pradyunsg", "followers_url": "https://api.github.com/users/pradyunsg/followers", "following_url": "https://api.github.com/users/pradyunsg/following{/other_user}", "gists_url": "https://api.github.com/users/pradyunsg/gists{/gist_id}", "starred_url": "https://api.github.com/users/pradyunsg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pradyunsg/subscriptions", "organizations_url": "https://api.github.com/users/pradyunsg/orgs", "repos_url": "https://api.github.com/users/pradyunsg/repos", "events_url": "https://api.github.com/users/pradyunsg/events{/privacy}", "received_events_url": "https://api.github.com/users/pradyunsg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 26, "created_at": "2017-01-11T18:30:47Z", "updated_at": "2017-08-25T06:33:08Z", "closed_at": "2017-01-12T17:24:03Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "#10 organically grew into a discussion on which format should be used in `Pipfile`. Since that is a completely different question from whether `Pipfile` should be executable, I think that it deserves a dedicated issue.\r\n\r\nYou can obviously see comments there for the (brief) history on this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/45", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/45/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/45/events", "html_url": "https://github.com/pypa/pipfile/issues/45", "id": 198746991, "node_id": "MDU6SXNzdWUxOTg3NDY5OTE=", "number": 45, "title": "Use Pipfile.lock instead of Pipfile.freeze", "user": {"login": "proofit404", "id": 1862725, "node_id": "MDQ6VXNlcjE4NjI3MjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1862725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/proofit404", "html_url": "https://github.com/proofit404", "followers_url": "https://api.github.com/users/proofit404/followers", "following_url": "https://api.github.com/users/proofit404/following{/other_user}", "gists_url": "https://api.github.com/users/proofit404/gists{/gist_id}", "starred_url": "https://api.github.com/users/proofit404/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/proofit404/subscriptions", "organizations_url": "https://api.github.com/users/proofit404/orgs", "repos_url": "https://api.github.com/users/proofit404/repos", "events_url": "https://api.github.com/users/proofit404/events{/privacy}", "received_events_url": "https://api.github.com/users/proofit404/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-04T16:18:40Z", "updated_at": "2017-01-04T16:31:55Z", "closed_at": "2017-01-04T16:31:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "`lock` is most popular filename suffix for storing exact package versions. Maybe we should use `Pipfile.lock` filename instead of `Pipfile.freeze`? Am I missing something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/44", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/44/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/44/events", "html_url": "https://github.com/pypa/pipfile/issues/44", "id": 196391491, "node_id": "MDU6SXNzdWUxOTYzOTE0OTE=", "number": 44, "title": "Dealing with dependency conflicts", "user": {"login": "and800", "id": 9919211, "node_id": "MDQ6VXNlcjk5MTkyMTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/9919211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/and800", "html_url": "https://github.com/and800", "followers_url": "https://api.github.com/users/and800/followers", "following_url": "https://api.github.com/users/and800/following{/other_user}", "gists_url": "https://api.github.com/users/and800/gists{/gist_id}", "starred_url": "https://api.github.com/users/and800/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/and800/subscriptions", "organizations_url": "https://api.github.com/users/and800/orgs", "repos_url": "https://api.github.com/users/and800/repos", "events_url": "https://api.github.com/users/and800/events{/privacy}", "received_events_url": "https://api.github.com/users/and800/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-19T11:28:47Z", "updated_at": "2017-01-12T16:50:37Z", "closed_at": "2017-01-12T16:50:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "As we know, `pip` installs packages globally, unlike `npm`. Moreover, currently `pip` does not even _try_ to deal with dependency conflicts (when you need both packages A and B, and they both depend on different versions of package C) in any way. It doesn't even notify you much about the fact it has just broken your dependencies.\r\n\r\nClassic example, taken from [here](https://medium.com/@alonisser/things-i-wish-pip-learned-from-npm-f712fa26f5bc):\r\nWe develop our project or library and we need `splinter` and `huxley` as the dependencies. So we gonna install them:\r\n`$ pip install splinter`\r\nPip installs `splinter==0.7.5` and `selenium==3.0.2` as splinter's dependency\r\n`$ pip install huxley`\r\n\r\n```\r\nCollecting huxley\r\n...\r\n  Found existing installation: selenium 3.0.2\r\n    Uninstalling selenium-3.0.2:\r\n      Successfully uninstalled selenium-3.0.2\r\nSuccessfully installed huxley-0.5 selenium-2.35.0\r\n```\r\n\r\nSo we likely broke `splinter`, and, moreover, Pip said that everything was successfull. It even trolled us by saying `successfully uninstalled package-that-we-use`. And the user probably didn't notice anything, we don't read the logs line by line, when script ended successfully. It is bad.\r\n\r\nIs it planned to define within this spec a behavior different from described above, when the packages with incompatible dependencies will be brought together in single `Pipfile`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/43", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/43/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/43/events", "html_url": "https://github.com/pypa/pipfile/issues/43", "id": 194823398, "node_id": "MDU6SXNzdWUxOTQ4MjMzOTg=", "number": 43, "title": "consider: please change the names of these files", "user": {"login": "glyph", "id": 716529, "node_id": "MDQ6VXNlcjcxNjUyOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/716529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glyph", "html_url": "https://github.com/glyph", "followers_url": "https://api.github.com/users/glyph/followers", "following_url": "https://api.github.com/users/glyph/following{/other_user}", "gists_url": "https://api.github.com/users/glyph/gists{/gist_id}", "starred_url": "https://api.github.com/users/glyph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glyph/subscriptions", "organizations_url": "https://api.github.com/users/glyph/orgs", "repos_url": "https://api.github.com/users/glyph/repos", "events_url": "https://api.github.com/users/glyph/events{/privacy}", "received_events_url": "https://api.github.com/users/glyph/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2016-12-11T10:01:09Z", "updated_at": "2016-12-29T00:46:14Z", "closed_at": "2016-12-29T00:45:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Rather than naming it \"Pipfile.lock\", could we call these something else before they catch on?\r\n\r\n1. File extensions are a good idea; [Filefiles](https://github.com/cobyism/Filefile) are an antipattern.  This new file should be `<something>.pipfile`.  Lots of software (the mac's Finder, windows's Explorer, Nautilus, Vim, Emacs, Apache, Nginx, anything that knows how to read `/etc/mime.types`) can infer a MIME type from an extension easily and only from a full filename with great difficulty if at all.  Even if it's always called `Pipfile.pipfile`, please consider a unique file extension.\r\n2. A file whose name ends in `.lock` is a file that you call `flock()` on, or perhaps, over NFS, that you call `open(..., O_CREAT | O_EXCL)` on.  In other words, it is a _lock_.  I realize that this naming convention is sort of by extension to Ruby's `Gemfile.lock`, but (A) the contents of the file are of a different MIME type than `Gemfile.lock` so it should be a different extension, and (B) `Gemfile.lock` is one of the worst, most baffling names ever given to an abstraction.  Other suggestions: `KnownGood.pipfile`, `ExactVersions.pipfile`, `Complete.pipfile`, `Exhaustive.pipfile`, `Repeatable.pipfile`...?\r\n\r\nDon't get me wrong - this is extremely useful functionality and I'm looking forward to using it!  I just really hope that we can avoid repeating a templated set of mistakes that many programming tools seem intent on promoting these days.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/40", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/40/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/40/events", "html_url": "https://github.com/pypa/pipfile/issues/40", "id": 192387867, "node_id": "MDU6SXNzdWUxOTIzODc4Njc=", "number": 40, "title": "Idea: add hashes in generated .lock file", "user": {"login": "dmerejkowsky", "id": 606755, "node_id": "MDQ6VXNlcjYwNjc1NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/606755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmerejkowsky", "html_url": "https://github.com/dmerejkowsky", "followers_url": "https://api.github.com/users/dmerejkowsky/followers", "following_url": "https://api.github.com/users/dmerejkowsky/following{/other_user}", "gists_url": "https://api.github.com/users/dmerejkowsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmerejkowsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmerejkowsky/subscriptions", "organizations_url": "https://api.github.com/users/dmerejkowsky/orgs", "repos_url": "https://api.github.com/users/dmerejkowsky/repos", "events_url": "https://api.github.com/users/dmerejkowsky/events{/privacy}", "received_events_url": "https://api.github.com/users/dmerejkowsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-29T20:16:20Z", "updated_at": "2016-11-29T21:58:42Z", "closed_at": "2016-11-29T21:58:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Since version 8, pip can now process requirements.txt files and check their hashes after download.\r\n\r\nhttps://pip.pypa.io/en/stable/reference/pip_install/#hash-checking-mode\r\n\r\nI think it would be a good idea to store those hashes in the generated .lock file\r\n\r\n(A big inconvenience af the hash-checking mode of pip is that you have to specify the hash for _every_ package and their dependencies, recursively ...)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/39", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/39/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/39/events", "html_url": "https://github.com/pypa/pipfile/issues/39", "id": 192340969, "node_id": "MDU6SXNzdWUxOTIzNDA5Njk=", "number": 39, "title": "Why not use config.cfg ?", "user": {"login": "sametmax", "id": 1673950, "node_id": "MDQ6VXNlcjE2NzM5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1673950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sametmax", "html_url": "https://github.com/sametmax", "followers_url": "https://api.github.com/users/sametmax/followers", "following_url": "https://api.github.com/users/sametmax/following{/other_user}", "gists_url": "https://api.github.com/users/sametmax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sametmax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sametmax/subscriptions", "organizations_url": "https://api.github.com/users/sametmax/orgs", "repos_url": "https://api.github.com/users/sametmax/repos", "events_url": "https://api.github.com/users/sametmax/events{/privacy}", "received_events_url": "https://api.github.com/users/sametmax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-29T17:05:11Z", "updated_at": "2016-11-29T17:17:36Z", "closed_at": "2016-11-29T17:17:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "We already have so many files, a manifest, requirements files, config.cfg, tox, etc.\r\n\r\nLet's remove the need for them and just have new sections in setup.cfg.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/38", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/38/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/38/events", "html_url": "https://github.com/pypa/pipfile/issues/38", "id": 191788229, "node_id": "MDU6SXNzdWUxOTE3ODgyMjk=", "number": 38, "title": "What abot a requirements.txt to pipfile convertor?", "user": {"login": "pylover", "id": 1302253, "node_id": "MDQ6VXNlcjEzMDIyNTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1302253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylover", "html_url": "https://github.com/pylover", "followers_url": "https://api.github.com/users/pylover/followers", "following_url": "https://api.github.com/users/pylover/following{/other_user}", "gists_url": "https://api.github.com/users/pylover/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylover/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylover/subscriptions", "organizations_url": "https://api.github.com/users/pylover/orgs", "repos_url": "https://api.github.com/users/pylover/repos", "events_url": "https://api.github.com/users/pylover/events{/privacy}", "received_events_url": "https://api.github.com/users/pylover/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-11-26T05:33:25Z", "updated_at": "2017-08-02T20:52:46Z", "closed_at": "2017-08-02T20:07:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any converter?\r\n\r\nOr any unified schema for starting to develop it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/37", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/37/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/37/events", "html_url": "https://github.com/pypa/pipfile/issues/37", "id": 191782278, "node_id": "MDU6SXNzdWUxOTE3ODIyNzg=", "number": 37, "title": "No matching distribution found for pipfile", "user": {"login": "zivsu", "id": 8110132, "node_id": "MDQ6VXNlcjgxMTAxMzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/8110132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zivsu", "html_url": "https://github.com/zivsu", "followers_url": "https://api.github.com/users/zivsu/followers", "following_url": "https://api.github.com/users/zivsu/following{/other_user}", "gists_url": "https://api.github.com/users/zivsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/zivsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zivsu/subscriptions", "organizations_url": "https://api.github.com/users/zivsu/orgs", "repos_url": "https://api.github.com/users/zivsu/repos", "events_url": "https://api.github.com/users/zivsu/events{/privacy}", "received_events_url": "https://api.github.com/users/zivsu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-26T02:27:57Z", "updated_at": "2016-11-26T02:48:39Z", "closed_at": "2016-11-26T02:48:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "print 'No matching distribution found for pipfile' when use `pip install pipfile`.\r\nMy tools version as below:\r\n`pip version: 9.0.1`\r\n`python version: 2.7`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/34", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/34/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/34/events", "html_url": "https://github.com/pypa/pipfile/issues/34", "id": 191194609, "node_id": "MDU6SXNzdWUxOTExOTQ2MDk=", "number": 34, "title": "Non-python dependencies", "user": {"login": "bbaassssiiee", "id": 10671559, "node_id": "MDQ6VXNlcjEwNjcxNTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/10671559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bbaassssiiee", "html_url": "https://github.com/bbaassssiiee", "followers_url": "https://api.github.com/users/bbaassssiiee/followers", "following_url": "https://api.github.com/users/bbaassssiiee/following{/other_user}", "gists_url": "https://api.github.com/users/bbaassssiiee/gists{/gist_id}", "starred_url": "https://api.github.com/users/bbaassssiiee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bbaassssiiee/subscriptions", "organizations_url": "https://api.github.com/users/bbaassssiiee/orgs", "repos_url": "https://api.github.com/users/bbaassssiiee/repos", "events_url": "https://api.github.com/users/bbaassssiiee/events{/privacy}", "received_events_url": "https://api.github.com/users/bbaassssiiee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-11-23T06:03:47Z", "updated_at": "2019-05-24T17:31:10Z", "closed_at": "2016-11-26T02:55:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does the pipfile manage the required C libraries and platform specific packages too?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/28", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/28/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/28/events", "html_url": "https://github.com/pypa/pipfile/issues/28", "id": 191039609, "node_id": "MDU6SXNzdWUxOTEwMzk2MDk=", "number": 28, "title": "Pip version in the Pipfile.lock", "user": {"login": "AvnerCohen", "id": 1297254, "node_id": "MDQ6VXNlcjEyOTcyNTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1297254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AvnerCohen", "html_url": "https://github.com/AvnerCohen", "followers_url": "https://api.github.com/users/AvnerCohen/followers", "following_url": "https://api.github.com/users/AvnerCohen/following{/other_user}", "gists_url": "https://api.github.com/users/AvnerCohen/gists{/gist_id}", "starred_url": "https://api.github.com/users/AvnerCohen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AvnerCohen/subscriptions", "organizations_url": "https://api.github.com/users/AvnerCohen/orgs", "repos_url": "https://api.github.com/users/AvnerCohen/repos", "events_url": "https://api.github.com/users/AvnerCohen/events{/privacy}", "received_events_url": "https://api.github.com/users/AvnerCohen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-11-22T15:34:21Z", "updated_at": "2017-01-29T07:12:00Z", "closed_at": "2017-01-26T23:55:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Bundler is an amazing tool in ruby-land.\r\nI hope you guys study some of it, as it works really really well.\r\nSpecifically, A major pain point there was an addition of the specific \"Bundler\" version to the Gemfile.lock .\r\n\r\nThis was a painful migration, but later on allowed much more power to the Bundler authors, if it's in upgrades or in specific lock file changes.\r\nI think if you add this and the specific bundler logic (only update when newer version exists) it will save much pain later on - \r\nhttps://github.com/bundler/bundler/issues/3697", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/27", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/27/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/27/events", "html_url": "https://github.com/pypa/pipfile/issues/27", "id": 191020699, "node_id": "MDU6SXNzdWUxOTEwMjA2OTk=", "number": 27, "title": "The difference between setup.py (pyproject.toml) and requirements.txt (Pipfile)", "user": {"login": "notpushkin", "id": 1298948, "node_id": "MDQ6VXNlcjEyOTg5NDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1298948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notpushkin", "html_url": "https://github.com/notpushkin", "followers_url": "https://api.github.com/users/notpushkin/followers", "following_url": "https://api.github.com/users/notpushkin/following{/other_user}", "gists_url": "https://api.github.com/users/notpushkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/notpushkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notpushkin/subscriptions", "organizations_url": "https://api.github.com/users/notpushkin/orgs", "repos_url": "https://api.github.com/users/notpushkin/repos", "events_url": "https://api.github.com/users/notpushkin/events{/privacy}", "received_events_url": "https://api.github.com/users/notpushkin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2016-11-22T14:24:00Z", "updated_at": "2017-11-27T02:12:14Z", "closed_at": "2017-01-26T23:53:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why there even needs to be one? In PHP (Composer) and JS (npm, yarn), there is only one file type and libraries and applications work OK with these \u2014 libraries just don't need to commit their lockfile.\r\n\r\nThere is a difference between an application and a library, but on the pip's end, it's just a bunch of dependencies with versions specified.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/26", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/26/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/26/events", "html_url": "https://github.com/pypa/pipfile/issues/26", "id": 190981797, "node_id": "MDU6SXNzdWUxOTA5ODE3OTc=", "number": 26, "title": "Could pipfile be designed to support a MetaPathFinder implementation that installs the requirements 'on-demand' ?", "user": {"login": "lonetwin", "id": 101819, "node_id": "MDQ6VXNlcjEwMTgxOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/101819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lonetwin", "html_url": "https://github.com/lonetwin", "followers_url": "https://api.github.com/users/lonetwin/followers", "following_url": "https://api.github.com/users/lonetwin/following{/other_user}", "gists_url": "https://api.github.com/users/lonetwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/lonetwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lonetwin/subscriptions", "organizations_url": "https://api.github.com/users/lonetwin/orgs", "repos_url": "https://api.github.com/users/lonetwin/repos", "events_url": "https://api.github.com/users/lonetwin/events{/privacy}", "received_events_url": "https://api.github.com/users/lonetwin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-11-22T12:04:27Z", "updated_at": "2016-11-23T08:50:32Z", "closed_at": "2016-11-22T13:31:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I learned about `MetaPathFinder` class from importlib and created this hack:\r\n\r\nhttp://lonetwin.github.io/blog/html/2016/05/16/auto_install_missing_python_modules.html\r\n\r\nSince I discovered this hack, I have been thinking that something of an 'install-on-missing-import' feature would be, in theory, a possibility,\r\n\r\nI've been wrestling with getting an implementation which works with requirements.txt for and in fact, I do have a rough implementation which parses the requirements.txt and installs the requirements at import time. This works for most simple installations, although I haven't tested it extensively.\r\n\r\nI would like to suggest that maybe `pipfile` could designed (and possibly provide a reference implementation) of a `MetaPathFinder` which ensures that the developers and users of modules don't even have to worry about running a command to install anything. Just executing or importing the module should install the necessary dependencies. \r\n\r\nThis is just a suggestion and I'm ok if people think this idea is ridiculous. That said, knowing the reasons why such a thing would be ridiculous would be appreciated.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/25", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/25/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/25/events", "html_url": "https://github.com/pypa/pipfile/issues/25", "id": 190978589, "node_id": "MDU6SXNzdWUxOTA5Nzg1ODk=", "number": 25, "title": "Take inspiration from Yarn, Bundler and Cargo", "user": {"login": "sandstrom", "id": 122287, "node_id": "MDQ6VXNlcjEyMjI4Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/122287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandstrom", "html_url": "https://github.com/sandstrom", "followers_url": "https://api.github.com/users/sandstrom/followers", "following_url": "https://api.github.com/users/sandstrom/following{/other_user}", "gists_url": "https://api.github.com/users/sandstrom/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandstrom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandstrom/subscriptions", "organizations_url": "https://api.github.com/users/sandstrom/orgs", "repos_url": "https://api.github.com/users/sandstrom/repos", "events_url": "https://api.github.com/users/sandstrom/events{/privacy}", "received_events_url": "https://api.github.com/users/sandstrom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2016-11-22T11:48:06Z", "updated_at": "2017-09-02T18:00:41Z", "closed_at": "2017-09-02T18:00:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Perhaps you've already done this, but if not I'd suggest looking at how similar systems has solved issues around deterministic builds, dependency inconsistencies, the lock-file and similar. A non-exhaustive list:\r\n\r\n- [Bundler](http://bundler.io/) (ruby)\r\n- [Cargo](https://crates.io/) (rust)\r\n- [Yarn](https://yarnpkg.com/) (node)\r\n- [Composer](https://getcomposer.org/) (php)\r\n- [CocoaPods](https://cocoapods.org/) (objective-c/swift)\r\n\r\nIf you have insights or tidbits from these projects, feel free to add them in the comments below.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/24", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/24/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/24/events", "html_url": "https://github.com/pypa/pipfile/issues/24", "id": 190958136, "node_id": "MDU6SXNzdWUxOTA5NTgxMzY=", "number": 24, "title": "Please consider lowercase: pipfile and pipfile.lock", "user": {"login": "kseistrup", "id": 25586, "node_id": "MDQ6VXNlcjI1NTg2", "avatar_url": "https://avatars2.githubusercontent.com/u/25586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kseistrup", "html_url": "https://github.com/kseistrup", "followers_url": "https://api.github.com/users/kseistrup/followers", "following_url": "https://api.github.com/users/kseistrup/following{/other_user}", "gists_url": "https://api.github.com/users/kseistrup/gists{/gist_id}", "starred_url": "https://api.github.com/users/kseistrup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kseistrup/subscriptions", "organizations_url": "https://api.github.com/users/kseistrup/orgs", "repos_url": "https://api.github.com/users/kseistrup/repos", "events_url": "https://api.github.com/users/kseistrup/events{/privacy}", "received_events_url": "https://api.github.com/users/kseistrup/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2016-11-22T10:16:02Z", "updated_at": "2017-09-02T17:58:06Z", "closed_at": "2017-09-02T17:58:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a good reason why `Pipfile{,.lock}` couldn't be all lowercase? It sucks to have to hit the SHIFT-key when using the commandline, IMHO. At least, please consider accepting both `pipfile` and `Pipfile`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/21", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/21/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/21/events", "html_url": "https://github.com/pypa/pipfile/issues/21", "id": 190927404, "node_id": "MDU6SXNzdWUxOTA5Mjc0MDQ=", "number": 21, "title": "Default `pip install` behavior?", "user": {"login": "rasmi", "id": 2267370, "node_id": "MDQ6VXNlcjIyNjczNzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/2267370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasmi", "html_url": "https://github.com/rasmi", "followers_url": "https://api.github.com/users/rasmi/followers", "following_url": "https://api.github.com/users/rasmi/following{/other_user}", "gists_url": "https://api.github.com/users/rasmi/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasmi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasmi/subscriptions", "organizations_url": "https://api.github.com/users/rasmi/orgs", "repos_url": "https://api.github.com/users/rasmi/repos", "events_url": "https://api.github.com/users/rasmi/events{/privacy}", "received_events_url": "https://api.github.com/users/rasmi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-11-22T07:37:40Z", "updated_at": "2016-11-26T02:58:06Z", "closed_at": "2016-11-26T02:58:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, `pip install` outputs `You must give at least one requirement to install (see \"pip help install\")`. It would be nice to be able to do just `pip install` in a directory with a `Pipfile.lock` and have it recognize and run the installation automatically based on that file. This behavior is identical to `pip install -p` (\"when `-p` is bare\") as described in the `README` but provides a default for `pip install` without needing the `-p` flag, like `npm install`. If no `Pipfile.lock` file is found, `pip install` can output its current error message.  \r\n\r\nAdditionally, perhaps `pip install` can recognize a `Pipfile` if there is no `Pipfile.lock` file, run the install, and generate a corresponding `Pipfile.lock` file.\r\n\r\nThoughts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/20", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/20/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/20/events", "html_url": "https://github.com/pypa/pipfile/issues/20", "id": 190921402, "node_id": "MDU6SXNzdWUxOTA5MjE0MDI=", "number": 20, "title": "Dependencies by python version", "user": {"login": "jmcs", "id": 3719966, "node_id": "MDQ6VXNlcjM3MTk5NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/3719966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmcs", "html_url": "https://github.com/jmcs", "followers_url": "https://api.github.com/users/jmcs/followers", "following_url": "https://api.github.com/users/jmcs/following{/other_user}", "gists_url": "https://api.github.com/users/jmcs/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmcs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmcs/subscriptions", "organizations_url": "https://api.github.com/users/jmcs/orgs", "repos_url": "https://api.github.com/users/jmcs/repos", "events_url": "https://api.github.com/users/jmcs/events{/privacy}", "received_events_url": "https://api.github.com/users/jmcs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-11-22T06:54:00Z", "updated_at": "2016-12-29T00:46:20Z", "closed_at": "2016-12-29T00:46:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "It should be possible to set dependencies by Python version to allow installing backported modules only when needed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/19", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/19/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/19/events", "html_url": "https://github.com/pypa/pipfile/issues/19", "id": 190916651, "node_id": "MDU6SXNzdWUxOTA5MTY2NTE=", "number": 19, "title": "--save flag while installing new packages?", "user": {"login": "cdax", "id": 7029291, "node_id": "MDQ6VXNlcjcwMjkyOTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/7029291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdax", "html_url": "https://github.com/cdax", "followers_url": "https://api.github.com/users/cdax/followers", "following_url": "https://api.github.com/users/cdax/following{/other_user}", "gists_url": "https://api.github.com/users/cdax/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdax/subscriptions", "organizations_url": "https://api.github.com/users/cdax/orgs", "repos_url": "https://api.github.com/users/cdax/repos", "events_url": "https://api.github.com/users/cdax/events{/privacy}", "received_events_url": "https://api.github.com/users/cdax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2016-11-22T06:18:10Z", "updated_at": "2019-03-10T15:09:37Z", "closed_at": "2017-09-02T18:00:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the `npm` world, you can install new packages like so:\r\n\r\n`npm install --save <package>`\r\n\r\nand the `--save` flag will write the package details to the `package.json` (`pipfile` equivalent). I feel this will be a neat inclusion for `pip`/`pipfile`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/18", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/18/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/18/events", "html_url": "https://github.com/pypa/pipfile/issues/18", "id": 190898904, "node_id": "MDU6SXNzdWUxOTA4OTg5MDQ=", "number": 18, "title": "Context managers", "user": {"login": "nkanaev", "id": 4911300, "node_id": "MDQ6VXNlcjQ5MTEzMDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4911300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nkanaev", "html_url": "https://github.com/nkanaev", "followers_url": "https://api.github.com/users/nkanaev/followers", "following_url": "https://api.github.com/users/nkanaev/following{/other_user}", "gists_url": "https://api.github.com/users/nkanaev/gists{/gist_id}", "starred_url": "https://api.github.com/users/nkanaev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nkanaev/subscriptions", "organizations_url": "https://api.github.com/users/nkanaev/orgs", "repos_url": "https://api.github.com/users/nkanaev/repos", "events_url": "https://api.github.com/users/nkanaev/events{/privacy}", "received_events_url": "https://api.github.com/users/nkanaev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-22T03:31:30Z", "updated_at": "2017-01-14T17:30:19Z", "closed_at": "2017-01-14T17:30:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I think using context managers for package grouping looks more elegant. \r\n\r\nAlso I like the idea of using`source` as context manager from @dstufft's original proposal.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/14", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/14/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/14/events", "html_url": "https://github.com/pypa/pipfile/issues/14", "id": 190818196, "node_id": "MDU6SXNzdWUxOTA4MTgxOTY=", "number": 14, "title": "Let's use TOML", "user": {"login": "mkurnikov", "id": 2341827, "node_id": "MDQ6VXNlcjIzNDE4Mjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2341827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkurnikov", "html_url": "https://github.com/mkurnikov", "followers_url": "https://api.github.com/users/mkurnikov/followers", "following_url": "https://api.github.com/users/mkurnikov/following{/other_user}", "gists_url": "https://api.github.com/users/mkurnikov/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkurnikov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkurnikov/subscriptions", "organizations_url": "https://api.github.com/users/mkurnikov/orgs", "repos_url": "https://api.github.com/users/mkurnikov/repos", "events_url": "https://api.github.com/users/mkurnikov/events{/privacy}", "received_events_url": "https://api.github.com/users/mkurnikov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-21T19:51:39Z", "updated_at": "2016-11-21T20:15:07Z", "closed_at": "2016-11-21T20:15:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Advantages: \r\n\r\n1. `--save`, `--save-dev`, `--save-exact` could be implemented without much effort\r\n\r\n2. common file format, so we could use existing editor capabilities\r\n\r\n3. In the future we possible could converge existing `pyproject.toml`, `setup.py` and this file, into one. \r\n\r\nThis is a little specs, I've created, maybe it will be of any use (it's not complete, VCS has to be expanded, maybe I've forgotten some other cases)\r\n```toml\r\n\r\n[dependencies]\r\n# plain, command: pip install --save Django\r\ndjango = \">=1.10.1\"\r\n\r\n# command: pip install --save-exact Django \r\ndjango = \"==1.10.1\"\r\n\r\n# command: pip install --save Django==1.10.1 \r\n# Any specified specifier goes exactly (even without --save-exact)\r\ndjango2 = \"==1.10.1\"\r\n\r\n# full version\r\nSomeProject = {version = \"==5.4\"} # denotes what version exists as a part of package metadata\r\n\r\n# environment markers\r\nSomeProject2 = {version = \"==5.4\", markers = {python_version = \"< 2.7\", sys_platform = \"win32\"}}\r\n# OR\r\n[dependencies.SomeProject2.markers]\r\nsys_version = \"< 2.7\"\r\nsys_platform = \"win32\"\r\n\r\n# particular file\r\n# all non-obvious dependencies should be specified as a table (not inline), it's more verbose, which is a good thing here\r\n[dependencies.numpy] # appears after --save\r\nfile = \"./downloads/numpy-1.9.2-cp34-none-win32.whl\"\r\n\r\n# OR \r\n\r\nnumpy = {file = \"./downloads/numpy-1.9.2-cp34-none-win32.whl\"}\r\nwxpython = {file = \"http://wxpython.org/Phoenix/snapshot-builds/wxPython_Phoenix-3.0.3.dev1820+49a8884-cp34-none-win_amd64.whl\"}\r\n\r\n# per-requirement overrides\r\n#FooProject >= 1.2 --global-option=\"--no-user-cfg\" \\\r\n#                  --install-option=\"--prefix='/usr/local'\" \\\r\n#                  --install-option=\"--no-compile\"\r\n# maps to \r\nFooProject = {version = \">=1.2\", setup_py_options = \"\"\"--global-option=\"--no-user-cfg\"\r\n                                                    --install-option=\"--prefix='/usr/local'\"\r\n                                                    --install-option=\"--no-compile\"\"\"} # multiline string, only multiline that in valid in TOML\r\n\r\n# OR\r\n# if used in conjunction with --save (it's automatically generated, that's why doesn't really matter if it's verbose or not)\r\n[dependencies.FooProject] \r\nversion = \">=1.2\"\r\nsetup_py_options = \"\"\"--global-option=\"--no-user-cfg\"\r\n                    --install-option=\"--prefix='/usr/local'\"\r\n                    --install-option=\"--no-compile\"\"\"\r\n\r\n# if necessary to add hashes\r\n# https://pip.pypa.io/en/stable/reference/pip_install/#hash-checking-mode\r\nhashes = \"\"\" # maybe convert to array\r\n--hash=sha256:2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824 \\\r\n--hash=sha256:486ea46224d1bb4fb680f34f7c9ad96a8f24ec88be73ea8e5a6c65260e9cb8a7\r\n\"\"\"\r\n\r\n# VCS \r\nflask = {git = \"git repo\", revision = \"hash\"}\r\n\r\n# extras (dev, test, production), dev could be special-cased as [dev_dependencies]\r\n[extras.PDF]\r\nReportLab = \">=1.2\"\r\n\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/13", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/13/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/13/events", "html_url": "https://github.com/pypa/pipfile/issues/13", "id": 190790589, "node_id": "MDU6SXNzdWUxOTA3OTA1ODk=", "number": 13, "title": "Lockfile doesn't include sub-dependencies", "user": {"login": "notpushkin", "id": 1298948, "node_id": "MDQ6VXNlcjEyOTg5NDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1298948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notpushkin", "html_url": "https://github.com/notpushkin", "followers_url": "https://api.github.com/users/notpushkin/followers", "following_url": "https://api.github.com/users/notpushkin/following{/other_user}", "gists_url": "https://api.github.com/users/notpushkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/notpushkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notpushkin/subscriptions", "organizations_url": "https://api.github.com/users/notpushkin/orgs", "repos_url": "https://api.github.com/users/notpushkin/repos", "events_url": "https://api.github.com/users/notpushkin/events{/privacy}", "received_events_url": "https://api.github.com/users/notpushkin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-21T17:53:35Z", "updated_at": "2016-11-21T17:58:46Z", "closed_at": "2016-11-21T17:57:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Originally [reported by](https://gist.github.com/kennethreitz/4745d35e57108f5b766b8f6ff396de85#gistcomment-1927092) @charettes:\r\n\r\n> Shouldn't implicit dependencies be included in the lock files as well \u00e0 la `pip freeze`?\r\n\r\nReasoning for that is simple: imagine package A depends on `B == 1.0`, and package B depends on `C >= 1.0`. Then C 1.1 comes out with some subtle changes that break B completely, and \u2014 BAM! \u2014 your build is broken.\r\n\r\nThe problem with this is, PyPI doesn't return packages dependencies (I've tried several APIs, no luck), so in order to lock dependencies we need t actually install them first. Doesn't seem like a big deal to me, though.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/11", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/11/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/11/events", "html_url": "https://github.com/pypa/pipfile/issues/11", "id": 190748507, "node_id": "MDU6SXNzdWUxOTA3NDg1MDc=", "number": 11, "title": "https://pipfile.pypa.io/ doesn't work", "user": {"login": "kimond", "id": 1423906, "node_id": "MDQ6VXNlcjE0MjM5MDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1423906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kimond", "html_url": "https://github.com/kimond", "followers_url": "https://api.github.com/users/kimond/followers", "following_url": "https://api.github.com/users/kimond/following{/other_user}", "gists_url": "https://api.github.com/users/kimond/gists{/gist_id}", "starred_url": "https://api.github.com/users/kimond/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kimond/subscriptions", "organizations_url": "https://api.github.com/users/kimond/orgs", "repos_url": "https://api.github.com/users/kimond/repos", "events_url": "https://api.github.com/users/kimond/events{/privacy}", "received_events_url": "https://api.github.com/users/kimond/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-21T15:27:13Z", "updated_at": "2016-11-21T16:15:28Z", "closed_at": "2016-11-21T16:15:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://pipfile.pypa.io/ give me a `DNS address could not be found` error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/10", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/10/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/10/events", "html_url": "https://github.com/pypa/pipfile/issues/10", "id": 190744070, "node_id": "MDU6SXNzdWUxOTA3NDQwNzA=", "number": 10, "title": "Executable File Format, Yes or No?", "user": {"login": "dstufft", "id": 145979, "node_id": "MDQ6VXNlcjE0NTk3OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/145979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dstufft", "html_url": "https://github.com/dstufft", "followers_url": "https://api.github.com/users/dstufft/followers", "following_url": "https://api.github.com/users/dstufft/following{/other_user}", "gists_url": "https://api.github.com/users/dstufft/gists{/gist_id}", "starred_url": "https://api.github.com/users/dstufft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dstufft/subscriptions", "organizations_url": "https://api.github.com/users/dstufft/orgs", "repos_url": "https://api.github.com/users/dstufft/repos", "events_url": "https://api.github.com/users/dstufft/events{/privacy}", "received_events_url": "https://api.github.com/users/dstufft/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 60, "created_at": "2016-11-21T15:11:59Z", "updated_at": "2017-01-11T18:51:11Z", "closed_at": "2017-01-11T18:51:11Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "There have been a number of issues/comments that tend to trace back to a single question.. Should ``Pipfile`` be executable or not?\r\n\r\nThe relevant comments are:\r\n\r\n> @defnull said in https://github.com/pypa/pipfile/issues/8#issue-190673838\r\n> Parsing and editing ``Pipfile`` on the other hand is significantly more complicated that ``requirements.txt``. IDEs will most likely not support ``Pipfile`` editing for a long time.\r\n\r\n> @jayfk said in https://github.com/pypa/pipfile/issues/8#issuecomment-261959575\r\n> On top of that, please don't forget server side tools working with dependencies (pyup.io, requires.io, etc.). There's no way to support ``Pipfile``s if they allow to run arbitrary Python code. Local developer tools might have a chance to establish a working solution over time, server side tools don't.\r\n\r\n> @defnull said in https://github.com/pypa/pipfile/issues/9#issue-190734454\r\n> Build or install tools (pip) cannot check if ``Pipfile`` and ``Pipfile.lock`` are out of sync without executing the Pipfile (which is bad, see #7) and cannot warn the user.\r\n\r\n> @defnull said in https://github.com/pypa/pipfile/issues/7#issue-190667376\r\n> Executable build descriptions are a bad idea. See https://www.reddit.com/r/Python/comments/5e2vci/pipfile_a_new_and_much_better_way_to_declare/da9c2ku/ or uncountable blog posts and articles all over the Internet for very good examples. It should be common knowledge by now, still the same errors are made again and again.\r\n>\r\n> Pipfile has a nice hybrid approach in that it allows developers to generate a static ``Pipfile.lock`` from a dynamic description. Tools can parse the static ``Pipfile.lock`` and know exactly what to do, while developers can work with the more convenient ``Pipfile`` and can be as smart or lazy as they want to. This approach might actually work very well.\r\n> For this to work, and for others like me to accept this idea, I thing the following point should be stressed out more: Tools work with ``Pipfile.lock`` exclusively. A build system should never automatically execute a ``Pipfile`` to generate a missing or outdated ``Pipfile.lock``. The ``pipfile`` module should never be a build requirement.\r\n\r\n> @takluyver said in https://github.com/pypa/pipfile/issues/6#issuecomment-261931518\r\n> I don't like specifying metadata in executable files in general. #8 gives one reason why not - it's very hard to reliably modify scripts programmatically.\r\n\r\nThere's also some reaction on https://www.reddit.com/r/Python/comments/5e2vci/pipfile_a_new_and_much_better_way_to_declare/", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/9", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/9/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/9/events", "html_url": "https://github.com/pypa/pipfile/issues/9", "id": 190734454, "node_id": "MDU6SXNzdWUxOTA3MzQ0NTQ=", "number": 9, "title": "Risk of outdated Pipfile.lock after editing Pipfile.", "user": {"login": "defnull", "id": 62740, "node_id": "MDQ6VXNlcjYyNzQw", "avatar_url": "https://avatars1.githubusercontent.com/u/62740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/defnull", "html_url": "https://github.com/defnull", "followers_url": "https://api.github.com/users/defnull/followers", "following_url": "https://api.github.com/users/defnull/following{/other_user}", "gists_url": "https://api.github.com/users/defnull/gists{/gist_id}", "starred_url": "https://api.github.com/users/defnull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/defnull/subscriptions", "organizations_url": "https://api.github.com/users/defnull/orgs", "repos_url": "https://api.github.com/users/defnull/repos", "events_url": "https://api.github.com/users/defnull/events{/privacy}", "received_events_url": "https://api.github.com/users/defnull/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2016-11-21T14:38:16Z", "updated_at": "2017-09-02T18:01:46Z", "closed_at": "2017-09-02T18:01:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "In addition #8, this is perhaps the most serious usability problem with the current approach: For a developer it is very easy to forget about `Pipfile.lock` after editing `Pipfile`, especially because he is not supposed to care about the lock file.\r\n\r\nThis is not an issue with pure approaches (`setup.py` or `requirements.txt`) because there is only one version of truth. Pipfile introduces an intermediate step that translates one truth into another, and different tools look at different files. This just asks for trouble. I can already see the broken builds and \"fix: Forgot to build Pipfile\" commits waiting to happen.\r\n\r\nA very common workflow is to install a dependency manually, check if it works, and then add it to `requirements.txt` or just call `pip freeze` again. With Pidfiles, there is no `pip freeze` (see #8) and you have to invoke a command-line utility after editing the `Pidfile` to make things happen. Unfortunately, you just manually installed the dependency, so everything works anyway (on your computer) and there is no indication that your `Pidfile.lock` is out of sync if you forget this step. You are a single `git commit -a` away from a broken build.\r\n\r\nBuild or install tools (`pip`) cannot check if `Pipfile` and `Pipfile.lock` are out of sync without executing the `Pipfile` (which is bad, see #7) and cannot warn the user.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/8", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/8/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/8/events", "html_url": "https://github.com/pypa/pipfile/issues/8", "id": 190673838, "node_id": "MDU6SXNzdWUxOTA2NzM4Mzg=", "number": 8, "title": "It will be very hard for tools (IDEs) to change dependencies programmically. ", "user": {"login": "defnull", "id": 62740, "node_id": "MDQ6VXNlcjYyNzQw", "avatar_url": "https://avatars1.githubusercontent.com/u/62740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/defnull", "html_url": "https://github.com/defnull", "followers_url": "https://api.github.com/users/defnull/followers", "following_url": "https://api.github.com/users/defnull/following{/other_user}", "gists_url": "https://api.github.com/users/defnull/gists{/gist_id}", "starred_url": "https://api.github.com/users/defnull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/defnull/subscriptions", "organizations_url": "https://api.github.com/users/defnull/orgs", "repos_url": "https://api.github.com/users/defnull/repos", "events_url": "https://api.github.com/users/defnull/events{/privacy}", "received_events_url": "https://api.github.com/users/defnull/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-11-21T10:21:59Z", "updated_at": "2017-01-23T21:17:51Z", "closed_at": "2017-01-23T21:17:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Tools and IDEs cannot edit the `Pipfile.lock` directly, because changes will be lost once the `Pipfile` is executed again. Parsing and editing `Pipfile` on the other hand is significantly more complicated that `requirements.txt`. IDEs will most likely not support `Pipfile` editing for a long time.\r\n\r\nTo put it in perspective: `Pipfile.lock` is a read-only approach. Developers are forced to manually edit the `Pipfile` with little to no tooling support in order do change the dependency settings of their project. This is a step backward compared to `requirements.txt` or other static file approaches.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/7", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/7/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/7/events", "html_url": "https://github.com/pypa/pipfile/issues/7", "id": 190667376, "node_id": "MDU6SXNzdWUxOTA2NjczNzY=", "number": 7, "title": "Clarify that a Pipfile is a tool to generate Pipfle.lock, and not a build description on its own.", "user": {"login": "defnull", "id": 62740, "node_id": "MDQ6VXNlcjYyNzQw", "avatar_url": "https://avatars1.githubusercontent.com/u/62740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/defnull", "html_url": "https://github.com/defnull", "followers_url": "https://api.github.com/users/defnull/followers", "following_url": "https://api.github.com/users/defnull/following{/other_user}", "gists_url": "https://api.github.com/users/defnull/gists{/gist_id}", "starred_url": "https://api.github.com/users/defnull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/defnull/subscriptions", "organizations_url": "https://api.github.com/users/defnull/orgs", "repos_url": "https://api.github.com/users/defnull/repos", "events_url": "https://api.github.com/users/defnull/events{/privacy}", "received_events_url": "https://api.github.com/users/defnull/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2016-11-21T09:55:28Z", "updated_at": "2017-09-02T20:54:39Z", "closed_at": "2017-09-02T17:59:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Executable build descriptions are a bad idea. See https://www.reddit.com/r/Python/comments/5e2vci/pipfile_a_new_and_much_better_way_to_declare/da9c2ku/ or uncountable blog posts and articles all over the Internet for very good examples. It should be common knowledge by now, still the same errors are made again and again.\r\n\r\nPipfile has a nice hybrid approach in that it allows developers to *generate* a _static_ `Pipfile.lock` from a dynamic description. Tools can parse the static `Pipfile.lock` and know exactly what to do, while developers can work with the more convenient `Pipfile` and can be as smart or lazy as they want to. This approach might actually work very well.\r\n\r\nFor this to work, and for others like me to accept this idea, I thing the following point should be stressed out more: Tools work with `Pipfile.lock` exclusively. A build system should never automatically execute a `Pipfile` to generate a missing or outdated `Pipfile.lock`. The `pipfile` module should never be a build requirement.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/6", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/6/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/6/events", "html_url": "https://github.com/pypa/pipfile/issues/6", "id": 190664310, "node_id": "MDU6SXNzdWUxOTA2NjQzMTA=", "number": 6, "title": "Discouraging overly complex Pipfile definitions", "user": {"login": "ncoghlan", "id": 1026649, "node_id": "MDQ6VXNlcjEwMjY2NDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1026649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ncoghlan", "html_url": "https://github.com/ncoghlan", "followers_url": "https://api.github.com/users/ncoghlan/followers", "following_url": "https://api.github.com/users/ncoghlan/following{/other_user}", "gists_url": "https://api.github.com/users/ncoghlan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ncoghlan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ncoghlan/subscriptions", "organizations_url": "https://api.github.com/users/ncoghlan/orgs", "repos_url": "https://api.github.com/users/ncoghlan/repos", "events_url": "https://api.github.com/users/ncoghlan/events{/privacy}", "received_events_url": "https://api.github.com/users/ncoghlan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-11-21T09:42:50Z", "updated_at": "2017-01-18T23:23:04Z", "closed_at": "2017-01-18T23:23:04Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "One of the concerns raised in previous discussions of this idea is that it risks inheriting all the problems that have historically plagued setup.py, such as having to execute arbitrary code just to extract project metadata.\r\n\r\nHaving `Pipfile.lock` mitigates a large part of that problem (since the generated JSON metadata will already be static at install time), and a gemspec-style `pyproject()` directive would make it straightforward to delegate to a library-style `pyproject.toml` file when a given repo supports both direct deployment as a service and publication as a versioned component.\r\n\r\nHowever, it would also be possible to explicitly discourage (but not entirely prevent) the inclusion of arbitrary control flow logic by blocking access to most of the builtins when executing `Pipfile` code. For example:\r\n\r\n    >>> limited_namespace = dict(__builtins__={})\r\n    >>> exec(\"import sys\", limited_namespace, {})\r\n    Traceback (most recent call last):\r\n      File \"<stdin>\", line 1, in <module>\r\n      File \"<string>\", line 1, in <module>\r\n    ImportError: __import__ not found\r\n\r\nThis wouldn't provide a security boundary (sandboxing Python code isn't that simple), but it *would* mean that imports and the `open()` command wouldn't work by default, and folks would have to actively work to gain access to the standard builtins in order to change that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/5", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/5/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/5/events", "html_url": "https://github.com/pypa/pipfile/issues/5", "id": 190663530, "node_id": "MDU6SXNzdWUxOTA2NjM1MzA=", "number": 5, "title": "Include a 'version' tag in Pipfile.lock", "user": {"login": "defnull", "id": 62740, "node_id": "MDQ6VXNlcjYyNzQw", "avatar_url": "https://avatars1.githubusercontent.com/u/62740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/defnull", "html_url": "https://github.com/defnull", "followers_url": "https://api.github.com/users/defnull/followers", "following_url": "https://api.github.com/users/defnull/following{/other_user}", "gists_url": "https://api.github.com/users/defnull/gists{/gist_id}", "starred_url": "https://api.github.com/users/defnull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/defnull/subscriptions", "organizations_url": "https://api.github.com/users/defnull/orgs", "repos_url": "https://api.github.com/users/defnull/repos", "events_url": "https://api.github.com/users/defnull/events{/privacy}", "received_events_url": "https://api.github.com/users/defnull/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2016-11-21T09:39:26Z", "updated_at": "2017-09-02T17:27:38Z", "closed_at": "2017-09-02T17:26:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/4", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/4/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/4/events", "html_url": "https://github.com/pypa/pipfile/issues/4", "id": 190577507, "node_id": "MDU6SXNzdWUxOTA1Nzc1MDc=", "number": 4, "title": "Function names in files", "user": {"login": "mlakewood", "id": 663390, "node_id": "MDQ6VXNlcjY2MzM5MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/663390?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlakewood", "html_url": "https://github.com/mlakewood", "followers_url": "https://api.github.com/users/mlakewood/followers", "following_url": "https://api.github.com/users/mlakewood/following{/other_user}", "gists_url": "https://api.github.com/users/mlakewood/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlakewood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlakewood/subscriptions", "organizations_url": "https://api.github.com/users/mlakewood/orgs", "repos_url": "https://api.github.com/users/mlakewood/repos", "events_url": "https://api.github.com/users/mlakewood/events{/privacy}", "received_events_url": "https://api.github.com/users/mlakewood/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-11-20T19:24:31Z", "updated_at": "2017-01-26T23:48:22Z", "closed_at": "2017-01-26T23:48:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "First off, I'd like to say THIS IS GREAT!\r\n\r\nIm really excited about having a better version of requirements.txt.  I wasn't sure where the best place for suggestions on this project are, so I figured an issue at this early stage was a good place. As always this is just my initial thoughts, do what you will with them (that includes closing this issue).\r\n\r\n1. The `dist()` name doesn't make a whole lot of sense to me. I suspect its supposed to be short for distribution. My suggestion would be to make it about what the user wants to do. ie `install`, `depends`, `require` . These are all names that are in similar use in other package managers and I think make more sense. But names are also hard.\r\n2. I know a lot of confusion comes from what setup.py is for and what requirements.txt is for. It would probably be really helpful to have some guidance on that, and where this fits in there.\r\n3. I heard cargo from rust as a nifty feature called features. It allows a package to declare features that you could enable and you would get a set of transitive dependencies. So Django could have a postgres feature that you could opt into. When you do the psycopg2 package would get installed. If you don't then you only get sqlite. This allows the Django package owner to specify which version of postgres is installed while not making the user install the world. This would probably require a bunch of changes to setup.py/everything-else, but having a list of features that you could enable in this API might pave the way for that.\r\n\r\nAnyway, really looking forward to using this!\r\n\r\nThanks for listening\r\n\r\nMark", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pypa/pipfile/issues/3", "repository_url": "https://api.github.com/repos/pypa/pipfile", "labels_url": "https://api.github.com/repos/pypa/pipfile/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/pypa/pipfile/issues/3/comments", "events_url": "https://api.github.com/repos/pypa/pipfile/issues/3/events", "html_url": "https://github.com/pypa/pipfile/issues/3", "id": 190532919, "node_id": "MDU6SXNzdWUxOTA1MzI5MTk=", "number": 3, "title": "Address likely FAQs about Pipfile in the README", "user": {"login": "nchammas", "id": 1039369, "node_id": "MDQ6VXNlcjEwMzkzNjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1039369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nchammas", "html_url": "https://github.com/nchammas", "followers_url": "https://api.github.com/users/nchammas/followers", "following_url": "https://api.github.com/users/nchammas/following{/other_user}", "gists_url": "https://api.github.com/users/nchammas/gists{/gist_id}", "starred_url": "https://api.github.com/users/nchammas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nchammas/subscriptions", "organizations_url": "https://api.github.com/users/nchammas/orgs", "repos_url": "https://api.github.com/users/nchammas/repos", "events_url": "https://api.github.com/users/nchammas/events{/privacy}", "received_events_url": "https://api.github.com/users/nchammas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-11-20T01:38:06Z", "updated_at": "2017-01-14T19:08:05Z", "closed_at": "2017-01-14T19:08:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I know this project was just open-sourced and is still under active development, so consider this a reminder to update the README with some additional info when the time is right.\r\n\r\nSome questions that immediately popped into my mind, which others are likely to ask, include:\r\n\r\n1. How does `Pipfile` relate to `setup.py` and the [upcoming `pyproject.toml`](https://www.python.org/dev/peps/pep-0518/)? Is it the same relationship as the one [described here](https://caremad.io/posts/2013/07/setup-vs-requirement/) between `requirements.txt` and `setup.py`?\r\n2. With the planned `setup.py` to `pyproject.toml` transition, we seem to be moving away from using Python and more towards using a declarative syntax for specifying build system requirements. With this proposed `requirements.txt` to `Pipfile` transition, however, we seem to be moving in the opposite direction. Could you comment on this?\r\n3. Does `Pipfile` just use a Python-like syntax, or will it actually run Python code, like `setup.py`?\r\n4. What is the purpose of `Pipfile.lock`, and will packaging end-users need to care about this file?", "performed_via_github_app": null, "score": 1.0}]}