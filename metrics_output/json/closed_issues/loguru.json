{"total_count": 255, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/Delgan/loguru/issues/308", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/308/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/308/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/308/events", "html_url": "https://github.com/Delgan/loguru/issues/308", "id": 680248627, "node_id": "MDU6SXNzdWU2ODAyNDg2Mjc=", "number": 308, "title": "Truncating exception messages", "user": {"login": "ThibTrip", "id": 40694343, "node_id": "MDQ6VXNlcjQwNjk0MzQz", "avatar_url": "https://avatars2.githubusercontent.com/u/40694343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibTrip", "html_url": "https://github.com/ThibTrip", "followers_url": "https://api.github.com/users/ThibTrip/followers", "following_url": "https://api.github.com/users/ThibTrip/following{/other_user}", "gists_url": "https://api.github.com/users/ThibTrip/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibTrip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibTrip/subscriptions", "organizations_url": "https://api.github.com/users/ThibTrip/orgs", "repos_url": "https://api.github.com/users/ThibTrip/repos", "events_url": "https://api.github.com/users/ThibTrip/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibTrip/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-08-17T13:45:19Z", "updated_at": "2020-08-21T11:35:56Z", "closed_at": "2020-08-21T11:35:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\n\r\nI am having a hard time truncating exception messages when using <code>logger.exception('Some message', e)</code>. With SQL exceptions notably, it logs the whole parameterized query (with 10.000 parameters). This even prevents me from receiving some error mails.\r\n\r\nI tried:\r\n* truncating the exception message if its length is above <code>N</code> characters. But loguru uses better exceptions and <code>len(str(some_exception))</code> does not account for that so it gives me a much shorter length that what is going to be logged.\r\n* removing better exceptions by using <code>os.environ['BETTER_EXCEPTIONS'] = '0'</code> in my code before importing the loguru.logger.\r\n\r\nPerhaps the problems I described better_exceptions and truncating could be part of an enhancement? Unless there are options that I did not see or a good workaround.\r\n\r\nThanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/306", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/306/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/306/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/306/events", "html_url": "https://github.com/Delgan/loguru/issues/306", "id": 676988706, "node_id": "MDU6SXNzdWU2NzY5ODg3MDY=", "number": 306, "title": "Ensuring sys.exit(1) when log level is sufficiently high", "user": {"login": "ujjwal-ai", "id": 60658842, "node_id": "MDQ6VXNlcjYwNjU4ODQy", "avatar_url": "https://avatars0.githubusercontent.com/u/60658842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ujjwal-ai", "html_url": "https://github.com/ujjwal-ai", "followers_url": "https://api.github.com/users/ujjwal-ai/followers", "following_url": "https://api.github.com/users/ujjwal-ai/following{/other_user}", "gists_url": "https://api.github.com/users/ujjwal-ai/gists{/gist_id}", "starred_url": "https://api.github.com/users/ujjwal-ai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ujjwal-ai/subscriptions", "organizations_url": "https://api.github.com/users/ujjwal-ai/orgs", "repos_url": "https://api.github.com/users/ujjwal-ai/repos", "events_url": "https://api.github.com/users/ujjwal-ai/events{/privacy}", "received_events_url": "https://api.github.com/users/ujjwal-ai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-11T15:47:54Z", "updated_at": "2020-08-12T11:47:15Z", "closed_at": "2020-08-12T11:47:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for this work.\r\n\r\nI am porting an existing codebase to loguru.  I would like to ensure that whenever logger.error or logger.critical are called, sys.exit(1) is automatically invoked.  Can you kindly help me about how to write a handler for it ? It would be a great help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/304", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/304/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/304/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/304/events", "html_url": "https://github.com/Delgan/loguru/issues/304", "id": 673737732, "node_id": "MDU6SXNzdWU2NzM3Mzc3MzI=", "number": 304, "title": "possible regression in intergration with sentry in version >=0.4.0", "user": {"login": "itraviv", "id": 23009955, "node_id": "MDQ6VXNlcjIzMDA5OTU1", "avatar_url": "https://avatars1.githubusercontent.com/u/23009955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itraviv", "html_url": "https://github.com/itraviv", "followers_url": "https://api.github.com/users/itraviv/followers", "following_url": "https://api.github.com/users/itraviv/following{/other_user}", "gists_url": "https://api.github.com/users/itraviv/gists{/gist_id}", "starred_url": "https://api.github.com/users/itraviv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itraviv/subscriptions", "organizations_url": "https://api.github.com/users/itraviv/orgs", "repos_url": "https://api.github.com/users/itraviv/repos", "events_url": "https://api.github.com/users/itraviv/events{/privacy}", "received_events_url": "https://api.github.com/users/itraviv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-05T17:59:26Z", "updated_at": "2020-08-06T19:16:00Z", "closed_at": "2020-08-06T08:13:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "with loguru versions < 0.4.0 the addition of sentry handlers (sentry-sdk==0.16.0):\r\n```python\r\nh1 =   {\r\n            'sink': sentry_sdk.integrations.logging.EventHandler,\r\n            'level': logging.ERROR,\r\n            'format': '{message}',\r\n            'backtrace': False,\r\n        }\r\nh2 =   {\r\n            'sink': sentry_sdk.integrations.logging.BreadcrumbHandler,\r\n            'level': logging.DEBUG,\r\n            'format': '{message}',\r\n            'backtrace': False,\r\n        }\r\n   \r\nlogger.configure(handlers=[h1, h2],)\r\n```\r\nresults in:\r\n```\r\n2020-08-05 20:34:00.846 | INFO     | main:10 - test\r\n```\r\nwith loguru version >= 0.4.0 this results in:\r\n```\r\n--- Logging error in Loguru Handler #3 ---\r\nRecord was: {'elapsed': datetime.timedelta(0, 0, 216902), 'exception': None, 'file': (name='logger.py', path='/home/user/test/logger.py'), 'function': 'main', 'level': (name='INFO', no=20, icon='\u2139\ufe0f'), 'line': 10, 'message': 'test', 'module': 'logger', 'name': 'cfg.logger', 'process': (id=11374, name='MainProcess'), 'thread': (id=139927630493504, name='MainThread'), 'time': datetime(2020, 8, 5, 20, 34, 11, 930226, tzinfo=datetime.timezone(datetime.timedelta(0, 10800), 'IDT'))}\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/loguru/_handler.py\", line 153, in emit\r\n    self._sink.write(str_record)\r\n  File \"/usr/local/lib/python3.6/dist-packages/loguru/_simple_sinks.py\", line 106, in write\r\n    self._function(message)\r\n  File \"/usr/lib/python3.6/logging/__init__.py\", line 778, in __init__\r\n    self.level = _checkLevel(level)\r\n  File \"/usr/lib/python3.6/logging/__init__.py\", line 195, in _checkLevel\r\n    raise ValueError(\"Unknown level: %r\" % level)\r\nValueError: Unknown level: 'test\\n'\r\n--- End of logging error ---\r\n```\r\nand breaks the integration where the levels were correctly defined. i have also tried to define it using an str representation like `\"INFO\"` or `\"ERROR\"` having the same behavior\r\npython3.6.9", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/302", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/302/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/302/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/302/events", "html_url": "https://github.com/Delgan/loguru/issues/302", "id": 668938285, "node_id": "MDU6SXNzdWU2Njg5MzgyODU=", "number": 302, "title": "Usage example with Django", "user": {"login": "jnoortheen", "id": 6702219, "node_id": "MDQ6VXNlcjY3MDIyMTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6702219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jnoortheen", "html_url": "https://github.com/jnoortheen", "followers_url": "https://api.github.com/users/jnoortheen/followers", "following_url": "https://api.github.com/users/jnoortheen/following{/other_user}", "gists_url": "https://api.github.com/users/jnoortheen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jnoortheen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jnoortheen/subscriptions", "organizations_url": "https://api.github.com/users/jnoortheen/orgs", "repos_url": "https://api.github.com/users/jnoortheen/repos", "events_url": "https://api.github.com/users/jnoortheen/events{/privacy}", "received_events_url": "https://api.github.com/users/jnoortheen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-07-30T16:28:09Z", "updated_at": "2020-08-14T07:44:05Z", "closed_at": "2020-08-08T16:20:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am not able to find any examples that translates logging/dictconfig to loguru. [Here](https://github.com/wemake-services/wemake-django-template/blob/master/%7B%7Bcookiecutter.project_name%7D%7D/server/settings/components/logging.py) is a template repo that configures structlog. How this can be translated to use loguru as the default handler? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/301", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/301/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/301/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/301/events", "html_url": "https://github.com/Delgan/loguru/issues/301", "id": 666788454, "node_id": "MDU6SXNzdWU2NjY3ODg0NTQ=", "number": 301, "title": "I want to get the color Raw string, example \"[33m[1\", what i shuld do? thanks ", "user": {"login": "yxxhero", "id": 11087727, "node_id": "MDQ6VXNlcjExMDg3NzI3", "avatar_url": "https://avatars3.githubusercontent.com/u/11087727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yxxhero", "html_url": "https://github.com/yxxhero", "followers_url": "https://api.github.com/users/yxxhero/followers", "following_url": "https://api.github.com/users/yxxhero/following{/other_user}", "gists_url": "https://api.github.com/users/yxxhero/gists{/gist_id}", "starred_url": "https://api.github.com/users/yxxhero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yxxhero/subscriptions", "organizations_url": "https://api.github.com/users/yxxhero/orgs", "repos_url": "https://api.github.com/users/yxxhero/repos", "events_url": "https://api.github.com/users/yxxhero/events{/privacy}", "received_events_url": "https://api.github.com/users/yxxhero/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-07-28T05:47:13Z", "updated_at": "2020-07-29T02:50:58Z", "closed_at": "2020-07-28T06:45:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to get the color Raw string, example \"[33m[1\", what i shuld do? thanks ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/300", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/300/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/300/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/300/events", "html_url": "https://github.com/Delgan/loguru/issues/300", "id": 665929187, "node_id": "MDU6SXNzdWU2NjU5MjkxODc=", "number": 300, "title": "about log file name", "user": {"login": "Yancongyu", "id": 28824230, "node_id": "MDQ6VXNlcjI4ODI0MjMw", "avatar_url": "https://avatars1.githubusercontent.com/u/28824230?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yancongyu", "html_url": "https://github.com/Yancongyu", "followers_url": "https://api.github.com/users/Yancongyu/followers", "following_url": "https://api.github.com/users/Yancongyu/following{/other_user}", "gists_url": "https://api.github.com/users/Yancongyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yancongyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yancongyu/subscriptions", "organizations_url": "https://api.github.com/users/Yancongyu/orgs", "repos_url": "https://api.github.com/users/Yancongyu/repos", "events_url": "https://api.github.com/users/Yancongyu/events{/privacy}", "received_events_url": "https://api.github.com/users/Yancongyu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-27T02:27:58Z", "updated_at": "2020-07-27T06:34:28Z", "closed_at": "2020-07-27T06:34:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "i use like this \r\n![image](https://user-images.githubusercontent.com/28824230/88497707-b7732280-cff3-11ea-8fb4-f5c3b9a6d4d0.png)\r\nbut the log file name like this \r\n![image](https://user-images.githubusercontent.com/28824230/88497739-cf4aa680-cff3-11ea-843a-1ed04e638778.png)\r\n how can i fix this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/299", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/299/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/299/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/299/events", "html_url": "https://github.com/Delgan/loguru/issues/299", "id": 664216341, "node_id": "MDU6SXNzdWU2NjQyMTYzNDE=", "number": 299, "title": "Change the format of the default logger", "user": {"login": "sisibeloved", "id": 9612053, "node_id": "MDQ6VXNlcjk2MTIwNTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/9612053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sisibeloved", "html_url": "https://github.com/sisibeloved", "followers_url": "https://api.github.com/users/sisibeloved/followers", "following_url": "https://api.github.com/users/sisibeloved/following{/other_user}", "gists_url": "https://api.github.com/users/sisibeloved/gists{/gist_id}", "starred_url": "https://api.github.com/users/sisibeloved/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sisibeloved/subscriptions", "organizations_url": "https://api.github.com/users/sisibeloved/orgs", "repos_url": "https://api.github.com/users/sisibeloved/repos", "events_url": "https://api.github.com/users/sisibeloved/events{/privacy}", "received_events_url": "https://api.github.com/users/sisibeloved/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-23T05:41:27Z", "updated_at": "2020-07-23T11:37:06Z", "closed_at": "2020-07-23T11:37:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "hello, I'm trying to add a request ID in the log message. I've tried the `configure` function like this:\r\n\r\n```python\r\nextra = {\"request_id\": \"default\"}\r\nlogger.configure(extra=extra)\r\nlogger.add(sys.stderr, format=\"{time} - {extra[request_id]} - {level} - {message}\")\r\n```\r\n\r\nAnd there are two lines of log printed. Then I find in the documentation that the `Logger` class is already instantiated when import. So I change the code into:\r\n\r\n```python\r\nlogger.remove(0)\r\nextra = {\"request_id\": \"default\"}\r\nlogger.configure(extra=extra)\r\nlogger.add(sys.stderr, format=\"<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <yellow>{extra[request_id]}</yellow> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>\")\r\n```\r\n\r\nIs there any elegant method to change the format of the default logger or have I used the wrong function?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/298", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/298/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/298/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/298/events", "html_url": "https://github.com/Delgan/loguru/issues/298", "id": 661694155, "node_id": "MDU6SXNzdWU2NjE2OTQxNTU=", "number": 298, "title": "Log message is not logged to file for exception with unpickleable content", "user": {"login": "micuda", "id": 8404610, "node_id": "MDQ6VXNlcjg0MDQ2MTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/8404610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/micuda", "html_url": "https://github.com/micuda", "followers_url": "https://api.github.com/users/micuda/followers", "following_url": "https://api.github.com/users/micuda/following{/other_user}", "gists_url": "https://api.github.com/users/micuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/micuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/micuda/subscriptions", "organizations_url": "https://api.github.com/users/micuda/orgs", "repos_url": "https://api.github.com/users/micuda/repos", "events_url": "https://api.github.com/users/micuda/events{/privacy}", "received_events_url": "https://api.github.com/users/micuda/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363344, "node_id": "MDU6TGFiZWw2NjkzNjMzNDQ=", "url": "https://api.github.com/repos/Delgan/loguru/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-20T11:11:24Z", "updated_at": "2020-07-22T11:45:16Z", "closed_at": "2020-07-21T20:56:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi @Delgan ,\r\nat first, thank You for this library. =)\r\n\r\nWhen I try log an exception with unpickleable content the log message is not logged to file. When you logging to e.g. `stderr`, the behaviour is correct.\r\n\r\nIn my case I think it is related to https://github.com/samuelcolvin/pydantic/issues/1667. But I also think that should be handled in `loguru`, because you never know what kind of exception will you log.\r\n\r\nIs it possible write to file the same output as for non-enqueued sink?\r\n\r\nRelated line: https://github.com/Delgan/loguru/blob/0.5.1/loguru/_handler.py#L174\r\n\r\n---\r\n\r\nAn ideal bug report includes:\r\n* The Python version you are using\r\n```console\r\n$ python -V\r\nPython 3.8.2\r\n```\r\n\r\n* The Loguru version you are using (you can find it with print(loguru.__version__))\r\n```console\r\n$ python -c 'import loguru;print(loguru.__version__)'\r\n0.5.1\r\n```\r\n\r\n* Your operating system name and version (Linux, MacOS, Windows)\r\n```console\r\n$ lsb_release -a 2> /dev/null | grep -i description\r\nLinux Mint 19.2 Tina\r\n```\r\n\r\n* Your development environment and local setup (IDE, Terminal, project context, any relevant information that could be useful)\r\n\r\nBecause I couldn't create more minimal example, for reproducing the issue you have to:\r\n```console\r\n$ pip install fastapi==0.54.1 httpie==2.2.0 loguru==0.5.1 pydantic==1.5.1 uvicorn==0.11.5\r\n```\r\n\r\n* Some minimal reproducible example\r\n\r\nCreate file `test_log_exception_with_unpickleable_content_fails.py` with content:\r\n```python\r\n#!/usr/bin/env python3\r\nfrom pathlib import Path\r\n\r\nfrom loguru   import logger\r\nfrom pydantic import BaseModel\r\nfrom fastapi  import FastAPI, Depends\r\n\r\nCURRENT_DIR = Path(__file__).resolve(strict = True).parent\r\n\r\nlogger.remove()\r\nlogger.add(CURRENT_DIR / 'log_file.log', enqueue = True)\r\n\r\napp = FastAPI()\r\n\r\n@app.middleware('http')\r\nasync def test_middleware(request, call_next):\r\n  try:\r\n    response = await call_next(request)\r\n\r\n  finally:\r\n    logger.exception('log message')\r\n\r\nclass Profile(BaseModel):\r\n  first_name: str\r\n  last_name:  str\r\n  age:        int\r\n\r\n@app.get('/test', response_model = Profile)\r\ndef get_profile():\r\n  return { 'first_name': 'John', 'last_name': 'Doe' }\r\n\r\n\r\nif __name__ == '__main__':\r\n  import uvicorn\r\n\r\n  uvicorn.run('test_log_exception_with_unpickleable_content_fails:app',\r\n              host = '127.0.0.1',\r\n              port = 8000)\r\n```\r\n\r\nRun server:\r\n```console\r\n$ ./test_log_exception_with_unpickleable_content_fails.py\r\n```\r\nor\r\n```console\r\n$ uvicorn test_log_exception_with_unpickleable_content_fails:app --port 8000\r\n```\r\n\r\nMake a request:\r\n```console\r\n$ http :8000/test\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/296", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/296/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/296/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/296/events", "html_url": "https://github.com/Delgan/loguru/issues/296", "id": 657570544, "node_id": "MDU6SXNzdWU2NTc1NzA1NDQ=", "number": 296, "title": "Customize the uncaught exception error message so it JSON", "user": {"login": "dilzeem", "id": 8899724, "node_id": "MDQ6VXNlcjg4OTk3MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/8899724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dilzeem", "html_url": "https://github.com/dilzeem", "followers_url": "https://api.github.com/users/dilzeem/followers", "following_url": "https://api.github.com/users/dilzeem/following{/other_user}", "gists_url": "https://api.github.com/users/dilzeem/gists{/gist_id}", "starred_url": "https://api.github.com/users/dilzeem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dilzeem/subscriptions", "organizations_url": "https://api.github.com/users/dilzeem/orgs", "repos_url": "https://api.github.com/users/dilzeem/repos", "events_url": "https://api.github.com/users/dilzeem/events{/privacy}", "received_events_url": "https://api.github.com/users/dilzeem/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363342, "node_id": "MDU6TGFiZWw2NjkzNjMzNDI=", "url": "https://api.github.com/repos/Delgan/loguru/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-15T18:44:09Z", "updated_at": "2020-07-17T13:40:44Z", "closed_at": "2020-07-17T13:40:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi I have this custom sink that I use to handle exceptions\r\n\r\n```python\r\ndef log_exception(*args):\r\n    if len(args) == 1:\r\n        e = args[0]\r\n        etype, value, tb = type(e), e, e.__traceback__\r\n    elif len(args) == 3:\r\n        etype, value, tb = args\r\n    else:\r\n        logger.error(\"Not able to log exception. Wrong number of arguments given. Should either receive 1 argument \"\r\n                        \"- an exception, or 3 arguments: exc type, exc value and traceback\")\r\n        return\r\n\r\n    tb_parsed = []\r\n    for filename, lineno, func, text in traceback.extract_tb(tb):\r\n        tb_parsed.append({\"filename\": filename, \"lineno\": lineno, \"func\": func, \"text\": text})\r\n\r\n    logger.exception(\r\n        \"Uncaught exception\", extra={\r\n            \"exception\": traceback.format_exception_only(etype, value)[0].strip(),\r\n            \"traceback\": tb_parsed\r\n        }\r\n    )\r\n\r\nlogger.remove()\r\nlogger.add(sys.stdout, serialize=True, level=\"INFO\")\r\nsys.excepthook = log_exception\r\n```\r\nIt works fine, and catches the error and formats except the error message, but it is not exactly JSON because of the text `Record was: `. Is there a way to format this logging error or remove that text so that line is JSON as well?\r\n\r\n```\r\n--- Logging error in Loguru Handler #1 ---\r\nRecord was: {'elapsed': datetime.timedelta(seconds=1, microseconds=314659), 'exception': (type=None, value=None, traceback=None), 'extra': {'extra': {'exception': \"KeyError: 'yes'\", 'traceback': [{'filename': '/mnt/c/Users/sivaharan.rajkumar/GoogleDrive/projects/aws_debug/aws_debug/main.py', 'lineno': 39, 'func': '<module>', 'text': \"print(some_dict['yes'])\"}]}}, 'file': (name='init_logging.py', path='/mnt/c/Users/sivaharan.rajkumar/GoogleDrive/projects/aws_debug/aws_debug/init_logging.py'), 'function': 'log_exception', 'level': (name='ERROR', no=40, icon='\u274c'), 'line': 26, 'message': 'Uncaught exception', 'module': 'init_logging', 'name': 'init_logging', 'process': (id=6496, name='MainProcess'), 'thread': (id=140600093005632, name='MainThread'), 'time': datetime(2020, 7, 15, 20, 37, 34, 180836, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200), 'CEST'))}\r\nTraceback (most recent call last):\r\n  File \"/home/dilzeem/.cache/pypoetry/virtualenvs/aws-debug-ivZo2Zzb-py3.7/lib/python3.7/site-packages/loguru/_handler.py\", line 165, in emit\r\n    formatted = self._serialize_record(formatted, record)\r\n  File \"/home/dilzeem/.cache/pypoetry/virtualenvs/aws-debug-ivZo2Zzb-py3.7/lib/python3.7/site-packages/loguru/_handler.py\", line 231, in _serialize_record\r\n    \"type\": record[\"exception\"].type.__name__,\r\nAttributeError: 'NoneType' object has no attribute '__name__'\r\n--- End of logging error ---\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/292", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/292/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/292/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/292/events", "html_url": "https://github.com/Delgan/loguru/issues/292", "id": 650199521, "node_id": "MDU6SXNzdWU2NTAxOTk1MjE=", "number": 292, "title": "Logging to file and not to console ", "user": {"login": "ramonemiliani93", "id": 14314888, "node_id": "MDQ6VXNlcjE0MzE0ODg4", "avatar_url": "https://avatars0.githubusercontent.com/u/14314888?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramonemiliani93", "html_url": "https://github.com/ramonemiliani93", "followers_url": "https://api.github.com/users/ramonemiliani93/followers", "following_url": "https://api.github.com/users/ramonemiliani93/following{/other_user}", "gists_url": "https://api.github.com/users/ramonemiliani93/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramonemiliani93/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramonemiliani93/subscriptions", "organizations_url": "https://api.github.com/users/ramonemiliani93/orgs", "repos_url": "https://api.github.com/users/ramonemiliani93/repos", "events_url": "https://api.github.com/users/ramonemiliani93/events{/privacy}", "received_events_url": "https://api.github.com/users/ramonemiliani93/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-02T20:56:31Z", "updated_at": "2020-07-07T15:55:45Z", "closed_at": "2020-07-07T15:55:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have added the `logger.add(\"file.log\")` to use solely the file as sink but I still get the logging on the console, what should be modified to avoid printing the logs to the console?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/291", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/291/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/291/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/291/events", "html_url": "https://github.com/Delgan/loguru/issues/291", "id": 649687081, "node_id": "MDU6SXNzdWU2NDk2ODcwODE=", "number": 291, "title": "Bind different logs to different log files separately by extra parameters", "user": {"login": "atifemreyuksel", "id": 16309848, "node_id": "MDQ6VXNlcjE2MzA5ODQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/16309848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atifemreyuksel", "html_url": "https://github.com/atifemreyuksel", "followers_url": "https://api.github.com/users/atifemreyuksel/followers", "following_url": "https://api.github.com/users/atifemreyuksel/following{/other_user}", "gists_url": "https://api.github.com/users/atifemreyuksel/gists{/gist_id}", "starred_url": "https://api.github.com/users/atifemreyuksel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atifemreyuksel/subscriptions", "organizations_url": "https://api.github.com/users/atifemreyuksel/orgs", "repos_url": "https://api.github.com/users/atifemreyuksel/repos", "events_url": "https://api.github.com/users/atifemreyuksel/events{/privacy}", "received_events_url": "https://api.github.com/users/atifemreyuksel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-02T06:59:09Z", "updated_at": "2020-07-02T17:33:40Z", "closed_at": "2020-07-02T09:51:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI am trying to use loguru in my class. My aim is writing specific log to specific log file without writing it on both of them. For this reason, I prefer to use extra parameters. I put my code below:\r\n\r\n```\r\nclass TaskLogger():\r\n    def __init__(self):\r\n        for store_name in [\"store1\", \"store2\"]:\r\n            logger.add(f\"log_{store_name}.log\", format=\"{time:YYYY-MM-DD - HH:mm:ss} | {level} | {message}\",\\\r\n                        filter=lambda record: record[\"extra\"][\"store\"] == store_name, level=\"INFO\")\r\n            logger.add(f\"log_{store_name}.log\", format=\"{time:YYYY-MM-DD - HH:mm:ss} | <red>{level}</red> | {message}\",\\\r\n                         filter=lambda record: record[\"extra\"][\"store\"] == store_name, level=\"ERROR\")\r\n    \r\n    def info_message(self, message, store_name):\r\n        logger.bind(store=store_name).info(message)\r\n        \r\n    def error_message(self, message, store_name):\r\n        logger.bind(store=store_name).error(message)\r\n```\r\nI am using JupyterLab. After declaring my class. I run the following lines:\r\n```\r\njob_logger = TaskLogger()\r\njob_logger.info_message(message=\"message1\", store_name=\"store1\")\r\njob_logger.info_message(message=\"message2\", store_name=\"store2\")\r\n```\r\n\r\nThe result is that logger writes only \"message2\" to both files. \"message1\" cannot be written to both files even it is called after message2 line.\r\n@Delgan how can I solve my problem? I think the bind logic is not run as I think. Thanks.\r\n\r\nPython version: Python 3.6.10\r\nLoguru version: Loguru 0.5.1\r\nOS: MacOS\r\nEnvironment: JupyterLab", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/290", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/290/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/290/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/290/events", "html_url": "https://github.com/Delgan/loguru/issues/290", "id": 647502151, "node_id": "MDU6SXNzdWU2NDc1MDIxNTE=", "number": 290, "title": "Reenable colored logging output after calling remove() and add() - tqdm", "user": {"login": "chwba", "id": 22568014, "node_id": "MDQ6VXNlcjIyNTY4MDE0", "avatar_url": "https://avatars0.githubusercontent.com/u/22568014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chwba", "html_url": "https://github.com/chwba", "followers_url": "https://api.github.com/users/chwba/followers", "following_url": "https://api.github.com/users/chwba/following{/other_user}", "gists_url": "https://api.github.com/users/chwba/gists{/gist_id}", "starred_url": "https://api.github.com/users/chwba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chwba/subscriptions", "organizations_url": "https://api.github.com/users/chwba/orgs", "repos_url": "https://api.github.com/users/chwba/repos", "events_url": "https://api.github.com/users/chwba/events{/privacy}", "received_events_url": "https://api.github.com/users/chwba/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-29T16:14:22Z", "updated_at": "2020-07-07T15:56:11Z", "closed_at": "2020-07-07T15:56:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I followed: https://loguru.readthedocs.io/en/stable/resources/recipes.html#interoperability-with-tqdm-iterations and it worked fine. Now after tqdm bar is closed I am trying to reactivate colored output, so i tried:\r\n`logger = logger.opt(colors=True)`\r\nBut that didnt do the trick.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/289", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/289/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/289/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/289/events", "html_url": "https://github.com/Delgan/loguru/issues/289", "id": 647195246, "node_id": "MDU6SXNzdWU2NDcxOTUyNDY=", "number": 289, "title": "Are f-strings supported?", "user": {"login": "chbndrhnns", "id": 7534547, "node_id": "MDQ6VXNlcjc1MzQ1NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7534547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chbndrhnns", "html_url": "https://github.com/chbndrhnns", "followers_url": "https://api.github.com/users/chbndrhnns/followers", "following_url": "https://api.github.com/users/chbndrhnns/following{/other_user}", "gists_url": "https://api.github.com/users/chbndrhnns/gists{/gist_id}", "starred_url": "https://api.github.com/users/chbndrhnns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chbndrhnns/subscriptions", "organizations_url": "https://api.github.com/users/chbndrhnns/orgs", "repos_url": "https://api.github.com/users/chbndrhnns/repos", "events_url": "https://api.github.com/users/chbndrhnns/events{/privacy}", "received_events_url": "https://api.github.com/users/chbndrhnns/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-29T07:49:04Z", "updated_at": "2020-06-30T14:09:00Z", "closed_at": "2020-06-30T14:09:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I see in the docs that `.format()` is supported for injecting variables into log messages. How about f-strings? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/286", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/286/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/286/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/286/events", "html_url": "https://github.com/Delgan/loguru/issues/286", "id": 637655600, "node_id": "MDU6SXNzdWU2Mzc2NTU2MDA=", "number": 286, "title": "Circular Reference Detected when serializing log record", "user": {"login": "swenzel", "id": 5111028, "node_id": "MDQ6VXNlcjUxMTEwMjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/5111028?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swenzel", "html_url": "https://github.com/swenzel", "followers_url": "https://api.github.com/users/swenzel/followers", "following_url": "https://api.github.com/users/swenzel/following{/other_user}", "gists_url": "https://api.github.com/users/swenzel/gists{/gist_id}", "starred_url": "https://api.github.com/users/swenzel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swenzel/subscriptions", "organizations_url": "https://api.github.com/users/swenzel/orgs", "repos_url": "https://api.github.com/users/swenzel/repos", "events_url": "https://api.github.com/users/swenzel/events{/privacy}", "received_events_url": "https://api.github.com/users/swenzel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363342, "node_id": "MDU6TGFiZWw2NjkzNjMzNDI=", "url": "https://api.github.com/repos/Delgan/loguru/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-12T10:33:23Z", "updated_at": "2020-06-12T14:19:04Z", "closed_at": "2020-06-12T14:19:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "When running the following python script:\r\n\r\n```python\r\nimport sys\r\nfrom loguru import logger\r\n\r\nconfig = {\r\n    \"handlers\": [\r\n        {\"sink\": sys.stdout, \"format\": \"{time} - {message}\", \"serialize\": True, \"colorize\": True},\r\n    ],\r\n}\r\nlogger.configure(**config)\r\nwith logger.catch():\r\n    raise RuntimeError(\"Something happened\")\r\n```\r\nI get:\r\n```plaintext\r\n--- Logging error in Loguru Handler #1 ---\r\nRecord was: {'elapsed': datetime.timedelta(microseconds=21630), 'exception': (type=<class 'RuntimeError'>, value=RuntimeError('Something happened'), traceback=<traceback object at 0x7f981875cbe0>), 'extra': {'record': {...}}, 'file': (name='test.py', path='test.py'), 'function': '<module>', 'level': (name='ERROR', no=40, icon='\u274c'), 'line': 11, 'message': \"An error has been caught in function '<module>', process 'MainProcess' (80051), thread 'MainThread' (140291248607616):\", 'module': 'test', 'name': '__main__', 'process': (id=80051, name='MainProcess'), 'thread': (id=140291248607616, name='MainThread'), 'time': datetime(2020, 6, 12, 12, 12, 51, 845339, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200), 'CEST'))}\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 11, in <module>\r\n    raise RuntimeError(\"Something happened\")\r\nRuntimeError: Something happened\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/user/.local/share/virtualenvs/test-TSP576Db/lib/python3.7/site-packages/loguru/_handler.py\", line 165, in emit\r\n    formatted = self._serialize_record(formatted, record)\r\n  File \"/home/user/.local/share/virtualenvs/test-TSP576Db/lib/python3.7/site-packages/loguru/_handler.py\", line 253, in _serialize_record\r\n    return json.dumps(serializable, default=str) + \"\\n\"\r\n  File \"/home/user/.asdf/installs/python/3.7.7/lib/python3.7/json/__init__.py\", line 238, in dumps\r\n    **kw).encode(obj)\r\n  File \"/home/user/.asdf/installs/python/3.7.7/lib/python3.7/json/encoder.py\", line 199, in encode\r\n    chunks = self.iterencode(o, _one_shot=True)\r\n  File \"/home/user/.asdf/installs/python/3.7.7/lib/python3.7/json/encoder.py\", line 257, in iterencode\r\n    return _iterencode(o, 0)\r\nValueError: Circular reference detected\r\n--- End of logging error ---\r\n```\r\nI'm using `loguru==0.5.0` and `python==3.7.7`.\r\nLooks like the problem is that `record[\"extra\"]` has an item `\"record\"` which points back to `record` so that `record is record[\"extra\"][\"record\"]` which is used in the object that shall be serialized and causes a circular reference within `_serialize_record` here:\r\nhttps://github.com/Delgan/loguru/blob/8c425111390f7c2e8cec3185d18ac9ab111dc0b0/loguru/_handler.py#L235", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/285", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/285/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/285/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/285/events", "html_url": "https://github.com/Delgan/loguru/issues/285", "id": 636231326, "node_id": "MDU6SXNzdWU2MzYyMzEzMjY=", "number": 285, "title": "Issue while adding Request ID in flask", "user": {"login": "Gopichand995", "id": 18621009, "node_id": "MDQ6VXNlcjE4NjIxMDA5", "avatar_url": "https://avatars0.githubusercontent.com/u/18621009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gopichand995", "html_url": "https://github.com/Gopichand995", "followers_url": "https://api.github.com/users/Gopichand995/followers", "following_url": "https://api.github.com/users/Gopichand995/following{/other_user}", "gists_url": "https://api.github.com/users/Gopichand995/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gopichand995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gopichand995/subscriptions", "organizations_url": "https://api.github.com/users/Gopichand995/orgs", "repos_url": "https://api.github.com/users/Gopichand995/repos", "events_url": "https://api.github.com/users/Gopichand995/events{/privacy}", "received_events_url": "https://api.github.com/users/Gopichand995/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-10T13:07:14Z", "updated_at": "2020-06-10T19:47:33Z", "closed_at": "2020-06-10T18:40:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Request ID is stored in flask.g.request_id argument in flask's before_request. I am facing issue in logging this request id through \"format\" variable of the loguru for each and every request.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/284", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/284/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/284/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/284/events", "html_url": "https://github.com/Delgan/loguru/issues/284", "id": 634963723, "node_id": "MDU6SXNzdWU2MzQ5NjM3MjM=", "number": 284, "title": "Using enqueue=True hangs gunicorn workers indefinately", "user": {"login": "BartlomiejLewandowski", "id": 692229, "node_id": "MDQ6VXNlcjY5MjIyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/692229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BartlomiejLewandowski", "html_url": "https://github.com/BartlomiejLewandowski", "followers_url": "https://api.github.com/users/BartlomiejLewandowski/followers", "following_url": "https://api.github.com/users/BartlomiejLewandowski/following{/other_user}", "gists_url": "https://api.github.com/users/BartlomiejLewandowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/BartlomiejLewandowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BartlomiejLewandowski/subscriptions", "organizations_url": "https://api.github.com/users/BartlomiejLewandowski/orgs", "repos_url": "https://api.github.com/users/BartlomiejLewandowski/repos", "events_url": "https://api.github.com/users/BartlomiejLewandowski/events{/privacy}", "received_events_url": "https://api.github.com/users/BartlomiejLewandowski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-08T22:02:38Z", "updated_at": "2020-08-02T07:05:41Z", "closed_at": "2020-08-02T07:05:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been scratching my head for a while why my dockerized app build does not start up and hangs indefinately. I was able to extract a minimal working example that illustrates the issue:\r\n\r\n```\r\nimport loguru\r\nfrom flask import Flask\r\n\r\n\r\ndef any_sink(message):\r\n    print(message)\r\n\r\nloguru.logger.add(any_sink, enqueue=True)\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route('/version', methods=['GET'])\r\ndef test_endpoint():\r\n    return \"KM\"\r\n\r\nif __name__ == '__main__':\r\n    app.run(host='0.0.0.0', port=8081)\r\n```\r\n\r\nNow running the code with \r\n```gunicorn --worker-class=gevent --worker-connections=1000 --workers=1 --bind 0.0.0.0:8081 test:app```\r\nfor some reason causes the worker to never report back, compared to just running this module via a Flask dev server.\r\n\r\nNot sure if the issue is on gunicorn side or not, but setting the enqueue parameter to False makes all the workers start up without any issues.\r\n\r\nI do need that parameter, due to the fact that I'm using the subprocessing library to spawn a new process and a downstream library is not threadsafe - it buffers logs and they get overwritten before being sent. The enqueue parameter resolved the issue, but hangs with gunicorn. \r\n\r\nOS: Ubuntu\r\nVersions:\r\n\r\ngunicorn (version 20.0.4)\r\ngevent 20.6.0\r\nloguru 0.5.0 \r\nFlask 1.1.1   ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/283", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/283/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/283/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/283/events", "html_url": "https://github.com/Delgan/loguru/issues/283", "id": 634528786, "node_id": "MDU6SXNzdWU2MzQ1Mjg3ODY=", "number": 283, "title": "Catch exceptions inside async callbacks", "user": {"login": "sergree", "id": 43672811, "node_id": "MDQ6VXNlcjQzNjcyODEx", "avatar_url": "https://avatars3.githubusercontent.com/u/43672811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sergree", "html_url": "https://github.com/sergree", "followers_url": "https://api.github.com/users/sergree/followers", "following_url": "https://api.github.com/users/sergree/following{/other_user}", "gists_url": "https://api.github.com/users/sergree/gists{/gist_id}", "starred_url": "https://api.github.com/users/sergree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sergree/subscriptions", "organizations_url": "https://api.github.com/users/sergree/orgs", "repos_url": "https://api.github.com/users/sergree/repos", "events_url": "https://api.github.com/users/sergree/events{/privacy}", "received_events_url": "https://api.github.com/users/sergree/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-08T11:30:40Z", "updated_at": "2020-06-08T17:34:20Z", "closed_at": "2020-06-08T17:18:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello. I use [discord.py](https://github.com/Rapptz/discord.py) library to build Discord bots.\r\n\r\nMy example code:\r\n```python\r\nimport discord\r\nimport asyncio\r\nfrom loguru import logger\r\n\r\nimport config\r\n\r\nlogger.add(\"file_{time}.log\", enqueue=True)\r\n\r\n\r\nclass MyClient(discord.Client):\r\n    async def on_ready(self):\r\n        logger.info('Logged on as {}', self.user)\r\n        await asyncio.sleep(5)\r\n        raise TypeError\r\n\r\n\r\nclient = MyClient()\r\n\r\nwith logger.catch():\r\n    client.run(config.token)\r\n```\r\n\r\n`logger.info()` line works as expected.\r\nBut the `raise TypeError` is not catched by `loguru`, and is not saved to the file.\r\n\r\nHow can i fix this? \r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/282", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/282/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/282/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/282/events", "html_url": "https://github.com/Delgan/loguru/issues/282", "id": 634492234, "node_id": "MDU6SXNzdWU2MzQ0OTIyMzQ=", "number": 282, "title": "Execution freezes on `Handler._stop()` ", "user": {"login": "herzog0", "id": 35974312, "node_id": "MDQ6VXNlcjM1OTc0MzEy", "avatar_url": "https://avatars3.githubusercontent.com/u/35974312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/herzog0", "html_url": "https://github.com/herzog0", "followers_url": "https://api.github.com/users/herzog0/followers", "following_url": "https://api.github.com/users/herzog0/following{/other_user}", "gists_url": "https://api.github.com/users/herzog0/gists{/gist_id}", "starred_url": "https://api.github.com/users/herzog0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/herzog0/subscriptions", "organizations_url": "https://api.github.com/users/herzog0/orgs", "repos_url": "https://api.github.com/users/herzog0/repos", "events_url": "https://api.github.com/users/herzog0/events{/privacy}", "received_events_url": "https://api.github.com/users/herzog0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-08T10:31:58Z", "updated_at": "2020-06-08T20:51:36Z", "closed_at": "2020-06-08T20:51:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello again!\r\nI'm trying to setup a telegram Bot account as a sink for errors that might occur in my program. \r\nThis is the code for now:\r\n```python\r\nimport os\r\nimport time\r\n\r\nfrom telepot.exception import TelegramError\r\nfrom functools import partialmethod\r\nfrom loguru import logger\r\nimport telepot\r\nimport sys\r\n\r\nTRACE = 5\r\nDEBUG = 10\r\nINFO = 20\r\nON = 21\r\nSUCCESS = 25\r\nWARNING = 30\r\nERROR = 40\r\nCRITICAL = 50\r\n\r\n\r\nclass Singleton(type):\r\n    _instances = {}\r\n    def __call__(cls, *args, **kwargs):\r\n        if cls not in cls._instances:\r\n            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)\r\n        return cls._instances[cls]\r\n\r\n\r\nclass TelegramSink(metaclass=Singleton):\r\n\r\n    def __init__(self):\r\n        self.token = os.environ.get(\"telegram_token\", None)\r\n        self.chat_id = os.environ.get(\"telegram_chat_id\", None)\r\n        self.bot = telepot.Bot(token=self.token)\r\n        self.telegram_sink_id = None\r\n\r\n    def ensure_setup(self):\r\n        try:\r\n            self.send_message(\"Ensuring telegram setup...\")\r\n        except TelegramError:\r\n            logger.error(\"Telegram failed to setup...\")\r\n            self.bot = None\r\n            return\r\n\r\n    def destroy_sink(self, *args):\r\n        logger.warning(f\"Destroying telegram sink {self.telegram_sink_id}\")\r\n        #############\r\n        # Freezing here!\r\n        #############\r\n        logger.remove(self.telegram_sink_id)\r\n        logger.warning(\"DESTROYED\")\r\n\r\n    def send_message(self, message):\r\n        self.bot.sendMessage(chat_id=self.chat_id, text=message, parse_mode=\"markdown\")\r\n\r\n    def telegram_sink(self, message):\r\n        try:\r\n            self.send_message(message)\r\n        except TelegramError:\r\n            self.destroy_sink()\r\n\r\n    @staticmethod\r\n    def telegram_format():\r\n        return \"*{time}*\\n\" \\\r\n               \"*{function}*\\n\" \\\r\n               \"*({module}:{line})*\\n\" \\\r\n               \"*{level}*\\n\" \\\r\n               \"{message}\\n\" \\\r\n               \"{exception}\"\r\n\r\n    @staticmethod\r\n    def filter(record):\r\n        return record[\"level\"].no == 22\r\n\r\n\r\n@logger.catch\r\ndef setup_loggers():\r\n    logger.level(name=\"TELEGRAM\", no=22, color=\"<m>\", icon=\"\")\r\n    logger.__class__.telegram = partialmethod(logger.__class__.log, \"TELEGRAM\")\r\n\r\n    TelegramSink().ensure_setup()\r\n    if TelegramSink().bot:\r\n        telegram_sink_id = logger.add(sink=TelegramSink().telegram_sink,\r\n                                      format=TelegramSink.telegram_format(),\r\n                                      filter=TelegramSink.filter)\r\n        logger.info(f\"Adding {telegram_sink_id} as telegram's sink id\")\r\n        TelegramSink().telegram_sink_id = telegram_sink_id\r\n    \r\n    logger.telegram(\"This I'm receiving in my telegram chat\")\r\n\r\n    # Now we change the chat_id to something non-existent\r\n    # forcing telepot to throw an error\r\n    TelegramSink().chat_id = \"65341534\"\r\n\r\n    logger.telegram(\"Now the execution gets blocked\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    setup_loggers()\r\n\r\n```\r\n\r\nAs you can see in `TelegramSink().telegram_sink()`, if sending a message goes wrong (my chat_id got mistaken somehow, or my internet went down) I call  a `destroy()` method, responsible for removing the sink so the rest of the code can continue without trying to log to my telegram account (because this is not essencial, just a nice feature). The problem is that the execution gets blocked right on the call `logger.remove(self.telegram_sink_id)`. Debugging a little I've managed to see that the line in which the execution gets blocked is here:\r\n```python\r\n# _handler.py\r\n\r\nclass Handler:\r\n.....\r\n    def stop(self):\r\n        with self._lock <------ here\r\n        ......\r\n```\r\n\r\nDo you have any clues on why this is happening? I've tested with other sinks and everything works fine, I believe that this may have to do with the fact that I'm removing the sink within the sink, but it's pure guess, as I don't know the inner mechanisms of the module.\r\n\r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/281", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/281/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/281/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/281/events", "html_url": "https://github.com/Delgan/loguru/issues/281", "id": 634166451, "node_id": "MDU6SXNzdWU2MzQxNjY0NTE=", "number": 281, "title": "Any particular reasons why Logger._log() and Logger._options are protected?", "user": {"login": "herzog0", "id": 35974312, "node_id": "MDQ6VXNlcjM1OTc0MzEy", "avatar_url": "https://avatars3.githubusercontent.com/u/35974312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/herzog0", "html_url": "https://github.com/herzog0", "followers_url": "https://api.github.com/users/herzog0/followers", "following_url": "https://api.github.com/users/herzog0/following{/other_user}", "gists_url": "https://api.github.com/users/herzog0/gists{/gist_id}", "starred_url": "https://api.github.com/users/herzog0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/herzog0/subscriptions", "organizations_url": "https://api.github.com/users/herzog0/orgs", "repos_url": "https://api.github.com/users/herzog0/repos", "events_url": "https://api.github.com/users/herzog0/events{/privacy}", "received_events_url": "https://api.github.com/users/herzog0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-08T05:25:57Z", "updated_at": "2020-06-08T16:20:28Z", "closed_at": "2020-06-08T06:37:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "In order to create another logging levels and be able to access them with dot notation I'm doing the following:\r\n```python\r\nfrom loguru import logger\r\n\r\ndef on(__message, *args, **kwargs):\r\n    r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'ON'``.\"\"\"\r\n    logger._log(\"ON\", None, False, logger._options, __message, args, kwargs)\r\n\r\nlogger.level(name=\"ON\", no=21, color=\"<m>\", icon=\"\")\r\nsetattr(logger, \"on\", on)\r\n\r\nlogger.on(\"something\")\r\n# Works as expected:\r\n# 2020-06-08 02:18:50.976 | ON       | __main__:test_function:10 - something\r\n```\r\n\r\nAlthough this works, I'm getting these \"Access to a protected member _log of a class\" warnings (the same for _options).  \r\n\r\nAre there any particular reasons for these attributes be protected?\r\nEither way, is there a chance to expose them through properties on `Logger` so we can use them?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/280", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/280/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/280/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/280/events", "html_url": "https://github.com/Delgan/loguru/issues/280", "id": 634092645, "node_id": "MDU6SXNzdWU2MzQwOTI2NDU=", "number": 280, "title": "How to remove default sink of a bind-logger?", "user": {"login": "WestXu", "id": 25974092, "node_id": "MDQ6VXNlcjI1OTc0MDky", "avatar_url": "https://avatars0.githubusercontent.com/u/25974092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WestXu", "html_url": "https://github.com/WestXu", "followers_url": "https://api.github.com/users/WestXu/followers", "following_url": "https://api.github.com/users/WestXu/following{/other_user}", "gists_url": "https://api.github.com/users/WestXu/gists{/gist_id}", "starred_url": "https://api.github.com/users/WestXu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WestXu/subscriptions", "organizations_url": "https://api.github.com/users/WestXu/orgs", "repos_url": "https://api.github.com/users/WestXu/repos", "events_url": "https://api.github.com/users/WestXu/events{/privacy}", "received_events_url": "https://api.github.com/users/WestXu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-08T04:03:16Z", "updated_at": "2020-06-08T05:49:41Z", "closed_at": "2020-06-08T05:49:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Say I want every instance of Worker has its own logger-file and stderr output, with a customized format. Here is what the code looks like.\r\n\r\n```python\r\nclass Worker:\r\n    def __init__(self, name):\r\n        self.name =  str(name)\r\n\r\n        for sink in (sys.stderr, f'{self.name}_log.log'):\r\n            logger.add(\r\n                sink,\r\n                format=\"{time} | {level} | {extra[name]}: {message}\",\r\n                filter=(\r\n                    lambda record: record[\"extra\"].get(\"name\") == self.name\r\n                ),\r\n            )\r\n\r\n        self.logger = logger.bind(name=self.name)\r\n\r\n    def do_something(self):\r\n        self._do()\r\n\r\n        self.logger.info('Did something')\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    logger.info('Start working!!!')\r\n    Worker('A').do_something()\r\n    Worker('B').do_something()\r\n    logger.info(\"Let's call it a day!\")\r\n\r\n```\r\n\r\nThe problem is I get duplicated stderr for each message. Well I know I can logger.remove(), but that will  affect log outside of this class.\r\n\r\nSo can I remove the default sink only of the bind-logger, without affecting the root logger?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/279", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/279/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/279/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/279/events", "html_url": "https://github.com/Delgan/loguru/issues/279", "id": 632757001, "node_id": "MDU6SXNzdWU2MzI3NTcwMDE=", "number": 279, "title": "How do I add thread name to msgs w/o changing anything else?", "user": {"login": "johnmudd", "id": 755393, "node_id": "MDQ6VXNlcjc1NTM5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/755393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnmudd", "html_url": "https://github.com/johnmudd", "followers_url": "https://api.github.com/users/johnmudd/followers", "following_url": "https://api.github.com/users/johnmudd/following{/other_user}", "gists_url": "https://api.github.com/users/johnmudd/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnmudd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnmudd/subscriptions", "organizations_url": "https://api.github.com/users/johnmudd/orgs", "repos_url": "https://api.github.com/users/johnmudd/repos", "events_url": "https://api.github.com/users/johnmudd/events{/privacy}", "received_events_url": "https://api.github.com/users/johnmudd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-06T21:56:11Z", "updated_at": "2020-06-07T22:29:31Z", "closed_at": "2020-06-07T22:29:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/278", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/278/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/278/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/278/events", "html_url": "https://github.com/Delgan/loguru/issues/278", "id": 631594783, "node_id": "MDU6SXNzdWU2MzE1OTQ3ODM=", "number": 278, "title": "Accept a Callable for the serialize argument when adding a sink", "user": {"login": "gjeusel", "id": 16243660, "node_id": "MDQ6VXNlcjE2MjQzNjYw", "avatar_url": "https://avatars1.githubusercontent.com/u/16243660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gjeusel", "html_url": "https://github.com/gjeusel", "followers_url": "https://api.github.com/users/gjeusel/followers", "following_url": "https://api.github.com/users/gjeusel/following{/other_user}", "gists_url": "https://api.github.com/users/gjeusel/gists{/gist_id}", "starred_url": "https://api.github.com/users/gjeusel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gjeusel/subscriptions", "organizations_url": "https://api.github.com/users/gjeusel/orgs", "repos_url": "https://api.github.com/users/gjeusel/repos", "events_url": "https://api.github.com/users/gjeusel/events{/privacy}", "received_events_url": "https://api.github.com/users/gjeusel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306994642, "node_id": "MDU6TGFiZWwxMzA2OTk0NjQy", "url": "https://api.github.com/repos/Delgan/loguru/labels/docs", "name": "docs", "color": "ffa500", "default": false, "description": ""}, {"id": 1253282818, "node_id": "MDU6TGFiZWwxMjUzMjgyODE4", "url": "https://api.github.com/repos/Delgan/loguru/labels/feature", "name": "feature", "color": "9722f7", "default": false, "description": ""}, {"id": 669363348, "node_id": "MDU6TGFiZWw2NjkzNjMzNDg=", "url": "https://api.github.com/repos/Delgan/loguru/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-05T13:36:16Z", "updated_at": "2020-06-07T17:56:24Z", "closed_at": "2020-06-07T17:56:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello Delgan ! Love your library !\r\n\r\nI was wondering what you would think about accepting a Callable for the `serialize` parameter in `logger.add` method ?\r\n\r\nThis would ease customization of the jsonified records. And I'm thinking about ELK stack usage for example.\r\n\r\nI managed to achieve this purpose by overwriting the `Handler._serialize_record` staticmethod:\r\n\r\n```python\r\nimport sys\r\n\r\nimport flask\r\nimport loguru\r\nimport orjson\r\nimport pytz\r\nimport stackprinter\r\nfrom flask_login import current_user\r\n\r\n\r\ndef _serialize_record_elk(text, record):\r\n    # Format timestamp for Elasticache\r\n    timestamp = record[\"time\"].astimezone(pytz.utc)\r\n    timestamp = timestamp.strftime(\"%Y-%m-%dT%H:%M:%S.{:03d}Z\").format(\r\n        timestamp.microsecond // 1000\r\n    )\r\n\r\n    # Current User's email of flask app\r\n    user_email = getattr(current_user, \"email\", \"anonymous\")\r\n\r\n    # Can add some config variable of interest from the flask app\r\n    env = None\r\n    if flask.has_request_context():\r\n        if hasattr(flask.current_app, \"config\"):\r\n            env = flask.current_app.config[\"ENV\"]\r\n\r\n    serializable = {\r\n        # Base fields\r\n        \"@timestamp\": timestamp,  # Elasticache index overwrite\r\n        \"icon\": record[\"level\"].icon,\r\n        \"log\": {\"level\": record[\"level\"].name},\r\n        \"name\": record[\"name\"],\r\n        \"message\": record[\"message\"],\r\n        # App related:\r\n        \"user\": {\"email\": user_email},\r\n        \"env\": env,\r\n        # Extra\r\n        \"extra\": record[\"extra\"],\r\n        \"misc\": {\r\n            \"elapsed\": {\r\n                \"repr\": record[\"elapsed\"],\r\n                \"seconds\": record[\"elapsed\"].total_seconds(),\r\n            },\r\n            \"file\": {\"name\": record[\"file\"].name, \"path\": record[\"file\"].path},\r\n            \"function\": record[\"function\"],\r\n            \"level\": {\r\n                \"icon\": record[\"level\"].icon,\r\n                \"name\": record[\"level\"].name,\r\n                \"no\": record[\"level\"].no,\r\n            },\r\n            \"line\": record[\"line\"],\r\n            \"module\": record[\"module\"],\r\n            \"process\": {\"id\": record[\"process\"].id, \"name\": record[\"process\"].name},\r\n            \"thread\": {\"id\": record[\"thread\"].id, \"name\": record[\"thread\"].name},\r\n        },\r\n    }\r\n    if record[\"exception\"]:\r\n        exc_class = record[\"exception\"].type\r\n        serializable = {\r\n            **serializable,\r\n            \"exc\": {\r\n                \"type\": f\"{exc_class.__module__}.{exc_class.__name__}\",\r\n                \"value\": record[\"exception\"].value,\r\n                \"traceback\": stackprinter.format(record[\"exception\"], show_vals=\"line\"),\r\n            },\r\n        }\r\n\r\n    return orjson.dumps(serializable, default=str).decode(\"utf-8\") + \"\\n\"\r\n\r\n\r\nloguru._handler.Handler._serialize_record = staticmethod(_serialize_record_elk)\r\n\r\nloguru.logger.add(sink=sys.stdout, serialize=True, format=\"{message}\")\r\n```\r\n\r\nStill, that would be a nice to have in official doc IMO ! \ud83d\ude09 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/277", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/277/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/277/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/277/events", "html_url": "https://github.com/Delgan/loguru/issues/277", "id": 630127893, "node_id": "MDU6SXNzdWU2MzAxMjc4OTM=", "number": 277, "title": "Add documentation about the \"loguru-mypy\" plugin", "user": {"login": "Delgan", "id": 4193924, "node_id": "MDQ6VXNlcjQxOTM5MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4193924?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Delgan", "html_url": "https://github.com/Delgan", "followers_url": "https://api.github.com/users/Delgan/followers", "following_url": "https://api.github.com/users/Delgan/following{/other_user}", "gists_url": "https://api.github.com/users/Delgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Delgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Delgan/subscriptions", "organizations_url": "https://api.github.com/users/Delgan/orgs", "repos_url": "https://api.github.com/users/Delgan/repos", "events_url": "https://api.github.com/users/Delgan/events{/privacy}", "received_events_url": "https://api.github.com/users/Delgan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306994642, "node_id": "MDU6TGFiZWwxMzA2OTk0NjQy", "url": "https://api.github.com/repos/Delgan/loguru/labels/docs", "name": "docs", "color": "ffa500", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-03T16:05:37Z", "updated_at": "2020-07-07T15:51:56Z", "closed_at": "2020-07-07T15:51:56Z", "author_association": "OWNER", "active_lock_reason": null, "body": "See: https://github.com/kornicameister/loguru-mypy\r\n\r\nThis plugin could be referred in the documentation page about type hints: https://loguru.readthedocs.io/en/stable/api/type_hints.html", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/275", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/275/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/275/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/275/events", "html_url": "https://github.com/Delgan/loguru/issues/275", "id": 625399215, "node_id": "MDU6SXNzdWU2MjUzOTkyMTU=", "number": 275, "title": "TypeError: Level 'TRACE' already exists, you can't update its severity no", "user": {"login": "shmilylty", "id": 24275308, "node_id": "MDQ6VXNlcjI0Mjc1MzA4", "avatar_url": "https://avatars1.githubusercontent.com/u/24275308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shmilylty", "html_url": "https://github.com/shmilylty", "followers_url": "https://api.github.com/users/shmilylty/followers", "following_url": "https://api.github.com/users/shmilylty/following{/other_user}", "gists_url": "https://api.github.com/users/shmilylty/gists{/gist_id}", "starred_url": "https://api.github.com/users/shmilylty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shmilylty/subscriptions", "organizations_url": "https://api.github.com/users/shmilylty/orgs", "repos_url": "https://api.github.com/users/shmilylty/repos", "events_url": "https://api.github.com/users/shmilylty/events{/privacy}", "received_events_url": "https://api.github.com/users/shmilylty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-27T05:52:03Z", "updated_at": "2020-06-07T09:36:35Z", "closed_at": "2020-05-27T06:39:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "loguru 0.5.0\r\n```\r\nTraceback (most recent call last):\r\n  File \"D:/Tools/PenetrationTesting/2.Intelligence_Gathering/domain/OneForAll/oneforall.py\", line 15, in <module>\r\n    import dbexport\r\n  File \"D:\\Tools\\PenetrationTesting\\2.Intelligence_Gathering\\domain\\OneForAll\\dbexport.py\", line 13, in <module>\r\n    from common import utils\r\n  File \"D:\\Tools\\PenetrationTesting\\2.Intelligence_Gathering\\domain\\OneForAll\\common\\utils.py\", line 21, in <module>\r\n    from config.log import logger\r\n  File \"D:\\Tools\\PenetrationTesting\\2.Intelligence_Gathering\\domain\\OneForAll\\config\\log.py\", line 26, in <module>\r\n    logger.level(name='TRACE', no=5, color='<cyan><bold>', icon='\u270f\ufe0f')\r\n  File \"C:\\Users\\pentest\\.virtualenvs\\OneForAll-4zkd7hGI\\lib\\site-packages\\loguru\\_logger.py\", line 1516, in level\r\n    raise TypeError(\"Level '%s' already exists, you can't update its severity no\" % name)\r\nTypeError: Level 'TRACE' already exists, you can't update its severity no\r\n```\r\nmy code:\r\nhttps://github.com/shmilylty/OneForAll/blob/master/config/log.py#L26", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/274", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/274/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/274/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/274/events", "html_url": "https://github.com/Delgan/loguru/issues/274", "id": 624439541, "node_id": "MDU6SXNzdWU2MjQ0Mzk1NDE=", "number": 274, "title": "extras_require misuse ?", "user": {"login": "kornicameister", "id": 1029674, "node_id": "MDQ6VXNlcjEwMjk2NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1029674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kornicameister", "html_url": "https://github.com/kornicameister", "followers_url": "https://api.github.com/users/kornicameister/followers", "following_url": "https://api.github.com/users/kornicameister/following{/other_user}", "gists_url": "https://api.github.com/users/kornicameister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kornicameister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kornicameister/subscriptions", "organizations_url": "https://api.github.com/users/kornicameister/orgs", "repos_url": "https://api.github.com/users/kornicameister/repos", "events_url": "https://api.github.com/users/kornicameister/events{/privacy}", "received_events_url": "https://api.github.com/users/kornicameister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363344, "node_id": "MDU6TGFiZWw2NjkzNjMzNDQ=", "url": "https://api.github.com/repos/Delgan/loguru/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 669363348, "node_id": "MDU6TGFiZWw2NjkzNjMzNDg=", "url": "https://api.github.com/repos/Delgan/loguru/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-25T18:43:46Z", "updated_at": "2020-06-07T09:36:20Z", "closed_at": "2020-05-27T05:32:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If we go [here](https://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-extras-optional-features-with-their-own-dependencies), we ca read that `extras_require` are there to enable optional features of a program by adding some dependencies. It seems that loguru uses that as if it was `tests_require` because all that is now extra does not affect functionality and it is more or less what some of people describe as a \"hack\". (PS. Not judging, just reading what people write here and there ;-) )\r\n\r\nHowever, given that tox discourages using `tests_require` from setuptools, this issue proposes to move to another standard approach of having `tests-requirements.txt` and:\r\n\r\n1. having `tox` to install deps from that file\r\n2. having `tests_require` filled with the content of that file\r\n\r\nPS. some parts of that can be achieved with `setup_requires=('setup-meta')` which automatically fils certain parts. But that is actually reeeeeally optional :). You can check out how that performs using that project of mine and running `python setup.py explain`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/273", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/273/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/273/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/273/events", "html_url": "https://github.com/Delgan/loguru/issues/273", "id": 623123484, "node_id": "MDU6SXNzdWU2MjMxMjM0ODQ=", "number": 273, "title": "Logging function thread safety", "user": {"login": "jamespwilliams", "id": 34778680, "node_id": "MDQ6VXNlcjM0Nzc4Njgw", "avatar_url": "https://avatars0.githubusercontent.com/u/34778680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamespwilliams", "html_url": "https://github.com/jamespwilliams", "followers_url": "https://api.github.com/users/jamespwilliams/followers", "following_url": "https://api.github.com/users/jamespwilliams/following{/other_user}", "gists_url": "https://api.github.com/users/jamespwilliams/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamespwilliams/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamespwilliams/subscriptions", "organizations_url": "https://api.github.com/users/jamespwilliams/orgs", "repos_url": "https://api.github.com/users/jamespwilliams/repos", "events_url": "https://api.github.com/users/jamespwilliams/events{/privacy}", "received_events_url": "https://api.github.com/users/jamespwilliams/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-22T10:48:37Z", "updated_at": "2020-05-22T12:16:50Z", "closed_at": "2020-05-22T11:14:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using `loguru` with multiple threads (ThreadPoolExecutor), my logging starts to randomly cut out. I've noticed that all of the logger's handlers appear to get removed (this can be seen by printing out the `logger` instance). Below is a minimum POC that I can reliably reproduce the issue with:\r\n\r\n```python\r\nfrom loguru import logger\r\nimport concurrent.futures\r\n\r\ndef log(x):\r\n    logger.info(x)\r\n    print(logger)\r\n\r\nexecutor = concurrent.futures.ThreadPoolExecutor(25)\r\nexecutor.map(log, range(1000))\r\n```\r\n\r\nThe output from this snippet of code is that the logger prints out the numbers fine for a certain amount of time, before stopping. The output of print(logger) also changes from `<loguru.logger handlers=[(id=0, level=10, sink=<stderr>)]>` to `<loguru.logger handlers=[]>`.\r\n\r\nI've run into this issue using Python 3.6.8, Loguru version 0.5.0, which I believe is the latest\r\n```\r\nPython 3.6.8 (default, Nov 21 2019, 19:31:34)\r\n[GCC 8.3.1 20190507 (Red Hat 8.3.1-4)] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import loguru\r\n>>> loguru.__version__\r\n'0.5.0'\r\n```\r\nThis is running on a Centos 8 VM, with 1 CPU and 2GB RAM, if that is important. I've tried this on my own machine (OS X, Python 3.8.1) and haven't been able to reproduce.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/272", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/272/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/272/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/272/events", "html_url": "https://github.com/Delgan/loguru/issues/272", "id": 622925838, "node_id": "MDU6SXNzdWU2MjI5MjU4Mzg=", "number": 272, "title": "Is it fine to set a default return value for `logger.catch`?", "user": {"login": "Morriaty-The-Murderer", "id": 12904434, "node_id": "MDQ6VXNlcjEyOTA0NDM0", "avatar_url": "https://avatars3.githubusercontent.com/u/12904434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Morriaty-The-Murderer", "html_url": "https://github.com/Morriaty-The-Murderer", "followers_url": "https://api.github.com/users/Morriaty-The-Murderer/followers", "following_url": "https://api.github.com/users/Morriaty-The-Murderer/following{/other_user}", "gists_url": "https://api.github.com/users/Morriaty-The-Murderer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Morriaty-The-Murderer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Morriaty-The-Murderer/subscriptions", "organizations_url": "https://api.github.com/users/Morriaty-The-Murderer/orgs", "repos_url": "https://api.github.com/users/Morriaty-The-Murderer/repos", "events_url": "https://api.github.com/users/Morriaty-The-Murderer/events{/privacy}", "received_events_url": "https://api.github.com/users/Morriaty-The-Murderer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1253282818, "node_id": "MDU6TGFiZWwxMjUzMjgyODE4", "url": "https://api.github.com/repos/Delgan/loguru/labels/feature", "name": "feature", "color": "9722f7", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-22T03:35:43Z", "updated_at": "2020-06-07T09:40:59Z", "closed_at": "2020-06-07T09:40:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Perform something like this\r\n```python\r\ntry:\r\n    return some_function()\r\nexcept Exception:\r\n    logger.exception(\"An error occurred\")\r\n    return default_value\r\n```\r\n\r\nwhat I've tried but cannot work: `@logger.catch(message=\"test\", onerror=lambda _: DefaultValue)`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/271", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/271/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/271/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/271/events", "html_url": "https://github.com/Delgan/loguru/issues/271", "id": 622741364, "node_id": "MDU6SXNzdWU2MjI3NDEzNjQ=", "number": 271, "title": "KeyError: \"Attempt to overwrite 'args' in LogRecord\"  ", "user": {"login": "kornicameister", "id": 1029674, "node_id": "MDQ6VXNlcjEwMjk2NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1029674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kornicameister", "html_url": "https://github.com/kornicameister", "followers_url": "https://api.github.com/users/kornicameister/followers", "following_url": "https://api.github.com/users/kornicameister/following{/other_user}", "gists_url": "https://api.github.com/users/kornicameister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kornicameister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kornicameister/subscriptions", "organizations_url": "https://api.github.com/users/kornicameister/orgs", "repos_url": "https://api.github.com/users/kornicameister/repos", "events_url": "https://api.github.com/users/kornicameister/events{/privacy}", "received_events_url": "https://api.github.com/users/kornicameister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363344, "node_id": "MDU6TGFiZWw2NjkzNjMzNDQ=", "url": "https://api.github.com/repos/Delgan/loguru/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-05-21T19:50:50Z", "updated_at": "2020-06-07T09:35:47Z", "closed_at": "2020-06-07T09:35:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Expected result:\r\n\r\nI am able to use `args` as keyword to denote argument to string interpolation when using loguru\r\n\r\n### Actual result:\r\n\r\nOpposite of above ;-).In fact it seems that if you try to specify whatever is originally available in Record from `logging` of python, python will think you are crazy to put such things in record.\r\n\r\n### Facts\r\n\r\n- `loguur.__version__ = 0.5.0`\r\n- `python --version = Python 3.7.6`\r\n- `lsb_release -sd = Linux Mint 19.3 Tricia`\r\n- `context = application`\r\n\r\n### Reproduce\r\n\r\n```\r\ngit clone https://github.com/kornicameister/axion.git /tmp/axion --depth 1 ; \\\r\ncd /tmp/axion ; \\\r\ngit checkout c9d85e76bd48719aab7edded1d4287a52ecb145e \\\r\ncommand -v tox && tox -e \"py37-test\" -- -k test_not_empty_signature || echo \"need tox\" ; \\\r\ncd - \\\r\nrm -rf /tmp/axion\r\n```\r\n\r\n### Root cause\r\n\r\nRelevant line that causes issue available [here](https://github.com/kornicameister/axion/blob/60659e81ba4666a966d119ed7069da13e8802a0b/axion/handler/analysis/__init__.py#L56)\r\n\r\nAlternatively, it might be caused by `conftest#caplog` [here](https://github.com/kornicameister/axion/blob/60659e81ba4666a966d119ed7069da13e8802a0b/tests/conftest.py#L30), but this is unlikely given that only one test fails ;-)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/270", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/270/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/270/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/270/events", "html_url": "https://github.com/Delgan/loguru/issues/270", "id": 622382750, "node_id": "MDU6SXNzdWU2MjIzODI3NTA=", "number": 270, "title": "[Question] How to list exising handlers? How to add a filter to an existing handler?", "user": {"login": "radugrosu", "id": 5295071, "node_id": "MDQ6VXNlcjUyOTUwNzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5295071?v=4", "gravatar_id": "", "url": "https://api.github.com/users/radugrosu", "html_url": "https://github.com/radugrosu", "followers_url": "https://api.github.com/users/radugrosu/followers", "following_url": "https://api.github.com/users/radugrosu/following{/other_user}", "gists_url": "https://api.github.com/users/radugrosu/gists{/gist_id}", "starred_url": "https://api.github.com/users/radugrosu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/radugrosu/subscriptions", "organizations_url": "https://api.github.com/users/radugrosu/orgs", "repos_url": "https://api.github.com/users/radugrosu/repos", "events_url": "https://api.github.com/users/radugrosu/events{/privacy}", "received_events_url": "https://api.github.com/users/radugrosu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-21T09:46:40Z", "updated_at": "2020-05-21T12:31:46Z", "closed_at": "2020-05-21T12:20:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently I have to do:\r\n```\r\ndef make_filter(spam: str) -> Callable[[Mapping[str, Any]], bool]:\r\n    def spam_filter(record) -> bool:\r\n        return spam not in record[\"message\"]\r\n    return spam_filter\r\nlogger._core.handlers[1]._filter = make_filter(\"spam\")\r\n```\r\nI should mention that the logger is already configured, I just want to temporarily modify it when interacting with my application. This means I don't want to remove handlers and add new ones, I just want to modify existing ones.\r\n\r\nIs there a non-hacky way to do this? \r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/269", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/269/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/269/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/269/events", "html_url": "https://github.com/Delgan/loguru/issues/269", "id": 622037139, "node_id": "MDU6SXNzdWU2MjIwMzcxMzk=", "number": 269, "title": "Capturing formatted message as a string", "user": {"login": "minitriga", "id": 26367336, "node_id": "MDQ6VXNlcjI2MzY3MzM2", "avatar_url": "https://avatars3.githubusercontent.com/u/26367336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/minitriga", "html_url": "https://github.com/minitriga", "followers_url": "https://api.github.com/users/minitriga/followers", "following_url": "https://api.github.com/users/minitriga/following{/other_user}", "gists_url": "https://api.github.com/users/minitriga/gists{/gist_id}", "starred_url": "https://api.github.com/users/minitriga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/minitriga/subscriptions", "organizations_url": "https://api.github.com/users/minitriga/orgs", "repos_url": "https://api.github.com/users/minitriga/repos", "events_url": "https://api.github.com/users/minitriga/events{/privacy}", "received_events_url": "https://api.github.com/users/minitriga/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-20T19:40:59Z", "updated_at": "2020-06-27T16:06:03Z", "closed_at": "2020-06-27T16:06:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\n\r\nI need to capture a formatted message as a string to be used by something else. \r\n\r\nIs this possible?\r\n\r\n```\r\n>>> from loguru import logger\r\n>>> logger.debug(\"That's it, beautiful and simple logging!\")\r\n2020-05-20 19:34:08.246 | DEBUG    | __main__:<module>:1 - That's it, beautiful and simple logging!\r\n>>> string = logger.debug(\"That's it, beautiful and simple logging!\")\r\n2020-05-20 19:34:14.564 | DEBUG    | __main__:<module>:1 - That's it, beautiful and simple logging!\r\n>>> string\r\n>>> print(string)\r\n```\r\n\r\nIdealy i want the string variable to contain the formatted message of `2020-05-20 19:34:14.564 | DEBUG    | __main__:<module>:1 - That's it, beautiful and simple logging!`\r\n\r\nI have been also trying this with the standard python logging module with no luck. \r\n\r\n> I do not want this log visible in the console view. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/268", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/268/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/268/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/268/events", "html_url": "https://github.com/Delgan/loguru/issues/268", "id": 621681341, "node_id": "MDU6SXNzdWU2MjE2ODEzNDE=", "number": 268, "title": "API Post/Put example", "user": {"login": "Sendery", "id": 10600957, "node_id": "MDQ6VXNlcjEwNjAwOTU3", "avatar_url": "https://avatars0.githubusercontent.com/u/10600957?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sendery", "html_url": "https://github.com/Sendery", "followers_url": "https://api.github.com/users/Sendery/followers", "following_url": "https://api.github.com/users/Sendery/following{/other_user}", "gists_url": "https://api.github.com/users/Sendery/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sendery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sendery/subscriptions", "organizations_url": "https://api.github.com/users/Sendery/orgs", "repos_url": "https://api.github.com/users/Sendery/repos", "events_url": "https://api.github.com/users/Sendery/events{/privacy}", "received_events_url": "https://api.github.com/users/Sendery/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-20T11:21:36Z", "updated_at": "2020-06-07T17:11:21Z", "closed_at": "2020-06-07T17:11:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Question:\r\nPlease could you post a code example to use an http async post/put\r\nI'm trying to use this:\r\n\r\n\r\n```\r\nasync def publish(message):\r\n... await api.post(message)\r\n...\r\nlogger.add(publish, serialize=True)\r\n\u00b4\u00b4\u00b4\r\n```\r\nreplacing the \"api\" for requests(url, message)\r\n\r\nbut I only get it to work when i use custom asyncio:\r\n\r\n\r\n```\r\nclass LoggerClass:\r\n    def __init__(self,.....):\r\n        from loguru import logger\r\n        logger.remove()\r\n        logger.add(sys.stdout,colorize=True, format=\"<green>{time}</green> | <level>{level:^6}</level> | <cyan>{file}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>\",filter=non_errors)\r\n        logger.add(sys.stderr,colorize=True, format=\"<green>{time}</green> | <level>{level:^6}</level> | <cyan>{file}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>\",filter=errors_only)\r\n    \r\n        logger.add(self.publish, serialize=True,format=\"{message}\")\r\n\r\n    async def publish(self,message):\r\n        print(\"API -> \"+message)\r\n        res= requests.post(self.log_api_url,data=message)\r\n        print(\"RES STATUS -> \"+str(res.status_code))\r\n        #did try await request.post(self.log_api_url,data=message)\r\n\r\ndef main():\r\n   import asyncio\r\n   customclasslog=LoggerClass()\r\n\r\n\r\n   loop = asyncio.get_event_loop()\r\n   loop.run_until_complete(customclasslog.publish(\"api__\"))\r\n   loop.close()\r\n\r\n   customclasslog.logger.info(\"THIS ENTRY DO NOT POST\")\r\n```\r\n\r\n\r\n\r\nThank you very much", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/267", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/267/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/267/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/267/events", "html_url": "https://github.com/Delgan/loguru/issues/267", "id": 621588203, "node_id": "MDU6SXNzdWU2MjE1ODgyMDM=", "number": 267, "title": "Is it possible to catch the result of system command and record them in .log file?", "user": {"login": "IncubatorShokuhou", "id": 20434183, "node_id": "MDQ6VXNlcjIwNDM0MTgz", "avatar_url": "https://avatars3.githubusercontent.com/u/20434183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IncubatorShokuhou", "html_url": "https://github.com/IncubatorShokuhou", "followers_url": "https://api.github.com/users/IncubatorShokuhou/followers", "following_url": "https://api.github.com/users/IncubatorShokuhou/following{/other_user}", "gists_url": "https://api.github.com/users/IncubatorShokuhou/gists{/gist_id}", "starred_url": "https://api.github.com/users/IncubatorShokuhou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IncubatorShokuhou/subscriptions", "organizations_url": "https://api.github.com/users/IncubatorShokuhou/orgs", "repos_url": "https://api.github.com/users/IncubatorShokuhou/repos", "events_url": "https://api.github.com/users/IncubatorShokuhou/events{/privacy}", "received_events_url": "https://api.github.com/users/IncubatorShokuhou/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-20T08:59:43Z", "updated_at": "2020-05-20T11:22:40Z", "closed_at": "2020-05-20T11:22:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to catch the result in system command listed in terminal ( generated by `os.system` for example) and record them in .log file?\r\n\r\ni.e.\r\n```\r\nimport os\r\nfrom loguru import logger\r\n\r\nos.system(\"tar -zxvf 1.tar.gz\")\r\n```\r\nif execute this stript, the files of `tar.gz` will be shown on the terminal. Is it possible to record the files in `.log` files, using loguru?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/266", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/266/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/266/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/266/events", "html_url": "https://github.com/Delgan/loguru/issues/266", "id": 621422469, "node_id": "MDU6SXNzdWU2MjE0MjI0Njk=", "number": 266, "title": "does loguru support multiple rotation ,like max_size and day  rotation=\"500 MB,00:00\"", "user": {"login": "dushitaoyuan", "id": 18512626, "node_id": "MDQ6VXNlcjE4NTEyNjI2", "avatar_url": "https://avatars1.githubusercontent.com/u/18512626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dushitaoyuan", "html_url": "https://github.com/dushitaoyuan", "followers_url": "https://api.github.com/users/dushitaoyuan/followers", "following_url": "https://api.github.com/users/dushitaoyuan/following{/other_user}", "gists_url": "https://api.github.com/users/dushitaoyuan/gists{/gist_id}", "starred_url": "https://api.github.com/users/dushitaoyuan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dushitaoyuan/subscriptions", "organizations_url": "https://api.github.com/users/dushitaoyuan/orgs", "repos_url": "https://api.github.com/users/dushitaoyuan/repos", "events_url": "https://api.github.com/users/dushitaoyuan/events{/privacy}", "received_events_url": "https://api.github.com/users/dushitaoyuan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-20T03:01:39Z", "updated_at": "2020-05-20T11:06:11Z", "closed_at": "2020-05-20T10:07:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "does loguru support multiple    rotation ,like max_size and day  rotation=\"500 MB,00:00\"\r\ni am a new pythoner,\r\nshould i set \r\n logger.add(log_filename, rotation=\"500 MB\")\r\n logger.add(log_filename, rotation=\"00:00\")\r\ncan suit the logic?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/265", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/265/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/265/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/265/events", "html_url": "https://github.com/Delgan/loguru/issues/265", "id": 621403037, "node_id": "MDU6SXNzdWU2MjE0MDMwMzc=", "number": 265, "title": "UnicodeEncodeError", "user": {"login": "mycaiden", "id": 25056066, "node_id": "MDQ6VXNlcjI1MDU2MDY2", "avatar_url": "https://avatars0.githubusercontent.com/u/25056066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mycaiden", "html_url": "https://github.com/mycaiden", "followers_url": "https://api.github.com/users/mycaiden/followers", "following_url": "https://api.github.com/users/mycaiden/following{/other_user}", "gists_url": "https://api.github.com/users/mycaiden/gists{/gist_id}", "starred_url": "https://api.github.com/users/mycaiden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mycaiden/subscriptions", "organizations_url": "https://api.github.com/users/mycaiden/orgs", "repos_url": "https://api.github.com/users/mycaiden/repos", "events_url": "https://api.github.com/users/mycaiden/events{/privacy}", "received_events_url": "https://api.github.com/users/mycaiden/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-20T02:04:34Z", "updated_at": "2020-06-27T16:05:19Z", "closed_at": "2020-06-27T16:05:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to solve\uff1f\r\n\r\nUnicodeEncodeError: 'gbk' codec can't encode character '\\U0001f4a5' in position 108: illegal multibyte sequence", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/264", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/264/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/264/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/264/events", "html_url": "https://github.com/Delgan/loguru/issues/264", "id": 620849735, "node_id": "MDU6SXNzdWU2MjA4NDk3MzU=", "number": 264, "title": "Completely change format depending on active level", "user": {"login": "esciara", "id": 1336689, "node_id": "MDQ6VXNlcjEzMzY2ODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1336689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/esciara", "html_url": "https://github.com/esciara", "followers_url": "https://api.github.com/users/esciara/followers", "following_url": "https://api.github.com/users/esciara/following{/other_user}", "gists_url": "https://api.github.com/users/esciara/gists{/gist_id}", "starred_url": "https://api.github.com/users/esciara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/esciara/subscriptions", "organizations_url": "https://api.github.com/users/esciara/orgs", "repos_url": "https://api.github.com/users/esciara/repos", "events_url": "https://api.github.com/users/esciara/events{/privacy}", "received_events_url": "https://api.github.com/users/esciara/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-19T10:08:03Z", "updated_at": "2020-05-20T14:49:47Z", "closed_at": "2020-05-20T14:49:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI would like to have the simplest format (only the records' message, no color or anything else) being displayed when the active level is `INFO`, and use `loguru`'s default format when active level lower (`DEBUG`, `TRACE`... anything below `INFO`'s value of `20`.\r\n\r\nCould not quite workout how to do this, by trying to:\r\n\r\n* Use two loggers and have one not display anything passed a certain severity level\r\n* Use `filter` and `format` that would change depending on active level\r\n\r\nCould you give any pointer?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/263", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/263/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/263/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/263/events", "html_url": "https://github.com/Delgan/loguru/issues/263", "id": 620636480, "node_id": "MDU6SXNzdWU2MjA2MzY0ODA=", "number": 263, "title": "[Question] How to do `logger.exception` with `CRITICAL` log level?", "user": {"login": "bennyyip", "id": 7467687, "node_id": "MDQ6VXNlcjc0Njc2ODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7467687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bennyyip", "html_url": "https://github.com/bennyyip", "followers_url": "https://api.github.com/users/bennyyip/followers", "following_url": "https://api.github.com/users/bennyyip/following{/other_user}", "gists_url": "https://api.github.com/users/bennyyip/gists{/gist_id}", "starred_url": "https://api.github.com/users/bennyyip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bennyyip/subscriptions", "organizations_url": "https://api.github.com/users/bennyyip/orgs", "repos_url": "https://api.github.com/users/bennyyip/repos", "events_url": "https://api.github.com/users/bennyyip/events{/privacy}", "received_events_url": "https://api.github.com/users/bennyyip/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-19T02:52:05Z", "updated_at": "2020-05-19T07:35:32Z", "closed_at": "2020-05-19T07:35:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/262", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/262/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/262/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/262/events", "html_url": "https://github.com/Delgan/loguru/issues/262", "id": 617568568, "node_id": "MDU6SXNzdWU2MTc1Njg1Njg=", "number": 262, "title": "Expose a colorize function", "user": {"login": "doron-cohen", "id": 4966182, "node_id": "MDQ6VXNlcjQ5NjYxODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/4966182?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doron-cohen", "html_url": "https://github.com/doron-cohen", "followers_url": "https://api.github.com/users/doron-cohen/followers", "following_url": "https://api.github.com/users/doron-cohen/following{/other_user}", "gists_url": "https://api.github.com/users/doron-cohen/gists{/gist_id}", "starred_url": "https://api.github.com/users/doron-cohen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doron-cohen/subscriptions", "organizations_url": "https://api.github.com/users/doron-cohen/orgs", "repos_url": "https://api.github.com/users/doron-cohen/repos", "events_url": "https://api.github.com/users/doron-cohen/events{/privacy}", "received_events_url": "https://api.github.com/users/doron-cohen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1253282818, "node_id": "MDU6TGFiZWwxMjUzMjgyODE4", "url": "https://api.github.com/repos/Delgan/loguru/labels/feature", "name": "feature", "color": "9722f7", "default": false, "description": ""}, {"id": 669363348, "node_id": "MDU6TGFiZWw2NjkzNjMzNDg=", "url": "https://api.github.com/repos/Delgan/loguru/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-13T16:00:15Z", "updated_at": "2020-05-17T21:09:30Z", "closed_at": "2020-05-13T17:26:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI wanted to ask for a colorize function that will allow to colorize a string with color tags. I am currently using `loguru` as the logger in a CLI application together with `click`. I use `click.echo` to output data to `stdout` and `logger.log` to output logs to `stderr`.\r\n\r\n`click` has `click.secho` but colorizing is different there (`click.secho(\"hello\", fg=\"red\")`) and it is a hassle to colorize parts of strings. I wish I could just use `loguru`'s colorizer separately like:\r\n\r\n```\r\nfrom click import echo\r\nfrom loguru import colorize\r\n\r\necho(colorize(\"This <b>is</> <e>cool</>\"))\r\n```\r\n\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/261", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/261/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/261/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/261/events", "html_url": "https://github.com/Delgan/loguru/issues/261", "id": 616215368, "node_id": "MDU6SXNzdWU2MTYyMTUzNjg=", "number": 261, "title": "Missing Config or is this an issue?", "user": {"login": "devsetgo", "id": 16019894, "node_id": "MDQ6VXNlcjE2MDE5ODk0", "avatar_url": "https://avatars3.githubusercontent.com/u/16019894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devsetgo", "html_url": "https://github.com/devsetgo", "followers_url": "https://api.github.com/users/devsetgo/followers", "following_url": "https://api.github.com/users/devsetgo/following{/other_user}", "gists_url": "https://api.github.com/users/devsetgo/gists{/gist_id}", "starred_url": "https://api.github.com/users/devsetgo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devsetgo/subscriptions", "organizations_url": "https://api.github.com/users/devsetgo/orgs", "repos_url": "https://api.github.com/users/devsetgo/repos", "events_url": "https://api.github.com/users/devsetgo/events{/privacy}", "received_events_url": "https://api.github.com/users/devsetgo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-11T21:58:12Z", "updated_at": "2020-05-19T16:20:03Z", "closed_at": "2020-05-19T16:20:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Have an issue where Loguru is putting statements that should be filtered out in to the console. I can prevent this with standard logging, but the settings is not be respected by Loguru. This would be a security hole in an application as it would require DEBUG statements removed or possibly leak sensitive data. The level setting _**does work for the logged data,**_ but it does not prevent data from showing on the console.\r\n\r\nPlease let me know if I am missing something?\r\n\r\nI am running Python3.8, uvicorn 0.11.5,  starlette 0.13.4, and loguru 0.4.1\r\n\r\n![image](https://user-images.githubusercontent.com/16019894/81615842-53579f80-93b0-11ea-9f23-b665b7ff9258.png)\r\n\r\nimport logging \r\nfrom pathlib import Path\r\n\r\nfrom loguru import logger\r\nfrom starlette.applications import Starlette\r\n\r\nLOGURU_LOGGING_LEVEL = \"CRITICAL\"\r\n\r\ndef config_log():\r\n    \r\n\r\n    log_path = Path.cwd().joinpath(\"log\").joinpath(\"app_log.log\")\r\n    logger.add(\r\n        log_path,\r\n        level=LOGURU_LOGGING_LEVEL,\r\n        format=\"{time:YYYY-MM-DD at HH:mm:ss} | {level} | {message}\",\r\n        enqueue=True,\r\n        backtrace=False,\r\n        rotation=\"10 MB\",\r\n        retention=\"10 Days\",\r\n        compression=\"zip\",\r\n        serialize=False,\r\n    )\r\n\r\n    class InterceptHandler(logging.Handler):\r\n        def emit(self, record):\r\n\r\n            logger_opt = logger.opt(depth=6, exception=record.exc_info)\r\n            logger_opt.log(record.levelno, record.getMessage())\r\n\r\n    logging.basicConfig(\r\n        handlers=[InterceptHandler()], level=LOGURU_LOGGING_LEVEL,\r\n    )\r\n\r\nconfig_log()\r\nlogging.debug(\"logging\")\r\nlogger.debug(\"logger\")\r\nlogging.info(\"logging\")\r\nlogger.info(\"logger\")\r\nlogging.warning(\"logging\")\r\nlogger.warning(\"logger\")\r\nlogging.error(\"logging\")\r\nlogger.error(\"logger\")\r\nlogging.critical(\"logging\")\r\nlogger.critical(\"logger\")\r\n\r\napp = Starlette()\r\n\r\nif __name__ == \"__main__\":\r\n    import uvicorn\r\n\r\n    uvicorn.run(app, host=\"0.0.0.0\", port=5000, debug=False)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/260", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/260/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/260/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/260/events", "html_url": "https://github.com/Delgan/loguru/issues/260", "id": 616137781, "node_id": "MDU6SXNzdWU2MTYxMzc3ODE=", "number": 260, "title": "How to capture excpetion", "user": {"login": "heckad", "id": 45011689, "node_id": "MDQ6VXNlcjQ1MDExNjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/45011689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heckad", "html_url": "https://github.com/heckad", "followers_url": "https://api.github.com/users/heckad/followers", "following_url": "https://api.github.com/users/heckad/following{/other_user}", "gists_url": "https://api.github.com/users/heckad/gists{/gist_id}", "starred_url": "https://api.github.com/users/heckad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heckad/subscriptions", "organizations_url": "https://api.github.com/users/heckad/orgs", "repos_url": "https://api.github.com/users/heckad/repos", "events_url": "https://api.github.com/users/heckad/events{/privacy}", "received_events_url": "https://api.github.com/users/heckad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1253282818, "node_id": "MDU6TGFiZWwxMjUzMjgyODE4", "url": "https://api.github.com/repos/Delgan/loguru/labels/feature", "name": "feature", "color": "9722f7", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-11T19:47:39Z", "updated_at": "2020-05-17T21:10:35Z", "closed_at": "2020-05-17T21:10:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n@logger.catch\r\ndef some_method(...):\r\n     raise SomeError\r\n```\r\n\r\nI want to capture this error by [capture_exception](https://docs.sentry.io/platforms/python/#capturing-errors). How to do it best?\r\n\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/259", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/259/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/259/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/259/events", "html_url": "https://github.com/Delgan/loguru/issues/259", "id": 615313681, "node_id": "MDU6SXNzdWU2MTUzMTM2ODE=", "number": 259, "title": "An idea for getting around Windows multiprocessing", "user": {"login": "JulianOrteil", "id": 23083317, "node_id": "MDQ6VXNlcjIzMDgzMzE3", "avatar_url": "https://avatars1.githubusercontent.com/u/23083317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianOrteil", "html_url": "https://github.com/JulianOrteil", "followers_url": "https://api.github.com/users/JulianOrteil/followers", "following_url": "https://api.github.com/users/JulianOrteil/following{/other_user}", "gists_url": "https://api.github.com/users/JulianOrteil/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianOrteil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianOrteil/subscriptions", "organizations_url": "https://api.github.com/users/JulianOrteil/orgs", "repos_url": "https://api.github.com/users/JulianOrteil/repos", "events_url": "https://api.github.com/users/JulianOrteil/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianOrteil/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-10T04:21:55Z", "updated_at": "2020-06-07T21:03:20Z", "closed_at": "2020-06-07T21:00:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Good day,\r\n\r\nI would like to start out this by saying I am no expert in how multiprocessing works in Windows. What I do know is that modules in Python are reloaded in subprocesses when the subprocesses are started. Also, not all objects can be pickled by multiprocessing and hence why loguru is not multiprocessing-safe.\r\n\r\nHere's an idea:\r\nIn my limited experience with this topic, I've noticed that the os.environ variables set in the main process are available in any child processes.\r\n\r\nFor example:\r\nThe main process enters 'A', 'B', and 'C' using os.environ[\"LETTER_HERE\"] = \"SOME_VALUE\".\r\nIn the child processes, these variables are still available and are retrievable via os.environ.get or os.environ[\"LETTER_HERE\"], to name a few.\r\n\r\nBased on this information, would there be any value to exporting the sink configurations in loguru as a dictionary (as you can convert a dictionary to a string using the built-in 'str', which is required by os.environ) to the environment variables?  Then you can retrieve them at loguru's instantiation (i.e. 'from loguru import logger') in the child processes and rebuild the sinks?\r\n\r\nJust an idea, let me know what you think.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/258", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/258/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/258/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/258/events", "html_url": "https://github.com/Delgan/loguru/issues/258", "id": 614662257, "node_id": "MDU6SXNzdWU2MTQ2NjIyNTc=", "number": 258, "title": "gevent not compatible in flask ", "user": {"login": "cppla", "id": 10623809, "node_id": "MDQ6VXNlcjEwNjIzODA5", "avatar_url": "https://avatars3.githubusercontent.com/u/10623809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cppla", "html_url": "https://github.com/cppla", "followers_url": "https://api.github.com/users/cppla/followers", "following_url": "https://api.github.com/users/cppla/following{/other_user}", "gists_url": "https://api.github.com/users/cppla/gists{/gist_id}", "starred_url": "https://api.github.com/users/cppla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cppla/subscriptions", "organizations_url": "https://api.github.com/users/cppla/orgs", "repos_url": "https://api.github.com/users/cppla/repos", "events_url": "https://api.github.com/users/cppla/events{/privacy}", "received_events_url": "https://api.github.com/users/cppla/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-08T10:41:46Z", "updated_at": "2020-05-11T16:06:00Z", "closed_at": "2020-05-11T10:58:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello\uff0c\r\n\r\ngevent not compatible\uff0c in flask + gevent + multiprocess + loguru\r\n\r\nloguru don't work , and python logging library is ok \r\n--------------------------\r\nexample:\r\n\r\n```python\r\n# coding: utf-8\r\n\r\nfrom gevent import monkey\r\nfrom gevent.pywsgi import WSGIServer\r\nmonkey.patch_all()\r\n\r\nimport sys\r\nimport loguru\r\nimport datetime\r\nimport os\r\nfrom multiprocessing import cpu_count, Process\r\nfrom flask import Flask, jsonify, request\r\nfrom kafka_handle import kafka_client\r\nfrom concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor\r\n\r\nlogger = loguru.logger\r\n_format = '{{\"time\":<green>\"{time:YYYY-MM-DD HH:mm:ss}\"</green>,\"level\":<level>\"{level}\"</level>,\"pos\":<cyan>\"{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}\"</cyan>,\"msg\":<level>\"{message}\"</level>}}'\r\n_file = {\r\n    'sink': \"/tmp/log.txt\",\r\n    'format': _format,\r\n    'level': \"INFO\",\r\n    'rotation': \"128 MB\",\r\n    \"compression\": \"tar.gz\",\r\n    \"enqueue\": True,\r\n    \"encoding\": \"utf-8\"\r\n}\r\nlogger.configure(handlers=[_file])\r\n\r\napp = Flask(__name__)\r\n\r\ndef mirrorMSG():\r\n    for i in kafka_client.get():\r\n        print(i)\r\n\r\n\r\n@app.route(\"/putmsg\", methods=['GET'])\r\ndef function_benchmark():\r\n    msg = request.args.get(\"msg\")\r\n    kafka_client.send(msg)\r\n    logger.info(msg)\r\n    return jsonify(\r\n        {\r\n            \"status\": \"ok\",\r\n            \"time\": datetime.datetime.now().strftime('%Y-%m-%d %H:%M'),\r\n            \"pid\": os.getpid(),\r\n            \"put\": msg\r\n        }\r\n    ), 200\r\n\r\ndef run(MULTI_PROCESS):\r\n    if MULTI_PROCESS == False:\r\n        WSGIServer(('0.0.0.0', 8080), app, log = None).serve_forever()\r\n    else:\r\n        mulserver = WSGIServer(('0.0.0.0', 8080), app, log = None)\r\n        mulserver.start()\r\n\r\n        def server_forever():\r\n            mulserver.start_accepting()\r\n            mulserver._stop_event.wait()\r\n\r\n        for i in range(cpu_count()):\r\n            p = Process(target=server_forever)\r\n            p.start()\r\n\r\nif __name__ == \"__main__\":\r\n    with ProcessPoolExecutor(max_workers=3) as executor:\r\n        executor.submit(mirrorMSG)\r\n        executor.submit(run, (True))\r\n    run(True)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/257", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/257/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/257/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/257/events", "html_url": "https://github.com/Delgan/loguru/issues/257", "id": 614400969, "node_id": "MDU6SXNzdWU2MTQ0MDA5Njk=", "number": 257, "title": "Format args and kwargs and the extra parameter", "user": {"login": "jbjuin", "id": 2361571, "node_id": "MDQ6VXNlcjIzNjE1NzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/2361571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbjuin", "html_url": "https://github.com/jbjuin", "followers_url": "https://api.github.com/users/jbjuin/followers", "following_url": "https://api.github.com/users/jbjuin/following{/other_user}", "gists_url": "https://api.github.com/users/jbjuin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbjuin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbjuin/subscriptions", "organizations_url": "https://api.github.com/users/jbjuin/orgs", "repos_url": "https://api.github.com/users/jbjuin/repos", "events_url": "https://api.github.com/users/jbjuin/events{/privacy}", "received_events_url": "https://api.github.com/users/jbjuin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-05-07T23:15:36Z", "updated_at": "2020-05-17T21:19:44Z", "closed_at": "2020-05-08T08:57:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, first of all thanks a lot for this nice piece of logging :)\r\n\r\nI have a question: is there a way to use the keys in extra to format the message ? \r\nOr to add the kwargs of the debug/info/etc. to the extra parameter ? \r\n\r\nLet me explain more with code, today one has to do this: \r\n\r\n```python\r\nlogger.bind(duration=10).info(\"my long process duration was: {duration} seconds\", duration=10)\r\n```\r\nto have both a nice message and a \"real\" value to work with for monitoring purpose.\r\n\r\nWhat I'm trying to achieve is having a single logging library for all our internal applications that allow to: log normally, send exceptions to sentry, send \"TRACE\" levels to influxdb -> grafana and all \"TRACK\" levels to loki -> grafana. For instance:\r\n\r\n```python\r\nlogger.exception(\"Houston we have a problem\") #\u00a0this goes to sentry\r\nlogger.debug(\"we do something\") #\u00a0this stays on the server\r\nlogger.track(\"user {username} started a long process\", username=\"Me\") #\u00a0this is sent to Grafana through loki so username should be sendible in json log (serialize=True)\r\n#\u00a0later\r\nlogger.trace(\"long process duration was {duration} seconds\", duration=10) # this is sent to Grafana through influxdb, duration should be sendible in json log (serialize=True)\r\n```\r\nIs it clear enough ? Am I missing something ?\r\nIt's late here and maybe I missed something obvious. If this is the case, sorry !\r\n\r\nAnyway thanks a lot for your awesome lib !\r\nCheers", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/255", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/255/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/255/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/255/events", "html_url": "https://github.com/Delgan/loguru/issues/255", "id": 613007895, "node_id": "MDU6SXNzdWU2MTMwMDc4OTU=", "number": 255, "title": "Log sinks could be filterable by loguru.Level", "user": {"login": "davebirch", "id": 2168997, "node_id": "MDQ6VXNlcjIxNjg5OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2168997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davebirch", "html_url": "https://github.com/davebirch", "followers_url": "https://api.github.com/users/davebirch/followers", "following_url": "https://api.github.com/users/davebirch/following{/other_user}", "gists_url": "https://api.github.com/users/davebirch/gists{/gist_id}", "starred_url": "https://api.github.com/users/davebirch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davebirch/subscriptions", "organizations_url": "https://api.github.com/users/davebirch/orgs", "repos_url": "https://api.github.com/users/davebirch/repos", "events_url": "https://api.github.com/users/davebirch/events{/privacy}", "received_events_url": "https://api.github.com/users/davebirch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363344, "node_id": "MDU6TGFiZWw2NjkzNjMzNDQ=", "url": "https://api.github.com/repos/Delgan/loguru/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 669363348, "node_id": "MDU6TGFiZWw2NjkzNjMzNDg=", "url": "https://api.github.com/repos/Delgan/loguru/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-06T02:23:01Z", "updated_at": "2020-06-07T09:58:43Z", "closed_at": "2020-06-07T09:58:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Probably another minor one (but I have a PR ready for this one with some tests and a suggested fix).\r\n\r\nI would like to be able to filter a log sink by a loguru.Level object as returned by logger.level().\r\n\r\nAfter some looking into it, it seems that the RecordLevel and loguru.Level are two separate classes, just with similar fields.\r\n\r\nIt would be nice to be able to do:\r\n\r\n`logger.set(sink, filter=lambda r: r[\"level\"] == cached_logger_level`\r\n\r\nThe obvious way to do this would be an __eq__ method on the RecordLevel (as well as perhaps the same on Level) to allow equality if the available values (or perhaps just the level name?!) match.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/254", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/254/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/254/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/254/events", "html_url": "https://github.com/Delgan/loguru/issues/254", "id": 612954096, "node_id": "MDU6SXNzdWU2MTI5NTQwOTY=", "number": 254, "title": "Issue with sink filtered to TRACE level only by level name", "user": {"login": "davebirch", "id": 2168997, "node_id": "MDQ6VXNlcjIxNjg5OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2168997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davebirch", "html_url": "https://github.com/davebirch", "followers_url": "https://api.github.com/users/davebirch/followers", "following_url": "https://api.github.com/users/davebirch/following{/other_user}", "gists_url": "https://api.github.com/users/davebirch/gists{/gist_id}", "starred_url": "https://api.github.com/users/davebirch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davebirch/subscriptions", "organizations_url": "https://api.github.com/users/davebirch/orgs", "repos_url": "https://api.github.com/users/davebirch/repos", "events_url": "https://api.github.com/users/davebirch/events{/privacy}", "received_events_url": "https://api.github.com/users/davebirch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-05T23:24:15Z", "updated_at": "2020-05-06T17:19:56Z", "closed_at": "2020-05-06T17:19:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey there, I seem to be seeing a reproducible issue affecting logging at TRACE level only.\r\n\r\nMy reproduction case is as follows:\r\n\r\n```\r\ndef test_loguru_trace_logging_with_filtered_sink():\r\n    logger.remove()\r\n    stream = StringIO()\r\n    logger.add(sink=stream, filter=lambda x: x[\"level\"].name == \"TRACE\", format=\"{message}\")\r\n\r\n    logger.log(\"TRACE\", \"test\")\r\n\r\n    assert stream.getvalue() == \"test\\n\"\r\n```\r\n\r\nFor any level other than TRACE, this test will pass. Setting up the sink using level=\"TRACE\" rather than the filter also works.\r\n\r\nAm aware it's a fairly obscure issue, happy enough to take a poke around if it's low priority.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/253", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/253/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/253/events", "html_url": "https://github.com/Delgan/loguru/issues/253", "id": 611168741, "node_id": "MDU6SXNzdWU2MTExNjg3NDE=", "number": 253, "title": "Different configurations for different modules", "user": {"login": "ekallevik", "id": 1371159, "node_id": "MDQ6VXNlcjEzNzExNTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1371159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ekallevik", "html_url": "https://github.com/ekallevik", "followers_url": "https://api.github.com/users/ekallevik/followers", "following_url": "https://api.github.com/users/ekallevik/following{/other_user}", "gists_url": "https://api.github.com/users/ekallevik/gists{/gist_id}", "starred_url": "https://api.github.com/users/ekallevik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ekallevik/subscriptions", "organizations_url": "https://api.github.com/users/ekallevik/orgs", "repos_url": "https://api.github.com/users/ekallevik/repos", "events_url": "https://api.github.com/users/ekallevik/events{/privacy}", "received_events_url": "https://api.github.com/users/ekallevik/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-02T11:50:57Z", "updated_at": "2020-05-02T16:25:01Z", "closed_at": "2020-05-02T16:25:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! \r\n\r\nFirst of all, thank you for an awesome project! It seems to be really useful for my master thesis but I have some trouble getting the configuration right. \r\n\r\nFirst and foremost, how can I set up different thresholds for logging for different modules? \r\n\r\n``` python\r\n# main.py\r\nlogger.add(sys.stderr, format=\"{time:HH:mm:ss} {message}\",\r\n           level=\"INFO\", filter=\"main.py\")\r\n```\r\n\r\n``` python\r\n# preprocessing.xml_loader.py\r\nlogger.add(sys.stderr, format=\"{time:HH:mm:ss} {message}\",\r\n           level=\"CRITICAL\", filter=\"preprocessing.xml_loader.py\")\r\n```\r\n\r\nThe output in the terminal does not seem to respect this setup. I have researched your docs, but could only find a reference to using a dict as an argument, but I could not figure out how.\r\n\r\nIn addition, I have a related issue. I don\u00b4t want to include `YYYY` in the output to the terminal, but I am unable to change the formatting in any way. By setting the environment variables through bash I have been able to change the time formatting, but then the colors disappeared which I really like.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/252", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/252/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/252/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/252/events", "html_url": "https://github.com/Delgan/loguru/issues/252", "id": 606769174, "node_id": "MDU6SXNzdWU2MDY3NjkxNzQ=", "number": 252, "title": "loguru vs python-telegram-bot", "user": {"login": "heliomcp", "id": 9692595, "node_id": "MDQ6VXNlcjk2OTI1OTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/9692595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heliomcp", "html_url": "https://github.com/heliomcp", "followers_url": "https://api.github.com/users/heliomcp/followers", "following_url": "https://api.github.com/users/heliomcp/following{/other_user}", "gists_url": "https://api.github.com/users/heliomcp/gists{/gist_id}", "starred_url": "https://api.github.com/users/heliomcp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heliomcp/subscriptions", "organizations_url": "https://api.github.com/users/heliomcp/orgs", "repos_url": "https://api.github.com/users/heliomcp/repos", "events_url": "https://api.github.com/users/heliomcp/events{/privacy}", "received_events_url": "https://api.github.com/users/heliomcp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-25T13:24:35Z", "updated_at": "2020-04-25T14:37:48Z", "closed_at": "2020-04-25T14:33:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need some help,\r\n\r\nI am using the built-in logging in my [python-telegram-bot](https://github.com/python-telegram-bot/python-telegram-bot) and it works fine\r\n\r\nAfter trying **loguru** instead the built-in logging and if I have some issue in the code (any error) I don\u00b4t have any error message. Is like everything is ok...\r\n\r\n I only realize the error if I go back to build-in logging.\r\n\r\n[python-telegram-bot](https://github.com/python-telegram-bot/python-telegram-bot) uses [built-in logging](https://github.com/python-telegram-bot/python-telegram-bot#logging).\r\n\r\nIs there a way I can use **loguru** with [python-telegram-bot](https://github.com/python-telegram-bot/python-telegram-bot)?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/251", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/251/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/251/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/251/events", "html_url": "https://github.com/Delgan/loguru/issues/251", "id": 606076971, "node_id": "MDU6SXNzdWU2MDYwNzY5NzE=", "number": 251, "title": "Support getting/updating handlers?", "user": {"login": "ysmu", "id": 17018576, "node_id": "MDQ6VXNlcjE3MDE4NTc2", "avatar_url": "https://avatars1.githubusercontent.com/u/17018576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysmu", "html_url": "https://github.com/ysmu", "followers_url": "https://api.github.com/users/ysmu/followers", "following_url": "https://api.github.com/users/ysmu/following{/other_user}", "gists_url": "https://api.github.com/users/ysmu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysmu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysmu/subscriptions", "organizations_url": "https://api.github.com/users/ysmu/orgs", "repos_url": "https://api.github.com/users/ysmu/repos", "events_url": "https://api.github.com/users/ysmu/events{/privacy}", "received_events_url": "https://api.github.com/users/ysmu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1253282818, "node_id": "MDU6TGFiZWwxMjUzMjgyODE4", "url": "https://api.github.com/repos/Delgan/loguru/labels/feature", "name": "feature", "color": "9722f7", "default": false, "description": ""}, {"id": 669363348, "node_id": "MDU6TGFiZWw2NjkzNjMzNDg=", "url": "https://api.github.com/repos/Delgan/loguru/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-24T06:34:33Z", "updated_at": "2020-04-27T17:25:19Z", "closed_at": "2020-04-24T19:37:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm looking for something similar to #239.\r\n\r\nI have a program that is designed to run arbitrary many plugins sequentially during its lifetime. The program initializes the global loguru logger with the appropriate handlers for itself and the plugins to use. Now, I have a plugin that would like to use tqdm. For the logger to play well with tqdm, it needs to reconfigure the logger to not write directly to `stderr`, but with `tqdm.tqdm.write` (while keeping the other handlers intact). I'm looking for a way for the plugin to not only achieve this, but also restore the handler to write to `stderr` after it is done with tqdm.\r\n\r\nOf course this is just one example. The plugin may use a different progress bar library or spawn worker processes and require all handlers to have `enqueue=true` during its execution.\r\n\r\nIf it's not possible to do a live update on the handlers, is it possible to expose copies of the handlers? The `logger.get_config()` API suggested in #239 would be amazing to have.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/250", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/250/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/250/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/250/events", "html_url": "https://github.com/Delgan/loguru/issues/250", "id": 603406013, "node_id": "MDU6SXNzdWU2MDM0MDYwMTM=", "number": 250, "title": "Missing exception log data when using pyinstaller", "user": {"login": "jacobthetechy", "id": 601544, "node_id": "MDQ6VXNlcjYwMTU0NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/601544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jacobthetechy", "html_url": "https://github.com/jacobthetechy", "followers_url": "https://api.github.com/users/jacobthetechy/followers", "following_url": "https://api.github.com/users/jacobthetechy/following{/other_user}", "gists_url": "https://api.github.com/users/jacobthetechy/gists{/gist_id}", "starred_url": "https://api.github.com/users/jacobthetechy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jacobthetechy/subscriptions", "organizations_url": "https://api.github.com/users/jacobthetechy/orgs", "repos_url": "https://api.github.com/users/jacobthetechy/repos", "events_url": "https://api.github.com/users/jacobthetechy/events{/privacy}", "received_events_url": "https://api.github.com/users/jacobthetechy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-20T17:25:44Z", "updated_at": "2020-04-22T16:16:18Z", "closed_at": "2020-04-22T14:47:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using loguru in one of my projects while using pyinstaller to create an EXE to run it on several Windows machines. I noticed some log data missing from exceptions when running the EXE. Here is an example of what I'm seeing.\r\n\r\n\r\n```python\r\n# test.py\r\n\r\nfrom loguru import logger\r\n\r\nlogger.add('test.log')\r\n\r\ndef div(n, d):\r\n    try:\r\n        return n / d\r\n    except Exception as e:\r\n        logger.exception(e)\r\n\r\ndiv(2, 0)\r\n```\r\nWhen running this from the terminal it will produce this log file as expected.\r\n\r\n```log\r\n2020-04-20 12:46:32.123 | ERROR    | __main__:div:9 - division by zero\r\nTraceback (most recent call last):\r\n\r\n  File \"test.py\", line 11, in <module>\r\n    div(2, 0)\r\n    \u2514 <function div at 0x7f81f5ee43b0>\r\n\r\n> File \"test.py\", line 7, in div\r\n    return n / d\r\n           \u2502   \u2514 0\r\n           \u2514 2\r\n\r\nZeroDivisionError: division by zero\r\n```\r\n\r\nBut once you use pyinstaller (`pyinstaller test.py -F`) and run the resulting EXE this is what is in the log file.\r\n\r\n```log\r\n2020-04-20 12:45:19.427 | ERROR    | __main__:div:9 - division by zero\r\nTraceback (most recent call last):\r\n\r\n  File \"test.py\", line 11, in <module>\r\n\r\n> File \"test.py\", line 7, in div\r\n\r\nZeroDivisionError: division by zero\r\n```\r\n\r\nI have been able to reproduce this with python 3.8 on Windows 10 and python 3.7 on Fedora 30 using loguru==0.4.1 & PyInstaller==3.6\r\n\r\nNot sure if this is an pyinstaller issue or a loguru issue, trying here first.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/249", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/249/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/249/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/249/events", "html_url": "https://github.com/Delgan/loguru/issues/249", "id": 602429928, "node_id": "MDU6SXNzdWU2MDI0Mjk5Mjg=", "number": 249, "title": "Stream sink should not be wrapped by colorama on Windows if not stdout / stderr", "user": {"login": "Delgan", "id": 4193924, "node_id": "MDQ6VXNlcjQxOTM5MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4193924?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Delgan", "html_url": "https://github.com/Delgan", "followers_url": "https://api.github.com/users/Delgan/followers", "following_url": "https://api.github.com/users/Delgan/following{/other_user}", "gists_url": "https://api.github.com/users/Delgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Delgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Delgan/subscriptions", "organizations_url": "https://api.github.com/users/Delgan/orgs", "repos_url": "https://api.github.com/users/Delgan/repos", "events_url": "https://api.github.com/users/Delgan/events{/privacy}", "received_events_url": "https://api.github.com/users/Delgan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363342, "node_id": "MDU6TGFiZWw2NjkzNjMzNDI=", "url": "https://api.github.com/repos/Delgan/loguru/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-18T10:38:55Z", "updated_at": "2020-04-18T12:34:19Z", "closed_at": "2020-04-18T12:34:19Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Considering a class with `isatty()` returning `True`, Loguru's `should_wrap()` function will return `True` on Windows, resulting in `AttributeError: 'CustomSink' object has no attribute 'flush'` when `colorama` will write to the sink.\r\n\r\n```python\r\nclass CustomSink:\r\n\r\n    def isatty(self):\r\n        return True\r\n\r\n    def write(self, message):\r\n        pass\r\n\r\nlogger.add(CustomSink(), colorize=True) \r\nlogger.info(\"Boom\")\r\n```\r\n\r\nThe stream should only be wrapped if equals to `sys.__stdout__` or `sys.__stderr__`. If for some reason another stream needs to be wrapped, user should wrap it himself (in practice, this is probably never needed).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/248", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/248/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/248/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/248/events", "html_url": "https://github.com/Delgan/loguru/issues/248", "id": 601488684, "node_id": "MDU6SXNzdWU2MDE0ODg2ODQ=", "number": 248, "title": "Feature request: Add except exceptions list to catch decorator.", "user": {"login": "heckad", "id": 45011689, "node_id": "MDQ6VXNlcjQ1MDExNjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/45011689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heckad", "html_url": "https://github.com/heckad", "followers_url": "https://api.github.com/users/heckad/followers", "following_url": "https://api.github.com/users/heckad/following{/other_user}", "gists_url": "https://api.github.com/users/heckad/gists{/gist_id}", "starred_url": "https://api.github.com/users/heckad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heckad/subscriptions", "organizations_url": "https://api.github.com/users/heckad/orgs", "repos_url": "https://api.github.com/users/heckad/repos", "events_url": "https://api.github.com/users/heckad/events{/privacy}", "received_events_url": "https://api.github.com/users/heckad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1253282818, "node_id": "MDU6TGFiZWwxMjUzMjgyODE4", "url": "https://api.github.com/repos/Delgan/loguru/labels/feature", "name": "feature", "color": "9722f7", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-04-16T21:20:27Z", "updated_at": "2020-04-20T17:51:19Z", "closed_at": "2020-04-20T16:50:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "For some reason, my function has special exception signals, and I don\u2019t want to catch them. Have a filter will be helpful.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/247", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/247/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/247/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/247/events", "html_url": "https://github.com/Delgan/loguru/issues/247", "id": 600027418, "node_id": "MDU6SXNzdWU2MDAwMjc0MTg=", "number": 247, "title": "Intercepting logging logs", "user": {"login": "xeor", "id": 682676, "node_id": "MDQ6VXNlcjY4MjY3Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/682676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xeor", "html_url": "https://github.com/xeor", "followers_url": "https://api.github.com/users/xeor/followers", "following_url": "https://api.github.com/users/xeor/following{/other_user}", "gists_url": "https://api.github.com/users/xeor/gists{/gist_id}", "starred_url": "https://api.github.com/users/xeor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xeor/subscriptions", "organizations_url": "https://api.github.com/users/xeor/orgs", "repos_url": "https://api.github.com/users/xeor/repos", "events_url": "https://api.github.com/users/xeor/events{/privacy}", "received_events_url": "https://api.github.com/users/xeor/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-04-15T05:16:50Z", "updated_at": "2020-06-09T06:04:36Z", "closed_at": "2020-04-16T05:10:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using the recommended `InterceptHandler` as documented, but I am still getting logs from different loggers around from 3rd party libs.\r\n\r\nI am able to get them intercepted by using something like:\r\n\r\n```py\r\n_log = logging.getLogger('aioredis')\r\n_log.handlers = [InterceptHandler()]\r\n```\r\nBut then I am getting double log-messages for `aioredis`, one default and one with the loguru format.\r\n\r\nSetting `logging.basicConfig(handlers=[InterceptHandler()], level=0)` isnt doing much either.\r\n\r\nHave I missunderstood what this InterceptHandler() is supposed to do?\r\nI have the log-config code as early in my code as possible.\r\n\r\nMaybe the aioredis lib is changing my config later?\r\n\r\nAny tips on a proper way to setup interception of ALL logger logs would be nice.. It would be nice to essentially switch over, monkeypatch and route all the logger logs via loguru :)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/246", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/246/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/246/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/246/events", "html_url": "https://github.com/Delgan/loguru/issues/246", "id": 599563904, "node_id": "MDU6SXNzdWU1OTk1NjM5MDQ=", "number": 246, "title": "\"[33m[1\" instead of colored text", "user": {"login": "bataliero", "id": 17815959, "node_id": "MDQ6VXNlcjE3ODE1OTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/17815959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bataliero", "html_url": "https://github.com/bataliero", "followers_url": "https://api.github.com/users/bataliero/followers", "following_url": "https://api.github.com/users/bataliero/following{/other_user}", "gists_url": "https://api.github.com/users/bataliero/gists{/gist_id}", "starred_url": "https://api.github.com/users/bataliero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bataliero/subscriptions", "organizations_url": "https://api.github.com/users/bataliero/orgs", "repos_url": "https://api.github.com/users/bataliero/repos", "events_url": "https://api.github.com/users/bataliero/events{/privacy}", "received_events_url": "https://api.github.com/users/bataliero/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-14T13:15:02Z", "updated_at": "2020-06-07T10:26:14Z", "closed_at": "2020-06-07T10:26:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I try to integrate loguru to a project containing logging from std library. Unfortunately I got messages prepended with [33m[1 characters when script is invoked by cmd.exe or Windows PowerShell. Interestingly git-bash (mintty.exe) works good and output is colored as expected! Example below:\r\n\r\n```\r\nimport loguru\r\n\r\nold_logger = logging.getLogger()\r\n\r\nstdout_handler = logging.StreamHandler(stream=sys.stdout)\r\nold_logger.addHandler(stdout_handler)\r\n\r\nloguru.logger.remove(handler_id=0)\r\nfor handler in old_logger.handlers:\r\n    loguru.logger.add(handler, format=\"<level>{message}</level>\", colorize=True)\r\n\r\nloguru.logger.info(\"info example\")\r\nloguru.logger.warning(\"warning example\")\r\n```\r\n\r\n```\r\nloguru==0.4.1\r\n  - colorama [required: >=0.3.4, installed: 0.4.3]\r\n  - win32-setctime [required: >=1.0.0, installed: 1.0.1]\r\n\r\nand Windows 10\r\n```\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/245", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/245/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/245/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/245/events", "html_url": "https://github.com/Delgan/loguru/issues/245", "id": 599341332, "node_id": "MDU6SXNzdWU1OTkzNDEzMzI=", "number": 245, "title": "Log structured things", "user": {"login": "xeor", "id": 682676, "node_id": "MDQ6VXNlcjY4MjY3Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/682676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xeor", "html_url": "https://github.com/xeor", "followers_url": "https://api.github.com/users/xeor/followers", "following_url": "https://api.github.com/users/xeor/following{/other_user}", "gists_url": "https://api.github.com/users/xeor/gists{/gist_id}", "starred_url": "https://api.github.com/users/xeor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xeor/subscriptions", "organizations_url": "https://api.github.com/users/xeor/orgs", "repos_url": "https://api.github.com/users/xeor/repos", "events_url": "https://api.github.com/users/xeor/events{/privacy}", "received_events_url": "https://api.github.com/users/xeor/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1253282818, "node_id": "MDU6TGFiZWwxMjUzMjgyODE4", "url": "https://api.github.com/repos/Delgan/loguru/labels/feature", "name": "feature", "color": "9722f7", "default": false, "description": ""}, {"id": 669363348, "node_id": "MDU6TGFiZWw2NjkzNjMzNDg=", "url": "https://api.github.com/repos/Delgan/loguru/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-04-14T06:58:33Z", "updated_at": "2020-05-17T21:04:59Z", "closed_at": "2020-04-18T21:12:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am choosing between loguru or structlog for a new project. I've settled now on loguru, but there is one thing that really bothers me is how to log structured objects like dicts.\r\n\r\nI found https://github.com/Delgan/loguru/issues/2, which ended up being labeled as wont-fix.\r\n\r\nJust throwing it out, but before I start making a PR for an idea, what is the thoughts about something like this for a solution:\r\n\r\n* Using pipe for structured logs, example `a_dict | logger.info('message here')`\r\n  * We can use the pythons `__ror__` function to implement something that looks like a unix-pipe\r\n  * logger.info can work as normal, no api changes\r\n  * The structured log can be handled by a function, a serializer to make it into a log-line\r\n* Maybe also `a_var = some_func() | logger.info('a_var assigned')`\r\n  * If the logger/pipe construct returns the output back, this idea can be used in normal assignments as well.\r\n\r\nI didn't start to write much code yet, but I think this might be possible to implement.\r\n\r\nThoughts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/244", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/244/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/244/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/244/events", "html_url": "https://github.com/Delgan/loguru/issues/244", "id": 599330962, "node_id": "MDU6SXNzdWU1OTkzMzA5NjI=", "number": 244, "title": "Rotating logs to multiple files", "user": {"login": "madridu", "id": 11570538, "node_id": "MDQ6VXNlcjExNTcwNTM4", "avatar_url": "https://avatars2.githubusercontent.com/u/11570538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/madridu", "html_url": "https://github.com/madridu", "followers_url": "https://api.github.com/users/madridu/followers", "following_url": "https://api.github.com/users/madridu/following{/other_user}", "gists_url": "https://api.github.com/users/madridu/gists{/gist_id}", "starred_url": "https://api.github.com/users/madridu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/madridu/subscriptions", "organizations_url": "https://api.github.com/users/madridu/orgs", "repos_url": "https://api.github.com/users/madridu/repos", "events_url": "https://api.github.com/users/madridu/events{/privacy}", "received_events_url": "https://api.github.com/users/madridu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-14T06:35:20Z", "updated_at": "2020-04-15T07:51:08Z", "closed_at": "2020-04-15T07:50:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nI'm using loguru with an app that takes http petitions with flask and then does a task with it in a separate thread. When it does ok it logs with info and if there's an error, it logs it. I'm running it on an ubuntu.\r\n\r\nOn the time of rotation it opens a new file for every new thread and keeps on using it. For example, today I have 3 different files: Synclog.log, Synclog.2020-04-14_00-03-50_598472, Synclog.2020-04-14_00-08-56_524389 Since the rollover the app uses all of this 3 files to log.\r\n\r\n```\r\nlogger.add('/home/web_hook/logs/Synclog.log', format='{time:DD/MM/YYYY HH:mm:ss} {level} {message}', level=\"INFO\", rotation='00:00',retention='15 days',enqueue=True, encoding='utf8')\r\n\r\ndef do_the_task(http_petition):\r\n      if task ok:\r\n              logger.info(a message)\r\n      else:\r\n              logger.error(a message)\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route(\"/\")\r\ndef hello():\r\n    if request.args:\r\n        if request.args.get('action') == 'create':\r\n            worker = Thread(target=do_the_task, args=(request.args,))\r\n            worker.setDaemon(True)\r\n            worker.start()\r\n    return Response(status=200)\r\n```\r\nIs there a way to avoid this? any config I've missed? I've seen that you recommend using .bind in similar cases but not sure if it will work with my app.\r\n\r\nThanks!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/243", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/243/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/243/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/243/events", "html_url": "https://github.com/Delgan/loguru/issues/243", "id": 599317399, "node_id": "MDU6SXNzdWU1OTkzMTczOTk=", "number": 243, "title": "Does the compression task block the main thread?", "user": {"login": "mahadi", "id": 124618, "node_id": "MDQ6VXNlcjEyNDYxOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/124618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahadi", "html_url": "https://github.com/mahadi", "followers_url": "https://api.github.com/users/mahadi/followers", "following_url": "https://api.github.com/users/mahadi/following{/other_user}", "gists_url": "https://api.github.com/users/mahadi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahadi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahadi/subscriptions", "organizations_url": "https://api.github.com/users/mahadi/orgs", "repos_url": "https://api.github.com/users/mahadi/repos", "events_url": "https://api.github.com/users/mahadi/events{/privacy}", "received_events_url": "https://api.github.com/users/mahadi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306994642, "node_id": "MDU6TGFiZWwxMzA2OTk0NjQy", "url": "https://api.github.com/repos/Delgan/loguru/labels/docs", "name": "docs", "color": "ffa500", "default": false, "description": ""}, {"id": 669363344, "node_id": "MDU6TGFiZWw2NjkzNjMzNDQ=", "url": "https://api.github.com/repos/Delgan/loguru/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 23, "created_at": "2020-04-14T05:59:42Z", "updated_at": "2020-06-07T11:05:17Z", "closed_at": "2020-06-07T11:05:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, i have a program running with several threads. Each of them is using queues to buffer its work load while another thread is running. In the main thread my main engine runs and uses the queues to distribute and forward work. Also in the main module the logger is configured with a custom log rotation function. (See #241).\r\n\r\nI am monitoring the queue loads and i can see that during the time when log compression happens (after 1 GiB with bz2 - takes ~ 2.5 minutes) my queues only fill up but can not be worked on in my main thread during that time.\r\n\r\nSo i thought about putting my engine also in a separate thread. But actually logging should be the part which runs in a separate thread. \r\n\r\nCan you tell me how this is managed in loguru? \r\nDoes the log processing run in a separate thread? \r\n\r\nI guess the problem is related to the compression itself. It is running synchronosly...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/242", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/242/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/242/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/242/events", "html_url": "https://github.com/Delgan/loguru/issues/242", "id": 599129304, "node_id": "MDU6SXNzdWU1OTkxMjkzMDQ=", "number": 242, "title": "FileSink Error when running from terminal", "user": {"login": "rclapp", "id": 18215782, "node_id": "MDQ6VXNlcjE4MjE1Nzgy", "avatar_url": "https://avatars3.githubusercontent.com/u/18215782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rclapp", "html_url": "https://github.com/rclapp", "followers_url": "https://api.github.com/users/rclapp/followers", "following_url": "https://api.github.com/users/rclapp/following{/other_user}", "gists_url": "https://api.github.com/users/rclapp/gists{/gist_id}", "starred_url": "https://api.github.com/users/rclapp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rclapp/subscriptions", "organizations_url": "https://api.github.com/users/rclapp/orgs", "repos_url": "https://api.github.com/users/rclapp/repos", "events_url": "https://api.github.com/users/rclapp/events{/privacy}", "received_events_url": "https://api.github.com/users/rclapp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363342, "node_id": "MDU6TGFiZWw2NjkzNjMzNDI=", "url": "https://api.github.com/repos/Delgan/loguru/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-13T20:52:27Z", "updated_at": "2020-04-14T19:36:26Z", "closed_at": "2020-04-14T06:24:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "During testing I hit an error that I need some help solving. The odd thing is that this works okay in my IDE, but fails with the following error in terminal. I've validated all the interpreter and package settings are the same. \r\n\r\nLogging is set up as follows:\r\n ```python\r\n    '''\r\n        Initializes logging for the program. If a log file has been specified a queue handler is enabled.\r\n    '''\r\n\r\n    # Logging Set-Up Loguru\r\n    logger.remove()\r\n    format = \"<green>{time} | {elapsed}</green> | {level} | <blue>{module}:{function} | {process}:{thread}</blue> | <level>{message}</level>\"\r\n\r\n    #Intercept Logging Messages\r\n    logging.basicConfig(handlers=[InterceptHandler()], level=0)\r\n\r\n    if arguments[\"debug\"]:\r\n        logger.add(sys.stdout, level='DEBUG', filter='__main__', backtrace=True, diagnose=True, enqueue=True, format=format, colorize=True)\r\n    else:\r\n        logger.add(sys.stdout, level='INFO', filter='__main__', backtrace=True, diagnose=True, enqueue=True, format=format, colorize=True)\r\n\r\n    try:\r\n        os.makedirs(logfile.parents[0], exist_ok=True)\r\n        logger.info(f\"Directory {logfile.parents[0]} created successfully\")\r\n    except OSError as error:\r\n        logger.exception(f\"Directory {logfile.parent()} can not be created\", exc_info=True)\r\n\r\n    if logfile is not None:\r\n        try:\r\n            if arguments[\"debug\"]:\r\n                logger.add(logfile, level=\"DEBUG\", retention=\"10 days\", backtrace=True, diagnose=True, enqueue=True, format=format, colorize=True)\r\n            else:\r\n                logger.add(logfile, level=\"INFO\", retention=\"10 days\", backtrace=True, diagnose=True, enqueue=True, format=format, colorize=True)\r\n\r\n        except Exception as e:\r\n\r\n            logger.exception('Failed to add file handlers', exc_info=True)\r\n\r\n    logging.info('logging setup complete')\r\n```\r\n\r\nError:\r\n\r\n```python\r\n--- Logging error in Loguru Handler #2 ---\r\nRecord was: {'elapsed': datetime.timedelta(seconds=1, microseconds=46842), 'exception': None, 'extra': {}, 'file': '__init__.py', 'function': 'info', 'level': 'Level 20', 'line': 1992, 'message': 'logging setup complete', 'module': '__init__', 'name': 'logging', 'process': '2016', 'thread': '14716', 'time': datetime(2020, 4, 13, 13, 12, 17, 268459, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200), 'Pacific Daylight Time'))}\r\n\r\nTraceback (most recent call last):\r\n  File \"D:\\Python37\\lib\\site-packages\\loguru\\_handler.py\", line 253, in _queued_writer\r\n    self._writer(message)\r\n  File \"D:\\Python37\\lib\\site-packages\\colorama\\ansitowin32.py\", line 41, in write\r\n    self.__convertor.write(text)\r\n  File \"D:\\Python37\\lib\\site-packages\\colorama\\ansitowin32.py\", line 162, in write\r\n    self.write_and_convert(text)\r\n  File \"D:\\Python37\\lib\\site-packages\\colorama\\ansitowin32.py\", line 187, in write_and_convert\r\n    self.write_plain_text(text, cursor, start)\r\n  File \"D:\\Python37\\lib\\site-packages\\colorama\\ansitowin32.py\", line 196, in write_plain_text\r\n    self.wrapped.flush()\r\n\r\nAttributeError: 'FileSink' object has no attribute 'flush'\r\n\r\n--- End of logging error ---\r\n```\r\n\r\nI looked at the FileSink class and as the error says it doesn't have a flush attribute, but I am not sure why colorama is calling that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/241", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/241/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/241/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/241/events", "html_url": "https://github.com/Delgan/loguru/issues/241", "id": 598786500, "node_id": "MDU6SXNzdWU1OTg3ODY1MDA=", "number": 241, "title": "Log rotate by time and size", "user": {"login": "mahadi", "id": 124618, "node_id": "MDQ6VXNlcjEyNDYxOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/124618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahadi", "html_url": "https://github.com/mahadi", "followers_url": "https://api.github.com/users/mahadi/followers", "following_url": "https://api.github.com/users/mahadi/following{/other_user}", "gists_url": "https://api.github.com/users/mahadi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahadi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahadi/subscriptions", "organizations_url": "https://api.github.com/users/mahadi/orgs", "repos_url": "https://api.github.com/users/mahadi/repos", "events_url": "https://api.github.com/users/mahadi/events{/privacy}", "received_events_url": "https://api.github.com/users/mahadi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-04-13T09:36:44Z", "updated_at": "2020-05-20T13:03:36Z", "closed_at": "2020-04-13T13:16:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, is it possible to rotate a logfile by duration and file size (and finally compress it)? Currently i only see that o can choose duration or file size but not both at the same time.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/240", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/240/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/240/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/240/events", "html_url": "https://github.com/Delgan/loguru/issues/240", "id": 597227179, "node_id": "MDU6SXNzdWU1OTcyMjcxNzk=", "number": 240, "title": "Repeat Write Log", "user": {"login": "biggerbiggest", "id": 31985567, "node_id": "MDQ6VXNlcjMxOTg1NTY3", "avatar_url": "https://avatars0.githubusercontent.com/u/31985567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/biggerbiggest", "html_url": "https://github.com/biggerbiggest", "followers_url": "https://api.github.com/users/biggerbiggest/followers", "following_url": "https://api.github.com/users/biggerbiggest/following{/other_user}", "gists_url": "https://api.github.com/users/biggerbiggest/gists{/gist_id}", "starred_url": "https://api.github.com/users/biggerbiggest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/biggerbiggest/subscriptions", "organizations_url": "https://api.github.com/users/biggerbiggest/orgs", "repos_url": "https://api.github.com/users/biggerbiggest/repos", "events_url": "https://api.github.com/users/biggerbiggest/events{/privacy}", "received_events_url": "https://api.github.com/users/biggerbiggest/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-09T11:49:57Z", "updated_at": "2020-06-07T09:46:21Z", "closed_at": "2020-06-07T09:46:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Continuous running, plus one per repetition", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/239", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/239/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/239/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/239/events", "html_url": "https://github.com/Delgan/loguru/issues/239", "id": 597226331, "node_id": "MDU6SXNzdWU1OTcyMjYzMzE=", "number": 239, "title": "Getting the current configuration of the logger", "user": {"login": "antoine-gallix", "id": 7696611, "node_id": "MDQ6VXNlcjc2OTY2MTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/7696611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoine-gallix", "html_url": "https://github.com/antoine-gallix", "followers_url": "https://api.github.com/users/antoine-gallix/followers", "following_url": "https://api.github.com/users/antoine-gallix/following{/other_user}", "gists_url": "https://api.github.com/users/antoine-gallix/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoine-gallix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoine-gallix/subscriptions", "organizations_url": "https://api.github.com/users/antoine-gallix/orgs", "repos_url": "https://api.github.com/users/antoine-gallix/repos", "events_url": "https://api.github.com/users/antoine-gallix/events{/privacy}", "received_events_url": "https://api.github.com/users/antoine-gallix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-09T11:48:14Z", "updated_at": "2020-04-10T21:56:06Z", "closed_at": "2020-04-10T13:40:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! First of all thank you for this great package, I'm using it everywhere since I discovered it.\r\n\r\nIn my projects, if often use custom functions to configure the logger, building configuration from defaults, config files and environment variables. A logger being a global object, as my projects grow more complex, and logger get configured partially from multiple places, I often loose the track of the state of the logger configuration, and wonder why level and formatting keep changing as my program run, so I need to debug that. That's for the context. Now the question/request:\r\n\r\nHow can I access the current configuration of the logger? I can't find that either in the doc or by exploring objects.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/238", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/238/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/238/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/238/events", "html_url": "https://github.com/Delgan/loguru/issues/238", "id": 595392446, "node_id": "MDU6SXNzdWU1OTUzOTI0NDY=", "number": 238, "title": "Exception in compression / retention will leave file handler in a buggy state", "user": {"login": "Delgan", "id": 4193924, "node_id": "MDQ6VXNlcjQxOTM5MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4193924?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Delgan", "html_url": "https://github.com/Delgan", "followers_url": "https://api.github.com/users/Delgan/followers", "following_url": "https://api.github.com/users/Delgan/following{/other_user}", "gists_url": "https://api.github.com/users/Delgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Delgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Delgan/subscriptions", "organizations_url": "https://api.github.com/users/Delgan/orgs", "repos_url": "https://api.github.com/users/Delgan/repos", "events_url": "https://api.github.com/users/Delgan/events{/privacy}", "received_events_url": "https://api.github.com/users/Delgan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363342, "node_id": "MDU6TGFiZWw2NjkzNjMzNDI=", "url": "https://api.github.com/repos/Delgan/loguru/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-06T20:05:54Z", "updated_at": "2020-04-07T20:28:39Z", "closed_at": "2020-04-07T20:28:39Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The following code:\r\n\r\n```python\r\nimport time\r\nfrom loguru import logger\r\n\r\ndef compression(f):\r\n    raise Exception(\"!\")\r\n\r\nlogger.add(\"file.log\", compression=compression, rotation=100)\r\n\r\nwhile True:\r\n    logger.info(\"Test\")\r\n    time.sleep(1)\r\n```\r\nWill continuously generate `ValueError: I/O operation on closed file.` after rotation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/237", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/237/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/237/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/237/events", "html_url": "https://github.com/Delgan/loguru/issues/237", "id": 595385191, "node_id": "MDU6SXNzdWU1OTUzODUxOTE=", "number": 237, "title": "Exception occurring while calling \"stop()\" from sink prevent handler to be removed", "user": {"login": "Delgan", "id": 4193924, "node_id": "MDQ6VXNlcjQxOTM5MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4193924?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Delgan", "html_url": "https://github.com/Delgan", "followers_url": "https://api.github.com/users/Delgan/followers", "following_url": "https://api.github.com/users/Delgan/following{/other_user}", "gists_url": "https://api.github.com/users/Delgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Delgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Delgan/subscriptions", "organizations_url": "https://api.github.com/users/Delgan/orgs", "repos_url": "https://api.github.com/users/Delgan/repos", "events_url": "https://api.github.com/users/Delgan/events{/privacy}", "received_events_url": "https://api.github.com/users/Delgan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363342, "node_id": "MDU6TGFiZWw2NjkzNjMzNDI=", "url": "https://api.github.com/repos/Delgan/loguru/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-06T19:53:34Z", "updated_at": "2020-04-07T20:28:45Z", "closed_at": "2020-04-07T20:28:45Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Currently, if an exception occurs in `stop()`, the handle **can't** be removed: https://github.com/Delgan/loguru/blob/00ee30fa7319feef5552723abee60b284f6944af/loguru/_logger.py#L979-L997\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/236", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/236/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/236/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/236/events", "html_url": "https://github.com/Delgan/loguru/issues/236", "id": 592830381, "node_id": "MDU6SXNzdWU1OTI4MzAzODE=", "number": 236, "title": "Adding dynamic payload to record", "user": {"login": "alberto-miranda", "id": 18327329, "node_id": "MDQ6VXNlcjE4MzI3MzI5", "avatar_url": "https://avatars1.githubusercontent.com/u/18327329?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alberto-miranda", "html_url": "https://github.com/alberto-miranda", "followers_url": "https://api.github.com/users/alberto-miranda/followers", "following_url": "https://api.github.com/users/alberto-miranda/following{/other_user}", "gists_url": "https://api.github.com/users/alberto-miranda/gists{/gist_id}", "starred_url": "https://api.github.com/users/alberto-miranda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alberto-miranda/subscriptions", "organizations_url": "https://api.github.com/users/alberto-miranda/orgs", "repos_url": "https://api.github.com/users/alberto-miranda/repos", "events_url": "https://api.github.com/users/alberto-miranda/events{/privacy}", "received_events_url": "https://api.github.com/users/alberto-miranda/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-02T18:12:13Z", "updated_at": "2020-04-02T19:52:15Z", "closed_at": "2020-04-02T19:49:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi @Delgan,\r\n\r\nIs it possible to add dynamic information to a message record when the message is emitted? That is, something like `bind()` but for messages:\r\n\r\n```python\r\n# illustrative syntax, can probably be improved\r\nlogger.opt(extra=(\"requires_prefix\", True)).info(\"hello world!\")\r\n```\r\n\r\nIn this case, a new entry `record[\"extra\"][\"requires_prefix\"]` would be added to the record, which could be validated in a formatter. The reason why we would like do this, is to dynamically decide in a custom formatter whether certain messages should include a prefix or not. Was this to be supported our formatter could work like this:\r\n\r\n```python\r\n\r\nclass Formatter:\r\n    def format(self, record):\r\n        fmt_prefix = \"{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} | \"\r\n\r\n        # this cannot be done right now AFAIK\r\n        if \"requires_prefix\" in record[\"extra\"] and record[\"extra\"][\"requires_prefix\"]: \r\n            return fmt_prefix + \"{message}\";\r\n        else:\r\n            return \"{message}\";\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/235", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/235/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/235/events", "html_url": "https://github.com/Delgan/loguru/issues/235", "id": 592684925, "node_id": "MDU6SXNzdWU1OTI2ODQ5MjU=", "number": 235, "title": "Using logger.exception() with a custom exception object.", "user": {"login": "baptiste0928", "id": 22115890, "node_id": "MDQ6VXNlcjIyMTE1ODkw", "avatar_url": "https://avatars0.githubusercontent.com/u/22115890?v=4", "gravatar_id": "", "url": "https://api.github.com/users/baptiste0928", "html_url": "https://github.com/baptiste0928", "followers_url": "https://api.github.com/users/baptiste0928/followers", "following_url": "https://api.github.com/users/baptiste0928/following{/other_user}", "gists_url": "https://api.github.com/users/baptiste0928/gists{/gist_id}", "starred_url": "https://api.github.com/users/baptiste0928/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/baptiste0928/subscriptions", "organizations_url": "https://api.github.com/users/baptiste0928/orgs", "repos_url": "https://api.github.com/users/baptiste0928/repos", "events_url": "https://api.github.com/users/baptiste0928/events{/privacy}", "received_events_url": "https://api.github.com/users/baptiste0928/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-02T14:40:08Z", "updated_at": "2020-04-03T10:31:01Z", "closed_at": "2020-04-03T10:29:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello everyone! \ud83d\ude04 \r\n\r\nI use a global function to handle all errors in a program, to which I pass the exception object. I needed in this function to modify `logger.exception()` in order to display an exception with traceback from an object (and not from `sys.exc_info()`).  With my changes, the function asks for an optional exception argument to manually pass the exception object.\r\n\r\nI would like these changes to be implemented in loguru, but **as requested in the contribution guidelines, I ask here if this is a good idea \ud83d\ude0b**\r\n\r\nThe new code (without tests) looks like this : \r\n```python\r\n# loguru/_logger.py:1905\r\ndef exception(__self, __message, *args, exception=None, **kwargs):\r\n    r\"\"\"Convenience method for logging an ``'ERROR'`` with exception information.\"\"\"\r\n    options = ((True if not exception else exception),) + __self._options[1:]\r\n    __self._log(\"ERROR\", None, False, options, __message, args, kwargs)\r\n```\r\n\r\nWell, I hope my idea will be useful! \ud83d\udcaa \r\n\r\n\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/234", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/234/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/234/events", "html_url": "https://github.com/Delgan/loguru/issues/234", "id": 592082602, "node_id": "MDU6SXNzdWU1OTIwODI2MDI=", "number": 234, "title": "INTERNAL ERROR with arbitrary \"<XXX>\" strings in message", "user": {"login": "alberto-miranda", "id": 18327329, "node_id": "MDQ6VXNlcjE4MzI3MzI5", "avatar_url": "https://avatars1.githubusercontent.com/u/18327329?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alberto-miranda", "html_url": "https://github.com/alberto-miranda", "followers_url": "https://api.github.com/users/alberto-miranda/followers", "following_url": "https://api.github.com/users/alberto-miranda/following{/other_user}", "gists_url": "https://api.github.com/users/alberto-miranda/gists{/gist_id}", "starred_url": "https://api.github.com/users/alberto-miranda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alberto-miranda/subscriptions", "organizations_url": "https://api.github.com/users/alberto-miranda/orgs", "repos_url": "https://api.github.com/users/alberto-miranda/repos", "events_url": "https://api.github.com/users/alberto-miranda/events{/privacy}", "received_events_url": "https://api.github.com/users/alberto-miranda/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306994642, "node_id": "MDU6TGFiZWwxMzA2OTk0NjQy", "url": "https://api.github.com/repos/Delgan/loguru/labels/docs", "name": "docs", "color": "ffa500", "default": false, "description": ""}, {"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-01T17:29:48Z", "updated_at": "2020-04-03T09:28:29Z", "closed_at": "2020-04-01T19:19:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "We are using `loguru` to capture `py.test` errors and redirect them to one or several files. So far, we have code similar to the following:\r\n\r\n``` python\r\n@pytest.fixture(autouse=True)\r\ndef init_logger(request, workspace):\r\n    log_path = workspace.logdir / (request.node.name + \".log\")\r\n\r\n    # 1. log to file with ansi color codes\r\n    logger.add(\r\n            log_path.with_suffix(\".color.log\"),\r\n            colorize=True)\r\n    # 2. log to file with plain text\r\n    logger.add(log_path, \r\n            colorize=False)\r\n\r\ndef pytest_runtest_logreport(report):\r\n    \"\"\"\r\n    Pytest hook called after a test has completed.\r\n    \"\"\"\r\n\r\n    def get_status(report):\r\n        TestReport = namedtuple('TestReport', ['color', 'status'])\r\n\r\n        was_xfail = hasattr(report, \"wasxfail\")\r\n        if report.passed and not was_xfail:\r\n            return TestReport(\"green\", \"PASSED\")\r\n        elif report.passed and was_xfail:\r\n            return TestReport(\"yellow\", \"PASSED\")\r\n        elif report.failed:\r\n            return TestReport(\"red\", \"FAILED\")\r\n        elif report.skipped:\r\n            return TestReport(\"yellow\", \"SKIPPED\")\r\n        else:\r\n            raise ValueError(\"Test report has unknown state\")\r\n\r\n    if report.when == \"call\":\r\n        c, s = get_status(report)\r\n        extra = (\":\\n\" + f\"{report.longrepr}\" if report.failed else \"\")\r\n        logger.opt(colors=True).info(f\"<{c}>TEST {s}</{c}> {extra}\")\r\n```\r\n\r\nThe problem lies in the last line if `extra` contains something similar to `loguru` color tags. In our case, for the offending test  `py.test` produces a failure message that points to the function below, which gets stored in `extra`:\r\n\r\n```python\r\ndef test():\r\n    \"\"\"Check if a file exists using `if [[ -e <file> ]]`.\"\"\"\r\n   # do stuff\r\n```\r\n\r\nSince `py.test` shows the function code up until the point of failure, the `<file>` text in the docstring is wrongly parsed as a color tag by `loguru` and the following internal error is produced:\r\n\r\n```INTERNALERROR> ValueError: Tag \"<file>\" does not corespond to any known ansi directive, make sure you did not misspelled it (or prepend '\\' to escape it)```\r\n\r\nEven if we could escape this particular `<file>` string to avoid the error, there's no way to guarantee that a stack dump produced by `py.test` doesn't include some other string that might be misinterpreted as a color tag. Is there any way to prevent `loguru` from raising the internal error and just ignore the \"tag\" if it's not recognized as a color?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/233", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/233/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/233/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/233/events", "html_url": "https://github.com/Delgan/loguru/issues/233", "id": 591149110, "node_id": "MDU6SXNzdWU1OTExNDkxMTA=", "number": 233, "title": "Improve contextualize doc and pyi files.", "user": {"login": "heckad", "id": 45011689, "node_id": "MDQ6VXNlcjQ1MDExNjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/45011689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heckad", "html_url": "https://github.com/heckad", "followers_url": "https://api.github.com/users/heckad/followers", "following_url": "https://api.github.com/users/heckad/following{/other_user}", "gists_url": "https://api.github.com/users/heckad/gists{/gist_id}", "starred_url": "https://api.github.com/users/heckad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heckad/subscriptions", "organizations_url": "https://api.github.com/users/heckad/orgs", "repos_url": "https://api.github.com/users/heckad/repos", "events_url": "https://api.github.com/users/heckad/events{/privacy}", "received_events_url": "https://api.github.com/users/heckad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363344, "node_id": "MDU6TGFiZWw2NjkzNjMzNDQ=", "url": "https://api.github.com/repos/Delgan/loguru/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-31T14:18:59Z", "updated_at": "2020-04-11T08:55:01Z", "closed_at": "2020-04-11T08:55:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "You use for `contextualize` python's `contextmanager` wich creates `_GeneratorContextManager` wich inherits from `ContextDecorator` which allow use context manager as decorator. For example \r\n```\r\nfrom loguru import logger\r\n\r\n\r\n@logger.contextualize(task_id=123)\r\ndef task():\r\n    logger.opt(record=True).info(\"Processing {record[extra]}\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    task()\r\n```\r\n\r\nNow mypy raise error: `example.py: 4: error: \"ContextManager[Any]\" not callable`\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/232", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/232/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/232/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/232/events", "html_url": "https://github.com/Delgan/loguru/issues/232", "id": 590411428, "node_id": "MDU6SXNzdWU1OTA0MTE0Mjg=", "number": 232, "title": "Asynchronous bug", "user": {"login": "lsabi", "id": 13497689, "node_id": "MDQ6VXNlcjEzNDk3Njg5", "avatar_url": "https://avatars0.githubusercontent.com/u/13497689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lsabi", "html_url": "https://github.com/lsabi", "followers_url": "https://api.github.com/users/lsabi/followers", "following_url": "https://api.github.com/users/lsabi/following{/other_user}", "gists_url": "https://api.github.com/users/lsabi/gists{/gist_id}", "starred_url": "https://api.github.com/users/lsabi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lsabi/subscriptions", "organizations_url": "https://api.github.com/users/lsabi/orgs", "repos_url": "https://api.github.com/users/lsabi/repos", "events_url": "https://api.github.com/users/lsabi/events{/privacy}", "received_events_url": "https://api.github.com/users/lsabi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-03-30T16:08:05Z", "updated_at": "2020-04-02T07:24:44Z", "closed_at": "2020-04-02T07:24:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm using an async web framework with loguru. The framework runs in a single process, so there should not be any race condition. Though, when logging, I get the following error\r\n\r\n> Traceback (most recent call last):\r\n  File \"/home/user/.local/lib/python3.7/site-packages/loguru/_handler.py\", line 259, in _queued_writer\r\n    message = queue.get()\r\n  File \"/usr/lib/python3.7/multiprocessing/queues.py\", line 354, in get\r\n    return _ForkingPickler.loads(res)\r\nTypeError: __init__() missing 1 required positional argument: 'status_code'\r\n--- End of logging error ---\r\n--- Logging error in Loguru Handler #1 ---\r\n\r\nIs there a simple workaround to this issue? I'm using Ubuntu and the problem is different from https://github.com/Delgan/loguru/issues/108 and https://github.com/Delgan/loguru/issues/171 (although I tried to await logger.complete and did not change the situation).\r\n\r\nThanks.\r\n\r\nHere's also part of the logged exception. I couldn't post it all due to sensitive content\r\n\r\n> Traceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/usr/lib/python3.7/multiprocessing/spawn.py\", line 105, in spawn_main\r\n    exitcode = _main(fd)\r\n               \u2502     \u2514 7\r\n               \u2514 <function _main at 0x7fd8fd17a290>\r\n  File \"/usr/lib/python3.7/multiprocessing/spawn.py\", line 118, in _main\r\n    return self._bootstrap()\r\n           \u2502    \u2514 <function BaseProcess._bootstrap at 0x7fd8fd228050>\r\n           \u2514 <SpawnProcess(SpawnProcess-2, started)>\r\n  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\r\n    self.run()\r\n    \u2502    \u2514 <function BaseProcess.run at 0x7fd8fd224680>\r\n    \u2514 <SpawnProcess(SpawnProcess-2, started)>\r\n  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 99, in run\r\n    self._target(*self._args, **self._kwargs)\r\n    \u2502    \u2502        \u2502    \u2502        \u2502    \u2514 {'config': <uvicorn.config.Config object at 0x7fd8fd1a1890>, 'target': <bound method Server.run of <uvicorn.main.Server objec...\r\n    \u2502    \u2502        \u2502    \u2502        \u2514 <SpawnProcess(SpawnProcess-2, started)>\r\n    \u2502    \u2502        \u2502    \u2514 ()\r\n    \u2502    \u2502        \u2514 <SpawnProcess(SpawnProcess-2, started)>\r\n    \u2502    \u2514 <function subprocess_started at 0x7fd8fd1a2560>\r\n    \u2514 <SpawnProcess(SpawnProcess-2, started)>", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/231", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/231/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/231/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/231/events", "html_url": "https://github.com/Delgan/loguru/issues/231", "id": 590221384, "node_id": "MDU6SXNzdWU1OTAyMjEzODQ=", "number": 231, "title": "Bug - Deadlock when using multithreaded & multiprocessing Environment ", "user": {"login": "shachakz", "id": 11520905, "node_id": "MDQ6VXNlcjExNTIwOTA1", "avatar_url": "https://avatars2.githubusercontent.com/u/11520905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shachakz", "html_url": "https://github.com/shachakz", "followers_url": "https://api.github.com/users/shachakz/followers", "following_url": "https://api.github.com/users/shachakz/following{/other_user}", "gists_url": "https://api.github.com/users/shachakz/gists{/gist_id}", "starred_url": "https://api.github.com/users/shachakz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shachakz/subscriptions", "organizations_url": "https://api.github.com/users/shachakz/orgs", "repos_url": "https://api.github.com/users/shachakz/repos", "events_url": "https://api.github.com/users/shachakz/events{/privacy}", "received_events_url": "https://api.github.com/users/shachakz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363342, "node_id": "MDU6TGFiZWw2NjkzNjMzNDI=", "url": "https://api.github.com/repos/Delgan/loguru/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-03-30T11:40:11Z", "updated_at": "2020-05-17T21:53:06Z", "closed_at": "2020-05-02T09:26:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\n**Python version:** 3.6.8\r\n**loguru version:** 0.4.1\r\n**OS:** Linux\r\n**Dev environment:** Terminal\r\n\r\n**Bug Description:** Creating a new process during logging from another thread will cause deadlock inside the new process whenever it calls the logger.\r\nI assume that it happens because handler's _lock is already taken whenever the process is created, resulting that _lock will be taken forever (from the new process perspective) [see 1st comment in [here](https://stackoverflow.com/questions/24509650/deadlock-with-logging-multiprocess-multithread-python-script)].\r\n\r\n**Reproduce code:**\r\n```\r\nimport multiprocessing as mp\r\nimport sys\r\nimport threading\r\nfrom random import uniform\r\nfrom time import sleep\r\nfrom loguru import logger\r\n\r\nlogger.remove()\r\n\r\nlogger.add(\r\n    sys.stdout,\r\n    colorize=False,\r\n    enqueue=True,  # This bug will reproduce also with enqueue=False\r\n    serialize=False,\r\n    level=\"DEBUG\",\r\n)\r\n\r\n\r\ndef sub_worker():\r\n    while True:\r\n        logger.trace(f\"This is the inner thread\")\r\n        sleep(0.01)\r\n\r\ndef worker():\r\n    sleep(uniform(0, 0.1))\r\n    logger.debug(f\"Printing some logs\")\r\n\r\nif __name__ == \"__main__\":\r\n    threading.Thread(target=sub_worker).start()\r\n\r\n    while True:\r\n        w = mp.Process(target=worker, )\r\n        w.start()\r\n        w.join()\r\n\r\n        logger.debug(f\"Loop ok!\")\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/230", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/230/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/230/events", "html_url": "https://github.com/Delgan/loguru/issues/230", "id": 588571823, "node_id": "MDU6SXNzdWU1ODg1NzE4MjM=", "number": 230, "title": "Per-sink line terminator", "user": {"login": "nonamethanks", "id": 12946050, "node_id": "MDQ6VXNlcjEyOTQ2MDUw", "avatar_url": "https://avatars0.githubusercontent.com/u/12946050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nonamethanks", "html_url": "https://github.com/nonamethanks", "followers_url": "https://api.github.com/users/nonamethanks/followers", "following_url": "https://api.github.com/users/nonamethanks/following{/other_user}", "gists_url": "https://api.github.com/users/nonamethanks/gists{/gist_id}", "starred_url": "https://api.github.com/users/nonamethanks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nonamethanks/subscriptions", "organizations_url": "https://api.github.com/users/nonamethanks/orgs", "repos_url": "https://api.github.com/users/nonamethanks/repos", "events_url": "https://api.github.com/users/nonamethanks/events{/privacy}", "received_events_url": "https://api.github.com/users/nonamethanks/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-26T16:54:02Z", "updated_at": "2020-03-29T07:29:14Z", "closed_at": "2020-03-26T20:41:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am in need to be able to occasionally strip newlines from logging for various reasons. These include being able to replace the last printed line in the terminal for long loops that need constant progress being shown (for example the download of a very large file with a progress bar, which can be overwritten with ansi codes to return at the start of the line), or being able to append output when I'm looping an input() inside a try-catch and testing for valid answers.\r\nI did this to avoid the problem:\r\n\r\n```python\r\ndef logger_print(message, terminator=\"\\n\", *args, **kwargs):\r\n    if terminator == \"\\n\":\r\n        logger.info(message, *args, **kwargs)\r\n    else:\r\n        logger.opt(raw=True).info(message + terminator, *args, **kwargs)\r\n```\r\n\t\t\r\nIt works fine when the sink is sys.stdout. however if I'm also logging to a file (with different formatting, too) this causes a mess because the lines end up forming a single large line.\r\nIs there no way to configure line terminator per-sink, like it's already possible in python's default logging library? Because I want to be able to strip the newline only when printing to terminal even if other sinks are active.\r\nFor reference: https://docs.python.org/3/library/logging.handlers.html#streamhandler", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/229", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/229/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/229/events", "html_url": "https://github.com/Delgan/loguru/issues/229", "id": 588126667, "node_id": "MDU6SXNzdWU1ODgxMjY2Njc=", "number": 229, "title": "Compression & rotation?", "user": {"login": "algaspar", "id": 46907153, "node_id": "MDQ6VXNlcjQ2OTA3MTUz", "avatar_url": "https://avatars0.githubusercontent.com/u/46907153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algaspar", "html_url": "https://github.com/algaspar", "followers_url": "https://api.github.com/users/algaspar/followers", "following_url": "https://api.github.com/users/algaspar/following{/other_user}", "gists_url": "https://api.github.com/users/algaspar/gists{/gist_id}", "starred_url": "https://api.github.com/users/algaspar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algaspar/subscriptions", "organizations_url": "https://api.github.com/users/algaspar/orgs", "repos_url": "https://api.github.com/users/algaspar/repos", "events_url": "https://api.github.com/users/algaspar/events{/privacy}", "received_events_url": "https://api.github.com/users/algaspar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363344, "node_id": "MDU6TGFiZWw2NjkzNjMzNDQ=", "url": "https://api.github.com/repos/Delgan/loguru/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2020-03-26T03:23:58Z", "updated_at": "2020-04-26T02:27:27Z", "closed_at": "2020-04-07T20:28:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am having a little trouble with getting my log files to compress when they're done with, and I'm presuming it has something to do with the settings that I have.\r\n\r\nI want my logs to start with a new file at midnight every day and I want them to be compressed when they are closed.  I get my settings from a configuration file, which currently has these settings:\r\n\r\nlog_file = ../logs/SC--{time:ddd--MMM-DD}.log\r\nlog_format = {time:MM-DD-YY at HH:mm} | {level} | {file}:{line} | {function} | {message}\r\nlog_rotation = 00:00\r\nlog_retention = 1 month\r\nlog_compression = zip\r\nlog_level = INFO\r\nlog_queue = True\r\n\r\nAll of these settings except compression appear to work.  I read these settings in from the configuration file and assign them like this:\r\n\r\nlogger.add(log_file, format=log_format, rotation=log_rotation,\r\n               retention=log_retention, compression=log_compression,\r\n               enqueue=log_queue, level=log_level)\r\n\r\nThe documentation says, \"_**The compression happens at rotation or at sink stop if rotation is None.**_\"  I presumed then that when my new log file is created at midnight, my previous day's log file would be zipped.  That isn't happening.  The new file is created, but the old one stays there unzipped.  For example, yesterday had a file named SC--Tue--Mar-24.log.  Today's log was created as SC--Wed--Mar-25.log, but when it was created SC--Tue--Mar-24.log remained as is, unzipped\r\n\r\nCan someone tell me what I might be doing wrong?\r\n\r\nThanks--\r\n\r\nAl", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/228", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/228/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/228/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/228/events", "html_url": "https://github.com/Delgan/loguru/issues/228", "id": 587114302, "node_id": "MDU6SXNzdWU1ODcxMTQzMDI=", "number": 228, "title": "Loguru in module imported by Jupyter Notebook", "user": {"login": "ChasNelson1990", "id": 7795189, "node_id": "MDQ6VXNlcjc3OTUxODk=", "avatar_url": "https://avatars2.githubusercontent.com/u/7795189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChasNelson1990", "html_url": "https://github.com/ChasNelson1990", "followers_url": "https://api.github.com/users/ChasNelson1990/followers", "following_url": "https://api.github.com/users/ChasNelson1990/following{/other_user}", "gists_url": "https://api.github.com/users/ChasNelson1990/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChasNelson1990/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChasNelson1990/subscriptions", "organizations_url": "https://api.github.com/users/ChasNelson1990/orgs", "repos_url": "https://api.github.com/users/ChasNelson1990/repos", "events_url": "https://api.github.com/users/ChasNelson1990/events{/privacy}", "received_events_url": "https://api.github.com/users/ChasNelson1990/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-03-24T16:51:51Z", "updated_at": "2020-03-24T21:10:57Z", "closed_at": "2020-03-24T19:26:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nI really like loguru and have converted a couple of packages that I've been writing to use it.\r\n\r\nI like to provide a jupyter notebook in my repos to demo the use of the module and what I'd like to do is show logs >=INFO in the jupyter notebook and ignore all <=DEBUG logs.\r\n\r\nIn my module I have `logger.disable(\"my_module_name\")` and, if I do nothing in the notebook, I get no outputs (so far so good).\r\n\r\nIf I then add\r\n```python\r\nimport my_module_name as mmn\r\nlogger.enable(\"my_module_name\")\r\nlogger.add(sys.stderr, level=\"INFO\")\r\n```\r\n\r\nI get all logs, including DEBUG. Not, what I expected.\r\n\r\nAny suggestions?\r\n\r\nThanks for your time.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/227", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/227/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/227/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/227/events", "html_url": "https://github.com/Delgan/loguru/issues/227", "id": 586343655, "node_id": "MDU6SXNzdWU1ODYzNDM2NTU=", "number": 227, "title": "Coroutine sink exceptions are not caught", "user": {"login": "gdmoore", "id": 586753, "node_id": "MDQ6VXNlcjU4Njc1Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/586753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gdmoore", "html_url": "https://github.com/gdmoore", "followers_url": "https://api.github.com/users/gdmoore/followers", "following_url": "https://api.github.com/users/gdmoore/following{/other_user}", "gists_url": "https://api.github.com/users/gdmoore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gdmoore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gdmoore/subscriptions", "organizations_url": "https://api.github.com/users/gdmoore/orgs", "repos_url": "https://api.github.com/users/gdmoore/repos", "events_url": "https://api.github.com/users/gdmoore/events{/privacy}", "received_events_url": "https://api.github.com/users/gdmoore/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363344, "node_id": "MDU6TGFiZWw2NjkzNjMzNDQ=", "url": "https://api.github.com/repos/Delgan/loguru/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-03-23T16:33:28Z", "updated_at": "2020-04-23T20:24:53Z", "closed_at": "2020-04-23T20:24:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "It appears that if you use a coroutine as a sink and it has an unhandled exception, even with `catch=True` specified in `add()`, the exception is not caught, and you will get a `Task exception was never retrieved` error on stderr from asyncio: https://docs.python.org/3/library/asyncio-dev.html#detect-never-retrieved-exceptions\r\n\r\n```python\r\nimport asyncio\r\nfrom loguru import logger\r\n\r\nasync def sink(msg):\r\n  raise Exception(\"oh no\")\r\n\r\nasync def main():\r\n  logger.add(sink, catch=True)\r\n  logger.info(\"hello world\")\r\n\r\nasyncio.run(main())\r\n\r\n```\r\n\r\n2020-03-23 12:31:58.236 | INFO     | __main__:main:3 - hello world\r\nTask exception was never retrieved\r\nfuture: <Task finished name='Task-2' coro=<sink() done, defined at <stdin>:1> exception=Exception('oh no')>\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 2, in sink\r\nException: oh no", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/226", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/226/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/226/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/226/events", "html_url": "https://github.com/Delgan/loguru/issues/226", "id": 585374053, "node_id": "MDU6SXNzdWU1ODUzNzQwNTM=", "number": 226, "title": "Sentry breadcrumbs and loguru", "user": {"login": "heckad", "id": 45011689, "node_id": "MDQ6VXNlcjQ1MDExNjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/45011689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heckad", "html_url": "https://github.com/heckad", "followers_url": "https://api.github.com/users/heckad/followers", "following_url": "https://api.github.com/users/heckad/following{/other_user}", "gists_url": "https://api.github.com/users/heckad/gists{/gist_id}", "starred_url": "https://api.github.com/users/heckad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heckad/subscriptions", "organizations_url": "https://api.github.com/users/heckad/orgs", "repos_url": "https://api.github.com/users/heckad/repos", "events_url": "https://api.github.com/users/heckad/events{/privacy}", "received_events_url": "https://api.github.com/users/heckad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-20T23:17:32Z", "updated_at": "2020-03-31T17:07:30Z", "closed_at": "2020-03-31T17:07:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to make sentry capture breadcrumbs from loguru too?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/225", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/225/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/225/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/225/events", "html_url": "https://github.com/Delgan/loguru/issues/225", "id": 584321114, "node_id": "MDU6SXNzdWU1ODQzMjExMTQ=", "number": 225, "title": "rotation to mutli file when logging in mutli-process", "user": {"login": "bcwk", "id": 13061162, "node_id": "MDQ6VXNlcjEzMDYxMTYy", "avatar_url": "https://avatars3.githubusercontent.com/u/13061162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bcwk", "html_url": "https://github.com/bcwk", "followers_url": "https://api.github.com/users/bcwk/followers", "following_url": "https://api.github.com/users/bcwk/following{/other_user}", "gists_url": "https://api.github.com/users/bcwk/gists{/gist_id}", "starred_url": "https://api.github.com/users/bcwk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bcwk/subscriptions", "organizations_url": "https://api.github.com/users/bcwk/orgs", "repos_url": "https://api.github.com/users/bcwk/repos", "events_url": "https://api.github.com/users/bcwk/events{/privacy}", "received_events_url": "https://api.github.com/users/bcwk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-03-19T10:46:37Z", "updated_at": "2020-03-22T09:34:28Z", "closed_at": "2020-03-22T09:34:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "test code such as : \r\n\r\n```\r\nfix_rotation = \"18:30\"\r\ndef LoguruTest(token=None):\r\n    logger.add('loguru_test_{time:YYYY:MM:DD_HH:mm}.log', rotation=fix_rotation, enqueue=True)\r\n    test_count = 0\r\n    while test_count<30:\r\n        time.sleep(2.0+random.uniform(0.3,2.6))\r\n        logger.debug('11111111')\r\n        test_count+=1\r\n\r\nif __name__ == \"__main__\":\r\n    p = Pool(5)\r\n    for i in range(5):\r\n        p.apply_async(LoguruTest, args=(f't_{i}',))\r\n    p.close()\r\n    p.join()\r\n```\r\n\r\nbefore 18:30, all 5 processes wirte to one file; but after 18:30 they write to 5 files.\r\n\r\n-----------\r\nPython 3.7.0\r\nloguru 0.4.1\r\nCentOS Linux release 7.2.1511\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/224", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/224/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/224/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/224/events", "html_url": "https://github.com/Delgan/loguru/issues/224", "id": 582282559, "node_id": "MDU6SXNzdWU1ODIyODI1NTk=", "number": 224, "title": "Logger.catch", "user": {"login": "ChristianSauer", "id": 7250249, "node_id": "MDQ6VXNlcjcyNTAyNDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/7250249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChristianSauer", "html_url": "https://github.com/ChristianSauer", "followers_url": "https://api.github.com/users/ChristianSauer/followers", "following_url": "https://api.github.com/users/ChristianSauer/following{/other_user}", "gists_url": "https://api.github.com/users/ChristianSauer/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChristianSauer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChristianSauer/subscriptions", "organizations_url": "https://api.github.com/users/ChristianSauer/orgs", "repos_url": "https://api.github.com/users/ChristianSauer/repos", "events_url": "https://api.github.com/users/ChristianSauer/events{/privacy}", "received_events_url": "https://api.github.com/users/ChristianSauer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1253282818, "node_id": "MDU6TGFiZWwxMjUzMjgyODE4", "url": "https://api.github.com/repos/Delgan/loguru/labels/feature", "name": "feature", "color": "9722f7", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-03-16T13:10:20Z", "updated_at": "2020-04-11T19:04:56Z", "closed_at": "2020-04-11T19:04:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/223", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/223/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/223/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/223/events", "html_url": "https://github.com/Delgan/loguru/issues/223", "id": 581529526, "node_id": "MDU6SXNzdWU1ODE1Mjk1MjY=", "number": 223, "title": "How to set level of Stack Trace", "user": {"login": "vmvz", "id": 1652700, "node_id": "MDQ6VXNlcjE2NTI3MDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1652700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmvz", "html_url": "https://github.com/vmvz", "followers_url": "https://api.github.com/users/vmvz/followers", "following_url": "https://api.github.com/users/vmvz/following{/other_user}", "gists_url": "https://api.github.com/users/vmvz/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmvz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmvz/subscriptions", "organizations_url": "https://api.github.com/users/vmvz/orgs", "repos_url": "https://api.github.com/users/vmvz/repos", "events_url": "https://api.github.com/users/vmvz/events{/privacy}", "received_events_url": "https://api.github.com/users/vmvz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-15T05:39:14Z", "updated_at": "2020-03-16T01:45:57Z", "closed_at": "2020-03-16T01:45:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "default:\r\n> file_name:function_name:line_num  (level3:function:40)\r\nto:\r\n> level1:function:40 > level2:function:40 > level3:function:40\r\n\r\n---\r\ndefault format:\r\n```\r\n2020-03-15 13:28:26.386 | INFO     | file_name:function:40 - hello!\r\n```\r\nchange to more position info: (like traceback.extract_stack())\r\n\r\n```\r\n2020-03-15 13:28:26.386 | INFO     | __init__:24:test_1 > test_2:17:test_2_main > i704:54:meas > file_name:function:40 - hello!\r\n```\r\n\r\ntks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/222", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/222/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/222/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/222/events", "html_url": "https://github.com/Delgan/loguru/issues/222", "id": 579884711, "node_id": "MDU6SXNzdWU1Nzk4ODQ3MTE=", "number": 222, "title": "Why does loguru use option exception instead of traceback?", "user": {"login": "heckad", "id": 45011689, "node_id": "MDQ6VXNlcjQ1MDExNjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/45011689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heckad", "html_url": "https://github.com/heckad", "followers_url": "https://api.github.com/users/heckad/followers", "following_url": "https://api.github.com/users/heckad/following{/other_user}", "gists_url": "https://api.github.com/users/heckad/gists{/gist_id}", "starred_url": "https://api.github.com/users/heckad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heckad/subscriptions", "organizations_url": "https://api.github.com/users/heckad/orgs", "repos_url": "https://api.github.com/users/heckad/repos", "events_url": "https://api.github.com/users/heckad/events{/privacy}", "received_events_url": "https://api.github.com/users/heckad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306994642, "node_id": "MDU6TGFiZWwxMzA2OTk0NjQy", "url": "https://api.github.com/repos/Delgan/loguru/labels/docs", "name": "docs", "color": "ffa500", "default": false, "description": ""}, {"id": 1253282818, "node_id": "MDU6TGFiZWwxMjUzMjgyODE4", "url": "https://api.github.com/repos/Delgan/loguru/labels/feature", "name": "feature", "color": "9722f7", "default": false, "description": ""}, {"id": 669363348, "node_id": "MDU6TGFiZWw2NjkzNjMzNDg=", "url": "https://api.github.com/repos/Delgan/loguru/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-03-12T11:50:24Z", "updated_at": "2020-04-03T15:51:59Z", "closed_at": "2020-04-03T15:51:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Propose to add `traceback` or `with_traceback` to opt method.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/221", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/221/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/221/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/221/events", "html_url": "https://github.com/Delgan/loguru/issues/221", "id": 578489501, "node_id": "MDU6SXNzdWU1Nzg0ODk1MDE=", "number": 221, "title": "Add an optional hook upon record creation", "user": {"login": "ClementMaliet", "id": 2551569, "node_id": "MDQ6VXNlcjI1NTE1Njk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2551569?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ClementMaliet", "html_url": "https://github.com/ClementMaliet", "followers_url": "https://api.github.com/users/ClementMaliet/followers", "following_url": "https://api.github.com/users/ClementMaliet/following{/other_user}", "gists_url": "https://api.github.com/users/ClementMaliet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ClementMaliet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ClementMaliet/subscriptions", "organizations_url": "https://api.github.com/users/ClementMaliet/orgs", "repos_url": "https://api.github.com/users/ClementMaliet/repos", "events_url": "https://api.github.com/users/ClementMaliet/events{/privacy}", "received_events_url": "https://api.github.com/users/ClementMaliet/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363344, "node_id": "MDU6TGFiZWw2NjkzNjMzNDQ=", "url": "https://api.github.com/repos/Delgan/loguru/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-10T10:45:39Z", "updated_at": "2020-04-13T19:19:04Z", "closed_at": "2020-03-13T15:14:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI have a rather log-heavy application which regularly outputs long multi-line messages. Up until version **0.4.0**, I used a (admittedly hackish) custom format function to modify the record message **in-place** to replace it with an appropriately coloured and *dot-padded* version.\r\n\r\n<details>\r\n<summary>My actual formatter code look something like that..</summary>\r\n<p>\r\n\r\n```python\r\nclass Formatter:\r\n    \"\"\"A log formatter function.\"\"\"\r\n\r\n    def __init__(self):\r\n        self.format_string = \"[{time:YYYY-MM-DD HH:mm:ss.SSSS zz}]\" \\\r\n                             \"[<b><y>{module}:{line}</y></b>] - \" \\\r\n                             \"[<b>{level}</b>]: \" \\\r\n                             \"<level>{message}</level>\\n{exception}\"\r\n\r\n    @staticmethod\r\n    def _indent(message, length):\r\n        lines = message.splitlines()\r\n        indented = ['<n><w>' + '.' * (length - 1) + ':</w></n> <level>' + l + '</level>' for l in lines]\r\n        indented[0] = lines[0]\r\n        return '\\n'.join(indented)\r\n\r\n    def format(self, record):\r\n        if not record['extra'].get('formatted', False):\r\n            if '\\n' in record['message']:\r\n                length = len(\"[{time:YYYY-MM-DD HH:mm:ss.SSSS zz}]\"\r\n                             \"[{module}:{line}] - \"\r\n                             \"[{level}]:\".format(**record))\r\n                record['message'] = self._indent(record['message'], length)\r\n                record['extra']['formatted'] = True\r\n        return self.format_string\r\n\r\n```\r\n\r\n</p>\r\n</details>  \r\n\r\nHowever since the 0.4.1 release, whenever using colours, the message which get printed is a colour-parsed message computed long before the any hook function kicks in, be it **patch** or **format**.\r\n\r\nI do know that modifying the record dictionary is **explicitly** discouraged in the documentation because of potential consistency issues such as mine. However, a hook entry point activated just after the record creation (or having the patch call there to avoid addition the API) would do the trick with no consistency issue as nothing would have ever happened with the record yet.\r\n\r\nNow, there might be implementation details I did not considered as I am rather unfamiliar with the full loguru codebase but I think one of **loguru**'s strength is its flexibility and I believe this would enable useful customization to the way logs are emitted by applications. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/220", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/220/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/220/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/220/events", "html_url": "https://github.com/Delgan/loguru/issues/220", "id": 574267808, "node_id": "MDU6SXNzdWU1NzQyNjc4MDg=", "number": 220, "title": "\"FileNotFoundError\" during montlhy rotation with compression", "user": {"login": "Delgan", "id": 4193924, "node_id": "MDQ6VXNlcjQxOTM5MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4193924?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Delgan", "html_url": "https://github.com/Delgan", "followers_url": "https://api.github.com/users/Delgan/followers", "following_url": "https://api.github.com/users/Delgan/following{/other_user}", "gists_url": "https://api.github.com/users/Delgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Delgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Delgan/subscriptions", "organizations_url": "https://api.github.com/users/Delgan/orgs", "repos_url": "https://api.github.com/users/Delgan/repos", "events_url": "https://api.github.com/users/Delgan/events{/privacy}", "received_events_url": "https://api.github.com/users/Delgan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-03-02T21:43:19Z", "updated_at": "2020-03-08T07:22:14Z", "closed_at": "2020-03-08T07:22:14Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Hi @Delgan , \r\nI have a similar problem. My handler is like this,\r\n```\r\nlogger.add(\r\n  sink='task-scheduler-bootstrap-{time:YYYY-MM}.log',\r\n  format=LOG_FORMAT,\r\n  rotation=\"monthly\",\r\n  compression=\"xz\",\r\n  level=\"INFO\")\r\n\r\n```\r\nand my program encountered the following exception when entering March\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/nsiq/.local/lib/python3.8/site-packages/loguru/_ctime_functions.py\", line 32, in get_ctime                                                                                                                                                                                                                        return float(os.getxattr(filepath, b\"user.loguru_crtime\"))\r\nFileNotFoundError: [Errno 2] No such file or directory: 'task-scheduler-bootstrap-2020-02.log'\r\n```\r\nIt seems that Feb's log was properly rotated out and compressed while the program still wanted to write to it. Is there a way to fix this?\r\n\r\nThank you!\r\n\r\n_Originally posted by @ns-kyuan in https://github.com/Delgan/loguru/issues/213#issuecomment-593610430_", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/219", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/219/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/219/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/219/events", "html_url": "https://github.com/Delgan/loguru/issues/219", "id": 570226904, "node_id": "MDU6SXNzdWU1NzAyMjY5MDQ=", "number": 219, "title": "Basic Setup Issue", "user": {"login": "scottfurry", "id": 6686571, "node_id": "MDQ6VXNlcjY2ODY1NzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6686571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottfurry", "html_url": "https://github.com/scottfurry", "followers_url": "https://api.github.com/users/scottfurry/followers", "following_url": "https://api.github.com/users/scottfurry/following{/other_user}", "gists_url": "https://api.github.com/users/scottfurry/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottfurry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottfurry/subscriptions", "organizations_url": "https://api.github.com/users/scottfurry/orgs", "repos_url": "https://api.github.com/users/scottfurry/repos", "events_url": "https://api.github.com/users/scottfurry/events{/privacy}", "received_events_url": "https://api.github.com/users/scottfurry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-25T00:15:36Z", "updated_at": "2020-02-25T18:28:01Z", "closed_at": "2020-02-25T06:49:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Platform: Linux - Python 3.7.6\r\nPackage: 0.4.1 (latest revision available)\r\n\r\nInstructions say usage is \"out-of-the-box\", but there is something about a basic setup in multiple files in the same module that is just unclear to me.\r\n\r\nIn module `__init__.py` I have the following:\r\n\r\n```\r\nimport sys\r\nfrom loguru import logger\r\nlogger.add(sys.stderr, format=\"[defined format in str]\", filter='my_module', level=\"INFO\")\r\nlogger.info('module init')\r\n```\r\n\r\nIn other python files in the same folder I have:\r\n```\r\nfrom loguru import logger\r\n...\r\n    [elsewhere in code]\r\n   logging.info('a message')\r\n```\r\n\r\nProblem is that the formatting defined in `__init__.py` is not being used. The logger will use the default formatting in defined loguru. If I remove the `filter=...` line, I now have two log outputs for each usage.\r\n\r\nDocumentation suggests the logging defined with `add` should just be _picked up_ but I'm not finding that to be the case. Do I need to use the `logger.bind=(...` call? Is there some other salient detail in the docs that I missed (after scouring the *ReadTheDocs* page and issues/questions raised here). Something is just not making sense.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/218", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/218/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/218/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/218/events", "html_url": "https://github.com/Delgan/loguru/issues/218", "id": 569114944, "node_id": "MDU6SXNzdWU1NjkxMTQ5NDQ=", "number": 218, "title": "Loguru to Papertrail", "user": {"login": "liquidgenius", "id": 3987909, "node_id": "MDQ6VXNlcjM5ODc5MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3987909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liquidgenius", "html_url": "https://github.com/liquidgenius", "followers_url": "https://api.github.com/users/liquidgenius/followers", "following_url": "https://api.github.com/users/liquidgenius/following{/other_user}", "gists_url": "https://api.github.com/users/liquidgenius/gists{/gist_id}", "starred_url": "https://api.github.com/users/liquidgenius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liquidgenius/subscriptions", "organizations_url": "https://api.github.com/users/liquidgenius/orgs", "repos_url": "https://api.github.com/users/liquidgenius/repos", "events_url": "https://api.github.com/users/liquidgenius/events{/privacy}", "received_events_url": "https://api.github.com/users/liquidgenius/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-21T18:30:59Z", "updated_at": "2020-06-07T09:43:52Z", "closed_at": "2020-06-07T09:43:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for the great module! I am interested in using Loguru to transmit JSON logs to Papertrail aggregation service (or any examples to a similar service). Can you point me to any resources that discuss configuring the Loguru logger to do this? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/217", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/217/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/217/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/217/events", "html_url": "https://github.com/Delgan/loguru/issues/217", "id": 568378600, "node_id": "MDU6SXNzdWU1NjgzNzg2MDA=", "number": 217, "title": "Logging from multiple modules.", "user": {"login": "devarshml", "id": 33138515, "node_id": "MDQ6VXNlcjMzMTM4NTE1", "avatar_url": "https://avatars1.githubusercontent.com/u/33138515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devarshml", "html_url": "https://github.com/devarshml", "followers_url": "https://api.github.com/users/devarshml/followers", "following_url": "https://api.github.com/users/devarshml/following{/other_user}", "gists_url": "https://api.github.com/users/devarshml/gists{/gist_id}", "starred_url": "https://api.github.com/users/devarshml/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devarshml/subscriptions", "organizations_url": "https://api.github.com/users/devarshml/orgs", "repos_url": "https://api.github.com/users/devarshml/repos", "events_url": "https://api.github.com/users/devarshml/events{/privacy}", "received_events_url": "https://api.github.com/users/devarshml/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-20T15:25:07Z", "updated_at": "2020-06-07T09:42:57Z", "closed_at": "2020-06-07T09:42:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello there,\r\nFirstly thank you for such an amazing and convenient package for logging in python.\r\n\r\n### Goal : Log messages from multiple python modules to different log files. \r\n        For example- We have two modules by the name file1.py, file2.py.\r\n\r\n\r\n### Failed approaches :\r\n\r\n- Attempt 1,\r\n      In file1.py\r\n\r\n         from loguru import logger\r\n         import file2.py\r\n\r\n         temp_1 =  '/analytics/log/file1.log'\r\n         temp_2 = '/analytics/log/file2.log'\r\n         logger.configure(handlers=[dict(sink=order_channel, format=\"[{time:YYYY-MM-DD \r\n                                      HH:mm:00}, {name}] {level}: {message}\",rotation=\"4 days\", level=\"INFO\"),\r\n                                      dict(sink=application, format=\"[{time:YYYY-MM-DD HH:mm:00}, {name}] \r\n                                     {level}: {message}\", rotation=\"4 days\", level=\"INFO\")])\r\n\r\n          # The below log message should be directed to `file1.log`\r\n          logger.info('Hi, this  log message is from file1')\r\n\r\n\r\n  In file2.py\r\n\r\n         from loguru import logger\r\n         # The below log message should be directed to `file2.log`\r\n          logger.info('Hi, this  log message is from file2')\r\n\r\n- Result1,\r\n   Both the log files are created but all the log messages are passed to both the log files.\r\n\r\n--------------------------------------------------------------------------------------------------\r\n          \r\n- Attempt 2,\r\n\r\n      In file1.py\r\n\r\n         from loguru import logger\r\n         import file2.py\r\n\r\n         temp_1 =  '/analytics/log/file1.log'\r\n         logger.add(temp_1,\r\n                   format=\"[{time:YYYY-MM-DD HH:mm:00}, {name}] {level}: {message}\", rotation=\"4 \r\n                   days\", level='INFO', filter='file1.py')\r\n\r\n          # The below log message should be directed to `file1.log`\r\n          logger.info('Hi, this  log message is from file1')\r\n\r\n\r\n  In file2.py\r\n\r\n         from loguru import logger\r\n\r\n         temp_2 = '/analytics/log/file2.log'\r\n         logger.add(temp_2,\r\n                   format=\"[{time:YYYY-MM-DD HH:mm:00}, {name}] {level}: {message}\", rotation=\"4 \r\n                   days\", level='INFO', filter='file2.py')\r\n\r\n         # The below log message should be directed to `file2.log`\r\n          logger.info('Hi, this  log message is from file2')\r\n\r\n- Result1,\r\n   Both the log files are created but all the log messages are passed to both the log files.\r\n\r\n       \r\n                ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/216", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/216/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/216/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/216/events", "html_url": "https://github.com/Delgan/loguru/issues/216", "id": 566444414, "node_id": "MDU6SXNzdWU1NjY0NDQ0MTQ=", "number": 216, "title": "Incorrect docs for sink.", "user": {"login": "dragonpaw", "id": 74992, "node_id": "MDQ6VXNlcjc0OTky", "avatar_url": "https://avatars2.githubusercontent.com/u/74992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dragonpaw", "html_url": "https://github.com/dragonpaw", "followers_url": "https://api.github.com/users/dragonpaw/followers", "following_url": "https://api.github.com/users/dragonpaw/following{/other_user}", "gists_url": "https://api.github.com/users/dragonpaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/dragonpaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dragonpaw/subscriptions", "organizations_url": "https://api.github.com/users/dragonpaw/orgs", "repos_url": "https://api.github.com/users/dragonpaw/repos", "events_url": "https://api.github.com/users/dragonpaw/events{/privacy}", "received_events_url": "https://api.github.com/users/dragonpaw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306994642, "node_id": "MDU6TGFiZWwxMzA2OTk0NjQy", "url": "https://api.github.com/repos/Delgan/loguru/labels/docs", "name": "docs", "color": "ffa500", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-17T17:48:48Z", "updated_at": "2020-02-17T20:54:59Z", "closed_at": "2020-02-17T20:54:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the docs, I see:\r\n```\r\ndef my_sink(message):\r\n    record = message.record\r\n    update_db(message, time=record.time, level=record.level)\r\n\r\nlogger.add(my_sink)\r\n```\r\n\r\nBut record is a dict, so this needs to be `record['time']` and such I believe.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/215", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/215/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/215/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/215/events", "html_url": "https://github.com/Delgan/loguru/issues/215", "id": 565556063, "node_id": "MDU6SXNzdWU1NjU1NTYwNjM=", "number": 215, "title": "Supported way to list all levels?", "user": {"login": "gahjelle", "id": 728076, "node_id": "MDQ6VXNlcjcyODA3Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/728076?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gahjelle", "html_url": "https://github.com/gahjelle", "followers_url": "https://api.github.com/users/gahjelle/followers", "following_url": "https://api.github.com/users/gahjelle/following{/other_user}", "gists_url": "https://api.github.com/users/gahjelle/gists{/gist_id}", "starred_url": "https://api.github.com/users/gahjelle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gahjelle/subscriptions", "organizations_url": "https://api.github.com/users/gahjelle/orgs", "repos_url": "https://api.github.com/users/gahjelle/repos", "events_url": "https://api.github.com/users/gahjelle/events{/privacy}", "received_events_url": "https://api.github.com/users/gahjelle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1253282818, "node_id": "MDU6TGFiZWwxMjUzMjgyODE4", "url": "https://api.github.com/repos/Delgan/loguru/labels/feature", "name": "feature", "color": "9722f7", "default": false, "description": ""}, {"id": 669363348, "node_id": "MDU6TGFiZWw2NjkzNjMzNDg=", "url": "https://api.github.com/repos/Delgan/loguru/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-14T21:06:41Z", "updated_at": "2020-02-17T20:54:40Z", "closed_at": "2020-02-17T08:59:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nfirst of all: thank you so much for the effort you've put into `loguru`. I've been using it for a year or so, and find it an absolute joy to use. :+1: \r\n\r\nI have a question: Is there a supported way to list all currently defined levels?\r\n\r\nI have been sneaking into the private API and used `logger._levels`. However, this came back to bite me slightly with v0.4 changing this to `logger._core.levels`. I'm therefore wondering if there is a better way to get at this list? Or simply a list of names of levels which I can then combine with calls to `logger.level()`?\r\n\r\nA bit of background: I have a small wrapper around `loguru` that I use, mainly to be able to change the log level using command-line options. It's nice to normally run applications at either the `WARNING` or `INFO` level, but then from time to time easily switch to lower levels for more information. I also tend to add a few custom levels, like for instance a dedicated `TIME` level where I log the running time of different parts of my code.\r\n\r\nThanks again,\r\n\r\nbest, Geir Arne", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/214", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/214/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/214/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/214/events", "html_url": "https://github.com/Delgan/loguru/issues/214", "id": 563204392, "node_id": "MDU6SXNzdWU1NjMyMDQzOTI=", "number": 214, "title": "logger in jupyter notebook not working", "user": {"login": "metya", "id": 968934, "node_id": "MDQ6VXNlcjk2ODkzNA==", "avatar_url": "https://avatars3.githubusercontent.com/u/968934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/metya", "html_url": "https://github.com/metya", "followers_url": "https://api.github.com/users/metya/followers", "following_url": "https://api.github.com/users/metya/following{/other_user}", "gists_url": "https://api.github.com/users/metya/gists{/gist_id}", "starred_url": "https://api.github.com/users/metya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/metya/subscriptions", "organizations_url": "https://api.github.com/users/metya/orgs", "repos_url": "https://api.github.com/users/metya/repos", "events_url": "https://api.github.com/users/metya/events{/privacy}", "received_events_url": "https://api.github.com/users/metya/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-11T13:24:36Z", "updated_at": "2020-02-11T18:19:07Z", "closed_at": "2020-02-11T16:41:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello. \r\n\r\nIn jupyterlab logger from loguru not working. \r\nopen jupyter and just type:\r\n```python\r\nfrom loguru import logger\r\nlogger.info('hello')\r\n```\r\nand nothing will happen, nothing will appear by default.\r\n\r\nand if you want to add some logger with level with `str`, then will be an error, and if with `int`, it will be ok.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/213", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/213/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/213/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/213/events", "html_url": "https://github.com/Delgan/loguru/issues/213", "id": 562905311, "node_id": "MDU6SXNzdWU1NjI5MDUzMTE=", "number": 213, "title": "log rotation ... controlling the name of the rotated file", "user": {"login": "jakane", "id": 10256904, "node_id": "MDQ6VXNlcjEwMjU2OTA0", "avatar_url": "https://avatars1.githubusercontent.com/u/10256904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakane", "html_url": "https://github.com/jakane", "followers_url": "https://api.github.com/users/jakane/followers", "following_url": "https://api.github.com/users/jakane/following{/other_user}", "gists_url": "https://api.github.com/users/jakane/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakane/subscriptions", "organizations_url": "https://api.github.com/users/jakane/orgs", "repos_url": "https://api.github.com/users/jakane/repos", "events_url": "https://api.github.com/users/jakane/events{/privacy}", "received_events_url": "https://api.github.com/users/jakane/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-11T00:13:32Z", "updated_at": "2020-03-30T20:14:37Z", "closed_at": "2020-03-30T20:14:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like log rotation to work similar to a common pattern used in logrotate(8).\r\n\r\nie: current logs going to file.log\r\nrotated files going to file-YYYYmmdd-HHMM.log\r\n\r\nWhat I wish to do is control the {time} portion of the rotated file name. I would like to have something like '-{time:YYYYMMDD-HHMM!UTC}' instead of what looks like '.YYYY-MM-DD_HH-MM-SS_SSSSSS}' (where it is in local time).\r\n\r\nHow would I go about this? Otherwise the rotation, compression, retention works as I would expect.\r\n\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/212", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/212/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/212/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/212/events", "html_url": "https://github.com/Delgan/loguru/issues/212", "id": 562478243, "node_id": "MDU6SXNzdWU1NjI0NzgyNDM=", "number": 212, "title": "feature request: migration path for print calls", "user": {"login": "jamescasbon", "id": 97495, "node_id": "MDQ6VXNlcjk3NDk1", "avatar_url": "https://avatars3.githubusercontent.com/u/97495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamescasbon", "html_url": "https://github.com/jamescasbon", "followers_url": "https://api.github.com/users/jamescasbon/followers", "following_url": "https://api.github.com/users/jamescasbon/following{/other_user}", "gists_url": "https://api.github.com/users/jamescasbon/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamescasbon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamescasbon/subscriptions", "organizations_url": "https://api.github.com/users/jamescasbon/orgs", "repos_url": "https://api.github.com/users/jamescasbon/repos", "events_url": "https://api.github.com/users/jamescasbon/events{/privacy}", "received_events_url": "https://api.github.com/users/jamescasbon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-10T10:49:25Z", "updated_at": "2020-02-10T14:29:08Z", "closed_at": "2020-02-10T14:28:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Many times I have received code from a non log enlightened coworker.  These scripts can have 100s of print statements.  Currently, the path to logging is painful.  You cannot simply run s/print/log.info/ as you need to change all the first arguments to print to support string formats.\r\n\r\neg \r\n\r\n    print('HERE', something, another_thing)\r\n\r\nmust become \r\n\r\n    log.info('HERE %s %s', something, another_thing)\r\n\r\n\r\nI would love a log library that would make the upgrade path easier so that you could in one step move to logging and then decide how to update the statements on a case by case basis.  This would also help *sell* logging modules as straight away the unenlightened coworker could see what line the print statement comes from!\r\n\r\nSo perhaps we could have a print function defined something like: \r\n\r\n     def print(self, *msg, level='INFO'):\r\n          fmt = '{} ' * len(msg)\r\n          self.log(level, ..., fmt, msg)\r\n\r\nWhich would enable a trivial source change to use logging.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/210", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/210/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/210/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/210/events", "html_url": "https://github.com/Delgan/loguru/issues/210", "id": 561392454, "node_id": "MDU6SXNzdWU1NjEzOTI0NTQ=", "number": 210, "title": "level='INFO' no work in cmd", "user": {"login": "hou0122", "id": 31732985, "node_id": "MDQ6VXNlcjMxNzMyOTg1", "avatar_url": "https://avatars3.githubusercontent.com/u/31732985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hou0122", "html_url": "https://github.com/hou0122", "followers_url": "https://api.github.com/users/hou0122/followers", "following_url": "https://api.github.com/users/hou0122/following{/other_user}", "gists_url": "https://api.github.com/users/hou0122/gists{/gist_id}", "starred_url": "https://api.github.com/users/hou0122/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hou0122/subscriptions", "organizations_url": "https://api.github.com/users/hou0122/orgs", "repos_url": "https://api.github.com/users/hou0122/repos", "events_url": "https://api.github.com/users/hou0122/events{/privacy}", "received_events_url": "https://api.github.com/users/hou0122/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-07T03:04:34Z", "updated_at": "2020-02-09T05:04:59Z", "closed_at": "2020-02-09T05:04:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I try setting logger.add(str, level='INFO') and logger.debug('logging msg').\r\nBut cmd still output debug msg that WHY?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/209", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/209/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/209/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/209/events", "html_url": "https://github.com/Delgan/loguru/issues/209", "id": 559179038, "node_id": "MDU6SXNzdWU1NTkxNzkwMzg=", "number": 209, "title": "No correspondence between string and int level format", "user": {"login": "Vedrillan", "id": 2758851, "node_id": "MDQ6VXNlcjI3NTg4NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2758851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vedrillan", "html_url": "https://github.com/Vedrillan", "followers_url": "https://api.github.com/users/Vedrillan/followers", "following_url": "https://api.github.com/users/Vedrillan/following{/other_user}", "gists_url": "https://api.github.com/users/Vedrillan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vedrillan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vedrillan/subscriptions", "organizations_url": "https://api.github.com/users/Vedrillan/orgs", "repos_url": "https://api.github.com/users/Vedrillan/repos", "events_url": "https://api.github.com/users/Vedrillan/events{/privacy}", "received_events_url": "https://api.github.com/users/Vedrillan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363344, "node_id": "MDU6TGFiZWw2NjkzNjMzNDQ=", "url": "https://api.github.com/repos/Delgan/loguru/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-02-03T16:04:48Z", "updated_at": "2020-04-08T19:03:52Z", "closed_at": "2020-04-08T19:03:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "The behaviors when logging with the level set as \"INFO\" or 20 is different, though they share the same level number.\r\n\r\n![image](https://user-images.githubusercontent.com/2758851/73668271-ef815480-46a5-11ea-84fa-47faf16da1d2.png)\r\n\r\nI noticed that because I wanted to use logging levels constant:\r\n```\r\nfrom logging import INFO\r\nfrom loguru import logger\r\nlogger.log(INFO, \"toto\")\r\n```\r\n\r\nIf the level number is registered in loguru it should be matched and used instead of displaying the generic `\"Level %d\" % level_no` message without any colorization.\r\n\r\nIt would also be nice to have Loguru providing the level numbers as constant (e.g loguru.INFO), otherwise levels are just magic strings that cannot be easily looked up or referenced.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/208", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/208/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/208/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/208/events", "html_url": "https://github.com/Delgan/loguru/issues/208", "id": 558439703, "node_id": "MDU6SXNzdWU1NTg0Mzk3MDM=", "number": 208, "title": "Why does it logs duplicated message?", "user": {"login": "rightx2", "id": 10606994, "node_id": "MDQ6VXNlcjEwNjA2OTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/10606994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rightx2", "html_url": "https://github.com/rightx2", "followers_url": "https://api.github.com/users/rightx2/followers", "following_url": "https://api.github.com/users/rightx2/following{/other_user}", "gists_url": "https://api.github.com/users/rightx2/gists{/gist_id}", "starred_url": "https://api.github.com/users/rightx2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rightx2/subscriptions", "organizations_url": "https://api.github.com/users/rightx2/orgs", "repos_url": "https://api.github.com/users/rightx2/repos", "events_url": "https://api.github.com/users/rightx2/events{/privacy}", "received_events_url": "https://api.github.com/users/rightx2/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-01T00:16:28Z", "updated_at": "2020-03-08T07:29:37Z", "closed_at": "2020-03-08T07:29:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Code\r\n```\r\nimport sys\r\n\r\nfrom loguru import logger\r\nlogger.add(sys.stdout, colorize=True, format=\"{message}~~~~\")\r\n\r\n\r\nlogger.debug(\"This is my logger\\n awesome!! haha\")\r\n>> 2020-02-01 09:11:45.204 | DEBUG    | __main__:<module>:1 - This is my logger\r\n awesome!! haha\r\nThis is my logger\r\n awesome!! haha~~~~\r\n```\r\n\r\n## Problems\r\n\r\n1. It shows the same message twice\r\n2. I was meant to print just `message` alone but it always print `2020-02-01 09:11:45.204 | DEBUG    | __main__:<module>:1`... \r\n\r\nWhy does it happen?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/207", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/207/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/207/events", "html_url": "https://github.com/Delgan/loguru/issues/207", "id": 557990618, "node_id": "MDU6SXNzdWU1NTc5OTA2MTg=", "number": 207, "title": "Multiple arguments", "user": {"login": "filantus", "id": 13046849, "node_id": "MDQ6VXNlcjEzMDQ2ODQ5", "avatar_url": "https://avatars1.githubusercontent.com/u/13046849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/filantus", "html_url": "https://github.com/filantus", "followers_url": "https://api.github.com/users/filantus/followers", "following_url": "https://api.github.com/users/filantus/following{/other_user}", "gists_url": "https://api.github.com/users/filantus/gists{/gist_id}", "starred_url": "https://api.github.com/users/filantus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/filantus/subscriptions", "organizations_url": "https://api.github.com/users/filantus/orgs", "repos_url": "https://api.github.com/users/filantus/repos", "events_url": "https://api.github.com/users/filantus/events{/privacy}", "received_events_url": "https://api.github.com/users/filantus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-31T08:41:11Z", "updated_at": "2020-01-31T12:53:55Z", "closed_at": "2020-01-31T12:35:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! Can you please tell, it's possible to achieve behavior with loguru.info() like print() function in case of  multiple arguments?\r\n\r\nFor example, with print() i can do: `print(1, 'abc', True)`, but loguru.info() takes only first argument for message.\r\n\r\nI can reach desired result if i do:\r\n```Python\r\nloguru.info(', '.join([str(a) for a in (1, 'abc', True)]))\r\n```\r\nBut make it every time too exhausting.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/206", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/206/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/206/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/206/events", "html_url": "https://github.com/Delgan/loguru/issues/206", "id": 553454508, "node_id": "MDU6SXNzdWU1NTM0NTQ1MDg=", "number": 206, "title": "ImportError: cannot import name 'Logger' from 'loguru'", "user": {"login": "heckad", "id": 45011689, "node_id": "MDQ6VXNlcjQ1MDExNjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/45011689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heckad", "html_url": "https://github.com/heckad", "followers_url": "https://api.github.com/users/heckad/followers", "following_url": "https://api.github.com/users/heckad/following{/other_user}", "gists_url": "https://api.github.com/users/heckad/gists{/gist_id}", "starred_url": "https://api.github.com/users/heckad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heckad/subscriptions", "organizations_url": "https://api.github.com/users/heckad/orgs", "repos_url": "https://api.github.com/users/heckad/repos", "events_url": "https://api.github.com/users/heckad/events{/privacy}", "received_events_url": "https://api.github.com/users/heckad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306994642, "node_id": "MDU6TGFiZWwxMzA2OTk0NjQy", "url": "https://api.github.com/repos/Delgan/loguru/labels/docs", "name": "docs", "color": "ffa500", "default": false, "description": ""}, {"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-01-22T10:41:12Z", "updated_at": "2020-01-23T22:18:32Z", "closed_at": "2020-01-23T22:18:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nfrom logure import Logger\r\n\r\ndef f(log:Logure):\r\n    pass\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/204", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/204/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/204/events", "html_url": "https://github.com/Delgan/loguru/issues/204", "id": 551519191, "node_id": "MDU6SXNzdWU1NTE1MTkxOTE=", "number": 204, "title": "How to create logger with specific name?", "user": {"login": "heckad", "id": 45011689, "node_id": "MDQ6VXNlcjQ1MDExNjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/45011689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heckad", "html_url": "https://github.com/heckad", "followers_url": "https://api.github.com/users/heckad/followers", "following_url": "https://api.github.com/users/heckad/following{/other_user}", "gists_url": "https://api.github.com/users/heckad/gists{/gist_id}", "starred_url": "https://api.github.com/users/heckad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heckad/subscriptions", "organizations_url": "https://api.github.com/users/heckad/orgs", "repos_url": "https://api.github.com/users/heckad/repos", "events_url": "https://api.github.com/users/heckad/events{/privacy}", "received_events_url": "https://api.github.com/users/heckad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2020-01-17T16:42:43Z", "updated_at": "2020-03-08T13:40:15Z", "closed_at": "2020-03-08T13:40:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to create a particular logger for logging events. How to do it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/203", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/203/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/203/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/203/events", "html_url": "https://github.com/Delgan/loguru/issues/203", "id": 551473718, "node_id": "MDU6SXNzdWU1NTE0NzM3MTg=", "number": 203, "title": "Would a custom json format in serialize_record have any value for loguru?", "user": {"login": "devspyrosv", "id": 2104928, "node_id": "MDQ6VXNlcjIxMDQ5Mjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2104928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devspyrosv", "html_url": "https://github.com/devspyrosv", "followers_url": "https://api.github.com/users/devspyrosv/followers", "following_url": "https://api.github.com/users/devspyrosv/following{/other_user}", "gists_url": "https://api.github.com/users/devspyrosv/gists{/gist_id}", "starred_url": "https://api.github.com/users/devspyrosv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devspyrosv/subscriptions", "organizations_url": "https://api.github.com/users/devspyrosv/orgs", "repos_url": "https://api.github.com/users/devspyrosv/repos", "events_url": "https://api.github.com/users/devspyrosv/events{/privacy}", "received_events_url": "https://api.github.com/users/devspyrosv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1253282818, "node_id": "MDU6TGFiZWwxMjUzMjgyODE4", "url": "https://api.github.com/repos/Delgan/loguru/labels/feature", "name": "feature", "color": "9722f7", "default": false, "description": ""}, {"id": 669363348, "node_id": "MDU6TGFiZWw2NjkzNjMzNDg=", "url": "https://api.github.com/repos/Delgan/loguru/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2020-01-17T15:19:12Z", "updated_at": "2020-03-30T20:13:44Z", "closed_at": "2020-03-30T20:13:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\nThere are cases where the extra arguments would fit nicely at the top level of the json dict.\r\n\r\nBy having the json format hardcoded in 'serialize_record' as 'serializable' it's not possible to change the final json format.\r\n\r\nI believe that the 'serializable' variable should be accessible  just like 'format' is when adding a logger.\r\nWould you agree with the above?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/202", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/202/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/202/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/202/events", "html_url": "https://github.com/Delgan/loguru/issues/202", "id": 551324806, "node_id": "MDU6SXNzdWU1NTEzMjQ4MDY=", "number": 202, "title": "PermissionError: [WinError 32] ", "user": {"login": "qq703048949", "id": 7246095, "node_id": "MDQ6VXNlcjcyNDYwOTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/7246095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qq703048949", "html_url": "https://github.com/qq703048949", "followers_url": "https://api.github.com/users/qq703048949/followers", "following_url": "https://api.github.com/users/qq703048949/following{/other_user}", "gists_url": "https://api.github.com/users/qq703048949/gists{/gist_id}", "starred_url": "https://api.github.com/users/qq703048949/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qq703048949/subscriptions", "organizations_url": "https://api.github.com/users/qq703048949/orgs", "repos_url": "https://api.github.com/users/qq703048949/repos", "events_url": "https://api.github.com/users/qq703048949/events{/privacy}", "received_events_url": "https://api.github.com/users/qq703048949/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-01-17T10:14:27Z", "updated_at": "2020-05-20T06:03:09Z", "closed_at": "2020-03-30T20:13:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nfrom loguru import logger\r\nfrom multiprocessing import Pool\r\nlogger.add('runtime.log', format=\"{message}\", level=\"INFO\", rotation='1MB', retention=5, encoding='utf-8', enqueue=True)\r\n@logger.catch\r\ndef my_function(x, y, z):\r\n    return 1 / (x + y + z)\r\ndef wrire_log(x):\r\n    for i in range(10000):\r\n        my_function(0, 0, 0)\r\nif __name__ == '__main__':\r\n    p = Pool(10)\r\n    p.map(wrire_log, list(range(10)))\r\n    print('Waiting for all subprocesses done...')\r\n    p.close()\r\n    p.join()\r\n    print('All subprocesses done.')\r\n```\r\n\r\n\r\nwhen I use it \uff0c find  error  for `'PermissionError: [WinError 32] \u53e6\u4e00\u4e2a\u7a0b\u5e8f\u6b63\u5728\u4f7f\u7528\u6b64\u6587\u4ef6\uff0c\u8fdb\u7a0b\u65e0\u6cd5\u8bbf\u95ee\u3002'` I need  you help!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/201", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/201/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/201/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/201/events", "html_url": "https://github.com/Delgan/loguru/issues/201", "id": 550636252, "node_id": "MDU6SXNzdWU1NTA2MzYyNTI=", "number": 201, "title": "How to identify how many handler are used in logger", "user": {"login": "Lazloo", "id": 10186284, "node_id": "MDQ6VXNlcjEwMTg2Mjg0", "avatar_url": "https://avatars2.githubusercontent.com/u/10186284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lazloo", "html_url": "https://github.com/Lazloo", "followers_url": "https://api.github.com/users/Lazloo/followers", "following_url": "https://api.github.com/users/Lazloo/following{/other_user}", "gists_url": "https://api.github.com/users/Lazloo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lazloo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lazloo/subscriptions", "organizations_url": "https://api.github.com/users/Lazloo/orgs", "repos_url": "https://api.github.com/users/Lazloo/repos", "events_url": "https://api.github.com/users/Lazloo/events{/privacy}", "received_events_url": "https://api.github.com/users/Lazloo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1253282818, "node_id": "MDU6TGFiZWwxMjUzMjgyODE4", "url": "https://api.github.com/repos/Delgan/loguru/labels/feature", "name": "feature", "color": "9722f7", "default": false, "description": ""}, {"id": 669363348, "node_id": "MDU6TGFiZWw2NjkzNjMzNDg=", "url": "https://api.github.com/repos/Delgan/loguru/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-16T07:55:16Z", "updated_at": "2020-03-30T20:11:26Z", "closed_at": "2020-03-30T20:11:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\n\r\nI would like to identify the number of handlers that are associated with my logger object. Until now I used logger._handlers. But apparently, that does not exists anymore in version 0.4.\r\n\r\nI used _handlers as follows \r\n\r\n```\r\nfrom loguru import logger\r\n\r\ndef init_loguru(self, func_name=''):\r\n\r\n    if len(logger._handlers) <= 1:\r\n        logger.add(sink='log.txt', level='INFO')\r\n        \r\n    return logger\r\n```\r\n\r\nThis function makes sure that the logger object contains at maximum to handlers.\r\n\r\nI hope you can help\r\nLazloo", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/199", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/199/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/199/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/199/events", "html_url": "https://github.com/Delgan/loguru/issues/199", "id": 547130190, "node_id": "MDU6SXNzdWU1NDcxMzAxOTA=", "number": 199, "title": "Replace newline `\\n` with literal `\\\\n` in log", "user": {"login": "AllanLRH", "id": 2641327, "node_id": "MDQ6VXNlcjI2NDEzMjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2641327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AllanLRH", "html_url": "https://github.com/AllanLRH", "followers_url": "https://api.github.com/users/AllanLRH/followers", "following_url": "https://api.github.com/users/AllanLRH/following{/other_user}", "gists_url": "https://api.github.com/users/AllanLRH/gists{/gist_id}", "starred_url": "https://api.github.com/users/AllanLRH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AllanLRH/subscriptions", "organizations_url": "https://api.github.com/users/AllanLRH/orgs", "repos_url": "https://api.github.com/users/AllanLRH/repos", "events_url": "https://api.github.com/users/AllanLRH/events{/privacy}", "received_events_url": "https://api.github.com/users/AllanLRH/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363347, "node_id": "MDU6TGFiZWw2NjkzNjMzNDc=", "url": "https://api.github.com/repos/Delgan/loguru/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-08T22:07:13Z", "updated_at": "2020-03-30T20:10:34Z", "closed_at": "2020-03-30T20:10:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd love the option to force log messages to span just one line by replacing `\\n` with `\\\\n`.\r\n\r\nThis is an issue which are sometimes encountered when logging Pandas DataFrames and Numpy Arrays.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/198", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/198/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/198/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/198/events", "html_url": "https://github.com/Delgan/loguru/issues/198", "id": 545516698, "node_id": "MDU6SXNzdWU1NDU1MTY2OTg=", "number": 198, "title": "Color codes not stripped from records with colorize=False", "user": {"login": "gazpachoking", "id": 187133, "node_id": "MDQ6VXNlcjE4NzEzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/187133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gazpachoking", "html_url": "https://github.com/gazpachoking", "followers_url": "https://api.github.com/users/gazpachoking/followers", "following_url": "https://api.github.com/users/gazpachoking/following{/other_user}", "gists_url": "https://api.github.com/users/gazpachoking/gists{/gist_id}", "starred_url": "https://api.github.com/users/gazpachoking/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gazpachoking/subscriptions", "organizations_url": "https://api.github.com/users/gazpachoking/orgs", "repos_url": "https://api.github.com/users/gazpachoking/repos", "events_url": "https://api.github.com/users/gazpachoking/events{/privacy}", "received_events_url": "https://api.github.com/users/gazpachoking/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363344, "node_id": "MDU6TGFiZWw2NjkzNjMzNDQ=", "url": "https://api.github.com/repos/Delgan/loguru/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-01-06T03:12:22Z", "updated_at": "2020-01-19T11:40:27Z", "closed_at": "2020-01-19T11:40:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When adding a function sink with `colorize=False` the `message` attribute of the record does not have the color codes stripped. Here's a short example showing the issue I mean:\r\n\r\n```python\r\nfrom loguru import logger\r\n\r\n\r\ndef test_sink(message):\r\n    assert \"<red>\" not in message  # This is fine\r\n    assert \"<red>\" not in message.record[\"message\"]  # This fails\r\n\r\n\r\nlogger.add(test_sink, colorize=False)\r\nlogger.opt(ansi=True).info(\"<red>something</>\")\r\n```\r\n\r\nThis is a problem for example when sending log records over the network, as in this recipe. https://loguru.readthedocs.io/en/stable/resources/recipes.html#sending-and-receiving-log-messages-across-network-or-processes\r\n\r\nOn the other side of the network, the record message still contains color codes, but we have no way of transmitting that the message should be processed with the `.opt(ansi=True` anymore. Perhaps rather than (or maybe in addition to) `.opt()` modifying the logger, the options should be attached to the log record?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/197", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/197/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/197/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/197/events", "html_url": "https://github.com/Delgan/loguru/issues/197", "id": 544369175, "node_id": "MDU6SXNzdWU1NDQzNjkxNzU=", "number": 197, "title": "Option to not raise on unknown color tags", "user": {"login": "gazpachoking", "id": 187133, "node_id": "MDQ6VXNlcjE4NzEzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/187133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gazpachoking", "html_url": "https://github.com/gazpachoking", "followers_url": "https://api.github.com/users/gazpachoking/followers", "following_url": "https://api.github.com/users/gazpachoking/following{/other_user}", "gists_url": "https://api.github.com/users/gazpachoking/gists{/gist_id}", "starred_url": "https://api.github.com/users/gazpachoking/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gazpachoking/subscriptions", "organizations_url": "https://api.github.com/users/gazpachoking/orgs", "repos_url": "https://api.github.com/users/gazpachoking/repos", "events_url": "https://api.github.com/users/gazpachoking/events{/privacy}", "received_events_url": "https://api.github.com/users/gazpachoking/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363344, "node_id": "MDU6TGFiZWw2NjkzNjMzNDQ=", "url": "https://api.github.com/repos/Delgan/loguru/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-01T15:23:06Z", "updated_at": "2020-01-19T11:39:03Z", "closed_at": "2020-01-19T11:39:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I think it would be a nicer behavior to not raisie on unknown tags (or an option that could turn this off.) We ran into logging crashes with the first log lines we tried to color, because some reprs that ended up in the message were with angle brackets. The angle brackets were via a variable in the message, so escaping ends up being a bit cumbersome. `logger.opt(ansi=True).info('<green>colored message</> other stuff {here}', here=dobracketescaping(somevar))` I see this used to be the behavior, but got changed to help people get the color tags right in #57 .\r\n\r\nIf you don't want to change this behavior back, maybe include a function, or formatter that does the escaping? I see in the docs there is a regex if the user wants to do it, but it might be nice to include. Potential methods:\r\n```\r\nlogger.opt(ansi=True).info('<green>color</> {}', logger.ansiescape(somevar))\r\nlogger.opt(ansi=True).info('<green>color</> {:ansiescape}', somevar)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/195", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/195/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/195/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/195/events", "html_url": "https://github.com/Delgan/loguru/issues/195", "id": 543918941, "node_id": "MDU6SXNzdWU1NDM5MTg5NDE=", "number": 195, "title": "Log deletion too greedy", "user": {"login": "gazpachoking", "id": 187133, "node_id": "MDQ6VXNlcjE4NzEzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/187133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gazpachoking", "html_url": "https://github.com/gazpachoking", "followers_url": "https://api.github.com/users/gazpachoking/followers", "following_url": "https://api.github.com/users/gazpachoking/following{/other_user}", "gists_url": "https://api.github.com/users/gazpachoking/gists{/gist_id}", "starred_url": "https://api.github.com/users/gazpachoking/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gazpachoking/subscriptions", "organizations_url": "https://api.github.com/users/gazpachoking/orgs", "repos_url": "https://api.github.com/users/gazpachoking/repos", "events_url": "https://api.github.com/users/gazpachoking/events{/privacy}", "received_events_url": "https://api.github.com/users/gazpachoking/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669363344, "node_id": "MDU6TGFiZWw2NjkzNjMzNDQ=", "url": "https://api.github.com/repos/Delgan/loguru/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-30T15:31:35Z", "updated_at": "2020-01-09T23:57:06Z", "closed_at": "2020-01-09T23:57:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using the file sink, when loguru goes to clean up old logs due to retention setting. It is a bit too greedy with what it thinks are old logs. I am using the filename `flexget.log`, and the glob for deletion comes out to `flexget.*`. This strikes me as a bit greedy, and in my particular case it tries to delete a folder called `FlexGet.egg-info` (which is read only and causes a crash.) The two easy improvements I can see are:\r\n- Include the extension in the glob\r\n- Exclude folders", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Delgan/loguru/issues/194", "repository_url": "https://api.github.com/repos/Delgan/loguru", "labels_url": "https://api.github.com/repos/Delgan/loguru/issues/194/labels{/name}", "comments_url": "https://api.github.com/repos/Delgan/loguru/issues/194/comments", "events_url": "https://api.github.com/repos/Delgan/loguru/issues/194/events", "html_url": "https://github.com/Delgan/loguru/issues/194", "id": 542486615, "node_id": "MDU6SXNzdWU1NDI0ODY2MTU=", "number": 194, "title": "Extract log module from frame logic to a different module", "user": {"login": "iddan", "id": 12671072, "node_id": "MDQ6VXNlcjEyNjcxMDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/12671072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iddan", "html_url": "https://github.com/iddan", "followers_url": "https://api.github.com/users/iddan/followers", "following_url": "https://api.github.com/users/iddan/following{/other_user}", "gists_url": "https://api.github.com/users/iddan/gists{/gist_id}", "starred_url": "https://api.github.com/users/iddan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iddan/subscriptions", "organizations_url": "https://api.github.com/users/iddan/orgs", "repos_url": "https://api.github.com/users/iddan/repos", "events_url": "https://api.github.com/users/iddan/events{/privacy}", "received_events_url": "https://api.github.com/users/iddan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1253282818, "node_id": "MDU6TGFiZWwxMjUzMjgyODE4", "url": "https://api.github.com/repos/Delgan/loguru/labels/feature", "name": "feature", "color": "9722f7", "default": false, "description": ""}, {"id": 669363348, "node_id": "MDU6TGFiZWw2NjkzNjMzNDg=", "url": "https://api.github.com/repos/Delgan/loguru/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-12-26T08:52:27Z", "updated_at": "2019-12-30T16:09:26Z", "closed_at": "2019-12-30T16:09:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to use the logic that receives the module from the frame (https://github.com/Delgan/loguru/blob/397b51f00cd56835fadd611175919408065bd950/loguru/_logger.py#L1748) in a project without using the full loguru module.\r\nCan it be extracted? Will you accept a PR that does that?", "performed_via_github_app": null, "score": 1.0}]}