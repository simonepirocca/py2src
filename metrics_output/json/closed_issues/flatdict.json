{"total_count": 22, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/gmr/flatdict/issues/39", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/39/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/39/events", "html_url": "https://github.com/gmr/flatdict/issues/39", "id": 557534591, "node_id": "MDU6SXNzdWU1NTc1MzQ1OTE=", "number": 39, "title": "Any plan to release current master to PyPI?", "user": {"login": "qinix", "id": 1946663, "node_id": "MDQ6VXNlcjE5NDY2NjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1946663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qinix", "html_url": "https://github.com/qinix", "followers_url": "https://api.github.com/users/qinix/followers", "following_url": "https://api.github.com/users/qinix/following{/other_user}", "gists_url": "https://api.github.com/users/qinix/gists{/gist_id}", "starred_url": "https://api.github.com/users/qinix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qinix/subscriptions", "organizations_url": "https://api.github.com/users/qinix/orgs", "repos_url": "https://api.github.com/users/qinix/repos", "events_url": "https://api.github.com/users/qinix/events{/privacy}", "received_events_url": "https://api.github.com/users/qinix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-30T14:35:03Z", "updated_at": "2020-02-13T00:35:59Z", "closed_at": "2020-02-12T16:31:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/36", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/36/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/36/events", "html_url": "https://github.com/gmr/flatdict/issues/36", "id": 542165336, "node_id": "MDU6SXNzdWU1NDIxNjUzMzY=", "number": 36, "title": "FlatDicts don't keep order", "user": {"login": "abmyii", "id": 52673001, "node_id": "MDQ6VXNlcjUyNjczMDAx", "avatar_url": "https://avatars0.githubusercontent.com/u/52673001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abmyii", "html_url": "https://github.com/abmyii", "followers_url": "https://api.github.com/users/abmyii/followers", "following_url": "https://api.github.com/users/abmyii/following{/other_user}", "gists_url": "https://api.github.com/users/abmyii/gists{/gist_id}", "starred_url": "https://api.github.com/users/abmyii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abmyii/subscriptions", "organizations_url": "https://api.github.com/users/abmyii/orgs", "repos_url": "https://api.github.com/users/abmyii/repos", "events_url": "https://api.github.com/users/abmyii/events{/privacy}", "received_events_url": "https://api.github.com/users/abmyii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-24T15:58:21Z", "updated_at": "2019-12-31T21:00:16Z", "closed_at": "2019-12-31T21:00:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When printing a `FlatDict` or calling `.keys()` the keys are sorted. Is there any way for the keys to be kept in original ordered? The `sorted` on line 294 appears to be the culprit:\r\nhttps://github.com/gmr/flatdict/blob/8b056a11526ef7fd13061137194ea9ed2fe09805/flatdict.py#L294", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/35", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/35/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/35/events", "html_url": "https://github.com/gmr/flatdict/issues/35", "id": 484168620, "node_id": "MDU6SXNzdWU0ODQxNjg2MjA=", "number": 35, "title": "Mixed key types cannot be at same level due to no ordering support between 'int' and 'str'", "user": {"login": "nugend", "id": 18049, "node_id": "MDQ6VXNlcjE4MDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/18049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nugend", "html_url": "https://github.com/nugend", "followers_url": "https://api.github.com/users/nugend/followers", "following_url": "https://api.github.com/users/nugend/following{/other_user}", "gists_url": "https://api.github.com/users/nugend/gists{/gist_id}", "starred_url": "https://api.github.com/users/nugend/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nugend/subscriptions", "organizations_url": "https://api.github.com/users/nugend/orgs", "repos_url": "https://api.github.com/users/nugend/repos", "events_url": "https://api.github.com/users/nugend/events{/privacy}", "received_events_url": "https://api.github.com/users/nugend/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-08-22T19:23:11Z", "updated_at": "2019-12-31T21:00:16Z", "closed_at": "2019-12-31T21:00:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a dictionary that has a level with mixed numeric and string values (it is imported through TOML where this is not an issue). This is causing an exception to be thrown here:\r\n\r\nhttps://github.com/gmr/flatdict/blob/8b056a11526ef7fd13061137194ea9ed2fe09805/flatdict.py#L292-L300\r\n\r\nIf a key function along the lines of the following were passed to the sorted function, I think the issue could be resolved:\r\n\r\n`lambda x:(float('inf'),x) if isinstance(x,str) else (x,'')`\r\n\r\nI'm not sure how to handle this for Python < 3.2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/34", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/34/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/34/events", "html_url": "https://github.com/gmr/flatdict/issues/34", "id": 476145394, "node_id": "MDU6SXNzdWU0NzYxNDUzOTQ=", "number": 34, "title": "Code example in the documentation does not work as expected", "user": {"login": "antimirov", "id": 68257, "node_id": "MDQ6VXNlcjY4MjU3", "avatar_url": "https://avatars3.githubusercontent.com/u/68257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antimirov", "html_url": "https://github.com/antimirov", "followers_url": "https://api.github.com/users/antimirov/followers", "following_url": "https://api.github.com/users/antimirov/following{/other_user}", "gists_url": "https://api.github.com/users/antimirov/gists{/gist_id}", "starred_url": "https://api.github.com/users/antimirov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antimirov/subscriptions", "organizations_url": "https://api.github.com/users/antimirov/orgs", "repos_url": "https://api.github.com/users/antimirov/repos", "events_url": "https://api.github.com/users/antimirov/events{/privacy}", "received_events_url": "https://api.github.com/users/antimirov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-02T12:02:07Z", "updated_at": "2019-08-21T13:35:02Z", "closed_at": "2019-08-21T13:35:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "The example from the documentation on https://flatdict.readthedocs.io/en/stable/ does not work for me.\r\n\r\nSetup:\r\n\r\n```\r\n(testenv) $ python\r\nPython 3.7.4 (default, Jul 11 2019, 01:08:00)\r\n[Clang 10.0.1 (clang-1001.0.46.4)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import flatdict\r\n```\r\n\r\nThis one works:\r\n\r\n> For example:\r\n> \r\n> foo = {'foo': {'bar': 'baz', 'qux': 'corge'}}\r\n> is represented as:\r\n> \r\n> {'foo:bar': 'baz',\r\n>  'foo:qux': 'corge'}\r\n\r\n```\r\n>>> foo = {'foo': {'bar': 'baz', 'qux': 'corge'}}\r\n>>> flatdict.FlatDict(foo)\r\n<FlatDict id=4354298064 {'foo:bar': 'baz', 'foo:qux': 'corge'}>\"\r\n```\r\n\r\nBut his one does not work:\r\n\r\n> Additionally, lists and tuples are also converted into dicts using enumerate().\r\n> \r\n> For example:\r\n> \r\n> d = {'list': ['a', 'b', 'c',]}\r\n> Will be flattened as follows:\r\n> \r\n> flat = {'list:0': 'a', 'list:1': 'b', 'list:2': 'c'}\r\n\r\n```\r\n>>> d = {'list': ['a', 'b', 'c',]}\r\n>>> flatdict.FlatDict(d)\r\n<FlatDict id=4354748368 {'list': ['a', 'b', 'c']}>\"```\r\n\r\nAm I correct to assume that flattening does not work for the lists on the first level? Or does the example assume using of FlatterDict here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/31", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/31/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/31/events", "html_url": "https://github.com/gmr/flatdict/issues/31", "id": 468758767, "node_id": "MDU6SXNzdWU0Njg3NTg3Njc=", "number": 31, "title": "Behaviour of flatdict.setdefault is incorrect", "user": {"login": "abmyii", "id": 52673001, "node_id": "MDQ6VXNlcjUyNjczMDAx", "avatar_url": "https://avatars0.githubusercontent.com/u/52673001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abmyii", "html_url": "https://github.com/abmyii", "followers_url": "https://api.github.com/users/abmyii/followers", "following_url": "https://api.github.com/users/abmyii/following{/other_user}", "gists_url": "https://api.github.com/users/abmyii/gists{/gist_id}", "starred_url": "https://api.github.com/users/abmyii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abmyii/subscriptions", "organizations_url": "https://api.github.com/users/abmyii/orgs", "repos_url": "https://api.github.com/users/abmyii/repos", "events_url": "https://api.github.com/users/abmyii/events{/privacy}", "received_events_url": "https://api.github.com/users/abmyii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-16T16:45:36Z", "updated_at": "2019-07-17T06:54:34Z", "closed_at": "2019-07-17T06:54:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With standard dicts, setdefault doesn't modify an existing key which is False/None (satisfies the condition of `not x`), whereas a flatdict will:\r\n```\r\nimport flatdict\r\nexample = {'test': False}\r\nexample.setdefault('test', None)\r\nprint(example) # 'test' will still be False\r\n\r\nexample = flatdict.FlatDict(example)\r\nexample.setdefault('test', None)\r\nprint(example) # 'test' will now be None\r\n```\r\nThe culprit line is https://github.com/gmr/flatdict/blob/88c043438a174eb82aa7d688fe5af04bc647a72a/flatdict.py#L318 (specifically the `or not self.__getitem__(key)` part).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/26", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/26/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/26/events", "html_url": "https://github.com/gmr/flatdict/issues/26", "id": 453924803, "node_id": "MDU6SXNzdWU0NTM5MjQ4MDM=", "number": 26, "title": "List Flattening does not return list when an odd number of depth in the dictionary.", "user": {"login": "mileslucas", "id": 14099459, "node_id": "MDQ6VXNlcjE0MDk5NDU5", "avatar_url": "https://avatars0.githubusercontent.com/u/14099459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mileslucas", "html_url": "https://github.com/mileslucas", "followers_url": "https://api.github.com/users/mileslucas/followers", "following_url": "https://api.github.com/users/mileslucas/following{/other_user}", "gists_url": "https://api.github.com/users/mileslucas/gists{/gist_id}", "starred_url": "https://api.github.com/users/mileslucas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mileslucas/subscriptions", "organizations_url": "https://api.github.com/users/mileslucas/orgs", "repos_url": "https://api.github.com/users/mileslucas/repos", "events_url": "https://api.github.com/users/mileslucas/events{/privacy}", "received_events_url": "https://api.github.com/users/mileslucas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-09T18:25:37Z", "updated_at": "2019-06-10T14:52:01Z", "closed_at": "2019-06-10T14:52:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I noticed a bug with `FlatterDict` today and am curious about how to try and tackle it. The problem is that if I have an iterable, if its depth is an odd number in the dictionary, the `as_dict()` method won't return it properly. For example:\r\n\r\n```python\r\nvalues = {\r\n    'foo': {\r\n            'list': ['F', 'O', 'O'],\r\n            'set': {10, 20, 30},\r\n            'tuple': tuple(['F', 0, 0])\r\n        }\r\n}\r\n```\r\nworks fine, but\r\n\r\n```python\r\nvalues = {\r\n    'foo': {\r\n            'bar': {\r\n                    'list': ['F', 'O', 'O'],\r\n            },\r\n            'set': {10, 20, 30},\r\n            'tuple': tuple(['F', 0, 0])\r\n        }\r\n}\r\n```\r\nwill not return `list` as a list. I've made a fork and added an instance like this to the tests. Looking through the code this seems to occur because in `as_dict()` the parent key and child key are *always* retrieved as a pair, even though in an odd-depth the parent key's original type might be an iterable.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/25", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/25/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/25/events", "html_url": "https://github.com/gmr/flatdict/issues/25", "id": 449597273, "node_id": "MDU6SXNzdWU0NDk1OTcyNzM=", "number": 25, "title": "OrderedFlatDict", "user": {"login": "mileslucas", "id": 14099459, "node_id": "MDQ6VXNlcjE0MDk5NDU5", "avatar_url": "https://avatars0.githubusercontent.com/u/14099459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mileslucas", "html_url": "https://github.com/mileslucas", "followers_url": "https://api.github.com/users/mileslucas/followers", "following_url": "https://api.github.com/users/mileslucas/following{/other_user}", "gists_url": "https://api.github.com/users/mileslucas/gists{/gist_id}", "starred_url": "https://api.github.com/users/mileslucas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mileslucas/subscriptions", "organizations_url": "https://api.github.com/users/mileslucas/orgs", "repos_url": "https://api.github.com/users/mileslucas/repos", "events_url": "https://api.github.com/users/mileslucas/events{/privacy}", "received_events_url": "https://api.github.com/users/mileslucas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-29T04:53:07Z", "updated_at": "2019-06-09T18:19:09Z", "closed_at": "2019-06-09T18:19:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, I am really interested in using FlatDict in one of my projects, but I need to make sure the ordering of the hashes is consistent so I can use it as a way of keeping track of parameters in a model. How hard would it be to create an OrderedFlatDict?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/23", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/23/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/23/events", "html_url": "https://github.com/gmr/flatdict/issues/23", "id": 353841949, "node_id": "MDU6SXNzdWUzNTM4NDE5NDk=", "number": 23, "title": "all values are transed to str?", "user": {"login": "KeithTt", "id": 15189954, "node_id": "MDQ6VXNlcjE1MTg5OTU0", "avatar_url": "https://avatars0.githubusercontent.com/u/15189954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KeithTt", "html_url": "https://github.com/KeithTt", "followers_url": "https://api.github.com/users/KeithTt/followers", "following_url": "https://api.github.com/users/KeithTt/following{/other_user}", "gists_url": "https://api.github.com/users/KeithTt/gists{/gist_id}", "starred_url": "https://api.github.com/users/KeithTt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KeithTt/subscriptions", "organizations_url": "https://api.github.com/users/KeithTt/orgs", "repos_url": "https://api.github.com/users/KeithTt/repos", "events_url": "https://api.github.com/users/KeithTt/events{/privacy}", "received_events_url": "https://api.github.com/users/KeithTt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-24T16:04:07Z", "updated_at": "2018-10-30T17:45:30Z", "closed_at": "2018-10-30T17:45:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "In my source dict, values are numbers, how to remain the value type?\r\n\r\n```\r\nsource = {\r\n    'a':{\r\n        'b':1,\r\n        'c':2\r\n        },\r\n    'd':{\r\n        'e':3,\r\n        'f':{\r\n            'g':4\r\n            }\r\n        }\r\n}\r\n\r\ntarget = flatdict.FlatDict(source, delimiter='.')\r\nprint(target)\r\n# {'a.b': '1', 'a.c': '2', 'd.e': '3', 'd.f.g': '4'}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/21", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/21/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/21/events", "html_url": "https://github.com/gmr/flatdict/issues/21", "id": 320910575, "node_id": "MDU6SXNzdWUzMjA5MTA1NzU=", "number": 21, "title": "Error when setting and item where a dictionary is nested in a list", "user": {"login": "ophiry", "id": 5228696, "node_id": "MDQ6VXNlcjUyMjg2OTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/5228696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ophiry", "html_url": "https://github.com/ophiry", "followers_url": "https://api.github.com/users/ophiry/followers", "following_url": "https://api.github.com/users/ophiry/following{/other_user}", "gists_url": "https://api.github.com/users/ophiry/gists{/gist_id}", "starred_url": "https://api.github.com/users/ophiry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ophiry/subscriptions", "organizations_url": "https://api.github.com/users/ophiry/orgs", "repos_url": "https://api.github.com/users/ophiry/repos", "events_url": "https://api.github.com/users/ophiry/events{/privacy}", "received_events_url": "https://api.github.com/users/ophiry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 11350558, "node_id": "MDU6TGFiZWwxMTM1MDU1OA==", "url": "https://api.github.com/repos/gmr/flatdict/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 809314961, "node_id": "MDU6TGFiZWw4MDkzMTQ5NjE=", "url": "https://api.github.com/repos/gmr/flatdict/labels/help%20wanted", "name": "help wanted", "color": "f7ef56", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-07T18:39:24Z", "updated_at": "2019-07-18T11:30:09Z", "closed_at": "2019-07-18T11:30:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "here: https://github.com/gmr/flatdict/blob/3.0.0/flatdict.py#L402 it assumes that if a nested object is an array, the tail of the path needs to be an int. but if the path includes other path elements after the list index, it will fail\r\n\r\nexample:\r\n```\r\nd = FlatterDict({'a':[{'b':1}]})\r\nd['a:0:b'] # this works\r\nd['a:0:b'] = 4 # this fails\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/20", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/20/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/20/events", "html_url": "https://github.com/gmr/flatdict/issues/20", "id": 313709934, "node_id": "MDU6SXNzdWUzMTM3MDk5MzQ=", "number": 20, "title": "get list of all delimited keys", "user": {"login": "TZanke", "id": 1613368, "node_id": "MDQ6VXNlcjE2MTMzNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1613368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TZanke", "html_url": "https://github.com/TZanke", "followers_url": "https://api.github.com/users/TZanke/followers", "following_url": "https://api.github.com/users/TZanke/following{/other_user}", "gists_url": "https://api.github.com/users/TZanke/gists{/gist_id}", "starred_url": "https://api.github.com/users/TZanke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TZanke/subscriptions", "organizations_url": "https://api.github.com/users/TZanke/orgs", "repos_url": "https://api.github.com/users/TZanke/repos", "events_url": "https://api.github.com/users/TZanke/events{/privacy}", "received_events_url": "https://api.github.com/users/TZanke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-12T12:41:48Z", "updated_at": "2018-05-03T11:21:31Z", "closed_at": "2018-05-02T15:11:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to get a flat list of all keys or a dict like this? (Found in the documentation)\r\n`flat = {'list:0': 'a', 'list:1': 'b', 'list:2': 'c'}`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/19", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/19/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/19/events", "html_url": "https://github.com/gmr/flatdict/issues/19", "id": 310227734, "node_id": "MDU6SXNzdWUzMTAyMjc3MzQ=", "number": 19, "title": "dict(FlatDict) fails when it contains complex unicode keys", "user": {"login": "iliapolo", "id": 1428812, "node_id": "MDQ6VXNlcjE0Mjg4MTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1428812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iliapolo", "html_url": "https://github.com/iliapolo", "followers_url": "https://api.github.com/users/iliapolo/followers", "following_url": "https://api.github.com/users/iliapolo/following{/other_user}", "gists_url": "https://api.github.com/users/iliapolo/gists{/gist_id}", "starred_url": "https://api.github.com/users/iliapolo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iliapolo/subscriptions", "organizations_url": "https://api.github.com/users/iliapolo/orgs", "repos_url": "https://api.github.com/users/iliapolo/repos", "events_url": "https://api.github.com/users/iliapolo/events{/privacy}", "received_events_url": "https://api.github.com/users/iliapolo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-31T09:39:40Z", "updated_at": "2018-07-11T14:33:21Z", "closed_at": "2018-07-11T14:33:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "There seem to be various issues when I put a complex unicode key inside the flatdict. \r\n\r\nFor example:\r\n\r\n```python\r\nimport flatcdict\r\nd = flatdict.Flatdict()\r\nd[u'key1:key2'] = 'value1'\r\ndict(d)\r\n\r\nKeyError: u'key1'\r\n```\r\n\r\nThe same thing works if the key is a string object\r\n```python\r\nimport flatcdict\r\nd = flatdict.Flatdict()\r\nd['key1:key2'] = 'value1'\r\ndict(d)\r\n\r\n{'key1:key2': 'value1'}\r\n```\r\nI tracked the issue to [this line](https://github.com/gmr/flatdict/blob/master/flatdict.py#L364) where you force the key to be an 'str' object for it to have a delimiter. \r\n\r\nAny special reason for that?\r\n\r\n```python\r\ndef _has_delimiter(self, key):\r\n    \"\"\"Checks to see if the key contains the delimiter.\r\n\r\n    :rtype: bool\r\n\r\n    \"\"\"\r\n    return isinstance(key, str) and self._delimiter in key\r\n```\r\n\r\nIts a problem for me because I populate the flatdict with objects returned by the ```json.loads``` function, which uses **unicode** for keys.\r\n\r\n**Environment**\r\n\r\nPython 2.7.14 on macOS HighSierra 10.13.3\r\n\r\nI'll be happy to contribute and fix this issue once we discuss it. \r\n\r\nThanks \ud83d\udc4d ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/17", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/17/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/17/events", "html_url": "https://github.com/gmr/flatdict/issues/17", "id": 303217516, "node_id": "MDU6SXNzdWUzMDMyMTc1MTY=", "number": 17, "title": "Version 3 breaks Pandas!", "user": {"login": "jgostick", "id": 5092049, "node_id": "MDQ6VXNlcjUwOTIwNDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/5092049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgostick", "html_url": "https://github.com/jgostick", "followers_url": "https://api.github.com/users/jgostick/followers", "following_url": "https://api.github.com/users/jgostick/following{/other_user}", "gists_url": "https://api.github.com/users/jgostick/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgostick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgostick/subscriptions", "organizations_url": "https://api.github.com/users/jgostick/orgs", "repos_url": "https://api.github.com/users/jgostick/repos", "events_url": "https://api.github.com/users/jgostick/events{/privacy}", "received_events_url": "https://api.github.com/users/jgostick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-03-07T18:52:55Z", "updated_at": "2018-03-08T02:40:01Z", "closed_at": "2018-03-08T02:40:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not sure if this is Pandas problem or yours, but passing a FlatDict object to the Pandas DataFrame constructor started breaking my Travis builds last night (took me hours to figure out that you updated the version last night :-(  )\r\n\r\nAnyway, here is a simple example:\r\n``` python\r\n>>> import flatdict as fd\r\n>>> import pandas as pd\r\n>>> a = {'top': {'middle': {'data1': 1, 'bottom': {'data2': 3}}}}\r\n>>> b = fd.FlatDict(a)\r\n>>> df = pd.DataFrame(b)\r\nValueError: DataFrame constructor not properly called!\r\n```\r\n\r\nAlso, regarding the change to ``as_dict``, this means that I can't pass Pandas a normal dict with the flat keys since it's no longer available.  Maybe this should be an argument to the ``as_dict`` method?  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/16", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/16/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/16/events", "html_url": "https://github.com/gmr/flatdict/issues/16", "id": 294067644, "node_id": "MDU6SXNzdWUyOTQwNjc2NDQ=", "number": 16, "title": "as_dict() not correctly re-assembling standard dictionary items", "user": {"login": "danieljimeneznz", "id": 13009825, "node_id": "MDQ6VXNlcjEzMDA5ODI1", "avatar_url": "https://avatars1.githubusercontent.com/u/13009825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieljimeneznz", "html_url": "https://github.com/danieljimeneznz", "followers_url": "https://api.github.com/users/danieljimeneznz/followers", "following_url": "https://api.github.com/users/danieljimeneznz/following{/other_user}", "gists_url": "https://api.github.com/users/danieljimeneznz/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieljimeneznz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieljimeneznz/subscriptions", "organizations_url": "https://api.github.com/users/danieljimeneznz/orgs", "repos_url": "https://api.github.com/users/danieljimeneznz/repos", "events_url": "https://api.github.com/users/danieljimeneznz/events{/privacy}", "received_events_url": "https://api.github.com/users/danieljimeneznz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 11350556, "node_id": "MDU6TGFiZWwxMTM1MDU1Ng==", "url": "https://api.github.com/repos/gmr/flatdict/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/gmr/flatdict/milestones/1", "html_url": "https://github.com/gmr/flatdict/milestone/1", "labels_url": "https://api.github.com/repos/gmr/flatdict/milestones/1/labels", "id": 3167467, "node_id": "MDk6TWlsZXN0b25lMzE2NzQ2Nw==", "number": 1, "title": "3.0", "description": null, "creator": {"login": "gmr", "id": 49469, "node_id": "MDQ6VXNlcjQ5NDY5", "avatar_url": "https://avatars2.githubusercontent.com/u/49469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gmr", "html_url": "https://github.com/gmr", "followers_url": "https://api.github.com/users/gmr/followers", "following_url": "https://api.github.com/users/gmr/following{/other_user}", "gists_url": "https://api.github.com/users/gmr/gists{/gist_id}", "starred_url": "https://api.github.com/users/gmr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gmr/subscriptions", "organizations_url": "https://api.github.com/users/gmr/orgs", "repos_url": "https://api.github.com/users/gmr/repos", "events_url": "https://api.github.com/users/gmr/events{/privacy}", "received_events_url": "https://api.github.com/users/gmr/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 2, "state": "open", "created_at": "2018-03-07T00:00:07Z", "updated_at": "2018-03-07T01:39:32Z", "due_on": null, "closed_at": null}, "comments": 9, "created_at": "2018-02-03T01:01:25Z", "updated_at": "2018-03-07T01:38:58Z", "closed_at": "2018-03-07T01:38:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nThe as_dict() method does not appear to be working correctly since the changes from v1.2.0 to v2.0.0.\r\n\r\nThe method correctly handles lists, tuples and sets but does not re-assemble the dictionary for the other types. Please see attached image as proof:\r\n![screen shot 2018-02-03 at 1 55 53 pm](https://user-images.githubusercontent.com/13009825/35761176-9cc33e7a-08ea-11e8-8699-c67cb483bd3f.png)\r\n\r\nAlso please note that the test_as_dict() test is not correct as this should read:\r\n`self.assertDictEqual(self.value.as_dict(), self.VALUES)` \r\n\r\ninstead of:\r\n`self.assertDictEqual(self.value.as_dict(), self.EXPECT)`\r\n\r\nCheers.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/15", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/15/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/15/events", "html_url": "https://github.com/gmr/flatdict/issues/15", "id": 292600270, "node_id": "MDU6SXNzdWUyOTI2MDAyNzA=", "number": 15, "title": "Cast as dict will return an empty dict", "user": {"login": "gabisurita", "id": 4023375, "node_id": "MDQ6VXNlcjQwMjMzNzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4023375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabisurita", "html_url": "https://github.com/gabisurita", "followers_url": "https://api.github.com/users/gabisurita/followers", "following_url": "https://api.github.com/users/gabisurita/following{/other_user}", "gists_url": "https://api.github.com/users/gabisurita/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabisurita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabisurita/subscriptions", "organizations_url": "https://api.github.com/users/gabisurita/orgs", "repos_url": "https://api.github.com/users/gabisurita/repos", "events_url": "https://api.github.com/users/gabisurita/events{/privacy}", "received_events_url": "https://api.github.com/users/gabisurita/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 11350558, "node_id": "MDU6TGFiZWwxMTM1MDU1OA==", "url": "https://api.github.com/repos/gmr/flatdict/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/gmr/flatdict/milestones/1", "html_url": "https://github.com/gmr/flatdict/milestone/1", "labels_url": "https://api.github.com/repos/gmr/flatdict/milestones/1/labels", "id": 3167467, "node_id": "MDk6TWlsZXN0b25lMzE2NzQ2Nw==", "number": 1, "title": "3.0", "description": null, "creator": {"login": "gmr", "id": 49469, "node_id": "MDQ6VXNlcjQ5NDY5", "avatar_url": "https://avatars2.githubusercontent.com/u/49469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gmr", "html_url": "https://github.com/gmr", "followers_url": "https://api.github.com/users/gmr/followers", "following_url": "https://api.github.com/users/gmr/following{/other_user}", "gists_url": "https://api.github.com/users/gmr/gists{/gist_id}", "starred_url": "https://api.github.com/users/gmr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gmr/subscriptions", "organizations_url": "https://api.github.com/users/gmr/orgs", "repos_url": "https://api.github.com/users/gmr/repos", "events_url": "https://api.github.com/users/gmr/events{/privacy}", "received_events_url": "https://api.github.com/users/gmr/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 2, "state": "open", "created_at": "2018-03-07T00:00:07Z", "updated_at": "2018-03-07T01:39:32Z", "due_on": null, "closed_at": null}, "comments": 3, "created_at": "2018-01-29T23:33:41Z", "updated_at": "2018-03-07T01:39:32Z", "closed_at": "2018-03-07T01:39:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Casting as such will fail.\r\n```py\r\n>>> d = flatdict.FlatterDict({'a': {'b': ['c', 'd']}})\r\n>>> dict(d)\r\n{}\r\n>>> {**d}  # Py3 Only\r\n{}\r\n```\r\n\r\nThe same happens if you try to use it as keyword arguments.\r\n\r\n```py\r\n>>> def foo(**a):\r\n...:     print(a)\r\n\r\n>>> foo(d)\r\n{}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/11", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/11/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/11/events", "html_url": "https://github.com/gmr/flatdict/issues/11", "id": 223642899, "node_id": "MDU6SXNzdWUyMjM2NDI4OTk=", "number": 11, "title": "Best lists management", "user": {"login": "lgasnier", "id": 25739150, "node_id": "MDQ6VXNlcjI1NzM5MTUw", "avatar_url": "https://avatars1.githubusercontent.com/u/25739150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lgasnier", "html_url": "https://github.com/lgasnier", "followers_url": "https://api.github.com/users/lgasnier/followers", "following_url": "https://api.github.com/users/lgasnier/following{/other_user}", "gists_url": "https://api.github.com/users/lgasnier/gists{/gist_id}", "starred_url": "https://api.github.com/users/lgasnier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lgasnier/subscriptions", "organizations_url": "https://api.github.com/users/lgasnier/orgs", "repos_url": "https://api.github.com/users/lgasnier/repos", "events_url": "https://api.github.com/users/lgasnier/events{/privacy}", "received_events_url": "https://api.github.com/users/lgasnier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-23T15:19:50Z", "updated_at": "2018-01-18T22:53:44Z", "closed_at": "2018-01-18T22:53:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "1. List order is not kept when list is flattened and then returned as a dictionary with *as_dict()* if the length of the list is more than 10.\r\nFor example:\r\n  ```\r\n  In [1]: values = {'foo': list(range(11))}\r\n  In [2]: flatdict.FlatDict(values).as_dict()\r\n  Out [2]: {'foo': [0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9]}\r\n  ```\r\n2. A list of tuples (or lists) is not restored by *as_dict()*.\r\nFor example:\r\n  ```\r\n  In [1]: values = {'foo': [(1, 2, 3), (10, 20, 30)]}\r\n  In [2]: flatdict.FlatDict(values).as_dict()\r\n  Out [2]: {'foo': [1, 2, 3, 10, 20, 30]}\r\n  ```\r\nThe diff attach file  [diff-flatdict.txt](https://github.com/gmr/flatdict/files/949787/diff-flatdict.txt) proposes code changes for these issues and an enhancement to control if lists and tuples are flattened (parameter *dict_only=False*, default value) or not (*dict_only=True*). For example:\r\n  ```\r\n  In [1]: values = {'foo': [(1, 2, 3), (10, 20, 30)],\r\n                    'bar': {'baz': 4, 'qux': 5}}\r\n  In [2]: flatdict_new.FlatDict(values, dict_only=True)\r\n  Out [2]: {'bar:baz': 4, 'foo': [(1, 2, 3), (10, 20, 30)], 'bar:qux': 5}\r\n  ```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/9", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/9/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/9/events", "html_url": "https://github.com/gmr/flatdict/issues/9", "id": 169660656, "node_id": "MDU6SXNzdWUxNjk2NjA2NTY=", "number": 9, "title": "Calling get on a sub-dictionary always returns None", "user": {"login": "ksindi", "id": 2092714, "node_id": "MDQ6VXNlcjIwOTI3MTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2092714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ksindi", "html_url": "https://github.com/ksindi", "followers_url": "https://api.github.com/users/ksindi/followers", "following_url": "https://api.github.com/users/ksindi/following{/other_user}", "gists_url": "https://api.github.com/users/ksindi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ksindi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ksindi/subscriptions", "organizations_url": "https://api.github.com/users/ksindi/orgs", "repos_url": "https://api.github.com/users/ksindi/repos", "events_url": "https://api.github.com/users/ksindi/events{/privacy}", "received_events_url": "https://api.github.com/users/ksindi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-08-05T17:49:10Z", "updated_at": "2017-05-17T19:21:25Z", "closed_at": "2017-05-17T19:21:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is this expected behavior?\n\n```\n>>> import flatdict\n>>> D = {'a': {'b': {'c': 0}}}\n>>> F = flatdict.FlatDict(D)\n>>> F['a:b:c']\n0\n>>> F.get('a:b:c')\n0\n>>> F['a:b']\n{'c': 0}\n>>> F.get('a:b')\nNone\n```\n\nI would have expected `F.get('a:b')` to also return `{'c': 0}`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/8", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/8/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/8/events", "html_url": "https://github.com/gmr/flatdict/issues/8", "id": 161986256, "node_id": "MDU6SXNzdWUxNjE5ODYyNTY=", "number": 8, "title": "KeyError when delimiter is in a key", "user": {"login": "yofreke", "id": 536581, "node_id": "MDQ6VXNlcjUzNjU4MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/536581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yofreke", "html_url": "https://github.com/yofreke", "followers_url": "https://api.github.com/users/yofreke/followers", "following_url": "https://api.github.com/users/yofreke/following{/other_user}", "gists_url": "https://api.github.com/users/yofreke/gists{/gist_id}", "starred_url": "https://api.github.com/users/yofreke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yofreke/subscriptions", "organizations_url": "https://api.github.com/users/yofreke/orgs", "repos_url": "https://api.github.com/users/yofreke/repos", "events_url": "https://api.github.com/users/yofreke/events{/privacy}", "received_events_url": "https://api.github.com/users/yofreke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-06-23T18:06:12Z", "updated_at": "2018-01-18T23:03:57Z", "closed_at": "2018-01-18T23:03:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "``` python\nx = {'as_df':{'qw':123}}\ny = flatdict.FlatDict(x)\ny.set_delimiter('_')\n{k:v for k,v in y.iteritems()}\n```\n\noutput\n\n```\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\n<ipython-input-14-d77df634c8fa> in <module>()\n----> 1 {k:v for k,v in y.iteritems()}\n\n<ipython-input-14-d77df634c8fa> in <dictcomp>(***failed resolving arguments***)\n----> 1 {k:v for k,v in y.iteritems()}\n\n/Users/Brown/env/lib/python2.7/site-packages/flatdict.pyc in iteritems(self)\n    183\n    184         \"\"\"\n--> 185         for item in self.items():\n    186             yield item\n    187\n\n/Users/Brown/env/lib/python2.7/site-packages/flatdict.pyc in items(self)\n    168         items = list()\n    169         for key in self.keys():\n--> 170             items.append((key, self.__getitem__(key)))\n    171         return items\n    172\n\n/Users/Brown/env/lib/python2.7/site-packages/flatdict.pyc in __getitem__(self, key)\n     51             return self._values[parent][child]\n     52         else:\n---> 53             raise KeyError(key)\n     54\n     55     def __iter__(self):\n\nKeyError: 'as_df_qw'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/7", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/7/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/7/events", "html_url": "https://github.com/gmr/flatdict/issues/7", "id": 138452666, "node_id": "MDU6SXNzdWUxMzg0NTI2NjY=", "number": 7, "title": "Check for list", "user": {"login": "glenncoppens", "id": 2539651, "node_id": "MDQ6VXNlcjI1Mzk2NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2539651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glenncoppens", "html_url": "https://github.com/glenncoppens", "followers_url": "https://api.github.com/users/glenncoppens/followers", "following_url": "https://api.github.com/users/glenncoppens/following{/other_user}", "gists_url": "https://api.github.com/users/glenncoppens/gists{/gist_id}", "starred_url": "https://api.github.com/users/glenncoppens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glenncoppens/subscriptions", "organizations_url": "https://api.github.com/users/glenncoppens/orgs", "repos_url": "https://api.github.com/users/glenncoppens/repos", "events_url": "https://api.github.com/users/glenncoppens/events{/privacy}", "received_events_url": "https://api.github.com/users/glenncoppens/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-03-04T11:35:50Z", "updated_at": "2018-01-18T23:04:52Z", "closed_at": "2018-01-18T23:04:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\n\nI have this use case where I know a certain key to check against, but I don't know yet if the value for that key is going to be a list or not (a simple string, int,...). \n\nSo I was thinking if there could be an easy way to check whether a key will be a list, so I can get all the items in the list by iterating over the key and appending \":0\", ..., \":n\"\n\nTnx :)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/6", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/6/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/6/events", "html_url": "https://github.com/gmr/flatdict/issues/6", "id": 124822293, "node_id": "MDU6SXNzdWUxMjQ4MjIyOTM=", "number": 6, "title": "casting FlatDict to dict results in empty dict", "user": {"login": "lebedov", "id": 218546, "node_id": "MDQ6VXNlcjIxODU0Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/218546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lebedov", "html_url": "https://github.com/lebedov", "followers_url": "https://api.github.com/users/lebedov/followers", "following_url": "https://api.github.com/users/lebedov/following{/other_user}", "gists_url": "https://api.github.com/users/lebedov/gists{/gist_id}", "starred_url": "https://api.github.com/users/lebedov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lebedov/subscriptions", "organizations_url": "https://api.github.com/users/lebedov/orgs", "repos_url": "https://api.github.com/users/lebedov/repos", "events_url": "https://api.github.com/users/lebedov/events{/privacy}", "received_events_url": "https://api.github.com/users/lebedov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-01-04T19:30:43Z", "updated_at": "2018-01-18T23:02:57Z", "closed_at": "2018-01-18T23:02:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "While investigating how to save the flattened dictionary computed by FlatDict, I noticed that the result of casting a FlatDict to a dict is always empty. Not sure if this is was by design, but wouldn't it be more appropriate for a dict cast of a FlatDict to return what `dict(f.iteritems())` returns below?\n\n```\n>>> import flatdict\n>>> a = {'a': 1, 'b': {'x': 2, 'y': 3}}\n>>> f = flatdict.FlatDict(a)\n>>> print dict(f)\n{}\n>>> print dict(f.iteritems())\n{'a': 1, 'b:x': 2, 'b:y': 3}\n```\n\nRelatedly, it would be nice to add a `FlatDict.as_flat_dict()` method that would return the flattened dict (rather than the original unflattened dict).\n\nI'm using flatdict 1.2.0 with Python 2.7.11 on Ubuntu 14.04.3.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/5", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/5/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/5/events", "html_url": "https://github.com/gmr/flatdict/issues/5", "id": 122169952, "node_id": "MDU6SXNzdWUxMjIxNjk5NTI=", "number": 5, "title": "Complex Dict Support", "user": {"login": "DaveL17", "id": 8534504, "node_id": "MDQ6VXNlcjg1MzQ1MDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/8534504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DaveL17", "html_url": "https://github.com/DaveL17", "followers_url": "https://api.github.com/users/DaveL17/followers", "following_url": "https://api.github.com/users/DaveL17/following{/other_user}", "gists_url": "https://api.github.com/users/DaveL17/gists{/gist_id}", "starred_url": "https://api.github.com/users/DaveL17/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DaveL17/subscriptions", "organizations_url": "https://api.github.com/users/DaveL17/orgs", "repos_url": "https://api.github.com/users/DaveL17/repos", "events_url": "https://api.github.com/users/DaveL17/events{/privacy}", "received_events_url": "https://api.github.com/users/DaveL17/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-15T01:17:38Z", "updated_at": "2018-01-18T22:54:17Z", "closed_at": "2018-01-18T22:54:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Great module.  Ran across this error when trying to flatten a JSON return from Weather Underground:\n\n```\nhttp://api.wunderground.com/api/API_KEY/conditions/q/CA/San_Francisco.json\n\nTraceback (most recent call last):\n  File \"plugin.py\", line 208, in getJSON\n  File \"/Library/..../flatdict.py\", line 28, in __init__\n  File \"/Library/..../flatdict.py\", line 74, in __setitem__\n  File \"/Library/..../flatdict.py\", line 28, in __init__\n  File \"/Library/..../flatdict.py\", line 74, in __setitem__\n  File \"/Library/..../flatdict.py\", line 28, in __init__\n  File \"/Library/..../flatdict.py\", line 83, in __setitem__\n<type 'exceptions.TypeError'>: Top level node is not a FlatDict: country\n```\n\nNot sure whether this might be related to #2 or #3.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/3", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/3/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/3/events", "html_url": "https://github.com/gmr/flatdict/issues/3", "id": 91127156, "node_id": "MDU6SXNzdWU5MTEyNzE1Ng==", "number": 3, "title": "Support nested lists and tuples", "user": {"login": "alex-hutton", "id": 128956, "node_id": "MDQ6VXNlcjEyODk1Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/128956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex-hutton", "html_url": "https://github.com/alex-hutton", "followers_url": "https://api.github.com/users/alex-hutton/followers", "following_url": "https://api.github.com/users/alex-hutton/following{/other_user}", "gists_url": "https://api.github.com/users/alex-hutton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex-hutton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex-hutton/subscriptions", "organizations_url": "https://api.github.com/users/alex-hutton/orgs", "repos_url": "https://api.github.com/users/alex-hutton/repos", "events_url": "https://api.github.com/users/alex-hutton/events{/privacy}", "received_events_url": "https://api.github.com/users/alex-hutton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-06-26T02:05:03Z", "updated_at": "2015-06-26T02:26:29Z", "closed_at": "2015-06-26T02:26:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "When flattening a large dict structure that contains lists or tuples which themselves contain dicts, the flattening currently ceases when it gets to a list. But it is useful to convert lists/tuples into dicts using enumerate(), then we can flatten larger and more complex structures.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gmr/flatdict/issues/2", "repository_url": "https://api.github.com/repos/gmr/flatdict", "labels_url": "https://api.github.com/repos/gmr/flatdict/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/gmr/flatdict/issues/2/comments", "events_url": "https://api.github.com/repos/gmr/flatdict/issues/2/events", "html_url": "https://github.com/gmr/flatdict/issues/2", "id": 53177177, "node_id": "MDU6SXNzdWU1MzE3NzE3Nw==", "number": 2, "title": "Flatdict() doesn\u2019t support deeply nested dictionaries", "user": {"login": "bfontaine", "id": 1334295, "node_id": "MDQ6VXNlcjEzMzQyOTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1334295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bfontaine", "html_url": "https://github.com/bfontaine", "followers_url": "https://api.github.com/users/bfontaine/followers", "following_url": "https://api.github.com/users/bfontaine/following{/other_user}", "gists_url": "https://api.github.com/users/bfontaine/gists{/gist_id}", "starred_url": "https://api.github.com/users/bfontaine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bfontaine/subscriptions", "organizations_url": "https://api.github.com/users/bfontaine/orgs", "repos_url": "https://api.github.com/users/bfontaine/repos", "events_url": "https://api.github.com/users/bfontaine/events{/privacy}", "received_events_url": "https://api.github.com/users/bfontaine/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 11350558, "node_id": "MDU6TGFiZWwxMTM1MDU1OA==", "url": "https://api.github.com/repos/gmr/flatdict/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 809314961, "node_id": "MDU6TGFiZWw4MDkzMTQ5NjE=", "url": "https://api.github.com/repos/gmr/flatdict/labels/help%20wanted", "name": "help wanted", "color": "f7ef56", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-12-31T10:19:36Z", "updated_at": "2019-06-10T15:26:14Z", "closed_at": "2019-06-10T15:26:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Test:\n\n``` python\nimport flatdict\nd = {\"foo\": 42}\nfor _ in range(1000):\n    d = {\"1\": d}  # create a 1000-levels nested dictionary\nf = flatdict.FlatDict(d)\n```\n\ngives:\n\n``` pytb\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/private/tmp/toto/venv/lib/python2.7/site-packages/flatdict.py\", line 27, in __init__\n    self.__setitem__(key, value[key])\n  File \"/private/tmp/toto/venv/lib/python2.7/site-packages/flatdict.py\", line 70, in __setitem__\n    value = FlatDict(value, self._delimiter)\n  File \"/private/tmp/toto/venv/lib/python2.7/site-packages/flatdict.py\", line 27, in __init__\n    self.__setitem__(key, value[key])\n  [\u2026 truncated \u2026]\n  File \"/private/tmp/toto/venv/lib/python2.7/site-packages/flatdict.py\", line 22, in __init__\n    super(FlatDict, self).__init__()\nRuntimeError: maximum recursion depth exceeded while calling a Python object\n```\n\nTested with Flatdict 1.1.1 and Python 2.7.9.\n\nIf this can help you I recently released a similar library, [flatkeys](https://github.com/bfontaine/flatkeys#flatkeys), and I worked around the maximum recursion depth limit by removing any recursion and [using a stack](https://github.com/bfontaine/flatkeys/blob/ff9c7e3acc26325113b31371f0c743aee8a2c65b/flatkeys/__init__.py#L22-L32) instead.\n", "performed_via_github_app": null, "score": 1.0}]}