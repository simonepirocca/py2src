{"total_count": 13, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/37", "repository_url": "https://api.github.com/repos/ktosiek/pytest-vcr", "labels_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/37/comments", "events_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/37/events", "html_url": "https://github.com/ktosiek/pytest-vcr/issues/37", "id": 552987745, "node_id": "MDU6SXNzdWU1NTI5ODc3NDU=", "number": 37, "title": "Using Pytest-vcr response as a pytest fixture", "user": {"login": "davkap92", "id": 13290178, "node_id": "MDQ6VXNlcjEzMjkwMTc4", "avatar_url": "https://avatars1.githubusercontent.com/u/13290178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davkap92", "html_url": "https://github.com/davkap92", "followers_url": "https://api.github.com/users/davkap92/followers", "following_url": "https://api.github.com/users/davkap92/following{/other_user}", "gists_url": "https://api.github.com/users/davkap92/gists{/gist_id}", "starred_url": "https://api.github.com/users/davkap92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davkap92/subscriptions", "organizations_url": "https://api.github.com/users/davkap92/orgs", "repos_url": "https://api.github.com/users/davkap92/repos", "events_url": "https://api.github.com/users/davkap92/events{/privacy}", "received_events_url": "https://api.github.com/users/davkap92/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-21T16:28:40Z", "updated_at": "2020-01-21T19:10:36Z", "closed_at": "2020-01-21T19:10:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, not sure if this is something supported\r\nbbut when i try put both annotations\r\n`@pytest.mark.vcr`\r\n`@pytest.fixture`\r\n\r\nIt seems to still get the live request and ignore the vcr annotation, I've tried the annotations in both orders.\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/33", "repository_url": "https://api.github.com/repos/ktosiek/pytest-vcr", "labels_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/33/comments", "events_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/33/events", "html_url": "https://github.com/ktosiek/pytest-vcr/issues/33", "id": 538757058, "node_id": "MDU6SXNzdWU1Mzg3NTcwNTg=", "number": 33, "title": "Easy way to determine if running test with vcr disabled", "user": {"login": "neozenith", "id": 159722, "node_id": "MDQ6VXNlcjE1OTcyMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/159722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neozenith", "html_url": "https://github.com/neozenith", "followers_url": "https://api.github.com/users/neozenith/followers", "following_url": "https://api.github.com/users/neozenith/following{/other_user}", "gists_url": "https://api.github.com/users/neozenith/gists{/gist_id}", "starred_url": "https://api.github.com/users/neozenith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neozenith/subscriptions", "organizations_url": "https://api.github.com/users/neozenith/orgs", "repos_url": "https://api.github.com/users/neozenith/repos", "events_url": "https://api.github.com/users/neozenith/events{/privacy}", "received_events_url": "https://api.github.com/users/neozenith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-17T00:24:06Z", "updated_at": "2019-12-19T03:43:54Z", "closed_at": "2019-12-19T03:43:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am running a test like this:\r\n\r\n```python\r\n@pytest.mark.vcr\r\ndef test_simple(vcr_cassette):\r\n    # Given\r\n    <insert test assumptions>\r\n\r\n    # When\r\n    <insert actual test scenario>\r\n\r\n    # Then\r\n    assert vcr_cassette.all_played\r\n    assert vcr_cassette.play_count == 8\r\n```\r\n\r\nWhen I run my tests with VCR disabled the `play_count` is 0..... Understandably.\r\n\r\nI'd like to change this to:\r\n\r\n```python\r\nif not vcr_disabled:\r\n    assert vcr_cassette.play_count == 8\r\n```\r\n\r\nBut it seems that the pytest-vcr marker doesn't have an obvious way to check if the lambda was set to None.\r\n\r\nhttps://github.com/ktosiek/pytest-vcr/blob/4fb277ee37b8b89d0fe7139bc79597db32f024fd/pytest_vcr.py#L59\r\n\r\nI'll have a crack at a PR later that exposes on the `_vcr_marker` fixture a boolean property that can get assigned at that point in the code I linked but defaults to False unless it hits that code path.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/29", "repository_url": "https://api.github.com/repos/ktosiek/pytest-vcr", "labels_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/29/comments", "events_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/29/events", "html_url": "https://github.com/ktosiek/pytest-vcr/issues/29", "id": 482313392, "node_id": "MDU6SXNzdWU0ODIzMTMzOTI=", "number": 29, "title": "NameError in code sample in docs", "user": {"login": "vkurup", "id": 4413, "node_id": "MDQ6VXNlcjQ0MTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/4413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vkurup", "html_url": "https://github.com/vkurup", "followers_url": "https://api.github.com/users/vkurup/followers", "following_url": "https://api.github.com/users/vkurup/following{/other_user}", "gists_url": "https://api.github.com/users/vkurup/gists{/gist_id}", "starred_url": "https://api.github.com/users/vkurup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vkurup/subscriptions", "organizations_url": "https://api.github.com/users/vkurup/orgs", "repos_url": "https://api.github.com/users/vkurup/repos", "events_url": "https://api.github.com/users/vkurup/events{/privacy}", "received_events_url": "https://api.github.com/users/vkurup/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-19T13:30:07Z", "updated_at": "2020-01-05T14:05:47Z", "closed_at": "2020-01-05T14:05:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "The code sample that was updated in #8 now generates a `NameError: name 'filter_headers' is not defined`. The `filter_headers` needs to be quoted:\r\n\r\n```\r\n@pytest.fixture(scope='module')\r\ndef vcr_config():\r\n    return {\r\n        # Replace the Authorization request header with \"DUMMY\" in cassettes\r\n        'filter_headers': [('authorization', 'DUMMY')],\r\n    }\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/27", "repository_url": "https://api.github.com/repos/ktosiek/pytest-vcr", "labels_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/27/comments", "events_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/27/events", "html_url": "https://github.com/ktosiek/pytest-vcr/issues/27", "id": 474634314, "node_id": "MDU6SXNzdWU0NzQ2MzQzMTQ=", "number": 27, "title": "Incompatible with pytest-5", "user": {"login": "jayvdb", "id": 15092, "node_id": "MDQ6VXNlcjE1MDky", "avatar_url": "https://avatars1.githubusercontent.com/u/15092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayvdb", "html_url": "https://github.com/jayvdb", "followers_url": "https://api.github.com/users/jayvdb/followers", "following_url": "https://api.github.com/users/jayvdb/following{/other_user}", "gists_url": "https://api.github.com/users/jayvdb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayvdb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayvdb/subscriptions", "organizations_url": "https://api.github.com/users/jayvdb/orgs", "repos_url": "https://api.github.com/users/jayvdb/repos", "events_url": "https://api.github.com/users/jayvdb/events{/privacy}", "received_events_url": "https://api.github.com/users/jayvdb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-30T14:54:13Z", "updated_at": "2020-01-05T14:16:25Z", "closed_at": "2020-01-05T14:16:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\ntests/test_vcr.py:7: in <module>\r\n    assert pytest.config.pluginmanager.hasplugin(\"vcr\")\r\n/usr/lib/python3.7/site-packages/_pytest/main.py:187: in __getattr__\r\n    warnings.warn(PYTEST_CONFIG_GLOBAL, stacklevel=2)\r\nE   pytest.PytestDeprecationWarning: the `pytest.config` global is deprecated.  Please use `request.config` or `pytest_configure` (if you're a pytest plugin) \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/26", "repository_url": "https://api.github.com/repos/ktosiek/pytest-vcr", "labels_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/26/comments", "events_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/26/events", "html_url": "https://github.com/ktosiek/pytest-vcr/issues/26", "id": 474629110, "node_id": "MDU6SXNzdWU0NzQ2MjkxMTA=", "number": 26, "title": "PyPI sdist doesnt include tests", "user": {"login": "jayvdb", "id": 15092, "node_id": "MDQ6VXNlcjE1MDky", "avatar_url": "https://avatars1.githubusercontent.com/u/15092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayvdb", "html_url": "https://github.com/jayvdb", "followers_url": "https://api.github.com/users/jayvdb/followers", "following_url": "https://api.github.com/users/jayvdb/following{/other_user}", "gists_url": "https://api.github.com/users/jayvdb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayvdb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayvdb/subscriptions", "organizations_url": "https://api.github.com/users/jayvdb/orgs", "repos_url": "https://api.github.com/users/jayvdb/repos", "events_url": "https://api.github.com/users/jayvdb/events{/privacy}", "received_events_url": "https://api.github.com/users/jayvdb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-30T14:45:14Z", "updated_at": "2020-01-02T19:49:10Z", "closed_at": "2020-01-02T19:49:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "While packaging this for openSUSE, I found that the PyPI sdist doesnt include the tests\r\n\r\nhttps://build.opensuse.org/package/show/home:jayvdb:coala:test-rig/python-pytest-vcr\r\n\r\nNot a huge drama, as I can get them from https://github.com/ktosiek/pytest-vcr/releases , but it is preferable to have the sdist be usable as-is for packaging.\r\n\r\n`check-manifest` can maintain the `MANIFEST.in` so that the sdist is always complete.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/23", "repository_url": "https://api.github.com/repos/ktosiek/pytest-vcr", "labels_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/23/comments", "events_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/23/events", "html_url": "https://github.com/ktosiek/pytest-vcr/issues/23", "id": 442029486, "node_id": "MDU6SXNzdWU0NDIwMjk0ODY=", "number": 23, "title": "How to specify `use_cassette`", "user": {"login": "dazza-codes", "id": 240623, "node_id": "MDQ6VXNlcjI0MDYyMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/240623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dazza-codes", "html_url": "https://github.com/dazza-codes", "followers_url": "https://api.github.com/users/dazza-codes/followers", "following_url": "https://api.github.com/users/dazza-codes/following{/other_user}", "gists_url": "https://api.github.com/users/dazza-codes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dazza-codes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dazza-codes/subscriptions", "organizations_url": "https://api.github.com/users/dazza-codes/orgs", "repos_url": "https://api.github.com/users/dazza-codes/repos", "events_url": "https://api.github.com/users/dazza-codes/events{/privacy}", "received_events_url": "https://api.github.com/users/dazza-codes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-05-09T03:12:00Z", "updated_at": "2019-07-13T00:05:32Z", "closed_at": "2019-05-22T02:44:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "When there are many tests using the same request/response, what's the best way to ensure they all use the same cassette?  The `vcr.use_cassette` API clearly provides an option to name a cassette file.  Is this exposed in pytest-vcr?  e.g.\r\n\r\n```python\r\n@pytest.mark.vcr(vcr_cassette_name='custom')\r\n\r\n# or?\r\n\r\n@pytest.mark.vcr(use_cassette='cassettes/custom.yaml')\r\n```\r\n\r\nIs this already noted in the read-the-docs?  Where is it explained?\r\n\r\nIt seems like adding a decorator for VCR to a pytest-fixture does not work, or does it?  If so, how?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/22", "repository_url": "https://api.github.com/repos/ktosiek/pytest-vcr", "labels_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/22/comments", "events_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/22/events", "html_url": "https://github.com/ktosiek/pytest-vcr/issues/22", "id": 440160452, "node_id": "MDU6SXNzdWU0NDAxNjA0NTI=", "number": 22, "title": "latest release does not record any cassettes", "user": {"login": "dazza-codes", "id": 240623, "node_id": "MDQ6VXNlcjI0MDYyMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/240623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dazza-codes", "html_url": "https://github.com/dazza-codes", "followers_url": "https://api.github.com/users/dazza-codes/followers", "following_url": "https://api.github.com/users/dazza-codes/following{/other_user}", "gists_url": "https://api.github.com/users/dazza-codes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dazza-codes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dazza-codes/subscriptions", "organizations_url": "https://api.github.com/users/dazza-codes/orgs", "repos_url": "https://api.github.com/users/dazza-codes/repos", "events_url": "https://api.github.com/users/dazza-codes/events{/privacy}", "received_events_url": "https://api.github.com/users/dazza-codes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-05-03T18:10:53Z", "updated_at": "2019-12-12T16:20:35Z", "closed_at": "2019-05-07T04:06:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "## versions\r\n```\r\n$ cat /etc/lsb-release \r\nDISTRIB_ID=Ubuntu\r\nDISTRIB_RELEASE=18.04\r\nDISTRIB_CODENAME=bionic\r\nDISTRIB_DESCRIPTION=\"Ubuntu 18.04.2 LTS\"\r\n\r\n$ poetry --version\r\nPoetry 0.12.11\r\n\r\n$ pip freeze | grep vcr\r\npytest-vcr==1.0.2\r\nvcrpy==2.0.1\r\n\r\n$ pip freeze | grep pytest\r\npytest==4.4.1\r\npytest-cov==2.7.1\r\npytest-forked==1.0.2\r\npytest-mock==1.10.4\r\npytest-ordering==0.6\r\npytest-runner==4.4\r\npytest-vcr==1.0.2\r\npytest-xdist==1.28.0\r\n```\r\n\r\nRemoved all `tests/cassettes` and ran `pytest --vcr-record=all` to replace all the cassettes, but there's no output cassettes and all the tests that should record cassettes are passing.  There no custom configuration settings and tests use the basic `@pytest.mark.vcr()` decorators.\r\n\r\n```\r\n$ pytest --fixtures\r\n\r\n----------------------------------------------------------------------------- fixtures defined from pytest_vcr ------------------------------------------------------------------------------\r\nvcr_config\r\n    Custom configuration for VCR.py\r\nvcr\r\n    The VCR instance\r\nvcr_cassette\r\n    Wrap a test in a VCR.py cassette\r\nvcr_cassette_dir\r\n    .venv/lib/python3.7/site-packages/pytest_vcr.py:92: no docstring available\r\nvcr_cassette_name\r\n    Name of the VCR cassette\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/21", "repository_url": "https://api.github.com/repos/ktosiek/pytest-vcr", "labels_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/21/comments", "events_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/21/events", "html_url": "https://github.com/ktosiek/pytest-vcr/issues/21", "id": 433590437, "node_id": "MDU6SXNzdWU0MzM1OTA0Mzc=", "number": 21, "title": "Regression using unittest.TestCase, pytest-vcr and pytest 4.X.X", "user": {"login": "arthurHamon2", "id": 5768782, "node_id": "MDQ6VXNlcjU3Njg3ODI=", "avatar_url": "https://avatars0.githubusercontent.com/u/5768782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arthurHamon2", "html_url": "https://github.com/arthurHamon2", "followers_url": "https://api.github.com/users/arthurHamon2/followers", "following_url": "https://api.github.com/users/arthurHamon2/following{/other_user}", "gists_url": "https://api.github.com/users/arthurHamon2/gists{/gist_id}", "starred_url": "https://api.github.com/users/arthurHamon2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arthurHamon2/subscriptions", "organizations_url": "https://api.github.com/users/arthurHamon2/orgs", "repos_url": "https://api.github.com/users/arthurHamon2/repos", "events_url": "https://api.github.com/users/arthurHamon2/events{/privacy}", "received_events_url": "https://api.github.com/users/arthurHamon2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-16T05:32:01Z", "updated_at": "2019-04-29T06:08:20Z", "closed_at": "2019-04-29T06:08:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "On Pytest 4.X.X this unit test fails to have the right cassette name : \r\n\r\n```\r\nfrom unittest import TestCase\r\nimport pytest\r\n\r\nclass TestClass(TestCase):\r\n    \r\n    @pytest.mark.vcr\r\n    def test_vcr(self):\r\n        # The cassette name will be \"test_vcr\" and not \"TestClass.test_vcr\" with pytest 4.X.X\r\n        # but it used to be \"TestClass.test_vcr\" with pytest 3.X.X\r\n        pass\r\n```\r\n\r\nSee #20 to fix this issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/18", "repository_url": "https://api.github.com/repos/ktosiek/pytest-vcr", "labels_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/18/comments", "events_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/18/events", "html_url": "https://github.com/ktosiek/pytest-vcr/issues/18", "id": 399875002, "node_id": "MDU6SXNzdWUzOTk4NzUwMDI=", "number": 18, "title": "'MockClientResponse.release' was never awaited", "user": {"login": "JulienPalard", "id": 239510, "node_id": "MDQ6VXNlcjIzOTUxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/239510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulienPalard", "html_url": "https://github.com/JulienPalard", "followers_url": "https://api.github.com/users/JulienPalard/followers", "following_url": "https://api.github.com/users/JulienPalard/following{/other_user}", "gists_url": "https://api.github.com/users/JulienPalard/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulienPalard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulienPalard/subscriptions", "organizations_url": "https://api.github.com/users/JulienPalard/orgs", "repos_url": "https://api.github.com/users/JulienPalard/repos", "events_url": "https://api.github.com/users/JulienPalard/events{/privacy}", "received_events_url": "https://api.github.com/users/JulienPalard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-16T15:55:55Z", "updated_at": "2019-01-18T14:40:35Z", "closed_at": "2019-01-18T14:40:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found a bug with pytest-aiohttp / pytest / aiohttp / pytest-vcr:\r\n```\r\n$ python3 -m venv /tmp/pytestcasettebug\r\n$ source /tmp/pytestcasettebug/bin/activate\r\n$ cat tests/test_mdk.py \r\nimport aiohttp\r\nimport pytest\r\n\r\n\r\n@pytest.mark.vcr\r\nasync def test_mdk():\r\n    async with aiohttp.ClientSession() as session:\r\n        async with session.get(\"https://mdk.fr\") as resp:\r\n            assert resp.status == 200\r\n\r\n\r\n$ pip install pytest aiohttp pytest-vcr pytest-aiohttp\r\n$ pytest\r\n=============================================================== test session starts ===============================================================\r\nplatform linux -- Python 3.7.2, pytest-4.1.1, py-1.7.0, pluggy-0.8.1\r\nrootdir: /home/mdk/clones/meltygroup/vcrbug, inifile:\r\nplugins: vcr-1.0.1, aiohttp-0.3.0\r\ncollected 1 item                                                                                                                                  \r\n\r\ntests/test_mdk.py .                                                                                                                         [100%]\r\n\r\n============================================================ 1 passed in 0.19 seconds =============================================================\r\n$ pytest\r\n=============================================================== test session starts ===============================================================\r\nplatform linux -- Python 3.7.2, pytest-4.1.1, py-1.7.0, pluggy-0.8.1\r\nrootdir: /home/mdk/clones/meltygroup/vcrbug, inifile:\r\nplugins: vcr-1.0.1, aiohttp-0.3.0\r\ncollected 1 item                                                                                                                                  \r\n\r\ntests/test_mdk.py F                                                                                                                         [100%]\r\n\r\n==================================================================== FAILURES =====================================================================\r\n____________________________________________________________________ test_mdk _____________________________________________________________________\r\n\r\npyfuncitem = <Function test_mdk>\r\n\r\n    def pytest_pyfunc_call(pyfuncitem):  # type: ignore\r\n        \"\"\"\r\n        Run coroutines in an event loop instead of a normal function call.\r\n        \"\"\"\r\n        fast = pyfuncitem.config.getoption(\"--aiohttp-fast\")\r\n        if asyncio.iscoroutinefunction(pyfuncitem.function):\r\n            existing_loop = pyfuncitem.funcargs.get('loop', None)\r\n            with _runtime_warning_context():\r\n                with _passthrough_loop_context(existing_loop, fast=fast) as _loop:\r\n                    testargs = {arg: pyfuncitem.funcargs[arg]\r\n                                for arg in pyfuncitem._fixtureinfo.argnames}\r\n>                   _loop.run_until_complete(pyfuncitem.obj(**testargs))\r\n\r\n/tmp/pytestcasettebug/lib/python3.7/site-packages/aiohttp/pytest_plugin.py:169: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/usr/lib/python3.7/contextlib.py:119: in __exit__\r\n    next(self.gen)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n    @contextlib.contextmanager\r\n    def _runtime_warning_context():  # type: ignore\r\n        \"\"\"\r\n        Context manager which checks for RuntimeWarnings, specifically to\r\n        avoid \"coroutine 'X' was never awaited\" warnings being missed.\r\n    \r\n        If RuntimeWarnings occur in the context a RuntimeError is raised.\r\n        \"\"\"\r\n        with warnings.catch_warnings(record=True) as _warnings:\r\n            yield\r\n            rw = ['{w.filename}:{w.lineno}:{w.message}'.format(w=w)\r\n                  for w in _warnings  # type: ignore\r\n                  if w.category == RuntimeWarning]\r\n            if rw:\r\n                raise RuntimeError('{} Runtime Warning{},\\n{}'.format(\r\n                    len(rw),\r\n                    '' if len(rw) == 1 else 's',\r\n>                   '\\n'.join(rw)\r\n                ))\r\nE               RuntimeError: 1 Runtime Warning,\r\nE               /tmp/pytestcasettebug/lib/python3.7/site-packages/aiohttp/client.py:1019:coroutine 'MockClientResponse.release' was never awaited\r\n\r\n/tmp/pytestcasettebug/lib/python3.7/site-packages/aiohttp/pytest_plugin.py:130: RuntimeError\r\n================================================================ warnings summary =================================================================\r\ntests/test_mdk.py::test_mdk\r\n  /tmp/pytestcasettebug/lib/python3.7/site-packages/yaml/constructor.py:126: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    if not isinstance(key, collections.Hashable):\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n====================================================== 1 failed, 1 warnings in 0.06 seconds =======================================================\r\n\r\n$ pip freeze\r\naiohttp==3.5.4\r\nasync-timeout==3.0.1\r\natomicwrites==1.2.1\r\nattrs==18.2.0\r\nchardet==3.0.4\r\nidna==2.8\r\nmore-itertools==5.0.0\r\nmultidict==4.5.2\r\npkg-resources==0.0.0\r\npluggy==0.8.1\r\npy==1.7.0\r\npytest==4.1.1\r\npytest-aiohttp==0.3.0\r\npytest-vcr==1.0.1\r\nPyYAML==3.13\r\nsix==1.12.0\r\nvcrpy==2.0.1\r\nwrapt==1.11.0\r\nyarl==1.3.0\r\n```\r\n\r\nI cannot reproduce this bug with vcrpy only, where I'm having a warning: `RuntimeWarning: coroutine 'handle_coroutine' was never awaited`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/16", "repository_url": "https://api.github.com/repos/ktosiek/pytest-vcr", "labels_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/16/comments", "events_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/16/events", "html_url": "https://github.com/ktosiek/pytest-vcr/issues/16", "id": 381717261, "node_id": "MDU6SXNzdWUzODE3MTcyNjE=", "number": 16, "title": "pytest-vcr==1.0.0 fails with pytest==4.0.0 if one specifies --vcr-record or --vcr-record-mode", "user": {"login": "immerrr", "id": 579798, "node_id": "MDQ6VXNlcjU3OTc5OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/immerrr", "html_url": "https://github.com/immerrr", "followers_url": "https://api.github.com/users/immerrr/followers", "following_url": "https://api.github.com/users/immerrr/following{/other_user}", "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}", "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions", "organizations_url": "https://api.github.com/users/immerrr/orgs", "repos_url": "https://api.github.com/users/immerrr/repos", "events_url": "https://api.github.com/users/immerrr/events{/privacy}", "received_events_url": "https://api.github.com/users/immerrr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-16T18:46:29Z", "updated_at": "2018-11-17T12:50:08Z", "closed_at": "2018-11-17T12:50:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "There are two things in play here:\r\n- pytest-vcr tries to report `vcr-record-mode` parameter that is deprecated in favour of `vcr-record` as a warning\r\n- the way pytest-vcr reports it is via a functionality that is deprecated and removed in pytest 4\r\n\r\nAs a result, all tests marked with `pytest.vcr` marker fail during collection with the following message:\r\n```\r\n$ pytest --vcr-record-mode=none\r\n<...snip...>\r\n2018-11-15T17:59:15.861968589Z     @pytest.fixture(scope='module')\r\n2018-11-15T17:59:15.862173278Z     def vcr(request, pytestconfig, vcr_config, vcr_cassette_dir, ):\r\n2018-11-15T17:59:15.862335576Z         \"\"\"The VCR instance\"\"\"\r\n2018-11-15T17:59:15.862537760Z         if request.config.getoption('--vcr-record-mode'):\r\n2018-11-15T17:59:15.862692441Z             pytestconfig.warn(\"C1\",\r\n2018-11-15T17:59:15.862932122Z >                             \"--vcr-record-mode has been deprecated and will be removed in a future \"\r\n2018-11-15T17:59:15.863159585Z                               \"release. Use --vcr-record instead.\")\r\n2018-11-15T17:59:15.863405921Z E           _pytest.warning_types.RemovedInPytest4Warning: config.warn has been deprecated, use warnings.warn instead\r\n2018-11-15T17:59:15.863569363Z \r\n2018-11-15T17:59:15.863729891Z /usr/local/lib/python3.6/site-packages/pytest_vcr.py:69: RemovedInPytest4Warning\r\n<...snip...>\r\n```\r\n\r\nIf you have pipenv installed, you can reproduce it as follows:\r\n```\r\n$ mkdir test-pytest-vcr &&  cd test-pytest-vcr\r\n$ pipenv install pytest==4.0.0 pytest-vcr==1.0.0 > /dev/null\r\n  \ud83d\udc0d   \u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589 17/17 \u2014 00:00:01\r\n$ cat <<EOF > test_foo.py\r\nimport pytest\r\n@pytest.mark.vcr\r\ndef test_foo():\r\n    pass\r\n\r\nEOF\r\n$ pipenv run pytest --vcr-record-mode=none\r\n==================================================================================== test session starts =====================================================================================\r\nplatform linux2 -- Python 2.7.12, pytest-4.0.0, py-1.7.0, pluggy-0.8.0\r\nrootdir: /home/immerrr/src/test-pytest-vcr, inifile:\r\nplugins: vcr-1.0.0\r\ncollected 1 item                                                                                                                                                                             \r\n\r\ntest_foo.py E                                                                                                                                                                          [100%]\r\n\r\n=========================================================================================== ERRORS ===========================================================================================\r\n_________________________________________________________________________________ ERROR at setup of test_foo _________________________________________________________________________________\r\n\r\nrequest = <SubRequest '_vcr_marker' for <Function 'test_foo'>>\r\n\r\n    @pytest.fixture(autouse=True)\r\n    def _vcr_marker(request):\r\n        marker = request.node.get_closest_marker('vcr')\r\n        if marker:\r\n>           request.getfixturevalue('vcr_cassette')\r\n\r\n/mnt/extraspace/virtualenvs/test-pytest-vcr-ni0iqlSt/lib/python2.7/site-packages/pytest_vcr.py:45: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nrequest = <SubRequest 'vcr' for <Function 'test_foo'>>, pytestconfig = <_pytest.config.Config object at 0x7f5e57bc8ed0>, vcr_config = {}\r\nvcr_cassette_dir = '/home/immerrr/src/test-pytest-vcr/cassettes'\r\n\r\n    @pytest.fixture(scope='module')\r\n    def vcr(request, pytestconfig, vcr_config, vcr_cassette_dir, ):\r\n        \"\"\"The VCR instance\"\"\"\r\n        if request.config.getoption('--vcr-record-mode'):\r\n            pytestconfig.warn(\"C1\",\r\n>                             \"--vcr-record-mode has been deprecated and will be removed in a future \"\r\n                              \"release. Use --vcr-record instead.\")\r\nE           RemovedInPytest4Warning: config.warn has been deprecated, use warnings.warn instead\r\n\r\n/mnt/extraspace/virtualenvs/test-pytest-vcr-ni0iqlSt/lib/python2.7/site-packages/pytest_vcr.py:69: RemovedInPytest4Warning\r\n================================================================================== 1 error in 0.04 seconds ===================================================================================\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/9", "repository_url": "https://api.github.com/repos/ktosiek/pytest-vcr", "labels_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/9/comments", "events_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/9/events", "html_url": "https://github.com/ktosiek/pytest-vcr/issues/9", "id": 305676072, "node_id": "MDU6SXNzdWUzMDU2NzYwNzI=", "number": 9, "title": "Is it possible to access the cassette from within the test?", "user": {"login": "fiveohhh", "id": 341312, "node_id": "MDQ6VXNlcjM0MTMxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/341312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fiveohhh", "html_url": "https://github.com/fiveohhh", "followers_url": "https://api.github.com/users/fiveohhh/followers", "following_url": "https://api.github.com/users/fiveohhh/following{/other_user}", "gists_url": "https://api.github.com/users/fiveohhh/gists{/gist_id}", "starred_url": "https://api.github.com/users/fiveohhh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fiveohhh/subscriptions", "organizations_url": "https://api.github.com/users/fiveohhh/orgs", "repos_url": "https://api.github.com/users/fiveohhh/repos", "events_url": "https://api.github.com/users/fiveohhh/events{/privacy}", "received_events_url": "https://api.github.com/users/fiveohhh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-15T18:46:13Z", "updated_at": "2018-11-12T13:06:38Z", "closed_at": "2018-11-12T13:06:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to gain access to `cass.all_played` (https://github.com/kevin1024/vcrpy/blob/master/docs/advanced.rst).  Is this possible with pytest-vcr?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/8", "repository_url": "https://api.github.com/repos/ktosiek/pytest-vcr", "labels_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/8/comments", "events_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/8/events", "html_url": "https://github.com/ktosiek/pytest-vcr/issues/8", "id": 267960263, "node_id": "MDU6SXNzdWUyNjc5NjAyNjM=", "number": 8, "title": "Invalid code sample in docs", "user": {"login": "pakal", "id": 330629, "node_id": "MDQ6VXNlcjMzMDYyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/330629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pakal", "html_url": "https://github.com/pakal", "followers_url": "https://api.github.com/users/pakal/followers", "following_url": "https://api.github.com/users/pakal/following{/other_user}", "gists_url": "https://api.github.com/users/pakal/gists{/gist_id}", "starred_url": "https://api.github.com/users/pakal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pakal/subscriptions", "organizations_url": "https://api.github.com/users/pakal/orgs", "repos_url": "https://api.github.com/users/pakal/repos", "events_url": "https://api.github.com/users/pakal/events{/privacy}", "received_events_url": "https://api.github.com/users/pakal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-24T09:30:02Z", "updated_at": "2017-10-28T16:26:57Z", "closed_at": "2017-10-24T18:53:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "It's a detail, but the dict literal is not correct :\r\n\r\n\r\n```\r\n@pytest.fixture\r\ndef vcr_config():\r\n    return {\r\n        # Replace the Authorization request header with \"DUMMY\" in cassettes\r\n        filter_headers=[('authorization', 'DUMMY')],\r\n    }\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/4", "repository_url": "https://api.github.com/repos/ktosiek/pytest-vcr", "labels_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/4/comments", "events_url": "https://api.github.com/repos/ktosiek/pytest-vcr/issues/4/events", "html_url": "https://github.com/ktosiek/pytest-vcr/issues/4", "id": 236843852, "node_id": "MDU6SXNzdWUyMzY4NDM4NTI=", "number": 4, "title": "Using one cassete per test class", "user": {"login": "pawelad", "id": 7062874, "node_id": "MDQ6VXNlcjcwNjI4NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/7062874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pawelad", "html_url": "https://github.com/pawelad", "followers_url": "https://api.github.com/users/pawelad/followers", "following_url": "https://api.github.com/users/pawelad/following{/other_user}", "gists_url": "https://api.github.com/users/pawelad/gists{/gist_id}", "starred_url": "https://api.github.com/users/pawelad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pawelad/subscriptions", "organizations_url": "https://api.github.com/users/pawelad/orgs", "repos_url": "https://api.github.com/users/pawelad/repos", "events_url": "https://api.github.com/users/pawelad/events{/privacy}", "received_events_url": "https://api.github.com/users/pawelad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-06-19T10:18:21Z", "updated_at": "2017-11-15T18:54:42Z", "closed_at": "2017-11-15T18:54:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hiya,\r\n\r\nThanks for the plugin, I like it a lot.  One thing that I'm wondering if it's possible / worth doing is allowing marked classes to use one cassete, so:\r\n\r\n```python\r\n@pytest.mark.vcr()\r\ndef test_foo():\r\n    pass\r\n\r\n@pytest.mark.vcr()\r\ndef test_bar():\r\n    pass\r\n```\r\n\r\nwould create `test_foo.yaml` and `test_bar.yaml` as you'd expect, but:\r\n\r\n```python\r\n@pytest.mark.vcr()\r\nclass TestFoobar:\r\n    def test_foo(self):\r\n        pass\r\n\r\n    def test_bar(self):\r\n        pass\r\n```\r\n\r\nwould only create one cassete `TestFoobar.yaml` instead of `TestFoobar.test_foo.yaml` and `TestFoobar.test_bar.yaml`.\r\n\r\nI don't know if that's even possible re py.test and vcr.py but wanted to ask, as it would make sense in my use case when I'm class is a group of tests of one function (which does one external request) but with different parameter.", "performed_via_github_app": null, "score": 1.0}]}