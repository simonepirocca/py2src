{"total_count": 38, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/113", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/113/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/113/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/113", "id": 601251353, "node_id": "MDU6SXNzdWU2MDEyNTEzNTM=", "number": 113, "title": "Run ptw with -s", "user": {"login": "av-guy", "id": 28807350, "node_id": "MDQ6VXNlcjI4ODA3MzUw", "avatar_url": "https://avatars1.githubusercontent.com/u/28807350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av-guy", "html_url": "https://github.com/av-guy", "followers_url": "https://api.github.com/users/av-guy/followers", "following_url": "https://api.github.com/users/av-guy/following{/other_user}", "gists_url": "https://api.github.com/users/av-guy/gists{/gist_id}", "starred_url": "https://api.github.com/users/av-guy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av-guy/subscriptions", "organizations_url": "https://api.github.com/users/av-guy/orgs", "repos_url": "https://api.github.com/users/av-guy/repos", "events_url": "https://api.github.com/users/av-guy/events{/privacy}", "received_events_url": "https://api.github.com/users/av-guy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-16T17:05:30Z", "updated_at": "2020-04-16T17:25:17Z", "closed_at": "2020-04-16T17:25:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\n\r\nI'm sorry if this has been asked before, or I am just missing it in the documentation, but how would I go about running ptw and capturing stdout/stderr?\r\n\r\nThanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/97", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/97/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/97/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/97", "id": 367855339, "node_id": "MDU6SXNzdWUzNjc4NTUzMzk=", "number": 97, "title": "python -m ptw doesn't work", "user": {"login": "max-sixty", "id": 5635139, "node_id": "MDQ6VXNlcjU2MzUxMzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/max-sixty", "html_url": "https://github.com/max-sixty", "followers_url": "https://api.github.com/users/max-sixty/followers", "following_url": "https://api.github.com/users/max-sixty/following{/other_user}", "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}", "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions", "organizations_url": "https://api.github.com/users/max-sixty/orgs", "repos_url": "https://api.github.com/users/max-sixty/repos", "events_url": "https://api.github.com/users/max-sixty/events{/privacy}", "received_events_url": "https://api.github.com/users/max-sixty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-08T15:59:17Z", "updated_at": "2019-08-15T03:06:46Z", "closed_at": "2019-08-15T03:06:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks again for the awesome library.\r\n\r\nThe standard method to run modules in different versions of python is `python[23] -m foo`. But that doesn't seem to work with `ptw`:\r\n\r\n```\r\npython2 -m ptw \r\n# /usr/local/opt/python@2/bin/python2.7: No module named ptw\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/96", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/96/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/96/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/96", "id": 367490247, "node_id": "MDU6SXNzdWUzNjc0OTAyNDc=", "number": 96, "title": "ptw stealing focus from editor", "user": {"login": "max-sixty", "id": 5635139, "node_id": "MDQ6VXNlcjU2MzUxMzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/max-sixty", "html_url": "https://github.com/max-sixty", "followers_url": "https://api.github.com/users/max-sixty/followers", "following_url": "https://api.github.com/users/max-sixty/following{/other_user}", "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}", "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions", "organizations_url": "https://api.github.com/users/max-sixty/orgs", "repos_url": "https://api.github.com/users/max-sixty/repos", "events_url": "https://api.github.com/users/max-sixty/events{/privacy}", "received_events_url": "https://api.github.com/users/max-sixty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-06T19:54:06Z", "updated_at": "2018-10-07T04:27:00Z", "closed_at": "2018-10-07T04:27:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running ptw from iTerm on macOS. I run it in the background while using VSCode.\r\n\r\nptw is amazing and one of my favorite tools. But I'm hitting an annoying issue: when I make a change to a file and tests re-run, it takes focus away from the editor.\r\n\r\nIs this something inherent in ptw's implementation? Or is there a config change I can make? e.g. is there something to do with notifications / beeps / iTerm?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/93", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/93/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/93/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/93", "id": 345075571, "node_id": "MDU6SXNzdWUzNDUwNzU1NzE=", "number": 93, "title": "Bug - verbose flag doesn't work. ", "user": {"login": "brettswift", "id": 723989, "node_id": "MDQ6VXNlcjcyMzk4OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/723989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brettswift", "html_url": "https://github.com/brettswift", "followers_url": "https://api.github.com/users/brettswift/followers", "following_url": "https://api.github.com/users/brettswift/following{/other_user}", "gists_url": "https://api.github.com/users/brettswift/gists{/gist_id}", "starred_url": "https://api.github.com/users/brettswift/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brettswift/subscriptions", "organizations_url": "https://api.github.com/users/brettswift/orgs", "repos_url": "https://api.github.com/users/brettswift/repos", "events_url": "https://api.github.com/users/brettswift/events{/privacy}", "received_events_url": "https://api.github.com/users/brettswift/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1034752233, "node_id": "MDU6TGFiZWwxMDM0NzUyMjMz", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/not-a-bug", "name": "not-a-bug", "color": "e6e6e6", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-27T03:12:19Z", "updated_at": "2018-08-24T23:26:20Z", "closed_at": "2018-08-24T23:24:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is on OSX, python 2.7.12.  zsh\r\n\r\nactual\r\n```\r\n$ ptw -v   \r\nLocating inifile...\r\n\r\n[Thu Jul 26 21:09:09 2018] Running: py.test\r\n====================================================== test session starts =======================================================\r\nplatform darwin -- Python 2.7.12, pytest-3.6.3, py-1.5.4, pluggy-0.6.0\r\nrootdir: /Users/bswift/src/aws/testproj, inifile: setup.cfg\r\ncollected 3 items\r\n\r\ntests/unit/steps/test_sample.py ...                                                                                      [100%]\r\n\r\n==================================================== 3 passed in 0.07 seconds ====================================================\r\n```\r\n\r\nexpected\r\n```\r\n~\r\ntests/unit/steps/test_sample.py::Testsample::test_codebuild_should_add_stage PASSED\r\ntests/unit/steps/test_sample.py::Testsample::test_pipeline_has_two_stages PASSED\r\ntests/unit/steps/test_sample.py::Testsample::test_pipeline_records_metadata PASSED\r\n\r\n==================================================== 3 passed in 0.07 seconds ====================================================\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/88", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/88/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/88/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/88", "id": 302243381, "node_id": "MDU6SXNzdWUzMDIyNDMzODE=", "number": 88, "title": "-v doesn't seem to work properly", "user": {"login": "xmo-odoo", "id": 7571158, "node_id": "MDQ6VXNlcjc1NzExNTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/7571158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xmo-odoo", "html_url": "https://github.com/xmo-odoo", "followers_url": "https://api.github.com/users/xmo-odoo/followers", "following_url": "https://api.github.com/users/xmo-odoo/following{/other_user}", "gists_url": "https://api.github.com/users/xmo-odoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/xmo-odoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xmo-odoo/subscriptions", "organizations_url": "https://api.github.com/users/xmo-odoo/orgs", "repos_url": "https://api.github.com/users/xmo-odoo/repos", "events_url": "https://api.github.com/users/xmo-odoo/events{/privacy}", "received_events_url": "https://api.github.com/users/xmo-odoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249500, "node_id": "MDU6TGFiZWwxNjUyNDk1MDA=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-03-05T10:21:42Z", "updated_at": "2018-05-20T16:55:10Z", "closed_at": "2018-05-20T16:54:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "In pytest, amongst other things `-v` shows fully qualified names for every test (and their status) instead of just a single-letter mark. This does not seem to work for pytest-watch, `ptw -v` still only shows the short marks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/87", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/87/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/87/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/87", "id": 298471138, "node_id": "MDU6SXNzdWUyOTg0NzExMzg=", "number": 87, "title": "pytest.ini: can't specify multiple ignore directories", "user": {"login": "aerickson", "id": 47889, "node_id": "MDQ6VXNlcjQ3ODg5", "avatar_url": "https://avatars0.githubusercontent.com/u/47889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aerickson", "html_url": "https://github.com/aerickson", "followers_url": "https://api.github.com/users/aerickson/followers", "following_url": "https://api.github.com/users/aerickson/following{/other_user}", "gists_url": "https://api.github.com/users/aerickson/gists{/gist_id}", "starred_url": "https://api.github.com/users/aerickson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aerickson/subscriptions", "organizations_url": "https://api.github.com/users/aerickson/orgs", "repos_url": "https://api.github.com/users/aerickson/repos", "events_url": "https://api.github.com/users/aerickson/events{/privacy}", "received_events_url": "https://api.github.com/users/aerickson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-20T04:51:05Z", "updated_at": "2018-02-20T04:58:46Z", "closed_at": "2018-02-20T04:58:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to ignore multiple directories in my pytest.ini, but it doesn't seem to work. When I touch a file in one of the ignored directories, ptw still starts a run.\r\n\r\nI did try to specify multiple ignore keys (like how the CLI works), but ini files cannot have duplicated keys.\r\n\r\n```\r\n[pytest-watch]\r\nignore = __pycache__,junk,misc,resources,venv,wz_profiler\r\next = .py,.html,.txt\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/85", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/85/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/85/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/85", "id": 295886956, "node_id": "MDU6SXNzdWUyOTU4ODY5NTY=", "number": 85, "title": "ptw fails to start on ModuleNotFoundError:", "user": {"login": "PhE", "id": 1107924, "node_id": "MDQ6VXNlcjExMDc5MjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1107924?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PhE", "html_url": "https://github.com/PhE", "followers_url": "https://api.github.com/users/PhE/followers", "following_url": "https://api.github.com/users/PhE/following{/other_user}", "gists_url": "https://api.github.com/users/PhE/gists{/gist_id}", "starred_url": "https://api.github.com/users/PhE/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PhE/subscriptions", "organizations_url": "https://api.github.com/users/PhE/orgs", "repos_url": "https://api.github.com/users/PhE/repos", "events_url": "https://api.github.com/users/PhE/events{/privacy}", "received_events_url": "https://api.github.com/users/PhE/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-09T14:22:59Z", "updated_at": "2018-05-20T23:36:31Z", "closed_at": "2018-05-20T23:36:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "ptw exits immediately if there an import error like :\r\n```python\r\nimport not_found\r\n\r\ndef test_100():\r\n    assert True\r\n```\r\nBut if ptw starts with no error, then the same import error is correctly displayed (and ptw continues to run as expected) : \r\n```\r\nRunning: py.test\r\n============================================================================================================= test session starts =============================================================================================================\r\nplatform linux -- Python 3.6.3, pytest-3.0.7, py-1.5.2, pluggy-0.4.0\r\nrootdir: /tmp/toto, inifile:\r\nplugins: hypothesis-3.38.5\r\ncollected 1 items \r\n\r\ntest_dummy.py .\r\n\r\n========================================================================================================== 1 passed in 0.00 seconds ===========================================================================================================\r\n\r\nChange detected: test_dummy.py\r\n\r\nRunning: py.test\r\n============================================================================================================= test session starts =============================================================================================================\r\nplatform linux -- Python 3.6.3, pytest-3.0.7, py-1.5.2, pluggy-0.4.0\r\nrootdir: /tmp/toto, inifile:\r\nplugins: hypothesis-3.38.5\r\ncollected 0 items / 1 errors \r\n\r\n=================================================================================================================== ERRORS ====================================================================================================================\r\n_______________________________________________________________________________________________________ ERROR collecting test_dummy.py ________________________________________________________________________________________________________\r\nImportError while importing test module '/tmp/toto/test_dummy.py'.\r\nHint: make sure your test modules/packages have valid Python names.\r\nTraceback:\r\ntest_dummy.py:1: in <module>\r\n    import not_found\r\nE   ModuleNotFoundError: No module named 'not_found'\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n=========================================================================================================== 1 error in 0.12 seconds ===========================================================================================================\r\n\r\n\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/84", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/84/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/84/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/84", "id": 292667802, "node_id": "MDU6SXNzdWUyOTI2Njc4MDI=", "number": 84, "title": "Installation fails when using Windows 10, Python 3.6 and Pipenv 9.0.3", "user": {"login": "juhamust", "id": 781002, "node_id": "MDQ6VXNlcjc4MTAwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/781002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/juhamust", "html_url": "https://github.com/juhamust", "followers_url": "https://api.github.com/users/juhamust/followers", "following_url": "https://api.github.com/users/juhamust/following{/other_user}", "gists_url": "https://api.github.com/users/juhamust/gists{/gist_id}", "starred_url": "https://api.github.com/users/juhamust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/juhamust/subscriptions", "organizations_url": "https://api.github.com/users/juhamust/orgs", "repos_url": "https://api.github.com/users/juhamust/repos", "events_url": "https://api.github.com/users/juhamust/events{/privacy}", "received_events_url": "https://api.github.com/users/juhamust/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-30T06:33:04Z", "updated_at": "2018-02-02T04:56:49Z", "closed_at": "2018-02-01T13:29:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Tried installing the package using Windows 10, Python 3.6 and Pipenv 9.0.3 but failed because of the following error:  \r\n\r\n```python\r\nError:  An error occurred while installing pytest-watch!\r\nException:\r\nTraceback (most recent call last):\r\n  File \"c:\\users\\jklmustoju\\.virtualenvs\\projectx-oczq1phh\\lib\\site-packages\\pip\\basecommand.py\", line 215, in main\r\n    status = self.run(options, args)\r\n  File \"c:\\users\\jklmustoju\\.virtualenvs\\projectx-oczq1phh\\lib\\site-packages\\pip\\commands\\install.py\", line 342, in run\r\n    prefix=options.prefix_path,\r\n  File \"c:\\users\\jklmustoju\\.virtualenvs\\projectx-oczq1phh\\lib\\site-packages\\pip\\req\\req_set.py\", line 784, in install\r\n    **kwargs\r\n  File \"c:\\users\\jklmustoju\\.virtualenvs\\projectx-oczq1phh\\lib\\site-packages\\pip\\req\\req_install.py\", line 851, in install\r\n    self.move_wheel_files(self.source_dir, root=root, prefix=prefix)\r\n  File \"c:\\users\\jklmustoju\\.virtualenvs\\projectx-oczq1phh\\lib\\site-packages\\pip\\req\\req_install.py\", line 1064, in move_wheel_files\r\n    isolated=self.isolated,\r\n  File \"c:\\users\\jklmustoju\\.virtualenvs\\projectx-oczq1phh\\lib\\site-packages\\pip\\wheel.py\", line 247, in move_wheel_files\r\n    prefix=prefix,\r\n  File \"c:\\users\\jklmustoju\\.virtualenvs\\projectx-oczq1phh\\lib\\site-packages\\pip\\locations.py\", line 153, in distutils_scheme\r\n    i.finalize_options()\r\n  File \"c:\\users\\jklmustoju\\.virtualenvs\\projectx-oczq1phh\\lib\\site-packages\\setuptools\\command\\install.py\", line 38, in finalize_options\r\n    orig.install.finalize_options(self)\r\n  File \"c:\\users\\jklmustoju\\appdata\\local\\programs\\python\\python36\\Lib\\distutils\\command\\install.py\", line 346, in finalize_options\r\n    'userbase', 'usersite')\r\n  File \"c:\\users\\jklmustoju\\appdata\\local\\programs\\python\\python36\\Lib\\distutils\\command\\install.py\", line 487, in convert_paths\r\n    setattr(self, attr, convert_path(getattr(self, attr)))\r\n  File \"c:\\users\\jklmustoju\\appdata\\local\\programs\\python\\python36\\Lib\\distutils\\util.py\", line 125, in convert_path\r\n    raise ValueError(\"path '%s' cannot be absolute\" % pathname)\r\nValueError: path '/Lib/site-packages' cannot be absolute\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/73", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/73/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/73/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/73", "id": 241687133, "node_id": "MDU6SXNzdWUyNDE2ODcxMzM=", "number": 73, "title": "ptw fails silently on startup if there is a syntax error", "user": {"login": "markscottwright", "id": 5517901, "node_id": "MDQ6VXNlcjU1MTc5MDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5517901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markscottwright", "html_url": "https://github.com/markscottwright", "followers_url": "https://api.github.com/users/markscottwright/followers", "following_url": "https://api.github.com/users/markscottwright/following{/other_user}", "gists_url": "https://api.github.com/users/markscottwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/markscottwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markscottwright/subscriptions", "organizations_url": "https://api.github.com/users/markscottwright/orgs", "repos_url": "https://api.github.com/users/markscottwright/repos", "events_url": "https://api.github.com/users/markscottwright/events{/privacy}", "received_events_url": "https://api.github.com/users/markscottwright/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249496, "node_id": "MDU6TGFiZWwxNjUyNDk0OTY=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-07-10T11:53:11Z", "updated_at": "2018-05-20T22:35:34Z", "closed_at": "2018-05-20T22:35:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "With the following unit test file:\r\n```\r\n# file test_syntax.py\r\nprint(\"hello\"\r\n```\r\nptw will fail silently.  \r\n```\r\nD:\\temp\\t>type test_syntax.py\r\nprint(\"hello\"\r\n\r\nD:\\temp\\t>ptw\r\n\r\nD:\\temp\\t>\r\n```\r\n\r\nIf I fix the syntax error, I can start ptw.  If I introduce a syntax error later (after starting ptw, while it is still running), I get the expected SyntaxError exception:\r\n\r\n```\r\nRunning: py.test\r\n============================= test session starts =============================\r\nplatform win32 -- Python 3.5.3, pytest-3.1.3, py-1.4.34, pluggy-0.4.0\r\nrootdir: D:\\temp\\t, inifile:\r\ncollected 0 items / 1 errors\r\n\r\n=================================== ERRORS ====================================\r\n_______________________ ERROR collecting test_syntax.py _______________________\r\nd:\\tools\\python35\\lib\\site-packages\\_pytest\\python.py:408: in _importtestmodule\r\n    mod = self.fspath.pyimport(ensuresyspath=importmode)\r\nd:\\tools\\python35\\lib\\site-packages\\py\\_path\\local.py:662: in pyimport\r\n    __import__(modname)\r\nE     File \"D:\\temp\\t\\test_syntax.py\", line 2\r\nE\r\nE       ^\r\nE   SyntaxError: unexpected EOF while parsing\r\n!!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!\r\n=========================== 1 error in 0.20 seconds ===========================\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/70", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/70/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/70/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/70", "id": 218578731, "node_id": "MDU6SXNzdWUyMTg1Nzg3MzE=", "number": 70, "title": "pytest-watch -- tests/specificfile.py", "user": {"login": "peterbe", "id": 26739, "node_id": "MDQ6VXNlcjI2NzM5", "avatar_url": "https://avatars2.githubusercontent.com/u/26739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterbe", "html_url": "https://github.com/peterbe", "followers_url": "https://api.github.com/users/peterbe/followers", "following_url": "https://api.github.com/users/peterbe/following{/other_user}", "gists_url": "https://api.github.com/users/peterbe/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterbe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterbe/subscriptions", "organizations_url": "https://api.github.com/users/peterbe/orgs", "repos_url": "https://api.github.com/users/peterbe/repos", "events_url": "https://api.github.com/users/peterbe/events{/privacy}", "received_events_url": "https://api.github.com/users/peterbe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-31T18:20:19Z", "updated_at": "2017-04-03T13:23:34Z", "closed_at": "2017-04-03T13:23:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Things like `ptw {some ptw options}` works. Also do `ptw {some ptw options} -- -x` and this latter becomes the same as `pytest -x`. \r\n\r\nBut I want to test just a specific file. Without ptw it would be `pytest tests/test_specificfile.py` and that'll ignore `tests/otherfile.py` etc. \r\n\r\nBut this doesn't work: `ptw {some ptw options} -- tests/test_specificfile.py` :(\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/69", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/69/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/69/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/69", "id": 209772352, "node_id": "MDU6SXNzdWUyMDk3NzIzNTI=", "number": 69, "title": "-v to increase verbosity", "user": {"login": "juanpabloaj", "id": 732415, "node_id": "MDQ6VXNlcjczMjQxNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/732415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/juanpabloaj", "html_url": "https://github.com/juanpabloaj", "followers_url": "https://api.github.com/users/juanpabloaj/followers", "following_url": "https://api.github.com/users/juanpabloaj/following{/other_user}", "gists_url": "https://api.github.com/users/juanpabloaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/juanpabloaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/juanpabloaj/subscriptions", "organizations_url": "https://api.github.com/users/juanpabloaj/orgs", "repos_url": "https://api.github.com/users/juanpabloaj/repos", "events_url": "https://api.github.com/users/juanpabloaj/events{/privacy}", "received_events_url": "https://api.github.com/users/juanpabloaj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-23T14:15:26Z", "updated_at": "2017-02-23T18:35:55Z", "closed_at": "2017-02-23T18:35:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I try to use -v to increase verbosity of the output of the pytest to get a full diff\r\n\r\n     Use -v to get the full diff \r\n\r\nwith pytest -v work fine, I get the full diff. But when I use `-v` with `ptw` I don't get the full diff", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/63", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/63/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/63/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/63", "id": 160448315, "node_id": "MDU6SXNzdWUxNjA0NDgzMTU=", "number": 63, "title": "Can there be `include` as well as ignore?", "user": {"login": "alex-wilmer", "id": 2880089, "node_id": "MDQ6VXNlcjI4ODAwODk=", "avatar_url": "https://avatars2.githubusercontent.com/u/2880089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex-wilmer", "html_url": "https://github.com/alex-wilmer", "followers_url": "https://api.github.com/users/alex-wilmer/followers", "following_url": "https://api.github.com/users/alex-wilmer/following{/other_user}", "gists_url": "https://api.github.com/users/alex-wilmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex-wilmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex-wilmer/subscriptions", "organizations_url": "https://api.github.com/users/alex-wilmer/orgs", "repos_url": "https://api.github.com/users/alex-wilmer/repos", "events_url": "https://api.github.com/users/alex-wilmer/events{/privacy}", "received_events_url": "https://api.github.com/users/alex-wilmer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-15T15:14:55Z", "updated_at": "2016-06-15T15:28:45Z", "closed_at": "2016-06-15T15:28:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a project where files look kind of like:\n\n```\napp/\n  module/\n    module.py\ntests/\n  module/\n    module_test.py\n  some_test.py\n```\n\nIn my ideal usage, I would say `ptw --include module*` which would watch `module_test.py` and `module.py` because that's the current test I'm working on, and don't want all the other tests to keep re running as I'm working.. also I'm finding writing many many `--ignore` to be cumbersome, though I'm probably doing that incorrectly.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/53", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/53/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/53/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/53", "id": 146701632, "node_id": "MDU6SXNzdWUxNDY3MDE2MzI=", "number": 53, "title": "Regression: passes watch dir to py.test", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2016-04-07T18:05:21Z", "updated_at": "2016-05-19T04:19:24Z", "closed_at": "2016-05-19T04:18:50Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "With `ptw dir -- path/to/test_file.py` ptw will include the `dir` in the py.test run:\n\n```\nRunning: py.test dir path/to/test_file.py\n```\n\nThis however will cause py.test to run the whole directory, and not only the specified test file.\n\nThis was not the case with 3.10.0, which does:\n\n```\nRunning: py.test path/to/test_file.py\n```\n\nbtw: I found the best method is to specify `testpaths = path/to/tests` with the pytest options in `setup.cfg`, which gets used when running just `py.test`.\n\nIf this was done intentionally, I think it should only get done when there are no py.test args provided, but that feels a bit too magic.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/52", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/52/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/52/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/52", "id": 146676485, "node_id": "MDU6SXNzdWUxNDY2NzY0ODU=", "number": 52, "title": "Tries collection twice when aborted during it", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249496, "node_id": "MDU6TGFiZWwxNjUyNDk0OTY=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-04-07T16:29:24Z", "updated_at": "2016-04-08T20:30:47Z", "closed_at": "2016-04-08T16:10:18Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "When aborting ptw in the collection phase it will not quit, but retry it:\n\n```\n% ptw ...\n^CError: Could not run --collect-only to find the pytest config file. Trying again without silencing stdout..\n```\n\nI think it should exit on SIGINT here.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/48", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/48/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/48/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/48", "id": 141510659, "node_id": "MDU6SXNzdWUxNDE1MTA2NTk=", "number": 48, "title": "Tests directory name gets autocompleted", "user": {"login": "jdelafon", "id": 12040845, "node_id": "MDQ6VXNlcjEyMDQwODQ1", "avatar_url": "https://avatars3.githubusercontent.com/u/12040845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdelafon", "html_url": "https://github.com/jdelafon", "followers_url": "https://api.github.com/users/jdelafon/followers", "following_url": "https://api.github.com/users/jdelafon/following{/other_user}", "gists_url": "https://api.github.com/users/jdelafon/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdelafon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdelafon/subscriptions", "organizations_url": "https://api.github.com/users/jdelafon/orgs", "repos_url": "https://api.github.com/users/jdelafon/repos", "events_url": "https://api.github.com/users/jdelafon/events{/privacy}", "received_events_url": "https://api.github.com/users/jdelafon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249498, "node_id": "MDU6TGFiZWwxNjUyNDk0OTg=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-03-17T08:19:07Z", "updated_at": "2016-04-18T07:10:02Z", "closed_at": "2016-04-06T06:22:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "My project has a directory `tests` containing the unit tests I want to run with pytests. It also has a directory `tests_functional`, which I don't want to run continuously.\n\n```\npy.test tests/\n```\n\nwill run only my unit tests, while\n\n```\nptw tests/\n```\n\nwill also run everything in `tests_functional`, even so:\n\n```\n\ufeffptw --ignore ./tests_functional ./tests\n```\n\nI don't see any way to run only what is in the `tests` folder. Moreover, I would expect a pytest extension to gather tests the same way pytest (and `pytest-xdist`) does.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/44", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/44/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/44/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/44", "id": 132421268, "node_id": "MDU6SXNzdWUxMzI0MjEyNjg=", "number": 44, "title": "Rediscover new tests", "user": {"login": "sysradium", "id": 16747951, "node_id": "MDQ6VXNlcjE2NzQ3OTUx", "avatar_url": "https://avatars0.githubusercontent.com/u/16747951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sysradium", "html_url": "https://github.com/sysradium", "followers_url": "https://api.github.com/users/sysradium/followers", "following_url": "https://api.github.com/users/sysradium/following{/other_user}", "gists_url": "https://api.github.com/users/sysradium/gists{/gist_id}", "starred_url": "https://api.github.com/users/sysradium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sysradium/subscriptions", "organizations_url": "https://api.github.com/users/sysradium/orgs", "repos_url": "https://api.github.com/users/sysradium/repos", "events_url": "https://api.github.com/users/sysradium/events{/privacy}", "received_events_url": "https://api.github.com/users/sysradium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249496, "node_id": "MDU6TGFiZWwxNjUyNDk0OTY=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-02-09T13:36:32Z", "updated_at": "2016-04-06T06:10:15Z", "closed_at": "2016-04-06T06:00:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I add a test file when PTW is already running the test is ignored by PTW unless I restart it. \n\nIt seems that you listen on changes for a list of files you gathered on PTW start and do not look for the new ones. Haven't checked the code yet but I think it's so. Maybe we should discover new tests as they appear.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/43", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/43/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/43/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/43", "id": 128396726, "node_id": "MDU6SXNzdWUxMjgzOTY3MjY=", "number": 43, "title": "Might exit silently with exit code 2 (in merge_config)", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249496, "node_id": "MDU6TGFiZWwxNjUyNDk0OTY=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-01-24T13:19:23Z", "updated_at": "2016-02-12T17:12:47Z", "closed_at": "2016-02-12T05:08:42Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "`merge_config` might make `ptw` exit silently with code 2, when there are missing pytest plugins:\n\nRemoving `with silence()` shows this:\n\n> usage: ptw [options] [file_or_dir] [file_or_dir] [...]\n> ptw: error: unrecognized arguments: --reuse-db --dc=Tester\n>   inifile: \u2026/project/setup.cfg\n>   rootdir: \u2026/project/project\n\nSource: https://github.com/joeyespo/pytest-watch/blob/3037f55932634026d7eaedfd958952ad6bf2bc1d/pytest_watch/config.py#L28-L29\n\nIt would be good to display the errors from `py.test` in this case.\n\nThis issue was triggered when I've tried to use `pytest-watch` installed globally using https://github.com/mitsuhiko/pipsi/.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/41", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/41/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/41/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/41", "id": 120580327, "node_id": "MDU6SXNzdWUxMjA1ODAzMjc=", "number": 41, "title": "Allow setting <directories> argument from pytest.ini", "user": {"login": "bendtherules", "id": 3101150, "node_id": "MDQ6VXNlcjMxMDExNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/3101150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bendtherules", "html_url": "https://github.com/bendtherules", "followers_url": "https://api.github.com/users/bendtherules/followers", "following_url": "https://api.github.com/users/bendtherules/following{/other_user}", "gists_url": "https://api.github.com/users/bendtherules/gists{/gist_id}", "starred_url": "https://api.github.com/users/bendtherules/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bendtherules/subscriptions", "organizations_url": "https://api.github.com/users/bendtherules/orgs", "repos_url": "https://api.github.com/users/bendtherules/repos", "events_url": "https://api.github.com/users/bendtherules/events{/privacy}", "received_events_url": "https://api.github.com/users/bendtherules/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-05T19:03:41Z", "updated_at": "2015-12-20T04:14:50Z", "closed_at": "2015-12-20T04:14:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Repost from my code [comment](https://github.com/joeyespo/pytest-watch/commit/7c75e25664e41921a5055bc71b23a28981206882#commitcomment-14795948)\n\n`<directories>` option which can be in cmdline cant be set from pytest.ini as the cmdline arguments which don't start with `--` dont get overloaded from ini.\n\nThere should be a way to do that.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/40", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/40/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/40/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/40", "id": 120544878, "node_id": "MDU6SXNzdWUxMjA1NDQ4Nzg=", "number": 40, "title": "ini path collected doesnt respect pytest options -c and [file_or_dir]", "user": {"login": "bendtherules", "id": 3101150, "node_id": "MDQ6VXNlcjMxMDExNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/3101150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bendtherules", "html_url": "https://github.com/bendtherules", "followers_url": "https://api.github.com/users/bendtherules/followers", "following_url": "https://api.github.com/users/bendtherules/following{/other_user}", "gists_url": "https://api.github.com/users/bendtherules/gists{/gist_id}", "starred_url": "https://api.github.com/users/bendtherules/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bendtherules/subscriptions", "organizations_url": "https://api.github.com/users/bendtherules/orgs", "repos_url": "https://api.github.com/users/bendtherules/repos", "events_url": "https://api.github.com/users/bendtherules/events{/privacy}", "received_events_url": "https://api.github.com/users/bendtherules/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249496, "node_id": "MDU6TGFiZWwxNjUyNDk0OTY=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-12-05T10:13:31Z", "updated_at": "2016-04-06T05:58:54Z", "closed_at": "2016-04-06T05:58:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "From pytest docs:\n\n> usage: `py.test [options] [file_or_dir] [file_or_dir] [...]`\n> \n> positional arguments:\n>   file_or_dir\n> \n> general:\n>   `-c file` - load configuration from `file` instead of trying to locate one of the implicit configuration files.\n\nBoth the `file_or_dir` and `-c` options, when supplied can effectively change the directory tests get loaded from.\n`ptw` should also try to locate `pytest.ini` file from there, which it doesnt as the args list is not passed while locating ini path. Maybe we should do that?\n## Soln 1: Pass whole arg list, alongwith `--collect-only`\n\nOne problem is that some plugins (like pytest-cov ) are a bit odd (or, maybe they have some reason) and don't respect the `--collect-only` flag. So, if we do add all args, it might not be as much a dry-run as we would like it to be and have side-effects (like, pytest-cov generates coverage of tests collected ). \nOn other hand, it might not be too much of side-effect, as we are going to run the tests anyway in the next step. But we should still mention this in docs, lest someone wants to disable this.\n## Soln 2: Parse its arg list and only pass in this two options\n\nMost desirable result. But parsing and trying to guess the important parameters makes `ptw` less robust and prone to `pytest` changes, not to mention the code repetition from pytest\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/39", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/39/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/39/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/39", "id": 120527183, "node_id": "MDU6SXNzdWUxMjA1MjcxODM=", "number": 39, "title": "Show which file has changed instead of just 'Changes detected'", "user": {"login": "joeyespo", "id": 634573, "node_id": "MDQ6VXNlcjYzNDU3Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/634573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joeyespo", "html_url": "https://github.com/joeyespo", "followers_url": "https://api.github.com/users/joeyespo/followers", "following_url": "https://api.github.com/users/joeyespo/following{/other_user}", "gists_url": "https://api.github.com/users/joeyespo/gists{/gist_id}", "starred_url": "https://api.github.com/users/joeyespo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joeyespo/subscriptions", "organizations_url": "https://api.github.com/users/joeyespo/orgs", "repos_url": "https://api.github.com/users/joeyespo/repos", "events_url": "https://api.github.com/users/joeyespo/events{/privacy}", "received_events_url": "https://api.github.com/users/joeyespo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249498, "node_id": "MDU6TGFiZWwxNjUyNDk0OTg=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-12-05T04:04:16Z", "updated_at": "2016-04-06T05:58:53Z", "closed_at": "2016-04-06T05:58:53Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/38", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/38/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/38/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/38", "id": 120519547, "node_id": "MDU6SXNzdWUxMjA1MTk1NDc=", "number": 38, "title": "Loops endlessly after one change was detected in Boxcryptor environment", "user": {"login": "FichteFoll", "id": 931051, "node_id": "MDQ6VXNlcjkzMTA1MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/931051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FichteFoll", "html_url": "https://github.com/FichteFoll", "followers_url": "https://api.github.com/users/FichteFoll/followers", "following_url": "https://api.github.com/users/FichteFoll/following{/other_user}", "gists_url": "https://api.github.com/users/FichteFoll/gists{/gist_id}", "starred_url": "https://api.github.com/users/FichteFoll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FichteFoll/subscriptions", "organizations_url": "https://api.github.com/users/FichteFoll/orgs", "repos_url": "https://api.github.com/users/FichteFoll/repos", "events_url": "https://api.github.com/users/FichteFoll/events{/privacy}", "received_events_url": "https://api.github.com/users/FichteFoll/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2015-12-05T01:38:41Z", "updated_at": "2016-04-08T16:56:12Z", "closed_at": "2015-12-05T14:03:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just tried this on my project and it looks good initially. However, once I _update_ any file (i.e. re-save), pytest-watch just performs test after test after test ... until I ctrl-c.\n\nIt should definitely not do that.\n\nThere is either a loop in the tool itself or it detects changes to files that are generated during the build process and thus always attempts to rebuild.\n\nThe latter is unlikely however since it does not start looping until the very first change is detected. Furthermore, I checked which files had changed in the directory since the \"original\" run of pytest-watch and it was only the file I actually did change and its corresponding `__pycache__/*.pyc` file. And that file is very likely not regenerated if the source file didn't change either.\n\nIt would be nice if the changed file was displayed in the console before the command is rerun.\n\nEnvironment:\nWindows7, Python 3.5.0 (64-bit), pytest 2.8.3, py 1.4.31, pytest-watch 3.8.0, watchdog 0.8.3\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/36", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/36/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/36/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/36", "id": 120469751, "node_id": "MDU6SXNzdWUxMjA0Njk3NTE=", "number": 36, "title": "Wait for the previous pytest process to exit before re-running", "user": {"login": "joeyespo", "id": 634573, "node_id": "MDQ6VXNlcjYzNDU3Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/634573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joeyespo", "html_url": "https://github.com/joeyespo", "followers_url": "https://api.github.com/users/joeyespo/followers", "following_url": "https://api.github.com/users/joeyespo/following{/other_user}", "gists_url": "https://api.github.com/users/joeyespo/gists{/gist_id}", "starred_url": "https://api.github.com/users/joeyespo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joeyespo/subscriptions", "organizations_url": "https://api.github.com/users/joeyespo/orgs", "repos_url": "https://api.github.com/users/joeyespo/repos", "events_url": "https://api.github.com/users/joeyespo/events{/privacy}", "received_events_url": "https://api.github.com/users/joeyespo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249498, "node_id": "MDU6TGFiZWwxNjUyNDk0OTg=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-12-04T19:28:18Z", "updated_at": "2016-04-06T05:56:51Z", "closed_at": "2016-04-06T05:56:51Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The proposal is to send `SIGTERM` to the pytest process when pytest-watch observes a file change. It'll then wait for the process to finish before starting the new cycle.\n\nThis will solve #23 as well as any other quirky behavior that comes from having two pytest instances running the same test suite.\n\nThis could also help with #21. The underlying question is what to do when a test initiates an interactive session like `pdb`. If `pdb` ignores our termination signal, we're done. If not, we may also need a `--full` CLI argument to tell pytest-watch to wait out the full test session before starting the new one. Similar to how pytest [automatically adds](https://pytest.org/latest/usage.html#setting-a-breakpoint-aka-set-trace) `-s` when you use `--pdb`, pytest-watch can automatically add `--full` when `--pdb` is present in pytest's argument list or in the config file.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/35", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/35/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/35/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/35", "id": 120433808, "node_id": "MDU6SXNzdWUxMjA0MzM4MDg=", "number": 35, "title": "Document all CLI options in the Readme", "user": {"login": "joeyespo", "id": 634573, "node_id": "MDQ6VXNlcjYzNDU3Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/634573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joeyespo", "html_url": "https://github.com/joeyespo", "followers_url": "https://api.github.com/users/joeyespo/followers", "following_url": "https://api.github.com/users/joeyespo/following{/other_user}", "gists_url": "https://api.github.com/users/joeyespo/gists{/gist_id}", "starred_url": "https://api.github.com/users/joeyespo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joeyespo/subscriptions", "organizations_url": "https://api.github.com/users/joeyespo/orgs", "repos_url": "https://api.github.com/users/joeyespo/repos", "events_url": "https://api.github.com/users/joeyespo/events{/privacy}", "received_events_url": "https://api.github.com/users/joeyespo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 229991042, "node_id": "MDU6TGFiZWwyMjk5OTEwNDI=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/readme", "name": "readme", "color": "d7e102", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-04T16:14:40Z", "updated_at": "2016-04-10T21:08:53Z", "closed_at": "2016-04-10T21:08:53Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Some of them, like `--runner`, could use a better description and some examples.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/34", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/34/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/34/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/34", "id": 120425062, "node_id": "MDU6SXNzdWUxMjA0MjUwNjI=", "number": 34, "title": "Evaluate good module for creating test directory structures", "user": {"login": "bendtherules", "id": 3101150, "node_id": "MDQ6VXNlcjMxMDExNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/3101150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bendtherules", "html_url": "https://github.com/bendtherules", "followers_url": "https://api.github.com/users/bendtherules/followers", "following_url": "https://api.github.com/users/bendtherules/following{/other_user}", "gists_url": "https://api.github.com/users/bendtherules/gists{/gist_id}", "starred_url": "https://api.github.com/users/bendtherules/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bendtherules/subscriptions", "organizations_url": "https://api.github.com/users/bendtherules/orgs", "repos_url": "https://api.github.com/users/bendtherules/repos", "events_url": "https://api.github.com/users/bendtherules/events{/privacy}", "received_events_url": "https://api.github.com/users/bendtherules/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-12-04T15:32:19Z", "updated_at": "2015-12-04T19:38:25Z", "closed_at": "2015-12-04T18:58:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'd really like to add some tests for the ini_config code first.\n\nFor that, we need a easy way of creating directory structures with some content filled in some files, somewhat like [what can be done in cloud-init config files](https://www.digitalocean.com/community/tutorials/an-introduction-to-cloud-config-scripting#write-files-to-the-disk). Cloud-init seems too heavy and unix-specific. There is also Cloudbase-init for Windows.\n\nWe could write separate helpers for this, but it is better to shop for good modules instead. This are the ones I could find easily : [testdata](https://github.com/Jaymon/testdata) and [pyboiler](https://github.com/Link-/pyboiler). Also, this blog post (http://btmiller.com/2015/03/17/represent-file-structure-as-yaml-with-python.html) can be a starting point\n\nNone of them can set the file contents though.\n\nWe need to choose one, that will also be used in other tests.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/32", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/32/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/32/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/32", "id": 120186360, "node_id": "MDU6SXNzdWUxMjAxODYzNjA=", "number": 32, "title": "Add --onstart similar to --onexit", "user": {"login": "bendtherules", "id": 3101150, "node_id": "MDQ6VXNlcjMxMDExNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/3101150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bendtherules", "html_url": "https://github.com/bendtherules", "followers_url": "https://api.github.com/users/bendtherules/followers", "following_url": "https://api.github.com/users/bendtherules/following{/other_user}", "gists_url": "https://api.github.com/users/bendtherules/gists{/gist_id}", "starred_url": "https://api.github.com/users/bendtherules/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bendtherules/subscriptions", "organizations_url": "https://api.github.com/users/bendtherules/orgs", "repos_url": "https://api.github.com/users/bendtherules/repos", "events_url": "https://api.github.com/users/bendtherules/events{/privacy}", "received_events_url": "https://api.github.com/users/bendtherules/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 295159414, "node_id": "MDU6TGFiZWwyOTUxNTk0MTQ=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/out-of-scope", "name": "out-of-scope", "color": "e6e6e6", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-03T14:43:36Z", "updated_at": "2015-12-04T05:20:38Z", "closed_at": "2015-12-04T01:36:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "ptw currently has `--onexit`, but no `--onstart` - There should be no reason for this asymmetrical design. There is already `--beforerun`, but it is run before every run of pytest and so, isn't a good candidate for initialising something just once.\n\nIt can be useful for starting things like a external notifier, which wants to run for the whole duration of ptw.\n\nAdding it should be trivial.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/29", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/29/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/29/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/29", "id": 119411252, "node_id": "MDU6SXNzdWUxMTk0MTEyNTI=", "number": 29, "title": "Add some documentation for extra parameters", "user": {"login": "bendtherules", "id": 3101150, "node_id": "MDQ6VXNlcjMxMDExNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/3101150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bendtherules", "html_url": "https://github.com/bendtherules", "followers_url": "https://api.github.com/users/bendtherules/followers", "following_url": "https://api.github.com/users/bendtherules/following{/other_user}", "gists_url": "https://api.github.com/users/bendtherules/gists{/gist_id}", "starred_url": "https://api.github.com/users/bendtherules/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bendtherules/subscriptions", "organizations_url": "https://api.github.com/users/bendtherules/orgs", "repos_url": "https://api.github.com/users/bendtherules/repos", "events_url": "https://api.github.com/users/bendtherules/events{/privacy}", "received_events_url": "https://api.github.com/users/bendtherules/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249497, "node_id": "MDU6TGFiZWwxNjUyNDk0OTc=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-11-30T03:08:54Z", "updated_at": "2015-12-04T17:45:33Z", "closed_at": "2015-12-04T17:11:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Optional parameters like \"-ignore\" or others don't seem to be documented right now. Atleast, I was not able to find it. So, it will be better to put it in the readme.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/24", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/24/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/24/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/24", "id": 104901984, "node_id": "MDU6SXNzdWUxMDQ5MDE5ODQ=", "number": 24, "title": "Hook to be run before running pytest / configure py.test command", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 196158832, "node_id": "MDU6TGFiZWwxOTYxNTg4MzI=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/contributor-friendly", "name": "contributor-friendly", "color": "207de5", "default": false, "description": null}, {"id": 165249498, "node_id": "MDU6TGFiZWwxNjUyNDk0OTg=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-09-04T14:34:18Z", "updated_at": "2015-09-16T01:56:47Z", "closed_at": "2015-09-16T01:56:47Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Instead of only calling `py.test`, it would be nice to be able to configure some hook to be run before it.\n\nThe workaround appears to be creaating a `py.test` wrapper script that would do this, and prepend it via $PATH.  But it would be more comfortable to configure the path to `py.test` itself, which could be this wrapper script then.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/23", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/23/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/23/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/23", "id": 103724950, "node_id": "MDU6SXNzdWUxMDM3MjQ5NTA=", "number": 23, "title": "Running with django", "user": {"login": "Glueon", "id": 11168720, "node_id": "MDQ6VXNlcjExMTY4NzIw", "avatar_url": "https://avatars3.githubusercontent.com/u/11168720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Glueon", "html_url": "https://github.com/Glueon", "followers_url": "https://api.github.com/users/Glueon/followers", "following_url": "https://api.github.com/users/Glueon/following{/other_user}", "gists_url": "https://api.github.com/users/Glueon/gists{/gist_id}", "starred_url": "https://api.github.com/users/Glueon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Glueon/subscriptions", "organizations_url": "https://api.github.com/users/Glueon/orgs", "repos_url": "https://api.github.com/users/Glueon/repos", "events_url": "https://api.github.com/users/Glueon/events{/privacy}", "received_events_url": "https://api.github.com/users/Glueon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249497, "node_id": "MDU6TGFiZWwxNjUyNDk0OTc=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-08-28T14:08:47Z", "updated_at": "2015-12-04T19:30:22Z", "closed_at": "2015-12-04T19:30:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is an issue with pytest-watch running with django. I think it is related to the https://github.com/joeyespo/pytest-watch/issues/21 issue.\n\nWhile developing a django project sometims I get `test database already exists` when using pytest-watch. I think it's because pytest-watch in some circumstances launches second py.test copy. So we need some sort of locking mechanism, because otherwise it's really hard to use.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/22", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/22/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/22/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/22", "id": 96163349, "node_id": "MDU6SXNzdWU5NjE2MzM0OQ==", "number": 22, "title": "Provide data about failed tests for onfail callback", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249498, "node_id": "MDU6TGFiZWwxNjUyNDk0OTg=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-07-20T21:22:22Z", "updated_at": "2015-12-02T06:28:32Z", "closed_at": "2015-12-02T06:28:25Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "It would be useful to have the name of failed tests available with the `--onfail` callback, e.g. in an environment variable.\n\nThis could be captured from `subprocess.call` and then parsed.  Although that probably means to force / require specific options to `py.test` to get a useful short test summary, i.e. `-rfEsxXw`.\n\nI could imagine using a `py.test` hook for this though: when pytest-watch is used as a plugin, it could capture this data itself.\n\nThe data would be useful to easily open the failing test in your editor, without having to copy'n'paste it (although this can be quite easy with a plugin like https://github.com/kopischke/vim-fetch already).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/21", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/21/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/21/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/21", "id": 94184610, "node_id": "MDU6SXNzdWU5NDE4NDYxMA==", "number": 21, "title": "pytest-watch with debugger", "user": {"login": "Glueon", "id": 11168720, "node_id": "MDQ6VXNlcjExMTY4NzIw", "avatar_url": "https://avatars3.githubusercontent.com/u/11168720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Glueon", "html_url": "https://github.com/Glueon", "followers_url": "https://api.github.com/users/Glueon/followers", "following_url": "https://api.github.com/users/Glueon/following{/other_user}", "gists_url": "https://api.github.com/users/Glueon/gists{/gist_id}", "starred_url": "https://api.github.com/users/Glueon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Glueon/subscriptions", "organizations_url": "https://api.github.com/users/Glueon/orgs", "repos_url": "https://api.github.com/users/Glueon/repos", "events_url": "https://api.github.com/users/Glueon/events{/privacy}", "received_events_url": "https://api.github.com/users/Glueon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249498, "node_id": "MDU6TGFiZWwxNjUyNDk0OTg=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2015-07-10T00:46:51Z", "updated_at": "2016-04-06T05:56:48Z", "closed_at": "2016-04-06T05:56:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Quite often I invoke pytest with the `--ipdb` option so I could see what is wrong with my code on first failure.\n\nSo I invkoed pytest-watch with `ptw -- --ipdb`. The problem is that if after droping into ipdb I modify a test or a file it starts a new session and the one with ipdb console goes to the background. In the end I end up with dozens of ipdb instances running.\n\nIs it possible to block ptw if current session has dropped to the ipdb?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/20", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/20/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/20/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/20", "id": 93532808, "node_id": "MDU6SXNzdWU5MzUzMjgwOA==", "number": 20, "title": "Suggestion: use global (/local) config file for default settings", "user": {"login": "aldanor", "id": 2418513, "node_id": "MDQ6VXNlcjI0MTg1MTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2418513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldanor", "html_url": "https://github.com/aldanor", "followers_url": "https://api.github.com/users/aldanor/followers", "following_url": "https://api.github.com/users/aldanor/following{/other_user}", "gists_url": "https://api.github.com/users/aldanor/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldanor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldanor/subscriptions", "organizations_url": "https://api.github.com/users/aldanor/orgs", "repos_url": "https://api.github.com/users/aldanor/repos", "events_url": "https://api.github.com/users/aldanor/events{/privacy}", "received_events_url": "https://api.github.com/users/aldanor/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249498, "node_id": "MDU6TGFiZWwxNjUyNDk0OTg=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 165249499, "node_id": "MDU6TGFiZWwxNjUyNDk0OTk=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-07-07T13:42:02Z", "updated_at": "2015-12-04T19:01:25Z", "closed_at": "2015-12-04T18:52:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Just an idea.\n\nI found myself using the same set of options over and over, e.g. like so:\n\n``` sh\n$ ptw --nobeep --poll --ignore=.tox -- \\\n    --import . tests -sv \\\n    --cov=some.package --cov-report=term \\\n    --cov-report=html --cov-config=tox.ini\n```\n\nMaybe we could support loading the defaults from `~/.ptwrc` which could look like this\n\n``` ini\n[pytest-watch]\nnobeep = true\npoll = true\nignore = .tox\naddopts = --import . --cov-report=term --cov-report=html --cov-config=tox.ini -sv\n```\n\nand then the command above would be shortened to just\n\n``` sh\n$ ptw -- --cov=some.package  # default options, with coverage\n$ ptw                        # default options, no coverage\n```\n\nMaybe it could also look for a local `./.ptwrc` file first (in the current folder).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/15", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/15/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/15/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/15", "id": 89848508, "node_id": "MDU6SXNzdWU4OTg0ODUwOA==", "number": 15, "title": "File changes are not being picked up by pytest", "user": {"login": "joeyespo", "id": 634573, "node_id": "MDQ6VXNlcjYzNDU3Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/634573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joeyespo", "html_url": "https://github.com/joeyespo", "followers_url": "https://api.github.com/users/joeyespo/followers", "following_url": "https://api.github.com/users/joeyespo/following{/other_user}", "gists_url": "https://api.github.com/users/joeyespo/gists{/gist_id}", "starred_url": "https://api.github.com/users/joeyespo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joeyespo/subscriptions", "organizations_url": "https://api.github.com/users/joeyespo/orgs", "repos_url": "https://api.github.com/users/joeyespo/repos", "events_url": "https://api.github.com/users/joeyespo/events{/privacy}", "received_events_url": "https://api.github.com/users/joeyespo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249496, "node_id": "MDU6TGFiZWwxNjUyNDk0OTY=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-06-21T01:58:23Z", "updated_at": "2015-06-28T19:28:21Z", "closed_at": "2015-06-28T19:26:34Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Ever since switching to use `py.test`, the test files are being cached. Possibly because pytest is using `import` to load and run the tests with? Here's [the related Pytest issue](https://github.com/pytest-dev/pytest/issues/793).\n\nIf it can be fixed there, we can continue on. If not, we'll have to go back to using [the `shell=True` approach](https://github.com/aldanor/pytest-watch/commit/dc066e212dbbbf03af74162f9d449c5866a87e2b) or see what else we can do to be sure arguments are quoted properly in a cross-platform way.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/13", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/13/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/13/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/13", "id": 88055702, "node_id": "MDU6SXNzdWU4ODA1NTcwMg==", "number": 13, "title": "Improve `--ignore`", "user": {"login": "joeyespo", "id": 634573, "node_id": "MDQ6VXNlcjYzNDU3Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/634573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joeyespo", "html_url": "https://github.com/joeyespo", "followers_url": "https://api.github.com/users/joeyespo/followers", "following_url": "https://api.github.com/users/joeyespo/following{/other_user}", "gists_url": "https://api.github.com/users/joeyespo/gists{/gist_id}", "starred_url": "https://api.github.com/users/joeyespo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joeyespo/subscriptions", "organizations_url": "https://api.github.com/users/joeyespo/orgs", "repos_url": "https://api.github.com/users/joeyespo/repos", "events_url": "https://api.github.com/users/joeyespo/events{/privacy}", "received_events_url": "https://api.github.com/users/joeyespo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249498, "node_id": "MDU6TGFiZWwxNjUyNDk0OTg=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2015-06-13T19:54:14Z", "updated_at": "2016-04-06T06:30:44Z", "closed_at": "2016-04-06T06:30:44Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Let's continue [the discussion](https://github.com/aldanor/pytest-watch/commit/b4135b7bacb062e4d44d038c6a9cf7a5d93b3c07#commitcomment-11399716) on how to improve the [current](https://github.com/aldanor/pytest-watch/commit/2181ce29f2eeff4fc3b4aa59f512c5086c325814) single-level `--ignore` (alternatively, `--norecursedirs`). #6 was the original issue.\n#### Summary\n\nThe core problem is that we need a way to exclude directory trees from the watch list. If we don't, `ptw` can crawl to a halt walking the entire tree or worse, use up the system's file resources.\n\nNot all operating systems handle recursive watching natively, so using solutions like [inotify](http://linux.die.net/man/1/inotifywait) (Linux) and [kqueues](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man2/kqueue.2.html) (Mac) adds a new watch to each subdirectory instead of just one at the root. (Note that some systems do, like the Windows API and Mac's [FSEvents](https://developer.apple.com/library/mac/documentation/Darwin/Reference/FSEvents_Ref/).)\n\nSo we need to balance simplicity and efficiency. As mentioned above, not all platforms need a custom recursive solution, so using one in those cases hurts instead of helps.\n\nAnother idea is to shop around. If watchdog or another 3rd-party library exposes an efficient cross-platform solution (recursive watching/ignoring on Linux, and `PatternMatchingEventHandler` or a regex solution like #7 for Windows and Mac), we could pass it along instead of re-implementing it.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/12", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/12/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/12/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/12", "id": 86384697, "node_id": "MDU6SXNzdWU4NjM4NDY5Nw==", "number": 12, "title": "Suite reruns few times", "user": {"login": "Glueon", "id": 11168720, "node_id": "MDQ6VXNlcjExMTY4NzIw", "avatar_url": "https://avatars3.githubusercontent.com/u/11168720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Glueon", "html_url": "https://github.com/Glueon", "followers_url": "https://api.github.com/users/Glueon/followers", "following_url": "https://api.github.com/users/Glueon/following{/other_user}", "gists_url": "https://api.github.com/users/Glueon/gists{/gist_id}", "starred_url": "https://api.github.com/users/Glueon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Glueon/subscriptions", "organizations_url": "https://api.github.com/users/Glueon/orgs", "repos_url": "https://api.github.com/users/Glueon/repos", "events_url": "https://api.github.com/users/Glueon/events{/privacy}", "received_events_url": "https://api.github.com/users/Glueon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249498, "node_id": "MDU6TGFiZWwxNjUyNDk0OTg=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2015-06-09T00:28:22Z", "updated_at": "2015-06-28T19:29:56Z", "closed_at": "2015-06-13T19:50:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "If it's important I am using pytest-watch with https://github.com/pytest-dev/pytest-incremental.\n\nWhen I update any source file sometimes pytest-watch reruns test twice, sometimes even three times. Is it a problem or a feature?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/9", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/9/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/9/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/9", "id": 73657097, "node_id": "MDU6SXNzdWU3MzY1NzA5Nw==", "number": 9, "title": "Added feature to poll files for help with virtual machines/docker", "user": {"login": "carsongee", "id": 596029, "node_id": "MDQ6VXNlcjU5NjAyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/596029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carsongee", "html_url": "https://github.com/carsongee", "followers_url": "https://api.github.com/users/carsongee/followers", "following_url": "https://api.github.com/users/carsongee/following{/other_user}", "gists_url": "https://api.github.com/users/carsongee/gists{/gist_id}", "starred_url": "https://api.github.com/users/carsongee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carsongee/subscriptions", "organizations_url": "https://api.github.com/users/carsongee/orgs", "repos_url": "https://api.github.com/users/carsongee/repos", "events_url": "https://api.github.com/users/carsongee/events{/privacy}", "received_events_url": "https://api.github.com/users/carsongee/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249498, "node_id": "MDU6TGFiZWwxNjUyNDk0OTg=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-05-06T15:30:19Z", "updated_at": "2015-06-28T19:31:22Z", "closed_at": "2015-05-08T17:02:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We do a lot of our development in docker, and the events for changed files are generated in the host OS instead of inside docker, so ptw doesn't see that files have changed.  Do you have any interest in adding a polling option, that will just scan the folder for modified file times and trigger tests?  I may be able to write the code if you are.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/8", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/8/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/8/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/8", "id": 66513116, "node_id": "MDU6SXNzdWU2NjUxMzExNg==", "number": 8, "title": "Add a way to pass parameters to pytest", "user": {"login": "joeyespo", "id": 634573, "node_id": "MDQ6VXNlcjYzNDU3Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/634573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joeyespo", "html_url": "https://github.com/joeyespo", "followers_url": "https://api.github.com/users/joeyespo/followers", "following_url": "https://api.github.com/users/joeyespo/following{/other_user}", "gists_url": "https://api.github.com/users/joeyespo/gists{/gist_id}", "starred_url": "https://api.github.com/users/joeyespo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joeyespo/subscriptions", "organizations_url": "https://api.github.com/users/joeyespo/orgs", "repos_url": "https://api.github.com/users/joeyespo/repos", "events_url": "https://api.github.com/users/joeyespo/events{/privacy}", "received_events_url": "https://api.github.com/users/joeyespo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 196158832, "node_id": "MDU6TGFiZWwxOTYxNTg4MzI=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/contributor-friendly", "name": "contributor-friendly", "color": "207de5", "default": false, "description": null}, {"id": 165249498, "node_id": "MDU6TGFiZWwxNjUyNDk0OTg=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-04-06T03:04:49Z", "updated_at": "2015-06-14T21:05:58Z", "closed_at": "2015-06-13T19:38:44Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Perhaps with `--`. For example:\n\n``` bash\n$ pytest-watch -- -x\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/6", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/6/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/6/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/6", "id": 65561145, "node_id": "MDU6SXNzdWU2NTU2MTE0NQ==", "number": 6, "title": "Cannot specify excluded directory patterns", "user": {"login": "poulter7", "id": 239458, "node_id": "MDQ6VXNlcjIzOTQ1OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/239458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poulter7", "html_url": "https://github.com/poulter7", "followers_url": "https://api.github.com/users/poulter7/followers", "following_url": "https://api.github.com/users/poulter7/following{/other_user}", "gists_url": "https://api.github.com/users/poulter7/gists{/gist_id}", "starred_url": "https://api.github.com/users/poulter7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poulter7/subscriptions", "organizations_url": "https://api.github.com/users/poulter7/orgs", "repos_url": "https://api.github.com/users/poulter7/repos", "events_url": "https://api.github.com/users/poulter7/events{/privacy}", "received_events_url": "https://api.github.com/users/poulter7/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249498, "node_id": "MDU6TGFiZWwxNjUyNDk0OTg=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-03-31T22:32:38Z", "updated_at": "2015-06-14T21:06:39Z", "closed_at": "2015-06-13T19:48:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "If possible I'd like to add a new flag to pytest-watch --nowatchdirs, which matches up with the naming of --norecursedirs, in pytest.\n\nI've been looking at http://hypothesis.readthedocs.org/en/latest/, a quickcheck tool, which automatically generates random inputs to test functions to ultimately make more robust software, part of its processing involves creating modules on-the-fly. Hypothesis creates modules on the fly at the root of the main pytest running process and therefore pytest-watch picks up on the new modules as they are created and pytest-watch never stops.\n\nIf I could include:\n--nowatchdirs \".hypothesis\"\n\nThis would allow for such operation. Do you have any thoughts?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/5", "repository_url": "https://api.github.com/repos/joeyespo/pytest-watch", "labels_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/5/comments", "events_url": "https://api.github.com/repos/joeyespo/pytest-watch/issues/5/events", "html_url": "https://github.com/joeyespo/pytest-watch/issues/5", "id": 56948737, "node_id": "MDU6SXNzdWU1Njk0ODczNw==", "number": 5, "title": "multiple directories support", "user": {"login": "rakjin", "id": 1859026, "node_id": "MDQ6VXNlcjE4NTkwMjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1859026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakjin", "html_url": "https://github.com/rakjin", "followers_url": "https://api.github.com/users/rakjin/followers", "following_url": "https://api.github.com/users/rakjin/following{/other_user}", "gists_url": "https://api.github.com/users/rakjin/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakjin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakjin/subscriptions", "organizations_url": "https://api.github.com/users/rakjin/orgs", "repos_url": "https://api.github.com/users/rakjin/repos", "events_url": "https://api.github.com/users/rakjin/events{/privacy}", "received_events_url": "https://api.github.com/users/rakjin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 165249498, "node_id": "MDU6TGFiZWwxNjUyNDk0OTg=", "url": "https://api.github.com/repos/joeyespo/pytest-watch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-02-08T11:45:02Z", "updated_at": "2015-06-28T19:31:33Z", "closed_at": "2015-06-13T19:40:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be great if:\n\n```\nptw [options] [<directory> ...]\n```\n\nrather than:\n\n```\nptw [options] [<directory>]\n```\n\nI managed to [patch](https://github.com/rakjin/pytest-watch/commit/0aa5b27afa291ebd3c58b6b15ce814153e1c3a2f) this for my personal use.\nBut I hope this could be done in simpler way with `plugin`.\nHow about changing your main logic\n- from wrapping around and system-calling `py.test ...`\n- to being a `pytest-plugin` and adding `entry_points={ 'pytest11': ... }` to your `setup.py`? (like other `pytest-something` plugins do)\n\nAnyway, this is my wish:\n\n```\npy.test --watch --onfail='...' --onpass='...' tests\n```\n\nfor watching and testing `tests/`, or\n\n```\npy.test --watch-dir=mypackage --onfail='...' --onpass='...' tests examples\n```\n\nfor watching `mypackage/` but testing `tests/` and `examples/`.\nOr some better interface could be possible...\n\nThanks for reading this and releasing v2!\n", "performed_via_github_app": null, "score": 1.0}]}