{"total_count": 9, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/omnilib/aioitertools/issues/22", "repository_url": "https://api.github.com/repos/omnilib/aioitertools", "labels_url": "https://api.github.com/repos/omnilib/aioitertools/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/omnilib/aioitertools/issues/22/comments", "events_url": "https://api.github.com/repos/omnilib/aioitertools/issues/22/events", "html_url": "https://github.com/omnilib/aioitertools/issues/22", "id": 612694601, "node_id": "MDU6SXNzdWU2MTI2OTQ2MDE=", "number": 22, "title": "min max missing?", "user": {"login": "diefans", "id": 513316, "node_id": "MDQ6VXNlcjUxMzMxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/513316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diefans", "html_url": "https://github.com/diefans", "followers_url": "https://api.github.com/users/diefans/followers", "following_url": "https://api.github.com/users/diefans/following{/other_user}", "gists_url": "https://api.github.com/users/diefans/gists{/gist_id}", "starred_url": "https://api.github.com/users/diefans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diefans/subscriptions", "organizations_url": "https://api.github.com/users/diefans/orgs", "repos_url": "https://api.github.com/users/diefans/repos", "events_url": "https://api.github.com/users/diefans/events{/privacy}", "received_events_url": "https://api.github.com/users/diefans/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 976098190, "node_id": "MDU6TGFiZWw5NzYwOTgxOTA=", "url": "https://api.github.com/repos/omnilib/aioitertools/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}, {"id": 976098192, "node_id": "MDU6TGFiZWw5NzYwOTgxOTI=", "url": "https://api.github.com/repos/omnilib/aioitertools/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Good for newcomers"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-05T15:31:33Z", "updated_at": "2020-05-06T07:08:06Z", "closed_at": "2020-05-06T03:02:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Description\r\nI was expecting `min` and `max` to be available since `sum` is also there\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/omnilib/aioitertools/issues/20", "repository_url": "https://api.github.com/repos/omnilib/aioitertools", "labels_url": "https://api.github.com/repos/omnilib/aioitertools/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/omnilib/aioitertools/issues/20/comments", "events_url": "https://api.github.com/repos/omnilib/aioitertools/issues/20/events", "html_url": "https://github.com/omnilib/aioitertools/issues/20", "id": 603635195, "node_id": "MDU6SXNzdWU2MDM2MzUxOTU=", "number": 20, "title": "Package description is wrong", "user": {"login": "dimaqq", "id": 662249, "node_id": "MDQ6VXNlcjY2MjI0OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/662249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dimaqq", "html_url": "https://github.com/dimaqq", "followers_url": "https://api.github.com/users/dimaqq/followers", "following_url": "https://api.github.com/users/dimaqq/following{/other_user}", "gists_url": "https://api.github.com/users/dimaqq/gists{/gist_id}", "starred_url": "https://api.github.com/users/dimaqq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dimaqq/subscriptions", "organizations_url": "https://api.github.com/users/dimaqq/orgs", "repos_url": "https://api.github.com/users/dimaqq/repos", "events_url": "https://api.github.com/users/dimaqq/events{/privacy}", "received_events_url": "https://api.github.com/users/dimaqq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-21T01:18:43Z", "updated_at": "2020-04-21T02:24:16Z", "closed_at": "2020-04-21T02:24:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Moved from https://github.com/python-poetry/poetry/issues/2332\r\n\r\nLooks like that comes from the package tarball itself `aioitertools-0.6.0.tar.gz`\r\n\r\n```\r\nName: aioitertools\r\nVersion: 0.6.0\r\nSummary: asyncio version of the standard multiprocessing module\r\nHome-page: https://github.com/jreese/aioitertools\r\nAuthor: John Reese\r\nAuthor-email: john@noswap.com\r\nLicense: MIT\r\nDescription: aioitertools\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/omnilib/aioitertools/issues/15", "repository_url": "https://api.github.com/repos/omnilib/aioitertools", "labels_url": "https://api.github.com/repos/omnilib/aioitertools/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/omnilib/aioitertools/issues/15/comments", "events_url": "https://api.github.com/repos/omnilib/aioitertools/issues/15/events", "html_url": "https://github.com/omnilib/aioitertools/issues/15", "id": 515233165, "node_id": "MDU6SXNzdWU1MTUyMzMxNjU=", "number": 15, "title": "Platform independent encoding on setup.py", "user": {"login": "an-death", "id": 11311217, "node_id": "MDQ6VXNlcjExMzExMjE3", "avatar_url": "https://avatars1.githubusercontent.com/u/11311217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/an-death", "html_url": "https://github.com/an-death", "followers_url": "https://api.github.com/users/an-death/followers", "following_url": "https://api.github.com/users/an-death/following{/other_user}", "gists_url": "https://api.github.com/users/an-death/gists{/gist_id}", "starred_url": "https://api.github.com/users/an-death/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/an-death/subscriptions", "organizations_url": "https://api.github.com/users/an-death/orgs", "repos_url": "https://api.github.com/users/an-death/repos", "events_url": "https://api.github.com/users/an-death/events{/privacy}", "received_events_url": "https://api.github.com/users/an-death/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-31T07:52:06Z", "updated_at": "2019-11-01T04:19:40Z", "closed_at": "2019-11-01T04:19:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Description\r\nPython `open()`  use by default  `locale.getpreferredencoding()` which leads to the problem of installing the package in an uncontrolled environment (build agent for example)\r\n\r\nSee: [stackoverflow](https://stackoverflow.com/questions/36303919/python-3-0-open-default-encoding) and [open](https://docs.python.org/3.7/library/functions.html#open)\r\n\r\nInstead of using default encoding, should set the UTF-8 in `setup.py` \r\n```python\r\nwith open(file, encoding='utf8') as f:\r\n    ...\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/omnilib/aioitertools/issues/13", "repository_url": "https://api.github.com/repos/omnilib/aioitertools", "labels_url": "https://api.github.com/repos/omnilib/aioitertools/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/omnilib/aioitertools/issues/13/comments", "events_url": "https://api.github.com/repos/omnilib/aioitertools/issues/13/events", "html_url": "https://github.com/omnilib/aioitertools/issues/13", "id": 508934103, "node_id": "MDU6SXNzdWU1MDg5MzQxMDM=", "number": 13, "title": "bug in zip_longest", "user": {"login": "thehesiod", "id": 4001789, "node_id": "MDQ6VXNlcjQwMDE3ODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/4001789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thehesiod", "html_url": "https://github.com/thehesiod", "followers_url": "https://api.github.com/users/thehesiod/followers", "following_url": "https://api.github.com/users/thehesiod/following{/other_user}", "gists_url": "https://api.github.com/users/thehesiod/gists{/gist_id}", "starred_url": "https://api.github.com/users/thehesiod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thehesiod/subscriptions", "organizations_url": "https://api.github.com/users/thehesiod/orgs", "repos_url": "https://api.github.com/users/thehesiod/repos", "events_url": "https://api.github.com/users/thehesiod/events{/privacy}", "received_events_url": "https://api.github.com/users/thehesiod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-18T08:32:44Z", "updated_at": "2019-10-20T01:18:31Z", "closed_at": "2019-10-20T01:18:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "current version is defined as following:\r\n```python\r\nasync def zip_longest(\r\n    *itrs: AnyIterable[Any], fillvalue: Any = None\r\n) -> AsyncIterator[Tuple[Any, ...]]:\r\n    its: List[AsyncIterator[Any]] = [iter(itr) for itr in itrs]\r\n    itr_count = len(its)\r\n\r\n    while True:\r\n        values = await asyncio.gather(\r\n            *[it.__anext__() for it in its], return_exceptions=True\r\n        )\r\n        finished = 0\r\n        for idx, value in builtins.enumerate(values):\r\n            if isinstance(value, AnyStop):\r\n                finished += 1\r\n                values[idx] = fillvalue\r\n            elif isinstance(value, BaseException):\r\n                raise value\r\n        if finished >= itr_count:\r\n            break\r\n        yield tuple(values)\r\n```\r\n\r\nThis issue with this is that if the iterators end with different offsets, it will end up calling `__anext__` on an iterator which has already yielded out of itself, which is very bad and yields errors about method returning AsyncStopIteration.  I propose a fix like the following:\r\n\r\n```python\r\n@async_generator\r\nasync def zip_longest(*itrs, fillvalue=None):\r\n    its = [itr.__aiter__() for itr in itrs]\r\n    its_running = [True] * len(itrs)\r\n\r\n    async def get_fillvalue():\r\n        return fillvalue\r\n\r\n    while True:\r\n        values = await asyncio.gather(\r\n            *[it.__anext__() if its_running[idx] else get_fillvalue()\r\n              for idx, it in enumerate(its)\r\n              ],\r\n            return_exceptions=True\r\n        )\r\n        for idx, value in enumerate(values):\r\n            if isinstance(value, (StopIteration, StopAsyncIteration)):\r\n                its_running[idx] = False\r\n            elif isinstance(value, BaseException):\r\n                raise value\r\n        if not any(its_running):\r\n            break\r\n        await yield_(tuple(values))\r\n```\r\n\r\nthis is python 3.5+ syntax", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/omnilib/aioitertools/issues/12", "repository_url": "https://api.github.com/repos/omnilib/aioitertools", "labels_url": "https://api.github.com/repos/omnilib/aioitertools/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/omnilib/aioitertools/issues/12/comments", "events_url": "https://api.github.com/repos/omnilib/aioitertools/issues/12/events", "html_url": "https://github.com/omnilib/aioitertools/issues/12", "id": 508892410, "node_id": "MDU6SXNzdWU1MDg4OTI0MTA=", "number": 12, "title": "python version req mismatch", "user": {"login": "thehesiod", "id": 4001789, "node_id": "MDQ6VXNlcjQwMDE3ODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/4001789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thehesiod", "html_url": "https://github.com/thehesiod", "followers_url": "https://api.github.com/users/thehesiod/followers", "following_url": "https://api.github.com/users/thehesiod/following{/other_user}", "gists_url": "https://api.github.com/users/thehesiod/gists{/gist_id}", "starred_url": "https://api.github.com/users/thehesiod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thehesiod/subscriptions", "organizations_url": "https://api.github.com/users/thehesiod/orgs", "repos_url": "https://api.github.com/users/thehesiod/repos", "events_url": "https://api.github.com/users/thehesiod/events{/privacy}", "received_events_url": "https://api.github.com/users/thehesiod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-18T06:59:37Z", "updated_at": "2019-10-20T00:29:20Z", "closed_at": "2019-10-20T00:29:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "readme says 3.6 but setup.py specifies 3.5+ via metadata", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/omnilib/aioitertools/issues/11", "repository_url": "https://api.github.com/repos/omnilib/aioitertools", "labels_url": "https://api.github.com/repos/omnilib/aioitertools/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/omnilib/aioitertools/issues/11/comments", "events_url": "https://api.github.com/repos/omnilib/aioitertools/issues/11/events", "html_url": "https://github.com/omnilib/aioitertools/issues/11", "id": 508885358, "node_id": "MDU6SXNzdWU1MDg4ODUzNTg=", "number": 11, "title": "isinstance check order of iter method", "user": {"login": "thehesiod", "id": 4001789, "node_id": "MDQ6VXNlcjQwMDE3ODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/4001789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thehesiod", "html_url": "https://github.com/thehesiod", "followers_url": "https://api.github.com/users/thehesiod/followers", "following_url": "https://api.github.com/users/thehesiod/following{/other_user}", "gists_url": "https://api.github.com/users/thehesiod/gists{/gist_id}", "starred_url": "https://api.github.com/users/thehesiod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thehesiod/subscriptions", "organizations_url": "https://api.github.com/users/thehesiod/orgs", "repos_url": "https://api.github.com/users/thehesiod/repos", "events_url": "https://api.github.com/users/thehesiod/events{/privacy}", "received_events_url": "https://api.github.com/users/thehesiod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-18T06:41:02Z", "updated_at": "2019-10-30T00:03:27Z", "closed_at": "2019-10-30T00:03:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "`iter` is currently defined as such:\r\n```python\r\ndef iter(itr: AnyIterable[T]) -> AsyncIterator[T]:\r\n    if isinstance(itr, AsyncIterator):\r\n        return itr\r\n\r\n    if isinstance(itr, AsyncIterable):\r\n        return itr.__aiter__()\r\n```\r\n\r\nThis causes an issue for classes defined as such:\r\n```python\r\nclass Foo:\r\n    def __aiter__(self):\r\n        return self.__anext__()\r\n\r\n    @async_generator\r\n    async def __anext__(self):\r\n       ...\r\n```\r\n\r\nsince it won't use the object returned by `__aiter__()` as both isinstance checks are true.  I believe these two checks should be reversed with a comment why they are in the order they are.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/omnilib/aioitertools/issues/9", "repository_url": "https://api.github.com/repos/omnilib/aioitertools", "labels_url": "https://api.github.com/repos/omnilib/aioitertools/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/omnilib/aioitertools/issues/9/comments", "events_url": "https://api.github.com/repos/omnilib/aioitertools/issues/9/events", "html_url": "https://github.com/omnilib/aioitertools/issues/9", "id": 484355973, "node_id": "MDU6SXNzdWU0ODQzNTU5NzM=", "number": 9, "title": "Would be great to have a concurrency-limited version of gather", "user": {"login": "thatch", "id": 49834, "node_id": "MDQ6VXNlcjQ5ODM0", "avatar_url": "https://avatars0.githubusercontent.com/u/49834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thatch", "html_url": "https://github.com/thatch", "followers_url": "https://api.github.com/users/thatch/followers", "following_url": "https://api.github.com/users/thatch/following{/other_user}", "gists_url": "https://api.github.com/users/thatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/thatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thatch/subscriptions", "organizations_url": "https://api.github.com/users/thatch/orgs", "repos_url": "https://api.github.com/users/thatch/repos", "events_url": "https://api.github.com/users/thatch/events{/privacy}", "received_events_url": "https://api.github.com/users/thatch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-23T06:38:36Z", "updated_at": "2019-10-30T00:02:13Z", "closed_at": "2019-10-30T00:02:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I end up coming up with thousands of coros then wanting to gather them, but the default implementation will make all the connections first, then let some of them time out before finishing.\r\n\r\nI'm looking for an API something like `gather(*aws, limit=10)` to avoid having to hand-batch them.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/omnilib/aioitertools/issues/6", "repository_url": "https://api.github.com/repos/omnilib/aioitertools", "labels_url": "https://api.github.com/repos/omnilib/aioitertools/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/omnilib/aioitertools/issues/6/comments", "events_url": "https://api.github.com/repos/omnilib/aioitertools/issues/6/events", "html_url": "https://github.com/omnilib/aioitertools/issues/6", "id": 407334737, "node_id": "MDU6SXNzdWU0MDczMzQ3Mzc=", "number": 6, "title": "New release?", "user": {"login": "bryanforbes", "id": 204106, "node_id": "MDQ6VXNlcjIwNDEwNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/204106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryanforbes", "html_url": "https://github.com/bryanforbes", "followers_url": "https://api.github.com/users/bryanforbes/followers", "following_url": "https://api.github.com/users/bryanforbes/following{/other_user}", "gists_url": "https://api.github.com/users/bryanforbes/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryanforbes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryanforbes/subscriptions", "organizations_url": "https://api.github.com/users/bryanforbes/orgs", "repos_url": "https://api.github.com/users/bryanforbes/repos", "events_url": "https://api.github.com/users/bryanforbes/events{/privacy}", "received_events_url": "https://api.github.com/users/bryanforbes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-06T17:00:23Z", "updated_at": "2019-02-07T15:34:53Z", "closed_at": "2019-02-07T03:38:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With the updates to typings, support for PEP-561, and the other improvements, do you think we need a new release?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/omnilib/aioitertools/issues/4", "repository_url": "https://api.github.com/repos/omnilib/aioitertools", "labels_url": "https://api.github.com/repos/omnilib/aioitertools/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/omnilib/aioitertools/issues/4/comments", "events_url": "https://api.github.com/repos/omnilib/aioitertools/issues/4/events", "html_url": "https://github.com/omnilib/aioitertools/issues/4", "id": 405464922, "node_id": "MDU6SXNzdWU0MDU0NjQ5MjI=", "number": 4, "title": "Functions returning awaitables are not always handled properly", "user": {"login": "bryanforbes", "id": 204106, "node_id": "MDQ6VXNlcjIwNDEwNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/204106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryanforbes", "html_url": "https://github.com/bryanforbes", "followers_url": "https://api.github.com/users/bryanforbes/followers", "following_url": "https://api.github.com/users/bryanforbes/following{/other_user}", "gists_url": "https://api.github.com/users/bryanforbes/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryanforbes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryanforbes/subscriptions", "organizations_url": "https://api.github.com/users/bryanforbes/orgs", "repos_url": "https://api.github.com/users/bryanforbes/repos", "events_url": "https://api.github.com/users/bryanforbes/events{/privacy}", "received_events_url": "https://api.github.com/users/bryanforbes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-01-31T22:15:47Z", "updated_at": "2019-02-05T20:15:18Z", "closed_at": "2019-02-05T20:15:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Several types of objects can be used in an `await` statement: coroutines, objects that implement `__await__`, tasks, and futures. The function itself does not always indicate if the return value is awaitable. The following demonstrates some of the problems with using `asyncio.iscoroutinefunction()`:\r\n\r\n```python\r\nimport asyncio\r\nfrom functools import partial\r\n\r\nasync def multiply(a, b):\r\n    await asyncio.sleep(0.1)\r\n    return a * b\r\n\r\nmultiply5 = partial(multiply, 5)\r\nasyncio.iscoroutinefunction(multiply5)  # False\r\n\r\ndef can_be_awaited():\r\n    class a:\r\n        def __await__(self):\r\n            yield 42\r\n    return a()\r\n\r\nasyncio.iscoroutinefunction(multiply5)  # False\r\n\r\ndef multiply_task(a, b):\r\n    return asyncio.create_task(multiply(a, b))\r\n\r\nasyncio.iscoroutinefunction(multiply_task)  # False\r\n```\r\n\r\nThe more reliable way to handle coroutines is using `inspect.isawaitable()` on the return value of a function.", "performed_via_github_app": null, "score": 1.0}]}