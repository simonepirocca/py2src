{"total_count": 260, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/533", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/533/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/533/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/533/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/533", "id": 674908176, "node_id": "MDU6SXNzdWU2NzQ5MDgxNzY=", "number": 533, "title": "CSRF Protection", "user": {"login": "NMO13", "id": 3988444, "node_id": "MDQ6VXNlcjM5ODg0NDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3988444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NMO13", "html_url": "https://github.com/NMO13", "followers_url": "https://api.github.com/users/NMO13/followers", "following_url": "https://api.github.com/users/NMO13/following{/other_user}", "gists_url": "https://api.github.com/users/NMO13/gists{/gist_id}", "starred_url": "https://api.github.com/users/NMO13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NMO13/subscriptions", "organizations_url": "https://api.github.com/users/NMO13/orgs", "repos_url": "https://api.github.com/users/NMO13/repos", "events_url": "https://api.github.com/users/NMO13/events{/privacy}", "received_events_url": "https://api.github.com/users/NMO13/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-07T10:02:28Z", "updated_at": "2020-08-07T17:58:20Z", "closed_at": "2020-08-07T17:58:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is flask-login vulnerable to CSRF attacks and if yes, how can that be mitigated?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/532", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/532/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/532/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/532/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/532", "id": 671568873, "node_id": "MDU6SXNzdWU2NzE1Njg4NzM=", "number": 532, "title": "Logout a specific user", "user": {"login": "CesMak", "id": 20240718, "node_id": "MDQ6VXNlcjIwMjQwNzE4", "avatar_url": "https://avatars0.githubusercontent.com/u/20240718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CesMak", "html_url": "https://github.com/CesMak", "followers_url": "https://api.github.com/users/CesMak/followers", "following_url": "https://api.github.com/users/CesMak/following{/other_user}", "gists_url": "https://api.github.com/users/CesMak/gists{/gist_id}", "starred_url": "https://api.github.com/users/CesMak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CesMak/subscriptions", "organizations_url": "https://api.github.com/users/CesMak/orgs", "repos_url": "https://api.github.com/users/CesMak/repos", "events_url": "https://api.github.com/users/CesMak/events{/privacy}", "received_events_url": "https://api.github.com/users/CesMak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-02T07:27:49Z", "updated_at": "2020-08-05T17:26:39Z", "closed_at": "2020-08-05T17:26:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey there,\r\n\r\nI would like to logout a user that is inactive which means that this user has not clicked a button or something on the website for 5min. To achieve this I stored a last_clicked entry for each user in my db and I use `from flask_apscheduler import APScheduler ` to check inactivity of the users. This all works fine. \r\n\r\nHowever I am not able to use flask_logins `logout_user` for a specific user.....\r\n\r\nIs there another / better way to achieve the above functionality using session cookies etc.?\r\n\r\nIs it somehow possible to logout a specific user using a background process?\r\n\r\n\r\nThe code I currently use is:\r\n```python\r\ndef check_inactivity():\r\n    print(\"\\n\\nCHECK_INACTIVITY\\t:\")\r\n    with db.app.app_context():\r\n        users = User.query.all()\r\n        for user in users:\r\n            if user.is_enabled and not user.is_admin:\r\n                td_last_visit =  datetime.now()-user.last_visit\r\n                print(\"\\t-\"+str(user.username)+\" is inactive for \"+str(td_last_visit.seconds))\r\n                if td_last_visit.seconds>15: \r\n                    user.is_enabled = False # user is not active anymore!\r\n                    db.session.commit()\r\n                    #logout_user()#does not work here!\r\n                    print(\"\\t-\"+str(user.username)+\" is inactive for \"+str(td_last_visit.seconds))\r\n                    #return redirect(url_for('users.logout'))#does also not work here\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/527", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/527/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/527/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/527/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/527", "id": 665081639, "node_id": "MDU6SXNzdWU2NjUwODE2Mzk=", "number": 527, "title": "Cookies are not set to secure neither have sameSite set", "user": {"login": "Niwla23", "id": 46248939, "node_id": "MDQ6VXNlcjQ2MjQ4OTM5", "avatar_url": "https://avatars0.githubusercontent.com/u/46248939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Niwla23", "html_url": "https://github.com/Niwla23", "followers_url": "https://api.github.com/users/Niwla23/followers", "following_url": "https://api.github.com/users/Niwla23/following{/other_user}", "gists_url": "https://api.github.com/users/Niwla23/gists{/gist_id}", "starred_url": "https://api.github.com/users/Niwla23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Niwla23/subscriptions", "organizations_url": "https://api.github.com/users/Niwla23/orgs", "repos_url": "https://api.github.com/users/Niwla23/repos", "events_url": "https://api.github.com/users/Niwla23/events{/privacy}", "received_events_url": "https://api.github.com/users/Niwla23/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-24T10:39:07Z", "updated_at": "2020-08-12T17:08:30Z", "closed_at": "2020-07-30T01:37:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a setting for this? This is a security hole and Firefox even says it won't work in the future.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/516", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/516/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/516/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/516/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/516", "id": 648381417, "node_id": "MDU6SXNzdWU2NDgzODE0MTc=", "number": 516, "title": "Add REMEMBER_COOKIE_SAMESITE cookie setting", "user": {"login": "BitPhoenix", "id": 46142503, "node_id": "MDQ6VXNlcjQ2MTQyNTAz", "avatar_url": "https://avatars0.githubusercontent.com/u/46142503?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BitPhoenix", "html_url": "https://github.com/BitPhoenix", "followers_url": "https://api.github.com/users/BitPhoenix/followers", "following_url": "https://api.github.com/users/BitPhoenix/following{/other_user}", "gists_url": "https://api.github.com/users/BitPhoenix/gists{/gist_id}", "starred_url": "https://api.github.com/users/BitPhoenix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BitPhoenix/subscriptions", "organizations_url": "https://api.github.com/users/BitPhoenix/orgs", "repos_url": "https://api.github.com/users/BitPhoenix/repos", "events_url": "https://api.github.com/users/BitPhoenix/events{/privacy}", "received_events_url": "https://api.github.com/users/BitPhoenix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-30T17:53:14Z", "updated_at": "2020-07-30T02:27:51Z", "closed_at": "2020-07-30T01:46:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "What I'm trying to do: set the SameSite attribute on the remember cookie in accordance with a Chrome change\r\n\r\n> To safeguard more websites and their users, the new secure-by-default model assumes all cookies should be protected from external access unless otherwise specified. Developers must use a new cookie setting, SameSite=None, to designate cookies for cross-site access. When the SameSite=None attribute is present, an additional Secure attribute must be used so cross-site cookies can only be accessed over HTTPS connections. This won\u2019t mitigate all risks associated with cross-site access but it will provide protection against network attacks.\r\nhttps://blog.chromium.org/2019/10/developers-get-ready-for-new.html\r\n\r\nI'm able to do this for the session cookie using \r\n`app.config['SESSION_COOKIE_SAMESITE'] = \"None\"`\r\n\r\nAnd I can do this for a cookie I create myself like this \r\n\r\n`response.set_cookie(\"mycookie\", \"I am cookie\", secure=True, httponly=True, samesite=\"None\")`\r\n\r\nI was wondering if it would be possible to add this cookie setting so that I can set the attribute on the remember cookie?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/512", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/512/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/512/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/512/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/512", "id": 641686856, "node_id": "MDU6SXNzdWU2NDE2ODY4NTY=", "number": 512, "title": "Readonly column whose type is datetime could be changed", "user": {"login": "BriFuture", "id": 7582298, "node_id": "MDQ6VXNlcjc1ODIyOTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/7582298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BriFuture", "html_url": "https://github.com/BriFuture", "followers_url": "https://api.github.com/users/BriFuture/followers", "following_url": "https://api.github.com/users/BriFuture/following{/other_user}", "gists_url": "https://api.github.com/users/BriFuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/BriFuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BriFuture/subscriptions", "organizations_url": "https://api.github.com/users/BriFuture/orgs", "repos_url": "https://api.github.com/users/BriFuture/repos", "events_url": "https://api.github.com/users/BriFuture/events{/privacy}", "received_events_url": "https://api.github.com/users/BriFuture/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-19T03:59:29Z", "updated_at": "2020-06-19T04:56:03Z", "closed_at": "2020-06-19T04:56:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nReadonly column with datetime type could be modified by click another date even though it is readonly set by `form_widget_args`.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to Table List\r\n2. Click `Edit Record` Icon Button\r\n3. Click on a column whose type is datetime\r\n4. Click random date and the value is changed, \r\n5. Click save, the record in the database is changed\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Screenshots**\r\n![image](https://user-images.githubusercontent.com/7582298/85095176-45086900-b223-11ea-9df9-88cf4899c12f.png)\r\n\r\n![image](https://user-images.githubusercontent.com/7582298/85095197-52255800-b223-11ea-91dc-54f08f94c7af.png)\r\n\r\n**Desktop (please complete the following information):**\r\n - chrome 83.0\r\n - 1.5.6 \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/506", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/506/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/506/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/506/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/506", "id": 627312961, "node_id": "MDU6SXNzdWU2MjczMTI5NjE=", "number": 506, "title": "Switch to GitHub Actions", "user": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-05-29T14:30:03Z", "updated_at": "2020-05-29T18:13:13Z", "closed_at": "2020-05-29T18:13:13Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Just did this with all the Pallets projects and am really happy with the results. Actions gives 10 workers compared to 5 from Travis, and seems to generally be faster. Another thing slowing down our tests is that the suite waits to run twice for PRs made from repo branches, such as Dependabot. Both Travis and Actions have a way to limit running tests to only the main branches.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/500", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/500/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/500/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/500/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/500", "id": 626816278, "node_id": "MDU6SXNzdWU2MjY4MTYyNzg=", "number": 500, "title": "anonymous_user at @login_required", "user": {"login": "evan-csp", "id": 56135563, "node_id": "MDQ6VXNlcjU2MTM1NTYz", "avatar_url": "https://avatars2.githubusercontent.com/u/56135563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evan-csp", "html_url": "https://github.com/evan-csp", "followers_url": "https://api.github.com/users/evan-csp/followers", "following_url": "https://api.github.com/users/evan-csp/following{/other_user}", "gists_url": "https://api.github.com/users/evan-csp/gists{/gist_id}", "starred_url": "https://api.github.com/users/evan-csp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evan-csp/subscriptions", "organizations_url": "https://api.github.com/users/evan-csp/orgs", "repos_url": "https://api.github.com/users/evan-csp/repos", "events_url": "https://api.github.com/users/evan-csp/events{/privacy}", "received_events_url": "https://api.github.com/users/evan-csp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-28T21:10:28Z", "updated_at": "2020-06-01T18:07:44Z", "closed_at": "2020-06-01T18:07:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "With login_manager.anonymous_user set, the @login_required decorator does not work. Specifically, my login_manager.unauthorized_handler is not called with login_manager.anonymous_user set.\r\n\r\nSteps to reproduce:\r\n1. Create a class which inherits UserMixin\r\n2. Set login_manager.anonymous_user to the class\r\n3. Curl a test endpoint with @login_required set\r\n\r\nSimply commenting out the line where login_manager.anonymous_user is set makes @login_required work again.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/498", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/498/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/498/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/498/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/498", "id": 624106563, "node_id": "MDU6SXNzdWU2MjQxMDY1NjM=", "number": 498, "title": "Login_required reveals 405 method not allowed", "user": {"login": "lsabi", "id": 13497689, "node_id": "MDQ6VXNlcjEzNDk3Njg5", "avatar_url": "https://avatars0.githubusercontent.com/u/13497689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lsabi", "html_url": "https://github.com/lsabi", "followers_url": "https://api.github.com/users/lsabi/followers", "following_url": "https://api.github.com/users/lsabi/following{/other_user}", "gists_url": "https://api.github.com/users/lsabi/gists{/gist_id}", "starred_url": "https://api.github.com/users/lsabi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lsabi/subscriptions", "organizations_url": "https://api.github.com/users/lsabi/orgs", "repos_url": "https://api.github.com/users/lsabi/repos", "events_url": "https://api.github.com/users/lsabi/events{/privacy}", "received_events_url": "https://api.github.com/users/lsabi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-25T07:34:16Z", "updated_at": "2020-05-25T14:43:30Z", "closed_at": "2020-05-25T14:32:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nAn URL with POST as the only allowed method and login_required, reveals that that URL is valid and returns a 405 status code instead of redirecting to the login page.\r\n\r\n**To Reproduce**\r\n```\r\n@bp.route(\"/myurl\", methods=[\"POST\"])\r\n@login_required\r\ndef myurl():\r\n    print(\"HI\")\r\n    return \"\"\r\n```\r\n\r\n**Expected behavior**\r\nTo be asked to log in or something, as configured in the setup of the extension.\r\n\r\n**Screenshots**\r\nThe classic 405 method not allowed of flask.\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Windows 10\r\n - Browser: firefox\r\n - Version: 76.0.1 (64-bit)\r\n\r\n**Smartphone (please complete the following information):**\r\nI'm not using a smartphone.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/497", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/497/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/497/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/497/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/497", "id": 621301313, "node_id": "MDU6SXNzdWU2MjEzMDEzMTM=", "number": 497, "title": "login_user unable to set session cookie - how to debug?", "user": {"login": "gsidhu", "id": 5348728, "node_id": "MDQ6VXNlcjUzNDg3Mjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5348728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gsidhu", "html_url": "https://github.com/gsidhu", "followers_url": "https://api.github.com/users/gsidhu/followers", "following_url": "https://api.github.com/users/gsidhu/following{/other_user}", "gists_url": "https://api.github.com/users/gsidhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/gsidhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gsidhu/subscriptions", "organizations_url": "https://api.github.com/users/gsidhu/orgs", "repos_url": "https://api.github.com/users/gsidhu/repos", "events_url": "https://api.github.com/users/gsidhu/events{/privacy}", "received_events_url": "https://api.github.com/users/gsidhu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-19T21:37:40Z", "updated_at": "2020-05-20T05:31:55Z", "closed_at": "2020-05-20T05:31:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nThe user's details are collected via Google OAuth and stored in a db. The data reflects perfectly in the db, however, in the callback function, when the `user` object is passed to the `login_user` function, I get the following error \u2013\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"/home/user/otpd/venv/lib/python3.6/site-packages/flask/app.py\", line 2446, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/home/user/otpd/venv/lib/python3.6/site-packages/flask/app.py\", line 1952, in full_dispatch_request\r\n    return self.finalize_request(rv)\r\n  File \"/home/user/otpd/venv/lib/python3.6/site-packages/flask/app.py\", line 1969, in finalize_request\r\n    response = self.process_response(response)\r\n  File \"/home/user/otpd/venv/lib/python3.6/site-packages/flask/app.py\", line 2268, in process_response\r\n    self.session_interface.save_session(self, ctx.session, response)\r\n  File \"/home/user/otpd/venv/lib/python3.6/site-packages/flask/sessions.py\", line 387, in save_session\r\n    samesite=samesite,\r\n  File \"/home/user/otpd/venv/lib/python3.6/site-packages/werkzeug/wrappers/base_response.py\", line 481, in set_cookie\r\n    samesite=samesite,\r\n  File \"/home/user/otpd/venv/lib/python3.6/site-packages/werkzeug/http.py\", line 1163, in dump_cookie\r\n    buf = [key + b\"=\" + _cookie_quote(value)]\r\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'bytes'\r\n```\r\n\r\n**Expected behavior**\r\nIdeally, the user should be logged in. :)\r\n\r\n**Desktop:**\r\n - OS: Mac OS\r\n - Browser Firefox, Chrome\r\n - Version: 75, 81\r\n\r\n**Additional context**\r\n1. I followed [this tutorial on Real Python](https://realpython.com/flask-google-login/#creating-your-own-web-application) to set the code up for my website. [codebase here](https://github.com/realpython/materials/blob/master/flask-google-login/user.py) I modified the code by breaking it into a blueprint and using application factory method to launch.\r\n2. The code runs on a remote server using Gunicorn.\r\n3. When I run the code locally, there are no issues. The issue only crops up on the remote server.\r\n\r\nAny suggestions on how to debug this?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/493", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/493/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/493/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/493/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/493", "id": 608517608, "node_id": "MDU6SXNzdWU2MDg1MTc2MDg=", "number": 493, "title": "get by id didn't work (tested by self and professor and class)", "user": {"login": "Grigoletti2001", "id": 4676859, "node_id": "MDQ6VXNlcjQ2NzY4NTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/4676859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Grigoletti2001", "html_url": "https://github.com/Grigoletti2001", "followers_url": "https://api.github.com/users/Grigoletti2001/followers", "following_url": "https://api.github.com/users/Grigoletti2001/following{/other_user}", "gists_url": "https://api.github.com/users/Grigoletti2001/gists{/gist_id}", "starred_url": "https://api.github.com/users/Grigoletti2001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Grigoletti2001/subscriptions", "organizations_url": "https://api.github.com/users/Grigoletti2001/orgs", "repos_url": "https://api.github.com/users/Grigoletti2001/repos", "events_url": "https://api.github.com/users/Grigoletti2001/events{/privacy}", "received_events_url": "https://api.github.com/users/Grigoletti2001/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-28T18:17:38Z", "updated_at": "2020-04-28T18:23:31Z", "closed_at": "2020-04-28T18:22:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nIn \"How it works section\" get (user_id) needs to be changed to get by id(user_id) in order for code to work. \r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\nrun the example in the docs in any project, the try it with get by id. \r\n\r\n**Expected behavior**\r\nto get user id info. \r\n**Screenshots**\r\nattached. \r\n![Screen Shot 2020-04-28 at 1 09 25 PM](https://user-images.githubusercontent.com/4676859/80522604-74e96d80-8952-11ea-8139-ff2e52e40402.png)\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Mac OS 10.15.4\r\n - Browser :Chrome\r\n - Version :80.0.3987.163 (Official Build) (64-bit)\r\n\r\n**Smartphone (please complete the following information):** NA\r\n - Device: [e.g. iPhone6]\r\n - OS: [e.g. iOS8.1]\r\n - Browser [e.g. stock browser, safari]\r\n - Version [e.g. 22]\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/483", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/483/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/483/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/483/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/483", "id": 593046644, "node_id": "MDU6SXNzdWU1OTMwNDY2NDQ=", "number": 483, "title": "I need help.I just started to learn python.About the login_manager.request_loader to verify login", "user": {"login": "1111mp", "id": 31227919, "node_id": "MDQ6VXNlcjMxMjI3OTE5", "avatar_url": "https://avatars1.githubusercontent.com/u/31227919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1111mp", "html_url": "https://github.com/1111mp", "followers_url": "https://api.github.com/users/1111mp/followers", "following_url": "https://api.github.com/users/1111mp/following{/other_user}", "gists_url": "https://api.github.com/users/1111mp/gists{/gist_id}", "starred_url": "https://api.github.com/users/1111mp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1111mp/subscriptions", "organizations_url": "https://api.github.com/users/1111mp/orgs", "repos_url": "https://api.github.com/users/1111mp/repos", "events_url": "https://api.github.com/users/1111mp/events{/privacy}", "received_events_url": "https://api.github.com/users/1111mp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-03T03:14:54Z", "updated_at": "2020-04-24T14:00:14Z", "closed_at": "2020-04-24T14:00:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use the `login_manager.request_loader` to verify login. But when i sign out, requests with token information can still be allowed.I don't know how to solve it. Please help me.\r\n`app.py`:\r\n```\r\n# -*- coding: utf-8 -*-\r\nimport logging\r\nimport sys\r\n\r\nfrom flask import Flask, request, jsonify\r\n\r\nfrom app import time, user, login\r\nfrom app.user.models import User\r\nfrom app.extensions import db, login_manager, cors, cache, migrate, flask_static_digest, csrf_protect\r\n\r\n\r\ndef create_app(config_object=\"config\"):\r\n    app = Flask(__name__)\r\n    app.config.from_object(config_object)\r\n    register_extensions(app)\r\n    register_blueprints(app)\r\n    load_user(app)\r\n    register_errorhandlers(app)\r\n    configure_logger(app)\r\n    return app\r\n\r\n\r\ndef register_extensions(app):\r\n    \"\"\"\u7ed9Flask\u6ce8\u518c\u6269\u5c55\u529f\u80fd\"\"\"\r\n    cache.init_app(app)\r\n    db.init_app(app)\r\n    csrf_protect.init_app(app)\r\n    login_manager.init_app(app)\r\n    cors.init_app(app, resources=r'/*', supports_credentials=True)\r\n    migrate.init_app(app, db)\r\n    flask_static_digest.init_app(app)\r\n    return None\r\n\r\n\r\ndef register_blueprints(app):\r\n    \"\"\"\u6ce8\u518c\u84dd\u56fe\"\"\"\r\n    app.register_blueprint(user.views.blueprint)\r\n    app.register_blueprint(login.views.blueprint)\r\n    app.register_blueprint(time.views.blueprint)\r\n    return None\r\n\r\n\r\ndef load_user(app):\r\n    @login_manager.request_loader\r\n    def load_user_from_request(request):\r\n        api_key = request.headers.get('Token')\r\n        if(api_key):\r\n            user = User.verify_auth_token(api_key)\r\n            if user:\r\n                return user\r\n        return None\r\n\r\n    @login_manager.unauthorized_handler\r\n    def unauthorized_handler():\r\n        return jsonify({'code': 401, 'msg': 'Unauthorized'})\r\n\r\n\r\ndef register_errorhandlers(app):\r\n    \"\"\"\u6ce8\u518c\u9519\u8bef\u5904\u7406\u56de\u8c03\"\"\"\r\n    def render_error(error):\r\n        \"\"\"Render error template.\"\"\"\r\n        # If a HTTPException, pull the `code` attribute; default to 500\r\n        error_code = getattr(error, \"code\", 500)\r\n        return {'code': error_code}\r\n\r\n    for errcode in [401, 404, 500]:\r\n        app.errorhandler(errcode)(render_error)\r\n    return None\r\n\r\n\r\ndef configure_logger(app):\r\n    \"\"\"\u914d\u7f6e\u65e5\u5fd7\u8f93\u51fa\"\"\"\r\n    handler = logging.StreamHandler(sys.stdout)\r\n    if not app.logger.handlers:\r\n        app.logger.addHandler(handler)\r\n\r\n```\r\n`user models`:\r\n```\r\n# -*- coding: utf-8 -*-\r\n\"\"\"User models\"\"\"\r\nimport datetime as dt\r\nfrom flask import current_app\r\nfrom flask_login import UserMixin\r\nfrom itsdangerous import (\r\n    TimedJSONWebSignatureSerializer as Serializer,\r\n    BadSignature,\r\n    SignatureExpired\r\n)\r\nfrom app.database import (\r\n    Column,\r\n    Model,\r\n    SurrogatePK,\r\n    db,\r\n    reference_col,\r\n    relationship,\r\n)\r\nfrom app.extensions import bcrypt\r\n\r\n\r\nclass EntityBase(object):\r\n    def to_json(self):\r\n        fields = self.__dict__\r\n        if \"_sa_instance_state\" in fields:\r\n            del fields[\"_sa_instance_state\"]\r\n        if \"password\" in fields:\r\n            del fields[\"password\"]\r\n\r\n        return fields\r\n\r\n\r\nclass User(UserMixin, SurrogatePK, Model, EntityBase):\r\n    \"\"\"A user of the app.\"\"\"\r\n\r\n    __tablename__ = \"users\"\r\n    username = Column(db.String(80), unique=True, nullable=False)\r\n    email = Column(db.String(80), unique=True, nullable=False)\r\n    #: The hashed password\r\n    password = Column(db.LargeBinary(128), nullable=True)\r\n    created_at = Column(db.DateTime, nullable=False,\r\n                        default=dt.datetime.utcnow)\r\n    first_name = Column(db.String(30), nullable=True)\r\n    last_name = Column(db.String(30), nullable=True)\r\n    active = Column(db.Boolean(), default=False)\r\n    is_admin = Column(db.Boolean(), default=False)\r\n\r\n    def __init__(self, username, email, password=None, **kwargs):\r\n        \"\"\"Create instance.\"\"\"\r\n        db.Model.__init__(self, username=username, email=email, **kwargs)\r\n        if password:\r\n            self.set_password(password)\r\n        else:\r\n            self.password = None\r\n\r\n    def set_password(self, password):\r\n        \"\"\"Set password.\"\"\"\r\n        self.password = bcrypt.generate_password_hash(password)\r\n\r\n    def check_password(self, value):\r\n        \"\"\"Check password.\"\"\"\r\n        return bcrypt.check_password_hash(self.password, value)\r\n\r\n    @property\r\n    def full_name(self):\r\n        \"\"\"Full user name.\"\"\"\r\n        return f\"{self.first_name} {self.last_name}\"\r\n\r\n    def __repr__(self):\r\n        \"\"\"Represent instance as a unique string.\"\"\"\r\n        return f\"<User({self.username!r})>\"\r\n\r\n    @classmethod\r\n    def verify_auth_token(cls, token):\r\n        s = Serializer(current_app.config[\"SECRET_KEY\"])\r\n        try:\r\n            data = s.loads(token)\r\n        except (BadSignature, SignatureExpired):\r\n            return None\r\n        user = cls.query.get(data[\"id\"])\r\n        return user\r\n\r\n    def generate_token(self, expiration=24 * 60 * 60):\r\n        s = Serializer(current_app.config[\"SECRET_KEY\"], expires_in=expiration)\r\n        return s.dumps({\"id\": self.id}).decode()\r\n\r\n```\r\n`login`:\r\n```\r\n# -*- coding: utf-8 -*-\r\nfrom flask import Blueprint, request, jsonify\r\nfrom app.user.models import User\r\nfrom app.common import InvalidUsage, successReturn\r\nfrom app.extensions import csrf_protect\r\n\r\nblueprint = Blueprint('logon', __name__, url_prefix='/login')\r\n\r\n\r\n@blueprint.app_errorhandler(InvalidUsage)\r\ndef handle_invalid_usage(error):\r\n    response = jsonify(error.to_dict())\r\n    response.status_code = error.status_code\r\n    return response\r\n\r\n\r\n@blueprint.route('/', methods=['POST'])\r\n@csrf_protect.exempt\r\ndef login():\r\n    data = request.get_json(force=True)\r\n    user = User.query.filter_by(username=data['username']).first()\r\n\r\n    if not user:\r\n        raise jsonify(InvalidUsage('Unknown username', status_code=400))\r\n\r\n    if not user.check_password(data['password']):\r\n        raise jsonify(InvalidUsage('Invalid password', status_code=400))\r\n\r\n    token = user.generate_token()\r\n    return jsonify(successReturn({'token': token}, '\u767b\u5f55\u6210\u529f\uff01'))\r\n\r\n```\r\n`logout`:\r\n```\r\n# -*- coding:utf-8 -*-\r\nfrom flask import Blueprint, request, jsonify, Response\r\nimport json\r\nfrom flask_login import login_required, logout_user, utils\r\nfrom app.extensions import cache, csrf_protect\r\nfrom app.common import InvalidUsage, successReturn, ComplexEncoder\r\nfrom app.user.models import User\r\n\r\nblueprint = Blueprint(\"user\", __name__, url_prefix=\"/user\")\r\n\r\n\r\n@blueprint.app_errorhandler(InvalidUsage)\r\ndef handle_invalid_usage(error):\r\n    response = jsonify(error.to_dict())\r\n    response.status_code = error.status_code\r\n    return response\r\n\r\n\r\n@blueprint.route(\"/members\", methods=[\"POST\"])\r\n@csrf_protect.exempt\r\n@login_required\r\n@cache.memoize(timeout=5)\r\ndef getUser():\r\n    \"\"\"\u83b7\u53d6\u7528\u6237\u5217\u8868\"\"\"\r\n    users = User.query.all()\r\n    users_output = []\r\n    for user in users:\r\n        users_output.append(user.to_json())\r\n    return Response(json.dumps(successReturn({'items': users_output}, ''), cls=ComplexEncoder), mimetype='application/json')\r\n\r\n\r\n@blueprint.route(\"/logout\", methods=[\"GET\", \"POST\"])\r\n@csrf_protect.exempt\r\n@login_required\r\ndef logout():\r\n    \"\"\"\u9000\u51fa\u767b\u5f55\"\"\"\r\n    user = utils._get_user()\r\n    print(user)\r\n    logout_user()\r\n    return jsonify(successReturn({}, 'You are logged out.'))\r\n\r\n```\r\nwhen i logout:\r\n![image](https://user-images.githubusercontent.com/31227919/78320281-b11bef00-759b-11ea-8102-992d86410a19.png)\r\nAnd then I make the members request\uff1a\r\n![image](https://user-images.githubusercontent.com/31227919/78320340-cbee6380-759b-11ea-9d32-a6acb8c2aeac.png)\r\nIt can still request success.\r\nYou can see the complete code here\uff1a[https://github.com/1111mp/flask_init/tree/flask-react](https://github.com/1111mp/flask_init/tree/flask-react)\r\nDo I need to clear token manually and how to do it\r\nIt's too hard for me at the moment", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/475", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/475/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/475/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/475/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/475", "id": 566612909, "node_id": "MDU6SXNzdWU1NjY2MTI5MDk=", "number": 475, "title": "Forcing `is_authenticated` True persistently ", "user": {"login": "crablab", "id": 5859718, "node_id": "MDQ6VXNlcjU4NTk3MTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5859718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crablab", "html_url": "https://github.com/crablab", "followers_url": "https://api.github.com/users/crablab/followers", "following_url": "https://api.github.com/users/crablab/following{/other_user}", "gists_url": "https://api.github.com/users/crablab/gists{/gist_id}", "starred_url": "https://api.github.com/users/crablab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crablab/subscriptions", "organizations_url": "https://api.github.com/users/crablab/orgs", "repos_url": "https://api.github.com/users/crablab/repos", "events_url": "https://api.github.com/users/crablab/events{/privacy}", "received_events_url": "https://api.github.com/users/crablab/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-18T02:56:19Z", "updated_at": "2020-02-20T19:53:13Z", "closed_at": "2020-02-19T10:51:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "My understanding of the documentation is that `is_authenticated` should be True when whatever authentication mechanism is used to actively authenticate the user and at no other time. The behavior I expected was: \r\n\r\n1. User enters username and password\r\n2. User object created, credentials checked, `is_authenticated` becomes true\r\n3. `login_user()` called and authenticated `user` objected passed\r\n4. Redirect occurs\r\n...\r\n5. New instantiation of `user` as a `login_required` page is visited, `is_authenticated` is now false. Session cookie is checked, user ID validated etc. etc. and page loads \r\n\r\nWhat actually happens in step 5 is the user is treated as unauthorised, even though they were issued with a valid session cookie having been authenticated. \r\n\r\nIn order to get the behavior I expect, I have to hard code `is_authenticated` to return True, regardless of whether the user just entered their password or not. \r\n\r\nNowhere in the documentation does it say `is_authenticated` should be stateful. Does it exist purely to facilitate logout (eg. manually ending the session)? If so, I think it's a bit of a misnomer as that's more of a `session_enabled` or the like. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/471", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/471/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/471/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/471/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/471", "id": 562836264, "node_id": "MDU6SXNzdWU1NjI4MzYyNjQ=", "number": 471, "title": "0.5.0 protects/hides useful properties", "user": {"login": "jwag956", "id": 1002831, "node_id": "MDQ6VXNlcjEwMDI4MzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1002831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwag956", "html_url": "https://github.com/jwag956", "followers_url": "https://api.github.com/users/jwag956/followers", "following_url": "https://api.github.com/users/jwag956/following{/other_user}", "gists_url": "https://api.github.com/users/jwag956/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwag956/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwag956/subscriptions", "organizations_url": "https://api.github.com/users/jwag956/orgs", "repos_url": "https://api.github.com/users/jwag956/repos", "events_url": "https://api.github.com/users/jwag956/events{/privacy}", "received_events_url": "https://api.github.com/users/jwag956/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-02-10T21:23:05Z", "updated_at": "2020-02-13T05:58:34Z", "closed_at": "2020-02-11T09:55:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nAs part of #378 and now in release 0.5.0 - request_callback and user_callback were made 'protected' (by adding a leading underscore). These are valuable properties for upstream packages (such as Flask-Security) so that applications can override the login_manager and provide their own implementations, and still have middleware be able to call with a uniform API.\r\nIt isn't clear why those were modified as part of that PR.\r\n\r\n**Expected behavior**\r\nMake those 2 publicly accessible methods or properties.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/465", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/465/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/465/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/465/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/465", "id": 551956868, "node_id": "MDU6SXNzdWU1NTE5NTY4Njg=", "number": 465, "title": "session[\"user_id\"] = user.id authenticates user", "user": {"login": "danielperna84", "id": 7396998, "node_id": "MDQ6VXNlcjczOTY5OTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/7396998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielperna84", "html_url": "https://github.com/danielperna84", "followers_url": "https://api.github.com/users/danielperna84/followers", "following_url": "https://api.github.com/users/danielperna84/following{/other_user}", "gists_url": "https://api.github.com/users/danielperna84/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielperna84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielperna84/subscriptions", "organizations_url": "https://api.github.com/users/danielperna84/orgs", "repos_url": "https://api.github.com/users/danielperna84/repos", "events_url": "https://api.github.com/users/danielperna84/events{/privacy}", "received_events_url": "https://api.github.com/users/danielperna84/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-19T17:45:54Z", "updated_at": "2020-02-06T05:10:06Z", "closed_at": "2020-02-06T05:10:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nHi. I am farily new to Flask, so I'm unsure if the following is a bug or not.\r\n\r\nMy Flask app allows users to register as usual with a username and password. Once registered, they have to add a FIDO2 token to successfully login afterwards. During the next login the username and password are verified. If correct, it continues with the WebAuthn stuff. This happens across two API endpoints (`/begin` and `/complete`).\r\n\r\nIn the `/complete` part I use `login_user` to perform the final login. For this to work I set `session[\"user_id\"] = user.id` in `/begin` so I know which user has logged in.\r\n\r\nThe problem arise when I cancel the WebAuthn authentication at the client. `/begin` has already completed at this stage, so the `session[\"user_id\"]...` part has been executed. When FIDO2-authentication is aborted though, I get redirected to the page where logged in users get redirected, __and__ I am authenticated.\r\n\r\nI have added a debug-message to the `user_loader`, and apparently this gets called when the mentioned session-variable is set. However, this does not happen if instead of `user_id` I use some other string to identify the users ID within the session.\r\n\r\nSince I'm new to Flask I don't know if I'm just doing something stupid there, or if this is actually something to look into. So I figured I rather share this in case it's a security issue.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n- Clone and run my project at https://github.com/danielperna84/hass-wh-triggers\r\n- Register, add a FIDO2 token (on Windows 10 the integrated Windows Hello supports FIDO2)\r\n- Logout, Login, Abort FIDO2 authentication\r\n- Authentication failed (redirected to login view)\r\n- Change `session[\"lid\"] = user.id` to `session[\"user_id\"] = user.id` [here](https://github.com/danielperna84/hass-wh-triggers/blob/fd4f49a1cbf578a8cfccbea9b1ceda715af4e45c/hass_wh_triggers/app.py#L527)\r\n- Login, Abort FIDO2 authentication\r\n- User gets authenticated and redirected to the triggers site (which has `login_required`)\r\n\r\n**Expected behavior**\r\nThe name of a key in the session shouldn't impact authentication, or if so, it should be clearly documented (I did not find anything on this topic yet).\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Windos 10\r\n - Browser Google Chrome\r\n - Version 79\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/463", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/463/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/463/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/463/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/463", "id": 549717488, "node_id": "MDU6SXNzdWU1NDk3MTc0ODg=", "number": 463, "title": "Only flash \"needs_refresh_message\" if value is set", "user": {"login": "ggranger", "id": 895626, "node_id": "MDQ6VXNlcjg5NTYyNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/895626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ggranger", "html_url": "https://github.com/ggranger", "followers_url": "https://api.github.com/users/ggranger/followers", "following_url": "https://api.github.com/users/ggranger/following{/other_user}", "gists_url": "https://api.github.com/users/ggranger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ggranger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ggranger/subscriptions", "organizations_url": "https://api.github.com/users/ggranger/orgs", "repos_url": "https://api.github.com/users/ggranger/repos", "events_url": "https://api.github.com/users/ggranger/events{/privacy}", "received_events_url": "https://api.github.com/users/ggranger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-14T17:37:51Z", "updated_at": "2020-02-12T14:56:40Z", "closed_at": "2020-02-12T14:56:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is already the behaviour for \"login_message\" which does not flash if value is set to None.\r\nWe need to have the same behaviour for \"needs_refresh_message\" (which you can't disable at the moment)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/461", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/461/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/461/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/461/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/461", "id": 541485884, "node_id": "MDU6SXNzdWU1NDE0ODU4ODQ=", "number": 461, "title": "test_unauthorized_uses_host_from_x_forwarded_for_header (test_login.StrictHostForRedirectsTestCase) fails with Werkzeug>=0.15.0", "user": {"login": "eriol", "id": 212279, "node_id": "MDQ6VXNlcjIxMjI3OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/212279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eriol", "html_url": "https://github.com/eriol", "followers_url": "https://api.github.com/users/eriol/followers", "following_url": "https://api.github.com/users/eriol/following{/other_user}", "gists_url": "https://api.github.com/users/eriol/gists{/gist_id}", "starred_url": "https://api.github.com/users/eriol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eriol/subscriptions", "organizations_url": "https://api.github.com/users/eriol/orgs", "repos_url": "https://api.github.com/users/eriol/repos", "events_url": "https://api.github.com/users/eriol/events{/privacy}", "received_events_url": "https://api.github.com/users/eriol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-22T18:26:44Z", "updated_at": "2020-04-01T20:47:29Z", "closed_at": "2020-02-15T16:17:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running the test suite of release 0.4.1 with Werkzeug>=0.15.0 makes `test_unauthorized_uses_host_from_x_forwarded_for_header` fails with the following:\r\n```\r\n======================================================================\r\nFAIL: test_unauthorized_uses_host_from_x_forwarded_for_header (test_login.StrictHostForRedirectsTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/tmp/flask-login/test_login.py\", line 1537, in test_unauthorized_uses_host_from_x_forwarded_for_header\r\n    'http://proxy.com/login?next=%2Fsecret')\r\nAssertionError: 'http://foo.com/login?next=%2Fsecret' != 'http://proxy.com/login?next=%2Fsecret'\r\n- http://foo.com/login?next=%2Fsecret\r\n?        ^ ^\r\n+ http://proxy.com/login?next=%2Fsecret\r\n?    \r\n```\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Clone this repository and checkout 0.4.1 tag.\r\n2. Create a virtualenv (I used Python 3.7.5)\r\n3. `pip install -r dev-requirements.txt` inside the virtualenv\r\n4. Run `nosetests` and verify that all tests pass\r\n5. pip install Werkzeug==0.15.0\r\n6. Run tests again and verify that test_unauthorized_uses_host_from_x_forwarded_for_header fails with the above error.\r\n\r\nIn Werkzeug [0.15.0](https://werkzeug.palletsprojects.com/en/0.16.x/changes/#version-0-15-0) the test.Client redirect handling was rewritten, so maybe it is the root cause of this issue.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/460", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/460/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/460/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/460/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/460", "id": 509354788, "node_id": "MDU6SXNzdWU1MDkzNTQ3ODg=", "number": 460, "title": "when set USE_SESSION_FOR_NEXT, logout_user() don't pop the 'next'", "user": {"login": "wowo878787", "id": 19352738, "node_id": "MDQ6VXNlcjE5MzUyNzM4", "avatar_url": "https://avatars2.githubusercontent.com/u/19352738?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wowo878787", "html_url": "https://github.com/wowo878787", "followers_url": "https://api.github.com/users/wowo878787/followers", "following_url": "https://api.github.com/users/wowo878787/following{/other_user}", "gists_url": "https://api.github.com/users/wowo878787/gists{/gist_id}", "starred_url": "https://api.github.com/users/wowo878787/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wowo878787/subscriptions", "organizations_url": "https://api.github.com/users/wowo878787/orgs", "repos_url": "https://api.github.com/users/wowo878787/repos", "events_url": "https://api.github.com/users/wowo878787/events{/privacy}", "received_events_url": "https://api.github.com/users/wowo878787/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-18T23:39:20Z", "updated_at": "2020-02-15T16:18:20Z", "closed_at": "2020-02-15T16:18:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nI set _USE_SESSION_FOR_NEXT_ to _True_ and there was a '_next_' in my session, I didn't pop it manually after I use it in my login function, and when I logout with _logout_user()_, the '_next_' is still there. then the next time I login, I got an unexpected redirect.\r\nI'm not sure if this is an issue, should I pop it manually?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/459", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/459/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/459/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/459/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/459", "id": 508288208, "node_id": "MDU6SXNzdWU1MDgyODgyMDg=", "number": 459, "title": "New release - 1.0.0", "user": {"login": "romanek-adam", "id": 760766, "node_id": "MDQ6VXNlcjc2MDc2Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/760766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/romanek-adam", "html_url": "https://github.com/romanek-adam", "followers_url": "https://api.github.com/users/romanek-adam/followers", "following_url": "https://api.github.com/users/romanek-adam/following{/other_user}", "gists_url": "https://api.github.com/users/romanek-adam/gists{/gist_id}", "starred_url": "https://api.github.com/users/romanek-adam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/romanek-adam/subscriptions", "organizations_url": "https://api.github.com/users/romanek-adam/orgs", "repos_url": "https://api.github.com/users/romanek-adam/repos", "events_url": "https://api.github.com/users/romanek-adam/events{/privacy}", "received_events_url": "https://api.github.com/users/romanek-adam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-17T07:27:28Z", "updated_at": "2020-01-11T07:45:04Z", "closed_at": "2019-10-28T07:52:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I can see the last release of this package was on Dec 4, 2017 (0.4.1). So it's almost two years now and since then a lot happened, there's even this 1.0.0 version in CHANGELOG which adds FlaskLoginClient, which I'm particularly interested in.\r\n\r\nWhen do you expect v1.0.0 to be released? Is there anything I can do to push this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/458", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/458/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/458/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/458/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/458", "id": 508133485, "node_id": "MDU6SXNzdWU1MDgxMzM0ODU=", "number": 458, "title": "Crafting cookie", "user": {"login": "IamLupo", "id": 8842375, "node_id": "MDQ6VXNlcjg4NDIzNzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/8842375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IamLupo", "html_url": "https://github.com/IamLupo", "followers_url": "https://api.github.com/users/IamLupo/followers", "following_url": "https://api.github.com/users/IamLupo/following{/other_user}", "gists_url": "https://api.github.com/users/IamLupo/gists{/gist_id}", "starred_url": "https://api.github.com/users/IamLupo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IamLupo/subscriptions", "organizations_url": "https://api.github.com/users/IamLupo/orgs", "repos_url": "https://api.github.com/users/IamLupo/repos", "events_url": "https://api.github.com/users/IamLupo/events{/privacy}", "received_events_url": "https://api.github.com/users/IamLupo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-16T22:31:32Z", "updated_at": "2019-10-16T23:24:06Z", "closed_at": "2019-10-16T23:23:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nIn your example page you save the user session with:\r\n\r\n`\r\nuser = User()\r\nuser.id = email\r\nflask_login.login_user(user)`\r\n\r\nWith the 'flask_login.login_user(user)' function you basicly save the id in the session cookie.\r\n\r\nThe vulnability is that you can decode like this:\r\n`\r\nzlib.decompress(base64.urlsafe_b64decode(request.cookies['session'])))\r\n`\r\n\r\nAfter when you can decode the session cookie you can modify the cookie with someone else his email adress and encode it again. This way you can craft your own session cookies.\r\n \r\n**Expected behavior**\r\nYou never want to have links saved in a cookie. Remove the link with the session and store it in a local database on the server.\r\n\r\n**Last notice**\r\nIn this case you could say: \"Well the hacker have to know first my email adress before he could craft a cookie\". Yeah this is true, but its a real bad implementation if you talk about security.\r\nSecond you see a lot of example projects out there using this project and implement that the user.id isn't a email adress but a integer as a nth user. This way the cookie is even eazier to craft.\r\n\r\nReference: https://blog.miguelgrinberg.com/post/how-secure-is-the-flask-user-session\r\n\r\n**Update: HMAC integrity**\r\nI just notice the session cookie has a extension with HMAC extension that generated with the 'SECRET_KEY'. Basicly this makes it safe.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/457", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/457/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/457/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/457/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/457", "id": 502221277, "node_id": "MDU6SXNzdWU1MDIyMjEyNzc=", "number": 457, "title": "loggin_user successful but current_user is AnonymousUserMixin", "user": {"login": "juanmanuel96", "id": 38262434, "node_id": "MDQ6VXNlcjM4MjYyNDM0", "avatar_url": "https://avatars2.githubusercontent.com/u/38262434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/juanmanuel96", "html_url": "https://github.com/juanmanuel96", "followers_url": "https://api.github.com/users/juanmanuel96/followers", "following_url": "https://api.github.com/users/juanmanuel96/following{/other_user}", "gists_url": "https://api.github.com/users/juanmanuel96/gists{/gist_id}", "starred_url": "https://api.github.com/users/juanmanuel96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/juanmanuel96/subscriptions", "organizations_url": "https://api.github.com/users/juanmanuel96/orgs", "repos_url": "https://api.github.com/users/juanmanuel96/repos", "events_url": "https://api.github.com/users/juanmanuel96/events{/privacy}", "received_events_url": "https://api.github.com/users/juanmanuel96/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-03T18:19:38Z", "updated_at": "2019-10-05T15:38:10Z", "closed_at": "2019-10-05T15:38:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm currently working on a Flask project using Blueprints where one uses a subdomain. This Blueprint needs user login. The login view displays perfectly. However, after executing the login_user function I printed the current_user and it displayed `<VI_Platform.user.User object at 0x10fdf3e50>` which is what is should be. After redirecting the user to the homepage, I printed current_user and it displayed `<flask_login.mixins.AnonymousUserMixin object at 0x10fe8a8d0>`. Here are snippets of my code:\r\n\r\n**\\_\\_init.py\\_\\_**\r\n```python\r\nfrom VI_Platform.libraries import Flask, LoginManager\r\nfrom VI_Platform.platform import platform\r\nfrom VI_Platform.dashboard import dashboard\r\nfrom VI_Platform.config import DevelopmentConfig\r\nfrom VI_Platform.user import User\r\nfrom VI_Platform.utils import get_uid\r\n\r\n# Main Application \r\napplication = Flask(__name__) # Main Application Instance\r\napplication.config.from_object(DevelopmentConfig) # Application Config\r\n\r\n# Application Login Manager\r\nlogin_manager = LoginManager()\r\nlogin_manager.init_app(app=application)\r\nlogin_manager.blueprint_login_views = { 'dash' : '/login' }\r\nlogin_manager.login_message = 'Entre sus credenciales para acceder'\r\n\r\n@login_manager.user_loader\r\ndef load_user(uid):\r\n    user = get_uid(uid)\r\n    if not user:\r\n        return None\r\n    else:\r\n        return User(\r\n            user['uid'],\r\n            user['username'], \r\n            user['first_name'],\r\n            user['last_name'],\r\n            user['account_type'],\r\n            user['is_approved'])\r\n\r\n###########################################################\r\n# Web Application Blueprint Registration\r\n###########################################################\r\n# Platform associated Blueprint Registration\r\napplication.register_blueprint(platform)\r\n\r\n# Dashboard associated Blueprint Registration\r\napplication.register_blueprint(dashboard, subdomain='dash')\r\n```\r\n\r\n**user.py**\r\n```python\r\nfrom VI_Platform.libraries import UserMixin, db, generate_password_hash, check_password_hash, datetime\r\nfrom VI_Platform.dashboard.dash_utils import generate_uid\r\n\r\nclass User(UserMixin):\r\n    is_anonymous = False\r\n    is_active = True\r\n    is_authenticated = True\r\n\r\n    def __init__(\r\n        self, \r\n        uid,\r\n        username, \r\n        first_name, \r\n        last_name,  \r\n        account_type, \r\n        is_approved):\r\n        self.uid = uid\r\n        self.username = username\r\n        self.first_name = first_name\r\n        self.last_name = last_name\r\n        self.account_type = account_type\r\n        self.is_approved = is_approved\r\n    \r\n    def get_id(self):\r\n        return self.uid\r\n\r\n    # Returns the User's instance information in JSON format\r\n    def user_to_json(self):\r\n        return {\r\n            'username':self.username,\r\n            'first_name':self.first_name,\r\n            'last_name' : self.last_name,\r\n            'uid':self.uid,\r\n            'account_type':self.account_type,\r\n            'is_approved' : self.is_approved\r\n        }\r\n    \r\n    # Returns complete user information in JSON format\r\n    def complete_user_info(self):\r\n        return db['users'].find_one({'uid':self.uid})\r\n    \r\n    ###########################################################\r\n    # User Class Static Methods\r\n    ###########################################################\r\n    # Static method to return a specific user\r\n    @staticmethod\r\n    def get_user(username='', uid=0, email=''):\r\n        if username != '':\r\n            return db['users'].find_one({\r\n                'username':username\r\n            })\r\n        elif uid > 0:\r\n            return db['users'].find_one({\r\n                'uid':uid\r\n            })\r\n        elif email != '':\r\n            return db['users'].find_one({\r\n                'email':email\r\n            })\r\n        else:\r\n            return None\r\n    \r\n    # Static Method for creating a user account\r\n    @staticmethod\r\n    def insert_user(reg_form):\r\n        done = False\r\n        while not done:\r\n            uid = generate_uid()\r\n            _user = User.get_user(uid=uid)\r\n            if type(_user) is type(None):\r\n                new_user = db['users'].insert_one({\r\n                    'uid' : uid,\r\n                    'username' : reg_form.username.data,\r\n                    'pwd' : generate_password_hash(reg_form.pwd.data, 'sha256', 16),\r\n                    'first_name' : reg_form.first_name.data,\r\n                    'email' : reg_form.email.data,\r\n                    'last_name' : reg_form.last_name.data,\r\n                    'account_type' : 'reporter',\r\n                    'member_since' : datetime.now(),\r\n                    'last_login' : datetime.now(),\r\n                    'is_approved' : False,\r\n                    'is_active' : True\r\n                })\r\n                done = True\r\n        return new_user.acknowledged\r\n\r\n    # Static Method for validating user login\r\n    @staticmethod\r\n    def validate_login(log_form):\r\n        _user = User.get_user(username=log_form.username.data)\r\n        if type(_user) is type(None):\r\n            return False, 'Nombre de usuario o contrase\u00f1a incorrectos', None\r\n        elif not check_password_hash(_user['pwd'], log_form.pwd.data):\r\n            return False, 'Nombre de usuario o contrase\u00f1a incorrectos', None\r\n        else:\r\n            return True, 'Success', _user\r\n```\r\n\r\n**dashboard.routes.py**\r\n```python\r\n# Homepage View\r\n@dashboard.route('/inicio')\r\n# @login_required\r\ndef dash_home():\r\n    print(current_user)\r\n    return render_template('dashboard/dash_home.html')\r\n\r\n# Dashboard Login View\r\n@dashboard.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n    form = LoginForm()\r\n    next_page = request.args.get('next')\r\n    if not next_page:\r\n        next_page = url_for('dash.dash_home')\r\n    if form.validate_on_submit():\r\n        _token = User.validate_login(form)\r\n        if not _token[0]:\r\n            flash(_token[1])\r\n            return redirect(url_for('dash.login', next=next_page))\r\n        else:\r\n            user_logged = login_user(User(\r\n                _token[2]['username'],\r\n                _token[2]['uid'],\r\n                _token[2]['first_name'],\r\n                _token[2]['last_name'],\r\n                _token[2]['account_type'],\r\n                _token[2]['is_approved']\r\n            ))\r\n            print(user_logged)\r\n            print(current_user)\r\n            return redirect(next_page)\r\n    return render_template('dashboard/login.html', form=form, messages=get_flashed_messages())\r\n```\r\n\r\nThe print functions found in login yield:\r\n```\r\nTrue\r\n<VI_Platform.user.User object at 0x10fdf3e50>\r\n```\r\n\r\nThe print function found in dash_home yield:\r\n```\r\n<flask_login.mixins.AnonymousUserMixin object at 0x10fe8a8d0>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/456", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/456/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/456/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/456/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/456", "id": 501888228, "node_id": "MDU6SXNzdWU1MDE4ODgyMjg=", "number": 456, "title": "Files served at url are visible to anonymous users", "user": {"login": "elamje", "id": 14875933, "node_id": "MDQ6VXNlcjE0ODc1OTMz", "avatar_url": "https://avatars1.githubusercontent.com/u/14875933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elamje", "html_url": "https://github.com/elamje", "followers_url": "https://api.github.com/users/elamje/followers", "following_url": "https://api.github.com/users/elamje/following{/other_user}", "gists_url": "https://api.github.com/users/elamje/gists{/gist_id}", "starred_url": "https://api.github.com/users/elamje/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elamje/subscriptions", "organizations_url": "https://api.github.com/users/elamje/orgs", "repos_url": "https://api.github.com/users/elamje/repos", "events_url": "https://api.github.com/users/elamje/events{/privacy}", "received_events_url": "https://api.github.com/users/elamje/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-10-03T06:59:10Z", "updated_at": "2019-10-09T00:04:53Z", "closed_at": "2019-10-09T00:04:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nUser uploaded file viewer is wrapped in ```@login_required```, but somehow both anonymous users and other users can see that users file.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Upload file \"X.pdf\" as user Y\r\n2. Logout\r\n3. As anonymous user, browse to show/X.pdf\r\n4. File is visible\r\nor \r\n3. As a different user, browse to show/X.pdf\r\n4. File is visible\r\n\r\n**Expected behavior**\r\nI expect to be redirected to my login view when an anonymous person tries to go to this address.\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: MacOS, iOS\r\n - Browser Safari & firefox\r\n - Version Latest\r\n\r\n**Additional context**\r\nCode \r\n```python\r\n@app.route('/show/<filename>')\r\n@login_required\r\ndef show(filename: str) -> Union[Response, str]:\r\n    filename = secure_filename(filename)  # clean user input\r\n    user_dir = os.path.join(app.config['UPLOAD_FOLDER'], current_user.uuid)\r\n    if os.path.exists(os.path.join(user_dir, filename)):\r\n        return send_from_directory(directory=user_dir, filename=filename)\r\n    else:\r\n        abort(404)\r\n```\r\n\r\nI honestly have no clue how this is happening. Each user has a unique uuid that acts as a unique directory where their files get stored to disk. \r\n\r\nMy bug might come from a misunderstanding of how cookies and session data are stored here. It might be relevant that I am accessing these file urls shortly after being logged in as the correct user that owns the files.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/455", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/455/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/455/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/455/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/455", "id": 500846494, "node_id": "MDU6SXNzdWU1MDA4NDY0OTQ=", "number": 455, "title": "Disable cookie authentication for API requests", "user": {"login": "mfrlin", "id": 1454607, "node_id": "MDQ6VXNlcjE0NTQ2MDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1454607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfrlin", "html_url": "https://github.com/mfrlin", "followers_url": "https://api.github.com/users/mfrlin/followers", "following_url": "https://api.github.com/users/mfrlin/following{/other_user}", "gists_url": "https://api.github.com/users/mfrlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfrlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfrlin/subscriptions", "organizations_url": "https://api.github.com/users/mfrlin/orgs", "repos_url": "https://api.github.com/users/mfrlin/repos", "events_url": "https://api.github.com/users/mfrlin/events{/privacy}", "received_events_url": "https://api.github.com/users/mfrlin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-01T11:55:21Z", "updated_at": "2019-10-01T12:17:50Z", "closed_at": "2019-10-01T12:17:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "In documentation: https://flask-login.readthedocs.io/en/latest/#disabling-session-cookie-for-apis you can disable that session cookie gets set. But to guard against CSRF attacks I would like to disable user loading via cookie (only with API calls). Is this possible?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/452", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/452/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/452/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/452/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/452", "id": 492826534, "node_id": "MDU6SXNzdWU0OTI4MjY1MzQ=", "number": 452, "title": "Missing REMEMBER_COOKIE_SAMESITE config", "user": {"login": "Dreamsorcerer", "id": 2203121, "node_id": "MDQ6VXNlcjIyMDMxMjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/2203121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dreamsorcerer", "html_url": "https://github.com/Dreamsorcerer", "followers_url": "https://api.github.com/users/Dreamsorcerer/followers", "following_url": "https://api.github.com/users/Dreamsorcerer/following{/other_user}", "gists_url": "https://api.github.com/users/Dreamsorcerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dreamsorcerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dreamsorcerer/subscriptions", "organizations_url": "https://api.github.com/users/Dreamsorcerer/orgs", "repos_url": "https://api.github.com/users/Dreamsorcerer/repos", "events_url": "https://api.github.com/users/Dreamsorcerer/events{/privacy}", "received_events_url": "https://api.github.com/users/Dreamsorcerer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-12T14:02:20Z", "updated_at": "2020-02-12T14:55:41Z", "closed_at": "2020-02-12T14:55:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The remember cookie equivalent of SESSION_COOKIE_SAMESITE from the flask config doesn't appear to exist.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/449", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/449/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/449/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/449/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/449", "id": 482630974, "node_id": "MDU6SXNzdWU0ODI2MzA5NzQ=", "number": 449, "title": "The _id session value is fixated between logins and logouts", "user": {"login": "ndavison", "id": 1152676, "node_id": "MDQ6VXNlcjExNTI2NzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1152676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndavison", "html_url": "https://github.com/ndavison", "followers_url": "https://api.github.com/users/ndavison/followers", "following_url": "https://api.github.com/users/ndavison/following{/other_user}", "gists_url": "https://api.github.com/users/ndavison/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndavison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndavison/subscriptions", "organizations_url": "https://api.github.com/users/ndavison/orgs", "repos_url": "https://api.github.com/users/ndavison/repos", "events_url": "https://api.github.com/users/ndavison/events{/privacy}", "received_events_url": "https://api.github.com/users/ndavison/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-20T03:57:07Z", "updated_at": "2020-02-15T16:19:12Z", "closed_at": "2020-02-15T16:19:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I noticed that the `_id` attribute that flask-login creates in the Flask session appears to be sticking around even after calling `logout_user()` and `login_user()`.\r\n\r\nHere's a simple Flask app that will show this:\r\n\r\nhttps://gist.github.com/ndavison/52317885235554bfcfdd13a522aa1b5a\r\n\r\nIf you `flask run` this, you'll see the session printed to the console before every request. In this example I'm using `flask_login` to create a session for anonymous users as well (when accessing `GET /`). If you note the `_id` in the session given to you when accessing `GET /`, then access `GET /login` and `GET /logout`, and then `/login` again, the `_id` in the session is unchanged since the first anonymous access. I believe this is also an issue if your Flask app doesn't give sessions to anonymous users (in which case, it would be demonstrated by authenticating as one user, logging out, and authenticating as another in the same browser session).\r\n\r\nThe impact of this seems fairly benign out-of-the-box, but if a dev were to incorporate this `_id` value in their app logic, thinking it uniquely identified a login, then this could effectively amount to a session fixation issue, whereby an attacker could first establish a session cookie, and abuse some other vulnerability (e.g. response header injection) to pass the cookie onto another user (who may be anonymous at this point), and when they authenticated, their authenticated session would still contain this `_id`.\r\n\r\nI understand there are issues with completely destroying the Flask session on login and logout as it may be used to store other things not related to flask-login, but I imagine the `_id` value can be destroyed and regenerated on login and logout? if so, I'm happy to put forward a PR with this change.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/447", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/447/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/447/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/447/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/447", "id": 479848762, "node_id": "MDU6SXNzdWU0Nzk4NDg3NjI=", "number": 447, "title": "Bug - @login_required throws 401 on mobile view switching", "user": {"login": "yespbs", "id": 478293, "node_id": "MDQ6VXNlcjQ3ODI5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/478293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yespbs", "html_url": "https://github.com/yespbs", "followers_url": "https://api.github.com/users/yespbs/followers", "following_url": "https://api.github.com/users/yespbs/following{/other_user}", "gists_url": "https://api.github.com/users/yespbs/gists{/gist_id}", "starred_url": "https://api.github.com/users/yespbs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yespbs/subscriptions", "organizations_url": "https://api.github.com/users/yespbs/orgs", "repos_url": "https://api.github.com/users/yespbs/repos", "events_url": "https://api.github.com/users/yespbs/events{/privacy}", "received_events_url": "https://api.github.com/users/yespbs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-12T21:01:59Z", "updated_at": "2019-08-13T12:26:44Z", "closed_at": "2019-08-12T22:07:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nThis is a typical bug I am experiencing while testing flask login with mobile view. The session cookie generated for default desktop view becomes unavailable if I switch to mobile and press refresh. It shows 401 and I have to delete the flask cookie and re-login.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Use Firefox latest ( with Web Developer menu ) \r\n2. Load the site and authenticate with desktop view \r\n3. Open Web Developer -> Web Console \r\n4. Switch to mobile view ( Responsive Design Mode, bottom right corner )\r\n5. On view change, refresh the page (CTRL + R )\r\n6. 401 thrown \r\n\r\n**Expected behavior**\r\nLogin state should stay\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Ubuntu 18\r\n - Browser Firefox 68.0.1\r\n - Version Flask-WTF 0.14.2\r\n\r\n**Smartphone (please complete the following information):**\r\n - Device: [e.g. iPhone6]\r\n - OS: [e.g. iOS8.1]\r\n - Browser [e.g. stock browser, safari]\r\n - Version [e.g. 22]\r\n\r\n**Additional context**\r\nI verified that the remember cookie removed on refresh after mobile view switch\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/445", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/445/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/445/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/445/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/445", "id": 475983955, "node_id": "MDU6SXNzdWU0NzU5ODM5NTU=", "number": 445, "title": "async calls to database do not work", "user": {"login": "wpmjones", "id": 8368490, "node_id": "MDQ6VXNlcjgzNjg0OTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/8368490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wpmjones", "html_url": "https://github.com/wpmjones", "followers_url": "https://api.github.com/users/wpmjones/followers", "following_url": "https://api.github.com/users/wpmjones/following{/other_user}", "gists_url": "https://api.github.com/users/wpmjones/gists{/gist_id}", "starred_url": "https://api.github.com/users/wpmjones/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wpmjones/subscriptions", "organizations_url": "https://api.github.com/users/wpmjones/orgs", "repos_url": "https://api.github.com/users/wpmjones/repos", "events_url": "https://api.github.com/users/wpmjones/events{/privacy}", "received_events_url": "https://api.github.com/users/wpmjones/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-02T03:53:18Z", "updated_at": "2020-03-19T13:40:27Z", "closed_at": "2019-08-02T03:57:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Maybe I'm not doing something right, but I'm using asyncpg to connect to my postgresql database which houses my users.  The user_loader is synchronous.  I have tried using `loop.run_until_complete` but I get one of the following errors:\r\n`Cannot run the event loop while another loop is running`\r\n`RuntimeWarning: coroutine 'User.get' was never awaited`\r\n\r\nAm I trying to do something that just isn't possible with this package or am I missing a step somewhere?\r\n\r\nCode at:\r\nhttps://github.com/wpmjones/studtext/blob/master/temp.py", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/443", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/443/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/443/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/443/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/443", "id": 468027729, "node_id": "MDU6SXNzdWU0NjgwMjc3Mjk=", "number": 443, "title": "Flask Login ignores REMEMBER_COOKIE_DURATION", "user": {"login": "Yakuza-UA", "id": 39663752, "node_id": "MDQ6VXNlcjM5NjYzNzUy", "avatar_url": "https://avatars2.githubusercontent.com/u/39663752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yakuza-UA", "html_url": "https://github.com/Yakuza-UA", "followers_url": "https://api.github.com/users/Yakuza-UA/followers", "following_url": "https://api.github.com/users/Yakuza-UA/following{/other_user}", "gists_url": "https://api.github.com/users/Yakuza-UA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yakuza-UA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yakuza-UA/subscriptions", "organizations_url": "https://api.github.com/users/Yakuza-UA/orgs", "repos_url": "https://api.github.com/users/Yakuza-UA/repos", "events_url": "https://api.github.com/users/Yakuza-UA/events{/privacy}", "received_events_url": "https://api.github.com/users/Yakuza-UA/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-07-15T09:30:49Z", "updated_at": "2020-02-18T02:36:25Z", "closed_at": "2020-02-15T16:23:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to make Login sessions persistent (do not expire when browser closes) with certain lifetime (e.g. 15 minutes). Apart from Flask Login my app is also using LDAP3 Flask Login. \r\n\r\nCurrently I observe persistence behavior regardless of 'REMEMBER_COOKIE_DURATION'.\r\n\r\nI've checked my session dict and can see that session['_permanent'] is set to True, which is weird, as I don't explicitely set this one in my application and I don't believe LDAP3 Flask Login does anything to it. I tried the following as part of my Config class.\r\n\r\n`    REMEMBER_COOKIE_DURATION = timedelta(minutes=1)`\r\n(effectively same as app.config['REMEMBER_COOKIE_DURATION'] = timedelta(minutes=1))\r\n\r\nThis has zero effect on session duration. \r\nI am able to achieve 'session expired' behavior with this\r\n\r\n```\r\n@app.before_request\r\ndef before_request():\r\n    session.permanent = True\r\n    app.permanent_session_lifetime = timedelta(minutes=1)\r\n```\r\n\r\nThis, however, invalidates whole Flask session and not just Login. Basically, if I store some other conveniency parameters in the Cookie - they are invalidated. I don't want to expire Flask session, but rather want to make sure Flask Login is doing what it has to do according to the documentation.\r\n\r\nHere's how I login the user:\r\n\r\n```\r\n    form = LoginForm()\r\n    if form.validate_on_submit():\r\n        login_user(form.user)\r\n        next_page = request.args.get('next')\r\n        if not next_page or url_parse(next_page).netloc != '':\r\n            next_page = url_for('list')\r\n        return redirect(next_page)\r\n    return render_template('login.html.j2', title='Sign In', form=form)\r\n```\r\n\r\nWhat am I doing wrong?\r\n\r\nP.S. Also, according to Flask 1.0.2 documentation, default behavior is 'session expired when browser is closed' which is not true for me and I don't know why it is persistent by default (at Flask level). Anyway, I believe this is unrelated as Flask Login uses separate Cookie for login session. Correct me if I am wrong.\r\n\r\n--- update ---\r\nI am using Flask-Login 0.4.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/442", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/442/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/442/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/442/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/442", "id": 466362795, "node_id": "MDU6SXNzdWU0NjYzNjI3OTU=", "number": 442, "title": "New release?", "user": {"login": "anthonyolea", "id": 2952824, "node_id": "MDQ6VXNlcjI5NTI4MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2952824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anthonyolea", "html_url": "https://github.com/anthonyolea", "followers_url": "https://api.github.com/users/anthonyolea/followers", "following_url": "https://api.github.com/users/anthonyolea/following{/other_user}", "gists_url": "https://api.github.com/users/anthonyolea/gists{/gist_id}", "starred_url": "https://api.github.com/users/anthonyolea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anthonyolea/subscriptions", "organizations_url": "https://api.github.com/users/anthonyolea/orgs", "repos_url": "https://api.github.com/users/anthonyolea/repos", "events_url": "https://api.github.com/users/anthonyolea/events{/privacy}", "received_events_url": "https://api.github.com/users/anthonyolea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-10T15:03:57Z", "updated_at": "2019-07-10T15:11:26Z", "closed_at": "2019-07-10T15:11:06Z", "author_association": "NONE", "active_lock_reason": "off-topic", "body": "Hello,\r\n\r\nI'm pretty sure this is a recurrent question but the PyPi/GitHub release is quite outdated (2017/12/02), is there any plans to make a new release soon?\r\n\r\nThanks :-)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/441", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/441/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/441/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/441/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/441", "id": 460922182, "node_id": "MDU6SXNzdWU0NjA5MjIxODI=", "number": 441, "title": "Extend login_required with custom_auth to allow more granular permission management", "user": {"login": "blagasz", "id": 5508472, "node_id": "MDQ6VXNlcjU1MDg0NzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/5508472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blagasz", "html_url": "https://github.com/blagasz", "followers_url": "https://api.github.com/users/blagasz/followers", "following_url": "https://api.github.com/users/blagasz/following{/other_user}", "gists_url": "https://api.github.com/users/blagasz/gists{/gist_id}", "starred_url": "https://api.github.com/users/blagasz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blagasz/subscriptions", "organizations_url": "https://api.github.com/users/blagasz/orgs", "repos_url": "https://api.github.com/users/blagasz/repos", "events_url": "https://api.github.com/users/blagasz/events{/privacy}", "received_events_url": "https://api.github.com/users/blagasz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-26T11:45:11Z", "updated_at": "2019-06-28T10:02:21Z", "closed_at": "2019-06-28T04:46:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would want to accomplish something similar to #421, but nothing specific to a certain role management only a custom handler that support anything the developer might want to implement.\r\n\r\nIt would also include a feature to generate a menu tree based on the currently logged in user's privileges. This is extremely useful for dynamic menus.\r\n\r\nI know this is a big feature, but I am happy to implement it in a higher quality than the following example code is. I reviewed all the other solution I've found including Flask-Principal and they are either too complicated or not versatile enough, so I implemented a small extension to accomplish the above two features without reinventing what Flask-Login already do best. My code is taken from a project that is used in a live system, but I do know it is not good enough to found its way to Flask-Login in its current form. If you are interested I am happy to make a PR with examples and test cases.\r\n\r\nIn my opinion these two features would highly improve the usability of Flask-Login without interfering with its current functionality.\r\n\r\n```python\r\nfrom functools import wraps\r\n\r\nfrom flask import current_app, url_for\r\n\r\nfrom flask_login import (\r\n    LoginManager as OrigLoginManager, current_user, UserMixin,\r\n    login_required, login_user, logout_user\r\n    )\r\n\r\nfrom collections import OrderedDict as odict\r\n\r\n\r\nclass LoginManager(OrigLoginManager):\r\n    \"\"\"\r\n    FLASK-LOGIN enhancement\r\n    \"\"\"\r\n\r\n    def __init__(self, *args, **kwds):\r\n        super().__init__(*args, **kwds)\r\n\r\n        self.custom_auth_callback = None\r\n        self.nopriv_callback = None\r\n\r\n\r\n    def custom_auth_handler(self, callback):\r\n        self.custom_auth_callback = callback\r\n        return callback\r\n\r\n    def nopriviledge_handler(self, callback):\r\n        self.nopriv_callback = callback\r\n        return callback\r\n\r\n    def nopriviledge(self):\r\n        return self.nopriv_callback()\r\n\r\n    @property\r\n    def auth_map(self):\r\n\r\n        am = []\r\n\r\n        for endpoint, args, kwds in _auth_map:\r\n\r\n            ok = self.custom_auth_callback(endpoint, args, kwds)\r\n\r\n            # add only kwds to be used separately\r\n            am.append((endpoint, ok, kwds))\r\n\r\n        return am\r\n\r\n\r\n    def get_menu_base(self):\r\n\r\n        def has_no_empty_params(rule):\r\n            defaults = rule.defaults if rule.defaults is not None else ()\r\n            arguments = rule.arguments if rule.arguments is not None else ()\r\n            return len(defaults) >= len(arguments)\r\n\r\n        links = {}\r\n\r\n        for rule in current_app.url_map.iter_rules():\r\n\r\n            # Filter out rules we can't navigate to in a browser\r\n            # and rules that require parameters\r\n            if \"GET\" in rule.methods and has_no_empty_params(rule):\r\n                url = url_for(rule.endpoint, **(rule.defaults or {}))\r\n                key = url.split('/')[1:] # more questions\r\n                # no duplicates allowed by werkzeug\r\n                links[rule.endpoint] = (key, url)\r\n\r\n        mp = []\r\n\r\n        for endpoint, ok, kwds in self.auth_map:\r\n\r\n            if ok and endpoint in links:\r\n                key, url = links[endpoint]\r\n\r\n                item = MenuItem()\r\n                item.url = url\r\n                item.key = key\r\n                item.endpoint = endpoint\r\n                item.subs = []\r\n\r\n                mp.append(item)\r\n\r\n        return mp\r\n\r\n    @property\r\n    def menu(self):\r\n\r\n        def treebuilder(data, key=None, max_level=None):\r\n            \"\"\"\r\n            TODO implement tree flattening after a certain level\r\n            \"\"\"\r\n\r\n            # collectiong the items in order for this level\r\n            col = odict()\r\n\r\n            level = 0 if key is None else len(key)\r\n            start = '' if key is None else '.'.join(key)\r\n\r\n            # print('treebuilder', key, level, start)\r\n\r\n            # check all the items\r\n            for item in data:\r\n\r\n                # if they are not for this node then nothing happens\r\n                if not '.'.join(item.key).startswith(start):\r\n                    # print(\"not considered - different branch\", item)\r\n                    continue\r\n\r\n                if len(item.key) == level:\r\n                    # print(\"not considered - current node\")\r\n                    continue\r\n\r\n                # print(\"consider\", item)\r\n                # node to consider\r\n                key_piece = item.key[level]\r\n\r\n                # add to collection if not already there\r\n                if key_piece not in col:\r\n                    # create a pseudo-node\r\n                    x = MenuItem()\r\n                    x.url = \"#\"\r\n                    x.subs = []\r\n                    # x.endpoint = ''\r\n                    x.key = item.key[:level+1]\r\n                    col[key_piece] = x\r\n\r\n                # build tree if not yet exist - triggered on any node\r\n                if len(item.key) > level and not item.subs:\r\n                    col[key_piece].subs = treebuilder(data, item.key[:level+1])\r\n\r\n                # a real subnode -> update\r\n                if len(item.key) == level+1:\r\n                    # save subs\r\n                    item.subs = col[key_piece].subs\r\n                    # update with the real item\r\n                    col[key_piece] = item\r\n                    # print(\"added\", item)\r\n\r\n            # return only the subs in order\r\n            return list(col.values())\r\n\r\n        mp = self.get_menu_base()\r\n\r\n        menu = MenuItem()  # root\r\n        menu.subs = treebuilder(mp)\r\n\r\n        return menu\r\n\r\n\r\nclass MenuItem(): pass\r\n\r\n\r\n# context problem might need to set app current_menu context...\r\n_auth_map = []\r\n\r\n\r\n# add to utils near login_required\r\ndef custom_auth(*args, **kwds):\r\n\r\n    # if callable(args[0]): pass\r\n\r\n    def decorator(func):\r\n\r\n        # log.info(\"FUNC DECORATED: {}\".format(func.__name__))\r\n        # False means needs authentication\r\n\r\n        _auth_map.append((func.__name__, args, kwds))\r\n\r\n        @wraps(func)\r\n        def decorated_view(*f_args, **f_kwds):\r\n\r\n            lm = current_app.login_manager\r\n\r\n            # add standard checks from flask-login.utils login required\r\n            if lm.custom_auth_callback and lm.custom_auth_callback(func.__name__, args, kwds):\r\n                return func(*f_args, **f_kwds)\r\n            elif current_user.is_authenticated:\r\n                # no right to access - redirect back to previous page \r\n                return lm.nopriviledge()\r\n            else:\r\n                return lm.unauthorized()\r\n\r\n        return decorated_view\r\n\r\n    return decorator\r\n\r\nauth = custom_auth\r\n\r\n# could be a lm method\r\ndef check_auth(*args, **kwds):\r\n\r\n    lm = current_app.login_manager\r\n\r\n    # call `custom_auth_callback` with empty function name\r\n    return lm.custom_auth_callback \\\r\n        and lm.custom_auth_callback('', args, kwds)\r\n\r\ncheck = check_auth\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/440", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/440/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/440/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/440/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/440", "id": 458231840, "node_id": "MDU6SXNzdWU0NTgyMzE4NDA=", "number": 440, "title": "login_manager.session_protection=strong doesn't redirect to login page", "user": {"login": "ecumene", "id": 6249465, "node_id": "MDQ6VXNlcjYyNDk0NjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/6249465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecumene", "html_url": "https://github.com/ecumene", "followers_url": "https://api.github.com/users/ecumene/followers", "following_url": "https://api.github.com/users/ecumene/following{/other_user}", "gists_url": "https://api.github.com/users/ecumene/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecumene/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecumene/subscriptions", "organizations_url": "https://api.github.com/users/ecumene/orgs", "repos_url": "https://api.github.com/users/ecumene/repos", "events_url": "https://api.github.com/users/ecumene/events{/privacy}", "received_events_url": "https://api.github.com/users/ecumene/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-19T21:19:39Z", "updated_at": "2019-06-20T12:48:08Z", "closed_at": "2019-06-20T12:48:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nWith these two values set:\r\n```\r\nlogin_manager.session_protection = \"strong\"\r\nlogin_manager.refresh_view = \"users.login\"\r\n```\r\nand\r\n```\r\n@login_required\r\n```\r\nOn most routes \r\n\r\nThe user closes their browser and begins a new session, and they are not prompted to login, instead they're given a page where href's redirect to the login page, and other links give permission errors. This isn't optimal.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Login to your API\r\n2. Close the browser entirely\r\n3. Go back into the api, and user is served `/static/` resources, with a skeleton of a webpage\r\n4. Clicking on hyperlinks or reloading the page, sends you to the login\r\n\r\n**Expected behavior**\r\nThe user is sent to the login page when attempting to access any url with `@login_required`\r\n\r\n**Additional context**\r\nI'm  using flask-login 0.4.0\r\nI'm closing the browser *process* entirely\r\n\r\nInternally, the way redirects are accomplished is with `flask_login` is by using the `unauthorized()` function in the `login_manager.py` file, which uses the request library to grab the request url of the page the user is trying to access. When a user is logged out trying to access the page it will properly grab the correct url and redirect the user to the variable assigned to the `login_view` setting. However, when `session protection` is set to `strong` and the user quits the application and redirects to the page, the `unauthorized()` function is not being executed.\r\n\r\nSo why aren't they sent to the login page every new browser instance?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/437", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/437/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/437/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/437/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/437", "id": 452746402, "node_id": "MDU6SXNzdWU0NTI3NDY0MDI=", "number": 437, "title": "Signals for user_registered and invalid_login_attempt", "user": {"login": "asselinpaul", "id": 868249, "node_id": "MDQ6VXNlcjg2ODI0OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/868249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asselinpaul", "html_url": "https://github.com/asselinpaul", "followers_url": "https://api.github.com/users/asselinpaul/followers", "following_url": "https://api.github.com/users/asselinpaul/following{/other_user}", "gists_url": "https://api.github.com/users/asselinpaul/gists{/gist_id}", "starred_url": "https://api.github.com/users/asselinpaul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asselinpaul/subscriptions", "organizations_url": "https://api.github.com/users/asselinpaul/orgs", "repos_url": "https://api.github.com/users/asselinpaul/repos", "events_url": "https://api.github.com/users/asselinpaul/events{/privacy}", "received_events_url": "https://api.github.com/users/asselinpaul/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141481, "node_id": "MDU6TGFiZWwxMTQxNDgx", "url": "https://api.github.com/repos/maxcountryman/flask-login/labels/Contributor%20Friendly", "name": "Contributor Friendly", "color": "0b02e1", "default": false, "description": null}, {"id": 1141482, "node_id": "MDU6TGFiZWwxMTQxNDgy", "url": "https://api.github.com/repos/maxcountryman/flask-login/labels/Feature%20Request", "name": "Feature Request", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-05T22:31:37Z", "updated_at": "2020-06-08T19:47:40Z", "closed_at": "2020-06-08T19:47:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "flask-login provides signals described here: https://flask-login.readthedocs.io/en/latest/#signals\r\n\r\nIt would be helpful to expand these to cover:\r\n\r\n- `user_registered` as provided by FlaskUser (https://flask-user.readthedocs.io/en/latest/signals.html?highlight=signals)\r\n\r\n- `invalid_login_attempt` would also be useful (for threat/security monitoring)\r\n\r\n- `password_reset` \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/430", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/430/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/430/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/430/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/430", "id": 448569597, "node_id": "MDU6SXNzdWU0NDg1Njk1OTc=", "number": 430, "title": "Ask someting", "user": {"login": "indrawow", "id": 40748620, "node_id": "MDQ6VXNlcjQwNzQ4NjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/40748620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/indrawow", "html_url": "https://github.com/indrawow", "followers_url": "https://api.github.com/users/indrawow/followers", "following_url": "https://api.github.com/users/indrawow/following{/other_user}", "gists_url": "https://api.github.com/users/indrawow/gists{/gist_id}", "starred_url": "https://api.github.com/users/indrawow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/indrawow/subscriptions", "organizations_url": "https://api.github.com/users/indrawow/orgs", "repos_url": "https://api.github.com/users/indrawow/repos", "events_url": "https://api.github.com/users/indrawow/events{/privacy}", "received_events_url": "https://api.github.com/users/indrawow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-26T13:53:37Z", "updated_at": "2019-05-26T14:01:32Z", "closed_at": "2019-05-26T14:01:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "How i can use Flask-Login **without** class User with UserMixin,,\r\nI use raw query (select * from user ...) for everything..", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/429", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/429/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/429/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/429/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/429", "id": 442839097, "node_id": "MDU6SXNzdWU0NDI4MzkwOTc=", "number": 429, "title": "login_user reports back True; but fails actually logging in.", "user": {"login": "drcrook1", "id": 6099287, "node_id": "MDQ6VXNlcjYwOTkyODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6099287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drcrook1", "html_url": "https://github.com/drcrook1", "followers_url": "https://api.github.com/users/drcrook1/followers", "following_url": "https://api.github.com/users/drcrook1/following{/other_user}", "gists_url": "https://api.github.com/users/drcrook1/gists{/gist_id}", "starred_url": "https://api.github.com/users/drcrook1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drcrook1/subscriptions", "organizations_url": "https://api.github.com/users/drcrook1/orgs", "repos_url": "https://api.github.com/users/drcrook1/repos", "events_url": "https://api.github.com/users/drcrook1/events{/privacy}", "received_events_url": "https://api.github.com/users/drcrook1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-10T18:17:34Z", "updated_at": "2019-05-10T18:45:57Z", "closed_at": "2019-05-10T18:45:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not 100% sure how to tell you to reproduce; but I'll do my best.\r\n\r\nI've got a login endpoint and a subscribe endpoint.\r\n\r\nHere is login:\r\n@security.route('/login', methods=['POST'])\r\ndef login():\r\n    '''\r\n    Route for logging in a user.\r\n    '''\r\n    loginDict = request.get_json()\r\n    user = User(loginDict, app.db)\r\n    success = login_user(user)\r\n    if(success):\r\n        return render_template('index.html')\r\n    else:\r\n        return json.dumps(Result(False, message=\"Failed to login.\"))\r\n\r\nbelow is subscribe.  I've tried setting force to true and false.  Doesn't make a difference.\r\n\r\n@security.route(\"/registersubscribe\", methods=[\"POST\"]) \r\ndef register_and_subscribe():\r\n    result = subwork.register_and_subscribe(request.get_json())\r\n    user = User({\"email\" : result.outputs.email}, app.db)\r\n    success = login_user(user)\r\n    print(\"SUCCESS: {}\".format(success))\r\n    if(success):\r\n        return render_template(\"index.html\")\r\n    else:\r\n        json.dumps(result.to_dict())\r\n\r\n\r\nHere is my user_loader:\r\n\r\n@login_manager.user_loader\r\ndef load_user(userid):\r\n    if(userid is None):\r\n        return None\r\n    user_dict = {\"_id\": userid}\r\n    user = User(user_dict, app.db)\r\n    return user\r\n\r\n\r\nwhen I hit the login endpoint everything works great.  Happy go lucky.  When I hit the register endpoint, the user is in the database, I can pull the user out of the database, and notice the logic is exactly like login after the initial register & subscribe function.\r\n\r\nIn the login endpoint; the load_user function gets hit.  In the register function, login_user() returns True; but the load_user doesn't get hit.  The user is not logged in; I have to return back to the login page and seperately log in.  Then it works and the load_user function gets hit.\r\n\r\nI'm not really sure what to do here; seems like its bad behavior.  I'm happy to get more details if necessary.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/427", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/427/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/427/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/427/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/427", "id": 429496202, "node_id": "MDU6SXNzdWU0Mjk0OTYyMDI=", "number": 427, "title": "Modifying/extending current_user", "user": {"login": "macfire", "id": 1426783, "node_id": "MDQ6VXNlcjE0MjY3ODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1426783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/macfire", "html_url": "https://github.com/macfire", "followers_url": "https://api.github.com/users/macfire/followers", "following_url": "https://api.github.com/users/macfire/following{/other_user}", "gists_url": "https://api.github.com/users/macfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/macfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/macfire/subscriptions", "organizations_url": "https://api.github.com/users/macfire/orgs", "repos_url": "https://api.github.com/users/macfire/repos", "events_url": "https://api.github.com/users/macfire/events{/privacy}", "received_events_url": "https://api.github.com/users/macfire/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-04T21:43:10Z", "updated_at": "2019-04-13T01:15:28Z", "closed_at": "2019-04-12T14:56:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "It it possible to add a key/value pair to the current_user object after log in?\r\n\r\n<s>If not, would a global variable `g` be the way to go?</s>\r\n\r\nFor example, after login, the user is redirect to a home page -- at which point I'd like to assign a key/value (based on some user-action) that can be used throughout the site.\r\n\r\nNon-working example:\r\nPython\r\n```python\r\ncurrent_user['mykey'] = 'my value'\r\n```\r\nJinja2\r\n```jinja2\r\n{{ current_user.mykey }}\r\n```\r\n\r\n--\r\nUpdated: After some research, I've ruled out `g` variable.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/426", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/426/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/426/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/426/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/426", "id": 429286458, "node_id": "MDU6SXNzdWU0MjkyODY0NTg=", "number": 426, "title": "Set remember me cookie HttpOnly flag by default", "user": {"login": "skylerberg", "id": 4156131, "node_id": "MDQ6VXNlcjQxNTYxMzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4156131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skylerberg", "html_url": "https://github.com/skylerberg", "followers_url": "https://api.github.com/users/skylerberg/followers", "following_url": "https://api.github.com/users/skylerberg/following{/other_user}", "gists_url": "https://api.github.com/users/skylerberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/skylerberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skylerberg/subscriptions", "organizations_url": "https://api.github.com/users/skylerberg/orgs", "repos_url": "https://api.github.com/users/skylerberg/repos", "events_url": "https://api.github.com/users/skylerberg/events{/privacy}", "received_events_url": "https://api.github.com/users/skylerberg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-04T13:41:36Z", "updated_at": "2020-02-21T11:31:19Z", "closed_at": "2020-02-12T14:53:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I believe flask login should default to secure settings where possible. The remember me token currently defaults to not having the `HttpOnly` flag. This means that if the website is vulnerable to any cross-site scripting attacks (which is very common) then an attacker can steal the remember token. The `HttpOnly` flag can be used to limit the impact of cross-site scripting by not allowing javascript on the site to access the cookie, thus preventing the attacker from stealing the user's session completely.\r\n\r\nAccessing the remember token in javascript seems like an uncommon use case. This means that changing the default to HttpOnly is not likely to impact most users.\r\n\r\nLet me know your thoughts.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/425", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/425/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/425/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/425/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/425", "id": 427136924, "node_id": "MDU6SXNzdWU0MjcxMzY5MjQ=", "number": 425, "title": "Please release 0.4.2", "user": {"login": "GuilloOme", "id": 247594, "node_id": "MDQ6VXNlcjI0NzU5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/247594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuilloOme", "html_url": "https://github.com/GuilloOme", "followers_url": "https://api.github.com/users/GuilloOme/followers", "following_url": "https://api.github.com/users/GuilloOme/following{/other_user}", "gists_url": "https://api.github.com/users/GuilloOme/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuilloOme/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuilloOme/subscriptions", "organizations_url": "https://api.github.com/users/GuilloOme/orgs", "repos_url": "https://api.github.com/users/GuilloOme/repos", "events_url": "https://api.github.com/users/GuilloOme/events{/privacy}", "received_events_url": "https://api.github.com/users/GuilloOme/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-03-29T19:03:48Z", "updated_at": "2019-06-05T15:30:40Z", "closed_at": "2019-06-05T15:30:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "There was a lot of commit since the last release (and some fixing some important issue).\r\nWhy there was no release since Dec. 2017?\r\n\r\nThanks,", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/423", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/423/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/423/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/423/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/423", "id": 417021542, "node_id": "MDU6SXNzdWU0MTcwMjE1NDI=", "number": 423, "title": "request_loader seems broken", "user": {"login": "jslay88", "id": 6158929, "node_id": "MDQ6VXNlcjYxNTg5Mjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6158929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jslay88", "html_url": "https://github.com/jslay88", "followers_url": "https://api.github.com/users/jslay88/followers", "following_url": "https://api.github.com/users/jslay88/following{/other_user}", "gists_url": "https://api.github.com/users/jslay88/gists{/gist_id}", "starred_url": "https://api.github.com/users/jslay88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jslay88/subscriptions", "organizations_url": "https://api.github.com/users/jslay88/orgs", "repos_url": "https://api.github.com/users/jslay88/repos", "events_url": "https://api.github.com/users/jslay88/events{/privacy}", "received_events_url": "https://api.github.com/users/jslay88/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-04T22:26:58Z", "updated_at": "2019-03-06T22:20:21Z", "closed_at": "2019-03-06T22:20:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nI have been able to successfully implement a basic form POST and login as described by the documentation. I setup the user_loader and things seem to work well. I have gone on to try and implement a `request_loader` to handle API tokens so that a user can make api requests with the `x-api-key` header.\r\n\r\nWhen I try to hit the `@login_required` endpoints with Postman, regardless if I provide the `x-api-key` header or not, my request_loader never fires, and I receive a 302 to the login page. If I hit the login page with a GET with post man, request_loader never fires.\r\n\r\nIf I use a browser and browse to the login page directly, I see the request_loader firing. Again, adding to the confusion as to why a browser loading /login causes it to fire but not Postman loading /login. As far as I can tell, there should be no difference in how a basic GET request with no authentication should be handled, regardless if it is a browser or Postman.\r\n\r\nIs there something that I have completely skipped over in the documentation? It appears the request_loader never even attempts to fire with Postman for whatever reason, and it only appears to fire if you are already logged in when hitting the `@login_required` endpoints, which seems kinda pointless, since I am already logged in.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/422", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/422/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/422/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/422/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/422", "id": 414881099, "node_id": "MDU6SXNzdWU0MTQ4ODEwOTk=", "number": 422, "title": "Deprecate the Remember Me implementation in favor of a \"freshness expiry\" time", "user": {"login": "dcosson", "id": 708904, "node_id": "MDQ6VXNlcjcwODkwNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/708904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcosson", "html_url": "https://github.com/dcosson", "followers_url": "https://api.github.com/users/dcosson/followers", "following_url": "https://api.github.com/users/dcosson/following{/other_user}", "gists_url": "https://api.github.com/users/dcosson/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcosson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcosson/subscriptions", "organizations_url": "https://api.github.com/users/dcosson/orgs", "repos_url": "https://api.github.com/users/dcosson/repos", "events_url": "https://api.github.com/users/dcosson/events{/privacy}", "received_events_url": "https://api.github.com/users/dcosson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-27T00:08:39Z", "updated_at": "2020-02-15T16:24:52Z", "closed_at": "2020-02-15T16:24:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've recently been digging into the internals of flask-login to make sure sessions in my app are behaving as needed, and the current implementation of Remember Me cookies seems less than ideal. I realize this is a big change but I'm curious if you'd be open to changing it.\r\n\r\nFrom what I have gleaned, and please correct me if my starting assumption is wrong, the purpose of the Remember Me cookie is to enable the freshness behavior in Flask Login. One obvious use case of which is to allow overall sessions to be longer lived so users are not constantly having to re-enter their passwords, but be able to add an extra layer of security to certain routes by requiring a fresh login.\r\n\r\nIt doesn't seem like the current Remember Me functionality is a very good way of enabling this though, for a few reasons:\r\n\r\n  - it doesn't work well for anyone using stateful sessions since it lives outside of Flask's session abstraction. If you are using stateful sessions, and want to be able to reliably expire old sessions for users, maybe when their password changes, or if they have had an account takeover, etc. the Remember Me cookie breaks this since any live cookie in the wild can always come back and create a new logged in session for the user. \r\n\r\n  - it's unintuitive for new users of this library, because for all intents and purposes real session object is now the Remember Me cookie and not the flask session object, so for instance you may think you are setting a max age on your sessions with PERMANENT_SESSION_LIFETIME but you're not. \r\n\r\n  - The first paragraph in the docs seems to be flat-out wrong. It says `By default, when the user closes their browser the Flask Session is deleted and the user is logged out. \u201cRemember Me\u201d prevents the user from accidentally being logged out when they close their browser.` It's surprising to me that this could be so wrong, maybe it was once true but it isn't anymore. The PERMANENT_SESSION_LIFETIME defaults to 31 days per the [Flask docs](http://flask.pocoo.org/docs/1.0/api/#flask.Flask.permanent_session_lifetime). This sets the max-age on the session cookie, and any modern browser will treat a cookie that has a max-age as a [persistent rather than a session cookie](https://en.wikipedia.org/wiki/HTTP_cookie#Session_cookie) which means they're not cleared when the browser is closed. So basically, unless I'm missing something it seems like the initial reason for having the Remember Me cookie is no longer valid and it has evolved to just control the freshness bit.\r\n\r\nIt would be nice if there were a global config option to disable Remember Me cookies altogether (rather than allow the `remember` boolean being passed to invocations of `login_user`). It should probably even be marked deprecated in the docs since it no longer serves its original purpose.\r\n\r\nAnd then separately, it would be great if the freshness could be controlled as a separate freshness expiration time and live within the session data itself. This way it fits Flask's session abstraction a lot better, and it just seems like a much less convoluted model to understand, without giving anything up.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/421", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/421/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/421/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/421/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/421", "id": 414625672, "node_id": "MDU6SXNzdWU0MTQ2MjU2NzI=", "number": 421, "title": "Login Required with role validation", "user": {"login": "brennoflavio", "id": 27819187, "node_id": "MDQ6VXNlcjI3ODE5MTg3", "avatar_url": "https://avatars1.githubusercontent.com/u/27819187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brennoflavio", "html_url": "https://github.com/brennoflavio", "followers_url": "https://api.github.com/users/brennoflavio/followers", "following_url": "https://api.github.com/users/brennoflavio/following{/other_user}", "gists_url": "https://api.github.com/users/brennoflavio/gists{/gist_id}", "starred_url": "https://api.github.com/users/brennoflavio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brennoflavio/subscriptions", "organizations_url": "https://api.github.com/users/brennoflavio/orgs", "repos_url": "https://api.github.com/users/brennoflavio/repos", "events_url": "https://api.github.com/users/brennoflavio/events{/privacy}", "received_events_url": "https://api.github.com/users/brennoflavio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-26T14:00:53Z", "updated_at": "2020-07-27T14:16:48Z", "closed_at": "2020-02-12T14:49:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Often in my implementations of Flask Login, I need to implement a role system, so I can make admin only views. The way I did it is to implement a new decorator based on ```login_required```, called it ```login_with_role```:\r\n\r\n```\r\ndef login_with_role(role, *args, **kwargs):\r\n    def login_required(func):\r\n        @wraps(func)\r\n        def decorated_view(*args, **kwargs):\r\n            if not current_user.is_authenticated:\r\n                return current_app.login_manager.unauthorized()\r\n            elif current_user.role() not in role:\r\n                return current_app.login_manager.unauthorized()\r\n            elif request.method in EXEMPT_METHODS:\r\n                return func(*args, **kwargs)\r\n            elif current_app.config.get('LOGIN_DISABLED'):\r\n                return func(*args, **kwargs)\r\n            return func(*args, **kwargs)\r\n        return decorated_view\r\n    return login_required\r\n```\r\n\r\nThis also needs implementation of ```role()``` method on User class. This allow creating views like this:\r\n```\r\n@app.route(\"/\", methods=[\"GET\"])\r\n@login_with_role(\"admin\")\r\ndef my_view():\r\n...\r\n```\r\n\r\nSo only admins will be allowed to see the view.\r\n\r\nIs there any discussion about this topic? I think this can be very useful for many cases!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/419", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/419/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/419/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/419/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/419", "id": 379078109, "node_id": "MDU6SXNzdWUzNzkwNzgxMDk=", "number": 419, "title": "Ability to disable flashing of `login_message` on `login_manager.unauthorized()` handler ", "user": {"login": "shyamz-22", "id": 17795509, "node_id": "MDQ6VXNlcjE3Nzk1NTA5", "avatar_url": "https://avatars0.githubusercontent.com/u/17795509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shyamz-22", "html_url": "https://github.com/shyamz-22", "followers_url": "https://api.github.com/users/shyamz-22/followers", "following_url": "https://api.github.com/users/shyamz-22/following{/other_user}", "gists_url": "https://api.github.com/users/shyamz-22/gists{/gist_id}", "starred_url": "https://api.github.com/users/shyamz-22/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shyamz-22/subscriptions", "organizations_url": "https://api.github.com/users/shyamz-22/orgs", "repos_url": "https://api.github.com/users/shyamz-22/repos", "events_url": "https://api.github.com/users/shyamz-22/events{/privacy}", "received_events_url": "https://api.github.com/users/shyamz-22/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-09T09:06:15Z", "updated_at": "2018-11-12T16:21:36Z", "closed_at": "2018-11-12T16:21:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to access a protected page directly, after the user is successfully authenticated and the landing page reads the flashed messages, `Please login to access the page` message is shown always, which is surprising when you see at first as the user just authenticated themselves. \r\n\r\nA work around would be to customize the category for login_message and filter flashed message on the template based on category so as to not show this. But this seems to be an work around nevertheless\r\n\r\nA nice to have would be to disable the `login_message`  by default and enable it if needed.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/418", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/418/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/418/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/418/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/418", "id": 376159319, "node_id": "MDU6SXNzdWUzNzYxNTkzMTk=", "number": 418, "title": "AD user not logged in if \"()\" is in their First Name", "user": {"login": "geracastro", "id": 43156146, "node_id": "MDQ6VXNlcjQzMTU2MTQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/43156146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geracastro", "html_url": "https://github.com/geracastro", "followers_url": "https://api.github.com/users/geracastro/followers", "following_url": "https://api.github.com/users/geracastro/following{/other_user}", "gists_url": "https://api.github.com/users/geracastro/gists{/gist_id}", "starred_url": "https://api.github.com/users/geracastro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geracastro/subscriptions", "organizations_url": "https://api.github.com/users/geracastro/orgs", "repos_url": "https://api.github.com/users/geracastro/repos", "events_url": "https://api.github.com/users/geracastro/events{/privacy}", "received_events_url": "https://api.github.com/users/geracastro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-31T21:03:16Z", "updated_at": "2018-10-31T21:57:58Z", "closed_at": "2018-10-31T21:57:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Any user with parentheses in their First name in AD is not logged in by Flask. I am using Flask-ldap3-Login for ldap authentication and the user is getting authenticated successfully, per my AD logs. However, the user is not logged into the app. This is the error I get and nothing else. This is the only error that is shown even with debug mode on. How can I debug Flask-Login itself?\r\n\r\n`[Wed Oct 31 13:01:25.253096 2018] [wsgi:error] [pid 11868] [remote 10.10.2.52:60101] ERROR:flask_ldap3_login:malformed filter`\r\n\r\nThis is my user class\r\n\r\n`class User(UserMixin):`\r\n    `def __init__(self, dn, username, data):`\r\n        `self.dn = dn`\r\n        `self.username = username`\r\n       ` self.data = data`\r\n    `def __repr__(self):`\r\n       `return self.dn`\r\n   ` def get_id(self):`\r\n       ` return self.dn`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/413", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/413/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/413/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/413/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/413", "id": 361664454, "node_id": "MDU6SXNzdWUzNjE2NjQ0NTQ=", "number": 413, "title": "Proper error when a user is not in database", "user": {"login": "dlahlou", "id": 19671420, "node_id": "MDQ6VXNlcjE5NjcxNDIw", "avatar_url": "https://avatars2.githubusercontent.com/u/19671420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlahlou", "html_url": "https://github.com/dlahlou", "followers_url": "https://api.github.com/users/dlahlou/followers", "following_url": "https://api.github.com/users/dlahlou/following{/other_user}", "gists_url": "https://api.github.com/users/dlahlou/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlahlou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlahlou/subscriptions", "organizations_url": "https://api.github.com/users/dlahlou/orgs", "repos_url": "https://api.github.com/users/dlahlou/repos", "events_url": "https://api.github.com/users/dlahlou/events{/privacy}", "received_events_url": "https://api.github.com/users/dlahlou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-19T09:44:32Z", "updated_at": "2018-09-21T18:57:38Z", "closed_at": "2018-09-21T18:57:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thank you for your work!\r\n\r\nWhen I call login_user on a user absent from database, I get the following exception \r\n`AttributeError: 'NoneType' object has no attribute 'is_active'`\r\n\r\nI think this is a common case, so it should be treated with a proper message.\r\n\r\nKind regards", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/412", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/412/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/412/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/412/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/412", "id": 359099982, "node_id": "MDU6SXNzdWUzNTkwOTk5ODI=", "number": 412, "title": "LDAP group filtering - Flask-Login does not login user", "user": {"login": "geracastro", "id": 43156146, "node_id": "MDQ6VXNlcjQzMTU2MTQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/43156146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geracastro", "html_url": "https://github.com/geracastro", "followers_url": "https://api.github.com/users/geracastro/followers", "following_url": "https://api.github.com/users/geracastro/following{/other_user}", "gists_url": "https://api.github.com/users/geracastro/gists{/gist_id}", "starred_url": "https://api.github.com/users/geracastro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geracastro/subscriptions", "organizations_url": "https://api.github.com/users/geracastro/orgs", "repos_url": "https://api.github.com/users/geracastro/repos", "events_url": "https://api.github.com/users/geracastro/events{/privacy}", "received_events_url": "https://api.github.com/users/geracastro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-11T15:27:52Z", "updated_at": "2018-09-11T16:28:25Z", "closed_at": "2018-09-11T15:42:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "With Flask-Login on an app which authenticates users using LDAP connecting to Active Directory only authenticates users when filtering by OU. The username and password are validated and Flask-Login logs the user in. Oddly, when I switch to AD group for user authentication, even though the user is putting in the username and password, AD validates that the user is a member of the AD Group; but, the user does not get logged in by Flask-Login. The LDAP traffic shows 'success' but the password is not even being sent to AD. I need to know why the search is stopping at group membership validation. My logs show no errors. Is Flask-Login meant to only login a user with LDAP when we are not searching AD by group membership? LDAP packets in my captures don't show errors - It's displaying successful authentication packets.\r\n\r\nThis is the configuration that does not work:\r\n\r\n`app.config['LDAP_HOST'] = '192.168.10.10'`\r\n`app.config['LDAP_USER_RDN_ATTR'] = 'cn'`\r\n`app.config['LDAP_USER_LOGIN_ATTR'] = 'sAMAccountName'`\r\n`app.config['LDAP_BASE_DN'] = 'DC=mydomain,DC=com'`\r\n`app.config['LDAP_USER_DN'] = 'CN=toolgroup,CN=LLS Distribution Lists,CN=Users'`\r\n`app.config['LDAP_BIND_USER_DN'] = 'mybinduser@mydomain.com'`\r\n`app.config['LDAP_BIND_USER_PASSWORD'] = 'mypassword'`\r\n\r\nThis is the post in Stackoverflow: https://stackoverflow.com/questions/52263745/flask-ldap3-login-cannot-authenticate-when-filtering-by-ad-group", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/411", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/411/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/411/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/411/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/411", "id": 356604917, "node_id": "MDU6SXNzdWUzNTY2MDQ5MTc=", "number": 411, "title": "Add ability to require logged in user for blueprint/entire app.", "user": {"login": "justanr", "id": 4221605, "node_id": "MDQ6VXNlcjQyMjE2MDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/4221605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/justanr", "html_url": "https://github.com/justanr", "followers_url": "https://api.github.com/users/justanr/followers", "following_url": "https://api.github.com/users/justanr/following{/other_user}", "gists_url": "https://api.github.com/users/justanr/gists{/gist_id}", "starred_url": "https://api.github.com/users/justanr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/justanr/subscriptions", "organizations_url": "https://api.github.com/users/justanr/orgs", "repos_url": "https://api.github.com/users/justanr/repos", "events_url": "https://api.github.com/users/justanr/events{/privacy}", "received_events_url": "https://api.github.com/users/justanr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-03T21:59:55Z", "updated_at": "2020-02-12T14:49:40Z", "closed_at": "2020-02-12T14:49:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Was hoping to re-open discussion on this. (Previous Issues: #168, #247 -- both date back several years).\r\n\r\nI recently implemented this in [flask-allows](https://github.com/justanr/flask-allows/blob/224421ccfebb0d28a61f53291e60a3f2202ffea1/src/flask_allows/views.py#L115) and was wondering if this would be something of interest in this project.\r\n\r\nRight now, if someone wants to protect either their entire application or just an entire blueprint, they need to either:\r\n\r\n1. Decorate everything with either `login_required` or `fresh_login_required`\r\n2. [Add a custom `before_request` handler](https://github.com/flaskbb/flaskbb/blob/9f85f1b0bee8fe90fd7efbd88e05e953857a1357/flaskbb/management/views.py#L1307)\r\n\r\nHowever, I believe this is something this library should be able to offer out of the box rather than requiring every application that wants this functionality to implement it separately (and in potentially wrong ways).\r\n\r\nI propose three new functions:\r\n\r\n```python\r\ndef login_exempt(f):\r\n    ...\r\n```\r\n`login_exempt` would mark individual routes under an application or blueprint as being exempted from login required and fresh login required, e.g. anyone may access them regardless of their session status or freshness. To prevent weirdness, the login view should be considered implicitly decorated with this to prevent a situation where you must login to login.\r\n\r\n```python\r\ndef login_required_all():\r\n    ...\r\n\r\ndef fresh_login_required_all():\r\n    ...\r\n```\r\n\r\nThese would be functions that mimic `login_required` and `fresh_login_required` except they can be called by either an application or blueprint `before_request` handler to protect any dispatched route except for ones explicitly exempted from these checks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/409", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/409/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/409/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/409/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/409", "id": 352436413, "node_id": "MDU6SXNzdWUzNTI0MzY0MTM=", "number": 409, "title": "Changing LOGIN_DISABLED doesn't work after LoginManager initiation", "user": {"login": "patchie", "id": 1792727, "node_id": "MDQ6VXNlcjE3OTI3Mjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1792727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patchie", "html_url": "https://github.com/patchie", "followers_url": "https://api.github.com/users/patchie/followers", "following_url": "https://api.github.com/users/patchie/following{/other_user}", "gists_url": "https://api.github.com/users/patchie/gists{/gist_id}", "starred_url": "https://api.github.com/users/patchie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patchie/subscriptions", "organizations_url": "https://api.github.com/users/patchie/orgs", "repos_url": "https://api.github.com/users/patchie/repos", "events_url": "https://api.github.com/users/patchie/events{/privacy}", "received_events_url": "https://api.github.com/users/patchie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141482, "node_id": "MDU6TGFiZWwxMTQxNDgy", "url": "https://api.github.com/repos/maxcountryman/flask-login/labels/Feature%20Request", "name": "Feature Request", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-21T08:29:22Z", "updated_at": "2018-08-21T16:32:23Z", "closed_at": "2018-08-21T16:32:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Ref to your guidelines for reporting an issue, i first created a post on stackoverflow: https://stackoverflow.com/questions/51937268/flask-login-login-disabled-true-doesnt-seem-to-work-after-loginmanager-init\r\n\r\nYou can read the problem there.\r\nSeems to be a bug or a design choice you have made, but if there is a solution for my problem, i really hope you can help me.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/408", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/408/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/408/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/408/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/408", "id": 351939136, "node_id": "MDU6SXNzdWUzNTE5MzkxMzY=", "number": 408, "title": "Pep8 renamed to pycodestyle", "user": {"login": "romeojulietthotel", "id": 20975463, "node_id": "MDQ6VXNlcjIwOTc1NDYz", "avatar_url": "https://avatars2.githubusercontent.com/u/20975463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/romeojulietthotel", "html_url": "https://github.com/romeojulietthotel", "followers_url": "https://api.github.com/users/romeojulietthotel/followers", "following_url": "https://api.github.com/users/romeojulietthotel/following{/other_user}", "gists_url": "https://api.github.com/users/romeojulietthotel/gists{/gist_id}", "starred_url": "https://api.github.com/users/romeojulietthotel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/romeojulietthotel/subscriptions", "organizations_url": "https://api.github.com/users/romeojulietthotel/orgs", "repos_url": "https://api.github.com/users/romeojulietthotel/repos", "events_url": "https://api.github.com/users/romeojulietthotel/events{/privacy}", "received_events_url": "https://api.github.com/users/romeojulietthotel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-19T22:15:46Z", "updated_at": "2020-02-12T14:48:41Z", "closed_at": "2020-02-12T14:48:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/PyCQA/pycodestyle/issues/466\r\n\r\npep8 renamed to pycodestyle\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/407", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/407/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/407/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/407/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/407", "id": 351938342, "node_id": "MDU6SXNzdWUzNTE5MzgzNDI=", "number": 407, "title": "duration == True but needs timedelta", "user": {"login": "romeojulietthotel", "id": 20975463, "node_id": "MDQ6VXNlcjIwOTc1NDYz", "avatar_url": "https://avatars2.githubusercontent.com/u/20975463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/romeojulietthotel", "html_url": "https://github.com/romeojulietthotel", "followers_url": "https://api.github.com/users/romeojulietthotel/followers", "following_url": "https://api.github.com/users/romeojulietthotel/following{/other_user}", "gists_url": "https://api.github.com/users/romeojulietthotel/gists{/gist_id}", "starred_url": "https://api.github.com/users/romeojulietthotel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/romeojulietthotel/subscriptions", "organizations_url": "https://api.github.com/users/romeojulietthotel/orgs", "repos_url": "https://api.github.com/users/romeojulietthotel/repos", "events_url": "https://api.github.com/users/romeojulietthotel/events{/privacy}", "received_events_url": "https://api.github.com/users/romeojulietthotel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-19T22:03:52Z", "updated_at": "2020-02-12T14:49:40Z", "closed_at": "2020-02-12T14:49:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!-- Have a question? Please ask it on https://stackoverflow.com/questions/tagged/flask-login?sort=votes -->\r\n\r\nMake sure these boxes are checked before submitting your issue--thank you!\r\n\r\n- [git master enough?] Ensure you are using the latest PyPI release.\r\n- [ok] Read the [CHANGES](https://github.com/maxcountryman/flask-login/blob/master/CHANGES) document thoroughly.\r\n- [ possible fix linked] Provide a clear and simple set of steps to reproduce your issue for others.\r\n\r\nUsing git master and python3.7.0 and I was getting an error that duration = True instead of timedelta. I cannot figure out how to make a PR from gitlab. \r\n\r\nThis is what I did to fix it for my app:\r\n\r\nhttps://gitlab.com/romeojulietthotel/flask-login/commit/646a485071f8d292c15e7cf985d1f0f6694f919e", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/406", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/406/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/406/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/406/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/406", "id": 347491470, "node_id": "MDU6SXNzdWUzNDc0OTE0NzA=", "number": 406, "title": "current_user returns None", "user": {"login": "hcen001", "id": 22037325, "node_id": "MDQ6VXNlcjIyMDM3MzI1", "avatar_url": "https://avatars0.githubusercontent.com/u/22037325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hcen001", "html_url": "https://github.com/hcen001", "followers_url": "https://api.github.com/users/hcen001/followers", "following_url": "https://api.github.com/users/hcen001/following{/other_user}", "gists_url": "https://api.github.com/users/hcen001/gists{/gist_id}", "starred_url": "https://api.github.com/users/hcen001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hcen001/subscriptions", "organizations_url": "https://api.github.com/users/hcen001/orgs", "repos_url": "https://api.github.com/users/hcen001/repos", "events_url": "https://api.github.com/users/hcen001/events{/privacy}", "received_events_url": "https://api.github.com/users/hcen001/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-03T18:18:07Z", "updated_at": "2018-08-03T18:23:22Z", "closed_at": "2018-08-03T18:23:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi everyone!\r\n\r\nI'm currently building a standard app using Flask and flask-login. It is the regular stuff, with Blueprints, Flask-WTF, and whatnot.\r\n\r\nThe issue I'm having is that ```current_user``` returns ```None``` when I try to use it in a model that is being called from a class that has the form definition for Flask-WTF.\r\n\r\nHere is the model:\r\n\r\n```\r\nclass Keywords(object):\r\n    \"\"\"docstring for Tags\"\"\"\r\n\r\n    def taglist(self):\r\n        print('CURRENT_USER in Keywords: ', current_user) <----- None\r\n        ticket = current_user.ticket if current_user else 'test'\r\n        response = TagClient().tags(ticket)\r\n        print(response)\r\n        if response.status_code == 200:\r\n            data = response.body['list']['entries']\r\n            return [(entry['entry']['id'], entry['entry']['tag']) for entry in data]\r\n        return []\r\n```\r\n\r\nand here is the Flask-WTF form class:\r\n\r\n```\r\nclass FileForm(FlaskForm):\r\n    \"\"\"docstring for FileForm\"\"\"\r\n\r\n    print(current_user)\r\n\r\n    _keywords = Keywords().taglist() <----- THIS DOESN'T WORK\r\n    # print('Keywords: ', _keywords)\r\n\r\n    file                = FileField('File', validators=[FileRequired(), FileAllowed(datasets, 'Datasets only!')])\r\n    title               = StringField('Title', validators=[InputRequired()])\r\n    shortname           = StringField('Short name', validators=[InputRequired()])\r\n    abstract            = TextAreaField('Abstract', validators=[Optional()])\r\n```\r\n\r\nHowever, if I create an instance of the model in the controller it works and ```current_user``` returns the user.\r\n\r\n```\r\ndef upload():\r\n    form    = FileForm(formdata=None)\r\n    # keywords = Keywords().taglist() <----- THIS WORKS!\r\n    # print(keywords)\r\n    return render_template('files/upload/wizard.html', user=current_user, title='Upload files', form=form, tree=tree, js=js)\r\n```\r\n\r\nAm I missing something?\r\n\r\nThanks in advance for any guidance you can provide.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/405", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/405/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/405/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/405/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/405", "id": 346208157, "node_id": "MDU6SXNzdWUzNDYyMDgxNTc=", "number": 405, "title": "Missing warning in documentation for `login_required`", "user": {"login": "Vtec234", "id": 13901751, "node_id": "MDQ6VXNlcjEzOTAxNzUx", "avatar_url": "https://avatars3.githubusercontent.com/u/13901751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vtec234", "html_url": "https://github.com/Vtec234", "followers_url": "https://api.github.com/users/Vtec234/followers", "following_url": "https://api.github.com/users/Vtec234/following{/other_user}", "gists_url": "https://api.github.com/users/Vtec234/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vtec234/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vtec234/subscriptions", "organizations_url": "https://api.github.com/users/Vtec234/orgs", "repos_url": "https://api.github.com/users/Vtec234/repos", "events_url": "https://api.github.com/users/Vtec234/events{/privacy}", "received_events_url": "https://api.github.com/users/Vtec234/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-31T14:16:45Z", "updated_at": "2020-02-12T14:49:40Z", "closed_at": "2020-02-12T14:49:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "The [documentation for `login_required`](https://github.com/maxcountryman/flask-login/blob/master/flask_login/utils.py#L223) is missing a rather important point - that `@login_required` has to be placed below the `@app.route` decorator. Otherwise, the route will be registered before the login check code is added, and hence the route handler will not actually check whether the user is logged in, leading to security issues. Now, maybe this is obvious to everyone else, but it certainly isn't to me, and I think it would be worth at least mentioning it in the docs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/402", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/402/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/402/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/402/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/402", "id": 345375777, "node_id": "MDU6SXNzdWUzNDUzNzU3Nzc=", "number": 402, "title": "Allow customizing next_field", "user": {"login": "cancan101", "id": 51059, "node_id": "MDQ6VXNlcjUxMDU5", "avatar_url": "https://avatars1.githubusercontent.com/u/51059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cancan101", "html_url": "https://github.com/cancan101", "followers_url": "https://api.github.com/users/cancan101/followers", "following_url": "https://api.github.com/users/cancan101/following{/other_user}", "gists_url": "https://api.github.com/users/cancan101/gists{/gist_id}", "starred_url": "https://api.github.com/users/cancan101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cancan101/subscriptions", "organizations_url": "https://api.github.com/users/cancan101/orgs", "repos_url": "https://api.github.com/users/cancan101/repos", "events_url": "https://api.github.com/users/cancan101/events{/privacy}", "received_events_url": "https://api.github.com/users/cancan101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-07-27T21:47:10Z", "updated_at": "2020-02-12T14:49:40Z", "closed_at": "2020-02-12T14:49:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Right now [`login_url` takes in `next_field`](https://github.com/maxcountryman/flask-login/blob/848088a9fc6e8c9c418e8820e072cde6ac81dc00/flask_login/utils.py#L92) however the [`unauthorized` call does not set it](https://github.com/maxcountryman/flask-login/blob/1bad0f1828fea7b2b09652ea88be0663cdd080e5/flask_login/login_manager.py#L176). Having this customizable would be very useful when redirecting to external services for auth.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/401", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/401/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/401/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/401/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/401", "id": 344502684, "node_id": "MDU6SXNzdWUzNDQ1MDI2ODQ=", "number": 401, "title": "Strong Session Protection clobbers 'next' parameter in session", "user": {"login": "joearasin", "id": 3767, "node_id": "MDQ6VXNlcjM3Njc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joearasin", "html_url": "https://github.com/joearasin", "followers_url": "https://api.github.com/users/joearasin/followers", "following_url": "https://api.github.com/users/joearasin/following{/other_user}", "gists_url": "https://api.github.com/users/joearasin/gists{/gist_id}", "starred_url": "https://api.github.com/users/joearasin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joearasin/subscriptions", "organizations_url": "https://api.github.com/users/joearasin/orgs", "repos_url": "https://api.github.com/users/joearasin/repos", "events_url": "https://api.github.com/users/joearasin/events{/privacy}", "received_events_url": "https://api.github.com/users/joearasin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-25T15:49:29Z", "updated_at": "2020-02-12T14:49:39Z", "closed_at": "2020-02-12T14:49:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Strong session protection means that the 'next' parameter gets clobbered when a user is redirected to the login page if current_user is called (As it may be in a shared template). This works fine if you drop the SESSION_PROTECTION to `\"basic\"` or `None`, or if you comment out the `current_user` noop\r\n\r\nHere's a failing test case:\r\n\r\n```python\r\n\r\n    def test_unauthorized_with_next_in_strong_session_where_current_user_is_called(self):\r\n        self.login_manager.login_view = 'login'\r\n        self.app.config['SESSION_PROTECTION'] = 'strong'\r\n        self.app.config['USE_SESSION_FOR_NEXT'] = True\r\n\r\n        @self.app.route('/login')\r\n        def login():\r\n            if(current_user.is_authenticated):\r\n                # A noop that touches current_user\r\n                pass\r\n            return session.pop('next', '')\r\n\r\n        with self.app.test_client() as c:\r\n            result = c.get('/secret')\r\n            self.assertEqual(result.status_code, 302)\r\n            self.assertEqual(result.location,\r\n                             'http://localhost/login')\r\n            self.assertEqual(c.get('/login').data.decode('utf-8'), '/secret')\r\n\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/400", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/400/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/400/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/400/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/400", "id": 342514658, "node_id": "MDU6SXNzdWUzNDI1MTQ2NTg=", "number": 400, "title": "Strange behavior with @login.user_loader", "user": {"login": "hcen001", "id": 22037325, "node_id": "MDQ6VXNlcjIyMDM3MzI1", "avatar_url": "https://avatars0.githubusercontent.com/u/22037325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hcen001", "html_url": "https://github.com/hcen001", "followers_url": "https://api.github.com/users/hcen001/followers", "following_url": "https://api.github.com/users/hcen001/following{/other_user}", "gists_url": "https://api.github.com/users/hcen001/gists{/gist_id}", "starred_url": "https://api.github.com/users/hcen001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hcen001/subscriptions", "organizations_url": "https://api.github.com/users/hcen001/orgs", "repos_url": "https://api.github.com/users/hcen001/repos", "events_url": "https://api.github.com/users/hcen001/events{/privacy}", "received_events_url": "https://api.github.com/users/hcen001/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-07-18T22:31:04Z", "updated_at": "2018-07-18T22:37:00Z", "closed_at": "2018-07-18T22:37:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm currently developing two applications using Flask and flask-login, congratulations and many thanks by the way. The first application I'm developing is working fine, heck it even works without the ```user_loader``` callback.\r\n\r\nI started my second application from scratch, but basically copying the boilerplate code from the first one, but the login process just won't work. I added the callback, all the required properties and methods to my User class, and whatnot.\r\n\r\nThe error I'm getting is:\r\n```\r\nsqlalchemy.exc.DataError: (psycopg2.DataError) invalid input syntax for integer: \"<User: email=someone@someqhere.edu, name=John Doe>\"\r\nLINE 3: WHERE user_account.id = '<User: email=someone@somewhere.edu, na...\r\n                                ^\r\n [SQL: 'SELECT user_account.id AS user_account_id, user_account.date_created AS user_account_date_created, user_account.date_updated AS user_account_date_updated, user_account.active AS user_account_active, user_account.first_name AS user_account_first_name, user_account.last_name AS user_account_last_name, user_account.email AS user_account_email, user_account.username AS user_account_username, user_account.authenticated AS user_account_authenticated, user_account.ticket AS user_account_ticket \\nFROM user_account \\nWHERE user_account.id = %(param_1)s'] [parameters: {'param_1': '<User: email=someone@somewhere.edu, name=John Doe>'}] (Background on this error at: http://sqlalche.me/e/9h9h)\r\n```\r\n\r\nThis is the definition of my User class:\r\n\r\n```\r\nclass User(PersonBase):\r\n\r\n    __tablename__ = 'user_account'\r\n\r\n    username         = db.Column(db.String(64), nullable=False, unique=True)\r\n    authenticated    = db.Column(db.Boolean, nullable=False, server_default='f', default=False)\r\n    ticket           = db.Column(db.String(64), nullable=True)\r\n\r\n    def __init__(self, ticket, **kwargs):\r\n        self.email              = kwargs.get('email')\r\n        self.first_name         = kwargs.get('firstName')\r\n        self.last_name          = kwargs.get('lastName')\r\n        self.username           = kwargs.get('userName')\r\n        self.authenticated      = False\r\n        self.ticket             = None\r\n\r\n    def authenticate(self, ticket):\r\n        self.authenticated = True\r\n        self.ticket = ticket\r\n        db.session.add(self)\r\n        db.session.commit()\r\n\r\n    def logout(self):\r\n        self.authenticated = False\r\n        db.session.add(self)\r\n        db.session.commit()\r\n\r\n    @property\r\n    def is_authenticated(self):\r\n        return self.authenticated\r\n\r\n    @property\r\n    def alf_ticket(self):\r\n        return self.ticket\r\n\r\n    @property\r\n    def is_active(self):\r\n        return self.active\r\n\r\n    @property\r\n    def is_anonymous(self):\r\n        return False\r\n\r\n    def get_id(self):\r\n        return str(self.id)\r\n\r\n    def __repr__(self):\r\n        return '<User: email={}, name={}>'.format(self.email, self.full_name)\r\n\r\n@login.user_loader\r\ndef load_user(user_id):\r\n    return User.query.get(user_id)\r\n```\r\n\r\nI cannot figure why the ```load_user``` callback is receiving an object instead of an id.\r\nIt receives this:\r\n```\r\n<User: email=someone@somewhere.edu, name=John Doe>\r\n```\r\n\r\nThanks in advance for any guidance you can provide.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/399", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/399/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/399/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/399/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/399", "id": 342254248, "node_id": "MDU6SXNzdWUzNDIyNTQyNDg=", "number": 399, "title": "the value of 'current_user.is_authenticated'  is always False  in template ", "user": {"login": "jsweber", "id": 12524030, "node_id": "MDQ6VXNlcjEyNTI0MDMw", "avatar_url": "https://avatars0.githubusercontent.com/u/12524030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsweber", "html_url": "https://github.com/jsweber", "followers_url": "https://api.github.com/users/jsweber/followers", "following_url": "https://api.github.com/users/jsweber/following{/other_user}", "gists_url": "https://api.github.com/users/jsweber/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsweber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsweber/subscriptions", "organizations_url": "https://api.github.com/users/jsweber/orgs", "repos_url": "https://api.github.com/users/jsweber/repos", "events_url": "https://api.github.com/users/jsweber/events{/privacy}", "received_events_url": "https://api.github.com/users/jsweber/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-18T09:46:38Z", "updated_at": "2020-07-11T20:52:18Z", "closed_at": "2020-02-12T14:49:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "when I login success,  the value of current_user.is_authenticated  is still False in base.html  even though the value in views.py has been True from False\r\n\r\nversion:\r\nFlask==1.0.2\r\nFlask-Login==0.4.1\r\n\r\npath: app/auth/views.py\r\n\r\n```\r\n@auth.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n    form = LoginForm()\r\n    print(current_user.is_authenticated)        #False\r\n    if form.validate_on_submit():\r\n        user = User.query.filter_by(email=form.email.data).first()\r\n        if user is not None and user.verify_password(form.password.data):\r\n            login_user(user, form.remember_me.data)\r\n            print('login success:')\r\n            print(current_user.is_authenticated)     #True\r\n            return redirect(request.args.get('next') or url_for('main.index'))\r\n        flash('invalid username or passwd')\r\n    return render_template('auth/login.html', form=form)\r\n```\r\n\r\napp/template/base.html\r\n```\r\n      <ul class=\"nav navbar-nav navbar-right\">\r\n            {{current_user.is_authenticated}}\r\n            {% if current_user.is_authenticated %}\r\n            <li><a href=\"#\"><span class=\"glyphicon glyphicon-log-out\"> Logout</span></a></li>\r\n            {% else %}  \r\n            <li><a href=\"#\"><span class=\"glyphicon glyphicon-log-in\"> Login</span></a></li>\r\n            {% endif %}\r\n        </ul>\r\n```\r\nnote: \r\nindex.html extend base.html, above in base.html is common code\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/398", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/398/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/398/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/398/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/398", "id": 340942064, "node_id": "MDU6SXNzdWUzNDA5NDIwNjQ=", "number": 398, "title": "Please add @admin_required and @guest_required", "user": {"login": "TechComet", "id": 5288136, "node_id": "MDQ6VXNlcjUyODgxMzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/5288136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TechComet", "html_url": "https://github.com/TechComet", "followers_url": "https://api.github.com/users/TechComet/followers", "following_url": "https://api.github.com/users/TechComet/following{/other_user}", "gists_url": "https://api.github.com/users/TechComet/gists{/gist_id}", "starred_url": "https://api.github.com/users/TechComet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TechComet/subscriptions", "organizations_url": "https://api.github.com/users/TechComet/orgs", "repos_url": "https://api.github.com/users/TechComet/repos", "events_url": "https://api.github.com/users/TechComet/events{/privacy}", "received_events_url": "https://api.github.com/users/TechComet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-13T09:13:17Z", "updated_at": "2018-07-13T15:37:47Z", "closed_at": "2018-07-13T12:43:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nPlease add @admin_required and @guest_required\r\n@admin_required is Necessary\r\n\r\n@app.route('/guest')\r\n@guest_required\r\ndef guest_page():\r\n\treturn 'Guest Page .. Hi guest! (register page, login page)'\r\n\r\n@app.route('/admin')\r\n@admin_required\r\ndef admin_page():\r\n\treturn 'Admin Page !'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/395", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/395/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/395/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/395/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/395", "id": 338640882, "node_id": "MDU6SXNzdWUzMzg2NDA4ODI=", "number": 395, "title": "Remember Me using Alternative Tokens", "user": {"login": "vishalkuo", "id": 7549938, "node_id": "MDQ6VXNlcjc1NDk5Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7549938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishalkuo", "html_url": "https://github.com/vishalkuo", "followers_url": "https://api.github.com/users/vishalkuo/followers", "following_url": "https://api.github.com/users/vishalkuo/following{/other_user}", "gists_url": "https://api.github.com/users/vishalkuo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishalkuo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishalkuo/subscriptions", "organizations_url": "https://api.github.com/users/vishalkuo/orgs", "repos_url": "https://api.github.com/users/vishalkuo/repos", "events_url": "https://api.github.com/users/vishalkuo/events{/privacy}", "received_events_url": "https://api.github.com/users/vishalkuo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-07-05T16:17:09Z", "updated_at": "2018-07-06T18:11:56Z", "closed_at": "2018-07-06T05:25:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!-- Have a question? Please ask it on https://stackoverflow.com/questions/tagged/flask-login?sort=votes -->\r\n- [x] Ensure you are using the latest PyPI release.\r\n- [x] Read the [CHANGES](https://github.com/maxcountryman/flask-login/blob/master/CHANGES) document thoroughly.\r\n- [x] Provide a clear and simple set of steps to reproduce your issue for others.\r\n\r\nI have a use case where my user's `get_id()` uses a `URLSafeTimedSerializer()` with some user properties to generate a session token with an expiry of 60 minutes. If my understanding is correct, the `remember_me` token is a long lived version of the same ID. Unfortunately, this means that when the `remember_me` token is being used to renew a session, it deserializes to a session token that may be expired instead of a user ID. I was wondering if I'm going about things incorrectly or if adding an optional `get_remember_me_id()` to the user class may be helpful.\r\n\r\nI'm fairly new to authentication/authorization workflows so if my approach is completely wrong, I'd appreciate pointers on how to fix it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/392", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/392/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/392/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/392/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/392", "id": 337764260, "node_id": "MDU6SXNzdWUzMzc3NjQyNjA=", "number": 392, "title": "can't share session between multiple gunicorn workers", "user": {"login": "akimusume", "id": 16819902, "node_id": "MDQ6VXNlcjE2ODE5OTAy", "avatar_url": "https://avatars3.githubusercontent.com/u/16819902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akimusume", "html_url": "https://github.com/akimusume", "followers_url": "https://api.github.com/users/akimusume/followers", "following_url": "https://api.github.com/users/akimusume/following{/other_user}", "gists_url": "https://api.github.com/users/akimusume/gists{/gist_id}", "starred_url": "https://api.github.com/users/akimusume/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akimusume/subscriptions", "organizations_url": "https://api.github.com/users/akimusume/orgs", "repos_url": "https://api.github.com/users/akimusume/repos", "events_url": "https://api.github.com/users/akimusume/events{/privacy}", "received_events_url": "https://api.github.com/users/akimusume/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-03T06:41:26Z", "updated_at": "2018-07-03T06:47:07Z", "closed_at": "2018-07-03T06:47:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "    I use flask to provide some apis for my client and flask-login to manage users. \r\n    In the test, I login and save the cookies in the client, then call the login-required api repeatedly. When there is single gunicorn worker, it works properly. However, when I use more than one gunicorn workers, I will get a lot of 401 error and the success rate is about the reciprocal of the number of workers. \r\n    I searched a lot but found nothing useful. Help me please.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/391", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/391/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/391/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/391/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/391", "id": 334253042, "node_id": "MDU6SXNzdWUzMzQyNTMwNDI=", "number": 391, "title": "No mention of secret_key in docs, and UserMixin", "user": {"login": "stemid", "id": 1306529, "node_id": "MDQ6VXNlcjEzMDY1Mjk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1306529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stemid", "html_url": "https://github.com/stemid", "followers_url": "https://api.github.com/users/stemid/followers", "following_url": "https://api.github.com/users/stemid/following{/other_user}", "gists_url": "https://api.github.com/users/stemid/gists{/gist_id}", "starred_url": "https://api.github.com/users/stemid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stemid/subscriptions", "organizations_url": "https://api.github.com/users/stemid/orgs", "repos_url": "https://api.github.com/users/stemid/repos", "events_url": "https://api.github.com/users/stemid/events{/privacy}", "received_events_url": "https://api.github.com/users/stemid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-06-20T21:17:40Z", "updated_at": "2018-10-29T14:49:31Z", "closed_at": "2018-10-29T14:49:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!-- Have a question? Please ask it on https://stackoverflow.com/questions/tagged/flask-login?sort=votes -->\r\n\r\nMake sure these boxes are checked before submitting your issue--thank you!\r\n\r\n- [x] Ensure you are using the latest PyPI release.\r\n- [x] Read the [CHANGES](https://github.com/maxcountryman/flask-login/blob/master/CHANGES) document thoroughly.\r\n- [x] Provide a clear and simple set of steps to reproduce your issue for others.\r\n\r\nThe docs need to be made a bit clearer. I struggled for a long time before I realized that UserMixin is required in my User model. Even though I provided all those attributes and the get_id method that are mentioned in the docs myself.\r\n\r\nIt wasn't until I made my User model inherit from UserMixin and removed my own versions of those attributes that it started working.\r\n\r\nAnd then I noticed I was missing secret_key because that isn't mentioned in the docs at all, the github README is much better than the docs but I didn't know that. The link to the docs is the first thing I clicked on.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/390", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/390/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/390/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/390/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/390", "id": 329624330, "node_id": "MDU6SXNzdWUzMjk2MjQzMzA=", "number": 390, "title": "Random logouts on IIS with FastCGI", "user": {"login": "miranda-elliott", "id": 8364014, "node_id": "MDQ6VXNlcjgzNjQwMTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/8364014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-elliott", "html_url": "https://github.com/miranda-elliott", "followers_url": "https://api.github.com/users/miranda-elliott/followers", "following_url": "https://api.github.com/users/miranda-elliott/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-elliott/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-elliott/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-elliott/subscriptions", "organizations_url": "https://api.github.com/users/miranda-elliott/orgs", "repos_url": "https://api.github.com/users/miranda-elliott/repos", "events_url": "https://api.github.com/users/miranda-elliott/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-elliott/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-05T21:04:24Z", "updated_at": "2018-06-05T21:25:15Z", "closed_at": "2018-06-05T21:25:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running a Flask app on Windows Server 2012 with IIS. This is my first time deploying a Flask app, so I basically followed the steps from [this tutorial][1] and [this one][2]. I installed IIS with CGI, installed wfastcgi in the app's virtual environment, ran wfastcgi-enable as an administrator and specified the FastCGI application as a route handler in web.config using the virtual environment's python executable and wfastcgi.py file, etc. \r\n\r\nThat all went smoothly and the app is up and running, but my sessions have been all over the place. I'm using flask-login to login users and flask-ldap3-login to authenticate, following this [first quick start example][3] pretty closely. I'm using flask-login's remember me functionality to persist the login after browser close, which worked perfectly when I was running the app on Flask's built-in server, but only works periodically now. The app redirects to login if current_user is None or current_user.is_authenticated is false. Sometimes I can refresh 20 minutes after logging in and it reloads the home page, whereas other times I'll refresh after a minute and it'll redirect to login. Sometimes my methods that have the @login_required decorator throw 401s minutes after the user has logged in. I configured the CGI timeout in the IIS Manager to be 8 hrs in case it was enforcing a shorter timeout, but that hasn't made a difference, the user is still getting logged out randomly.\r\n\r\nHas anyone else experienced this? I'm open to any ideas on why I'm experiencing strange session behavior with IIS and FastCGI, or even just how to better debug it. Thank you! \r\n\r\n  [1]: http://blog.mattwoodward.com/2016/07/running-django-application-on-windows.html\r\n  [2]: http://netdot.co/2015/03/09/flask-on-iis/\r\n  [3]: http://flask-ldap3-login.readthedocs.io/en/latest/quick_start.html\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/389", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/389/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/389/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/389/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/389", "id": 329320451, "node_id": "MDU6SXNzdWUzMjkzMjA0NTE=", "number": 389, "title": "flask-login: is_authenticated is inconsistent", "user": {"login": "biertie", "id": 533918, "node_id": "MDQ6VXNlcjUzMzkxOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/533918?v=4", "gravatar_id": "", "url": "https://api.github.com/users/biertie", "html_url": "https://github.com/biertie", "followers_url": "https://api.github.com/users/biertie/followers", "following_url": "https://api.github.com/users/biertie/following{/other_user}", "gists_url": "https://api.github.com/users/biertie/gists{/gist_id}", "starred_url": "https://api.github.com/users/biertie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/biertie/subscriptions", "organizations_url": "https://api.github.com/users/biertie/orgs", "repos_url": "https://api.github.com/users/biertie/repos", "events_url": "https://api.github.com/users/biertie/events{/privacy}", "received_events_url": "https://api.github.com/users/biertie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-05T06:40:29Z", "updated_at": "2018-06-21T02:44:27Z", "closed_at": "2018-06-21T02:44:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the impression that using is_authenticated from flask_login doesn't work properly. Giving the following logs that I get on my test environment:\r\n\r\n    user_id\r\n    True\r\n    2018-06-04 17:05:15,350 - root - INFO - GET - /ngin/static/media/oval.svg? - 304 NOT MODIFIED\r\n    False\r\n    2018-06-04 17:05:15,369 - root - INFO - GET - /ngin/api/v2/menu/main? - 200 OK\r\n    user_id\r\n    True\r\n    2018-06-04 17:05:25,697 - root - INFO - GET - /ngin/static/media/ngin_electricity.svg? - 304 NOT MODIFIED\r\n    False\r\n    2018-06-04 17:05:25,719 - root - INFO - GET - /ngin/api/v2/menu/lvgo? - 200 OK\r\n\r\nThe log line with the url is in the after_request block, so is printed at the end. The username ('user_id') comes from the login_manager.user_loader ; and the True or False come from the current_user.is_authenticated.\r\nIt seems that the user_loader isn't always called. And when it does, the user shows authenticated, but when the call doesn't happen, the is_authenticated returns false. \r\n\r\nMy code is structured like this:\r\n\r\n    class usrmgmr():\r\n\r\n      def __init__(self, app):\r\n        self.login_manager = fl.LoginManager()\r\n        self.login_manager.init_app(app)\r\n        self.login_manager.session_protection = 'strong'\r\n    \r\n        @self.login_manager.user_loader\r\n        def load_user(user_id):\r\n          print(user_id)\r\n          return User(user_id)\r\n    \r\n      #Function to check if a user is authenticated.\r\n      # returns True or False\r\n      def is_loggedin(self):\r\n        return fl.current_user.is_authenticated\r\n    \r\n      #only for debug purposes!\r\n      def do_debug_login(self):\r\n        user = User('user_id')\r\n        fl.login_user(user, remember=True, duration=datetime.timedelta(seconds=7200)) \r\n\r\nAnd the code is used like this in run.py:\r\n\r\n    usrmgmr = login.usrmgmr(app)\r\n    @app.before_request\r\n    def before_every_request():\r\n      #check if for this endpoint a login is required.\r\n      #if yes, and the user is not logged in, force the login method.\r\n      #else we can just move on. Also the user probably is logged in then.\r\n      if msec.needs_login(page_security):\r\n        print(usrmgmr.is_loggedin())\r\n        if usrmgmr.is_loggedin() == False:\r\n           usrmgmr.do_debug_login()\r\n\r\nSo for every request we check if a user needs to be logged in to see the endpoint, and we check if the user is already logged in.\r\n\r\nThe strange thing is that sometimes I get 'True' and sometimes I get 'False'. So that doesn't seem very consistent. \r\n\r\nDoes anyone know how to fix this, or what the reason is for this behaviour? \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/388", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/388/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/388/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/388/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/388", "id": 326350645, "node_id": "MDU6SXNzdWUzMjYzNTA2NDU=", "number": 388, "title": "can't work with gunicorn with multiple workers", "user": {"login": "platec", "id": 8791710, "node_id": "MDQ6VXNlcjg3OTE3MTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/8791710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/platec", "html_url": "https://github.com/platec", "followers_url": "https://api.github.com/users/platec/followers", "following_url": "https://api.github.com/users/platec/following{/other_user}", "gists_url": "https://api.github.com/users/platec/gists{/gist_id}", "starred_url": "https://api.github.com/users/platec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/platec/subscriptions", "organizations_url": "https://api.github.com/users/platec/orgs", "repos_url": "https://api.github.com/users/platec/repos", "events_url": "https://api.github.com/users/platec/events{/privacy}", "received_events_url": "https://api.github.com/users/platec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-25T01:29:36Z", "updated_at": "2018-05-25T01:51:51Z", "closed_at": "2018-05-25T01:51:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "If the worker_number is 1, everything is ok.\r\nIf the worker_number is greater than 1, I can't login in with flask-login.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/387", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/387/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/387/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/387/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/387", "id": 320581145, "node_id": "MDU6SXNzdWUzMjA1ODExNDU=", "number": 387, "title": "Make an abstract user class to implement", "user": {"login": "Tadaboody", "id": 6463334, "node_id": "MDQ6VXNlcjY0NjMzMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/6463334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tadaboody", "html_url": "https://github.com/Tadaboody", "followers_url": "https://api.github.com/users/Tadaboody/followers", "following_url": "https://api.github.com/users/Tadaboody/following{/other_user}", "gists_url": "https://api.github.com/users/Tadaboody/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tadaboody/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tadaboody/subscriptions", "organizations_url": "https://api.github.com/users/Tadaboody/orgs", "repos_url": "https://api.github.com/users/Tadaboody/repos", "events_url": "https://api.github.com/users/Tadaboody/events{/privacy}", "received_events_url": "https://api.github.com/users/Tadaboody/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-06T10:38:15Z", "updated_at": "2018-06-21T02:48:41Z", "closed_at": "2018-06-21T02:47:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!-- Have a question? Please ask it on https://stackoverflow.com/questions/tagged/flask-login?sort=votes -->\r\n\r\n- [X] Ensure you are using the latest PyPI release.\r\n- [X] Read the [CHANGES](https://github.com/maxcountryman/flask-login/blob/master/CHANGES) document thoroughly.\r\n- [x] Provide a clear and simple set of steps to reproduce your issue for others.\r\n\r\n## Feature request:\r\n### Have a class `AbcUser` to inherit from, which will in turn document the methods that must be implemented from.\r\n```py\r\nfrom typing import Text #Text is the typing for unicode strings, see https://docs.python.org/3/library/typing.html#typing.Text\r\nfrom abc import ABC,abstractmethod #see https://docs.python.org/3/library/abc.html\r\nclass AbcUser(ABC):\r\n     @abstractmethod\r\n     def get_id(self) ->Text:\r\n        \"\"\"This method must return a unicode that uniquely identifies this user,\r\nand can be used to load the user from the user_loader callback. Note that this must be a unicode -\r\n if the ID is natively an int or some other type, you will need to convert it to unicode.\"\"\"\r\n        pass\r\n```\r\n\r\nthis way we can introduce both typing and documentation inside the built into the code and have it loosely enforced  \r\n\r\n----\r\nThis way\r\n\r\n```py\r\nclass MyUser(AbcUser):\r\ndef my_method():\r\n...    pass\r\n# Doesn't implement get_id()\r\n\r\nuser = MyUser()\r\n```\r\nresults in\r\n```\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-12-baad56b7d4c5> in <module>()\r\n      4 # Doesn't implement get_id()\r\n      5\r\n----> 6 user = MyUser()\r\n\r\nTypeError: Can't instantiate abstract class MyUser with abstract methods get_id\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/386", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/386/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/386/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/386/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/386", "id": 320048002, "node_id": "MDU6SXNzdWUzMjAwNDgwMDI=", "number": 386, "title": "Disable session cookie generation in login_user().", "user": {"login": "ozn0417", "id": 1863833, "node_id": "MDQ6VXNlcjE4NjM4MzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1863833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozn0417", "html_url": "https://github.com/ozn0417", "followers_url": "https://api.github.com/users/ozn0417/followers", "following_url": "https://api.github.com/users/ozn0417/following{/other_user}", "gists_url": "https://api.github.com/users/ozn0417/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozn0417/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozn0417/subscriptions", "organizations_url": "https://api.github.com/users/ozn0417/orgs", "repos_url": "https://api.github.com/users/ozn0417/repos", "events_url": "https://api.github.com/users/ozn0417/events{/privacy}", "received_events_url": "https://api.github.com/users/ozn0417/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-03T19:23:19Z", "updated_at": "2018-05-04T23:09:45Z", "closed_at": "2018-05-04T23:08:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "After searching through the Python Flask-Login, I found ways to utilize header/api-key authentication instead of the default cookie authentication. https://flask-login.readthedocs.io/en/latest/#disabling-session-cookie-for-apis\r\n\r\nHowever, in the initial / request, Flask still responds with a cookie in the session. The above method only ensures that any new request (@login_required) is able to authenticate without the cookie (and use header or whatever method my implementation requires).\r\n\r\nIs there a way to disable it? Or am I missing something.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/385", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/385/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/385/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/385/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/385", "id": 299455221, "node_id": "MDU6SXNzdWUyOTk0NTUyMjE=", "number": 385, "title": "'ObjectId' object has no attribute 'is_active' ", "user": {"login": "Cosbgn", "id": 17546283, "node_id": "MDQ6VXNlcjE3NTQ2Mjgz", "avatar_url": "https://avatars3.githubusercontent.com/u/17546283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cosbgn", "html_url": "https://github.com/Cosbgn", "followers_url": "https://api.github.com/users/Cosbgn/followers", "following_url": "https://api.github.com/users/Cosbgn/following{/other_user}", "gists_url": "https://api.github.com/users/Cosbgn/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cosbgn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cosbgn/subscriptions", "organizations_url": "https://api.github.com/users/Cosbgn/orgs", "repos_url": "https://api.github.com/users/Cosbgn/repos", "events_url": "https://api.github.com/users/Cosbgn/events{/privacy}", "received_events_url": "https://api.github.com/users/Cosbgn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-22T18:13:41Z", "updated_at": "2018-02-22T18:14:39Z", "closed_at": "2018-02-22T18:14:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to use `flask-login` with pymongo.\r\n\r\nMy User class looks like this:\r\n\r\n```\r\nclass User(UserMixin):\r\n    def __init__(self, user_id):\r\n        self.user_id = user_id\r\n    def is_authenticated(self):\r\n        return True\r\n    def is_active(self):\r\n        return True\r\n    def is_anonymous(self):\r\n        return False\r\n    def get_id(self):\r\n        return self.user_id\r\n    @staticmethod\r\n    def validate_login(password_hash, password):\r\n        return check_password_hash(password_hash, password)\r\n```\r\nLogin manager is:\r\n```\r\n@login_manager.user_loader\r\ndef load_user(user_id):\r\n    u = db.Users.find_one({\"_id\": user_id})\r\n    if not u:\r\n        return None\r\n    return User(u['_id'])\r\n```\r\nLogin and signup are:\r\n```\r\n\r\n@auth2.route('/login', methods = ['POST', 'OPTIONS'])\r\n@cross_origin()\r\ndef login():\r\n    print(\"trying to login user\")\r\n    data = request.get_json()\r\n    email = data['email']\r\n    user = db.Users.find_one({\"email\": email})\r\n    if user and User.validate_login(user['password'], data['password']):\r\n        user_obj = User(user['_id'])\r\n        login_user(user['_id'])\r\n        return jsonify({\"login\":True})\r\n    return \"wrong Password\"\r\n\r\n@auth2.route('/signup', methods = ['POST', 'OPTIONS'])\r\n@cross_origin()\r\ndef signup_user():\r\n    print(\"trying to signup user\")\r\n    data = request.get_json()\r\n    email = data['email']\r\n    password = data['password']\r\n    company = data['company']\r\n    u = {'email':email}\r\n    if email is None or password is None or company is None:\r\n        return \"missing Args..\"\r\n    if db.Users.find_one(u) is not None:\r\n        return \"User Exists\"\r\n    user = { \"email\": email, \"password\": generate_password_hash(password), \"teams\":[company]}\r\n    db.Users.insert(user)\r\n    # Login User\r\n    new_user = db.Users.find_one({\"email\":email})\r\n    login_user(new_user['_id'])\r\n    return 'User Added and logged in', 201\r\n```\r\nHowever I keep getting:\r\n```    if not force and not user.is_active:\r\nAttributeError: 'ObjectId' object has no attribute 'is_active'\r\n```\r\nWhat am I missing?\r\nThanks for the help!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/384", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/384/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/384/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/384/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/384", "id": 290251189, "node_id": "MDU6SXNzdWUyOTAyNTExODk=", "number": 384, "title": "Flask-Login for multiple users table(like admin and user)", "user": {"login": "yiludege", "id": 19788268, "node_id": "MDQ6VXNlcjE5Nzg4MjY4", "avatar_url": "https://avatars3.githubusercontent.com/u/19788268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yiludege", "html_url": "https://github.com/yiludege", "followers_url": "https://api.github.com/users/yiludege/followers", "following_url": "https://api.github.com/users/yiludege/following{/other_user}", "gists_url": "https://api.github.com/users/yiludege/gists{/gist_id}", "starred_url": "https://api.github.com/users/yiludege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yiludege/subscriptions", "organizations_url": "https://api.github.com/users/yiludege/orgs", "repos_url": "https://api.github.com/users/yiludege/repos", "events_url": "https://api.github.com/users/yiludege/events{/privacy}", "received_events_url": "https://api.github.com/users/yiludege/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-21T06:39:24Z", "updated_at": "2018-07-13T12:39:20Z", "closed_at": "2018-01-21T09:12:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "how user_loader  distinguish between the different user classes.\r\njust like:\r\n```python\r\n@login_manager.user_loader\r\ndef load_user(user_id):\r\n    if request.path == \"/apiv1.0/admin/\":\r\n        return Admin.query.get(int(user_id))\r\n    else:\r\n        return User.query.get(int(user_id))\r\n```\r\nthe same question https://stackoverflow.com/questions/26242922/flask-login-for-multiple-users", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/383", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/383/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/383/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/383/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/383", "id": 288806748, "node_id": "MDU6SXNzdWUyODg4MDY3NDg=", "number": 383, "title": "@login_required decorator ", "user": {"login": "GrayHatter", "id": 243408, "node_id": "MDQ6VXNlcjI0MzQwOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/243408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrayHatter", "html_url": "https://github.com/GrayHatter", "followers_url": "https://api.github.com/users/GrayHatter/followers", "following_url": "https://api.github.com/users/GrayHatter/following{/other_user}", "gists_url": "https://api.github.com/users/GrayHatter/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrayHatter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrayHatter/subscriptions", "organizations_url": "https://api.github.com/users/GrayHatter/orgs", "repos_url": "https://api.github.com/users/GrayHatter/repos", "events_url": "https://api.github.com/users/GrayHatter/events{/privacy}", "received_events_url": "https://api.github.com/users/GrayHatter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-16T07:13:39Z", "updated_at": "2018-01-16T14:29:14Z", "closed_at": "2018-01-16T07:50:27Z", "author_association": "NONE", "active_lock_reason": "too heated", "body": "Is this a bug, or an intentional design decision? https://github.com/maxcountryman/flask-login/blob/master/flask_login/utils.py#L258 If I disable logins, (perhaps for server maintenance) any pages that you used to need to have authorization to view becomes public. That can't be what's intended. Perhaps instead; before ignoring the @login_required decorator, the app should be running in debug/development mode?\r\n\r\nIf it's intentional, shouldn't there be a few warnings through out the docs that the login_required decorator can't be used for security/authorization/authentication?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/382", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/382/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/382/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/382/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/382", "id": 288503826, "node_id": "MDU6SXNzdWUyODg1MDM4MjY=", "number": 382, "title": "TypeError", "user": {"login": "KY7431", "id": 19183124, "node_id": "MDQ6VXNlcjE5MTgzMTI0", "avatar_url": "https://avatars0.githubusercontent.com/u/19183124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KY7431", "html_url": "https://github.com/KY7431", "followers_url": "https://api.github.com/users/KY7431/followers", "following_url": "https://api.github.com/users/KY7431/following{/other_user}", "gists_url": "https://api.github.com/users/KY7431/gists{/gist_id}", "starred_url": "https://api.github.com/users/KY7431/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KY7431/subscriptions", "organizations_url": "https://api.github.com/users/KY7431/orgs", "repos_url": "https://api.github.com/users/KY7431/repos", "events_url": "https://api.github.com/users/KY7431/events{/privacy}", "received_events_url": "https://api.github.com/users/KY7431/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-15T07:41:12Z", "updated_at": "2018-01-15T15:03:13Z", "closed_at": "2018-01-15T15:03:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "The 82 lines of source flask_login, SESSION_KEYS={'user_id', '_id', '_fresh'}; Assigns a list of strings, but USES an expression to create a dictionary.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/381", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/381/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/381/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/381/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/381", "id": 288501402, "node_id": "MDU6SXNzdWUyODg1MDE0MDI=", "number": 381, "title": "invalid syntax ", "user": {"login": "KY7431", "id": 19183124, "node_id": "MDQ6VXNlcjE5MTgzMTI0", "avatar_url": "https://avatars0.githubusercontent.com/u/19183124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KY7431", "html_url": "https://github.com/KY7431", "followers_url": "https://api.github.com/users/KY7431/followers", "following_url": "https://api.github.com/users/KY7431/following{/other_user}", "gists_url": "https://api.github.com/users/KY7431/gists{/gist_id}", "starred_url": "https://api.github.com/users/KY7431/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KY7431/subscriptions", "organizations_url": "https://api.github.com/users/KY7431/orgs", "repos_url": "https://api.github.com/users/KY7431/repos", "events_url": "https://api.github.com/users/KY7431/events{/privacy}", "received_events_url": "https://api.github.com/users/KY7431/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-15T07:28:35Z", "updated_at": "2018-01-15T07:30:47Z", "closed_at": "2018-01-15T07:30:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!-- Have a question? Please ask it on https://stackoverflow.com/questions/tagged/flask-login?sort=votes -->\r\n\r\nMake sure these boxes are checked before submitting your issue--thank you!\r\n\r\n- [ ] Ensure you are using the latest PyPI release.\r\n- [ ] Read the [CHANGES](https://github.com/maxcountryman/flask-login/blob/master/CHANGES) document thoroughly.\r\n- [ ] Provide a clear and simple set of steps to reproduce your issue for others.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/380", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/380/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/380/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/380/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/380", "id": 287452492, "node_id": "MDU6SXNzdWUyODc0NTI0OTI=", "number": 380, "title": "TypeError: Object of type 'builtin_function_or_method' is not JSON serializable", "user": {"login": "jimages", "id": 1782097, "node_id": "MDQ6VXNlcjE3ODIwOTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1782097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimages", "html_url": "https://github.com/jimages", "followers_url": "https://api.github.com/users/jimages/followers", "following_url": "https://api.github.com/users/jimages/following{/other_user}", "gists_url": "https://api.github.com/users/jimages/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimages/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimages/subscriptions", "organizations_url": "https://api.github.com/users/jimages/orgs", "repos_url": "https://api.github.com/users/jimages/repos", "events_url": "https://api.github.com/users/jimages/events{/privacy}", "received_events_url": "https://api.github.com/users/jimages/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-10T14:28:53Z", "updated_at": "2018-01-10T15:10:02Z", "closed_at": "2018-01-10T15:10:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I get a `TypeError: Object of type 'builtin_function_or_method' is not JSON serializable` when I try to make a login system.\r\n\r\nThe problem is the `session['user_id']` in your function `login_user()`\r\n```\r\n...\r\n user_id = getattr(user, current_app.login_manager.id_attribute)()\r\n    session['user_id'] = user_id\r\n    session['_fresh'] = fresh\r\n    session['_id'] = current_app.login_manager._session_identifier_generator()\r\n...\r\n```\r\nand the `current_app.login_manager.id_attribute` is the `get_id` which is the function asked to implement in our `User` class according your docs.\r\n\r\nHowever the `get_id` is a function instead of a variable. So it throw a `TypeError: Object of type 'builtin_function_or_method' is not JSON serializable` when try to serialize the session. And my session type is `filesystem`\r\n\r\nI wonder is it a bug or something else?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/379", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/379/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/379/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/379/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/379", "id": 287416763, "node_id": "MDU6SXNzdWUyODc0MTY3NjM=", "number": 379, "title": "Is there a way to accomplish logout the user has logged in when same user login. ", "user": {"login": "erhuabushuo", "id": 1642364, "node_id": "MDQ6VXNlcjE2NDIzNjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1642364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erhuabushuo", "html_url": "https://github.com/erhuabushuo", "followers_url": "https://api.github.com/users/erhuabushuo/followers", "following_url": "https://api.github.com/users/erhuabushuo/following{/other_user}", "gists_url": "https://api.github.com/users/erhuabushuo/gists{/gist_id}", "starred_url": "https://api.github.com/users/erhuabushuo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erhuabushuo/subscriptions", "organizations_url": "https://api.github.com/users/erhuabushuo/orgs", "repos_url": "https://api.github.com/users/erhuabushuo/repos", "events_url": "https://api.github.com/users/erhuabushuo/events{/privacy}", "received_events_url": "https://api.github.com/users/erhuabushuo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-10T12:28:29Z", "updated_at": "2018-01-10T13:31:56Z", "closed_at": "2018-01-10T13:31:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to accomplish logout the user has logged in when same user login. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/376", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/376/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/376/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/376/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/376", "id": 279114773, "node_id": "MDU6SXNzdWUyNzkxMTQ3NzM=", "number": 376, "title": "does the \"next\" value in the session need to be validated? ", "user": {"login": "coreybrett", "id": 4440265, "node_id": "MDQ6VXNlcjQ0NDAyNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/4440265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coreybrett", "html_url": "https://github.com/coreybrett", "followers_url": "https://api.github.com/users/coreybrett/followers", "following_url": "https://api.github.com/users/coreybrett/following{/other_user}", "gists_url": "https://api.github.com/users/coreybrett/gists{/gist_id}", "starred_url": "https://api.github.com/users/coreybrett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coreybrett/subscriptions", "organizations_url": "https://api.github.com/users/coreybrett/orgs", "repos_url": "https://api.github.com/users/coreybrett/repos", "events_url": "https://api.github.com/users/coreybrett/events{/privacy}", "received_events_url": "https://api.github.com/users/coreybrett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-04T19:16:30Z", "updated_at": "2020-02-12T14:49:39Z", "closed_at": "2020-02-12T14:49:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've added the following code to my app...\r\n\r\n```\r\nconfig['USE_SESSION_FOR_NEXT'] = True \r\n\r\n@portalbp.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n\tform = forms.LoginForm()\r\n\tif form.validate_on_submit():\r\n\t\tlogin_user(form.user, remember=False)\r\n\t\tdestination = session.pop('next', None)\r\n\t\treturn redirect(destination or url_for('portal.index'))\r\n\treturn render_template('portal/login.html', form=form)\r\n```\r\n\r\nI do not have a custom unauthorized_handler.\r\n\r\nIf explicit validation is necessary, is that functionality builtin, or do I need to supply it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/374", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/374/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/374/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/374/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/374", "id": 278651976, "node_id": "MDU6SXNzdWUyNzg2NTE5NzY=", "number": 374, "title": "Missing git tag for 0.4.1 release", "user": {"login": "felixonmars", "id": 1006477, "node_id": "MDQ6VXNlcjEwMDY0Nzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1006477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felixonmars", "html_url": "https://github.com/felixonmars", "followers_url": "https://api.github.com/users/felixonmars/followers", "following_url": "https://api.github.com/users/felixonmars/following{/other_user}", "gists_url": "https://api.github.com/users/felixonmars/gists{/gist_id}", "starred_url": "https://api.github.com/users/felixonmars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felixonmars/subscriptions", "organizations_url": "https://api.github.com/users/felixonmars/orgs", "repos_url": "https://api.github.com/users/felixonmars/repos", "events_url": "https://api.github.com/users/felixonmars/events{/privacy}", "received_events_url": "https://api.github.com/users/felixonmars/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-12-02T03:48:58Z", "updated_at": "2017-12-04T22:35:08Z", "closed_at": "2017-12-04T22:35:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be nice to keep PyPI releases and git tags in sync :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/368", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/368/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/368/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/368/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/368", "id": 275051164, "node_id": "MDU6SXNzdWUyNzUwNTExNjQ=", "number": 368, "title": "User_loader will still be run, even if user login", "user": {"login": "syncml", "id": 2890035, "node_id": "MDQ6VXNlcjI4OTAwMzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2890035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syncml", "html_url": "https://github.com/syncml", "followers_url": "https://api.github.com/users/syncml/followers", "following_url": "https://api.github.com/users/syncml/following{/other_user}", "gists_url": "https://api.github.com/users/syncml/gists{/gist_id}", "starred_url": "https://api.github.com/users/syncml/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syncml/subscriptions", "organizations_url": "https://api.github.com/users/syncml/orgs", "repos_url": "https://api.github.com/users/syncml/repos", "events_url": "https://api.github.com/users/syncml/events{/privacy}", "received_events_url": "https://api.github.com/users/syncml/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-11-18T04:02:57Z", "updated_at": "2019-04-13T01:20:48Z", "closed_at": "2017-11-18T07:06:05Z", "author_association": "NONE", "active_lock_reason": "off-topic", "body": "I'm using flask-login, I thought that the user first login will call user_loader, then get the user information from the session in access will, do not call user_loader, but do not know why, even if the landing, I will call the user_loader, Any wrong setting?\r\n\r\n```\r\nSECRET_KEY = \"yeah, not actually a secret\"\r\nDEBUG = True\r\napp.config.from_object(__name__)\r\nlogin_manager = LoginManager()\r\nlogin_manager.anonymous_user = Anonymous\r\nlogin_manager.login_view = \"login\"\r\nlogin_manager.login_message = u\"Please log in to access this page.\"\r\nlogin_manager.refresh_view = \"reauth\"\r\nlogin_manager.init_app(app)\r\n\r\n@login_manager.user_loader\r\ndef load_user(id):\r\n    return User.query.get(id)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/366", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/366/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/366/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/366/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/366", "id": 265081968, "node_id": "MDU6SXNzdWUyNjUwODE5Njg=", "number": 366, "title": "user_login(user) does not set current_user", "user": {"login": "nicholastulach", "id": 2217724, "node_id": "MDQ6VXNlcjIyMTc3MjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2217724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicholastulach", "html_url": "https://github.com/nicholastulach", "followers_url": "https://api.github.com/users/nicholastulach/followers", "following_url": "https://api.github.com/users/nicholastulach/following{/other_user}", "gists_url": "https://api.github.com/users/nicholastulach/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicholastulach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicholastulach/subscriptions", "organizations_url": "https://api.github.com/users/nicholastulach/orgs", "repos_url": "https://api.github.com/users/nicholastulach/repos", "events_url": "https://api.github.com/users/nicholastulach/events{/privacy}", "received_events_url": "https://api.github.com/users/nicholastulach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-12T20:52:55Z", "updated_at": "2017-10-12T21:28:35Z", "closed_at": "2017-10-12T21:28:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n@APP.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n    if g.user is not None and g.user.is_authenticated:\r\n        return redirect(url_for('.dashboard'))\r\n    if request.method == 'POST':\r\n        user = User(request.form['email'])\r\n        try:\r\n            if user and bcrypt.verify(request.form['password'], user.password):\r\n                login_user(user) # <- Shouldn't this set the current_user\r\n                next_url = request.args.get('next')\r\n                if not is_safe_url(next_url):\r\n                    return abort(400)\r\n                return redirect(next_url or request.referrer or url_for('index'))\r\n        except AttributeError:\r\n            pass\r\n    return render_template('login.html')\r\n```\r\n\r\nThis code allows me to login successfully, but it does not set the `flask_login.current_user` object to the user passed in to `flask_login.login_user()`. If i add the `remember=True` argument, it sets a cookie and works. But according to the Flask-Login documentation, `current_user` should be available immediately in all templates after `login_user()` is called. \r\n\r\nMake sure these boxes are checked before submitting your issue--thank you!\r\n\r\n- [X] Ensure you are using the latest PyPI release.\r\n- [X] Read the [CHANGES](https://github.com/maxcountryman/flask-login/blob/master/CHANGES) document thoroughly.\r\n- [X] Provide a clear and simple set of steps to reproduce your issue for others.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/363", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/363/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/363/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/363/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/363", "id": 251992895, "node_id": "MDU6SXNzdWUyNTE5OTI4OTU=", "number": 363, "title": "When user_load return None, session['user_id'] should be cleared", "user": {"login": "doekman", "id": 1086388, "node_id": "MDQ6VXNlcjEwODYzODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1086388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doekman", "html_url": "https://github.com/doekman", "followers_url": "https://api.github.com/users/doekman/followers", "following_url": "https://api.github.com/users/doekman/following{/other_user}", "gists_url": "https://api.github.com/users/doekman/gists{/gist_id}", "starred_url": "https://api.github.com/users/doekman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doekman/subscriptions", "organizations_url": "https://api.github.com/users/doekman/orgs", "repos_url": "https://api.github.com/users/doekman/repos", "events_url": "https://api.github.com/users/doekman/events{/privacy}", "received_events_url": "https://api.github.com/users/doekman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-08-22T15:15:22Z", "updated_at": "2017-12-06T09:02:34Z", "closed_at": "2017-12-01T07:03:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "My custom `user_loader` queries the database for an user. Between requests, the user can be invalidated in the database (either when the column `inactive_after` has been reached, or when this column is changed). In this case, my `user_loader` returns `None`. \r\n\r\nAfter this point, the user is logged out. `flask_login.current_user.is_authenticated` is `False` and everything seems fine.\r\n\r\nHowever, with every request, the user_loader is called with the old `user_id` which bears no meaning anymore. Also, at this point there is no need for flask_login to call `user_loader`.\r\n\r\nI fixed this at this moment by setting the user_id session to `None`:\r\n\r\n    @login_manager.user_loader\r\n    def user_loader(id):\r\n        user = SessionUser.find_by_session_id(id) #hits the database\r\n        if user==None:\r\n            flash('You have been logged out')\r\n            session['user_id'] = None\r\n        return user\r\n\r\nHowever, I think this should be solved within flash_login itself. I think [reload_user](https://github.com/maxcountryman/flask-login/blob/41686db687a94a7a2eb2aa4b0abc3007b02bd54a/flask_login/login_manager.py#L305) should be changed, and have added the line `session['user_id'] = None`.\r\n\r\nI'm happy to create a PR. Let me know what you think! I'm new to flask and I'm here to learn.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/357", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/357/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/357/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/357/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/357", "id": 245360875, "node_id": "MDU6SXNzdWUyNDUzNjA4NzU=", "number": 357, "title": "Make REMEMBER_COOKIE_DURATION accept an integer like PERMANENT_SESSION_LIFETIME", "user": {"login": "jboegeholz", "id": 22006147, "node_id": "MDQ6VXNlcjIyMDA2MTQ3", "avatar_url": "https://avatars3.githubusercontent.com/u/22006147?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jboegeholz", "html_url": "https://github.com/jboegeholz", "followers_url": "https://api.github.com/users/jboegeholz/followers", "following_url": "https://api.github.com/users/jboegeholz/following{/other_user}", "gists_url": "https://api.github.com/users/jboegeholz/gists{/gist_id}", "starred_url": "https://api.github.com/users/jboegeholz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jboegeholz/subscriptions", "organizations_url": "https://api.github.com/users/jboegeholz/orgs", "repos_url": "https://api.github.com/users/jboegeholz/repos", "events_url": "https://api.github.com/users/jboegeholz/events{/privacy}", "received_events_url": "https://api.github.com/users/jboegeholz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-25T10:46:07Z", "updated_at": "2017-12-01T06:01:18Z", "closed_at": "2017-12-01T06:01:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to configure my Flask app from a json file. At the moment I cannot set the value of REMEMBER_COOKIE_DURATION because it expects a datetime.timedelta(). \r\nPERMANENT_SESSION_LIFETIME can either be set to a datetime.timedelta() or to an integer representing seconds.\r\n\r\nIt would be great if REMEMBER_COOKIE_DURATION can also be assigned an integer\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/352", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/352/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/352/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/352/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/352", "id": 228493427, "node_id": "MDU6SXNzdWUyMjg0OTM0Mjc=", "number": 352, "title": "\"Exception: No user_loader has been installed for this LoginManager.\" when LoginManger is present", "user": {"login": "BenBagBag", "id": 7718254, "node_id": "MDQ6VXNlcjc3MTgyNTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/7718254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenBagBag", "html_url": "https://github.com/BenBagBag", "followers_url": "https://api.github.com/users/BenBagBag/followers", "following_url": "https://api.github.com/users/BenBagBag/following{/other_user}", "gists_url": "https://api.github.com/users/BenBagBag/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenBagBag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenBagBag/subscriptions", "organizations_url": "https://api.github.com/users/BenBagBag/orgs", "repos_url": "https://api.github.com/users/BenBagBag/repos", "events_url": "https://api.github.com/users/BenBagBag/events{/privacy}", "received_events_url": "https://api.github.com/users/BenBagBag/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-13T19:01:10Z", "updated_at": "2017-05-13T19:06:40Z", "closed_at": "2017-05-13T19:06:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to run integration tests using flask-testing. I have a simple app set up that uses flask_login. It is working fine for users, but when running tests, I get the following error: `Exception: No user_loader has been installed for this LoginManager. Add one with the 'LoginManager.user_loader' decorator.`\r\n\r\nIn `__init__.py`, I have:\r\n```db = SQLAlchemy()\r\nlogin_manager = LoginManager()\r\nlogin_manager.login_message = \"You must be logged in to access this page.\"\r\nlogin_manager.login_view = \"auth.login\"\r\n\r\ndef create_app(config_name):\r\n    app = Flask(__name__, instance_relative_config=True)\r\n    app.config.from_object(app_config[config_name])\r\n    app.config.from_pyfile('config.py')\r\n    db.init_app(app)\r\n\r\n    # Code for login manager\r\n    login_manager.init_app(app)\r\n```\r\n\r\nIn `views.py`, I set up the `user_loader`:\r\n```# Set up user_loader\r\n     @login_manager.user_loader\r\n         def load_user(user_id):\r\n         return User.query.get(user_id)\r\n```\r\n\r\nIn `tests.py`, testing the login function looks like:\r\n```   \r\n def login(self, email, password):\r\n             return self.c.post(url_for('auth.login'), data=dict( #self.c is self.app.test_client()\r\n                email=email,\r\n                password=password\r\n            ), follow_redirects=True)\r\n     \r\n def test_login(self):\r\n        rv = self.login('test@test.com', 'test')\r\n        assert b'Hi,' in rv.data\r\n```\r\n\r\nAny idea what's wrong?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/351", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/351/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/351/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/351/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/351", "id": 227620892, "node_id": "MDU6SXNzdWUyMjc2MjA4OTI=", "number": 351, "title": "after login, i have login page refreshed instead of redirecting to dashboard.", "user": {"login": "senaps", "id": 2699822, "node_id": "MDQ6VXNlcjI2OTk4MjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/2699822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/senaps", "html_url": "https://github.com/senaps", "followers_url": "https://api.github.com/users/senaps/followers", "following_url": "https://api.github.com/users/senaps/following{/other_user}", "gists_url": "https://api.github.com/users/senaps/gists{/gist_id}", "starred_url": "https://api.github.com/users/senaps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/senaps/subscriptions", "organizations_url": "https://api.github.com/users/senaps/orgs", "repos_url": "https://api.github.com/users/senaps/repos", "events_url": "https://api.github.com/users/senaps/events{/privacy}", "received_events_url": "https://api.github.com/users/senaps/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-10T09:35:39Z", "updated_at": "2017-05-10T14:43:53Z", "closed_at": "2017-05-10T12:06:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi, i have created this login page, it is working on local, but on server it just \"started to fail\".\r\nthe thing is, after i enter my login credentials, instead of redirecting to admin panel, i get the login page again.\r\n\r\n\r\n`@mod.route('/login', methods=['GET', 'POST'])\r\n@license\r\ndef login():\r\n    print 'oooooooooooooooooooooo'\r\n    if request.method == \"POST\":\r\n        print 'ppppppppppppppppppppppppp'\r\n      \r\n        if request.form.get('username'):\r\n            print request.form.get('username')\r\n            user = User.query.filter_by(username=request.form.get('username')).first()\r\n            print user.username\r\n            print user.email\r\n            print user.first_name\r\n            print user.role_id\r\n        else:\r\n            flash('Please enter username.')\r\n            return redirect(url_for('auth.login'))\r\n        password = request.form.get('password').encode('utf-8')\r\n        try:\r\n            auth_log = AuthLog(username=request.form.get('username'),\r\n                           is_available=True if user is not None else False,\r\n                           status=True if user is not None and user.verify_password(password) else False,\r\n                           ip=request.remote_addr\r\n                   )\r\n            print \"Password Is \",str(user.verify_password(password))\r\n            db.session.add(auth_log)\r\n            db.session.commit()\r\n            print \"DB commit Successfully for auth log\"\r\n        except Exception as e:\r\n            print e\r\n        if user is not None and user.verify_password(password):\r\n            print \"User Authentication status\",str(user.is_authenticated)\r\n            print user.is_authenticated\r\n            login_user(user, False)\r\n            session.permanent = True\r\n            user.last_last_login_ip = user.last_login_ip\r\n            user.last_login_ip = request.remote_addr\r\n            user.last_last_login = user.last_login\r\n            user.last_login = datetime.now()\r\n            user.last_login_show = False\r\n            user.force_logout = True\r\n            user.is_online = True\r\n            db.session.commit()\r\n            print \"user loged and next url is :\"\r\n            next = request.args.get('next')\r\n            print next\r\n            print url_for(\"honeypot.dashboard\")\r\n            return redirect(next or url_for('honeypot.dashboard'))\r\n        else:\r\n            flash('Username or password is not correct.')\r\n        return redirect(url_for('auth.login'))\r\n    return render_template('auth/login.html')`\r\n\r\ni have entered these print's so that i can check where i am. and i could trace up untill line 33( print user.is_authenticated)\r\n\r\nany body able to help me find the error?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/349", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/349/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/349/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/349/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/349", "id": 223939608, "node_id": "MDU6SXNzdWUyMjM5Mzk2MDg=", "number": 349, "title": "Documentation issues", "user": {"login": "dtenenba", "id": 2286826, "node_id": "MDQ6VXNlcjIyODY4MjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2286826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtenenba", "html_url": "https://github.com/dtenenba", "followers_url": "https://api.github.com/users/dtenenba/followers", "following_url": "https://api.github.com/users/dtenenba/following{/other_user}", "gists_url": "https://api.github.com/users/dtenenba/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtenenba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtenenba/subscriptions", "organizations_url": "https://api.github.com/users/dtenenba/orgs", "repos_url": "https://api.github.com/users/dtenenba/repos", "events_url": "https://api.github.com/users/dtenenba/events{/privacy}", "received_events_url": "https://api.github.com/users/dtenenba/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-24T20:22:15Z", "updated_at": "2020-02-12T14:48:58Z", "closed_at": "2020-02-12T14:48:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Make sure these boxes are checked before submitting your issue--thank you!\r\n\r\n- [X] Ensure you are using the latest PyPI release.\r\n- [X] Read the [CHANGES](https://github.com/maxcountryman/flask-login/blob/master/CHANGES) document thoroughly.\r\n- [X] Provide a clear and simple set of steps to reproduce your issue for others.\r\n\r\nflask-login is an awesome module and I got it working in a very short time. However, there were a few issues with the documentation that I spent some time trying to figure out. So here is a list of those issues so hopefully people in the future will not run across them again.\r\n\r\n### Incomplete examples (or missing imports)\r\n\r\nEvery code snippet (IMO) should include the corresponding imports. Instead of this:\r\n\r\n```python\r\nlogin_manager = LoginManager()\r\n```\r\n\r\ndo this:\r\n\r\n```python\r\nfrom flask_login import LoginManager\r\n\r\nlogin_manager = LoginManager()\r\n```\r\n\r\nOtherwise the user has to go hunting around for the import. Maybe it's obvious where the import should come from, after all, this is the documentation for a specific module and likely it comes from there. But as Flask is a microframework, it's conceivable the user is working with multiple modules.\r\n\r\nIn the [Login Example](https://flask-login.readthedocs.io/en/latest/#login-example) the problem, in addition to missing imports, is that the example is incomplete. IMO it should include the full code (the definition of `app`, the full source of `LoginForm`, the creation of `login_manager`, the Jinja2 template, etc). Without this information the documentation assumes a level of familiarity with Flask, WTforms, and Jinja which may not exist.\r\n\r\nThere are a couple other issues with this example, see below:\r\n\r\n#### Validation fails without CSRF snippet in template\r\n\r\nBecause the template is not shown in this example, it took me a while to figure out that validation was failing because this line was missing in the template:\r\n\r\n```\r\n{{ form.csrf_token }}\r\n```\r\n\r\n#### Setting the `flash` message is of limited usefulness without an example template\r\n\r\nAnother reason to include the template in this example is that without knowing how to display the flash message in a template, we never get to see the message that we set in the code.\r\n\r\nAt the very least, link to the [documentation](http://flask.pocoo.org/docs/0.12/patterns/flashing/#simple-flashing) for flashing so that an example is easily at hand.\r\n\r\n#### `next` argument is not preserved between `GET` and `POST`\r\n\r\nSay I have a page called `/settings` for which login is required (as described in this example).\r\nWhen I go to that in my browser (`http://localhost:5000/settings`) and I'm not logged in, the URL changes to `http://localhost:5000/login?next=%2Fsettings`. However, when I then log in, when hitting the `/settings` endpoint with the `POST` method, the `next` argument is lost.\r\n\r\nI fixed this by adding the following to my form:\r\n\r\n```python\r\nnexturl = HiddenField('next')\r\n```\r\n\r\nand then, inside the `login()` method. making sure that gets populated:\r\n\r\n```python\r\n    if request.method == 'GET':\r\n        form.nexturl.data = request.args.get('next')\r\n```\r\n\r\nThen, when handling the `POST` method, instead of \r\n\r\n```python\r\nnext = flask.request.args.get('next')\r\n```\r\n\r\nI have:\r\n\r\n```python\r\nnexturl = form.nexturl.data\r\n# ...make sure nexturl is safe, then redirect to it...\r\n```\r\n\r\nNote that I call the variable `nexturl` throughout (instead of `next`) because `next` conflicts with the built-in Python keyword and causes a warning in PyLint.\r\n\r\n(Side note: is there a reason `is_safe_url()` is not part of `flask-login`?)\r\n\r\n\r\n#### Make it clear that methods on `current_user` are implementation-specific\r\n\r\nThe example suggests using this snippet to show the name of the authenticated user:\r\n\r\n```jinja\r\n{% if current_user.is_authenticated %}\r\n  Hi {{ current_user.name }}!\r\n{% endif %}\r\n```\r\n\r\nThat didn't work for me. I finally realized that `name` is an attribute of my `User` class which I've never set. Since my `User` class in my trivial example is `flask_login.UserMixin`, I just changed the snippet to \r\n\r\n```jinja\r\n{% if current_user.is_authenticated %}\r\n  Hi {{ current_user.get_id()  }}!\r\n{% endif %}\r\n```\r\n\r\n...but really the documentation should make clear that the method you call on `current_user` is going to be specific to your implementation of `User`.\r\n\r\n#### Example of a `login_required` route should be valid\r\n\r\nIn the following snippet:\r\n\r\n```python\r\n@app.route(\"/settings\")\r\n@login_required\r\ndef settings():\r\n    pass\r\n```\r\n\r\n...when you actually visit that route in your browser, you get an error (because the view function did not return a response). Just change `pass` to `return \"secret stuff!\"` or some such.\r\n\r\n#### Example log in view\r\n\r\nIn a trivial Flask application (which most users will be writing in order to understand/follow along with the documentation), you are not likely to have views like `users.login`. In the documentation's own example, the name of the login view is `login`, so I would suggest the example be changed from\r\n\r\n```python\r\nlogin_manager.login_view = \"users.login\"\r\n```\r\n\r\nto\r\n\r\n```\r\nlogin_manager.login_view = \"login\"\r\n```\r\n\r\n### Summary\r\n\r\nThat's as far as I have explored the module; as I look into other parts of it, I may come across other issues. But in general, full usable examples with imports would help much of the time. I realize that makes the documentation longer and perhaps more cluttered but it will save your users some time, as I can attest.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/346", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/346/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/346/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/346/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/346", "id": 219291208, "node_id": "MDU6SXNzdWUyMTkyOTEyMDg=", "number": 346, "title": "importing UserMixin", "user": {"login": "ruttydm", "id": 5909558, "node_id": "MDQ6VXNlcjU5MDk1NTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5909558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruttydm", "html_url": "https://github.com/ruttydm", "followers_url": "https://api.github.com/users/ruttydm/followers", "following_url": "https://api.github.com/users/ruttydm/following{/other_user}", "gists_url": "https://api.github.com/users/ruttydm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruttydm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruttydm/subscriptions", "organizations_url": "https://api.github.com/users/ruttydm/orgs", "repos_url": "https://api.github.com/users/ruttydm/repos", "events_url": "https://api.github.com/users/ruttydm/events{/privacy}", "received_events_url": "https://api.github.com/users/ruttydm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-04T15:32:31Z", "updated_at": "2017-04-04T15:43:09Z", "closed_at": "2017-04-04T15:42:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a problem with importing the UserMixin. (I'm on the most recent python version)\r\n\r\nThis are my import lines:\r\n\r\n```\r\nfrom flask import Flask,render_template,redirect,request,url_for,session,Response,UserMixin\r\nfrom flask_login import LoginManager, current_user, login_user, login_required, logout_user\r\n```\r\n\r\nand this is the error i got: \r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"run.py\", line 1, in <module>\r\n    from main import *\r\n  File \"/home/ruttydm/Dropbox/CODING/python/sw/main.py\", line 1, in <module>\r\n    from flask import Flask,render_template,redirect,request,url_for,session,Response,UserMixin\r\nImportError: cannot import name 'UserMixin'\r\n```\r\n\r\nBeside this I am also struggling to get flask-login working.\r\nPlease view my stackoverflow post: http://stackoverflow.com/questions/43033461/flask-login-does-not-login", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/345", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/345/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/345/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/345/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/345", "id": 217765625, "node_id": "MDU6SXNzdWUyMTc3NjU2MjU=", "number": 345, "title": "current_user.is_authenticated keeps changin value", "user": {"login": "awijaya09", "id": 10365114, "node_id": "MDQ6VXNlcjEwMzY1MTE0", "avatar_url": "https://avatars3.githubusercontent.com/u/10365114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awijaya09", "html_url": "https://github.com/awijaya09", "followers_url": "https://api.github.com/users/awijaya09/followers", "following_url": "https://api.github.com/users/awijaya09/following{/other_user}", "gists_url": "https://api.github.com/users/awijaya09/gists{/gist_id}", "starred_url": "https://api.github.com/users/awijaya09/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awijaya09/subscriptions", "organizations_url": "https://api.github.com/users/awijaya09/orgs", "repos_url": "https://api.github.com/users/awijaya09/repos", "events_url": "https://api.github.com/users/awijaya09/events{/privacy}", "received_events_url": "https://api.github.com/users/awijaya09/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-29T05:03:56Z", "updated_at": "2017-03-29T14:49:18Z", "closed_at": "2017-03-29T14:48:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI'm using version 0.4 with UserMixin on my User class object. \r\nAs I run it on my online server (Ubuntu 16, Nginx, uWsgi) , the current_user.is_authenticated keeps showing <bound method User.is_authenticated> instead of \"True\"\r\n\r\nIs it a problem with flask-login or my server ? Any clue what went wrong ? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/344", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/344/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/344/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/344/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/344", "id": 217045829, "node_id": "MDU6SXNzdWUyMTcwNDU4Mjk=", "number": 344, "title": "Flask-login does not login", "user": {"login": "ruttydm", "id": 5909558, "node_id": "MDQ6VXNlcjU5MDk1NTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5909558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruttydm", "html_url": "https://github.com/ruttydm", "followers_url": "https://api.github.com/users/ruttydm/followers", "following_url": "https://api.github.com/users/ruttydm/following{/other_user}", "gists_url": "https://api.github.com/users/ruttydm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruttydm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruttydm/subscriptions", "organizations_url": "https://api.github.com/users/ruttydm/orgs", "repos_url": "https://api.github.com/users/ruttydm/repos", "events_url": "https://api.github.com/users/ruttydm/events{/privacy}", "received_events_url": "https://api.github.com/users/ruttydm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-26T11:34:57Z", "updated_at": "2017-03-26T17:54:43Z", "closed_at": "2017-03-26T17:53:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi \r\n\r\nI am making a text based browser game but I have a problem with my login script.\r\nNothing happens when I login, it doesn't even redirect.\r\n\r\nHere is my code:\r\n\r\n```\r\nfrom flask import Flask,render_template,redirect,request\r\nfrom flask_login import *\r\n# this contains the configuration and the database connection\r\nfrom config import *\r\n# load the user model\r\nfrom user import *\r\n\r\n\r\nversion = 2.00\r\napp = Flask(__name__)\r\nlogin_manager = LoginManager()\r\nlogin_manager.init_app(app)\r\nlogin_manager.login_view = 'login'\r\napp.config['SECRET_KEY'] = \"lkajdghdadkglajkgah\"\r\n\r\n#the user loader callback\r\n@login_manager.user_loader\r\ndef load_user(user_id):\r\n    u = users.find_one({\"_id\": user_id})\r\n    if not u:\r\n        return None\r\n    return User(u['_id'])\r\n\r\n@app.route('/')\r\ndef main():\r\n    if current_user.is_authenticated:\r\n        return redirect(\"/game/\", code=302)\r\n    else:\r\n        return redirect(\"/login/\", code=302)\r\n\r\n@app.route('/login/', methods=['GET','POST'])\r\ndef login():\r\n    if current_user.is_authenticated:\r\n        return redirect(\"/game/\", code=302)\r\n\r\n    # when the form is filled in\r\n    if request.method == 'POST':\r\n        try:\r\n    \t\t# login user\r\n            if request.form['logSubmit'] == 'logSubmit':\r\n                print('lol')\r\n                username = request.form['logUser']\r\n                password = request.form['logPassword']\r\n                result = users.find_one({\"user\": username})\r\n\r\n                if result and check_password_hash(result['password_hash'], password):\r\n                    id = str(result['_id'])\r\n                    user_obj = User(id)\r\n                    login_user(user_obj)\r\n                    print (vars(current_user))\r\n                    return redirect(\"/game/\", code=301)\r\n        except KeyError:\r\n            # register the user\r\n            if request.form['regSubmit'] == 'regSubmit':\r\n                username = request.form['regUser']\r\n                password = request.form['regPassword']\r\n                address = request.form['regAddress']\r\n                register_user(username=username,password=password,address=address)\r\n                print(address)\r\n                return redirect(\"/login/\", code=302)\r\n\r\n\r\n\r\n    return render_template('out.html')\r\n\r\n@app.route('/game/')\r\n@login_required\r\ndef game():\r\n\treturn render_template('game.html')\r\n\r\n```\r\n\r\nand here is my user class:\r\n\r\n```\r\nfrom flask import Flask,render_template,redirect,request\r\nfrom flask_login import *\r\n# this contains the configuration and the database connection\r\nfrom config import *\r\n# load the user model\r\nfrom user import *\r\n\r\n\r\nversion = 2.00\r\napp = Flask(__name__)\r\nlogin_manager = LoginManager()\r\nlogin_manager.init_app(app)\r\nlogin_manager.login_view = 'login'\r\napp.config['SECRET_KEY'] = \"lkajdghdadkglajkgah\"\r\n\r\n#the user loader callback\r\n@login_manager.user_loader\r\ndef load_user(user_id):\r\n    u = users.find_one({\"_id\": user_id})\r\n    if not u:\r\n        return None\r\n    return User(u['_id'])\r\n\r\n@app.route('/')\r\ndef main():\r\n    if current_user.is_authenticated:\r\n        return redirect(\"/game/\", code=302)\r\n    else:\r\n        return redirect(\"/login/\", code=302)\r\n\r\n@app.route('/login/', methods=['GET','POST'])\r\ndef login():\r\n    if current_user.is_authenticated:\r\n        return redirect(\"/game/\", code=302)\r\n\r\n    # when the form is filled in\r\n    if request.method == 'POST':\r\n        try:\r\n    \t\t# login user\r\n            if request.form['logSubmit'] == 'logSubmit':\r\n                print('lol')\r\n                username = request.form['logUser']\r\n                password = request.form['logPassword']\r\n                result = users.find_one({\"user\": username})\r\n\r\n                if result and check_password_hash(result['password_hash'], password):\r\n                    id = str(result['_id'])\r\n                    user_obj = User(id)\r\n                    login_user(user_obj)\r\n                    print (vars(current_user))\r\n                    return redirect(\"/game/\", code=301)\r\n        except KeyError:\r\n            # register the user\r\n            if request.form['regSubmit'] == 'regSubmit':\r\n                username = request.form['regUser']\r\n                password = request.form['regPassword']\r\n                address = request.form['regAddress']\r\n                register_user(username=username,password=password,address=address)\r\n                print(address)\r\n                return redirect(\"/login/\", code=302)\r\n\r\n\r\n\r\n    return render_template('out.html')\r\n\r\n@app.route('/game/')\r\n@login_required\r\ndef game():\r\n\treturn render_template('game.html')\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/343", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/343/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/343/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/343/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/343", "id": 215923920, "node_id": "MDU6SXNzdWUyMTU5MjM5MjA=", "number": 343, "title": "manual setting of next querystring in unauthorized_handler()", "user": {"login": "campenr", "id": 10902135, "node_id": "MDQ6VXNlcjEwOTAyMTM1", "avatar_url": "https://avatars2.githubusercontent.com/u/10902135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/campenr", "html_url": "https://github.com/campenr", "followers_url": "https://api.github.com/users/campenr/followers", "following_url": "https://api.github.com/users/campenr/following{/other_user}", "gists_url": "https://api.github.com/users/campenr/gists{/gist_id}", "starred_url": "https://api.github.com/users/campenr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/campenr/subscriptions", "organizations_url": "https://api.github.com/users/campenr/orgs", "repos_url": "https://api.github.com/users/campenr/repos", "events_url": "https://api.github.com/users/campenr/events{/privacy}", "received_events_url": "https://api.github.com/users/campenr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-03-22T01:05:03Z", "updated_at": "2020-02-12T14:48:14Z", "closed_at": "2020-02-12T14:48:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a need (want?) to be able to manually set the `next` parameter passed to `login_url()` in `unauthorized_handler()`.\r\n\r\nIn my flask app I want to redirect my users to specific pages after they log in depending on their roles, not the page they were trying to access.\r\n\r\nAdditionally, users log in with OAuth2, and when it fails in certain ways it redirects them back to the login page (desired behavior), but I do not want the next parameter to contain the authorization/authentication URL so in this case I do not want `next` to be set at all.\r\n\r\nI believe all that is need to implement this is is to add an argument for `next` to the `unauthorized_handler()` function set to `request.url` by default, which is what is currently always passed to `login_url()`. That way the current behavior is maintained, but allows for manually setting the `next` argument that is passed to `login_url()`. This also supports passing `None` to `login_url()` to stop the `next` querystring showing on the login page at all.\r\n\r\nI'd do this as a pull request but I lack access to a linux machine right now to test my build on that implements the above changes.\r\n\r\nCheers\r\nRichard", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/341", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/341/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/341/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/341/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/341", "id": 215094656, "node_id": "MDU6SXNzdWUyMTUwOTQ2NTY=", "number": 341, "title": "module __version__", "user": {"login": "YKdvd", "id": 4149559, "node_id": "MDQ6VXNlcjQxNDk1NTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/4149559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YKdvd", "html_url": "https://github.com/YKdvd", "followers_url": "https://api.github.com/users/YKdvd/followers", "following_url": "https://api.github.com/users/YKdvd/following{/other_user}", "gists_url": "https://api.github.com/users/YKdvd/gists{/gist_id}", "starred_url": "https://api.github.com/users/YKdvd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YKdvd/subscriptions", "organizations_url": "https://api.github.com/users/YKdvd/orgs", "repos_url": "https://api.github.com/users/YKdvd/repos", "events_url": "https://api.github.com/users/YKdvd/events{/privacy}", "received_events_url": "https://api.github.com/users/YKdvd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-17T19:02:53Z", "updated_at": "2017-04-16T22:19:56Z", "closed_at": "2017-04-16T22:19:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "In 0.3.2, it appears that a \\_\\_version__ variable was set for the module.  In 0.4.0, it looks like things have been re-organized into a module?  The \\_\\_version__ and others have been moved into a file called \\_\\_about__.py, but this isn't imported or executed, so \\_\\_version__ is not defined at the module level.  \r\n\r\nWas this change deliberate?  Many other modules (sqlalchemy, marshmallow, flask itself) define \\_\\_version__  at the main level:  \"import someModule /  print someModule.\\_\\_version__\".", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/340", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/340/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/340/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/340/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/340", "id": 213633031, "node_id": "MDU6SXNzdWUyMTM2MzMwMzE=", "number": 340, "title": "pep8 compliance test fails", "user": {"login": "humanitiesNerd", "id": 283791, "node_id": "MDQ6VXNlcjI4Mzc5MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/283791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/humanitiesNerd", "html_url": "https://github.com/humanitiesNerd", "followers_url": "https://api.github.com/users/humanitiesNerd/followers", "following_url": "https://api.github.com/users/humanitiesNerd/following{/other_user}", "gists_url": "https://api.github.com/users/humanitiesNerd/gists{/gist_id}", "starred_url": "https://api.github.com/users/humanitiesNerd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/humanitiesNerd/subscriptions", "organizations_url": "https://api.github.com/users/humanitiesNerd/orgs", "repos_url": "https://api.github.com/users/humanitiesNerd/repos", "events_url": "https://api.github.com/users/humanitiesNerd/events{/privacy}", "received_events_url": "https://api.github.com/users/humanitiesNerd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-12T20:38:38Z", "updated_at": "2017-12-30T00:21:55Z", "closed_at": "2017-12-30T00:21:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nin building the tarball of 0.4.0, I run into this\r\n\r\n```\r\nChecking pep8 compliance...\r\nflask_login/login_manager.py:409:29: E122 continuation line missing indentation or outdented\r\n\r\n```\r\n\r\nI'm using pep8 1.7.0\r\n\r\nCan this be confirmed ?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/339", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/339/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/339/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/339/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/339", "id": 213458420, "node_id": "MDU6SXNzdWUyMTM0NTg0MjA=", "number": 339, "title": "PyPI release outdated", "user": {"login": "mattgaviota", "id": 245104, "node_id": "MDQ6VXNlcjI0NTEwNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/245104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattgaviota", "html_url": "https://github.com/mattgaviota", "followers_url": "https://api.github.com/users/mattgaviota/followers", "following_url": "https://api.github.com/users/mattgaviota/following{/other_user}", "gists_url": "https://api.github.com/users/mattgaviota/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattgaviota/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattgaviota/subscriptions", "organizations_url": "https://api.github.com/users/mattgaviota/orgs", "repos_url": "https://api.github.com/users/mattgaviota/repos", "events_url": "https://api.github.com/users/mattgaviota/events{/privacy}", "received_events_url": "https://api.github.com/users/mattgaviota/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-03-10T21:37:13Z", "updated_at": "2017-12-02T02:35:56Z", "closed_at": "2017-12-02T02:35:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Make sure these boxes are checked before submitting your issue--thank you!\r\n\r\n- [x] Ensure you are using the latest PyPI release.\r\n- [x] Read the [CHANGES](https://github.com/maxcountryman/flask-login/blob/master/CHANGES) document thoroughly.\r\n- [ ] Provide a clear and simple set of steps to reproduce your issue for others.\r\n\r\nHello, thanks for the great work. Can you update the version in PyPi ?, because it does not have USE_SESSION_FOR_NEXT for example, which is discussed and explained in the latest documentation.\r\n\r\nThanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/337", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/337/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/337/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/337/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/337", "id": 207824219, "node_id": "MDU6SXNzdWUyMDc4MjQyMTk=", "number": 337, "title": "login_user consequent calls creates unexpected behavior", "user": {"login": "bcambel", "id": 144385, "node_id": "MDQ6VXNlcjE0NDM4NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/144385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bcambel", "html_url": "https://github.com/bcambel", "followers_url": "https://api.github.com/users/bcambel/followers", "following_url": "https://api.github.com/users/bcambel/following{/other_user}", "gists_url": "https://api.github.com/users/bcambel/gists{/gist_id}", "starred_url": "https://api.github.com/users/bcambel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bcambel/subscriptions", "organizations_url": "https://api.github.com/users/bcambel/orgs", "repos_url": "https://api.github.com/users/bcambel/repos", "events_url": "https://api.github.com/users/bcambel/events{/privacy}", "received_events_url": "https://api.github.com/users/bcambel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-02-15T14:47:21Z", "updated_at": "2018-02-22T18:15:34Z", "closed_at": "2018-02-22T18:15:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Make sure these boxes are checked before submitting your issue--thank you!\r\n\r\n- [x] Ensure you are using the latest PyPI release.\r\n- [x] Read the [CHANGES](https://github.com/maxcountryman/flask-login/blob/master/CHANGES) document thoroughly.\r\n- [x] Provide a clear and simple set of steps to reproduce your issue for others.\r\n\r\n```python\r\nlogin_manager.session_protection = 'basic'\r\n\r\napp.config['REMEMBER_COOKIE_NAME'] = 'remember_me'\r\napp.config['REMEMBER_COOKIE_DURATION'] = timedelta(60)\r\napp.config['REMEMBER_COOKIE_SECURE'] = not debug\r\napp.config['REMEMBER_COOKIE_HTTPONLY'] = True\r\n\r\n# This happens in a get request `/profile/set?id=admin` \r\ndef profile_set():\r\n    id = request.args.get('id', '')\r\n    if id is None:\r\n        pass\r\n    else:\r\n        user = User.query.get(id)\r\n        logging.warn(u\"Switching User to %s\", user.fullName)\r\n        login_user(user, remember=True)\r\n        identity_changed.send(current_app._get_current_object(),\r\n                              identity=Identity(user.id))\r\n\r\n    return redirect(url_for('platform.profile'))\r\n```\r\n\r\nWe have made a profile switch functionality to switch over any user when we are running non-production version of our software. However in some of the occasions the following unexpected behavior happens. \r\n\r\nMaking calls consequently to this endpoint does not end up user switched all the time. The first request works, the second doesn't, third works, forth doesn't.  Also Logging out does not seem to change the behavior. \r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/336", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/336/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/336/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/336/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/336", "id": 202040501, "node_id": "MDU6SXNzdWUyMDIwNDA1MDE=", "number": 336, "title": "user.is_authenticated  AttributeError: can't set attribute", "user": {"login": "chengchong010", "id": 24266187, "node_id": "MDQ6VXNlcjI0MjY2MTg3", "avatar_url": "https://avatars0.githubusercontent.com/u/24266187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chengchong010", "html_url": "https://github.com/chengchong010", "followers_url": "https://api.github.com/users/chengchong010/followers", "following_url": "https://api.github.com/users/chengchong010/following{/other_user}", "gists_url": "https://api.github.com/users/chengchong010/gists{/gist_id}", "starred_url": "https://api.github.com/users/chengchong010/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chengchong010/subscriptions", "organizations_url": "https://api.github.com/users/chengchong010/orgs", "repos_url": "https://api.github.com/users/chengchong010/repos", "events_url": "https://api.github.com/users/chengchong010/events{/privacy}", "received_events_url": "https://api.github.com/users/chengchong010/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-01-20T03:32:12Z", "updated_at": "2020-08-19T18:46:06Z", "closed_at": "2017-01-20T03:48:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the sample code:\r\n```\r\n\r\n@login_manager.request_loader\r\ndef request_loader(request):\r\n    email = request.form.get('email')\r\n    if email not in users:\r\n        return\r\n\r\n    user = User()\r\n    user.id = email\r\n\r\n    # DO NOT ever store passwords in plaintext and always compare password\r\n    # hashes using constant-time comparison!\r\n    user.is_authenticated = request.form['pw'] == users[email]['pw']\r\n\r\n    return user\r\n```\r\n\r\nWhen username is correct and password is incorrect, get follow error message:\r\n```\r\nuser.is_authenticated = request.form['pw'] == users[email]['pw']\r\nAttributeError: can't set attribute\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/328", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/328/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/328/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/328/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/328", "id": 199750377, "node_id": "MDU6SXNzdWUxOTk3NTAzNzc=", "number": 328, "title": "Exception: No user_loader has been installed for this LoginManager", "user": {"login": "NikolaJankovic", "id": 6041974, "node_id": "MDQ6VXNlcjYwNDE5NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6041974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NikolaJankovic", "html_url": "https://github.com/NikolaJankovic", "followers_url": "https://api.github.com/users/NikolaJankovic/followers", "following_url": "https://api.github.com/users/NikolaJankovic/following{/other_user}", "gists_url": "https://api.github.com/users/NikolaJankovic/gists{/gist_id}", "starred_url": "https://api.github.com/users/NikolaJankovic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NikolaJankovic/subscriptions", "organizations_url": "https://api.github.com/users/NikolaJankovic/orgs", "repos_url": "https://api.github.com/users/NikolaJankovic/repos", "events_url": "https://api.github.com/users/NikolaJankovic/events{/privacy}", "received_events_url": "https://api.github.com/users/NikolaJankovic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141479, "node_id": "MDU6TGFiZWwxMTQxNDc5", "url": "https://api.github.com/repos/maxcountryman/flask-login/labels/Bug", "name": "Bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-01-10T07:26:00Z", "updated_at": "2020-02-12T14:45:54Z", "closed_at": "2020-02-12T14:45:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "For apps with multiple User models, is there any way to alter the user_loader / load_user() to be able to distinguish between the models? The standard is \r\n\r\n```\r\n@login_manager.user_loader\r\ndef load_user(user_id):\r\n    return User.get(user_id)\r\n```\r\nI need to somehow discern which model the user_id passed belongs to and insert a condition to replace User.get() with the appropriate model. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/326", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/326/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/326/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/326/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/326", "id": 195942579, "node_id": "MDU6SXNzdWUxOTU5NDI1Nzk=", "number": 326, "title": "current_user is stored as AnonymousUserMixin when passed as argument to MagicMock", "user": {"login": "brandones", "id": 1031876, "node_id": "MDQ6VXNlcjEwMzE4NzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1031876?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandones", "html_url": "https://github.com/brandones", "followers_url": "https://api.github.com/users/brandones/followers", "following_url": "https://api.github.com/users/brandones/following{/other_user}", "gists_url": "https://api.github.com/users/brandones/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandones/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandones/subscriptions", "organizations_url": "https://api.github.com/users/brandones/orgs", "repos_url": "https://api.github.com/users/brandones/repos", "events_url": "https://api.github.com/users/brandones/events{/privacy}", "received_events_url": "https://api.github.com/users/brandones/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-15T23:20:14Z", "updated_at": "2018-02-22T18:15:54Z", "closed_at": "2018-02-22T18:15:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I have a view function that passes `current_user` to another function `bar`, and a test patches `bar` with a MagicMock, `bar` will store `current_user` as `AnonymousUserMixin`.\r\n\r\nPrior to the view function returning, current_user will have the correct value, and the MagicMock will show the correct value under call_args. After the view function returns, back in the scope of the test function, the MagicMock's value for call_args will have changed to AnonymousUserMixin.\r\n\r\nMinimal reproduction of the bug provided here: https://github.com/brandones/flask-login-bug-minimal-repro", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/325", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/325/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/325/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/325/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/325", "id": 193290522, "node_id": "MDU6SXNzdWUxOTMyOTA1MjI=", "number": 325, "title": "Reaching Set-Cookie value created by login_user() function", "user": {"login": "oyilmaztekin", "id": 863600, "node_id": "MDQ6VXNlcjg2MzYwMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/863600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oyilmaztekin", "html_url": "https://github.com/oyilmaztekin", "followers_url": "https://api.github.com/users/oyilmaztekin/followers", "following_url": "https://api.github.com/users/oyilmaztekin/following{/other_user}", "gists_url": "https://api.github.com/users/oyilmaztekin/gists{/gist_id}", "starred_url": "https://api.github.com/users/oyilmaztekin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oyilmaztekin/subscriptions", "organizations_url": "https://api.github.com/users/oyilmaztekin/orgs", "repos_url": "https://api.github.com/users/oyilmaztekin/repos", "events_url": "https://api.github.com/users/oyilmaztekin/events{/privacy}", "received_events_url": "https://api.github.com/users/oyilmaztekin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-03T14:40:14Z", "updated_at": "2016-12-03T15:11:06Z", "closed_at": "2016-12-03T15:10:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't know if it is an issue? This is my first time asking something on github. I already asked a question at stackoverflow. I don't get Set-Cookie value created by login_user() function. Controller responds to any CORS and CURL request.  There is no browser submitting form directly so Flask-Login can't put session values automatically as a cookie. I need to get Set-Cookie value login_user() created. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/324", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/324/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/324/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/324/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/324", "id": 191128445, "node_id": "MDU6SXNzdWUxOTExMjg0NDU=", "number": 324, "title": "Successful login still yields AnonymousUserMixin", "user": {"login": "jeff1evesque", "id": 2907085, "node_id": "MDQ6VXNlcjI5MDcwODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2907085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeff1evesque", "html_url": "https://github.com/jeff1evesque", "followers_url": "https://api.github.com/users/jeff1evesque/followers", "following_url": "https://api.github.com/users/jeff1evesque/following{/other_user}", "gists_url": "https://api.github.com/users/jeff1evesque/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeff1evesque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeff1evesque/subscriptions", "organizations_url": "https://api.github.com/users/jeff1evesque/orgs", "repos_url": "https://api.github.com/users/jeff1evesque/repos", "events_url": "https://api.github.com/users/jeff1evesque/events{/privacy}", "received_events_url": "https://api.github.com/users/jeff1evesque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-11-22T21:26:13Z", "updated_at": "2018-05-16T03:52:37Z", "closed_at": "2016-11-22T22:17:04Z", "author_association": "NONE", "active_lock_reason": "off-topic", "body": "When I submit a `/login` request, defined within my [`login`](https://github.com/jeff1evesque/machine-learning/blob/a80329adb121372bfb01156b366cd2ce917f4c34/interface/views.py#L224-L226) route:\r\n\r\n![login](https://cloud.githubusercontent.com/assets/2907085/20540875/d3909b4e-b0c8-11e6-9c1b-16049059a831.PNG)\r\n\r\nMy terminal provides me `print` statement output, suggesting that the login succeeded:\r\n\r\n```bash\r\nvagrant@vagrant-ubuntu-trusty-64:/vagrant$ (cd /vagrant && python app.py)\r\n<flask_login.mixins.AnonymousUserMixin object at 0x7f346b4a7c50>\r\n<interface.model.User object at 0x7f346b4a7c10>\r\n```\r\n\r\nSo, I added additional `print` statements on my [`index`](https://github.com/jeff1evesque/machine-learning/blob/a80329adb121372bfb01156b366cd2ce917f4c34/interface/views.py#L46-L55) route.  With this change, I refresh the `localhost:8080` address (after the above login) within the browser, and the terminal console outputs the following:\r\n\r\n```bash\r\nvagrant@vagrant-ubuntu-trusty-64:/vagrant$ (cd /vagrant && python app.py)\r\n<flask_login.mixins.AnonymousUserMixin object at 0x7f346b4a7c50>\r\n<interface.model.User object at 0x7f346b4a7c10>\r\n<flask_login.mixins.AnonymousUserMixin object at 0x7f346b4a7bd0>\r\n```\r\n\r\n**Note:** the first two output is from the `/login` request, while the third is from refreshing the localhost:8080 address, in the browser.\r\n\r\nThe above suggests (to me), even though the `/login` succeeded, the `current_user` remains as an anonymous user.  So, I review my [`load_user`](https://github.com/jeff1evesque/machine-learning/blob/a80329adb121372bfb01156b366cd2ce917f4c34/interface/views.py#L157-L185) route, and remembered that I'm using mariadb.  The method essentially takes the unique id (i.e. unicode integer representation of the user, or the autoincrement / primary key column from the `user` table), and [queries](https://github.com/jeff1evesque/machine-learning/blob/8d3318da98e847afd0b5773acab3f4732a6f75a9/brain/database/retrieve_account.py) from the mariadb, the corresponding `email`, and `username`, then passes it to the [`User`](https://github.com/jeff1evesque/machine-learning/blob/5cba76545cc1b480c7906451c2044276a0ed7b9e/interface/model.py#L12-L84) class, to be assigned as properties.\r\n\r\nI also have a [`logout`](https://github.com/jeff1evesque/machine-learning/blob/a80329adb121372bfb01156b366cd2ce917f4c34/interface/views.py#L257-L259) route, where I commented out the `logout_user` temporarily, because the `current_user` did not accurately represent the user state.  When I submit a post request to the `/logout` route, the terminal console outputs `<flask_login.mixins.AnonymousUserMixin object at 0x7f19f2e42bd0>` (twice).\r\n\r\n---\r\n\r\nMake sure these boxes are checked before submitting your issue--thank you!\r\n\r\n- [x] Ensure you are using the latest PyPI release.\r\n- [x] Read the [CHANGES](https://github.com/maxcountryman/flask-login/blob/master/CHANGES) document thoroughly.\r\n- [x] Provide a clear and simple set of steps to reproduce your issue for others.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/320", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/320/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/320/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/320/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/320", "id": 190180311, "node_id": "MDU6SXNzdWUxOTAxODAzMTE=", "number": 320, "title": "How to logout from a non-flask app?", "user": {"login": "charyorde", "id": 160010, "node_id": "MDQ6VXNlcjE2MDAxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/160010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charyorde", "html_url": "https://github.com/charyorde", "followers_url": "https://api.github.com/users/charyorde/followers", "following_url": "https://api.github.com/users/charyorde/following{/other_user}", "gists_url": "https://api.github.com/users/charyorde/gists{/gist_id}", "starred_url": "https://api.github.com/users/charyorde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charyorde/subscriptions", "organizations_url": "https://api.github.com/users/charyorde/orgs", "repos_url": "https://api.github.com/users/charyorde/repos", "events_url": "https://api.github.com/users/charyorde/events{/privacy}", "received_events_url": "https://api.github.com/users/charyorde/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-11-17T22:16:35Z", "updated_at": "2016-11-18T09:58:22Z", "closed_at": "2016-11-18T09:58:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since `flask_login.logout_user()` doesn't require the `user_id`, how do we identify the logout request?\r\nFor the sake of curiousity.\r\n\r\n- [x ] Ensure you are using the latest PyPI release.\r\n- [ x] Read the [CHANGES](https://github.com/maxcountryman/flask-login/blob/master/CHANGES) document thoroughly.\r\n- [ x] Provide a clear and simple set of steps to reproduce your issue for others.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/319", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/319/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/319/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/319/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/319", "id": 189948892, "node_id": "MDU6SXNzdWUxODk5NDg4OTI=", "number": 319, "title": "how to implement remember me option", "user": {"login": "piyushgohel", "id": 23516944, "node_id": "MDQ6VXNlcjIzNTE2OTQ0", "avatar_url": "https://avatars3.githubusercontent.com/u/23516944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/piyushgohel", "html_url": "https://github.com/piyushgohel", "followers_url": "https://api.github.com/users/piyushgohel/followers", "following_url": "https://api.github.com/users/piyushgohel/following{/other_user}", "gists_url": "https://api.github.com/users/piyushgohel/gists{/gist_id}", "starred_url": "https://api.github.com/users/piyushgohel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/piyushgohel/subscriptions", "organizations_url": "https://api.github.com/users/piyushgohel/orgs", "repos_url": "https://api.github.com/users/piyushgohel/repos", "events_url": "https://api.github.com/users/piyushgohel/events{/privacy}", "received_events_url": "https://api.github.com/users/piyushgohel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2016-11-17T06:12:21Z", "updated_at": "2017-01-19T15:11:12Z", "closed_at": "2016-11-18T10:54:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI am using flask-login in my app. I have one problem like remember me option not work  in my app.I have used login_user(user,remember=True) but It is not work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/318", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/318/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/318/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/318/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/318", "id": 189933009, "node_id": "MDU6SXNzdWUxODk5MzMwMDk=", "number": 318, "title": "how to handle @login_required session expired in Ajax Request", "user": {"login": "erwinyusrizal", "id": 3752374, "node_id": "MDQ6VXNlcjM3NTIzNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3752374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erwinyusrizal", "html_url": "https://github.com/erwinyusrizal", "followers_url": "https://api.github.com/users/erwinyusrizal/followers", "following_url": "https://api.github.com/users/erwinyusrizal/following{/other_user}", "gists_url": "https://api.github.com/users/erwinyusrizal/gists{/gist_id}", "starred_url": "https://api.github.com/users/erwinyusrizal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erwinyusrizal/subscriptions", "organizations_url": "https://api.github.com/users/erwinyusrizal/orgs", "repos_url": "https://api.github.com/users/erwinyusrizal/repos", "events_url": "https://api.github.com/users/erwinyusrizal/events{/privacy}", "received_events_url": "https://api.github.com/users/erwinyusrizal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-17T04:18:49Z", "updated_at": "2017-01-15T23:13:27Z", "closed_at": "2017-01-15T23:13:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi I have an ajax request and in my route I use login_required decorator, but if I do the request and the login session is expired, my ajax callback returns html \r\n\r\nany idea how to handle login session expiration / timeout, so when it's expired I can do something\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/314", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/314/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/314/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/314/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/314", "id": 187019246, "node_id": "MDU6SXNzdWUxODcwMTkyNDY=", "number": 314, "title": "Backwards compatible imports (_create_identifier)", "user": {"login": "jirikuncar", "id": 189798, "node_id": "MDQ6VXNlcjE4OTc5OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/189798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jirikuncar", "html_url": "https://github.com/jirikuncar", "followers_url": "https://api.github.com/users/jirikuncar/followers", "following_url": "https://api.github.com/users/jirikuncar/following{/other_user}", "gists_url": "https://api.github.com/users/jirikuncar/gists{/gist_id}", "starred_url": "https://api.github.com/users/jirikuncar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jirikuncar/subscriptions", "organizations_url": "https://api.github.com/users/jirikuncar/orgs", "repos_url": "https://api.github.com/users/jirikuncar/repos", "events_url": "https://api.github.com/users/jirikuncar/events{/privacy}", "received_events_url": "https://api.github.com/users/jirikuncar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2016-11-03T10:12:49Z", "updated_at": "2016-11-04T09:37:25Z", "closed_at": "2016-11-03T13:47:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Can we keep the global import namespace compatible with 0.3.x version for `utils` introduced in 088ac3cf5e0597d59224fcfb0536bea031a9ae17 ?\r\n\r\n**`__init__.py`**\r\n```python\r\n\r\nfrom utils import _create_identifier, ...\r\n\r\n__all__ = ('_create_identifier', ...)\r\n```\r\n\r\nThanks!\r\n\r\n--\r\nMake sure these boxes are checked before submitting your issue--thank you!\r\n\r\n- [x] Ensure you are using the latest PyPI release.\r\n- [x] Read the [CHANGES](https://github.com/maxcountryman/flask-login/blob/master/CHANGES) document thoroughly.\r\n- [x] Provide a clear and simple set of steps to reproduce your issue for others.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/309", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/309/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/309/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/309/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/309", "id": 185196385, "node_id": "MDU6SXNzdWUxODUxOTYzODU=", "number": 309, "title": "Circular dependency in python setup.py build", "user": {"login": "romeojulietthotel", "id": 20975463, "node_id": "MDQ6VXNlcjIwOTc1NDYz", "avatar_url": "https://avatars2.githubusercontent.com/u/20975463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/romeojulietthotel", "html_url": "https://github.com/romeojulietthotel", "followers_url": "https://api.github.com/users/romeojulietthotel/followers", "following_url": "https://api.github.com/users/romeojulietthotel/following{/other_user}", "gists_url": "https://api.github.com/users/romeojulietthotel/gists{/gist_id}", "starred_url": "https://api.github.com/users/romeojulietthotel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/romeojulietthotel/subscriptions", "organizations_url": "https://api.github.com/users/romeojulietthotel/orgs", "repos_url": "https://api.github.com/users/romeojulietthotel/repos", "events_url": "https://api.github.com/users/romeojulietthotel/events{/privacy}", "received_events_url": "https://api.github.com/users/romeojulietthotel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-10-25T18:26:21Z", "updated_at": "2016-10-25T19:33:47Z", "closed_at": "2016-10-25T19:33:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Make sure these boxes are checked before submitting your issue--thank you!\n- [x ] Ensure you are using the latest PyPI release.\n- [ x] Read the [CHANGES](https://github.com/maxcountryman/flask-login/blob/master/CHANGES) document thoroughly.\n- [ x] Provide a clear and simple set of steps to reproduce your issue for others.\n\nRunning python3.5.2 \n\n```\ngit clone https://github.com/maxcountryman/flask-login\ncd flask-login\npython setup.py build\n\n```\n\nOutput:\n\n```\nrunning build\nrunning build_py\nfile flask_login.py (for module flask_login) not found\nfile flask_login.py (for module flask_login) not found\n\n```\n\nI see flask_login.py in an install so this seems like a circular dependency that can only be met if you first install flask-login.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/308", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/308/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/308/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/308/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/308", "id": 185151258, "node_id": "MDU6SXNzdWUxODUxNTEyNTg=", "number": 308, "title": "Unauthorized handler doesn't get the 'request' variable.", "user": {"login": "Serubin", "id": 1234465, "node_id": "MDQ6VXNlcjEyMzQ0NjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1234465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serubin", "html_url": "https://github.com/Serubin", "followers_url": "https://api.github.com/users/Serubin/followers", "following_url": "https://api.github.com/users/Serubin/following{/other_user}", "gists_url": "https://api.github.com/users/Serubin/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serubin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serubin/subscriptions", "organizations_url": "https://api.github.com/users/Serubin/orgs", "repos_url": "https://api.github.com/users/Serubin/repos", "events_url": "https://api.github.com/users/Serubin/events{/privacy}", "received_events_url": "https://api.github.com/users/Serubin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-25T15:27:13Z", "updated_at": "2016-10-25T16:09:24Z", "closed_at": "2016-10-25T16:09:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using a custom Unauthorized handler the request variable is never past into the context.\n\nThis is on python2 with all modules (flask and flask-login included) up to date.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/307", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/307/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/307/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/307/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/307", "id": 183269102, "node_id": "MDU6SXNzdWUxODMyNjkxMDI=", "number": 307, "title": "Current_user is not synchronize with users logged in in session while not using object inherited from Mixin?", "user": {"login": "penguin1214", "id": 15652469, "node_id": "MDQ6VXNlcjE1NjUyNDY5", "avatar_url": "https://avatars3.githubusercontent.com/u/15652469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/penguin1214", "html_url": "https://github.com/penguin1214", "followers_url": "https://api.github.com/users/penguin1214/followers", "following_url": "https://api.github.com/users/penguin1214/following{/other_user}", "gists_url": "https://api.github.com/users/penguin1214/gists{/gist_id}", "starred_url": "https://api.github.com/users/penguin1214/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/penguin1214/subscriptions", "organizations_url": "https://api.github.com/users/penguin1214/orgs", "repos_url": "https://api.github.com/users/penguin1214/repos", "events_url": "https://api.github.com/users/penguin1214/events{/privacy}", "received_events_url": "https://api.github.com/users/penguin1214/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-16T14:10:49Z", "updated_at": "2016-10-19T10:17:48Z", "closed_at": "2016-10-19T10:17:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Make sure these boxes are checked before submitting your issue--thank you!\n- [x] Ensure you are using the latest PyPI release.\n- [x] Read the [CHANGES](https://github.com/maxcountryman/flask-login/blob/master/CHANGES) document thoroughly.\n- [ ] Provide a clear and simple set of steps to reproduce your issue for others.\n\nI haven't look deep into the source of flask-login so I'm not sure whether this is a bug.\n\nIn other issues I find that flask-login allows developers to use user class inherited from classes other than `Mixin`, for example, `sqlalchemy`.\n\nHowever, I noticed that `current_user.is_authenticated` is still `False`  after `flask_login.login_user(user)` is executed.\n\nMy User model is:\n\n```\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(64), unique=True)\n    phone = db.Column(db.String(12), unique=True)\n    password = db.Column(db.String(20))\n    voice_id = db.Column(db.String(100), unique=True)\n\n    def is_authenticated(self):\n        return True\n\n    def is_active(self):\n        return True\n\n    def is_anonymous(self):\n        return False\n\n    def get_id(self):\n        return unicode(self.id)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/306", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/306/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/306/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/306/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/306", "id": 183261065, "node_id": "MDU6SXNzdWUxODMyNjEwNjU=", "number": 306, "title": "Where does user id come from when user_loader decorates the method which load the user?", "user": {"login": "penguin1214", "id": 15652469, "node_id": "MDQ6VXNlcjE1NjUyNDY5", "avatar_url": "https://avatars3.githubusercontent.com/u/15652469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/penguin1214", "html_url": "https://github.com/penguin1214", "followers_url": "https://api.github.com/users/penguin1214/followers", "following_url": "https://api.github.com/users/penguin1214/following{/other_user}", "gists_url": "https://api.github.com/users/penguin1214/gists{/gist_id}", "starred_url": "https://api.github.com/users/penguin1214/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/penguin1214/subscriptions", "organizations_url": "https://api.github.com/users/penguin1214/orgs", "repos_url": "https://api.github.com/users/penguin1214/repos", "events_url": "https://api.github.com/users/penguin1214/events{/privacy}", "received_events_url": "https://api.github.com/users/penguin1214/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-10-16T11:01:49Z", "updated_at": "2016-10-16T13:23:31Z", "closed_at": "2016-10-16T13:23:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Make sure these boxes are checked before submitting your issue--thank you!\n- [x] Ensure you are using the latest PyPI release.\n- [x] Read the [CHANGES](https://github.com/maxcountryman/flask-login/blob/master/CHANGES) document thoroughly.\n- [x] Provide a clear and simple set of steps to reproduce your issue for others.\n\nI'm starting to use `flask-login` recently. I followed the `README` file to create a demo and it goes well.\n\nWhen I'm trying to use a mysql database instead of the mock, I'm confused how does the `login_manager.user_loader` get the user `id`.\n\nMy `User` table is structured like this:\n\n```\n+----------+--------------+------+-----+---------+----------------+\n| Field    | Type         | Null | Key | Default | Extra          |\n+----------+--------------+------+-----+---------+----------------+\n| id       | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name     | varchar(64)  | YES  | UNI | NULL    |                |\n| phone    | int(11)      | YES  | UNI | NULL    |                |\n| voice_id | varchar(100) | YES  | UNI | NULL    |                |\n+----------+--------------+------+-----+---------+----------------+\n```\n\nBut the id passed to my load function by the `user_loader` decorator is always `foo@bar.tld` which appears in the demo. \n\nIs the `id` stored in the `session`? How to remove the one that has logged in?\n\n**views.py**\n\n```\n@login_manager.user_loader\ndef user_loader(id):\n    return User.query.get(int(id))\n```\n\n**models.py**\n\n```\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(64), unique=True)\n    phone = db.Column(db.Integer, unique=True)\n    voice_id = db.Column(db.String(100), unique=True)\n\n    def is_authenticated(self):\n        return True\n\n    def is_active(self):\n        return True\n\n    def is_anonymous(self):\n        return False\n\n    def get_id(self):\n        return unicode(self.id)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/maxcountryman/flask-login/issues/304", "repository_url": "https://api.github.com/repos/maxcountryman/flask-login", "labels_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/304/labels{/name}", "comments_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/304/comments", "events_url": "https://api.github.com/repos/maxcountryman/flask-login/issues/304/events", "html_url": "https://github.com/maxcountryman/flask-login/issues/304", "id": 183208525, "node_id": "MDU6SXNzdWUxODMyMDg1MjU=", "number": 304, "title": "Incompatible with multiple apps with different loader", "user": {"login": "timothyqiu", "id": 372476, "node_id": "MDQ6VXNlcjM3MjQ3Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/372476?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timothyqiu", "html_url": "https://github.com/timothyqiu", "followers_url": "https://api.github.com/users/timothyqiu/followers", "following_url": "https://api.github.com/users/timothyqiu/following{/other_user}", "gists_url": "https://api.github.com/users/timothyqiu/gists{/gist_id}", "starred_url": "https://api.github.com/users/timothyqiu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timothyqiu/subscriptions", "organizations_url": "https://api.github.com/users/timothyqiu/orgs", "repos_url": "https://api.github.com/users/timothyqiu/repos", "events_url": "https://api.github.com/users/timothyqiu/events{/privacy}", "received_events_url": "https://api.github.com/users/timothyqiu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-15T13:00:41Z", "updated_at": "2016-10-26T01:08:19Z", "closed_at": "2016-10-25T19:39:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "`LoginManager` stores configs like `user_loader` in the manager object itself instead of `app.extensions['NAME']`.\n\nThis means that using the same `LoginManager` instance with multiple apps (each app running `login_manager.init_app(app)` won't work as expected: You can't use different `user_loader` for different apps.\n\nExtensions like Flask-SQLAlchemy and Flask-Mail store their state in `app.extensions['NAME']`, so multiple apps can be configured separately.\n", "performed_via_github_app": null, "score": 1.0}]}