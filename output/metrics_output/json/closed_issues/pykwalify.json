{"total_count": 99, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/164", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/164/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/164/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/164/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/164", "id": 549053404, "node_id": "MDU6SXNzdWU1NDkwNTM0MDQ=", "number": 164, "title": "rule.py is missing a comma in defined_keywords list", "user": {"login": "mbolivar", "id": 35088, "node_id": "MDQ6VXNlcjM1MDg4", "avatar_url": "https://avatars3.githubusercontent.com/u/35088?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbolivar", "html_url": "https://github.com/mbolivar", "followers_url": "https://api.github.com/users/mbolivar/followers", "following_url": "https://api.github.com/users/mbolivar/following{/other_user}", "gists_url": "https://api.github.com/users/mbolivar/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbolivar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbolivar/subscriptions", "organizations_url": "https://api.github.com/users/mbolivar/orgs", "repos_url": "https://api.github.com/users/mbolivar/repos", "events_url": "https://api.github.com/users/mbolivar/events{/privacy}", "received_events_url": "https://api.github.com/users/mbolivar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-13T16:47:10Z", "updated_at": "2020-01-28T21:57:30Z", "closed_at": "2020-01-28T21:57:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\n    NOTE: This form is only for reproducible bugs.\r\n\r\n    Please describe the environment in which you are running PyKwalify. Be sure\r\n    that you are running an unmodified instance of the latest stable release\r\n    before submitting a bug report.\r\n-->\r\n### Environment\r\n\r\n* Python version: 3.8.1\r\n* PyKwalify version: 1.7.0, master\r\n\r\n\r\n<!--\r\n    Describe in detail the exact steps that someone else can take to reproduce\r\n    this bug using the current stable release of PyKwalify\r\n-->\r\n### Steps to Reproduce\r\n\r\n1. Look at the defined_keywords variable defined in rule.py\r\n2. Notice that ('nullable', 'nullable') is missing a comma\r\n3. That's not good\r\n\r\n\r\n### Schema\r\n\r\n\r\n```\r\nN/A\r\n```\r\n\r\n\r\n### Data\r\n\r\n```\r\nN/A\r\n```\r\n\r\n\r\n### Expected Behavior\r\n\r\nThis function should run without error\r\n\r\n### Observed Behavior\r\n\r\nIf this code ever runs, you will get:\r\n\r\n```\r\nTypeError: 'tuple' object is not callable\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/163", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/163/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/163/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/163", "id": 533473303, "node_id": "MDU6SXNzdWU1MzM0NzMzMDM=", "number": 163, "title": "Union of schemas", "user": {"login": "christian-oreilly", "id": 5932954, "node_id": "MDQ6VXNlcjU5MzI5NTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5932954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/christian-oreilly", "html_url": "https://github.com/christian-oreilly", "followers_url": "https://api.github.com/users/christian-oreilly/followers", "following_url": "https://api.github.com/users/christian-oreilly/following{/other_user}", "gists_url": "https://api.github.com/users/christian-oreilly/gists{/gist_id}", "starred_url": "https://api.github.com/users/christian-oreilly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/christian-oreilly/subscriptions", "organizations_url": "https://api.github.com/users/christian-oreilly/orgs", "repos_url": "https://api.github.com/users/christian-oreilly/repos", "events_url": "https://api.github.com/users/christian-oreilly/events{/privacy}", "received_events_url": "https://api.github.com/users/christian-oreilly/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-05T16:53:35Z", "updated_at": "2019-12-06T14:45:24Z", "closed_at": "2019-12-06T10:32:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Proposed Functionality\r\n\r\nI propose to modify the signature of Core.validate(...) to have something like \r\n```\r\npykwalify.core.Core.validate(self, raise_exception=True, allow_union=False)\r\n```\r\nWhen `allow_union == True`\r\n\r\n```\r\ncore = Core(source_file=source, schema_files=[schema1, schema2])\r\ncore.validate(allow_union=True)\r\n```\r\nwould succeed with `schema1`:\r\n```\r\ntype: map\r\nmapping:\r\n  level1:\r\n    required: True\r\n    type: map\r\n    mapping:\r\n      level2a:\r\n        type: str\r\n```\r\n`schema2`:\r\n```\r\ntype: map\r\nmapping:\r\n  level1:\r\n    required: True\r\n    type: map\r\n    mapping:\r\n      level2b:\r\n        type: str\r\n```\r\nand  `source`:\r\n```\r\nlevel1:\r\n  - level2a : \"allo:\r\n  - level2b : \"hello:\r\n```\r\n\r\n### Use Case\r\nI am coding a configuration manager package to use in some of my other projects. The idea is to have a class that manage configuration files specificied at various levels (application, project, user, ...). These different configuration files get merged into one configuration. Configuration files can be validated against schemas (using PyKwalify). I now need to merge schemas defined at these different levels so that a merged schema can be used to validate the merged configuration. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/157", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/157/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/157/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/157/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/157", "id": 502434613, "node_id": "MDU6SXNzdWU1MDI0MzQ2MTM=", "number": 157, "title": "Add email and url types", "user": {"login": "cxong", "id": 1083215, "node_id": "MDQ6VXNlcjEwODMyMTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1083215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxong", "html_url": "https://github.com/cxong", "followers_url": "https://api.github.com/users/cxong/followers", "following_url": "https://api.github.com/users/cxong/following{/other_user}", "gists_url": "https://api.github.com/users/cxong/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxong/subscriptions", "organizations_url": "https://api.github.com/users/cxong/orgs", "repos_url": "https://api.github.com/users/cxong/repos", "events_url": "https://api.github.com/users/cxong/events{/privacy}", "received_events_url": "https://api.github.com/users/cxong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-04T05:30:33Z", "updated_at": "2019-10-19T18:16:52Z", "closed_at": "2019-10-19T18:16:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Of course, a workaround would be to simply use `regex`, but these may be more convenient", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/156", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/156/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/156/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/156/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/156", "id": 501452791, "node_id": "MDU6SXNzdWU1MDE0NTI3OTE=", "number": 156, "title": "TypeError: Unexpected keyword arguments passed to pytest.raises: message", "user": {"login": "polyzen", "id": 3533182, "node_id": "MDQ6VXNlcjM1MzMxODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3533182?v=4", "gravatar_id": "", "url": "https://api.github.com/users/polyzen", "html_url": "https://github.com/polyzen", "followers_url": "https://api.github.com/users/polyzen/followers", "following_url": "https://api.github.com/users/polyzen/following{/other_user}", "gists_url": "https://api.github.com/users/polyzen/gists{/gist_id}", "starred_url": "https://api.github.com/users/polyzen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/polyzen/subscriptions", "organizations_url": "https://api.github.com/users/polyzen/orgs", "repos_url": "https://api.github.com/users/polyzen/repos", "events_url": "https://api.github.com/users/polyzen/events{/privacy}", "received_events_url": "https://api.github.com/users/polyzen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-02T12:16:43Z", "updated_at": "2019-10-09T23:01:04Z", "closed_at": "2019-10-09T21:44:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n>           with pytest.raises(failing_test[2], message=\"Test files: {0} : {1}\".format(\", \".join(failing_test[0]), failing_test[1])):\r\nE           TypeError: Unexpected keyword arguments passed to pytest.raises: message\r\nE           Use context-manager form instead?\r\n```\r\nhttps://github.com/Grokzen/pykwalify/blob/55ade285287a05a2cebf8576407654ab2b8fc74c/tests/test_core.py#L339\r\n\r\npytest 5.1.3 (Edit: and 5.2.0)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/153", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/153/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/153/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/153/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/153", "id": 414391955, "node_id": "MDU6SXNzdWU0MTQzOTE5NTU=", "number": 153, "title": "yaml.safe_load_all returns a generator which isn't usable by pykwalify.core.Core", "user": {"login": "rawrgulmuffins", "id": 1521575, "node_id": "MDQ6VXNlcjE1MjE1NzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1521575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rawrgulmuffins", "html_url": "https://github.com/rawrgulmuffins", "followers_url": "https://api.github.com/users/rawrgulmuffins/followers", "following_url": "https://api.github.com/users/rawrgulmuffins/following{/other_user}", "gists_url": "https://api.github.com/users/rawrgulmuffins/gists{/gist_id}", "starred_url": "https://api.github.com/users/rawrgulmuffins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rawrgulmuffins/subscriptions", "organizations_url": "https://api.github.com/users/rawrgulmuffins/orgs", "repos_url": "https://api.github.com/users/rawrgulmuffins/repos", "events_url": "https://api.github.com/users/rawrgulmuffins/events{/privacy}", "received_events_url": "https://api.github.com/users/rawrgulmuffins/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-26T01:53:04Z", "updated_at": "2019-10-19T19:07:05Z", "closed_at": "2019-10-19T19:07:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Error Generated\r\n```\r\nself = <pykwalify.core.Core object at 0x7fd4176743c8>, source_file = None, schema_files = [], source_data = {}\r\nschema_data = <generator object load_all at 0x7fd4176996d8>, extensions = [], strict_rule_validation = True, fix_ruby_style_regex = False\r\nallow_assertions = True\r\n\r\n    def __init__(self, source_file=None, schema_files=None, source_data=None, schema_data=None, extensions=None, strict_rule_validation=False,\r\n                 fix_ruby_style_regex=False, allow_assertions=False,):\r\n        \"\"\"\r\n        :param extensions:\r\n            List of paths to python files that should be imported and available via 'func' keywork.\r\n            This list of extensions can be set manually or they should be provided by the `--extension`\r\n            flag from the cli. This list should not contain files specified by the `extensions` list keyword\r\n            that can be defined at the top level of the schema.\r\n        \"\"\"\r\n        if schema_files is None:\r\n            schema_files = []\r\n        if extensions is None:\r\n            extensions = []\r\n\r\n        log.debug(u\"source_file: %s\", source_file)\r\n        log.debug(u\"schema_file: %s\", schema_files)\r\n        log.debug(u\"source_data: %s\", source_data)\r\n        log.debug(u\"schema_data: %s\", schema_data)\r\n        log.debug(u\"extension files: %s\", extensions)\r\n        self.source = None\r\n        self.schema = None\r\n        self.validation_errors = None\r\n        self.validation_errors_exceptions = None\r\n        self.root_rule = None\r\n        self.extensions = extensions\r\n        self.errors = []\r\n        self.strict_rule_validation = strict_rule_validation\r\n        self.fix_ruby_style_regex = fix_ruby_style_regex\r\n        self.allow_assertions = allow_assertions\r\n\r\n        if source_file is not None:\r\n            if not os.path.exists(source_file):\r\n                raise CoreError(u\"Provided source_file do not exists on disk: {0}\".format(source_file))\r\n\r\n            with open(source_file, \"r\") as stream:\r\n                if source_file.endswith(\".json\"):\r\n                    self.source = json.load(stream)\r\n                elif source_file.endswith(\".yaml\") or source_file.endswith('.yml'):\r\n                    self.source = yaml.safe_load(stream)\r\n                else:\r\n                    raise CoreError(u\"Unable to load source_file. Unknown file format of specified file path: {0}\".format(source_file))\r\n\r\n        if not isinstance(schema_files, list):\r\n            raise CoreError(u\"schema_files must be of list type\")\r\n\r\n        # Merge all schema files into one single file for easy parsing\r\n        if len(schema_files) > 0:\r\n            schema_data = {}\r\n            for f in schema_files:\r\n                if not os.path.exists(f):\r\n                    raise CoreError(u\"Provided source_file do not exists on disk : {0}\".format(f))\r\n\r\n                with open(f, \"r\") as stream:\r\n                    if f.endswith(\".json\"):\r\n                        data = json.load(stream)\r\n                    elif f.endswith(\".yaml\") or f.endswith(\".yml\"):\r\n                        data = yaml.safe_load(stream)\r\n                        if not data:\r\n                            raise CoreError(u\"No data loaded from file : {0}\".format(f))\r\n                    else:\r\n                        raise CoreError(u\"Unable to load file : {0} : Unknown file format. Supported file endings is [.json, .yaml, .yml]\")\r\n\r\n                    for key in data.keys():\r\n                        if key in schema_data.keys():\r\n                            raise CoreError(u\"Parsed key : {0} : two times in schema files...\".format(key))\r\n\r\n                    schema_data = dict(schema_data, **data)\r\n\r\n            self.schema = schema_data\r\n\r\n        # Nothing was loaded so try the source_data variable\r\n        if self.source is None:\r\n            log.debug(u\"No source file loaded, trying source data variable\")\r\n            self.source = source_data\r\n        if self.schema is None:\r\n            log.debug(u\"No schema file loaded, trying schema data variable\")\r\n            self.schema = schema_data\r\n\r\n        # Test if anything was loaded\r\n        if self.source is None:\r\n            raise CoreError(u\"No source file/data was loaded\")\r\n        if self.schema is None:\r\n            raise CoreError(u\"No schema file/data was loaded\")\r\n\r\n        # Merge any extensions defined in the schema with the provided list of extensions from the cli\r\n>       for f in self.schema.get('extensions', []):\r\nE       AttributeError: 'generator' object has no attribute 'get'\r\n\r\n/usr/local/lib/python3.7/site-packages/pykwalify/core.py:119: AttributeError\r\n```\r\n# minimum example\r\n## Test File\r\n```\r\ntest_record = {\r\n    \"version\": \"0.1.0\",\r\n    \"name\": \"test_name\"\r\n}\r\n\r\n@pytest.fixture\r\ndef test_schema():\r\n with open(\"tests/pyqwalify_test_schema.yml\", \"r\") as handle:\r\n    return yaml.safe_load_all(handle)\r\n\r\ndef test_valid_single_record(test_schema):\r\n    core = Core(\r\n        source_data=test_record,\r\n        schema_data=test_schema,\r\n        strict_rule_validation=True,\r\n        allow_assertions=True)\r\n    core.validate()\r\n    assert core.validation_errors == []\r\n```\r\n## Schema File\r\n```\r\ntype: map\r\nmapping:\r\n    version:\r\n        type: str\r\n    name:\r\n        type: str\r\n```\r\n\r\n# System Information\r\n```\r\nRuamel==0.15.88\r\npykwalify==1.7.0\r\n```\r\n```\r\nplatform linux -- Python 3.7.2, pytest-4.3.0, py-1.8.0, pluggy-0.9.0\r\nbenchmark: 3.2.2 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=\r\nFalse warmup_iterations=100000)\r\nrootdir: /home/pytest, inifile: setup.cfg\r\nplugins: cov-2.6.1, benchmark-3.2.2\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/152", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/152/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/152/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/152/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/152", "id": 412392901, "node_id": "MDU6SXNzdWU0MTIzOTI5MDE=", "number": 152, "title": "placing `allowempty` rule in the root `map` fails with error", "user": {"login": "minherz", "id": 3994488, "node_id": "MDQ6VXNlcjM5OTQ0ODg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3994488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/minherz", "html_url": "https://github.com/minherz", "followers_url": "https://api.github.com/users/minherz/followers", "following_url": "https://api.github.com/users/minherz/following{/other_user}", "gists_url": "https://api.github.com/users/minherz/gists{/gist_id}", "starred_url": "https://api.github.com/users/minherz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/minherz/subscriptions", "organizations_url": "https://api.github.com/users/minherz/orgs", "repos_url": "https://api.github.com/users/minherz/repos", "events_url": "https://api.github.com/users/minherz/events{/privacy}", "received_events_url": "https://api.github.com/users/minherz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-20T12:07:54Z", "updated_at": "2019-10-20T07:53:31Z", "closed_at": "2019-10-19T19:16:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to validate a YAML file with the following schema:\r\n```yaml\r\nmap:\r\n  allowempty: True\r\n```\r\na call to `Core.validate()` fails with `AttributeError: \"'bool' object has no attribute 'get'\"`.\r\nThe goal is to relax the schema by allowing any custom fields beside those being explicitly defined.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/151", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/151/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/151/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/151", "id": 408841949, "node_id": "MDU6SXNzdWU0MDg4NDE5NDk=", "number": 151, "title": "nested dictionaries", "user": {"login": "cottrell", "id": 223276, "node_id": "MDQ6VXNlcjIyMzI3Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/223276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cottrell", "html_url": "https://github.com/cottrell", "followers_url": "https://api.github.com/users/cottrell/followers", "following_url": "https://api.github.com/users/cottrell/following{/other_user}", "gists_url": "https://api.github.com/users/cottrell/gists{/gist_id}", "starred_url": "https://api.github.com/users/cottrell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cottrell/subscriptions", "organizations_url": "https://api.github.com/users/cottrell/orgs", "repos_url": "https://api.github.com/users/cottrell/repos", "events_url": "https://api.github.com/users/cottrell/events{/privacy}", "received_events_url": "https://api.github.com/users/cottrell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-11T15:41:09Z", "updated_at": "2019-02-14T13:19:25Z", "closed_at": "2019-02-14T13:19:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "None of the docs include nested dictionaries. The docs are using the variable type as the name of the key so it is impossible to tell what is meant and how to use it in once glance. \r\n\r\nNever, ever use names of things that look like types of things a DOC. Use 'My\" or \"foo\" or something to disambiguated and show which parts of the strings are arbitrary and not reserved. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/150", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/150/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/150/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/150/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/150", "id": 400188580, "node_id": "MDU6SXNzdWU0MDAxODg1ODA=", "number": 150, "title": "how can i validate YAML and schema that are strings and not files", "user": {"login": "minherz", "id": 3994488, "node_id": "MDQ6VXNlcjM5OTQ0ODg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3994488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/minherz", "html_url": "https://github.com/minherz", "followers_url": "https://api.github.com/users/minherz/followers", "following_url": "https://api.github.com/users/minherz/following{/other_user}", "gists_url": "https://api.github.com/users/minherz/gists{/gist_id}", "starred_url": "https://api.github.com/users/minherz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/minherz/subscriptions", "organizations_url": "https://api.github.com/users/minherz/orgs", "repos_url": "https://api.github.com/users/minherz/repos", "events_url": "https://api.github.com/users/minherz/events{/privacy}", "received_events_url": "https://api.github.com/users/minherz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-17T09:42:35Z", "updated_at": "2019-01-17T16:00:06Z", "closed_at": "2019-01-17T16:00:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Existing examples show the use of package only with files. How it can be used vs. two string variables that contain the YAML and Schema?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/149", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/149/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/149/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/149/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/149", "id": 389665973, "node_id": "MDU6SXNzdWUzODk2NjU5NzM=", "number": 149, "title": "Validation against multiple types", "user": {"login": "jdeluyck", "id": 5451787, "node_id": "MDQ6VXNlcjU0NTE3ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5451787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdeluyck", "html_url": "https://github.com/jdeluyck", "followers_url": "https://api.github.com/users/jdeluyck/followers", "following_url": "https://api.github.com/users/jdeluyck/following{/other_user}", "gists_url": "https://api.github.com/users/jdeluyck/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdeluyck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdeluyck/subscriptions", "organizations_url": "https://api.github.com/users/jdeluyck/orgs", "repos_url": "https://api.github.com/users/jdeluyck/repos", "events_url": "https://api.github.com/users/jdeluyck/events{/privacy}", "received_events_url": "https://api.github.com/users/jdeluyck/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-11T09:23:58Z", "updated_at": "2018-12-11T14:05:47Z", "closed_at": "2018-12-11T10:24:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to allow matching against any number of types? I have a yaml schema where it's allowed either to supply a number, or a string.\r\n\r\nLogically this would result in something like\r\n```\r\n   key:\r\n      - type: str\r\n        required: true\r\n      - type: number\r\n        required: true\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/148", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/148/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/148/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/148", "id": 389346970, "node_id": "MDU6SXNzdWUzODkzNDY5NzA=", "number": 148, "title": "Parsing of structure (sequence is not a list, xx is not a map)", "user": {"login": "jdeluyck", "id": 5451787, "node_id": "MDQ6VXNlcjU0NTE3ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5451787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdeluyck", "html_url": "https://github.com/jdeluyck", "followers_url": "https://api.github.com/users/jdeluyck/followers", "following_url": "https://api.github.com/users/jdeluyck/following{/other_user}", "gists_url": "https://api.github.com/users/jdeluyck/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdeluyck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdeluyck/subscriptions", "organizations_url": "https://api.github.com/users/jdeluyck/orgs", "repos_url": "https://api.github.com/users/jdeluyck/repos", "events_url": "https://api.github.com/users/jdeluyck/events{/privacy}", "received_events_url": "https://api.github.com/users/jdeluyck/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-10T15:15:08Z", "updated_at": "2018-12-10T15:27:39Z", "closed_at": "2018-12-10T15:27:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm having some issues getting the following yaml structure parsed:\r\n\r\n```\r\ndefaults: &defaults\r\n    quota: 10\r\n\r\nprojects: &projects\r\n    - proj1:\r\n          <<: *defaults\r\n          owner: owner1\r\n          ownername: \"Foo\"\r\n          status: Created\r\n          expiration: 2018/03/25\r\n    - proj2:\r\n          <<: *defaults\r\n          owner: owner2\r\n          ownername: \"Bar\"\r\n          status: Created\r\n          expiration: 2017/11/11\r\n```\r\n\r\nI've created the following schema:\r\n```\r\ntype: map\r\nallowempty: True\r\nmapping:\r\n  projects:\r\n    type: seq\r\n    sequence:\r\n      type: map\r\n      mapping:\r\n        owner:\r\n          type: str\r\n          required: True\r\n        ownername:\r\n          type: str\r\n          required: True\r\n        status:\r\n          type: str\r\n          required: True\r\n        expiration:\r\n          type: timestamp\r\n          required: True\r\n        quota:\r\n          type: str\r\n          required: True\r\n```\r\n\r\nbut this results in \r\n\r\n```\r\npykwalify.errors.RuleError: <RuleError: error code 4: Sequence keyword is not a list: Path: '/mapping/projects'>\r\n```\r\n\r\nSecond attempt, remapping to a map:\r\n\r\n```\r\ntype: map\r\nallowempty: True\r\nmapping:\r\n  projects:\r\n    type: map\r\n    mapping:\r\n      regex;(.*):\r\n        type: map\r\n        mapping:\r\n          owner:\r\n            type: str\r\n            required: True\r\n          ownername:\r\n            type: str\r\n            required: True\r\n          status:\r\n            type: str\r\n            required: True\r\n          expiration:\r\n            type: timestamp\r\n            required: True\r\n          quota:\r\n            type: str\r\n            required: True\r\n```\r\n\r\nAlas:\r\n\r\n```\r\n ERROR - validation.invalid\r\n ERROR -  --- All found errors ---\r\n ERROR - [u\"Value '[{'proj1': {'status': 'Created', 'owner': 'owner1', 'ownername': 'Foo', 'expiration': '2018/03/25', 'quota': 10}}, {'proj2': {'status': 'Created', 'owner': 'owner2', 'ownername': 'Bar', 'expiration': '2017/11/11', 'quota': 10}}]' is not a dict. Value path: '/projects'\"]\r\n\r\npykwalify.errors.SchemaError: <SchemaError: error code 2: Schema validation failed:\r\n - Value '[{'proj1': {'status': 'Created', 'owner': 'owner1', 'ownername': 'Foo', 'expiration': '2018/03/25', 'quota': 10}}, {'proj2': {'status': 'Created', 'owner': 'owner2', 'ownername': 'Bar', 'expiration': '2017/11/11', 'quota': 10}}]' is not a dict. Value path: '/projects'.: Path: '/'>\r\n```\r\n\r\nso, um, what am I doing wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/147", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/147/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/147/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/147", "id": 389326658, "node_id": "MDU6SXNzdWUzODkzMjY2NTg=", "number": 147, "title": "Handling of yaml references/anchors", "user": {"login": "jdeluyck", "id": 5451787, "node_id": "MDQ6VXNlcjU0NTE3ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5451787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdeluyck", "html_url": "https://github.com/jdeluyck", "followers_url": "https://api.github.com/users/jdeluyck/followers", "following_url": "https://api.github.com/users/jdeluyck/following{/other_user}", "gists_url": "https://api.github.com/users/jdeluyck/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdeluyck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdeluyck/subscriptions", "organizations_url": "https://api.github.com/users/jdeluyck/orgs", "repos_url": "https://api.github.com/users/jdeluyck/repos", "events_url": "https://api.github.com/users/jdeluyck/events{/privacy}", "received_events_url": "https://api.github.com/users/jdeluyck/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-10T14:29:54Z", "updated_at": "2018-12-11T10:27:08Z", "closed_at": "2018-12-11T10:27:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to use pykwalify to validate some YAML schemas that users can deliver to me, before processing them.\r\n\r\nCreating the pykwalify schema to validate one that contains references is a bit of a pain, though. I have to make sure both the YAML and any references are defined in one document.\r\n\r\nWould it be possible to extend the syntax to allow loading of an arbitrary amount of YAML files, which then get concatenated internally into one string? Or how should I handle this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/146", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/146/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/146/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/146/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/146", "id": 381613828, "node_id": "MDU6SXNzdWUzODE2MTM4Mjg=", "number": 146, "title": "README is not rendered properly on PyPI", "user": {"login": "johnthagen", "id": 10340167, "node_id": "MDQ6VXNlcjEwMzQwMTY3", "avatar_url": "https://avatars1.githubusercontent.com/u/10340167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnthagen", "html_url": "https://github.com/johnthagen", "followers_url": "https://api.github.com/users/johnthagen/followers", "following_url": "https://api.github.com/users/johnthagen/following{/other_user}", "gists_url": "https://api.github.com/users/johnthagen/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnthagen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnthagen/subscriptions", "organizations_url": "https://api.github.com/users/johnthagen/orgs", "repos_url": "https://api.github.com/users/johnthagen/repos", "events_url": "https://api.github.com/users/johnthagen/events{/privacy}", "received_events_url": "https://api.github.com/users/johnthagen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-16T14:08:16Z", "updated_at": "2019-10-09T21:45:29Z", "closed_at": "2019-10-09T21:45:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "See: https://pypi.org/project/pykwalify/\r\n\r\nAccording to the packaging guide, it should be possible to create GitHub Flavored Markdown that works on PyPI: https://packaging.python.org/guides/making-a-pypi-friendly-readme/", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/141", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/141/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/141/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/141", "id": 365596963, "node_id": "MDU6SXNzdWUzNjU1OTY5NjM=", "number": 141, "title": "Required flag silently not honored when including a partial schema.", "user": {"login": "mschaef-da", "id": 40773844, "node_id": "MDQ6VXNlcjQwNzczODQ0", "avatar_url": "https://avatars1.githubusercontent.com/u/40773844?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mschaef-da", "html_url": "https://github.com/mschaef-da", "followers_url": "https://api.github.com/users/mschaef-da/followers", "following_url": "https://api.github.com/users/mschaef-da/following{/other_user}", "gists_url": "https://api.github.com/users/mschaef-da/gists{/gist_id}", "starred_url": "https://api.github.com/users/mschaef-da/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mschaef-da/subscriptions", "organizations_url": "https://api.github.com/users/mschaef-da/orgs", "repos_url": "https://api.github.com/users/mschaef-da/repos", "events_url": "https://api.github.com/users/mschaef-da/events{/privacy}", "received_events_url": "https://api.github.com/users/mschaef-da/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-10-01T18:57:44Z", "updated_at": "2018-11-10T19:52:01Z", "closed_at": "2018-11-10T19:52:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "This YAML: \r\n```point:\r\n  x: 3\r\n```\r\n\r\nGives this result: \r\n```\r\n~$ pykwalify -d subschema-required-data.yaml -s subschema-required-schema.yaml \r\n INFO - validation.valid\r\n```\r\n\r\nWhen validated against this schema:\r\n```\r\nschema;coordinate_value:\r\n  type: number\r\n  \r\nmapping:\r\n  point:\r\n    mapping:\r\n      x:\r\n        required: true\r\n        include: coordinate_value\r\n      y:\r\n        required: true\r\n        include: coordinate_value\r\n```\r\n\r\nIt looks like https://github.com/Grokzen/pykwalify/pull/85 was work on a similar scenario, but it seems like either the required flag at the `include` site should be ignored, or a warning/error should be issued signaling that this is not a valid schema definition.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/140", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/140/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/140/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/140/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/140", "id": 361081573, "node_id": "MDU6SXNzdWUzNjEwODE1NzM=", "number": 140, "title": "String can't be value in enum?", "user": {"login": "adamdavis40208", "id": 19850646, "node_id": "MDQ6VXNlcjE5ODUwNjQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/19850646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamdavis40208", "html_url": "https://github.com/adamdavis40208", "followers_url": "https://api.github.com/users/adamdavis40208/followers", "following_url": "https://api.github.com/users/adamdavis40208/following{/other_user}", "gists_url": "https://api.github.com/users/adamdavis40208/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamdavis40208/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamdavis40208/subscriptions", "organizations_url": "https://api.github.com/users/adamdavis40208/orgs", "repos_url": "https://api.github.com/users/adamdavis40208/repos", "events_url": "https://api.github.com/users/adamdavis40208/events{/privacy}", "received_events_url": "https://api.github.com/users/adamdavis40208/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-17T23:31:31Z", "updated_at": "2018-09-18T00:12:56Z", "closed_at": "2018-09-18T00:12:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to validate a string in yml is not a reserved mysql keyword (like 'accessible'. hundreds of strings)\r\n\r\nIs this possible in pykwalify?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/139", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/139/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/139/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/139", "id": 360839753, "node_id": "MDU6SXNzdWUzNjA4Mzk3NTM=", "number": 139, "title": "Add ability to use package resources as data source", "user": {"login": "eirnym", "id": 485399, "node_id": "MDQ6VXNlcjQ4NTM5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/485399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eirnym", "html_url": "https://github.com/eirnym", "followers_url": "https://api.github.com/users/eirnym/followers", "following_url": "https://api.github.com/users/eirnym/following{/other_user}", "gists_url": "https://api.github.com/users/eirnym/gists{/gist_id}", "starred_url": "https://api.github.com/users/eirnym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eirnym/subscriptions", "organizations_url": "https://api.github.com/users/eirnym/orgs", "repos_url": "https://api.github.com/users/eirnym/repos", "events_url": "https://api.github.com/users/eirnym/events{/privacy}", "received_events_url": "https://api.github.com/users/eirnym/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-17T12:12:38Z", "updated_at": "2019-10-19T21:29:57Z", "closed_at": "2019-10-19T21:29:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently `pykwalify` library doesn't provide an easy way to override where resources are located and all named resources must be reachable by `open` function. This disallows a user to open them with custom names or using package resources including API provided by Python 3.7 and backported to earlier versions.\r\n\r\nTo provide this posibility I suggest: \r\n* add ability to supply `dict` containing some required data such as custom types, external resources, etc\r\n* replace all `open()` calls by an overridable function as a parameter or by a custom class method", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/138", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/138/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/138/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/138", "id": 360786483, "node_id": "MDU6SXNzdWUzNjA3ODY0ODM=", "number": 138, "title": "Install ruamel by default", "user": {"login": "eirnym", "id": 485399, "node_id": "MDQ6VXNlcjQ4NTM5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/485399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eirnym", "html_url": "https://github.com/eirnym", "followers_url": "https://api.github.com/users/eirnym/followers", "following_url": "https://api.github.com/users/eirnym/following{/other_user}", "gists_url": "https://api.github.com/users/eirnym/gists{/gist_id}", "starred_url": "https://api.github.com/users/eirnym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eirnym/subscriptions", "organizations_url": "https://api.github.com/users/eirnym/orgs", "repos_url": "https://api.github.com/users/eirnym/repos", "events_url": "https://api.github.com/users/eirnym/events{/privacy}", "received_events_url": "https://api.github.com/users/eirnym/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-09-17T09:28:08Z", "updated_at": "2019-01-25T17:48:46Z", "closed_at": "2018-10-04T18:35:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "In #59 you used `ruamel` as a default parser if present, and in `setup.py` and `README.md` files you blame that you use `PyYAML` by default.\r\n\r\nCould you install `ruamel` by default and add PyYAML as an optional dependency? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/137", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/137/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/137/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/137/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/137", "id": 349862268, "node_id": "MDU6SXNzdWUzNDk4NjIyNjg=", "number": 137, "title": "Markdown/Documentation generation out of schema", "user": {"login": "brendan-da", "id": 33271082, "node_id": "MDQ6VXNlcjMzMjcxMDgy", "avatar_url": "https://avatars2.githubusercontent.com/u/33271082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendan-da", "html_url": "https://github.com/brendan-da", "followers_url": "https://api.github.com/users/brendan-da/followers", "following_url": "https://api.github.com/users/brendan-da/following{/other_user}", "gists_url": "https://api.github.com/users/brendan-da/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendan-da/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendan-da/subscriptions", "organizations_url": "https://api.github.com/users/brendan-da/orgs", "repos_url": "https://api.github.com/users/brendan-da/repos", "events_url": "https://api.github.com/users/brendan-da/events{/privacy}", "received_events_url": "https://api.github.com/users/brendan-da/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-13T01:29:07Z", "updated_at": "2018-10-04T16:43:32Z", "closed_at": "2018-10-04T16:43:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, Id like to be able to generate documentation out of a schema,\r\nSay for usage of config yaml for a project.\r\nI've had a look around and cant find anything that resembles this.\r\nI first looked at extensions but i would basically need to re implement the world to achieve this.\r\nIs anyone aware of accomplishing something like this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/136", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/136/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/136/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/136", "id": 349762972, "node_id": "MDU6SXNzdWUzNDk3NjI5NzI=", "number": 136, "title": "\"Good/Evil\" clause in license makes it non-free in Debian", "user": {"login": "witten", "id": 17146, "node_id": "MDQ6VXNlcjE3MTQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/17146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/witten", "html_url": "https://github.com/witten", "followers_url": "https://api.github.com/users/witten/followers", "following_url": "https://api.github.com/users/witten/following{/other_user}", "gists_url": "https://api.github.com/users/witten/gists{/gist_id}", "starred_url": "https://api.github.com/users/witten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/witten/subscriptions", "organizations_url": "https://api.github.com/users/witten/orgs", "repos_url": "https://api.github.com/users/witten/repos", "events_url": "https://api.github.com/users/witten/events{/privacy}", "received_events_url": "https://api.github.com/users/witten/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-11T20:53:03Z", "updated_at": "2018-10-03T15:56:43Z", "closed_at": "2018-10-03T15:55:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "pykwalify is considered non-free by Debian because its license contains the \"The Software shall be used for Good, not Evil.\" clause. See discussion here: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=887809\r\n\r\nAnd also this page: https://wiki.debian.org/qa.debian.org/jsonevil\r\n\r\nWhile I'm a big fan of Good (and not a fan of Evil), I'd suggest removing the clause so as to allow unrestricted use of pykwalify, in the spirit of the MIT license. Ironically, the clause may actually be preventing some Good use of pykwalify!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/135", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/135/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/135/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/135/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/135", "id": 347211128, "node_id": "MDU6SXNzdWUzNDcyMTExMjg=", "number": 135, "title": "enum mismatches should report the enumeration options", "user": {"login": "yaowuang", "id": 2044200, "node_id": "MDQ6VXNlcjIwNDQyMDA=", "avatar_url": "https://avatars1.githubusercontent.com/u/2044200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaowuang", "html_url": "https://github.com/yaowuang", "followers_url": "https://api.github.com/users/yaowuang/followers", "following_url": "https://api.github.com/users/yaowuang/following{/other_user}", "gists_url": "https://api.github.com/users/yaowuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaowuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaowuang/subscriptions", "organizations_url": "https://api.github.com/users/yaowuang/orgs", "repos_url": "https://api.github.com/users/yaowuang/repos", "events_url": "https://api.github.com/users/yaowuang/events{/privacy}", "received_events_url": "https://api.github.com/users/yaowuang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-02T23:42:08Z", "updated_at": "2018-10-04T16:30:16Z", "closed_at": "2018-10-04T16:30:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "If my enum for interfaces are [ SAS6, SAS12 ]\r\n\r\nI get an error that shows:\r\nEnum 'SAS' does not exist. Path: '/drive/interface'\r\n\r\nWould would be more descriptive if it shows\r\nEnum 'SAS' does not exist. Path: '/drive/interface' Enum: [ 'SAS6', 'SAS12' ]", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/133", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/133/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/133/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/133", "id": 328775088, "node_id": "MDU6SXNzdWUzMjg3NzUwODg=", "number": 133, "title": "Using enum with type scalar", "user": {"login": "ioben", "id": 639053, "node_id": "MDQ6VXNlcjYzOTA1Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/639053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ioben", "html_url": "https://github.com/ioben", "followers_url": "https://api.github.com/users/ioben/followers", "following_url": "https://api.github.com/users/ioben/following{/other_user}", "gists_url": "https://api.github.com/users/ioben/gists{/gist_id}", "starred_url": "https://api.github.com/users/ioben/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ioben/subscriptions", "organizations_url": "https://api.github.com/users/ioben/orgs", "repos_url": "https://api.github.com/users/ioben/repos", "events_url": "https://api.github.com/users/ioben/events{/privacy}", "received_events_url": "https://api.github.com/users/ioben/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-02T20:35:06Z", "updated_at": "2018-10-04T18:35:58Z", "closed_at": "2018-10-04T18:35:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running into an error where I'd like to use `type: scalar` and `enum: [true, false, recursive]`.  Using version 1.6.1.\r\n\r\nSchema:\r\n```\r\ntype: scalar\r\nenum: [true, false, recursive]\r\n```\r\n\r\nExample data:\r\n```\r\ncreate: recursive\r\n```\r\n\r\nOutput:\r\n```\r\npykwalify -d test.yaml -s test-schema.yaml -vvvvv\r\n DEBUG - Setting verbose level: 5\r\n DEBUG - Arguments from CLI: {'--allow-assertions': False,\r\n '--data-file': 'test.yaml',\r\n '--extension': [],\r\n '--fix-ruby-style-regex': False,\r\n '--quiet': False,\r\n '--schema-file': ['test-schema.yaml'],\r\n '--strict-rule-validation': False,\r\n '--verbose': 5}\r\n DEBUG - Using yaml library: /usr/local/lib/python3.6/site-packages/yaml/__init__.py\r\n DEBUG - source_file: test.yaml\r\n DEBUG - schema_file: ['test-schema.yaml']\r\n DEBUG - source_data: None\r\n DEBUG - schema_data: None\r\n DEBUG - extension files: []\r\n DEBUG - loading all extensions : []\r\n DEBUG - []\r\n DEBUG - []\r\n DEBUG - starting core\r\n DEBUG - Building root rule object\r\n DEBUG - Init schema: {'type': 'scalar', 'enum': [True, False, 'recursive']}\r\n DEBUG - Init type value :\r\n DEBUG - Type: scalar Rule: {'type': 'scalar', 'enum': [True, False, 'recursive']}\r\n DEBUG - Init enum value :\r\nTraceback (most recent call last):\r\n  File \"/usr/local/bin/pykwalify\", line 11, in <module>\r\n    sys.exit(cli_entrypoint())\r\n  File \"/usr/local/lib/python3.6/site-packages/pykwalify/cli.py\", line 95, in cli_entrypoint\r\n    run(parse_cli())\r\n  File \"/usr/local/lib/python3.6/site-packages/pykwalify/cli.py\", line 82, in run\r\n    c.validate()\r\n  File \"/usr/local/lib/python3.6/site-packages/pykwalify/core.py\", line 155, in validate\r\n    self._start_validate(self.source)\r\n  File \"/usr/local/lib/python3.6/site-packages/pykwalify/core.py\", line 197, in _start_validate\r\n    root_rule = Rule(schema=self.schema)\r\n  File \"/usr/local/lib/python3.6/site-packages/pykwalify/rule.py\", line 66, in __init__\r\n    self.init(schema, \"\")\r\n  File \"/usr/local/lib/python3.6/site-packages/pykwalify/rule.py\", line 443, in init\r\n    func_mapping[k](v, rule, path)\r\n  File \"/usr/local/lib/python3.6/site-packages/pykwalify/rule.py\", line 847, in init_enum_value\r\n    if not isinstance(item, self.type_class):\r\nTypeError: isinstance() arg 2 must be a type or tuple of types\r\n```\r\n\r\nJust commenting out lines 847-852 in `pykwalify/rule.py` works around the issue.  Can't say I know of a better solution to the problem, would like input there.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/132", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/132/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/132/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/132", "id": 325364187, "node_id": "MDU6SXNzdWUzMjUzNjQxODc=", "number": 132, "title": "Item in enum is not of correct class type", "user": {"login": "smalleni", "id": 11049799, "node_id": "MDQ6VXNlcjExMDQ5Nzk5", "avatar_url": "https://avatars3.githubusercontent.com/u/11049799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smalleni", "html_url": "https://github.com/smalleni", "followers_url": "https://api.github.com/users/smalleni/followers", "following_url": "https://api.github.com/users/smalleni/following{/other_user}", "gists_url": "https://api.github.com/users/smalleni/gists{/gist_id}", "starred_url": "https://api.github.com/users/smalleni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smalleni/subscriptions", "organizations_url": "https://api.github.com/users/smalleni/orgs", "repos_url": "https://api.github.com/users/smalleni/repos", "events_url": "https://api.github.com/users/smalleni/events{/privacy}", "received_events_url": "https://api.github.com/users/smalleni/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-22T16:07:58Z", "updated_at": "2018-05-22T20:58:13Z", "closed_at": "2018-05-22T20:58:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using pykwalify 1.6.1 seeing this error: \r\nRuleError: <RuleError: error code 4: Item: 'linear' in enum is not of correct class type: '<type 'str'>': Path: '/mapping/execution/mapping/progression'>\r\n\r\nThe schema is here: https://github.com/openstack/shaker/blob/master/shaker/resources/schemas/scenario.yaml\r\n\r\nAnd the YAMl is here: https://github.com/openstack/shaker/blob/master/shaker/scenarios/openstack/dense_l3_north_south.yaml\r\n\r\nIs this an error on my end or did something change?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/128", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/128/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/128/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/128", "id": 319189304, "node_id": "MDU6SXNzdWUzMTkxODkzMDQ=", "number": 128, "title": "Wildcard names for partial schemas in a map?", "user": {"login": "ryankempster", "id": 5795322, "node_id": "MDQ6VXNlcjU3OTUzMjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5795322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryankempster", "html_url": "https://github.com/ryankempster", "followers_url": "https://api.github.com/users/ryankempster/followers", "following_url": "https://api.github.com/users/ryankempster/following{/other_user}", "gists_url": "https://api.github.com/users/ryankempster/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryankempster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryankempster/subscriptions", "organizations_url": "https://api.github.com/users/ryankempster/orgs", "repos_url": "https://api.github.com/users/ryankempster/repos", "events_url": "https://api.github.com/users/ryankempster/events{/privacy}", "received_events_url": "https://api.github.com/users/ryankempster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-01T12:48:36Z", "updated_at": "2018-05-01T13:11:14Z", "closed_at": "2018-05-01T13:11:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to have a map containing partial schemas where the names are not defined but replaced by wildcards?\r\n\r\nI currently have: \r\n\r\n```\r\ninstances:\r\n        map:\r\n          Main:\r\n            include: instance_schema\r\n          Secondary:\r\n            include: instance_schema\r\n```\r\n\r\nHowever if I wanted to add a new type of instance on my data file, I would have to add this name to the map in the schema. Is there any way of using a wildcard instead of Main/Secondary so that it will force any children of 'instances' to follow the instance_schema without explicitly stating the name that the child element must have?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/127", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/127/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/127/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/127", "id": 318856079, "node_id": "MDU6SXNzdWUzMTg4NTYwNzk=", "number": 127, "title": "Pattern matching IP address", "user": {"login": "ryankempster", "id": 5795322, "node_id": "MDQ6VXNlcjU3OTUzMjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5795322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryankempster", "html_url": "https://github.com/ryankempster", "followers_url": "https://api.github.com/users/ryankempster/followers", "following_url": "https://api.github.com/users/ryankempster/following{/other_user}", "gists_url": "https://api.github.com/users/ryankempster/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryankempster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryankempster/subscriptions", "organizations_url": "https://api.github.com/users/ryankempster/orgs", "repos_url": "https://api.github.com/users/ryankempster/repos", "events_url": "https://api.github.com/users/ryankempster/events{/privacy}", "received_events_url": "https://api.github.com/users/ryankempster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-04-30T11:12:40Z", "updated_at": "2018-04-30T13:38:30Z", "closed_at": "2018-04-30T13:35:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to pattern match an IP address, example 11.11.11.11/32\r\n\r\nusing the following regex pattern: ((?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:(?<!\\.)\\b|\\.)){4}\\/\\d{1,2}\r\n\r\nMy issue is that an IP address does not seem to fall under any of the data types (such as str, number), and if type:any is used then the value will be allowed even if it doesn't follow the regular expression.\r\n\r\nIs there something I'm missing or is regex for ip addresses not supported?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/126", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/126/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/126/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/126", "id": 318371168, "node_id": "MDU6SXNzdWUzMTgzNzExNjg=", "number": 126, "title": "Name of list in validation?", "user": {"login": "ryankempster", "id": 5795322, "node_id": "MDQ6VXNlcjU3OTUzMjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5795322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryankempster", "html_url": "https://github.com/ryankempster", "followers_url": "https://api.github.com/users/ryankempster/followers", "following_url": "https://api.github.com/users/ryankempster/following{/other_user}", "gists_url": "https://api.github.com/users/ryankempster/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryankempster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryankempster/subscriptions", "organizations_url": "https://api.github.com/users/ryankempster/orgs", "repos_url": "https://api.github.com/users/ryankempster/repos", "events_url": "https://api.github.com/users/ryankempster/events{/privacy}", "received_events_url": "https://api.github.com/users/ryankempster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-04-27T11:17:15Z", "updated_at": "2018-04-27T14:19:49Z", "closed_at": "2018-04-27T11:52:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I have:\r\n```\r\n  - {a: A, b: 2}\r\n  - {a: C, b: 4}\r\n```\r\n\r\nas a list, I can create a schema to validate this (below)\r\n```\r\ntype: seq\r\nsequence:\r\n  - type: map\r\n    mapping:\r\n      a:\r\n        type: str\r\n      b:\r\n        type: int\r\n```\r\n\r\nHowever, I'm going to want to validate a document with lots of lists. If I give a name to the list, (e.g. below this text), I can't work out how to add this to the schema. If I try adding 'sequence_name:' above the validation previously shown, I get an error about sequence_name being an unknown key. \r\n\r\n```\r\nsequence_name:\r\n  - {a: A, b: 2}\r\n  - {a: C, b: 4}\r\nsequence_name2:\r\n  - {a: A, b: 2}\r\n  - {a: C, b: 4}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/125", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/125/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/125/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/125", "id": 312031122, "node_id": "MDU6SXNzdWUzMTIwMzExMjI=", "number": 125, "title": "seq matching any is over-reporting", "user": {"login": "StephenEhmann", "id": 15388622, "node_id": "MDQ6VXNlcjE1Mzg4NjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/15388622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StephenEhmann", "html_url": "https://github.com/StephenEhmann", "followers_url": "https://api.github.com/users/StephenEhmann/followers", "following_url": "https://api.github.com/users/StephenEhmann/following{/other_user}", "gists_url": "https://api.github.com/users/StephenEhmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/StephenEhmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StephenEhmann/subscriptions", "organizations_url": "https://api.github.com/users/StephenEhmann/orgs", "repos_url": "https://api.github.com/users/StephenEhmann/repos", "events_url": "https://api.github.com/users/StephenEhmann/events{/privacy}", "received_events_url": "https://api.github.com/users/StephenEhmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-06T16:02:34Z", "updated_at": "2018-10-04T16:42:34Z", "closed_at": "2018-10-04T16:42:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "schema:\r\n```yaml\r\nmatching: 'any'\r\nseq:\r\n  - map:\r\n      name:\r\n        required: True\r\n        type: str\r\n        pattern: \\S+\r\n      min:\r\n        required: True\r\n        type: number\r\n      max:\r\n        required: True\r\n        type: number\r\n      step:\r\n        required: True\r\n        type: number\r\n      setValue:\r\n        required: True\r\n        type: str\r\n  - map:\r\n      name:\r\n        required: True\r\n        type: str\r\n        pattern: \\S+\r\n      enum:\r\n        required: True\r\n        seq:\r\n          - type: text\r\n      setValue:\r\n        required: True\r\n        type: str\r\n```\r\ndata that passes validation:\r\n```yaml\r\n- name: A\r\n  min: 0\r\n  max: 2\r\n  step: 1\r\n  setValue: touch A.$value\r\n```\r\ndata that fails validation (only remove the required \"name\" field):\r\n```yaml\r\n- min: 0\r\n  max: 2\r\n  step: 1\r\n  setValue: touch A.$value\r\n```\r\nI get this error report:\r\n --- All found errors ---\r\n[\"Cannot find required key 'name'. Path: '/0'\", \"Cannot find required key 'name'. Path: '/0'\", \"Cannot find required key 'enum'. Path: '/0'\", \"Key 'min' was not defined. Path: '/0'\", \"Key 'max' was not defined. Path: '/0'\", \"Key 'step' was not defined. Path: '/0'\"]\r\n<SchemaError: error code 2: Schema validation failed:\r\n - Cannot find required key 'name'. Path: '/0'.\r\n - Cannot find required key 'name'. Path: '/0'.\r\n - Cannot find required key 'enum'. Path: '/0'.\r\n - Key 'min' was not defined. Path: '/0'.\r\n - Key 'max' was not defined. Path: '/0'.\r\n - Key 'step' was not defined. Path: '/0'.: Path: '/'>\r\n\r\nIn this case it is reporting all validation failures of the seq item against the both choices of schema for a seq item. An improvement to only print the errors for the choice of schema for which there were the minimum number of failures which would yield this:\r\n --- All found errors ---\r\n[\"Cannot find required key 'name'. Path: '/0'\"]\r\n<SchemaError: error code 2: Schema validation failed:\r\n - Key 'step' was not defined. Path: '/0'.: Path: '/'>\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/124", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/124/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/124/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/124", "id": 305191133, "node_id": "MDU6SXNzdWUzMDUxOTExMzM=", "number": 124, "title": "Latest release 1.6.1 breaks compatibility with 1.6.0 when parsing python/str", "user": {"login": "tmbo", "id": 1098412, "node_id": "MDQ6VXNlcjEwOTg0MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1098412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmbo", "html_url": "https://github.com/tmbo", "followers_url": "https://api.github.com/users/tmbo/followers", "following_url": "https://api.github.com/users/tmbo/following{/other_user}", "gists_url": "https://api.github.com/users/tmbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmbo/subscriptions", "organizations_url": "https://api.github.com/users/tmbo/orgs", "repos_url": "https://api.github.com/users/tmbo/repos", "events_url": "https://api.github.com/users/tmbo/events{/privacy}", "received_events_url": "https://api.github.com/users/tmbo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-03-14T14:49:05Z", "updated_at": "2019-10-21T16:25:36Z", "closed_at": "2019-10-19T20:22:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Latest release 1.6.1 breaks compatibility with 1.6.0 when parsing python/str.\r\n\r\nExample schema (`schema_file.yml`):\r\n```yml\r\nallowempty: True\r\nmapping:\r\n  intents:\r\n    type: !!python/str \"seq\"\r\n    sequence:\r\n    - type: !!python/str \"str\"\r\n```\r\n\r\nsource file (`source.yml`):\r\n```\r\n# all hashtags are comments :)\r\nintents:\r\n - greet\r\n - default\r\n - goodbye\r\n```\r\n\r\nCode:\r\n```python\r\nfrom pykwalify.core import Core\r\nc = Core(source_file=\"source.yml\", schema_files=[\"schema_file.yml\"])\r\n```\r\n\r\nworks just fine in 1.6.0 but is broken in 1.6.1 (python 2.7). Exception:\r\n```\r\n/Users/tmbo/.virtualenvs/rasa/lib/python2.7/site-packages/pykwalify/core.pyc in __init__(self, source_file, schema_files, source_data, schema_data, extensions, strict_rule_validation, fix_ruby_style_regex, allow_assertions)\r\n     88                         data = json.load(stream)\r\n     89                     elif f.endswith(\".yaml\") or f.endswith(\".yml\"):\r\n---> 90                         data = yaml.safe_load(stream)\r\n     91                         if not data:\r\n     92                             raise CoreError(u\"No data loaded from file : {0}\".format(f))\r\n\r\n/usr/local/Cellar/python/2.7.14_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/ruamel/yaml/main.pyc in safe_load(stream, version)\r\n    666     Resolve only basic YAML tags.\r\n    667     \"\"\"\r\n--> 668     return load(stream, SafeLoader, version)\r\n    669\r\n    670\r\n\r\n/usr/local/Cellar/python/2.7.14_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/ruamel/yaml/main.pyc in load(stream, Loader, version, preserve_quotes)\r\n    637     loader = Loader(stream, version, preserve_quotes=preserve_quotes)\r\n    638     try:\r\n--> 639         return loader._constructor.get_single_data()  # type: ignore\r\n    640     finally:\r\n    641         loader._parser.dispose()  # type: ignore\r\n\r\n/usr/local/Cellar/python/2.7.14_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/ruamel/yaml/constructor.pyc in get_single_data(self)\r\n    102         node = self.composer.get_single_node()\r\n    103         if node is not None:\r\n--> 104             return self.construct_document(node)\r\n    105         return None\r\n    106\r\n\r\n/usr/local/Cellar/python/2.7.14_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/ruamel/yaml/constructor.pyc in construct_document(self, node)\r\n    112             self.state_generators = []\r\n    113             for generator in state_generators:\r\n--> 114                 for dummy in generator:\r\n    115                     pass\r\n    116         self.constructed_objects = {}\r\n\r\n/usr/local/Cellar/python/2.7.14_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/ruamel/yaml/constructor.pyc in construct_yaml_map(self, node)\r\n    609         data = {}  # type: Dict[Any, Any]\r\n    610         yield data\r\n--> 611         value = self.construct_mapping(node)\r\n    612         data.update(value)\r\n    613\r\n\r\n/usr/local/Cellar/python/2.7.14_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/ruamel/yaml/constructor.pyc in construct_mapping(self, node, deep)\r\n    354         if isinstance(node, MappingNode):\r\n    355             self.flatten_mapping(node)\r\n--> 356         return BaseConstructor.construct_mapping(self, node, deep=deep)\r\n    357\r\n    358     def construct_yaml_null(self, node):\r\n\r\n/usr/local/Cellar/python/2.7.14_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/ruamel/yaml/constructor.pyc in construct_mapping(self, node, deep)\r\n    234                             \"found unhashable key\", key_node.start_mark)\r\n    235\r\n--> 236                 value = self.construct_object(value_node, deep=deep)\r\n    237                 if check:\r\n    238                     self.check_mapping_key(node, key_node, mapping, key, value)\r\n\r\n/usr/local/Cellar/python/2.7.14_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/ruamel/yaml/constructor.pyc in construct_object(self, node, deep)\r\n    157                     constructor = self.__class__.construct_mapping   # type: ignore\r\n    158         if tag_suffix is None:\r\n--> 159             data = constructor(self, node)\r\n    160         else:\r\n    161             data = constructor(self, tag_suffix, node)\r\n\r\n/usr/local/Cellar/python/2.7.14_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/ruamel/yaml/constructor.pyc in construct_undefined(self, node)\r\n    629             \"could not determine a constructor for the tag %r\" %\r\n    630             utf8(node.tag),\r\n--> 631             node.start_mark)\r\n    632\r\n    633\r\n\r\nConstructorError: could not determine a constructor for the tag 'tag:yaml.org,2002:python/str'\r\n  in \"/Users/tmbo/lastmile/bot-ai/rasa_core/rasa_core/schemas/domain.yml\", line 4, column 11\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/123", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/123/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/123/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/123", "id": 302026567, "node_id": "MDU6SXNzdWUzMDIwMjY1Njc=", "number": 123, "title": "Getting `AttributeError: 'str' object has no attribute 'get'`", "user": {"login": "pratikjoy7", "id": 15854222, "node_id": "MDQ6VXNlcjE1ODU0MjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/15854222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pratikjoy7", "html_url": "https://github.com/pratikjoy7", "followers_url": "https://api.github.com/users/pratikjoy7/followers", "following_url": "https://api.github.com/users/pratikjoy7/following{/other_user}", "gists_url": "https://api.github.com/users/pratikjoy7/gists{/gist_id}", "starred_url": "https://api.github.com/users/pratikjoy7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pratikjoy7/subscriptions", "organizations_url": "https://api.github.com/users/pratikjoy7/orgs", "repos_url": "https://api.github.com/users/pratikjoy7/repos", "events_url": "https://api.github.com/users/pratikjoy7/events{/privacy}", "received_events_url": "https://api.github.com/users/pratikjoy7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-03T19:46:07Z", "updated_at": "2018-03-06T13:59:47Z", "closed_at": "2018-03-06T13:59:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "The structure of my yaml data is like this -\r\n```\r\nitem_A:\r\n  key_one: some_str_value\r\n  key_two:\r\n    - some_str_value_one\r\n    - some_str_value_two\r\nitem_B:\r\n  key_one: some_str_value\r\n  key_two:\r\n    - some_other_str_value_one\r\n    - some_other_str_value_two\r\n```\r\n\r\nThe schema I wrote is this -\r\n```\r\ntype: map\r\nmapping: \r\n  item:\r\n    type: map\r\n    required: yes\r\n    mapping:\r\n      key_one: \r\n        type: str\r\n        required: yes\r\n      key_two: seq\r\n      required: yes\r\n      seq:\r\n        - type: str\r\n```\r\n\r\nWhere am I making the mistake here? Thanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/120", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/120/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/120/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/120", "id": 282547858, "node_id": "MDU6SXNzdWUyODI1NDc4NTg=", "number": 120, "title": "Support opening files with alternate encoding", "user": {"login": "garrettheel", "id": 637005, "node_id": "MDQ6VXNlcjYzNzAwNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/637005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/garrettheel", "html_url": "https://github.com/garrettheel", "followers_url": "https://api.github.com/users/garrettheel/followers", "following_url": "https://api.github.com/users/garrettheel/following{/other_user}", "gists_url": "https://api.github.com/users/garrettheel/gists{/gist_id}", "starred_url": "https://api.github.com/users/garrettheel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/garrettheel/subscriptions", "organizations_url": "https://api.github.com/users/garrettheel/orgs", "repos_url": "https://api.github.com/users/garrettheel/repos", "events_url": "https://api.github.com/users/garrettheel/events{/privacy}", "received_events_url": "https://api.github.com/users/garrettheel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-15T21:06:39Z", "updated_at": "2018-10-04T17:38:24Z", "closed_at": "2018-10-04T17:38:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "The behavior changed in python3 such that `open(path) as f: yaml.load(f)` doesn't work for utf-8 encoded files. Would it be possible to add an option to specify an alternate encoding which is given to the `open` call?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/115", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/115/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/115/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/115", "id": 270916703, "node_id": "MDU6SXNzdWUyNzA5MTY3MDM=", "number": 115, "title": "Support ruamel.yaml >= 0.12.0", "user": {"login": "bfabio", "id": 788293, "node_id": "MDQ6VXNlcjc4ODI5Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/788293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bfabio", "html_url": "https://github.com/bfabio", "followers_url": "https://api.github.com/users/bfabio/followers", "following_url": "https://api.github.com/users/bfabio/following{/other_user}", "gists_url": "https://api.github.com/users/bfabio/gists{/gist_id}", "starred_url": "https://api.github.com/users/bfabio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bfabio/subscriptions", "organizations_url": "https://api.github.com/users/bfabio/orgs", "repos_url": "https://api.github.com/users/bfabio/repos", "events_url": "https://api.github.com/users/bfabio/events{/privacy}", "received_events_url": "https://api.github.com/users/bfabio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-03T09:21:53Z", "updated_at": "2018-02-06T15:03:21Z", "closed_at": "2018-02-06T15:03:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "pykwalify declares compatibility with ruamel.yaml < 0.12.0 (https://github.com/Grokzen/pykwalify/blame/unstable/setup.py#L25) but works just fine with the latest version (0.15.34)\r\n\r\nIt would be nice to support the latest ruamel.yaml's goodies.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/114", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/114/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/114/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/114", "id": 264207627, "node_id": "MDU6SXNzdWUyNjQyMDc2Mjc=", "number": 114, "title": "validate all map values", "user": {"login": "asafshen", "id": 10514677, "node_id": "MDQ6VXNlcjEwNTE0Njc3", "avatar_url": "https://avatars0.githubusercontent.com/u/10514677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asafshen", "html_url": "https://github.com/asafshen", "followers_url": "https://api.github.com/users/asafshen/followers", "following_url": "https://api.github.com/users/asafshen/following{/other_user}", "gists_url": "https://api.github.com/users/asafshen/gists{/gist_id}", "starred_url": "https://api.github.com/users/asafshen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asafshen/subscriptions", "organizations_url": "https://api.github.com/users/asafshen/orgs", "repos_url": "https://api.github.com/users/asafshen/repos", "events_url": "https://api.github.com/users/asafshen/events{/privacy}", "received_events_url": "https://api.github.com/users/asafshen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-10T12:24:11Z", "updated_at": "2017-10-10T14:13:31Z", "closed_at": "2017-10-10T14:13:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can someone have an idea how can I validate all map's values (regardless the map keys)?\r\nFor example:\r\n```\r\ntasks:\r\n  \"0\":\r\n    id: \"0\"\r\n    color: \"red\"\r\n    type: start\r\n  \"1\":\r\n    id: \"1\"\r\n    color: \"blue\"\r\n    type: middle\r\n  \"2\":\r\n    id: \"1\"\r\n    color: \"green\"\r\n    type: end\r\n...\r\n``` \r\n\r\nI would like to validate all keys with the same partial schema:\r\n```\r\nschema;task_schema:\r\n  type: map\r\n  mapping:\r\n    id:\r\n      type: str\r\n      required: yes\r\n    color:\r\n      type: str\r\n      required: yes\r\n    type:\r\n      type: str\r\n```\r\n\r\nIs that possible? \r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/113", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/113/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/113/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/113", "id": 262429883, "node_id": "MDU6SXNzdWUyNjI0Mjk4ODM=", "number": 113, "title": "Enum with type \"text\"", "user": {"login": "AirisX", "id": 22881672, "node_id": "MDQ6VXNlcjIyODgxNjcy", "avatar_url": "https://avatars2.githubusercontent.com/u/22881672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AirisX", "html_url": "https://github.com/AirisX", "followers_url": "https://api.github.com/users/AirisX/followers", "following_url": "https://api.github.com/users/AirisX/following{/other_user}", "gists_url": "https://api.github.com/users/AirisX/gists{/gist_id}", "starred_url": "https://api.github.com/users/AirisX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AirisX/subscriptions", "organizations_url": "https://api.github.com/users/AirisX/orgs", "repos_url": "https://api.github.com/users/AirisX/repos", "events_url": "https://api.github.com/users/AirisX/events{/privacy}", "received_events_url": "https://api.github.com/users/AirisX/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-03T13:35:02Z", "updated_at": "2018-03-06T14:10:13Z", "closed_at": "2018-03-06T14:10:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "An error occurs when using an enumeration with the type \"text\".", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/111", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/111/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/111/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/111", "id": 259464966, "node_id": "MDU6SXNzdWUyNTk0NjQ5NjY=", "number": 111, "title": "Problem with unexpected bool loading with unquoted yes/no", "user": {"login": "beauchar", "id": 12685998, "node_id": "MDQ6VXNlcjEyNjg1OTk4", "avatar_url": "https://avatars3.githubusercontent.com/u/12685998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beauchar", "html_url": "https://github.com/beauchar", "followers_url": "https://api.github.com/users/beauchar/followers", "following_url": "https://api.github.com/users/beauchar/following{/other_user}", "gists_url": "https://api.github.com/users/beauchar/gists{/gist_id}", "starred_url": "https://api.github.com/users/beauchar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beauchar/subscriptions", "organizations_url": "https://api.github.com/users/beauchar/orgs", "repos_url": "https://api.github.com/users/beauchar/repos", "events_url": "https://api.github.com/users/beauchar/events{/privacy}", "received_events_url": "https://api.github.com/users/beauchar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-21T11:32:20Z", "updated_at": "2017-12-14T14:27:44Z", "closed_at": "2017-12-14T14:27:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just started to try and do some simple validation with pykwalify but am running into unexpected problems with unquoted yes/no being loaded as booleans.  \r\n\r\nI installed with pip install 'pykwalify[ruamel]' as I wanted the 1.2 yaml spec where yes and no would not be loaded as True/False.  It does looks from my output that I am using ruamel to load the yaml files...I've tried explicitly setting the YAML version to 1.2 in the files but doesn't seem to help.  \r\n\r\nI'm a but stumped!  So I though I'd ask here first before looking at ruamel in case it is some interaction that  I missing.\r\n\r\nI have installed from epel and pip on Centos, the versions I have are:\r\n\r\nPython 2.7.5\r\npykwalify 1.6.0\r\nruamel.yaml 0.11.15\r\n\r\nThe schema and data files I am using as well as output to the command line attached:\r\n\r\nCommand line is:\r\n\r\npykwalify -vvvvvvvvvv -s not_bool_schema.yaml -d not_bool_data.yaml > Output.txt 2>&1\r\n\r\n[not_bool_data.yaml.txt](https://github.com/Grokzen/pykwalify/files/1320954/not_bool_data.yaml.txt)\r\n[not_bool_schema.yaml.txt](https://github.com/Grokzen/pykwalify/files/1320955/not_bool_schema.yaml.txt)\r\n[Output.txt](https://github.com/Grokzen/pykwalify/files/1320956/Output.txt)\r\n\r\nAppreciate any help you can offer! \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/110", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/110/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/110/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/110", "id": 258179655, "node_id": "MDU6SXNzdWUyNTgxNzk2NTU=", "number": 110, "title": "possible to have an enum of partial schemas?", "user": {"login": "grovduck", "id": 1706997, "node_id": "MDQ6VXNlcjE3MDY5OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1706997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grovduck", "html_url": "https://github.com/grovduck", "followers_url": "https://api.github.com/users/grovduck/followers", "following_url": "https://api.github.com/users/grovduck/following{/other_user}", "gists_url": "https://api.github.com/users/grovduck/gists{/gist_id}", "starred_url": "https://api.github.com/users/grovduck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grovduck/subscriptions", "organizations_url": "https://api.github.com/users/grovduck/orgs", "repos_url": "https://api.github.com/users/grovduck/repos", "events_url": "https://api.github.com/users/grovduck/events{/privacy}", "received_events_url": "https://api.github.com/users/grovduck/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-15T22:24:32Z", "updated_at": "2017-12-03T16:40:44Z", "closed_at": "2017-12-03T16:40:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given the following data:\r\n```\r\n- dog:\r\n    name: Fido\r\n    breed: hound\r\n    licks: true\r\n- cat:\r\n    name: Sparky\r\n    color: gray\r\n    ignores: true\r\n```\r\nis it possible to have a schema that supports an enumeration of partial schemas?\r\n```\r\nschema;dog:\r\n  type: map \r\n  mapping:\r\n    'name':\r\n      type: str\r\n      required: true\r\n    'breed':\r\n      type: str\r\n      required: true\r\n    'licks':\r\n      type: bool \r\n      required: true \r\n\r\nschema;cat:\r\n  type: map \r\n  mapping:\r\n    'name':\r\n      type: str\r\n      required: true\r\n    'color':\r\n      type: str\r\n      required: true\r\n    'ignores':\r\n      type: bool \r\n      required: true \r\n\r\ntype: seq \r\nsequence:\r\n  - enum [ include: dog, include: cat ]  # Not actually working ...\r\n```\r\nI may be pushing the validation here, but it would be a really cool feature to have, e.g. if each of the sequence items is a different processing instruction that relies on specific arguments.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/109", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/109/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/109/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/109", "id": 257996572, "node_id": "MDU6SXNzdWUyNTc5OTY1NzI=", "number": 109, "title": "Type map does not allow empty property", "user": {"login": "IoanaIvanova", "id": 20287101, "node_id": "MDQ6VXNlcjIwMjg3MTAx", "avatar_url": "https://avatars3.githubusercontent.com/u/20287101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IoanaIvanova", "html_url": "https://github.com/IoanaIvanova", "followers_url": "https://api.github.com/users/IoanaIvanova/followers", "following_url": "https://api.github.com/users/IoanaIvanova/following{/other_user}", "gists_url": "https://api.github.com/users/IoanaIvanova/gists{/gist_id}", "starred_url": "https://api.github.com/users/IoanaIvanova/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IoanaIvanova/subscriptions", "organizations_url": "https://api.github.com/users/IoanaIvanova/orgs", "repos_url": "https://api.github.com/users/IoanaIvanova/repos", "events_url": "https://api.github.com/users/IoanaIvanova/events{/privacy}", "received_events_url": "https://api.github.com/users/IoanaIvanova/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-15T10:32:18Z", "updated_at": "2019-07-03T15:15:09Z", "closed_at": "2018-03-06T14:17:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\n\r\nI\u2019m trying to create a schema to validate  a property that can have nested properties (aws or openstack) and every of this nested properties can be either empty, described with ~ or can have  one or two nested properties \u2013 enabled and value.  I think that the problem is that type: map does not allow empty property.\r\n\r\nExample 1: \r\n```\r\ninfrastructure:\r\n  aws:\r\n    value: some_data\r\n    enabled: true\r\n```\r\n\r\nExample2:\r\n```\r\ninfrastructure:\r\n  aws: ~\r\n````\r\n\r\nExample  3:\r\n```\r\ninfrastructure:\r\n  aws: ~\r\n  openstack:\r\n    value: some_data\r\n    enabled: true    \r\n```              \r\n\r\nThis is the schema which I think that should validating it:\r\n```\r\ntype: map\r\nmapping:\r\n  infrastructure:\r\n    type: map\r\n    mapping:\r\n      regex;(aws|openstack):\r\n       type: map\r\n       mapping:\r\n        value:\r\n          type: any\r\n        enabled:\r\n          type: bool\r\n```\r\n\r\nBut it gives me an error: \r\npykwalify.errors.NotMappingError: <NotMappingError: error code 6: Value: None is not of a mapping type: Path: '/'>\r\n\r\nCould you tell me If there is something that I miss or there is another way that this can be validated?\r\n\r\nThis is the exception when I run \"pykwalify -s schema.yml -d example.yml\": \r\n```  \r\nTraceback (most recent call last):\r\n  File \"/usr/local/bin/pykwalify\", line 11, in <module>\r\n    sys.exit(cli_entrypoint())\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/cli.py\", line 84, in cli_entrypoint\r\n    run(parse_cli())\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/cli.py\", line 71, in run\r\n    c.validate()\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/core.py\", line 147, in validate\r\n    self._start_validate(self.source)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/core.py\", line 192, in _start_validate\r\n    self._validate(value, root_rule, path, done)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/core.py\", line 211, in _validate\r\n    self._validate_mapping(value, rule, path, done=None)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/core.py\", line 484, in _validate_mapping\r\n    self._validate(v, r, u\"{}/{}\".format(path, k), done)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/core.py\", line 211, in _validate\r\n    self._validate_mapping(value, rule, path, done=None)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/core.py\", line 492, in _validate_mapping\r\n    self._validate(v, mm[0], \"{}/{}\".format(path, k), done)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/core.py\", line 211, in _validate\r\n    self._validate_mapping(value, rule, path, done=None)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/core.py\", line 447, in _validate_mapping\r\n    raise NotMappingError(u\"Value: {} is not of a mapping type\".format(value))\r\npykwalify.errors.NotMappingError: <NotMappingError: error code 6: Value: None is not of a mapping type: Path: '/'>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/103", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/103/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/103/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/103", "id": 244616895, "node_id": "MDU6SXNzdWUyNDQ2MTY4OTU=", "number": 103, "title": "Use yaml.safe_load instead yaml.load", "user": {"login": "ccatterina", "id": 9085116, "node_id": "MDQ6VXNlcjkwODUxMTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/9085116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ccatterina", "html_url": "https://github.com/ccatterina", "followers_url": "https://api.github.com/users/ccatterina/followers", "following_url": "https://api.github.com/users/ccatterina/following{/other_user}", "gists_url": "https://api.github.com/users/ccatterina/gists{/gist_id}", "starred_url": "https://api.github.com/users/ccatterina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ccatterina/subscriptions", "organizations_url": "https://api.github.com/users/ccatterina/orgs", "repos_url": "https://api.github.com/users/ccatterina/repos", "events_url": "https://api.github.com/users/ccatterina/events{/privacy}", "received_events_url": "https://api.github.com/users/ccatterina/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-21T09:39:35Z", "updated_at": "2018-02-06T19:27:12Z", "closed_at": "2018-02-06T19:27:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "With the latest version of ruamel.yaml i receive this warning:\r\n```\r\n/usr/local/lib/python2.7/dist-packages/pykwalify/core.py:76: UnsafeLoaderWarning: \r\nThe default 'Loader' for 'load(stream)' without further arguments can be unsafe.\r\nUse 'load(stream, Loader=ruamel.yaml.Loader)' explicitly if that is OK.\r\nAlternatively include the following in your code:\r\n\r\n  import warnings\r\n  warnings.simplefilter('ignore', ruamel.yaml.error.UnsafeLoaderWarning)\r\n\r\nIn most other cases you should consider using 'safe_load(stream)'\r\n  self.source = yaml.load(stream)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/101", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/101/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/101/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/101", "id": 235805556, "node_id": "MDU6SXNzdWUyMzU4MDU1NTY=", "number": 101, "title": "Regexps for maps", "user": {"login": "brownberry", "id": 14982489, "node_id": "MDQ6VXNlcjE0OTgyNDg5", "avatar_url": "https://avatars1.githubusercontent.com/u/14982489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brownberry", "html_url": "https://github.com/brownberry", "followers_url": "https://api.github.com/users/brownberry/followers", "following_url": "https://api.github.com/users/brownberry/following{/other_user}", "gists_url": "https://api.github.com/users/brownberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/brownberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brownberry/subscriptions", "organizations_url": "https://api.github.com/users/brownberry/orgs", "repos_url": "https://api.github.com/users/brownberry/repos", "events_url": "https://api.github.com/users/brownberry/events{/privacy}", "received_events_url": "https://api.github.com/users/brownberry/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-14T08:45:45Z", "updated_at": "2019-10-19T21:20:25Z", "closed_at": "2019-10-19T21:20:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "feature / merge request : make regexp pattern checking available for maps with integer keys ...\r\n\r\nmodification in core.py \r\n```\t\r\n    # old \r\n    # is_present = any([re.search(required_regex, v) for v in value])\r\n\t\t\t\t\r\n    # new \r\n    # \r\n    is_present = any([re.search(required_regex, str(v)) for v in value])\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/99", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/99/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/99/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/99", "id": 230553422, "node_id": "MDU6SXNzdWUyMzA1NTM0MjI=", "number": 99, "title": "Partial schema issue", "user": {"login": "teone", "id": 3929466, "node_id": "MDQ6VXNlcjM5Mjk0NjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/3929466?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teone", "html_url": "https://github.com/teone", "followers_url": "https://api.github.com/users/teone/followers", "following_url": "https://api.github.com/users/teone/following{/other_user}", "gists_url": "https://api.github.com/users/teone/gists{/gist_id}", "starred_url": "https://api.github.com/users/teone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teone/subscriptions", "organizations_url": "https://api.github.com/users/teone/orgs", "repos_url": "https://api.github.com/users/teone/repos", "events_url": "https://api.github.com/users/teone/events{/privacy}", "received_events_url": "https://api.github.com/users/teone/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-05-23T00:17:26Z", "updated_at": "2018-10-04T16:45:12Z", "closed_at": "2018-10-04T16:45:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello @Grokzen,\r\nusing `pykwalify 1.6.0`\r\nI'm trying to add partial schemas, but I'm having issues with it, here is the code to reproduce the error:\r\n\r\n```\r\nschema_ok = \"\"\"\r\nschema;dbpartial:\r\n  type: map\r\n  map:\r\n    username:\r\n      type: str\r\n    password:\r\n      type: str\r\n\r\nmap:\r\n  database:\r\n    include: dbpartial\r\n\"\"\"\r\n\r\nschema_fail = \"\"\"\r\nschema;dbpartial:\r\n  type: map\r\n  map:\r\n    username:\r\n      type: str\r\n    password:\r\n      type: str\r\n\r\nmap:\r\n  name:\r\n    type: str\r\n    required: True\r\n  database:\r\n    include: dbpartial\r\n\"\"\"\r\n\r\ndata_ok = \"\"\"\r\ndatabase:\r\n  username: test\r\n  password: safe\r\n\"\"\"\r\n\r\ndata_fail = \"\"\"\r\nname: samplename\r\ndatabase:\r\n  username: test\r\n  password: safe\r\n\"\"\"\r\n\r\nimport os\r\n\r\nfor file, content in [\r\n    ('schema_ok.yml',schema_ok),\r\n    ('schema_fail.yml',schema_fail),\r\n    ('data_ok.yml',data_ok),\r\n    ('data_fail.yml', data_fail)]:\r\n    with open(file, 'w') as f:\r\n        f.write(content)\r\n    assert os.path.exists(file)\r\n\r\nimport pykwalify.core\r\nimport logging\r\nlogging.basicConfig()\r\nlogging.getLogger().setLevel(logging.DEBUG)\r\n\r\nprint \"Validation OK:\"\r\ntry:\r\n    pykwalify.core.Core(\r\n        source_file=\"data_ok.yml\",\r\n        schema_files=[\"schema_ok.yml\"]\r\n    ).validate(raise_exception=True)\r\n    print \"Valid yaml: data_ok.yml\"\r\nexcept Exception, e:\r\n    print e.msg\r\n\r\n\r\nprint \"Validation FAIL:\"\r\ntry:\r\n    pykwalify.core.Core(\r\n        source_file=\"data_fail.yml\",\r\n        schema_files=[\"schema_fail.yml\"]\r\n    ).validate(raise_exception=True)\r\n    print \"Valid yaml: data_fail.yml\"\r\nexcept Exception, e:\r\n    print e.msg\r\n```\r\n\r\nAnd this is the output:\r\n\r\n```\r\nValidation OK:\r\nValid yaml: data_ok.yml\r\nValidation FAIL:\r\nERROR:pykwalify.core:validation.invalid\r\nERROR:pykwalify.core: --- All found errors ---\r\nERROR:pykwalify.core:[u\"Key 'name' was not defined. Path: ''\"]\r\nSchema validation failed:\r\n - Key 'name' was not defined. Path: ''.\r\n```\r\nBasically it works perfectly if the `partial` is the only key in my schema map, \r\nit fails if I add any other field.\r\n\r\nAt a first look it seems that `self._validate()` in `core.py` is called only for values defined in the `partial`:\r\n```\r\n----- Root value: {'name': 'samplename', 'database': {'username': 'test', 'password': 'safe'}} - Root path:\r\n----- Root value: {'name': 'samplename', 'database': {'username': 'test', 'password': 'safe'}} - Root path:\r\n----- Root value: {'username': 'test', 'password': 'safe'} - Root path: /database\r\n----- Root value: test - Root path: /database/username\r\n----- Root value: safe - Root path: /database/password\r\n```\r\nand not for others values (or other schema attributes) so I believe the issue is lurking somewhere here: https://github.com/Grokzen/pykwalify/blob/unstable/pykwalify/rule.py#L361-L365\r\n\r\nDo you have any hint?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/98", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/98/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/98/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/98", "id": 230486508, "node_id": "MDU6SXNzdWUyMzA0ODY1MDg=", "number": 98, "title": "Import in a python program to use it programmatically", "user": {"login": "teone", "id": 3929466, "node_id": "MDQ6VXNlcjM5Mjk0NjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/3929466?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teone", "html_url": "https://github.com/teone", "followers_url": "https://api.github.com/users/teone/followers", "following_url": "https://api.github.com/users/teone/following{/other_user}", "gists_url": "https://api.github.com/users/teone/gists{/gist_id}", "starred_url": "https://api.github.com/users/teone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teone/subscriptions", "organizations_url": "https://api.github.com/users/teone/orgs", "repos_url": "https://api.github.com/users/teone/repos", "events_url": "https://api.github.com/users/teone/events{/privacy}", "received_events_url": "https://api.github.com/users/teone/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-05-22T18:55:18Z", "updated_at": "2017-05-23T00:49:27Z", "closed_at": "2017-05-23T00:49:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi @Grokzen,\r\nthanks the great module.\r\n\r\nIs there any way to import it in a python application to use it programmatically?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/97", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/97/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/97/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/97", "id": 226051540, "node_id": "MDU6SXNzdWUyMjYwNTE1NDA=", "number": 97, "title": "Is there any possibility to match map key to str or seq?", "user": {"login": "AKorezin", "id": 5399964, "node_id": "MDQ6VXNlcjUzOTk5NjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/5399964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AKorezin", "html_url": "https://github.com/AKorezin", "followers_url": "https://api.github.com/users/AKorezin/followers", "following_url": "https://api.github.com/users/AKorezin/following{/other_user}", "gists_url": "https://api.github.com/users/AKorezin/gists{/gist_id}", "starred_url": "https://api.github.com/users/AKorezin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AKorezin/subscriptions", "organizations_url": "https://api.github.com/users/AKorezin/orgs", "repos_url": "https://api.github.com/users/AKorezin/repos", "events_url": "https://api.github.com/users/AKorezin/events{/privacy}", "received_events_url": "https://api.github.com/users/AKorezin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-05-03T16:59:50Z", "updated_at": "2019-10-19T20:27:07Z", "closed_at": "2019-10-19T20:27:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\nI've tried to create a schema to match this:\r\n```yaml\r\n- name: Server 1\r\n  ip: 10.0.0.1\r\n- name: Server 2\r\n  ip:\r\n    - 10.0.0.2\r\n    - 10.0.0.3\r\n```\r\n\r\nBut I don't really understand how to do that, because `matching` is only available is `seq` block.\r\nIs my problem related to the issue #45?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/95", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/95/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/95/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/95", "id": 220043428, "node_id": "MDU6SXNzdWUyMjAwNDM0Mjg=", "number": 95, "title": "Add verbose argument", "user": {"login": "MasterEric", "id": 4635334, "node_id": "MDQ6VXNlcjQ2MzUzMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4635334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MasterEric", "html_url": "https://github.com/MasterEric", "followers_url": "https://api.github.com/users/MasterEric/followers", "following_url": "https://api.github.com/users/MasterEric/following{/other_user}", "gists_url": "https://api.github.com/users/MasterEric/gists{/gist_id}", "starred_url": "https://api.github.com/users/MasterEric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MasterEric/subscriptions", "organizations_url": "https://api.github.com/users/MasterEric/orgs", "repos_url": "https://api.github.com/users/MasterEric/repos", "events_url": "https://api.github.com/users/MasterEric/events{/privacy}", "received_events_url": "https://api.github.com/users/MasterEric/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-06T21:47:51Z", "updated_at": "2018-02-06T19:49:37Z", "closed_at": "2018-02-06T19:49:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "PyKwalify includes several print calls to provide information to the user about the performance or results of validation. However, for many realistic applications, once the library is fully implemented, these print calls can quickly become annoying rather than helpful. I do not want PyKwalify to print `log.info(u\"validation.valid\")`, when I am handling the result of validation myself.\r\n\r\nAdd an argument to the constructor for Core, `verbose`, which, when provided a value of `False`, disables any of the library's print calls.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/94", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/94/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/94/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/94", "id": 219729248, "node_id": "MDU6SXNzdWUyMTk3MjkyNDg=", "number": 94, "title": "Core should take file-like objects instead of file names", "user": {"login": "MasterEric", "id": 4635334, "node_id": "MDQ6VXNlcjQ2MzUzMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4635334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MasterEric", "html_url": "https://github.com/MasterEric", "followers_url": "https://api.github.com/users/MasterEric/followers", "following_url": "https://api.github.com/users/MasterEric/following{/other_user}", "gists_url": "https://api.github.com/users/MasterEric/gists{/gist_id}", "starred_url": "https://api.github.com/users/MasterEric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MasterEric/subscriptions", "organizations_url": "https://api.github.com/users/MasterEric/orgs", "repos_url": "https://api.github.com/users/MasterEric/repos", "events_url": "https://api.github.com/users/MasterEric/events{/privacy}", "received_events_url": "https://api.github.com/users/MasterEric/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-04-05T22:04:43Z", "updated_at": "2019-10-19T21:21:44Z", "closed_at": "2019-10-19T21:16:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In my experimentation with this library, I have found it frustrating that, if I have a [file-like object](http://stackoverflow.com/questions/1661262/check-if-object-is-file-like-in-python), for example a [StringIO](https://docs.python.org/2/library/stringio.html), I am forced to write the data to a file before validating it.\r\n\r\nThis does not conform with Python's standard practices, and the fact that this lengthy process is only for validating the file type makes things even more difficult.\r\n\r\nMy proposal is:\r\n\r\n- The `source_file` argument now takes a file rather than a string filename.\r\n- Add a new optional argument `validation_type`, with possible values `yaml` or `json`\r\n- If `validation_type` is not `None`, use YAML or JSON resp6ctively to parse the file.\r\n- Else, try setting `self.source` to `yaml.load(source_file)`, then to `json.load(source_file)`; if neither work, you can just fall back to the source_data argument as you do now. If people have issues with this automatic parsing attempt, they can use the new argument to force it.\r\n\r\nAs a bonus, this fix also resolves #89.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/93", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/93/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/93/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/93", "id": 216049706, "node_id": "MDU6SXNzdWUyMTYwNDk3MDY=", "number": 93, "title": "Unable to have multiple mappings at the root level of the yaml path", "user": {"login": "slash5k1", "id": 20377863, "node_id": "MDQ6VXNlcjIwMzc3ODYz", "avatar_url": "https://avatars2.githubusercontent.com/u/20377863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slash5k1", "html_url": "https://github.com/slash5k1", "followers_url": "https://api.github.com/users/slash5k1/followers", "following_url": "https://api.github.com/users/slash5k1/following{/other_user}", "gists_url": "https://api.github.com/users/slash5k1/gists{/gist_id}", "starred_url": "https://api.github.com/users/slash5k1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slash5k1/subscriptions", "organizations_url": "https://api.github.com/users/slash5k1/orgs", "repos_url": "https://api.github.com/users/slash5k1/repos", "events_url": "https://api.github.com/users/slash5k1/events{/privacy}", "received_events_url": "https://api.github.com/users/slash5k1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-03-22T12:46:45Z", "updated_at": "2017-03-23T22:16:35Z", "closed_at": "2017-03-23T21:01:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "very cool project however I have found that I can't validate a schema that has multiple mappings at the root level of the yaml path.\r\n\r\nexample yaml:\r\n\r\n```\r\nbilling_engine:\r\n  database_location:\r\n    \"ucsd_data_dump.sqlite\"\r\n\r\n  pricing_tiers:\r\n    tier_1_vdc:\r\n      \"noha\"\r\n    tier_2_vdc:\r\n      \"noha_with_backup\"\r\n    tier_3_vdc:\r\n      \"ha\"\r\n    tier_4_vdc:\r\n      \"ha_with_backup\"\r\n\r\n  pricing:\r\n    tier_1_vdc:\r\n      storage_price_per_gb:\r\n        0.10\r\n\r\ncsv_reports:\r\n  user_reports:\r\n    - \"VMNAME\"\r\n```\r\n\r\nexample schema\r\n\r\n```\r\n# Schema   \r\ntype: map\r\nmapping:\r\n  billing_engine:\r\n    type: map\r\n    mapping:\r\n      database_location:\r\n        type: str\r\n\r\n      pricing_tiers:\r\n        type: map\r\n        mapping:\r\n          tier_1_vdc:\r\n            type: str\r\n          tier_2_vdc:\r\n            type: str\r\n          tier_3_vdc:\r\n            type: str\r\n          tier_4_vdc:\r\n            type: str\r\n\r\n      pricing:\r\n        type: map\r\n        mapping:\r\n          tier_1_vdc:\r\n            type: map\r\n            mapping:\r\n              storage_price_per_gb:\r\n                type: float\r\n\r\ntype: map\r\nmapping:\r\n  csv_reports:\r\n    type: map\r\n    mapping:\r\n      user_reports:\r\n        type: seq\r\n        sequence:\r\n          - type: str\r\n```\r\n\r\nError:\r\n```\r\npykwalify -d example.yaml -s schema.yaml \r\n ERROR - validation.invalid\r\n ERROR -  --- All found errors ---\r\n ERROR - [u\"Key 'billing_engine' was not defined. Path: ''\"]\r\nTraceback (most recent call last):\r\n  File \"/usr/local/bin/pykwalify\", line 11, in <module>\r\n    sys.exit(cli_entrypoint())\r\n  File \"/Library/Python/2.7/site-packages/pykwalify/cli.py\", line 95, in cli_entrypoint\r\n    run(parse_cli())\r\n  File \"/Library/Python/2.7/site-packages/pykwalify/cli.py\", line 82, in run\r\n    c.validate()\r\n  File \"/Library/Python/2.7/site-packages/pykwalify/core.py\", line 176, in validate\r\n    error_msg=u'.\\n - '.join(self.validation_errors)))\r\npykwalify.errors.SchemaError: <SchemaError: error code 2: Schema validation failed:\r\n - Key 'billing_engine' was not defined. Path: ''.: Path: '/'>\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/92", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/92/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/92/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/92", "id": 213547772, "node_id": "MDU6SXNzdWUyMTM1NDc3NzI=", "number": 92, "title": "How to match specific floating values?", "user": {"login": "acerv", "id": 17720261, "node_id": "MDQ6VXNlcjE3NzIwMjYx", "avatar_url": "https://avatars3.githubusercontent.com/u/17720261?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acerv", "html_url": "https://github.com/acerv", "followers_url": "https://api.github.com/users/acerv/followers", "following_url": "https://api.github.com/users/acerv/following{/other_user}", "gists_url": "https://api.github.com/users/acerv/gists{/gist_id}", "starred_url": "https://api.github.com/users/acerv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acerv/subscriptions", "organizations_url": "https://api.github.com/users/acerv/orgs", "repos_url": "https://api.github.com/users/acerv/repos", "events_url": "https://api.github.com/users/acerv/events{/privacy}", "received_events_url": "https://api.github.com/users/acerv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-03-11T18:12:36Z", "updated_at": "2018-10-04T18:37:15Z", "closed_at": "2018-10-04T18:37:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I need to match specific numeric values. Is it possible to use `pattern:` with numeric values? Something like:\r\n\r\n    stop_bits:\r\n      required: true\r\n      type: number\r\n      pattern: [1|1.5|2]", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/91", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/91/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/91/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/91", "id": 210741646, "node_id": "MDU6SXNzdWUyMTA3NDE2NDY=", "number": 91, "title": "Clarify schema errors", "user": {"login": "pettermahlen", "id": 353687, "node_id": "MDQ6VXNlcjM1MzY4Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/353687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pettermahlen", "html_url": "https://github.com/pettermahlen", "followers_url": "https://api.github.com/users/pettermahlen/followers", "following_url": "https://api.github.com/users/pettermahlen/following{/other_user}", "gists_url": "https://api.github.com/users/pettermahlen/gists{/gist_id}", "starred_url": "https://api.github.com/users/pettermahlen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pettermahlen/subscriptions", "organizations_url": "https://api.github.com/users/pettermahlen/orgs", "repos_url": "https://api.github.com/users/pettermahlen/repos", "events_url": "https://api.github.com/users/pettermahlen/events{/privacy}", "received_events_url": "https://api.github.com/users/pettermahlen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-28T10:10:06Z", "updated_at": "2018-10-04T16:46:53Z", "closed_at": "2018-10-04T16:46:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to use pykwalify, and I keep getting confused by the error messages. One example is this:\r\n\r\n```\r\npykwalify.errors.RuleError: <RuleError: error code 4: Sequence keyword is not a list: Path: '/mapping/tags'>\r\n```\r\n\r\nI had no idea where to look for the problem. Eventually, I realised the problem was that the schema definition looked like this:\r\n\r\n```\r\n  tags: \r\n    type: seq\r\n    sequence: \r\n      type: str\r\n      allowempty: true\r\n```\r\n\r\nTo understand that, I had to modify the rule.py file and print out the 'v' value. It would have been easier if the error message specified that the problem was in the schema. Maybe a message like `Invalid schema definition: sequence keyword is not a list`, or something to that effect.\r\n\r\nSimilarly, I ran into a problem in the rule.py `init` method, on this line:\r\n\r\n```\r\n\tinclude = schema.get(\"include\")\r\n```\r\n\r\nWhich threw an exception that was very opaque. It would have been great to catch that and explain that it is due to an invalid schema.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/90", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/90/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/90/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/90", "id": 208712927, "node_id": "MDU6SXNzdWUyMDg3MTI5Mjc=", "number": 90, "title": "Using pipeline cause Exception: 'tuple' object has no attribute 'position'", "user": {"login": "FlyingPengu", "id": 11519001, "node_id": "MDQ6VXNlcjExNTE5MDAx", "avatar_url": "https://avatars3.githubusercontent.com/u/11519001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FlyingPengu", "html_url": "https://github.com/FlyingPengu", "followers_url": "https://api.github.com/users/FlyingPengu/followers", "following_url": "https://api.github.com/users/FlyingPengu/following{/other_user}", "gists_url": "https://api.github.com/users/FlyingPengu/gists{/gist_id}", "starred_url": "https://api.github.com/users/FlyingPengu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FlyingPengu/subscriptions", "organizations_url": "https://api.github.com/users/FlyingPengu/orgs", "repos_url": "https://api.github.com/users/FlyingPengu/repos", "events_url": "https://api.github.com/users/FlyingPengu/events{/privacy}", "received_events_url": "https://api.github.com/users/FlyingPengu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-19T12:00:14Z", "updated_at": "2017-02-19T12:06:03Z", "closed_at": "2017-02-19T12:04:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI'm trying the pipelining and using following code:\r\n```\r\nrc = StrictRedisCluster(startup_nodes=startup_nodes, decode_responses=True, max_connections=36)\r\np1 = rc.pipeline()\r\np1.command_stack.append(([\"DEL\", \"abc:\" + str(id)], {}))\r\np1.command_stack.append(([\"SREM\", \"abc\", str(id)], {}))\r\np1.execute()\r\n```\r\nand always getting an exception:\r\n`Exception: 'tuple' object has no attribute 'position'`\r\nWhat I'm doing wrong? It is nearly like the example from the doc. All none-piplining executions are running fine.\r\n\r\nThanks\r\nThomas", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/88", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/88/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/88/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/88", "id": 204569743, "node_id": "MDU6SXNzdWUyMDQ1Njk3NDM=", "number": 88, "title": "Include of partial schemas two times in the same level is not working after fix of issue #66", "user": {"login": "alissonmarcelo", "id": 12041776, "node_id": "MDQ6VXNlcjEyMDQxNzc2", "avatar_url": "https://avatars2.githubusercontent.com/u/12041776?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alissonmarcelo", "html_url": "https://github.com/alissonmarcelo", "followers_url": "https://api.github.com/users/alissonmarcelo/followers", "following_url": "https://api.github.com/users/alissonmarcelo/following{/other_user}", "gists_url": "https://api.github.com/users/alissonmarcelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/alissonmarcelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alissonmarcelo/subscriptions", "organizations_url": "https://api.github.com/users/alissonmarcelo/orgs", "repos_url": "https://api.github.com/users/alissonmarcelo/repos", "events_url": "https://api.github.com/users/alissonmarcelo/events{/privacy}", "received_events_url": "https://api.github.com/users/alissonmarcelo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-02-01T12:21:57Z", "updated_at": "2018-03-06T14:37:04Z", "closed_at": "2018-03-06T14:37:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "A schema containing inclusion of partial schema two times at same level stop working when upgrade from 1.5.2 version to 1.6.0. This problem seems to be related to fix of issue #66 and also occurs when use partial schema inside of maps.\r\n\r\n### Data\r\n\r\n```yaml\r\na: 'nonono'\r\nb: 'nonono'\r\n```\r\n\r\n### Full Schema\r\n\r\n```yaml\r\ntype: map\r\nmapping:\r\n  a:\r\n    include: schema_a\r\n  b:\r\n    include: schema_a\r\n\r\nschema;schema_a:\r\n  type: any\r\n  required: True\r\n```\r\n### Expected Output (1.5.2 version)\r\n\r\n```\r\n$ pykwalify -s schema.yml -d data.yml\r\n INFO - validation.valid\r\n```\r\n\r\n### Received Output (1.6.0 version)\r\n\r\n```\r\n$ pykwalify -s schema.yml -d data.yml\r\n ERROR - validation.invalid\r\n ERROR -  --- All found errors ---\r\n ERROR - [u\"Key 'b' was not defined. Path: ''\"]\r\nTraceback (most recent call last):\r\n  File \"/usr/local/bin/pykwalify\", line 11, in <module>\r\n    sys.exit(cli_entrypoint())\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/cli.py\", line 95, in cli_entrypoint\r\n    run(parse_cli())\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/cli.py\", line 82, in run\r\n    c.validate()\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/core.py\", line 176, in validate\r\n    error_msg=u'.\\n - '.join(self.validation_errors)))\r\npykwalify.errors.SchemaError: <SchemaError: error code 2: Schema validation failed:\r\n - Key 'b' was not defined. Path: ''.: Path: '/'>\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/87", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/87/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/87/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/87", "id": 200101993, "node_id": "MDU6SXNzdWUyMDAxMDE5OTM=", "number": 87, "title": "Did not find method in loaded extension", "user": {"login": "gijzelaerr", "id": 326308, "node_id": "MDQ6VXNlcjMyNjMwOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/326308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gijzelaerr", "html_url": "https://github.com/gijzelaerr", "followers_url": "https://api.github.com/users/gijzelaerr/followers", "following_url": "https://api.github.com/users/gijzelaerr/following{/other_user}", "gists_url": "https://api.github.com/users/gijzelaerr/gists{/gist_id}", "starred_url": "https://api.github.com/users/gijzelaerr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gijzelaerr/subscriptions", "organizations_url": "https://api.github.com/users/gijzelaerr/orgs", "repos_url": "https://api.github.com/users/gijzelaerr/repos", "events_url": "https://api.github.com/users/gijzelaerr/events{/privacy}", "received_events_url": "https://api.github.com/users/gijzelaerr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-01-11T14:06:34Z", "updated_at": "2017-01-12T07:23:20Z", "closed_at": "2017-01-12T07:23:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi! \r\n\r\nIf i manually specify a extension file to the Core() class it somehow doesn't load correctly.\r\n\r\nI've setup a github project to illustrate the problem: https://github.com/gijzelaerr/pykwalifybug\r\n\r\nWhen i run `validator.py` i get the error:\r\n`pykwalify.errors.CoreError: <CoreError: error code 3: Did not find method 'ext_str' in any loaded extension file: Path: '/'>`\r\n\r\nwhile the exention *Is* loaded and `ext_str` is in the python module.\r\n\r\nWhat am I doing wrong? Using pykwalify 1.5.2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/84", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/84/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/84/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/84", "id": 196936067, "node_id": "MDU6SXNzdWUxOTY5MzYwNjc=", "number": 84, "title": "pykwalify breaks output in jupyter notebook (python 2.7)", "user": {"login": "JoostJM", "id": 18026947, "node_id": "MDQ6VXNlcjE4MDI2OTQ3", "avatar_url": "https://avatars2.githubusercontent.com/u/18026947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoostJM", "html_url": "https://github.com/JoostJM", "followers_url": "https://api.github.com/users/JoostJM/followers", "following_url": "https://api.github.com/users/JoostJM/following{/other_user}", "gists_url": "https://api.github.com/users/JoostJM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoostJM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoostJM/subscriptions", "organizations_url": "https://api.github.com/users/JoostJM/orgs", "repos_url": "https://api.github.com/users/JoostJM/repos", "events_url": "https://api.github.com/users/JoostJM/events{/privacy}", "received_events_url": "https://api.github.com/users/JoostJM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-12-21T13:43:55Z", "updated_at": "2016-12-23T16:49:59Z", "closed_at": "2016-12-23T16:49:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "During `__init__`, pykwalify reloads sys module, which resets the stdout to the console.\r\nThis causes all output to be printed to the console instead of the jupyter notebook.\r\nIt is caused by the change in [this commit](https://github.com/Grokzen/pykwalify/commit/0cc7e21982db1a981e4dc5f79c24ab69b387a134). \r\n\r\nMoreover, in this [discussion](https://github.com/ipython/ipython/issues/8354), using reload(sys) and sys.setdefaultencoding is not recommended.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/83", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/83/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/83/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/83", "id": 196116163, "node_id": "MDU6SXNzdWUxOTYxMTYxNjM=", "number": 83, "title": "Check key against regex", "user": {"login": "itdependsnetworks", "id": 9260483, "node_id": "MDQ6VXNlcjkyNjA0ODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/9260483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itdependsnetworks", "html_url": "https://github.com/itdependsnetworks", "followers_url": "https://api.github.com/users/itdependsnetworks/followers", "following_url": "https://api.github.com/users/itdependsnetworks/following{/other_user}", "gists_url": "https://api.github.com/users/itdependsnetworks/gists{/gist_id}", "starred_url": "https://api.github.com/users/itdependsnetworks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itdependsnetworks/subscriptions", "organizations_url": "https://api.github.com/users/itdependsnetworks/orgs", "repos_url": "https://api.github.com/users/itdependsnetworks/repos", "events_url": "https://api.github.com/users/itdependsnetworks/events{/privacy}", "received_events_url": "https://api.github.com/users/itdependsnetworks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-12-16T17:44:04Z", "updated_at": "2016-12-21T04:49:57Z", "closed_at": "2016-12-20T21:58:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to have the dict key be dynamic but checked against a regex, and the key/val under the map be checked as well?\r\n\r\nI would envision something like: \r\n\r\nSchema\r\n```\r\ntype: dynamic_map\r\nmapping:\r\n  regex:\r\n    type: str\r\n    required: true\r\n    regex_value: \"Ethernet\\d/\\\\d+\"\r\n    sequence:\r\n      - type:  map\r\n        mapping:\r\n          \"vlan\":\r\n            type:  int\r\n            required:  true\r\n          \"mode\":\r\n            type:  enum\r\n            required:  ['trunk','access']\r\n```\r\n\r\nData\r\n```\r\ninterfaces:\r\n  Ethernet1/1\r\n    vlan: 10\r\n    mode: access\r\n  Ethernet1/12\r\n    vlan 20\r\n    mode: trunk\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/82", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/82/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/82/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/82", "id": 193701950, "node_id": "MDU6SXNzdWUxOTM3MDE5NTA=", "number": 82, "title": "Recommedn to fix instead of exception", "user": {"login": "smalleni", "id": 11049799, "node_id": "MDQ6VXNlcjExMDQ5Nzk5", "avatar_url": "https://avatars3.githubusercontent.com/u/11049799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smalleni", "html_url": "https://github.com/smalleni", "followers_url": "https://api.github.com/users/smalleni/followers", "following_url": "https://api.github.com/users/smalleni/following{/other_user}", "gists_url": "https://api.github.com/users/smalleni/gists{/gist_id}", "starred_url": "https://api.github.com/users/smalleni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smalleni/subscriptions", "organizations_url": "https://api.github.com/users/smalleni/orgs", "repos_url": "https://api.github.com/users/smalleni/repos", "events_url": "https://api.github.com/users/smalleni/events{/privacy}", "received_events_url": "https://api.github.com/users/smalleni/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-06T07:30:36Z", "updated_at": "2016-12-21T01:49:42Z", "closed_at": "2016-12-21T01:49:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nIn my implementation I want to warn the user about a particular empty field instead of throwing an exception. Currently, is this supported?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/81", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/81/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/81/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/81", "id": 192423048, "node_id": "MDU6SXNzdWUxOTI0MjMwNDg=", "number": 81, "title": "Hexadecimal validation", "user": {"login": "devnoname120", "id": 2824100, "node_id": "MDQ6VXNlcjI4MjQxMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2824100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devnoname120", "html_url": "https://github.com/devnoname120", "followers_url": "https://api.github.com/users/devnoname120/followers", "following_url": "https://api.github.com/users/devnoname120/following{/other_user}", "gists_url": "https://api.github.com/users/devnoname120/gists{/gist_id}", "starred_url": "https://api.github.com/users/devnoname120/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devnoname120/subscriptions", "organizations_url": "https://api.github.com/users/devnoname120/orgs", "repos_url": "https://api.github.com/users/devnoname120/repos", "events_url": "https://api.github.com/users/devnoname120/events{/privacy}", "received_events_url": "https://api.github.com/users/devnoname120/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-11-29T22:40:36Z", "updated_at": "2016-12-22T00:23:14Z", "closed_at": "2016-12-21T02:04:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please add the validation of hexadecimal values.\r\n\r\nscheme.yml:\r\n```\r\ntype: text\r\npattern: ^0x[0-9A-F]{1,8}$\r\n```\r\n\r\nfile.yml:\r\n```\r\n0x12345678\r\n```\r\n\r\nVersion `1.5.1`:\r\n```\r\npykwalify -d file.yml -s scheme.yml\r\n ERROR - validation.invalid\r\n ERROR -  --- All found errors ---\r\n ERROR - [\"Value '305419896' does not match pattern '^0x[0-9A-F]{1,8}$'. Path: ''\"]\r\nTraceback (most recent call last):\r\n  File \"/usr/bin/pykwalify\", line 11, in <module>\r\n    load_entry_point('pykwalify==1.5.1', 'console_scripts', 'pykwalify')()\r\n  File \"/usr/lib/python3.5/site-packages/pykwalify/cli.py\", line 84, in cli_entrypoint\r\n    run(parse_cli())\r\n  File \"/usr/lib/python3.5/site-packages/pykwalify/cli.py\", line 71, in run\r\n    c.validate()\r\n  File \"/usr/lib/python3.5/site-packages/pykwalify/core.py\", line 159, in validate\r\n    error_msg=u'.\\n - '.join(self.validation_errors)))\r\npykwalify.errors.SchemaError: <SchemaError: error code 2: Schema validation failed:\r\n - Value '305419896' does not match pattern '^0x[0-9A-F]{1,8}$'. Path: ''.: Path: '/'>\r\n```\r\n\r\n\r\nVersion `latest`:\r\n```\r\npykwalify -d file.yml -s scheme.yml\r\nTraceback (most recent call last):\r\n  File \"/usr/bin/pykwalify\", line 11, in <module>\r\n    load_entry_point('pykwalify==1.5.2', 'console_scripts', 'pykwalify')()\r\n  File \"/usr/lib/python3.5/site-packages/pykwalify/cli.py\", line 84, in cli_entrypoint\r\n    run(parse_cli())\r\n  File \"/usr/lib/python3.5/site-packages/pykwalify/cli.py\", line 71, in run\r\n    c.validate()\r\n  File \"/usr/lib/python3.5/site-packages/pykwalify/core.py\", line 147, in validate\r\n    self._start_validate(self.source)\r\n  File \"/usr/lib/python3.5/site-packages/pykwalify/core.py\", line 192, in _start_validate\r\n    self._validate(value, root_rule, path, done)\r\n  File \"/usr/lib/python3.5/site-packages/pykwalify/core.py\", line 213, in _validate\r\n    self._validate_scalar(value, rule, path, done=None)\r\n  File \"/usr/lib/python3.5/site-packages/pykwalify/core.py\", line 560, in _validate_scalar\r\n    res = re.match(rule.pattern, value, re.UNICODE)\r\n  File \"/usr/lib/python3.5/re.py\", line 163, in match\r\n    return _compile(pattern, flags).match(string)\r\nTypeError: expected string or bytes-like object\r\n```\r\n\r\n\r\nExpected: No error since the regex matches the hexadecimal.\r\n\r\nRelated: http://yaml.org/type/int.html", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/79", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/79/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/79/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/79", "id": 190321742, "node_id": "MDU6SXNzdWUxOTAzMjE3NDI=", "number": 79, "title": "I have a TypeError with the latest version", "user": {"login": "sbrunner", "id": 353872, "node_id": "MDQ6VXNlcjM1Mzg3Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/353872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sbrunner", "html_url": "https://github.com/sbrunner", "followers_url": "https://api.github.com/users/sbrunner/followers", "following_url": "https://api.github.com/users/sbrunner/following{/other_user}", "gists_url": "https://api.github.com/users/sbrunner/gists{/gist_id}", "starred_url": "https://api.github.com/users/sbrunner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sbrunner/subscriptions", "organizations_url": "https://api.github.com/users/sbrunner/orgs", "repos_url": "https://api.github.com/users/sbrunner/repos", "events_url": "https://api.github.com/users/sbrunner/events{/privacy}", "received_events_url": "https://api.github.com/users/sbrunner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-11-18T13:41:12Z", "updated_at": "2016-12-20T21:47:29Z", "closed_at": "2016-12-20T21:47:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I run: `pykwalify -d data.yaml -s schema.yaml`\r\nI get:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/bin/pykwalify\", line 11, in <module>\r\n    sys.exit(cli_entrypoint())\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/cli.py\", line 84, in cli_entrypoint\r\n    run(parse_cli())\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/cli.py\", line 71, in run\r\n    c.validate()\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/core.py\", line 147, in validate\r\n    self._start_validate(self.source)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/core.py\", line 192, in _start_validate\r\n    self._validate(value, root_rule, path, done)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/core.py\", line 211, in _validate\r\n    self._validate_mapping(value, rule, path, done=None)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/core.py\", line 484, in _validate_mapping\r\n    self._validate(v, r, u\"{}/{}\".format(path, k), done)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/core.py\", line 213, in _validate\r\n    self._validate_scalar(value, rule, path, done=None)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/core.py\", line 560, in _validate_scalar\r\n    res = re.match(rule.pattern, value, re.UNICODE)\r\n  File \"/usr/lib/python2.7/re.py\", line 141, in match\r\n    return _compile(pattern, flags).match(string)\r\nTypeError: expected string or buffer\r\n\r\n```\r\n\r\n`data.yaml`:\r\n```\r\nd: 1\r\n```\r\n\r\n`schema.yaml`:\r\n```\r\ntype: map\r\nmapping:\r\n    d:\r\n        type: str\r\n        pattern: '[0-9]+'\r\n        required: true\r\n```\r\n\r\nWith the version `1.5.1` I get what I expected:\r\n```\r\n ERROR - validation.invalid\r\n ERROR -  --- All found errors ---\r\n ERROR - [u\"Value '1' is not of type 'str'. Path: '/d'\"]\r\nTraceback (most recent call last):\r\n  File \"/home/sbrunner/.py/bin/pykwalify\", line 11, in <module>\r\n    sys.exit(cli_entrypoint())\r\n  File \"/home/sbrunner/.py/local/lib/python2.7/site-packages/pykwalify/cli.py\", line 84, in cli_entrypoint\r\n    run(parse_cli())\r\n  File \"/home/sbrunner/.py/local/lib/python2.7/site-packages/pykwalify/cli.py\", line 71, in run\r\n    c.validate()\r\n  File \"/home/sbrunner/.py/local/lib/python2.7/site-packages/pykwalify/core.py\", line 159, in validate\r\n    error_msg=u'.\\n - '.join(self.validation_errors)))\r\npykwalify.errors.SchemaError: <SchemaError: error code 2: Schema validation failed:\r\n - Value '1' is not of type 'str'. Path: '/d'.: Path: '/'>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/78", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/78/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/78/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/78", "id": 190318494, "node_id": "MDU6SXNzdWUxOTAzMTg0OTQ=", "number": 78, "title": "A sequence of maps in a schema does not check the type in the elements of the sequence", "user": {"login": "roman-89", "id": 16191584, "node_id": "MDQ6VXNlcjE2MTkxNTg0", "avatar_url": "https://avatars1.githubusercontent.com/u/16191584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roman-89", "html_url": "https://github.com/roman-89", "followers_url": "https://api.github.com/users/roman-89/followers", "following_url": "https://api.github.com/users/roman-89/following{/other_user}", "gists_url": "https://api.github.com/users/roman-89/gists{/gist_id}", "starred_url": "https://api.github.com/users/roman-89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roman-89/subscriptions", "organizations_url": "https://api.github.com/users/roman-89/orgs", "repos_url": "https://api.github.com/users/roman-89/repos", "events_url": "https://api.github.com/users/roman-89/events{/privacy}", "received_events_url": "https://api.github.com/users/roman-89/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-18T13:24:54Z", "updated_at": "2016-12-21T02:24:43Z", "closed_at": "2016-12-21T02:24:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n#Schema\r\ntype: seq\r\nrequired: True\r\nmatching: all\r\nseq:\r\n    - type: map\r\n      required: True\r\n      map:\r\n          foo:\r\n              type: str\r\n\r\n#yaml\r\n- foo: whatever\r\n- foo: whatever\r\n- \"sgdf\"\r\n- 2\r\n- \r\n```\r\n\r\n\r\n INFO - validation.valid\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/77", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/77/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/77/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/77", "id": 184797162, "node_id": "MDU6SXNzdWUxODQ3OTcxNjI=", "number": 77, "title": "Value 'None' is not of type 'str'", "user": {"login": "nowox", "id": 1132849, "node_id": "MDQ6VXNlcjExMzI4NDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1132849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nowox", "html_url": "https://github.com/nowox", "followers_url": "https://api.github.com/users/nowox/followers", "following_url": "https://api.github.com/users/nowox/following{/other_user}", "gists_url": "https://api.github.com/users/nowox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nowox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nowox/subscriptions", "organizations_url": "https://api.github.com/users/nowox/orgs", "repos_url": "https://api.github.com/users/nowox/repos", "events_url": "https://api.github.com/users/nowox/events{/privacy}", "received_events_url": "https://api.github.com/users/nowox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-10-24T09:57:40Z", "updated_at": "2016-11-05T15:27:21Z", "closed_at": "2016-11-05T15:27:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With this YAML: \n\n```\n\n---\nfoo: # This field is empty and despite YAML parser sees it as a None value, I am expecting an empty string\n```\n\nAnd this schema: \n\n```\ntype: map\nmapping: \n  foo:\n    type: str\n```\n\nI get the error \"- Value 'None' is not of type 'str'\". However, a string can be empty.\n\nA key `allownone` should be supported for this particular case. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/75", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/75/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/75/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/75", "id": 183706588, "node_id": "MDU6SXNzdWUxODM3MDY1ODg=", "number": 75, "title": "Documentation not available on readthedocs", "user": {"login": "nowox", "id": 1132849, "node_id": "MDQ6VXNlcjExMzI4NDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1132849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nowox", "html_url": "https://github.com/nowox", "followers_url": "https://api.github.com/users/nowox/followers", "following_url": "https://api.github.com/users/nowox/following{/other_user}", "gists_url": "https://api.github.com/users/nowox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nowox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nowox/subscriptions", "organizations_url": "https://api.github.com/users/nowox/orgs", "repos_url": "https://api.github.com/users/nowox/repos", "events_url": "https://api.github.com/users/nowox/events{/privacy}", "received_events_url": "https://api.github.com/users/nowox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-18T14:41:12Z", "updated_at": "2016-11-05T15:20:42Z", "closed_at": "2016-11-05T15:20:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The hyperlink on https://github.com/grokzen/pykwalify: \n\nAll documentation can be found at http://pykwalify.readthedocs.org/en/latest/\nThis readme contains a reduced version of the full documentation.\n\nDoes not work. It shows me an error message: \n\n```\nThis is an autogenerated index file.\n\nPlease create a /home/docs/checkouts/readthedocs.org/user_builds/pykwalify/checkouts/latest/docs/index.rst or /home/docs/checkouts/readthedocs.org/user_builds/pykwalify/checkouts/latest/docs/README.rst file with your own content.\n```\n\nA correction to this issue is pending here #74\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/72", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/72/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/72/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/72", "id": 181639893, "node_id": "MDU6SXNzdWUxODE2Mzk4OTM=", "number": 72, "title": "Can't mix normal keys and regex keys?", "user": {"login": "jmacarthur", "id": 691227, "node_id": "MDQ6VXNlcjY5MTIyNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/691227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmacarthur", "html_url": "https://github.com/jmacarthur", "followers_url": "https://api.github.com/users/jmacarthur/followers", "following_url": "https://api.github.com/users/jmacarthur/following{/other_user}", "gists_url": "https://api.github.com/users/jmacarthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmacarthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmacarthur/subscriptions", "organizations_url": "https://api.github.com/users/jmacarthur/orgs", "repos_url": "https://api.github.com/users/jmacarthur/repos", "events_url": "https://api.github.com/users/jmacarthur/events{/privacy}", "received_events_url": "https://api.github.com/users/jmacarthur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-07T10:55:38Z", "updated_at": "2016-11-05T15:19:07Z", "closed_at": "2016-11-05T15:19:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'd like to validate this data, which is part of the OpenControl project:\n\n```\nname:\n  FRIST-800-53\nAU-1:\n  family: AU\n  name: Audit and Accountability Policy and Procedures\nAU-2:\n  family: AU\n  name: Audit Events\nAU-2 (3):\n  family: AU\n  name: Audit Events | Reviews and Updates\n```\n\nIf I try and use this schema:\n\n```\ntype: map\nmapping:\n  name:\n    type: str\n\n  regex;/[A-Z]-/:\n    type: map\n    mapping:\n      name:\n        type: str\n      family:\n        type: str\n```\n\nThen it won't match, giving the error `- Key 'name' does not match any regex '[A-Z]-'. Path: ''.: Path: '/'>`. You can work around this by matching with `regex;/^name$/:`, but it's not clear in which order the regexes would be checked if several of them matched.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/71", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/71/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/71/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/71", "id": 179587658, "node_id": "MDU6SXNzdWUxNzk1ODc2NTg=", "number": 71, "title": "Partial schema issue when used with mapping", "user": {"login": "jcfr", "id": 219043, "node_id": "MDQ6VXNlcjIxOTA0Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/219043?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcfr", "html_url": "https://github.com/jcfr", "followers_url": "https://api.github.com/users/jcfr/followers", "following_url": "https://api.github.com/users/jcfr/following{/other_user}", "gists_url": "https://api.github.com/users/jcfr/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcfr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcfr/subscriptions", "organizations_url": "https://api.github.com/users/jcfr/orgs", "repos_url": "https://api.github.com/users/jcfr/repos", "events_url": "https://api.github.com/users/jcfr/events{/privacy}", "received_events_url": "https://api.github.com/users/jcfr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-27T19:19:25Z", "updated_at": "2016-12-21T02:28:01Z", "closed_at": "2016-12-21T02:28:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for maintaining this project\n\nWhile trying to use partial schema with map, I notice a small problem with use of partial schema with mapping.\n\nThe snippet posted below is failing whereas I think it should not.\n- version used if 8c3327e from  Sep 3 2016\n- To reproduce:\n\n``` python\nschema_ok = \"\"\"\ntype: map\nmapping:\n  foo:\n    type: seq\n    sequence:\n      - type: str\n\"\"\"\n\nschema_fail = \"\"\"\nschema;list_str:\n  type: seq\n  sequence:\n  - type: str\n\ntype: map\nmapping:\n  foo:\n    - include: list_str\n\"\"\"\n\ndata = \"\"\"\nfoo:\n  - bar\n\"\"\"\n\nimport os\n\nfor file, content in [\n    ('schema_ok.yml',schema_ok),\n    ('schema_fail.yml',schema_fail),\n    ('data.yml',data)]:\n    with open(file, 'w') as f:\n        f.write(content)\n    assert os.path.exists(file)\n\nimport pykwalify.core\n\npykwalify.core.Core(\n    source_file=\"data.yml\",\n    schema_files=[\"schema_ok.yml\"]\n).validate(raise_exception=True)\n\npykwalify.core.Core(\n    source_file=\"data.yml\",\n    schema_files=[\"schema_fail.yml\"]\n).validate(raise_exception=True)\n```\n- error reported:\n\n```\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n<ipython-input-2-6d13cd20baba> in <module>()\n     45     source_file=\"data.yml\",\n     46     schema_files=[\"schema_fail.yml\"]\n---> 47 ).validate(raise_exception=True)\n\n/home/jovyan/work/pykwalify/pykwalify/core.py in validate(self, raise_exception)\n    145         log.debug(u\"starting core\")\n    146 \n--> 147         self._start_validate(self.source)\n    148         self.validation_errors = [unicode(error) for error in self.errors]\n    149         self.validation_errors_exceptions = self.errors\n\n/home/jovyan/work/pykwalify/pykwalify/core.py in _start_validate(self, value)\n    185 \n    186         log.debug(u\"Building root rule object\")\n--> 187         root_rule = Rule(schema=self.schema)\n    188         self.root_rule = root_rule\n    189         log.debug(u\"Done building root rule\")\n\n/home/jovyan/work/pykwalify/pykwalify/rule.py in __init__(self, schema, parent)\n     60 \n     61         if isinstance(schema, dict):\n---> 62             self.init(schema, \"\")\n     63 \n     64     @property\n\n/home/jovyan/work/pykwalify/pykwalify/rule.py in init(self, schema, path)\n    344         for k, v in schema.items():\n    345             if k in func_mapping:\n--> 346                 func_mapping[k](v, rule, path)\n    347             elif k.startswith(\"schema;\"):\n    348                 log.debug(u\"Found schema tag...\")\n\n/home/jovyan/work/pykwalify/pykwalify/rule.py in init_mapping_value(self, v, rule, path)\n    831             else:\n    832                 rule = Rule(None, self)\n--> 833                 rule.init(v, u\"{}/mapping/{}\".format(path, k))\n    834                 self.mapping[k] = rule\n    835 \n\n/home/jovyan/work/pykwalify/pykwalify/rule.py in init(self, schema, path)\n    276         log.debug(u\"Init schema: %s\", schema)\n    277 \n--> 278         include = schema.get(\"include\", None)\n    279 \n    280         # Check if this item is a include, overwrite schema with include schema and continue to parse\n\nAttributeError: 'list' object has no attribute 'get'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/70", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/70/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/70/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/70", "id": 175395198, "node_id": "MDU6SXNzdWUxNzUzOTUxOTg=", "number": 70, "title": "Unique for mapping", "user": {"login": "mrproper", "id": 238349, "node_id": "MDQ6VXNlcjIzODM0OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/238349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrproper", "html_url": "https://github.com/mrproper", "followers_url": "https://api.github.com/users/mrproper/followers", "following_url": "https://api.github.com/users/mrproper/following{/other_user}", "gists_url": "https://api.github.com/users/mrproper/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrproper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrproper/subscriptions", "organizations_url": "https://api.github.com/users/mrproper/orgs", "repos_url": "https://api.github.com/users/mrproper/repos", "events_url": "https://api.github.com/users/mrproper/events{/privacy}", "received_events_url": "https://api.github.com/users/mrproper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443593689, "node_id": "MDU6TGFiZWw0NDM1OTM2ODk=", "url": "https://api.github.com/repos/Grokzen/pykwalify/labels/Accepting%20PR", "name": "Accepting PR", "color": "c2e0c6", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-09-07T02:00:29Z", "updated_at": "2016-12-21T17:14:33Z", "closed_at": "2016-12-21T02:33:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "it seems that kwalify in ruby supports unique for sequence AND mapping, the pykwalify only supports it for sequence.\n\nthis seems to me pretty important. \n\nsee the following example:\n\n```\nfoo:\n  some_feature: prod\n  some_feature: dev\n```\n\nbased on the fact that pyaml will just load the last key this can have some pretty scary consequences\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/68", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/68/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/68/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/68", "id": 173878461, "node_id": "MDU6SXNzdWUxNzM4Nzg0NjE=", "number": 68, "title": "Unknown scalar type checking", "user": {"login": "Sviftel", "id": 15162130, "node_id": "MDQ6VXNlcjE1MTYyMTMw", "avatar_url": "https://avatars2.githubusercontent.com/u/15162130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sviftel", "html_url": "https://github.com/Sviftel", "followers_url": "https://api.github.com/users/Sviftel/followers", "following_url": "https://api.github.com/users/Sviftel/following{/other_user}", "gists_url": "https://api.github.com/users/Sviftel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sviftel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sviftel/subscriptions", "organizations_url": "https://api.github.com/users/Sviftel/orgs", "repos_url": "https://api.github.com/users/Sviftel/repos", "events_url": "https://api.github.com/users/Sviftel/events{/privacy}", "received_events_url": "https://api.github.com/users/Sviftel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-29T21:35:50Z", "updated_at": "2016-11-01T23:40:21Z", "closed_at": "2016-11-01T23:40:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Data:\n\n``` yaml\n- foo\n- bar\n```\n\nwith scheme:\n\n``` yaml\ntype: seq\nsequence:\n  - type: scalar\n```\n\nreturns:\n\n```\npykwalify.errors.CoreError: <CoreError: error code 3: Unknown type check: /0 : foo : scalar: Path: '/'>\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/67", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/67/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/67/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/67", "id": 173034034, "node_id": "MDU6SXNzdWUxNzMwMzQwMzQ=", "number": 67, "title": "Sequences of mappings are not validated", "user": {"login": "bdunlay", "id": 420197, "node_id": "MDQ6VXNlcjQyMDE5Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/420197?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bdunlay", "html_url": "https://github.com/bdunlay", "followers_url": "https://api.github.com/users/bdunlay/followers", "following_url": "https://api.github.com/users/bdunlay/following{/other_user}", "gists_url": "https://api.github.com/users/bdunlay/gists{/gist_id}", "starred_url": "https://api.github.com/users/bdunlay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bdunlay/subscriptions", "organizations_url": "https://api.github.com/users/bdunlay/orgs", "repos_url": "https://api.github.com/users/bdunlay/repos", "events_url": "https://api.github.com/users/bdunlay/events{/privacy}", "received_events_url": "https://api.github.com/users/bdunlay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 25170209, "node_id": "MDU6TGFiZWwyNTE3MDIwOQ==", "url": "https://api.github.com/repos/Grokzen/pykwalify/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/Grokzen/pykwalify/milestones/3", "html_url": "https://github.com/Grokzen/pykwalify/milestone/3", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/milestones/3/labels", "id": 2008611, "node_id": "MDk6TWlsZXN0b25lMjAwODYxMQ==", "number": 3, "title": "1.6.0", "description": "", "creator": {"login": "Grokzen", "id": 892309, "node_id": "MDQ6VXNlcjg5MjMwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/892309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Grokzen", "html_url": "https://github.com/Grokzen", "followers_url": "https://api.github.com/users/Grokzen/followers", "following_url": "https://api.github.com/users/Grokzen/following{/other_user}", "gists_url": "https://api.github.com/users/Grokzen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Grokzen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Grokzen/subscriptions", "organizations_url": "https://api.github.com/users/Grokzen/orgs", "repos_url": "https://api.github.com/users/Grokzen/repos", "events_url": "https://api.github.com/users/Grokzen/events{/privacy}", "received_events_url": "https://api.github.com/users/Grokzen/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "open", "created_at": "2016-09-16T07:40:16Z", "updated_at": "2017-01-22T20:27:26Z", "due_on": "2017-01-31T08:00:00Z", "closed_at": null}, "comments": 2, "created_at": "2016-08-24T19:11:30Z", "updated_at": "2016-12-21T02:46:19Z", "closed_at": "2016-12-21T02:25:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "``` yaml\n# data\n- \"hello\"\n- \"world\"\n```\n\n``` yaml\n# schema\ntype: seq\nsequence:\n    - type: map\n      mapping:\n          A:\n              type: str\n          B:\n              type: str\n```\n\n``` bash\n$ pykwalify -s schema.yml -d data.yml\n INFO - validation.valid\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/66", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/66/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/66/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/66", "id": 172802031, "node_id": "MDU6SXNzdWUxNzI4MDIwMzE=", "number": 66, "title": "required attribute ignored when including partial schemas.", "user": {"login": "bdunlay", "id": 420197, "node_id": "MDQ6VXNlcjQyMDE5Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/420197?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bdunlay", "html_url": "https://github.com/bdunlay", "followers_url": "https://api.github.com/users/bdunlay/followers", "following_url": "https://api.github.com/users/bdunlay/following{/other_user}", "gists_url": "https://api.github.com/users/bdunlay/gists{/gist_id}", "starred_url": "https://api.github.com/users/bdunlay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bdunlay/subscriptions", "organizations_url": "https://api.github.com/users/bdunlay/orgs", "repos_url": "https://api.github.com/users/bdunlay/repos", "events_url": "https://api.github.com/users/bdunlay/events{/privacy}", "received_events_url": "https://api.github.com/users/bdunlay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 25170209, "node_id": "MDU6TGFiZWwyNTE3MDIwOQ==", "url": "https://api.github.com/repos/Grokzen/pykwalify/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/Grokzen/pykwalify/milestones/3", "html_url": "https://github.com/Grokzen/pykwalify/milestone/3", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/milestones/3/labels", "id": 2008611, "node_id": "MDk6TWlsZXN0b25lMjAwODYxMQ==", "number": 3, "title": "1.6.0", "description": "", "creator": {"login": "Grokzen", "id": 892309, "node_id": "MDQ6VXNlcjg5MjMwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/892309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Grokzen", "html_url": "https://github.com/Grokzen", "followers_url": "https://api.github.com/users/Grokzen/followers", "following_url": "https://api.github.com/users/Grokzen/following{/other_user}", "gists_url": "https://api.github.com/users/Grokzen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Grokzen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Grokzen/subscriptions", "organizations_url": "https://api.github.com/users/Grokzen/orgs", "repos_url": "https://api.github.com/users/Grokzen/repos", "events_url": "https://api.github.com/users/Grokzen/events{/privacy}", "received_events_url": "https://api.github.com/users/Grokzen/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "open", "created_at": "2016-09-16T07:40:16Z", "updated_at": "2017-01-22T20:27:26Z", "due_on": "2017-01-31T08:00:00Z", "closed_at": null}, "comments": 10, "created_at": "2016-08-23T20:44:25Z", "updated_at": "2017-01-22T20:27:35Z", "closed_at": "2017-01-22T20:27:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I expected the following two schemas to behave the same. Both should require `A` be defined in the schema. In actuality, the partial schema seems to ignore the `required` attribute.\n### Data\n\n``` yaml\n# A: \"required\" but omitted\nB: hello\n```\n### Full Schema\n\n``` yaml\nmapping:\n   A:\n      required: True\n      type: map\n      mapping:\n         D:\n            required: True\n            type: str\n         E:\n            type: str\n   B:\n      type: str\n      required: True\n```\n### Output (Error Expected)\n\n``` bash\n$ pykwalify -d data.yml -s schema.yml\n ERROR - validation.invalid\n ERROR -  --- All found errors ---\n ERROR - [u\"Cannot find required key 'A'. Path: ''\"]\nTraceback (most recent call last):\n  File \"/usr/local/bin/pykwalify\", line 11, in <module>\n    sys.exit(cli_entrypoint())\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/cli.py\", line 84, in cli_entrypoint\n    run(parse_cli())\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/cli.py\", line 71, in run\n    c.validate()\n  File \"/usr/local/lib/python2.7/dist-packages/pykwalify/core.py\", line 159, in validate\n    error_msg=u'.\\n - '.join(self.validation_errors)))\npykwalify.errors.SchemaError: <SchemaError: error code 2: Schema validation failed:\n - Cannot find required key 'A'. Path: ''.: Path: '/'>\n```\n### Partial Schema Included\n\n``` yaml\nmapping:\n   A:\n      required: True\n      include: C\n   B:\n      type: str\n      required: True\n\nschema;C:\n   type: map\n   mapping:\n      D:\n         required: True\n         type: str\n      E:\n         type: str\n```\n### Output (Error Expected)\n\n``` bash\n$ pykwalify -d data.yml -s partial.yml\nINFO - validation.valid\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/64", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/64/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/64/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/64", "id": 171878152, "node_id": "MDU6SXNzdWUxNzE4NzgxNTI=", "number": 64, "title": "Returning False in custom validation raising core error", "user": {"login": "hari44330", "id": 21080516, "node_id": "MDQ6VXNlcjIxMDgwNTE2", "avatar_url": "https://avatars1.githubusercontent.com/u/21080516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hari44330", "html_url": "https://github.com/hari44330", "followers_url": "https://api.github.com/users/hari44330/followers", "following_url": "https://api.github.com/users/hari44330/following{/other_user}", "gists_url": "https://api.github.com/users/hari44330/gists{/gist_id}", "starred_url": "https://api.github.com/users/hari44330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hari44330/subscriptions", "organizations_url": "https://api.github.com/users/hari44330/orgs", "repos_url": "https://api.github.com/users/hari44330/repos", "events_url": "https://api.github.com/users/hari44330/events{/privacy}", "received_events_url": "https://api.github.com/users/hari44330/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-18T11:22:13Z", "updated_at": "2016-08-18T11:54:02Z", "closed_at": "2016-08-18T11:54:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \n\nIn custom validation function, when I return False I get the following error \n\nFile \"/usr/local/lib/python2.7/dist-packages/pykwalify/core.py\", line 238, in _handle_func\n    raise CoreError(u\"Error when running extension function : {}\".format(func))\npykwalify.errors.CoreError: <CoreError: error code 3: Error when running extension function : is_valid_ipv4: Path: '/'>\n\nBut it is working fine when I raise the assertion error. Is this expected behavior ? \n\n File \"/usr/local/lib/python2.7/dist-packages/pykwalify/core.py\", line 234, in _handle_func\n    ret = method(value, rule, path)\n  File \"/home/xxx/yaml/val.py\", line 31, in is_valid_ipv4\n    raise AssertionError(ipError)\nAssertionError: Invalid IP\n\nThanks \n~Hari\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/63", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/63/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/63/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/63", "id": 171307166, "node_id": "MDU6SXNzdWUxNzEzMDcxNjY=", "number": 63, "title": "Allowempty permits non-map values", "user": {"login": "kesre", "id": 2674802, "node_id": "MDQ6VXNlcjI2NzQ4MDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/2674802?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kesre", "html_url": "https://github.com/kesre", "followers_url": "https://api.github.com/users/kesre/followers", "following_url": "https://api.github.com/users/kesre/following{/other_user}", "gists_url": "https://api.github.com/users/kesre/gists{/gist_id}", "starred_url": "https://api.github.com/users/kesre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kesre/subscriptions", "organizations_url": "https://api.github.com/users/kesre/orgs", "repos_url": "https://api.github.com/users/kesre/repos", "events_url": "https://api.github.com/users/kesre/events{/privacy}", "received_events_url": "https://api.github.com/users/kesre/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443594098, "node_id": "MDU6TGFiZWw0NDM1OTQwOTg=", "url": "https://api.github.com/repos/Grokzen/pykwalify/labels/Investigation%20required", "name": "Investigation required", "color": "b60205", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-16T02:19:58Z", "updated_at": "2016-12-21T02:45:17Z", "closed_at": "2016-12-21T02:45:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Observed:\n\nProviding 'allowempty' with type: 'map' validates non-map values.\n### Expected:\n\nBased on documentation:\n\n> If True, the map can have keys which are not present in the schema, and these can map to anything.\n> Any keys which are specified in the schema must have values which conform to their corresponding constraints, if\n> they are present.\n\nI would expect 'allowempty' to only permit:\n- an empty map\n- map with keys not in the schema\n\nOtherwise, I would expect a NotMappingError\n### Example:\n\n```\nIn [1]: pykwalify.core.Core(\n    source_data=['not', 'a', 'map'],\n    schema_data={'type': 'map', 'allowempty': True}\n).validate(raise_exception=True)\nOut[1]: ['not', 'a', 'map']\n\nIn [2]: pykwalify.core.Core(\n    source_data=['not', 'maps'],\n    schema_data={\n        'type': 'seq',\n        'sequence': [{\n            'type': 'map',\n            'mapping': {'a': {'type': 'str'}},\n            'allowempty': True\n        }]\n    }\n).validate(raise_exception=True)\nOut[2]: ['not', 'maps']\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/62", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/62/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/62/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/62", "id": 168224325, "node_id": "MDU6SXNzdWUxNjgyMjQzMjU=", "number": 62, "title": "Support for default rule on mapping?", "user": {"login": "grovduck", "id": 1706997, "node_id": "MDQ6VXNlcjE3MDY5OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1706997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grovduck", "html_url": "https://github.com/grovduck", "followers_url": "https://api.github.com/users/grovduck/followers", "following_url": "https://api.github.com/users/grovduck/following{/other_user}", "gists_url": "https://api.github.com/users/grovduck/gists{/gist_id}", "starred_url": "https://api.github.com/users/grovduck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grovduck/subscriptions", "organizations_url": "https://api.github.com/users/grovduck/orgs", "repos_url": "https://api.github.com/users/grovduck/repos", "events_url": "https://api.github.com/users/grovduck/events{/privacy}", "received_events_url": "https://api.github.com/users/grovduck/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 25170211, "node_id": "MDU6TGFiZWwyNTE3MDIxMQ==", "url": "https://api.github.com/repos/Grokzen/pykwalify/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/Grokzen/pykwalify/milestones/3", "html_url": "https://github.com/Grokzen/pykwalify/milestone/3", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/milestones/3/labels", "id": 2008611, "node_id": "MDk6TWlsZXN0b25lMjAwODYxMQ==", "number": 3, "title": "1.6.0", "description": "", "creator": {"login": "Grokzen", "id": 892309, "node_id": "MDQ6VXNlcjg5MjMwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/892309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Grokzen", "html_url": "https://github.com/Grokzen", "followers_url": "https://api.github.com/users/Grokzen/followers", "following_url": "https://api.github.com/users/Grokzen/following{/other_user}", "gists_url": "https://api.github.com/users/Grokzen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Grokzen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Grokzen/subscriptions", "organizations_url": "https://api.github.com/users/Grokzen/orgs", "repos_url": "https://api.github.com/users/Grokzen/repos", "events_url": "https://api.github.com/users/Grokzen/events{/privacy}", "received_events_url": "https://api.github.com/users/Grokzen/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "open", "created_at": "2016-09-16T07:40:16Z", "updated_at": "2017-01-22T20:27:26Z", "due_on": "2017-01-31T08:00:00Z", "closed_at": null}, "comments": 6, "created_at": "2016-07-29T00:08:15Z", "updated_at": "2017-01-10T01:04:16Z", "closed_at": "2016-12-21T03:15:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I may be using the syntax incorrectly, but is there support for the `=:` syntax from kwalify such as shown in section 2-3 from [here](http://www.kuwata-lab.com/kwalify/ruby/users-guide.02.html)? \n\nI'm trying to use it where I may have many different map keys, but each has the same sequence associated with it, e.g.:\n\n```\ntype: map\nmapping:\n  =:\n    type: seq\n    required: true\n    sequence:\n      - type: map\n        mapping:\n          'code':\n            type: int\n            required: true\n            unique: true\n          'key':\n            type: str\n            required: true\n          'alias':\n            type: str\n            required: true\n```\n\nWhen running this through pykwalify, I get the following errror messages:\n\n```\n- Cannot find required key '='. Path: ''.\n- Key 'OWNER' was not defined. Path: ''.\n- Key 'ALLOCATION' was not defined. Path: ''.\netc ...\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/61", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/61/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/61/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/61", "id": 159543026, "node_id": "MDU6SXNzdWUxNTk1NDMwMjY=", "number": 61, "title": "Add min/max to regex keyword", "user": {"login": "cloudtoad", "id": 3741567, "node_id": "MDQ6VXNlcjM3NDE1Njc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3741567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cloudtoad", "html_url": "https://github.com/cloudtoad", "followers_url": "https://api.github.com/users/cloudtoad/followers", "following_url": "https://api.github.com/users/cloudtoad/following{/other_user}", "gists_url": "https://api.github.com/users/cloudtoad/gists{/gist_id}", "starred_url": "https://api.github.com/users/cloudtoad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cloudtoad/subscriptions", "organizations_url": "https://api.github.com/users/cloudtoad/orgs", "repos_url": "https://api.github.com/users/cloudtoad/repos", "events_url": "https://api.github.com/users/cloudtoad/events{/privacy}", "received_events_url": "https://api.github.com/users/cloudtoad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 25170211, "node_id": "MDU6TGFiZWwyNTE3MDIxMQ==", "url": "https://api.github.com/repos/Grokzen/pykwalify/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/Grokzen/pykwalify/milestones/4", "html_url": "https://github.com/Grokzen/pykwalify/milestone/4", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/milestones/4/labels", "id": 2232283, "node_id": "MDk6TWlsZXN0b25lMjIzMjI4Mw==", "number": 4, "title": "1.7.0", "description": "", "creator": {"login": "Grokzen", "id": 892309, "node_id": "MDQ6VXNlcjg5MjMwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/892309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Grokzen", "html_url": "https://github.com/Grokzen", "followers_url": "https://api.github.com/users/Grokzen/followers", "following_url": "https://api.github.com/users/Grokzen/following{/other_user}", "gists_url": "https://api.github.com/users/Grokzen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Grokzen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Grokzen/subscriptions", "organizations_url": "https://api.github.com/users/Grokzen/orgs", "repos_url": "https://api.github.com/users/Grokzen/repos", "events_url": "https://api.github.com/users/Grokzen/events{/privacy}", "received_events_url": "https://api.github.com/users/Grokzen/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 1, "state": "open", "created_at": "2017-01-06T02:02:00Z", "updated_at": "2019-10-19T21:19:39Z", "due_on": "2017-02-28T08:00:00Z", "closed_at": null}, "comments": 4, "created_at": "2016-06-10T01:35:35Z", "updated_at": "2019-10-19T21:19:39Z", "closed_at": "2019-10-19T21:19:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider:\n\n```\nmap:\n  regex;(^db\\.type):\n    min: 1\n...\n```\n\nWould be nice if we could specify the min/max constraints under a regex.  These would specify the minimum and maximum number of matches for that regex.  Before I take a stab at it, any initial thoughts?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/60", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/60/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/60/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/60", "id": 158427436, "node_id": "MDU6SXNzdWUxNTg0Mjc0MzY=", "number": 60, "title": "Quotes are required to validate datetime type", "user": {"login": "jdandrea", "id": 108430, "node_id": "MDQ6VXNlcjEwODQzMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/108430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdandrea", "html_url": "https://github.com/jdandrea", "followers_url": "https://api.github.com/users/jdandrea/followers", "following_url": "https://api.github.com/users/jdandrea/following{/other_user}", "gists_url": "https://api.github.com/users/jdandrea/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdandrea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdandrea/subscriptions", "organizations_url": "https://api.github.com/users/jdandrea/orgs", "repos_url": "https://api.github.com/users/jdandrea/repos", "events_url": "https://api.github.com/users/jdandrea/events{/privacy}", "received_events_url": "https://api.github.com/users/jdandrea/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443595116, "node_id": "MDU6TGFiZWw0NDM1OTUxMTY=", "url": "https://api.github.com/repos/Grokzen/pykwalify/labels/Fixed%20In%20next%20release", "name": "Fixed In next release", "color": "5319e7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-06-03T18:33:03Z", "updated_at": "2016-11-07T17:53:09Z", "closed_at": "2016-11-05T15:22:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given the schema:\n\n```\ntype: map\nmapping:\n  d1:\n    type: timestamp\n```\n\nand data:\n\n```\nd1: 2015-03-29\n```\n\nThe following error is returned:\n\n```\nValue '2015-03-29' is not of type 'timestamp'. Path: '/d1', Not a valid timestamp\n```\n\nHowever, enclosing the date in quotes works:\n\n```\nd1: \"2015-03-29\"\n```\n\nExpectation: Quotes should not be required for the value to be recognized as a valid datetime type.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/58", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/58/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/58/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/58", "id": 154232751, "node_id": "MDU6SXNzdWUxNTQyMzI3NTE=", "number": 58, "title": "Replace PyYAML by ruamel.yaml", "user": {"login": "Roysten", "id": 1564539, "node_id": "MDQ6VXNlcjE1NjQ1Mzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1564539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Roysten", "html_url": "https://github.com/Roysten", "followers_url": "https://api.github.com/users/Roysten/followers", "following_url": "https://api.github.com/users/Roysten/following{/other_user}", "gists_url": "https://api.github.com/users/Roysten/gists{/gist_id}", "starred_url": "https://api.github.com/users/Roysten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Roysten/subscriptions", "organizations_url": "https://api.github.com/users/Roysten/orgs", "repos_url": "https://api.github.com/users/Roysten/repos", "events_url": "https://api.github.com/users/Roysten/events{/privacy}", "received_events_url": "https://api.github.com/users/Roysten/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-05-11T12:35:34Z", "updated_at": "2016-06-04T09:39:59Z", "closed_at": "2016-06-04T09:39:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Wouldn't it be a good idea to drop PyYAML and replace it by the actively developed [ruamel.yaml](https://bitbucket.org/ruamel/yaml/overview)? It support YAML 1.2 and is a fork of the original PyYAML. It looks like it is a drop-in replacement (at least it was in my personal project :smile: ). \n\nI'll be happy to submit a pull request.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/57", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/57/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/57/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/57", "id": 153429022, "node_id": "MDU6SXNzdWUxNTM0MjkwMjI=", "number": 57, "title": "AttributeError: 'int' object has no attribute 'encode' (In  _validate_sequence)", "user": {"login": "realcr", "id": 5255681, "node_id": "MDQ6VXNlcjUyNTU2ODE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5255681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/realcr", "html_url": "https://github.com/realcr", "followers_url": "https://api.github.com/users/realcr/followers", "following_url": "https://api.github.com/users/realcr/following{/other_user}", "gists_url": "https://api.github.com/users/realcr/gists{/gist_id}", "starred_url": "https://api.github.com/users/realcr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/realcr/subscriptions", "organizations_url": "https://api.github.com/users/realcr/orgs", "repos_url": "https://api.github.com/users/realcr/repos", "events_url": "https://api.github.com/users/realcr/events{/privacy}", "received_events_url": "https://api.github.com/users/realcr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-05-06T11:04:41Z", "updated_at": "2016-05-06T11:45:41Z", "closed_at": "2016-05-06T11:45:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to validate a YAML file with integer instead of a sequence, the following exception occurs:\n\n```\n    def _validate_sequence(self, value, rule, path, errors, done=None):\n    log.debug(u\"Core Validate sequence\")\n    log.debug(u\" * Data: {}\".format(value))\n    log.debug(u\" * Rule: {}\".format(rule))\n    log.debug(u\" * RuleType: {}\".format(rule._type))\n    log.debug(u\" * Path: {}\".format(path))\n    log.debug(u\" * Seq: {}\".format(rule._sequence))\n    log.debug(u\" * Map: {}\".format(rule._mapping))\n\n    if len(rule._sequence) <= 0:\n        raise CoreError(u\"Sequence must contains atleast one item : {}\".format(path))\n\n    if value is None:\n        log.debug(u\" * Core seq: sequence data is None\")\n        return\n\n    if not isinstance(value, list):\n>           raise NotSequenceError(u\"Value: {} is not of a sequence type\".format(value.encode('unicode_escape')))\nE           AttributeError: 'int' object has no attribute 'encode'\n```\n\nHere is part of my schema:\n\n```\nmy_list:\n    type: seq\n    matching: \"all\"\n    sequence:\n        -   type: str\n            required: True\n```\n\nI tried to verify a YAML file that contained:\n\n```\nmy_list: 3\n```\n## Expected behaviour:\n\nRaising SchemaError exception.\n## Observed behaviour:\n\nRaising AttributeError exception\n\n---\n\nThank you for your help!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/56", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/56/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/56/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/56", "id": 151135748, "node_id": "MDU6SXNzdWUxNTExMzU3NDg=", "number": 56, "title": "Readthedocs doesn't have any docs.", "user": {"login": "jzohrab", "id": 1637133, "node_id": "MDQ6VXNlcjE2MzcxMzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1637133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jzohrab", "html_url": "https://github.com/jzohrab", "followers_url": "https://api.github.com/users/jzohrab/followers", "following_url": "https://api.github.com/users/jzohrab/following{/other_user}", "gists_url": "https://api.github.com/users/jzohrab/gists{/gist_id}", "starred_url": "https://api.github.com/users/jzohrab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jzohrab/subscriptions", "organizations_url": "https://api.github.com/users/jzohrab/orgs", "repos_url": "https://api.github.com/users/jzohrab/repos", "events_url": "https://api.github.com/users/jzohrab/events{/privacy}", "received_events_url": "https://api.github.com/users/jzohrab/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443595116, "node_id": "MDU6TGFiZWw0NDM1OTUxMTY=", "url": "https://api.github.com/repos/Grokzen/pykwalify/labels/Fixed%20In%20next%20release", "name": "Fixed In next release", "color": "5319e7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-04-26T13:30:05Z", "updated_at": "2016-11-05T15:22:27Z", "closed_at": "2016-11-05T15:22:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "The README says \"All documentation can be found at http://pykwalify.readthedocs.org/en/latest/\", which exists but is empty.  Should this link be changed to http://pykwalify.readthedocs.org (which redirects to http://pykwalify.readthedocs.org/en/unstable/) ?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/55", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/55/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/55/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/55", "id": 144595670, "node_id": "MDU6SXNzdWUxNDQ1OTU2NzA=", "number": 55, "title": "Un-fix the versions of docopt, PyYAML, python-dateutil", "user": {"login": "crdoconnor", "id": 6067509, "node_id": "MDQ6VXNlcjYwNjc1MDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6067509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crdoconnor", "html_url": "https://github.com/crdoconnor", "followers_url": "https://api.github.com/users/crdoconnor/followers", "following_url": "https://api.github.com/users/crdoconnor/following{/other_user}", "gists_url": "https://api.github.com/users/crdoconnor/gists{/gist_id}", "starred_url": "https://api.github.com/users/crdoconnor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crdoconnor/subscriptions", "organizations_url": "https://api.github.com/users/crdoconnor/orgs", "repos_url": "https://api.github.com/users/crdoconnor/repos", "events_url": "https://api.github.com/users/crdoconnor/events{/privacy}", "received_events_url": "https://api.github.com/users/crdoconnor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2016-03-30T13:35:40Z", "updated_at": "2016-09-15T17:26:52Z", "closed_at": "2016-09-15T15:23:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently the versions are fixed, which is giving me errors on Mac OS X when I have python-dateutil==2.5.2.\n\nI don't believe there's actually any problems with PyYAML and python-dateutil==2.5.2, however.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/54", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/54/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/54/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/54", "id": 144142076, "node_id": "MDU6SXNzdWUxNDQxNDIwNzY=", "number": 54, "title": "Validate if list contains dictionaries without validating keys in dictionary", "user": {"login": "smalleni", "id": 11049799, "node_id": "MDQ6VXNlcjExMDQ5Nzk5", "avatar_url": "https://avatars3.githubusercontent.com/u/11049799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smalleni", "html_url": "https://github.com/smalleni", "followers_url": "https://api.github.com/users/smalleni/followers", "following_url": "https://api.github.com/users/smalleni/following{/other_user}", "gists_url": "https://api.github.com/users/smalleni/gists{/gist_id}", "starred_url": "https://api.github.com/users/smalleni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smalleni/subscriptions", "organizations_url": "https://api.github.com/users/smalleni/orgs", "repos_url": "https://api.github.com/users/smalleni/repos", "events_url": "https://api.github.com/users/smalleni/events{/privacy}", "received_events_url": "https://api.github.com/users/smalleni/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443595116, "node_id": "MDU6TGFiZWw0NDM1OTUxMTY=", "url": "https://api.github.com/repos/Grokzen/pykwalify/labels/Fixed%20In%20next%20release", "name": "Fixed In next release", "color": "5319e7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/Grokzen/pykwalify/milestones/3", "html_url": "https://github.com/Grokzen/pykwalify/milestone/3", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/milestones/3/labels", "id": 2008611, "node_id": "MDk6TWlsZXN0b25lMjAwODYxMQ==", "number": 3, "title": "1.6.0", "description": "", "creator": {"login": "Grokzen", "id": 892309, "node_id": "MDQ6VXNlcjg5MjMwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/892309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Grokzen", "html_url": "https://github.com/Grokzen", "followers_url": "https://api.github.com/users/Grokzen/followers", "following_url": "https://api.github.com/users/Grokzen/following{/other_user}", "gists_url": "https://api.github.com/users/Grokzen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Grokzen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Grokzen/subscriptions", "organizations_url": "https://api.github.com/users/Grokzen/orgs", "repos_url": "https://api.github.com/users/Grokzen/repos", "events_url": "https://api.github.com/users/Grokzen/events{/privacy}", "received_events_url": "https://api.github.com/users/Grokzen/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "open", "created_at": "2016-09-16T07:40:16Z", "updated_at": "2017-01-22T20:27:26Z", "due_on": "2017-01-31T08:00:00Z", "closed_at": null}, "comments": 7, "created_at": "2016-03-29T03:04:18Z", "updated_at": "2017-01-10T10:48:03Z", "closed_at": "2016-12-21T04:40:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "If scenario file has a list of dictionaries and the keys could be different each time, and user doesn't want to test for key names but just wants to check if the the sequence is a list of dictionaries.\n\n```\nData\nrally:\n  plugins:\n    - netcreate-boot: rally/rally-plugins/netcreate-boot \n#Schema\ntype: map\nmapping:\n  rally:\n    type: map\n    allowempty: True\n    mapping:\n      plugins:\n        type: seq\n        sequence:\n        - type: map\n          allowempty: True\n```\n\nIn the above case, user just wants to check if plugins is a list of key value pairs.\nThe above schema validation throws an exception. It would be nice to have this feature as discussed in #53\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/53", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/53/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/53/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/53", "id": 143998173, "node_id": "MDU6SXNzdWUxNDM5OTgxNzM=", "number": 53, "title": "Allow key to be specified or left empty", "user": {"login": "smalleni", "id": 11049799, "node_id": "MDQ6VXNlcjExMDQ5Nzk5", "avatar_url": "https://avatars3.githubusercontent.com/u/11049799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smalleni", "html_url": "https://github.com/smalleni", "followers_url": "https://api.github.com/users/smalleni/followers", "following_url": "https://api.github.com/users/smalleni/following{/other_user}", "gists_url": "https://api.github.com/users/smalleni/gists{/gist_id}", "starred_url": "https://api.github.com/users/smalleni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smalleni/subscriptions", "organizations_url": "https://api.github.com/users/smalleni/orgs", "repos_url": "https://api.github.com/users/smalleni/repos", "events_url": "https://api.github.com/users/smalleni/events{/privacy}", "received_events_url": "https://api.github.com/users/smalleni/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-03-28T15:06:43Z", "updated_at": "2016-03-28T17:57:05Z", "closed_at": "2016-03-28T17:57:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is this feature present in the current release?\n\nI am using a single schema file to validate against different scenarios. Some of the scenarios have a specific key and some don't. I would like to be able to specify in the schema to ignore if the key isn't present. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/47", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/47/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/47/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/47", "id": 142635234, "node_id": "MDU6SXNzdWUxNDI2MzUyMzQ=", "number": 47, "title": "pattern fail if data to validate is encoded in utf-8 with python2.7", "user": {"login": "bneron", "id": 1140846, "node_id": "MDQ6VXNlcjExNDA4NDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1140846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bneron", "html_url": "https://github.com/bneron", "followers_url": "https://api.github.com/users/bneron/followers", "following_url": "https://api.github.com/users/bneron/following{/other_user}", "gists_url": "https://api.github.com/users/bneron/gists{/gist_id}", "starred_url": "https://api.github.com/users/bneron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bneron/subscriptions", "organizations_url": "https://api.github.com/users/bneron/orgs", "repos_url": "https://api.github.com/users/bneron/repos", "events_url": "https://api.github.com/users/bneron/events{/privacy}", "received_events_url": "https://api.github.com/users/bneron/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-03-22T12:31:33Z", "updated_at": "2016-03-26T09:22:03Z", "closed_at": "2016-03-26T09:22:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "in python 2.7 if a yaml contain uf8 characters and if we try to validate field with pattern.\nan error is raised\n\n``` python\npykwalify -d utf8_data.yml  -s utf8_schema.yml \nTraceback (most recent call last):\n  File \"/usr/lib/python-exec/python2.7/pykwalify\", line 9, in <module>\n    load_entry_point('pykwalify==1.5.1', 'console_scripts', 'pykwalify')()\n  File \"/usr/lib64/python2.7/site-packages/pykwalify/cli.py\", line 84, in cli_entrypoint\n    run(parse_cli())\n  File \"/usr/lib64/python2.7/site-packages/pykwalify/cli.py\", line 71, in run\n    c.validate()\n  File \"/usr/lib64/python2.7/site-packages/pykwalify/core.py\", line 147, in validate\n    self._start_validate(self.source)\n  File \"/usr/lib64/python2.7/site-packages/pykwalify/core.py\", line 192, in _start_validate\n    self._validate(value, root_rule, path, done)\n  File \"/usr/lib64/python2.7/site-packages/pykwalify/core.py\", line 211, in _validate\n    self._validate_mapping(value, rule, path, done=None)\n  File \"/usr/lib64/python2.7/site-packages/pykwalify/core.py\", line 529, in _validate_mapping\n    self._validate(v, r, u\"{}/{}\".format(path, k), done)\n  File \"/usr/lib64/python2.7/site-packages/pykwalify/core.py\", line 213, in _validate\n    self._validate_scalar(value, rule, path, done=None)\n  File \"/usr/lib64/python2.7/site-packages/pykwalify/core.py\", line 561, in _validate_scalar\n    res = re.match(rule.pattern, str(value))\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\xe9' in position 1: ordinal not in range(128)\n```\n\nwhereas it works in python3\n\n[data.zip](https://github.com/Grokzen/pykwalify/files/184082/data.zip)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/43", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/43/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/43/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/43", "id": 142389302, "node_id": "MDU6SXNzdWUxNDIzODkzMDI=", "number": 43, "title": "error in usage", "user": {"login": "bneron", "id": 1140846, "node_id": "MDQ6VXNlcjExNDA4NDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1140846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bneron", "html_url": "https://github.com/bneron", "followers_url": "https://api.github.com/users/bneron/followers", "following_url": "https://api.github.com/users/bneron/following{/other_user}", "gists_url": "https://api.github.com/users/bneron/gists{/gist_id}", "starred_url": "https://api.github.com/users/bneron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bneron/subscriptions", "organizations_url": "https://api.github.com/users/bneron/orgs", "repos_url": "https://api.github.com/users/bneron/repos", "events_url": "https://api.github.com/users/bneron/events{/privacy}", "received_events_url": "https://api.github.com/users/bneron/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-03-21T15:47:11Z", "updated_at": "2016-03-21T20:16:48Z", "closed_at": "2016-03-21T20:16:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "the pykwalify usage is in conflict with the documentation on readthedocs\nusage:\n-d FILE, --data-file FILE            the file to be tested\n-s FILE, --schema-file FILE          schema definition file\n\nreadthedocs: \npykwalify -d data.yaml -s schema.yaml\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/41", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/41/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/41/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/41", "id": 142386191, "node_id": "MDU6SXNzdWUxNDIzODYxOTE=", "number": 41, "title": "setup.py fail", "user": {"login": "bneron", "id": 1140846, "node_id": "MDQ6VXNlcjExNDA4NDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1140846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bneron", "html_url": "https://github.com/bneron", "followers_url": "https://api.github.com/users/bneron/followers", "following_url": "https://api.github.com/users/bneron/following{/other_user}", "gists_url": "https://api.github.com/users/bneron/gists{/gist_id}", "starred_url": "https://api.github.com/users/bneron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bneron/subscriptions", "organizations_url": "https://api.github.com/users/bneron/orgs", "repos_url": "https://api.github.com/users/bneron/repos", "events_url": "https://api.github.com/users/bneron/events{/privacy}", "received_events_url": "https://api.github.com/users/bneron/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-03-21T15:37:02Z", "updated_at": "2016-03-22T11:38:31Z", "closed_at": "2016-03-22T11:38:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "the setup.py look for a file ReleaseNotes.rst which obviously does not exists \n\n``` python\n$python setup.py install\nTraceback (most recent call last):\n  File \"setup.py\", line 8, in <module>\n    with open('ReleaseNotes.rst') as f:\nIOError: [Errno 2] No such file or directory: 'ReleaseNotes.rst'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/39", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/39/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/39/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/39", "id": 137847175, "node_id": "MDU6SXNzdWUxMzc4NDcxNzU=", "number": 39, "title": "issues with float, None and scientific notation", "user": {"login": "gijzelaerr", "id": 326308, "node_id": "MDQ6VXNlcjMyNjMwOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/326308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gijzelaerr", "html_url": "https://github.com/gijzelaerr", "followers_url": "https://api.github.com/users/gijzelaerr/followers", "following_url": "https://api.github.com/users/gijzelaerr/following{/other_user}", "gists_url": "https://api.github.com/users/gijzelaerr/gists{/gist_id}", "starred_url": "https://api.github.com/users/gijzelaerr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gijzelaerr/subscriptions", "organizations_url": "https://api.github.com/users/gijzelaerr/orgs", "repos_url": "https://api.github.com/users/gijzelaerr/repos", "events_url": "https://api.github.com/users/gijzelaerr/events{/privacy}", "received_events_url": "https://api.github.com/users/gijzelaerr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2016-03-02T11:28:11Z", "updated_at": "2016-03-22T11:49:54Z", "closed_at": "2016-03-22T11:49:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\n\nI'm trying validate some json I have. The json contains a mapping with float values. pykwalify probably correctly pykwalify doesn't accept float values like 1e-06 and None:\n\n```\npykwalify.errors.SchemaError: <SchemaError: error code 2: Schema validation failed:\n - Value '1e-06' is not of type 'float'. Path: '/moresane_accuracy'.\n - Value 'None' is not of type 'float'. Path: '/sefd'.\n```\n\nSo 2 questions (or maybe issues):\n- isn't 1e06 just valid syntax? Python eats it as float:\n\n```\n>>> x = float(1e-06)\n>>> type(x)\n<type 'float'>\n```\n- Is it possible to give multiple types for a specified key in a mapping? I just can't figure it out. My none problem would be solved if i was able to set the type to 'float' or 'none'.\n\nawesome, thanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/38", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/38/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/38/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/38", "id": 135566058, "node_id": "MDU6SXNzdWUxMzU1NjYwNTg=", "number": 38, "title": "unique not enforced on mappings", "user": {"login": "bodenr", "id": 2048526, "node_id": "MDQ6VXNlcjIwNDg1MjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2048526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bodenr", "html_url": "https://github.com/bodenr", "followers_url": "https://api.github.com/users/bodenr/followers", "following_url": "https://api.github.com/users/bodenr/following{/other_user}", "gists_url": "https://api.github.com/users/bodenr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bodenr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bodenr/subscriptions", "organizations_url": "https://api.github.com/users/bodenr/orgs", "repos_url": "https://api.github.com/users/bodenr/repos", "events_url": "https://api.github.com/users/bodenr/events{/privacy}", "received_events_url": "https://api.github.com/users/bodenr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-02-22T22:31:35Z", "updated_at": "2016-03-04T20:46:30Z", "closed_at": "2016-03-04T20:46:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I may be missing the semantics of `unique` when used within a mapping.\n\nFor example...\n\nSchema\n\n``` yaml\ntype: map\nmapping:\n  type:\n    type: str\n    required: True\n    unique: True\n  user:\n      type: str\n      required: True\n      unique: True\n  password:\n      type: str\n      unique: True\n      required: True\n```\n\ndata file:\n\n``` yaml\ntype: password\nuser: user1\npassword: pass1\nuser: user2\npassword: pass2\ntype: whatever\n```\n\npy code:\n\n``` py\nimport pykwalify.core as core\n\nc = core.Core(source_file='./data.yaml',\n              schema_files=['./schema.yaml'])\nc.validate(raise_exception=True)\n```\n\nNo validation errors... How can I constrain the map keys to only being used once?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/37", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/37/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/37/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/37", "id": 135467635, "node_id": "MDU6SXNzdWUxMzU0Njc2MzU=", "number": 37, "title": "Bug in raising NotSequenceError", "user": {"login": "pierre-borckmans", "id": 5610359, "node_id": "MDQ6VXNlcjU2MTAzNTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5610359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierre-borckmans", "html_url": "https://github.com/pierre-borckmans", "followers_url": "https://api.github.com/users/pierre-borckmans/followers", "following_url": "https://api.github.com/users/pierre-borckmans/following{/other_user}", "gists_url": "https://api.github.com/users/pierre-borckmans/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierre-borckmans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierre-borckmans/subscriptions", "organizations_url": "https://api.github.com/users/pierre-borckmans/orgs", "repos_url": "https://api.github.com/users/pierre-borckmans/repos", "events_url": "https://api.github.com/users/pierre-borckmans/events{/privacy}", "received_events_url": "https://api.github.com/users/pierre-borckmans/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-02-22T16:28:11Z", "updated_at": "2016-03-04T20:41:34Z", "closed_at": "2016-03-04T20:41:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "There seems to be a bug in sequence validation.\nHere's the stack trace from validating a yaml file where a field was supposed to be a sequence of objects but was in fact an object:\n\n```\nTraceback (most recent call last):\n  File \"c:\\python27\\lib\\runpy.py\", line 162, in _run_module_as_main\n    \"__main__\", fname, loader, pkg_name)\n  File \"c:\\python27\\lib\\runpy.py\", line 72, in _run_code\n    exec code in run_globals\n  File \"C:\\Python27\\Scripts\\pykwalify.exe\\__main__.py\", line 9, in <module>\n  File \"c:\\python27\\lib\\site-packages\\pykwalify\\cli.py\", line 84, in cli_entrypoint\n    run(parse_cli())\n  File \"c:\\python27\\lib\\site-packages\\pykwalify\\cli.py\", line 71, in run\n    c.validate()\n  File \"c:\\python27\\lib\\site-packages\\pykwalify\\core.py\", line 145, in validate\n    errors = self._start_validate(self.source)\n  File \"c:\\python27\\lib\\site-packages\\pykwalify\\core.py\", line 190, in _start_validate\n    self._validate(value, root_rule, path, errors, done)\n  File \"c:\\python27\\lib\\site-packages\\pykwalify\\core.py\", line 210, in _validate\n    self._validate_mapping(value, rule, path, errors, done=None)\n  File \"c:\\python27\\lib\\site-packages\\pykwalify\\core.py\", line 524, in _validate_mapping\n    self._validate(v, r, u\"{}/{}\".format(path, k), errors, done)\n  File \"c:\\python27\\lib\\site-packages\\pykwalify\\core.py\", line 208, in _validate\n    self._validate_sequence(value, rule, path, errors, done=None)\n  File \"c:\\python27\\lib\\site-packages\\pykwalify\\core.py\", line 303, in _validate_sequence\n    self._validate(item, r, \"{}/{}\".format(path, i), tmp_errors, done)\n  File \"c:\\python27\\lib\\site-packages\\pykwalify\\core.py\", line 210, in _validate\n    self._validate_mapping(value, rule, path, errors, done=None)\n  File \"c:\\python27\\lib\\site-packages\\pykwalify\\core.py\", line 524, in _validate_mapping\n    self._validate(v, r, u\"{}/{}\".format(path, k), errors, done)\n  File \"c:\\python27\\lib\\site-packages\\pykwalify\\core.py\", line 208, in _validate\n    self._validate_sequence(value, rule, path, errors, done=None)\n  File \"c:\\python27\\lib\\site-packages\\pykwalify\\core.py\", line 303, in _validate_sequence\n    self._validate(item, r, \"{}/{}\".format(path, i), tmp_errors, done)\n  File \"c:\\python27\\lib\\site-packages\\pykwalify\\core.py\", line 210, in _validate\n    self._validate_mapping(value, rule, path, errors, done=None)\n  File \"c:\\python27\\lib\\site-packages\\pykwalify\\core.py\", line 524, in _validate_mapping\n    self._validate(v, r, u\"{}/{}\".format(path, k), errors, done)\n  File \"c:\\python27\\lib\\site-packages\\pykwalify\\core.py\", line 208, in _validate\n    self._validate_sequence(value, rule, path, errors, done=None)\n  File \"c:\\python27\\lib\\site-packages\\pykwalify\\core.py\", line 285, in _validate_sequence\n    raise NotSequenceError(u\"Value: {} is not of a sequence type\".format(value.encode('unicode_escape')))\nAttributeError: 'dict' object has no attribute 'encode'\n```\n\nwhich points to:\n[https://github.com/Grokzen/pykwalify/blob/unstable/pykwalify/core.py#L285]\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/35", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/35/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/35/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/35", "id": 131712338, "node_id": "MDU6SXNzdWUxMzE3MTIzMzg=", "number": 35, "title": "Conditional validation?", "user": {"login": "jdandrea", "id": 108430, "node_id": "MDQ6VXNlcjEwODQzMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/108430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdandrea", "html_url": "https://github.com/jdandrea", "followers_url": "https://api.github.com/users/jdandrea/followers", "following_url": "https://api.github.com/users/jdandrea/following{/other_user}", "gists_url": "https://api.github.com/users/jdandrea/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdandrea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdandrea/subscriptions", "organizations_url": "https://api.github.com/users/jdandrea/orgs", "repos_url": "https://api.github.com/users/jdandrea/repos", "events_url": "https://api.github.com/users/jdandrea/events{/privacy}", "received_events_url": "https://api.github.com/users/jdandrea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/Grokzen/pykwalify/milestones/1", "html_url": "https://github.com/Grokzen/pykwalify/milestone/1", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/milestones/1/labels", "id": 1659561, "node_id": "MDk6TWlsZXN0b25lMTY1OTU2MQ==", "number": 1, "title": "2.0.0", "description": "", "creator": {"login": "Grokzen", "id": 892309, "node_id": "MDQ6VXNlcjg5MjMwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/892309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Grokzen", "html_url": "https://github.com/Grokzen", "followers_url": "https://api.github.com/users/Grokzen/followers", "following_url": "https://api.github.com/users/Grokzen/following{/other_user}", "gists_url": "https://api.github.com/users/Grokzen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Grokzen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Grokzen/subscriptions", "organizations_url": "https://api.github.com/users/Grokzen/orgs", "repos_url": "https://api.github.com/users/Grokzen/repos", "events_url": "https://api.github.com/users/Grokzen/events{/privacy}", "received_events_url": "https://api.github.com/users/Grokzen/received_events", "type": "User", "site_admin": false}, "open_issues": 3, "closed_issues": 2, "state": "open", "created_at": "2016-03-22T11:55:38Z", "updated_at": "2019-10-19T21:18:21Z", "due_on": null, "closed_at": null}, "comments": 7, "created_at": "2016-02-05T18:05:48Z", "updated_at": "2016-12-21T17:09:33Z", "closed_at": "2016-12-21T04:33:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Let's say we have this contrived example YAML:\n\n```\nfoods:\n  first_food:\n    classification: fruit\n    properties:\n      name: apple\n      color: red\n      other: properties_go_here\n  second_food:\n    classification: vegetable\n    properties:\n      name: carrot\n      color: orange\n      other: properties_go_here\n```\n\nPresume that we can't change the format. In this case, each food gets an arbitrary (key) name, and the classification of each food must be kept separate from its properties.\n\nI'm trying to find a way to conditionally validate the name property of a food based on its classification. In this example, if the classification is \"fruit\" then I want to validate that food's name property based on a list of fruits. If the classification is \"vegetable\" then I want to validate that food's name property based on a list of vegetables.\n\nI started to imagine a schema to help with this:\n\n```\nmapping:\n  \"foods\":\n    mapping:\n      regex;(.+):\n        allowempty: True\n        mapping:\n          \"classification\": { type: str, pattern: fruit }\n          \"properties\":\n            allowempty: True\n            mapping:\n              \"name\": { type: str, pattern: (apple|orange|grape) }\n      regex;(.+):\n        allowempty: True\n        mapping: \n          \"classification\": { type: str, pattern: vegetable }\n          \"properties\":\n            allowempty: True\n            mapping:\n              \"name\": { type: str, pattern: (carrot|broccoli|cucumber) }\n```\n\nOnly this doesn't quite work:\n\n```\n ERROR - validation.invalid\n ERROR -  --- All found errors ---\n ERROR - [u\"Value 'apple' does not match pattern '(carrot|broccoli|cucumber)'. Path: '/foods/first_food/properties/name'\", u\"Value 'fruit' does not match pattern 'vegetable'. Path: '/foods/first_food/classification'\"]\n```\n\nI think I'm trying to say this: \"Each food mapping must pass any (not all) of these regex-based validations.\" I'm not sure if I can do that though. I thought perhaps with YAML anchors, but perhaps not. The next best thing I think I can do is make these separate schemas and run each one in turn.\n\nThoughts?\n\n(Meanwhile, I'm really enjoying exploring pykwalify!)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/34", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/34/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/34/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/34", "id": 131479652, "node_id": "MDU6SXNzdWUxMzE0Nzk2NTI=", "number": 34, "title": "AttributeError when evaluating timestamp", "user": {"login": "jdandrea", "id": 108430, "node_id": "MDQ6VXNlcjEwODQzMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/108430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdandrea", "html_url": "https://github.com/jdandrea", "followers_url": "https://api.github.com/users/jdandrea/followers", "following_url": "https://api.github.com/users/jdandrea/following{/other_user}", "gists_url": "https://api.github.com/users/jdandrea/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdandrea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdandrea/subscriptions", "organizations_url": "https://api.github.com/users/jdandrea/orgs", "repos_url": "https://api.github.com/users/jdandrea/repos", "events_url": "https://api.github.com/users/jdandrea/events{/privacy}", "received_events_url": "https://api.github.com/users/jdandrea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-02-04T21:30:35Z", "updated_at": "2016-03-07T18:07:03Z", "closed_at": "2016-03-05T00:52:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given the following source:\n\n```\nmy_date: 2013-05-23\n```\n\n... and schema:\n\n```\nmapping:\n  \"my_date\":\n    type: timestamp\n    required: yes\n```\n\nI get an AttributeError on datetime.date (is it expecting a string?):\n\n```\nTraceback (most recent call last):\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin/pykwalify\", line 9, in <module>\n    load_entry_point('pykwalify==1.5.0', 'console_scripts', 'pykwalify')()\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pykwalify/cli.py\", line 84, in cli_entrypoint\n    run(parse_cli())\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pykwalify/cli.py\", line 71, in run\n    c.validate()\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pykwalify/core.py\", line 145, in validate\n    errors = self._start_validate(self.source)\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pykwalify/core.py\", line 190, in _start_validate\n    self._validate(value, root_rule, path, errors, done)\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pykwalify/core.py\", line 210, in _validate\n    self._validate_mapping(value, rule, path, errors, done=None)\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pykwalify/core.py\", line 524, in _validate_mapping\n    self._validate(v, r, u\"{}/{}\".format(path, k), errors, done)\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pykwalify/core.py\", line 212, in _validate\n    self._validate_scalar(value, rule, path, errors, done=None)\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pykwalify/core.py\", line 589, in _validate_scalar\n    v = value.strip()\nAttributeError: 'datetime.date' object has no attribute 'strip'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/32", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/32/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/32/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/32", "id": 124571639, "node_id": "MDU6SXNzdWUxMjQ1NzE2Mzk=", "number": 32, "title": "When will commit 9da45c7 be released on PyPI?", "user": {"login": "arxanas", "id": 454057, "node_id": "MDQ6VXNlcjQ1NDA1Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/454057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arxanas", "html_url": "https://github.com/arxanas", "followers_url": "https://api.github.com/users/arxanas/followers", "following_url": "https://api.github.com/users/arxanas/following{/other_user}", "gists_url": "https://api.github.com/users/arxanas/gists{/gist_id}", "starred_url": "https://api.github.com/users/arxanas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arxanas/subscriptions", "organizations_url": "https://api.github.com/users/arxanas/orgs", "repos_url": "https://api.github.com/users/arxanas/repos", "events_url": "https://api.github.com/users/arxanas/events{/privacy}", "received_events_url": "https://api.github.com/users/arxanas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-01-02T02:31:57Z", "updated_at": "2016-03-06T12:59:01Z", "closed_at": "2016-03-06T12:59:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Commit 9da45c7 fixes an issue with displaying information about a scalar value not matching a pattern, which I've hit and will probably confuse the users of my software.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/31", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/31/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/31/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/31", "id": 123808547, "node_id": "MDU6SXNzdWUxMjM4MDg1NDc=", "number": 31, "title": "Question: recursive types?", "user": {"login": "AlexandreDecan", "id": 4992216, "node_id": "MDQ6VXNlcjQ5OTIyMTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4992216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexandreDecan", "html_url": "https://github.com/AlexandreDecan", "followers_url": "https://api.github.com/users/AlexandreDecan/followers", "following_url": "https://api.github.com/users/AlexandreDecan/following{/other_user}", "gists_url": "https://api.github.com/users/AlexandreDecan/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexandreDecan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexandreDecan/subscriptions", "organizations_url": "https://api.github.com/users/AlexandreDecan/orgs", "repos_url": "https://api.github.com/users/AlexandreDecan/repos", "events_url": "https://api.github.com/users/AlexandreDecan/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexandreDecan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-12-24T14:28:24Z", "updated_at": "2015-12-26T08:37:04Z", "closed_at": "2015-12-25T10:21:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\n\nI've a question about pykwalify's handling of nested types. Is it possible to define new recursive types? For example, if I want to represent a filesystem whose depth is not known at schema definition. How can I do that?\n\nHere is a fake example of such a YAML file: \n\n``` yaml\nroot:\n - file: file_1\n - file: file_2\n - directory: \n   - name: dir_a\n   - content: \n     - file: file_a_1\n     - file: file_a_2\n     - directory:\n       - name: dir_a_a\n       - content: \n          ...\n```\n\nIs this kind of nested structures already supported?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/30", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/30/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/30/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/30", "id": 121913019, "node_id": "MDU6SXNzdWUxMjE5MTMwMTk=", "number": 30, "title": "Port docs to readthedocs site", "user": {"login": "Grokzen", "id": 892309, "node_id": "MDQ6VXNlcjg5MjMwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/892309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Grokzen", "html_url": "https://github.com/Grokzen", "followers_url": "https://api.github.com/users/Grokzen/followers", "following_url": "https://api.github.com/users/Grokzen/following{/other_user}", "gists_url": "https://api.github.com/users/Grokzen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Grokzen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Grokzen/subscriptions", "organizations_url": "https://api.github.com/users/Grokzen/orgs", "repos_url": "https://api.github.com/users/Grokzen/repos", "events_url": "https://api.github.com/users/Grokzen/events{/privacy}", "received_events_url": "https://api.github.com/users/Grokzen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-12-13T10:59:34Z", "updated_at": "2016-03-07T20:02:43Z", "closed_at": "2016-03-07T20:02:43Z", "author_association": "OWNER", "active_lock_reason": null, "body": "All the docs should be ported and moved to a readthedocs site.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/29", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/29/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/29/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/29", "id": 119363323, "node_id": "MDU6SXNzdWUxMTkzNjMzMjM=", "number": 29, "title": "How to associate a schema to a YAML data?", "user": {"login": "nowox", "id": 1132849, "node_id": "MDQ6VXNlcjExMzI4NDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1132849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nowox", "html_url": "https://github.com/nowox", "followers_url": "https://api.github.com/users/nowox/followers", "following_url": "https://api.github.com/users/nowox/following{/other_user}", "gists_url": "https://api.github.com/users/nowox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nowox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nowox/subscriptions", "organizations_url": "https://api.github.com/users/nowox/orgs", "repos_url": "https://api.github.com/users/nowox/repos", "events_url": "https://api.github.com/users/nowox/events{/privacy}", "received_events_url": "https://api.github.com/users/nowox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/Grokzen/pykwalify/milestones/1", "html_url": "https://github.com/Grokzen/pykwalify/milestone/1", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/milestones/1/labels", "id": 1659561, "node_id": "MDk6TWlsZXN0b25lMTY1OTU2MQ==", "number": 1, "title": "2.0.0", "description": "", "creator": {"login": "Grokzen", "id": 892309, "node_id": "MDQ6VXNlcjg5MjMwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/892309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Grokzen", "html_url": "https://github.com/Grokzen", "followers_url": "https://api.github.com/users/Grokzen/followers", "following_url": "https://api.github.com/users/Grokzen/following{/other_user}", "gists_url": "https://api.github.com/users/Grokzen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Grokzen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Grokzen/subscriptions", "organizations_url": "https://api.github.com/users/Grokzen/orgs", "repos_url": "https://api.github.com/users/Grokzen/repos", "events_url": "https://api.github.com/users/Grokzen/events{/privacy}", "received_events_url": "https://api.github.com/users/Grokzen/received_events", "type": "User", "site_admin": false}, "open_issues": 3, "closed_issues": 2, "state": "open", "created_at": "2016-03-22T11:55:38Z", "updated_at": "2019-10-19T21:18:21Z", "due_on": null, "closed_at": null}, "comments": 9, "created_at": "2015-11-29T14:47:27Z", "updated_at": "2019-10-19T21:18:21Z", "closed_at": "2019-10-19T21:18:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In XML you can specify your XSD with a XML `xsi:schemaLocation` attribute. YAML specs lack with kind of information. \n\nSo in my opinion two options are possible: \n1. Using a global tag: \n\n```\n%YAML 1.2\n%SCHEMA foo.schema.yml\n\n---\nsome: data\n...\n```\n1. Having a special key in the YAML description\n\n```\n%YAML 1.2\n\n---\nsome: data\n<schema>:\n    location: 'foo.schema.yml'\n...\n```\n\nThe second method allows to embed the schema inside the YAML description, this could be nice. Also, it allows to partially apply a schema to a particular node:\n\n```\n%YAML 1.2\n\n---\nfoo:\n   bar:\n      - list\n<schema>:\n    foo:\n      bar: \n         <location>: 'foo.schema.yml'   \n...\n```\n\nI don't know which option would be the best...\n\nAny idea?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/25", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/25/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/25/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/25", "id": 108558694, "node_id": "MDU6SXNzdWUxMDg1NTg2OTQ=", "number": 25, "title": "Multi regex and matching-rule any reporting failure even though there should be a match.", "user": {"login": "comagnaw", "id": 11246499, "node_id": "MDQ6VXNlcjExMjQ2NDk5", "avatar_url": "https://avatars3.githubusercontent.com/u/11246499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/comagnaw", "html_url": "https://github.com/comagnaw", "followers_url": "https://api.github.com/users/comagnaw/followers", "following_url": "https://api.github.com/users/comagnaw/following{/other_user}", "gists_url": "https://api.github.com/users/comagnaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/comagnaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/comagnaw/subscriptions", "organizations_url": "https://api.github.com/users/comagnaw/orgs", "repos_url": "https://api.github.com/users/comagnaw/repos", "events_url": "https://api.github.com/users/comagnaw/events{/privacy}", "received_events_url": "https://api.github.com/users/comagnaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-27T20:24:52Z", "updated_at": "2015-09-30T21:34:25Z", "closed_at": "2015-09-30T21:34:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Data file:\n\n```\nfoobar1: 1\nfoobar1: 2\nbar2: 3\n```\n\nSchema file:\n\n```\ntype: map\nmatching-rule: 'any'\nmapping:\n  regex;([1-2]$):\n    type: int\n  regex;(^foobar): \n    type: int\n```\n\nI would assume that 'bar2' would pass using the matching-rule `any`.  However, I am getting the below failure message:\n\n```\nERROR - validation.invalid\n ERROR -  --- All found errors ---\n ERROR - [u\"Key 'bar2' does not match any regex '^foobar' or '[1-2]$'. Path: ''\"]\nTraceback (most recent call last):\n  File \"/Users/me/.venv/pykwalify/bin/pykwalify\", line 9, in <module>\n    load_entry_point('pykwalify==1.4.1', 'console_scripts', 'pykwalify')()\n  File \"build/bdist.macosx-10.10-intel/egg/pykwalify/cli.py\", line 84, in cli_entrypoint\n  File \"build/bdist.macosx-10.10-intel/egg/pykwalify/cli.py\", line 71, in run\n  File \"build/bdist.macosx-10.10-intel/egg/pykwalify/core.py\", line 157, in validate\npykwalify.errors.SchemaError: <SchemaError: error code 2: Schema validation failed:\n - Key 'bar2' does not match any regex '^foobar' or '[1-2]$'. Path: ''.: Path: '/'>\n\nOutput is from branch 'regex_fix_and_test' which is in pull request #24.\n\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/22", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/22/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/22/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/22", "id": 106627554, "node_id": "MDU6SXNzdWUxMDY2Mjc1NTQ=", "number": 22, "title": "regex;(blah[1-2]) - AttributeError: 'dict' object has no attribute 'encode'", "user": {"login": "comagnaw", "id": 11246499, "node_id": "MDQ6VXNlcjExMjQ2NDk5", "avatar_url": "https://avatars3.githubusercontent.com/u/11246499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/comagnaw", "html_url": "https://github.com/comagnaw", "followers_url": "https://api.github.com/users/comagnaw/followers", "following_url": "https://api.github.com/users/comagnaw/following{/other_user}", "gists_url": "https://api.github.com/users/comagnaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/comagnaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/comagnaw/subscriptions", "organizations_url": "https://api.github.com/users/comagnaw/orgs", "repos_url": "https://api.github.com/users/comagnaw/repos", "events_url": "https://api.github.com/users/comagnaw/events{/privacy}", "received_events_url": "https://api.github.com/users/comagnaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-09-15T19:25:49Z", "updated_at": "2015-09-30T21:34:19Z", "closed_at": "2015-09-30T21:34:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using the below schema:\n\n```\nmap:\n  regex;(blah[1-2]):\n    type: int\n```\n\nagainst this data:\n\n```\nblah1: 1\nblah2: 1\nblah3: 1\n```\n\nI am getting the below stacktrace:\n\n```\n    self._validate_mapping(value, rule, path, errors, done=None)\n  File \"/Users/me/.pyenvs/demo_dc/lib/python2.7/site-packages/pykwalify/core.py\", line 496, in _validate_mapping\n    value=value.encode('unicode_escape'),\nAttributeError: 'dict' object has no attribute 'encode'\n```\n\nI would have expected to see a more descriptive warning which indicates a bad keyword at 'blah3'.  If I update the schema to the below, I get clean results:\n\n```\nmap:\n  regex;(blah[1-3]):\n    type: int\n```\n\nAre strict regex matches supported for mapping keyword checks?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/20", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/20/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/20/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/20", "id": 103535051, "node_id": "MDU6SXNzdWUxMDM1MzUwNTE=", "number": 20, "title": "Include tests", "user": {"login": "jlec", "id": 79732, "node_id": "MDQ6VXNlcjc5NzMy", "avatar_url": "https://avatars0.githubusercontent.com/u/79732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlec", "html_url": "https://github.com/jlec", "followers_url": "https://api.github.com/users/jlec/followers", "following_url": "https://api.github.com/users/jlec/following{/other_user}", "gists_url": "https://api.github.com/users/jlec/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlec/subscriptions", "organizations_url": "https://api.github.com/users/jlec/orgs", "repos_url": "https://api.github.com/users/jlec/repos", "events_url": "https://api.github.com/users/jlec/events{/privacy}", "received_events_url": "https://api.github.com/users/jlec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-08-27T15:24:55Z", "updated_at": "2015-08-31T06:06:36Z", "closed_at": "2015-08-31T06:06:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Downstream projects like Linux distributions like to test the packages during installation. Please include the tests needed for the test suite in you releases at pypi.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/19", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/19/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/19/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/19", "id": 97543272, "node_id": "MDU6SXNzdWU5NzU0MzI3Mg==", "number": 19, "title": "Failing with Unicode chars.", "user": {"login": "vandersonmota", "id": 88955, "node_id": "MDQ6VXNlcjg4OTU1", "avatar_url": "https://avatars3.githubusercontent.com/u/88955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vandersonmota", "html_url": "https://github.com/vandersonmota", "followers_url": "https://api.github.com/users/vandersonmota/followers", "following_url": "https://api.github.com/users/vandersonmota/following{/other_user}", "gists_url": "https://api.github.com/users/vandersonmota/gists{/gist_id}", "starred_url": "https://api.github.com/users/vandersonmota/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vandersonmota/subscriptions", "organizations_url": "https://api.github.com/users/vandersonmota/orgs", "repos_url": "https://api.github.com/users/vandersonmota/repos", "events_url": "https://api.github.com/users/vandersonmota/events{/privacy}", "received_events_url": "https://api.github.com/users/vandersonmota/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-07-27T20:00:28Z", "updated_at": "2015-08-03T19:50:49Z", "closed_at": "2015-08-03T19:49:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "If i have the schema:\n\n``` yaml\n  type: map\n  mapping:\n    msg:\n      type: str\n```\n\nand the data file:\n\n``` yaml\nmsg:\n    \"Al\u00f4 do Brasil!!\"\n```\n\ni get this\n\n```\nTraceback (most recent call last):\n  File \"/home/user/workspace/.virtualenvs/project/bin/pykwalify\", line 9, in <module>\n    load_entry_point('pykwalify==1.3.0', 'console_scripts', 'pykwalify')()\n  File \"/home/user/workspace/.virtualenvs/project/local/lib/python2.7/site-packages/pykwalify/cli.py\", line 84, in cli_entrypoint\n    run(parse_cli())\n  File \"/home/user/workspace/.virtualenvs/project/local/lib/python2.7/site-packages/pykwalify/cli.py\", line 71, in run\n    c.validate()\n  File \"/home/user/workspace/.virtualenvs/project/local/lib/python2.7/site-packages/pykwalify/core.py\", line 144, in validate\n    errors = self._start_validate(self.source)\n  File \"/home/user/workspace/.virtualenvs/project/local/lib/python2.7/site-packages/pykwalify/core.py\", line 189, in _start_validate\n    self._validate(value, root_rule, path, errors, done)\n  File \"/home/user/workspace/.virtualenvs/project/local/lib/python2.7/site-packages/pykwalify/core.py\", line 209, in _validate\n    self._validate_mapping(value, rule, path, errors, done=None)\n  File \"/home/user/workspace/.virtualenvs/project/local/lib/python2.7/site-packages/pykwalify/core.py\", line 522, in _validate_mapping\n    self._validate(v, r, \"{}/{}\".format(path, k), errors, done)\n  File \"/home/user/workspace/.virtualenvs/project/local/lib/python2.7/site-packages/pykwalify/core.py\", line 207, in _validate\n    self._validate_sequence(value, rule, path, errors, done=None)\n  File \"/home/user/workspace/.virtualenvs/project/local/lib/python2.7/site-packages/pykwalify/core.py\", line 302, in _validate_sequence\n    self._validate(item, r, \"{}/{}\".format(path, i), tmp_errors, done)\n  File \"/home/user/workspace/.virtualenvs/project/local/lib/python2.7/site-packages/pykwalify/core.py\", line 205, in _validate\n    self._validate_include(value, rule, path, errors, done=None)\n  File \"/home/user/workspace/.virtualenvs/project/local/lib/python2.7/site-packages/pykwalify/core.py\", line 265, in _validate_include\n    self._validate(value, partial_schema_rule, path, errors, done)\n  File \"/home/user/workspace/.virtualenvs/project/local/lib/python2.7/site-packages/pykwalify/core.py\", line 209, in _validate\n    self._validate_mapping(value, rule, path, errors, done=None)\n  File \"/home/user/workspace/.virtualenvs/project/local/lib/python2.7/site-packages/pykwalify/core.py\", line 469, in _validate_mapping\n    log.debug(\" + rr: {} {}\".format(k, v))\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 13-14: ordinal not in range(128)\n```\n\nAny thoughts?\n\n[]'s\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/18", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/18/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/18/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/18", "id": 97042092, "node_id": "MDU6SXNzdWU5NzA0MjA5Mg==", "number": 18, "title": "Recursive schema definition fails", "user": {"login": "vandersonmota", "id": 88955, "node_id": "MDQ6VXNlcjg4OTU1", "avatar_url": "https://avatars3.githubusercontent.com/u/88955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vandersonmota", "html_url": "https://github.com/vandersonmota", "followers_url": "https://api.github.com/users/vandersonmota/followers", "following_url": "https://api.github.com/users/vandersonmota/following{/other_user}", "gists_url": "https://api.github.com/users/vandersonmota/gists{/gist_id}", "starred_url": "https://api.github.com/users/vandersonmota/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vandersonmota/subscriptions", "organizations_url": "https://api.github.com/users/vandersonmota/orgs", "repos_url": "https://api.github.com/users/vandersonmota/repos", "events_url": "https://api.github.com/users/vandersonmota/events{/privacy}", "received_events_url": "https://api.github.com/users/vandersonmota/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-07-24T12:30:15Z", "updated_at": "2015-07-28T18:17:35Z", "closed_at": "2015-07-27T18:21:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to define a tree-like schema:\n\n``` yaml\ntype: map\nmapping: &nodeid\n  name:\n    type: str\n  edges:\n    type: seq\n    sequence:\n      - type: map\n        mapping: *nodeid\n```\n\nfor something like this:\n\n``` yaml\nname: 'Top'\nedges:\n  -\n    name: '2nd'\n    edges:\n      -\n        name: '3rd'\n```\n\nThen i get this:\n\n``` text\n  File \"/home/user/workspace/.virtualenvs/pykwalify/pykwalify/pykwalify/rule.py\", line 130, in init\n    func_mapping[k](v, rule, path)\n  File \"/home/user/workspace/.virtualenvs/pykwalify/pykwalify/pykwalify/rule.py\", line 405, in init_mapping_value\n    rule.init(v, \"{}/mapping/{}\".format(path, k))\n  File \"/home/user/workspace/.virtualenvs/pykwalify/pykwalify/pykwalify/rule.py\", line 102, in init\n    self.init_type_value(t, rule, path)\n  File \"/home/user/workspace/.virtualenvs/pykwalify/pykwalify/pykwalify/rule.py\", line 177, in init_type_value\n    log.debug(\"Type: {} {}\".format(v, rule))\n  File \"/home/user/workspace/.virtualenvs/pykwalify/pykwalify/pykwalify/rule.py\", line 65, in __str__\n    return \"Rule: {}\".format(str(self._schema_str))\nRuntimeError: maximum recursion depth exceeded while getting the repr of a list\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/16", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/16/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/16/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/16", "id": 72946936, "node_id": "MDU6SXNzdWU3Mjk0NjkzNg==", "number": 16, "title": "Sequence of Map - `AttributeError: 'str' object has no attribute 'items'`` when data contains Map in Map", "user": {"login": "quamilek", "id": 695791, "node_id": "MDQ6VXNlcjY5NTc5MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/695791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quamilek", "html_url": "https://github.com/quamilek", "followers_url": "https://api.github.com/users/quamilek/followers", "following_url": "https://api.github.com/users/quamilek/following{/other_user}", "gists_url": "https://api.github.com/users/quamilek/gists{/gist_id}", "starred_url": "https://api.github.com/users/quamilek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quamilek/subscriptions", "organizations_url": "https://api.github.com/users/quamilek/orgs", "repos_url": "https://api.github.com/users/quamilek/repos", "events_url": "https://api.github.com/users/quamilek/events{/privacy}", "received_events_url": "https://api.github.com/users/quamilek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-05-04T07:42:02Z", "updated_at": "2015-05-04T19:00:04Z", "closed_at": "2015-05-04T19:00:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Following schema describes a sequence map:\n\n**schema.yml**\n\n``` yaml\ntype: map\nrequired: yes\nmapping:\n  \"employees\":\n    type: seq\n    required: yes\n    sequence:\n      - type: map\n        required: yes\n        mapping:\n          \"name\": { type: str, required: yes }\n```\n\nfor data containing map in map:\n\n**data.yml**\n\n``` yaml\nemployees:\n    name: John Doe\n```\n\nwhen I try to check this data I get following exceptions:\n\n``` bash\n$ pykwalify -d data.yml -s schema.yml\nTraceback (most recent call last):\n  File \"/home/vagrant/tycho/bin/pykwalify\", line 9, in <module>\n    load_entry_point('pykwalify==1.1.0', 'console_scripts', 'pykwalify')()\n  File \"/home/lib/python2.7/site-packages/pykwalify/cli.py\", line 79, in cli_entrypoint\n    run(parse_cli())\n  File \"/home/lib/python2.7/site-packages/pykwalify/cli.py\", line 66, in run\n    c.validate()\n  File \"/home/lib/python2.7/site-packages/pykwalify/core.py\", line 108, in validate\n    errors = self._start_validate(self.source)\n  File \"/home/lib/python2.7/site-packages/pykwalify/core.py\", line 151, in _start_validate\n    self._validate(value, root_rule, path, errors, done)\n  File \"/home/lib/python2.7/site-packages/pykwalify/core.py\", line 172, in _validate\n    self._validate_mapping(value, rule, path, errors, done=None)\n  File \"/home/lib/python2.7/site-packages/pykwalify/core.py\", line 352, in _validate_mapping\n    self._validate(v, r, \"{}/{}\".format(path, k), errors, done)\n  File \"/home/lib/python2.7/site-packages/pykwalify/core.py\", line 170, in _validate\n    self._validate_sequence(value, rule, path, errors, done=None)\n  File \"/home/lib/python2.7/site-packages/pykwalify/core.py\", line 216, in _validate_sequence\n    self._validate(item, r, \"{}/{}\".format(path, i), errors, done)\n  File \"/home/lib/python2.7/site-packages/pykwalify/core.py\", line 172, in _validate\n    self._validate_mapping(value, rule, path, errors, done=None)\n  File \"/home/lib/python2.7/site-packages/pykwalify/core.py\", line 310, in _validate_mapping\n    for k, v in value.items():\nAttributeError: 'str' object has no attribute 'items'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/15", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/15/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/15/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/15", "id": 66372191, "node_id": "MDU6SXNzdWU2NjM3MjE5MQ==", "number": 15, "title": "Align timestamp format with the yaml standard library", "user": {"login": "sitaktif", "id": 57383, "node_id": "MDQ6VXNlcjU3Mzgz", "avatar_url": "https://avatars0.githubusercontent.com/u/57383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sitaktif", "html_url": "https://github.com/sitaktif", "followers_url": "https://api.github.com/users/sitaktif/followers", "following_url": "https://api.github.com/users/sitaktif/following{/other_user}", "gists_url": "https://api.github.com/users/sitaktif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sitaktif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sitaktif/subscriptions", "organizations_url": "https://api.github.com/users/sitaktif/orgs", "repos_url": "https://api.github.com/users/sitaktif/repos", "events_url": "https://api.github.com/users/sitaktif/events{/privacy}", "received_events_url": "https://api.github.com/users/sitaktif/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-04-04T22:06:28Z", "updated_at": "2015-04-05T22:54:04Z", "closed_at": "2015-04-04T22:27:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a suggestion about what formats to support for the `timestamp` format: why don't we use `yaml.dump(the_date_value)` to support exactly what the actual yaml library supports? We can check the the call returns a `datetime`.\n\nThat way there is no question of whether we accept invalid formats (or whether we throw an error on a yaml-compliant format).\n\nUsing the yaml library to parse the date delegates this kind of decision to the people maintaining the yaml lib and ensures the formats are aligned.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/14", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/14/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/14/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/14", "id": 60604807, "node_id": "MDU6SXNzdWU2MDYwNDgwNw==", "number": 14, "title": "The \"any\" type does not accept non-implemented types like timestamp", "user": {"login": "sitaktif", "id": 57383, "node_id": "MDQ6VXNlcjU3Mzgz", "avatar_url": "https://avatars0.githubusercontent.com/u/57383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sitaktif", "html_url": "https://github.com/sitaktif", "followers_url": "https://api.github.com/users/sitaktif/followers", "following_url": "https://api.github.com/users/sitaktif/following{/other_user}", "gists_url": "https://api.github.com/users/sitaktif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sitaktif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sitaktif/subscriptions", "organizations_url": "https://api.github.com/users/sitaktif/orgs", "repos_url": "https://api.github.com/users/sitaktif/repos", "events_url": "https://api.github.com/users/sitaktif/events{/privacy}", "received_events_url": "https://api.github.com/users/sitaktif/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2015-03-11T03:23:08Z", "updated_at": "2015-04-04T22:04:36Z", "closed_at": "2015-04-04T12:45:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "The documentation specifies that `any` accepts any _implemented_ type.\n\nIs there a reason behind throwing a validation error when one uses other non-implementd types like timestamps?\n\nI understand that a possible fix in my case is to send a PR to add timestamps support - and I'll do that if I get around to it :-) \n\nThanks,\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/13", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/13/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/13/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/13", "id": 59031133, "node_id": "MDU6SXNzdWU1OTAzMTEzMw==", "number": 13, "title": "Pattern matching in a sequence?", "user": {"login": "retr0h", "id": 9895, "node_id": "MDQ6VXNlcjk4OTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/9895?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retr0h", "html_url": "https://github.com/retr0h", "followers_url": "https://api.github.com/users/retr0h/followers", "following_url": "https://api.github.com/users/retr0h/following{/other_user}", "gists_url": "https://api.github.com/users/retr0h/gists{/gist_id}", "starred_url": "https://api.github.com/users/retr0h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retr0h/subscriptions", "organizations_url": "https://api.github.com/users/retr0h/orgs", "repos_url": "https://api.github.com/users/retr0h/repos", "events_url": "https://api.github.com/users/retr0h/events{/privacy}", "received_events_url": "https://api.github.com/users/retr0h/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-02-26T07:24:35Z", "updated_at": "2015-02-26T08:15:05Z", "closed_at": "2015-02-26T08:15:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it not possible to check a pattern against a sequence? \n\n```\ndata:\n  deploy_args:\n    allowed_address_pairs:\n      - 10.10.10.10\nschema:\n  type: map\n  mapping:\n    deploy_args:\n      required: true\n      type: map\n      mapping:\n        allowed_address_pairs:\n          type: seq\n          required: true\n          pattern: ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$\n          sequence:\n            - type: str\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/10", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/10/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/10/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/10", "id": 52417086, "node_id": "MDU6SXNzdWU1MjQxNzA4Ng==", "number": 10, "title": "Regex Matching Issues", "user": {"login": "run2fail", "id": 9140871, "node_id": "MDQ6VXNlcjkxNDA4NzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/9140871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/run2fail", "html_url": "https://github.com/run2fail", "followers_url": "https://api.github.com/users/run2fail/followers", "following_url": "https://api.github.com/users/run2fail/following{/other_user}", "gists_url": "https://api.github.com/users/run2fail/gists{/gist_id}", "starred_url": "https://api.github.com/users/run2fail/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/run2fail/subscriptions", "organizations_url": "https://api.github.com/users/run2fail/orgs", "repos_url": "https://api.github.com/users/run2fail/repos", "events_url": "https://api.github.com/users/run2fail/events{/privacy}", "received_events_url": "https://api.github.com/users/run2fail/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2014-12-18T21:14:33Z", "updated_at": "2014-12-24T12:20:33Z", "closed_at": "2014-12-22T16:34:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI have the following example YAML file:\n\n```\nfoo:\n```\n\nand the following schema file:\n\n```\ntype:           map\nmatching-rule:  \"any\"\nmapping:\n    regex;(^[a-zA-Z]TEST[a-zA-Z\\d]*$):\n        type:   map\n        mapping:\n            \"bar\":\n                type:       str\n```\n\nSomehow the regex matches the key although it shouldn't. Am I missing something?\nI am using pykwalify (14.08) from PyPi.\n\nBased on your test file 17s.yaml I also tried the following. Data file:\n\n```\nnotmic:\n- input\n  foo\n- output\n  bar\n```\n\nSchema file:\n\n```\ntype: map\nmatching-rule: \"any\"\nmapping:\n  regex;(^mi.+$):\n    type: seq\n    sequence:\n      - type: str\n```\n\nAgain the file matches the schema, despite the \"not\" prefix to \"mic\".\n\nKind regards,\n\nBB\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/7", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/7/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/7/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/7", "id": 36344189, "node_id": "MDU6SXNzdWUzNjM0NDE4OQ==", "number": 7, "title": "Constraint on the length of a sequence?", "user": {"login": "gschmottlach-xse", "id": 1678819, "node_id": "MDQ6VXNlcjE2Nzg4MTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1678819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gschmottlach-xse", "html_url": "https://github.com/gschmottlach-xse", "followers_url": "https://api.github.com/users/gschmottlach-xse/followers", "following_url": "https://api.github.com/users/gschmottlach-xse/following{/other_user}", "gists_url": "https://api.github.com/users/gschmottlach-xse/gists{/gist_id}", "starred_url": "https://api.github.com/users/gschmottlach-xse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gschmottlach-xse/subscriptions", "organizations_url": "https://api.github.com/users/gschmottlach-xse/orgs", "repos_url": "https://api.github.com/users/gschmottlach-xse/repos", "events_url": "https://api.github.com/users/gschmottlach-xse/events{/privacy}", "received_events_url": "https://api.github.com/users/gschmottlach-xse/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2014-06-24T00:37:39Z", "updated_at": "2014-06-26T12:30:31Z", "closed_at": "2014-06-26T12:30:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible to allow the 'range' or 'length' directive be applied to a sequence type? This would allow the schema to enforce a min/max sequence length. Some of my schema's contain a sequence with a minimum (or maximum) number of elements. Allowing either range/length to be extended to sequences would be helpful enforcing this constraint instead of relying on a secondary check after the input source has been validated by pykwalify. Is this do-able?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/6", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/6/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/6/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/6", "id": 36302308, "node_id": "MDU6SXNzdWUzNjMwMjMwOA==", "number": 6, "title": "length constraint passes for empty string", "user": {"login": "gschmottlach-xse", "id": 1678819, "node_id": "MDQ6VXNlcjE2Nzg4MTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1678819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gschmottlach-xse", "html_url": "https://github.com/gschmottlach-xse", "followers_url": "https://api.github.com/users/gschmottlach-xse/followers", "following_url": "https://api.github.com/users/gschmottlach-xse/following{/other_user}", "gists_url": "https://api.github.com/users/gschmottlach-xse/gists{/gist_id}", "starred_url": "https://api.github.com/users/gschmottlach-xse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gschmottlach-xse/subscriptions", "organizations_url": "https://api.github.com/users/gschmottlach-xse/orgs", "repos_url": "https://api.github.com/users/gschmottlach-xse/repos", "events_url": "https://api.github.com/users/gschmottlach-xse/events{/privacy}", "received_events_url": "https://api.github.com/users/gschmottlach-xse/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-06-23T15:34:44Z", "updated_at": "2014-06-23T23:06:57Z", "closed_at": "2014-06-23T23:06:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Let's say I have a schema defined as follows:\n\n```\ntype: map\nmapping:\n    streams:\n        type: seq\n        required: True\n        sequence:\n            -   type: map\n                mapping:\n                    name:\n                        type: str\n                        length:\n                            min: 1\n                        required: True\n                    sampleRateMultiple:\n                        type: int\n                        required: True\n```\n\nGiven the following data:\n\n```\nstreams:\n  - name:\n    sampleRateMultiple: 1\n\n  - name: media\n    sampleRateMultiple: 2\n```\n\nI would expect the constraint on the 'name' field would fail since it does _not_ have an associated value. With pykwalify this validates successfully.  If I fill in a name (with at least one character) the 'length' constraint will work correctly. So it seems a 'null' name field causes some issue.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/4", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/4/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/4/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/4", "id": 35211922, "node_id": "MDU6SXNzdWUzNTIxMTkyMg==", "number": 4, "title": "Remove keyword pattern in favor of regex;<regex-pattern>", "user": {"login": "Grokzen", "id": 892309, "node_id": "MDQ6VXNlcjg5MjMwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/892309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Grokzen", "html_url": "https://github.com/Grokzen", "followers_url": "https://api.github.com/users/Grokzen/followers", "following_url": "https://api.github.com/users/Grokzen/following{/other_user}", "gists_url": "https://api.github.com/users/Grokzen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Grokzen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Grokzen/subscriptions", "organizations_url": "https://api.github.com/users/Grokzen/orgs", "repos_url": "https://api.github.com/users/Grokzen/repos", "events_url": "https://api.github.com/users/Grokzen/events{/privacy}", "received_events_url": "https://api.github.com/users/Grokzen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-06-07T16:20:53Z", "updated_at": "2014-06-07T18:32:40Z", "closed_at": "2014-06-07T18:32:40Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The keyword \"pattern\" is no longer useful at the top level of map validation because of the new rule \"regex;\" that works alot better.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/3", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/3/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/3/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/3", "id": 35211778, "node_id": "MDU6SXNzdWUzNTIxMTc3OA==", "number": 3, "title": "Implement partial schemas", "user": {"login": "Grokzen", "id": 892309, "node_id": "MDQ6VXNlcjg5MjMwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/892309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Grokzen", "html_url": "https://github.com/Grokzen", "followers_url": "https://api.github.com/users/Grokzen/followers", "following_url": "https://api.github.com/users/Grokzen/following{/other_user}", "gists_url": "https://api.github.com/users/Grokzen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Grokzen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Grokzen/subscriptions", "organizations_url": "https://api.github.com/users/Grokzen/orgs", "repos_url": "https://api.github.com/users/Grokzen/repos", "events_url": "https://api.github.com/users/Grokzen/events{/privacy}", "received_events_url": "https://api.github.com/users/Grokzen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2014-06-07T16:14:16Z", "updated_at": "2015-02-26T08:08:53Z", "closed_at": "2014-06-23T23:09:53Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I like the idea and here is how i think it should be implemented\n- schema: can be the new keyword for this but because i wont use any native YAML abilities i have to add a some new keyword inside schema: like schema-name: to enable name tagging.\n- schema: can only be specified at top level of a file for easy pre parsing of all partials before any other rule is parsed.\n- I dunno yet how to fix partial inside partial because that can lead to infinite recursion problems if done wrong. I have to work abit on this to get it right.\n- schema can easily be parsed as a Rule() so not much new has to be done there.\n- A new keyword have to be created for when to include a partial. An easy one would be \"include-schema\" and that can only be used at the same place/level where the keyword \"type\" can be used today. Will see how that works but it should work out i think.\n- It should be possible to specify more then 1 schema file via cli via multiple \"-s schema.yaml -s schema2.yaml ...\" to give the option to have a file with predefined partials allready.\n- Overriding schema partials should not be possible, if defined in 2 files then error will be thrown.\n- I do not think that currently it should be possible to mix a partial with some other defined rule, for example a partial cannot be a map and that should be merged with another map just to extend the ammount of keys that is possible to validate. This would be a future improvment but not in the first itteration because there is some other things that i have to change in the validation process for that to work good.\n\nI do not think that i will make an option to directly include another file from inside a schema like this\n\n``` yaml\ntype: map\nrequired: True\nmapping:\n  polygon:\n    type: seq\n    sequence:\n      - include-schema:\n          file: /foo/bar.yaml\n```\n\nMaybe in a second itteration of the feature but not in the first one.\n\nYes both ways of including another file will be supported, via cli -s and as a argument to Core() as a list of multiple source_files that is parsed in sequence.\n\nOne problem that i thought of tho is that schema: as a keyword will not work because then it will only be possible to have one schema: key per file. The two solutions is to first have a list that then contains all partials but that will make it harder to integrate them into the same file as the main schema that wants to include the partial. The second solution that i am thinking of is to use the same feature as regex; and do \"schema;schema-id:\" because then it is possible to have any number of schema partials in one file. Then you could do\n\n``` yaml\nschema;seq:\n  type: seq\n  sequence:\n    - type: int\n\nschema;map\n  type: map\n  mapping:\n    x:\n      type: int\n\ntype: map\nmapping:\n  polygon:\n    include: map\n  square:\n    include: seq\n```\n\nAnd with this setup then it could be possible to have all defenitions in the same file or you could split-up all partials into one file and the main schema in a separate file.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Grokzen/pykwalify/issues/2", "repository_url": "https://api.github.com/repos/Grokzen/pykwalify", "labels_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/2/comments", "events_url": "https://api.github.com/repos/Grokzen/pykwalify/issues/2/events", "html_url": "https://github.com/Grokzen/pykwalify/issues/2", "id": 34675881, "node_id": "MDU6SXNzdWUzNDY3NTg4MQ==", "number": 2, "title": "pykwalify under Python 2.7.X?", "user": {"login": "gschmottlach-xse", "id": 1678819, "node_id": "MDQ6VXNlcjE2Nzg4MTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1678819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gschmottlach-xse", "html_url": "https://github.com/gschmottlach-xse", "followers_url": "https://api.github.com/users/gschmottlach-xse/followers", "following_url": "https://api.github.com/users/gschmottlach-xse/following{/other_user}", "gists_url": "https://api.github.com/users/gschmottlach-xse/gists{/gist_id}", "starred_url": "https://api.github.com/users/gschmottlach-xse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gschmottlach-xse/subscriptions", "organizations_url": "https://api.github.com/users/gschmottlach-xse/orgs", "repos_url": "https://api.github.com/users/gschmottlach-xse/repos", "events_url": "https://api.github.com/users/gschmottlach-xse/events{/privacy}", "received_events_url": "https://api.github.com/users/gschmottlach-xse/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 31, "created_at": "2014-05-30T19:54:28Z", "updated_at": "2014-07-25T19:26:36Z", "closed_at": "2014-06-07T16:14:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I know your README stated that Python 2.7.x is not supported (and never will be) but it's not necessary clear this is indeed true. I removed the Python version check in runtest.py and ran your unit tests. Surprisingly, under Python 2.7.3 all of these tests passed! Is this expected or are you aware of scenarios where you explicitly used Python 3.X.Y features that have no hope of working under Python 2.7.X?\n\nObviously, I'm interested in getting pykwalify to work under Python 2.7.x. It would appear that it already works (at least the unit-tests pass) or only requires minor adjustments. I'm just trying to scope out the effort necessary to fork your project and create a variant that is Python 2.7.x compatible. Looks like you've actually done the work but arbritrarily decided to only claim 3.X.Y support moving forward (maybe to keep the door open for future Python 3.X.Y-specific enhancements).\n\nAny feedback would be appreciated.\n\nGlenn\n", "performed_via_github_app": null, "score": 1.0}]}