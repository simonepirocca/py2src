{"total_count": 108, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/241", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/241/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/241/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/241/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/241", "id": 696370125, "node_id": "MDU6SXNzdWU2OTYzNzAxMjU=", "number": 241, "title": "question about quotedstring", "user": {"login": "yldiscover", "id": 46197985, "node_id": "MDQ6VXNlcjQ2MTk3OTg1", "avatar_url": "https://avatars2.githubusercontent.com/u/46197985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yldiscover", "html_url": "https://github.com/yldiscover", "followers_url": "https://api.github.com/users/yldiscover/followers", "following_url": "https://api.github.com/users/yldiscover/following{/other_user}", "gists_url": "https://api.github.com/users/yldiscover/gists{/gist_id}", "starred_url": "https://api.github.com/users/yldiscover/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yldiscover/subscriptions", "organizations_url": "https://api.github.com/users/yldiscover/orgs", "repos_url": "https://api.github.com/users/yldiscover/repos", "events_url": "https://api.github.com/users/yldiscover/events{/privacy}", "received_events_url": "https://api.github.com/users/yldiscover/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-09-09T03:29:29Z", "updated_at": "2020-09-10T15:03:09Z", "closed_at": "2020-09-10T15:03:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n  A = 'abc'\r\n  B = 'abc\\\\'\r\n  D= 'abc\\\\\\\\'\r\n\r\n who to match all above three string with quotedstring? \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/240", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/240/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/240/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/240/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/240", "id": 695946463, "node_id": "MDU6SXNzdWU2OTU5NDY0NjM=", "number": 240, "title": "How to get the delimiter of delimitedList?", "user": {"login": "yldiscover", "id": 46197985, "node_id": "MDQ6VXNlcjQ2MTk3OTg1", "avatar_url": "https://avatars2.githubusercontent.com/u/46197985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yldiscover", "html_url": "https://github.com/yldiscover", "followers_url": "https://api.github.com/users/yldiscover/followers", "following_url": "https://api.github.com/users/yldiscover/following{/other_user}", "gists_url": "https://api.github.com/users/yldiscover/gists{/gist_id}", "starred_url": "https://api.github.com/users/yldiscover/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yldiscover/subscriptions", "organizations_url": "https://api.github.com/users/yldiscover/orgs", "repos_url": "https://api.github.com/users/yldiscover/repos", "events_url": "https://api.github.com/users/yldiscover/events{/privacy}", "received_events_url": "https://api.github.com/users/yldiscover/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-09-08T14:56:26Z", "updated_at": "2020-09-08T15:33:22Z", "closed_at": "2020-09-08T15:33:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n  When using delimitedList(x,delim=Word('+-')) to match a pattern,like  a + b - c, where the '+-' is the delimiter.\r\n  But delimitedList only return a b c, not returning the delimiter.\r\n  So, how to get the delimiter of delimitedList?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/238", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/238/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/238/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/238/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/238", "id": 688654464, "node_id": "MDU6SXNzdWU2ODg2NTQ0NjQ=", "number": 238, "title": "Citation", "user": {"login": "TMiguelT", "id": 5019367, "node_id": "MDQ6VXNlcjUwMTkzNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5019367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TMiguelT", "html_url": "https://github.com/TMiguelT", "followers_url": "https://api.github.com/users/TMiguelT/followers", "following_url": "https://api.github.com/users/TMiguelT/following{/other_user}", "gists_url": "https://api.github.com/users/TMiguelT/gists{/gist_id}", "starred_url": "https://api.github.com/users/TMiguelT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TMiguelT/subscriptions", "organizations_url": "https://api.github.com/users/TMiguelT/orgs", "repos_url": "https://api.github.com/users/TMiguelT/repos", "events_url": "https://api.github.com/users/TMiguelT/events{/privacy}", "received_events_url": "https://api.github.com/users/TMiguelT/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-30T05:02:25Z", "updated_at": "2020-09-01T14:24:34Z", "closed_at": "2020-09-01T14:24:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi @ptmcg, just wondering the preferred way to cite PyParsing. Should I cite your book:\r\nMcGuire, P. (2007). Getting started with pyparsing. \" O'Reilly Media, Inc.\"\r\n\r\nIf yes, I wonder if this info should be somewhere in the readme or the docs?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/237", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/237/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/237/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/237/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/237", "id": 680526520, "node_id": "MDU6SXNzdWU2ODA1MjY1MjA=", "number": 237, "title": "Inconsistent tokens in parse action", "user": {"login": "jgrey4296", "id": 5943270, "node_id": "MDQ6VXNlcjU5NDMyNzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/5943270?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgrey4296", "html_url": "https://github.com/jgrey4296", "followers_url": "https://api.github.com/users/jgrey4296/followers", "following_url": "https://api.github.com/users/jgrey4296/following{/other_user}", "gists_url": "https://api.github.com/users/jgrey4296/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgrey4296/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgrey4296/subscriptions", "organizations_url": "https://api.github.com/users/jgrey4296/orgs", "repos_url": "https://api.github.com/users/jgrey4296/repos", "events_url": "https://api.github.com/users/jgrey4296/events{/privacy}", "received_events_url": "https://api.github.com/users/jgrey4296/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-08-17T21:07:41Z", "updated_at": "2020-08-20T19:33:29Z", "closed_at": "2020-08-18T18:41:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using PyParsing 2.4.7, I have the following situation:\r\n\r\nIn a Parse Action, I get a named result:\r\n```\r\ndef my_parse_action(toks):\r\n   # [0] to strip away wrapping ParseResults\r\n   result = toks['num'][0]\r\n   assert(isinstance(result, tuple))\r\n   return something\r\n```\r\nIf I import that module, the parser works fine.\r\nIf I import that module, using `importlib`, the parser works fine.\r\nIf I import that module, `<<`'ing the parser into a `Forward`, the parser works fine.\r\nIf I import that module in a `unittest` discovered file, the parser works fine.\r\n\r\n*However*: If I do some un-simplifiable combination of these... the `toks['num']` in the parse action is *no longer a `ParseResults` itself*. \r\n\r\nThe `toks['num']` in question is built by another parser, works fine, and I return an explicit `ParseResults(tuple)` from it.\r\nIf I *don't* return a `ParseResults` from that action, instead just returning a tuple... The entire above situation inverts, the `toks['num']` being a ParseResults *only* when the hard to identify conditions occur.\r\n\r\nThe only thing that resolves the issue is using the base parser on its own, *before* I use the parser which uses the `Forward` that has the base parser assigned to it.\r\nThis sounds like some sort of caching issue or lazy loading. Calling `importlib.invalidate_cache` does not resolve the issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/235", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/235/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/235/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/235", "id": 679689001, "node_id": "MDU6SXNzdWU2Nzk2ODkwMDE=", "number": 235, "title": "What is the differece between \"<<\" and \"<<=\"?", "user": {"login": "yldiscover", "id": 46197985, "node_id": "MDQ6VXNlcjQ2MTk3OTg1", "avatar_url": "https://avatars2.githubusercontent.com/u/46197985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yldiscover", "html_url": "https://github.com/yldiscover", "followers_url": "https://api.github.com/users/yldiscover/followers", "following_url": "https://api.github.com/users/yldiscover/following{/other_user}", "gists_url": "https://api.github.com/users/yldiscover/gists{/gist_id}", "starred_url": "https://api.github.com/users/yldiscover/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yldiscover/subscriptions", "organizations_url": "https://api.github.com/users/yldiscover/orgs", "repos_url": "https://api.github.com/users/yldiscover/repos", "events_url": "https://api.github.com/users/yldiscover/events{/privacy}", "received_events_url": "https://api.github.com/users/yldiscover/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-16T04:55:53Z", "updated_at": "2020-08-16T05:09:11Z", "closed_at": "2020-08-16T05:09:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n What is the differece between \"<<\" and \"<<=\"?\r\n I found the \"<<=\" symbol in lua_parser.py, but I can not understand its usage.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/232", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/232/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/232/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/232/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/232", "id": 677479920, "node_id": "MDU6SXNzdWU2Nzc0Nzk5MjA=", "number": 232, "title": "Some question about the Lua_parser example.", "user": {"login": "yldiscover", "id": 46197985, "node_id": "MDQ6VXNlcjQ2MTk3OTg1", "avatar_url": "https://avatars2.githubusercontent.com/u/46197985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yldiscover", "html_url": "https://github.com/yldiscover", "followers_url": "https://api.github.com/users/yldiscover/followers", "following_url": "https://api.github.com/users/yldiscover/following{/other_user}", "gists_url": "https://api.github.com/users/yldiscover/gists{/gist_id}", "starred_url": "https://api.github.com/users/yldiscover/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yldiscover/subscriptions", "organizations_url": "https://api.github.com/users/yldiscover/orgs", "repos_url": "https://api.github.com/users/yldiscover/repos", "events_url": "https://api.github.com/users/yldiscover/events{/privacy}", "received_events_url": "https://api.github.com/users/yldiscover/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-12T07:54:55Z", "updated_at": "2020-08-16T05:19:52Z", "closed_at": "2020-08-16T05:19:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nThe Lua_parser example can run,but it seems that it needs to be optimized more. For example, it can not handle this lua script,which is modified from the original example:\r\n\r\nfunction test(x)\r\nlocal t = {foo=1, bar=2, arg=x}\r\nn = 0\r\nif t > 2 then\r\nn = n + 1\r\nend\r\nend\r\n\r\nThe lua_parser.py can not parse this script correctly.\r\n\r\nBy the way, why 3.0.0a2 can not be built with python 2.7?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/231", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/231/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/231/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/231/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/231", "id": 676836316, "node_id": "MDU6SXNzdWU2NzY4MzYzMTY=", "number": 231, "title": "\"Backreference\" as element name?", "user": {"login": "rav1e", "id": 26848558, "node_id": "MDQ6VXNlcjI2ODQ4NTU4", "avatar_url": "https://avatars0.githubusercontent.com/u/26848558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rav1e", "html_url": "https://github.com/rav1e", "followers_url": "https://api.github.com/users/rav1e/followers", "following_url": "https://api.github.com/users/rav1e/following{/other_user}", "gists_url": "https://api.github.com/users/rav1e/gists{/gist_id}", "starred_url": "https://api.github.com/users/rav1e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rav1e/subscriptions", "organizations_url": "https://api.github.com/users/rav1e/orgs", "repos_url": "https://api.github.com/users/rav1e/repos", "events_url": "https://api.github.com/users/rav1e/events{/privacy}", "received_events_url": "https://api.github.com/users/rav1e/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-11T12:27:42Z", "updated_at": "2020-08-11T19:04:19Z", "closed_at": "2020-08-11T19:04:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello there,\r\n\r\nIs there a way to use text matched by the parser as the name of a Group? For example, from:\r\n\r\n```\r\n(\r\n  ( tree1\r\n    (\r\n      branch1\r\n      (v1, v2)\r\n    )\r\n    (\r\n      branch2\r\n      (v3, v4)\r\n    )\r\n  )\r\n)\r\n```\r\nIs it possible to get the following results without hard-coding the names:\r\n```\r\n{'tree1': {'branch1': [v1, v2]}\r\n             {'branch2: [v3, v4]}}\r\n```\r\n\r\nThanks, pyparsing is great!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/230", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/230/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/230/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/230", "id": 676754955, "node_id": "MDU6SXNzdWU2NzY3NTQ5NTU=", "number": 230, "title": "Unexpected behaviour with prefix expressions, `MatchFirst` and `parseAll=True`", "user": {"login": "ldbo", "id": 57808795, "node_id": "MDQ6VXNlcjU3ODA4Nzk1", "avatar_url": "https://avatars0.githubusercontent.com/u/57808795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldbo", "html_url": "https://github.com/ldbo", "followers_url": "https://api.github.com/users/ldbo/followers", "following_url": "https://api.github.com/users/ldbo/following{/other_user}", "gists_url": "https://api.github.com/users/ldbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldbo/subscriptions", "organizations_url": "https://api.github.com/users/ldbo/orgs", "repos_url": "https://api.github.com/users/ldbo/repos", "events_url": "https://api.github.com/users/ldbo/events{/privacy}", "received_events_url": "https://api.github.com/users/ldbo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-11T10:15:59Z", "updated_at": "2020-08-11T15:12:35Z", "closed_at": "2020-08-11T15:12:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nThe use of a `MatchFirst` combination of prefix expressions can result in a parsing error when used with `parseAll=True` depending on the order of the operands.\r\n\r\nLet's consider the following expressions:\r\n```python\r\nexp1 = Word(alphas)\r\nexp2 = \"Foo\" + Word(alphas)\r\ncom1 = exp1 | exp2\r\ncom2 = exp2 | exp1\r\n```\r\nThen, `com1.parseString(\"Foo bar\", parseAll=True)` raises\r\n\r\n```\r\nParseException: Expected end of text, found 'b'  (at char 4), (line:1, col:5)\r\n```\r\n\r\nwhereas `com2.parseString(\"Foo bar\", parseAll=True)` successfully returns a `ParseResult` represented by `(['Foo', 'bar'], {})`, as expected.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/227", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/227/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/227/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/227/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/227", "id": 646398261, "node_id": "MDU6SXNzdWU2NDYzOTgyNjE=", "number": 227, "title": "Halfwidth katakana", "user": {"login": "JeroenKools", "id": 48962852, "node_id": "MDQ6VXNlcjQ4OTYyODUy", "avatar_url": "https://avatars3.githubusercontent.com/u/48962852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeroenKools", "html_url": "https://github.com/JeroenKools", "followers_url": "https://api.github.com/users/JeroenKools/followers", "following_url": "https://api.github.com/users/JeroenKools/following{/other_user}", "gists_url": "https://api.github.com/users/JeroenKools/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeroenKools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeroenKools/subscriptions", "organizations_url": "https://api.github.com/users/JeroenKools/orgs", "repos_url": "https://api.github.com/users/JeroenKools/repos", "events_url": "https://api.github.com/users/JeroenKools/events{/privacy}", "received_events_url": "https://api.github.com/users/JeroenKools/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-26T17:11:10Z", "updated_at": "2020-06-28T00:59:08Z", "closed_at": "2020-06-28T00:59:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "The pyparsing_unicode.Japanese class currently doesn't include the [halfwidth katakana characters](https://www.unicode.org/charts/PDF/UFF00.pdf). I found that these are in fact being used in actual CJK documents.\r\n\r\nPlease consider adding the character range (0xff01, 0xffef) to the katakana unicode_set class to address this.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/223", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/223/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/223/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/223/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/223", "id": 641703782, "node_id": "MDU6SXNzdWU2NDE3MDM3ODI=", "number": 223, "title": "Storing the default names of elements", "user": {"login": "TMiguelT", "id": 5019367, "node_id": "MDQ6VXNlcjUwMTkzNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5019367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TMiguelT", "html_url": "https://github.com/TMiguelT", "followers_url": "https://api.github.com/users/TMiguelT/followers", "following_url": "https://api.github.com/users/TMiguelT/following{/other_user}", "gists_url": "https://api.github.com/users/TMiguelT/gists{/gist_id}", "starred_url": "https://api.github.com/users/TMiguelT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TMiguelT/subscriptions", "organizations_url": "https://api.github.com/users/TMiguelT/orgs", "repos_url": "https://api.github.com/users/TMiguelT/repos", "events_url": "https://api.github.com/users/TMiguelT/events{/privacy}", "received_events_url": "https://api.github.com/users/TMiguelT/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 23, "created_at": "2020-06-19T04:55:45Z", "updated_at": "2020-06-28T00:59:34Z", "closed_at": "2020-06-28T00:59:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "So currently elements have their name stored in the `name` field, which is assigned to elements in their `__init__()`, but can then be overwritten with `setName()`.\r\n\r\nThe problem with this approach is that we then lose access to the original name, which can be useful as a description of what the element parser. In particular I want access to this for the railroad diagram generator.\r\n\r\nSo I'm proposing a change that allows us to keep the original names. Here's my current suggestion:\r\n```python\r\nfrom abc import ABC\r\n\r\nclass Token(ABC):\r\n    # Other methods\r\n    def __init__():\r\n        self.name = None\r\n\r\n    def setName(name):\r\n        self.name = name\r\n    \r\n    def __str__():\r\n        return self.name or self.defaultName\r\n\r\n    @abc.abstractmethod\r\n    @property\r\n    def defaultName():\r\n        pass\r\n\r\nclass Literal(Token):\r\n    def __init__(self, matchString):\r\n        super().__init__()\r\n        self.match = matchString\r\n\r\n    def defaultName():\r\n        return '\"%s\"' % str(self.match)\r\n```\r\n\r\nThis way, I can use `element.defaultName` in my diagram generator. Thoughts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/213", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/213/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/213/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/213/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/213", "id": 618735430, "node_id": "MDU6SXNzdWU2MTg3MzU0MzA=", "number": 213, "title": "documentation: description of `setParseAction` is incorrect", "user": {"login": "mgrandi", "id": 802786, "node_id": "MDQ6VXNlcjgwMjc4Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/802786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgrandi", "html_url": "https://github.com/mgrandi", "followers_url": "https://api.github.com/users/mgrandi/followers", "following_url": "https://api.github.com/users/mgrandi/following{/other_user}", "gists_url": "https://api.github.com/users/mgrandi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgrandi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgrandi/subscriptions", "organizations_url": "https://api.github.com/users/mgrandi/orgs", "repos_url": "https://api.github.com/users/mgrandi/repos", "events_url": "https://api.github.com/users/mgrandi/events{/privacy}", "received_events_url": "https://api.github.com/users/mgrandi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2020-05-15T06:37:36Z", "updated_at": "2020-06-28T01:00:40Z", "closed_at": "2020-06-28T01:00:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "in this section: https://pyparsing-docs.readthedocs.io/en/latest/HowToUsePyparsing.html#id6\r\n\r\nthe description for `setParseAction` is wrong:\r\n\r\n```plaintext\r\nsetParseAction(*fn) - specify one or more functions to call after successful matching of the element; each function is defined as fn(s, loc, toks), where:\r\n\r\n    s is the original parse string\r\n    loc is the location in the string where matching started\r\n    toks is the list of the matched tokens, packaged as a ParseResults object\r\n\r\nMultiple functions can be attached to a ParserElement by specifying multiple arguments to setParseAction, or by calling setParseAction multiple times.\r\n```\r\n\r\nthis is incorrect, `setParseAction` overwrites any previous parse action, while `addParseAction` appends the passed in callable to a list. Calling `setParseAction` multiple times only uses the last one , while calling `addParseAction` multiple times uses them all. \r\n\r\nI just got bitten by this and was wondering why it wasn't working so I decided to file a bug :)\r\n\r\nsee https://github.com/pyparsing/pyparsing/blob/master/pyparsing/core.py#L464-L473\r\n\r\nand https://github.com/pyparsing/pyparsing/blob/master/pyparsing/core.py#L481-L483", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/212", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/212/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/212/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/212/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/212", "id": 613003618, "node_id": "MDU6SXNzdWU2MTMwMDM2MTg=", "number": 212, "title": "Is it possible to use pyparsing to parse a lua program?", "user": {"login": "yldiscover", "id": 46197985, "node_id": "MDQ6VXNlcjQ2MTk3OTg1", "avatar_url": "https://avatars2.githubusercontent.com/u/46197985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yldiscover", "html_url": "https://github.com/yldiscover", "followers_url": "https://api.github.com/users/yldiscover/followers", "following_url": "https://api.github.com/users/yldiscover/following{/other_user}", "gists_url": "https://api.github.com/users/yldiscover/gists{/gist_id}", "starred_url": "https://api.github.com/users/yldiscover/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yldiscover/subscriptions", "organizations_url": "https://api.github.com/users/yldiscover/orgs", "repos_url": "https://api.github.com/users/yldiscover/repos", "events_url": "https://api.github.com/users/yldiscover/events{/privacy}", "received_events_url": "https://api.github.com/users/yldiscover/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-06T02:07:40Z", "updated_at": "2020-08-09T02:59:00Z", "closed_at": "2020-06-28T01:01:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n   I haved written a bnf for lua to parse a lua program, but it seems that the bnf definition will cause infinite  recursion error. when defining \"exp\" in lua.\r\n   Could somebody tell me how to do it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/211", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/211/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/211/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/211/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/211", "id": 611694446, "node_id": "MDU6SXNzdWU2MTE2OTQ0NDY=", "number": 211, "title": "Getting an entire grammar as a string", "user": {"login": "TMiguelT", "id": 5019367, "node_id": "MDQ6VXNlcjUwMTkzNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5019367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TMiguelT", "html_url": "https://github.com/TMiguelT", "followers_url": "https://api.github.com/users/TMiguelT/followers", "following_url": "https://api.github.com/users/TMiguelT/following{/other_user}", "gists_url": "https://api.github.com/users/TMiguelT/gists{/gist_id}", "starred_url": "https://api.github.com/users/TMiguelT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TMiguelT/subscriptions", "organizations_url": "https://api.github.com/users/TMiguelT/orgs", "repos_url": "https://api.github.com/users/TMiguelT/repos", "events_url": "https://api.github.com/users/TMiguelT/events{/privacy}", "received_events_url": "https://api.github.com/users/TMiguelT/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2020-05-04T08:30:05Z", "updated_at": "2020-06-03T10:57:41Z", "closed_at": "2020-06-03T10:57:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I want to output my entire grammar in a vaguely human-readable format, so people can see what my parser is doing without having to necessarily understand pyparsing.\r\n\r\nIf I `print(str(grammar))` I get:\r\n```\r\n{{{LineStart Suppress:(<SP><TAB><CR><LF>)} flag_block} ^ {Suppress:(\":\") flag_block}}\r\n```\r\nThis is a good start, but it's not recursively expanding tokens like `flag_block`. Is there any way to force this to happen in order to get a complete description of the grammar?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/210", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/210/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/210/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/210/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/210", "id": 611107209, "node_id": "MDU6SXNzdWU2MTExMDcyMDk=", "number": 210, "title": "Different result with QuotedString and dblQuotedString", "user": {"login": "tonal", "id": 316216, "node_id": "MDQ6VXNlcjMxNjIxNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/316216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tonal", "html_url": "https://github.com/tonal", "followers_url": "https://api.github.com/users/tonal/followers", "following_url": "https://api.github.com/users/tonal/following{/other_user}", "gists_url": "https://api.github.com/users/tonal/gists{/gist_id}", "starred_url": "https://api.github.com/users/tonal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tonal/subscriptions", "organizations_url": "https://api.github.com/users/tonal/orgs", "repos_url": "https://api.github.com/users/tonal/repos", "events_url": "https://api.github.com/users/tonal/events{/privacy}", "received_events_url": "https://api.github.com/users/tonal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-02T04:49:44Z", "updated_at": "2020-05-02T16:38:27Z", "closed_at": "2020-05-02T16:38:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "pyparsing==2.4.7 Python 3.8.2\r\nI parse string with simple function with optional second parameter (Google speedsheet):\r\n```python\r\ntest_strings = (\r\n    '=HYPERLINK(\"12\"; \"612\")',\r\n    '=HYPERLINK(\"12\"; \"612 \"\"ttt\"\"\")',\r\n    '=HYPERLINK(\"12\"; )',\r\n    '=HYPERLINK(\"12\")',\r\n)\r\n```\r\nParser with QuotedString:\r\n```python\r\nparser = Literal('=') + CaselessLiteral('HYPERLINK') + '(' +\r\n    QuotedString('\"', escQute='\"').setResultsName('link') +\r\n    Optional((';' + QuotedString('\"', escQuote='\"').setResultsName('alt')) ^ ';') +\r\n    ')')\r\nfor test in test_strings:\r\n    r = pars.parseString(v)\r\n    print(dict(link=r.link, title=r.get('alt')))\r\n```\r\n```\r\n{'link': '12\"; \"612', 'title': None}\r\n{'link': '12\"; \"612 \"\"ttt\"\"', 'title': None}\r\n{'link': '12', 'title': None}\r\n{'link': '12', 'title': None}\r\n```\r\nSecond parameter title always None.\r\nWhy?\r\n\r\nBut if use dblQuotedString all parameter correct:\r\n```python\r\nparser = Literal('=') + CaselessLiteral('HYPERLINK') + '(' +\r\n    dblQuotedString().setResultsName('link') +\r\n    Optional((';' + dblQuotedString().setResultsName('alt')) ^ ';') +\r\n    ')')\r\nfor test in test_strings:\r\n    r = pars.parseString(v)\r\n    print(dict(link=r.link, title=r.get('alt')))\r\n```\r\n```\r\n{'link': '12\"; \"612', 'title': None}\r\n{'link': '12\"; \"612 \"\"ttt\"\"', 'title': None}\r\n{'link': '12', 'title': None}\r\n{'link': '12', 'title': None}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/207", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/207/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/207/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/207", "id": 606468586, "node_id": "MDU6SXNzdWU2MDY0Njg1ODY=", "number": 207, "title": "Bug in fourFn.py example", "user": {"login": "tvdmitrii", "id": 21278768, "node_id": "MDQ6VXNlcjIxMjc4NzY4", "avatar_url": "https://avatars0.githubusercontent.com/u/21278768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tvdmitrii", "html_url": "https://github.com/tvdmitrii", "followers_url": "https://api.github.com/users/tvdmitrii/followers", "following_url": "https://api.github.com/users/tvdmitrii/following{/other_user}", "gists_url": "https://api.github.com/users/tvdmitrii/gists{/gist_id}", "starred_url": "https://api.github.com/users/tvdmitrii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tvdmitrii/subscriptions", "organizations_url": "https://api.github.com/users/tvdmitrii/orgs", "repos_url": "https://api.github.com/users/tvdmitrii/repos", "events_url": "https://api.github.com/users/tvdmitrii/events{/privacy}", "received_events_url": "https://api.github.com/users/tvdmitrii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-24T17:24:03Z", "updated_at": "2020-04-26T07:45:10Z", "closed_at": "2020-04-26T07:45:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\n# Bug\r\nI found a little bug in fourFn.py, which prevents it from evaluating expressions that include functions of multiple variables. It treats every function defined in `fn = {...}` as a function of a single variable.\r\n\r\nTo reproduce the bug add `\"multiply\": lambda a, b: a*b` function to `fn = {...}`. Try to evaluate an expression which includes `multiply(3,7)` and you will encounter an error saying that argument b is missing.\r\n\r\n# Fix\r\nI believe that `len(t[0])` in line 83 should be replaced with `len(t[1])` like so:\r\n```python\r\nfn_call = (ident + lpar - Group(expr_list) + rpar).setParseAction(\r\n    lambda t: t.insert(0, (t.pop(0), len(t[1])))\r\n```\r\n\r\n# Details\r\nThe lambda function takes `['multiply', '(', [['3'], ['7']], ')']` and turns it into `[('multiply', 1), '(', [['3'], ['7']], ')']`, where 1 is the number of arguments, which is wrong. The problem is that `(t.pop(0), len(t[0]))` takes length of `'('` and treats it as the number of arguments, which is wrong. It should be taking the length of `[['3'], ['7']],`, which is `t[1]`.\r\n\r\nIt works for functions of a single variable, because the length of `'('` is 1.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/205", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/205/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/205/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/205/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/205", "id": 597974854, "node_id": "MDU6SXNzdWU1OTc5NzQ4NTQ=", "number": 205, "title": "Multiple ParserElements with same result name", "user": {"login": "Nicholas42", "id": 16197255, "node_id": "MDQ6VXNlcjE2MTk3MjU1", "avatar_url": "https://avatars2.githubusercontent.com/u/16197255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nicholas42", "html_url": "https://github.com/Nicholas42", "followers_url": "https://api.github.com/users/Nicholas42/followers", "following_url": "https://api.github.com/users/Nicholas42/following{/other_user}", "gists_url": "https://api.github.com/users/Nicholas42/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nicholas42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nicholas42/subscriptions", "organizations_url": "https://api.github.com/users/Nicholas42/orgs", "repos_url": "https://api.github.com/users/Nicholas42/repos", "events_url": "https://api.github.com/users/Nicholas42/events{/privacy}", "received_events_url": "https://api.github.com/users/Nicholas42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-04-10T16:25:57Z", "updated_at": "2020-06-28T01:01:39Z", "closed_at": "2020-06-28T01:01:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I have multiple `ParserElement`s with the same result name I would expect one of two possible outcomes:\r\n\r\n1. All matched expressions will be available as as list for that key.\r\n2. Only the last one will be available.\r\n\r\nConsider the following code:\r\n\r\n```python3\r\nimport pyparsing as pp\r\n\r\nword = pp.Word(pp.printables)(\"word\")\r\n\r\nres = pp.OneOrMore(word).parseString(\"test blub\")\r\n\r\nprint(repr(res))\r\n# prints:    (['test', 'blub'], {'word': ['test', 'blub']})\r\nprint(res[\"word\"])\r\n# prints:    blub\r\nprint(res.asDict())\r\n# prints:    {'word': 'blub'}\r\n```\r\n\r\nAs you see in the output of the first `print` the `ParseResult` saves both matched words as value for `\"word\"`, that would match outcome 1. But if I try to access this list by `res2[\"word\"]`, I only get the last word back. This seems inconsistent to me. \r\n\r\nIn my opinion, the `repr` and the return value of `res.asDict()` should look the same. So either `repr(res)` returns `repr(res.asDict())` (as `res.dump()` does) or `res[\"word\"]` returns `['test', 'blub']`. Personally I would prefer the second variant, since it gives more freedom to the user and allows collecting results from very different parts of the string. \r\n\r\nPS: One can access the list by the (a bit illegal) `res._ParseResults__tokdict[\"word\"]`. If you don't think that it would be a good idea to change the behavior of `ParseResults`, one maybe could make this variable publically accessible. \r\n\r\nPPS: I love the library :-)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/204", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/204/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/204/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/204", "id": 596016114, "node_id": "MDU6SXNzdWU1OTYwMTYxMTQ=", "number": 204, "title": "infixNotation, parentheses, performance", "user": {"login": "Igreh", "id": 1047407, "node_id": "MDQ6VXNlcjEwNDc0MDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1047407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Igreh", "html_url": "https://github.com/Igreh", "followers_url": "https://api.github.com/users/Igreh/followers", "following_url": "https://api.github.com/users/Igreh/following{/other_user}", "gists_url": "https://api.github.com/users/Igreh/gists{/gist_id}", "starred_url": "https://api.github.com/users/Igreh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Igreh/subscriptions", "organizations_url": "https://api.github.com/users/Igreh/orgs", "repos_url": "https://api.github.com/users/Igreh/repos", "events_url": "https://api.github.com/users/Igreh/events{/privacy}", "received_events_url": "https://api.github.com/users/Igreh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-07T16:58:27Z", "updated_at": "2020-04-08T03:58:17Z", "closed_at": "2020-04-08T03:58:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! \r\nWe are faced with high performance degradation issue for strings with multiple nesting levels. Just curious - is it bug or feature? Are there any workarounds?\r\n\r\nTo reproduce:\r\nTake pyparsing/examples/simpleArith.py and add new tests:\r\n~~~python\r\n    \"(a + b)\",\r\n    \"((a + b))\",\r\n    \"(((a + b)))\",\r\n    \"((((a + b))))\",\r\n~~~\r\neach new pair of parentheses slow parsing process significantly.\r\nAnyway, thanks for such a great tool!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/203", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/203/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/203/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/203/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/203", "id": 595772434, "node_id": "MDU6SXNzdWU1OTU3NzI0MzQ=", "number": 203, "title": "Parent element's `skipWhitespace` seems to determine whether to skip whitespace", "user": {"login": "TMiguelT", "id": 5019367, "node_id": "MDQ6VXNlcjUwMTkzNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5019367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TMiguelT", "html_url": "https://github.com/TMiguelT", "followers_url": "https://api.github.com/users/TMiguelT/followers", "following_url": "https://api.github.com/users/TMiguelT/following{/other_user}", "gists_url": "https://api.github.com/users/TMiguelT/gists{/gist_id}", "starred_url": "https://api.github.com/users/TMiguelT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TMiguelT/subscriptions", "organizations_url": "https://api.github.com/users/TMiguelT/orgs", "repos_url": "https://api.github.com/users/TMiguelT/repos", "events_url": "https://api.github.com/users/TMiguelT/events{/privacy}", "received_events_url": "https://api.github.com/users/TMiguelT/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-07T10:44:37Z", "updated_at": "2020-06-09T05:11:07Z", "closed_at": "2020-06-09T05:09:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Background\r\nI have a segment of my grammar designed to match all the words on one line, ignoring initial whitespace. The grammar is:\r\n```python\r\nfrom pyparsing import *\r\n\r\ntok = LineStart() + OneOrMore(Word(alphas))\r\ntest_string = '''\r\n               some text on a line\r\n          : more text on a line\r\n'''\r\n```\r\n\r\nNow, if I try to actually match some text, this won't match because the first character of each line is whitespace, so `LineStart()` can't match:\r\n```python\r\nprint(tok.searchString(test_string))\r\n```\r\n\r\nI can try to use `leaveWhitespace()` on the `LineStart()`, which seems to solve the issue. This is a bit strange considering `leaveWhitespace()` is \"mostly used internally to the pyparsing module, rarely used by client code\", but whatever, it works:\r\n```python\r\ntok = LineStart().leaveWhitespace() + OneOrMore(Word(alphas))\r\nprint(tok.searchString(test_string)[0])\r\n```\r\n\r\n## Issue\r\n\r\nBut now, I need to compose `tok` using an Or statement. This doesn't match the first line at all, even though it should, because `grammar` now has `skipWhitespace` set to True, even though `tok_a` has it as `False`:\r\n```python\r\ntok_a = LineStart().leaveWhitespace() + OneOrMore(Word(alphas))\r\ntok_b = ':' + OneOrMore(Word(alphas))\r\ngrammar = tok_a ^ tok_b\r\ngrammar.searchString(test_string)\r\n```\r\n\r\nAlternatively if I set `grammar.leaveWhitespace()`, all the `Word()` tokens will fail to match because their parent element isn't skipping whitespace anymore, and the parent element, not the child, seems to determine whether they skip whitespace or not: \r\n```python\r\ngrammar.leaveWhitespace().searchString(test_string)\r\n```\r\n\r\nSo in general, I'm finding it tricky to work around this behaviour whereby the parent elements are actually determining whether or not to skip whitespace.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/201", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/201/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/201/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/201/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/201", "id": 593481266, "node_id": "MDU6SXNzdWU1OTM0ODEyNjY=", "number": 201, "title": "(Caseless)?Keyword supposedly can be followed by punctuation but fails to digest a colon", "user": {"login": "metaperl", "id": 21293, "node_id": "MDQ6VXNlcjIxMjkz", "avatar_url": "https://avatars3.githubusercontent.com/u/21293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/metaperl", "html_url": "https://github.com/metaperl", "followers_url": "https://api.github.com/users/metaperl/followers", "following_url": "https://api.github.com/users/metaperl/following{/other_user}", "gists_url": "https://api.github.com/users/metaperl/gists{/gist_id}", "starred_url": "https://api.github.com/users/metaperl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/metaperl/subscriptions", "organizations_url": "https://api.github.com/users/metaperl/orgs", "repos_url": "https://api.github.com/users/metaperl/repos", "events_url": "https://api.github.com/users/metaperl/events{/privacy}", "received_events_url": "https://api.github.com/users/metaperl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-03T15:57:12Z", "updated_at": "2020-04-05T20:44:33Z", "closed_at": "2020-04-05T20:44:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "[The docs for Keyword and hence CaselessKeyword](https://pyparsing-docs.readthedocs.io/en/latest/HowToUsePyparsing.html#basic-parserelement-subclasses) state:\r\n\r\n> similar to Literal, but must be immediately followed by whitespace, punctuation, or other non-keyword characters;\r\n\r\nHowever a colon is punctuation and the following grammar chokes at the colon:\r\n\r\n```python\r\n\"\"\"\r\nParse the signals from Olafemi Adeyemo's Telegram channel.\r\n\"\"\"\r\n\r\nsample_signal = \"\"\"Opengates Forex Trade Signal Alert Services:\r\n\r\nSymbol: EURNZD\r\n\r\nAction: SELL\r\n\r\nEntry: 1.83605\r\n\r\nTakeProfit: 1.83386\r\n\r\nStopLoss: 1.85217\r\n\r\nGood Favor.\r\n\"\"\"\r\n\r\nimport re\r\nfrom pyparsing import Word, alphas, alphanums, CaselessKeyword, CaselessLiteral, Combine, Optional, Literal, nums\r\nfrom pyparsing import Regex\r\n\r\n\r\nheader = Regex(\"Opengates.+Services:\", flags=re.IGNORECASE)\r\n\r\ntrading_pair = Word(alphanums)*6\r\nsymbol = CaselessKeyword(\"Symbol:\") + trading_pair\r\n\r\nbuy_or_sell = CaselessLiteral(\"buy\") | CaselessLiteral(\"sell\")\r\naction = CaselessKeyword(\"Action\") + buy_or_sell\r\n\r\npoint = Literal(\".\")\r\ne = CaselessLiteral(\"E\")\r\nplusorminus = Literal(\"+\") | Literal(\"-\")\r\nnumber = Word(nums)\r\ninteger = Combine(Optional(plusorminus) + number)\r\nfloat_number = Combine(\r\n    integer + Optional(point + Optional(number)) + Optional(e + integer)\r\n)\r\nentry = CaselessKeyword(\"Entry\") + float_number\r\ntake_profit = CaselessKeyword(\"TakeProfit\") + float_number\r\nstop_loss = CaselessKeyword(\"StopLoss\") + float_number\r\n\r\nfooter = Regex(\".+\", flags=re.IGNORECASE)\r\n\r\ntrade_signal = header + symbol + action + entry + take_profit + stop_loss + footer\r\n\r\n\r\nif __name__ == '__main__':\r\n    result = trade_signal.parseString(sample_signal)\r\n    print(f\"Result of parsing={result}\")\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/200", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/200/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/200/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/200", "id": 593462091, "node_id": "MDU6SXNzdWU1OTM0NjIwOTE=", "number": 200, "title": "Common parsing elements (such as floatNumber) should be importable?", "user": {"login": "metaperl", "id": 21293, "node_id": "MDQ6VXNlcjIxMjkz", "avatar_url": "https://avatars3.githubusercontent.com/u/21293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/metaperl", "html_url": "https://github.com/metaperl", "followers_url": "https://api.github.com/users/metaperl/followers", "following_url": "https://api.github.com/users/metaperl/following{/other_user}", "gists_url": "https://api.github.com/users/metaperl/gists{/gist_id}", "starred_url": "https://api.github.com/users/metaperl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/metaperl/subscriptions", "organizations_url": "https://api.github.com/users/metaperl/orgs", "repos_url": "https://api.github.com/users/metaperl/repos", "events_url": "https://api.github.com/users/metaperl/events{/privacy}", "received_events_url": "https://api.github.com/users/metaperl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-03T15:26:56Z", "updated_at": "2020-04-05T20:44:12Z", "closed_at": "2020-04-05T20:44:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Should common parsing elements, such as [floatNumber](https://github.com/pyparsing/pyparsing/blob/master/examples/LAparser.py#L105):\r\n\r\n```\r\nfloatnumber = Combine(\r\n    integer + Optional(point + Optional(number)) + Optional(e + integer)\r\n)\r\n```\r\n\r\nbe available for importing instead of having to manually code them?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/194", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/194/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/194/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/194/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/194", "id": 586207140, "node_id": "MDU6SXNzdWU1ODYyMDcxNDA=", "number": 194, "title": "Bad groups in real and sci_real expressions", "user": {"login": "goodmami", "id": 1428419, "node_id": "MDQ6VXNlcjE0Mjg0MTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1428419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goodmami", "html_url": "https://github.com/goodmami", "followers_url": "https://api.github.com/users/goodmami/followers", "following_url": "https://api.github.com/users/goodmami/following{/other_user}", "gists_url": "https://api.github.com/users/goodmami/gists{/gist_id}", "starred_url": "https://api.github.com/users/goodmami/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goodmami/subscriptions", "organizations_url": "https://api.github.com/users/goodmami/orgs", "repos_url": "https://api.github.com/users/goodmami/repos", "events_url": "https://api.github.com/users/goodmami/events{/privacy}", "received_events_url": "https://api.github.com/users/goodmami/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-03-23T13:26:14Z", "updated_at": "2020-03-23T14:28:55Z", "closed_at": "2020-03-23T14:28:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm very new to pyparsing, but it looks like [real](https://github.com/pyparsing/pyparsing/blob/6a0daf575f6e648f1ab9d9c2d241b9834ef77500/pyparsing/common.py#L188) and [sci_real](https://github.com/pyparsing/pyparsing/blob/6a0daf575f6e648f1ab9d9c2d241b9834ef77500/pyparsing/common.py#L195) in `pyparsing.common` have bad regex patterns. Specifically, it seems like they are supposed to have non-capturing groups (`(?:...)`) but instead they have groups with optional colon characters (`(:?...)`).\r\n\r\nE.g. for `real`:\r\n\r\n```python\r\nRegex(r\"[+-]?(:?\\d+\\.\\d*|\\.\\d+)\")\r\n```\r\n\r\nshould be:\r\n\r\n```python\r\nRegex(r\"[+-]?(?:\\d+\\.\\d*|\\.\\d+)\")\r\n```\r\n\r\nThis was probably not detected because, when parsing, colons were not encountered where the real or sci_real numbers were expected, and being optional they are just ignored.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/186", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/186/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/186/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/186/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/186", "id": 570764976, "node_id": "MDU6SXNzdWU1NzA3NjQ5NzY=", "number": 186, "title": "setParseAction (with or without copy) as an operator", "user": {"login": "SoniEx2", "id": 1779619, "node_id": "MDQ6VXNlcjE3Nzk2MTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1779619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SoniEx2", "html_url": "https://github.com/SoniEx2", "followers_url": "https://api.github.com/users/SoniEx2/followers", "following_url": "https://api.github.com/users/SoniEx2/following{/other_user}", "gists_url": "https://api.github.com/users/SoniEx2/gists{/gist_id}", "starred_url": "https://api.github.com/users/SoniEx2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SoniEx2/subscriptions", "organizations_url": "https://api.github.com/users/SoniEx2/orgs", "repos_url": "https://api.github.com/users/SoniEx2/repos", "events_url": "https://api.github.com/users/SoniEx2/events{/privacy}", "received_events_url": "https://api.github.com/users/SoniEx2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-25T18:57:06Z", "updated_at": "2020-02-25T19:58:40Z", "closed_at": "2020-02-25T19:58:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "setParseAction's name is non-pythonic and it's also a bit unwieldy to use. (personally I'd prefer if it was set_action.) would it be possible to have `/=` / `__itruediv__` be an alias for setParseAction, and `/` / `__truediv__` be an alias for copy + setParseAction?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/183", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/183/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/183/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/183/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/183", "id": 568730211, "node_id": "MDU6SXNzdWU1Njg3MzAyMTE=", "number": 183, "title": "Each matches single Regex twice", "user": {"login": "scauligi", "id": 15003857, "node_id": "MDQ6VXNlcjE1MDAzODU3", "avatar_url": "https://avatars2.githubusercontent.com/u/15003857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scauligi", "html_url": "https://github.com/scauligi", "followers_url": "https://api.github.com/users/scauligi/followers", "following_url": "https://api.github.com/users/scauligi/following{/other_user}", "gists_url": "https://api.github.com/users/scauligi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scauligi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scauligi/subscriptions", "organizations_url": "https://api.github.com/users/scauligi/orgs", "repos_url": "https://api.github.com/users/scauligi/repos", "events_url": "https://api.github.com/users/scauligi/events{/privacy}", "received_events_url": "https://api.github.com/users/scauligi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-02-21T04:35:19Z", "updated_at": "2020-06-28T01:02:47Z", "closed_at": "2020-06-28T01:02:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "A Regex inside of an Each can incorrectly match twice.\r\nThis also applies to derivative expressions, such as `(Regex(...) | Regex(...))`\r\n\r\nMinimum viable example:\r\n```python\r\nimport pyparsing as pp\r\n\r\ninteger = pp.Regex(r'\\d+')\r\neach = pp.Each([integer])\r\n\r\n# prints ['22', '33'] instead of ['22']\r\nprint(each.parseString('22 33'))\r\n\r\n# this prints ['22'] as expected\r\nprint(pp.Each([pp.Word(pp.nums)]).parseString('22 33'))\r\n```\r\n\r\nThe issue seems to be that `Regex` has `.mayReturnEmpty = True`.\r\n\r\nIn the `parseImpl` definition for `Each`, any expression that is not `Optional` but has `.mayReturnEmpty = True` gets assigned both to `self.optionals` and `self.required`;\r\nand hence the expression is matched twice.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/182", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/182/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/182/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/182/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/182", "id": 567832931, "node_id": "MDU6SXNzdWU1Njc4MzI5MzE=", "number": 182, "title": "newbie question: how to capture phrases of all caps words", "user": {"login": "doolingdavid", "id": 13440084, "node_id": "MDQ6VXNlcjEzNDQwMDg0", "avatar_url": "https://avatars1.githubusercontent.com/u/13440084?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doolingdavid", "html_url": "https://github.com/doolingdavid", "followers_url": "https://api.github.com/users/doolingdavid/followers", "following_url": "https://api.github.com/users/doolingdavid/following{/other_user}", "gists_url": "https://api.github.com/users/doolingdavid/gists{/gist_id}", "starred_url": "https://api.github.com/users/doolingdavid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doolingdavid/subscriptions", "organizations_url": "https://api.github.com/users/doolingdavid/orgs", "repos_url": "https://api.github.com/users/doolingdavid/repos", "events_url": "https://api.github.com/users/doolingdavid/events{/privacy}", "received_events_url": "https://api.github.com/users/doolingdavid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-19T20:39:58Z", "updated_at": "2020-02-20T14:51:04Z", "closed_at": "2020-02-20T14:51:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to use pyparsing to capture all phrase from a text that look like \r\nASDF ADSF DFD \r\nNaively, below does not work, and am wondering how to modify it so that the grammar below should FAIL on this example:\r\nkw = Word(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ*\",min=2)\r\ntest = \"SDFFGDSFFG4545adasd wretwretWERTRWET\"\r\nresult = OneOrMore(kw).parseString(test)\r\nprint(result)\r\n['SDFFGDSFFG']", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/176", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/176/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/176/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/176/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/176", "id": 560142800, "node_id": "MDU6SXNzdWU1NjAxNDI4MDA=", "number": 176, "title": "Interested in joining dev team", "user": {"login": "mattcarmody", "id": 33763384, "node_id": "MDQ6VXNlcjMzNzYzMzg0", "avatar_url": "https://avatars1.githubusercontent.com/u/33763384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattcarmody", "html_url": "https://github.com/mattcarmody", "followers_url": "https://api.github.com/users/mattcarmody/followers", "following_url": "https://api.github.com/users/mattcarmody/following{/other_user}", "gists_url": "https://api.github.com/users/mattcarmody/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattcarmody/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattcarmody/subscriptions", "organizations_url": "https://api.github.com/users/mattcarmody/orgs", "repos_url": "https://api.github.com/users/mattcarmody/repos", "events_url": "https://api.github.com/users/mattcarmody/events{/privacy}", "received_events_url": "https://api.github.com/users/mattcarmody/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-05T05:05:17Z", "updated_at": "2020-02-12T10:00:22Z", "closed_at": "2020-02-12T10:00:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I posted on reddit, I'd like to help with test coverage", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/175", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/175/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/175/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/175/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/175", "id": 555316389, "node_id": "MDU6SXNzdWU1NTUzMTYzODk=", "number": 175, "title": "Cleanup unittest.TestCase usages in test_unit.py", "user": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-27T01:01:31Z", "updated_at": "2020-01-28T02:02:02Z", "closed_at": "2020-01-28T02:02:02Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Calls to `self.assertEqual` should list expected first, and observed second, so that failure output gets labeled correctly (assumes that the expected value is the first argument).\r\nCalls to `self.assertTrue(False, ...` should just be `self.fail()`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/174", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/174/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/174/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/174/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/174", "id": 553883169, "node_id": "MDU6SXNzdWU1NTM4ODMxNjk=", "number": 174, "title": "Enhance infixNotation() to handle operator \"classes\"", "user": {"login": "klahnakoski", "id": 2334429, "node_id": "MDQ6VXNlcjIzMzQ0Mjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2334429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klahnakoski", "html_url": "https://github.com/klahnakoski", "followers_url": "https://api.github.com/users/klahnakoski/followers", "following_url": "https://api.github.com/users/klahnakoski/following{/other_user}", "gists_url": "https://api.github.com/users/klahnakoski/gists{/gist_id}", "starred_url": "https://api.github.com/users/klahnakoski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klahnakoski/subscriptions", "organizations_url": "https://api.github.com/users/klahnakoski/orgs", "repos_url": "https://api.github.com/users/klahnakoski/repos", "events_url": "https://api.github.com/users/klahnakoski/events{/privacy}", "received_events_url": "https://api.github.com/users/klahnakoski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-23T01:05:27Z", "updated_at": "2020-01-23T16:25:22Z", "closed_at": "2020-01-23T16:25:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice to group operators with equivalent precedence:  so it is easy to say `*` and `/` are applied left to right, and before `+`  and `-`, which are also applied left to right. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/169", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/169/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/169/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/169/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/169", "id": 529491581, "node_id": "MDU6SXNzdWU1Mjk0OTE1ODE=", "number": 169, "title": "Pyparsing fails to parse optional subscript, but always returns first substring of parse", "user": {"login": "enjoysmath", "id": 1606391, "node_id": "MDQ6VXNlcjE2MDYzOTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1606391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/enjoysmath", "html_url": "https://github.com/enjoysmath", "followers_url": "https://api.github.com/users/enjoysmath/followers", "following_url": "https://api.github.com/users/enjoysmath/following{/other_user}", "gists_url": "https://api.github.com/users/enjoysmath/gists{/gist_id}", "starred_url": "https://api.github.com/users/enjoysmath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/enjoysmath/subscriptions", "organizations_url": "https://api.github.com/users/enjoysmath/orgs", "repos_url": "https://api.github.com/users/enjoysmath/repos", "events_url": "https://api.github.com/users/enjoysmath/events{/privacy}", "received_events_url": "https://api.github.com/users/enjoysmath/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-27T17:42:16Z", "updated_at": "2020-01-24T23:53:52Z", "closed_at": "2020-01-24T23:53:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here's the minimal running example:\r\n\r\n```\r\nfrom pyparsing import Regex, Suppress, Optional\r\nfrom pyparsing import pyparsing_common as com\r\n\r\nalphabet = Regex(\r\n   r\"[a-zA-Z]|\\\\alpha|\\\\beta|\\\\gamma\")\r\n\r\ndef subscript(expr):\r\n   return Suppress(\"_{\") + expr + Suppress(\"}\")\r\n\r\ndef superscript(expr):\r\n   return Suppress(\"^{\") + expr + Suppress(\"}\")\r\n\r\ndef script_usual(subexpr, supexpr):\r\n   return subscript(subexpr) + superscript(supexpr)\r\n\r\ndef script_reverse(subexpr, supexpr):\r\n   grammar = superscript(supexpr) + subscript(subexpr)\r\n   grammar.addParseAction(lambda toks: list(reversed(toks)))\r\n   return grammar\r\n\r\ndef script(subexpr, supexpr=None):\r\n   if supexpr is None:\r\n      supexpr = subexpr.copy()\r\n   return script_usual(subexpr, supexpr) | script_reverse(subexpr, supexpr)\r\n\r\ninteger_or_letter = alphabet | com.signed_integer\r\n\r\n\r\nclass Object:\r\n   grammar = alphabet + Optional(script(integer_or_letter))\r\n   \r\n   \r\nif __name__ == '__main__':\r\n   while True:\r\n      s = input(\"s=\")\r\n      #r = alphabet.parseString(s)\r\n      r = Object.grammar.parseString(s)\r\n      print(r)\r\n```\r\n\r\nThis shows that it's not doing what you'd expect:\r\n\r\n![image](https://user-images.githubusercontent.com/1606391/69746877-1b0e1e80-10fa-11ea-8f68-8c7625715261.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/167", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/167/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/167/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/167/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/167", "id": 527596017, "node_id": "MDU6SXNzdWU1Mjc1OTYwMTc=", "number": 167, "title": "Group collection", "user": {"login": "egberts", "id": 10352354, "node_id": "MDQ6VXNlcjEwMzUyMzU0", "avatar_url": "https://avatars0.githubusercontent.com/u/10352354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/egberts", "html_url": "https://github.com/egberts", "followers_url": "https://api.github.com/users/egberts/followers", "following_url": "https://api.github.com/users/egberts/following{/other_user}", "gists_url": "https://api.github.com/users/egberts/gists{/gist_id}", "starred_url": "https://api.github.com/users/egberts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/egberts/subscriptions", "organizations_url": "https://api.github.com/users/egberts/orgs", "repos_url": "https://api.github.com/users/egberts/repos", "events_url": "https://api.github.com/users/egberts/events{/privacy}", "received_events_url": "https://api.github.com/users/egberts/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-23T19:08:56Z", "updated_at": "2019-12-01T10:01:31Z", "closed_at": "2019-11-25T17:26:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've got this '`all_zones`' Group() down pat ... a bit.\r\n## Ordered Lines, Expected Result ##\r\nI have the following test_string:\r\n```\r\nzone XXX;\r\nzone ZZZ;\r\noptions YYY;\r\n```\r\nAnd and I see that that Group() collection is working well, like in my desired `asDict()` result below:\r\n```\r\nresult = { \r\n    'options': {'name: 'YYY'},\r\n    'all_zones': [\r\n        { 'zone': {'name': 'XXX'}},\r\n        { 'zone': {'name': 'ZZZ'}}\r\n    ]\r\n}\r\n```\r\n## Reordered Lines, different and missing result ##\r\nI tripped myself purposely up a bit with a bit of line reordering of the test_string:\r\n```\r\nzone XXX;\r\noptions YYY;\r\nzone ZZZ;\r\n```\r\nAnd the `asDict()` result becomes different (and missing a test line)...\r\n```\r\nresult = { \r\n    'options': {'name': 'YYY'},\r\n    'all_zones': [\r\n        { 'zone': {'name': 'ZZZ'}}\r\n    ]\r\n}\r\n```\r\nAs you can see, the parser rules that I have set up only collects the last one of the 'zone' Group instead of 'all' of the zone group items and stored it under 'all_zones' group.\r\n\r\nThe question I have is, \"Is it possible to keep collecting 'zone' Group items after it leaves the 'all_zones' parser block?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/165", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/165/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/165/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/165/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/165", "id": 519221232, "node_id": "MDU6SXNzdWU1MTkyMjEyMzI=", "number": 165, "title": "Hypothesis integration", "user": {"login": "SoniEx2", "id": 1779619, "node_id": "MDQ6VXNlcjE3Nzk2MTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1779619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SoniEx2", "html_url": "https://github.com/SoniEx2", "followers_url": "https://api.github.com/users/SoniEx2/followers", "following_url": "https://api.github.com/users/SoniEx2/following{/other_user}", "gists_url": "https://api.github.com/users/SoniEx2/gists{/gist_id}", "starred_url": "https://api.github.com/users/SoniEx2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SoniEx2/subscriptions", "organizations_url": "https://api.github.com/users/SoniEx2/orgs", "repos_url": "https://api.github.com/users/SoniEx2/repos", "events_url": "https://api.github.com/users/SoniEx2/events{/privacy}", "received_events_url": "https://api.github.com/users/SoniEx2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-07T11:55:59Z", "updated_at": "2019-11-11T12:42:34Z", "closed_at": "2019-11-11T12:42:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "The hypothesis module is super useful. I want pyparsing to generate strings that match the peg when I stick the peg in `@hypothesis.given`, which is meant for generating pseudorandom inputs for testing.\r\n\r\nsee also https://hypothesis.readthedocs.io/en/latest/extras.html#hypothesis-lark", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/164", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/164/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/164/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/164/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/164", "id": 518508242, "node_id": "MDU6SXNzdWU1MTg1MDgyNDI=", "number": 164, "title": "Regression in 2.4.3/2.4.4: UnicodeDecodeError during install of sdist", "user": {"login": "johnthagen", "id": 10340167, "node_id": "MDQ6VXNlcjEwMzQwMTY3", "avatar_url": "https://avatars1.githubusercontent.com/u/10340167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnthagen", "html_url": "https://github.com/johnthagen", "followers_url": "https://api.github.com/users/johnthagen/followers", "following_url": "https://api.github.com/users/johnthagen/following{/other_user}", "gists_url": "https://api.github.com/users/johnthagen/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnthagen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnthagen/subscriptions", "organizations_url": "https://api.github.com/users/johnthagen/orgs", "repos_url": "https://api.github.com/users/johnthagen/repos", "events_url": "https://api.github.com/users/johnthagen/events{/privacy}", "received_events_url": "https://api.github.com/users/johnthagen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-06T14:29:07Z", "updated_at": "2019-11-10T17:12:50Z", "closed_at": "2019-11-10T17:12:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Before pyparsing 2.4.4, our `pip download` commands were working properly, once 2.4.4 was released we saw this error in our builds.\r\n\r\nHost OS: Ubuntu 18.04 x64\r\nPython: Python 3.6\r\n\r\n```\r\n$ python3 -m pip download --no-binary=:all: -r requirements.txt\r\n...\r\nCollecting pyparsing>=2.0.2\r\n  Downloading https://files.pythonhosted.org/packages/95/b7/1b8f7dbea6688a8ae97c6265e346120bb2a1888facaf58552ddbcbe502e3/pyparsing-2.4.4.tar.gz (644kB)\r\n  Saved /tmp/tmpyjisa7uf/pyparsing-2.4.4.tar.gz\r\n    ERROR: Command errored out with exit status 1:\r\n     command: /builds/.tox/bundle/bin/python3 -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'/tmp/pip-download-d16rtszp/pyparsing/setup.py'\"'\"'; __file__='\"'\"'/tmp/pip-download-d16rtszp/pyparsing/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' egg_info --egg-base /tmp/pip-download-d16rtszp/pyparsing/pip-egg-info\r\n         cwd: /tmp/pip-download-d16rtszp/pyparsing/\r\n    Complete output (7 lines):\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/tmp/pip-download-d16rtszp/pyparsing/setup.py\", line 13, in <module>\r\n        pyparsing_main_doc = README.read()\r\n      File \"/builds/.tox/bundle/lib/python3.6/encodings/ascii.py\", line 26, in decode\r\n        return codecs.ascii_decode(input, self.errors)[0]\r\n    UnicodeDecodeError: 'ascii' codec can't decode byte 0xc2 in position 212: ordinal not in range(128)\r\n    ----------------------------------------\r\nERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/161", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/161/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/161/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/161/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/161", "id": 517774842, "node_id": "MDU6SXNzdWU1MTc3NzQ4NDI=", "number": 161, "title": "pyparsing 2.4.3 breaks PyContracts", "user": {"login": "nedbat", "id": 23789, "node_id": "MDQ6VXNlcjIzNzg5", "avatar_url": "https://avatars1.githubusercontent.com/u/23789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nedbat", "html_url": "https://github.com/nedbat", "followers_url": "https://api.github.com/users/nedbat/followers", "following_url": "https://api.github.com/users/nedbat/following{/other_user}", "gists_url": "https://api.github.com/users/nedbat/gists{/gist_id}", "starred_url": "https://api.github.com/users/nedbat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nedbat/subscriptions", "organizations_url": "https://api.github.com/users/nedbat/orgs", "repos_url": "https://api.github.com/users/nedbat/repos", "events_url": "https://api.github.com/users/nedbat/events{/privacy}", "received_events_url": "https://api.github.com/users/nedbat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-11-05T13:32:15Z", "updated_at": "2019-11-05T21:02:33Z", "closed_at": "2019-11-05T21:02:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use PyContracts as part of testing coverage.py.  This morning, I started getting failures like this:\r\n```\r\n/Users/ned/coverage/trunk/.tox/py37/lib/python3.7/site-packages/contracts/library/extensions.py:217: SyntaxWarning: Exception creating Regex for oneOf, building MatchFirst\r\n  identifier_expression = (Combine(oneOf(list(alphas)) + Word('_' + alphanums)) +\r\n/Users/ned/coverage/trunk/.tox/py37/lib/python3.7/site-packages/contracts/library/suggester.py:60: SyntaxWarning: Exception creating Regex for oneOf, building MatchFirst\r\n  pattern = Combine(oneOf(list(alphas)) + Word('_' + alphanums))\r\n/Users/ned/coverage/trunk/.tox/py37/lib/python3.7/site-packages/contracts/library/variables.py:91: SyntaxWarning: Exception creating Regex for oneOf, building MatchFirst\r\n  int_variables = (oneOf(alphabetu.split())\r\n/Users/ned/coverage/trunk/.tox/py37/lib/python3.7/site-packages/contracts/library/variables.py:92: SyntaxWarning: Exception creating Regex for oneOf, building MatchFirst\r\n  + FollowedBy(NotAny(oneOf(nofollow.split()))))\r\n/Users/ned/coverage/trunk/.tox/py37/lib/python3.7/site-packages/contracts/library/variables.py:93: SyntaxWarning: Exception creating Regex for oneOf, building MatchFirst\r\n  misc_variables = (oneOf(alphabetl.split())\r\n/Users/ned/coverage/trunk/.tox/py37/lib/python3.7/site-packages/contracts/library/variables.py:94: SyntaxWarning: Exception creating Regex for oneOf, building MatchFirst\r\n  + FollowedBy(NotAny(oneOf(nofollow.split() + ['x']))))\r\n/Users/ned/coverage/trunk/.tox/py37/lib/python3.7/site-packages/contracts/library/variables.py:109: SyntaxWarning: Exception creating Regex for oneOf, building MatchFirst\r\n  int_variables2 = (oneOf(alphabetu.split())\r\n/Users/ned/coverage/trunk/.tox/py37/lib/python3.7/site-packages/contracts/library/variables.py:110: SyntaxWarning: Exception creating Regex for oneOf, building MatchFirst\r\n  + FollowedBy(NotAny(oneOf(nofollow.split()))))\r\n/Users/ned/coverage/trunk/.tox/py37/lib/python3.7/site-packages/contracts/library/variables.py:111: SyntaxWarning: Exception creating Regex for oneOf, building MatchFirst\r\n  misc_variables2 = (oneOf(alphabetl.split())\r\n/Users/ned/coverage/trunk/.tox/py37/lib/python3.7/site-packages/contracts/library/variables.py:112: SyntaxWarning: Exception creating Regex for oneOf, building MatchFirst\r\n  + FollowedBy(NotAny(oneOf(nofollow.split() + ['x']))))\r\n```\r\nIt works fine with pyparsing 2.4.2.  I don't know if this is a regression in pyparsing, or a long-standing incorrect use by PyContracts.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/154", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/154/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/154/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/154", "id": 512967168, "node_id": "MDU6SXNzdWU1MTI5NjcxNjg=", "number": 154, "title": "Support arbitrary sequences, not just strings", "user": {"login": "SoniEx2", "id": 1779619, "node_id": "MDQ6VXNlcjE3Nzk2MTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1779619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SoniEx2", "html_url": "https://github.com/SoniEx2", "followers_url": "https://api.github.com/users/SoniEx2/followers", "following_url": "https://api.github.com/users/SoniEx2/following{/other_user}", "gists_url": "https://api.github.com/users/SoniEx2/gists{/gist_id}", "starred_url": "https://api.github.com/users/SoniEx2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SoniEx2/subscriptions", "organizations_url": "https://api.github.com/users/SoniEx2/orgs", "repos_url": "https://api.github.com/users/SoniEx2/repos", "events_url": "https://api.github.com/users/SoniEx2/events{/privacy}", "received_events_url": "https://api.github.com/users/SoniEx2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-27T13:34:20Z", "updated_at": "2019-11-11T14:45:33Z", "closed_at": "2019-11-11T12:39:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "On most parsers, you'd have separate tokenizer and parser. However, with PEGs, this style is generally unsupported. I find that it makes parsing a lot easier, with cleaner and more maintainable code. As such, could we be able to operate on sequences/lists in addition to strings? Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/153", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/153/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/153/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/153/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/153", "id": 512857429, "node_id": "MDU6SXNzdWU1MTI4NTc0Mjk=", "number": 153, "title": "Unable to parse basic subscript!", "user": {"login": "enjoysmath", "id": 1606391, "node_id": "MDQ6VXNlcjE2MDYzOTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1606391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/enjoysmath", "html_url": "https://github.com/enjoysmath", "followers_url": "https://api.github.com/users/enjoysmath/followers", "following_url": "https://api.github.com/users/enjoysmath/following{/other_user}", "gists_url": "https://api.github.com/users/enjoysmath/gists{/gist_id}", "starred_url": "https://api.github.com/users/enjoysmath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/enjoysmath/subscriptions", "organizations_url": "https://api.github.com/users/enjoysmath/orgs", "repos_url": "https://api.github.com/users/enjoysmath/repos", "events_url": "https://api.github.com/users/enjoysmath/events{/privacy}", "received_events_url": "https://api.github.com/users/enjoysmath/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-26T16:40:13Z", "updated_at": "2019-10-26T17:05:23Z", "closed_at": "2019-10-26T16:41:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nfrom pyparsing import *\r\n\r\nvar_alpha_regex =  \\\r\n   r'[a-zA-Z]|' + \\\r\n   r'\\\\alpha|\\\\beta|\\\\gamma|\\\\delta|\\\\epsilon|' + \\\r\n   r'\\\\zeta|\\\\eta|\\\\theta|\\\\vartheta|\\\\iota|' + \\\r\n   r'\\\\kappa|\\\\lambda|\\\\mu|\\\\nu|\\\\xi|\\\\pi|' + \\\r\n   r'\\\\rho|\\\\varrho|\\\\sigma|\\\\tau|\\\\upsilon|' + \\\r\n   r'\\\\phi|\\\\varphi|\\\\chi|\\\\psi|\\\\omega' + \\\r\n   r'\\\\Gamma|\\\\Delta|\\\\Theta|\\\\Xi|\\\\Pi|\\\\Sigma' + \\\r\n   r'\\\\Upsilon|\\\\Phi|\\\\Psi|\\\\Omega|.'  # Yes an \"any char\" at end\r\nany_chr = Regex('.')\r\nvar_alpha = Regex(var_alpha_regex)\r\nexpr = Forward()\r\nsubscript = '_' + (('{' + expr + '}') ^ any_chr)\r\nsupscript = '^' + (('{' + expr + '}') ^ any_chr)\r\nscript = (subscript + Optional(supscript)) ^ (supscript + Optional(subscript))\r\nvariable = var_alpha + Optional(script)\r\nexpr = variable ^ any_chr\r\n\r\nif __name__ == '__main__':\r\n   while True:\r\n      s = input(\"s=\")\r\n      var = variable.parseString(s)\r\n      print(var)\r\n```\r\n\r\nCopy / paste that code into a python editor and run.  Type in:\r\na_{1}\r\n\r\nThe parse result is [a, _, {] !!\r\n\r\nPlease help me find out what's not working.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/148", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/148/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/148/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/148", "id": 509449431, "node_id": "MDU6SXNzdWU1MDk0NDk0MzE=", "number": 148, "title": "Missing doc for setParseAction", "user": {"login": "JohnCC330", "id": 3728987, "node_id": "MDQ6VXNlcjM3Mjg5ODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/3728987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnCC330", "html_url": "https://github.com/JohnCC330", "followers_url": "https://api.github.com/users/JohnCC330/followers", "following_url": "https://api.github.com/users/JohnCC330/following{/other_user}", "gists_url": "https://api.github.com/users/JohnCC330/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnCC330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnCC330/subscriptions", "organizations_url": "https://api.github.com/users/JohnCC330/orgs", "repos_url": "https://api.github.com/users/JohnCC330/repos", "events_url": "https://api.github.com/users/JohnCC330/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnCC330/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-19T13:14:47Z", "updated_at": "2019-10-20T14:08:46Z", "closed_at": "2019-10-20T14:08:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the `EpyDoc`-generated docs, info for `setParseAction` is missing (even though `traceParseAction` is present).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/129", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/129/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/129/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/129", "id": 503474025, "node_id": "MDU6SXNzdWU1MDM0NzQwMjU=", "number": 129, "title": "ExplainExceptionTest is changing the context for subsequent tests", "user": {"login": "klahnakoski", "id": 2334429, "node_id": "MDQ6VXNlcjIzMzQ0Mjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2334429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klahnakoski", "html_url": "https://github.com/klahnakoski", "followers_url": "https://api.github.com/users/klahnakoski/followers", "following_url": "https://api.github.com/users/klahnakoski/following{/other_user}", "gists_url": "https://api.github.com/users/klahnakoski/gists{/gist_id}", "starred_url": "https://api.github.com/users/klahnakoski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klahnakoski/subscriptions", "organizations_url": "https://api.github.com/users/klahnakoski/orgs", "repos_url": "https://api.github.com/users/klahnakoski/repos", "events_url": "https://api.github.com/users/klahnakoski/events{/privacy}", "received_events_url": "https://api.github.com/users/klahnakoski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-07T14:04:03Z", "updated_at": "2020-06-28T03:29:27Z", "closed_at": "2020-06-28T03:29:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "The unittest.py test suite must be run in a particular order to pass.  This means there are some inter-dependencies between tests; not just any order will pass. This is a problem that should be fixed to help with https://github.com/orgs/pyparsing/teams/pyparsing-dev/discussions/5\r\n\r\nI looked into one interfering test:  [HTMLStripperTest](https://github.com/pyparsing/pyparsing/blob/master/unitTests.py#L3759) will run fine on its own.  If [ExplainExceptionTest](https://github.com/pyparsing/pyparsing/blob/master/unitTests.py#L4638) is run before, then [HTMLStripperTest](https://github.com/pyparsing/pyparsing/blob/master/unitTests.py#L3759) will fail.  I do not know why yet; [maybe it is the Packrat?](https://github.com/pyparsing/pyparsing/blob/master/unitTests.py#L4662)\r\n\r\nOn a related note, [ExplainExceptionTest](https://github.com/pyparsing/pyparsing/blob/master/unitTests.py#L4638) does not seem to test anything; whether the parsing happens or not, the test does not fail.  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/127", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/127/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/127/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/127", "id": 499795568, "node_id": "MDU6SXNzdWU0OTk3OTU1Njg=", "number": 127, "title": "PrecededBy: Fails when argument is not Literal - and infinite recursion if named", "user": {"login": "EdwardJB", "id": 30390944, "node_id": "MDQ6VXNlcjMwMzkwOTQ0", "avatar_url": "https://avatars1.githubusercontent.com/u/30390944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EdwardJB", "html_url": "https://github.com/EdwardJB", "followers_url": "https://api.github.com/users/EdwardJB/followers", "following_url": "https://api.github.com/users/EdwardJB/following{/other_user}", "gists_url": "https://api.github.com/users/EdwardJB/gists{/gist_id}", "starred_url": "https://api.github.com/users/EdwardJB/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EdwardJB/subscriptions", "organizations_url": "https://api.github.com/users/EdwardJB/orgs", "repos_url": "https://api.github.com/users/EdwardJB/repos", "events_url": "https://api.github.com/users/EdwardJB/events{/privacy}", "received_events_url": "https://api.github.com/users/EdwardJB/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/pyparsing/pyparsing/milestones/1", "html_url": "https://github.com/pyparsing/pyparsing/milestone/1", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/milestones/1/labels", "id": 4747634, "node_id": "MDk6TWlsZXN0b25lNDc0NzYzNA==", "number": 1, "title": "3.0.0", "description": null, "creator": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 1, "state": "open", "created_at": "2019-10-13T21:18:22Z", "updated_at": "2019-11-05T06:36:21Z", "due_on": null, "closed_at": null}, "comments": 3, "created_at": "2019-09-28T17:00:12Z", "updated_at": "2019-11-05T06:36:22Z", "closed_at": "2019-11-05T06:36:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version `2.4.2`.\r\n\r\nAn unnamed `PrecededBy` with a `Literal` argument seems to work:\r\n\r\n```python\r\nstring_test = 'notworking'\r\n#negs = pyparsing.Or(['not', 'un'])('negs')\r\nnegs_pb = pyparsing.PrecededBy('not', retreat=100)#('negs_lb')\r\npattern = (negs_pb + pyparsing.Literal('working'))('main')\r\n\r\nresults = (list(pattern.scanString(string_test)) or [[None]])[0]\r\nfor result in results:\r\n    if type(result) is pyparsing.ParseResults:\r\n        print(result.dump())\r\n    else:\r\n        print(result)\r\n```\r\n```\r\n['working']\r\n- main: ['working']\r\n```\r\n\r\nBut if I use a complex object instead of  `Literal`:\r\n\r\n```python\r\nstring_test = 'notworking'\r\nnegs = pyparsing.Or(['not', 'un'])('negs')\r\nnegs_pb = pyparsing.PrecededBy(negs, retreat=100)('negs_lb')\r\npattern = (negs_pb + pyparsing.Literal('working'))('main')\r\n\r\nresults = (list(pattern.scanString(string_test)) or [[None]])[0]\r\nfor result in results:\r\n    if type(result) is pyparsing.ParseResults:\r\n        print(result.dump())\r\n    else:\r\n        print(result)\r\n```\r\n```\r\nNone\r\n```\r\n\r\nAnd if I use a `Literal` argument but name the `PrecededBy`:\r\n\r\n```python\r\nstring_test = 'notworking'\r\n#negs = pyparsing.Or(['not', 'un'])('negs')\r\nnegs_pb = pyparsing.PrecededBy('not', retreat=100)('negs_lb')\r\npattern = (negs_pb + pyparsing.Literal('working'))('main')\r\n\r\nresults = (list(pattern.scanString(string_test)) or [[None]])[0]\r\nfor result in results:\r\n    if type(result) is pyparsing.ParseResults:\r\n        print(result.dump())\r\n    else:\r\n        print(result)\r\n```\r\n```\r\n  File \"C:/repo/parsing/t_series.py\", line 13, in <module>\r\n    print(result.dump())\r\n  File \"C:\\Python37\\lib\\site-packages\\pyparsing.py\", line 1094, in dump\r\n    out.append(v.dump(indent=indent, full=full, include_list=include_list, _depth=_depth + 1))\r\n  File \"C:\\Python37\\lib\\site-packages\\pyparsing.py\", line 1094, in dump\r\n    out.append(v.dump(indent=indent, full=full, include_list=include_list, _depth=_depth + 1))\r\n  File \"C:\\Python37\\lib\\site-packages\\pyparsing.py\", line 1094, in dump\r\n    out.append(v.dump(indent=indent, full=full, include_list=include_list, _depth=_depth + 1))\r\n  [Previous line repeated 985 more times]\r\n  File \"C:\\Python37\\lib\\site-packages\\pyparsing.py\", line 1087, in dump\r\n    items = sorted((str(k), v) for k, v in self.items())\r\n  File \"C:\\Python37\\lib\\site-packages\\pyparsing.py\", line 1087, in <genexpr>\r\n    items = sorted((str(k), v) for k, v in self.items())\r\n  File \"C:\\Python37\\lib\\site-packages\\pyparsing.py\", line 654, in <genexpr>\r\n    return ((k, self[k]) for k in self._iterkeys())\r\n  File \"C:\\Python37\\lib\\site-packages\\pyparsing.py\", line 586, in __getitem__\r\n    if isinstance(i, (int, slice)):\r\nRecursionError: maximum recursion depth exceeded in __instancecheck__\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/124", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/124/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/124/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/124", "id": 492760646, "node_id": "MDU6SXNzdWU0OTI3NjA2NDY=", "number": 124, "title": "Discrepancy in datatype returned from a rule's action", "user": {"login": "aanastasiou", "id": 1336337, "node_id": "MDQ6VXNlcjEzMzYzMzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1336337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aanastasiou", "html_url": "https://github.com/aanastasiou", "followers_url": "https://api.github.com/users/aanastasiou/followers", "following_url": "https://api.github.com/users/aanastasiou/following{/other_user}", "gists_url": "https://api.github.com/users/aanastasiou/gists{/gist_id}", "starred_url": "https://api.github.com/users/aanastasiou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aanastasiou/subscriptions", "organizations_url": "https://api.github.com/users/aanastasiou/orgs", "repos_url": "https://api.github.com/users/aanastasiou/repos", "events_url": "https://api.github.com/users/aanastasiou/events{/privacy}", "received_events_url": "https://api.github.com/users/aanastasiou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2019-09-12T12:00:45Z", "updated_at": "2019-10-01T07:53:34Z", "closed_at": "2019-10-01T07:53:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a bit of a subtle one:\r\n\r\nI have a parser that amongst other things, parses a matrix in a text file. At a higher level, the application is not really interested in the values of the matrix but the \"object\" that emerges from the matrix. For this purpose, I wrote a rule action that turns the matrix values into that \"object\" and serve it ready for consumption to the application.\r\n\r\nAnd here is where the discrepancy emerged.\r\n\r\n`pyparsing` returns \"raw\" results in a nested list form or, if the rules have been suitably named and `Group`ed, it returns a proper `dict`-like structure.\r\n\r\nIn my case, the raw `list`-like form contains the object I am creating in its expected form, but the `dict`-like object contains a particular view of the object. Therefore, when I am trying to access the \"named\" attribute, I receive a different data-type...which is a bit confusing.\r\n\r\nHere is a minimal example with just enough detail to reproduce this behaviour:\r\n\r\n```\r\nimport networkx\r\nimport numpy\r\nimport pyparsing\r\n\r\ndef mat_to_net(s, l, t):\r\n    \"\"\"Convert matrix to network.\"\"\"\r\n    s = []\r\n    for an_entry in t:\r\n        s.append(list(map(lambda x:int(x), an_entry)))\r\n    mat = numpy.array(s)\r\n    return networkx.from_numpy_array(mat, create_using = networkx.DiGraph)    \r\n\r\ndef get_parser():\r\n    \"\"\"Construct the parser.\r\n\r\n    Parses something like:\r\n    '010\\n100\\n110'\r\n    \"\"\"\r\n    row = pyparsing.Regex(r\"[0-1][0-1][0-1]\")\r\n    mat = pyparsing.OneOrMore(row)(\"G\").setParseAction(mat_to_net)\r\n    return mat\r\n\r\nif __name__ == \"__main__\":\r\n    data = \"000\\n000\\n110\"\r\n    p = get_parser()\r\n    q = p.parseString(data)\r\n```\r\n\r\nNow, if you look at `q`, you might get something like this:\r\n\r\n```\r\n([<networkx.classes.digraph.DiGraph object at 0x7f5532789be0>], {'G': [AtlasView({})]})\r\n```\r\n\r\nThe first part is exactly what would be expected as an output: You enter some text and you get back the object you want (a `DiGraph`). But when you look across to the named attribute, you get an entirely different data type (the `AtlasView` is related to a `DiGraph` but it is not what is expected there). \r\n\r\nNot only this is a different data type but the value is different. Basically the `AtlasView` points to an \"empty\" network.\r\n\r\nBut, even if we were to take a step backwards here and return the matrix itself (so, exchange `return networkx.from_numpy_array(mat, create_using = networkx.DiGraph)` for `return mat`), we would notice this output:\r\n\r\n```\r\n([array([[0, 0, 0],\r\n       [0, 0, 0],\r\n       [1, 1, 0]])], {'G': [array([0, 0, 0])]})\r\n``` \r\nWhere, the array in the `list`-like object is as expected, but in the named rule only the first row of this array has survived.\r\n\r\nIt seems that this might be caused by something like `return something[0]` (emphasis on **[0]**) somewhere within `pyparsing` because if you substitute `return mat` for `return [mat]` (in the example above now), the returned results are as expected. For example:\r\n\r\n```\r\n([<networkx.classes.digraph.DiGraph object at 0x7f5533563390>], {'G':[([<networkx.classes.digraph.DiGraph object at 0x7f5533563390>], {})]})\r\n```\r\nWhich is fine, except for having to descent within one more list while processing the results. This is not such a big problem in a shallow structure like this one but when you parse more complex data structures, this extra `[0]` that must be added would be a source of confusion.\r\n\r\nI did have a look within `pyparsing` but I was not able to locate where this might be hapenning with certainty. Perhaps [line 5256](https://github.com/pyparsing/pyparsing/blob/master/pyparsing.py#L5256) (?).\r\n\r\nHope this helps.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/123", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/123/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/123/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/123", "id": 492148270, "node_id": "MDU6SXNzdWU0OTIxNDgyNzA=", "number": 123, "title": "More infinite recursion", "user": {"login": "MichaelClerx", "id": 517644, "node_id": "MDQ6VXNlcjUxNzY0NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/517644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MichaelClerx", "html_url": "https://github.com/MichaelClerx", "followers_url": "https://api.github.com/users/MichaelClerx/followers", "following_url": "https://api.github.com/users/MichaelClerx/following{/other_user}", "gists_url": "https://api.github.com/users/MichaelClerx/gists{/gist_id}", "starred_url": "https://api.github.com/users/MichaelClerx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MichaelClerx/subscriptions", "organizations_url": "https://api.github.com/users/MichaelClerx/orgs", "repos_url": "https://api.github.com/users/MichaelClerx/repos", "events_url": "https://api.github.com/users/MichaelClerx/events{/privacy}", "received_events_url": "https://api.github.com/users/MichaelClerx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-09-11T10:22:04Z", "updated_at": "2019-11-05T06:37:01Z", "closed_at": "2019-11-05T06:37:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "We're seeing a similar issue to #85 when using pyparsing 2.4.2, that doesn't occur with 2.3.1.\r\n\r\nSelected part of the testing output below:\r\n\r\n    ../../../virtualenv/python3.6.3/lib/python3.6/site-packages/fc/parsing/CompactSyntaxParser.py:1577: in CompactSyntaxParser\r\n        expr.ignore('\\\\' + p.LineEnd())\r\n    ../../../virtualenv/python3.6.3/lib/python3.6/site-packages/pyparsing.py:4450: in ignore\r\n        self.expr.ignore(self.ignoreExprs[-1])\r\n    ../../../virtualenv/python3.6.3/lib/python3.6/site-packages/pyparsing.py:4446: in ignore\r\n        self.expr.ignore(self.ignoreExprs[-1])\r\n    ../../../virtualenv/python3.6.3/lib/python3.6/site-packages/pyparsing.py:4446: in ignore\r\n        self.expr.ignore(self.ignoreExprs[-1])\r\n    ../../../virtualenv/python3.6.3/lib/python3.6/site-packages/pyparsing.py:3880: in ignore\r\n        e.ignore(self.ignoreExprs[-1])\r\n    ../../../virtualenv/python3.6.3/lib/python3.6/site-packages/pyparsing.py:3880: in ignore\r\n        e.ignore(self.ignoreExprs[-1])\r\n    ../../../virtualenv/python3.6.3/lib/python3.6/site-packages/pyparsing.py:4446: in ignore\r\n        self.expr.ignore(self.ignoreExprs[-1])\r\n    ../../../virtualenv/python3.6.3/lib/python3.6/site-packages/pyparsing.py:3880: in ignore\r\n        e.ignore(self.ignoreExprs[-1])\r\n    ../../../virtualenv/python3.6.3/lib/python3.6/site-packages/pyparsing.py:3880: in ignore\r\n        e.ignore(self.ignoreExprs[-1])\r\n    ../../../virtualenv/python3.6.3/lib/python3.6/site-packages/pyparsing.py:4446: in ignore\r\n        self.expr.ignore(self.ignoreExprs[-1])\r\n    ../../../virtualenv/python3.6.3/lib/python3.6/site-packages/pyparsing.py:3880: in ignore\r\n        e.ignore(self.ignoreExprs[-1])\r\n    ../../../virtualenv/python3.6.3/lib/python3.6/site-packages/pyparsing.py:3880: in ignore\r\n        e.ignore(self.ignoreExprs[-1])\r\n    ../../../virtualenv/python3.6.3/lib/python3.6/site-packages/pyparsing.py:4446: in ignore\r\n        self.expr.ignore(self.ignoreExprs[-1])\r\n\r\n    ...\r\n\r\n    E   RecursionError: maximum recursion depth exceeded while calling a Python object\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/120", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/120/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/120/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/120", "id": 485976257, "node_id": "MDU6SXNzdWU0ODU5NzYyNTc=", "number": 120, "title": "Sphinx error", "user": {"login": "egberts", "id": 10352354, "node_id": "MDQ6VXNlcjEwMzUyMzU0", "avatar_url": "https://avatars0.githubusercontent.com/u/10352354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/egberts", "html_url": "https://github.com/egberts", "followers_url": "https://api.github.com/users/egberts/followers", "following_url": "https://api.github.com/users/egberts/following{/other_user}", "gists_url": "https://api.github.com/users/egberts/gists{/gist_id}", "starred_url": "https://api.github.com/users/egberts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/egberts/subscriptions", "organizations_url": "https://api.github.com/users/egberts/orgs", "repos_url": "https://api.github.com/users/egberts/repos", "events_url": "https://api.github.com/users/egberts/events{/privacy}", "received_events_url": "https://api.github.com/users/egberts/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-08-27T18:53:44Z", "updated_at": "2019-08-27T22:23:58Z", "closed_at": "2019-08-27T22:23:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Latest master tree (2.5.0a1), I cannot create the pyparsing document anymore.\r\n\r\n```bash\r\npyparsing/docs$ make html\r\nRunning Sphinx v1.4.9\r\n\r\nConfiguration error:\r\nThere is a syntax error in your configuration file: invalid syntax (pyparsing.py, line 541)\r\nMakefile:20: recipe for target 'html' failed\r\nmake: *** [html] Error 1\r\n```\r\n\r\nDid I miss a step prior to performing that 'make html'?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/119", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/119/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/119/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/119", "id": 485779153, "node_id": "MDU6SXNzdWU0ODU3NzkxNTM=", "number": 119, "title": "Adding assert()-class methods for List/Dict verification via .asDict()/.asList()", "user": {"login": "egberts", "id": 10352354, "node_id": "MDQ6VXNlcjEwMzUyMzU0", "avatar_url": "https://avatars0.githubusercontent.com/u/10352354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/egberts", "html_url": "https://github.com/egberts", "followers_url": "https://api.github.com/users/egberts/followers", "following_url": "https://api.github.com/users/egberts/following{/other_user}", "gists_url": "https://api.github.com/users/egberts/gists{/gist_id}", "starred_url": "https://api.github.com/users/egberts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/egberts/subscriptions", "organizations_url": "https://api.github.com/users/egberts/orgs", "repos_url": "https://api.github.com/users/egberts/repos", "events_url": "https://api.github.com/users/egberts/events{/privacy}", "received_events_url": "https://api.github.com/users/egberts/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2019-08-27T12:27:35Z", "updated_at": "2019-11-11T12:52:26Z", "closed_at": "2019-11-11T12:52:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since I've been doing lots of unit tests associated with the pyparsing and Python List/Dict, there might be some benefit from creating a couple of `self.assertParserElementListTrue`-related functions to assist the pyparsing community with ensuring that nothing gets broken as we go along.\r\n\r\nI've got a rough prototype of which I used heavily in my ISC Bind9/DHCP for such verification that List/Dict got constructed ... exactly and precisely:\r\n\r\n```python\r\ndef assertParseElement(a_parse_element, a_test_data, a_expected_result,\r\n                       a_assert_flag=True):\r\n    \"\"\"\r\n    A nice unit test tool which provides an assert()-like function\r\n    that takes an string, parse the string, takes its computed\r\n    Pythonized list/dict and compares the result against its\r\n    expected Pythonized result.\r\n    :param a_parse_element:  ParserElement class to exercise\r\n    :param a_test_data:  A string in which to be parsed by a_parse_element\r\n    :param a_expected_result:  A Python list in which to expect\r\n    :param a_assert_flag:  If True, then expected result must match or an\r\n                           exception gets raised.\r\n                           If False, then parse MUST fail or expected\r\n                           result does not match, else an exception\r\n                           gets raised\r\n    :return: Always returns True (exception handles the False, like\r\n             an assert() class would do)\r\n    \"\"\"\r\n```\r\nIs this something that our wonderful pyparsing community can use to ensure that such construct of List/Dict get done correctly?\r\n\r\n\r\nhttps://github.com/egberts/pyparsing/blob/9a06cc2e5c47228db612a17fc68d6a931b4425db/test/test_isc_bind_aml.py#L72", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/116", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/116/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/116/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/116", "id": 480783012, "node_id": "MDU6SXNzdWU0ODA3ODMwMTI=", "number": 116, "title": "A line width should be established.", "user": {"login": "cngkaygusuz", "id": 1507670, "node_id": "MDQ6VXNlcjE1MDc2NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1507670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cngkaygusuz", "html_url": "https://github.com/cngkaygusuz", "followers_url": "https://api.github.com/users/cngkaygusuz/followers", "following_url": "https://api.github.com/users/cngkaygusuz/following{/other_user}", "gists_url": "https://api.github.com/users/cngkaygusuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/cngkaygusuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cngkaygusuz/subscriptions", "organizations_url": "https://api.github.com/users/cngkaygusuz/orgs", "repos_url": "https://api.github.com/users/cngkaygusuz/repos", "events_url": "https://api.github.com/users/cngkaygusuz/events{/privacy}", "received_events_url": "https://api.github.com/users/cngkaygusuz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-14T16:49:12Z", "updated_at": "2019-08-19T02:14:37Z", "closed_at": "2019-08-19T02:14:37Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The PEP8 wiki page clearly indicates the 78-character limit is not going to be adhered. I think 78 is too low, taking the modern development equipment into consideration, nevertheless, a standard should be established, for the sake of being explicit and not leaving an ambiguity.\r\n\r\nInstead of 78 characters, I propose to use 120 characters, since it is:\r\n* what most modern python projects use,\r\n* the default setting in Jetbrain's Python IDE (Pycharm),\r\n* the number which _pyparsing_ seem to naturally use as a breaking point. Very few lines go beyond 120 characters.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/111", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/111/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/111/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/111", "id": 474821305, "node_id": "MDU6SXNzdWU0NzQ4MjEzMDU=", "number": 111, "title": "Guidance for warn_ungrouped_named_tokens_in_collection", "user": {"login": "Zopieux", "id": 81353, "node_id": "MDQ6VXNlcjgxMzUz", "avatar_url": "https://avatars2.githubusercontent.com/u/81353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zopieux", "html_url": "https://github.com/Zopieux", "followers_url": "https://api.github.com/users/Zopieux/followers", "following_url": "https://api.github.com/users/Zopieux/following{/other_user}", "gists_url": "https://api.github.com/users/Zopieux/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zopieux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zopieux/subscriptions", "organizations_url": "https://api.github.com/users/Zopieux/orgs", "repos_url": "https://api.github.com/users/Zopieux/repos", "events_url": "https://api.github.com/users/Zopieux/events{/privacy}", "received_events_url": "https://api.github.com/users/Zopieux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-30T21:07:09Z", "updated_at": "2019-07-31T22:15:01Z", "closed_at": "2019-07-31T20:36:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Issue #110 (and others) are about `warn_ungrouped_named_tokens_in_collection` being particularly noisy. According to the release notes, this warning was added in the latest major release, and recently silenced by default.\r\n\r\nLooking at the code, the only explanation for this new warning is:\r\n> flag to enable warnings when a results name is defined on a containing expression with ungrouped subexpressions that also have results names\r\n\r\nI find this a bit unhelpful. Warnings are meant to notify developers that something's wrong with their code and they should feel bad, eg. deprecation notices. But for such a warning to be effective, the path to a sane, no-warning state must be easily identified so developers are compelled to fix their code.\r\n\r\nCould we get an explanation on how best to modify our code to fix this warning? I currently have code that relies on the behavior of having \"nested\" `setResultName`. It's probably bad practice, but works fine for me. Here is a small albeit dumb code that reproduces the issue. How would you approach the fix?\r\n\r\n```python\r\nimport pyparsing as pp\r\npp.__diag__.warn_ungrouped_named_tokens_in_collection = True\r\n\r\nnum = pp.Word(pp.nums).setParseAction(lambda t: int(t[0]))\r\nleft = num.setResultsName('left')\r\nright = num.setResultsName('right')\r\n\r\nequality = (left + pp.Suppress('==') + right).setResultsName('eq')\r\ninequality = (left + pp.Suppress('!=') + right).setResultsName('ne')\r\n\r\n\r\ndef parse(tokens):\r\n    left = tokens.get('left')\r\n    right = tokens.get('right')\r\n    if tokens.get('eq') is not None:\r\n        return left == right\r\n    if tokens.get('ne') is not None:\r\n        return left != right\r\n    raise ValueError(\"unknown operation\")\r\n\r\n\r\nclause = (equality | inequality).setParseAction(parse)\r\n\r\nprint(clause.parseString(\"42 == 42\"))\r\nprint(clause.parseString(\"42 == 43\"))\r\n\r\n# test.py:8: UserWarning: warn_ungrouped_named_tokens_in_collection:\r\n# setting results name 'eq' on And expression collides with 'right' on contained expression\r\n# [True]\r\n# [False]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/110", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/110/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/110/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/110", "id": 474399979, "node_id": "MDU6SXNzdWU0NzQzOTk5Nzk=", "number": 110, "title": "unexpected \"warn_ungrouped_named_tokens_in_collection\" warnings in versions >2.4.0", "user": {"login": "a-recknagel", "id": 2063412, "node_id": "MDQ6VXNlcjIwNjM0MTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/2063412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a-recknagel", "html_url": "https://github.com/a-recknagel", "followers_url": "https://api.github.com/users/a-recknagel/followers", "following_url": "https://api.github.com/users/a-recknagel/following{/other_user}", "gists_url": "https://api.github.com/users/a-recknagel/gists{/gist_id}", "starred_url": "https://api.github.com/users/a-recknagel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a-recknagel/subscriptions", "organizations_url": "https://api.github.com/users/a-recknagel/orgs", "repos_url": "https://api.github.com/users/a-recknagel/repos", "events_url": "https://api.github.com/users/a-recknagel/events{/privacy}", "received_events_url": "https://api.github.com/users/a-recknagel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-30T06:35:37Z", "updated_at": "2019-07-30T12:31:42Z", "closed_at": "2019-07-30T12:31:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Paul, I wanted to alert you to this issue in case you didn't hear about it yet: (https://github.com/sdispater/poetry/issues/1244, https://github.com/pypa/packaging/issues/170). The poetry people are working around it by fixing pyparsing to 4.2.0 \ud83d\ude15", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/109", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/109/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/109/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/109", "id": 473970128, "node_id": "MDU6SXNzdWU0NzM5NzAxMjg=", "number": 109, "title": "No documentation link in expected locations", "user": {"login": "lordmauve", "id": 617224, "node_id": "MDQ6VXNlcjYxNzIyNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/617224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lordmauve", "html_url": "https://github.com/lordmauve", "followers_url": "https://api.github.com/users/lordmauve/followers", "following_url": "https://api.github.com/users/lordmauve/following{/other_user}", "gists_url": "https://api.github.com/users/lordmauve/gists{/gist_id}", "starred_url": "https://api.github.com/users/lordmauve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lordmauve/subscriptions", "organizations_url": "https://api.github.com/users/lordmauve/orgs", "repos_url": "https://api.github.com/users/lordmauve/repos", "events_url": "https://api.github.com/users/lordmauve/events{/privacy}", "received_events_url": "https://api.github.com/users/lordmauve/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-29T10:20:23Z", "updated_at": "2019-11-05T06:38:27Z", "closed_at": "2019-11-05T06:38:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is no documentation site linked from pypi.org - indeed the project page is blank - or the README of the GitHub repo.\r\n\r\nI eventually found [HowToUsePyparsing.rst](https://github.com/pyparsing/pyparsing/blob/master/docs/HowToUsePyparsing.rst) from a closed GitHub issue. Whatever the best documentation resource is, it ought to be linked from\r\n\r\n- [ ] The PyPI project page\r\n- [x] The GitHub README ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/106", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/106/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/106/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/106", "id": 472212864, "node_id": "MDU6SXNzdWU0NzIyMTI4NjQ=", "number": 106, "title": "can't install pyparsing==2.4.1", "user": {"login": "imbosser", "id": 19657908, "node_id": "MDQ6VXNlcjE5NjU3OTA4", "avatar_url": "https://avatars1.githubusercontent.com/u/19657908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imbosser", "html_url": "https://github.com/imbosser", "followers_url": "https://api.github.com/users/imbosser/followers", "following_url": "https://api.github.com/users/imbosser/following{/other_user}", "gists_url": "https://api.github.com/users/imbosser/gists{/gist_id}", "starred_url": "https://api.github.com/users/imbosser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imbosser/subscriptions", "organizations_url": "https://api.github.com/users/imbosser/orgs", "repos_url": "https://api.github.com/users/imbosser/repos", "events_url": "https://api.github.com/users/imbosser/events{/privacy}", "received_events_url": "https://api.github.com/users/imbosser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-24T10:47:47Z", "updated_at": "2019-08-01T00:03:12Z", "closed_at": "2019-07-24T11:16:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear all, I can't install pyparsing 2.4.1 by pip:\r\n```\r\n###pip install pyparsing===2.4.1\r\n\r\nCollecting pyparsing===2.4.1\r\n  Could not find a version that satisfies the requirement pyparsing===2.4.1 (from versions: 1.4.6, 1.4.7, 1.4.8, 1.4.11, 1.5.0, 1.5.1, 1.5.2, 1.5.3, 1.5.4, 1.5.5, 1.5.6, 1.5.7, 2.0.0, 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.1.8, 2.1.9, 2.1.10, 2.2.0, 2.2.1, 2.2.2, 2.3.0, 2.3.1, 2.4.0)\r\nNo matching distribution found for pyparsing===2.4.1\r\nYou are using pip version 8.1.1, however version 19.2.1 is available.\r\nYou should consider upgrading via the 'pip install --upgrade pip' command.\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/105", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/105/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/105/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/105", "id": 472039715, "node_id": "MDU6SXNzdWU0NzIwMzk3MTU=", "number": 105, "title": "2.4.1 release removed from PyPi?", "user": {"login": "orthanc", "id": 590698, "node_id": "MDQ6VXNlcjU5MDY5OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/590698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orthanc", "html_url": "https://github.com/orthanc", "followers_url": "https://api.github.com/users/orthanc/followers", "following_url": "https://api.github.com/users/orthanc/following{/other_user}", "gists_url": "https://api.github.com/users/orthanc/gists{/gist_id}", "starred_url": "https://api.github.com/users/orthanc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orthanc/subscriptions", "organizations_url": "https://api.github.com/users/orthanc/orgs", "repos_url": "https://api.github.com/users/orthanc/repos", "events_url": "https://api.github.com/users/orthanc/events{/privacy}", "received_events_url": "https://api.github.com/users/orthanc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 14, "created_at": "2019-07-24T01:45:49Z", "updated_at": "2019-07-30T07:53:02Z", "closed_at": "2019-07-30T01:40:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "The 2.4.1 release seems to have been removed from PyPi sometime on July 24th, but as far as I can tell there is no announcement of the reason for this and master branch still appears to contain the 2.4.1 changes.\r\n\r\nCurrently PyPi is reporting that the latest release is 2.4.0 released April 8, 2019.\r\n\r\nJust raising this issue to confirm that this is deliberate / alert if it is not.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/104", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/104/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/104/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/104", "id": 471605983, "node_id": "MDU6SXNzdWU0NzE2MDU5ODM=", "number": 104, "title": "getitem shorthand notation consistency", "user": {"login": "crowsonkb", "id": 4657022, "node_id": "MDQ6VXNlcjQ2NTcwMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/4657022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crowsonkb", "html_url": "https://github.com/crowsonkb", "followers_url": "https://api.github.com/users/crowsonkb/followers", "following_url": "https://api.github.com/users/crowsonkb/following{/other_user}", "gists_url": "https://api.github.com/users/crowsonkb/gists{/gist_id}", "starred_url": "https://api.github.com/users/crowsonkb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crowsonkb/subscriptions", "organizations_url": "https://api.github.com/users/crowsonkb/orgs", "repos_url": "https://api.github.com/users/crowsonkb/repos", "events_url": "https://api.github.com/users/crowsonkb/events{/privacy}", "received_events_url": "https://api.github.com/users/crowsonkb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-07-23T10:10:00Z", "updated_at": "2019-07-30T01:40:25Z", "closed_at": "2019-07-30T01:40:25Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I know it's a bit late for this critique since it's already been released, but in [this commit](https://github.com/pyparsing/pyparsing/commit/4c59256fd3af3206241419b7e8d51abaf9bc8498) a new shorthand notation was introduced for `ZeroOrMore`, `OneOrMore`, and general repetition expressions.\r\n\r\n`expr[...] is equivalent to OneOrMore(expr)`\r\n\r\nWhy not `ZeroOrMore`? You can still get `OneOrMore` via `expr[1, ...]` and it would be consistent with the other getitem shorthand notations:\r\n\r\n`expr[n, ...] or expr[n,] is equivalent to expr*n + ZeroOrMore(expr)`\r\n\r\nand\r\n\r\n`expr[..., n] is equivalent to expr*(0, n)`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/103", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/103/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/103/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/103", "id": 471579608, "node_id": "MDU6SXNzdWU0NzE1Nzk2MDg=", "number": 103, "title": "cmd2 0.8.9 is broken with 2.4.1 release", "user": {"login": "murlock", "id": 250625, "node_id": "MDQ6VXNlcjI1MDYyNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/250625?v=4", "gravatar_id": "", "url": "https://api.github.com/users/murlock", "html_url": "https://github.com/murlock", "followers_url": "https://api.github.com/users/murlock/followers", "following_url": "https://api.github.com/users/murlock/following{/other_user}", "gists_url": "https://api.github.com/users/murlock/gists{/gist_id}", "starred_url": "https://api.github.com/users/murlock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/murlock/subscriptions", "organizations_url": "https://api.github.com/users/murlock/orgs", "repos_url": "https://api.github.com/users/murlock/repos", "events_url": "https://api.github.com/users/murlock/events{/privacy}", "received_events_url": "https://api.github.com/users/murlock/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2019-07-23T09:18:03Z", "updated_at": "2019-07-30T01:40:55Z", "closed_at": "2019-07-30T01:40:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Minimal code (python 2.7)\r\n```\r\nimport cmd2\r\n\r\nclass MyApp(cmd2.Cmd):\r\n    def do_foo(self, args):\r\n        \"\"\"This docstring is the built-in help for the foo command.\"\"\"\r\n        self.poutput(cmd2.style('foo bar baz', fg='red'))\r\n\r\napp = MyApp()\r\napp.cmdloop()\r\n```\r\n\r\nWith pyparsing 2.4.1\r\n```\r\n(oio) murlock@asus:~ $ python ex.py \r\n/home/murlock/oio/local/lib/python2.7/site-packages/cmd2.py:4002: UserWarning: warn_ungrouped_named_tokens_in_collection: setting results name 'statement' on And expression collides with 'terminator' on contained expression\r\n  lambda x: x[0].strip())('args') + blankLineTerminator)('statement')\r\n/home/murlock/oio/local/lib/python2.7/site-packages/cmd2.py:4009: UserWarning: warn_ungrouped_named_tokens_in_collection: setting results name 'statement' on And expression collides with 'terminator' on contained expression\r\n  ignore=do_not_parse).setParseAction(lambda x: x[0].strip())('suffix') +\r\n/home/murlock/oio/local/lib/python2.7/site-packages/cmd2.py:4017: UserWarning: warn_ungrouped_named_tokens_in_collection: setting results name 'statement' on And expression collides with 'command' on contained expression\r\n  pyparsing.Optional(terminator_parser) + after_elements)\r\n/home/murlock/oio/local/lib/python2.7/site-packages/cmd2.py:4017: UserWarning: warn_ungrouped_named_tokens_in_collection: setting results name 'statement' on And expression collides with 'args' on contained expression\r\n  pyparsing.Optional(terminator_parser) + after_elements)\r\n/home/murlock/oio/local/lib/python2.7/site-packages/cmd2.py:4019: UserWarning: warn_ungrouped_named_tokens_in_collection: setting results name 'statement' on And expression collides with 'terminator' on contained expression\r\n  blankLineTerminationParser = blankLineTerminationParser.setResultsName('statement')\r\n(Cmd) dede\r\n### CPU is 100%\r\n```\r\n\r\nwith pyparsing 2.4.0\r\n```\r\n(oio) murlock@asus:~ $ python ex.py \r\n(Cmd) dede\r\n*** Unknown syntax: dede \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/100", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/100/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/100/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/100", "id": 461870024, "node_id": "MDU6SXNzdWU0NjE4NzAwMjQ=", "number": 100, "title": "Needed help for bytes pattern in Python3", "user": {"login": "rsmekala", "id": 35719774, "node_id": "MDQ6VXNlcjM1NzE5Nzc0", "avatar_url": "https://avatars1.githubusercontent.com/u/35719774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsmekala", "html_url": "https://github.com/rsmekala", "followers_url": "https://api.github.com/users/rsmekala/followers", "following_url": "https://api.github.com/users/rsmekala/following{/other_user}", "gists_url": "https://api.github.com/users/rsmekala/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsmekala/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsmekala/subscriptions", "organizations_url": "https://api.github.com/users/rsmekala/orgs", "repos_url": "https://api.github.com/users/rsmekala/repos", "events_url": "https://api.github.com/users/rsmekala/events{/privacy}", "received_events_url": "https://api.github.com/users/rsmekala/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-28T05:58:10Z", "updated_at": "2019-07-05T16:24:13Z", "closed_at": "2019-07-05T16:24:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I needed some help with the below pattern.\r\n\r\nPattern:\r\n```\r\n{{[{W:(0123...) [. W:(0123...)]... Suppress:(\":\")}] Suppress:(\"<\") W:(0123...) Suppress:(\">\") W:(ABCD...,abcd...) W:(0123...) Combine:({W:(0123...) \":\" W:(0123...) \":\" W:(0123...)}) W:(ABCD...) W:(ABCD...) [{Suppress:(\"[\") W:(0123...) Suppress:(\"]\")}] Suppress:(\":\") Re:('.*') StringEnd} | Suppress:(LineEnd)}\r\n```\r\n\r\nIt works fine in Python 2 environment, but in Python 3 environment it generates the following exception. I do understand, that it is caused due to the fundamental difference in str implementation between Python2 and Python3.\r\n\r\nCan you help me with a pattern that can match bytes input or string input alike without converting the input from bytes to string or vice-versa ??\r\n\r\n\r\n### Logs\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/rsmekala/test/venv/lib/python3.7/site-packages/salt/engines/junos_syslog.py\", line 173, in parse\r\n    parsed = self.__pattern.parseString(line)\r\n  File \"/Users/rsmekala/test/venv/lib/python3.7/site-packages/pyparsing.py\", line 1818, in parseString\r\n    loc, tokens = self._parse( instring, 0 )\r\n  File \"/Users/rsmekala/test/venv/lib/python3.7/site-packages/pyparsing.py\", line 1562, in _parseNoCache\r\n    loc,tokens = self.parseImpl( instring, preloc, doActions )\r\n  File \"/Users/rsmekala/test/venv/lib/python3.7/site-packages/pyparsing.py\", line 3902, in parseImpl\r\n    ret = e._parse( instring, loc, doActions )\r\n  File \"/Users/rsmekala/test/venv/lib/python3.7/site-packages/pyparsing.py\", line 1562, in _parseNoCache\r\n    loc,tokens = self.parseImpl( instring, preloc, doActions )\r\n  File \"/Users/rsmekala/test/venv/lib/python3.7/site-packages/pyparsing.py\", line 3735, in parseImpl\r\n    loc, resultlist = self.exprs[0]._parse( instring, loc, doActions, callPreParse=False )\r\n  File \"/Users/rsmekala/test/venv/lib/python3.7/site-packages/pyparsing.py\", line 1562, in _parseNoCache\r\n    loc,tokens = self.parseImpl( instring, preloc, doActions )\r\n  File \"/Users/rsmekala/test/venv/lib/python3.7/site-packages/pyparsing.py\", line 4458, in parseImpl\r\n    loc, tokens = self.expr._parse( instring, loc, doActions, callPreParse=False )\r\n  File \"/Users/rsmekala/test/venv/lib/python3.7/site-packages/pyparsing.py\", line 1562, in _parseNoCache\r\n    loc,tokens = self.parseImpl( instring, preloc, doActions )\r\n  File \"/Users/rsmekala/test/venv/lib/python3.7/site-packages/pyparsing.py\", line 3735, in parseImpl\r\n    loc, resultlist = self.exprs[0]._parse( instring, loc, doActions, callPreParse=False )\r\n  File \"/Users/rsmekala/test/venv/lib/python3.7/site-packages/pyparsing.py\", line 1562, in _parseNoCache\r\n    loc,tokens = self.parseImpl( instring, preloc, doActions )\r\n  File \"/Users/rsmekala/test/venv/lib/python3.7/site-packages/pyparsing.py\", line 4098, in parseImpl\r\n    return self.expr._parse( instring, loc, doActions, callPreParse=False )\r\n  File \"/Users/rsmekala/test/venv/lib/python3.7/site-packages/pyparsing.py\", line 1562, in _parseNoCache\r\n    loc,tokens = self.parseImpl( instring, preloc, doActions )\r\n  File \"/Users/rsmekala/test/venv/lib/python3.7/site-packages/pyparsing.py\", line 3735, in parseImpl\r\n    loc, resultlist = self.exprs[0]._parse( instring, loc, doActions, callPreParse=False )\r\n  File \"/Users/rsmekala/test/venv/lib/python3.7/site-packages/pyparsing.py\", line 1566, in _parseNoCache\r\n    loc,tokens = self.parseImpl( instring, preloc, doActions )\r\n  File \"/Users/rsmekala/test/venv/lib/python3.7/site-packages/pyparsing.py\", line 2933, in parseImpl\r\n    result = self.re.match(instring,loc)\r\nTypeError: cannot use a string pattern on a bytes-like object\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/97", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/97/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/97/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/97", "id": 452660983, "node_id": "MDU6SXNzdWU0NTI2NjA5ODM=", "number": 97, "title": "transformString loses whitespace?", "user": {"login": "ardeego", "id": 1694136, "node_id": "MDQ6VXNlcjE2OTQxMzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1694136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ardeego", "html_url": "https://github.com/ardeego", "followers_url": "https://api.github.com/users/ardeego/followers", "following_url": "https://api.github.com/users/ardeego/following{/other_user}", "gists_url": "https://api.github.com/users/ardeego/gists{/gist_id}", "starred_url": "https://api.github.com/users/ardeego/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ardeego/subscriptions", "organizations_url": "https://api.github.com/users/ardeego/orgs", "repos_url": "https://api.github.com/users/ardeego/repos", "events_url": "https://api.github.com/users/ardeego/events{/privacy}", "received_events_url": "https://api.github.com/users/ardeego/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-05T18:50:26Z", "updated_at": "2019-06-07T04:59:53Z", "closed_at": "2019-06-07T04:59:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I like to use tranformString to act as a preprocessor for some custom protocol buffer files.  I worked off of the proto_buffer example in the example folder in the repo and defined a slightly more complete grammar.  I am able to parse a whole custom file just fine and successfully can edit some options fields (tokens values) with new values in the file using setParseAction. But when it comes to outputting the file all the whitespace is gone. The macros example in the examples folder did not seem to have that issue (it is not using Groups tho). Am I missing something here or is this a bug? Any help is greatly appreciated. Thanks.\r\n\r\n```\r\ntop_level_defn = Group(\r\n            message_defn(\"messages\")\r\n            | enum_defn(\"enums\") \r\n            | extend_defn(\"extends\")\r\n            | service_defn(\"services\")\r\n        )\r\n\r\nparser = (\r\n            Optional(Group(SYNTAX_ + EQ + quotedString + SEMI)(\"syntax_name\")) \r\n            + Group(ZeroOrMore(\r\n                Group(import_defn(\"import_file_names\")\r\n                    | package_defn(\"package_name\")\r\n                    | option_defn(\"file_options\")\r\n                    | top_level_defn(\"top_level\")\r\n                    | SEMI)\r\n                )\r\n            )\r\n        )\r\n```\r\nInput:\r\n```\r\n\r\nsyntax = \"proto2\";\r\n\r\nimport \"custom_options.proto\";\r\n\r\noption (custom_file_options).test.enable = true;\r\noption (custom_file_options).test.allow_subschemas = true;\r\noption (custom_file_options).test.message.schema = MESSAGE_SCHEMA_DECIMAL;\r\noption (custom_file_options).test.enum.schema = ENUM_SCHEMA_DECIMAL;\r\n\r\nmessage Message {\r\n  option (custom_message_options).test.schema = MESSAGE_SCHEMA_BINARY;\r\n  enum test {\r\n    option (custom_enum_options).test.schema = ENUM_SCHEMA_BINARY;\r\n    reserved 5000 to max;\r\n    A = $0 [(custom_enum_value_options).test.override=true];\r\n    B = 1;\r\n    C = 2;\r\n    D = 10;\r\n    reserved 'F';\r\n  }\r\n  optional int32 a = $1 [default=0, (custom_field_options).test.override=true];\r\n  optional int32 b = 2; \r\n  optional float c = 3;\r\n}\r\n```\r\nthe output from transformString then looks like:\r\n```\r\nsyntax\"proto2\"import\"custom_options.proto\"option(custom_file_options).test.enabletrueoption(custom_file_options).test.allow_subschemastrueoption(custom_file_options).test.message.schemaMESSAGE_SCHEMA_DECIMALoption(custom_file_options).test.enum.schemaENUM_SCHEMA_DECIMALmessageMessageoption(custom_message_options).test.schemaMESSAGE_SCHEMA_BINARYenumtestoption(custom_enum_options).test.schemaENUM_SCHEMA_BINARYreserved5000tomaxA$0(custom_enum_value_options).test.overridetrueB1C2D10reservedFoptionalint32a$1default0(custom_field_options).test.overridetrueoptionalint32b2optionalfloatc3\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/96", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/96/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/96/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/96", "id": 451229569, "node_id": "MDU6SXNzdWU0NTEyMjk1Njk=", "number": 96, "title": "Modifying existing rules", "user": {"login": "davidtr1037", "id": 7283275, "node_id": "MDQ6VXNlcjcyODMyNzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/7283275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtr1037", "html_url": "https://github.com/davidtr1037", "followers_url": "https://api.github.com/users/davidtr1037/followers", "following_url": "https://api.github.com/users/davidtr1037/following{/other_user}", "gists_url": "https://api.github.com/users/davidtr1037/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtr1037/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtr1037/subscriptions", "organizations_url": "https://api.github.com/users/davidtr1037/orgs", "repos_url": "https://api.github.com/users/davidtr1037/repos", "events_url": "https://api.github.com/users/davidtr1037/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtr1037/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-02T20:08:58Z", "updated_at": "2019-06-04T03:38:18Z", "closed_at": "2019-06-04T03:38:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to update an existing rule?\r\nLet's sat E = infixNotation(E, ...), with E = Word(\"ab\").\r\nIs it possible to change the rule to E = Word(\"abc\") without re-defining all it's dependent rules?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/95", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/95/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/95/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/95", "id": 448156728, "node_id": "MDU6SXNzdWU0NDgxNTY3Mjg=", "number": 95, "title": "Adding a setResultsName() breaks grammar?", "user": {"login": "mcondarelli", "id": 870849, "node_id": "MDQ6VXNlcjg3MDg0OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/870849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcondarelli", "html_url": "https://github.com/mcondarelli", "followers_url": "https://api.github.com/users/mcondarelli/followers", "following_url": "https://api.github.com/users/mcondarelli/following{/other_user}", "gists_url": "https://api.github.com/users/mcondarelli/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcondarelli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcondarelli/subscriptions", "organizations_url": "https://api.github.com/users/mcondarelli/orgs", "repos_url": "https://api.github.com/users/mcondarelli/repos", "events_url": "https://api.github.com/users/mcondarelli/events{/privacy}", "received_events_url": "https://api.github.com/users/mcondarelli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-05-24T12:56:17Z", "updated_at": "2019-07-21T19:32:16Z", "closed_at": "2019-07-21T19:32:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm still experimenting with grammars and I'm quite baffled.\r\n\r\nThe following example is lifted from `examples/fourFn.py` almost verbatim.\r\nI deleted the \"exwcuting\" parseActions and (hopefully just cosmetically) changed grammar to better understand some constructs.\r\n\r\nNest step should be:\r\n- tag specific nodes with names\r\n- slightly restructure grammar to \"unflatten\" repeated operators\r\n\r\nEven the very first change (adding a single `ResultsName`) breaks the grammar and I'm unable to understand what I did so wrong :(\r\n\r\n```python\r\nimport math\r\n\r\nfrom pyparsing import *\r\n\r\n\r\n# ORIGINAL GRAMMAR\r\ne     = CaselessKeyword( \"E\" )('constant')\r\npi    = CaselessKeyword( \"PI\" )('constant')\r\nfnumber = Regex(r\"[+-]?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?\")('fliteral')\r\nident = Word(alphas, alphanums+\"_$\")('ident')\r\n\r\nplus = Literal(\"+\")\r\nminus = Literal(\"-\")\r\nmult = Literal(\"*\")\r\ndiv = Literal(\"/\")\r\nlpar = Suppress(\"(\")\r\nrpar = Suppress(\")\")\r\naddop = plus | minus\r\nmultop = mult | div\r\nexpop = Literal(\"^\")\r\n\r\nexpr = Forward()('operation')\r\natom = (ZeroOrMore(minus('uminus')) + ( pi | e | fnumber | ident + lpar + expr + rpar | ident | lpar + expr + rpar ))\r\nfactor = Forward()\r\nfactor << atom + ZeroOrMore(expop + factor)\r\nterm = factor + ZeroOrMore(multop + factor)\r\nexpr << term + ZeroOrMore(addop + term)\r\n\r\nbnf0 = expr\r\n\r\n# MODIFIED GRAMMAR\r\ne     = CaselessKeyword( \"E\" )('constant')\r\npi    = CaselessKeyword( \"PI\" )('constant')\r\nfnumber = Regex(r\"[+-]?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?\")('fliteral')\r\nident = Word(alphas, alphanums+\"_$\")('ident')\r\n\r\nplus = Literal(\"+\")\r\nminus = Literal(\"-\")\r\nmult = Literal(\"*\")\r\ndiv = Literal(\"/\")\r\nlpar = Suppress(\"(\")\r\nrpar = Suppress(\")\")\r\naddop = plus | minus\r\nmultop = mult | div\r\nexpop = Literal(\"^\")\r\n\r\nexpr = Forward()('operation')              # This is the only difference -----vvvvvvv... for now!\r\natom = (ZeroOrMore(minus('uminus')) + ( pi | e | fnumber | ident + lpar + expr('arg') + rpar | ident | lpar + expr + rpar ))\r\nfactor = Forward()\r\nfactor << atom + ZeroOrMore(expop + factor)\r\nterm = factor + ZeroOrMore(multop + factor)\r\nexpr << term + ZeroOrMore(addop + term)\r\n\r\nbnf1 = expr\r\n\r\n\r\ndef test( s, expVal ):\r\n    print('==================')\r\n    print(s)\r\n    try:\r\n        results = bnf0.parseString( s, parseAll=True )\r\n    except ParseException as pe:\r\n        print(s, \"failed parse:\", str(pe))\r\n    except Exception as e:\r\n        print(s, \"failed eval:\", str(e))\r\n    else:\r\n        print('------------------')\r\n        print(results.dump())\r\n    try:\r\n        results = bnf1.parseString(s, parseAll=True)\r\n    except ParseException as pe:\r\n        print(s, \"failed parse:\", str(pe))\r\n    except Exception as e:\r\n        print(s, \"failed eval:\", str(e))\r\n    else:\r\n        print('------------------')\r\n        print(results.dump())\r\n    print('==================')\r\n\r\n\r\ntest( \"round(PI^2)\", round(math.pi**2) )\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/94", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/94/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/94/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/94", "id": 446702555, "node_id": "MDU6SXNzdWU0NDY3MDI1NTU=", "number": 94, "title": "Automatic Parse Tree generation", "user": {"login": "mcondarelli", "id": 870849, "node_id": "MDQ6VXNlcjg3MDg0OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/870849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcondarelli", "html_url": "https://github.com/mcondarelli", "followers_url": "https://api.github.com/users/mcondarelli/followers", "following_url": "https://api.github.com/users/mcondarelli/following{/other_user}", "gists_url": "https://api.github.com/users/mcondarelli/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcondarelli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcondarelli/subscriptions", "organizations_url": "https://api.github.com/users/mcondarelli/orgs", "repos_url": "https://api.github.com/users/mcondarelli/repos", "events_url": "https://api.github.com/users/mcondarelli/events{/privacy}", "received_events_url": "https://api.github.com/users/mcondarelli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-05-21T16:02:33Z", "updated_at": "2019-05-31T14:04:39Z", "closed_at": "2019-05-31T14:04:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I made a rather short (and not complete, but working) addition to PyParsing to have it generate a hierarchical Parse Tree instead of a stream of tokens.\r\n\r\nI attach my current tentative patch and my current test program.\r\nI am currently testing with my grammar (which is particularly troublesome), but, if there is interest, I can make a proper pull request and add some reworked grammar from the \"examples\" directory.\r\n\r\nMain rationale is you add specific names to ParseElements you want to keep as nodes in the final tree and the code tries to eliminate all \"uninteresting\" nodes (this makes output more an AST than a simple Parse Tree)\r\n\r\nAny comment wound be greatly appreciated,\r\nThanks.\r\n\r\nHere is the patch:\r\n```diff\r\ndiff --git a/pyparsing.py b/pyparsing.py\r\nindex 5b5897f..87332b8 100644\r\n--- a/pyparsing.py\r\n+++ b/pyparsing.py\r\n@@ -1568,6 +1568,99 @@ class ParserElement(object):\r\n         tokens = self.postParse( instring, loc, tokens )\r\n \r\n         retTokens = ParseResults( tokens, self.resultsName, asList=self.saveAsList, modal=self.modalResults )\r\n+\r\n+        # MCon: start of insertion\r\n+        if True:  # FIXME: should check if we actually want an AST\r\n+            class ASTNode(object):  # TODO: move class definition in global space.\r\n+                def __init__(self, toks, name, parent):\r\n+                    self.name = name\r\n+                    self.kind = parent.__class__.__name__\r\n+                    self.parent = None\r\n+                    self.container = None\r\n+                    self.children = []\r\n+                    for tok in toks:\r\n+                        try:\r\n+                            tok.parent = self\r\n+                            self.children.append(tok)\r\n+                        except AttributeError:\r\n+                            self.children.append(str(tok))\r\n+                    self.streamline()\r\n+\r\n+                def __repr__(self):\r\n+                    t = self.name if self.name else '<' + self.kind + '>'\r\n+                    t += ': ['\r\n+                    for c in self.children:\r\n+                        if isinstance(c, ASTNode):\r\n+                            t += '<node> '\r\n+                        else:\r\n+                            t += repr(c)\r\n+                    return t\r\n+\r\n+                __str__ = __repr__\r\n+\r\n+                # TODO: implement a sensible __str__() member.\r\n+                # def __str__(self):\r\n+                #     return ' '.join(str(self.children))\r\n+\r\n+                def __iter__(self):\r\n+                    return iter(self.children)\r\n+\r\n+                def dump(self, indent='  ', prefix=''):\r\n+                    s = self.name if self.name else '-anonymus-'\r\n+                    print(prefix, s, '<' + self.kind + '>')\r\n+                    for n in self.children:\r\n+                        try:\r\n+                            n.dump(indent, indent + prefix)\r\n+                        except AttributeError:\r\n+                            print(prefix + ' -', repr(n))\r\n+\r\n+                def streamline(self):\r\n+                    \"\"\"\r\n+                    Remove \"useless\" unnamed AST nodes from hierarchy.\r\n+                    - Start from leafs (depth first).\r\n+                        - Leaf is a node with no children (but may have content)\r\n+                    - Go up one node.\r\n+                    - If leaf has no name:\r\n+                        - Merge Leaf contents with parent contents.\r\n+                        - Remove Leaf from children.\r\n+                        - If/when all children are removed parent becomes a Leaf.\r\n+                    - Never merge/remove named nodes.\r\n+                    \"\"\"\r\n+                    li = []\r\n+                    for c in self.children:\r\n+                        try:\r\n+                            c.streamline()\r\n+                            if c.name is None:\r\n+                                for n in c.children:\r\n+                                    li.append(n)\r\n+                            elif c.name == self.name:\r\n+                                if self.kind in ['MatchFirst', 'Optional']:\r\n+                                    for n in c.children:\r\n+                                        li.append(n)\r\n+                            else:\r\n+                                li.append(c)\r\n+                        except AttributeError:\r\n+                            li.append(c)\r\n+                    self.children = li\r\n+\r\n+                def walk(self, cmds):\r\n+                    func = cmds.get(self.name, self.__repr__)\r\n+                    toks = []\r\n+                    for c in self.children:\r\n+                        try:\r\n+                            toks.append(c.walk(cmds))\r\n+                        except AttributeError:\r\n+                            toks.append(c)\r\n+                    return func(toks)\r\n+\r\n+            if len(retTokens) > 0:\r\n+                tokens = [ASTNode(retTokens, retTokens.getName(), self)]\r\n+                retTokens = ParseResults(tokens,\r\n+                                         self.resultsName,\r\n+                                         asList=self.saveAsList and isinstance(tokens, (ParseResults, list)),\r\n+                                         modal=self.modalResults)\r\n+        # MCon: end of insertion\r\n+\r\n         if self.parseAction and (doActions or self.callDuringTry):\r\n             if debugging:\r\n                 try:\r\n```\r\nand this is my test program:\r\n```python3\r\nfrom pyparsing import *\r\n\r\n\r\n# GRAMMAR =================================================\r\n\r\nParserElement.setDefaultWhitespaceChars(' \\t')\r\n\r\nnl = Regex(r'\\n(?!\\n)').suppress()\r\nps = Regex(r'\\n{2,}').suppress()\r\nbl = Regex(r'\\s*').suppress()\r\n\r\nlbracket = Literal('[').suppress()\r\nrbracket = Literal(']').suppress()\r\nlbrace = Literal('{').suppress()\r\nrbrace = Literal('}').suppress()\r\n\r\nclazz = lbracket + ZeroOrMore(Word(alphas+'-')) + rbracket\r\nurl = lbrace + Combine(OneOrMore(Word(alphanums+'-_.') | '/' | ':'))('url') + rbrace\r\ntitle = lbrace + ZeroOrMore(Word(alphanums+'-_.'))('title') + rbrace\r\ntext = Regex(r'[^@}\\n]+')\r\nstyle = lbracket + ZeroOrMore((Word(alphas+'-') + ':' + Word(printables+' ', excludeChars=';') + ';') | nl) + rbracket\r\n\r\nfrag = Forward()\r\n\r\nsep = Literal('@sep').suppress() + Optional(clazz('clazz')) + Optional(url)\r\nimg = Literal('@img').suppress() + Optional(clazz('clazz')) + url\r\ndiv = Literal('@div').suppress() + clazz('clazz') + Optional(style('style')) + lbrace + frag + rbrace\r\nspan = Literal('@span').suppress() + clazz('clazz') + lbrace + frag + rbrace\r\n\r\npart = Literal(\"@part\").suppress() + Optional(clazz('clazz')) + title\r\nchapter = Literal(\"@chapter\").suppress() + Optional(clazz('clazz')) + title\r\nscene = Literal(\"@scene\").suppress() + Optional(clazz('clazz')) + title\r\n\r\nspeech = Literal(\"@speech\").suppress() + Optional(clazz('clazz')) + lbrace + frag + rbrace\r\nstress = Literal(\"@stress\").suppress() + Optional(clazz('clazz')) + lbrace + frag + rbrace\r\nstandout = Literal(\"@standout\").suppress() + Optional(clazz('clazz')) + lbrace + frag + rbrace\r\nquot = Literal(\"@quot\").suppress() + Optional(clazz('clazz')) + Optional(style('style')) + lbrace + OneOrMore(frag) + rbrace\r\n\r\nfragn = OneOrMore(div('div') | img('img') | speech('speech') | stress('stress') | standout('standout') | span('span') | text)\r\nfragl = fragn + nl\r\nfragp = fragn + ps\r\nfrag <<= (bl + OneOrMore(fragp('fragp') | fragl('fragl') | fragn('fragn')))\r\n\r\nbook = OneOrMore(part('part') | chapter('chapter') | scene('scene') | sep('sep') | frag | quot('quot') | Suppress('\\n'))('book')\r\n\r\n\r\n# MAIN ====================================================\r\n\r\n\r\nif __name__ == '__main__':\r\n\r\n    frag = '''\\\r\n@chapter[chapter]{First Chapter}\r\n\r\n@scene{scene1}\r\n\r\nNon quiquia eius porro. @speech{Modi sit sit adipisci ut.} Dolor eius aliquam ut. @speech{Voluptatem velit numquam etincidunt.} \r\nQuisquam ipsum sed sed. Quiquia sed dolore porro quisquam. Sed eius magnam numquam neque dolore. Amet sed dolor dolor. \r\nNon adipisci porro voluptatem aliquam magnam porro.\r\n\r\nConsectetur amet tempora ipsum. Amet adipisci ipsum labore quiquia quaerat neque. Numquam ut dolorem dolore. \r\nQuiquia quiquia etincidunt eius ut. Quisquam quiquia etincidunt ipsum eius neque. \r\nEtincidunt voluptatem velit tempora dolor dolore quiquia. Ut adipisci dolor est porro quiquia.\r\n\r\nAliquam quiquia aliquam porro. Porro tempora etincidunt sit. Quisquam consectetur dolore labore. \r\nDolore ut sit labore sit quaerat. Amet consectetur amet eius porro modi ipsum est. \r\nModi labore sit tempora velit labore modi etincidunt. Etincidunt dolor adipisci labore.\r\n\r\n@speech[speech]{Labore non quisquam velit quiquia amet quiquia modi. Dolor voluptatem eius adipisci consectetur adipisci.}\r\nTempora sed eius ipsum quiquia ut consectetur. Tempora etincidunt ipsum quisquam porro modi quaerat. \r\nAliquam numquam velit dolorem dolor tempora quisquam.\r\n\r\nUt sed porro labore dolorem sit dolorem dolor. Porro porro dolore magnam adipisci voluptatem quisquam tempora. \r\nEius sed etincidunt etincidunt. Ut aliquam modi sit aliquam. Magnam modi aliquam dolorem quiquia sed quiquia quaerat. \r\nQuiquia quaerat amet velit est.\r\n\r\n@scene{scene2}\r\n\r\nVelit quisquam sed neque sed dolore. Consectetur modi quisquam non. Magnam dolore porro amet amet velit. \r\nQuisquam sed dolor dolorem dolore sit sit dolorem. Dolorem numquam aliquam magnam quaerat dolor numquam. \r\nDolor voluptatem magnam ut modi velit sed. Magnam amet adipisci dolore consectetur eius consectetur. \r\nNeque quisquam voluptatem magnam magnam velit etincidunt. Consectetur neque sit voluptatem aliquam adipisci.\r\n\r\nNumquam eius numquam magnam. Sed voluptatem est eius sed numquam. Ut quaerat dolorem dolorem neque numquam amet quaerat. \r\nDolorem quisquam velit modi consectetur neque porro. Voluptatem est tempora ut sed sed ipsum. \r\nSed voluptatem magnam non neque non. Ipsum velit quisquam est aliquam dolore amet sit. \r\nNumquam tempora modi quaerat sed labore numquam. Dolorem quaerat porro dolore amet quaerat ipsum est.\r\n\r\nConsectetur quisquam voluptatem voluptatem ut aliquam velit amet. Sed est modi quaerat ut eius labore eius. \r\nQuisquam est dolorem consectetur non magnam. Neque dolor porro ipsum ut modi. Aliquam neque ut adipisci velit eius. \r\nSit ipsum tempora etincidunt dolore ipsum quisquam neque. Eius eius ut voluptatem etincidunt dolor.\r\n\r\nMagnam voluptatem est neque. Magnam voluptatem labore dolorem. Consectetur quisquam neque amet ut consectetur consectetur. \r\nIpsum non adipisci sed labore. Modi non adipisci neque dolore. Modi porro quiquia ut aliquam. Quiquia non ut est amet. \r\nDolore aliquam sed numquam tempora labore.\r\n\r\n@chapter[chapter]{second chapter}\r\n\r\n\r\n    Frase con embedded@standout{key}word.\r\n    '''\r\n\r\n    r = book.parseString(frag)\r\n    print('=====================================================================')\r\n    r[0].dump()\r\n    print('=====================================================================')\r\n    cmds = {\r\n        'fragn': lambda li: ''.join(li),\r\n        'fragl': lambda li: ''.join(li) + '\\n',\r\n        'fragp': lambda li: ''.join(li) + '\\n\\n',\r\n        'clazz': lambda li: '[' + ' '.join(li) + ']',\r\n        'style': lambda li: '[' + ' '.join(li) + ']',\r\n        'title': lambda li: '{' + ' '.join(li) + '}',\r\n\r\n        'div': lambda li: '@div' + ''.join(li[:-1]) + '{' + li[-1] + '}',\r\n        'img': lambda li: '@img' + ''.join(li[:-1]) + '{' + li[-1] + '}',\r\n        'speech': lambda li: '@speech' + ''.join(li[:-1]) + '{' + li[-1] + '}',\r\n        'stress': lambda li: '@stress' + ''.join(li[:-1]) + '{' + li[-1] + '}',\r\n        'standout': lambda li: '@standout' + ''.join(li[:-1]) + '{' + li[-1] + '}',\r\n        'span': lambda li: '@span' + ''.join(li[:-1]) + '{' + li[-1] + '}',\r\n\r\n        'part': lambda li: '@part' + ''.join(li) + '\\n\\n',\r\n        'chapter': lambda li: '@chapter' + ''.join(li) + '\\n\\n',\r\n        'scene': lambda li: '@pscene' + ''.join(li) + '\\n\\n',\r\n        'sep': lambda li: '@sep' + ''.join(li) + '\\n\\n',\r\n        'quot': lambda li: '@quot' + ''.join(li) + '\\n\\n',\r\n        'book': lambda li: ''.join(li) + '\\n\\n',\r\n    }\r\n    print(r[0].walk(cmds))\r\n    print('=====================================================================')\r\n    cmds = {\r\n        'fragn': lambda li: ''.join(li),\r\n        'fragl': lambda li: ''.join(li) + '\\n',\r\n        'fragp': lambda li: ''.join(li) + '\\n\\n',\r\n        'clazz': lambda li: ' class=\"' + ' '.join(li) + '\"',\r\n        'style': lambda li: ' style=\"' + ' '.join(li) + '\"',\r\n        'title': lambda li: '{' + ' '.join(li) + '}',\r\n\r\n        'div': lambda li: '<div' + ''.join(li[:-1]) + '>' + li[-1] + '</div>',\r\n        'img': lambda li: '@img' + ''.join(li[:-1]) + '{' + li[-1] + '}',\r\n        'speech': lambda li: '<div' + ''.join(li[:-1]) + '>' + li[-1] + '</div>',\r\n        'stress': lambda li: '<i' + ''.join(li[:-1]) + '>' + li[-1] + '</i>',\r\n        'standout': lambda li: '<b' + ''.join(li[:-1]) + '>' + li[-1] + '</b>',\r\n        'span': lambda li: '<span' + ''.join(li[:-1]) + '>' + li[-1] + '</span>',\r\n\r\n        'part': lambda li: '<h1' + ''.join(li[:-1]) + '>' + li[-1] + '</h1>\\n\\n',\r\n        'chapter': lambda li: '<h2' + ''.join(li[:-1]) + '>' + li[-1] + '</h2>\\n\\n',\r\n        'scene': lambda li: '<h3' + ''.join(li[:-1]) + '>' + li[-1] + '</h3>\\n\\n',\r\n        'sep': lambda li: '@sep' + ''.join(li) + '\\n\\n',\r\n        'quot': lambda li: '<quotmark' + ''.join(li[:-1]) + '>' + li[-1] + '</quotmark>\\n\\n',\r\n        'book': lambda li: '<body>\\n' + ''.join(li) + '</body>\\n\\n',\r\n    }\r\n    print(r[0].walk(cmds))\r\n    print('=====================================================================')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/93", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/93/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/93/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/93", "id": 445519095, "node_id": "MDU6SXNzdWU0NDU1MTkwOTU=", "number": 93, "title": "Unexpected behaviour with Or and addCondition", "user": {"login": "dvzubarev", "id": 14878830, "node_id": "MDQ6VXNlcjE0ODc4ODMw", "avatar_url": "https://avatars0.githubusercontent.com/u/14878830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvzubarev", "html_url": "https://github.com/dvzubarev", "followers_url": "https://api.github.com/users/dvzubarev/followers", "following_url": "https://api.github.com/users/dvzubarev/following{/other_user}", "gists_url": "https://api.github.com/users/dvzubarev/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvzubarev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvzubarev/subscriptions", "organizations_url": "https://api.github.com/users/dvzubarev/orgs", "repos_url": "https://api.github.com/users/dvzubarev/repos", "events_url": "https://api.github.com/users/dvzubarev/events{/privacy}", "received_events_url": "https://api.github.com/users/dvzubarev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2019-05-17T16:18:44Z", "updated_at": "2019-07-05T16:32:44Z", "closed_at": "2019-07-05T16:32:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\nplease, see the code:\r\n```import pyparsing as pp\r\nw = pp.Word(pp.alphas)\r\nparser = pp.Or([w('1') + w.addCondition(lambda t : t[0].endswith(\"aaa\")),\r\n                w('2') + w])\r\n\r\n#the first case\r\nm = parser.parseString('temp tempaaa')\r\nprint (m.dump())\r\n# std out:\r\n#['temp', 'tempaaa']\r\n#- 1: 'temp'\r\n\r\n#the second case\r\nm = parser.parseString('temp temp')\r\nprint (m.dump())\r\n#exception:\r\n#pyparsing.ParseException: Expected {{W:(ABCD...) W:(ABCD...)} ^ {W:(ABCD...) W:(ABCD...)}} (at char 5), (line:1, col:6)\r\n```\r\nI expected that the second pattern of Or would match in the second case. But instead I got an exception. Is it expected behaviour?\r\npyparsing 2.4\r\npython 3.6.7 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/92", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/92/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/92/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/92", "id": 443457312, "node_id": "MDU6SXNzdWU0NDM0NTczMTI=", "number": 92, "title": "Unable to debug my grammar", "user": {"login": "mcondarelli", "id": 870849, "node_id": "MDQ6VXNlcjg3MDg0OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/870849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcondarelli", "html_url": "https://github.com/mcondarelli", "followers_url": "https://api.github.com/users/mcondarelli/followers", "following_url": "https://api.github.com/users/mcondarelli/following{/other_user}", "gists_url": "https://api.github.com/users/mcondarelli/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcondarelli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcondarelli/subscriptions", "organizations_url": "https://api.github.com/users/mcondarelli/orgs", "repos_url": "https://api.github.com/users/mcondarelli/repos", "events_url": "https://api.github.com/users/mcondarelli/events{/privacy}", "received_events_url": "https://api.github.com/users/mcondarelli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-05-13T15:17:05Z", "updated_at": "2019-05-16T22:50:21Z", "closed_at": "2019-05-16T09:29:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry to disturb, but I'm getting mad.\r\n\r\nI must be doing something really stupid, but I'm unable to understand what.\r\n\r\nI trimmed down my grammar to almost nothing:\r\n```python\r\nfrom pyparsing import *\r\n\r\nParserElement.setDefaultWhitespaceChars(' \\t')\r\n\r\nnl = Regex(r'\\n(?!\\n)').suppress()\r\nps = Regex(r'\\n{2,}').suppress()\r\nbl = Regex(r'\\s*').suppress()\r\n\r\nlbracket = Literal('[').suppress()\r\nrbracket = Literal(']').suppress()\r\nlbrace = Literal('{').suppress()\r\nrbrace = Literal('}').suppress()\r\n\r\nclazz = lbracket + ZeroOrMore(Word(alphas+'-')).setParseAction(' '.join) + rbracket\r\nurl = lbrace + Combine(OneOrMore(Word(alphanums+'-_.') | '/' | ':')) + rbrace\r\n\r\nsep = Keyword('@sep') + Optional(clazz('class')) + Optional(url('url'))\r\n\r\nbook = OneOrMore(sep('sep') | nl)\r\n\r\n# fragments ========================\r\n\r\n@traceParseAction\r\ndef handle_clazz(toks):\r\n    if len(toks) == 0:\r\n        return None\r\n    return ' '.join(toks)\r\n\r\n@traceParseAction\r\ndef handle_url(toks):\r\n    if len(toks) == 0:\r\n        return None\r\n    return ' '.join(toks)\r\n\r\n# divisions ========================\r\n\r\n@traceParseAction\r\ndef handle_sep(toks):\r\n    return 'sep', {k: v for k, v in toks[1:]}\r\n\r\nclazz.setParseAction(handle_clazz)\r\nclazz.setDebug()\r\nurl.setParseAction(handle_url)\r\nurl.setDebug()\r\n\r\nsep.setParseAction(handle_sep)\r\nsep.setDebug()\r\n\r\nfrag = '''\\\r\n\r\n@sep[file]{OEBPS/Text/1.01-La_Missione.html}\r\n@sep[the end]\r\n\r\n'''\r\n\r\nbook.setDebug()\r\nbook.parseString(frag).pprint()\r\n```\r\nThis seems to parse the whole fragment, but ParseActions are not called  and I do not see ParseResult names:\r\n```\r\nMatch {{{\"@sep\" [{Suppress:(\"[\") [W:(ABCD...)]... Suppress:(\"]\")}] [{Suppress:(\"{\") Combine:({{W:(ABCD...) | \"/\" | \":\"}}...) Suppress:(\"}\")}]} | Suppress:(Re:('\\\\n(?!\\\\n)'))}}... at loc 0(1,1)\r\nMatched {{{\"@sep\" [{Suppress:(\"[\") [W:(ABCD...)]... Suppress:(\"]\")}] [{Suppress:(\"{\") Combine:({{W:(ABCD...) | \"/\" | \":\"}}...) Suppress:(\"}\")}]} | Suppress:(Re:('\\\\n(?!\\\\n)'))}}... -> ['@sep', 'file', 'OEBPS/Text/1.01-La_Missione.html', '@sep', 'the end']\r\n['@sep', 'file', 'OEBPS/Text/1.01-La_Missione.html', '@sep', 'the end']\r\n```\r\nWhat am I doing so wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/91", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/91/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/91/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/91", "id": 441704660, "node_id": "MDU6SXNzdWU0NDE3MDQ2NjA=", "number": 91, "title": "MemoryError with pyparsing 2.4", "user": {"login": "decalage2", "id": 5989656, "node_id": "MDQ6VXNlcjU5ODk2NTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/5989656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decalage2", "html_url": "https://github.com/decalage2", "followers_url": "https://api.github.com/users/decalage2/followers", "following_url": "https://api.github.com/users/decalage2/following{/other_user}", "gists_url": "https://api.github.com/users/decalage2/gists{/gist_id}", "starred_url": "https://api.github.com/users/decalage2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decalage2/subscriptions", "organizations_url": "https://api.github.com/users/decalage2/orgs", "repos_url": "https://api.github.com/users/decalage2/repos", "events_url": "https://api.github.com/users/decalage2/events{/privacy}", "received_events_url": "https://api.github.com/users/decalage2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2019-05-08T12:15:12Z", "updated_at": "2019-07-24T02:40:33Z", "closed_at": "2019-07-21T19:27:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "ViperMonkey uses pyparsing to implement a VBA macro parser. In some cases it crashes with a MemoryError, and we noticed that it only happens with pyparsing 2.4, while 2.3 is fine: https://github.com/decalage2/ViperMonkey/issues/58\r\n\r\nI'll give more details and explain how to reproduce the bug shortly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/90", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/90/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/90/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/90", "id": 441452287, "node_id": "MDU6SXNzdWU0NDE0NTIyODc=", "number": 90, "title": "Nested labels no longer work", "user": {"login": "jpsnyder", "id": 2947030, "node_id": "MDQ6VXNlcjI5NDcwMzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/2947030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpsnyder", "html_url": "https://github.com/jpsnyder", "followers_url": "https://api.github.com/users/jpsnyder/followers", "following_url": "https://api.github.com/users/jpsnyder/following{/other_user}", "gists_url": "https://api.github.com/users/jpsnyder/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpsnyder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpsnyder/subscriptions", "organizations_url": "https://api.github.com/users/jpsnyder/orgs", "repos_url": "https://api.github.com/users/jpsnyder/repos", "events_url": "https://api.github.com/users/jpsnyder/events{/privacy}", "received_events_url": "https://api.github.com/users/jpsnyder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-07T21:22:30Z", "updated_at": "2019-05-08T18:46:31Z", "closed_at": "2019-05-08T18:46:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "After updating from version 2.2.0, I have run into an issue where nested labels within a `listAllMatches` result name are no longer working. \r\n\r\n```python\r\nimport pyparsing as pp\r\n\r\nvariable = pp.Word('$', pp.alphanums)('name') + '[' + pp.pyparsing_common.integer('index') + ']'\r\nvariable_list = pp.delimitedList(variable('entries*'))\r\n\r\nresult = variable_list.parseString('$a[0], $b[2], $c[5]')\r\nfor entry in result.entries:\r\n    print(entry.name, entry.index)\r\n```\r\n\r\nIn version 2.2.0 I correctly get the following:\r\n```\r\n('$a', 0)\r\n('$b', 2)\r\n('$c', 5)\r\n```\r\n\r\nHowever, in both 2.3.0 and 2.4.0 I only get empty strings:\r\n```\r\n('', '')\r\n('', '')\r\n('', '')\r\n```\r\n\r\nUsing `dump()` also confirms that the nested labels do not get filled in.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/88", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/88/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/88/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/88", "id": 437958710, "node_id": "MDU6SXNzdWU0Mzc5NTg3MTA=", "number": 88, "title": "pyparsing performance with tab", "user": {"login": "ws1088", "id": 3947543, "node_id": "MDQ6VXNlcjM5NDc1NDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/3947543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ws1088", "html_url": "https://github.com/ws1088", "followers_url": "https://api.github.com/users/ws1088/followers", "following_url": "https://api.github.com/users/ws1088/following{/other_user}", "gists_url": "https://api.github.com/users/ws1088/gists{/gist_id}", "starred_url": "https://api.github.com/users/ws1088/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ws1088/subscriptions", "organizations_url": "https://api.github.com/users/ws1088/orgs", "repos_url": "https://api.github.com/users/ws1088/repos", "events_url": "https://api.github.com/users/ws1088/events{/privacy}", "received_events_url": "https://api.github.com/users/ws1088/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-27T16:12:17Z", "updated_at": "2019-04-29T23:47:36Z", "closed_at": "2019-04-29T23:47:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "have you guys experienced that the same parser performs slower if the input file is of TAB instead of space?\r\n\r\nfor example, file content is:\r\nabc = 3\r\nedf = 4\r\n\r\nof course the file needs to be very large (like 50k lines)\r\n\r\nif the parser is simply:\r\n\r\nrule = Suppress(LineStart() + SkipTo(LineEnd) + LineEnd())\r\n\r\nsed \"s/ /\\t/g\" file > file_tab\r\nsed \"s/\\t/ /g\" file > file_space\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/87", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/87/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/87/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/87", "id": 437075236, "node_id": "MDU6SXNzdWU0MzcwNzUyMzY=", "number": 87, "title": "Difference in parsing indented blocks between 2.3.1 and 2.4.0", "user": {"login": "renzbagaporo", "id": 12197234, "node_id": "MDQ6VXNlcjEyMTk3MjM0", "avatar_url": "https://avatars1.githubusercontent.com/u/12197234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/renzbagaporo", "html_url": "https://github.com/renzbagaporo", "followers_url": "https://api.github.com/users/renzbagaporo/followers", "following_url": "https://api.github.com/users/renzbagaporo/following{/other_user}", "gists_url": "https://api.github.com/users/renzbagaporo/gists{/gist_id}", "starred_url": "https://api.github.com/users/renzbagaporo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/renzbagaporo/subscriptions", "organizations_url": "https://api.github.com/users/renzbagaporo/orgs", "repos_url": "https://api.github.com/users/renzbagaporo/repos", "events_url": "https://api.github.com/users/renzbagaporo/events{/privacy}", "received_events_url": "https://api.github.com/users/renzbagaporo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2019-04-25T08:38:40Z", "updated_at": "2020-09-08T04:35:30Z", "closed_at": "2019-07-21T19:27:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nThe recent 2.4.0 update seems to have introduced different behavior when it comes to parsing indented blocks. The following snippets is a simplified form of our grammar (enough to replicate differences in behavior):\r\n\r\n```python\r\nimport os\r\nfrom pyparsing import *\r\n\r\nindent_stack = [1]\r\n\r\nkey = Word(alphas) + Suppress(\":\")\r\nstmt = Forward()\r\n\r\nsuite = indentedBlock(stmt, indent_stack)\r\nbody = key + suite\r\n\r\npattern = (Word(alphas) + Suppress(\"(\") + Word(alphas) + Suppress(\")\"))\r\nstmt << pattern\r\n\r\ndef key_parse_action(toks):\r\n    print(\"Parsing '%s'...\" % toks[0])\r\n\r\nkey.setParseAction(key_parse_action)\r\nheader = Suppress(\"[\") + Literal(\"test\") + Suppress(\"]\")\r\n\r\ncontent = (header + OneOrMore(indentedBlock(body, indent_stack, False)))\r\nparser = OneOrMore(content)\r\n\r\nparser.parseFile(\"./simple_file.txt\", parseAll=True)\r\n```\r\n\r\nWhen parsing a sample `simple_file.txt` contents:\r\n\r\n```\r\n[test]\r\none: \r\n    two (three)\r\nfour:\r\n    five (seven\r\n```\r\n`five (seven` here is incorrect. 2.3.1 fails immediately, while 2.4.0 seem to backtrack to parsing `four:` as evidenced by the print logs.\r\n\r\nAnother case is as follows:\r\n\r\n```python\r\nimport os\r\nfrom pyparsing import *\r\n\r\nindent_stack = [1]\r\n\r\nkey = Word(alphas) + Suppress(\":\")\r\nstmt = Forward()\r\n\r\nsuite = indentedBlock(stmt, indent_stack)\r\nbody = key + suite\r\n\r\npattern = (Word(alphas) + Suppress(\"(\") + Word(alphas) + Suppress(\")\"))\r\nstmt << pattern\r\n\r\ndef key_parse_action(toks):\r\n    print(\"Parsing '%s'...\" % toks[0])\r\n\r\nkey.setParseAction(key_parse_action)\r\nheader = Suppress(\"[\") + Literal(\"test\") + Suppress(\"]\")\r\ncontent = (header + OneOrMore(indentedBlock(body, indent_stack, False)))\r\n\r\ncontents = Forward()\r\nsuites = indentedBlock(content, indent_stack)\r\n\r\nextra = Literal(\"extra\") + Suppress(\":\") + suites\r\ncontents << (content | extra)\r\n\r\nparser = OneOrMore(contents)\r\n\r\nparser.parseFile(\"./simple_file.txt\", parseAll=True)\r\n```\r\n\r\nWith the test text as follows:\r\n\r\n```\r\nextra:\r\n    [test]\r\n    one: \r\n        two (three)\r\n    four:\r\n        five (seven)\r\nextra:\r\n    [test]\r\n    one: \r\n        two (three)\r\n    four:\r\n        five (seven)\r\n```\r\n\r\n2.3.1 is able to parse this fine, while 2.4.0 fails. \r\n\r\nThe full grammar is in https://github.com/espressif/esp-idf/blob/master/tools/ldgen/fragments.py if you need it.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/86", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/86/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/86/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/86", "id": 435909901, "node_id": "MDU6SXNzdWU0MzU5MDk5MDE=", "number": 86, "title": "advantages of sexpdata vs pyparsing s-expressions", "user": {"login": "brando90", "id": 1855278, "node_id": "MDQ6VXNlcjE4NTUyNzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1855278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brando90", "html_url": "https://github.com/brando90", "followers_url": "https://api.github.com/users/brando90/followers", "following_url": "https://api.github.com/users/brando90/following{/other_user}", "gists_url": "https://api.github.com/users/brando90/gists{/gist_id}", "starred_url": "https://api.github.com/users/brando90/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brando90/subscriptions", "organizations_url": "https://api.github.com/users/brando90/orgs", "repos_url": "https://api.github.com/users/brando90/repos", "events_url": "https://api.github.com/users/brando90/events{/privacy}", "received_events_url": "https://api.github.com/users/brando90/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-22T21:59:16Z", "updated_at": "2019-04-23T00:44:00Z", "closed_at": "2019-04-23T00:42:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just found that one can parse s-expressions using [pyparsing](https://github.com/pyparsing/pyparsing) using the example file [here](http://www.ccp4.ac.uk/dist/checkout/pyparsing-2.0.1/examples/sexpParser.py). But there is also [sexpdata](https://github.com/jd-boyd/sexpdata).\r\n\r\nWhat are the advantages and disadvantages of using sexpdata vs pyparsing?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/85", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/85/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/85/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/85", "id": 431066277, "node_id": "MDU6SXNzdWU0MzEwNjYyNzc=", "number": 85, "title": "Infinite recursion", "user": {"login": "Harmon758", "id": 9403740, "node_id": "MDQ6VXNlcjk0MDM3NDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/9403740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Harmon758", "html_url": "https://github.com/Harmon758", "followers_url": "https://api.github.com/users/Harmon758/followers", "following_url": "https://api.github.com/users/Harmon758/following{/other_user}", "gists_url": "https://api.github.com/users/Harmon758/gists{/gist_id}", "starred_url": "https://api.github.com/users/Harmon758/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Harmon758/subscriptions", "organizations_url": "https://api.github.com/users/Harmon758/orgs", "repos_url": "https://api.github.com/users/Harmon758/repos", "events_url": "https://api.github.com/users/Harmon758/events{/privacy}", "received_events_url": "https://api.github.com/users/Harmon758/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2019-04-09T16:40:31Z", "updated_at": "2019-07-21T19:28:26Z", "closed_at": "2019-07-21T19:28:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is currently an issue with infinite recursion that occurs with the latest version of [python-dice](https://github.com/borntyping/python-dice) (v2.4.0), using Python 3.7 and pyparsing 2.4.0, which does not occur when using pyparsing 2.3.1.\r\n\r\nSimply executing `dice.roll('6')` will immediately cause the program to start using up all available memory, potentially causing the system to freeze.\r\nIf a keyboard interrupt is used to stop the execution, the traceback looks like this:\r\n```\r\n>>> dice.roll('6')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\dice\\__init__.py\", line 24, in roll\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\dice\\__init__.py\", line 43, in _roll\r\n    ast = parse_expression(string)\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\dice\\__init__.py\", line 38, in parse_expression\r\n    return dice.grammar.expression.parseString(string, parseAll=True)\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 1811, in parseString\r\n    self.streamline()\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3728, in streamline\r\n    super(And, self).streamline()\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3655, in streamline\r\n    e.streamline()\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3728, in streamline\r\n    super(And, self).streamline()\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3655, in streamline\r\n    e.streamline()\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 4651, in streamline\r\n    self.expr.streamline()\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 4651, in streamline\r\n    self.expr.streamline()\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3892, in streamline\r\n    super(MatchFirst, self).streamline()\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3655, in streamline\r\n    e.streamline()\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3728, in streamline\r\n    super(And, self).streamline()\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3655, in streamline\r\n    e.streamline()\r\n  \r\n  ...\r\n  \r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 4651, in streamline\r\n    self.expr.streamline()\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3892, in streamline\r\n    super(MatchFirst, self).streamline()\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3655, in streamline\r\n    e.streamline()\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3728, in streamline\r\n    super(And, self).streamline()\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3655, in streamline\r\n    e.streamline()\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 4651, in streamline\r\n    self.expr.streamline()\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3892, in streamline\r\n    super(MatchFirst, self).streamline()\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3655, in streamline\r\n    e.streamline()\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3728, in streamline\r\n    super(And, self).streamline()\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3681, in streamline\r\n    self.errmsg = \"Expected \" + _ustr(self)\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3774, in __str__\r\n    self.strRepr = \"{\" + \" \".join(_ustr(e) for e in self.exprs) + \"}\"\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3774, in <genexpr>\r\n    self.strRepr = \"{\" + \" \".join(_ustr(e) for e in self.exprs) + \"}\"\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 4671, in __str__\r\n    retString = _ustr(self.expr)\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3931, in __str__\r\n    self.strRepr = \"{\" + \" | \".join(_ustr(e) for e in self.exprs) + \"}\"\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3931, in <genexpr>\r\n    self.strRepr = \"{\" + \" | \".join(_ustr(e) for e in self.exprs) + \"}\"\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 4671, in __str__\r\n    retString = _ustr(self.expr)\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3931, in __str__\r\n    self.strRepr = \"{\" + \" | \".join(_ustr(e) for e in self.exprs) + \"}\"\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3931, in <genexpr>\r\n    self.strRepr = \"{\" + \" | \".join(_ustr(e) for e in self.exprs) + \"}\"\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 4671, in __str__\r\n    retString = _ustr(self.expr)\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3931, in __str__\r\n    self.strRepr = \"{\" + \" | \".join(_ustr(e) for e in self.exprs) + \"}\"\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3931, in <genexpr>\r\n    self.strRepr = \"{\" + \" | \".join(_ustr(e) for e in self.exprs) + \"}\"\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 4671, in __str__\r\n    retString = _ustr(self.expr)\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3931, in __str__\r\n    self.strRepr = \"{\" + \" | \".join(_ustr(e) for e in self.exprs) + \"}\"\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3931, in <genexpr>\r\n    self.strRepr = \"{\" + \" | \".join(_ustr(e) for e in self.exprs) + \"}\"\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3774, in __str__\r\n    self.strRepr = \"{\" + \" \".join(_ustr(e) for e in self.exprs) + \"}\"\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3774, in <genexpr>\r\n    self.strRepr = \"{\" + \" \".join(_ustr(e) for e in self.exprs) + \"}\"\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 4671, in __str__\r\n    retString = _ustr(self.expr)\r\n  \r\n  ...\r\n    \r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3931, in __str__\r\n    self.strRepr = \"{\" + \" | \".join(_ustr(e) for e in self.exprs) + \"}\"\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3931, in <genexpr>\r\n    self.strRepr = \"{\" + \" | \".join(_ustr(e) for e in self.exprs) + \"}\"\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3774, in __str__\r\n    self.strRepr = \"{\" + \" \".join(_ustr(e) for e in self.exprs) + \"}\"\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3774, in <genexpr>\r\n    self.strRepr = \"{\" + \" \".join(_ustr(e) for e in self.exprs) + \"}\"\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 4671, in __str__\r\n    retString = _ustr(self.expr)\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pyparsing.py\", line 3931, in __str__\r\n    self.strRepr = \"{\" + \" | \".join(_ustr(e) for e in self.exprs) + \"}\"\r\nKeyboardInterrupt\r\n```\r\n\r\nThe relevant expression can be seen at https://github.com/borntyping/python-dice/blob/v2.4.0/dice/grammar.py.\r\n\r\nI believe this is due to the change in https://github.com/pyparsing/pyparsing/commit/ed2f5ec744ddc25242f947be8ba798d9fca6a674 (#71).\r\nEdit: I've now tested this and the issue does not occur when this change is reverted.\r\n\r\ncc @calebj", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/82", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/82/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/82/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/82", "id": 427279856, "node_id": "MDU6SXNzdWU0MjcyNzk4NTY=", "number": 82, "title": "Is it a bug?", "user": {"login": "Freakwill", "id": 30965609, "node_id": "MDQ6VXNlcjMwOTY1NjA5", "avatar_url": "https://avatars3.githubusercontent.com/u/30965609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Freakwill", "html_url": "https://github.com/Freakwill", "followers_url": "https://api.github.com/users/Freakwill/followers", "following_url": "https://api.github.com/users/Freakwill/following{/other_user}", "gists_url": "https://api.github.com/users/Freakwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/Freakwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Freakwill/subscriptions", "organizations_url": "https://api.github.com/users/Freakwill/orgs", "repos_url": "https://api.github.com/users/Freakwill/repos", "events_url": "https://api.github.com/users/Freakwill/events{/privacy}", "received_events_url": "https://api.github.com/users/Freakwill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-30T12:59:51Z", "updated_at": "2019-04-01T01:41:47Z", "closed_at": "2019-04-01T01:41:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Following is the test code. Is it a bug? It confused me.\r\n\r\n```python\r\np = (Literal('=')| '\\\\' + Literal('eq'))('sign')\r\nr = p.parseString('=')\r\nprint(r.sign)\r\n# => ['=']\r\n```\r\n\r\n```python\r\np = (Literal('=')| Literal('eq'))('sign')\r\nr = p.parseString('=')\r\nprint(r.sign)\r\n# => '='\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/81", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/81/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/81/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/81", "id": 426735813, "node_id": "MDU6SXNzdWU0MjY3MzU4MTM=", "number": 81, "title": "import error sklearn", "user": {"login": "VaibhavSxn", "id": 48293555, "node_id": "MDQ6VXNlcjQ4MjkzNTU1", "avatar_url": "https://avatars3.githubusercontent.com/u/48293555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VaibhavSxn", "html_url": "https://github.com/VaibhavSxn", "followers_url": "https://api.github.com/users/VaibhavSxn/followers", "following_url": "https://api.github.com/users/VaibhavSxn/following{/other_user}", "gists_url": "https://api.github.com/users/VaibhavSxn/gists{/gist_id}", "starred_url": "https://api.github.com/users/VaibhavSxn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VaibhavSxn/subscriptions", "organizations_url": "https://api.github.com/users/VaibhavSxn/orgs", "repos_url": "https://api.github.com/users/VaibhavSxn/repos", "events_url": "https://api.github.com/users/VaibhavSxn/events{/privacy}", "received_events_url": "https://api.github.com/users/VaibhavSxn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-28T22:31:47Z", "updated_at": "2019-03-30T04:29:22Z", "closed_at": "2019-03-30T04:29:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello I am trying to import train_test_split module from sklearn and I am getting list index out of range error.\r\n\r\nBelow is  my code:\r\nimport sklearn\r\nfrom sklearn import model_selection\r\nfrom sklearn.model_selection import train_test_split\r\n\r\nBelow is the error:\r\nfrom sklearn import model_selection\r\nTraceback (most recent call last):\r\n\r\n  File \"<ipython-input-106-97adc105df53>\", line 1, in <module>\r\n    from sklearn import model_selection\r\n\r\n  File \"C:\\Users\\gunngunner\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\__init__.py\", line 19, in <module>\r\n    from ._validation import cross_val_score\r\n\r\n  File \"C:\\Users\\gunngunner\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\", line 31, in <module>\r\n    from ..metrics.scorer import check_scoring, _check_multimetric_scoring\r\n\r\n  File \"C:\\Users\\gunngunner\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\__init__.py\", line 7, in <module>\r\n    from .ranking import auc\r\n\r\n  File \"C:\\Users\\gunngunner\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\ranking.py\", line 36, in <module>\r\n    from ..preprocessing import label_binarize\r\n\r\n  File \"C:\\Users\\gunngunner\\Anaconda3\\lib\\site-packages\\sklearn\\preprocessing\\__init__.py\", line 6, in <module>\r\n    from ._function_transformer import FunctionTransformer\r\n\r\n  File \"C:\\Users\\gunngunner\\Anaconda3\\lib\\site-packages\\sklearn\\preprocessing\\_function_transformer.py\", line 5, in <module>\r\n    from ..utils.testing import assert_allclose_dense_sparse\r\n\r\n  File \"C:\\Users\\gunngunner\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\testing.py\", line 63, in <module>\r\n    from nose.tools import raises as _nose_raises\r\n\r\n  File \"C:\\Users\\gunngunner\\Anaconda3\\lib\\site-packages\\nose\\__init__.py\", line 1, in <module>\r\n    from nose.core import collector, main, run, run_exit, runmodule\r\n\r\n  File \"C:\\Users\\gunngunner\\Anaconda3\\lib\\site-packages\\nose\\core.py\", line 11, in <module>\r\n    from nose.config import Config, all_config_files\r\n\r\n  File \"C:\\Users\\gunngunner\\Anaconda3\\lib\\site-packages\\nose\\config.py\", line 8, in <module>\r\n    from nose.util import absdir, tolist\r\n\r\n  File \"C:\\Users\\gunngunner\\Anaconda3\\lib\\site-packages\\nose\\util.py\", line 12, in <module>\r\n    from nose.pyversion import ClassType, TypeType, isgenerator, ismethod\r\n\r\n  File \"C:\\Users\\gunngunner\\Anaconda3\\lib\\site-packages\\nose\\pyversion.py\", line 36, in <module>\r\n    import new\r\n\r\n  File \"C:\\Users\\gunngunner\\new.py\", line 6, in <module>\r\n    if a[item]%2 != 0:\r\n\r\nIndexError: list index out of range", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/80", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/80/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/80/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/80", "id": 425844559, "node_id": "MDU6SXNzdWU0MjU4NDQ1NTk=", "number": 80, "title": "SyntaxWarning: invalid escape sequence \\w", "user": {"login": "cjerdonek", "id": 355822, "node_id": "MDQ6VXNlcjM1NTgyMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/355822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjerdonek", "html_url": "https://github.com/cjerdonek", "followers_url": "https://api.github.com/users/cjerdonek/followers", "following_url": "https://api.github.com/users/cjerdonek/following{/other_user}", "gists_url": "https://api.github.com/users/cjerdonek/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjerdonek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjerdonek/subscriptions", "organizations_url": "https://api.github.com/users/cjerdonek/orgs", "repos_url": "https://api.github.com/users/cjerdonek/repos", "events_url": "https://api.github.com/users/cjerdonek/events{/privacy}", "received_events_url": "https://api.github.com/users/cjerdonek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-27T09:20:00Z", "updated_at": "2019-04-08T04:48:13Z", "closed_at": "2019-04-08T04:48:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Someone reported a `SyntaxWarning` when using pyparsing with Python 3.8: https://github.com/pypa/pip/issues/6362\r\n\r\nIt's caused by the following line starting with `make_html =` inside a docstring: https://github.com/pyparsing/pyparsing/blob/fed0f3da669a9a81829651080b6dfe32ce44c1b0/pyparsing.py#L3073-L3083", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/79", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/79/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/79/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/79", "id": 422474028, "node_id": "MDU6SXNzdWU0MjI0NzQwMjg=", "number": 79, "title": "How do you install pyparsing?", "user": {"login": "juandent", "id": 5367573, "node_id": "MDQ6VXNlcjUzNjc1NzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5367573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/juandent", "html_url": "https://github.com/juandent", "followers_url": "https://api.github.com/users/juandent/followers", "following_url": "https://api.github.com/users/juandent/following{/other_user}", "gists_url": "https://api.github.com/users/juandent/gists{/gist_id}", "starred_url": "https://api.github.com/users/juandent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/juandent/subscriptions", "organizations_url": "https://api.github.com/users/juandent/orgs", "repos_url": "https://api.github.com/users/juandent/repos", "events_url": "https://api.github.com/users/juandent/events{/privacy}", "received_events_url": "https://api.github.com/users/juandent/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-18T23:09:25Z", "updated_at": "2019-03-30T08:19:45Z", "closed_at": "2019-03-30T08:19:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am new to python. How do I install pyparsing?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/78", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/78/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/78/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/78", "id": 422032744, "node_id": "MDU6SXNzdWU0MjIwMzI3NDQ=", "number": 78, "title": "indentedBlock + scanString allows indentation that doesn't use whitespace", "user": {"login": "TMiguelT", "id": 5019367, "node_id": "MDQ6VXNlcjUwMTkzNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5019367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TMiguelT", "html_url": "https://github.com/TMiguelT", "followers_url": "https://api.github.com/users/TMiguelT/followers", "following_url": "https://api.github.com/users/TMiguelT/following{/other_user}", "gists_url": "https://api.github.com/users/TMiguelT/gists{/gist_id}", "starred_url": "https://api.github.com/users/TMiguelT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TMiguelT/subscriptions", "organizations_url": "https://api.github.com/users/TMiguelT/orgs", "repos_url": "https://api.github.com/users/TMiguelT/repos", "events_url": "https://api.github.com/users/TMiguelT/events{/privacy}", "received_events_url": "https://api.github.com/users/TMiguelT/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-18T04:31:11Z", "updated_at": "2019-04-01T03:19:30Z", "closed_at": "2019-04-01T02:28:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've written a test for pyparsing that demonstrates this issue:\r\n\r\n```python\r\n    def runTest(self):\r\n        stack = [1]\r\n        parser = pp.indentedBlock(pp.Literal('A'), indentStack=stack, indent=True)\r\n\r\n        # Passes\r\n        a = parser.searchString(\"\"\"\r\n            A\r\n            A\r\n            A\r\n        \"\"\")\r\n        self.assertEqual(len(a[0][0]), 3)\r\n\r\n        # Also works, even though it shouldn't\r\n        b = parser.searchString(\"\"\"\r\n        ____A\r\n            A\r\n            A\r\n        \"\"\")\r\n        self.assertEqual(len(b[0][0]), 3)\r\n```\r\n\r\nBasically, because `checkSubIndent` doesn't actually care about the characters used in indentation, it will allow this `____A` line, if it's the first line of a `scanString`, and it actually starts parsing at the `A`.\r\n\r\nI'm thinking I should add some sort of check that the text used to indent each line is only whitespace?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/77", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/77/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/77/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/77", "id": 417975272, "node_id": "MDU6SXNzdWU0MTc5NzUyNzI=", "number": 77, "title": "add tutorial", "user": {"login": "Abdur-rahmaanJ", "id": 22630684, "node_id": "MDQ6VXNlcjIyNjMwNjg0", "avatar_url": "https://avatars3.githubusercontent.com/u/22630684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Abdur-rahmaanJ", "html_url": "https://github.com/Abdur-rahmaanJ", "followers_url": "https://api.github.com/users/Abdur-rahmaanJ/followers", "following_url": "https://api.github.com/users/Abdur-rahmaanJ/following{/other_user}", "gists_url": "https://api.github.com/users/Abdur-rahmaanJ/gists{/gist_id}", "starred_url": "https://api.github.com/users/Abdur-rahmaanJ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Abdur-rahmaanJ/subscriptions", "organizations_url": "https://api.github.com/users/Abdur-rahmaanJ/orgs", "repos_url": "https://api.github.com/users/Abdur-rahmaanJ/repos", "events_url": "https://api.github.com/users/Abdur-rahmaanJ/events{/privacy}", "received_events_url": "https://api.github.com/users/Abdur-rahmaanJ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-06T19:39:43Z", "updated_at": "2019-04-01T02:17:46Z", "closed_at": "2019-04-01T02:17:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "add links to tutorial articles. examples exist but different from tutorials", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/76", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/76/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/76/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/76", "id": 417807020, "node_id": "MDU6SXNzdWU0MTc4MDcwMjA=", "number": 76, "title": "More intelligent or user-friendly exceptions", "user": {"login": "Freakwill", "id": 30965609, "node_id": "MDQ6VXNlcjMwOTY1NjA5", "avatar_url": "https://avatars3.githubusercontent.com/u/30965609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Freakwill", "html_url": "https://github.com/Freakwill", "followers_url": "https://api.github.com/users/Freakwill/followers", "following_url": "https://api.github.com/users/Freakwill/following{/other_user}", "gists_url": "https://api.github.com/users/Freakwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/Freakwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Freakwill/subscriptions", "organizations_url": "https://api.github.com/users/Freakwill/orgs", "repos_url": "https://api.github.com/users/Freakwill/repos", "events_url": "https://api.github.com/users/Freakwill/events{/privacy}", "received_events_url": "https://api.github.com/users/Freakwill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-06T13:37:01Z", "updated_at": "2019-03-08T15:06:20Z", "closed_at": "2019-03-08T15:06:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nimport pyparsing as pp\r\na = pp.Literal('Hello') + pp.delimitedList(pp.pyparsing_common.identifier('subname'), '.')('Name')\r\na.parseString('Hello 123')\r\n```\r\n\r\nIt will report\r\n`pyparsing.ParseException: Expected identifier (at char 6), (line:1, col:7)`\r\n\r\nI hope that it can point out the name of the expression `Name` and what I input, for example\r\n`I expected \"Name\"(or \"subname\"), but got the numbers \"123\"`.\r\n\r\nMore ambitious idea is that it can report more than one errors, it can jump the current error to parse the next word.\r\n\r\nJust a suggestion.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/74", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/74/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/74/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/74", "id": 415412348, "node_id": "MDU6SXNzdWU0MTU0MTIzNDg=", "number": 74, "title": "indentedBlock not clearing the indent stack when it partially matches, and then fails", "user": {"login": "TMiguelT", "id": 5019367, "node_id": "MDQ6VXNlcjUwMTkzNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5019367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TMiguelT", "html_url": "https://github.com/TMiguelT", "followers_url": "https://api.github.com/users/TMiguelT/followers", "following_url": "https://api.github.com/users/TMiguelT/following{/other_user}", "gists_url": "https://api.github.com/users/TMiguelT/gists{/gist_id}", "starred_url": "https://api.github.com/users/TMiguelT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TMiguelT/subscriptions", "organizations_url": "https://api.github.com/users/TMiguelT/orgs", "repos_url": "https://api.github.com/users/TMiguelT/repos", "events_url": "https://api.github.com/users/TMiguelT/events{/privacy}", "received_events_url": "https://api.github.com/users/TMiguelT/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2019-02-28T02:04:36Z", "updated_at": "2019-03-12T23:41:24Z", "closed_at": "2019-03-12T23:41:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "First of all, thanks for this amazingly powerful and expressive library. I'm so glad to have found it.\r\n\r\nI want to parse a language that uses indentation semantically, and thus I am using the `indentedBlock` function. However, I want to use it in combination with `scanString()`, because not all text in my input string belongs to this language. \r\n\r\nHowever, in doing this I have noticed a bug in the `indentedBlock`. If you try to parse a string that *does* include an indented block, but *doesn't* completely parse, the indent stack will not be reverted to how it was, and thus it will fail to parse all correct statements.\r\n\r\nTo demonstrate this, I've made a simple test case: https://github.com/TMiguelT/PyparsingIndent/blob/master/indent.py. The comments explain that, if the `indentedBlock` expression matches, but then the rest of the parsing fails, then the parser will fail to match anything from then on.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/73", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/73/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/73/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/73", "id": 411518296, "node_id": "MDU6SXNzdWU0MTE1MTgyOTY=", "number": 73, "title": "Parsing lists of objects instead of just strings of characters?", "user": {"login": "esawtooth", "id": 846528, "node_id": "MDQ6VXNlcjg0NjUyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/846528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/esawtooth", "html_url": "https://github.com/esawtooth", "followers_url": "https://api.github.com/users/esawtooth/followers", "following_url": "https://api.github.com/users/esawtooth/following{/other_user}", "gists_url": "https://api.github.com/users/esawtooth/gists{/gist_id}", "starred_url": "https://api.github.com/users/esawtooth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/esawtooth/subscriptions", "organizations_url": "https://api.github.com/users/esawtooth/orgs", "repos_url": "https://api.github.com/users/esawtooth/repos", "events_url": "https://api.github.com/users/esawtooth/events{/privacy}", "received_events_url": "https://api.github.com/users/esawtooth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-18T15:03:11Z", "updated_at": "2019-04-01T02:29:50Z", "closed_at": "2019-04-01T02:29:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Today I made use of this awesome library to parse a list of divs while scraping a webpage. This webpage did not have sufficient structure _in situ_, but I was able to construct a string that pointed to the independent elements and parse that string based on a custom grammar. Mapping the parse tree back for that string gave me the parse tree for my divs. \r\n\r\nThis got me thinking about if there might be any value in being able to parse lists of arbitrary objects instead of just strings of characters? All of my hacking then to maintain a 1:1 mapping between my object and a string representation would be unnecessary. It might also be more efficient if we could do this directly. Do you think there would any value in supporting such a scenario (or even if there is a better way to do something like this)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/70", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/70/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/70/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/70", "id": 406113702, "node_id": "MDU6SXNzdWU0MDYxMTM3MDI=", "number": 70, "title": "Discussion: GSOC?", "user": {"login": "klahnakoski", "id": 2334429, "node_id": "MDQ6VXNlcjIzMzQ0Mjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2334429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klahnakoski", "html_url": "https://github.com/klahnakoski", "followers_url": "https://api.github.com/users/klahnakoski/followers", "following_url": "https://api.github.com/users/klahnakoski/following{/other_user}", "gists_url": "https://api.github.com/users/klahnakoski/gists{/gist_id}", "starred_url": "https://api.github.com/users/klahnakoski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klahnakoski/subscriptions", "organizations_url": "https://api.github.com/users/klahnakoski/orgs", "repos_url": "https://api.github.com/users/klahnakoski/repos", "events_url": "https://api.github.com/users/klahnakoski/events{/privacy}", "received_events_url": "https://api.github.com/users/klahnakoski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-03T18:05:35Z", "updated_at": "2019-02-05T14:03:58Z", "closed_at": "2019-02-05T14:03:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am looking to mentor some work on pyparsing. I intend for the coding to proceed on a fork, but I am wondering how much (or how little) you (the project owner) would like to be involved:\r\n\r\n* You can be hands off (default) - we will work off a fork, and submit a series of PRs near the end of the summer.\r\n* You can provide reviews (1 or 2 hours per week) - we can work on a pyparsing branch, and you get to direct the work in progress. \r\n* You can help mentor (4hours per week) - and guide the student on a near-daily basis.  \r\n\r\nIn all cases, I will give you updates on the project, I will be around to guide the student, and ensure the administrative stuff is done.  **IF** this happens, then the student will be working, full time from about May to end of August.\r\n\r\nThe project has been added here:  https://wiki.mozilla.org/Community:SummerOfCode19:Brainstorming#2019_Proposed_Project_List\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/69", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/69/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/69/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/69", "id": 401085463, "node_id": "MDU6SXNzdWU0MDEwODU0NjM=", "number": 69, "title": "2.3.1 not backward compatible to 2.3.0", "user": {"login": "kochelmonster", "id": 3512356, "node_id": "MDQ6VXNlcjM1MTIzNTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/3512356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kochelmonster", "html_url": "https://github.com/kochelmonster", "followers_url": "https://api.github.com/users/kochelmonster/followers", "following_url": "https://api.github.com/users/kochelmonster/following{/other_user}", "gists_url": "https://api.github.com/users/kochelmonster/gists{/gist_id}", "starred_url": "https://api.github.com/users/kochelmonster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kochelmonster/subscriptions", "organizations_url": "https://api.github.com/users/kochelmonster/orgs", "repos_url": "https://api.github.com/users/kochelmonster/repos", "events_url": "https://api.github.com/users/kochelmonster/events{/privacy}", "received_events_url": "https://api.github.com/users/kochelmonster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-01-20T10:54:19Z", "updated_at": "2019-04-08T04:47:18Z", "closed_at": "2019-04-08T04:47:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please try out the attached test file. It runs in 2.3.0 but causes errors in 2.3.1.\r\n[pyparsing_error.py.gz](https://github.com/pyparsing/pyparsing/files/2776484/pyparsing_error.py.gz)\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/67", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/67/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/67/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/67", "id": 399343864, "node_id": "MDU6SXNzdWUzOTkzNDM4NjQ=", "number": 67, "title": "Export arbitrary ParseElement as EBNF", "user": {"login": "cthoyt", "id": 5069736, "node_id": "MDQ6VXNlcjUwNjk3MzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/5069736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cthoyt", "html_url": "https://github.com/cthoyt", "followers_url": "https://api.github.com/users/cthoyt/followers", "following_url": "https://api.github.com/users/cthoyt/following{/other_user}", "gists_url": "https://api.github.com/users/cthoyt/gists{/gist_id}", "starred_url": "https://api.github.com/users/cthoyt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cthoyt/subscriptions", "organizations_url": "https://api.github.com/users/cthoyt/orgs", "repos_url": "https://api.github.com/users/cthoyt/repos", "events_url": "https://api.github.com/users/cthoyt/events{/privacy}", "received_events_url": "https://api.github.com/users/cthoyt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-01-15T13:25:55Z", "updated_at": "2019-04-01T02:31:59Z", "closed_at": "2019-04-01T02:31:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not really sure what the tractability of this issue is, so first I would ask: are grammars represented with PyParsing within the class of context free grammars?\r\n\r\nIf that's the case, it would be incredibly useful to export a grammar defined through the PyParsing DSL as an EBNF document. This would provide a programmatic specification in a standard format that other tools could use as well.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/65", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/65/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/65/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/65", "id": 396665756, "node_id": "MDU6SXNzdWUzOTY2NjU3NTY=", "number": 65, "title": "scanString() is different with CaselessKeyword (x) and Keyword(x, caseless=True)", "user": {"login": "telesphore", "id": 643887, "node_id": "MDQ6VXNlcjY0Mzg4Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/643887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/telesphore", "html_url": "https://github.com/telesphore", "followers_url": "https://api.github.com/users/telesphore/followers", "following_url": "https://api.github.com/users/telesphore/following{/other_user}", "gists_url": "https://api.github.com/users/telesphore/gists{/gist_id}", "starred_url": "https://api.github.com/users/telesphore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/telesphore/subscriptions", "organizations_url": "https://api.github.com/users/telesphore/orgs", "repos_url": "https://api.github.com/users/telesphore/repos", "events_url": "https://api.github.com/users/telesphore/events{/privacy}", "received_events_url": "https://api.github.com/users/telesphore/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-07T21:56:30Z", "updated_at": "2019-01-13T23:04:06Z", "closed_at": "2019-01-13T23:04:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "The `CaselessKeyword(x)` version does not seem to have the same preceding `\\b` (or whatever) break as the  `Keyword(x, caseless=True)`.\r\n\r\nI'm very new to pyparsing but I would expect the two versions to behave the same.\r\n\r\n```\r\n$ ipython \r\nPython 3.6.7 (default, Oct 22 2018, 11:32:17) \r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 7.2.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: from pyparsing import Keyword, CaselessKeyword, __version__                                                                  \r\n\r\nIn [2]: frule = Keyword('t', caseless=True) + Keyword('yes', caseless=True)                                                          \r\n\r\nIn [3]: crule = CaselessKeyword('t') + CaselessKeyword('yes')                                                                        \r\n\r\nIn [4]: list(frule.scanString('not yes'))                                                                                            \r\nOut[4]: []\r\n\r\nIn [5]: list(crule.scanString('not yes'))                                                                                            \r\nOut[5]: [((['t', 'yes'], {}), 2, 7)]\r\n\r\nIn [6]: __version__                                                                                                                  \r\nOut[6]: '2.3.0'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/63", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/63/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/63/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/63", "id": 396492367, "node_id": "MDU6SXNzdWUzOTY0OTIzNjc=", "number": 63, "title": "unitTests.UnicodeTests fail with python2", "user": {"login": "mcepl", "id": 198999, "node_id": "MDQ6VXNlcjE5ODk5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/198999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcepl", "html_url": "https://github.com/mcepl", "followers_url": "https://api.github.com/users/mcepl/followers", "following_url": "https://api.github.com/users/mcepl/following{/other_user}", "gists_url": "https://api.github.com/users/mcepl/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcepl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcepl/subscriptions", "organizations_url": "https://api.github.com/users/mcepl/orgs", "repos_url": "https://api.github.com/users/mcepl/repos", "events_url": "https://api.github.com/users/mcepl/events{/privacy}", "received_events_url": "https://api.github.com/users/mcepl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-01-07T13:44:18Z", "updated_at": "2019-01-13T23:06:10Z", "closed_at": "2019-01-13T23:06:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With tarball ``pyparsing-2.3.1~test5.tar.gz`` I get this one test failing with Python 2:\r\n```\r\n$ python2 unitTests.py  -v\r\nBeginning test of pyparsing, version 2.3.1\r\nPython version 2.7.15 (default, May 21 2018, 17:53:03) [GCC]\r\n.........................................................................................\r\n>>>> Starting test UnicodeTests\r\n[u'\\u039a\\u03b1\\u03bb\\u03b7\\u03bc\\u03ad\\u03c1\\u03b1', ',', u'\\u03ba\\u03cc\\u03c3\\u03bc\\u03b5', '!']\r\n<<<< End of test UnicodeTests\r\n\r\n\r\nE..........................................................................................\r\n>>>> Starting test UnicodeTests\r\n[u'\\u039a\\u03b1\\u03bb\\u03b7\\u03bc\\u03ad\\u03c1\\u03b1', ',', u'\\u03ba\\u03cc\\u03c3\\u03bc\\u03b5', '!']\r\n<<<< End of test UnicodeTests\r\n\r\n\r\nE..\r\n======================================================================\r\nERROR: UnicodeTests\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"unitTests.py\", line 94, in _runTest\r\n    self.runTest()\r\n  File \"unitTests.py\", line 3666, in runTest\r\n    result = pp.Dict(pp.OneOrMore(pp.Group(key_value))).parseString(sample)\r\n  File \"/home/matej/build/python/python-pyparsing/pyparsing-2.3.1/pyparsing.py\", line 1729, in parseString\r\n    raise exc\r\nParseException: Expected \"=\" (at char 13), (line:1, col:14)\r\n\r\n======================================================================\r\nERROR: UnicodeTests\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"unitTests.py\", line 94, in _runTest\r\n    self.runTest()\r\n  File \"unitTests.py\", line 3666, in runTest\r\n    result = pp.Dict(pp.OneOrMore(pp.Group(key_value))).parseString(sample)\r\n  File \"/home/matej/build/python/python-pyparsing/pyparsing-2.3.1/pyparsing.py\", line 1729, in parseString\r\n    raise exc\r\nParseException: Expected \"=\" (at char 13), (line:1, col:14)\r\n\r\n----------------------------------------------------------------------\r\nRan 183 tests in 2.346s\r\n\r\nFAILED (errors=2)\r\n```\r\n[Complete build log with python2 run for unitTests.py omitted](https://github.com/pyparsing/pyparsing/files/2732928/build.log)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/53", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/53/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/53/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/53", "id": 393256241, "node_id": "MDU6SXNzdWUzOTMyNTYyNDE=", "number": 53, "title": "dictOf erroneously matches empty string", "user": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-20T23:51:15Z", "updated_at": "2019-03-13T17:10:54Z", "closed_at": "2019-01-13T23:04:36Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Because dictOf uses ZeroOrMore for its internal repetition, it is possible to for it to match the empty string, which causes problems when it is also part of a larger repetitive expression (loops forever).\r\n\r\nNeeds to be changed to use OneOrMore.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/52", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/52/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/52/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/52", "id": 389039902, "node_id": "MDU6SXNzdWUzODkwMzk5MDI=", "number": 52, "title": "statemachine example not working in Python3", "user": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-09T16:36:54Z", "updated_at": "2019-01-13T23:04:58Z", "closed_at": "2019-01-13T23:04:58Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Need to update statemachine example to work with Python3 importlib.\r\nAlso, add traffic light and library book examples.\r\n(Probably needs to be in its own subdirectory of the examples directory, similar to verilog samples)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/51", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/51/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/51/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/51", "id": 384886800, "node_id": "MDU6SXNzdWUzODQ4ODY4MDA=", "number": 51, "title": "Passing whitespace characters to White() not in whiteStrs causes KeyError", "user": {"login": "rtkjbillo", "id": 5348747, "node_id": "MDQ6VXNlcjUzNDg3NDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5348747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rtkjbillo", "html_url": "https://github.com/rtkjbillo", "followers_url": "https://api.github.com/users/rtkjbillo/followers", "following_url": "https://api.github.com/users/rtkjbillo/following{/other_user}", "gists_url": "https://api.github.com/users/rtkjbillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rtkjbillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rtkjbillo/subscriptions", "organizations_url": "https://api.github.com/users/rtkjbillo/orgs", "repos_url": "https://api.github.com/users/rtkjbillo/repos", "events_url": "https://api.github.com/users/rtkjbillo/events{/privacy}", "received_events_url": "https://api.github.com/users/rtkjbillo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-11-27T16:45:00Z", "updated_at": "2019-12-05T20:53:40Z", "closed_at": "2019-01-13T23:05:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Environment: macOS 10.14.1, Python 2.7.15 from MacPorts, pyparsing 2.3.0 from pypi\r\n\r\nWhen constructing a White() token with characters in the `ws=` parameter that are not in the `White.whiteStrs` dict, such as `\\u00a0` (Unicode NO-BREAK SPACE), the constructor raises a KeyError when it tries to set the `self.name` property. Example:\r\n\r\n```\r\nPython 2.7.15 (default, Oct  1 2018, 15:59:56)\r\n[GCC 4.2.1 Compatible Apple LLVM 10.0.0 (clang-1000.11.45.2)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from pyparsing import White\r\n>>> w = White(ws=u' \\t\\u00a0')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pyparsing.py\", line 3132, in __init__\r\n    self.name = (\"\".join(White.whiteStrs[c] for c in self.matchWhite))\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pyparsing.py\", line 3132, in <genexpr>\r\n    self.name = (\"\".join(White.whiteStrs[c] for c in self.matchWhite))\r\nKeyError: u'\\xa0'\r\n```\r\n\r\nMy workaround for now is to manually add the necessary key/value pairs into the `whiteStrs` dict:\r\n\r\n```\r\n>>> from pyparsing import White\r\n>>> White.whiteStrs[u'\\u00a0'] = \"<NO-BREAK SPACE>\"\r\n>>> w = White(u' \\t\\u00a0')\r\n>>> w.name\r\n'<SPC><TAB><NO-BREAK SPACE>'\r\n```\r\n\r\nIt may be a good idea to provide a method for setting `whiteStrs` entries, or have the name generation process gracefully handle non-existent keys.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/50", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/50/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/50/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/50", "id": 383255972, "node_id": "MDU6SXNzdWUzODMyNTU5NzI=", "number": 50, "title": "Generated Sphinx docs include large strings for defined unicode ranges", "user": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-21T19:03:46Z", "updated_at": "2018-11-22T06:39:50Z", "closed_at": "2018-11-22T06:39:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The sphinx documentation generates documentation for the new pyparsing_unicode classes' alphas, nums, printables, etc. strings. These inflate the generated pyparsing.html file to over 12MB in size.\r\n\r\nEither these strings should be suppressed from the docs, or the generated code post-processed to clip them to a reasonable length.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/48", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/48/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/48/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/48", "id": 383194918, "node_id": "MDU6SXNzdWUzODMxOTQ5MTg=", "number": 48, "title": "simple_unit_tests.TestResultsModifyingParseAction fails", "user": {"login": "mcepl", "id": 198999, "node_id": "MDQ6VXNlcjE5ODk5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/198999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcepl", "html_url": "https://github.com/mcepl", "followers_url": "https://api.github.com/users/mcepl/followers", "following_url": "https://api.github.com/users/mcepl/following{/other_user}", "gists_url": "https://api.github.com/users/mcepl/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcepl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcepl/subscriptions", "organizations_url": "https://api.github.com/users/mcepl/orgs", "repos_url": "https://api.github.com/users/mcepl/repos", "events_url": "https://api.github.com/users/mcepl/events{/privacy}", "received_events_url": "https://api.github.com/users/mcepl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-21T16:20:59Z", "updated_at": "2018-11-21T17:31:03Z", "closed_at": "2018-11-21T17:31:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When running the test suite with Python 2.7 (and with https://github.com/pyparsing/pyparsing/pull/47 merged in), I get this failed test:\r\n```\r\n[   58s] ======================================================================\r\n[   58s] FAIL: runTest (simple_unit_tests.TestResultsModifyingParseAction)\r\n[   58s] ----------------------------------------------------------------------\r\n[   58s] Traceback (most recent call last):\r\n[   58s]   File \"/home/abuild/rpmbuild/BUILD/pyparsing-2.3.1/simple_unit_tests.py\", line 59, in runTest\r\n[   58s]     self.assertEqual(result.asDict(), test_spec.expected_dict)\r\n[   58s] AssertionError: {'ave': 30, 'sum': 153, 'min': 1, 'max': 89} != {'ave': 30.6, 'sum': 153, 'min': 1, 'max': 89}\r\n[   58s] - {'ave': 30, 'max': 89, 'min': 1, 'sum': 153}\r\n[   58s] + {'ave': 30.6, 'max': 89, 'min': 1, 'sum': 153}\r\n[   58s] ?           ++\r\n[   58s] \r\n[   58s] -------------------- >> begin captured stdout << ---------------------\r\n[   58s] \r\n[   58s] A parse action that adds new key-values - OneOrMore({integer}...)\r\n[   58s] [27, 1, 14, 22, 89]\r\n[   58s] - ave: 30\r\n[   58s] - max: 89\r\n[   58s] - min: 1\r\n[   58s] - sum: 153\r\n[   58s] \r\n[   58s] --------------------- >> end captured stdout << ----------------------\r\n[   58s] \r\n[   58s] ----------------------------------------------------------------------\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/45", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/45/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/45/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/45", "id": 382176790, "node_id": "MDU6SXNzdWUzODIxNzY3OTA=", "number": 45, "title": "Problem parsing strings that are single quoted and ends with double single escaped quote character", "user": {"login": "lcarlier", "id": 5570374, "node_id": "MDQ6VXNlcjU1NzAzNzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/5570374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcarlier", "html_url": "https://github.com/lcarlier", "followers_url": "https://api.github.com/users/lcarlier/followers", "following_url": "https://api.github.com/users/lcarlier/following{/other_user}", "gists_url": "https://api.github.com/users/lcarlier/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcarlier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcarlier/subscriptions", "organizations_url": "https://api.github.com/users/lcarlier/orgs", "repos_url": "https://api.github.com/users/lcarlier/repos", "events_url": "https://api.github.com/users/lcarlier/events{/privacy}", "received_events_url": "https://api.github.com/users/lcarlier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-19T11:42:11Z", "updated_at": "2018-11-20T03:59:15Z", "closed_at": "2018-11-19T12:19:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI'm trying to parse the following string in Python with pyparser.\r\nThis is part of a much more complicated use case and I've extracted the relevant part here.\r\n\r\n```\r\n>>> from pyparsing import QuotedString\r\n>>> QUOTED_STRING = QuotedString(\"'\", escChar=(\"''\"), unquoteResults=False)\r\n>>> stringToParse = \"'A string that ''ends'' with double single quotes ''1'''\"\r\n>>> val = QUOTED_STRING.parseString(stringToParse).asList()\r\n>>> print val[0]\r\n'A string that ''ends'' with double single quotes ''1'\r\n>>> import pyparsing\r\n>>> print pyparsing.__version__\r\n2.3.1\r\n```\r\nThe problem here is that I'm expecting to get the string \r\n`'A string that ''ends'' with double single quotes ''1'''`\r\nbut val[0] equals the following in my case\r\n`'A string that ''ends'' with double single quotes ''1'`\r\n\r\nIs this a bug? or do I miss something here?\r\nKind regards,\r\nLaurent", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/44", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/44/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/44/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/44", "id": 381063083, "node_id": "MDU6SXNzdWUzODEwNjMwODM=", "number": 44, "title": "Distribute tests in pypi tarball", "user": {"login": "scarabeusiv", "id": 1055830, "node_id": "MDQ6VXNlcjEwNTU4MzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1055830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scarabeusiv", "html_url": "https://github.com/scarabeusiv", "followers_url": "https://api.github.com/users/scarabeusiv/followers", "following_url": "https://api.github.com/users/scarabeusiv/following{/other_user}", "gists_url": "https://api.github.com/users/scarabeusiv/gists{/gist_id}", "starred_url": "https://api.github.com/users/scarabeusiv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scarabeusiv/subscriptions", "organizations_url": "https://api.github.com/users/scarabeusiv/orgs", "repos_url": "https://api.github.com/users/scarabeusiv/repos", "events_url": "https://api.github.com/users/scarabeusiv/events{/privacy}", "received_events_url": "https://api.github.com/users/scarabeusiv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-15T09:06:05Z", "updated_at": "2018-11-20T23:09:49Z", "closed_at": "2018-11-20T23:09:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello in various distributions we try to make sure the packages we in the end ship to users are really working and for that we execute upstream unittests to ensure some validity. Esp. with python that is not compiled it is quite good idea to check that with distribution patching in python we didn't break something.\r\n\r\nAs such could you please include in Manifest.in the files executed by the tox/travis for us to validate against?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/43", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/43/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/43/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/43", "id": 378972220, "node_id": "MDU6SXNzdWUzNzg5NzIyMjA=", "number": 43, "title": "PyParsing parsing producing different results in 2.3.0", "user": {"login": "carlos-jenkins", "id": 1628587, "node_id": "MDQ6VXNlcjE2Mjg1ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1628587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlos-jenkins", "html_url": "https://github.com/carlos-jenkins", "followers_url": "https://api.github.com/users/carlos-jenkins/followers", "following_url": "https://api.github.com/users/carlos-jenkins/following{/other_user}", "gists_url": "https://api.github.com/users/carlos-jenkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlos-jenkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlos-jenkins/subscriptions", "organizations_url": "https://api.github.com/users/carlos-jenkins/orgs", "repos_url": "https://api.github.com/users/carlos-jenkins/repos", "events_url": "https://api.github.com/users/carlos-jenkins/events{/privacy}", "received_events_url": "https://api.github.com/users/carlos-jenkins/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-09T00:18:10Z", "updated_at": "2018-11-09T22:32:58Z", "closed_at": "2018-11-09T22:32:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nSince PyParsing 2.3.0 I'm having issue with the parsing of my grammar. 2.2.2 (the previous release) doesn't have this behavior.\r\n\r\nMy grammar is as follows:\r\n\r\n```python3\r\n\r\ndef build_parser():\r\n    \"\"\"\r\n    Build a pyparsing parser for our custom topology description language.\r\n\r\n    :return: A pyparsing parser.\r\n    :rtype: pyparsing.MatchFirst\r\n    \"\"\"\r\n    from pyparsing import (\r\n        Word, Literal, QuotedString,\r\n        StringStart, StringEnd,\r\n        alphas, nums, alphanums,\r\n        Group, OneOrMore, Optional\r\n    )\r\n\r\n    number = Word(nums)\r\n    text = QuotedString('\"')\r\n    identifier = Word(alphas, alphanums + '_')\r\n\r\n    attribute = (\r\n        identifier('key') + Literal('=') +\r\n        (text | number | identifier)('value')\r\n    )\r\n    attributes = (\r\n        Literal('[') +\r\n        OneOrMore(Group(attribute))('attributes') +\r\n        Literal(']')\r\n    )\r\n\r\n    node = identifier('node')\r\n    port = node + Literal(':') + (identifier | number)('port')\r\n    link = port('endpoint_a') + Literal('--') + port('endpoint_b')\r\n\r\n    environment_spec = (\r\n        StringStart() + attributes('environment') + StringEnd()\r\n    )\r\n    nodes_spec = (\r\n        StringStart() + Optional(attributes) +\r\n        OneOrMore(Group(node))('nodes') + StringEnd()\r\n    )\r\n    ports_spec = (\r\n        StringStart() + Optional(attributes) +\r\n        OneOrMore(Group(port))('ports') + StringEnd()\r\n    )\r\n    link_spec = (\r\n        StringStart() + Optional(attributes) +\r\n        link('link') + StringEnd()\r\n    )\r\n\r\n    statement = environment_spec | link_spec | ports_spec | nodes_spec\r\n\r\n    return statement\r\n```\r\n\r\nAnd when I try to parse the following string:\r\n\r\n```\r\n'hs1:1 -- sw1:1'\r\n```\r\n\r\nIn PyParsing 2.3.0 I get :\r\n\r\n```python3\r\n(\r\n    ['hs1', ':', '1', '--', 'sw1', ':', '1'],\r\n    {\r\n        'endpoint_a': [(['hs1', ':', '1'], {})],\r\n        'endpoint_b': [(['sw1', ':', '1'], {})],\r\n        'link': [(['hs1', ':', '1', '--', 'sw1', ':', '1'], {})],\r\n        'node': ['hs1', 'sw1'],\r\n        'port': ['1', '1'],\r\n    },\r\n)\r\n```\r\n\r\nWhich is very different from what I was getting in version 2.2.2:\r\n\r\n```python3\r\n(\r\n    ['hs1', ':', '1', '--', 'sw1', ':', '1'],\r\n    {\r\n        'endpoint_a': [\r\n            ((['hs1', ':', '1'], {'node': [('hs1', 0)], 'port': [('1', 2)]}), 0),\r\n        ],\r\n        'endpoint_b': [\r\n            ((['sw1', ':', '1'], {'node': [('sw1', 0)], 'port': [('1', 2)]}), 4),\r\n        ],\r\n        'link': [\r\n            (\r\n                (\r\n                    ['hs1', ':', '1', '--', 'sw1', ':', '1'],\r\n                    {\r\n                        'endpoint_a': [\r\n                            (\r\n                                (\r\n                                    ['hs1', ':', '1'],\r\n                                    {'node': [('hs1', 0)], 'port': [('1', 2)]},\r\n                                ),\r\n                                0,\r\n                            ),\r\n                        ],\r\n                        'endpoint_b': [\r\n                            (\r\n                                (\r\n                                    ['sw1', ':', '1'],\r\n                                    {'node': [('sw1', 0)], 'port': [('1', 2)]},\r\n                                ),\r\n                                4,\r\n                            ),\r\n                        ],\r\n                        'node': [('hs1', 0), ('sw1', 4)],\r\n                        'port': [('1', 2), ('1', 6)],\r\n                    },\r\n                ),\r\n                0,\r\n            ),\r\n        ],\r\n        'node': [('hs1', 0), ('sw1', 4)],\r\n        'port': [('1', 2), ('1', 6)],\r\n    },\r\n)\r\n```\r\n\r\nI'm not sure what changed, since the release notes doesn't address change in behavior, or my grammar was badly described since the beginning, since this is code from 2015.\r\n\r\nAny help on the matter or enlightenment on the direction to take is very welcome.\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/42", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/42/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/42/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/42", "id": 378852797, "node_id": "MDU6SXNzdWUzNzg4NTI3OTc=", "number": 42, "title": "Slight documentation change to oneOf", "user": {"login": "vaughnkoch", "id": 390917, "node_id": "MDQ6VXNlcjM5MDkxNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/390917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaughnkoch", "html_url": "https://github.com/vaughnkoch", "followers_url": "https://api.github.com/users/vaughnkoch/followers", "following_url": "https://api.github.com/users/vaughnkoch/following{/other_user}", "gists_url": "https://api.github.com/users/vaughnkoch/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaughnkoch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaughnkoch/subscriptions", "organizations_url": "https://api.github.com/users/vaughnkoch/orgs", "repos_url": "https://api.github.com/users/vaughnkoch/repos", "events_url": "https://api.github.com/users/vaughnkoch/events{/privacy}", "received_events_url": "https://api.github.com/users/vaughnkoch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-11-08T18:05:25Z", "updated_at": "2019-07-21T19:31:26Z", "closed_at": "2019-07-21T19:31:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "The documentation for oneOf is correct, but it's easy to get tripped up by the following code:\r\n\r\n```\r\nfrom pyparsing import *\r\n\r\n# Fails\r\nexpr = oneOf('count', 'sum')\r\n\r\n# Works\r\nexpr = oneOf(['count', 'sum'])\r\n\r\ndef parse_expression(_input):\r\n  results = expr.parseString(_input)\r\n  print(results.dump())\r\n\r\n\r\nparse_expression('sum')\r\n```\r\n\r\nThat's just because oneOf takes a list object and not several parameters. It might be helpful to include a short note that you can't call it like I tried to above.\r\n\r\nGreat library, btw :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/40", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/40/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/40/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/40", "id": 375493502, "node_id": "MDU6SXNzdWUzNzU0OTM1MDI=", "number": 40, "title": "Undefined name: 'err' in examples/SimpleCalc.py", "user": {"login": "cclauss", "id": 3709715, "node_id": "MDQ6VXNlcjM3MDk3MTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cclauss", "html_url": "https://github.com/cclauss", "followers_url": "https://api.github.com/users/cclauss/followers", "following_url": "https://api.github.com/users/cclauss/following{/other_user}", "gists_url": "https://api.github.com/users/cclauss/gists{/gist_id}", "starred_url": "https://api.github.com/users/cclauss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cclauss/subscriptions", "organizations_url": "https://api.github.com/users/cclauss/orgs", "repos_url": "https://api.github.com/users/cclauss/repos", "events_url": "https://api.github.com/users/cclauss/events{/privacy}", "received_events_url": "https://api.github.com/users/cclauss/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-10-30T13:38:34Z", "updated_at": "2018-10-31T06:21:44Z", "closed_at": "2018-10-31T06:21:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Python 3 scoping rules are different than Python 2's.  That means that '__err__' is no longer defined in the three lines below...\r\n\r\n[flake8](http://flake8.pycqa.org) testing of https://github.com/pyparsing/pyparsing on Python 3.7.1\r\n\r\n$ __flake8 . --count --select=E901,E999,F821,F822,F823 --show-source --statistics__\r\n```\r\n./examples/SimpleCalc.py:108:15: F821 undefined name 'err'\r\n        print(err.line)\r\n              ^\r\n./examples/SimpleCalc.py:109:20: F821 undefined name 'err'\r\n        print(\" \"*(err.column-1) + \"^\")\r\n                   ^\r\n./examples/SimpleCalc.py:110:15: F821 undefined name 'err'\r\n        print(err)\r\n              ^\r\n3    F821 undefined name 'err'\r\n3\r\n```\r\n\r\nTo see the scoping rule differences, try the following in both Python 2 and Python 3.\r\n```python\r\n#!/usr/bin/env python3\r\n\r\nfrom __future__ import print_function\r\n\r\nerr = None\r\n\r\ntry:\r\n    print(\"Before:\", err)\r\n    import a_module_that_does_not_exist\r\nexcept ImportError as err:\r\n    print(\"During:\", err)\r\n\r\nprint(\"After:\", err)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/37", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/37/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/37/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/37", "id": 374427066, "node_id": "MDU6SXNzdWUzNzQ0MjcwNjY=", "number": 37, "title": "forgot pdb", "user": {"login": "BolshakovNO", "id": 8124213, "node_id": "MDQ6VXNlcjgxMjQyMTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/8124213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BolshakovNO", "html_url": "https://github.com/BolshakovNO", "followers_url": "https://api.github.com/users/BolshakovNO/followers", "following_url": "https://api.github.com/users/BolshakovNO/following{/other_user}", "gists_url": "https://api.github.com/users/BolshakovNO/gists{/gist_id}", "starred_url": "https://api.github.com/users/BolshakovNO/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BolshakovNO/subscriptions", "organizations_url": "https://api.github.com/users/BolshakovNO/orgs", "repos_url": "https://api.github.com/users/BolshakovNO/repos", "events_url": "https://api.github.com/users/BolshakovNO/events{/privacy}", "received_events_url": "https://api.github.com/users/BolshakovNO/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-26T15:09:33Z", "updated_at": "2018-10-27T01:06:47Z", "closed_at": "2018-10-27T01:06:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/pyparsing/pyparsing/blob/2fe1bb0be12e9c603bc82d3990b9305c248d99e1/pyparsing.py#L1241", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/35", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/35/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/35/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/35", "id": 367614232, "node_id": "MDU6SXNzdWUzNjc2MTQyMzI=", "number": 35, "title": "Define Meanwhile class", "user": {"login": "Freakwill", "id": 30965609, "node_id": "MDQ6VXNlcjMwOTY1NjA5", "avatar_url": "https://avatars3.githubusercontent.com/u/30965609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Freakwill", "html_url": "https://github.com/Freakwill", "followers_url": "https://api.github.com/users/Freakwill/followers", "following_url": "https://api.github.com/users/Freakwill/following{/other_user}", "gists_url": "https://api.github.com/users/Freakwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/Freakwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Freakwill/subscriptions", "organizations_url": "https://api.github.com/users/Freakwill/orgs", "repos_url": "https://api.github.com/users/Freakwill/repos", "events_url": "https://api.github.com/users/Freakwill/events{/privacy}", "received_events_url": "https://api.github.com/users/Freakwill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-08T01:17:38Z", "updated_at": "2019-07-27T01:27:52Z", "closed_at": "2019-07-27T01:27:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I defined `Meanwhile` class. It can be applied in some cases where others fail. Rename it if you have a good name. Following is the code.\r\n\r\n```python\r\nclass Meanwhile(pp.ParseExpression):\r\n    \"\"\"Parse expression whose all sub-expressions have to be matched at the same time\r\n\r\n        Grammar:\r\n            Meanwhile([A, B, ...]), where A, B, ... are parse expressions.\r\n       \r\n        Example:\r\n            >>> A = Meanwhile([IDEN, ~('_'+ DIGIT)]) # IDEN % ('_'+ DIGIT) for short\r\n            >>> to parse identifiers such as _a123 excluding _123\r\n            >>> A.parseString('_a123')  # => ['_a123']\r\n            >>> A.parseString('_123')   # => ParseException\r\n\r\n            >>> A = Meanwhile([IDEN, pp.Word('?_123456xend'), pp.Word('_+-*/123x')+'end']) # (_|x) (_123x)* end\r\n            >>> A.parseString('_xend')  # => ['_xend']\r\n            >>> A.parseString('_123end') # => ['_123end']\r\n            >>> A.parseString('_abc')   # => ParseException\r\n    \"\"\"\r\n\r\n    def __init__(self, exprs=[]):\r\n        '''\r\n        Keyword Arguments:\r\n            exprs {list} -- list of parse expressions (default: {[]})\r\n        '''\r\n        super(Meanwhile, self).__init__(exprs)\r\n        self.mayReturnEmpty = all(e.mayReturnEmpty for e in self.exprs)\r\n        self.setWhitespaceChars(self.exprs[0].whiteChars)\r\n        self.skipWhitespace = self.exprs[0].skipWhitespace\r\n        self.callPreparse = True\r\n\r\n    def parseImpl(self, instring, loc, doActions=True):\r\n        postloc, result = self.exprs[0]._parse(instring, loc, doActions)\r\n        for e in self.exprs[1:]:\r\n            if not e.matches(instring[loc:], parseAll=True):\r\n                raise _Exception(instring, len(instring), e.errmsg, self)\r\n        return postloc, result\r\n\r\n    def __mod__(self, other):\r\n        if isinstance(other, str):\r\n            other = pp.ParserElement._literalStringClass(other)\r\n        return self.exprs.append(~other)\r\n\r\n    def checkRecursion(self, parseElementList):\r\n        subRecCheckList = parseElementList[:] + [self]\r\n        for e in self.exprs:\r\n            e.checkRecursion(subRecCheckList)\r\n            if not e.mayReturnEmpty:\r\n                break\r\n\r\n    def __str__(self):\r\n        if hasattr(self, \"name\"):\r\n            return self.name\r\n\r\n        if self.strRepr is None:\r\n            self.strRepr = \"%s{%s}\"%(str(self.exprs[0]), \" \".join(str(e) for e in self.exprs[1:]))\r\n\r\n        return self.strRepr\r\n```\r\n\r\nFixed a bug, added a new example.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/34", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/34/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/34/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/34", "id": 366579159, "node_id": "MDU6SXNzdWUzNjY1NzkxNTk=", "number": 34, "title": "Bug in OneOrMore/Or", "user": {"login": "geuben", "id": 6205575, "node_id": "MDQ6VXNlcjYyMDU1NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6205575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geuben", "html_url": "https://github.com/geuben", "followers_url": "https://api.github.com/users/geuben/followers", "following_url": "https://api.github.com/users/geuben/following{/other_user}", "gists_url": "https://api.github.com/users/geuben/gists{/gist_id}", "starred_url": "https://api.github.com/users/geuben/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geuben/subscriptions", "organizations_url": "https://api.github.com/users/geuben/orgs", "repos_url": "https://api.github.com/users/geuben/repos", "events_url": "https://api.github.com/users/geuben/events{/privacy}", "received_events_url": "https://api.github.com/users/geuben/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-04T00:31:10Z", "updated_at": "2018-10-04T21:43:25Z", "closed_at": "2018-10-04T21:43:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am seeing some potentially odd behaviour, or it's just me misunderstanding something.\r\n\r\nI've narrowed it down to this trivial example (that on it's own doesn't make a lot of sense but it's part of something bigger)\r\n\r\n```\r\nimport pyparsing as pp\r\na = pp.OneOrMore(\r\n    pp.Or([\r\n        pp.White(exact=1),\r\n    ]))\r\n\r\nexpr1 = pp.White(exact=1) + pp.ZeroOrMore(pp.Word(pp.printables))\r\nexpr2 = a + pp.ZeroOrMore(pp.Word(pp.printables))\r\n\r\nprint(expr1.parseString(\" foobar\"))\r\nprint(expr2.parseString(\" foobar\"))\r\n```\r\n\r\n`expr1` works and returns `[' ', 'foobar']` (I'm not actually interested in the output)\r\n`expr2` fails with:\r\n\r\n`ParseException: Expected {<SPC><TAB><CR><LF>} (at char 1), (line:1, col:2)`\r\n\r\nDoesn't expression `a` evaluate to the same as `pp.White(exact=1)` in the case of \" \"?\r\n\r\nThe reason for expression `a` is that in my actual code the `Or` contains some other expressions for matching punctuation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/33", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/33/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/33/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/33", "id": 366240612, "node_id": "MDU6SXNzdWUzNjYyNDA2MTI=", "number": 33, "title": "lookahead with tokens returned", "user": {"login": "geuben", "id": 6205575, "node_id": "MDQ6VXNlcjYyMDU1NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6205575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geuben", "html_url": "https://github.com/geuben", "followers_url": "https://api.github.com/users/geuben/followers", "following_url": "https://api.github.com/users/geuben/following{/other_user}", "gists_url": "https://api.github.com/users/geuben/gists{/gist_id}", "starred_url": "https://api.github.com/users/geuben/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geuben/subscriptions", "organizations_url": "https://api.github.com/users/geuben/orgs", "repos_url": "https://api.github.com/users/geuben/repos", "events_url": "https://api.github.com/users/geuben/events{/privacy}", "received_events_url": "https://api.github.com/users/geuben/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-03T09:07:12Z", "updated_at": "2018-10-04T00:18:50Z", "closed_at": "2018-10-04T00:18:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm trying to move some code from using parsley (https://github.com/pyga/parsley) to pyparsing.\r\n\r\nIt was going so well but I think I've run into a wall. \r\n\r\nThe code I am moving uses this expression from parsley:\r\n\r\n> `~~expr`: Positive lookahead. Fails if the next item in the input does not match expr. Consumes no input.\r\n\r\nWhich I was hoping to replace with `FollowedBy`, however `FollowedBy` always returns a null token list, I need the results from the `FollowedBy` returned so I can utilise them further downstream.\r\n\r\nAny ideas how I would go about this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/32", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/32/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/32/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/32", "id": 364119450, "node_id": "MDU6SXNzdWUzNjQxMTk0NTA=", "number": 32, "title": "Missing LICENSE file", "user": {"login": "termim", "id": 200767, "node_id": "MDQ6VXNlcjIwMDc2Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/200767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/termim", "html_url": "https://github.com/termim", "followers_url": "https://api.github.com/users/termim/followers", "following_url": "https://api.github.com/users/termim/following{/other_user}", "gists_url": "https://api.github.com/users/termim/gists{/gist_id}", "starred_url": "https://api.github.com/users/termim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/termim/subscriptions", "organizations_url": "https://api.github.com/users/termim/orgs", "repos_url": "https://api.github.com/users/termim/repos", "events_url": "https://api.github.com/users/termim/events{/privacy}", "received_events_url": "https://api.github.com/users/termim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-26T16:44:34Z", "updated_at": "2018-09-26T22:04:39Z", "closed_at": "2018-09-26T22:04:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Source archive on PYPI is missing LICENSE file", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/31", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/31/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/31/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/31", "id": 361273482, "node_id": "MDU6SXNzdWUzNjEyNzM0ODI=", "number": 31, "title": "License file missing from the latest source tarball at PyPI", "user": {"login": "ocefpaf", "id": 950575, "node_id": "MDQ6VXNlcjk1MDU3NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/950575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ocefpaf", "html_url": "https://github.com/ocefpaf", "followers_url": "https://api.github.com/users/ocefpaf/followers", "following_url": "https://api.github.com/users/ocefpaf/following{/other_user}", "gists_url": "https://api.github.com/users/ocefpaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/ocefpaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ocefpaf/subscriptions", "organizations_url": "https://api.github.com/users/ocefpaf/orgs", "repos_url": "https://api.github.com/users/ocefpaf/repos", "events_url": "https://api.github.com/users/ocefpaf/events{/privacy}", "received_events_url": "https://api.github.com/users/ocefpaf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-18T12:11:38Z", "updated_at": "2018-09-18T13:43:18Z", "closed_at": "2018-09-18T13:41:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I guess that the directory move in https://github.com/pyparsing/pyparsing/commit/27e183a78c8062ed7c2bbb91655a5e56cd697bba is the cause for that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/30", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/30/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/30/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/30", "id": 361188084, "node_id": "MDU6SXNzdWUzNjExODgwODQ=", "number": 30, "title": "I designed two new parser classes", "user": {"login": "Freakwill", "id": 30965609, "node_id": "MDQ6VXNlcjMwOTY1NjA5", "avatar_url": "https://avatars3.githubusercontent.com/u/30965609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Freakwill", "html_url": "https://github.com/Freakwill", "followers_url": "https://api.github.com/users/Freakwill/followers", "following_url": "https://api.github.com/users/Freakwill/following{/other_user}", "gists_url": "https://api.github.com/users/Freakwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/Freakwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Freakwill/subscriptions", "organizations_url": "https://api.github.com/users/Freakwill/orgs", "repos_url": "https://api.github.com/users/Freakwill/repos", "events_url": "https://api.github.com/users/Freakwill/events{/privacy}", "received_events_url": "https://api.github.com/users/Freakwill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2018-09-18T08:20:34Z", "updated_at": "2018-10-31T06:22:12Z", "closed_at": "2018-10-31T06:22:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was excited for the new version. I am a fan of pyparsing.\r\nI contribute a new parser class as following (would be renamed).\r\n\r\n```python\r\nclass Meanwhile(pp.ParseExpression):\r\n    \"\"\"Strings have to match all sub-expressions at the same time\r\n        Grammar:\r\n            Meanwhile([A, B, ...])\r\n       \r\n        Example:\r\n            A = Meanwhile([IDEN, ~('_'+ DIGIT)]) # IDEN / ('_'+ DIGIT)\r\n            to parse identifiers such as _a123 excluding _123\r\n            Equivalently,\r\n            A = Meanwhile()\r\n            A.append(IDEN)\r\n            A.exclude('_'+ DIGIT)  # <==> A / '_'+ DIGIT\r\n    \"\"\"\r\n\r\n    def __init__(self, exprs=[]):\r\n        super(Meanwhile, self).__init__(exprs)\r\n        self.mayReturnEmpty = all(e.mayReturnEmpty for e in self.exprs)\r\n        self.setWhitespaceChars(self.exprs[0].whiteChars)\r\n        self.skipWhitespace = self.exprs[0].skipWhitespace\r\n        self.callPreparse = True\r\n\r\n    def parseImpl(self, instring, loc, doActions=True):\r\n        postloc, result = self.exprs[0]._parse(instring, loc, doActions)\r\n        for e in self.exprs[1:]:\r\n            if not e.matches(instring, loc):\r\n                raise _Exception(instring, len(instring), e.errmsg, self)\r\n        return postloc, result\r\n\r\n    def append(self, other):\r\n        if isinstance(other, str):\r\n            other = pp.ParserElement._literalStringClass(other)\r\n        return self.append(other)\r\n\r\n    def exclude(self, other):\r\n        if isinstance(other, str):\r\n            other = pp.ParserElement._literalStringClass(other)\r\n        return self.append(~other)\r\n\r\n    def __truediv__(self, other):\r\n        return self.append(~other)\r\n\r\n    def checkRecursion(self, parseElementList):\r\n        subRecCheckList = parseElementList[:] + [self]\r\n        for e in self.exprs:\r\n            e.checkRecursion(subRecCheckList)\r\n            if not e.mayReturnEmpty:\r\n                break\r\n\r\n    def __str__(self):\r\n        if hasattr(self, \"name\"):\r\n            return self.name\r\n\r\n        if self.strRepr is None:\r\n            self.strRepr = \"%s{%s}\"%(str(self.exprs[0]), \" \".join(str(e) for e in self.exprs[1:]))\r\n\r\n        return self.strRepr\r\n\r\n```\r\n\r\nIn fact I define several parsers. LeadedBy works as FollowedBy, as its name.\r\n```python\r\nclass LeadedBy(_Enhance):\r\n    \"\"\"\r\n    Works as FollowedBy\r\n\r\n    Lookahead matching of the given parse expression.  C{LeadedBy}\r\n    does not advance the parsing position within the input string, it only\r\n    verifies that the specified parse expression matches at the current\r\n    position.  C{LeadedBy} always returns a null token list.\"\"\"\r\n    def __init__(self, expr, start=0, retreat=None):\r\n        '''\r\n        Arguments:\r\n            expr -- a parse expression\r\n        \r\n        Keyword Arguments:\r\n            start {number} -- where it starts to search expr (default: {0})\r\n            retreat {[type]} -- when it is given, start = loc - retreat (default: {None})\r\n        '''\r\n        super(LeadedBy, self).__init__(expr)\r\n        self.mayReturnEmpty = True\r\n        self.start = start\r\n        self.retreat = retreat\r\n\r\n    def parseImpl(self, instring, loc=0, doActions=True):\r\n        if self.retreat is None:\r\n            start = self.start\r\n        else:\r\n            start = loc - self.retreat\r\n        if (self.expr + stringEnd).searchString(instring[start:loc], maxMatches=1):\r\n            return loc, []\r\n        else:\r\n            raise _Exception(instring, loc, self.errmsg, self)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/29", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/29/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/29/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/29", "id": 360770562, "node_id": "MDU6SXNzdWUzNjA3NzA1NjI=", "number": 29, "title": "about the return value of infixNotation", "user": {"login": "Freakwill", "id": 30965609, "node_id": "MDQ6VXNlcjMwOTY1NjA5", "avatar_url": "https://avatars3.githubusercontent.com/u/30965609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Freakwill", "html_url": "https://github.com/Freakwill", "followers_url": "https://api.github.com/users/Freakwill/followers", "following_url": "https://api.github.com/users/Freakwill/following{/other_user}", "gists_url": "https://api.github.com/users/Freakwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/Freakwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Freakwill/subscriptions", "organizations_url": "https://api.github.com/users/Freakwill/orgs", "repos_url": "https://api.github.com/users/Freakwill/repos", "events_url": "https://api.github.com/users/Freakwill/events{/privacy}", "received_events_url": "https://api.github.com/users/Freakwill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-17T08:41:12Z", "updated_at": "2018-09-17T08:56:04Z", "closed_at": "2018-09-17T08:56:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "infixNotation always returns a list of list, as `[[['-', 2], '-', ['-', 11]]]`. I think the outer list is redundant, providing no information. Why not omit it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/28", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/28/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/28/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/28", "id": 360643598, "node_id": "MDU6SXNzdWUzNjA2NDM1OTg=", "number": 28, "title": "SkipTo() generates a ParseResults object in the result dictionary under some circumstances", "user": {"login": "seron", "id": 223638, "node_id": "MDQ6VXNlcjIyMzYzOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/223638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seron", "html_url": "https://github.com/seron", "followers_url": "https://api.github.com/users/seron/followers", "following_url": "https://api.github.com/users/seron/following{/other_user}", "gists_url": "https://api.github.com/users/seron/gists{/gist_id}", "starred_url": "https://api.github.com/users/seron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seron/subscriptions", "organizations_url": "https://api.github.com/users/seron/orgs", "repos_url": "https://api.github.com/users/seron/repos", "events_url": "https://api.github.com/users/seron/events{/privacy}", "received_events_url": "https://api.github.com/users/seron/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-16T14:17:26Z", "updated_at": "2018-09-30T17:19:16Z", "closed_at": "2018-09-30T17:19:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the first parse result below I expected the element in the results dictionary matching parser _prefix_ to be of type **str**, like for the first element in the ParseResults list, but the actual type is _ParseResults_.\r\n\r\nIf the string 'suffix' is omitted from SkipTo, results in both the list and dictionary match the expected **str** type.\r\n\r\nWhy is pyparsing generating a _ParseResults_ object in the first case?\r\n\r\npyparsing 2.2.0\r\n```\r\nfrom pyparsing import *\r\n\r\ndata = Literal(\"DATA\")\r\n\r\n# SkipTo with suffix\r\nprefix = SkipTo(data + 'suffix')(\"prefix\")\r\np = prefix + data\r\n\r\ntext = \"prefixDATAsuffix\"\r\n\r\np.runTests(text, parseAll=False)\r\nres1 = p.parseString(text)\r\nprint(\"res1[0]:\", type(res1[0]))\r\nprint('res1[\"prefix\"]:', type(res1[\"prefix\"]))\r\n\r\n# SkipTo without suffix\r\nprefix2 = SkipTo(data)(\"prefix\")\r\np2 = prefix2 + data\r\n\r\np2.runTests(text, parseAll=False)\r\nres2 = p2.parseString(text)\r\nprint(\"res2[0]:\", type(res2[0]))\r\nprint('res2[\"prefix\"]:', type(res2[\"prefix\"]))\r\n```\r\n\r\n```\r\nprefixDATAsuffix\r\n['prefix', 'DATA']\r\n- prefix: ['prefix']\r\n\r\nres1[0]: <class 'str'>\r\nres1[\"prefix\"]: <class 'pyparsing.ParseResults'>      <-----\r\n\r\nprefixDATAsuffix\r\n['prefix', 'DATA']\r\n- prefix: 'prefix'\r\n\r\nres2[0]: <class 'str'>\r\nres2[\"prefix\"]: <class 'str'>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/27", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/27/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/27/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/27", "id": 359298296, "node_id": "MDU6SXNzdWUzNTkyOTgyOTY=", "number": 27, "title": "recursion depth issues", "user": {"login": "tim-mitchell", "id": 9870675, "node_id": "MDQ6VXNlcjk4NzA2NzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/9870675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tim-mitchell", "html_url": "https://github.com/tim-mitchell", "followers_url": "https://api.github.com/users/tim-mitchell/followers", "following_url": "https://api.github.com/users/tim-mitchell/following{/other_user}", "gists_url": "https://api.github.com/users/tim-mitchell/gists{/gist_id}", "starred_url": "https://api.github.com/users/tim-mitchell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tim-mitchell/subscriptions", "organizations_url": "https://api.github.com/users/tim-mitchell/orgs", "repos_url": "https://api.github.com/users/tim-mitchell/repos", "events_url": "https://api.github.com/users/tim-mitchell/events{/privacy}", "received_events_url": "https://api.github.com/users/tim-mitchell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-12T03:07:34Z", "updated_at": "2018-09-12T05:05:17Z", "closed_at": "2018-09-12T04:26:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nA customer reported a traceback to us with a maximum recursion depth exceeded error originating from pyparsing.  \r\nThe customer had entered an SQL where clause not dissimilar to the one in the attached script (that reproduces the issue).  \r\nI am working around this by using sys.setrecursionlimit() which is unpleasant.\r\n```python\r\nwith high_recursion_limit():\r\n    tokens, start, end = where_clause.scanString(s).next()\r\n```\r\n\r\n\"Don't write stupid queries\" is a tempting answer - but it does not make the software more reliable.\r\n\r\n[pyparsing_recursion.txt](https://github.com/pyparsing/pyparsing/files/2373409/pyparsing_recursion.txt)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/26", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/26/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/26/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/26", "id": 358140675, "node_id": "MDU6SXNzdWUzNTgxNDA2NzU=", "number": 26, "title": " infixNotation() might be made better ", "user": {"login": "klahnakoski", "id": 2334429, "node_id": "MDQ6VXNlcjIzMzQ0Mjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2334429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klahnakoski", "html_url": "https://github.com/klahnakoski", "followers_url": "https://api.github.com/users/klahnakoski/followers", "following_url": "https://api.github.com/users/klahnakoski/following{/other_user}", "gists_url": "https://api.github.com/users/klahnakoski/gists{/gist_id}", "starred_url": "https://api.github.com/users/klahnakoski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klahnakoski/subscriptions", "organizations_url": "https://api.github.com/users/klahnakoski/orgs", "repos_url": "https://api.github.com/users/klahnakoski/repos", "events_url": "https://api.github.com/users/klahnakoski/events{/privacy}", "received_events_url": "https://api.github.com/users/klahnakoski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-07T16:53:50Z", "updated_at": "2018-09-19T21:57:34Z", "closed_at": "2018-09-19T21:57:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am going through the match attempts for my parser moz-sql-parser while parsing\r\n\r\n    select * from task where build.product is not null and build.product!='firefox'\r\n\r\nThe parser does a lot of trackback as it tries to match the WHERE clause; much more than it should. Please change infixNotation() to take advantage of the fact that clusters of infix binary operators always begin with an operand, alternate operator and operand, and end with an operand:\r\n\r\n    [build.product] is [not null] and [build.product] != ['firefox']\r\n\r\n(you may notice my grammar did not include not as a unary operator to infixNotation())\r\n\r\nBy matching this alternating pattern the matching process can go much faster. Precedence is handled with some post processing to organize this into a tree. Of course, the difficultly will be splitting up a single infixNotation() call, infected with unary and trinary operators, into a hierarchy of infixNotation() calls containing only binary operators.\r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/25", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/25/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/25/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/25", "id": 354519402, "node_id": "MDU6SXNzdWUzNTQ1MTk0MDI=", "number": 25, "title": "Rename the Restructured files", "user": {"login": "viraptor", "id": 188063, "node_id": "MDQ6VXNlcjE4ODA2Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/188063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viraptor", "html_url": "https://github.com/viraptor", "followers_url": "https://api.github.com/users/viraptor/followers", "following_url": "https://api.github.com/users/viraptor/following{/other_user}", "gists_url": "https://api.github.com/users/viraptor/gists{/gist_id}", "starred_url": "https://api.github.com/users/viraptor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viraptor/subscriptions", "organizations_url": "https://api.github.com/users/viraptor/orgs", "repos_url": "https://api.github.com/users/viraptor/repos", "events_url": "https://api.github.com/users/viraptor/events{/privacy}", "received_events_url": "https://api.github.com/users/viraptor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-27T23:54:42Z", "updated_at": "2018-08-28T01:06:08Z", "closed_at": "2018-08-28T01:06:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Could you rename `https://github.com/pyparsing/pyparsing/blob/master/HowToUsePyparsing.txt` to `.rst`? That way it will render on github and can be read a bit easier.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/22", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/22/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/22/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/22", "id": 351532891, "node_id": "MDU6SXNzdWUzNTE1MzI4OTE=", "number": 22, "title": "Returning unchanged tokens from a parseAction generates doubly nested dictionaries", "user": {"login": "seron", "id": 223638, "node_id": "MDQ6VXNlcjIyMzYzOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/223638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seron", "html_url": "https://github.com/seron", "followers_url": "https://api.github.com/users/seron/followers", "following_url": "https://api.github.com/users/seron/following{/other_user}", "gists_url": "https://api.github.com/users/seron/gists{/gist_id}", "starred_url": "https://api.github.com/users/seron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seron/subscriptions", "organizations_url": "https://api.github.com/users/seron/orgs", "repos_url": "https://api.github.com/users/seron/repos", "events_url": "https://api.github.com/users/seron/events{/privacy}", "received_events_url": "https://api.github.com/users/seron/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ptmcg", "id": 383875, "node_id": "MDQ6VXNlcjM4Mzg3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptmcg", "html_url": "https://github.com/ptmcg", "followers_url": "https://api.github.com/users/ptmcg/followers", "following_url": "https://api.github.com/users/ptmcg/following{/other_user}", "gists_url": "https://api.github.com/users/ptmcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptmcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptmcg/subscriptions", "organizations_url": "https://api.github.com/users/ptmcg/orgs", "repos_url": "https://api.github.com/users/ptmcg/repos", "events_url": "https://api.github.com/users/ptmcg/events{/privacy}", "received_events_url": "https://api.github.com/users/ptmcg/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-08-17T09:59:11Z", "updated_at": "2018-10-31T06:22:50Z", "closed_at": "2018-10-31T06:22:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Attaching a parse action, which only returns the tokens, to a parser, which generates a single group in the _ParseResults_ list, produces a doubly nested dictionary. If the _ParseResults_ list contains two groups there is no double nesting. See code below, and _dump()_ output further down (_Rider_ is doubly nested).\r\n\r\nIs this expected behaviour, and if so, why is it happening?\r\n\r\n```\r\nfrom __future__ import print_function\r\n    \r\nfrom pyparsing import *\r\n\r\nname = Word(alphas)('name')\r\nscore = Word(nums + '.')('score')\r\nnameScore = Group(name + score)\r\nline1 = nameScore('Rider')\r\nline2 = nameScore('Rider') + nameScore('Bull')\r\n\r\nresult1 = line1.parseString('Mauney 46.5')\r\nresult2 = line2.parseString('Mauney 46.5 Asteroid 46')\r\n\r\nprint(\"### before parse action is added ###\")\r\nprint(\"result1.dump():\\n\" + result1.dump() + \"\\n\")\r\nprint(\"result2.dump():\\n\" + result2.dump() + \"\\n\")\r\n\r\nline1.setParseAction(lambda t: t)\r\nline2.setParseAction(lambda t: t)\r\n\r\nresult1 = line1.parseString('Mauney 46.5')\r\nresult2 = line2.parseString('Mauney 46.5 Asteroid 46')\r\n\r\nprint(\"### after parse action was added ###\")\r\nprint(\"result1.dump():\\n\" + result1.dump() + \"\\n\")\r\nprint(\"result2.dump():\\n\" + result2.dump() + \"\\n\")\r\n```\r\n\r\n\r\n\r\n```\r\n### before parse action is added ###\r\nresult1.dump():\r\n[['Mauney', '46.5']]\r\n- Rider: ['Mauney', '46.5']\r\n  - name: 'Mauney'\r\n  - score: '46.5'\r\n\r\nresult2.dump():\r\n[['Mauney', '46.5'], ['Asteroid', '46']]\r\n- Bull: ['Asteroid', '46']\r\n  - name: 'Asteroid'\r\n  - score: '46'\r\n- Rider: ['Mauney', '46.5']\r\n  - name: 'Mauney'\r\n  - score: '46.5'\r\n\r\n### after parse action was added ###\r\nresult1.dump():\r\n[['Mauney', '46.5']]\r\n- Rider: [['Mauney', '46.5']]\r\n  - Rider: ['Mauney', '46.5']\r\n    - name: 'Mauney'\r\n    - score: '46.5'\r\n\r\nresult2.dump():\r\n[['Mauney', '46.5'], ['Asteroid', '46']]\r\n- Bull: ['Asteroid', '46']\r\n  - name: 'Asteroid'\r\n  - score: '46'\r\n- Rider: ['Mauney', '46.5']\r\n  - name: 'Mauney'\r\n  - score: '46.5'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyparsing/pyparsing/issues/13", "repository_url": "https://api.github.com/repos/pyparsing/pyparsing", "labels_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/13/comments", "events_url": "https://api.github.com/repos/pyparsing/pyparsing/issues/13/events", "html_url": "https://github.com/pyparsing/pyparsing/issues/13", "id": 342623358, "node_id": "MDU6SXNzdWUzNDI2MjMzNTg=", "number": 13, "title": "API documentation not available", "user": {"login": "grebinger", "id": 30649554, "node_id": "MDQ6VXNlcjMwNjQ5NTU0", "avatar_url": "https://avatars0.githubusercontent.com/u/30649554?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grebinger", "html_url": "https://github.com/grebinger", "followers_url": "https://api.github.com/users/grebinger/followers", "following_url": "https://api.github.com/users/grebinger/following{/other_user}", "gists_url": "https://api.github.com/users/grebinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/grebinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grebinger/subscriptions", "organizations_url": "https://api.github.com/users/grebinger/orgs", "repos_url": "https://api.github.com/users/grebinger/repos", "events_url": "https://api.github.com/users/grebinger/events{/privacy}", "received_events_url": "https://api.github.com/users/grebinger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-19T08:12:02Z", "updated_at": "2019-07-29T10:17:23Z", "closed_at": "2018-08-28T01:07:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "The API documentation on the pyparsing homepage seems to be empty. Is there any other way to access it?", "performed_via_github_app": null, "score": 1.0}]}