{"total_count": 68, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/229", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/229/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/229/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/229", "id": 664076395, "node_id": "MDU6SXNzdWU2NjQwNzYzOTU=", "number": 229, "title": "Cache's get method called twice on cache miss", "user": {"login": "akursar", "id": 1795603, "node_id": "MDQ6VXNlcjE3OTU2MDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1795603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akursar", "html_url": "https://github.com/akursar", "followers_url": "https://api.github.com/users/akursar/followers", "following_url": "https://api.github.com/users/akursar/following{/other_user}", "gists_url": "https://api.github.com/users/akursar/gists{/gist_id}", "starred_url": "https://api.github.com/users/akursar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akursar/subscriptions", "organizations_url": "https://api.github.com/users/akursar/orgs", "repos_url": "https://api.github.com/users/akursar/repos", "events_url": "https://api.github.com/users/akursar/events{/privacy}", "received_events_url": "https://api.github.com/users/akursar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-22T22:00:47Z", "updated_at": "2020-07-22T22:01:32Z", "closed_at": "2020-07-22T22:01:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "We observe two cache.get() calls whenever we miss. The first attempt is made in CacheController.cached_request(). We see the \"No cache entry available\" in logs. However, we immediately see another cache.get() call after this. This seems to be because CacheController.conditional_headers() makes another call to self.cache.get().\r\nThis doesn't appear to be ideal, but I'm not sure what change to propose. I see some other usage of self.cache.get in the Controller as well. Since we don't rely on etag/last-modified headers, we may just use a custom Controller that has a condition_headers that simply returns {}, but raising here to see if there's any shared appreciation for trying to limit the number of get calls to make to the cache, or ideas for how otherwise to improve that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/218", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/218/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/218/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/218/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/218", "id": 575029624, "node_id": "MDU6SXNzdWU1NzUwMjk2MjQ=", "number": 218, "title": "ssl.SSLError: [SSL: DECRYPTION_FAILED_OR_BAD_RECORD_MAC] decryption failed or bad record mac (_ssl.c:2488)", "user": {"login": "peterkorodi", "id": 6109243, "node_id": "MDQ6VXNlcjYxMDkyNDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6109243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterkorodi", "html_url": "https://github.com/peterkorodi", "followers_url": "https://api.github.com/users/peterkorodi/followers", "following_url": "https://api.github.com/users/peterkorodi/following{/other_user}", "gists_url": "https://api.github.com/users/peterkorodi/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterkorodi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterkorodi/subscriptions", "organizations_url": "https://api.github.com/users/peterkorodi/orgs", "repos_url": "https://api.github.com/users/peterkorodi/repos", "events_url": "https://api.github.com/users/peterkorodi/events{/privacy}", "received_events_url": "https://api.github.com/users/peterkorodi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-03T23:38:04Z", "updated_at": "2020-03-05T15:58:01Z", "closed_at": "2020-03-05T15:58:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI'm using cachecontrol in a project and I love it!\r\nI use more processes in my code and found an issue in cachecontrol. If I run this code I got an SSLError (decryption failed or bad record mac).\r\n\r\n\r\n```python\r\nimport logging\r\nimport multiprocessing\r\nfrom time import sleep\r\nimport requests\r\nfrom cachecontrol import CacheControl\r\n\r\nlogging.basicConfig(level=logging.WARN)\r\n\r\n\r\ndef get(cached_sess, repeat=10, delay=0.1):\r\n    for i in range(repeat):\r\n        response = cached_sess.get('https://google.com')\r\n        response.raise_for_status()\r\n        sleep(delay)\r\n\r\n\r\nsess = requests.Session()\r\ncached_sess = CacheControl(sess)\r\nget(cached_sess, repeat=1)  # if I comment out this line the error won't appear\r\np1 = multiprocessing.Process(target=get, args=(cached_sess,))\r\np2 = multiprocessing.Process(target=get, args=(cached_sess,))\r\np1.start()\r\np2.start()\r\np1.join()\r\np2.join()\r\n```\r\nI got an exception from ssl.py: `ssl.SSLError: [SSL: DECRYPTION_FAILED_OR_BAD_RECORD_MAC] decryption failed or bad record mac (_ssl.c:2488)`\r\n\r\nInteresting that if I comment out the `get(cached_sess, repeat=1)` line the error won't appear.\r\nA workaround can be if I create a separate session and cachecontrol for every processes and pass them as argument and use that instead of the common one. (in this case the error won't appear)\r\n\r\nhttps://stackoverflow.com/questions/3724900/python-ssl-problem-with-multiprocessing\r\nThis says it's an ssl problem because of reusing the same connection for both processes.\r\n(I used a lot openssl in c/cpp projects but have never experienced this kind of error)\r\n\r\nWould be nice if cachecontrol can handle this situation somehow :)\r\nWhat do you think?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/194", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/194/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/194/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/194/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/194", "id": 349182738, "node_id": "MDU6SXNzdWUzNDkxODI3Mzg=", "number": 194, "title": "Should DictCache work in a uWSGI flask?", "user": {"login": "keiranmraine", "id": 3740323, "node_id": "MDQ6VXNlcjM3NDAzMjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/3740323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keiranmraine", "html_url": "https://github.com/keiranmraine", "followers_url": "https://api.github.com/users/keiranmraine/followers", "following_url": "https://api.github.com/users/keiranmraine/following{/other_user}", "gists_url": "https://api.github.com/users/keiranmraine/gists{/gist_id}", "starred_url": "https://api.github.com/users/keiranmraine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keiranmraine/subscriptions", "organizations_url": "https://api.github.com/users/keiranmraine/orgs", "repos_url": "https://api.github.com/users/keiranmraine/repos", "events_url": "https://api.github.com/users/keiranmraine/events{/privacy}", "received_events_url": "https://api.github.com/users/keiranmraine/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-09T15:38:33Z", "updated_at": "2018-08-10T14:01:23Z", "closed_at": "2018-08-10T08:10:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using CacheControl to cache the Google certificate in my flask app but I can only get this to work if I am using `FileCache` (verified through the logging messages of cachecontrol).\r\n\r\nAm I missing something:\r\n\r\n```\r\ndef verify_user(token):\r\n    try:\r\n        session = requests.session()\r\n        cached_session = cachecontrol.CacheControl(session)\r\n        this_request = google.auth.transport.requests.Request(session=cached_session)\r\n```\r\n\r\nFlask started under uwsgi as:\r\n\r\n```\r\nuwsgi --master --http-socket 0.0.0.0:8000 --processes 2 -w cgpaasAuth:app\r\n```\r\n\r\nI'd anticipated perhaps having to do a few requests to prime the cache in each process but it didn't seem to take.\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/181", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/181/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/181/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/181/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/181", "id": 304834507, "node_id": "MDU6SXNzdWUzMDQ4MzQ1MDc=", "number": 181, "title": "msgpack-python to msgpack", "user": {"login": "dhruvinsh", "id": 33428164, "node_id": "MDQ6VXNlcjMzNDI4MTY0", "avatar_url": "https://avatars1.githubusercontent.com/u/33428164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhruvinsh", "html_url": "https://github.com/dhruvinsh", "followers_url": "https://api.github.com/users/dhruvinsh/followers", "following_url": "https://api.github.com/users/dhruvinsh/following{/other_user}", "gists_url": "https://api.github.com/users/dhruvinsh/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhruvinsh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhruvinsh/subscriptions", "organizations_url": "https://api.github.com/users/dhruvinsh/orgs", "repos_url": "https://api.github.com/users/dhruvinsh/repos", "events_url": "https://api.github.com/users/dhruvinsh/events{/privacy}", "received_events_url": "https://api.github.com/users/dhruvinsh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-03-13T16:16:46Z", "updated_at": "2018-06-05T14:33:52Z", "closed_at": "2018-06-05T14:33:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Awesome tool, just a heads up that msgpack-python is deprecated now and it has been renamed to msgpack only.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/179", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/179/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/179/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/179/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/179", "id": 301996195, "node_id": "MDU6SXNzdWUzMDE5OTYxOTU=", "number": 179, "title": "FileCache: No such file or directory <file>", "user": {"login": "John-Gee", "id": 1646210, "node_id": "MDQ6VXNlcjE2NDYyMTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1646210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/John-Gee", "html_url": "https://github.com/John-Gee", "followers_url": "https://api.github.com/users/John-Gee/followers", "following_url": "https://api.github.com/users/John-Gee/following{/other_user}", "gists_url": "https://api.github.com/users/John-Gee/gists{/gist_id}", "starred_url": "https://api.github.com/users/John-Gee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/John-Gee/subscriptions", "organizations_url": "https://api.github.com/users/John-Gee/orgs", "repos_url": "https://api.github.com/users/John-Gee/repos", "events_url": "https://api.github.com/users/John-Gee/events{/privacy}", "received_events_url": "https://api.github.com/users/John-Gee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-03-03T12:55:50Z", "updated_at": "2018-04-04T14:36:09Z", "closed_at": "2018-04-04T14:36:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI've just started using cachecontrol with FileCache so I apologize if I'm mistaken somewhere.\r\n\r\nWhen using it with the standard, in memory, cache, it works fine, but when switching to FileCache I get a few errors such as:  [Errno 2] No such file or directory: '.webcache/a/9/7/a/2/a97a2bcda25b30914b0e070e50724edfb85cc70f45ece690e0fbfb98'\r\n\r\nThe error does not happen that often, maybe a few times out of thousands of calls, and it seems on the same files so there may be a pattern there.\r\n\r\nAfter my script crashes I can verify that the file is there and not empty.\r\n\r\nMy script has 8 threads calling get_page(url) in parallel, potentially asking for the same url at the same time.\r\n\r\nThe code I use for requests/cachecontrol:\r\n\r\n    from cachecontrol import CacheControl\r\n    from cachecontrol.caches.file_cache import FileCache\r\n    import requests\r\n\r\n    session = requests.Session()\r\n    session.headers = {'User-Agent': 'Mozilla/5.0'}\r\n    session.cookies = requests.cookies.RequestsCookieJar()\r\n    session.allow_redirects = True\r\n    cached_session = CacheControl(session,\r\n                                  cache=FileCache('.webcache', forever=True))\r\n    \r\n    def get_page(url):\r\n        try:\r\n            return cached_session.get(url)\r\n        except requests.exceptions.TooManyRedirects:\r\n            return None\r\n\r\nIs it related to the TooManyRedirects, in that requests would crash, and maybe cachecontrol would not have the file ready even though it thought it would?\r\n\r\nSwitching to one thread seems to alleviate the problem, though I have not yet ran my script like this fully to really know.\r\n\r\nPython: 3.6.4\r\nrequests: 2.18.4\r\ncachecontrol: 0.12.4\r\nlockfile: 0.12.2\r\n\r\nrunning 'pip install cachecontrol[filecache]' added msg-pack-python-0.5.5 but the behavior did not change.\r\n\r\nI am happy to provide any information needed.\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/174", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/174/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/174/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/174/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/174", "id": 282426153, "node_id": "MDU6SXNzdWUyODI0MjYxNTM=", "number": 174, "title": "DictCache may not be thread-safe", "user": {"login": "NicolasLM", "id": 7612656, "node_id": "MDQ6VXNlcjc2MTI2NTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/7612656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NicolasLM", "html_url": "https://github.com/NicolasLM", "followers_url": "https://api.github.com/users/NicolasLM/followers", "following_url": "https://api.github.com/users/NicolasLM/following{/other_user}", "gists_url": "https://api.github.com/users/NicolasLM/gists{/gist_id}", "starred_url": "https://api.github.com/users/NicolasLM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NicolasLM/subscriptions", "organizations_url": "https://api.github.com/users/NicolasLM/orgs", "repos_url": "https://api.github.com/users/NicolasLM/repos", "events_url": "https://api.github.com/users/NicolasLM/events{/privacy}", "received_events_url": "https://api.github.com/users/NicolasLM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-15T13:23:52Z", "updated_at": "2018-01-27T00:21:29Z", "closed_at": "2018-01-27T00:21:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Locks must be held for reading and writing, if not a reader may read garbage caused by a writer modifying the structure.\r\n\r\nThe GIL and atomic operations of CPython are implementation details that should not be relied upon. In my opinion the lock should be held for read operations as well.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/165", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/165/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/165/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/165/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/165", "id": 243213879, "node_id": "MDU6SXNzdWUyNDMyMTM4Nzk=", "number": 165, "title": "Detect if response is from cache", "user": {"login": "sansbacon", "id": 2755657, "node_id": "MDQ6VXNlcjI3NTU2NTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2755657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sansbacon", "html_url": "https://github.com/sansbacon", "followers_url": "https://api.github.com/users/sansbacon/followers", "following_url": "https://api.github.com/users/sansbacon/following{/other_user}", "gists_url": "https://api.github.com/users/sansbacon/gists{/gist_id}", "starred_url": "https://api.github.com/users/sansbacon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sansbacon/subscriptions", "organizations_url": "https://api.github.com/users/sansbacon/orgs", "repos_url": "https://api.github.com/users/sansbacon/repos", "events_url": "https://api.github.com/users/sansbacon/events{/privacy}", "received_events_url": "https://api.github.com/users/sansbacon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-16T02:57:43Z", "updated_at": "2018-01-27T06:28:50Z", "closed_at": "2018-01-27T06:28:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a method to detect if the response is from the cache? I read the documentation but didn't see any mention of this topic.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/160", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/160/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/160/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/160/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/160", "id": 240767043, "node_id": "MDU6SXNzdWUyNDA3NjcwNDM=", "number": 160, "title": "Make msgpack optional?", "user": {"login": "sybrenstuvel", "id": 1092128, "node_id": "MDQ6VXNlcjEwOTIxMjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1092128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sybrenstuvel", "html_url": "https://github.com/sybrenstuvel", "followers_url": "https://api.github.com/users/sybrenstuvel/followers", "following_url": "https://api.github.com/users/sybrenstuvel/following{/other_user}", "gists_url": "https://api.github.com/users/sybrenstuvel/gists{/gist_id}", "starred_url": "https://api.github.com/users/sybrenstuvel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sybrenstuvel/subscriptions", "organizations_url": "https://api.github.com/users/sybrenstuvel/orgs", "repos_url": "https://api.github.com/users/sybrenstuvel/repos", "events_url": "https://api.github.com/users/sybrenstuvel/events{/privacy}", "received_events_url": "https://api.github.com/users/sybrenstuvel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-07-05T20:29:41Z", "updated_at": "2017-08-07T00:47:01Z", "closed_at": "2017-08-07T00:47:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We use CacheControl in the [Blender Cloud add-on](https://cloud.blender.org/services#blender-addon) for [Blender](https://www.blender.org/). Due to the wide range of platforms Blender can run on, binary Python packages are very impractical to use. So, in order to bundle CacheControl with a Blender add-on, we need to restrict ourselves to pure-Python packages.\r\n\r\nWould it be an option to make msgpack an optional feature? If not, we're bound to limit ourselves to older versions of CacheControl.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/158", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/158/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/158/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/158/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/158", "id": 234534207, "node_id": "MDU6SXNzdWUyMzQ1MzQyMDc=", "number": 158, "title": "timezone issue with default heuristics", "user": {"login": "jpenney", "id": 48328, "node_id": "MDQ6VXNlcjQ4MzI4", "avatar_url": "https://avatars0.githubusercontent.com/u/48328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpenney", "html_url": "https://github.com/jpenney", "followers_url": "https://api.github.com/users/jpenney/followers", "following_url": "https://api.github.com/users/jpenney/following{/other_user}", "gists_url": "https://api.github.com/users/jpenney/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpenney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpenney/subscriptions", "organizations_url": "https://api.github.com/users/jpenney/orgs", "repos_url": "https://api.github.com/users/jpenney/repos", "events_url": "https://api.github.com/users/jpenney/events{/privacy}", "received_events_url": "https://api.github.com/users/jpenney/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-06-08T13:50:37Z", "updated_at": "2017-06-08T15:18:44Z", "closed_at": "2017-06-08T15:18:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "`calendar.timegm()` and `time.gmtime()` are used throughout, but `expire_after` defaults to using `datetime.now()` (local time zone).\r\n\r\nSo, depending on your timezone, `ExpiresAfter(hours=1)` is unlikely to cache for an hour (and where I am it won't ever cache anything).\r\n\r\n`expire_after` should default to using `datetime.utcnow()`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/155", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/155/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/155/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/155/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/155", "id": 229677935, "node_id": "MDU6SXNzdWUyMjk2Nzc5MzU=", "number": 155, "title": "Error '[Errno 2] No such file or directory' on any requests delete or put call", "user": {"login": "vdaskalov", "id": 2022449, "node_id": "MDQ6VXNlcjIwMjI0NDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/2022449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vdaskalov", "html_url": "https://github.com/vdaskalov", "followers_url": "https://api.github.com/users/vdaskalov/followers", "following_url": "https://api.github.com/users/vdaskalov/following{/other_user}", "gists_url": "https://api.github.com/users/vdaskalov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vdaskalov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vdaskalov/subscriptions", "organizations_url": "https://api.github.com/users/vdaskalov/orgs", "repos_url": "https://api.github.com/users/vdaskalov/repos", "events_url": "https://api.github.com/users/vdaskalov/events{/privacy}", "received_events_url": "https://api.github.com/users/vdaskalov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-18T13:50:44Z", "updated_at": "2017-05-25T13:53:25Z", "closed_at": "2017-05-25T13:53:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This problem occurs only on Python 2.7.X. On Python 3.x it is not reproducible.\r\n\r\nSo I set up a File cache like so:\r\n\r\n```\r\nfrom cachecontrol import CacheControl\r\nfrom cachecontrol.caches.file_cache import FileCache\r\n\r\ncached_session = CacheControl(session, cache=FileCache('/mydir'))\r\n```\r\n\r\nAfterwards if I do any delete or put request(note it's not even suppose to be through cached_session object it could be through a new requests session object) I get this:\r\n\r\n[Errno 2] No such file or directory: '/mydir/2/1/1/b/c/211bcb5c56dcea5aaf39c4860d6ee7aeea1de598e3ef56cd0e23bd6b'\r\n\r\nThis problem does not occur if I initiate the FileCache with forever=True option.\r\nThis is a blocker to me as it prevents the proper usage of requests module.\r\n\r\nI think the problem is in /cachecontrol/caches/file_cache.py file and around the lines:\r\n\r\n```\r\ntry:\r\n    FileNotFoundError\r\nexcept NameError:\r\n    # py2.X\r\n    FileNotFoundError = IOError\r\n```\r\n\r\nthey should rather be:\r\n\r\n```\r\ntry:\r\n    FileNotFoundError\r\nexcept NameError:\r\n    # py2.X\r\n    FileNotFoundError = OSError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/154", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/154/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/154/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/154", "id": 221945434, "node_id": "MDU6SXNzdWUyMjE5NDU0MzQ=", "number": 154, "title": "Add typeshed for python3", "user": {"login": "AleksandrSl", "id": 15820496, "node_id": "MDQ6VXNlcjE1ODIwNDk2", "avatar_url": "https://avatars0.githubusercontent.com/u/15820496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AleksandrSl", "html_url": "https://github.com/AleksandrSl", "followers_url": "https://api.github.com/users/AleksandrSl/followers", "following_url": "https://api.github.com/users/AleksandrSl/following{/other_user}", "gists_url": "https://api.github.com/users/AleksandrSl/gists{/gist_id}", "starred_url": "https://api.github.com/users/AleksandrSl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AleksandrSl/subscriptions", "organizations_url": "https://api.github.com/users/AleksandrSl/orgs", "repos_url": "https://api.github.com/users/AleksandrSl/repos", "events_url": "https://api.github.com/users/AleksandrSl/events{/privacy}", "received_events_url": "https://api.github.com/users/AleksandrSl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-15T12:22:57Z", "updated_at": "2017-08-07T00:49:10Z", "closed_at": "2017-08-07T00:49:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Do You consider adding python3 typeshed for your library?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/149", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/149/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/149/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/149/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/149", "id": 219966407, "node_id": "MDU6SXNzdWUyMTk5NjY0MDc=", "number": 149, "title": "'Redis' object has no attribute 'disconnect'", "user": {"login": "kirberich", "id": 941715, "node_id": "MDQ6VXNlcjk0MTcxNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/941715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirberich", "html_url": "https://github.com/kirberich", "followers_url": "https://api.github.com/users/kirberich/followers", "following_url": "https://api.github.com/users/kirberich/following{/other_user}", "gists_url": "https://api.github.com/users/kirberich/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirberich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirberich/subscriptions", "organizations_url": "https://api.github.com/users/kirberich/orgs", "repos_url": "https://api.github.com/users/kirberich/repos", "events_url": "https://api.github.com/users/kirberich/events{/privacy}", "received_events_url": "https://api.github.com/users/kirberich/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-06T17:04:27Z", "updated_at": "2018-01-27T06:26:29Z", "closed_at": "2018-01-27T06:26:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\r\n\r\nI just started using CacheControl with redis in a project, and while the caching itself works great, I'm running into problems when CacheControl tries to disconnect from redis, where it's calling a `disconnect` method on the redis object that doesn't exist.\r\n\r\nI haven't been able to dig much deeper into this yet, some pointers would be much appreciated! I'll try to find out more about this tomorrow.\r\n\r\n```python\r\n.virtualenv/lib/python3.6/site-packages/requests/sessions.py:369: in __exit__\r\n    self.close()\r\n.virtualenv/lib/python3.6/site-packages/requests/sessions.py:690: in close\r\n    v.close()\r\n.virtualenv/lib/python3.6/site-packages/cachecontrol/adapter.py:129: in close\r\n    self.cache.close()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <cachecontrol.caches.redis_cache.RedisCache object at 0x10f6f60f0>\r\n\r\n    def close(self):\r\n>       self.conn.disconnect()\r\nE       AttributeError: 'Redis' object has no attribute 'disconnect'\r\n\r\n.virtualenv/lib/python3.6/site-packages/cachecontrol/caches/redis_cache.py:41: AttributeError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/148", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/148/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/148/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/148", "id": 216535369, "node_id": "MDU6SXNzdWUyMTY1MzUzNjk=", "number": 148, "title": "Cache Deserialization warning question.", "user": {"login": "mhoye", "id": 1714458, "node_id": "MDQ6VXNlcjE3MTQ0NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1714458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mhoye", "html_url": "https://github.com/mhoye", "followers_url": "https://api.github.com/users/mhoye/followers", "following_url": "https://api.github.com/users/mhoye/following{/other_user}", "gists_url": "https://api.github.com/users/mhoye/gists{/gist_id}", "starred_url": "https://api.github.com/users/mhoye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mhoye/subscriptions", "organizations_url": "https://api.github.com/users/mhoye/orgs", "repos_url": "https://api.github.com/users/mhoye/repos", "events_url": "https://api.github.com/users/mhoye/events{/privacy}", "received_events_url": "https://api.github.com/users/mhoye/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-03-23T18:52:15Z", "updated_at": "2020-01-06T03:14:12Z", "closed_at": "2017-08-07T00:50:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Apologies if this is not the right forum; this is not a bug, but I am trying to understand the nature and severity of a warning message.\r\n\r\nUsing CacheControl with the file backend, I get this error:\r\n\r\nWARNING:cachecontrol.controller:Cache entry deserialization failed, entry ignored\r\n\r\nOn some, but not all, of my requests, all of which are various rss/atom feeds. \r\n\r\nIt's not clear to me from reading the code or documentation what this warning means, or what I can or should do to mitigate it. What does this mean, and what should I do?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/134", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/134/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/134/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/134", "id": 194796702, "node_id": "MDU6SXNzdWUxOTQ3OTY3MDI=", "number": 134, "title": "Recover from a corrupted cache", "user": {"login": "xavfernandez", "id": 1089744, "node_id": "MDQ6VXNlcjEwODk3NDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1089744?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xavfernandez", "html_url": "https://github.com/xavfernandez", "followers_url": "https://api.github.com/users/xavfernandez/followers", "following_url": "https://api.github.com/users/xavfernandez/following{/other_user}", "gists_url": "https://api.github.com/users/xavfernandez/gists{/gist_id}", "starred_url": "https://api.github.com/users/xavfernandez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xavfernandez/subscriptions", "organizations_url": "https://api.github.com/users/xavfernandez/orgs", "repos_url": "https://api.github.com/users/xavfernandez/repos", "events_url": "https://api.github.com/users/xavfernandez/events{/privacy}", "received_events_url": "https://api.github.com/users/xavfernandez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-12-10T21:59:41Z", "updated_at": "2017-01-07T02:06:18Z", "closed_at": "2017-01-07T02:06:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Cf https://github.com/pypa/pip/issues/4165\r\n\r\nWith this traceback:\r\n\r\n\r\n```\r\nCollecting pip\r\nException:\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg/pip/basecommand.py\", line 215, in main\r\n    status = self.run(options, args)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg/pip/commands/install.py\", line 335, in run\r\n    wb.build(autobuilding=True)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg/pip/wheel.py\", line 749, in build\r\n    self.requirement_set.prepare_files(self.finder)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg/pip/req/req_set.py\", line 380, in prepare_files\r\n    ignore_dependencies=self.ignore_dependencies))\r\n  File \"/usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg/pip/req/req_set.py\", line 554, in _prepare_file\r\n    require_hashes\r\n  File \"/usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg/pip/req/req_install.py\", line 278, in populate_link\r\n    self.link = finder.find_requirement(self, upgrade)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg/pip/index.py\", line 465, in find_requirement\r\n    all_candidates = self.find_all_candidates(req.name)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg/pip/index.py\", line 423, in find_all_candidates\r\n    for page in self._get_pages(url_locations, project_name):\r\n  File \"/usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg/pip/index.py\", line 568, in _get_pages\r\n    page = self._get_page(location)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg/pip/index.py\", line 683, in _get_page\r\n    return HTMLPage.get_page(link, session=self.session)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg/pip/index.py\", line 792, in get_page\r\n    \"Cache-Control\": \"max-age=600\",\r\n  File \"/usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg/pip/_vendor/requests/sessions.py\", line 488, in get\r\n    return self.request('GET', url, **kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg/pip/download.py\", line 386, in request\r\n    return super(PipSession, self).request(method, url, *args, **kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg/pip/_vendor/requests/sessions.py\", line 475, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg/pip/_vendor/requests/sessions.py\", line 596, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg/pip/_vendor/cachecontrol/adapter.py\", line 37, in send\r\n    cached_response = self.controller.cached_request(request)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg/pip/_vendor/cachecontrol/controller.py\", line 111, in cached_request\r\n    resp = self.serializer.loads(request, cache_data)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg/pip/_vendor/cachecontrol/serialize.py\", line 114, in loads\r\n    return getattr(self, \"_loads_v{0}\".format(ver))(request, data)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg/pip/_vendor/cachecontrol/serialize.py\", line 176, in _loads_v2\r\n    cached = json.loads(zlib.decompress(data).decode(\"utf8\"))\r\nerror: Error -5 while decompressing data: incomplete or truncated stream\r\n```\r\n\r\nApparently the cached data was only partial causing the whole request to crash.\r\n\r\nIt would be nice if cachecontrol could catch the error and actually perform the requests as if no cache was available (and remove the corrupted data).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/130", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/130/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/130/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/130", "id": 183276263, "node_id": "MDU6SXNzdWUxODMyNzYyNjM=", "number": 130, "title": "Cachecontrol prints out a notice about the optional requirements lockfile, even if we don't need it.", "user": {"login": "hartym", "id": 30586, "node_id": "MDQ6VXNlcjMwNTg2", "avatar_url": "https://avatars1.githubusercontent.com/u/30586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hartym", "html_url": "https://github.com/hartym", "followers_url": "https://api.github.com/users/hartym/followers", "following_url": "https://api.github.com/users/hartym/following{/other_user}", "gists_url": "https://api.github.com/users/hartym/gists{/gist_id}", "starred_url": "https://api.github.com/users/hartym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hartym/subscriptions", "organizations_url": "https://api.github.com/users/hartym/orgs", "repos_url": "https://api.github.com/users/hartym/repos", "events_url": "https://api.github.com/users/hartym/events{/privacy}", "received_events_url": "https://api.github.com/users/hartym/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-10-16T16:34:59Z", "updated_at": "2017-01-11T16:45:27Z", "closed_at": "2017-01-11T16:45:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Importing RedisCache will print out the following notice even if we don't need it, because it is present in the package's **init** file \n\n```\nNOTE: In order to use the FileCache you must have\n    lockfile installed. You can install it via pip:\n      pip install lockfile\n```\n\nProbably, this warning should go in the caches/file_cache.py file, and even better, it should probably be switched to something that is either fatal or harmless for stdout (using logging?).\n\nSee https://github.com/ionrock/cachecontrol/blob/master/cachecontrol/caches/__init__.py\n\nLet me know if I can propose a patch for this.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/126", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/126/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/126/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/126", "id": 166223461, "node_id": "MDU6SXNzdWUxNjYyMjM0NjE=", "number": 126, "title": "CacheController.cache_response is never called for chunked content bodies", "user": {"login": "jscholes", "id": 6454755, "node_id": "MDQ6VXNlcjY0NTQ3NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6454755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jscholes", "html_url": "https://github.com/jscholes", "followers_url": "https://api.github.com/users/jscholes/followers", "following_url": "https://api.github.com/users/jscholes/following{/other_user}", "gists_url": "https://api.github.com/users/jscholes/gists{/gist_id}", "starred_url": "https://api.github.com/users/jscholes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jscholes/subscriptions", "organizations_url": "https://api.github.com/users/jscholes/orgs", "repos_url": "https://api.github.com/users/jscholes/repos", "events_url": "https://api.github.com/users/jscholes/events{/privacy}", "received_events_url": "https://api.github.com/users/jscholes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-07-19T00:32:23Z", "updated_at": "2016-09-13T16:58:49Z", "closed_at": "2016-09-13T16:58:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you access [this URL](https://api.spotify.com/v1/search?q=jim%20croce&type=track), the API endpoint returns simple JSON, as you'd expect.  However, the response body seems to be chunked.\n\n```\n>>> requests.get('https://api.spotify.com/v1/search?q=jim%20croce&type=track').headers.get('transfer-encoding')\n'chunked'\n```\n\nAs a result, even though the appropriate caching headers are set, cachecontrol is unable to cache the response, due to the use of cachecontrol.filewrapper.CallbackFileWrapper (presumably response._fp is never explicitly closed when content is chunked).\n\n```\njscholes@web:~$ curl \"https://api.spotify.com/v1/search?q=jim%20croce&type=track\" -I\nHTTP/1.1 200 OK\nServer: nginx\nDate: Tue, 19 Jul 2016 00:29:22 GMT\n...\nCache-Control: public, max-age=7200\n\nDEBUG: Looking up \"https://api.spotify.com/v1/search?q=jim%20croce&type=track\" in the cache\nDEBUG: No cache entry available\n```\n\nIf we explicitly set response.chunked to False for this request:\n\n```\nDEBUG: Looking up \"https://api.spotify.com/v1/search?q=jim%20croce&type=track\" in the cache\nDEBUG: No cache entry available\nDEBUG: Updating cache with response from \"https://api.spotify.com/v1/search?q=jim%20croce&type=track\"\nDEBUG: Caching b/c date exists and max-age > 0\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/123", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/123/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/123/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/123", "id": 153674852, "node_id": "MDU6SXNzdWUxNTM2NzQ4NTI=", "number": 123, "title": "Should heuristic apply regardless of status code?", "user": {"login": "eads", "id": 634572, "node_id": "MDQ6VXNlcjYzNDU3Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/634572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eads", "html_url": "https://github.com/eads", "followers_url": "https://api.github.com/users/eads/followers", "following_url": "https://api.github.com/users/eads/following{/other_user}", "gists_url": "https://api.github.com/users/eads/gists{/gist_id}", "starred_url": "https://api.github.com/users/eads/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eads/subscriptions", "organizations_url": "https://api.github.com/users/eads/orgs", "repos_url": "https://api.github.com/users/eads/repos", "events_url": "https://api.github.com/users/eads/events{/privacy}", "received_events_url": "https://api.github.com/users/eads/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-05-08T20:07:01Z", "updated_at": "2016-09-13T17:02:07Z", "closed_at": "2016-09-13T17:02:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In my attempts to debug #122 (which turned out to be a quirk of my API provider), [I implemented a heuristic](https://github.com/newsdev/elex/blob/0121-response-caching/elex/cachecontrol_heuristics.py). The heuristic simply removes the max-age cache-control header. Voila, the etag-based caching worked, until the first cache hit (or so it seems). Once I got a cache hit, the max-age based debug messages were popping up again. \n\nWhat I realized is that the heuristic isn't applied to 304 responses (or 301s). My suspicion is that it should be -- [I moved the heuristic outside the conditional](https://github.com/eads/cachecontrol/commit/db28cafcdb1237309fd6b619c6c3319a014fd353) and now it seems to be working the way I would expect.\n\nI need to dig around more -- this could be a case of getting age-related debug messages but the underlying mechanism still working correctly, but as far as I can tell now, not applying heuristics to 304s is a minor bug.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/122", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/122/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/122/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/122", "id": 153527668, "node_id": "MDU6SXNzdWUxNTM1Mjc2Njg=", "number": 122, "title": "conditional GET is never fired for etag requests", "user": {"login": "eads", "id": 634572, "node_id": "MDQ6VXNlcjYzNDU3Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/634572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eads", "html_url": "https://github.com/eads", "followers_url": "https://api.github.com/users/eads/followers", "following_url": "https://api.github.com/users/eads/following{/other_user}", "gists_url": "https://api.github.com/users/eads/gists{/gist_id}", "starred_url": "https://api.github.com/users/eads/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eads/subscriptions", "organizations_url": "https://api.github.com/users/eads/orgs", "repos_url": "https://api.github.com/users/eads/repos", "events_url": "https://api.github.com/users/eads/events{/privacy}", "received_events_url": "https://api.github.com/users/eads/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-05-06T20:03:35Z", "updated_at": "2016-05-06T20:42:24Z", "closed_at": "2016-05-06T20:34:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We used bleeding edge CacheControl with Elex for an election last week. Our interesting finding was that despite the presence of etags, cache hits happened at essentially identical intervals.\n\nI dug around and it appears CacheControl never makes the conditional GET or get back the 304 that should trigger another cache hit.\n\nThis could be because the service I'm hitting sets both a max-age AND etag. But I'm not entirely sure that's the case -- reading through `cachecontrol.adapter.send()`, I'm not sure how cachecontrol could ever send the request to get back a 304 response. \n\nI'm going to keep digging and will add some detail, but wanted to raise this issue now in case I'm doing something wrong.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/121", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/121/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/121/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/121", "id": 150948773, "node_id": "MDU6SXNzdWUxNTA5NDg3NzM=", "number": 121, "title": "Will there be a release soon?", "user": {"login": "eads", "id": 634572, "node_id": "MDQ6VXNlcjYzNDU3Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/634572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eads", "html_url": "https://github.com/eads", "followers_url": "https://api.github.com/users/eads/followers", "following_url": "https://api.github.com/users/eads/following{/other_user}", "gists_url": "https://api.github.com/users/eads/gists{/gist_id}", "starred_url": "https://api.github.com/users/eads/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eads/subscriptions", "organizations_url": "https://api.github.com/users/eads/orgs", "repos_url": "https://api.github.com/users/eads/repos", "events_url": "https://api.github.com/users/eads/events{/privacy}", "received_events_url": "https://api.github.com/users/eads/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-04-25T18:46:10Z", "updated_at": "2016-05-08T19:55:37Z", "closed_at": "2016-05-08T19:55:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is there any chance there will be a new release any time soon? \n\nI'm exploring using CacheControl with [elex](https://github.com/newsdev/elex). \n\nIt's not entirely clear to me why yet (and I've been digging through the code quite a bit) but in the current released version, I can't get CacheControl to properly cache responses from a particular API using the filesystem cache. When I run with the latest github version, it works without fail. \n\nThe response is not chunked. However, from what I've been able to tell, in the current version the response is just never written to disk, while in the latest version on master, it is. That makes me think the changes to file closing might solve the issue I'm seeing. \n\nI'm going to dig around more and see what I can turn up. However, given that it Just Works Now, is there a chance of rolling an 0.11.7 version any time soon? \n\nThanks for the library, it is pretty nifty!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/119", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/119/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/119/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/119", "id": 147884523, "node_id": "MDU6SXNzdWUxNDc4ODQ1MjM=", "number": 119, "title": "lockfile is deprecated", "user": {"login": "zhuol", "id": 3278114, "node_id": "MDQ6VXNlcjMyNzgxMTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/3278114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhuol", "html_url": "https://github.com/zhuol", "followers_url": "https://api.github.com/users/zhuol/followers", "following_url": "https://api.github.com/users/zhuol/following{/other_user}", "gists_url": "https://api.github.com/users/zhuol/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhuol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhuol/subscriptions", "organizations_url": "https://api.github.com/users/zhuol/orgs", "repos_url": "https://api.github.com/users/zhuol/repos", "events_url": "https://api.github.com/users/zhuol/events{/privacy}", "received_events_url": "https://api.github.com/users/zhuol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-12T21:50:14Z", "updated_at": "2016-04-12T21:54:28Z", "closed_at": "2016-04-12T21:54:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Lockfile is deprecated now as https://pypi.python.org/pypi/lockfile, so could you replace it by fasteners or oslo.concurrency?\n\nOr I can help on it?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/117", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/117/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/117/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/117", "id": 141337806, "node_id": "MDU6SXNzdWUxNDEzMzc4MDY=", "number": 117, "title": "CacheController.cache_response not called even for aggressive caching heuristic", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-03-16T17:05:03Z", "updated_at": "2016-03-16T17:25:26Z", "closed_at": "2016-03-16T17:25:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider this code:\n\n``` python\nimport time\nimport logging\n\nimport requests\nimport cachecontrol.heuristics\n\nlogging.basicConfig(level=logging.DEBUG)\n\n\nprint(\"Using cachecontrol\", cachecontrol.__version__, end='\\n\\n')\n\nadapter = cachecontrol.CacheControlAdapter(\n    heuristic=cachecontrol.heuristics.ExpiresAfter(days=30))\n\nsess = requests.Session()\nsess.mount('http://', adapter)\nsess.mount('https://', adapter)\n\nrelevant_headers = (\n    'Cache-Control',\n    'Date',\n    'Expires',\n    'X-Rate-Limit-Remaining',\n    'Warning',\n)\n\ndef do_req(number):\n    print(\"request\", number)\n    res = sess.get('https://api.genderize.io/?name=cachecontrol')\n    # necessarily consume the stream to get the value\n    print(\"Got value\", res.text)\n    for header in relevant_headers:\n        print(header, ':', res.headers[header])\n    print()\n\ndo_req(1)\ntime.sleep(1)\ndo_req(2)\n```\n\nRun in a script, produces this output:\n\n```\nUsing cachecontrol 0.11.6\n\nrequest 1\nDEBUG:cachecontrol.controller:Looking up \"https://api.genderize.io/?name=cachecontrol\" in the cache\nDEBUG:cachecontrol.controller:No cache entry available\nINFO:requests.packages.urllib3.connectionpool:Starting new HTTPS connection (1): api.genderize.io\nDEBUG:requests.packages.urllib3.connectionpool:\"GET /?name=cachecontrol HTTP/1.1\" 200 None\nGot value {\"name\":\"cachecontrol\",\"gender\":null}\nCache-Control : public\nDate : Wed, 16 Mar 2016 17:03:52 GMT\nExpires : Fri, 15 Apr 2016 13:03:52 -0000\nX-Rate-Limit-Remaining : 947\nWarning : 110 - Automatically cached for 30 days, 0:00:00. Response might be stale\n\nrequest 2\nDEBUG:cachecontrol.controller:Looking up \"https://api.genderize.io/?name=cachecontrol\" in the cache\nDEBUG:cachecontrol.controller:No cache entry available\nDEBUG:requests.packages.urllib3.connectionpool:\"GET /?name=cachecontrol HTTP/1.1\" 200 None\nGot value {\"name\":\"cachecontrol\",\"gender\":null}\nCache-Control : public\nDate : Wed, 16 Mar 2016 17:03:53 GMT\nExpires : Fri, 15 Apr 2016 13:03:53 -0000\nX-Rate-Limit-Remaining : 946\nWarning : 110 - Automatically cached for 30 days, 0:00:00. Response might be stale\n```\n\nPlacing a pdb break on cachecontrol/controller.py:231 is never triggered, indicating that cache_response is never called. Clearly the adapter is in place and the heuristic is being invoked. Yet no caching occurs.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/116", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/116/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/116/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/116", "id": 140223755, "node_id": "MDU6SXNzdWUxNDAyMjM3NTU=", "number": 116, "title": "Can anyone help me in explaining why cachecontrol of not caching url?", "user": {"login": "p0psicles", "id": 1331394, "node_id": "MDQ6VXNlcjEzMzEzOTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1331394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/p0psicles", "html_url": "https://github.com/p0psicles", "followers_url": "https://api.github.com/users/p0psicles/followers", "following_url": "https://api.github.com/users/p0psicles/following{/other_user}", "gists_url": "https://api.github.com/users/p0psicles/gists{/gist_id}", "starred_url": "https://api.github.com/users/p0psicles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/p0psicles/subscriptions", "organizations_url": "https://api.github.com/users/p0psicles/orgs", "repos_url": "https://api.github.com/users/p0psicles/repos", "events_url": "https://api.github.com/users/p0psicles/events{/privacy}", "received_events_url": "https://api.github.com/users/p0psicles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-03-11T16:10:56Z", "updated_at": "2016-03-24T15:13:50Z", "closed_at": "2016-03-24T13:35:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is the url i'm testing with:\nhttp://thetvdb.com/api/GetSeries.php?seriesname=breaking+bad&language=en\n\nIt's returning xml? Might it have something to do with that?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/111", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/111/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/111/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/111", "id": 127498805, "node_id": "MDU6SXNzdWUxMjc0OTg4MDU=", "number": 111, "title": "FileCache does not work", "user": {"login": "burtgulash", "id": 1071776, "node_id": "MDQ6VXNlcjEwNzE3NzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1071776?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burtgulash", "html_url": "https://github.com/burtgulash", "followers_url": "https://api.github.com/users/burtgulash/followers", "following_url": "https://api.github.com/users/burtgulash/following{/other_user}", "gists_url": "https://api.github.com/users/burtgulash/gists{/gist_id}", "starred_url": "https://api.github.com/users/burtgulash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burtgulash/subscriptions", "organizations_url": "https://api.github.com/users/burtgulash/orgs", "repos_url": "https://api.github.com/users/burtgulash/repos", "events_url": "https://api.github.com/users/burtgulash/events{/privacy}", "received_events_url": "https://api.github.com/users/burtgulash/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2016-01-19T17:35:42Z", "updated_at": "2016-03-30T16:00:32Z", "closed_at": "2016-03-24T14:42:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to test for existence of cache directory, similar to included test **test_storage_filecache.py** but it does not get created. **forever=True** flag does not help, changing directory **.web_cache** to something else neither.\n\n``` .py\nimport os.path\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n\nimport requests\nfrom cachecontrol import CacheControl\nfrom cachecontrol.caches import FileCache\n\nwebcache_dir = \".web_cache\"\ncache = FileCache(webcache_dir)\nsess = CacheControl(requests.Session(), cache=cache)\nresponse = sess.get(\"http://google.com\")\n\nprint()\nprint(cache)\nprint(\"%s exists?\" % webcache_dir, os.path.exists(webcache_dir))\n```\n\nAttached log:\n\n```\nINFO:urllib3.connectionpool:Starting new HTTP connection (1): google.com\nDEBUG:urllib3.connectionpool:Setting read timeout to None\nDEBUG:urllib3.connectionpool:\"GET / HTTP/1.1\" 302 258\nINFO:urllib3.connectionpool:Starting new HTTP connection (1): www.google.cz\nDEBUG:urllib3.connectionpool:Setting read timeout to None\nDEBUG:urllib3.connectionpool:\"GET /?gfe_rd=cr&ei=DnKeVs2tOOWI8QfDyYbwDw HTTP/1.1\" 200 7699\n\n<cachecontrol.caches.file_cache.FileCache object at 0x7f72120f4b00>\n.web_cache exists? False\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/110", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/110/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/110/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/110", "id": 127057406, "node_id": "MDU6SXNzdWUxMjcwNTc0MDY=", "number": 110, "title": "Not working with Python < 2.6.5", "user": {"login": "yan12125", "id": 1937689, "node_id": "MDQ6VXNlcjE5Mzc2ODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1937689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yan12125", "html_url": "https://github.com/yan12125", "followers_url": "https://api.github.com/users/yan12125/followers", "following_url": "https://api.github.com/users/yan12125/following{/other_user}", "gists_url": "https://api.github.com/users/yan12125/gists{/gist_id}", "starred_url": "https://api.github.com/users/yan12125/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yan12125/subscriptions", "organizations_url": "https://api.github.com/users/yan12125/orgs", "repos_url": "https://api.github.com/users/yan12125/repos", "events_url": "https://api.github.com/users/yan12125/events{/privacy}", "received_events_url": "https://api.github.com/users/yan12125/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-01-16T22:19:44Z", "updated_at": "2016-03-24T18:41:19Z", "closed_at": "2016-03-24T16:17:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With Python 2.6.4 and the following code snippet:\n\n```\nimport requests\nfrom cachecontrol import CacheControl\n\nsess = requests.session()\ncached_sess = CacheControl(sess)\n\nresponse = cached_sess.get('http://example.com')\nresponse = cached_sess.get('http://example.com')\n```\n\nThe following error occurs:\n\n```\n$ python test_cache.py\nTraceback (most recent call last):\n  File \"test_cache.py\", line 10, in <module>\n    response = cached_sess.get('http://example.com')\n  File \"/home/yen/pyenv/lib/python2.6/site-packages/requests/sessions.py\", line 480, in get\n    return self.request('GET', url, **kwargs)\n  File \"/home/yen/pyenv/lib/python2.6/site-packages/requests/sessions.py\", line 468, in request\n    resp = self.send(prep, **send_kwargs)\n  File \"/home/yen/pyenv/lib/python2.6/site-packages/requests/sessions.py\", line 576, in send\n    r = adapter.send(request, **kwargs)\n  File \"/home/yen/pyenv/lib/python2.6/site-packages/cachecontrol/adapter.py\", line 36, in send\n    cached_response = self.controller.cached_request(request)\n  File \"/home/yen/pyenv/lib/python2.6/site-packages/cachecontrol/controller.py\", line 102, in cached_request\n    resp = self.serializer.loads(request, self.cache.get(cache_url))\n  File \"/home/yen/pyenv/lib/python2.6/site-packages/cachecontrol/serialize.py\", line 108, in loads\n    return getattr(self, \"_loads_v{0}\".format(ver))(request, data)\n  File \"/home/yen/pyenv/lib/python2.6/site-packages/cachecontrol/serialize.py\", line 184, in _loads_v2\n    return self.prepare_response(request, cached)\n  File \"/home/yen/pyenv/lib/python2.6/site-packages/cachecontrol/serialize.py\", line 145, in prepare_response\n    **cached[\"response\"]\nTypeError: __init__() keywords must be strings\n```\n\nRelated: https://github.com/pypa/pip/issues/3074\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/108", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/108/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/108/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/108", "id": 123808491, "node_id": "MDU6SXNzdWUxMjM4MDg0OTE=", "number": 108, "title": "cachecontrol not available on pypi", "user": {"login": "perrygeo", "id": 1151287, "node_id": "MDQ6VXNlcjExNTEyODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1151287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/perrygeo", "html_url": "https://github.com/perrygeo", "followers_url": "https://api.github.com/users/perrygeo/followers", "following_url": "https://api.github.com/users/perrygeo/following{/other_user}", "gists_url": "https://api.github.com/users/perrygeo/gists{/gist_id}", "starred_url": "https://api.github.com/users/perrygeo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/perrygeo/subscriptions", "organizations_url": "https://api.github.com/users/perrygeo/orgs", "repos_url": "https://api.github.com/users/perrygeo/repos", "events_url": "https://api.github.com/users/perrygeo/events{/privacy}", "received_events_url": "https://api.github.com/users/perrygeo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-12-24T14:27:26Z", "updated_at": "2015-12-24T14:44:48Z", "closed_at": "2015-12-24T14:44:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm unable to install via pip:\n\n```\n$ pip -vvv install cachecontrol\nCollecting cachecontrol\n  Getting page https://pypi.python.org/simple/cachecontrol/\n  Starting new HTTPS connection (1): pypi.python.org\n  \"GET /simple/cachecontrol/ HTTP/1.1\" 200 119\n  1 location(s) to search for versions of cachecontrol:\n  * https://pypi.python.org/simple/cachecontrol/\n  Getting page https://pypi.python.org/simple/cachecontrol/\n  Analyzing links from page https://pypi.python.org/simple/cachecontrol/\n  Could not find a version that satisfies the requirement cachecontrol (from versions: )\nCleaning up...\nNo matching distribution found for cachecontrol\n```\n\nStrangely the link to https://pypi.python.org/pypi/CacheControl show a current version. Could you try re-releasing to fix?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/105", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/105/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/105/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/105", "id": 118518061, "node_id": "MDU6SXNzdWUxMTg1MTgwNjE=", "number": 105, "title": "Chunked responses are not cached", "user": {"login": "rmcgibbo", "id": 641278, "node_id": "MDQ6VXNlcjY0MTI3OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/641278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmcgibbo", "html_url": "https://github.com/rmcgibbo", "followers_url": "https://api.github.com/users/rmcgibbo/followers", "following_url": "https://api.github.com/users/rmcgibbo/following{/other_user}", "gists_url": "https://api.github.com/users/rmcgibbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmcgibbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmcgibbo/subscriptions", "organizations_url": "https://api.github.com/users/rmcgibbo/orgs", "repos_url": "https://api.github.com/users/rmcgibbo/repos", "events_url": "https://api.github.com/users/rmcgibbo/events{/privacy}", "received_events_url": "https://api.github.com/users/rmcgibbo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-11-24T02:16:47Z", "updated_at": "2015-11-25T23:51:52Z", "closed_at": "2015-11-24T23:16:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When the underlying `urllib3.HTTPResponse` is chunked, I don't get any caching.\n\nI believe the issue is coming from the fact that `requests` gets the data out using `urllib3.HTTPResponse.stream()`, which, if the response is chunked, calls `urllib3.HTTPResponse.read_chunked`. This avoids directly hitting the `read()` method on the file object (it calls `_safe_read` instead) that cachecontrol overrides in the `CallbackFileWrapper`.\n\nI'm using python 35 and requests 2.8.1.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/103", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/103/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/103/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/103", "id": 117934146, "node_id": "MDU6SXNzdWUxMTc5MzQxNDY=", "number": 103, "title": "Chunked responses are not cached", "user": {"login": "JustinAzoff", "id": 65812, "node_id": "MDQ6VXNlcjY1ODEy", "avatar_url": "https://avatars2.githubusercontent.com/u/65812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JustinAzoff", "html_url": "https://github.com/JustinAzoff", "followers_url": "https://api.github.com/users/JustinAzoff/followers", "following_url": "https://api.github.com/users/JustinAzoff/following{/other_user}", "gists_url": "https://api.github.com/users/JustinAzoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/JustinAzoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JustinAzoff/subscriptions", "organizations_url": "https://api.github.com/users/JustinAzoff/orgs", "repos_url": "https://api.github.com/users/JustinAzoff/repos", "events_url": "https://api.github.com/users/JustinAzoff/events{/privacy}", "received_events_url": "https://api.github.com/users/JustinAzoff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-19T23:40:23Z", "updated_at": "2015-11-20T00:04:16Z", "closed_at": "2015-11-20T00:04:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is an issue with filewrapper.py\n\nurllib3/response.py has:\n\n```\n    if self.chunked:\n        for line in self.read_chunked(amt, decode_content=decode_content):\n            yield line\n    else:\n        while not is_fp_closed(self._fp):\n            data = self.read(amt=amt, decode_content=decode_content)\n...\n```\n\nThis causes chunked requests to bypass the `read` implementation in CallbackFileWrapper and the callback never gets called.  The chunked code ends up calling `self._fp._safe_read`.\n\nI was able to verify this by setting\n\n```\nchunked_transfer_encoding       off;\n```\n\nin an nginx config and seeing that responses are then cached.\n\nI think this might be related to #95. fwiw tracking this down only took me 20 minutes.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/99", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/99/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/99/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/99", "id": 103733352, "node_id": "MDU6SXNzdWUxMDM3MzMzNTI=", "number": 99, "title": "FileNotFound error with PUT and FileCache", "user": {"login": "jseabold", "id": 296164, "node_id": "MDQ6VXNlcjI5NjE2NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseabold", "html_url": "https://github.com/jseabold", "followers_url": "https://api.github.com/users/jseabold/followers", "following_url": "https://api.github.com/users/jseabold/following{/other_user}", "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions", "organizations_url": "https://api.github.com/users/jseabold/orgs", "repos_url": "https://api.github.com/users/jseabold/repos", "events_url": "https://api.github.com/users/jseabold/events{/privacy}", "received_events_url": "https://api.github.com/users/jseabold/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-08-28T14:54:38Z", "updated_at": "2015-11-25T23:54:13Z", "closed_at": "2015-11-25T23:54:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using the CacheControlAdapter with a FileCache and I'm getting a FileNotFound error issuing a PUT request. Bug or user error? Stepping through the debugger. It doesn't look like the PUT request is ever cached to be deleted so the file shouldn't exist, or am I missing something?\n\n```\n> /Users/user/.py34/lib/python3.4/site-packages/cachecontrol/caches/file_cache.py(107)delete()\n\u2002 \u2002 106\u2002 \u2002 \u2002 \u2002  if not self.forever:\n--> 107\u2002 \u2002 \u2002 \u2002 \u2002 \u2002  os.remove(name)\n\u2002 \u2002 108\n\nipdb> u\n> /Users/user/.py34/lib/python3.4/site-packages/cachecontrol/adapter.py(108)build_response()\n\u2002 \u2002 107\u2002 \u2002 \u2002 \u2002 \u2002 \u2002  cache_url = self.controller.cache_url(request.url)\n--> 108\u2002 \u2002 \u2002 \u2002 \u2002 \u2002  self.cache.delete(cache_url)\n\u2002 \u2002 109\n\nipdb> u\n> /Users/user/.py34/lib/python3.4/site-packages/requests-2.7.0-py3.4.egg/requests/adapters.py(437)send()\n    435                 raise\n    436\n--> 437         return self.build_response(request, resp)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/97", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/97/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/97/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/97", "id": 102535577, "node_id": "MDU6SXNzdWUxMDI1MzU1Nzc=", "number": 97, "title": "Support for many databases as cache data store / SQLAlchemy engine ", "user": {"login": "femtotrader", "id": 5049737, "node_id": "MDQ6VXNlcjUwNDk3Mzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5049737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/femtotrader", "html_url": "https://github.com/femtotrader", "followers_url": "https://api.github.com/users/femtotrader/followers", "following_url": "https://api.github.com/users/femtotrader/following{/other_user}", "gists_url": "https://api.github.com/users/femtotrader/gists{/gist_id}", "starred_url": "https://api.github.com/users/femtotrader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/femtotrader/subscriptions", "organizations_url": "https://api.github.com/users/femtotrader/orgs", "repos_url": "https://api.github.com/users/femtotrader/repos", "events_url": "https://api.github.com/users/femtotrader/events{/privacy}", "received_events_url": "https://api.github.com/users/femtotrader/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-08-22T12:59:13Z", "updated_at": "2016-02-16T16:50:34Z", "closed_at": "2015-08-30T22:54:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nit will be nice if a connection to SQLAlchemy (engine) could be pass to cachecontrol (maybe using cache argument).\nsee http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html\n\nIt will provide more DB support (MySQL, PostgreSQL, Oracle, Microsoft SQL Server...)\n\nPandas is doing something similar:\nhttp://pandas.pydata.org/pandas-docs/stable/generated/pandas.io.sql.read_sql.html\n\nAPSScheduler also\nhttps://apscheduler.readthedocs.org/en/latest/\n\n`cache` argument could be\n- a `SQLAlchemyCache` object\n- a SQLAlchemy `engine`\n- a database URI like `dialect+driver://username:password@host:port/database`\n- a table URI like `dialect+driver://username:password@host:port/database::tablename`\n  \n  from cachecontrol.caches import SQLAlchemyCache\n\nKind regards\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/96", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/96/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/96/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/96", "id": 102407174, "node_id": "MDU6SXNzdWUxMDI0MDcxNzQ=", "number": 96, "title": "FileCache warning for a missing filelock shouldn't trigger when using rediscache", "user": {"login": "domenkozar", "id": 126339, "node_id": "MDQ6VXNlcjEyNjMzOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/126339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domenkozar", "html_url": "https://github.com/domenkozar", "followers_url": "https://api.github.com/users/domenkozar/followers", "following_url": "https://api.github.com/users/domenkozar/following{/other_user}", "gists_url": "https://api.github.com/users/domenkozar/gists{/gist_id}", "starred_url": "https://api.github.com/users/domenkozar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domenkozar/subscriptions", "organizations_url": "https://api.github.com/users/domenkozar/orgs", "repos_url": "https://api.github.com/users/domenkozar/repos", "events_url": "https://api.github.com/users/domenkozar/events{/privacy}", "received_events_url": "https://api.github.com/users/domenkozar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-08-21T15:44:10Z", "updated_at": "2015-11-25T23:54:55Z", "closed_at": "2015-11-25T23:54:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "See comment on https://github.com/ionrock/cachecontrol/commit/5e8e8a6b87655dd9875fc6afd2ad3004c9077324#commitcomment-12816743\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/95", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/95/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/95/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/95", "id": 99420857, "node_id": "MDU6SXNzdWU5OTQyMDg1Nw==", "number": 95, "title": "Not getting the caching I expected", "user": {"login": "toolforger", "id": 915906, "node_id": "MDQ6VXNlcjkxNTkwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/915906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toolforger", "html_url": "https://github.com/toolforger", "followers_url": "https://api.github.com/users/toolforger/followers", "following_url": "https://api.github.com/users/toolforger/following{/other_user}", "gists_url": "https://api.github.com/users/toolforger/gists{/gist_id}", "starred_url": "https://api.github.com/users/toolforger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toolforger/subscriptions", "organizations_url": "https://api.github.com/users/toolforger/orgs", "repos_url": "https://api.github.com/users/toolforger/repos", "events_url": "https://api.github.com/users/toolforger/events{/privacy}", "received_events_url": "https://api.github.com/users/toolforger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2015-08-06T12:03:47Z", "updated_at": "2016-09-13T16:59:49Z", "closed_at": "2016-09-13T16:59:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Here's my CCSSE:\n\n```\nimport github3\nimport cachecontrol\ng = github3.GitHub()\ncachecontrol.CacheControl(g._session)\nprint(g.rate_limit()['resources']['core']) # initial rate limit\nprint(g.rate_limit()['resources']['core']) # rate_limit - should not count\nrepository = g.repository('sigmavirus24', 'github3.py')\nprint(g.rate_limit()['resources']['core']) # get repo data - should count\nrepository = g.repository('sigmavirus24', 'github3.py')\nprint(g.rate_limit()['resources']['core']) # get repo again - should be served from cache\n```\n\nIn the output, I'm seeing that the rate limit is being ticked off for each `g.repository` call.\n\n```\n{u'reset': 1438863563, u'limit': 60, u'remaining': 53}\n{u'reset': 1438863563, u'limit': 60, u'remaining': 53}\n{u'reset': 1438863563, u'limit': 60, u'remaining': 52}\n{u'reset': 1438863563, u'limit': 60, u'remaining': 51}\n```\n\nWith logging cranked up to the max and tons of logging added (see #93 for the exact code, 50a76aa to be specific), I'm seeing the long trace below.\nConspicuously, there's no `Updating cache with response from \"http://...\"`, which is what I added at https://github.com/toolforger/cachecontrol/blob/50a76aa0f022a47d34c65c13c4c813ecb1f2c086/cachecontrol/controller.py#L228, so I guess  indicating  `cachecontrol.controller.CacheController.cache_response` is never called.\nSince that call is stashed away in a `functools.partial`, I have no idea where and when that call should have happened, so I have come to a dead end.\n\n```\nINFO:github3:Building a url from ('https://api.github.com', 'rate_limit')\nINFO:github3:Missed the cache building the url\nDEBUG:github3:GET https://api.github.com/rate_limit with {}\nDEBUG:cachecontrol.controller:Looking up \"https://api.github.com/rate_limit\" in the cache\nDEBUG:cachecontrol.controller:No cache entry available\nINFO:requests.packages.urllib3.connectionpool:Starting new HTTPS connection (1): api.github.com\nDEBUG:requests.packages.urllib3.connectionpool:\"GET /rate_limit HTTP/1.1\" 200 None\nINFO:github3:Attempting to get JSON information from a Response with status code 200 expecting 200\nINFO:github3:JSON was returned\nINFO:github3:Building a url from ('https://api.github.com', 'rate_limit')\nDEBUG:github3:GET https://api.github.com/rate_limit with {}\n{u'reset': 1438867921, u'limit': 60, u'remaining': 60}\nDEBUG:cachecontrol.controller:Looking up \"https://api.github.com/rate_limit\" in the cache\nDEBUG:cachecontrol.controller:No cache entry available\nDEBUG:requests.packages.urllib3.connectionpool:\"GET /rate_limit HTTP/1.1\" 200 None\n{u'reset': 1438867922, u'limit': 60, u'remaining': 60}\nINFO:github3:Attempting to get JSON information from a Response with status code 200 expecting 200\nINFO:github3:JSON was returned\nINFO:github3:Building a url from ('https://api.github.com', 'repos', 'sigmavirus24', 'github3.py')\nINFO:github3:Missed the cache building the url\nDEBUG:github3:GET https://api.github.com/repos/sigmavirus24/github3.py with {}\nDEBUG:cachecontrol.controller:Looking up \"https://api.github.com/repos/sigmavirus24/github3.py\" in the cache\nDEBUG:cachecontrol.controller:No cache entry available\nDEBUG:requests.packages.urllib3.connectionpool:\"GET /repos/sigmavirus24/github3.py HTTP/1.1\" 200 None\nINFO:github3:Attempting to get JSON information from a Response with status code 200 expecting 200\nINFO:github3:JSON was returned\nINFO:github3:Building a url from ('https://api.github.com', 'rate_limit')\nDEBUG:github3:GET https://api.github.com/rate_limit with {}\nDEBUG:cachecontrol.controller:Looking up \"https://api.github.com/rate_limit\" in the cache\nDEBUG:cachecontrol.controller:No cache entry available\nDEBUG:requests.packages.urllib3.connectionpool:\"GET /rate_limit HTTP/1.1\" 200 None\nINFO:github3:Attempting to get JSON information from a Response with status code 200 expecting 200\nINFO:github3:JSON was returned\nINFO:github3:Building a url from ('https://api.github.com', 'repos', 'sigmavirus24', 'github3.py')\nDEBUG:github3:GET https://api.github.com/repos/sigmavirus24/github3.py with {}\n{u'reset': 1438867922, u'limit': 60, u'remaining': 59}\nDEBUG:cachecontrol.controller:Looking up \"https://api.github.com/repos/sigmavirus24/github3.py\" in the cache\nDEBUG:cachecontrol.controller:No cache entry available\nDEBUG:requests.packages.urllib3.connectionpool:\"GET /repos/sigmavirus24/github3.py HTTP/1.1\" 200 None\nINFO:github3:Attempting to get JSON information from a Response with status code 200 expecting 200\nINFO:github3:JSON was returned\nINFO:github3:Building a url from ('https://api.github.com', 'rate_limit')\nDEBUG:github3:GET https://api.github.com/rate_limit with {}\nDEBUG:cachecontrol.controller:Looking up \"https://api.github.com/rate_limit\" in the cache\nDEBUG:cachecontrol.controller:No cache entry available\nDEBUG:requests.packages.urllib3.connectionpool:\"GET /rate_limit HTTP/1.1\" 200 None\nINFO:github3:Attempting to get JSON information from a Response with status code 200 expecting 200\nINFO:github3:JSON was returned\n{u'reset': 1438867922, u'limit': 60, u'remaining': 58}\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/94", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/94/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/94/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/94", "id": 99303095, "node_id": "MDU6SXNzdWU5OTMwMzA5NQ==", "number": 94, "title": "Cache entries may be cleared prematurely", "user": {"login": "toolforger", "id": 915906, "node_id": "MDQ6VXNlcjkxNTkwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/915906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toolforger", "html_url": "https://github.com/toolforger", "followers_url": "https://api.github.com/users/toolforger/followers", "following_url": "https://api.github.com/users/toolforger/following{/other_user}", "gists_url": "https://api.github.com/users/toolforger/gists{/gist_id}", "starred_url": "https://api.github.com/users/toolforger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toolforger/subscriptions", "organizations_url": "https://api.github.com/users/toolforger/orgs", "repos_url": "https://api.github.com/users/toolforger/repos", "events_url": "https://api.github.com/users/toolforger/events{/privacy}", "received_events_url": "https://api.github.com/users/toolforger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-08-05T21:29:12Z", "updated_at": "2015-11-25T23:59:53Z", "closed_at": "2015-11-25T23:59:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`CacheController.cached_request` clears out cache entries if they were stale, even if staleness happened just because the cache entry was older than what the request required.\nA later request may tolerate a higher age, so the cache entry could still be useful.\n\nIn the following scenario, this will cause a refetch that should have been served from the cache:\n- Request 1 specifies a tight max-age, causing the cache to drop the entry and try fetching a new result\n- For some reason, that result is not entered into the cache (temporary failure, cache control headers, whatever)\n- Request 2 needs to specify a relaxed max age, so the original cache entry would have been returned if it were still in the cache\n\nIn the following scenario, this will fail to return a cached entry where it could have:\n- First three steps as above\n- Request 2, when fetching from the server, hits some temporary problem.\n\nAdmittedly, neither scenario is very likely, but given that caching is such a foundational part that people expect to \"just work\", I think that even this stone shouldn't be left unturned.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/92", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/92/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/92/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/92", "id": 99282982, "node_id": "MDU6SXNzdWU5OTI4Mjk4Mg==", "number": 92, "title": "CacheControl should log its decisionmaking", "user": {"login": "toolforger", "id": 915906, "node_id": "MDQ6VXNlcjkxNTkwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/915906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toolforger", "html_url": "https://github.com/toolforger", "followers_url": "https://api.github.com/users/toolforger/followers", "following_url": "https://api.github.com/users/toolforger/following{/other_user}", "gists_url": "https://api.github.com/users/toolforger/gists{/gist_id}", "starred_url": "https://api.github.com/users/toolforger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toolforger/subscriptions", "organizations_url": "https://api.github.com/users/toolforger/orgs", "repos_url": "https://api.github.com/users/toolforger/repos", "events_url": "https://api.github.com/users/toolforger/events{/privacy}", "received_events_url": "https://api.github.com/users/toolforger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-08-05T19:41:35Z", "updated_at": "2016-03-22T21:43:21Z", "closed_at": "2016-03-22T21:43:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "All the decisions that lead to CacheControl entering something into the cache or not, retrieving something from the cache or not, should be logged at DEBUG level.\nReason: HTTP caching is far more complex and influenced by far more factors than most developers that will use CacheControl are aware. If developers are searching for the cause of unexpected behaviour (a.k.a. a bug), knowledge of the decisionmaking will help them determine whether they should look in their own logic, the server's logic, or CacheControl's logic.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/87", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/87/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/87/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/87", "id": 97920402, "node_id": "MDU6SXNzdWU5NzkyMDQwMg==", "number": 87, "title": "adding extra objects", "user": {"login": "aliraza0337", "id": 8228290, "node_id": "MDQ6VXNlcjgyMjgyOTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/8228290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliraza0337", "html_url": "https://github.com/aliraza0337", "followers_url": "https://api.github.com/users/aliraza0337/followers", "following_url": "https://api.github.com/users/aliraza0337/following{/other_user}", "gists_url": "https://api.github.com/users/aliraza0337/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliraza0337/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliraza0337/subscriptions", "organizations_url": "https://api.github.com/users/aliraza0337/orgs", "repos_url": "https://api.github.com/users/aliraza0337/repos", "events_url": "https://api.github.com/users/aliraza0337/events{/privacy}", "received_events_url": "https://api.github.com/users/aliraza0337/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-07-29T11:56:39Z", "updated_at": "2016-03-24T14:45:53Z", "closed_at": "2016-03-24T14:45:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, Is there any way that I can add an object to the cache, for example I have the headers, content in short complete response. Is there any way that I can add this to the cache and retrieve later using the url? \nfor example:\nTo put in the cache I have, \nheaders, response, status codes \n\nTo retrieve from the cahe I have, \nurl, request version etc \n\nany code example would be much appreciated.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/85", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/85/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/85/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/85", "id": 95817704, "node_id": "MDU6SXNzdWU5NTgxNzcwNA==", "number": 85, "title": "No logging", "user": {"login": "toolforger", "id": 915906, "node_id": "MDQ6VXNlcjkxNTkwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/915906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toolforger", "html_url": "https://github.com/toolforger", "followers_url": "https://api.github.com/users/toolforger/followers", "following_url": "https://api.github.com/users/toolforger/following{/other_user}", "gists_url": "https://api.github.com/users/toolforger/gists{/gist_id}", "starred_url": "https://api.github.com/users/toolforger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toolforger/subscriptions", "organizations_url": "https://api.github.com/users/toolforger/orgs", "repos_url": "https://api.github.com/users/toolforger/repos", "events_url": "https://api.github.com/users/toolforger/events{/privacy}", "received_events_url": "https://api.github.com/users/toolforger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-07-18T11:44:10Z", "updated_at": "2015-11-25T23:56:45Z", "closed_at": "2015-11-25T23:56:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm not seeing any logging statements.\nIssue I'm having right now is that cachecontrol isn't caching responses I'd have expected to get cached, but I have no idea why, not even after single-stepping through it: I'm seeing all the turns where it decides it's not going to cache it right now, and I don't know which of these decisions is right (or maybe all of them are right and the website just isn't sending the right headers).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/84", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/84/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/84/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/84", "id": 91822340, "node_id": "MDU6SXNzdWU5MTgyMjM0MA==", "number": 84, "title": "UnicodeDecodeError raised on some cache max-age headers", "user": {"login": "hakanw", "id": 100824, "node_id": "MDQ6VXNlcjEwMDgyNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/100824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hakanw", "html_url": "https://github.com/hakanw", "followers_url": "https://api.github.com/users/hakanw/followers", "following_url": "https://api.github.com/users/hakanw/following{/other_user}", "gists_url": "https://api.github.com/users/hakanw/gists{/gist_id}", "starred_url": "https://api.github.com/users/hakanw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hakanw/subscriptions", "organizations_url": "https://api.github.com/users/hakanw/orgs", "repos_url": "https://api.github.com/users/hakanw/repos", "events_url": "https://api.github.com/users/hakanw/events{/privacy}", "received_events_url": "https://api.github.com/users/hakanw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2015-06-29T14:32:18Z", "updated_at": "2015-08-04T10:04:07Z", "closed_at": "2015-08-04T10:04:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm encountering this exception when fetching some URLs:\n\n```\nUnicodeDecodeError\n 'ascii' codec can't decode byte 0xe2 in position 0: ordinal not in range(128)\n```\n\nThe function that is raising is this:\n\n``` python\ndef _b64_encode_str(s):\n    return _b64_encode_bytes(s.encode(\"utf8\"))\n```\n\nAnd some example data that some HTTP servers seem to be sending is for example: `'\\u201cmax-age=31536000\\u2033'`\n\nIt would be great if cache-control could handle these edge cases without dying.\n\nThanks for a great package!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/83", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/83/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/83/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/83", "id": 87475052, "node_id": "MDU6SXNzdWU4NzQ3NTA1Mg==", "number": 83, "title": "Detect Failed Downloads", "user": {"login": "dstufft", "id": 145979, "node_id": "MDQ6VXNlcjE0NTk3OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/145979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dstufft", "html_url": "https://github.com/dstufft", "followers_url": "https://api.github.com/users/dstufft/followers", "following_url": "https://api.github.com/users/dstufft/following{/other_user}", "gists_url": "https://api.github.com/users/dstufft/gists{/gist_id}", "starred_url": "https://api.github.com/users/dstufft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dstufft/subscriptions", "organizations_url": "https://api.github.com/users/dstufft/orgs", "repos_url": "https://api.github.com/users/dstufft/repos", "events_url": "https://api.github.com/users/dstufft/events{/privacy}", "received_events_url": "https://api.github.com/users/dstufft/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-06-11T19:50:03Z", "updated_at": "2016-01-19T18:51:01Z", "closed_at": "2016-01-19T18:51:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently (I think) the caching code assumes that if we call `read()` on the file and it's closed that we've successfully downloaded the file. This caused issues for someone in pip (see https://bitbucket.org/zzzeek/sqlalchemy/issue/3447/unable-to-install-sqlalchemy). I'm not sure what the best way of handling this would be.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/81", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/81/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/81/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/81", "id": 87366944, "node_id": "MDU6SXNzdWU4NzM2Njk0NA==", "number": 81, "title": "Chunked responses are not cached", "user": {"login": "bdeeney", "id": 1282325, "node_id": "MDQ6VXNlcjEyODIzMjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1282325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bdeeney", "html_url": "https://github.com/bdeeney", "followers_url": "https://api.github.com/users/bdeeney/followers", "following_url": "https://api.github.com/users/bdeeney/following{/other_user}", "gists_url": "https://api.github.com/users/bdeeney/gists{/gist_id}", "starred_url": "https://api.github.com/users/bdeeney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bdeeney/subscriptions", "organizations_url": "https://api.github.com/users/bdeeney/orgs", "repos_url": "https://api.github.com/users/bdeeney/repos", "events_url": "https://api.github.com/users/bdeeney/events{/privacy}", "received_events_url": "https://api.github.com/users/bdeeney/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2015-06-11T14:30:46Z", "updated_at": "2016-04-27T19:20:31Z", "closed_at": "2016-03-30T15:59:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Otherwise cacheable chunked responses (indicated by a response header `Transfer-Encoding: chunked`) are not cached by CacheControl when `requests>=2.6.1` is used.\n\nIt seems this issue appeared with the inclusion of shazow/urllib3@f21c2a2b73e4256ba2787f8470dbee6872987d2d in the `requests` codebase via kennethreitz/requests@5fcd843eb23e8e84cd5f60c6d372ef4d678f80fe.\n\nExample script demonstrating the issue:\n\n``` python\nIn [1]: import requests\nIn [2]: from requests.packages import urllib3\nIn [3]: from cachecontrol import CacheControl\nIn [4]: urllib3.disable_warnings()  # https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning\nIn [5]: sess = requests.session()\nIn [6]: cached_sess = CacheControl(sess)\nIn [7]: # non-chunked response\nIn [8]: response = cached_sess.get('http://httpbin.org/cache/60')\nIn [9]: response.headers.get('transfer-encoding') is None\nOut[9]: True\nIn [10]: response.from_cache\nOut[10]: False\nIn [11]: response = cached_sess.get('http://httpbin.org/cache/60')\nIn [12]: response.from_cache\nOut[12]: True\nIn [13]: # chunked response\nIn [14]: response = cached_sess.get('https://tor.eff.org/')\nIn [15]: response.headers.get('transfer-encoding') == 'chunked'\nOut[15]: True\nIn [16]: response.from_cache\nOut[16]: False\nIn [17]: response = cached_sess.get('https://tor.eff.org/')\nIn [18]: response.from_cache\nOut[18]: False\nIn [19]:\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/80", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/80/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/80/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/80", "id": 86484509, "node_id": "MDU6SXNzdWU4NjQ4NDUwOQ==", "number": 80, "title": "Last Modified heuristic is not working", "user": {"login": "miso-belica", "id": 1072330, "node_id": "MDQ6VXNlcjEwNzIzMzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1072330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miso-belica", "html_url": "https://github.com/miso-belica", "followers_url": "https://api.github.com/users/miso-belica/followers", "following_url": "https://api.github.com/users/miso-belica/following{/other_user}", "gists_url": "https://api.github.com/users/miso-belica/gists{/gist_id}", "starred_url": "https://api.github.com/users/miso-belica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miso-belica/subscriptions", "organizations_url": "https://api.github.com/users/miso-belica/orgs", "repos_url": "https://api.github.com/users/miso-belica/repos", "events_url": "https://api.github.com/users/miso-belica/events{/privacy}", "received_events_url": "https://api.github.com/users/miso-belica/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-06-09T07:12:34Z", "updated_at": "2015-07-25T11:16:29Z", "closed_at": "2015-06-29T15:38:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\nthanks for this lib but I think `LastModified` heuristic is not working. here is the sample:\n\n``` python\nIn [1]: import requests\nIn [2]: from cachecontrol import CacheControlAdapter\nIn [3]: from cachecontrol.heuristics import LastModified\nIn [4]: adapter = CacheControlAdapter(heuristic=LastModified())\nIn [5]: sess = requests.Session()\nIn [6]: sess.mount('http://', adapter)\nIn [7]: sess.mount('https://', adapter)\nIn [8]: r = sess.get(\"https://app.roihunter.com/data/example-feed-roi-hunter.xml\")\nIn [9]: r.from_cache\nOut[9]: False\nIn [10]: r = sess.get(\"https://app.roihunter.com/data/example-feed-roi-hunter.xml\")\nIn [11]: r.from_cache\nOut[11]: False\n```\n\nExpected behavior is that the second call of `r.from_cache` (`Out[11]`) returns `True`.\n\nCan you explain me the behavior or fix it please? Thanks\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/78", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/78/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/78/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/78", "id": 75376738, "node_id": "MDU6SXNzdWU3NTM3NjczOA==", "number": 78, "title": "Please clarify license", "user": {"login": "warsaw", "id": 210184, "node_id": "MDQ6VXNlcjIxMDE4NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/210184?v=4", "gravatar_id": "", "url": "https://api.github.com/users/warsaw", "html_url": "https://github.com/warsaw", "followers_url": "https://api.github.com/users/warsaw/followers", "following_url": "https://api.github.com/users/warsaw/following{/other_user}", "gists_url": "https://api.github.com/users/warsaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/warsaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/warsaw/subscriptions", "organizations_url": "https://api.github.com/users/warsaw/orgs", "repos_url": "https://api.github.com/users/warsaw/repos", "events_url": "https://api.github.com/users/warsaw/events{/privacy}", "received_events_url": "https://api.github.com/users/warsaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-05-11T22:15:30Z", "updated_at": "2015-05-16T03:27:47Z", "closed_at": "2015-05-11T23:14:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am planning on packaging CacheControl for Debian and Ubuntu.  It's now a dependency for pip and I intend to update pip.  However, CacheControl's license is vague.\n\nThe only reference to a license at all that I can find is in the setup.py where it says \"MIT\", but that's actually not clear enough.  Do you specifically mean this OSI license:\n\nhttp://opensource.org/licenses/mit-license.php\n\n?\n\nCould you include an explicit LICENSE.txt file or similar in a future release?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/77", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/77/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/77/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/77", "id": 73103147, "node_id": "MDU6SXNzdWU3MzEwMzE0Nw==", "number": 77, "title": "When are contents written to the path returned by url_to_file_path [question]", "user": {"login": "ElDeveloper", "id": 375307, "node_id": "MDQ6VXNlcjM3NTMwNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/375307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ElDeveloper", "html_url": "https://github.com/ElDeveloper", "followers_url": "https://api.github.com/users/ElDeveloper/followers", "following_url": "https://api.github.com/users/ElDeveloper/following{/other_user}", "gists_url": "https://api.github.com/users/ElDeveloper/gists{/gist_id}", "starred_url": "https://api.github.com/users/ElDeveloper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ElDeveloper/subscriptions", "organizations_url": "https://api.github.com/users/ElDeveloper/orgs", "repos_url": "https://api.github.com/users/ElDeveloper/repos", "events_url": "https://api.github.com/users/ElDeveloper/events{/privacy}", "received_events_url": "https://api.github.com/users/ElDeveloper/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-05-04T19:15:37Z", "updated_at": "2015-05-12T16:04:03Z", "closed_at": "2015-05-12T16:04:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm able to retrieve the path where contents will be written by a FileCache object, however as the function's docstring indicates there's no guarantee that this file will exist. What I'm finding is that for most URLs I try, the contents are written immediately as I perform the request, see the two examples below.\n\nWhen I do the following, the path doesn't exist:\n\n``` python\nIn [54]: from cachecontrol.caches import FileCache\n\nIn [55]: from cachecontrol.caches.file_cache import url_to_file_path\n\nIn [56]: from contextlib import contextmanager\n\nIn [57]: from tempfile import gettempdir\n\nIn [58]: file_cache = FileCache(gettempdir())\n\nIn [60]: from cachecontrol import CacheControl\n\nIn [61]: sess = CacheControl(requests.Session(), cache=file_cache)\n\nIn [62]: url = ('http://www.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?retmax=1'\n   ....:        '00&retmode=text&tool=skbio&db=nucleotide&id=459567&rettype=fas'\n   ....:        'ta&retstart=0&email=foo@bar.com')\n\nIn [63]: req = sess.get(url)\n\nIn [64]: cached_fp = url_to_file_path(url, file_cache)\n\nIn [65]: from os.path import exists\n\nIn [67]: _  = req.content\n\n# the file doesn't seem to exist\nIn [68]: exists(cached_fp)\nOut[68]: False\n```\n\nHowever, if I try this with another URL that has the same contents, the file exists.\n\n``` python\nIn [69]: other_url = 'https://gist.githubusercontent.com/ElDeveloper/e0144eaf196f3a641409/raw/f14a6ff47b880537da3067b322526a91124ff742/-'\n\nIn [70]: req = sess.get(other_url)\n\nIn [71]: cached_fp = url_to_file_path(other_url, file_cache)\n\n# the file exists YAY :D\nIn [72]: exists(cached_fp)\nOut[72]: True\n```\n\nI don't know if this is something specific to the server I'm trying to retrieve the data from or if this is an expected behavior of FileCache. Any help is greatly appreciated.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/76", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/76/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/76/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/76", "id": 72436805, "node_id": "MDU6SXNzdWU3MjQzNjgwNQ==", "number": 76, "title": "Errors if I use the url twice", "user": {"login": "SethDusek", "id": 9436380, "node_id": "MDQ6VXNlcjk0MzYzODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9436380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SethDusek", "html_url": "https://github.com/SethDusek", "followers_url": "https://api.github.com/users/SethDusek/followers", "following_url": "https://api.github.com/users/SethDusek/following{/other_user}", "gists_url": "https://api.github.com/users/SethDusek/gists{/gist_id}", "starred_url": "https://api.github.com/users/SethDusek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SethDusek/subscriptions", "organizations_url": "https://api.github.com/users/SethDusek/orgs", "repos_url": "https://api.github.com/users/SethDusek/repos", "events_url": "https://api.github.com/users/SethDusek/events{/privacy}", "received_events_url": "https://api.github.com/users/SethDusek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-05-01T13:47:11Z", "updated_at": "2015-05-01T14:12:00Z", "closed_at": "2015-05-01T14:12:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is my code\n\n``` python\nwikisess = requests.Session()\nwikises = CacheControl(wikisess)\nsearch = wikises.get(\"http://wiki.roblox.com/api.php?format=json&action=query&list=search&srwhat=title&srsearch=%s\"%query)\n```\n\nIf I were to do the same url again, even with a different query variable it says this\n\nFile \"c:\\Anaconda\\lib\\site-packages\\requests\\sessions.py\", line 477, in get\n    return self.request('GET', url, *_kwargs)\n  File \"c:\\Anaconda\\lib\\site-packages\\requests\\sessions.py\", line 465, in reques\nt\n    resp = self.send(prep, *_send_kwargs)\n  File \"c:\\Anaconda\\lib\\site-packages\\requests\\sessions.py\", line 573, in send\n    r = adapter.send(request, **kwargs)\n  File \"c:\\Anaconda\\lib\\site-packages\\cachecontrol\\adapter.py\", line 46, in send\n\n```\nresp = super(CacheControlAdapter, self).send(request, **kw)\n```\n\n  File \"c:\\Anaconda\\lib\\site-packages\\requests\\adapters.py\", line 415, in send\n    raise ConnectionError(err, request=request)\nrequests.exceptions.ConnectionError: ('Connection aborted.', ResponseNotReady())\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/75", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/75/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/75/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/75", "id": 70691095, "node_id": "MDU6SXNzdWU3MDY5MTA5NQ==", "number": 75, "title": "Documentation doesn't explain how to force read from cache even if expired", "user": {"login": "yobuntu", "id": 2544762, "node_id": "MDQ6VXNlcjI1NDQ3NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2544762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yobuntu", "html_url": "https://github.com/yobuntu", "followers_url": "https://api.github.com/users/yobuntu/followers", "following_url": "https://api.github.com/users/yobuntu/following{/other_user}", "gists_url": "https://api.github.com/users/yobuntu/gists{/gist_id}", "starred_url": "https://api.github.com/users/yobuntu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yobuntu/subscriptions", "organizations_url": "https://api.github.com/users/yobuntu/orgs", "repos_url": "https://api.github.com/users/yobuntu/repos", "events_url": "https://api.github.com/users/yobuntu/events{/privacy}", "received_events_url": "https://api.github.com/users/yobuntu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-04-24T13:30:33Z", "updated_at": "2015-06-29T15:39:26Z", "closed_at": "2015-06-29T15:39:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is very usefull when dealing whit paginated api. ( exemple : github api).\n\nwhen a query have a lot of response, there is pagination whith header links to follow.\nwhen a query is on several pages a 304 not modified, mean not modified for all of them, so no need to make the conditionnal query for all the next pages.\nI can't find a way to go read directly in the cache without trying a query first\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/74", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/74/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/74/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/74", "id": 68470231, "node_id": "MDU6SXNzdWU2ODQ3MDIzMQ==", "number": 74, "title": "Accessing the original response and status code", "user": {"login": "rouge8", "id": 237005, "node_id": "MDQ6VXNlcjIzNzAwNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/237005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rouge8", "html_url": "https://github.com/rouge8", "followers_url": "https://api.github.com/users/rouge8/followers", "following_url": "https://api.github.com/users/rouge8/following{/other_user}", "gists_url": "https://api.github.com/users/rouge8/gists{/gist_id}", "starred_url": "https://api.github.com/users/rouge8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rouge8/subscriptions", "organizations_url": "https://api.github.com/users/rouge8/orgs", "repos_url": "https://api.github.com/users/rouge8/repos", "events_url": "https://api.github.com/users/rouge8/events{/privacy}", "received_events_url": "https://api.github.com/users/rouge8/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-04-14T19:03:46Z", "updated_at": "2015-06-29T15:39:54Z", "closed_at": "2015-06-29T15:39:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to access the original response/status code of cached responses? This would be useful for measuring cache hits/misses.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/73", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/73/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/73/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/73", "id": 65029341, "node_id": "MDU6SXNzdWU2NTAyOTM0MQ==", "number": 73, "title": "Memcache as a storage backend", "user": {"login": "jinpark", "id": 1847812, "node_id": "MDQ6VXNlcjE4NDc4MTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1847812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jinpark", "html_url": "https://github.com/jinpark", "followers_url": "https://api.github.com/users/jinpark/followers", "following_url": "https://api.github.com/users/jinpark/following{/other_user}", "gists_url": "https://api.github.com/users/jinpark/gists{/gist_id}", "starred_url": "https://api.github.com/users/jinpark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jinpark/subscriptions", "organizations_url": "https://api.github.com/users/jinpark/orgs", "repos_url": "https://api.github.com/users/jinpark/repos", "events_url": "https://api.github.com/users/jinpark/events{/privacy}", "received_events_url": "https://api.github.com/users/jinpark/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-03-29T06:22:30Z", "updated_at": "2015-06-29T15:51:06Z", "closed_at": "2015-06-29T15:41:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "After redis gets sorted out, memcache please? :)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/63", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/63/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/63/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/63", "id": 60189849, "node_id": "MDU6SXNzdWU2MDE4OTg0OQ==", "number": 63, "title": "Is there a good way to get the path of the underlying cached file for a given URL?", "user": {"login": "hiltonc", "id": 470753, "node_id": "MDQ6VXNlcjQ3MDc1Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/470753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hiltonc", "html_url": "https://github.com/hiltonc", "followers_url": "https://api.github.com/users/hiltonc/followers", "following_url": "https://api.github.com/users/hiltonc/following{/other_user}", "gists_url": "https://api.github.com/users/hiltonc/gists{/gist_id}", "starred_url": "https://api.github.com/users/hiltonc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hiltonc/subscriptions", "organizations_url": "https://api.github.com/users/hiltonc/orgs", "repos_url": "https://api.github.com/users/hiltonc/repos", "events_url": "https://api.github.com/users/hiltonc/events{/privacy}", "received_events_url": "https://api.github.com/users/hiltonc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-03-07T04:21:28Z", "updated_at": "2015-04-08T13:44:16Z", "closed_at": "2015-03-13T03:08:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using CacheControl as a wrapper around session with a FileCache. It works great, but, given a URL, I'd like to be able to get the path to the underlying file (if it has been cached). This would greatly speed up my use of it, because without it I need to read the contents of the file through the session, then write them out to the file system again for use in a command external to my program.\n\nI've been looking through the code but I can't find an obvious way to do that. I can directly access the FileCache, but I'm having trouble converting the URL to a cache key. Is this use case supported, or can it be?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/56", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/56/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/56/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/56", "id": 54599330, "node_id": "MDU6SXNzdWU1NDU5OTMzMA==", "number": 56, "title": "Support caching 301 Moved Permanently", "user": {"login": "ionrock", "id": 509830, "node_id": "MDQ6VXNlcjUwOTgzMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/509830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ionrock", "html_url": "https://github.com/ionrock", "followers_url": "https://api.github.com/users/ionrock/followers", "following_url": "https://api.github.com/users/ionrock/following{/other_user}", "gists_url": "https://api.github.com/users/ionrock/gists{/gist_id}", "starred_url": "https://api.github.com/users/ionrock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ionrock/subscriptions", "organizations_url": "https://api.github.com/users/ionrock/orgs", "repos_url": "https://api.github.com/users/ionrock/repos", "events_url": "https://api.github.com/users/ionrock/events{/privacy}", "received_events_url": "https://api.github.com/users/ionrock/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 43858369, "node_id": "MDU6TGFiZWw0Mzg1ODM2OQ==", "url": "https://api.github.com/repos/ionrock/cachecontrol/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-16T17:06:42Z", "updated_at": "2015-02-09T06:07:42Z", "closed_at": "2015-02-09T06:07:42Z", "author_association": "OWNER", "active_lock_reason": null, "body": "In requests issue [#2409](https://github.com/kennethreitz/requests/issues/2409#issuecomment-70224889) there is a discussion of removing the specialized history cache that maintains permanent redirects. A solution would be to recommend CacheControl, but unfortunately, as CacheControl assumes requests will handle 301s, it isn't supported. \n\nCacheControl should handle 301s by always caching the response unless other caching headers are included that change the behavior. Similarly, any cache busting headers should be respected as usual.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/55", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/55/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/55/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/55", "id": 53741400, "node_id": "MDU6SXNzdWU1Mzc0MTQwMA==", "number": 55, "title": "BaseHeuristic is too low-level to be the only API offered", "user": {"login": "ssokolow", "id": 46915, "node_id": "MDQ6VXNlcjQ2OTE1", "avatar_url": "https://avatars3.githubusercontent.com/u/46915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssokolow", "html_url": "https://github.com/ssokolow", "followers_url": "https://api.github.com/users/ssokolow/followers", "following_url": "https://api.github.com/users/ssokolow/following{/other_user}", "gists_url": "https://api.github.com/users/ssokolow/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssokolow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssokolow/subscriptions", "organizations_url": "https://api.github.com/users/ssokolow/orgs", "repos_url": "https://api.github.com/users/ssokolow/repos", "events_url": "https://api.github.com/users/ssokolow/events{/privacy}", "received_events_url": "https://api.github.com/users/ssokolow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-01-08T11:36:56Z", "updated_at": "2015-06-29T15:41:50Z", "closed_at": "2015-06-29T15:41:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been thinking about the design of `BaseHeuristic` and, while the new design seems good as a base class (for the uses I've thought of so far), I think that, for common-case uses, it's going to result in a lot of people who don't have the time to become HTTP 1.1 experts reinventing boilerplate and introducing subtle bugs in their header parsing and resetting code.\n\nThere should probably be a subclass with a name like `SimpleBaseHeuristic` where, instead of `update_headers(self, response)` and `warning(self, response)`, you override `set_expiry(self, response, current_expiry)` and `return` the new expiry value.\n\n(That is, a subclass which provides a single, shared implementation of going from multiple subtly different HTTP headers to one \"this is how long it'll last\" number and then back again and also handles the warning 110/113 selection automatically )\n\nIf you don't beat me to it, I'll try to write it as soon as I can figure out the least hacky way to call `CacheController.parse_cache_control` from a `BaseHeuristic` subclass so I can access the value of `max-age` without duplicating the `Cache-Control` parsing code.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/54", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/54/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/54/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/54", "id": 53618072, "node_id": "MDU6SXNzdWU1MzYxODA3Mg==", "number": 54, "title": "Documentation doesn't explain algorithm used to determine whether to cache based on time", "user": {"login": "ssokolow", "id": 46915, "node_id": "MDQ6VXNlcjQ2OTE1", "avatar_url": "https://avatars3.githubusercontent.com/u/46915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssokolow", "html_url": "https://github.com/ssokolow", "followers_url": "https://api.github.com/users/ssokolow/followers", "following_url": "https://api.github.com/users/ssokolow/following{/other_user}", "gists_url": "https://api.github.com/users/ssokolow/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssokolow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssokolow/subscriptions", "organizations_url": "https://api.github.com/users/ssokolow/orgs", "repos_url": "https://api.github.com/users/ssokolow/repos", "events_url": "https://api.github.com/users/ssokolow/events{/privacy}", "received_events_url": "https://api.github.com/users/ssokolow/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 82000968, "node_id": "MDU6TGFiZWw4MjAwMDk2OA==", "url": "https://api.github.com/repos/ionrock/cachecontrol/labels/docs", "name": "docs", "color": "fef2c0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-07T10:28:10Z", "updated_at": "2015-06-29T15:42:18Z", "closed_at": "2015-06-29T15:42:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a \"cache for the greater of X and the site-specified cache duration\" wrapper that I'd like to convert into a CacheControl heuristic but the documentation doesn't explain how the heuristics system actually interacts with Time Priority caching.\n\nAs such, I'm forced to dig around in the code to figure out which headers I have to override and in what ways to ensure the desired behaviour. (And while it is very nice, clean code, that's still a documentation bug)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/53", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/53/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/53/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/53", "id": 53617779, "node_id": "MDU6SXNzdWU1MzYxNzc3OQ==", "number": 53, "title": "Documentation doesn't explain how to force-invalidate a cached value", "user": {"login": "ssokolow", "id": 46915, "node_id": "MDQ6VXNlcjQ2OTE1", "avatar_url": "https://avatars3.githubusercontent.com/u/46915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssokolow", "html_url": "https://github.com/ssokolow", "followers_url": "https://api.github.com/users/ssokolow/followers", "following_url": "https://api.github.com/users/ssokolow/following{/other_user}", "gists_url": "https://api.github.com/users/ssokolow/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssokolow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssokolow/subscriptions", "organizations_url": "https://api.github.com/users/ssokolow/orgs", "repos_url": "https://api.github.com/users/ssokolow/repos", "events_url": "https://api.github.com/users/ssokolow/events{/privacy}", "received_events_url": "https://api.github.com/users/ssokolow/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 82000968, "node_id": "MDU6TGFiZWw4MjAwMDk2OA==", "url": "https://api.github.com/repos/ionrock/cachecontrol/labels/docs", "name": "docs", "color": "fef2c0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-01-07T10:24:46Z", "updated_at": "2018-11-22T14:02:27Z", "closed_at": "2015-06-29T15:42:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I write various scripts which automate tasks in my daily life and, both as a courtesy to site owners and to make it harder for paranoid ones to be jerks, I always incorporate a minimum cache duration. (For most uses, something like \"1 hour for 2xx/3xx, 5 minutes for 4xx/5xx\", In the past, this was implemented as a separate wrapper layer around httplib2)\n\nHowever, sometimes, I do need to force the cache to be ignored. Ideally, I'd like to have both of the following options available to me, but the docs say nothing about either one:\n1. When using Time Priority caching, I'd like a way to invalidate the time and just use the ETag on a per-request basis.\n2. For either caching strategy, I'd like a way to just invalidate and refresh the cache entry, period.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/52", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/52/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/52/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/52", "id": 53616796, "node_id": "MDU6SXNzdWU1MzYxNjc5Ng==", "number": 52, "title": "\"Caching Heuristics\" example code has two typos", "user": {"login": "ssokolow", "id": 46915, "node_id": "MDQ6VXNlcjQ2OTE1", "avatar_url": "https://avatars3.githubusercontent.com/u/46915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssokolow", "html_url": "https://github.com/ssokolow", "followers_url": "https://api.github.com/users/ssokolow/followers", "following_url": "https://api.github.com/users/ssokolow/following{/other_user}", "gists_url": "https://api.github.com/users/ssokolow/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssokolow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssokolow/subscriptions", "organizations_url": "https://api.github.com/users/ssokolow/orgs", "repos_url": "https://api.github.com/users/ssokolow/repos", "events_url": "https://api.github.com/users/ssokolow/events{/privacy}", "received_events_url": "https://api.github.com/users/ssokolow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-01-07T10:12:44Z", "updated_at": "2015-01-07T22:16:06Z", "closed_at": "2015-01-07T22:16:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I copy-pasted the example code from http://cachecontrol.readthedocs.org/en/latest/custom_heuristics.html#caching-heuristics into my program to serve as a starting point, my Flake8+PyLint integration warned me of several typos:\n1. `cachecontrol.heuristic` doesn't exist. You missed an `s` at the end of that.\n2. You use `headers` without defining it and then don't `return` it.\n3. You didn't import `calendar` before using it.\n\n(Which really makes me glad I already had plans to integration-test my Requests+CacheControl stack using [HTTPretty](http://falcao.it/HTTPretty/) to ensure it's actually behaving as intended. Would you like some of that test code once I've gotten around to writing it?)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/51", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/51/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/51/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/51", "id": 53616079, "node_id": "MDU6SXNzdWU1MzYxNjA3OQ==", "number": 51, "title": "BaseHeuristic.warning is insufficiently flexible to implement HTTP caching spec properly", "user": {"login": "ssokolow", "id": 46915, "node_id": "MDQ6VXNlcjQ2OTE1", "avatar_url": "https://avatars3.githubusercontent.com/u/46915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssokolow", "html_url": "https://github.com/ssokolow", "followers_url": "https://api.github.com/users/ssokolow/followers", "following_url": "https://api.github.com/users/ssokolow/following{/other_user}", "gists_url": "https://api.github.com/users/ssokolow/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssokolow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssokolow/subscriptions", "organizations_url": "https://api.github.com/users/ssokolow/orgs", "repos_url": "https://api.github.com/users/ssokolow/repos", "events_url": "https://api.github.com/users/ssokolow/events{/privacy}", "received_events_url": "https://api.github.com/users/ssokolow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-01-07T10:03:46Z", "updated_at": "2015-01-07T17:43:08Z", "closed_at": "2015-01-07T17:43:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to the spec, you're supposed to return [warning 113](http://tools.ietf.org/html/rfc7234#section-5.5.4) if your cache has intentionally served up something more than 24 hours stale. However, you neglected to expose the response's information to `warning` so I can check how old the response is.\n\nAs is, I'm probably going to wind up overriding `BaseHeuristic.apply` instead, which grates on me since the docs say nothing about its API stability.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/49", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/49/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/49/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/49", "id": 51838887, "node_id": "MDU6SXNzdWU1MTgzODg4Nw==", "number": 49, "title": "No cache when no internet connection - even with forever set to True", "user": {"login": "femtotrader", "id": 5049737, "node_id": "MDQ6VXNlcjUwNDk3Mzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5049737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/femtotrader", "html_url": "https://github.com/femtotrader", "followers_url": "https://api.github.com/users/femtotrader/followers", "following_url": "https://api.github.com/users/femtotrader/following{/other_user}", "gists_url": "https://api.github.com/users/femtotrader/gists{/gist_id}", "starred_url": "https://api.github.com/users/femtotrader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/femtotrader/subscriptions", "organizations_url": "https://api.github.com/users/femtotrader/orgs", "repos_url": "https://api.github.com/users/femtotrader/repos", "events_url": "https://api.github.com/users/femtotrader/events{/privacy}", "received_events_url": "https://api.github.com/users/femtotrader/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 43858369, "node_id": "MDU6TGFiZWw0Mzg1ODM2OQ==", "url": "https://api.github.com/repos/ionrock/cachecontrol/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2014-12-12T18:44:21Z", "updated_at": "2018-01-27T06:32:06Z", "closed_at": "2018-01-27T06:32:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nI try this code with my internet connection enabled\n\n```\nimport requests\nfrom cachecontrol import CacheControl\nfrom cachecontrol.caches import FileCache\n\nreq_session = requests.session()\ncache = FileCache('web_cache', forever=True)\nsession = CacheControl(req_session, cache=cache)\nresponse = session.get('http://www.google.com')\nprint(response.status_code)\n```\n\nI disabled my internet connection and run again this code.\n\nIt raised `ConnectionError: ('Connection aborted.', gaierror(8, 'nodename nor servname provided, or not known'))`\n\nThat's probably a misunderstanding from my side. But I thought that if I store in a file both request and response I could get it when my connection was disabled.\n\nI also don't understand why this `forever` flag exists. In my understanding we should pass a custom caching strategies (aka caching heuristics) to CacheControl\n\n```\nclass Forever(BaseHeuristic):\n    pass\n```\n\nand use it like\n\n```\nreq_session = requests.session()\ncache = FileCache('web_cache')\nsession = CacheControl(req_session, cache=cache, heuristic=Forever())\nresponse = session.get('http://www.google.com')\nprint(response.status_code)\n```\n\nAny idea ? but that's like I said probably a misunderstanding from my side.\n\nKind regards\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/48", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/48/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/48/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/48", "id": 51835653, "node_id": "MDU6SXNzdWU1MTgzNTY1Mw==", "number": 48, "title": "ExpireAfter should be a cache heuristic that CacheControl provides", "user": {"login": "femtotrader", "id": 5049737, "node_id": "MDQ6VXNlcjUwNDk3Mzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5049737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/femtotrader", "html_url": "https://github.com/femtotrader", "followers_url": "https://api.github.com/users/femtotrader/followers", "following_url": "https://api.github.com/users/femtotrader/following{/other_user}", "gists_url": "https://api.github.com/users/femtotrader/gists{/gist_id}", "starred_url": "https://api.github.com/users/femtotrader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/femtotrader/subscriptions", "organizations_url": "https://api.github.com/users/femtotrader/orgs", "repos_url": "https://api.github.com/users/femtotrader/repos", "events_url": "https://api.github.com/users/femtotrader/events{/privacy}", "received_events_url": "https://api.github.com/users/femtotrader/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-12-12T18:12:34Z", "updated_at": "2014-12-21T20:36:08Z", "closed_at": "2014-12-21T20:36:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nsee https://github.com/ionrock/cachecontrol/issues/47\n\nNot sure that cache heuristics name is great... but what I'm saying is to create your own heuristics derived from BaseHeuristic and to put it in CacheControl source so it will be much easier to use (for beginners like me).\n\n```\nclass ExpireAfter(BaseHeuristic):\n    pass\n```\n\nThis heuristic will never look at headers... just UTC datetime `datetime.utcnow()` to decide if data need to be downloaded again.\n\nIt could be used like this:\n\n```\nfrom requests import Session\nfrom cachecontrol import CacheControl, ExpireAfter\n\nexpire_after = 60 * 5 # cache_expiration (seconds) 0: no cache - None: no cache expiration\n#ideally expire_after could also be a datetime.timedelta\nsess = CacheControl(Session(), heuristic=ExpireAfter(expire_after))\nr = sess.get('http://google.com')\n```\n\nUnfortunately I don't feel confortable with CacheControl to provide you code to do this.\n\nKind regards\n\nPS: I'm coming here because of https://github.com/kennethreitz/requests/issues/2378\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/47", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/47/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/47/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/47", "id": 51830516, "node_id": "MDU6SXNzdWU1MTgzMDUxNg==", "number": 47, "title": "Sample caching heuristics for \"expire_after\"", "user": {"login": "femtotrader", "id": 5049737, "node_id": "MDQ6VXNlcjUwNDk3Mzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5049737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/femtotrader", "html_url": "https://github.com/femtotrader", "followers_url": "https://api.github.com/users/femtotrader/followers", "following_url": "https://api.github.com/users/femtotrader/following{/other_user}", "gists_url": "https://api.github.com/users/femtotrader/gists{/gist_id}", "starred_url": "https://api.github.com/users/femtotrader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/femtotrader/subscriptions", "organizations_url": "https://api.github.com/users/femtotrader/orgs", "repos_url": "https://api.github.com/users/femtotrader/repos", "events_url": "https://api.github.com/users/femtotrader/events{/privacy}", "received_events_url": "https://api.github.com/users/femtotrader/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-12-12T17:21:07Z", "updated_at": "2014-12-12T17:54:01Z", "closed_at": "2014-12-12T17:54:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nit will be nice to provide a sample caching heuristics for \"`expire_after`\"\n(like [`requests_cache`](https://github.com/reclosedev/requests-cache)).\nIt should ignores all cache headers, it should just caches the data for the time you specify.\n\nKind regards\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/46", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/46/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/46/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/46", "id": 51829411, "node_id": "MDU6SXNzdWU1MTgyOTQxMQ==", "number": 46, "title": "SQLite storage backends", "user": {"login": "femtotrader", "id": 5049737, "node_id": "MDQ6VXNlcjUwNDk3Mzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5049737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/femtotrader", "html_url": "https://github.com/femtotrader", "followers_url": "https://api.github.com/users/femtotrader/followers", "following_url": "https://api.github.com/users/femtotrader/following{/other_user}", "gists_url": "https://api.github.com/users/femtotrader/gists{/gist_id}", "starred_url": "https://api.github.com/users/femtotrader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/femtotrader/subscriptions", "organizations_url": "https://api.github.com/users/femtotrader/orgs", "repos_url": "https://api.github.com/users/femtotrader/repos", "events_url": "https://api.github.com/users/femtotrader/events{/privacy}", "received_events_url": "https://api.github.com/users/femtotrader/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 43858371, "node_id": "MDU6TGFiZWw0Mzg1ODM3MQ==", "url": "https://api.github.com/repos/ionrock/cachecontrol/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2014-12-12T17:10:42Z", "updated_at": "2017-10-25T02:03:05Z", "closed_at": "2015-06-29T15:44:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nit will be nice if CacheControl could provide SQLite support.\n\nKind regards\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/45", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/45/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/45/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/45", "id": 50993899, "node_id": "MDU6SXNzdWU1MDk5Mzg5OQ==", "number": 45, "title": "Can we update the version on pypi ?", "user": {"login": "cournape", "id": 25111, "node_id": "MDQ6VXNlcjI1MTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/25111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cournape", "html_url": "https://github.com/cournape", "followers_url": "https://api.github.com/users/cournape/followers", "following_url": "https://api.github.com/users/cournape/following{/other_user}", "gists_url": "https://api.github.com/users/cournape/gists{/gist_id}", "starred_url": "https://api.github.com/users/cournape/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cournape/subscriptions", "organizations_url": "https://api.github.com/users/cournape/orgs", "repos_url": "https://api.github.com/users/cournape/repos", "events_url": "https://api.github.com/users/cournape/events{/privacy}", "received_events_url": "https://api.github.com/users/cournape/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-12-04T16:10:52Z", "updated_at": "2014-12-04T17:21:25Z", "closed_at": "2014-12-04T16:19:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The latest on pypi 0.10.4.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/44", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/44/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/44/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/44", "id": 44737614, "node_id": "MDU6SXNzdWU0NDczNzYxNA==", "number": 44, "title": "inaccurate cachecontrol.cache docstring?", "user": {"login": "jab", "id": 64992, "node_id": "MDQ6VXNlcjY0OTky", "avatar_url": "https://avatars1.githubusercontent.com/u/64992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jab", "html_url": "https://github.com/jab", "followers_url": "https://api.github.com/users/jab/followers", "following_url": "https://api.github.com/users/jab/following{/other_user}", "gists_url": "https://api.github.com/users/jab/gists{/gist_id}", "starred_url": "https://api.github.com/users/jab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jab/subscriptions", "organizations_url": "https://api.github.com/users/jab/orgs", "repos_url": "https://api.github.com/users/jab/repos", "events_url": "https://api.github.com/users/jab/events{/privacy}", "received_events_url": "https://api.github.com/users/jab/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-10-02T20:52:29Z", "updated_at": "2014-10-02T21:37:44Z", "closed_at": "2014-10-02T21:25:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/ionrock/cachecontrol/blob/master/cachecontrol/cache.py#L3 says\n\n> The cache object API for implementing caches. The default is just a dictionary, which in turns means it is not threadsafe for writing.\n\nBut http://cachecontrol.readthedocs.org/en/latest/storage.html#dictcache says \"It is a simple threadsafe dictionary\", and the `set` and `delete` implementations do in fact lock: https://github.com/ionrock/cachecontrol/blob/master/cachecontrol/cache.py#L30\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/42", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/42/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/42/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/42", "id": 44085809, "node_id": "MDU6SXNzdWU0NDA4NTgwOQ==", "number": 42, "title": "There should be a way for CacheControlAdapter to forward close to cache classes", "user": {"login": "cournape", "id": 25111, "node_id": "MDQ6VXNlcjI1MTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/25111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cournape", "html_url": "https://github.com/cournape", "followers_url": "https://api.github.com/users/cournape/followers", "following_url": "https://api.github.com/users/cournape/following{/other_user}", "gists_url": "https://api.github.com/users/cournape/gists{/gist_id}", "starred_url": "https://api.github.com/users/cournape/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cournape/subscriptions", "organizations_url": "https://api.github.com/users/cournape/orgs", "repos_url": "https://api.github.com/users/cournape/repos", "events_url": "https://api.github.com/users/cournape/events{/privacy}", "received_events_url": "https://api.github.com/users/cournape/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-09-26T17:23:24Z", "updated_at": "2014-10-08T22:12:23Z", "closed_at": "2014-10-08T22:12:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Some caches use non trivial resources such as files, db connection, etc... Right now,  CacheControlAdapter does not offer a way to close them.\n\nThe redis-based cache is buggy for this reason, for example.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/39", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/39/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/39/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/39", "id": 41593353, "node_id": "MDU6SXNzdWU0MTU5MzM1Mw==", "number": 39, "title": "recent change to urllib3's is_fp_closed broke cachecontrol for Python 3 and PyPy", "user": {"login": "requiredfield", "id": 6235698, "node_id": "MDQ6VXNlcjYyMzU2OTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/6235698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/requiredfield", "html_url": "https://github.com/requiredfield", "followers_url": "https://api.github.com/users/requiredfield/followers", "following_url": "https://api.github.com/users/requiredfield/following{/other_user}", "gists_url": "https://api.github.com/users/requiredfield/gists{/gist_id}", "starred_url": "https://api.github.com/users/requiredfield/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/requiredfield/subscriptions", "organizations_url": "https://api.github.com/users/requiredfield/orgs", "repos_url": "https://api.github.com/users/requiredfield/repos", "events_url": "https://api.github.com/users/requiredfield/events{/privacy}", "received_events_url": "https://api.github.com/users/requiredfield/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2014-08-31T19:00:13Z", "updated_at": "2014-09-18T21:16:47Z", "closed_at": "2014-09-10T19:12:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "FileCache stopped working for me with Python 3 and PyPy, and I think I tracked down the cause to a recent change to urllib3's `is_fp_closed` utility.\n\nFrom https://github.com/ionrock/cachecontrol/blob/master/cachecontrol/filewrapper.py#L32\n\n``` python\n        # Is this the best way to figure out if the file has been completely\n        #   consumed?\n        if is_fp_closed(self.__fp):\n            self.__callback(self.__buf.getvalue())\n```\n\nIn my Python 3 and PyPy environments, is_fp_closed was never returning True. Reverting the changes in shazow/urllib3#435 fixed it.\n\nI tried cloning urllib3 and running the tox tests to dig in further but couldn't get the tests to run, and thought my best next step would be reporting here.\n\nIt may be that cachecontrol's code is just fine and the issue is in urllib3, but I figured I'd confirm here first. Does that look like the problem?\n\nThanks in advance for taking a look!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/36", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/36/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/36/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/36", "id": 40414545, "node_id": "MDU6SXNzdWU0MDQxNDU0NQ==", "number": 36, "title": "support setting max size on cache store", "user": {"login": "requiredfield", "id": 6235698, "node_id": "MDQ6VXNlcjYyMzU2OTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/6235698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/requiredfield", "html_url": "https://github.com/requiredfield", "followers_url": "https://api.github.com/users/requiredfield/followers", "following_url": "https://api.github.com/users/requiredfield/following{/other_user}", "gists_url": "https://api.github.com/users/requiredfield/gists{/gist_id}", "starred_url": "https://api.github.com/users/requiredfield/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/requiredfield/subscriptions", "organizations_url": "https://api.github.com/users/requiredfield/orgs", "repos_url": "https://api.github.com/users/requiredfield/repos", "events_url": "https://api.github.com/users/requiredfield/events{/privacy}", "received_events_url": "https://api.github.com/users/requiredfield/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-08-16T16:38:18Z", "updated_at": "2015-01-16T16:45:16Z", "closed_at": "2015-01-16T16:45:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "IIUC, currently cache stores are allowed to grow without bound, is that right? If so, is there any interest in adding support for setting a max size on the cache store? If you're using a FileCache, for instance, and have a limited amount of disk space (e.g. you're on the AWS free tier), this would be useful.\n\nFor the simplest possible first pass at this, once the max size is reached, the cache store could simply decline to cache anything further, ideally notifying the user somehow (maybe if you use this setting you can pass in a logger). A less naive implementation could intelligently select items to evict from the cache to make room for additional ones, e.g. on the basis of hit rate. (Item with lowest hit rate gets evicted first; ties could be broken with item size and/or least recency of access. Actually, should look at how browsers do it.)\n\nThanks for your consideration, and for all the great work on cachecontrol!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/32", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/32/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/32/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/32", "id": 38216606, "node_id": "MDU6SXNzdWUzODIxNjYwNg==", "number": 32, "title": "CacheControl should cache any cacheable response", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2014-07-18T22:16:17Z", "updated_at": "2014-07-28T20:36:03Z", "closed_at": "2014-07-28T20:36:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[According to the RFC](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.1), \"By default, a response is cacheable if the requirements of the request method, request header fields, and the response status indicate that it is cacheable.\"\n\nFor this reason, and also because it's the behavior of other clients such as browsers, I would expect a simple 200 response to a simple GET request to be cached by CacheControl if there are no headers limiting the caching. CacheControl should cache these idefinitely. There should not need to be any flag such as in #18 to invoke this behavior.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/15", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/15/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/15/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/15", "id": 28627405, "node_id": "MDU6SXNzdWUyODYyNzQwNQ==", "number": 15, "title": "RedisCache should use built-in expiration", "user": {"login": "Schnouki", "id": 64833, "node_id": "MDQ6VXNlcjY0ODMz", "avatar_url": "https://avatars3.githubusercontent.com/u/64833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Schnouki", "html_url": "https://github.com/Schnouki", "followers_url": "https://api.github.com/users/Schnouki/followers", "following_url": "https://api.github.com/users/Schnouki/following{/other_user}", "gists_url": "https://api.github.com/users/Schnouki/gists{/gist_id}", "starred_url": "https://api.github.com/users/Schnouki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Schnouki/subscriptions", "organizations_url": "https://api.github.com/users/Schnouki/orgs", "repos_url": "https://api.github.com/users/Schnouki/repos", "events_url": "https://api.github.com/users/Schnouki/events{/privacy}", "received_events_url": "https://api.github.com/users/Schnouki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-03-03T14:59:49Z", "updated_at": "2015-02-07T06:08:14Z", "closed_at": "2015-02-07T06:08:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Redis has an excellent support for expiration: when adding a key, you can specify in how many seconds it will expire and be automatically deleted. It would be great if `RedisCache` could use that when there's a `max-age` or `expires` header in the response.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/14", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/14/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/14/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/14", "id": 28627276, "node_id": "MDU6SXNzdWUyODYyNzI3Ng==", "number": 14, "title": "RedisCache doesn't work with Python 3", "user": {"login": "Schnouki", "id": 64833, "node_id": "MDQ6VXNlcjY0ODMz", "avatar_url": "https://avatars3.githubusercontent.com/u/64833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Schnouki", "html_url": "https://github.com/Schnouki", "followers_url": "https://api.github.com/users/Schnouki/followers", "following_url": "https://api.github.com/users/Schnouki/following{/other_user}", "gists_url": "https://api.github.com/users/Schnouki/gists{/gist_id}", "starred_url": "https://api.github.com/users/Schnouki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Schnouki/subscriptions", "organizations_url": "https://api.github.com/users/Schnouki/orgs", "repos_url": "https://api.github.com/users/Schnouki/repos", "events_url": "https://api.github.com/users/Schnouki/events{/privacy}", "received_events_url": "https://api.github.com/users/Schnouki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-03-03T14:58:19Z", "updated_at": "2014-03-03T17:41:10Z", "closed_at": "2014-03-03T17:40:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "There's an `ImportError` when trying to import `cachecontrol.caches`. The fix is simple: first try to import `cPickle`, and on `ImportError` fallback to importing from `pickle` (same as `FileCache`).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/12", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/12/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/12/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/12", "id": 28350620, "node_id": "MDU6SXNzdWUyODM1MDYyMA==", "number": 12, "title": "Update documentation with a discussion of timezones and expiration", "user": {"login": "ionrock", "id": 509830, "node_id": "MDQ6VXNlcjUwOTgzMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/509830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ionrock", "html_url": "https://github.com/ionrock", "followers_url": "https://api.github.com/users/ionrock/followers", "following_url": "https://api.github.com/users/ionrock/following{/other_user}", "gists_url": "https://api.github.com/users/ionrock/gists{/gist_id}", "starred_url": "https://api.github.com/users/ionrock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ionrock/subscriptions", "organizations_url": "https://api.github.com/users/ionrock/orgs", "repos_url": "https://api.github.com/users/ionrock/repos", "events_url": "https://api.github.com/users/ionrock/events{/privacy}", "received_events_url": "https://api.github.com/users/ionrock/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-02-26T17:08:35Z", "updated_at": "2014-03-12T23:52:20Z", "closed_at": "2014-03-12T23:52:20Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The docs should mention something about the potential pitfalls of using non-timezone aware dates. This is something that both servers and clients should consider, which is relevant for CacheControl when used with clients written by the same organization as the service.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/10", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/10/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/10/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/10", "id": 28105408, "node_id": "MDU6SXNzdWUyODEwNTQwOA==", "number": 10, "title": "FileCache: hash table keys too long?", "user": {"login": "mxjeff", "id": 2509872, "node_id": "MDQ6VXNlcjI1MDk4NzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/2509872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mxjeff", "html_url": "https://github.com/mxjeff", "followers_url": "https://api.github.com/users/mxjeff/followers", "following_url": "https://api.github.com/users/mxjeff/following{/other_user}", "gists_url": "https://api.github.com/users/mxjeff/gists{/gist_id}", "starred_url": "https://api.github.com/users/mxjeff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mxjeff/subscriptions", "organizations_url": "https://api.github.com/users/mxjeff/orgs", "repos_url": "https://api.github.com/users/mxjeff/repos", "events_url": "https://api.github.com/users/mxjeff/events{/privacy}", "received_events_url": "https://api.github.com/users/mxjeff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-02-22T21:40:38Z", "updated_at": "2014-03-01T00:18:22Z", "closed_at": "2014-03-01T00:18:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nUsing FileCache I had a problem with the length of b64-encoded keys.\n\nI'm playing with a webservice which lead me to request quite long URLs.\nIt is not absurd to reach 200 characters long URL which in turn produces an even longer b64-encoded string.\n\nFor instance the largest URL found in examples of this \"Roseta Stone\" webservice\u00a0[0] from EchoNest is already 145 characters long, which makes 196 once b64-encoded.\nIt leaves a 54 characters headroom before the 255 characters limit of most file-systems.\n\nOf course I hit that limit saving the cache in a XDG sub-folder of my home directory (on linux/ext4) :D\n\nAs I said these kind of long URLs could be quite common while playing with such webservices, I don't think this is an unusual use case.\n\nThen why not using md5 or sha2 hash functions, they both provide fixed length keys and minimize the problem.\nI've started using md5 since there are no security issues with collision attack IMHO (but I'm far from a security expert)\u00a0:\n\n``` python\n   def encode(self, x):\n        return md5(x.encode()).hexdigest()\n```\n\nI used md5 to ensure to alway have it available on python distribution (same with sha1, sha224, sha256, sha384,sha512 cf. [1]).\n\nCheers\n\n[0]\u00a0http://developer.echonest.com/docs/v4/index.html#project-rosetta-stone\n[1]\u00a0http://docs.python.org/library/hashlib.html\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/9", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/9/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/9/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/9", "id": 28080867, "node_id": "MDU6SXNzdWUyODA4MDg2Nw==", "number": 9, "title": "Update documentation with a notice regarding GET param ordering and caching", "user": {"login": "ionrock", "id": 509830, "node_id": "MDQ6VXNlcjUwOTgzMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/509830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ionrock", "html_url": "https://github.com/ionrock", "followers_url": "https://api.github.com/users/ionrock/followers", "following_url": "https://api.github.com/users/ionrock/following{/other_user}", "gists_url": "https://api.github.com/users/ionrock/gists{/gist_id}", "starred_url": "https://api.github.com/users/ionrock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ionrock/subscriptions", "organizations_url": "https://api.github.com/users/ionrock/orgs", "repos_url": "https://api.github.com/users/ionrock/repos", "events_url": "https://api.github.com/users/ionrock/events{/privacy}", "received_events_url": "https://api.github.com/users/ionrock/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ionrock", "id": 509830, "node_id": "MDQ6VXNlcjUwOTgzMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/509830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ionrock", "html_url": "https://github.com/ionrock", "followers_url": "https://api.github.com/users/ionrock/followers", "following_url": "https://api.github.com/users/ionrock/following{/other_user}", "gists_url": "https://api.github.com/users/ionrock/gists{/gist_id}", "starred_url": "https://api.github.com/users/ionrock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ionrock/subscriptions", "organizations_url": "https://api.github.com/users/ionrock/orgs", "repos_url": "https://api.github.com/users/ionrock/repos", "events_url": "https://api.github.com/users/ionrock/events{/privacy}", "received_events_url": "https://api.github.com/users/ionrock/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ionrock", "id": 509830, "node_id": "MDQ6VXNlcjUwOTgzMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/509830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ionrock", "html_url": "https://github.com/ionrock", "followers_url": "https://api.github.com/users/ionrock/followers", "following_url": "https://api.github.com/users/ionrock/following{/other_user}", "gists_url": "https://api.github.com/users/ionrock/gists{/gist_id}", "starred_url": "https://api.github.com/users/ionrock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ionrock/subscriptions", "organizations_url": "https://api.github.com/users/ionrock/orgs", "repos_url": "https://api.github.com/users/ionrock/repos", "events_url": "https://api.github.com/users/ionrock/events{/privacy}", "received_events_url": "https://api.github.com/users/ionrock/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2014-02-21T23:19:42Z", "updated_at": "2014-03-13T00:20:06Z", "closed_at": "2014-03-13T00:20:06Z", "author_association": "OWNER", "active_lock_reason": null, "body": "In #8 it was pointed out that when query string arguments are ordered differently it presents the opportunity for a cache miss, even thought the request is logically the same. \n\nWhile one option would be to ensure the params are ordered, that seems heavy handed in that it could be confusing. \n\nFor the time being the docs should be updated with a section about cache usages where this issue can be brought up. It can be called \"best practices\", \"faq\" or \"common pitfalls\".\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionrock/cachecontrol/issues/8", "repository_url": "https://api.github.com/repos/ionrock/cachecontrol", "labels_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/8/comments", "events_url": "https://api.github.com/repos/ionrock/cachecontrol/issues/8/events", "html_url": "https://github.com/ionrock/cachecontrol/issues/8", "id": 28046882, "node_id": "MDU6SXNzdWUyODA0Njg4Mg==", "number": 8, "title": "params order in query", "user": {"login": "mxjeff", "id": 2509872, "node_id": "MDQ6VXNlcjI1MDk4NzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/2509872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mxjeff", "html_url": "https://github.com/mxjeff", "followers_url": "https://api.github.com/users/mxjeff/followers", "following_url": "https://api.github.com/users/mxjeff/following{/other_user}", "gists_url": "https://api.github.com/users/mxjeff/gists{/gist_id}", "starred_url": "https://api.github.com/users/mxjeff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mxjeff/subscriptions", "organizations_url": "https://api.github.com/users/mxjeff/orgs", "repos_url": "https://api.github.com/users/mxjeff/repos", "events_url": "https://api.github.com/users/mxjeff/events{/privacy}", "received_events_url": "https://api.github.com/users/mxjeff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-02-21T14:56:01Z", "updated_at": "2014-02-21T23:19:42Z", "closed_at": "2014-02-21T20:58:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "``` python\nreq = requests.get('http://example.org', params={'test':'ok', 'api_key': 's3cr3t', 'bqj':'None'})\nprint(req.url)\n'http://example.org/?bqj=None&api_key=s3cr3t&test=ok'\n...\n# then in another python interpreter instance, the same code might give:\nprint(req.url)  # http://example.org/?bqj=None&api_key=s3cr3t&test=ok\n'http://example.org/?test=ok&api_key=s3cr3t&bqj=None'\n```\n\nI noticed, for the same set of http data, that order in the query part (from parse_uri) might change from a run to another.\n\nSince the key for the cache is computed from uri we might end up with tow different keys for the same http resource.\n\nThis can be an issue for persistent http cache.\n\nI'm not a (python|http) expert, I don't if this is actually an issue or a misuse of requests/caching.\n\nAm I wrong, missing something?\n\nCheers\n", "performed_via_github_app": null, "score": 1.0}]}