{"total_count": 678, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1687", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1687/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1687/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1687/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1687", "id": 682281794, "node_id": "MDU6SXNzdWU2ODIyODE3OTQ=", "number": 1687, "title": "Inconsistent behavior on CloudFormation Template regarding BinaryMediaType", "user": {"login": "homanleest", "id": 69944720, "node_id": "MDQ6VXNlcjY5OTQ0NzIw", "avatar_url": "https://avatars0.githubusercontent.com/u/69944720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/homanleest", "html_url": "https://github.com/homanleest", "followers_url": "https://api.github.com/users/homanleest/followers", "following_url": "https://api.github.com/users/homanleest/following{/other_user}", "gists_url": "https://api.github.com/users/homanleest/gists{/gist_id}", "starred_url": "https://api.github.com/users/homanleest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/homanleest/subscriptions", "organizations_url": "https://api.github.com/users/homanleest/orgs", "repos_url": "https://api.github.com/users/homanleest/repos", "events_url": "https://api.github.com/users/homanleest/events{/privacy}", "received_events_url": "https://api.github.com/users/homanleest/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-20T01:25:37Z", "updated_at": "2020-08-20T20:43:21Z", "closed_at": "2020-08-20T02:34:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\n\r\nBefore reporting a new issue, make sure we don't have any duplicates already open or closed by\r\nsearching the issues list. If there is a duplicate, re-open or add a comment to the\r\nexisting issue instead of creating a new one. If you are reporting a bug,\r\nmake sure to include relevant information asked below to help with debugging.\r\n\r\n## GENERAL HELP QUESTIONS ##\r\nGithub Issues is for bug reports and feature requests. If you have general support\r\nquestions, the following locations are a good place:\r\n\r\n- Post a question in StackOverflow  with \"aws-sam\" tag\r\n\r\n-->\r\nNot sure is that the right channel for this but basically we hit a really inconsistent issue when deploying our APIGateway  through CloudFormation template \r\n\r\n**Description:**\r\n\r\nWhen we set the BinaryMediaTypes option in CFT AWS::ApiGateway::RestApi resource, it have unpredictable behavior after the stack is build/updated. it will have some media-type missing. For example, if we put setting like this:    \r\nBinaryMediaTypes:\r\n        - 'image/png'\r\n        - 'image/jpeg'\r\n        - 'multipart/form-data'\r\n        - 'application/pdf'\r\nIn API Gateway after the stack has successfully rebuild with this template change, it will only have 0-4 of above media-type set in APIGateway. The most recent one is the image/jpeg missing from the APIGW dashboard\r\n\r\n**Steps to reproduce the issue:**\r\n1. Run the CF stack update by running with the template with above setting:\r\n  ApiGateway:\r\n    Type: 'AWS::ApiGateway::RestApi'\r\n    Description: The API Gateway proxying requests to the API server\r\n    Properties:\r\n      Description: !Sub 'A RESTful API for a ${ApplicationName}'\r\n      Body: \r\n        [swagger thing]\r\n      BinaryMediaTypes:\r\n        - [x number of items]\r\n2. Wait for the build is finish in CloudFormation\r\n3. Go to API Gatwway dashboard, find the API you just updated by CF, go to \"Settings\" of that API. observe the \"Binary Media Types\" section\r\n\r\n**Observed result:**\r\nHave zero to x number of items under that section. Randomly and have no true logic I can think off\r\n\r\n**Expected result:**\r\nHave the x number of items set as in the CloudFormation template\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1676", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1676/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1676/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1676/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1676", "id": 672213687, "node_id": "MDU6SXNzdWU2NzIyMTM2ODc=", "number": 1676, "title": "Using a !If on and Event Timer for Enabled is always True", "user": {"login": "jwalsh2me", "id": 22819585, "node_id": "MDQ6VXNlcjIyODE5NTg1", "avatar_url": "https://avatars0.githubusercontent.com/u/22819585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwalsh2me", "html_url": "https://github.com/jwalsh2me", "followers_url": "https://api.github.com/users/jwalsh2me/followers", "following_url": "https://api.github.com/users/jwalsh2me/following{/other_user}", "gists_url": "https://api.github.com/users/jwalsh2me/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwalsh2me/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwalsh2me/subscriptions", "organizations_url": "https://api.github.com/users/jwalsh2me/orgs", "repos_url": "https://api.github.com/users/jwalsh2me/repos", "events_url": "https://api.github.com/users/jwalsh2me/events{/privacy}", "received_events_url": "https://api.github.com/users/jwalsh2me/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-03T17:00:31Z", "updated_at": "2020-08-07T20:34:22Z", "closed_at": "2020-08-07T20:34:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "SEE ALSO in `aws-sam-cli` https://github.com/awslabs/aws-sam-cli/issues/2150\r\n\r\n<!-- Make sure we don't have an existing Issue that reports the bug you are seeing (both open and closed). \r\nIf you do find an existing Issue, re-open or add a comment to that Issue instead of creating a new one. -->\r\n\r\n### Description\r\n\r\nI have a Condition in my SAM Template to check the ENV Parameter it True.  I am trying to pass that into a Timer Event to either be true or false under `Enabled`.  It always sends it as `true`. Setting that value to either `true` or `false` works as expected, but using `Enabled: !If [ProdEnv, \"false\", \"false\"]` or `Enabled: !If [ProdEnv, \"true\", \"false\"]` always sets it to true and enabled.\r\n\r\n### Steps to reproduce\r\n\r\n`SAM CLI, version 1.0.0`\r\n\r\nsnipped template:\r\n\r\n```\r\n<SNIP>\r\nParameters:\r\n  ENV:\r\n    Type: String\r\n    Default: prod\r\n    AllowedValues:\r\n      - prod\r\n      - stage\r\n  ProdDbKMSKeyID:\r\n    Type: \"AWS::SSM::Parameter::Value<String>\"\r\n    Default: \"/db/prod/KMSKeyID\"\r\n  NonProdKMSKeyID:\r\n    Type: \"AWS::SSM::Parameter::Value<String>\"\r\n    Default: \"/db/nonprod/KMSKeyID\"\r\n  VendorsKMSKeyID:\r\n    Type: \"AWS::SSM::Parameter::Value<String>\"\r\n    Default: \"/vendors-prod-lambda/KMSKeyID\"\r\n\r\nConditions:\r\n  ProdEnv: !Equals [!Ref ENV, prod]\r\n Environment:\r\n        Variables:\r\n          app_env: !Ref ENV\r\n          dbhost: !Sub \"{{resolve:ssm:/db/${ENV}/edw/hostname:1}}\"\r\n          dbuser: !Sub \"{{resolve:ssm:/db/${ENV}/edw/lambda_user:1}}\"\r\n          dbname: !Sub \"{{resolve:ssm:/db/${ENV}/edw/dbname:1}}\"\r\n          <SNIP>\r\n      VpcConfig:\r\n        SecurityGroupIds:\r\n          - <removed>\r\n        SubnetIds:\r\n          - <removed>\r\n          - <removed>\r\n      Events:\r\n        Timer:\r\n          Type: Schedule\r\n          Properties:\r\n            Schedule: cron(00 16 ? * MON,WED *) \r\n            Description: sFTP\r\n            Enabled: !If [ProdEnv, true, false]\r\n      Policies:\r\n        - AWSLambdaExecute\r\n        - VPCAccessPolicy: {}\r\n        - KMSDecryptPolicy:\r\n            KeyId: !If [ProdEnv, !Ref ProdDbKMSKeyID, !Ref NonProdKMSKeyID]\r\n        - KMSDecryptPolicy:\r\n            KeyId: !Ref VendorsKMSKeyID\r\n<SNIP>\r\n```\r\n\r\n### Observed result\r\n\r\nThe ENV is set to be stage, other !If work as expected above however the Timer is set to be Enabled.\r\n\r\nNow if I skip the !If and just pass a `true` or `false` to Enabled it works as expected.  So I am not sure if this is just not supported for the Timer or if there is a problem with the transform.\r\n\r\n### Expected result\r\n\r\nI expected the Timer to have been set to `false`.\r\n\r\n```\r\n      Events:\r\n        Timer:\r\n          Type: Schedule\r\n          Properties:\r\n            Schedule: cron(00 16 ? * MON,WED *) \r\n            Description: sFTP\r\n            Enabled: !If [ProdEnv, true, false]\r\n```\r\nAlso tried a `!Ref ProdEnv` to see if that would pass the True/False it was also always True.\r\n\r\n\r\n### Additional environment details (Ex: Windows, Mac, Amazon Linux etc)\r\n\r\n1. OS: macOS 10.15.6\r\n2. `sam --version`: 1.0.0\r\n\r\n`Add --debug flag to command you are running`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1655", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1655/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1655/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1655/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1655", "id": 657211031, "node_id": "MDU6SXNzdWU2NTcyMTEwMzE=", "number": 1655, "title": "Start of list found where not expected on API Gateway requestParameters definition", "user": {"login": "MatteoInfi", "id": 67247621, "node_id": "MDQ6VXNlcjY3MjQ3NjIx", "avatar_url": "https://avatars2.githubusercontent.com/u/67247621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatteoInfi", "html_url": "https://github.com/MatteoInfi", "followers_url": "https://api.github.com/users/MatteoInfi/followers", "following_url": "https://api.github.com/users/MatteoInfi/following{/other_user}", "gists_url": "https://api.github.com/users/MatteoInfi/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatteoInfi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatteoInfi/subscriptions", "organizations_url": "https://api.github.com/users/MatteoInfi/orgs", "repos_url": "https://api.github.com/users/MatteoInfi/repos", "events_url": "https://api.github.com/users/MatteoInfi/events{/privacy}", "received_events_url": "https://api.github.com/users/MatteoInfi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-15T09:38:24Z", "updated_at": "2020-07-16T02:26:52Z", "closed_at": "2020-07-16T02:26:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\n\r\nI have set API Gateway to call SNS but I keep getting this error:\r\n\r\n```\r\n    \"Error\": {\r\n        \"Code\": \"MalformedInput\",\r\n        \"Message\": \"Start of list found where not expected\",\r\n        \"Type\": \"Sender\"\r\n    }\r\n\r\n```\r\n\r\nI am trying to pass both an `id` from a path parameter and the user id `sub` coming from the context authorizer\r\n\r\n**Steps to reproduce the issue:**\r\n\r\nThis is my definition for the route\r\n\r\n```\r\n          /path/{id}/stuff:\r\n            post:\r\n              consumes:\r\n                - \"application/json\"\r\n              produces:\r\n                - \"application/json\"\r\n              parameters:\r\n                - name: \"id\"\r\n                  in: \"path\"\r\n                  required: true\r\n                  type: \"string\"\r\n              responses:\r\n                '200':\r\n                  description: \"200 response\"\r\n                  headers:\r\n                    Access-Control-Allow-Headers:\r\n                      type: \"string\"\r\n                    Access-Control-Allow-Methods:\r\n                      type: \"string\"\r\n                    Access-Control-Allow-Origin:\r\n                      type: \"string\"\r\n                  schema:\r\n                    $ref: \"#/definitions/Empty\"\r\n              x-amazon-apigateway-request-validator: \"Validate body, query string parameters,\\\r\n                \\ and headers\"\r\n              x-amazon-apigateway-integration:\r\n                credentials: !GetAtt APIGatewayRole.Arn\r\n                uri: !Sub arn:aws:apigateway:${AWS::Region}:sns:action/Publish\r\n                responses:\r\n                  default:\r\n                    statusCode: \"200\"\r\n                    responseParameters:\r\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key'\"\r\n                      method.response.header.Access-Control-Allow-Methods: \"'*'\"\r\n                      method.response.header.Access-Control-Allow-Origin: \"'*'\"\r\n                requestParameters:\r\n                  integration.request.querystring.TopicArn: !Sub \"'${myTopicArn}'\"\r\n                  integration.request.querystring.Message.id: method.request.path.id\r\n                  integration.request.querystring.Message.sub: context.authorizer.claims.sub\r\n                passthroughBehavior: \"when_no_templates\"\r\n                httpMethod: \"POST\"\r\n                type: \"aws\"\r\n\r\n\r\n```\r\n\r\n\r\n**Observed result:**\r\nError\r\n\r\n**Expected result:**\r\nIs it even possible to pass multiple values to a single request parameter key in integration requests? JSON like or encoded string?\r\n\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1650", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1650/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1650/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1650/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1650", "id": 651499517, "node_id": "MDU6SXNzdWU2NTE0OTk1MTc=", "number": 1650, "title": "AWS::ApiGatewayV2::Integration and AWS::ApiGatewayV2::Route deleted after updating stack", "user": {"login": "rvadim", "id": 7434399, "node_id": "MDQ6VXNlcjc0MzQzOTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/7434399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rvadim", "html_url": "https://github.com/rvadim", "followers_url": "https://api.github.com/users/rvadim/followers", "following_url": "https://api.github.com/users/rvadim/following{/other_user}", "gists_url": "https://api.github.com/users/rvadim/gists{/gist_id}", "starred_url": "https://api.github.com/users/rvadim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rvadim/subscriptions", "organizations_url": "https://api.github.com/users/rvadim/orgs", "repos_url": "https://api.github.com/users/rvadim/repos", "events_url": "https://api.github.com/users/rvadim/events{/privacy}", "received_events_url": "https://api.github.com/users/rvadim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-06T12:30:00Z", "updated_at": "2020-08-18T13:02:02Z", "closed_at": "2020-08-18T13:02:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\n\r\nAPI Gateway route /versions which points to S3 object was deleted after updating /api/ specific route with lambda.\r\nSource template:\r\n```yaml\r\nAWSTemplateFormatVersion: '2010-09-09'\r\nTransform: AWS::Serverless-2016-10-31\r\nDescription: \"\"\r\n\r\nGlobals:\r\n  Function:\r\n    Timeout: 20\r\n\r\nResources:\r\n  S3Bucket:\r\n    Type: AWS::S3::Bucket\r\n    Properties:\r\n      BucketName: !Sub \"bucket-name-${AWS::StackName}\"\r\n  S3BucketPolicy:\r\n    Type: AWS::S3::BucketPolicy\r\n    Properties:\r\n      Bucket: !Ref S3Bucket\r\n      PolicyDocument:\r\n        Statement:\r\n          -\r\n            Effect: Allow\r\n            Action: 's3:GetObject'\r\n            Resource:\r\n              - !Sub \"arn:aws:s3:::${S3Bucket}/*\"\r\n            Principal: \"*\"\r\n  HttpApi:\r\n    Type: AWS::Serverless::HttpApi\r\n    Properties:\r\n      CorsConfiguration:\r\n        AllowHeaders: ['*']\r\n        AllowMethods: ['*']\r\n        AllowOrigins: ['*']\r\n      Domain:\r\n        DomainName: example.com\r\n        CertificateArn: arn\r\n        Route53:\r\n          HostedZoneId: zone-id\r\n  APIVersionsIntegration:\r\n    Type: 'AWS::ApiGatewayV2::Integration'\r\n    Properties:\r\n      ApiId: !Ref HttpApi\r\n      IntegrationType: HTTP_PROXY\r\n      IntegrationUri: !Sub \"https://${S3Bucket}.s3-${AWS::Region}.amazonaws.com/versions.json\"\r\n      IntegrationMethod: GET\r\n      PayloadFormatVersion: \"1.0\"\r\n  APIVersionsRoute:\r\n    Type: AWS::ApiGatewayV2::Route\r\n    Properties:\r\n      ApiId: !Ref HttpApi\r\n      RouteKey: 'GET /versions'\r\n      Target: !Join\r\n        - /\r\n        - - integrations\r\n          - !Ref APIVersionsIntegration\r\n  KCSmaster:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      CodeUri: lambdas/master\r\n      Handler: com.compiler.server.lambdas.StreamLambdaHandler::handleRequest\r\n      Runtime: java8\r\n      MemorySize: 2048\r\n      Events:\r\n        ApiEvent:\r\n          Type: HttpApi\r\n          Properties:\r\n            ApiId: !Ref HttpApi\r\n            Path: /api/{proxy+}\r\n            Method: any\r\n            PayloadFormatVersion: \"1.0\"\r\n  KCSmasterOld:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      CodeUri: lambdas/master\r\n      Handler: com.compiler.server.lambdas.StreamLambdaHandler::handleRequest\r\n      Runtime: java8\r\n      MemorySize: 2048\r\n      Events:\r\n        ApiEvent:\r\n          Type: HttpApi\r\n          Properties:\r\n            ApiId: !Ref HttpApi\r\n            Path: /Server\r\n            Method: any\r\n            PayloadFormatVersion: \"1.0\"\r\n  KCS1372:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      CodeUri: lambdas/1.3.72\r\n      Handler: com.compiler.server.lambdas.StreamLambdaHandler::handleRequest\r\n      Runtime: java8\r\n      MemorySize: 2048\r\n      Events:\r\n        ApiEvent:\r\n          Type: HttpApi\r\n          Properties:\r\n            ApiId: !Ref HttpApi\r\n            Path: /api/1.3.72/{proxy+}\r\n            Method: any\r\n            PayloadFormatVersion: \"1.0\"\r\n  KCS14m2:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      CodeUri: lambdas/1.4-M2\r\n      Handler: com.compiler.server.lambdas.StreamLambdaHandler::handleRequest\r\n      Runtime: java8\r\n      MemorySize: 2048\r\n      Events:\r\n        ApiEvent:\r\n          Type: HttpApi\r\n          Properties:\r\n            ApiId: !Ref HttpApi\r\n            Path: /api/1.4-M2/{proxy+}\r\n            Method: any\r\n            PayloadFormatVersion: \"1.0\"\r\n```\r\nversions.json:\r\n```\r\n[\r\n  {\r\n    \"version\": \"1.4-M3\"\r\n  },\r\n  {\r\n    \"version\": \"1.3.72\",\r\n    \"latestStable\": true\r\n  }\r\n]\r\n```\r\nPatch:\r\n```\r\n--- a/template.yaml\r\n+++ b/template.yaml\r\n@@ -104,10 +104,10 @@ Resources:\r\n             Path: /api/1.3.72/{proxy+}\r\n             Method: any\r\n             PayloadFormatVersion: \"1.0\"\r\n-  KCS14m2:\r\n+  KCS14m3:\r\n     Type: AWS::Serverless::Function\r\n     Properties:\r\n-      CodeUri: lambdas/1.4-M2\r\n+      CodeUri: lambdas/1.4-M3\r\n       Handler: com.compiler.server.lambdas.StreamLambdaHandler::handleRequest\r\n       Runtime: java8\r\n       MemorySize: 2048\r\n@@ -116,7 +116,7 @@ Resources:\r\n           Type: HttpApi\r\n           Properties:\r\n             ApiId: !Ref HttpApi\r\n-            Path: /api/1.4-M2/{proxy+}\r\n+            Path: /api/1.4-M3/{proxy+}\r\n             Method: any\r\n             PayloadFormatVersion: \"1.0\"\r\n```\r\n\r\n**Steps to reproduce the issue:**\r\n1. Deploy source stack\r\n2. Curl apigateway endpoint /versions -> 200\r\n3. Apply patch\r\n4. Deploy again\r\n5. Curl apigateway endpoint /versions -> 404\r\n\r\n**Observed result:**\r\n```\r\nUploading to kcs-prod/c63a38241d610b16d311a32fc3aa60fb.template  4062 / 4062.0  (100.00%)\r\nWaiting for changeset to be created..\r\n\r\nCloudFormation stack changeset\r\n------------------------------------------------------------------------------------------------\r\nOperation                        LogicalResourceId                ResourceType                   \r\n------------------------------------------------------------------------------------------------\r\n+ Add                            KCS14m3ApiEventPermission        AWS::Lambda::Permission        \r\n+ Add                            KCS14m3Role                      AWS::IAM::Role                 \r\n+ Add                            KCS14m3                          AWS::Lambda::Function          \r\n* Modify                         APIVersionsIntegration           AWS::ApiGatewayV2::Integration \r\n* Modify                         APIVersionsRoute                 AWS::ApiGatewayV2::Route       \r\n* Modify                         HttpApiApiGatewayDefaultStage    AWS::ApiGatewayV2::Stage       \r\n* Modify                         HttpApiApiMapping                AWS::ApiGatewayV2::ApiMapping  \r\n* Modify                         HttpApi                          AWS::ApiGatewayV2::Api         \r\n* Modify                         KCS1372ApiEventPermission        AWS::Lambda::Permission        \r\n* Modify                         KCS1372                          AWS::Lambda::Function          \r\n* Modify                         KCSmasterApiEventPermission      AWS::Lambda::Permission        \r\n* Modify                         KCSmasterOldApiEventPermission   AWS::Lambda::Permission        \r\n* Modify                         KCSmasterOld                     AWS::Lambda::Function          \r\n* Modify                         KCSmaster                        AWS::Lambda::Function          \r\n- Delete                         KCS14m2ApiEventPermission        AWS::Lambda::Permission        \r\n- Delete                         KCS14m2Role                      AWS::IAM::Role                 \r\n- Delete                         KCS14m2                          AWS::Lambda::Function          \r\n------------------------------------------------------------------------------------------------\r\n\r\nChangeset created successfully.\r\n\r\n2020-07-06 11:34:56 - Waiting for stack create/update to complete\r\n\r\nCloudFormation events from changeset\r\n-------------------------------------------------------------------------------------------------\r\nResourceStatus           ResourceType             LogicalResourceId        ResourceStatusReason   \r\n-------------------------------------------------------------------------------------------------\r\nCREATE_IN_PROGRESS       AWS::IAM::Role           KCS14m3Role              Resource creation      \r\n                                                                           Initiated              \r\nUPDATE_IN_PROGRESS       AWS::Lambda::Function    KCSmaster                -                      \r\nUPDATE_IN_PROGRESS       AWS::Lambda::Function    KCS1372                  -                      \r\nUPDATE_IN_PROGRESS       AWS::Lambda::Function    KCSmasterOld             -                      \r\nCREATE_IN_PROGRESS       AWS::IAM::Role           KCS14m3Role              -                      \r\nUPDATE_COMPLETE          AWS::Lambda::Function    KCSmasterOld             -                      \r\nUPDATE_COMPLETE          AWS::Lambda::Function    KCSmaster                -                      \r\nUPDATE_COMPLETE          AWS::Lambda::Function    KCS1372                  -                      \r\nCREATE_COMPLETE          AWS::IAM::Role           KCS14m3Role              -                      \r\nCREATE_IN_PROGRESS       AWS::Lambda::Function    KCS14m3                  -                      \r\nCREATE_COMPLETE          AWS::Lambda::Function    KCS14m3                  -                      \r\nCREATE_IN_PROGRESS       AWS::Lambda::Function    KCS14m3                  Resource creation      \r\n                                                                           Initiated              \r\nUPDATE_IN_PROGRESS       AWS::ApiGatewayV2::Api   HttpApi                  -                      \r\nUPDATE_COMPLETE          AWS::ApiGatewayV2::Api   HttpApi                  -                      \r\nCREATE_IN_PROGRESS       AWS::Lambda::Permissio   KCS14m3ApiEventPermiss   Resource creation      \r\n                         n                        ion                      Initiated              \r\nCREATE_IN_PROGRESS       AWS::Lambda::Permissio   KCS14m3ApiEventPermiss   -                      \r\n                         n                        ion                                             \r\nCREATE_COMPLETE          AWS::Lambda::Permissio   KCS14m3ApiEventPermiss   -                      \r\n                         n                        ion                                             \r\nUPDATE_COMPLETE_CLEANU   AWS::CloudFormation::S   kcs-prod                 -                      \r\nP_IN_PROGRESS            tack                                                                     \r\nDELETE_IN_PROGRESS       AWS::Lambda::Permissio   KCS14m2ApiEventPermiss   -                      \r\n                         n                        ion                                             \r\nDELETE_IN_PROGRESS       AWS::Lambda::Function    KCS14m2                  -                      \r\nDELETE_COMPLETE          AWS::Lambda::Permissio   KCS14m2ApiEventPermiss   -                      \r\n                         n                        ion                                             \r\nDELETE_COMPLETE          AWS::Lambda::Function    KCS14m2                  -                      \r\nDELETE_IN_PROGRESS       AWS::IAM::Role           KCS14m2Role              -                      \r\nUPDATE_COMPLETE          AWS::CloudFormation::S   kcs-prod                 -                      \r\n                         tack                                                                     \r\nDELETE_COMPLETE          AWS::IAM::Role           KCS14m2Role              -                      \r\n-------------------------------------------------------------------------------------------------\r\n```\r\nDeploy was successful, but /versions integration deleted and users get 404 when try to access endpoint.\r\n```\r\n{\"message\":\"Not Found\"}\r\n```\r\nThere are no /versions route in UI of API Gateway also integration is deleted\r\n\r\n**Expected result:**\r\nKeep custom API Gateway routes when deploy new versions of another routes.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1648", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1648/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1648/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1648/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1648", "id": 650841628, "node_id": "MDU6SXNzdWU2NTA4NDE2Mjg=", "number": 1648, "title": "34", "user": {"login": "doumachan", "id": 1578614, "node_id": "MDQ6VXNlcjE1Nzg2MTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1578614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doumachan", "html_url": "https://github.com/doumachan", "followers_url": "https://api.github.com/users/doumachan/followers", "following_url": "https://api.github.com/users/doumachan/following{/other_user}", "gists_url": "https://api.github.com/users/doumachan/gists{/gist_id}", "starred_url": "https://api.github.com/users/doumachan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doumachan/subscriptions", "organizations_url": "https://api.github.com/users/doumachan/orgs", "repos_url": "https://api.github.com/users/doumachan/repos", "events_url": "https://api.github.com/users/doumachan/events{/privacy}", "received_events_url": "https://api.github.com/users/doumachan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-04T07:05:52Z", "updated_at": "2020-07-06T17:58:01Z", "closed_at": "2020-07-06T17:58:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\n\r\nBefore reporting a new issue, make sure we don't have any duplicates already open or closed by\r\nsearching the issues list. If there is a duplicate, re-open or add a comment to the\r\nexisting issue instead of creating a new one. If you are reporting a bug,\r\nmake sure to include relevant information asked below to help with debugging.\r\n\r\n## GENERAL HELP QUESTIONS ##\r\nGithub Issues is for bug reports and feature requests. If you have general support\r\nquestions, the following locations are a good place:\r\n\r\n- Post a question in StackOverflow  with \"aws-sam\" tag\r\n\r\n-->\r\n\r\n**Description:**\r\n\r\n<!-- Briefly describe the problem you are facing -->\r\n\r\n**Steps to reproduce the issue:**\r\n1.\r\n2.\r\n3.\r\n\r\n**Observed result:**\r\n\r\n**Expected result:**\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1645", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1645/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1645/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1645/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1645", "id": 650259769, "node_id": "MDU6SXNzdWU2NTAyNTk3Njk=", "number": 1645, "title": "Upgrading from CF to SAM - Stack already exists error", "user": {"login": "what-name", "id": 20590073, "node_id": "MDQ6VXNlcjIwNTkwMDcz", "avatar_url": "https://avatars0.githubusercontent.com/u/20590073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/what-name", "html_url": "https://github.com/what-name", "followers_url": "https://api.github.com/users/what-name/followers", "following_url": "https://api.github.com/users/what-name/following{/other_user}", "gists_url": "https://api.github.com/users/what-name/gists{/gist_id}", "starred_url": "https://api.github.com/users/what-name/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/what-name/subscriptions", "organizations_url": "https://api.github.com/users/what-name/orgs", "repos_url": "https://api.github.com/users/what-name/repos", "events_url": "https://api.github.com/users/what-name/events{/privacy}", "received_events_url": "https://api.github.com/users/what-name/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-02T23:53:49Z", "updated_at": "2020-07-04T19:11:51Z", "closed_at": "2020-07-04T19:11:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\n\r\nBefore reporting a new issue, make sure we don't have any duplicates already open or closed by\r\nsearching the issues list. If there is a duplicate, re-open or add a comment to the\r\nexisting issue instead of creating a new one. If you are reporting a bug,\r\nmake sure to include relevant information asked below to help with debugging.\r\n\r\n## GENERAL HELP QUESTIONS ##\r\nGithub Issues is for bug reports and feature requests. If you have general support\r\nquestions, the following locations are a good place:\r\n\r\n- Post a question in StackOverflow  with \"aws-sam\" tag\r\n\r\n-->\r\n\r\n**Description:**\r\nI'm transitioning from a currently deployed pure CloudFormation stack to a SAM template. This will be the first time deploying to the stack with SAM. I configured my `samconfig.toml` to use the already deployed stack's name. When I do `sam deploy`, I get the following error:\r\n```\r\nError: Failed to create changeset for the stack: my-backend-infra,\r\nAn error occurred (ValidationError) when calling the CreateChangeSet operation:\r\nStack [my-backend-infra] already exists and cannot be created again with the changeSet [samcli-deploy1593732248].\r\n```\r\n\r\n<!-- Briefly describe the problem you are facing -->\r\n\r\n**Steps to reproduce the issue:**\r\n1. Deploy pure CloudFormation template with the name `my-backend-infra`\r\n2. Change (some) resources to SAM\r\n3. `sam deploy --stack-name my-backend-infra`\r\n\r\n**Observed result:**\r\nSAM failed to update/deploy the `my-backend-infra` stack due to it already existing.\r\n\r\n**Expected result:**\r\nSAM updates the `my-backend-infra` stack in-place with the new resources.\r\n\r\nIn the [sam deploy docs](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-deploy.html) it says that the `--stack-name` flag will update the existing stack if it exists. I can not delete the current stack due to it containing other production resources.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1643", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1643/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1643/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1643/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1643", "id": 649807797, "node_id": "MDU6SXNzdWU2NDk4MDc3OTc=", "number": 1643, "title": "make API visible on local network", "user": {"login": "tobiasfeil", "id": 17533713, "node_id": "MDQ6VXNlcjE3NTMzNzEz", "avatar_url": "https://avatars1.githubusercontent.com/u/17533713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobiasfeil", "html_url": "https://github.com/tobiasfeil", "followers_url": "https://api.github.com/users/tobiasfeil/followers", "following_url": "https://api.github.com/users/tobiasfeil/following{/other_user}", "gists_url": "https://api.github.com/users/tobiasfeil/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobiasfeil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobiasfeil/subscriptions", "organizations_url": "https://api.github.com/users/tobiasfeil/orgs", "repos_url": "https://api.github.com/users/tobiasfeil/repos", "events_url": "https://api.github.com/users/tobiasfeil/events{/privacy}", "received_events_url": "https://api.github.com/users/tobiasfeil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-02T10:08:24Z", "updated_at": "2020-07-02T10:11:58Z", "closed_at": "2020-07-02T10:11:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I invoke `sam local start-api`, I can't call the API from a different host on the same network - only from the host that started the API. Please provide an option that makes this possible.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1642", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1642/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1642/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1642/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1642", "id": 649377668, "node_id": "MDU6SXNzdWU2NDkzNzc2Njg=", "number": 1642, "title": "AWS `sam build` literally destroying and corrupting filesystem - \"The tag present in the reparse point buffer is invalid\"", "user": {"login": "Gunt-r", "id": 35857175, "node_id": "MDQ6VXNlcjM1ODU3MTc1", "avatar_url": "https://avatars0.githubusercontent.com/u/35857175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gunt-r", "html_url": "https://github.com/Gunt-r", "followers_url": "https://api.github.com/users/Gunt-r/followers", "following_url": "https://api.github.com/users/Gunt-r/following{/other_user}", "gists_url": "https://api.github.com/users/Gunt-r/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gunt-r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gunt-r/subscriptions", "organizations_url": "https://api.github.com/users/Gunt-r/orgs", "repos_url": "https://api.github.com/users/Gunt-r/repos", "events_url": "https://api.github.com/users/Gunt-r/events{/privacy}", "received_events_url": "https://api.github.com/users/Gunt-r/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-01T22:52:22Z", "updated_at": "2020-07-05T00:46:34Z", "closed_at": "2020-07-05T00:46:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\n\r\n<!-- Briefly describe the problem you are facing -->\r\nCorrupted build filesystem. Failed build. Inability to delete files EVEN with extreme measures like `CHKDSK` or bash `rm`. Filesystem is on Onedrive which has seen this same error occur but in different contexts and with `CHKDSK` able to fix the problem.\r\n\r\nWin 10 Pro 1903\r\n\r\n**Steps to reproduce the issue:**\r\n1. I'd assume have a repository in Onedrive\r\n2. Have a SAM application\r\n3. `sam build` and deploy\r\n4. Make some sort of change and `sam build`\r\n5. That should reproduce issue.\r\n\r\n**Observed result:**\r\n\r\nBroken `.aws-sam` build location. Inability to recover or delete file. Can't continue deployment in current repository.\r\n\r\nHere is the build error:\r\n\r\n`OSError: [WinError 4393] The tag present in the reparse point buffer is invalid: '.aws-sam\\\\build\\\\{function-name}\\\\botocore\\\\data\\\\dynamodbstreams\\\\2012-08-10'`\r\n\r\n\r\nHere is the stacktrace:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"D:\\obj\\windows-release\\37amd64_Release\\msi_python\\zip_amd64\\runpy.py\", line 193, in _run_module_as_main\r\n  File \"D:\\obj\\windows-release\\37amd64_Release\\msi_python\\zip_amd64\\runpy.py\", line 85, in _run_code\r\n  File \"C:\\Program Files\\Amazon\\AWSSAMCLI\\runtime\\lib\\site-packages\\samcli\\__main__.py\", line 12, in <module>\r\n    cli(prog_name=\"sam\")\r\n  File \"C:\\Program Files\\Amazon\\AWSSAMCLI\\runtime\\lib\\site-packages\\click\\core.py\", line 829, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"C:\\Program Files\\Amazon\\AWSSAMCLI\\runtime\\lib\\site-packages\\click\\core.py\", line 782, in main\r\n    rv = self.invoke(ctx)\r\n  File \"C:\\Program Files\\Amazon\\AWSSAMCLI\\runtime\\lib\\site-packages\\click\\core.py\", line 1259, in invoke\r\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\r\n  File \"C:\\Program Files\\Amazon\\AWSSAMCLI\\runtime\\lib\\site-packages\\click\\core.py\", line 1066, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n  File \"C:\\Program Files\\Amazon\\AWSSAMCLI\\runtime\\lib\\site-packages\\click\\core.py\", line 610, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"C:\\Program Files\\Amazon\\AWSSAMCLI\\runtime\\lib\\site-packages\\click\\decorators.py\", line 73, in new_func\r\n    return ctx.invoke(f, obj, *args, **kwargs)\r\n  File \"C:\\Program Files\\Amazon\\AWSSAMCLI\\runtime\\lib\\site-packages\\click\\core.py\", line 610, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"C:\\Program Files\\Amazon\\AWSSAMCLI\\runtime\\lib\\site-packages\\samcli\\lib\\telemetry\\metrics.py\", line 96, in wrapped\r\n    raise exception  # pylint: disable=raising-bad-type\r\n  File \"C:\\Program Files\\Amazon\\AWSSAMCLI\\runtime\\lib\\site-packages\\samcli\\lib\\telemetry\\metrics.py\", line 62, in wrapped\r\n    return_value = func(*args, **kwargs)\r\n  File \"C:\\Program Files\\Amazon\\AWSSAMCLI\\runtime\\lib\\site-packages\\samcli\\commands\\build\\command.py\", line 129, in cli\r\n    mode,\r\n  File \"C:\\Program Files\\Amazon\\AWSSAMCLI\\runtime\\lib\\site-packages\\samcli\\commands\\build\\command.py\", line 179, in do_cli\r\n    mode=mode,\r\n  File \"C:\\Program Files\\Amazon\\AWSSAMCLI\\runtime\\lib\\site-packages\\samcli\\commands\\build\\build_context.py\", line 67, in __enter__\r\n    self._build_dir = self._setup_build_dir(self._build_dir, self._clean)\r\n  File \"C:\\Program Files\\Amazon\\AWSSAMCLI\\runtime\\lib\\site-packages\\samcli\\commands\\build\\build_context.py\", line 89, in _setup_build_dir\r\n    shutil.rmtree(build_dir)\r\n  File \"D:\\obj\\windows-release\\37amd64_Release\\msi_python\\zip_amd64\\shutil.py\", line 516, in rmtree\r\n  File \"D:\\obj\\windows-release\\37amd64_Release\\msi_python\\zip_amd64\\shutil.py\", line 395, in _rmtree_unsafe\r\n  File \"D:\\obj\\windows-release\\37amd64_Release\\msi_python\\zip_amd64\\shutil.py\", line 395, in _rmtree_unsafe\r\n  File \"D:\\obj\\windows-release\\37amd64_Release\\msi_python\\zip_amd64\\shutil.py\", line 395, in _rmtree_unsafe\r\n  [Previous line repeated 2 more times]\r\n  File \"D:\\obj\\windows-release\\37amd64_Release\\msi_python\\zip_amd64\\shutil.py\", line 377, in _rmtree_unsafe\r\n  File \"D:\\obj\\windows-release\\37amd64_Release\\msi_python\\zip_amd64\\shutil.py\", line 374, in _rmtree_unsafe\r\nOSError: [WinError 4393] The tag present in the reparse point buffer is invalid: '.aws-sam\\\\build\\\\printAccountBalanceFunction\\\\botocore\\\\data\\\\dynamodbstreams\\\\2012-08-10'\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/35857175/86298517-47b28780-bc41-11ea-9b1f-340765af771b.png)\r\n\r\n\r\n\r\n\r\n**Expected result:**\r\n\r\nComplete build and no errors.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1633", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1633/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1633/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1633/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1633", "id": 644024261, "node_id": "MDU6SXNzdWU2NDQwMjQyNjE=", "number": 1633, "title": "CORS problem when using User Pool authentication", "user": {"login": "GregSommerville", "id": 35498440, "node_id": "MDQ6VXNlcjM1NDk4NDQw", "avatar_url": "https://avatars3.githubusercontent.com/u/35498440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GregSommerville", "html_url": "https://github.com/GregSommerville", "followers_url": "https://api.github.com/users/GregSommerville/followers", "following_url": "https://api.github.com/users/GregSommerville/following{/other_user}", "gists_url": "https://api.github.com/users/GregSommerville/gists{/gist_id}", "starred_url": "https://api.github.com/users/GregSommerville/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GregSommerville/subscriptions", "organizations_url": "https://api.github.com/users/GregSommerville/orgs", "repos_url": "https://api.github.com/users/GregSommerville/repos", "events_url": "https://api.github.com/users/GregSommerville/events{/privacy}", "received_events_url": "https://api.github.com/users/GregSommerville/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-23T17:36:58Z", "updated_at": "2020-06-24T21:37:11Z", "closed_at": "2020-06-24T21:37:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\n\r\nBefore reporting a new issue, make sure we don't have any duplicates already open or closed by\r\nsearching the issues list. If there is a duplicate, re-open or add a comment to the\r\nexisting issue instead of creating a new one. If you are reporting a bug,\r\nmake sure to include relevant information asked below to help with debugging.\r\n\r\n## GENERAL HELP QUESTIONS ##\r\nGithub Issues is for bug reports and feature requests. If you have general support\r\nquestions, the following locations are a good place:\r\n\r\n- Post a question in StackOverflow  with \"aws-sam\" tag\r\n\r\n-->\r\n\r\n**Description:**\r\nI have a SAM template that creates an API which is authenticated using Cognito user pools.  I've set up CORS to allow everything, but when I try to call the API with a DELETE method, I get an error saying that the call was blocked by CORS policy.  Originally I wrote the API to not use authentication, and that was working.  Adding authentication seems to have introduced a problem.\r\n\r\nHere's the start of my template:\r\n```\r\nGlobals:\r\n  Api:\r\n    Auth:\r\n        DefaultAuthorizer: CognitoAuthorizer\r\n        AddDefaultAuthorizerToCorsPreflight: False\r\n        Authorizers:\r\n          CognitoAuthorizer:\r\n            UserPoolArn: !GetAtt UserPool.Arn\r\n    Cors:\r\n      AllowMethods: \"'*'\"\r\n      AllowHeaders: \"'*'\" \r\n      AllowOrigin: \"'*'\"\r\n\r\n\r\n```\r\nAll GET and POST methods work fine, but a DELETE causes a CORS issue.\r\n\r\nDoes anyone have an idea of what's going wrong?  Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1632", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1632/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1632/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1632/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1632", "id": 643276428, "node_id": "MDU6SXNzdWU2NDMyNzY0Mjg=", "number": 1632, "title": "serverless_app_plugin transforms ApplicationId to us-east-1", "user": {"login": "NathanYocum", "id": 2272758, "node_id": "MDQ6VXNlcjIyNzI3NTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2272758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NathanYocum", "html_url": "https://github.com/NathanYocum", "followers_url": "https://api.github.com/users/NathanYocum/followers", "following_url": "https://api.github.com/users/NathanYocum/following{/other_user}", "gists_url": "https://api.github.com/users/NathanYocum/gists{/gist_id}", "starred_url": "https://api.github.com/users/NathanYocum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NathanYocum/subscriptions", "organizations_url": "https://api.github.com/users/NathanYocum/orgs", "repos_url": "https://api.github.com/users/NathanYocum/repos", "events_url": "https://api.github.com/users/NathanYocum/events{/privacy}", "received_events_url": "https://api.github.com/users/NathanYocum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-22T18:26:24Z", "updated_at": "2020-06-23T00:54:45Z", "closed_at": "2020-06-23T00:34:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:** The serverless_app_plugin transforms SAR application id's to us-east-1 regardless of region / defaults. This makes it so transforming the template can only occur in us-east-1 if the SAR is published in that region.\r\n\r\nNot 100% sure if this is a bug with `sam build`'s usage of the lifecycle hooks or with the hook's resolution value always being us-east-1\r\n\r\n**Steps to reproduce the issue:**\r\nReproduction repo: https://github.com/NathanYocum/sam-sar-bug - includes a SAR application to publish and a consumer of the Application\r\n0. Using aws-sam-cli==0.53.0\r\n1. Package an AWS::ServerlessRepo::Application into us-east-1 and us-east-2\r\n2. Create a sam template that uses the application through a mapping:\r\n```\r\nMappings:\r\n  SAMBuildTest:\r\n    us-east-1:\r\n      ApplicationId: arn:aws:serverlessrepo:us-east-1:854484851566:applications/sam-build-test\r\n      SemanticVersion: 0.0.2\r\n    us-east-2:\r\n      ApplicationId: arn:aws:serverlessrepo:us-east-2:854484851566:applications/sam-build-test\r\n      SemanticVersion: 0.0.2\r\nResources:\r\n  SAMBuildSAR:\r\n    Type: AWS::Serverless::Application\r\n    Properties:\r\n      Location:\r\n        ApplicationId: !FindInMap [ SAMBuildTest, !Ref AWS::Region, ApplicationId ]\r\n        SemanticVersion: !FindInMap [ SAMBuildTest, !Ref AWS::Region, SemanticVersion ]\r\n```\r\n3. Run `sam build --region us-east-2` on the template\r\n\r\n**Observed result:**\r\n```\r\n[InvalidResourceException('SAMBuildSAR', 'Application with id arn:aws:serverlessrepo:us-east-1:854484851566:applications/sam-build-test could not be found.')] ('SAMBuildSAR', 'Application with id arn:aws:serverlessrepo:us-east-1:854484851566:applications/sam-build-test could not be found.')\r\n```\r\nWhen I dug into it I found https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/plugins/application/serverless_app_plugin.py#L90 was causing the application id to get replaced with us-east-1 instead of whatever `AWS_DEFAULT_REGION`, my `~/.aws/config`, or my flag was set to.\r\n\r\n**Expected result:**\r\nTransform succeeds in all regions regardless of arg.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1631", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1631/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1631/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1631/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1631", "id": 643062254, "node_id": "MDU6SXNzdWU2NDMwNjIyNTQ=", "number": 1631, "title": "EFS permission denied", "user": {"login": "MatteoInfi", "id": 67247621, "node_id": "MDQ6VXNlcjY3MjQ3NjIx", "avatar_url": "https://avatars2.githubusercontent.com/u/67247621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatteoInfi", "html_url": "https://github.com/MatteoInfi", "followers_url": "https://api.github.com/users/MatteoInfi/followers", "following_url": "https://api.github.com/users/MatteoInfi/following{/other_user}", "gists_url": "https://api.github.com/users/MatteoInfi/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatteoInfi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatteoInfi/subscriptions", "organizations_url": "https://api.github.com/users/MatteoInfi/orgs", "repos_url": "https://api.github.com/users/MatteoInfi/repos", "events_url": "https://api.github.com/users/MatteoInfi/events{/privacy}", "received_events_url": "https://api.github.com/users/MatteoInfi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-22T13:15:03Z", "updated_at": "2020-06-29T05:30:01Z", "closed_at": "2020-06-29T05:30:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am unable to use EFS with lambda and I am getting permission denied following this example: https://aws.amazon.com/blogs/compute/using-amazon-efs-for-aws-lambda-in-your-serverless-applications/\r\n\r\n```\r\nfunc function() (events.APIGatewayProxyResponse, error) {\r\n\tif err := os.Mkdir(fmt.Sprintf(\"/mnt/efs/%v\", \"123\"), os.ModePerm); err != nil {\r\n\t\treturn events.APIGatewayProxyResponse{}, err\r\n\t}\r\n\r\n\treturn events.APIGatewayProxyResponse{\r\n\t\tStatusCode:        200,\r\n\t\tBody:              \"OK\",\r\n\t}, nil\r\n}\r\n\r\n```\r\n\r\nI get this error \r\n\r\n```\r\nmkdir /mnt/efs/123: permission denied: PathError null\r\n\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1623", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1623/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1623/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1623/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1623", "id": 638351391, "node_id": "MDU6SXNzdWU2MzgzNTEzOTE=", "number": 1623, "title": "local start-api does not work with samconfig.toml", "user": {"login": "eliecer2000", "id": 27373195, "node_id": "MDQ6VXNlcjI3MzczMTk1", "avatar_url": "https://avatars1.githubusercontent.com/u/27373195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eliecer2000", "html_url": "https://github.com/eliecer2000", "followers_url": "https://api.github.com/users/eliecer2000/followers", "following_url": "https://api.github.com/users/eliecer2000/following{/other_user}", "gists_url": "https://api.github.com/users/eliecer2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/eliecer2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eliecer2000/subscriptions", "organizations_url": "https://api.github.com/users/eliecer2000/orgs", "repos_url": "https://api.github.com/users/eliecer2000/repos", "events_url": "https://api.github.com/users/eliecer2000/events{/privacy}", "received_events_url": "https://api.github.com/users/eliecer2000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-14T13:21:19Z", "updated_at": "2020-06-14T14:09:21Z", "closed_at": "2020-06-14T14:09:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Greetings, as the title says I have not been able to make `sam local start-api` work with the local file start-api does not work with samconfig.toml, here is a sample of the file, I tell you that the deploy and the build work perfectly .\r\n\r\n```\r\n\r\nversion = 0.1\r\n[default]\r\n[default.local_start_api.paramaters]\r\nstatic_dir=\"./\"\r\nport=5400\r\nlog_file=\"./log.txt\"\r\ntemplate=\"./.aws-sam/build/template.yaml\"\r\nparameter_overrides=\"StackTagName=\\\"TEST\\\" EnvironmentTagName=\\\"test\\\" EnvironmentAPIGatewayStageName=\\\"test\\\"\"\r\nregion=\"us-west-2\"\r\nprofile=\"default\"\r\ndebug=true\r\n\r\n\r\n[default.build]\r\n[default.build.paramaters]\r\nregion = \"us-west-2\"\r\nprofile = \"default\"\r\ndebug=true\r\nbase_dir=\".\"\r\ntemplate=\"./template.yaml\"\r\n\r\n[default.deploy]\r\n[default.deploy.parameters]\r\ntemplate=\"./.aws-sam/build/template.yaml\"\r\nstack_name=\"TEST\"\r\ns3_prefix=\"TEST\"\r\nregion=\"us-west-2\"\r\nprofile=\"default\"\r\ncapabilities=\"CAPABILITY_IAM\"\r\nparameter_overrides=\"StackTagName=\\\"TEST\\\" EnvironmentTagName=\\\"test\\\" EnvironmentAPIGatewayStageName=\\\"test\\\"\"\r\n\r\n\r\n[default.package]\r\n[default.package.parameters]\r\nprofile=\"srirammv\"\r\nregion=\"us-east-1\"\r\ns3_bucket=\"sam-bucket\"\r\noutput_template_file=\"packaged.yaml\"\r\n```\r\n\r\nerror is that the port is still 3000 and not the one I am setting.\r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1609", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1609/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1609/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1609/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1609", "id": 629948658, "node_id": "MDU6SXNzdWU2Mjk5NDg2NTg=", "number": 1609, "title": "Error with GatewayResponses", "user": {"login": "billbeckett", "id": 9933903, "node_id": "MDQ6VXNlcjk5MzM5MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/9933903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/billbeckett", "html_url": "https://github.com/billbeckett", "followers_url": "https://api.github.com/users/billbeckett/followers", "following_url": "https://api.github.com/users/billbeckett/following{/other_user}", "gists_url": "https://api.github.com/users/billbeckett/gists{/gist_id}", "starred_url": "https://api.github.com/users/billbeckett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/billbeckett/subscriptions", "organizations_url": "https://api.github.com/users/billbeckett/orgs", "repos_url": "https://api.github.com/users/billbeckett/repos", "events_url": "https://api.github.com/users/billbeckett/events{/privacy}", "received_events_url": "https://api.github.com/users/billbeckett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-03T12:19:22Z", "updated_at": "2020-06-05T06:46:47Z", "closed_at": "2020-06-05T06:46:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get an error when including GatewayResponses in my cloud formation yaml:\r\nTransform AWS::Serverless-2016-10-31 failed with: Invalid Serverless Application Specification document. Number of errors found: 1. Resource with id [APIGateway] is invalid. GatewayResponses works only with inline Swagger specified in 'DefinitionBody' property.\r\n\r\nBelow is a sample cloud formation template we are using.\r\n\r\nAWSTemplateFormatVersion: 2010-09-09\r\nDescription: 'ApiGateways: ConsumerMessageHandlerGateway'\r\nTransform: 'AWS::Serverless-2016-10-31'\r\nResources:\r\n  APIGateway:\r\n    Type: 'AWS::Serverless::Api'\r\n    Properties:\r\n      OpenApiVersion: 3.0.1\r\n      StageName: Prod\r\n      GatewayResponses:\r\n        BAD_REQUEST_BODY:\r\n          StatusCode: 400\r\n          ResponseTemplates: \r\n            \"application/json\": '{\\\"error\\\": {\\\"code\\\": \\\"BadRequest\\\", \\\"detail\\\": [{\\\"target\\\": \\\"body.data\\\",\\\"message\\\":\\\"$context.error.validationErrorString\\\",\\\"code\\\": \\\"BadRequest\\\"}]}}'\r\n      DefinitionUri:\r\n        Bucket: !Sub \r\n          - 'payoutv3-${EnvironmentName}-deploy'\r\n          - EnvironmentName: !ImportValue \r\n              'Fn::Sub': '${VariablesStackName}-Environment'\r\n        Key: !Ref SwaggerKey\r\n      TracingEnabled: true\r\n      MethodSettings:\r\n        - DataTraceEnabled: false\r\n          HttpMethod: '*'\r\n          LoggingLevel: ERROR\r\n          MetricsEnabled: true\r\n          ResourcePath: /*\r\n      Variables:\r\n        lambdaauthoriser: !Ref AuthenticationFunctionName\r\n        messagelambdaapi: !Ref APIFunctionName\r\n\r\nI previously had the Gateway responses defined separatly:\r\nGatewayResponse:\r\n    Type: AWS::ApiGateway::GatewayResponse\r\n    DependsOn: APIGateway\r\n    Properties:\r\n      ResponseTemplates: \r\n        application/json: \"{\\\"error\\\": {\\\"code\\\": \\\"BadRequest\\\", \\\"detail\\\": [{\\\"target\\\": \\\"body.data\\\",\\\"message\\\":\\\"$context.error.validationErrorString\\\",\\\"code\\\": \\\"BadRequest\\\"}]}}\"\r\n      ResponseType: BAD_REQUEST_BODY\r\n      RestApiId: !Ref APIGateway\r\n      StatusCode: '400'\r\n\r\nHowever I find that for some reason the API gateway response keep reverting back to its default. That is why I am trying to include it as part of the AWS::Serverless::Api definition.\r\n\r\nWhat am I doing wrong here?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1608", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1608/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1608/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1608/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1608", "id": 629946765, "node_id": "MDU6SXNzdWU2Mjk5NDY3NjU=", "number": 1608, "title": "ERROR: Mappings attribute {abc} must contain only alphanumeric characters", "user": {"login": "tvishwanatharkin", "id": 23732956, "node_id": "MDQ6VXNlcjIzNzMyOTU2", "avatar_url": "https://avatars3.githubusercontent.com/u/23732956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tvishwanatharkin", "html_url": "https://github.com/tvishwanatharkin", "followers_url": "https://api.github.com/users/tvishwanatharkin/followers", "following_url": "https://api.github.com/users/tvishwanatharkin/following{/other_user}", "gists_url": "https://api.github.com/users/tvishwanatharkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/tvishwanatharkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tvishwanatharkin/subscriptions", "organizations_url": "https://api.github.com/users/tvishwanatharkin/orgs", "repos_url": "https://api.github.com/users/tvishwanatharkin/repos", "events_url": "https://api.github.com/users/tvishwanatharkin/events{/privacy}", "received_events_url": "https://api.github.com/users/tvishwanatharkin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-03T12:16:22Z", "updated_at": "2020-06-03T12:27:24Z", "closed_at": "2020-06-03T12:27:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\n\r\nBefore reporting a new issue, make sure we don't have any duplicates already open or closed by\r\nsearching the issues list. If there is a duplicate, re-open or add a comment to the\r\nexisting issue instead of creating a new one. If you are reporting a bug,\r\nmake sure to include relevant information asked below to help with debugging.\r\n\r\n## GENERAL HELP QUESTIONS ##\r\nGithub Issues is for bug reports and feature requests. If you have general support\r\nquestions, the following locations are a good place:\r\n\r\n- Post a question in StackOverflow  with \"aws-sam\" tag\r\n\r\n-->\r\n\r\n**Description:**\r\n\r\nMapping attribute must contain only alphanumeric characters.\r\nI am trying to deploy an application using sam deploy. My cloudformation template looks some what like this\r\n\r\n```\r\nMappings:\r\n  EnvToRoleMap:\r\n    MY-DEV:\r\n      LAMBDA_EXECUTION_ROLE: arn:aws:iam::1234566777:role/Role1\r\n    MY-STAGING:\r\n      LAMBDA_EXECUTION_ROLE: arn:aws:iam::9876521332:role/Role2\r\n```\r\nThis fails when sam build is run \r\n`Reason: Template format error: Mappings attribute name 'LAMBDA_EXECUTION_ROLE' must contain only alphanumeric characters.`\r\nWhat's considered as alphanumeric here? \r\n\r\n**Steps to reproduce the issue:**\r\n1. Create a mapping with Role ARN\r\n2. Execute sam build and sam deploy\r\n\r\n**Observed result:**\r\n`Reason: Template format error: Mappings attribute name 'LAMBDA_EXECUTION_ROLE' must contain only alphanumeric characters.`\r\n\r\n**Expected result:**\r\nMappings should treat mapping attribute values like any other String\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1607", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1607/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1607/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1607/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1607", "id": 629708118, "node_id": "MDU6SXNzdWU2Mjk3MDgxMTg=", "number": 1607, "title": "LambdaInvokePolicy does not handle lambda:InvokeAsync", "user": {"login": "bendog", "id": 894916, "node_id": "MDQ6VXNlcjg5NDkxNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/894916?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bendog", "html_url": "https://github.com/bendog", "followers_url": "https://api.github.com/users/bendog/followers", "following_url": "https://api.github.com/users/bendog/following{/other_user}", "gists_url": "https://api.github.com/users/bendog/gists{/gist_id}", "starred_url": "https://api.github.com/users/bendog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bendog/subscriptions", "organizations_url": "https://api.github.com/users/bendog/orgs", "repos_url": "https://api.github.com/users/bendog/repos", "events_url": "https://api.github.com/users/bendog/events{/privacy}", "received_events_url": "https://api.github.com/users/bendog/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-03T05:40:26Z", "updated_at": "2020-06-03T08:01:20Z", "closed_at": "2020-06-03T08:01:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently the LambdaInvokePolicy only allows for InvokeFunction and not InvokeAsync\r\n\r\nIt would be good if this could be updated to allow for both, or create a new LambdaInvokeAsyncPolicy.\r\n\r\nexample below\r\n\r\n```json\r\n{\r\n    \"LambdaInvokePolicy\": {\r\n      \"Description\": \"Gives permission to invoke a Lambda Function, Alias or Version\",\r\n      \"Parameters\": {\r\n        \"FunctionName\": {\r\n          \"Description\": \"Name of the Lambda Function\"\r\n        }\r\n      },\r\n      \"Definition\": {\r\n        \"Statement\": [\r\n          {\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n              \"lambda:InvokeFunction\",\r\n              \"lambda:InvokeAsync\"\r\n            ],\r\n            \"Resource\": {\r\n              \"Fn::Sub\": [\r\n                \"arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${functionName}*\",\r\n                {\r\n                  \"functionName\": {\r\n                    \"Ref\": \"FunctionName\"\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    },\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1595", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1595/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1595/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1595/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1595", "id": 618824293, "node_id": "MDU6SXNzdWU2MTg4MjQyOTM=", "number": 1595, "title": "Release Issue with aws-sam-translator 1.23.0 ", "user": {"login": "DavidWylie", "id": 21624816, "node_id": "MDQ6VXNlcjIxNjI0ODE2", "avatar_url": "https://avatars2.githubusercontent.com/u/21624816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DavidWylie", "html_url": "https://github.com/DavidWylie", "followers_url": "https://api.github.com/users/DavidWylie/followers", "following_url": "https://api.github.com/users/DavidWylie/following{/other_user}", "gists_url": "https://api.github.com/users/DavidWylie/gists{/gist_id}", "starred_url": "https://api.github.com/users/DavidWylie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DavidWylie/subscriptions", "organizations_url": "https://api.github.com/users/DavidWylie/orgs", "repos_url": "https://api.github.com/users/DavidWylie/repos", "events_url": "https://api.github.com/users/DavidWylie/events{/privacy}", "received_events_url": "https://api.github.com/users/DavidWylie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-15T09:19:17Z", "updated_at": "2020-05-27T19:59:00Z", "closed_at": "2020-05-27T19:59:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "aws-sam-translator 1.23.0   is deployed with its tests package to pypi.\r\nThis causes conflicts with other projects and causes downstream issues with people using other test runners.\r\n\r\nCould this be fixed in a patch release please.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1593", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1593/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1593/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1593/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1593", "id": 617826833, "node_id": "MDU6SXNzdWU2MTc4MjY4MzM=", "number": 1593, "title": "[Feature request]AWS::Serverless::Api - AuthorizerResultTtlInSeconds ", "user": {"login": "furuton", "id": 65261423, "node_id": "MDQ6VXNlcjY1MjYxNDIz", "avatar_url": "https://avatars3.githubusercontent.com/u/65261423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/furuton", "html_url": "https://github.com/furuton", "followers_url": "https://api.github.com/users/furuton/followers", "following_url": "https://api.github.com/users/furuton/following{/other_user}", "gists_url": "https://api.github.com/users/furuton/gists{/gist_id}", "starred_url": "https://api.github.com/users/furuton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/furuton/subscriptions", "organizations_url": "https://api.github.com/users/furuton/orgs", "repos_url": "https://api.github.com/users/furuton/repos", "events_url": "https://api.github.com/users/furuton/events{/privacy}", "received_events_url": "https://api.github.com/users/furuton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-13T23:52:56Z", "updated_at": "2020-05-14T06:51:05Z", "closed_at": "2020-05-14T06:51:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Description\r\n\r\nI want to set AuthorizerResultTtlInSeconds using AWS::Serverless::Api to disable Authorizer cache((Default is enabled cache)\r\nBut AWS::Serverless::Api doesn't support setting AuthorizerResultTtlInSeconds.\r\n\r\nI know that AWS::ApiGateway::Authorizer supports AuthorizerResultTtlInSeconds.\r\nBut I want to only use SAM template.\r\nSo I request that AWS::Serverless::Api supports setting AuthorizerResultTtlInSeconds.\r\n\r\n## Helpful Links to speed up research and evaluation\r\n\r\nAuthorizer - Amazon API Gateway API Reference\r\nhttps://docs.aws.amazon.com/apigateway/api-reference/resource/authorizer/#authorizerResultTtlInSeconds\r\n\r\n```\r\nauthorizerResultTtlInSeconds\r\n\r\nThe TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.\r\n```\r\n\r\nAWS::Serverless::Api - AWS Serverless Application Model\r\nhttps://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-api.html\r\n\r\nAWS::ApiGateway::Authorizer - AWS CloudFormation\r\nhttps://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html\r\n\r\n## Others\r\n\r\nI created Github issue in aws-cloudformation-coverage-roadmap.\r\n\r\nhttps://github.com/aws-cloudformation/aws-cloudformation-coverage-roadmap/issues/470\r\n\r\nBut PatMyron recommend to create Github issue in awslabs/serverless-application-model Github repo.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1591", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1591/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1591/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1591/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1591", "id": 616717058, "node_id": "MDU6SXNzdWU2MTY3MTcwNTg=", "number": 1591, "title": "SNS Topic Policy error: Invalid parameter: Policy Error: null when creating ", "user": {"login": "mrichman", "id": 11228, "node_id": "MDQ6VXNlcjExMjI4", "avatar_url": "https://avatars0.githubusercontent.com/u/11228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrichman", "html_url": "https://github.com/mrichman", "followers_url": "https://api.github.com/users/mrichman/followers", "following_url": "https://api.github.com/users/mrichman/following{/other_user}", "gists_url": "https://api.github.com/users/mrichman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrichman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrichman/subscriptions", "organizations_url": "https://api.github.com/users/mrichman/orgs", "repos_url": "https://api.github.com/users/mrichman/repos", "events_url": "https://api.github.com/users/mrichman/events{/privacy}", "received_events_url": "https://api.github.com/users/mrichman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-12T14:47:23Z", "updated_at": "2020-05-12T15:24:58Z", "closed_at": "2020-05-12T15:24:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get this error creating an SNS topic policy resource: `I get the error \"Invalid parameter: Policy Error: null (Service: AmazonSNS; Status Code: 400; Error Code: InvalidParameter; Request ID: 3c0ff853-89aa-5944-b68c-af673e2bcb6c)\"` \r\n\r\nHere is the relevant template section:\r\n\r\n```yaml\r\n  SynthesisTaskTopic:\r\n    Type: AWS::SNS::Topic\r\n    Properties:\r\n      DisplayName: SynthesisTaskTopic\r\n      TopicName: SynthesisTaskTopic\r\n\r\n  SynthesisTaskTopicPolicy:\r\n    Type: AWS::SNS::TopicPolicy\r\n    Properties:\r\n      PolicyDocument:\r\n        Version: '2012-10-17'\r\n        Statement:\r\n          - Sid: AllowPollySNSPermissions\r\n            Effect: Allow\r\n            Principal:\r\n              Service: polly.amazonaws.com\r\n            Action:\r\n              - sns:*\r\n            Resource: !Ref SynthesisTaskTopic\r\n      Topics:\r\n        - !Ref SynthesisTaskTopic\r\n```\r\n\r\nThis passes both `sam validate` and `cfn-lint`.\r\n\r\nI need to grant the Polly service access to publish to my SNS topic.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1589", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1589/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1589/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1589/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1589", "id": 615223640, "node_id": "MDU6SXNzdWU2MTUyMjM2NDA=", "number": 1589, "title": "q", "user": {"login": "mikehanney", "id": 40672680, "node_id": "MDQ6VXNlcjQwNjcyNjgw", "avatar_url": "https://avatars3.githubusercontent.com/u/40672680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikehanney", "html_url": "https://github.com/mikehanney", "followers_url": "https://api.github.com/users/mikehanney/followers", "following_url": "https://api.github.com/users/mikehanney/following{/other_user}", "gists_url": "https://api.github.com/users/mikehanney/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikehanney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikehanney/subscriptions", "organizations_url": "https://api.github.com/users/mikehanney/orgs", "repos_url": "https://api.github.com/users/mikehanney/repos", "events_url": "https://api.github.com/users/mikehanney/events{/privacy}", "received_events_url": "https://api.github.com/users/mikehanney/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-09T17:27:38Z", "updated_at": "2020-05-11T20:41:28Z", "closed_at": "2020-05-11T20:41:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\n\r\nBefore reporting a new issue, make sure we don't have any duplicates already open or closed by\r\nsearching the issues list. If there is a duplicate, re-open or add a comment to the\r\nexisting issue instead of creating a new one. If you are reporting a bug,\r\nmake sure to include relevant information asked below to help with debugging.\r\n\r\n## GENERAL HELP QUESTIONS ##\r\nGithub Issues is for bug reports and feature requests. If you have general support\r\nquestions, the following locations are a good place:\r\n\r\n- Post a question in StackOverflow  with \"aws-sam\" tag\r\n\r\n-->\r\n\r\n**Description:**\r\n\r\n<!-- Briefly describe the problem you are facing -->\r\n\r\n**Steps to reproduce the issue:**\r\n1.\r\n2.\r\n3.\r\n\r\n**Observed result:**\r\n\r\n**Expected result:**\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1583", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1583/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1583/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1583/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1583", "id": 612028973, "node_id": "MDU6SXNzdWU2MTIwMjg5NzM=", "number": 1583, "title": "Swagger parsing error in \"options\" method", "user": {"login": "keetonian", "id": 14004203, "node_id": "MDQ6VXNlcjE0MDA0MjAz", "avatar_url": "https://avatars2.githubusercontent.com/u/14004203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keetonian", "html_url": "https://github.com/keetonian", "followers_url": "https://api.github.com/users/keetonian/followers", "following_url": "https://api.github.com/users/keetonian/following{/other_user}", "gists_url": "https://api.github.com/users/keetonian/gists{/gist_id}", "starred_url": "https://api.github.com/users/keetonian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keetonian/subscriptions", "organizations_url": "https://api.github.com/users/keetonian/orgs", "repos_url": "https://api.github.com/users/keetonian/repos", "events_url": "https://api.github.com/users/keetonian/events{/privacy}", "received_events_url": "https://api.github.com/users/keetonian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-04T17:06:47Z", "updated_at": "2020-05-04T17:30:40Z", "closed_at": "2020-05-04T17:30:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Description:**\r\n\r\nIf a predefined swagger file is used, when SAM parses the \"options\" method, it removes `\"produces\"` and `\"consumes\"` from it.\r\n\r\nSample template:\r\n\r\n```yaml\r\nAWSTemplateFormatVersion: '2010-09-09'\r\nTransform: AWS::Serverless-2016-10-31\r\n  \r\nParameters:\r\n  Stage:\r\n    Description: API Gateway Stage\r\n    Type: String\r\n    Default: prod\r\n\r\nResources:\r\n  MyApi:\r\n    Type: AWS::Serverless::Api\r\n    Properties:\r\n      Name: MyApi\r\n      StageName: !Ref Stage\r\n      DefinitionBody:\r\n        openapi: 3.0.0\r\n        info:\r\n          title: External Admin Web API\r\n          version: 0.7.0\r\n        paths:\r\n          /path:\r\n            post:\r\n              x-amazon-apigateway-integration:\r\n                uri:\r\n                  Fn::Sub: \"arn\"\r\n                httpMethod: POST\r\n                passthroughBehavior: when_no_match\r\n                type: aws_proxy\r\n            options:\r\n              consumes:\r\n              - \"application/json\"\r\n              produces:\r\n              - \"application/json\"\r\n              x-amazon-apigateway-integration:\r\n                uri:\r\n                  Fn::Sub: \"arn\"\r\n                passthroughBehavior: when_no_match\r\n                httpMethod: POST\r\n                type: aws_proxy\r\n              responses:\r\n                200:\r\n                  description: ''\r\n                  headers:\r\n                    Access-Control-Allow-Origin:\r\n                      type: \"string\"\r\n                    Access-Control-Allow-Methods:\r\n                      type: \"string\"\r\n                    Access-Control-Allow-Credentials:\r\n                      type: \"string\"\r\n                    Access-Control-Allow-Headers:\r\n                      type: \"string\"\r\n```\r\n\r\n**Steps to reproduce the issue:**\r\n1. Run SAM on the sample template\r\n1. Run a diff\r\n\r\n**Observed result:**\r\n\"Produces\" and \"consumes\" are removed\r\n\r\n**Expected result:**\r\nShould be included\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1560", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1560/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1560/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1560/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1560", "id": 599771356, "node_id": "MDU6SXNzdWU1OTk3NzEzNTY=", "number": 1560, "title": "\"API Stage not found\" in AWS::ApiGateway::UsagePlan resource when changing API Stage name", "user": {"login": "piersf", "id": 13417510, "node_id": "MDQ6VXNlcjEzNDE3NTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/13417510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/piersf", "html_url": "https://github.com/piersf", "followers_url": "https://api.github.com/users/piersf/followers", "following_url": "https://api.github.com/users/piersf/following{/other_user}", "gists_url": "https://api.github.com/users/piersf/gists{/gist_id}", "starred_url": "https://api.github.com/users/piersf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/piersf/subscriptions", "organizations_url": "https://api.github.com/users/piersf/orgs", "repos_url": "https://api.github.com/users/piersf/repos", "events_url": "https://api.github.com/users/piersf/events{/privacy}", "received_events_url": "https://api.github.com/users/piersf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-14T18:25:20Z", "updated_at": "2020-06-04T15:52:48Z", "closed_at": "2020-04-17T22:10:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\nI have the below API and Usage Plan resources created in my SAM template:\r\n\r\n```yaml\r\nParameters:\r\n  ApiStageName:\r\n    Type: String\r\n\r\nManagementApi:\r\n    Type: AWS::Serverless::Api\r\n    Properties:\r\n      Name: \"my-api\"\r\n      StageName: !Ref ApiStageName\r\n\r\nUsagePlanForManagementApi:\r\n    Type: AWS::ApiGateway::UsagePlan\r\n    DependsOn: [ \"ManagementApi\" ]\r\n    Properties:\r\n        ApiStages:\r\n            - ApiId: !Ref ManagementApi\r\n              Stage: !Ref ApiStageName\r\n        Description: \"Management API Usage Plan\"\r\n        Quota:\r\n            Limit: 100\r\n            Period: DAY\r\n        Throttle:\r\n            BurstLimit: 50\r\n            RateLimit: 100\r\n        UsagePlanName: \"my-api-usage-plan\"\r\n```\r\nThe above resource get deployed just fine and without any issues.\r\n\r\nHowever, when I change the value of the `ApiStageName` parameter from `v1` to `v2`, and try to run a `sam deploy`, the update with fail with the below error:\r\n\r\n```\r\nUPDATE_IN_PROGRESS                        AWS::ApiGateway::RestApi        ManagementApi        -\r\nUPDATE_ROLLBACK_IN_PROGRESS               AWS::CloudFormation::Stack      dev-management-api-sam          The following resource(s) failed to update: [UsagePlanForManagementApi].\r\nUPDATE_FAILED                             AWS::ApiGateway::UsagePlan      UsagePlanForManagementApi \r\n                                                                                                           API Stage not found: API_ID:v2 \r\n                                                                                                           (Service: AmazonApiGateway; Status Code: 404; \r\n                                                                                                           Error Code: NotFoundException; Request ID: xxxxxxxxxxxxxxxxxxxxxxxxxxxx)\r\n```\r\nIt looks like there's some race condition going on here. I have used `DependsOn` on the Usage Plan resource to depend on the API resource but it does not seem make any difference.\r\n\r\nAny idea how this can be fixed? Is this a bug in SAM?\r\n\r\n**Steps to reproduce the issue:**\r\n1. Create the above resources and initially set the value of the `ApiStageName` parameter to `v1`\r\n2. Deploy\r\n3. Update the value of the `ApiStageName` parameter from `v1` to `v2`\r\n4. Deploy\r\n\r\n**Observed result:**\r\nThe deployment fails with the above error when updating the value of the `ApiStageName` parameter to `v2`\r\n\r\n**Expected result:**\r\nThe deployment should  not fail with the above error\r\n\r\nI came across issue #32 which has been closed but I didn't see a solution. Also, that issue is from 2 years ago so I'm hoping a fix has been released since then.\r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1556", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1556/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1556/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1556/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1556", "id": 598581906, "node_id": "MDU6SXNzdWU1OTg1ODE5MDY=", "number": 1556, "title": "AWS SAM does not support Auth property for AWS::Serverless::HttpApi", "user": {"login": "youjinp", "id": 15708500, "node_id": "MDQ6VXNlcjE1NzA4NTAw", "avatar_url": "https://avatars2.githubusercontent.com/u/15708500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/youjinp", "html_url": "https://github.com/youjinp", "followers_url": "https://api.github.com/users/youjinp/followers", "following_url": "https://api.github.com/users/youjinp/following{/other_user}", "gists_url": "https://api.github.com/users/youjinp/gists{/gist_id}", "starred_url": "https://api.github.com/users/youjinp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/youjinp/subscriptions", "organizations_url": "https://api.github.com/users/youjinp/orgs", "repos_url": "https://api.github.com/users/youjinp/repos", "events_url": "https://api.github.com/users/youjinp/events{/privacy}", "received_events_url": "https://api.github.com/users/youjinp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-12T22:08:00Z", "updated_at": "2020-04-12T22:27:56Z", "closed_at": "2020-04-12T22:27:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\nIn a SAM template I have a `HttpApi` resource with the authorizer specified, along with a `lambda` resource.\r\n\r\nWith the `auth` property specified on the `HttpApi` resource specified, the routes for the `HttpApi` are not shown in the console, and no `authorizer` is created.\r\n\r\nRemoving the `auth` property brings back the routes.\r\n\r\n**Template:**\r\n```yaml\r\nAWSTemplateFormatVersion: 2010-09-09\r\nTransform: AWS::Serverless-2016-10-31\r\n\r\nResources:\r\n  V0API:\r\n    Type: AWS::Serverless::HttpApi\r\n    Properties:\r\n      StageName: develop\r\n      Auth:\r\n        DefaultAuthorizer: OAuthAuthorizer\r\n        Authorizers:\r\n          OAuthAuthorizer:\r\n            IdentitySource: \"$request.header.Authorization\"\r\n            JwtConfiguration:\r\n              issuer: \"https://example.com/develop/connect/issuer\"\r\n              audience:\r\n                - MyApi\r\n\r\n  Lambda:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      CodeUri: lambda/cmd/\r\n      Handler: main\r\n      Runtime: go1.x\r\n      Tracing: Active\r\n      Timeout: 5\r\n      Events:\r\n        HttpPost:\r\n          Type: HttpApi\r\n          Properties:\r\n            ApiId: !Ref V0API\r\n            Path: /login\r\n            Method: post\r\n      Policies:\r\n        - AWSLambdaExecute\r\n```\r\n\r\n**Observed result:**\r\n- `HttpApi` resource created **without** authorizer and routes\r\n\r\n**Expected result:**\r\n- `HttpApi` resource created **with** authorizer and routes\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1555", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1555/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1555/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1555/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1555", "id": 598033278, "node_id": "MDU6SXNzdWU1OTgwMzMyNzg=", "number": 1555, "title": "Unable to upload artifacts to S3", "user": {"login": "spencerchristensen", "id": 11857814, "node_id": "MDQ6VXNlcjExODU3ODE0", "avatar_url": "https://avatars3.githubusercontent.com/u/11857814?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spencerchristensen", "html_url": "https://github.com/spencerchristensen", "followers_url": "https://api.github.com/users/spencerchristensen/followers", "following_url": "https://api.github.com/users/spencerchristensen/following{/other_user}", "gists_url": "https://api.github.com/users/spencerchristensen/gists{/gist_id}", "starred_url": "https://api.github.com/users/spencerchristensen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spencerchristensen/subscriptions", "organizations_url": "https://api.github.com/users/spencerchristensen/orgs", "repos_url": "https://api.github.com/users/spencerchristensen/repos", "events_url": "https://api.github.com/users/spencerchristensen/events{/privacy}", "received_events_url": "https://api.github.com/users/spencerchristensen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-10T18:40:42Z", "updated_at": "2020-04-10T19:01:27Z", "closed_at": "2020-04-10T19:01:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\n\r\nI am unable to upload artifacts to S3. I receive a connection error for both the bucket and for https://aws-serverless-tools-telemetry.us-west-2.amazonaws.com/metrics. This is occurring in a SAM project that was previously packaging without issue.\r\n\r\nOS: macOs 10.15.3\r\nSAM: 0.47.0\r\n\r\n**Steps to reproduce the issue:**\r\n1. Create a snazzy SAM function\r\n2. Run `sam package --s3-bucket YOUR_BUCKET --s3-prefix YOUR_PREFIX --debug`\r\n3. See error\r\n\r\n**Observed result:**\r\n\r\nSee output below. Please note that I have not changed the bucket permissions since it was last working. The `template.yaml` file is likewise the same as when it was previously working.\r\n\r\n```\r\nTelemetry endpoint configured to be https://aws-serverless-tools-telemetry.us-west-2.amazonaws.com/metrics\r\nUnable to export\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/urllib3/connection.py\", line 157, in _new_conn\r\n    (self._dns_host, self.port), self.timeout, **extra_kw\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/urllib3/util/connection.py\", line 61, in create_connection\r\n    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\r\n  File \"/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py\", line 752, in getaddrinfo\r\n    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\r\nsocket.gaierror: [Errno 8] nodename nor servname provided, or not known\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/botocore/httpsession.py\", line 263, in send\r\n    chunked=self._chunked(request.headers),\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 720, in urlopen\r\n    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/urllib3/util/retry.py\", line 376, in increment\r\n    raise six.reraise(type(error), error, _stacktrace)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/urllib3/packages/six.py\", line 735, in reraise\r\n    raise value\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 672, in urlopen\r\n    chunked=chunked,\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 376, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 994, in _validate_conn\r\n    conn.connect()\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/urllib3/connection.py\", line 300, in connect\r\n    conn = self._new_conn()\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/urllib3/connection.py\", line 169, in _new_conn\r\n    self, \"Failed to establish a new connection: %s\" % e\r\nurllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPSConnection object at 0x10d2ae9d0>: Failed to establish a new connection: [Errno 8] nodename nor servname provided, or not known\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/samcli/lib/package/artifact_exporter.py\", line 267, in export\r\n    self.do_export(resource_id, resource_dict, parent_dir)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/samcli/lib/package/artifact_exporter.py\", line 283, in do_export\r\n    uploaded_url = upload_local_artifacts(resource_id, resource_dict, self.PROPERTY_NAME, parent_dir, self.uploader)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/samcli/lib/package/artifact_exporter.py\", line 152, in upload_local_artifacts\r\n    return zip_and_upload(local_path, uploader)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/samcli/lib/package/artifact_exporter.py\", line 170, in zip_and_upload\r\n    return uploader.upload_with_dedup(zip_file, precomputed_md5=md5_hash)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/samcli/lib/package/s3_uploader.py\", line 129, in upload_with_dedup\r\n    return self.upload(file_name, remote_path)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/samcli/lib/package/s3_uploader.py\", line 77, in upload\r\n    if not self.force_upload and self.file_exists(remote_path):\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/samcli/lib/package/s3_uploader.py\", line 143, in file_exists\r\n    self.s3.head_object(Bucket=self.bucket_name, Key=remote_path)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/botocore/client.py\", line 316, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/botocore/client.py\", line 613, in _make_api_call\r\n    operation_model, request_dict, request_context)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/botocore/client.py\", line 632, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/botocore/endpoint.py\", line 102, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/botocore/endpoint.py\", line 137, in _send_request\r\n    success_response, exception):\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/botocore/endpoint.py\", line 231, in _needs_retry\r\n    caught_exception=caught_exception, request_dict=request_dict)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/botocore/hooks.py\", line 356, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/botocore/hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/botocore/hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/botocore/retryhandler.py\", line 183, in __call__\r\n    if self._checker(attempts, response, caught_exception):\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/botocore/retryhandler.py\", line 251, in __call__\r\n    caught_exception)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/botocore/retryhandler.py\", line 277, in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/botocore/retryhandler.py\", line 317, in __call__\r\n    caught_exception)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/botocore/retryhandler.py\", line 223, in __call__\r\n    attempt_number, caught_exception)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/botocore/retryhandler.py\", line 359, in _check_caught_exception\r\n    raise caught_exception\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/botocore/endpoint.py\", line 200, in _do_get_response\r\n    http_response = self._send(request)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/botocore/endpoint.py\", line 244, in _send\r\n    return self.http_session.send(request)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.47.0/libexec/lib/python3.7/site-packages/botocore/httpsession.py\", line 283, in send\r\n    raise EndpointConnectionError(endpoint_url=request.url, error=e)\r\nbotocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: \"https://tm-sam-packages-local.s3.us-west-2.amazonaws.com/sfn-fetch/9bd554c4bfdf51a3a0a08bcc32ceb753\"\r\nSending Telemetry: {'metrics': [{'commandRun': {'awsProfileProvided': False, 'debugFlagProvided': True, 'region': '', 'commandName': 'sam package', 'duration': 7240, 'exitReason': 'ExportFailedError', 'exitCode': 1, 'requestId': '71953ee3-29a8-4383-9550-52ef2a79d22e', 'installationId': 'd21d2e8c-5f74-4f4b-9e56-6a2901be3f76', 'sessionId': '575e8ba5-375d-4ced-ae1b-e69c224ccc44', 'executionEnvironment': 'CLI', 'pyversion': '3.7.7', 'samcliVersion': '0.47.0'}}]}\r\nHTTPSConnectionPool(host='aws-serverless-tools-telemetry.us-west-2.amazonaws.com', port=443): Max retries exceeded with url: /metrics (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x10d2df3d0>: Failed to establish a new connection: [Errno 8] nodename nor servname provided, or not known'))\r\nError: Unable to upload artifact InitFunction referenced by CodeUri parameter of InitFunction resource.\r\nCould not connect to the endpoint URL: \"https://YOUR_BUCKET.s3.us-west-2.amazonaws.com/YOUR_PREFIX/9bd554c4bfdf51a3a0a08bcc32ceb753\"\r\n```\r\n\r\n**Expected result:**\r\n\r\nI expect to see the artifacts uploaded successfully. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1554", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1554/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1554/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1554/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1554", "id": 597474086, "node_id": "MDU6SXNzdWU1OTc0NzQwODY=", "number": 1554, "title": "Tags for AWS Glue Job not working", "user": {"login": "sahil-gt", "id": 58722956, "node_id": "MDQ6VXNlcjU4NzIyOTU2", "avatar_url": "https://avatars3.githubusercontent.com/u/58722956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sahil-gt", "html_url": "https://github.com/sahil-gt", "followers_url": "https://api.github.com/users/sahil-gt/followers", "following_url": "https://api.github.com/users/sahil-gt/following{/other_user}", "gists_url": "https://api.github.com/users/sahil-gt/gists{/gist_id}", "starred_url": "https://api.github.com/users/sahil-gt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sahil-gt/subscriptions", "organizations_url": "https://api.github.com/users/sahil-gt/orgs", "repos_url": "https://api.github.com/users/sahil-gt/repos", "events_url": "https://api.github.com/users/sahil-gt/events{/privacy}", "received_events_url": "https://api.github.com/users/sahil-gt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-09T18:32:55Z", "updated_at": "2020-04-10T22:07:49Z", "closed_at": "2020-04-10T22:07:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\n\r\nWhen defining tags for AWS Glue Jobs, they are not rendered properly in the rendered CloudFormation Template and hence do not get added to the AWS Glue Job.\r\n\r\nWhereas, adding tags for AWS Lambda attaches the tags to the lambda. \r\n\r\n**Steps to reproduce the issue:**\r\n1. Add Tags to AWS SAM Template for Glue Job.\r\n2. Run AWS SAM to deploy the job.\r\n3. Check Glue Job for tags.\r\n\r\nSample AWS SAM Template - \r\n```\r\n  GlueJob:\r\n    Type: AWS::Glue::Job\r\n    Properties:\r\n      GlueVersion: '1.0'\r\n      MaxCapacity: 5\r\n      Command:\r\n        Name: glueetl\r\n        PythonVersion: '3'\r\n        ScriptLocation: s3://test/hello.py\r\n      DefaultArguments: \r\n        '--extra-jars': 's3://test/jar-with-dependencies.jar'\r\n        '--TempDir': 's3://test/temp'\r\n      Name: my_test_glue\r\n      Description: Glue job created by AWS SAM\r\n      Role: SomeRandomRole\r\n      Tags:\r\n        my_tag_key: my_tag_value\r\n        my_tag_key2: my_tag_value2\r\n```\r\n\r\n**Observed result:**\r\nBoth tags do not show when checking the glue job on the browser or via CLI.\r\n**Expected result:**\r\nTags should be added to glue job.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1549", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1549/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1549/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1549/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1549", "id": 593397856, "node_id": "MDU6SXNzdWU1OTMzOTc4NTY=", "number": 1549, "title": "Incorrect API-Gateway resource policy for API Event function with '+' path parameters ", "user": {"login": "lintal", "id": 675108, "node_id": "MDQ6VXNlcjY3NTEwOA==", "avatar_url": "https://avatars0.githubusercontent.com/u/675108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lintal", "html_url": "https://github.com/lintal", "followers_url": "https://api.github.com/users/lintal/followers", "following_url": "https://api.github.com/users/lintal/following{/other_user}", "gists_url": "https://api.github.com/users/lintal/gists{/gist_id}", "starred_url": "https://api.github.com/users/lintal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lintal/subscriptions", "organizations_url": "https://api.github.com/users/lintal/orgs", "repos_url": "https://api.github.com/users/lintal/repos", "events_url": "https://api.github.com/users/lintal/events{/privacy}", "received_events_url": "https://api.github.com/users/lintal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 797198224, "node_id": "MDU6TGFiZWw3OTcxOTgyMjQ=", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/area/serverless-api", "name": "area/serverless-api", "color": "1d76db", "default": false, "description": null}, {"id": 797198240, "node_id": "MDU6TGFiZWw3OTcxOTgyNDA=", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/contributors/need-help", "name": "contributors/need-help", "color": "fbca04", "default": false, "description": null}, {"id": 1790032446, "node_id": "MDU6TGFiZWwxNzkwMDMyNDQ2", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/good%20first%20issue", "name": "good first issue", "color": "5494dd", "default": true, "description": ""}, {"id": 797198215, "node_id": "MDU6TGFiZWw3OTcxOTgyMTU=", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/type/bug", "name": "type/bug", "color": "b60205", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-03T13:51:20Z", "updated_at": "2020-06-03T16:48:34Z", "closed_at": "2020-06-03T16:48:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\n\r\nI have created a stack with an `AWS::Serverless::Function` and an `AWS::Serverless::Api` resource with the intention of restricting access to an IP address range. An example stack looks as follows:\r\n\r\n```json\r\n{\r\n  \"AWSTemplateFormatVersion\": \"2010-09-09\",\r\n  \"Transform\": \"AWS::Serverless-2016-10-31\",\r\n  \"Globals\": {\r\n    \"Function\": {\r\n      \"Timeout\": 10,\r\n      \"MemorySize\": 128\r\n    }\r\n  },\r\n\"Resources\": {\r\n    \"AppwRepublishFunction\": {\r\n      \"Type\": \"AWS::Serverless::Function\",\r\n      \"Properties\": {\r\n        \"FunctionName\": \"MyRepublisherLambda\",\r\n        \"Handler\": \"index.handler\",\r\n        \"Runtime\": \"nodejs12.x\",\r\n        \"CodeUri\": \"...\",\r\n        \"Events\": {\r\n          \"Post\": {\r\n            \"Type\": \"Api\",\r\n            \"Properties\": {\r\n              \"Path\": \"/republish/{parameters+}\",\r\n              \"Method\": \"post\",\r\n              \"RestApiId\": { \"Ref\": \"ApiGateway\" }\r\n            }\r\n          }\r\n        },\r\n        \"Policies\": [ \"...\" ]\r\n      }\r\n    },\r\n    \"ApiGateway\": {\r\n      \"Type\": \"AWS::Serverless::Api\",\r\n      \"Properties\": {\r\n        \"Auth\": {\r\n          \"ResourcePolicy\": {\r\n            \"IpRangeWhitelist\": [\"111.222.0.0/16\"]\r\n          }\r\n        },\r\n        \"CacheClusterEnabled\": false,\r\n        \"EndpointConfiguration\": \"REGIONAL\",\r\n        \"Name\": \"MyRepublisherApi\",\r\n        \"StageName\": \"MyStage\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nWhen the API-Gateway resource policy, the resultant document looks as follows:\r\n```\r\n{\r\n    \"Version\": \"2012-10-17\",\r\n    \"Statement\": [\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Principal\": \"*\",\r\n            \"Action\": \"execute-api:Invoke\",\r\n            \"Resource\": [\r\n                \"arn:aws:execute-api:my-region-1:123456789012:my-api-id/MyStage/POST/republish/{parameters+}\"\r\n            ]\r\n        },\r\n        {\r\n            \"Effect\": \"Deny\",\r\n            \"Principal\": \"*\",\r\n            \"Action\": \"execute-api:Invoke\",\r\n            \"Resource\": [\r\n                \"arn:aws:execute-api:my-region-1:123456789012:my-api-id/MyStage/POST/republish/{parameters+}\"\r\n            ],\r\n            \"Condition\": {\r\n                \"NotIpAddress\": {\r\n                    \"aws:SourceIp\": \"111.222.0.0/16\"\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nThe above however doesn't work even when connecting to the specified IP address range. I have to manually update the resource identifier to `arn:aws:execute-api:my-region-1:123456789012:my-api-id/MyStage/POST/republish/*` instead.\r\n\r\n--\r\n\r\nIt is also worth noting that a precursor to my above example, I had setup the path to be `/republish/{entityType}/{parameters+}` and this gave a resource-policy with a resource-identifier \r\n`arn:aws:execute-api:my-region-1:123456789012:my-api-id/MyStage/POST/republish/*/{parameters+}`.\r\nMy point is that standard parameters (without `+`) seem to get translated to a `*`, so the behaviour should likely be the same with parameters suffixed with a `+`.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Import a stack structured like the one provided above, setting the IP address to a suitable value for yourself.\r\n2. Attempt to access the API through the endpoint created.\r\n3. An error will be observed.\r\n4. Modify the Resource Policy in the AWS Api-Gateway console to use a simple `*` wildcard symbol, then republish the API.\r\n5. Attempt to access the API again and you will gain access.\r\n\r\n**Observed result:**\r\n\r\nThe automatically generated Resource-Policy does not describe parameters suffixed with `+` and therefore in the above example, access is denied.\r\n\r\n**Expected result:**\r\n\r\nAccess in the above example should be granted.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1536", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1536/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1536/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1536/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1536", "id": 587988187, "node_id": "MDU6SXNzdWU1ODc5ODgxODc=", "number": 1536, "title": "Ref throws error for AutoPublishAliasCodeSha256 property", "user": {"login": "ShreyaGangishetty", "id": 7549138, "node_id": "MDQ6VXNlcjc1NDkxMzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7549138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShreyaGangishetty", "html_url": "https://github.com/ShreyaGangishetty", "followers_url": "https://api.github.com/users/ShreyaGangishetty/followers", "following_url": "https://api.github.com/users/ShreyaGangishetty/following{/other_user}", "gists_url": "https://api.github.com/users/ShreyaGangishetty/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShreyaGangishetty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShreyaGangishetty/subscriptions", "organizations_url": "https://api.github.com/users/ShreyaGangishetty/orgs", "repos_url": "https://api.github.com/users/ShreyaGangishetty/repos", "events_url": "https://api.github.com/users/ShreyaGangishetty/events{/privacy}", "received_events_url": "https://api.github.com/users/ShreyaGangishetty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 797198215, "node_id": "MDU6TGFiZWw3OTcxOTgyMTU=", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/type/bug", "name": "type/bug", "color": "b60205", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-25T21:00:37Z", "updated_at": "2020-05-11T20:53:53Z", "closed_at": "2020-05-11T20:53:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\r\n**Description:**\r\n\r\nRef doesn't work for `AutoPublishCodeSha256`\r\n\r\n\r\n\r\n\r\n**Steps to reproduce the issue:**\r\nTemplate:\r\n\r\n```yaml\r\nAWSTemplateFormatVersion: '2010-09-09'\r\nTransform: AWS::Serverless-2016-10-31\r\nParameters:\r\n  AutoPublishCodeSha256:\r\n    Type: \"String\"\r\n    Description: \"Sha256 to uniquely identify creation of the lambda\"\r\nResources:\r\n  MyFunction:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      InlineCode: |\r\n        exports.handler = async () => 'Hello World!'\r\n      Handler: index.handler\r\n      Runtime: nodejs12.x\r\n      AutoPublishCodeSha256: !Ref AutoPublishCodeSha256\r\n      AutoPublishAlias: \"live\"\r\n```\r\n\r\n\r\n**Observed result:**\r\n```\r\nTypeError: unhashable type: 'slice'\r\n```\r\n\r\n\r\n**Expected result:**\r\nTemplate should deploy successfully without throwing any errors \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1534", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1534/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1534/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1534/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1534", "id": 587878586, "node_id": "MDU6SXNzdWU1ODc4Nzg1ODY=", "number": 1534, "title": "Feature Request: Option to delete failed stacks that roll back", "user": {"login": "mrichman", "id": 11228, "node_id": "MDQ6VXNlcjExMjI4", "avatar_url": "https://avatars0.githubusercontent.com/u/11228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrichman", "html_url": "https://github.com/mrichman", "followers_url": "https://api.github.com/users/mrichman/followers", "following_url": "https://api.github.com/users/mrichman/following{/other_user}", "gists_url": "https://api.github.com/users/mrichman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrichman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrichman/subscriptions", "organizations_url": "https://api.github.com/users/mrichman/orgs", "repos_url": "https://api.github.com/users/mrichman/repos", "events_url": "https://api.github.com/users/mrichman/events{/privacy}", "received_events_url": "https://api.github.com/users/mrichman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-25T17:50:19Z", "updated_at": "2020-03-25T18:13:12Z", "closed_at": "2020-03-25T18:13:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "When a stack rolls back to due a template error, you receive an error such as:\r\n\r\n```\r\nError: Failed to create changeset for the stack: sam-app, An error occurred (ValidationError) when calling the CreateChangeSet operation: Stack:arn:aws:cloudformation:us-east-1:123456789012:stack/sam-app/ba941550-6ebe-11ea-a521-0e3283634b is in ROLLBACK_COMPLETE state and can not be updated.\r\n```\r\n\r\nThe only way to clear this is to delete the stack in CloudFormation. A convenience function in the CLI would be very helpful here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1528", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1528/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1528/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1528/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1528", "id": 586131895, "node_id": "MDU6SXNzdWU1ODYxMzE4OTU=", "number": 1528, "title": "Adding support for dynamic reference 'ssm-secure'", "user": {"login": "muellerc", "id": 39061, "node_id": "MDQ6VXNlcjM5MDYx", "avatar_url": "https://avatars1.githubusercontent.com/u/39061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/muellerc", "html_url": "https://github.com/muellerc", "followers_url": "https://api.github.com/users/muellerc/followers", "following_url": "https://api.github.com/users/muellerc/following{/other_user}", "gists_url": "https://api.github.com/users/muellerc/gists{/gist_id}", "starred_url": "https://api.github.com/users/muellerc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/muellerc/subscriptions", "organizations_url": "https://api.github.com/users/muellerc/orgs", "repos_url": "https://api.github.com/users/muellerc/repos", "events_url": "https://api.github.com/users/muellerc/events{/privacy}", "received_events_url": "https://api.github.com/users/muellerc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-23T11:19:36Z", "updated_at": "2020-03-24T18:32:02Z", "closed_at": "2020-03-24T18:32:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "As described at https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html , Amazon CloudFormation supports the following 3 dynamic references:\r\n- ssm\r\n- ssm-secure\r\n- secretsmanager\r\n\r\nUsing ssm works as expected in AWS SAM (e.g. by using {{resolve:ssm:MyKey:1}}).\r\n\r\nBut when I change to ssm-secure (using a different key where the value is a SecureString with the default KMS key) it fails.\r\n\r\nI didn't test the dynamic reference secretsmanager.\r\n\r\n**Description:**\r\n\r\nWhen I use the ssm-secure (e.g. {{resolve:ssm-secure:MyApiKey:1}}), I'm getting the following exception:\r\n\r\nError: Failed to create changeset for the stack: test, ex: Waiter ChangeSetCreateComplete failed: Waiter encountered a terminal failure state Status: FAILED. Reason: SSM Secure reference is not supported in: [AWS::Lambda::Function/Properties/Environment/Variables/API_KEY]\r\n\r\nThe SAM template I'm using with a simple hello-world Lambda:\r\n\r\n  QueryUsageDataFunction:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      CodeUri: query_usage_data/\r\n      Handler: app.lambda_handler\r\n      Runtime: python3.8\r\n      Environment:\r\n        Variables:\r\n          API_KEY: '{{resolve:ssm-secure:MyApiKey:1}}'\r\n      Events:\r\n        QueryUsageDataEveryDay:\r\n          Type: Schedule\r\n          Properties:\r\n            Input: '{\"Operation\": \"query_usage_data\"}'\r\n            Schedule: cron(45 2 * * ? *)  # every day at 2.45AM\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1525", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1525/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1525/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1525/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1525", "id": 585582895, "node_id": "MDU6SXNzdWU1ODU1ODI4OTU=", "number": 1525, "title": "Api DefinitionBody Swagger", "user": {"login": "chestongo", "id": 26504635, "node_id": "MDQ6VXNlcjI2NTA0NjM1", "avatar_url": "https://avatars2.githubusercontent.com/u/26504635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chestongo", "html_url": "https://github.com/chestongo", "followers_url": "https://api.github.com/users/chestongo/followers", "following_url": "https://api.github.com/users/chestongo/following{/other_user}", "gists_url": "https://api.github.com/users/chestongo/gists{/gist_id}", "starred_url": "https://api.github.com/users/chestongo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chestongo/subscriptions", "organizations_url": "https://api.github.com/users/chestongo/orgs", "repos_url": "https://api.github.com/users/chestongo/repos", "events_url": "https://api.github.com/users/chestongo/events{/privacy}", "received_events_url": "https://api.github.com/users/chestongo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-21T20:55:21Z", "updated_at": "2020-03-24T18:45:14Z", "closed_at": "2020-03-24T18:45:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have 2 SAM resources of type: _AWS::Serverless::Application_.\r\nThe first _AWS::Serverless::Application_ is for my serverless API.\r\nThe second _AWS::Serverless::Application_ is for my serverless functions.\r\n\r\nBecause my serverless function events API uses the, property: RestApiId. I have to define my\r\nAPI first, and export the value.\r\n\r\nHowever, my serverless api, definition body use a seperate swagger file. In this swagger file, i want\r\nto import my functions ARN dynamically. How can I do this? I guess it is creating a loop now.\r\n\r\nI tried to export my functions ARN, and import in using my inline swagger, but it didn't work.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1523", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1523/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1523/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1523/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1523", "id": 584432638, "node_id": "MDU6SXNzdWU1ODQ0MzI2Mzg=", "number": 1523, "title": "Support --queryStringParameters parameter when generating api gateway aws-proxy event", "user": {"login": "lvthillo", "id": 14105387, "node_id": "MDQ6VXNlcjE0MTA1Mzg3", "avatar_url": "https://avatars3.githubusercontent.com/u/14105387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lvthillo", "html_url": "https://github.com/lvthillo", "followers_url": "https://api.github.com/users/lvthillo/followers", "following_url": "https://api.github.com/users/lvthillo/following{/other_user}", "gists_url": "https://api.github.com/users/lvthillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/lvthillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lvthillo/subscriptions", "organizations_url": "https://api.github.com/users/lvthillo/orgs", "repos_url": "https://api.github.com/users/lvthillo/repos", "events_url": "https://api.github.com/users/lvthillo/events{/privacy}", "received_events_url": "https://api.github.com/users/lvthillo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-19T13:58:33Z", "updated_at": "2020-03-19T14:12:56Z", "closed_at": "2020-03-19T14:11:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\n\r\nBefore reporting a new issue, make sure we don't have any duplicates already open or closed by\r\nsearching the issues list. If there is a duplicate, re-open or add a comment to the\r\nexisting issue instead of creating a new one. If you are reporting a bug,\r\nmake sure to include relevant information asked below to help with debugging.\r\n\r\n## GENERAL HELP QUESTIONS ##\r\nGithub Issues is for bug reports and feature requests. If you have general support\r\nquestions, the following locations are a good place:\r\n\r\n- Post a question in StackOverflow  with \"aws-sam\" tag\r\n\r\n-->\r\n\r\n**Description:**\r\n\r\n<!-- Briefly describe the problem you are facing -->\r\nI want to generate an API GW event to test my lambda locally. My lambda expects queryStringParameters.\r\n\r\n\r\n**Steps to reproduce the issue:**\r\nI tried:\r\n```\r\nsam local generate-event apigateway aws-proxy --method GET --path document --body \"\" --queryStringParameters \"{\"documentId\": \"1044\", \"versionId\": \"v_1\"}\"\r\n\r\nError: no such option: --queryStringParameters\r\n```\r\n\r\n**Observed result:**\r\nIt's not clear how I can generate an event with custom queryStringParameters. I don't want to edit the json manually if possible.\r\n\r\n**Expected result:**\r\nSupport something like the parameter `--queryStringParameters` to make it easy to generate queryStringParameters inside the event.json\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1518", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1518/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1518/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1518/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1518", "id": 582457853, "node_id": "MDU6SXNzdWU1ODI0NTc4NTM=", "number": 1518, "title": "Can not override Stage logging settings with MethodSettings", "user": {"login": "tredfield", "id": 16293696, "node_id": "MDQ6VXNlcjE2MjkzNjk2", "avatar_url": "https://avatars3.githubusercontent.com/u/16293696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tredfield", "html_url": "https://github.com/tredfield", "followers_url": "https://api.github.com/users/tredfield/followers", "following_url": "https://api.github.com/users/tredfield/following{/other_user}", "gists_url": "https://api.github.com/users/tredfield/gists{/gist_id}", "starred_url": "https://api.github.com/users/tredfield/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tredfield/subscriptions", "organizations_url": "https://api.github.com/users/tredfield/orgs", "repos_url": "https://api.github.com/users/tredfield/repos", "events_url": "https://api.github.com/users/tredfield/events{/privacy}", "received_events_url": "https://api.github.com/users/tredfield/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-16T16:58:06Z", "updated_at": "2020-03-17T18:08:04Z", "closed_at": "2020-03-17T18:08:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\n\r\nI am trying to override stage logging settings using list of MethodSettings in AWS::Serverless::Api. The result is the stage configuration is removed and no configuration applied to methods/paths. That is, defining any MethodSetting that does not have wild card HttpMethod and ResourcePath does not work. If this is expected, then documentation needs updated as it does not clarify this.\r\n\r\n**Steps to reproduce the issue:**\r\n1.I started with the MethodSettings configuration below. This configured logging on the stage with INFO\r\n\r\n```json\r\n      MethodSettings:\r\n        - LoggingLevel: \"INFO\"\r\n          MetricsEnabled: true\r\n          DataTraceEnabled: true\r\n          ResourcePath: \"/*\"\r\n          HttpMethod: \"*\"\r\n          CachingEnabled: false\r\n```\r\n\r\n2. I want to turn off logging on POST methods and enable all GET methods, I have tried below. This removes the stage logging configuration but does not apply any override on the methods\r\n```json\r\n      MethodSettings:\r\n        - LoggingLevel: \"INFO\"\r\n          MetricsEnabled: true\r\n          DataTraceEnabled: true\r\n          ResourcePath: \"/*\"\r\n          HttpMethod: \"GET\"\r\n          CachingEnabled: false\r\n        - LoggingLevel: \"OFF\"\r\n          MetricsEnabled: true\r\n          DataTraceEnabled: true\r\n          ResourcePath: \"/*\"\r\n          HttpMethod: \"POST\"\r\n          CachingEnabled: false\r\n```\r\n3. I have also tried configuring specific paths but have same result as above\r\n```json\r\n      MethodSettings:\r\n        - LoggingLevel: \"INFO\"\r\n          MetricsEnabled: true\r\n          DataTraceEnabled: true\r\n          # note I have also tried \"/health\", \"/~1health~1*\"\r\n          ResourcePath: \"/~1health\"\r\n          HttpMethod: \"*\"\r\n          CachingEnabled: false\r\n        - LoggingLevel: \"OFF\"\r\n          MetricsEnabled: true\r\n          DataTraceEnabled: true\r\n          ResourcePath: \"/~1inventory\"\r\n          HttpMethod: \"*\"\r\n          CachingEnabled: false\r\n```\r\n4. Setting single entry with \"/*\" ResourcePath and HttpMethod: \"GET\" results in error \"Invalid method setting path\" (note HttpMethod: \"*\" works)\r\n```json\r\n      MethodSettings:\r\n        - LoggingLevel: \"INFO\"\r\n          MetricsEnabled: true\r\n          DataTraceEnabled: true\r\n          ResourcePath: \"/*\"\r\n          HttpMethod: \"GET\"\r\n          CachingEnabled: false\r\n```\r\n**Observed result:**\r\nCan not override stage configuration. Setting any MethodSettings other than wild card HttpMethod and ResourcePath removes stage configuration without adding any override on methods as expected. Configuring single MethodSettings with other than wild card results in error.\r\n\r\n**Expected result:**\r\nConfiguring multiple MethodSettings should override stage configuration without error. Ability to configuring HttpMethod and distinct ResourcePath that result in stage override visible in console.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1516", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1516/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1516/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1516/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1516", "id": 580820327, "node_id": "MDU6SXNzdWU1ODA4MjAzMjc=", "number": 1516, "title": "Specifying payloadFormatVersion for implicit apis", "user": {"login": "gpoitch", "id": 411908, "node_id": "MDQ6VXNlcjQxMTkwOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/411908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gpoitch", "html_url": "https://github.com/gpoitch", "followers_url": "https://api.github.com/users/gpoitch/followers", "following_url": "https://api.github.com/users/gpoitch/following{/other_user}", "gists_url": "https://api.github.com/users/gpoitch/gists{/gist_id}", "starred_url": "https://api.github.com/users/gpoitch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gpoitch/subscriptions", "organizations_url": "https://api.github.com/users/gpoitch/orgs", "repos_url": "https://api.github.com/users/gpoitch/repos", "events_url": "https://api.github.com/users/gpoitch/events{/privacy}", "received_events_url": "https://api.github.com/users/gpoitch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-13T20:10:15Z", "updated_at": "2020-03-24T19:13:55Z", "closed_at": "2020-03-14T13:03:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\n\r\nBefore reporting a new issue, make sure we don't have any duplicates already open or closed by\r\nsearching the issues list. If there is a duplicate, re-open or add a comment to the\r\nexisting issue instead of creating a new one. If you are reporting a bug,\r\nmake sure to include relevant information asked below to help with debugging.\r\n\r\n## GENERAL HELP QUESTIONS ##\r\nGithub Issues is for bug reports and feature requests. If you have general support\r\nquestions, the following locations are a good place:\r\n\r\n- Post a question in StackOverflow  with \"aws-sam\" tag\r\n\r\n-->\r\n\r\n**Description:**\r\nLooking for the ability to specify the payloadFormatVersion for the route on an implicit HttpApi.  I do not believe this is supported in Globals.  The payloadFormatVersion defaults to the latest version if you do not specify it.  There was a recent release of a 2.0 version and it broke our lambda integration which was expecting the 1.0 payload.\r\n\r\n<!-- Briefly describe the problem you are facing -->\r\n\r\n**Steps to reproduce the issue:**\r\n```json\r\n{\r\n  \"Resources\": {\r\n    \"MyFunction\": {\r\n      \"Type\": \"AWS::Serverless::Function\",\r\n      \"Properties\": {\r\n        \"Events\": {\r\n          \"MyHttpApiEvent\": {\r\n            \"Type\": \"HttpApi\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n**Observed result:**\r\n```json\r\n{\r\n  \"ServerlessHttpApi\": {\r\n    \"Type\": \"AWS::ApiGatewayV2::Api\",\r\n    \"Properties\": {\r\n      \"Body\": {\r\n        \"info\": {\r\n          \"version\": \"1.0\",\r\n          \"title\": {\r\n            \"Ref\": \"AWS::StackName\"\r\n          }\r\n        },\r\n        \"paths\": {\r\n          \"$default\": {\r\n            \"x-amazon-apigateway-any-method\": {\r\n              \"x-amazon-apigateway-integration\": {\r\n                \"httpMethod\": \"POST\",\r\n                \"type\": \"aws_proxy\",\r\n                \"uri\": {\r\n                  \"Fn::Sub\": \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction.Arn}/invocations\"\r\n                },\r\n                \"payloadFormatVersion\": \"2.0\"\r\n              },\r\n              \"isDefaultRoute\": true,\r\n              \"responses\": {}\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n**Expected result:**\r\nNeed a way to produce `\"payloadFormatVersion\": \"1.0\"` without having to explicitly define all the resources.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1513", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1513/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1513/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1513/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1513", "id": 580145694, "node_id": "MDU6SXNzdWU1ODAxNDU2OTQ=", "number": 1513, "title": "Usage plan not supported for implicit APIs", "user": {"login": "mcintyre94", "id": 1711350, "node_id": "MDQ6VXNlcjE3MTEzNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1711350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcintyre94", "html_url": "https://github.com/mcintyre94", "followers_url": "https://api.github.com/users/mcintyre94/followers", "following_url": "https://api.github.com/users/mcintyre94/following{/other_user}", "gists_url": "https://api.github.com/users/mcintyre94/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcintyre94/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcintyre94/subscriptions", "organizations_url": "https://api.github.com/users/mcintyre94/orgs", "repos_url": "https://api.github.com/users/mcintyre94/repos", "events_url": "https://api.github.com/users/mcintyre94/events{/privacy}", "received_events_url": "https://api.github.com/users/mcintyre94/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-12T18:40:08Z", "updated_at": "2020-03-13T18:17:05Z", "closed_at": "2020-03-13T18:17:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\n\r\nUsage plans for auth on APIs was added in #1141 \r\n\r\nLooking at ApiAuth docs (the Auth field on AWS::Serverless::Api objects) - https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-api-apiauth.html - the `UsagePlan` field is present.\r\n\r\nBut implicit APIs (Api events under AWS::Serverless::Function) - https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-apifunctionauth.html - are missing that field. So the APIs produced by Lambda functions in SAM don't seem to support this field, which would be useful. Is it possible to support it?\r\n\r\n**Steps to reproduce the issue:**\r\n\r\nAdd to a SAM template:\r\n\r\n```\r\n  MyFunction:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      CodeUri: lambdas/my-function\r\n      Handler: index.lambdaHandler\r\n      Runtime: nodejs12.x\r\n      Events:\r\n        MyFunctionApi:\r\n          Type: Api\r\n          Properties:\r\n            Path: /my-function\r\n            Method: post\r\n            Auth:\r\n              ApiKeyRequired: true\r\n              UsagePlan:\r\n                CreateUsagePlan: PER_API\r\n```\r\n\r\n**Observed result:**\r\n\r\nWhen deployed, this API is created, but no usage plan or API key are.\r\n\r\n**Expected result:**\r\n\r\nThe API is created, with a usage plan and API key - in the same way they would if it was a top-level API object, as described in #1141 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1512", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1512/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1512/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1512/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1512", "id": 579814881, "node_id": "MDU6SXNzdWU1Nzk4MTQ4ODE=", "number": 1512, "title": "mulitple API gateways resources in CloudFormation ", "user": {"login": "mkamel93", "id": 36108309, "node_id": "MDQ6VXNlcjM2MTA4MzA5", "avatar_url": "https://avatars0.githubusercontent.com/u/36108309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkamel93", "html_url": "https://github.com/mkamel93", "followers_url": "https://api.github.com/users/mkamel93/followers", "following_url": "https://api.github.com/users/mkamel93/following{/other_user}", "gists_url": "https://api.github.com/users/mkamel93/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkamel93/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkamel93/subscriptions", "organizations_url": "https://api.github.com/users/mkamel93/orgs", "repos_url": "https://api.github.com/users/mkamel93/repos", "events_url": "https://api.github.com/users/mkamel93/events{/privacy}", "received_events_url": "https://api.github.com/users/mkamel93/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 797198215, "node_id": "MDU6TGFiZWw3OTcxOTgyMTU=", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/type/bug", "name": "type/bug", "color": "b60205", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-12T09:48:20Z", "updated_at": "2020-04-21T22:13:00Z", "closed_at": "2020-04-21T22:13:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\n\r\nBefore reporting a new issue, make sure we don't have any duplicates already open or closed by\r\nsearching the issues list. If there is a duplicate, re-open or add a comment to the\r\nexisting issue instead of creating a new one. If you are reporting a bug,\r\nmake sure to include relevant information asked below to help with debugging.\r\n\r\n## GENERAL HELP QUESTIONS ##\r\nGithub Issues is for bug reports and feature requests. If you have general support\r\nquestions, the following locations are a good place:\r\n\r\n- Post a question in StackOverflow  with \"aws-sam\" tag\r\n\r\n-->\r\n\r\n**Description:**\r\n\r\nWhen trying to launch more than 1 API gateway with R53 records, only the R53 record of the first API gateway resource will be transformed and the other will be ignored. Nested stack resolves the issue by having 1 API with R53 records per template.\r\n\r\n**Steps to reproduce the issue:**\r\n1. create a serverless template with 2 API gateways each has one R53 record\r\n2. when deploying it, the transformation shows one R53 record only of the first API\r\n3. using nested stacks, each stack has one API gateway transformed correctly with the R53 record created for it\r\n\r\n**Observed result:**\r\nwhen deploying it, the transformation shows one R53 record only of the first API\r\n**Expected result:**\r\n2 R53 records should be exist in the template\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1502", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1502/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1502/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1502/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1502", "id": 578637098, "node_id": "MDU6SXNzdWU1Nzg2MzcwOTg=", "number": 1502, "title": "Simplify API Gateway PROXY+ and ANY support", "user": {"login": "a-h", "id": 1029947, "node_id": "MDQ6VXNlcjEwMjk5NDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1029947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a-h", "html_url": "https://github.com/a-h", "followers_url": "https://api.github.com/users/a-h/followers", "following_url": "https://api.github.com/users/a-h/following{/other_user}", "gists_url": "https://api.github.com/users/a-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/a-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a-h/subscriptions", "organizations_url": "https://api.github.com/users/a-h/orgs", "repos_url": "https://api.github.com/users/a-h/repos", "events_url": "https://api.github.com/users/a-h/events{/privacy}", "received_events_url": "https://api.github.com/users/a-h/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-10T10:08:10Z", "updated_at": "2020-03-11T18:29:29Z", "closed_at": "2020-03-11T18:29:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!-- Make sure we don't have an existing Issue that reports the bug you are seeing (both open and closed). -->\r\n\r\n### Describe your idea/feature/enhancement\r\n\r\nI was working with a colleague to build an API. We wanted to pass any HTTP request on an API Gateway to a Lambda function using the {PROXY+} and ANY features of API Gateway.\r\n\r\nI've done this before, but only using other frameworks for Serverless applications. When I came back, my colleague had read the blog post at https://aws.amazon.com/blogs/developer/handling-arbitrary-http-requests-in-amazon-api-gateway/ and added the following YAML to the project, as per the article:\r\n\r\n```yaml\r\nApi:\r\n  Type: \"AWS::Serverless::Api\"\r\n  Properties:\r\n    StageName: Prod\r\n    BinaryMediaTypes:\r\n      - \"~1\"\r\n    DefinitionBody:\r\n      openapi: \"3.0\"\r\n      info:\r\n        title: !Ref \"AWS::StackName\"\r\n        version: \"1.0\"\r\n      paths:\r\n        /:\r\n          x-amazon-apigateway-any-method:\r\n            responses:\r\n              {}\r\n            x-amazon-apigateway-integration:\r\n              httpMethod: POST\r\n              type: aws_proxy\r\n              uri: !Sub \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations\"\r\n        /{proxy+}:\r\n          x-amazon-apigateway-any-method:\r\n            responses:\r\n              {}\r\n            x-amazon-apigateway-integration:\r\n              httpMethod: POST\r\n              type: aws_proxy\r\n              uri: !Sub \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations\"\r\n```\r\n\r\n### Proposal\r\n\r\nThat seems like too much hard-to-understand YAML for a common use case to me, so my feature request is that...\r\n\r\nThe `AWS::Serverless::Api` and `AWS::Serverless::Function` types should support `PROXY+` for URLs and `ANY` for methods if it doesn't without needing the extra YAML listed above.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1500", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1500/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1500/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1500/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1500", "id": 578194051, "node_id": "MDU6SXNzdWU1NzgxOTQwNTE=", "number": 1500, "title": "Support AWS::ApiGatewayV2::Api in template.yml", "user": {"login": "brandonryan", "id": 2406384, "node_id": "MDQ6VXNlcjI0MDYzODQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2406384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandonryan", "html_url": "https://github.com/brandonryan", "followers_url": "https://api.github.com/users/brandonryan/followers", "following_url": "https://api.github.com/users/brandonryan/following{/other_user}", "gists_url": "https://api.github.com/users/brandonryan/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandonryan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandonryan/subscriptions", "organizations_url": "https://api.github.com/users/brandonryan/orgs", "repos_url": "https://api.github.com/users/brandonryan/repos", "events_url": "https://api.github.com/users/brandonryan/events{/privacy}", "received_events_url": "https://api.github.com/users/brandonryan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-09T20:51:03Z", "updated_at": "2020-03-09T21:14:07Z", "closed_at": "2020-03-09T21:14:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Describe your idea/feature/enhancement\r\nRight now only apigateway version 1 is supported. I would like to specify my resources using the http api part of apigateway v2.\r\n\r\nSpecifically I want to be able to use the openapi [cors](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-cors-configuration.html) extension to decouple the api from lambda a bit more.\r\n\r\n### Proposal\r\nSupport `AWS::ApiGatewayV2::Api` resources in template.yml", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1486", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1486/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1486/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1486/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1486", "id": 575031930, "node_id": "MDU6SXNzdWU1NzUwMzE5MzA=", "number": 1486, "title": "Release tracker for SAM v1.22.0 release", "user": {"login": "ShreyaGangishetty", "id": 7549138, "node_id": "MDQ6VXNlcjc1NDkxMzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7549138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShreyaGangishetty", "html_url": "https://github.com/ShreyaGangishetty", "followers_url": "https://api.github.com/users/ShreyaGangishetty/followers", "following_url": "https://api.github.com/users/ShreyaGangishetty/following{/other_user}", "gists_url": "https://api.github.com/users/ShreyaGangishetty/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShreyaGangishetty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShreyaGangishetty/subscriptions", "organizations_url": "https://api.github.com/users/ShreyaGangishetty/orgs", "repos_url": "https://api.github.com/users/ShreyaGangishetty/repos", "events_url": "https://api.github.com/users/ShreyaGangishetty/events{/privacy}", "received_events_url": "https://api.github.com/users/ShreyaGangishetty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1091980330, "node_id": "MDU6TGFiZWwxMDkxOTgwMzMw", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/stage/waiting-for-release", "name": "stage/waiting-for-release", "color": "84ce14", "default": false, "description": "Stage that indicates the issue was accepted and addressed but waiting on a release"}, {"id": 1858298355, "node_id": "MDU6TGFiZWwxODU4Mjk4MzU1", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/v1.22.0", "name": "v1.22.0", "color": "a9e258", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-03T23:44:56Z", "updated_at": "2020-03-16T22:49:46Z", "closed_at": "2020-03-16T22:42:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Changelog:\r\n\r\n1. fix: add periods to error messages, fix quotes (#1430) \r\n1. feat(policy-templates): add EventBridgePutEventsPolicy (#1409) \r\n1. fix: use isinstance check instead of type (#1411) \r\n1. feat: add TimeoutInMillis to HttpApi events (#1450) \r\n1. docs: document support for HTTP API Access Log Settings (#1448) \r\n1. docs: fix markdown style links in not-markdown (#1439) \r\n1. feat: add Tags support to Http Api (#1459) \r\n1. docs: switch Definition to Model (#1423) \r\n1. chore: merge pull request #1463 from awslabs/master \r\n1. fix: make usageplan properties referable (#1458) \r\n1. feat: add support for DefaultRouteSettings in HttpApi (#1461)\r\n1. feat: Trigger auto publish alias on env var/memorysize change (#1310) \r\n1. feat: cors httpapi (#1381)\r\n1. chore: bump translator version (#1483) \r\n1. docs: add referable properties of sam resources (#1468) \r\n1. feat: custom domains in HTTP API (#1472) \r\n1. chore: merge pull request #1485 from awslabs/develop \r\n1. fix: remove OIDC auth from Http Api (#1491)\r\n1. feat: propagate tags to DomainName, Stage resources (#1492)\r\n1. docs: Add StageVariables to docs (#1493)\r\n1. feat: support RouteSettings for HttpApi (#1490)\r\n1. feat: add DynamoDBWritePolicy and S3WritePolicy (#1374)\r\n1. Fix type of user pool tags (#1460) \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1482", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1482/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1482/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1482/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1482", "id": 574771496, "node_id": "MDU6SXNzdWU1NzQ3NzE0OTY=", "number": 1482, "title": "Sharing local resources among lambda functions", "user": {"login": "GeoffreyZhangfda", "id": 28302332, "node_id": "MDQ6VXNlcjI4MzAyMzMy", "avatar_url": "https://avatars3.githubusercontent.com/u/28302332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GeoffreyZhangfda", "html_url": "https://github.com/GeoffreyZhangfda", "followers_url": "https://api.github.com/users/GeoffreyZhangfda/followers", "following_url": "https://api.github.com/users/GeoffreyZhangfda/following{/other_user}", "gists_url": "https://api.github.com/users/GeoffreyZhangfda/gists{/gist_id}", "starred_url": "https://api.github.com/users/GeoffreyZhangfda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GeoffreyZhangfda/subscriptions", "organizations_url": "https://api.github.com/users/GeoffreyZhangfda/orgs", "repos_url": "https://api.github.com/users/GeoffreyZhangfda/repos", "events_url": "https://api.github.com/users/GeoffreyZhangfda/events{/privacy}", "received_events_url": "https://api.github.com/users/GeoffreyZhangfda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-03T16:02:40Z", "updated_at": "2020-03-04T19:19:52Z", "closed_at": "2020-03-04T19:19:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nWould it be possible to share local resources among lambda functions? Searched online and seems that Lambda layers may be used to share resources, which requires to commit resource files to AWS. We do have some constraints at this stage not to send files outside the government network. So, would like to see if there is a solution to share files on local hard drive among lambda functions.\r\n\r\nThanks,\r\n\r\nGeoffrey\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1478", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1478/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1478/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1478/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1478", "id": 573287515, "node_id": "MDU6SXNzdWU1NzMyODc1MTU=", "number": 1478, "title": "Support for HTTP API tagging", "user": {"login": "farski", "id": 3483, "node_id": "MDQ6VXNlcjM0ODM=", "avatar_url": "https://avatars0.githubusercontent.com/u/3483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/farski", "html_url": "https://github.com/farski", "followers_url": "https://api.github.com/users/farski/followers", "following_url": "https://api.github.com/users/farski/following{/other_user}", "gists_url": "https://api.github.com/users/farski/gists{/gist_id}", "starred_url": "https://api.github.com/users/farski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/farski/subscriptions", "organizations_url": "https://api.github.com/users/farski/orgs", "repos_url": "https://api.github.com/users/farski/repos", "events_url": "https://api.github.com/users/farski/events{/privacy}", "received_events_url": "https://api.github.com/users/farski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-29T12:41:45Z", "updated_at": "2020-03-16T22:51:50Z", "closed_at": "2020-03-16T22:51:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\n\r\nI don't believe there is currently any way to add resource tags to an `AWS::Serverless::HttpApi` resource[1]. The [SAM specification](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-httpapi.html) does not include anything, and I don't think it's possible to do it through an OpenAPI definition (though admittedly my experience with OpenAPI/Swagger is limited. I have read through the docs, specifically the `info` section, and did not find anything).\r\n\r\n[1] It turns out you can add a `tags` list to the OpenApi `BodyDefinition` and those tags will get applied to the HttpApi, but they don't get applied to default stage, and there may be better ways of supporting tags, as discussed below.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1477", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1477/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1477/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1477/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1477", "id": 573044848, "node_id": "MDU6SXNzdWU1NzMwNDQ4NDg=", "number": 1477, "title": "!Ref not working for StepFunction in a lambda call", "user": {"login": "ospfranco", "id": 1634213, "node_id": "MDQ6VXNlcjE2MzQyMTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1634213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ospfranco", "html_url": "https://github.com/ospfranco", "followers_url": "https://api.github.com/users/ospfranco/followers", "following_url": "https://api.github.com/users/ospfranco/following{/other_user}", "gists_url": "https://api.github.com/users/ospfranco/gists{/gist_id}", "starred_url": "https://api.github.com/users/ospfranco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ospfranco/subscriptions", "organizations_url": "https://api.github.com/users/ospfranco/orgs", "repos_url": "https://api.github.com/users/ospfranco/repos", "events_url": "https://api.github.com/users/ospfranco/events{/privacy}", "received_events_url": "https://api.github.com/users/ospfranco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-28T22:38:50Z", "updated_at": "2020-03-04T19:16:03Z", "closed_at": "2020-03-04T19:16:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\n\r\nHi, I'm trying to invoke a state machine using a lambda function.\r\n\r\nI started by somewhat copying this repo: https://github.com/mmuppidi/apigateway-stepfunctions-sam/blob/master/stack.yaml\r\n\r\nso, here is my template file:\r\n\r\n```YAML\r\nAWSTemplateFormatVersion: \"2010-09-09\"\r\nTransform: AWS::Serverless-2016-10-31\r\nDescription: >\r\n  strest\r\n\r\n  Sample SAM Template for strest\r\n\r\nGlobals:\r\n  Function:\r\n    Timeout: 3\r\n\r\nResources:\r\n  PublicApi:\r\n    Type: AWS::Serverless::Api\r\n    Properties:\r\n      StageName: Prod\r\n      # TracingEnabled: true\r\n      DefinitionBody:\r\n        swagger: \"2.0\"\r\n        info:\r\n          title: \"StrestApi\"\r\n        paths:\r\n          /start: # api gateway invokes lambda synchronously, which in turn invokes the stepfunction and waits for its final result\r\n            get:\r\n              produces:\r\n                - \"application/json\"\r\n              responses:\r\n                \"200\":\r\n                  description: \"200 response\"\r\n                  schema:\r\n                    $ref: \"#/definitions/Empty\"\r\n                  headers:\r\n                    Access-Control-Allow-Headers:\r\n                    type: \"string\"\r\n              x-amazon-apigateway-integration:\r\n                responses:\r\n                  default:\r\n                    statusCode: \"200\"\r\n                    headers:\r\n                      Access-Control-Allow-Headers:\r\n                      type: \"'*'\"\r\n                httpMethod: GET\r\n                type: aws_proxy\r\n                uri:\r\n                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartFunction.Arn}/invocations\r\n\r\n        definitions:\r\n          Empty:\r\n            type: \"object\"\r\n            title: \"Empty Schema\"\r\n\r\n  # Role which allows step functions to invoke lambda functions\r\n  StatesExecutionRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties:\r\n      AssumeRolePolicyDocument:\r\n        Version: \"2012-10-17\"\r\n        Statement:\r\n          - Effect: \"Allow\"\r\n            Principal:\r\n              Service:\r\n                - !Sub states.${AWS::Region}.amazonaws.com\r\n            Action: \"sts:AssumeRole\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: StatesExecutionPolicy\r\n          PolicyDocument:\r\n            Version: \"2012-10-17\"\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - \"lambda:InvokeFunction\"\r\n                Resource: \"*\"\r\n\r\n  # State machine\r\n  MyStateMachine:\r\n    Type: AWS::StepFunctions::StateMachine\r\n    Properties:\r\n      RoleArn: !GetAtt StatesExecutionRole.Arn\r\n      DefinitionString: !Sub |-\r\n        {\r\n          \"StartAt\": \"execute\",\r\n          \"Comment\": \"State machine for executing the strest main loop\",\r\n          \"States\": {\r\n            \"execute\": {\r\n              \"Type\": \"Task\",\r\n              \"Resource\": \"${ExecutorFunction.Arn}\",\r\n              \"Comment\": \"Run the Executor Lambda function\",\r\n              \"End\": true\r\n            }\r\n          }\r\n        }\r\n\r\n  # LAMBDAS\r\n  StartFunction:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      Description: Starts the state machine\r\n      CodeUri: dist/start\r\n      Handler: start.handler\r\n      Runtime: nodejs12.x\r\n      Environment:\r\n        Variables:\r\n          STEP_FUNCTION_ARN: !Ref MyStateMachine\r\n      Policies:\r\n        - Version: \"2012-10-17\"\r\n          Statement:\r\n            - Effect: \"Allow\" # step function permissions open for now\r\n              Action:\r\n                - states:*\r\n              Resource: \"*\"\r\n      Events:\r\n        ExecSFNResource:\r\n          Type: Api\r\n          Properties:\r\n            RestApiId: !Ref PublicApi\r\n            Path: /start\r\n            Method: GET\r\n\r\n  ExecutorFunction:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      CodeUri: dist/\r\n      Handler: executor/executor.handler\r\n      Runtime: nodejs12.x\r\n```\r\n\r\nThe problem is, when I start the api (sam local start-api) and call the endpoint, the function starts executing, but when I inspect the environment variable I get the name value and not the ARN.\r\n\r\nhere is the code of the start function:\r\n\r\n```typescript\r\nimport AWS from \"aws-sdk\";\r\n\r\nexport async function handler(event: any, context: any) {\r\n  let stepFunctionArn = process.env.STEP_FUNCTION_ARN;\r\n\r\n  console.log(\"marker0 stepFunctionArn\", stepFunctionArn);\r\n\r\n  let params = {\r\n    stateMachineArn: stepFunctionArn!,\r\n    name: \"Execution lambda \" + new Date().toString()\r\n  };\r\n  console.log(\"marker 1\");\r\n\r\n  let sf_client = new AWS.StepFunctions();\r\n  console.log(\"marker 2\");\r\n\r\n  let res = await sf_client.startExecution(params).promise();\r\n\r\n  console.log(\"marker 3\", res);\r\n\r\n  return {};\r\n}\r\n\r\n```\r\n\r\nAnd the console output is:\r\n\r\n```\r\nSTART RequestId: 4c1c0dea-0178-1612-d8cb-e45cec3c5d9a Version: $LATEST\r\n[1] 2020-02-28T21:58:40.879Z\t4c1c0dea-0178-1612-d8cb-e45cec3c5d9a\tINFO\tmarker0 stepFunctionArn MyStateMachine\r\n[1] 2020-02-28T21:58:40.883Z\t4c1c0dea-0178-1612-d8cb-e45cec3c5d9a\tINFO\tmarker 1\r\n[1] 2020-02-28T21:58:40.890Z\t4c1c0dea-0178-1612-d8cb-e45cec3c5d9a\tINFO\tmarker 2\r\n[1] 2020-02-28T21:58:42.183Z\t4c1c0dea-0178-1612-d8cb-e45cec3c5d9a\tERROR\tInvoke Error \t{\"errorType\":\"InvalidArn\",\"errorMessage\":\"Invalid Arn: 'Invalid ARN prefix: MyStateMachine'\",\"code\":\"InvalidArn\",\"message\":\"Invalid Arn: 'Invalid ARN prefix: MyStateMachine'\",\"time\":\"2020-02-28T21:58:42.179Z\",\"requestId\":\"74aec8d6-40f7-4e64-a61e-8298fc75cd8a\",\"statusCode\":400,\"retryable\":false,\"retryDelay\":23.361184043342842,\"stack\":[\"InvalidArn: Invalid Arn: 'Invalid ARN prefix: MyStateMachine'\",\"    at Request.extractError (/var/task/node_modules/aws-sdk/lib/protocol/json.js:51:27)\",\"    at Request.callListeners (/var/task/node_modules/aws-sdk/lib/sequential_executor.js:106:20)\",\"    at Request.emit (/var/task/node_modules/aws-sdk/lib/sequential_executor.js:78:10)\",\"    at Request.emit (/var/task/node_modules/aws-sdk/lib/request.js:683:14)\",\"    at Request.transition (/var/task/node_modules/aws-sdk/lib/request.js:22:10)\",\"    at AcceptorStateMachine.runTo (/var/task/node_modules/aws-sdk/lib/state_machine.js:14:12)\",\"    at /var/task/node_modules/aws-sdk/lib/state_machine.js:26:10\",\"    at Request.<anonymous> (/var/task/node_modules/aws-sdk/lib/request.js:38:9)\",\"    at Request.<anonymous> (/var/task/node_modules/aws-sdk/lib/request.js:685:12)\",\"    at Request.callListeners (/var/task/node_modules/aws-sdk/lib/sequential_executor.js:116:18)\"]}\r\n```\r\n\r\n**Observed result:**\r\n`!Ref MyStateMachine` is not working, it does not return the ARN value\r\n**Expected result:**\r\n`!Ref MyStateMachine` correctly sets the ARN for the environment variable\r\n\r\nP.S. I also tried changing `!Ref MyStateMachine` to `!GetAtt MyStateMachine.Arn` and something completely wrong is returned, instead of a statemachine arn being returned a lambda arn is returned and then I get a invalid arn for this context when trying to start the state machine in the start function.\r\n\r\nAWS-SAM-CLI version: 0.43.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1469", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1469/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1469/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1469/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1469", "id": 571275363, "node_id": "MDU6SXNzdWU1NzEyNzUzNjM=", "number": 1469, "title": "Serverless Transform with YAML removes leading 0 in account number field.", "user": {"login": "brjonath", "id": 44518296, "node_id": "MDQ6VXNlcjQ0NTE4Mjk2", "avatar_url": "https://avatars2.githubusercontent.com/u/44518296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brjonath", "html_url": "https://github.com/brjonath", "followers_url": "https://api.github.com/users/brjonath/followers", "following_url": "https://api.github.com/users/brjonath/following{/other_user}", "gists_url": "https://api.github.com/users/brjonath/gists{/gist_id}", "starred_url": "https://api.github.com/users/brjonath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brjonath/subscriptions", "organizations_url": "https://api.github.com/users/brjonath/orgs", "repos_url": "https://api.github.com/users/brjonath/repos", "events_url": "https://api.github.com/users/brjonath/events{/privacy}", "received_events_url": "https://api.github.com/users/brjonath/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-26T11:41:48Z", "updated_at": "2020-02-26T17:58:01Z", "closed_at": "2020-02-26T17:57:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Description:\r\n--------------\r\nWhen submitting a template to 'AWS::Serverless-2016-10-31' Transform where template has a resource's property corresponding to account number with a leading zero '0', the transfrom just remove this zero '0' and processed template returened by this transform ends up having a wrong account number.\r\n\r\nObservations:\r\n----------------\r\n- Issue happens when template is specified using YAML format and account number is specified without using any quotes.\r\n- When specifying within quotes, correct account number is returned but just sometimes - not clear on this why.\r\n- Workaround is to use JSON to specify your template.\r\n\r\nReplication:\r\n-------------\r\n- Use below Template to create a stack and comparing Original and Processed templates will show the different values for `TestBucket -> Properties -> ReplicationConfiguration -> Rules -> Description -> Account`\r\n```yaml\r\nAWSTemplateFormatVersion: 2010-09-09\r\nTransform: 'AWS::Serverless-2016-10-31'\r\nResources:\r\n  TestRawBucket:\r\n    Type: 'AWS::S3::Bucket'\r\n    Properties:\r\n      VersioningConfiguration:\r\n        Status: Enabled\r\n      ReplicationConfiguration:\r\n        Role: !GetAtt \r\n          - TestReplicationRoleSecure\r\n          - Arn\r\n        Rules:\r\n          - Id: replication-to-S3raw-test\r\n            Status: Enabled\r\n            Prefix: ''\r\n            Destination:\r\n              Bucket: 'arn:aws:s3:::bucket-name'\r\n              Account: 098693111088\r\n              AccessControlTranslation:\r\n                Owner: Destination\r\n  TestReplicationRoleSecure:\r\n    Type: 'AWS::IAM::Role'\r\n    Properties:\r\n      AssumeRolePolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service:\r\n                - s3.amazonaws.com\r\n            Action:\r\n              - 'sts:AssumeRole'\r\n      ManagedPolicyArns:\r\n        - !Ref ReplicationRolePolicy\r\n  ReplicationRolePolicy:\r\n    Type: 'AWS::IAM::ManagedPolicy'\r\n    Properties:\r\n      Path: /\r\n      PolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Action:\r\n              - 's3:Get*'\r\n              - 's3:ListBucket'\r\n            Effect: Allow\r\n            Resource:\r\n              - 'arn:aws:s3:::bucket-name'\r\n              - 'arn:aws:s3:::bucket-name/*'\r\n          - Action:\r\n              - 's3:ReplicateObject'\r\n              - 's3:ReplicateDelete'\r\n              - 's3:ReplicateTags'\r\n              - 's3:GetObjectVersionTagging'\r\n              - 's3:ObjectOwnerOverrideToBucketOwner'\r\n            Effect: Allow\r\n            Resource: 'arn:aws:s3:::bucket-name-dest/*'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1465", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1465/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1465/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1465/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1465", "id": 570141550, "node_id": "MDU6SXNzdWU1NzAxNDE1NTA=", "number": 1465, "title": "Can't use DeletionPolicy with Type: AWS::DynamoDB::Table", "user": {"login": "mrichman", "id": 11228, "node_id": "MDQ6VXNlcjExMjI4", "avatar_url": "https://avatars0.githubusercontent.com/u/11228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrichman", "html_url": "https://github.com/mrichman", "followers_url": "https://api.github.com/users/mrichman/followers", "following_url": "https://api.github.com/users/mrichman/following{/other_user}", "gists_url": "https://api.github.com/users/mrichman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrichman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrichman/subscriptions", "organizations_url": "https://api.github.com/users/mrichman/orgs", "repos_url": "https://api.github.com/users/mrichman/repos", "events_url": "https://api.github.com/users/mrichman/events{/privacy}", "received_events_url": "https://api.github.com/users/mrichman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-24T20:55:44Z", "updated_at": "2020-02-24T22:10:20Z", "closed_at": "2020-02-24T22:10:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following:\r\n\r\n```\r\nMyTable:\r\n    Type: AWS::DynamoDB::Table\r\n    DeletionPolicy: Retain\r\n    Properties:\r\n      TableName: mytable\r\n      AttributeDefinitions:\r\n      - AttributeName: PK\r\n        AttributeType: S\r\n      - AttributeName: SK\r\n        AttributeType: N\r\n      KeySchema:\r\n      - AttributeName: PK\r\n        KeyType: HASH\r\n      - AttributeName: SK\r\n        KeyType: RANGE\r\n      BillingMode: PAY_PER_REQUEST\r\n```\r\n\r\nWhen I deploy, I get `Encountered unsupported property DeletionPolicy`.\r\n\r\nI need to ensure the DynamoDB table is not deleted upon rollback of the stack.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1457", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1457/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1457/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1457/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1457", "id": 568230864, "node_id": "MDU6SXNzdWU1NjgyMzA4NjQ=", "number": 1457, "title": "Documentation for AWS::Serverless::Api Return Values is missing", "user": {"login": "crbunney", "id": 4267911, "node_id": "MDQ6VXNlcjQyNjc5MTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4267911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crbunney", "html_url": "https://github.com/crbunney", "followers_url": "https://api.github.com/users/crbunney/followers", "following_url": "https://api.github.com/users/crbunney/following{/other_user}", "gists_url": "https://api.github.com/users/crbunney/gists{/gist_id}", "starred_url": "https://api.github.com/users/crbunney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crbunney/subscriptions", "organizations_url": "https://api.github.com/users/crbunney/orgs", "repos_url": "https://api.github.com/users/crbunney/repos", "events_url": "https://api.github.com/users/crbunney/events{/privacy}", "received_events_url": "https://api.github.com/users/crbunney/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-20T11:21:47Z", "updated_at": "2020-02-26T18:55:19Z", "closed_at": "2020-02-26T18:54:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't find any documentation for what attributes I can access using Fn::GetAtt with a [AWS::Serverless::Api](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-api.html) (or I've not been using the right search terms)\r\n\r\nMost documentation pages have a \"Return Values\" section, but the documentation for Serveless::Api doesn't have one.\r\n\r\nI've tried out Fn::Ref and found it returns the RestApiId from the ApiGateway::RestApi resource, but don't know what else is available.\r\n\r\nCan the documentation be updated to include that section with details of what you can access using GetAtt (or be clear if GetAtt isn't supported)?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1455", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1455/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1455/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1455/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1455", "id": 566298063, "node_id": "MDU6SXNzdWU1NjYyOTgwNjM=", "number": 1455, "title": "EventBridgeRule fails to deploy when using content based filtering", "user": {"login": "ljacobsson", "id": 7579097, "node_id": "MDQ6VXNlcjc1NzkwOTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7579097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljacobsson", "html_url": "https://github.com/ljacobsson", "followers_url": "https://api.github.com/users/ljacobsson/followers", "following_url": "https://api.github.com/users/ljacobsson/following{/other_user}", "gists_url": "https://api.github.com/users/ljacobsson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljacobsson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljacobsson/subscriptions", "organizations_url": "https://api.github.com/users/ljacobsson/orgs", "repos_url": "https://api.github.com/users/ljacobsson/repos", "events_url": "https://api.github.com/users/ljacobsson/events{/privacy}", "received_events_url": "https://api.github.com/users/ljacobsson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-02-17T13:26:39Z", "updated_at": "2020-08-08T18:39:35Z", "closed_at": "2020-08-08T18:39:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Description:**\r\nEventBridgeRule event source can't handle `numeric` or `exists` matching as described [here](https://docs.aws.amazon.com/eventbridge/latest/userguide/content-filtering-with-event-patterns.html)\r\n\r\n**Steps to reproduce the issue:**\r\nCreate a EventBridgeRule event mapping like\r\n```\r\n\"Pattern\": {\r\n  \"source\": [\r\n    \"test-source\"\r\n  ],\r\n  \"detail\": {\r\n    \"name\": [\r\n      {\r\n        \"exists\": true\r\n      }\r\n    ],\r\n    \"age\": [\r\n      {\r\n        \"numeric\": [\r\n          \">\",\r\n          25\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n```\r\n**Observed result:**\r\nDeploy fails with the following error from CloudFormation:\r\n```\r\nThe following resource(s) failed to create: [TestFunctionEventBridge].          \r\nResource creation cancelled                                                \r\nEvent pattern is not valid. Reason: exists match pattern must be either    \r\ntrue or false.  at [Source: (String)\"{\"source\":[\"test-source\"],\"detail\":{\" \r\nname\":[{\"exists\":\"true\"}],\"age\":[{\"numeric\":[\">\",\"25\"]}]}}\"; line: 1,      \r\ncolumn: 56] (Service: AmazonCloudWatchEvents; Status Code: 400; Error      \r\nCode: InvalidEventPatternException; \r\n```\r\nIt looks like the issue is that both `true` and `25` got converted to strings.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1451", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1451/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1451/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1451/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1451", "id": 564886891, "node_id": "MDU6SXNzdWU1NjQ4ODY4OTE=", "number": 1451, "title": "Support Http Api RouteSettings and DefaultRouteSettings", "user": {"login": "keetonian", "id": 14004203, "node_id": "MDQ6VXNlcjE0MDA0MjAz", "avatar_url": "https://avatars2.githubusercontent.com/u/14004203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keetonian", "html_url": "https://github.com/keetonian", "followers_url": "https://api.github.com/users/keetonian/followers", "following_url": "https://api.github.com/users/keetonian/following{/other_user}", "gists_url": "https://api.github.com/users/keetonian/gists{/gist_id}", "starred_url": "https://api.github.com/users/keetonian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keetonian/subscriptions", "organizations_url": "https://api.github.com/users/keetonian/orgs", "repos_url": "https://api.github.com/users/keetonian/repos", "events_url": "https://api.github.com/users/keetonian/events{/privacy}", "received_events_url": "https://api.github.com/users/keetonian/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 797198227, "node_id": "MDU6TGFiZWw3OTcxOTgyMjc=", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/type/feature", "name": "type/feature", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-13T18:58:49Z", "updated_at": "2020-03-16T22:48:27Z", "closed_at": "2020-03-16T22:48:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Description:**\r\n\r\nHTTP APIs need to support RouteSettings and DefaultRouteSettings when ApiGateway releases support for these properties in HTTP APIs.\r\n\r\n**DefaultRouteSettings:**\r\n\r\n[DefaultRouteSettings](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-stage.html#cfn-apigatewayv2-stage-defaultroutesettings) looks like it should be a pass-through property to CloudFormation. We will enable it as a new top-level property of the `AWS::Serverless::HttpApi` resource.\r\n\r\nExample:\r\n\r\n```yaml\r\nResources:\r\n  HttpApi:\r\n    Type: AWS::Serverless::HttpApi\r\n    Properties:\r\n      DefaultRouteSettings: \r\n        DataTraceEnabled: ... \r\n        DetailedMetricsEnabled: ...\r\n        LoggingLevel: ...\r\n        ThrottlingBurstLimit: ...\r\n        ThrottlingRateLimit: ...\r\n```\r\n\r\n**RouteSettings:**\r\n\r\nThese [settings](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-stage.html#cfn-apigatewayv2-stage-routesettings) are set per route in an API. We will add support for the `RouteSettings` property in the `AWS::Serverless::Api` resource, so template authors can add their route settings there. We will also merge and override values in the `RouteSettings` property with any values in the event-level `RouteSettings` property for a given path.\r\n\r\nExample:\r\n\r\n**Api Level:**\r\n\r\n```yaml\r\nApi:\r\n  Type: AWS::Serverless::HttpApi\r\n  Properties:\r\n    RouteSettings:\r\n      \"/path\":\r\n        DataTraceEnabled: ...\r\n        DetailedMetricsEnabled: ...\r\n        LoggingLevel: ...\r\n        ThrottlingBurstLimit: ...\r\n        ThrottlingRateLimit: ...\r\n```\r\n\r\n**Event Level:**\r\n\r\n*Anything added at the event level will be merged with the API-level configuration, if present. In case of collisions, the event-level configuration will override the api-level configuration.*\r\n\r\n```yaml\r\nEvents:\r\n  HttpApiEvent:\r\n    Type: HttpApi\r\n    Properties:\r\n      Method: get\r\n      Path: /path\r\n      RouteSettings: # adds this to RouteSettings in the `AWS::ApiGatewayV2::Stage` resource under the Path/Method this event is configured for.\r\n        DataTraceEnabled: ...\r\n        DetailedMetricsEnabled: ...\r\n        LoggingLevel: ...\r\n        ThrottlingBurstLimit: ...\r\n        ThrottlingRateLimit: ...\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1446", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1446/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1446/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1446/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1446", "id": 562691491, "node_id": "MDU6SXNzdWU1NjI2OTE0OTE=", "number": 1446, "title": "AWS::Serverless::Api Custom Domain endpoint bug", "user": {"login": "darylounet", "id": 203083, "node_id": "MDQ6VXNlcjIwMzA4Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/203083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darylounet", "html_url": "https://github.com/darylounet", "followers_url": "https://api.github.com/users/darylounet/followers", "following_url": "https://api.github.com/users/darylounet/following{/other_user}", "gists_url": "https://api.github.com/users/darylounet/gists{/gist_id}", "starred_url": "https://api.github.com/users/darylounet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darylounet/subscriptions", "organizations_url": "https://api.github.com/users/darylounet/orgs", "repos_url": "https://api.github.com/users/darylounet/repos", "events_url": "https://api.github.com/users/darylounet/events{/privacy}", "received_events_url": "https://api.github.com/users/darylounet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-10T16:50:39Z", "updated_at": "2020-02-19T19:23:59Z", "closed_at": "2020-02-19T19:23:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI have a custom domain in my AWS::Serverless::Api configured with an EDGE endpoint, but a REGIONAL endpoint is deployed.\r\n\r\nHere is my template :\r\n```yaml\r\n  MyAPIApi:\r\n    Type: AWS::Serverless::Api\r\n    Properties:\r\n      Domain:\r\n        CertificateArn: arn:aws:acm:us-east-1:****\r\n        DomainName: api.example.com\r\n        DomainEndpointConfiguration: EDGE\r\n        Route53:\r\n          HostedZoneId: ABCD\r\n      CacheClusterEnabled: false\r\n      DefinitionBody:\r\n        Fn::Transform:\r\n          Name: AWS::Include\r\n          Parameters:\r\n            Location: 's3://mybucket/openapi.yml'\r\n      EndpointConfiguration: REGIONAL\r\n      MethodSettings:\r\n        - ResourcePath: '/*'\r\n          HttpMethod: '*'\r\n          MetricsEnabled: false\r\n      MinimumCompressionSize: 10\r\n      Name: 'DEV'\r\n      StageName: 'DEV'\r\n```\r\nThe Route53 domain is mapped to the \"xxx.execute-api.us-east-1.amazonaws.com\" host instead of a xxx.cloudfront.net one.\r\n\r\nI know that my API has a REGION endpoint, but on AWS console or with CloudFormation resources the two are not linked, I have several API Gateways with REGIONAL endpoints and EDGE custom domains.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1441", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1441/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1441/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1441/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1441", "id": 562031804, "node_id": "MDU6SXNzdWU1NjIwMzE4MDQ=", "number": 1441, "title": "cloudformation package --parameter-overrides", "user": {"login": "jeff1evesque", "id": 2907085, "node_id": "MDQ6VXNlcjI5MDcwODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2907085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeff1evesque", "html_url": "https://github.com/jeff1evesque", "followers_url": "https://api.github.com/users/jeff1evesque/followers", "following_url": "https://api.github.com/users/jeff1evesque/following{/other_user}", "gists_url": "https://api.github.com/users/jeff1evesque/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeff1evesque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeff1evesque/subscriptions", "organizations_url": "https://api.github.com/users/jeff1evesque/orgs", "repos_url": "https://api.github.com/users/jeff1evesque/repos", "events_url": "https://api.github.com/users/jeff1evesque/events{/privacy}", "received_events_url": "https://api.github.com/users/jeff1evesque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-08T15:10:23Z", "updated_at": "2020-02-08T16:16:54Z", "closed_at": "2020-02-08T16:16:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following pattern is supported during `deploy`:\r\n\r\n```bash\r\n    aws2 cloudformation deploy \\\r\n        --template-file \"$TEMPLATE_FILE_PACKAGE\" \\\r\n        --stack-name \"$BUCKET_NAME\" \\\r\n        --parameter-overrides \\\r\n            AccessKey=\"$ACCESS_KEY\" \\\r\n            SecretKey=\"$SECRET_KEY\" \\\r\n        --no-fail-on-empty-changeset \\\r\n        --capabilities \\\r\n            CAPABILITY_IAM \\\r\n            CAPABILITY_NAMED_IAM \\\r\n            CAPABILITY_AUTO_EXPAND\r\n```\r\n\r\nHowever, there is no equivalent for the step prior. Specifically, I haven't found an option equivalent to `--parameter-overrides` to be used during the `package` step:\r\n\r\n```bash\r\n    aws2 cloudformation package \\\r\n        --template-file \"${CWD}/${TEMPLATE_FILE}\" \\\r\n        --s3-bucket \"$BUCKET_NAME\" \\\r\n        --output-template-file \"$TEMPLATE_FILE_PACKAGE\"\r\n```\r\n\r\nIs there something I likely overlooked? There was a [similar issue](https://github.com/awslabs/serverless-application-model/issues/111) that I was hoping would mention this, instead was closed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1437", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1437/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1437/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1437/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1437", "id": 561301052, "node_id": "MDU6SXNzdWU1NjEzMDEwNTI=", "number": 1437, "title": "Support for lambda MaximumRetryAttempts", "user": {"login": "ohshazbot", "id": 123058, "node_id": "MDQ6VXNlcjEyMzA1OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/123058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohshazbot", "html_url": "https://github.com/ohshazbot", "followers_url": "https://api.github.com/users/ohshazbot/followers", "following_url": "https://api.github.com/users/ohshazbot/following{/other_user}", "gists_url": "https://api.github.com/users/ohshazbot/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohshazbot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohshazbot/subscriptions", "organizations_url": "https://api.github.com/users/ohshazbot/orgs", "repos_url": "https://api.github.com/users/ohshazbot/repos", "events_url": "https://api.github.com/users/ohshazbot/events{/privacy}", "received_events_url": "https://api.github.com/users/ohshazbot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-06T22:12:54Z", "updated_at": "2020-02-07T01:03:08Z", "closed_at": "2020-02-07T01:03:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Lambda recently added maximum retry attempts and event age for asynchronous lambdas (https://aws.amazon.com/about-aws/whats-new/2019/11/aws-lambda-supports-max-retry-attempts-event-age-asynchronous-invocations/)\r\n\r\nIt doesn't appear that this feature has been exposed in SAM, nor have I found any tickets for it. It should be a case of wiring the template up against either https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-eventsourcemapping.html or https://docs.amazonaws.cn/en_us/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-eventinvokeconfig.html (tbh, I'm not exactly sure how the SAM template does it's magic)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1432", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1432/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1432/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1432/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1432", "id": 559963753, "node_id": "MDU6SXNzdWU1NTk5NjM3NTM=", "number": 1432, "title": "Usage Plans: support Ref", "user": {"login": "keetonian", "id": 14004203, "node_id": "MDQ6VXNlcjE0MDA0MjAz", "avatar_url": "https://avatars2.githubusercontent.com/u/14004203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keetonian", "html_url": "https://github.com/keetonian", "followers_url": "https://api.github.com/users/keetonian/followers", "following_url": "https://api.github.com/users/keetonian/following{/other_user}", "gists_url": "https://api.github.com/users/keetonian/gists{/gist_id}", "starred_url": "https://api.github.com/users/keetonian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keetonian/subscriptions", "organizations_url": "https://api.github.com/users/keetonian/orgs", "repos_url": "https://api.github.com/users/keetonian/repos", "events_url": "https://api.github.com/users/keetonian/events{/privacy}", "received_events_url": "https://api.github.com/users/keetonian/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1091980330, "node_id": "MDU6TGFiZWwxMDkxOTgwMzMw", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/stage/waiting-for-release", "name": "stage/waiting-for-release", "color": "84ce14", "default": false, "description": "Stage that indicates the issue was accepted and addressed but waiting on a release"}, {"id": 1858298355, "node_id": "MDU6TGFiZWwxODU4Mjk4MzU1", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/v1.22.0", "name": "v1.22.0", "color": "a9e258", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-04T20:35:16Z", "updated_at": "2020-03-16T22:43:09Z", "closed_at": "2020-03-16T22:43:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\n\r\nBefore reporting a new issue, make sure we don't have any duplicates already open or closed by\r\nsearching the issues list. If there is a duplicate, re-open or add a comment to the\r\nexisting issue instead of creating a new one. If you are reporting a bug,\r\nmake sure to include relevant information asked below to help with debugging.\r\n\r\n## GENERAL HELP QUESTIONS ##\r\nGithub Issues is for bug reports and feature requests. If you have general support\r\nquestions, the following locations are a good place:\r\n\r\n- Post a question in StackOverflow  with \"aws-sam\" tag\r\n\r\n-->\r\n\r\n**Description:**\r\n\r\nIn #1179, support was added for Usage Plans. However, it is not possible to reference these plans (and associated resources) without knowing their exact logical ids.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Create an api using usage plans\r\n2. Try to reference usage plan using `ApiLogicalId.UsagePlan`\r\n\r\n**Observed result:**\r\nError\r\n\r\n**Expected result:**\r\nShould work (and reference usage plan/other resources)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1421", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1421/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1421/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1421/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1421", "id": 555916173, "node_id": "MDU6SXNzdWU1NTU5MTYxNzM=", "number": 1421, "title": "v1.21.0 Release Tracker", "user": {"login": "keetonian", "id": 14004203, "node_id": "MDQ6VXNlcjE0MDA0MjAz", "avatar_url": "https://avatars2.githubusercontent.com/u/14004203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keetonian", "html_url": "https://github.com/keetonian", "followers_url": "https://api.github.com/users/keetonian/followers", "following_url": "https://api.github.com/users/keetonian/following{/other_user}", "gists_url": "https://api.github.com/users/keetonian/gists{/gist_id}", "starred_url": "https://api.github.com/users/keetonian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keetonian/subscriptions", "organizations_url": "https://api.github.com/users/keetonian/orgs", "repos_url": "https://api.github.com/users/keetonian/repos", "events_url": "https://api.github.com/users/keetonian/events{/privacy}", "received_events_url": "https://api.github.com/users/keetonian/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1776018111, "node_id": "MDU6TGFiZWwxNzc2MDE4MTEx", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/v1.21.0", "name": "v1.21.0", "color": "70dbe5", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-28T00:33:00Z", "updated_at": "2020-02-26T18:24:41Z", "closed_at": "2020-02-26T18:24:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Changelog\r\n\r\n1. #1361 fix: add support for string/parameter based Enabled for DeploymentPreference\r\n1. #1365 fix: throw error for apikey false in api event when not defined in api\r\n1. #1359 docs: code documentation of API Auth Key format \r\n1. #1363 chore: upgrade to nodejs12.x for all examples and tests \r\n1. #1367 docs: remove comment stating FIFO SQS Queues aren't supported \r\n1. #1392 docs: update black instructions in dev guide \r\n1. #1388 docs: update README.md to point to aws sam spec \r\n1. #1179 feat: usage plans support for Api Auth \r\n1. #1377 feat(policy-templates): add Textract policies \r\n1. #1379 docs: fix Template Specication API Auth Object section \r\n1. #1376 feat: introduce AutoPublishCodeSha256 to allow overriding the lambda version SHA\r\n1. #1405 fix: update policy used for xray tracing \r\n1. #1420 docs: add README pointing to example apps \r\n1. #1419 chore: update black version \r\n1. #1413 docs: add EventBusName for CloudWatchEvent and EventBridgeRule\r\n1. #1396 fix: fix issue when referencing RestApiId by Ref\r\n1. #1408 feat(custom-domains): adds support for HostedZoneName in Domain section of the API\r\n1. #1395 fix: bug fixes in api resource policies", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1417", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1417/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1417/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1417/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1417", "id": 554925838, "node_id": "MDU6SXNzdWU1NTQ5MjU4Mzg=", "number": 1417, "title": "SAM Deploy does not support Tag Prefixes", "user": {"login": "bradduhon", "id": 46005629, "node_id": "MDQ6VXNlcjQ2MDA1NjI5", "avatar_url": "https://avatars0.githubusercontent.com/u/46005629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradduhon", "html_url": "https://github.com/bradduhon", "followers_url": "https://api.github.com/users/bradduhon/followers", "following_url": "https://api.github.com/users/bradduhon/following{/other_user}", "gists_url": "https://api.github.com/users/bradduhon/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradduhon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradduhon/subscriptions", "organizations_url": "https://api.github.com/users/bradduhon/orgs", "repos_url": "https://api.github.com/users/bradduhon/repos", "events_url": "https://api.github.com/users/bradduhon/events{/privacy}", "received_events_url": "https://api.github.com/users/bradduhon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-24T19:58:58Z", "updated_at": "2020-01-24T20:48:02Z", "closed_at": "2020-01-24T20:48:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\n\r\nBefore reporting a new issue, make sure we don't have any duplicates already open or closed by\r\nsearching the issues list. If there is a duplicate, re-open or add a comment to the\r\nexisting issue instead of creating a new one. If you are reporting a bug,\r\nmake sure to include relevant information asked below to help with debugging.\r\n\r\n## GENERAL HELP QUESTIONS ##\r\nGithub Issues is for bug reports and feature requests. If you have general support\r\nquestions, the following locations are a good place:\r\n\r\n- Post a question in StackOverflow  with \"aws-sam\" tag\r\n\r\n-->\r\n\r\n**Description:**\r\n\r\nFrom what I can tell, the `sam deploy ...... --tags prefix:prefix:key=value` command does not work with tag prefixes. When deploying it strips the prefixes and only used the last value in the key field as the tag.\r\n\r\nWhen running the same command with `aws cloudformation ...... --tags prefix:prefix:key=value` the desired results were obtained. I tested this with and without quotes around the Tag key name.\r\n\r\n**Example**\r\n\r\n`sam deploy ...... --tags security:project:name=test` or `sam deploy ...... --tags \"security:project:name\"=test` results in a tag of `name = test` on all resources that accept tags.\r\n\r\n\r\n`cloudformation deploy ...... --tags \"security:project:name\"=test` results in a tag of `security:project:name = test` on all resources that accept tags.\r\n\r\n<!-- Briefly describe the problem you are facing \r\n\r\n**Steps to reproduce the issue:**\r\n1. \r\n2.\r\n3.\r\n\r\n**Observed result:**\r\n\r\n**Expected result:**\r\n-->\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1410", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1410/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1410/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1410/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1410", "id": 554229174, "node_id": "MDU6SXNzdWU1NTQyMjkxNzQ=", "number": 1410, "title": "Issues with type on sam translator", "user": {"login": "kddejong", "id": 36457093, "node_id": "MDQ6VXNlcjM2NDU3MDkz", "avatar_url": "https://avatars3.githubusercontent.com/u/36457093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kddejong", "html_url": "https://github.com/kddejong", "followers_url": "https://api.github.com/users/kddejong/followers", "following_url": "https://api.github.com/users/kddejong/following{/other_user}", "gists_url": "https://api.github.com/users/kddejong/gists{/gist_id}", "starred_url": "https://api.github.com/users/kddejong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kddejong/subscriptions", "organizations_url": "https://api.github.com/users/kddejong/orgs", "repos_url": "https://api.github.com/users/kddejong/repos", "events_url": "https://api.github.com/users/kddejong/events{/privacy}", "received_events_url": "https://api.github.com/users/kddejong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-23T15:27:14Z", "updated_at": "2020-03-16T22:47:41Z", "closed_at": "2020-03-16T22:47:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/awslabs/serverless-application-model/blob/5be0b07efb5265671e6e9848b2397918673520b5/samtranslator/translator/translator.py#L55\r\n\r\nWould it be possible to switch this line to `if isinstance(rest_api, (dict, OrderedDict)):`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1406", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1406/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1406/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1406/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1406", "id": 553740833, "node_id": "MDU6SXNzdWU1NTM3NDA4MzM=", "number": 1406, "title": "Unable to publish with AssumeRolePolicyDocument in Globals", "user": {"login": "jplock", "id": 49093, "node_id": "MDQ6VXNlcjQ5MDkz", "avatar_url": "https://avatars1.githubusercontent.com/u/49093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jplock", "html_url": "https://github.com/jplock", "followers_url": "https://api.github.com/users/jplock/followers", "following_url": "https://api.github.com/users/jplock/following{/other_user}", "gists_url": "https://api.github.com/users/jplock/gists{/gist_id}", "starred_url": "https://api.github.com/users/jplock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jplock/subscriptions", "organizations_url": "https://api.github.com/users/jplock/orgs", "repos_url": "https://api.github.com/users/jplock/repos", "events_url": "https://api.github.com/users/jplock/events{/privacy}", "received_events_url": "https://api.github.com/users/jplock/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-22T19:18:27Z", "updated_at": "2020-02-06T18:24:24Z", "closed_at": "2020-02-06T18:24:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Based on https://github.com/awslabs/serverless-application-model/pull/1311, it looks like i should be able to put `AssumeRolePolicyDocument` in `Globals`, but when trying to run `sam publish`, I'm getting:\r\n\r\n```\r\nPublish Failed\r\nError: Invalid Serverless Application Specification document. Number of errors found: 1. Errors: 'Globals' section is invalid. 'AssumeRolePolicyDocument' is not a supported property of 'Function'. Must be one of the following values - ['Handler', 'Runtime', 'CodeUri', 'DeadLetterQueue', 'Description', 'MemorySize', 'Timeout', 'VpcConfig', 'Environment', 'Tags', 'Tracing', 'KmsKeyArn', 'AutoPublishAlias', 'Layers', 'DeploymentPreference', 'PermissionsBoundary', 'ReservedConcurrentExecutions', 'ProvisionedConcurrencyConfig']\r\nPlease follow the instructions in https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-publishing-applications.html\r\n```\r\n\r\nI'm using the aws-sam-cli 0.40.0 installed via pip\r\n\r\n`sam validate` says the template is fine", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1404", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1404/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1404/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1404/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1404", "id": 552945586, "node_id": "MDU6SXNzdWU1NTI5NDU1ODY=", "number": 1404, "title": "Issue with sam local invoke when EventInvokeConfig", "user": {"login": "cbm-saziri", "id": 42837242, "node_id": "MDQ6VXNlcjQyODM3MjQy", "avatar_url": "https://avatars1.githubusercontent.com/u/42837242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbm-saziri", "html_url": "https://github.com/cbm-saziri", "followers_url": "https://api.github.com/users/cbm-saziri/followers", "following_url": "https://api.github.com/users/cbm-saziri/following{/other_user}", "gists_url": "https://api.github.com/users/cbm-saziri/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbm-saziri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbm-saziri/subscriptions", "organizations_url": "https://api.github.com/users/cbm-saziri/orgs", "repos_url": "https://api.github.com/users/cbm-saziri/repos", "events_url": "https://api.github.com/users/cbm-saziri/events{/privacy}", "received_events_url": "https://api.github.com/users/cbm-saziri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-21T15:21:45Z", "updated_at": "2020-01-22T19:02:16Z", "closed_at": "2020-01-22T19:02:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI can't invoke my function when I have EventInvokeConfig property defined in my sam template.\r\nIt should be supported accordingly this doc : https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-eventinvokeconfiguration.html\r\nThe template is correctly compile and deploy to AWS though.\r\n\r\nError : 'property EventInvokeConfig not defined for resource of type AWS::Serverless::Function\r\nSam version : 0.40.0\r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1391", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1391/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1391/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1391/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1391", "id": 550244145, "node_id": "MDU6SXNzdWU1NTAyNDQxNDU=", "number": 1391, "title": "Incorrect make command in DEVELOPMENT_GUIDE", "user": {"login": "doug-skinner", "id": 29360674, "node_id": "MDQ6VXNlcjI5MzYwNjc0", "avatar_url": "https://avatars1.githubusercontent.com/u/29360674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doug-skinner", "html_url": "https://github.com/doug-skinner", "followers_url": "https://api.github.com/users/doug-skinner/followers", "following_url": "https://api.github.com/users/doug-skinner/following{/other_user}", "gists_url": "https://api.github.com/users/doug-skinner/gists{/gist_id}", "starred_url": "https://api.github.com/users/doug-skinner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doug-skinner/subscriptions", "organizations_url": "https://api.github.com/users/doug-skinner/orgs", "repos_url": "https://api.github.com/users/doug-skinner/repos", "events_url": "https://api.github.com/users/doug-skinner/events{/privacy}", "received_events_url": "https://api.github.com/users/doug-skinner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1091980330, "node_id": "MDU6TGFiZWwxMDkxOTgwMzMw", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/stage/waiting-for-release", "name": "stage/waiting-for-release", "color": "84ce14", "default": false, "description": "Stage that indicates the issue was accepted and addressed but waiting on a release"}, {"id": 1776018111, "node_id": "MDU6TGFiZWwxNzc2MDE4MTEx", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/v1.21.0", "name": "v1.21.0", "color": "70dbe5", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-15T15:08:15Z", "updated_at": "2020-01-28T00:36:11Z", "closed_at": "2020-01-20T20:19:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The `DEVELOPMENT-GUIDE.rst` says the following:\r\n\r\n> After installing, you can run our formatting through our Makefile by `make black-format`\r\n\r\nThat make command no longer exists in the `Makefile` and I think should be replaced with the following text:\r\n\r\n> After installing, you can check your formatting through our Makefile by running `make black-check`. To automatically update your code to match our formatting, please run `make black`\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1380", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1380/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1380/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1380/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1380", "id": 549069666, "node_id": "MDU6SXNzdWU1NDkwNjk2NjY=", "number": 1380, "title": "Deploy lambda functions from AWS Serverless Repo via SAM", "user": {"login": "alexhall", "id": 534841, "node_id": "MDQ6VXNlcjUzNDg0MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/534841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexhall", "html_url": "https://github.com/alexhall", "followers_url": "https://api.github.com/users/alexhall/followers", "following_url": "https://api.github.com/users/alexhall/following{/other_user}", "gists_url": "https://api.github.com/users/alexhall/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexhall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexhall/subscriptions", "organizations_url": "https://api.github.com/users/alexhall/orgs", "repos_url": "https://api.github.com/users/alexhall/repos", "events_url": "https://api.github.com/users/alexhall/events{/privacy}", "received_events_url": "https://api.github.com/users/alexhall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-13T17:15:32Z", "updated_at": "2020-01-15T19:01:55Z", "closed_at": "2020-01-15T19:01:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to be able to deploy a third-party lambda function published to AWS Serverless Repo as part of a SAM template, e.g. to configure my application to use the [Datadog Log Forwarder](https://serverlessrepo.aws.amazon.com/applications/arn:aws:serverlessrepo:us-east-1:464622532012:applications~Datadog-Log-Forwarder).\r\n\r\nI've found documentation on publishing applications to Serverless Repo using SAM (https://docs.aws.amazon.com/serverlessrepo/latest/devguide/using-aws-sam.html) but consuming Serverless Repo applications with SAM doesn't appear to be supported. Is it possible to add support for this use-case?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1378", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1378/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1378/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1378/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1378", "id": 548795058, "node_id": "MDU6SXNzdWU1NDg3OTUwNTg=", "number": 1378, "title": "Fix Template Specification API Auth Object formatting", "user": {"login": "tom139", "id": 8103786, "node_id": "MDQ6VXNlcjgxMDM3ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/8103786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tom139", "html_url": "https://github.com/tom139", "followers_url": "https://api.github.com/users/tom139/followers", "following_url": "https://api.github.com/users/tom139/following{/other_user}", "gists_url": "https://api.github.com/users/tom139/gists{/gist_id}", "starred_url": "https://api.github.com/users/tom139/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tom139/subscriptions", "organizations_url": "https://api.github.com/users/tom139/orgs", "repos_url": "https://api.github.com/users/tom139/repos", "events_url": "https://api.github.com/users/tom139/events{/privacy}", "received_events_url": "https://api.github.com/users/tom139/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1091980330, "node_id": "MDU6TGFiZWwxMDkxOTgwMzMw", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/stage/waiting-for-release", "name": "stage/waiting-for-release", "color": "84ce14", "default": false, "description": "Stage that indicates the issue was accepted and addressed but waiting on a release"}, {"id": 1776018111, "node_id": "MDU6TGFiZWwxNzc2MDE4MTEx", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/v1.21.0", "name": "v1.21.0", "color": "70dbe5", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-13T09:11:29Z", "updated_at": "2020-02-26T18:24:56Z", "closed_at": "2020-02-26T18:24:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Description:**\r\n\r\nIn the SAM Template Specification (`versions/2016-10-31.md`) the paragraph about the API Auth Object is badly formatted.\r\n\r\n**Steps to reproduce the issue:**\r\n\r\n1. Go to the [API Auth Object](https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api-auth-object) paragraph of `versions/2016-10-31.md` (AKA _SAM Template Specification_)\r\n\r\n**Observed result:**\r\n\r\nThe YAML for the Authorizers section is badly formatted (because the ```` ```yaml ```` block is opened twice).\r\n\r\n**Expected result:**\r\n\r\nBetter formatting.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1375", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1375/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1375/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1375/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1375", "id": 547780337, "node_id": "MDU6SXNzdWU1NDc3ODAzMzc=", "number": 1375, "title": "Allow to override the AWS::Serverless::Function generated Version SHA ", "user": {"login": "jmnarloch", "id": 1581045, "node_id": "MDQ6VXNlcjE1ODEwNDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1581045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmnarloch", "html_url": "https://github.com/jmnarloch", "followers_url": "https://api.github.com/users/jmnarloch/followers", "following_url": "https://api.github.com/users/jmnarloch/following{/other_user}", "gists_url": "https://api.github.com/users/jmnarloch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmnarloch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmnarloch/subscriptions", "organizations_url": "https://api.github.com/users/jmnarloch/orgs", "repos_url": "https://api.github.com/users/jmnarloch/repos", "events_url": "https://api.github.com/users/jmnarloch/events{/privacy}", "received_events_url": "https://api.github.com/users/jmnarloch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1091980330, "node_id": "MDU6TGFiZWwxMDkxOTgwMzMw", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/stage/waiting-for-release", "name": "stage/waiting-for-release", "color": "84ce14", "default": false, "description": "Stage that indicates the issue was accepted and addressed but waiting on a release"}, {"id": 1776018111, "node_id": "MDU6TGFiZWwxNzc2MDE4MTEx", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/v1.21.0", "name": "v1.21.0", "color": "70dbe5", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-09T23:26:24Z", "updated_at": "2020-02-26T18:25:04Z", "closed_at": "2020-02-26T18:25:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\n\r\nBefore reporting a new issue, make sure we don't have any duplicates already open or closed by\r\nsearching the issues list. If there is a duplicate, re-open or add a comment to the\r\nexisting issue instead of creating a new one. If you are reporting a bug,\r\nmake sure to include relevant information asked below to help with debugging.\r\n\r\n## GENERAL HELP QUESTIONS ##\r\nGithub Issues is for bug reports and feature requests. If you have general support\r\nquestions, the following locations are a good place:\r\n\r\n- Post a question in StackOverflow  with \"aws-sam\" tag\r\n\r\n-->\r\n\r\n**Description:** `AutoPublishAlias` will lead to SAM creating a Lambda::Version with SHA computed based on Function `Code` configuration. This behaviour is not aligned with Lambda PublishVersion check that can lead into API call failing with error message \r\n\r\n```\r\n409 - Conflict\r\nA version for this Lambda function exists.\r\n```\r\n\r\nThis becomes problematic if you deploy the same code into S3 as new object key, SAM will attempt to create new CloudFormation Lambda version, while Lambda will reject that at runtime.\r\n\r\nIt becomes even more problematic if you use a single CloudFormation template to deploy more then one Lambda function at a time.\r\n\r\n<!-- Briefly describe the problem you are facing -->\r\n\r\n**Steps to reproduce the issue:**\r\n1. Create a SAM template:\r\n\r\n```\r\nResources:\r\n  MinimalFunction:\r\n    Type: 'AWS::Serverless::Function'\r\n    Properties:\r\n      CodeUri: s3://sam-demo-bucket/hello.zip\r\n      Handler: hello.handler\r\n      Runtime: python2.7\r\n      AutoPublishAlias: live\r\n      VersionDescription: sam-testing\r\n```\r\n\r\n2. Execute `sam init && sam deploy`\r\n3. Copy the S3 object as new key and update it in the template.\r\n4. Repeat this step.\r\n\r\n**Observed result:**\r\n\r\nThe execution fails with stack being rollback due to `A version for this Lambda function exists.`\r\n\r\n**Expected result:**\r\nThe end result that we would like to be able to achieve is to associated with SAM Function the SHA of the deployed code that would grant that the CloudFormation deployment will not be attempting to create new version of Lambda function each time.\r\n\r\ni.e. this could be achieved by introducing new attribute like `AutoPublishAliasCodeSha256` (or just `CodeSha256` for short, though I did not want to confuse it with the existing Lambda::Version `CodeSha256`).\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1364", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1364/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1364/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1364/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1364", "id": 545910325, "node_id": "MDU6SXNzdWU1NDU5MTAzMjU=", "number": 1364, "title": "Support endpointConfiguration/vpcEndpointIds config in AWS::Serverless::Api", "user": {"login": "SZubarev", "id": 3128933, "node_id": "MDQ6VXNlcjMxMjg5MzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3128933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SZubarev", "html_url": "https://github.com/SZubarev", "followers_url": "https://api.github.com/users/SZubarev/followers", "following_url": "https://api.github.com/users/SZubarev/following{/other_user}", "gists_url": "https://api.github.com/users/SZubarev/gists{/gist_id}", "starred_url": "https://api.github.com/users/SZubarev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SZubarev/subscriptions", "organizations_url": "https://api.github.com/users/SZubarev/orgs", "repos_url": "https://api.github.com/users/SZubarev/repos", "events_url": "https://api.github.com/users/SZubarev/events{/privacy}", "received_events_url": "https://api.github.com/users/SZubarev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-06T19:56:21Z", "updated_at": "2020-01-06T19:57:50Z", "closed_at": "2020-01-06T19:57:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be great to add support of endpointConfiguration/vpcEndpointIds configuration for AWS::Serverless::Api. Currently CustomResource is required to set these settings for an API.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1355", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1355/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1355/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1355/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1355", "id": 544348085, "node_id": "MDU6SXNzdWU1NDQzNDgwODU=", "number": 1355, "title": "Unable to deploy Lamdba Function with SAM_CLI_TELEMETRY=0", "user": {"login": "iolbr", "id": 8104932, "node_id": "MDQ6VXNlcjgxMDQ5MzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8104932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iolbr", "html_url": "https://github.com/iolbr", "followers_url": "https://api.github.com/users/iolbr/followers", "following_url": "https://api.github.com/users/iolbr/following{/other_user}", "gists_url": "https://api.github.com/users/iolbr/gists{/gist_id}", "starred_url": "https://api.github.com/users/iolbr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iolbr/subscriptions", "organizations_url": "https://api.github.com/users/iolbr/orgs", "repos_url": "https://api.github.com/users/iolbr/repos", "events_url": "https://api.github.com/users/iolbr/events{/privacy}", "received_events_url": "https://api.github.com/users/iolbr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-01T11:47:09Z", "updated_at": "2020-01-01T17:23:35Z", "closed_at": "2020-01-01T17:23:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\nWhen deploying function to AWS using sam I get a stacktrace related to a timeout of due to the fact that aws-serverless-tools-telemetry.us-west-2.amazonaws.com is not reachable. When I turn off telemetry by setting  export SAM_CLI_TELEMETRY=0 stacktrace remains the same. My expectation would be that by setting the parameter this part of the code is no longer executed?!\r\n\r\n**Steps to reproduce the issue:**\r\n1. Build hello world demo app with python 3.6\r\n2. export SAM_CLI_TELEMETRY=0\r\n3.sam deploy --guided\r\n\r\n**Observed result:**\r\nConfiguring SAM deploy\r\n======================\r\n\r\n\tLooking for samconfig.toml :  Not found\r\n\r\n\tSetting default arguments for 'sam deploy'\r\n\t=========================================\r\n\tStack Name [sam-app]: \r\n\tAWS Region [us-east-1]: eu-central-1               \r\n\t#Shows you resources changes to be deployed and require a 'Y' to initiate deploy\r\n\tConfirm changes before deploy [y/N]: \r\n\t#SAM needs permission to be able to create roles to connect to the resources in your template\r\n\tAllow SAM CLI IAM role creation [Y/n]: \r\n\tSave arguments to samconfig.toml [Y/n]: \r\n\r\n\tLooking for resources needed for deployment: Found!\r\nTraceback (most recent call last):\r\n  File \"/home/io/python/aws-sam/bin/sam\", line 11, in <module>\r\n    sys.exit(cli())\r\n  File \"/home/io/python/aws-sam/lib/python3.6/site-packages/click/core.py\", line 764, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"/home/io/python/aws-sam/lib/python3.6/site-packages/click/core.py\", line 717, in main\r\n    rv = self.invoke(ctx)\r\n  File \"/home/io/python/aws-sam/lib/python3.6/site-packages/click/core.py\", line 1137, in invoke\r\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\r\n  File \"/home/io/python/aws-sam/lib/python3.6/site-packages/click/core.py\", line 956, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n  File \"/home/io/python/aws-sam/lib/python3.6/site-packages/click/core.py\", line 555, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"/home/io/python/aws-sam/lib/python3.6/site-packages/click/decorators.py\", line 64, in new_func\r\n    return ctx.invoke(f, obj, *args, **kwargs)\r\n  File \"/home/io/python/aws-sam/lib/python3.6/site-packages/click/core.py\", line 555, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"/home/io/python/aws-sam/lib/python3.6/site-packages/samcli/lib/telemetry/metrics.py\", line 48, in wrapped\r\n    return func(*args, **kwargs)\r\n  File \"/home/io/python/aws-sam/lib/python3.6/site-packages/samcli/commands/deploy/command.py\", line 187, in cli\r\n    ctx.profile,\r\n  File \"/home/io/python/aws-sam/lib/python3.6/site-packages/samcli/commands/deploy/command.py\", line 245, in do_cli\r\n    stack_name, s3_bucket, region, profile, confirm_changeset, _parameter_override_keys, parameter_overrides\r\n  File \"/home/io/python/aws-sam/lib/python3.6/site-packages/samcli/commands/deploy/command.py\", line 345, in guided_deploy\r\n    s3_bucket = manage_stack(profile=profile, region=region)\r\n  File \"/home/io/python/aws-sam/lib/python3.6/site-packages/samcli/lib/bootstrap/bootstrap.py\", line 37, in manage_stack\r\n    return _create_or_get_stack(cloudformation_client)\r\n  File \"/home/io/python/aws-sam/lib/python3.6/site-packages/samcli/lib/bootstrap/bootstrap.py\", line 71, in _create_or_get_stack\r\n    outputs = stack[\"Outputs\"]\r\nKeyError: 'Outputs'\r\n\r\n**Expected result:**\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1350", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1350/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1350/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1350/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1350", "id": 544026430, "node_id": "MDU6SXNzdWU1NDQwMjY0MzA=", "number": 1350, "title": "Running the build command with the --use-container option leads to an error on cloud9 with ubuntu 18.04.", "user": {"login": "amadeuspagel", "id": 16998799, "node_id": "MDQ6VXNlcjE2OTk4Nzk5", "avatar_url": "https://avatars3.githubusercontent.com/u/16998799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amadeuspagel", "html_url": "https://github.com/amadeuspagel", "followers_url": "https://api.github.com/users/amadeuspagel/followers", "following_url": "https://api.github.com/users/amadeuspagel/following{/other_user}", "gists_url": "https://api.github.com/users/amadeuspagel/gists{/gist_id}", "starred_url": "https://api.github.com/users/amadeuspagel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amadeuspagel/subscriptions", "organizations_url": "https://api.github.com/users/amadeuspagel/orgs", "repos_url": "https://api.github.com/users/amadeuspagel/repos", "events_url": "https://api.github.com/users/amadeuspagel/events{/privacy}", "received_events_url": "https://api.github.com/users/amadeuspagel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-30T22:11:46Z", "updated_at": "2019-12-30T23:12:04Z", "closed_at": "2019-12-30T23:12:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\n\r\nBefore reporting a new issue, make sure we don't have any duplicates already open or closed by\r\nsearching the issues list. If there is a duplicate, re-open or add a comment to the\r\nexisting issue instead of creating a new one. If you are reporting a bug,\r\nmake sure to include relevant information asked below to help with debugging.\r\n\r\n## GENERAL HELP QUESTIONS ##\r\nGithub Issues is for bug reports and feature requests. If you have general support\r\nquestions, the following locations are a good place:\r\n\r\n- Post a question in StackOverflow  with \"aws-sam\" tag\r\n\r\n-->\r\n\r\n**Steps to reproduce the issue:**\r\n1. Create a cloud9 workspace using ubuntu 18.04.\r\n2. Run `sam init`, hit enter a few times.\r\n3. `cd` into the app directory and run `sam build --use-container`\r\n\r\n**Observed result:**\r\n\r\n```\r\nStarting Build inside a container\r\nBuilding resource 'HelloWorldFunction'\r\n\r\nFetching lambci/lambda:build-nodejs12.x Docker container image...........................................................................................................\r\nMounting /home/ubuntu/environment/sam-app-js/hello-world as /tmp/samcli/source:ro,delegated inside runtime container\r\nTraceback (most recent call last):\r\n  File \"/home/linuxbrew/.linuxbrew/bin/sam\", line 11, in <module>\r\n    load_entry_point('aws-sam-cli==0.39.0', 'console_scripts', 'sam')()\r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/aws-sam-cli/0.39.0/libexec/lib/python3.7/site-packages/click/core.py\", line 764, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/aws-sam-cli/0.39.0/libexec/lib/python3.7/site-packages/click/core.py\", line 717, in main\r\n    rv = self.invoke(ctx)\r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/aws-sam-cli/0.39.0/libexec/lib/python3.7/site-packages/click/core.py\", line 1137, in invoke\r\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/aws-sam-cli/0.39.0/libexec/lib/python3.7/site-packages/click/core.py\", line 956, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/aws-sam-cli/0.39.0/libexec/lib/python3.7/site-packages/click/core.py\", line 555, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/aws-sam-cli/0.39.0/libexec/lib/python3.7/site-packages/click/decorators.py\", line 64, in new_func\r\n    return ctx.invoke(f, obj, *args, **kwargs)\r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/aws-sam-cli/0.39.0/libexec/lib/python3.7/site-packages/click/core.py\", line 555, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/aws-sam-cli/0.39.0/libexec/lib/python3.7/site-packages/samcli/lib/telemetry/metrics.py\", line 96, in wrapped\r\n    raise exception  # pylint: disable=raising-bad-type\r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/aws-sam-cli/0.39.0/libexec/lib/python3.7/site-packages/samcli/lib/telemetry/metrics.py\", line 62, in wrapped\r\n    return_value = func(*args, **kwargs)\r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/aws-sam-cli/0.39.0/libexec/lib/python3.7/site-packages/samcli/commands/build/command.py\", line 127, in cli\r\n    mode,\r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/aws-sam-cli/0.39.0/libexec/lib/python3.7/site-packages/samcli/commands/build/command.py\", line 192, in do_cli\r\n    artifacts = builder.build()\r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/aws-sam-cli/0.39.0/libexec/lib/python3.7/site-packages/samcli/lib/build/app_builder.py\", line 104, in build\r\n    lambda_function.runtime)\r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/aws-sam-cli/0.39.0/libexec/lib/python3.7/site-packages/samcli/lib/build/app_builder.py\", line 195, in _build_function\r\n    runtime)\r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/aws-sam-cli/0.39.0/libexec/lib/python3.7/site-packages/samcli/lib/build/app_builder.py\", line 267, in _build_function_on_container\r\n    container.wait_for_logs(stdout=stdout_stream, stderr=stderr_stream)\r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/aws-sam-cli/0.39.0/libexec/lib/python3.7/site-packages/samcli/local/docker/container.py\", line 197, in wait_for_logs\r\n    raise RuntimeError(\"Container does not exist. Cannot get logs for this container\")\r\nRuntimeError: Container does not exist. Cannot get logs for this container\r\n```\r\n\r\n**Expected result:**\r\n\r\nThe build happens without errors.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1349", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1349/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1349/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1349/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1349", "id": 544008190, "node_id": "MDU6SXNzdWU1NDQwMDgxOTA=", "number": 1349, "title": "Generated IAM role name does not match generated_resources.rst", "user": {"login": "folksgl", "id": 25183336, "node_id": "MDQ6VXNlcjI1MTgzMzM2", "avatar_url": "https://avatars3.githubusercontent.com/u/25183336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/folksgl", "html_url": "https://github.com/folksgl", "followers_url": "https://api.github.com/users/folksgl/followers", "following_url": "https://api.github.com/users/folksgl/following{/other_user}", "gists_url": "https://api.github.com/users/folksgl/gists{/gist_id}", "starred_url": "https://api.github.com/users/folksgl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/folksgl/subscriptions", "organizations_url": "https://api.github.com/users/folksgl/orgs", "repos_url": "https://api.github.com/users/folksgl/repos", "events_url": "https://api.github.com/users/folksgl/events{/privacy}", "received_events_url": "https://api.github.com/users/folksgl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-30T20:52:37Z", "updated_at": "2020-01-03T15:35:13Z", "closed_at": "2020-01-03T15:35:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\n\r\nThe IAM role name generated by the AWS::Serverless::Function resource does not match what is described in https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#aws-serverless-function\r\nIt appears in my experience that the stack name is prepended to the generated role and that a random suffix is appended to the end of the role name.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Define a template per https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#format\r\n2. Run\r\n3. Inspect generated IAM Role names.\r\n\r\nI have been using the \"List of IAM Policy Document\" for the Policies section of the declared function resources.\r\n\r\n**Observed result:**\r\nIAM Role Name: my-stack-myFunctionName-RandomSuffix\r\n**Expected result:**\r\nIAM Role Name: myFunctionNameRole\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1343", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1343/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1343/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1343/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1343", "id": 542096203, "node_id": "MDU6SXNzdWU1NDIwOTYyMDM=", "number": 1343, "title": "Debugging isn't available for java11", "user": {"login": "buckett", "id": 5921, "node_id": "MDQ6VXNlcjU5MjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/5921?v=4", "gravatar_id": "", "url": "https://api.github.com/users/buckett", "html_url": "https://github.com/buckett", "followers_url": "https://api.github.com/users/buckett/followers", "following_url": "https://api.github.com/users/buckett/following{/other_user}", "gists_url": "https://api.github.com/users/buckett/gists{/gist_id}", "starred_url": "https://api.github.com/users/buckett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/buckett/subscriptions", "organizations_url": "https://api.github.com/users/buckett/orgs", "repos_url": "https://api.github.com/users/buckett/repos", "events_url": "https://api.github.com/users/buckett/events{/privacy}", "received_events_url": "https://api.github.com/users/buckett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-24T11:18:40Z", "updated_at": "2019-12-24T11:45:56Z", "closed_at": "2019-12-24T11:45:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you attempt to debug a local lambda function running on java11 with `sam`:\r\n\r\n     sam local start-api --template template.yaml -d 8000\r\n\r\nyou get an error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.37.0/libexec/lib/python3.7/site-packages/samcli/local/docker/lambda_debug_entrypoint.py\", line 141, in get_entry_point\r\n    return entrypoint_mapping[runtime]\r\nKeyError: 'java11'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.37.0/libexec/lib/python3.7/site-packages/flask/app.py\", line 2317, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.37.0/libexec/lib/python3.7/site-packages/flask/app.py\", line 1840, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.37.0/libexec/lib/python3.7/site-packages/flask/app.py\", line 1743, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.37.0/libexec/lib/python3.7/site-packages/flask/_compat.py\", line 36, in reraise\r\n    raise value\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.37.0/libexec/lib/python3.7/site-packages/flask/app.py\", line 1838, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.37.0/libexec/lib/python3.7/site-packages/flask/app.py\", line 1824, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.37.0/libexec/lib/python3.7/site-packages/samcli/local/apigw/local_apigw_service.py\", line 191, in _request_handler\r\n    self.lambda_runner.invoke(route.function_name, event, stdout=stdout_stream_writer, stderr=self.stderr)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.37.0/libexec/lib/python3.7/site-packages/samcli/commands/local/lib/local_lambda.py\", line 98, in invoke\r\n    self.local_runtime.invoke(config, event, debug_context=self.debug_context, stdout=stdout, stderr=stderr)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.37.0/libexec/lib/python3.7/site-packages/samcli/local/lambdafn/runtime.py\", line 77, in invoke\r\n    debug_options=debug_context,\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.37.0/libexec/lib/python3.7/site-packages/samcli/local/docker/lambda_container.py\", line 74, in __init__\r\n    entry = LambdaContainer._get_entry_point(runtime, debug_options)\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.37.0/libexec/lib/python3.7/site-packages/samcli/local/docker/lambda_container.py\", line 202, in _get_entry_point\r\n    options=LambdaContainer._DEBUG_ENTRYPOINT_OPTIONS,\r\n  File \"/usr/local/Cellar/aws-sam-cli/0.37.0/libexec/lib/python3.7/site-packages/samcli/local/docker/lambda_debug_entrypoint.py\", line 143, in get_entry_point\r\n    raise DebuggingNotSupported(\"Debugging is not currently supported for {}\".format(runtime))\r\nsamcli.local.docker.lambda_debug_entrypoint.DebuggingNotSupported: Debugging is not currently supported for java11\r\n```\r\n\r\nDebugging in the same way works fine on java8.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1342", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1342/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1342/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1342/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1342", "id": 542025711, "node_id": "MDU6SXNzdWU1NDIwMjU3MTE=", "number": 1342, "title": "Conditional DeploymentPreference not supported", "user": {"login": "hgl", "id": 7038035, "node_id": "MDQ6VXNlcjcwMzgwMzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/7038035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgl", "html_url": "https://github.com/hgl", "followers_url": "https://api.github.com/users/hgl/followers", "following_url": "https://api.github.com/users/hgl/following{/other_user}", "gists_url": "https://api.github.com/users/hgl/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgl/subscriptions", "organizations_url": "https://api.github.com/users/hgl/orgs", "repos_url": "https://api.github.com/users/hgl/repos", "events_url": "https://api.github.com/users/hgl/events{/privacy}", "received_events_url": "https://api.github.com/users/hgl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-24T07:25:22Z", "updated_at": "2019-12-27T18:43:18Z", "closed_at": "2019-12-27T18:43:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\n\r\nBefore reporting a new issue, make sure we don't have any duplicates already open or closed by\r\nsearching the issues list. If there is a duplicate, re-open or add a comment to the\r\nexisting issue instead of creating a new one. If you are reporting a bug,\r\nmake sure to include relevant information asked below to help with debugging.\r\n\r\n## GENERAL HELP QUESTIONS ##\r\nGithub Issues is for bug reports and feature requests. If you have general support\r\nquestions, the following locations are a good place:\r\n\r\n- Post a question in StackOverflow  with \"aws-sam\" tag\r\n\r\n-->\r\n\r\n**Description:**\r\n\r\nI want to disable `DeploymentPreference` for staging and only enable for prod, it seems it's not supported.\r\n\r\n**Steps to reproduce the issue:**\r\n\r\n```\r\nConditions:\r\n  IsProd: !Equals [ !Ref Stage, prod ]\r\nFunction:\r\n  Type: AWS::Serverless::Function\r\n  Properties:\r\n    DeploymentPreference:\r\n      Enabled: !If [ IsProd, true, false ]\r\n      Type: Canary10Percent10Minutes\r\n```\r\n\r\n**Observed result:**\r\n\r\nFailed with\r\n```\r\nResource with id [Function] is invalid. 'Enabled' must be a boolean value\r\n```\r\n**Expected result:**\r\n\r\nIt should deploy.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1336", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1336/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1336/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1336/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1336", "id": 541229504, "node_id": "MDU6SXNzdWU1NDEyMjk1MDQ=", "number": 1336, "title": "Issue tracker for SAM patch fix release (V1.19.1)", "user": {"login": "ShreyaGangishetty", "id": 7549138, "node_id": "MDQ6VXNlcjc1NDkxMzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7549138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShreyaGangishetty", "html_url": "https://github.com/ShreyaGangishetty", "followers_url": "https://api.github.com/users/ShreyaGangishetty/followers", "following_url": "https://api.github.com/users/ShreyaGangishetty/following{/other_user}", "gists_url": "https://api.github.com/users/ShreyaGangishetty/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShreyaGangishetty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShreyaGangishetty/subscriptions", "organizations_url": "https://api.github.com/users/ShreyaGangishetty/orgs", "repos_url": "https://api.github.com/users/ShreyaGangishetty/repos", "events_url": "https://api.github.com/users/ShreyaGangishetty/events{/privacy}", "received_events_url": "https://api.github.com/users/ShreyaGangishetty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1746046541, "node_id": "MDU6TGFiZWwxNzQ2MDQ2NTQx", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/v1.19.1", "name": "v1.19.1", "color": "bfd4f2", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-20T22:31:39Z", "updated_at": "2019-12-27T18:54:09Z", "closed_at": "2019-12-27T18:54:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Changelog:\r\n1. #1301 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1335", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1335/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1335/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1335/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1335", "id": 540859020, "node_id": "MDU6SXNzdWU1NDA4NTkwMjA=", "number": 1335, "title": "AWS SAM : Importing AWS API gateway resource in another template gives error : Reason: Transform AWS::Serverless-2016-10-31 failed with: Internal transform failure.", "user": {"login": "dattatrayhkulkarni", "id": 13835120, "node_id": "MDQ6VXNlcjEzODM1MTIw", "avatar_url": "https://avatars0.githubusercontent.com/u/13835120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dattatrayhkulkarni", "html_url": "https://github.com/dattatrayhkulkarni", "followers_url": "https://api.github.com/users/dattatrayhkulkarni/followers", "following_url": "https://api.github.com/users/dattatrayhkulkarni/following{/other_user}", "gists_url": "https://api.github.com/users/dattatrayhkulkarni/gists{/gist_id}", "starred_url": "https://api.github.com/users/dattatrayhkulkarni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dattatrayhkulkarni/subscriptions", "organizations_url": "https://api.github.com/users/dattatrayhkulkarni/orgs", "repos_url": "https://api.github.com/users/dattatrayhkulkarni/repos", "events_url": "https://api.github.com/users/dattatrayhkulkarni/events{/privacy}", "received_events_url": "https://api.github.com/users/dattatrayhkulkarni/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-20T08:39:04Z", "updated_at": "2019-12-20T18:58:40Z", "closed_at": "2019-12-20T18:58:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the first SAM template, I want to create an API Gateway and a lambda function which uses this API gateway.\r\n\r\nHere is the snippet - \r\n\r\nFirst SAM template -\r\n\r\n```\r\nResources:\r\n  MyApi:\r\n    Type: AWS::Serverless::Api\r\n    Properties:\r\n      Name: Rainmaker AWS Api Gateway\r\n      StageName: !Ref StageName\r\n      Cors: \"'*'\"\r\n \r\nOutputs:\r\nRainmakerApiRestApiId:\r\n    Description: 'API Gateway ARN for my AWS API Gateway'\r\n    Value:\r\n      Ref: MyApi\r\n    Export:\r\n      Name: !Sub \"${AWS::StackName}-MyApi\"\r\n  MyApiRootResourceId:\r\n    Value: !GetAtt MyApi.RootResourceId\r\n    Export:\r\n      Name: MyApi-RootResourceId\r\n```\r\n\r\nI am trying to export this API gateway resource, from the first template.\r\n\r\nI want to use this API gateway resource in another SAM template, using import statement.\r\n\r\nHere is the snippet in the second SAM template.\r\n\r\n```\r\nParameters:\r\n  StageName:\r\n    Type: String\r\n    Default: dev\r\n MyBaseStackName:\r\n    Description: Name of the base stack with all infra resources\r\n    Type: String\r\n    Default: first-stack\r\n\r\nResources:\r\n  MyFunction:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      FunctionName: MyFunctionName\r\n      CodeUri: ../../../bin/handlers/\r\n      Handler: myfunctionname\r\n      Events:\r\n        MyHTTPEvent:\r\n          Type: Api\r\n          Properties:\r\n            RestApiId:\r\n              Fn::ImportValue:\r\n                !Sub \"${MyBaseStackName}-MyApi\"\r\n            Path: /authorize\r\n            Method: get\r\n            Auth:\r\n              Authorizer: NONE\r\n```\r\n\r\nWhen I deploy the second SAM template, I am getting below error -\r\n\r\n> Error: Failed to create changeset for the stack: esp-git-user, ex: Waiter ChangeSetCreateComplete failed: Waiter encountered a terminal failure state Status: FAILED. Reason: Transform AWS::Serverless-2016-10-31 failed with: Internal transform failure.\r\n\r\n\r\nIs there any good example which explains exporting API gateway resource from the first SAM template and then using it in the second SAM template.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1328", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1328/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1328/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1328/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1328", "id": 537839203, "node_id": "MDU6SXNzdWU1Mzc4MzkyMDM=", "number": 1328, "title": "fix: ApiKeyRequired is not working as expected in api event when there is no `Auth` section for the Api", "user": {"login": "ShreyaGangishetty", "id": 7549138, "node_id": "MDQ6VXNlcjc1NDkxMzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7549138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShreyaGangishetty", "html_url": "https://github.com/ShreyaGangishetty", "followers_url": "https://api.github.com/users/ShreyaGangishetty/followers", "following_url": "https://api.github.com/users/ShreyaGangishetty/following{/other_user}", "gists_url": "https://api.github.com/users/ShreyaGangishetty/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShreyaGangishetty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShreyaGangishetty/subscriptions", "organizations_url": "https://api.github.com/users/ShreyaGangishetty/orgs", "repos_url": "https://api.github.com/users/ShreyaGangishetty/repos", "events_url": "https://api.github.com/users/ShreyaGangishetty/events{/privacy}", "received_events_url": "https://api.github.com/users/ShreyaGangishetty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1091980330, "node_id": "MDU6TGFiZWwxMDkxOTgwMzMw", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/stage/waiting-for-release", "name": "stage/waiting-for-release", "color": "84ce14", "default": false, "description": "Stage that indicates the issue was accepted and addressed but waiting on a release"}, {"id": 797198215, "node_id": "MDU6TGFiZWw3OTcxOTgyMTU=", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/type/bug", "name": "type/bug", "color": "b60205", "default": false, "description": null}, {"id": 1776018111, "node_id": "MDU6TGFiZWwxNzc2MDE4MTEx", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/v1.21.0", "name": "v1.21.0", "color": "70dbe5", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-14T00:46:57Z", "updated_at": "2020-02-26T18:25:15Z", "closed_at": "2020-02-26T18:25:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Description:**\r\nSAM throws a 5xx exception when there is no `Auth` section for API and `ApiKeyRequired` is set at the function level. \r\n\r\n**Steps to reproduce the issue:**\r\n1. Deploy the below template using SAM\r\n\r\n```yaml\r\nAWSTemplateFormatVersion: '2010-09-09'\r\nTransform: AWS::Serverless-2016-10-31\r\n\r\nResources:\r\n  MyFunctionWithApiKeyRequired:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      InlineCode: |\r\n         exports.handler = async (event) => {\r\n          console.log(\"Hello from MyAuthFunction\")\r\n           return {\r\n           statusCode: 200,\r\n           body: JSON.stringify(event),\r\n           headers: {}\r\n           }\r\n         }\r\n      Handler: index.handler\r\n      Runtime: nodejs8.10\r\n      Events:\r\n        MyApiWithApiKeyRequired:\r\n          Type: Api\r\n          Properties:\r\n            Path: /hello\r\n            Method: get\r\n            Auth:\r\n              ApiKeyRequired: false\r\n```\r\n\r\n**Observed result:**\r\n```\r\nTraceback (most recent call last):\r\n  File \"/var/task/handlers.py\", line 67, in transform\r\n    output_fragment = translator.translate(copy.deepcopy(input_fragment), parameter_values=parameter_values)\r\n  File \"/var/task/samtranslator/translator/translator.py\", line 83, in translate\r\n    translated = macro.to_cloudformation(**kwargs)\r\n  File \"/var/task/samtranslator/model/sam_resources.py\", line 133, in to_cloudformation\r\n    lambda_alias=lambda_alias)\r\n  File \"/var/task/samtranslator/model/sam_resources.py\", line 357, in _generate_event_resources\r\n    resources += eventsource.to_cloudformation(**kwargs)\r\n  File \"/var/task/samtranslator/model/eventsources/push.py\", line 534, in to_cloudformation\r\n    self._add_swagger_integration(explicit_api, function)\r\n  File \"/var/task/samtranslator/model/eventsources/push.py\", line 635, in _add_swagger_integration\r\n    if apikey_required_setting_is_false and not api_auth.get('ApiKeyRequired'):\r\nAttributeError: 'NoneType' object has no attribute 'get'\r\n```\r\n**Expected result:**\r\nthrow an ERROR for `ApiKeyRequired:false` if there is no `ApiKeyRequired:true` set for the api and set the required auth in security for the function path if `ApiKeyRequired:true` at function level and not present at api level", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1327", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1327/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1327/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1327/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1327", "id": 537752213, "node_id": "MDU6SXNzdWU1Mzc3NTIyMTM=", "number": 1327, "title": "Add VpcEndpointIds to EndpointConfiguration Parameter", "user": {"login": "matmertz25", "id": 40722304, "node_id": "MDQ6VXNlcjQwNzIyMzA0", "avatar_url": "https://avatars0.githubusercontent.com/u/40722304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matmertz25", "html_url": "https://github.com/matmertz25", "followers_url": "https://api.github.com/users/matmertz25/followers", "following_url": "https://api.github.com/users/matmertz25/following{/other_user}", "gists_url": "https://api.github.com/users/matmertz25/gists{/gist_id}", "starred_url": "https://api.github.com/users/matmertz25/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matmertz25/subscriptions", "organizations_url": "https://api.github.com/users/matmertz25/orgs", "repos_url": "https://api.github.com/users/matmertz25/repos", "events_url": "https://api.github.com/users/matmertz25/events{/privacy}", "received_events_url": "https://api.github.com/users/matmertz25/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 797198227, "node_id": "MDU6TGFiZWw3OTcxOTgyMjc=", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/type/feature", "name": "type/feature", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-13T20:02:18Z", "updated_at": "2020-08-18T00:24:24Z", "closed_at": "2020-08-18T00:24:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\n\r\nCurrently Cloudformation supports both Types and VpcEndpointIds as parameters on EndpointConfiguration. For endpoints types of PRIVATE a VPC endpoint is required to generate Route53 Aliases from which you can use to direct to specific APIs on apigateway. Without the Aliases the API id must be supplied in the header on every request (x-apigw-api-id). As a workaround the Api and VPCe can be linked through the console/sdks but every time SAM is deployed it overwrites the previous configuration.\r\n\r\nAdding a VpcEndpointIds as a list of strings parameter on the EndpointConfiguration would enable the association of Apis on apigateway and vpce's\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1326", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1326/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1326/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1326/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1326", "id": 537734213, "node_id": "MDU6SXNzdWU1Mzc3MzQyMTM=", "number": 1326, "title": "V1.16.0 Release Tracker", "user": {"login": "praneetap", "id": 3377747, "node_id": "MDQ6VXNlcjMzNzc3NDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3377747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/praneetap", "html_url": "https://github.com/praneetap", "followers_url": "https://api.github.com/users/praneetap/followers", "following_url": "https://api.github.com/users/praneetap/following{/other_user}", "gists_url": "https://api.github.com/users/praneetap/gists{/gist_id}", "starred_url": "https://api.github.com/users/praneetap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/praneetap/subscriptions", "organizations_url": "https://api.github.com/users/praneetap/orgs", "repos_url": "https://api.github.com/users/praneetap/repos", "events_url": "https://api.github.com/users/praneetap/events{/privacy}", "received_events_url": "https://api.github.com/users/praneetap/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-13T19:32:18Z", "updated_at": "2019-12-13T19:51:50Z", "closed_at": "2019-12-13T19:51:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Release tracker for V1.16.0\r\nTo get a look at where this release is in our internal pipeline look at our Github\r\nproject [here](https://github.com/awslabs/serverless-application-model/projects/3)\r\n\r\n## Changelog\r\n(#1261 ) feat: support virtual sharding and stream failure processing", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1325", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1325/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1325/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1325/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1325", "id": 537733344, "node_id": "MDU6SXNzdWU1Mzc3MzMzNDQ=", "number": 1325, "title": "V1.17.0 Release Tracker", "user": {"login": "praneetap", "id": 3377747, "node_id": "MDQ6VXNlcjMzNzc3NDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3377747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/praneetap", "html_url": "https://github.com/praneetap", "followers_url": "https://api.github.com/users/praneetap/followers", "following_url": "https://api.github.com/users/praneetap/following{/other_user}", "gists_url": "https://api.github.com/users/praneetap/gists{/gist_id}", "starred_url": "https://api.github.com/users/praneetap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/praneetap/subscriptions", "organizations_url": "https://api.github.com/users/praneetap/orgs", "repos_url": "https://api.github.com/users/praneetap/repos", "events_url": "https://api.github.com/users/praneetap/events{/privacy}", "received_events_url": "https://api.github.com/users/praneetap/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-13T19:30:55Z", "updated_at": "2019-12-13T19:51:57Z", "closed_at": "2019-12-13T19:51:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Release tracker for V1.17.0\r\nTo get a look at where this release is in our internal pipeline look at our Github\r\nproject [here](https://github.com/awslabs/serverless-application-model/projects/3)\r\n\r\n## Changelog\r\n(#1185) feat: changes for eventbusname on cloudwatch event", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1324", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1324/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1324/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1324/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1324", "id": 537732909, "node_id": "MDU6SXNzdWU1Mzc3MzI5MDk=", "number": 1324, "title": "V1.18.0 Release Tracker", "user": {"login": "praneetap", "id": 3377747, "node_id": "MDQ6VXNlcjMzNzc3NDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3377747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/praneetap", "html_url": "https://github.com/praneetap", "followers_url": "https://api.github.com/users/praneetap/followers", "following_url": "https://api.github.com/users/praneetap/following{/other_user}", "gists_url": "https://api.github.com/users/praneetap/gists{/gist_id}", "starred_url": "https://api.github.com/users/praneetap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/praneetap/subscriptions", "organizations_url": "https://api.github.com/users/praneetap/orgs", "repos_url": "https://api.github.com/users/praneetap/repos", "events_url": "https://api.github.com/users/praneetap/events{/privacy}", "received_events_url": "https://api.github.com/users/praneetap/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-13T19:30:14Z", "updated_at": "2019-12-13T19:52:01Z", "closed_at": "2019-12-13T19:52:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Release tracker for V1.18.0\r\nTo get a look at where this release is in our internal pipeline look at our Github\r\nproject [here](https://github.com/awslabs/serverless-application-model/projects/3)\r\n\r\n## Changelog\r\n#1284 \r\n#1285", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1323", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1323/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1323/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1323/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1323", "id": 537732267, "node_id": "MDU6SXNzdWU1Mzc3MzIyNjc=", "number": 1323, "title": "v1.19.0 Release Tracker", "user": {"login": "praneetap", "id": 3377747, "node_id": "MDQ6VXNlcjMzNzc3NDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3377747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/praneetap", "html_url": "https://github.com/praneetap", "followers_url": "https://api.github.com/users/praneetap/followers", "following_url": "https://api.github.com/users/praneetap/following{/other_user}", "gists_url": "https://api.github.com/users/praneetap/gists{/gist_id}", "starred_url": "https://api.github.com/users/praneetap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/praneetap/subscriptions", "organizations_url": "https://api.github.com/users/praneetap/orgs", "repos_url": "https://api.github.com/users/praneetap/repos", "events_url": "https://api.github.com/users/praneetap/events{/privacy}", "received_events_url": "https://api.github.com/users/praneetap/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-13T19:29:07Z", "updated_at": "2019-12-13T19:52:11Z", "closed_at": "2019-12-13T19:52:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Release tracker for V1.19.0\r\nTo get a look at where this release is in our internal pipeline look at our Github\r\nproject [here](https://github.com/awslabs/serverless-application-model/projects/3)\r\n\r\n## Changelog\r\n#1290", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1313", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1313/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1313/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1313/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1313", "id": 535811921, "node_id": "MDU6SXNzdWU1MzU4MTE5MjE=", "number": 1313, "title": "Multiple HttpApi events on a single Lambda results in only one being applied", "user": {"login": "brysontyrrell", "id": 3086245, "node_id": "MDQ6VXNlcjMwODYyNDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3086245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brysontyrrell", "html_url": "https://github.com/brysontyrrell", "followers_url": "https://api.github.com/users/brysontyrrell/followers", "following_url": "https://api.github.com/users/brysontyrrell/following{/other_user}", "gists_url": "https://api.github.com/users/brysontyrrell/gists{/gist_id}", "starred_url": "https://api.github.com/users/brysontyrrell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brysontyrrell/subscriptions", "organizations_url": "https://api.github.com/users/brysontyrrell/orgs", "repos_url": "https://api.github.com/users/brysontyrrell/repos", "events_url": "https://api.github.com/users/brysontyrrell/events{/privacy}", "received_events_url": "https://api.github.com/users/brysontyrrell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "keetonian", "id": 14004203, "node_id": "MDQ6VXNlcjE0MDA0MjAz", "avatar_url": "https://avatars2.githubusercontent.com/u/14004203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keetonian", "html_url": "https://github.com/keetonian", "followers_url": "https://api.github.com/users/keetonian/followers", "following_url": "https://api.github.com/users/keetonian/following{/other_user}", "gists_url": "https://api.github.com/users/keetonian/gists{/gist_id}", "starred_url": "https://api.github.com/users/keetonian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keetonian/subscriptions", "organizations_url": "https://api.github.com/users/keetonian/orgs", "repos_url": "https://api.github.com/users/keetonian/repos", "events_url": "https://api.github.com/users/keetonian/events{/privacy}", "received_events_url": "https://api.github.com/users/keetonian/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "keetonian", "id": 14004203, "node_id": "MDQ6VXNlcjE0MDA0MjAz", "avatar_url": "https://avatars2.githubusercontent.com/u/14004203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keetonian", "html_url": "https://github.com/keetonian", "followers_url": "https://api.github.com/users/keetonian/followers", "following_url": "https://api.github.com/users/keetonian/following{/other_user}", "gists_url": "https://api.github.com/users/keetonian/gists{/gist_id}", "starred_url": "https://api.github.com/users/keetonian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keetonian/subscriptions", "organizations_url": "https://api.github.com/users/keetonian/orgs", "repos_url": "https://api.github.com/users/keetonian/repos", "events_url": "https://api.github.com/users/keetonian/events{/privacy}", "received_events_url": "https://api.github.com/users/keetonian/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-12-10T15:41:35Z", "updated_at": "2019-12-12T01:44:07Z", "closed_at": "2019-12-12T01:42:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Description:**\r\n\r\nI created a Lambda function with two `HttpApi` events attached to it:\r\n\r\n```yaml\r\n      Events:\r\n        Register:\r\n          Type: HttpApi\r\n          Properties:\r\n            Method: post\r\n            Path: /register\r\n        Unregister:\r\n          Type: HttpApi\r\n          Properties:\r\n            Method: delete\r\n            Path: /register/{client_id}\r\n```\r\n\r\nWhen deployed only the first `Register` path/method was created. Switching the `Type` back to `Api` and redeploying created a Rest API with both paths/methods correctly.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Create a basic SAM API template with one Lambda function and two `HttpApi` events.\r\n2. Deploy the template.\r\n\r\n**Observed result:**\r\n\r\nOnly the first path and method defined is created. The other is skipped.\r\n\r\n**Expected result:**\r\n\r\nBoth paths and methods described in the events are deployed with the HTTP API.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1317", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1317/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1317/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1317/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1317", "id": 536598953, "node_id": "MDU6SXNzdWU1MzY1OTg5NTM=", "number": 1317, "title": "Allow setting TimeoutInMillis for API (HttpApi/Api) event types", "user": {"login": "Lanchez", "id": 155275, "node_id": "MDQ6VXNlcjE1NTI3NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/155275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lanchez", "html_url": "https://github.com/Lanchez", "followers_url": "https://api.github.com/users/Lanchez/followers", "following_url": "https://api.github.com/users/Lanchez/following{/other_user}", "gists_url": "https://api.github.com/users/Lanchez/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lanchez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lanchez/subscriptions", "organizations_url": "https://api.github.com/users/Lanchez/orgs", "repos_url": "https://api.github.com/users/Lanchez/repos", "events_url": "https://api.github.com/users/Lanchez/events{/privacy}", "received_events_url": "https://api.github.com/users/Lanchez/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1091980330, "node_id": "MDU6TGFiZWwxMDkxOTgwMzMw", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/stage/waiting-for-release", "name": "stage/waiting-for-release", "color": "84ce14", "default": false, "description": "Stage that indicates the issue was accepted and addressed but waiting on a release"}, {"id": 797198227, "node_id": "MDU6TGFiZWw3OTcxOTgyMjc=", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/type/feature", "name": "type/feature", "color": "fbca04", "default": false, "description": null}, {"id": 1858298355, "node_id": "MDU6TGFiZWwxODU4Mjk4MzU1", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/v1.22.0", "name": "v1.22.0", "color": "a9e258", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-12-10T08:50:14Z", "updated_at": "2020-04-20T06:53:33Z", "closed_at": "2020-03-16T22:43:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!-- Make sure we don't have an existing Issue that reports the bug you are seeing (both open and closed). -->\r\n\r\n### Describe your idea/feature/enhancement\r\n\r\nHTTP API integrations have 5000ms default timeout versus 29000ms on REST API. There should be a way to set timout per integration since 5000ms is simply too low for some cases.\r\n\r\n### Proposal\r\n\r\nIt would be perfect if timeout could be configured per API event in function definitions. In Cloudformation AWS::ApiGatewayV2::Integration and AWS::ApiGateway::Method->Integration allows setting TimeoutInMillis. Maybe this could be set in each API/HttpApi events?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1305", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1305/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1305/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1305/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1305", "id": 533953419, "node_id": "MDU6SXNzdWU1MzM5NTM0MTk=", "number": 1305, "title": "AutoPublishAlias is not triggered for environment variable changes", "user": {"login": "cakepietoast", "id": 7933071, "node_id": "MDQ6VXNlcjc5MzMwNzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/7933071?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cakepietoast", "html_url": "https://github.com/cakepietoast", "followers_url": "https://api.github.com/users/cakepietoast/followers", "following_url": "https://api.github.com/users/cakepietoast/following{/other_user}", "gists_url": "https://api.github.com/users/cakepietoast/gists{/gist_id}", "starred_url": "https://api.github.com/users/cakepietoast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cakepietoast/subscriptions", "organizations_url": "https://api.github.com/users/cakepietoast/orgs", "repos_url": "https://api.github.com/users/cakepietoast/repos", "events_url": "https://api.github.com/users/cakepietoast/events{/privacy}", "received_events_url": "https://api.github.com/users/cakepietoast/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 797198226, "node_id": "MDU6TGFiZWw3OTcxOTgyMjY=", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/area/serverless-function", "name": "area/serverless-function", "color": "1d76db", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-12-06T12:50:03Z", "updated_at": "2020-06-08T07:28:00Z", "closed_at": "2020-06-08T07:28:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Description:**\r\n\r\nChanging or adding/removing environment variables for a function does not cause a new version to be published when using `AutoPublishAlias`. \r\n\r\n**Steps to reproduce the issue:**\r\n1. Deploy a SAM template with an `AWS::Serverless::Function` resource, with `AutoPublishAlias` set, and including an environment variable:  \r\n```\r\nHelloWorldFunction:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      CodeUri: hello_world/\r\n      Handler: app.lambda_handler\r\n      Runtime: python3.8\r\n      AutoPublishAlias: live\r\n      Environment:\r\n        Variables:\r\n          TestKey: TestVal1\r\n```  \r\n2. Change `TestVal1` to `TestVal2`.  \r\n3. Run sam deploy . \r\n\r\n**Observed result:**\r\nThe lambda function is updated with the new environment variable, but no new version is published, and the defined alias still points to the last published version.\r\n\r\n**Expected result:**\r\nA new function version is published, and the defined alias is updated to point to it.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1303", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1303/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1303/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1303/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1303", "id": 533665180, "node_id": "MDU6SXNzdWU1MzM2NjUxODA=", "number": 1303, "title": "InlineCode doesn't work for Node JS 12", "user": {"login": "mikebroberts", "id": 49635, "node_id": "MDQ6VXNlcjQ5NjM1", "avatar_url": "https://avatars1.githubusercontent.com/u/49635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikebroberts", "html_url": "https://github.com/mikebroberts", "followers_url": "https://api.github.com/users/mikebroberts/followers", "following_url": "https://api.github.com/users/mikebroberts/following{/other_user}", "gists_url": "https://api.github.com/users/mikebroberts/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikebroberts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikebroberts/subscriptions", "organizations_url": "https://api.github.com/users/mikebroberts/orgs", "repos_url": "https://api.github.com/users/mikebroberts/repos", "events_url": "https://api.github.com/users/mikebroberts/events{/privacy}", "received_events_url": "https://api.github.com/users/mikebroberts/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-05T23:54:02Z", "updated_at": "2019-12-06T00:20:32Z", "closed_at": "2019-12-06T00:20:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following resource\r\n\r\n```\r\n  DemoLambda:\r\n    Type: 'AWS::Serverless::Function'\r\n    Properties:\r\n      Handler: index.handler\r\n      Runtime: nodejs12.x\r\n      InlineCode: |\r\n        exports.handler = function(event) {\r\n          console.log(\"Hello World\");\r\n        }\r\n```\r\n\r\ngives the following CloudFormation error:\r\n\r\n\"ZipFile can only be used when Runtime is set to either of nodejs8.10, nodejs10.x, python2.7, python3.6, python3.7.\"", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1300", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1300/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1300/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1300/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1300", "id": 533558797, "node_id": "MDU6SXNzdWU1MzM1NTg3OTc=", "number": 1300, "title": "Auth Issues and Feature Requests in HttpApi", "user": {"login": "chrisoverzero", "id": 2152967, "node_id": "MDQ6VXNlcjIxNTI5Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2152967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisoverzero", "html_url": "https://github.com/chrisoverzero", "followers_url": "https://api.github.com/users/chrisoverzero/followers", "following_url": "https://api.github.com/users/chrisoverzero/following{/other_user}", "gists_url": "https://api.github.com/users/chrisoverzero/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisoverzero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisoverzero/subscriptions", "organizations_url": "https://api.github.com/users/chrisoverzero/orgs", "repos_url": "https://api.github.com/users/chrisoverzero/repos", "events_url": "https://api.github.com/users/chrisoverzero/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisoverzero/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1091980330, "node_id": "MDU6TGFiZWwxMDkxOTgwMzMw", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/stage/waiting-for-release", "name": "stage/waiting-for-release", "color": "84ce14", "default": false, "description": "Stage that indicates the issue was accepted and addressed but waiting on a release"}, {"id": 1746046541, "node_id": "MDU6TGFiZWwxNzQ2MDQ2NTQx", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/v1.19.1", "name": "v1.19.1", "color": "bfd4f2", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-05T19:46:01Z", "updated_at": "2020-01-14T19:22:23Z", "closed_at": "2020-01-14T19:22:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Description:**\r\n\r\nI apologize, I don't know where the boundary between SAM issues and API Gateway v2 issues is, so some of this may be on their side of the line.\r\n\r\n1. \"openIdConnect\" Type Authorizer Is Not Created\r\n\r\nGiven:\r\n\r\n```yaml\r\nOpenIdAuthorizer:\r\n  IdentitySource: $request.header.Authorization\r\n  JwtConfiguration:\r\n    audience:\r\n    - #audience#\r\n  OpenIdConnectUrl: https://#provider#/.well-known/openid-configuration\r\n```\r\n\r\n...no authorizer is created. It validates, and the transform looks reasonable:\r\n\r\n```json\r\n\"securitySchemes\": {\r\n  \"OpenIdAuthorizer\": {\r\n    \"type\": \"openIdConnect\",\r\n    \"x-amazon-apigateway-authorizer\": {\r\n      \"jwtConfiguration\": {\r\n        \"audience\": [\r\n          \"#audience#\"\r\n        ]\r\n      },\r\n      \"identitySource\": \"$request.header.Authorization\",\r\n      \"type\": \"jwt\",\r\n      \"openIdConnectUrl\": \"https://#provider#/.well-known/openid-configuration\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n...but I couldn't say whether it's right or wrong.\r\n\r\n2. Protected Route Fails to Accept Bearer Token\r\n\r\nGiven an \"Authorization\" header like `Authorization: Bearer T0k3n`, a protected route responds with a \"WWW-Authenticate\" header like:\r\n\r\n```\r\nWWW-Authenticate: Bearer scope=\"\" error=\"invalid_token\" error_description=\"tokenstring should not contain 'bearer '\"\r\n```\r\n\r\nThis is incorrect. It _should_ contain such a prefix. (I think I know which library produced this error message, and the header value should be split into scheme and parameter before attempting decoding.)\r\n\r\n3. Authentication Failures Cannot be Customized\r\n\r\nGiven no \"Authorization\" header, a protected route responds with a \"WWW-Authenticate\" header like: `WWW-Authenticate: Bearer`. Which is a great step up from API Gateway v1! But there appears to be no way to customize what comes after \"Bearer \" for such a response. Something as full-blown as Gateway Responses may not fit the API Gateway v2 spirit, I get. But maybe a \"Challenge\" property? I'm no expert; something-something VTL?\r\n\r\n<details>\r\n<summary>A template for recreation.</summary>\r\n<pre>---\r\nAWSTemplateFormatVersion: '2010-09-09'\r\nTransform: AWS::Serverless-2016-10-31\r\nDescription: A sample for recreation.\r\nGlobals:\r\n  HttpApi:\r\n    Auth:\r\n      Authorizers:\r\n        OpenIdAuthorizer:\r\n          IdentitySource: $request.header.Authorization\r\n          JwtConfiguration:\r\n            audience:\r\n            - #audience#\r\n          OpenIdConnectUrl: https://#provider#/.well-known/openid-configuration\r\n  Function:\r\n    Handler: index.handler\r\n    Runtime: nodejs10.x\r\nResources:\r\n  Closed:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      InlineCode: |-\r\n        exports.handler = async () => ({\r\n          statusCode: 200,\r\n          body: JSON.stringify('You are authenticated!')\r\n        });\r\n      Events:\r\n        Get:\r\n          Type: HttpApi\r\n          Properties:\r\n            Method: GET\r\n            Path: /closed\r\n            Auth:\r\n              Authorizer: OpenIdAuthorizer\r\n  Open:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      InlineCode: |-\r\n        exports.handler = async () => ({\r\n          statusCode: 200,\r\n          body: JSON.stringify(\"It's wide open!\")\r\n        });\r\n      Events:\r\n        Get:\r\n          Type: HttpApi\r\n          Properties:\r\n            Method: GET\r\n            Path: /open</pre>\r\n</details>\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1297", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1297/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1297/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1297/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1297", "id": 533370267, "node_id": "MDU6SXNzdWU1MzMzNzAyNjc=", "number": 1297, "title": "Support Serverless Tags format for all resources", "user": {"login": "sbol-coolblue", "id": 12197682, "node_id": "MDQ6VXNlcjEyMTk3Njgy", "avatar_url": "https://avatars1.githubusercontent.com/u/12197682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sbol-coolblue", "html_url": "https://github.com/sbol-coolblue", "followers_url": "https://api.github.com/users/sbol-coolblue/followers", "following_url": "https://api.github.com/users/sbol-coolblue/following{/other_user}", "gists_url": "https://api.github.com/users/sbol-coolblue/gists{/gist_id}", "starred_url": "https://api.github.com/users/sbol-coolblue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sbol-coolblue/subscriptions", "organizations_url": "https://api.github.com/users/sbol-coolblue/orgs", "repos_url": "https://api.github.com/users/sbol-coolblue/repos", "events_url": "https://api.github.com/users/sbol-coolblue/events{/privacy}", "received_events_url": "https://api.github.com/users/sbol-coolblue/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-05T14:01:18Z", "updated_at": "2019-12-06T18:53:19Z", "closed_at": "2019-12-06T18:53:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\n\r\nBefore reporting a new issue, make sure we don't have any duplicates already open or closed by\r\nsearching the issues list. If there is a duplicate, re-open or add a comment to the\r\nexisting issue instead of creating a new one. If you are reporting a bug,\r\nmake sure to include relevant information asked below to help with debugging.\r\n\r\n## GENERAL HELP QUESTIONS ##\r\nGithub Issues is for bug reports and feature requests. If you have general support\r\nquestions, the following locations are a good place:\r\n\r\n- Post a question in StackOverflow  with \"aws-sam\" tag\r\n\r\n-->\r\n\r\n**Description:**\r\n\r\nIn AWS::Serverless::* resources, we define tags as follows:\r\n\r\n```\r\n  MySimpleTable:\r\n    Type: AWS::Serverless::SimpleTable\r\n    Properties:\r\n      TableName: \"my-table\"\r\n      ...\r\n      Tags:\r\n        Name: \"my-table\"\r\n        Environment: \"production\"\r\n```\r\n\r\nRegular AWS resources have a different, more verbose, style of defining tags:\r\n\r\n```\r\n  MyQueue:\r\n    Type: AWS::SQS::Queue\r\n    Properties:\r\n      ...\r\n      Tags:\r\n        - Key: \"Name\"\r\n          Value: \"my-queue\"\r\n        - Key: \"Environment\"\r\n          Value: \"Production\"\r\n\r\n```\r\n\r\nSince SAM Templates contain a mix of Serverless resources processed by SAM, and \"regular\" resources used directly by CloudFormation, we have to define our tags in two different ways. This makes it harder than it can be to apply new tags to our resources.\r\n\r\nSince the two tagging formats are using a different data structure it should be relatively trivial for SAM to detect when the serverless format is used and rewrite it to the classic style.\r\n\r\nI'd like to propose supporting the dictionary format for all resources, and have SAM translate to the list-style format for any resources that are not handled by SAM.\r\n\r\n**Steps to reproduce the issue:**\r\n\r\n1. In the Queue example above, use the dictionary-style format.\r\n2. Run the SAM transformation on it\r\n\r\n**Observed result:**\r\nInvalid template, because the Tags are a Dictionary whereas Cloudformation requires a List.\r\n\r\n**Expected result:**\r\nValid template, because SAM transformed each element in the Dictionary to a List element with a Key and Value.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1295", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1295/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1295/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1295/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1295", "id": 533118529, "node_id": "MDU6SXNzdWU1MzMxMTg1Mjk=", "number": 1295, "title": "Missing CORS configuration for HttpApi", "user": {"login": "charsleysa", "id": 1219661, "node_id": "MDQ6VXNlcjEyMTk2NjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1219661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charsleysa", "html_url": "https://github.com/charsleysa", "followers_url": "https://api.github.com/users/charsleysa/followers", "following_url": "https://api.github.com/users/charsleysa/following{/other_user}", "gists_url": "https://api.github.com/users/charsleysa/gists{/gist_id}", "starred_url": "https://api.github.com/users/charsleysa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charsleysa/subscriptions", "organizations_url": "https://api.github.com/users/charsleysa/orgs", "repos_url": "https://api.github.com/users/charsleysa/repos", "events_url": "https://api.github.com/users/charsleysa/events{/privacy}", "received_events_url": "https://api.github.com/users/charsleysa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-05T04:36:27Z", "updated_at": "2020-03-16T22:48:51Z", "closed_at": "2020-03-16T22:48:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\n\r\nBefore reporting a new issue, make sure we don't have any duplicates already open or closed by\r\nsearching the issues list. If there is a duplicate, re-open or add a comment to the\r\nexisting issue instead of creating a new one. If you are reporting a bug,\r\nmake sure to include relevant information asked below to help with debugging.\r\n\r\n## GENERAL HELP QUESTIONS ##\r\nGithub Issues is for bug reports and feature requests. If you have general support\r\nquestions, the following locations are a good place:\r\n\r\n- Post a question in StackOverflow  with \"aws-sam\" tag\r\n\r\n-->\r\n\r\n**Description:**\r\n\r\nThe newly released HttpApi type has support for CORS configuration through CloudFormation but it seems to be missing from SAM ([see CF docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-api.html#cfn-apigatewayv2-api-corsconfiguration)).\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1283", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1283/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1283/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1283/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1283", "id": 531723723, "node_id": "MDU6SXNzdWU1MzE3MjM3MjM=", "number": 1283, "title": "Cannot set DynamoDB event's MaximumRetryAttempts", "user": {"login": "Hand-E-Food", "id": 6742578, "node_id": "MDQ6VXNlcjY3NDI1Nzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/6742578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hand-E-Food", "html_url": "https://github.com/Hand-E-Food", "followers_url": "https://api.github.com/users/Hand-E-Food/followers", "following_url": "https://api.github.com/users/Hand-E-Food/following{/other_user}", "gists_url": "https://api.github.com/users/Hand-E-Food/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hand-E-Food/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hand-E-Food/subscriptions", "organizations_url": "https://api.github.com/users/Hand-E-Food/orgs", "repos_url": "https://api.github.com/users/Hand-E-Food/repos", "events_url": "https://api.github.com/users/Hand-E-Food/events{/privacy}", "received_events_url": "https://api.github.com/users/Hand-E-Food/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-03T05:05:45Z", "updated_at": "2019-12-10T22:00:50Z", "closed_at": "2019-12-10T21:56:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\n\r\nIn a template.yaml, I cannot set the MaximumRetryAttempts for a Lambda's DynamoDB event source as described in the documentation:\r\nhttps://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#dynamodb\r\n\r\n**Steps to reproduce the issue:**\r\n1. Create a template.yaml:\r\n\r\n```\r\nAWSTemplateFormatVersion: 2010-09-09\r\nTransform: AWS::Serverless-2016-10-31\r\nResources:\r\n  MyTable:\r\n    Type: AWS::DynamoDB::Table\r\n    Properties: \r\n      TableName: MyTable\r\n  MyFunction:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      Handler: MyCode::Function\r\n      Runtime: dotnetcore2.1\r\n      Events:\r\n        MyEvent:\r\n          Type: DynamoDB\r\n          Properties:\r\n            Stream: !GetAtt MyTable.StreamArn\r\n            StartingPosition: LATEST\r\n            MaximumRetryAttempts: 0\r\n```\r\n\r\n2. Run `sam validate`\r\n\r\n**Observed result:**\r\n\r\n> Template provided at 'C:\\path\\template.yaml' was invalid SAM Template.\r\n> Error: [InvalidResourceException('MyFunctionMyEvent', 'property MaximumRetryAttempts not defined for resource of type DynamoDB')] ('MyFunctionMyEvent', 'property MaximumRetryAttempts not defined for resource of type DynamoDB')\r\n\r\n**Expected result:**\r\n\r\n> C:\\path\\template.yaml is a valid SAM Template", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1276", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1276/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1276/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1276/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1276", "id": 530883522, "node_id": "MDU6SXNzdWU1MzA4ODM1MjI=", "number": 1276, "title": "Local layers skips pulling ", "user": {"login": "dz902", "id": 2723003, "node_id": "MDQ6VXNlcjI3MjMwMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2723003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dz902", "html_url": "https://github.com/dz902", "followers_url": "https://api.github.com/users/dz902/followers", "following_url": "https://api.github.com/users/dz902/following{/other_user}", "gists_url": "https://api.github.com/users/dz902/gists{/gist_id}", "starred_url": "https://api.github.com/users/dz902/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dz902/subscriptions", "organizations_url": "https://api.github.com/users/dz902/orgs", "repos_url": "https://api.github.com/users/dz902/repos", "events_url": "https://api.github.com/users/dz902/events{/privacy}", "received_events_url": "https://api.github.com/users/dz902/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-02T04:35:19Z", "updated_at": "2019-12-02T05:33:08Z", "closed_at": "2019-12-02T05:33:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm calling `sam local start-api --debug --env-vars ../dev-env.json --force-image-builds` but it seems nothing would stop the server from skipping pulling images and build layers.\r\n\r\n```\r\nResolving code path. Cwd=/xxxx/.aws-sam/build, CodeUri=../../../layers/xxxxx\r\nBuilding image...\r\nRequested to skip pulling images ...\r\n```\r\n\r\nAlso I found someone with exactly questions: https://stackoverflow.com/questions/58291550/sam-local-invoke-lambda-with-local-layer-error-unable-to-import-package\r\n\r\nSome info:\r\n\r\n- SAM 0.34.0\r\n- `lambci/lambda` and `samcli/lambda` images exist locally\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1269", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1269/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1269/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1269/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1269", "id": 529447172, "node_id": "MDU6SXNzdWU1Mjk0NDcxNzI=", "number": 1269, "title": "Support the New Lambda Destinations Feature", "user": {"login": "ConnorMinielly-gShift", "id": 47116822, "node_id": "MDQ6VXNlcjQ3MTE2ODIy", "avatar_url": "https://avatars2.githubusercontent.com/u/47116822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ConnorMinielly-gShift", "html_url": "https://github.com/ConnorMinielly-gShift", "followers_url": "https://api.github.com/users/ConnorMinielly-gShift/followers", "following_url": "https://api.github.com/users/ConnorMinielly-gShift/following{/other_user}", "gists_url": "https://api.github.com/users/ConnorMinielly-gShift/gists{/gist_id}", "starred_url": "https://api.github.com/users/ConnorMinielly-gShift/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ConnorMinielly-gShift/subscriptions", "organizations_url": "https://api.github.com/users/ConnorMinielly-gShift/orgs", "repos_url": "https://api.github.com/users/ConnorMinielly-gShift/repos", "events_url": "https://api.github.com/users/ConnorMinielly-gShift/events{/privacy}", "received_events_url": "https://api.github.com/users/ConnorMinielly-gShift/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 797198226, "node_id": "MDU6TGFiZWw3OTcxOTgyMjY=", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/area/serverless-function", "name": "area/serverless-function", "color": "1d76db", "default": false, "description": null}, {"id": 1091980330, "node_id": "MDU6TGFiZWwxMDkxOTgwMzMw", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/stage/waiting-for-release", "name": "stage/waiting-for-release", "color": "84ce14", "default": false, "description": "Stage that indicates the issue was accepted and addressed but waiting on a release"}, {"id": 797198227, "node_id": "MDU6TGFiZWw3OTcxOTgyMjc=", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/type/feature", "name": "type/feature", "color": "fbca04", "default": false, "description": null}, {"id": 1552872082, "node_id": "MDU6TGFiZWwxNTUyODcyMDgy", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/v1.20.0", "name": "v1.20.0", "color": "f409bd", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-27T16:16:55Z", "updated_at": "2020-01-23T13:21:18Z", "closed_at": "2020-01-14T19:21:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Feature Request**\r\nAWS recently announced the ability to point the result of your lambda operations at specific destinations, supported in cloud formation via the [EventInvokeConfig](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-eventinvokeconfig.html) sub-resource (`AWS::Lambda::EventInvokeConfig`).\r\n\r\nThis feature allows you to funnel successful and fialed invokation results to different sources, including other lambdas, SQS queues, and more. The release of this feature is detailed [here](https://aws.amazon.com/blogs/compute/introducing-aws-lambda-destinations/) on the AWS blog.\r\nThe blog mentions this feature being usable through both cloudformation and AWS SAM, though it doesn't seem that SAM yet supports it or has any mention of it in the docs/PRs that I could find.\r\n\r\nCan we get this on the roadmap? It would be extremely helpful for setting up simple SAM application logic flows for which step functions are messy and overkill but manual code invocations require extra dependencies and code.\r\n\r\nThanks team! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1268", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1268/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1268/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1268/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1268", "id": 529158016, "node_id": "MDU6SXNzdWU1MjkxNTgwMTY=", "number": 1268, "title": "Documentation: Wrong URL for DestinationConfig", "user": {"login": "bikerp", "id": 16473023, "node_id": "MDQ6VXNlcjE2NDczMDIz", "avatar_url": "https://avatars3.githubusercontent.com/u/16473023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bikerp", "html_url": "https://github.com/bikerp", "followers_url": "https://api.github.com/users/bikerp/followers", "following_url": "https://api.github.com/users/bikerp/following{/other_user}", "gists_url": "https://api.github.com/users/bikerp/gists{/gist_id}", "starred_url": "https://api.github.com/users/bikerp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bikerp/subscriptions", "organizations_url": "https://api.github.com/users/bikerp/orgs", "repos_url": "https://api.github.com/users/bikerp/repos", "events_url": "https://api.github.com/users/bikerp/events{/privacy}", "received_events_url": "https://api.github.com/users/bikerp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1091980330, "node_id": "MDU6TGFiZWwxMDkxOTgwMzMw", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/stage/waiting-for-release", "name": "stage/waiting-for-release", "color": "84ce14", "default": false, "description": "Stage that indicates the issue was accepted and addressed but waiting on a release"}, {"id": 1552872082, "node_id": "MDU6TGFiZWwxNTUyODcyMDgy", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/v1.20.0", "name": "v1.20.0", "color": "f409bd", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-27T07:04:31Z", "updated_at": "2020-01-14T19:21:06Z", "closed_at": "2020-01-14T19:21:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\n[DestinationConfig](https://github.com/awslabs/serverless-application-model/blob/master/versions/destination-config-object) in Event source types for Kinesis and DynamoDB returns 404\r\n\r\nThanks for the fix\r\n\r\nPavel", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1265", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1265/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1265/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1265/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1265", "id": 528525307, "node_id": "MDU6SXNzdWU1Mjg1MjUzMDc=", "number": 1265, "title": "Missing cloudwatch:DescribeAlarmHistory in serverless function Policy List", "user": {"login": "zmaleki", "id": 13944699, "node_id": "MDQ6VXNlcjEzOTQ0Njk5", "avatar_url": "https://avatars1.githubusercontent.com/u/13944699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zmaleki", "html_url": "https://github.com/zmaleki", "followers_url": "https://api.github.com/users/zmaleki/followers", "following_url": "https://api.github.com/users/zmaleki/following{/other_user}", "gists_url": "https://api.github.com/users/zmaleki/gists{/gist_id}", "starred_url": "https://api.github.com/users/zmaleki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zmaleki/subscriptions", "organizations_url": "https://api.github.com/users/zmaleki/orgs", "repos_url": "https://api.github.com/users/zmaleki/repos", "events_url": "https://api.github.com/users/zmaleki/events{/privacy}", "received_events_url": "https://api.github.com/users/zmaleki/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1091980330, "node_id": "MDU6TGFiZWwxMDkxOTgwMzMw", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/stage/waiting-for-release", "name": "stage/waiting-for-release", "color": "84ce14", "default": false, "description": "Stage that indicates the issue was accepted and addressed but waiting on a release"}, {"id": 1552872082, "node_id": "MDU6TGFiZWwxNTUyODcyMDgy", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/v1.20.0", "name": "v1.20.0", "color": "f409bd", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-26T06:51:01Z", "updated_at": "2020-01-14T19:21:05Z", "closed_at": "2020-01-14T19:21:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\r\n\r\n**Description:**\r\nWe have a lambda that requires cloudwatch:DescribeAlarmHistory and we want to use sam template for our lambda. However, DescribeAlarmHistory is not one of the available policies.\r\n\r\n**Steps to reproduce the issue:**\r\nPull request https://github.com/awslabs/serverless-application-model/pull/1264\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1255", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1255/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1255/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1255/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1255", "id": 526618790, "node_id": "MDU6SXNzdWU1MjY2MTg3OTA=", "number": 1255, "title": "Testsuite failures with older python3 versions due to dict order", "user": {"login": "glaubitz", "id": 1647645, "node_id": "MDQ6VXNlcjE2NDc2NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1647645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glaubitz", "html_url": "https://github.com/glaubitz", "followers_url": "https://api.github.com/users/glaubitz/followers", "following_url": "https://api.github.com/users/glaubitz/following{/other_user}", "gists_url": "https://api.github.com/users/glaubitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/glaubitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glaubitz/subscriptions", "organizations_url": "https://api.github.com/users/glaubitz/orgs", "repos_url": "https://api.github.com/users/glaubitz/repos", "events_url": "https://api.github.com/users/glaubitz/events{/privacy}", "received_events_url": "https://api.github.com/users/glaubitz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-21T14:10:19Z", "updated_at": "2019-11-22T18:40:56Z", "closed_at": "2019-11-22T18:31:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "While packaging ```serverless-application-model``` for openSUSE and SLE, I ran into testsuite failures that only showed with Python 3.4 in SLE-12 but not with Python 3.6 in SLE-15.\r\n\r\nThe failures indicate that the tests do not account for the fact that the order of dictionaries in Python are non-deterministic:\r\n\r\n```\r\n[  206s] =================================== FAILURES ===================================\r\n[  206s]  TestImplicitApiPlugin_process_api_events.test_must_retain_side_effect_of_modifying_events \r\n[  206s] \r\n[  206s] self = <tests.plugins.api.test_implicit_api_plugin.TestImplicitApiPlugin_process_api_events testMethod=test_must_retain_side_effect_of_modifying_events>\r\n[  206s] \r\n[  206s]     def test_must_retain_side_effect_of_modifying_events(self):\r\n[  206s]         \"\"\"\r\n[  206s]             It must retain any changes made to the Event dictionary by helper methods\r\n[  206s]             \"\"\"\r\n[  206s]     \r\n[  206s]         api_events = {\r\n[  206s]             \"Api1\": {\r\n[  206s]                 \"Type\": \"Api\",\r\n[  206s]                 \"Properties\": {\r\n[  206s]                     \"Path\": \"/\",\r\n[  206s]                     \"Method\": \"get\"\r\n[  206s]                 }\r\n[  206s]             },\r\n[  206s]             \"Api2\": {\r\n[  206s]                 \"Type\": \"Api\",\r\n[  206s]                 \"Properties\": {\r\n[  206s]                     \"Path\": \"/foo\",\r\n[  206s]                     \"Method\": \"post\"\r\n[  206s]                 }\r\n[  206s]             }\r\n[  206s]         }\r\n[  206s]     \r\n[  206s]         template = Mock()\r\n[  206s]         function = SamResource({\r\n[  206s]             \"Type\": SamResourceType.Function.value,\r\n[  206s]             \"Properties\": {\r\n[  206s]                 \"Events\": {\r\n[  206s]                     \"Api1\": \"Intentionally setting this value to a string for testing. \"\r\n[  206s]                             \"This should be replaced by API Event after processing\",\r\n[  206s]     \r\n[  206s]                     \"Api2\": \"must be replaced\"\r\n[  206s]                 }\r\n[  206s]             }\r\n[  206s]         })\r\n[  206s]     \r\n[  206s]         def add_key_to_event(event_properties):\r\n[  206s]             event_properties[\"Key\"] = \"Value\"\r\n[  206s]     \r\n[  206s]         # Apply the side effect of adding a key to events dict\r\n[  206s]         self.plugin._add_implicit_api_id_if_necessary.side_effect = add_key_to_event\r\n[  206s]     \r\n[  206s]         self.plugin._process_api_events(function, api_events, template)\r\n[  206s]     \r\n[  206s]         # Side effect must be visible after call returns on the input object\r\n[  206s]         self.assertEqual(api_events[\"Api1\"][\"Properties\"], {\"Path\": \"/\", \"Method\": \"get\", \"Key\": \"Value\"})\r\n[  206s]         self.assertEqual(api_events[\"Api2\"][\"Properties\"], {\"Path\": \"/foo\", \"Method\": \"post\", \"Key\": \"Value\"})\r\n[  206s]     \r\n[  206s]         # Every Event object inside the SamResource class must be entirely replaced by input api_events with side effect\r\n[  206s]         self.assertEqual(function.properties[\"Events\"][\"Api1\"][\"Properties\"], {\"Path\": \"/\", \"Method\": \"get\", \"Key\": \"Value\"})\r\n[  206s]         self.assertEqual(function.properties[\"Events\"][\"Api2\"][\"Properties\"], {\"Path\": \"/foo\", \"Method\": \"post\", \"Key\": \"Value\"})\r\n[  206s]     \r\n[  206s]         # Subsequent calls must be made with the side effect. This is important.\r\n[  206s]         self.plugin._add_api_to_swagger.assert_has_calls([\r\n[  206s]             call(\"Api1\",\r\n[  206s]                  # Side effects should be visible here\r\n[  206s]                  {\"Path\": \"/\", \"Method\": \"get\", \"Key\": \"Value\"},\r\n[  206s]                  template),\r\n[  206s]             call(\"Api2\",\r\n[  206s]                  # Side effects should be visible here\r\n[  206s]                  {\"Path\": \"/foo\", \"Method\": \"post\", \"Key\": \"Value\"},\r\n[  206s] >                template),\r\n[  206s]         ])\r\n[  206s] \r\n[  206s] tests/plugins/api/test_implicit_api_plugin.py:567: \r\n[  206s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[  206s] /usr/lib/python3.4/site-packages/mock/mock.py:969: in assert_has_calls\r\n[  206s]     ), cause)\r\n[  206s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[  206s] \r\n[  206s] value = None, from_value = None\r\n[  206s] \r\n[  206s] >   ???\r\n[  206s] E   AssertionError: Calls not found.\r\n[  206s] E   Expected: [call('Api1', {'Path': '/', 'Key': 'Value', 'Method': 'get'}, <Mock id='140614884569496'>),\r\n[  206s] E    call('Api2', {'Path': '/foo', 'Key': 'Value', 'Method': 'post'}, <Mock id='140614884569496'>)]\r\n[  206s] E   Actual: [call('Api2', {'Path': '/foo', 'Key': 'Value', 'Method': 'post'}, <Mock id='140614884569496'>),\r\n[  206s] E    call('Api1', {'Path': '/', 'Key': 'Value', 'Method': 'get'}, <Mock id='140614884569496'>)]\r\n[  206s] \r\n[  206s] <string>:3: AssertionError\r\n[  206s] ___ TestImplicitApiPlugin_process_api_events.test_must_work_with_api_events ____\r\n[  206s] \r\n[  206s] self = <tests.plugins.api.test_implicit_api_plugin.TestImplicitApiPlugin_process_api_events testMethod=test_must_work_with_api_events>\r\n[  206s] \r\n[  206s]     def test_must_work_with_api_events(self):\r\n[  206s]         api_events = {\r\n[  206s]             \"Api1\": {\r\n[  206s]                 \"Type\": \"Api\",\r\n[  206s]                 \"Properties\": {\r\n[  206s]                     \"Path\": \"/\",\r\n[  206s]                     \"Method\": \"GET\"\r\n[  206s]                 }\r\n[  206s]             },\r\n[  206s]             \"Api2\": {\r\n[  206s]                 \"Type\": \"Api\",\r\n[  206s]                 \"Properties\": {\r\n[  206s]                     \"Path\": \"/foo\",\r\n[  206s]                     \"Method\": \"POST\"\r\n[  206s]                 }\r\n[  206s]             }\r\n[  206s]         }\r\n[  206s]     \r\n[  206s]         template = Mock()\r\n[  206s]         function_events_mock = Mock()\r\n[  206s]         function = SamResource({\r\n[  206s]             \"Type\": SamResourceType.Function.value,\r\n[  206s]             \"Properties\": {\r\n[  206s]                 \"Events\": function_events_mock\r\n[  206s]             }\r\n[  206s]         })\r\n[  206s]         function_events_mock.update = Mock()\r\n[  206s]     \r\n[  206s]         self.plugin._process_api_events(function, api_events, template)\r\n[  206s]     \r\n[  206s]         self.plugin._add_implicit_api_id_if_necessary.assert_has_calls([\r\n[  206s]             call({\"Path\": \"/\", \"Method\": \"GET\"}),\r\n[  206s] >           call({\"Path\": \"/foo\", \"Method\": \"POST\"}),\r\n[  206s]         ])\r\n[  206s] \r\n[  206s] tests/plugins/api/test_implicit_api_plugin.py:391: \r\n[  206s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[  206s] /usr/lib/python3.4/site-packages/mock/mock.py:969: in assert_has_calls\r\n[  206s]     ), cause)\r\n[  206s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[  206s] \r\n[  206s] value = None, from_value = None\r\n[  206s] \r\n[  206s] >   ???\r\n[  206s] E   AssertionError: Calls not found.\r\n[  206s] E   Expected: [call({'Path': '/', 'Method': 'GET'}),\r\n[  206s] E    call({'Path': '/foo', 'Method': 'POST'})]\r\n[  206s] E   Actual: [call({'Path': '/foo', 'Method': 'POST'}),\r\n[  206s] E    call({'Path': '/', 'Method': 'GET'})]\r\n[  206s] \r\n[  206s] <string>:3: AssertionError\r\n[  206s] __________ TestSamTemplate.test_iterate_must_filter_by_resource_type ___________\r\n[  206s] \r\n[  206s] self = <tests.sdk.test_template.TestSamTemplate testMethod=test_iterate_must_filter_by_resource_type>\r\n[  206s] \r\n[  206s]     def test_iterate_must_filter_by_resource_type(self):\r\n[  206s]     \r\n[  206s]         template = SamTemplate(self.template_dict)\r\n[  206s]     \r\n[  206s]         type = \"AWS::Serverless::Function\"\r\n[  206s]         expected = [\r\n[  206s]             (\"Function1\", {\"Type\": \"AWS::Serverless::Function\", \"DependsOn\": \"SomeOtherResource\", \"Properties\": {}}),\r\n[  206s]             (\"Function2\", {\"Type\": \"AWS::Serverless::Function\", \"a\": \"b\", \"Properties\": {}}),\r\n[  206s]         ]\r\n[  206s]     \r\n[  206s]         actual = [(id, resource.to_dict()) for id, resource in template.iterate(type)]\r\n[  206s] >       self.assertEqual(expected, actual)\r\n[  206s] E       AssertionError: Lists differ: [('Function1', {'Type': 'AWS::Serverless::Function',[131 chars]{}})] != [('Function2', {'Type': 'AWS::Serverless::Function',[131 chars]{}})]\r\n[  206s] E       \r\n[  206s] E       First differing element 0:\r\n[  206s] E       ('Function1', {'Type': 'AWS::Serverless::Function', 'DependsOn': 'SomeOtherResource', 'Properties': {}})\r\n[  206s] E       ('Function2', {'Type': 'AWS::Serverless::Function', 'a': 'b', 'Properties': {}})\r\n[  206s] E       \r\n[  206s] E       - [('Function1',\r\n[  206s] E       ?            ^\r\n[  206s] E       \r\n[  206s] E       + [('Function2',\r\n[  206s] E       ?            ^\r\n[  206s] E       \r\n[  206s] E       +   {'Properties': {}, 'Type': 'AWS::Serverless::Function', 'a': 'b'}),\r\n[  206s] E       +  ('Function1',\r\n[  206s] E           {'DependsOn': 'SomeOtherResource',\r\n[  206s] E            'Properties': {},\r\n[  206s] E       -    'Type': 'AWS::Serverless::Function'}),\r\n[  206s] E       ?                                         ^\r\n[  206s] E       \r\n[  206s] E       +    'Type': 'AWS::Serverless::Function'})]\r\n[  206s] E       ?                                         ^\r\n[  206s] E       \r\n[  206s] E       -  ('Function2',\r\n[  206s] E       -   {'Properties': {}, 'Type': 'AWS::Serverless::Function', 'a': 'b'})]\r\n[  206s] \r\n[  206s] tests/sdk/test_template.py:63: AssertionError\r\n[  206s] ____ test_transform_invalid_document[error_api_duplicate_methods_same_path] ____\r\n[  206s] \r\n[  206s] testcase = 'error_api_duplicate_methods_same_path'\r\n[  206s] \r\n[  206s]     @pytest.mark.parametrize('testcase', [\r\n[  206s]         'error_api_duplicate_methods_same_path',\r\n[  206s]         'error_api_gateway_responses_nonnumeric_status_code',\r\n[  206s]         'error_api_gateway_responses_unknown_responseparameter',\r\n[  206s]         'error_api_gateway_responses_unknown_responseparameter_property',\r\n[  206s]         'error_api_invalid_auth',\r\n[  206s]         'error_api_invalid_path',\r\n[  206s]         'error_api_invalid_definitionuri',\r\n[  206s]         'error_api_invalid_definitionbody',\r\n[  206s]         'error_api_invalid_stagename',\r\n[  206s]         'error_api_invalid_restapiid',\r\n[  206s]         'error_application_properties',\r\n[  206s]         'error_application_does_not_exist',\r\n[  206s]         'error_application_no_access',\r\n[  206s]         'error_application_preparing_timeout',\r\n[  206s]         'error_cors_on_external_swagger',\r\n[  206s]         'error_invalid_cors_dict',\r\n[  206s]         'error_invalid_findinmap',\r\n[  206s]         'error_invalid_getatt',\r\n[  206s]         'error_cors_credentials_true_with_wildcard_origin',\r\n[  206s]         'error_cors_credentials_true_without_explicit_origin',\r\n[  206s]         'error_function_invalid_codeuri',\r\n[  206s]         'error_function_invalid_api_event',\r\n[  206s]         'error_function_invalid_autopublishalias',\r\n[  206s]         'error_function_invalid_event_type',\r\n[  206s]         'error_function_invalid_layer',\r\n[  206s]         'error_function_no_codeuri',\r\n[  206s]         'error_function_no_handler',\r\n[  206s]         'error_function_no_runtime',\r\n[  206s]         'error_function_with_deployment_preference_missing_alias',\r\n[  206s]         'error_function_with_invalid_deployment_preference_hook_property',\r\n[  206s]         'error_invalid_logical_id',\r\n[  206s]         'error_layer_invalid_properties',\r\n[  206s]         'error_missing_queue',\r\n[  206s]         'error_missing_startingposition',\r\n[  206s]         'error_missing_stream',\r\n[  206s]         'error_multiple_resource_errors',\r\n[  206s]         'error_s3_not_in_template',\r\n[  206s]         'error_table_invalid_attributetype',\r\n[  206s]         'error_invalid_resource_parameters',\r\n[  206s]         'error_reserved_sam_tag',\r\n[  206s]         'existing_event_logical_id',\r\n[  206s]         'existing_permission_logical_id',\r\n[  206s]         'existing_role_logical_id',\r\n[  206s]         'error_invalid_template',\r\n[  206s]         'error_resource_not_dict',\r\n[  206s]         'error_resource_properties_not_dict',\r\n[  206s]         'error_globals_is_not_dict',\r\n[  206s]         'error_globals_unsupported_type',\r\n[  206s]         'error_globals_unsupported_property',\r\n[  206s]         'error_globals_api_with_stage_name',\r\n[  206s]         'error_function_policy_template_with_missing_parameter',\r\n[  206s]         'error_function_policy_template_invalid_value',\r\n[  206s]         'error_function_with_unknown_policy_template',\r\n[  206s]         'error_function_with_invalid_policy_statement'\r\n[  206s]     ])\r\n[  206s]     @patch('boto3.session.Session.region_name', 'ap-southeast-1')\r\n[  206s]     @patch('samtranslator.plugins.application.serverless_app_plugin.ServerlessAppPlugin._sar_service_call', mock_sar_service_call)\r\n[  206s]     @patch('botocore.client.ClientEndpointBridge._check_default_region', mock_get_region)\r\n[  206s]     def test_transform_invalid_document(testcase):\r\n[  206s]         manifest = yaml_parse(open(os.path.join(INPUT_FOLDER, testcase + '.yaml'), 'r'))\r\n[  206s]         expected = json.load(open(os.path.join(OUTPUT_FOLDER, testcase + '.json'), 'r'))\r\n[  206s]     \r\n[  206s]         mock_policy_loader = MagicMock()\r\n[  206s]         parameter_values = get_template_parameter_values()\r\n[  206s]     \r\n[  206s]         with pytest.raises(InvalidDocumentException) as e:\r\n[  206s]             transform(manifest, parameter_values, mock_policy_loader)\r\n[  206s]     \r\n[  206s]         error_message = get_exception_error_message(e)\r\n[  206s]     \r\n[  206s] >       assert error_message == expected.get('errorMessage')\r\n[  206s] E       assert 'Invalid Serv... path \"/add\".' == 'Invalid Serve... path \"/add\".'\r\n[  206s] E         - Invalid Serverless Application Specification document. Number of errors found: 1. Resource with id [Function1] is invalid. Event with id [AddItem] is invalid. API method \"post\" defined multiple times for path \"/add\".\r\n[  206s] E         ?                                                                                                             ^                             ^^^^^^^\r\n[  206s] E         + Invalid Serverless Application Specification document. Number of errors found: 1. Resource with id [Function2] is invalid. Event with id [GetHtml] is invalid. API method \"post\" defined multiple times for path...\r\n[  206s] E         \r\n[  206s] E         ...Full output truncated (2 lines hidden), use '-vv' to show\r\n[  206s] \r\n[  206s] tests/translator/test_translator.py:421: AssertionError\r\n[  206s] ------------------------------ Captured log call -------------------------------\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from creating-client-class.iot-data to creating-client-class.iot-data-plane\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-call.apigateway to before-call.api-gateway\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.machinelearning.Predict to request-created.machine-learning.Predict\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.autoscaling.CreateLaunchConfiguration to before-parameter-build.auto-scaling.CreateLaunchConfiguration\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.route53 to before-parameter-build.route-53\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.cloudsearchdomain.Search to request-created.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.autoscaling.CreateLaunchConfiguration.complete-section to docs.*.auto-scaling.CreateLaunchConfiguration.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.cloudsearchdomain.Search to before-parameter-build.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.cloudsearchdomain.Search.complete-section to docs.*.cloudsearch-domain.Search.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.logs.CreateExportTask to before-parameter-build.cloudwatch-logs.CreateExportTask\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.logs.CreateExportTask.complete-section to docs.*.cloudwatch-logs.CreateExportTask.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from creating-client-class.iot-data to creating-client-class.iot-data-plane\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-call.apigateway to before-call.api-gateway\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.machinelearning.Predict to request-created.machine-learning.Predict\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.autoscaling.CreateLaunchConfiguration to before-parameter-build.auto-scaling.CreateLaunchConfiguration\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.route53 to before-parameter-build.route-53\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.cloudsearchdomain.Search to request-created.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.autoscaling.CreateLaunchConfiguration.complete-section to docs.*.auto-scaling.CreateLaunchConfiguration.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.cloudsearchdomain.Search to before-parameter-build.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.cloudsearchdomain.Search.complete-section to docs.*.cloudsearch-domain.Search.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.logs.CreateExportTask to before-parameter-build.cloudwatch-logs.CreateExportTask\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.logs.CreateExportTask.complete-section to docs.*.cloudwatch-logs.CreateExportTask.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from creating-client-class.iot-data to creating-client-class.iot-data-plane\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-call.apigateway to before-call.api-gateway\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.machinelearning.Predict to request-created.machine-learning.Predict\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.autoscaling.CreateLaunchConfiguration to before-parameter-build.auto-scaling.CreateLaunchConfiguration\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.route53 to before-parameter-build.route-53\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.cloudsearchdomain.Search to request-created.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.autoscaling.CreateLaunchConfiguration.complete-section to docs.*.auto-scaling.CreateLaunchConfiguration.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.cloudsearchdomain.Search to before-parameter-build.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.cloudsearchdomain.Search.complete-section to docs.*.cloudsearch-domain.Search.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.logs.CreateExportTask to before-parameter-build.cloudwatch-logs.CreateExportTask\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.logs.CreateExportTask.complete-section to docs.*.cloudwatch-logs.CreateExportTask.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from creating-client-class.iot-data to creating-client-class.iot-data-plane\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-call.apigateway to before-call.api-gateway\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.machinelearning.Predict to request-created.machine-learning.Predict\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.autoscaling.CreateLaunchConfiguration to before-parameter-build.auto-scaling.CreateLaunchConfiguration\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.route53 to before-parameter-build.route-53\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.cloudsearchdomain.Search to request-created.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.autoscaling.CreateLaunchConfiguration.complete-section to docs.*.auto-scaling.CreateLaunchConfiguration.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.cloudsearchdomain.Search to before-parameter-build.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.cloudsearchdomain.Search.complete-section to docs.*.cloudsearch-domain.Search.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.logs.CreateExportTask to before-parameter-build.cloudwatch-logs.CreateExportTask\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.logs.CreateExportTask.complete-section to docs.*.cloudwatch-logs.CreateExportTask.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from creating-client-class.iot-data to creating-client-class.iot-data-plane\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-call.apigateway to before-call.api-gateway\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.machinelearning.Predict to request-created.machine-learning.Predict\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.autoscaling.CreateLaunchConfiguration to before-parameter-build.auto-scaling.CreateLaunchConfiguration\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.route53 to before-parameter-build.route-53\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.cloudsearchdomain.Search to request-created.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.autoscaling.CreateLaunchConfiguration.complete-section to docs.*.auto-scaling.CreateLaunchConfiguration.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.cloudsearchdomain.Search to before-parameter-build.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.cloudsearchdomain.Search.complete-section to docs.*.cloudsearch-domain.Search.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.logs.CreateExportTask to before-parameter-build.cloudwatch-logs.CreateExportTask\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.logs.CreateExportTask.complete-section to docs.*.cloudwatch-logs.CreateExportTask.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from creating-client-class.iot-data to creating-client-class.iot-data-plane\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-call.apigateway to before-call.api-gateway\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.machinelearning.Predict to request-created.machine-learning.Predict\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.autoscaling.CreateLaunchConfiguration to before-parameter-build.auto-scaling.CreateLaunchConfiguration\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.route53 to before-parameter-build.route-53\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.cloudsearchdomain.Search to request-created.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.autoscaling.CreateLaunchConfiguration.complete-section to docs.*.auto-scaling.CreateLaunchConfiguration.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.cloudsearchdomain.Search to before-parameter-build.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.cloudsearchdomain.Search.complete-section to docs.*.cloudsearch-domain.Search.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.logs.CreateExportTask to before-parameter-build.cloudwatch-logs.CreateExportTask\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.logs.CreateExportTask.complete-section to docs.*.cloudwatch-logs.CreateExportTask.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from creating-client-class.iot-data to creating-client-class.iot-data-plane\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-call.apigateway to before-call.api-gateway\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.machinelearning.Predict to request-created.machine-learning.Predict\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.autoscaling.CreateLaunchConfiguration to before-parameter-build.auto-scaling.CreateLaunchConfiguration\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.route53 to before-parameter-build.route-53\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.cloudsearchdomain.Search to request-created.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.autoscaling.CreateLaunchConfiguration.complete-section to docs.*.auto-scaling.CreateLaunchConfiguration.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.cloudsearchdomain.Search to before-parameter-build.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.cloudsearchdomain.Search.complete-section to docs.*.cloudsearch-domain.Search.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.logs.CreateExportTask to before-parameter-build.cloudwatch-logs.CreateExportTask\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.logs.CreateExportTask.complete-section to docs.*.cloudwatch-logs.CreateExportTask.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from creating-client-class.iot-data to creating-client-class.iot-data-plane\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-call.apigateway to before-call.api-gateway\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.machinelearning.Predict to request-created.machine-learning.Predict\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.autoscaling.CreateLaunchConfiguration to before-parameter-build.auto-scaling.CreateLaunchConfiguration\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.route53 to before-parameter-build.route-53\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.cloudsearchdomain.Search to request-created.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.autoscaling.CreateLaunchConfiguration.complete-section to docs.*.auto-scaling.CreateLaunchConfiguration.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.cloudsearchdomain.Search to before-parameter-build.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.cloudsearchdomain.Search.complete-section to docs.*.cloudsearch-domain.Search.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.logs.CreateExportTask to before-parameter-build.cloudwatch-logs.CreateExportTask\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.logs.CreateExportTask.complete-section to docs.*.cloudwatch-logs.CreateExportTask.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from creating-client-class.iot-data to creating-client-class.iot-data-plane\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-call.apigateway to before-call.api-gateway\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.machinelearning.Predict to request-created.machine-learning.Predict\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.autoscaling.CreateLaunchConfiguration to before-parameter-build.auto-scaling.CreateLaunchConfiguration\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.route53 to before-parameter-build.route-53\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.cloudsearchdomain.Search to request-created.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.autoscaling.CreateLaunchConfiguration.complete-section to docs.*.auto-scaling.CreateLaunchConfiguration.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.cloudsearchdomain.Search to before-parameter-build.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.cloudsearchdomain.Search.complete-section to docs.*.cloudsearch-domain.Search.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.logs.CreateExportTask to before-parameter-build.cloudwatch-logs.CreateExportTask\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.logs.CreateExportTask.complete-section to docs.*.cloudwatch-logs.CreateExportTask.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from creating-client-class.iot-data to creating-client-class.iot-data-plane\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-call.apigateway to before-call.api-gateway\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.machinelearning.Predict to request-created.machine-learning.Predict\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.autoscaling.CreateLaunchConfiguration to before-parameter-build.auto-scaling.CreateLaunchConfiguration\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.route53 to before-parameter-build.route-53\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.cloudsearchdomain.Search to request-created.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.autoscaling.CreateLaunchConfiguration.complete-section to docs.*.auto-scaling.CreateLaunchConfiguration.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.cloudsearchdomain.Search to before-parameter-build.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.cloudsearchdomain.Search.complete-section to docs.*.cloudsearch-domain.Search.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.logs.CreateExportTask to before-parameter-build.cloudwatch-logs.CreateExportTask\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.logs.CreateExportTask.complete-section to docs.*.cloudwatch-logs.CreateExportTask.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from creating-client-class.iot-data to creating-client-class.iot-data-plane\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-call.apigateway to before-call.api-gateway\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.machinelearning.Predict to request-created.machine-learning.Predict\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.autoscaling.CreateLaunchConfiguration to before-parameter-build.auto-scaling.CreateLaunchConfiguration\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.route53 to before-parameter-build.route-53\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from request-created.cloudsearchdomain.Search to request-created.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.autoscaling.CreateLaunchConfiguration.complete-section to docs.*.auto-scaling.CreateLaunchConfiguration.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.cloudsearchdomain.Search to before-parameter-build.cloudsearch-domain.Search\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.cloudsearchdomain.Search.complete-section to docs.*.cloudsearch-domain.Search.complete-section\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from before-parameter-build.logs.CreateExportTask to before-parameter-build.cloudwatch-logs.CreateExportTask\r\n[  206s] hooks.py                   417 DEBUG    Changing event name from docs.*.logs.CreateExportTask.complete-section to docs.*.cloudwatch-logs.CreateExportTask.complete-section\r\n[  206s] ==================== 4 failed, 961 passed in 109.13 seconds ====================\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1253", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1253/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1253/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1253/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1253", "id": 525261072, "node_id": "MDU6SXNzdWU1MjUyNjEwNzI=", "number": 1253, "title": "Cognito Events Transform to Wrong Permission", "user": {"login": "chrisoverzero", "id": 2152967, "node_id": "MDQ6VXNlcjIxNTI5Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2152967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisoverzero", "html_url": "https://github.com/chrisoverzero", "followers_url": "https://api.github.com/users/chrisoverzero/followers", "following_url": "https://api.github.com/users/chrisoverzero/following{/other_user}", "gists_url": "https://api.github.com/users/chrisoverzero/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisoverzero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisoverzero/subscriptions", "organizations_url": "https://api.github.com/users/chrisoverzero/orgs", "repos_url": "https://api.github.com/users/chrisoverzero/repos", "events_url": "https://api.github.com/users/chrisoverzero/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisoverzero/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1091980330, "node_id": "MDU6TGFiZWwxMDkxOTgwMzMw", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/stage/waiting-for-release", "name": "stage/waiting-for-release", "color": "84ce14", "default": false, "description": "Stage that indicates the issue was accepted and addressed but waiting on a release"}, {"id": 797198215, "node_id": "MDU6TGFiZWw3OTcxOTgyMTU=", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/type/bug", "name": "type/bug", "color": "b60205", "default": false, "description": null}, {"id": 1552872082, "node_id": "MDU6TGFiZWwxNTUyODcyMDgy", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/v1.20.0", "name": "v1.20.0", "color": "f409bd", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-19T20:53:24Z", "updated_at": "2020-01-14T19:21:05Z", "closed_at": "2020-01-14T19:21:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Description\r\n\r\nWhen creating a Function which responds to Cognito events, like this:\r\n\r\n```yaml\r\nEvents:\r\n  UserPoolPreAuthentication:\r\n    Type: Cognito\r\n    Properties:\r\n      UserPool: !Ref TheUserPool\r\n      Trigger: PreAuthentication\r\n```\r\n...the transformation includes this permission:\r\n\r\n```json\r\n\"TheFunctionCognitoPermission\": {\r\n  \"Type\": \"AWS::Lambda::Permission\",\r\n  \"Properties\": {\r\n    \"Action\": \"lambda:invokeFunction\",\r\n    \"FunctionName\": {\r\n      \"Ref\": \"TheFunction\"\r\n    },\r\n    \"EventSourceToken\": {\r\n      \"Ref\": \"TheUserPool\"\r\n    },\r\n    \"Principal\": \"cognito-idp.amazonaws.com\"\r\n  }\r\n}\r\n```\r\n\r\n...which I believe is incorrect and causing invocations to fail, blocking (pre-)authentication. The `EventSourceToken` appears only to be used for Alexa something-something. Permissions for invocation by Cognito should be using `SourceArn`. (With `Fn:GetAtt` of the `Arn` of `TheUserPool`, natch.)\r\n\r\n# Steps to Reproduce\r\n\r\n1. Create a SAM template which responds to Cognito events.\r\n2. Attempt to log in to a Cognito User Pool protected resource.\r\n3. Note that the error response includes an description of \"PreAuthentication invocation failed due to error AccessDeniedException\".\r\n\r\n# Observed Result\r\n\r\nThe Function is never invoked. Its CloudWatch log stream is never even created.\r\n\r\n# Expected Result\r\n\r\nThe, uh, the Function is invoked? I'm not sure what to put here. I'd expect the `AWS::Lambda::Permission` resource to be well-formed and correct for the service which is expected to be performing the invocation, I guess?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1252", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1252/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1252/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1252/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1252", "id": 525154586, "node_id": "MDU6SXNzdWU1MjUxNTQ1ODY=", "number": 1252, "title": "Cognito User Pool SMS configuration problem", "user": {"login": "karakter98", "id": 37190268, "node_id": "MDQ6VXNlcjM3MTkwMjY4", "avatar_url": "https://avatars3.githubusercontent.com/u/37190268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karakter98", "html_url": "https://github.com/karakter98", "followers_url": "https://api.github.com/users/karakter98/followers", "following_url": "https://api.github.com/users/karakter98/following{/other_user}", "gists_url": "https://api.github.com/users/karakter98/gists{/gist_id}", "starred_url": "https://api.github.com/users/karakter98/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karakter98/subscriptions", "organizations_url": "https://api.github.com/users/karakter98/orgs", "repos_url": "https://api.github.com/users/karakter98/repos", "events_url": "https://api.github.com/users/karakter98/events{/privacy}", "received_events_url": "https://api.github.com/users/karakter98/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-19T17:27:07Z", "updated_at": "2020-05-01T23:30:14Z", "closed_at": "2020-02-08T18:16:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\nWhen trying to create a Cognito user pool using SAM templates, SAM throws the error\r\n\r\n> Failed to create the changeset: Waiter ChangeSetCreateComplete failed: Waiter encountered a terminal failure state Status: FAILED. Reason: Transform AWS::Serverless-2016-10-31 failed with: Invalid Serverless Application Specification document. Number of errors found: 1. Resource with id [CognitoUserPool] is invalid. Type of property 'SmsConfiguration' is invalid.\r\n\r\nwhen specifying [SmsConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html#cfn-cognito-userpool-smsconfiguration) property.\r\nIn the template, there is also a Lambda trigger that has Cognito configured as an event source.\r\nAfter looking through the project and doing some tests, I believe the error could appear in the samtranslator module:\r\n`'SmsConfiguration': PropertyType(False, list_of(dict)),`\r\nFrom the CloudFormation docs, [SmsConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html#cfn-cognito-userpool-smsconfiguration) seems to be a simple dict, but in the code snippet above, it is validated as a list of dicts.\r\nIndeed, if I modify the corresponding part of the template from a mapping to a YAML list consisting of a single object, validation passes, but when the stack is created by CloudFormation, it fails with \r\n> Property validation failure: [Value of property {/SmsConfiguration} does not match type {Object}]\r\n\r\nwhich is consistent with the type of the property specified in the CloudFormation docs.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Create a SAM template with a Cognito user pool configured to use SMS MFA and a Lambda trigger associated.\r\n```yaml\r\nAWSTemplateFormatVersion: '2010-09-09'\r\nTransform: AWS::Serverless-2016-10-31\r\nDescription: >\r\n  Example YAML.\r\nGlobals:\r\n  Function:\r\n    Timeout: 3\r\n    Handler: lambda_function.lambda_handler\r\n    Runtime: python3.6\r\n    MemorySize: 128\r\nResources:\r\n  PreSignupValidationLambda:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      CodeUri: src/pre_signup_validation/\r\n      Events:\r\n        CognitoTrigger:\r\n          Type: Cognito\r\n          Properties:\r\n            UserPool: !Ref CognitoUserPool\r\n            Trigger: PreSignUp\r\n  CognitoUserPool:\r\n    Type: 'AWS::Cognito::UserPool'\r\n    Properties:\r\n      AutoVerifiedAttributes:\r\n        - phone_number\r\n      MfaConfiguration: OPTIONAL\r\n      Schema:\r\n        - AttributeDataType: String\r\n          DeveloperOnlyAttribute: false\r\n          Mutable: false\r\n          Name: sub\r\n          Required: true\r\n          StringAttributeConstraints:\r\n            MaxLength: 2048\r\n            MinLength: 0\r\n        - AttributeDataType: String\r\n          DeveloperOnlyAttribute: false\r\n          Mutable: true\r\n          Name: email\r\n          Required: true\r\n          StringAttributeConstraints:\r\n            MaxLength: 2048\r\n            MinLength: 0\r\n        - AttributeDataType: String\r\n          DeveloperOnlyAttribute: false\r\n          Mutable: true\r\n          Name: phone_number\r\n          Required: true\r\n          StringAttributeConstraints:\r\n            MaxLength: 2048\r\n            MinLength: 0\r\n      SmsConfiguration:\r\n        ExternalId: 'xxx-xxx-xxx'\r\n        SnsCallerArn: !GetAtt CognitoSMSRole.Arn\r\n      UsernameAttributes:\r\n        - email\r\n        - phone_number\r\n      UserPoolName: Customers\r\n  CognitoSMSRole:\r\n    Type: 'AWS::IAM::Role'\r\n    Properties:\r\n      AssumeRolePolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: 'cognito-idp.amazonaws.com'\r\n            Action:\r\n              - 'sts:AssumeRole'\r\n            Condition:\r\n              StringEquals:\r\n                'sts:ExternalId': 'xxx-xxx-xxx'\r\n      Policies:\r\n        - PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - 'sns:Publish'\r\n                Resource:\r\n                  - '*'\r\n          PolicyName: CognitoSendSMS\r\n      RoleName: CognitoSMSRole\r\n```\r\n2. Write a basic Lambda function in ```<template_location>/src/pre_signup_validation/lambda_function.py```\r\n```python\r\ndef lambda_handler(event: dict, context: dict):\r\n    return event\r\n```\r\n3. Run (Commands from the AWS Toolkit for PyCharm when trying to deploy application)\r\n```bash\r\nsam build --template template.yaml --build-dir build --use-container\r\n```\r\n```bash\r\nsam package --template-file build/template.yaml --output-template-file build/packaged-template.yaml --s3-bucket <your_s3_bucket>\r\n```\r\n```bash\r\nsam deploy --template-file build/packaged-template.yaml --stack-name test --no-execute-changeset\r\n```\r\n\r\n**Observed result:**\r\nSAM validates the SmsConfiguration parameter of Cognito user pools as a list of type dict.\r\n**Expected result:**\r\nValidation should be consistent with CloudFormation specification.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1251", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1251/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1251/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1251/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1251", "id": 524997303, "node_id": "MDU6SXNzdWU1MjQ5OTczMDM=", "number": 1251, "title": "SAM template policies should allow kinesis:DescribeStreamSummary", "user": {"login": "michaeljfazio", "id": 1845178, "node_id": "MDQ6VXNlcjE4NDUxNzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1845178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaeljfazio", "html_url": "https://github.com/michaeljfazio", "followers_url": "https://api.github.com/users/michaeljfazio/followers", "following_url": "https://api.github.com/users/michaeljfazio/following{/other_user}", "gists_url": "https://api.github.com/users/michaeljfazio/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaeljfazio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaeljfazio/subscriptions", "organizations_url": "https://api.github.com/users/michaeljfazio/orgs", "repos_url": "https://api.github.com/users/michaeljfazio/repos", "events_url": "https://api.github.com/users/michaeljfazio/events{/privacy}", "received_events_url": "https://api.github.com/users/michaeljfazio/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 797198225, "node_id": "MDU6TGFiZWw3OTcxOTgyMjU=", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/area/policy-templates", "name": "area/policy-templates", "color": "1d76db", "default": false, "description": null}, {"id": 1091980330, "node_id": "MDU6TGFiZWwxMDkxOTgwMzMw", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/stage/waiting-for-release", "name": "stage/waiting-for-release", "color": "84ce14", "default": false, "description": "Stage that indicates the issue was accepted and addressed but waiting on a release"}, {"id": 1552872082, "node_id": "MDU6TGFiZWwxNTUyODcyMDgy", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/v1.20.0", "name": "v1.20.0", "color": "f409bd", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-19T13:05:41Z", "updated_at": "2020-01-14T19:21:05Z", "closed_at": "2020-01-14T19:21:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Description:**\r\n\r\nKinesis policy templates that allow action \"kinesis:DescribeStream\" should also allow \"kinesis:DescribeStreamSummary\". The \"Describe Stream Summary\" API call exposes a subset of the information that the \"Describe Stream\" API call does. So, from a security standpoint there is no reason not to allow it. I came across this issue when attempting to calculate the maximum throughput of a stream before invoking it so that a reasonable backoff time can be applied to kinesis batch write calls. The reason to use Describe Stream Summary is that it provides the total shard count as a numeric value where as Describe Stream requires counting to Shard records one-by-one.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Create lambda using SAM template with either KinesisCrudPolicy or KinesisStreamReadPolicy\r\n2. Configure the lambda to invoke the kinesis get stream summary API endpoint\r\n3. Invoke the lambda\r\n\r\n**Observed result:**\r\n\r\nAn access denied exception is thrown.\r\n\r\n**Expected result:**\r\n\r\nAccess to this API call should NOT be denied (i.e. allow kinesis:DescribeStreamSummary).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1240", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1240/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1240/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1240/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1240", "id": 521729085, "node_id": "MDU6SXNzdWU1MjE3MjkwODU=", "number": 1240, "title": "fix: throw proper errors when `Authorizer: NONE` is set in api event and there are no authorizers defined in api", "user": {"login": "ShreyaGangishetty", "id": 7549138, "node_id": "MDQ6VXNlcjc1NDkxMzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7549138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShreyaGangishetty", "html_url": "https://github.com/ShreyaGangishetty", "followers_url": "https://api.github.com/users/ShreyaGangishetty/followers", "following_url": "https://api.github.com/users/ShreyaGangishetty/following{/other_user}", "gists_url": "https://api.github.com/users/ShreyaGangishetty/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShreyaGangishetty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShreyaGangishetty/subscriptions", "organizations_url": "https://api.github.com/users/ShreyaGangishetty/orgs", "repos_url": "https://api.github.com/users/ShreyaGangishetty/repos", "events_url": "https://api.github.com/users/ShreyaGangishetty/events{/privacy}", "received_events_url": "https://api.github.com/users/ShreyaGangishetty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 797198209, "node_id": "MDU6TGFiZWw3OTcxOTgyMDk=", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/area/docs", "name": "area/docs", "color": "0e8a16", "default": false, "description": null}, {"id": 1091980330, "node_id": "MDU6TGFiZWwxMDkxOTgwMzMw", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/stage/waiting-for-release", "name": "stage/waiting-for-release", "color": "84ce14", "default": false, "description": "Stage that indicates the issue was accepted and addressed but waiting on a release"}, {"id": 797198215, "node_id": "MDU6TGFiZWw3OTcxOTgyMTU=", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/type/bug", "name": "type/bug", "color": "b60205", "default": false, "description": null}, {"id": 1552872082, "node_id": "MDU6TGFiZWwxNTUyODcyMDgy", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/v1.20.0", "name": "v1.20.0", "color": "f409bd", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-12T18:38:11Z", "updated_at": "2020-01-14T19:21:05Z", "closed_at": "2020-01-14T19:21:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Description:**\r\nIf there is no Authorizer for `AWS::Serverless::Api` resource and you set `Authorizer: NONE` at api event level sam doesn't throw proper errors.\r\n\r\nSample Template:\r\n```yaml\r\nAWSTemplateFormatVersion: '2010-09-09'\r\nTransform: AWS::Serverless-2016-10-31\r\nResources:\r\n  HelloWorldFunction:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      InlineCode: |\r\n        def handler (event, context):\r\n          print(\"hello\") \r\n      Handler: index.handler\r\n      Runtime: python3.7\r\n      Events:\r\n        HttpGetUserGroupIdUserId:\r\n          Type: Api\r\n          Properties:\r\n            Path: '/users/{groupId}/{userId}'\r\n            Method: GET\r\n            Auth:\r\n              Authorizer: \"NONE\"\r\n```\r\n\r\n**Observed result:**\r\n```\r\nTraceback (most recent call last):\r\n  File \"bin/sam-translate.py\", line 141, in <module>\r\n    transform_template(input_file_path, output_file_path)\r\n  File \"bin/sam-translate.py\", line 98, in transform_template\r\n    sam_template, {}, ManagedPolicyLoader(iam_client))\r\n  File \"/Users/shreygan/git/serverless-application-model/bin/../samtranslator/translator/transform.py\", line 16, in transform\r\n    return translator.translate(input_fragment, parameter_values=parameter_values)\r\n  File \"/Users/shreygan/git/serverless-application-model/bin/../samtranslator/translator/translator.py\", line 120, in translate\r\n    translated = macro.to_cloudformation(**kwargs)\r\n  File \"/Users/shreygan/git/serverless-application-model/bin/../samtranslator/model/sam_resources.py\", line 125, in to_cloudformation\r\n    lambda_alias=lambda_alias)\r\n  File \"/Users/shreygan/git/serverless-application-model/bin/../samtranslator/model/sam_resources.py\", line 335, in _generate_event_resources\r\n    resources += eventsource.to_cloudformation(**kwargs)\r\n  File \"/Users/shreygan/git/serverless-application-model/bin/../samtranslator/model/eventsources/push.py\", line 534, in to_cloudformation\r\n    self._add_swagger_integration(explicit_api, function)\r\n  File \"/Users/shreygan/git/serverless-application-model/bin/../samtranslator/model/eventsources/push.py\", line 626, in _add_swagger_integration\r\n    if method_authorizer == 'NONE' and not api_auth.get('DefaultAuthorizer'):\r\nAttributeError: 'NoneType' object has no attribute 'get'\r\n```\r\n\r\n**Expected result:**\r\nThrow a proper error saying Auth cannot be set to NONE in Api Event when there is no DefaultAuthorizer/Authorizer at Api level\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1232", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1232/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1232/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1232/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1232", "id": 516268111, "node_id": "MDU6SXNzdWU1MTYyNjgxMTE=", "number": 1232, "title": "Associating an API model to a Lambda function should enable a request body validator.", "user": {"login": "brysontyrrell", "id": 3086245, "node_id": "MDQ6VXNlcjMwODYyNDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3086245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brysontyrrell", "html_url": "https://github.com/brysontyrrell", "followers_url": "https://api.github.com/users/brysontyrrell/followers", "following_url": "https://api.github.com/users/brysontyrrell/following{/other_user}", "gists_url": "https://api.github.com/users/brysontyrrell/gists{/gist_id}", "starred_url": "https://api.github.com/users/brysontyrrell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brysontyrrell/subscriptions", "organizations_url": "https://api.github.com/users/brysontyrrell/orgs", "repos_url": "https://api.github.com/users/brysontyrrell/repos", "events_url": "https://api.github.com/users/brysontyrrell/events{/privacy}", "received_events_url": "https://api.github.com/users/brysontyrrell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-01T18:08:11Z", "updated_at": "2019-11-05T18:14:36Z", "closed_at": "2019-11-05T18:14:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Description:**\r\n\r\nWith the recent addition of `Models` to the `AWS::Serverless::Api` resource I began working on removing all of my Swagger definitions from an API and rely only on the SAM resources. I rely on request body validation with API Gateway to verify good JSON payloads are bing provided before my function code is invoked. To me, building a serverless API, this is the key feature, behavior, and reason for associating a model with a method-path.\r\n\r\nWhen I went to test an API configured using only SAM resources I found that this is not the behavior when the API Gateway is created. The request body validator is not enabled even though I am supplying a model/schema. From my perspective I don't see how adding models provides functional value to my applications if they aren't being used to validate requests - it's functionality I have to move back into my codebase now, or I have to go back to defining the entire Swagger doc with all of the API Gateway extensions again. \r\n\r\n**Steps to reproduce the issue:**\r\n\r\nCreate a `AWS::Serverless::Api` resource and associate a model with it.\r\n\r\nCreate a `AWS::Serverless::Function` resource and associate it with a method-path and the model.\r\n\r\n**Observed result:**\r\n\r\nThe model is associated with that method-path, but request body validation is not enabled. The underlying Lambda functions are invoked even if invalid requests are being performed.\r\n\r\n**Expected result:**\r\n\r\nThe model is associated with the method-path and request body validation is enabled. The underlying Lambda functions are not invoked when invalid requests are performed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1229", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1229/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1229/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1229/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1229", "id": 514972972, "node_id": "MDU6SXNzdWU1MTQ5NzI5NzI=", "number": 1229, "title": "Enabled property not accepting String values using Parameters/Mappings/Intrinsic functions", "user": {"login": "kanikaaws", "id": 45401115, "node_id": "MDQ6VXNlcjQ1NDAxMTE1", "avatar_url": "https://avatars0.githubusercontent.com/u/45401115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kanikaaws", "html_url": "https://github.com/kanikaaws", "followers_url": "https://api.github.com/users/kanikaaws/followers", "following_url": "https://api.github.com/users/kanikaaws/following{/other_user}", "gists_url": "https://api.github.com/users/kanikaaws/gists{/gist_id}", "starred_url": "https://api.github.com/users/kanikaaws/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kanikaaws/subscriptions", "organizations_url": "https://api.github.com/users/kanikaaws/orgs", "repos_url": "https://api.github.com/users/kanikaaws/repos", "events_url": "https://api.github.com/users/kanikaaws/events{/privacy}", "received_events_url": "https://api.github.com/users/kanikaaws/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-30T20:48:23Z", "updated_at": "2019-11-01T17:18:30Z", "closed_at": "2019-11-01T17:18:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to create `AWS::Serverless::Function `resource with Events Type: Schedule, and for the property `\"Enabled\"`, it accepts Boolean value True/False. I need to pass this True/False value using Parameters/Mappings/Intrinsic function, but whenever I pass the value, it gets evaluated to \"True\", no matter what is in the string. \r\n\r\nSimilar Issue: https://github.com/awslabs/serverless-application-model/issues/1154\r\n\r\n**Use-case**: \r\nNeed to enable/disable the cron rule based on environment type i.e. set to False/Disabled if environment equal to dev/stage, and set to True/Enable when environment equals to prod.\r\n\r\n**Observed result:**\r\nIf EnvironmentType=dev, CronState=False, and so the Events Rule must be created with DISABLED state, however, it doesn't resolve the FindInMap or !Ref, and instead creates the rule with ENABLED state. \r\n\r\n```\r\nParameters:\r\n  EnvironmentType:\r\n    Type: String\r\n    Default: dev\r\n    AllowedValues:\r\n      - dev\r\n      - stage\r\n      - prod\r\nMappings:\r\n  EnvironmentMapping:\r\n    stage:\r\n      CronState: true\r\n    dev:\r\n      CronState: false\r\n   prod:\r\n      CronState: true\r\nResources:\r\n  HelloWorldFunction:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      Handler: index.handler\r\n      Runtime: nodejs8.10\r\n     Events:\r\n        TestEvent:\r\n          Type: Schedule\r\n          Description: run every 1 minute\r\n          Properties:\r\n            Schedule: rate(5 minutes)\r\n            Enabled: !FindInMap [\"EnvironmentMapping\",!Ref \"EnvironmentType\",\"CronState\"]\r\n            # accepts only hardcoded Boolean values --> Enabled: False or Enabled: True\r\n            \r\n```\r\n\r\n\r\n\r\n**Expected result:**\r\nThe value must yield to False, and the Events::Rule must be created with DISABLED state. \r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1223", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1223/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1223/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1223/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1223", "id": 512916463, "node_id": "MDU6SXNzdWU1MTI5MTY0NjM=", "number": 1223, "title": "Not able to provision API keys after removal", "user": {"login": "MatteoGioioso", "id": 43592430, "node_id": "MDQ6VXNlcjQzNTkyNDMw", "avatar_url": "https://avatars1.githubusercontent.com/u/43592430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatteoGioioso", "html_url": "https://github.com/MatteoGioioso", "followers_url": "https://api.github.com/users/MatteoGioioso/followers", "following_url": "https://api.github.com/users/MatteoGioioso/following{/other_user}", "gists_url": "https://api.github.com/users/MatteoGioioso/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatteoGioioso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatteoGioioso/subscriptions", "organizations_url": "https://api.github.com/users/MatteoGioioso/orgs", "repos_url": "https://api.github.com/users/MatteoGioioso/repos", "events_url": "https://api.github.com/users/MatteoGioioso/events{/privacy}", "received_events_url": "https://api.github.com/users/MatteoGioioso/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-27T03:58:35Z", "updated_at": "2019-11-01T17:29:52Z", "closed_at": "2019-11-01T17:29:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\n\r\nI have successfully deployed API keys previously, however after I have deleted them from `Api Gateway` console, now I am not able to provision them anymore, the deployment goes smoothly, no error, but when I go and check them through the aws console the screen does't show them\r\n\r\n**Steps to reproduce the issue:**\r\nThis is my SAM template\r\n```\r\nResources:\r\n  #API GATEWAY ========================================\r\n  myAPI:\r\n    Type: AWS::Serverless::Api\r\n    Properties:\r\n      StageName: !Ref Environment\r\n      DefinitionBody:\r\n        swagger: \"2.0\"\r\n        info:\r\n          title:\r\n            Ref: AWS::StackName\r\n        x-amazon-apigateway-api-key-source: HEADER\r\n        securityDefinitions:\r\n          myAPIKey:\r\n            type: \"apiKey\"\r\n            name: \"x-api-key\"\r\n            in: \"header\"\r\n        paths:\r\n          /path/invocation:\r\n            post:\r\n              responses: {}\r\n              x-amazon-apigateway-integration:\r\n                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${myFunction.Arn}/invocations\r\n                httpMethod: \"POST\"\r\n                type: \"aws_proxy\"\r\n              security:\r\n                - myAPIKey: []\r\n\r\n  myAPIKey:\r\n    Type: AWS::ApiGateway::ApiKey\r\n    Properties:\r\n      Enabled: true\r\n\r\n  myUsagePlan:\r\n    Type: AWS::ApiGateway::UsagePlan\r\n    Properties:\r\n      ApiStages:\r\n        - ApiId: !Ref myAPI\r\n          Stage: !Ref Environment\r\n\r\n  myUsagePlankey:\r\n    Type: AWS::ApiGateway::UsagePlanKey\r\n    Properties:\r\n      KeyId: !Ref myAPIKey\r\n      KeyType: API_KEY\r\n      UsagePlanId: !Ref myUsagePlan\r\n```\r\n\r\n**Observed result:**\r\nNo error, the deployment is successful, but the api key are not showing and the usage plan is not connected to any key\r\n\r\n**Expected result:**\r\nIt should provision the key", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1219", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1219/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1219/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1219/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1219", "id": 512524570, "node_id": "MDU6SXNzdWU1MTI1MjQ1NzA=", "number": 1219, "title": "SAM Template spec missing section for Parameters", "user": {"login": "mikelax", "id": 2080701, "node_id": "MDQ6VXNlcjIwODA3MDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/2080701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikelax", "html_url": "https://github.com/mikelax", "followers_url": "https://api.github.com/users/mikelax/followers", "following_url": "https://api.github.com/users/mikelax/following{/other_user}", "gists_url": "https://api.github.com/users/mikelax/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikelax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikelax/subscriptions", "organizations_url": "https://api.github.com/users/mikelax/orgs", "repos_url": "https://api.github.com/users/mikelax/repos", "events_url": "https://api.github.com/users/mikelax/events{/privacy}", "received_events_url": "https://api.github.com/users/mikelax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-25T13:42:57Z", "updated_at": "2019-10-25T17:27:15Z", "closed_at": "2019-10-25T17:27:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\n\r\nBefore reporting a new issue, make sure we don't have any duplicates already open or closed by\r\nsearching the issues list. If there is a duplicate, re-open or add a comment to the\r\nexisting issue instead of creating a new one. If you are reporting a bug,\r\nmake sure to include relevant information asked below to help with debugging.\r\n\r\n## GENERAL HELP QUESTIONS ##\r\nGithub Issues is for bug reports and feature requests. If you have general support\r\nquestions, the following locations are a good place:\r\n\r\n- Post a question in StackOverflow  with \"aws-sam\" tag\r\n\r\n-->\r\n\r\n**Description:**\r\n\r\nAfter spending some time reading up on SAM and reviewing the documentation on github, the aws docs site, and the template file I found that there is several items missing from the documentation, In particular there is no documentation (that I found) that talked about the `Parameters` top-level section. I was able to figure it out after a short time with some googling, but that was mainly also aided by my experience with the serverless framework and cloudformation. \r\n\r\n**Steps to reproduce the issue:**\r\n1. Review the [Template Spec](https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md), the [aws docs website](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template.html)\r\n2. Observe there is no documentation in any of these locations\r\n\r\n**Observed result:** There is no mention of the `Parameters` section\r\n\r\n**Expected result:** There should be documentation that describes Parameters with the supported attributes:  type, description, allowedvalues, default. At the very least the section could point to the corresponding documentation on CFN.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1217", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1217/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1217/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1217/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1217", "id": 511508155, "node_id": "MDU6SXNzdWU1MTE1MDgxNTU=", "number": 1217, "title": "Support Fn::If when choosing an Event Type", "user": {"login": "stevenmhood", "id": 1289141, "node_id": "MDQ6VXNlcjEyODkxNDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1289141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stevenmhood", "html_url": "https://github.com/stevenmhood", "followers_url": "https://api.github.com/users/stevenmhood/followers", "following_url": "https://api.github.com/users/stevenmhood/following{/other_user}", "gists_url": "https://api.github.com/users/stevenmhood/gists{/gist_id}", "starred_url": "https://api.github.com/users/stevenmhood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stevenmhood/subscriptions", "organizations_url": "https://api.github.com/users/stevenmhood/orgs", "repos_url": "https://api.github.com/users/stevenmhood/repos", "events_url": "https://api.github.com/users/stevenmhood/events{/privacy}", "received_events_url": "https://api.github.com/users/stevenmhood/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-23T18:51:08Z", "updated_at": "2019-10-25T19:27:43Z", "closed_at": "2019-10-25T17:20:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\n\r\nI'd like to be able to choose an Event Source based on a Condition.  I have some code that can work with both DynamoDB and Kinesis streams, deployed as a `AWS::Serverless::Function`.  The only thing that isn't working is defining the `Type` of the `Event`.\r\n\r\n**Steps to reproduce the issue:**\r\n```yaml\r\nParameters:\r\n  EventStreamSource:\r\n    Type: String\r\n    Description: Source for streaming events.  Currently supported sources are DynamoDB and DynamoDBWrappedKinesis\r\n                 (contains DynamodbStreamRecord payloads).\r\n    Default: DynamoDB\r\n    AllowedValues:  # Values are used to select the Java class (see StreamRepartitionerFunction's Handler property)\r\n    - DynamoDB\r\n    - DynamoDBWrappedKinesis\r\n  EventStreamSourceArn:\r\n    Type: String\r\n    Description: Stream ARN from which snapshots will be produced.\r\nConditions:\r\n  UseDynamoDBSource:\r\n    Fn::Equals:\r\n    - Ref: EventStreamSource\r\n    - DynamoDB\r\nResources:\r\n  StreamRepartitionerFunction:\r\n    Type: AWS::Serverless::Function\r\n    DependsOn:\r\n    - RepartitioningStream\r\n    - StreamRepartitionerFunctionRole\r\n    Properties:\r\n      Handler:\r\n        Fn::Sub: com.amazon.snapshot.repartition.Repartitioner${EventStreamSource}LambdaHandler::handleRequest\r\n      Runtime: java8\r\n      CodeUri:\r\n        Bucket: s3-bucket-here\r\n        Key: s3-key-here\r\n      Description: Repartitions an event stream using a Kinesis Stream\r\n      MemorySize: 320\r\n      Timeout: 15\r\n      Role:\r\n        Fn::GetAtt: StreamRepartitionerFunctionRole.Arn\r\n      Events:\r\n        StreamEvent:\r\n          Type: \r\n            Fn::If:\r\n            - UseDynamoDBSource\r\n            - DynamoDB\r\n            - Kinesis\r\n          Properties:\r\n            Stream:\r\n              Ref: EventStreamSourceArn\r\n            StartingPosition: LATEST\r\n            BatchSize: 1000\r\n            MaximumBatchingWindowInSeconds:\r\n              Ref: RepartitionMaximumBatchingWindowInSeconds\r\n            Enabled: true\r\n```\r\n\r\n**Observed result:**\r\nCreating a ChangeSet fails with the following error:\r\n```\r\nTransform AWS::Serverless-2016-10-31 failed with: Invalid Serverless Application Specification document. Number of errors found: 1. Resource with id [StreamRepartitionerFunction] is invalid. Event with id [StreamEvent] is invalid. unhashable type: 'dict'\r\n```\r\n\r\n[cfn-lint](https://github.com/aws-cloudformation/cfn-python-lint) fails with the following error:\r\n```\r\nE0001 Error transforming template: Resource with id [StreamRepartitionerFunction] is invalid. Event with id [StreamEvent] is invalid. unhashable type: 'dict_node'\r\ntemplate.yml:1:1\r\n```\r\n\r\n**Expected result:**\r\nThe transform should complete and create the appropriate `AWS::Lambda::EventSourceMapping`, so cfn-lint and the ChangeSet succeed.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1212", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1212/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1212/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1212/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1212", "id": 509194574, "node_id": "MDU6SXNzdWU1MDkxOTQ1NzQ=", "number": 1212, "title": "V1.20.0 Release Tracker", "user": {"login": "ShreyaGangishetty", "id": 7549138, "node_id": "MDQ6VXNlcjc1NDkxMzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7549138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShreyaGangishetty", "html_url": "https://github.com/ShreyaGangishetty", "followers_url": "https://api.github.com/users/ShreyaGangishetty/followers", "following_url": "https://api.github.com/users/ShreyaGangishetty/following{/other_user}", "gists_url": "https://api.github.com/users/ShreyaGangishetty/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShreyaGangishetty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShreyaGangishetty/subscriptions", "organizations_url": "https://api.github.com/users/ShreyaGangishetty/orgs", "repos_url": "https://api.github.com/users/ShreyaGangishetty/repos", "events_url": "https://api.github.com/users/ShreyaGangishetty/events{/privacy}", "received_events_url": "https://api.github.com/users/ShreyaGangishetty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1091980330, "node_id": "MDU6TGFiZWwxMDkxOTgwMzMw", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/stage/waiting-for-release", "name": "stage/waiting-for-release", "color": "84ce14", "default": false, "description": "Stage that indicates the issue was accepted and addressed but waiting on a release"}, {"id": 1552872082, "node_id": "MDU6TGFiZWwxNTUyODcyMDgy", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/v1.20.0", "name": "v1.20.0", "color": "f409bd", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-18T16:45:59Z", "updated_at": "2020-01-14T19:21:04Z", "closed_at": "2020-01-14T19:21:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Public Release tracker\r\nTo get a look at where this release is in our internal pipeline look at our Github [release board](https://github.com/awslabs/serverless-application-model/projects/3)\r\n\r\n### Changelog\r\n1. fix: actually exclude test files from being installed (#1132) \r\n1. docs: fix link to Github issues (#1149) \r\n1. docs: updated MethodSettings from API Gateway (#1170)\r\n1. feat: custom domains Api Gateway support (#1144) \r\n1. feat: Custom domains route53 support (#1165)\r\n1. chore: fix slack channel link (#1177)\r\n1. fix(policy-templates): update DynamoDBCrudPolicy (#1173)\r\n1. fix: fix sns publish (#1200)\r\n1. feat (policy template): added KMSEncryptPolicy policy template and related test changes (#1192)\r\n1. docs: fix CORS documentation regarding API Gateway literal values (#1198)\r\n1. ~~fix: allow Authorizer: NONE when using custom swagger (#1211)~~ **Reverted in #1357**\r\n1. docs: update Greengrass Hello World examples (#1191) \r\n1. docs: change references to Swagger to OpenAPI (#1199) \r\n1. fix: add intrinsic support for deployment preference enabled (#1196) \r\n1. docs: fix yaml code block for authorizers (#1214) \r\n1. chore(deps): bump pillow in /examples/2016-10-31/image_resize_python (#1215)\r\n1. feat: add support for TriggerConfigurations in DeploymentConfiguration (#1195)\r\n1. fix: adding support to point to api gateway distribution (#1230)\r\n1. feat: function role tag propagation (#1194) \r\n1. chore: typo in swagger.py (#1220)\r\n1. fix: failed tests (#1234) \r\n1. chore(docs): fix a cognito event source example (#1233) \r\n1. fix: throw better error for improper api reference (#1224) \r\n1. feat: adding VPC Access Policy when VpcConfig is present (#1228) \r\n1. fix: throw error when method authorizer is present and api auth is not defined (#1282)\r\n1. docs: correct spelling in README (#1243)\r\n1. fix: destination config link (#1270)\r\n1. feat: add sqs and sns policies based on destination config (#1299)\r\n1. fix: transform cognito events to a eermission with `sourcearn` (#1260)\r\n1. chore: add Python 3.8 as supported version (#1256)\r\n1. docs: prettify generated_resources document (#1247)\r\n1. examples: add Lambda ARN to inbound-ses-spam-filter outputs (#1294)\r\n1. feat(EventBridge): add new EventBridgeRule SAM Function EventSource (#1241)\r\n1. feat(policy-template): adding cloudwatch:describeAlarmHistory policy (#1264)\r\n1. fix: update failing tests(#1306)\r\n1. build: add AppVeyor config to move away from Travis (#1263)\r\n1. feat(policy-template): allow kinesis:DescribeStreamSummary for Kinesis CrusPolicy and KinesisStreamReadPolicy (#1259)\r\n1. fix(policy-templates): update arn format of DynamoDBStreamReadPolicy (#1222)\r\n1. feat: add authorizationscopes (#917)\r\n1. chore: merge pull request #1306\r\n1. feat(policy-templates): add AthenaQueryPolicy template (#1137)\r\n1. chore: fix failing tests (#1312) \r\n1. chore: fix the SAM Slack Community link (#1318) \r\n1. fix: amend provisioned concurrency examples and templates to work for false condition (#1288)\r\n1. feat: Add an existing SQS queue option to SNS event (#1231) \r\n1. fix: remove unsupported options for openapi3.0 (#1316)\r\n1. feat: add AssumeRolePolicyDocument to AWS::Serverless::Function (#1311)\r\n1. fix: handle explicit null in nested app SemanticVersion (#1334)\r\n1. Remove SAR example applications (#1341)\r\n1. fix: updated the lambda permission with the correct case (#1319)\r\n1. feat: support for lambda event destinations (#1321)\r\n1. chore: Adopt black formatting (#1322)\r\n1. docs: adding official docs page in versions.md (#1340)\r\n1. fix: redeploy api when function name changes (#1235)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1209", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1209/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1209/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1209/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1209", "id": 508050818, "node_id": "MDU6SXNzdWU1MDgwNTA4MTg=", "number": 1209, "title": "SNS event's new SqsSubscription option does not follow recommended configuration", "user": {"login": "ljacobsson", "id": 7579097, "node_id": "MDQ6VXNlcjc1NzkwOTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7579097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljacobsson", "html_url": "https://github.com/ljacobsson", "followers_url": "https://api.github.com/users/ljacobsson/followers", "following_url": "https://api.github.com/users/ljacobsson/following{/other_user}", "gists_url": "https://api.github.com/users/ljacobsson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljacobsson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljacobsson/subscriptions", "organizations_url": "https://api.github.com/users/ljacobsson/orgs", "repos_url": "https://api.github.com/users/ljacobsson/repos", "events_url": "https://api.github.com/users/ljacobsson/events{/privacy}", "received_events_url": "https://api.github.com/users/ljacobsson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-16T19:25:13Z", "updated_at": "2019-10-16T19:30:24Z", "closed_at": "2019-10-16T19:30:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When setting `SqsSubscription: true` on an SNS event, SAM will put a queue without any properties set in front of the lambda function. \r\n\r\nAccording to AWS docs, the VisibilityTimeout should be set to give lambda's retry logic a chance to retry twice before the message becomes available:\r\n\r\nhttps://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html\r\n> To allow your function time to process each batch of records, set the source queue's visibility timeout to at least 6 times the timeout that you configure on your function. The extra time allows for Lambda to retry if your function execution is throttled while your function is processing a previous batch.\r\n\r\nWould also be nice if there were optional properties to build a `redrivePolicy` and a DLQ so messages don't retry relentlessly for 4 days.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1206", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1206/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1206/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1206/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1206", "id": 507396518, "node_id": "MDU6SXNzdWU1MDczOTY1MTg=", "number": 1206, "title": "SAM API Usable Across Stacks", "user": {"login": "gakinson", "id": 3464973, "node_id": "MDQ6VXNlcjM0NjQ5NzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3464973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gakinson", "html_url": "https://github.com/gakinson", "followers_url": "https://api.github.com/users/gakinson/followers", "following_url": "https://api.github.com/users/gakinson/following{/other_user}", "gists_url": "https://api.github.com/users/gakinson/gists{/gist_id}", "starred_url": "https://api.github.com/users/gakinson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gakinson/subscriptions", "organizations_url": "https://api.github.com/users/gakinson/orgs", "repos_url": "https://api.github.com/users/gakinson/repos", "events_url": "https://api.github.com/users/gakinson/events{/privacy}", "received_events_url": "https://api.github.com/users/gakinson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-15T17:59:52Z", "updated_at": "2019-11-08T18:21:00Z", "closed_at": "2019-11-08T18:21:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\n\r\nBefore reporting a new issue, make sure we don't have any duplicates already open or closed by\r\nsearching the issues list. If there is a duplicate, re-open or add a comment to the\r\nexisting issue instead of creating a new one. If you are reporting a bug,\r\nmake sure to include relevant information asked below to help with debugging.\r\n\r\n## GENERAL HELP QUESTIONS ##\r\nGithub Issues is for bug reports and feature requests. If you have general support\r\nquestions, the following locations are a good place:\r\n\r\n- Post a question in StackOverflow  with \"aws-sam\" tag\r\n\r\n-->\r\n\r\n**Description:**\r\nI created two stacks in CodePipeline, one beta and one prod. When the SAM template file gets executed, it creates TWO separate APIs in ApiGateway with the exact same name,  but different identifiers.\r\n\r\nWhat I actually wanted was one API, but with two different stages, one beta and one prod.\r\n\r\nIt would be nice if cloudformation would fine the API based on name and if the API already exists then just reuse that and add the stage.\r\n<!-- Briefly describe the problem you are facing -->\r\n\r\n**Steps to reproduce the issue:**\r\n1. Create SAM template with API resource\r\n2. Set the name to be the same\r\n3. Set stage to be reference to the stage variable\r\n4. Create two deployment stages, one for beta and one for prod\r\n5. Execute code pipeline\r\n\r\n**Observed result:**\r\nTwo Separate APIs in Api Gateway with the same name\r\n**Expected result:**\r\nOne Api with two stages, one beta and one prod\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1204", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1204/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1204/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1204/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1204", "id": 507179862, "node_id": "MDU6SXNzdWU1MDcxNzk4NjI=", "number": 1204, "title": "Create function that can call itself", "user": {"login": "ingomueller-net", "id": 1036898, "node_id": "MDQ6VXNlcjEwMzY4OTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1036898?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ingomueller-net", "html_url": "https://github.com/ingomueller-net", "followers_url": "https://api.github.com/users/ingomueller-net/followers", "following_url": "https://api.github.com/users/ingomueller-net/following{/other_user}", "gists_url": "https://api.github.com/users/ingomueller-net/gists{/gist_id}", "starred_url": "https://api.github.com/users/ingomueller-net/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ingomueller-net/subscriptions", "organizations_url": "https://api.github.com/users/ingomueller-net/orgs", "repos_url": "https://api.github.com/users/ingomueller-net/repos", "events_url": "https://api.github.com/users/ingomueller-net/events{/privacy}", "received_events_url": "https://api.github.com/users/ingomueller-net/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-15T11:22:23Z", "updated_at": "2019-10-15T17:29:44Z", "closed_at": "2019-10-15T17:29:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description:**\r\n\r\nI *think* it is currently not possible to create a function that it allowed to call itself. I am trying to achieve this with the following template.\r\n\r\n```yaml\r\nResources:\r\n  MyFunction:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      CodeUri: aws_lambda\r\n      Handler: handler.run\r\n      Runtime: python3.7\r\n      MemorySize: 2048\r\n      Policies:\r\n        - LambdaInvokePolicy:\r\n            FunctionName: !Ref MyFunction\r\n```\r\n\r\nThis fails with the following message:\r\n\r\n```\r\nFAILED. Reason: Circular dependency between resources: [MyFunction, MyFunctionRole]\r\n```\r\n\r\nIt looks to me like I cannot break this circular dependency. The function needs to know which role it should be created with and role defines the policy, which needs to know what function it refers to.\r\n\r\nI'd be glad to hear that there is a way to do it currently. Otherwise, this would be a great feature to add.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1187", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1187/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1187/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1187/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1187", "id": 504337080, "node_id": "MDU6SXNzdWU1MDQzMzcwODA=", "number": 1187, "title": "add EventBridgePutEventsPolicy policy template", "user": {"login": "jlhood", "id": 1444420, "node_id": "MDQ6VXNlcjE0NDQ0MjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1444420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlhood", "html_url": "https://github.com/jlhood", "followers_url": "https://api.github.com/users/jlhood/followers", "following_url": "https://api.github.com/users/jlhood/following{/other_user}", "gists_url": "https://api.github.com/users/jlhood/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlhood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlhood/subscriptions", "organizations_url": "https://api.github.com/users/jlhood/orgs", "repos_url": "https://api.github.com/users/jlhood/repos", "events_url": "https://api.github.com/users/jlhood/events{/privacy}", "received_events_url": "https://api.github.com/users/jlhood/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1091980330, "node_id": "MDU6TGFiZWwxMDkxOTgwMzMw", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/stage/waiting-for-release", "name": "stage/waiting-for-release", "color": "84ce14", "default": false, "description": "Stage that indicates the issue was accepted and addressed but waiting on a release"}, {"id": 1858298355, "node_id": "MDU6TGFiZWwxODU4Mjk4MzU1", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/v1.22.0", "name": "v1.22.0", "color": "a9e258", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-10-08T23:58:54Z", "updated_at": "2020-03-16T22:45:39Z", "closed_at": "2020-03-16T22:45:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Description:**\r\n\r\nWe should add a policy template for putting Amazon EventBridge events. We can call it EventBridgePutEventsPolicy and it should allow the `events:PutEvents` action. From the [EventBridge IAM documentation](https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoneventbridge.html), it looks like you can't scope the permission down to a specific event bus, although that doesn't sound right so I'm doublechecking on that. However, if that turns out to be the case, this policy template would take no parameters and specify `Resource: *`.\r\n\r\nHere's an example of a past PR that added a new policy template for reference: #904", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1186", "repository_url": "https://api.github.com/repos/awslabs/serverless-application-model", "labels_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1186/labels{/name}", "comments_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1186/comments", "events_url": "https://api.github.com/repos/awslabs/serverless-application-model/issues/1186/events", "html_url": "https://github.com/awslabs/serverless-application-model/issues/1186", "id": 504330893, "node_id": "MDU6SXNzdWU1MDQzMzA4OTM=", "number": 1186, "title": "add KMSEncryptPolicy policy template", "user": {"login": "jlhood", "id": 1444420, "node_id": "MDQ6VXNlcjE0NDQ0MjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1444420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlhood", "html_url": "https://github.com/jlhood", "followers_url": "https://api.github.com/users/jlhood/followers", "following_url": "https://api.github.com/users/jlhood/following{/other_user}", "gists_url": "https://api.github.com/users/jlhood/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlhood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlhood/subscriptions", "organizations_url": "https://api.github.com/users/jlhood/orgs", "repos_url": "https://api.github.com/users/jlhood/repos", "events_url": "https://api.github.com/users/jlhood/events{/privacy}", "received_events_url": "https://api.github.com/users/jlhood/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1091980330, "node_id": "MDU6TGFiZWwxMDkxOTgwMzMw", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/stage/waiting-for-release", "name": "stage/waiting-for-release", "color": "84ce14", "default": false, "description": "Stage that indicates the issue was accepted and addressed but waiting on a release"}, {"id": 1552872082, "node_id": "MDU6TGFiZWwxNTUyODcyMDgy", "url": "https://api.github.com/repos/awslabs/serverless-application-model/labels/v1.20.0", "name": "v1.20.0", "color": "f409bd", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-08T23:34:05Z", "updated_at": "2020-01-14T19:21:04Z", "closed_at": "2020-01-14T19:21:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Description:**\r\n\r\nSAM policy templates has a [KMSDecryptPolicy](https://github.com/awslabs/serverless-application-model/blob/master/samtranslator/policy_templates_data/policy_templates.json#L774), but no KMSEncryptPolicy that allows `kms:Encrypt` action. This issue is to add a KMSEncryptPolicy that is almost identical to KMSDecryptPolicy, but has `kms:Encrypt` action instead of `kms:Decrypt` action. Should be a simple update. Here's an example of a past PR that added a new policy template for reference: #904 ", "performed_via_github_app": null, "score": 1.0}]}