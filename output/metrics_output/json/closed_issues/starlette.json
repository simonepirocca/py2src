{"total_count": 368, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/encode/starlette/issues/1027", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/1027/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/1027/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/1027/events", "html_url": "https://github.com/encode/starlette/issues/1027", "id": 676898266, "node_id": "MDU6SXNzdWU2NzY4OTgyNjY=", "number": 1027, "title": "Wrong content_type for UploadFile", "user": {"login": "elsimqoz", "id": 62243917, "node_id": "MDQ6VXNlcjYyMjQzOTE3", "avatar_url": "https://avatars1.githubusercontent.com/u/62243917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elsimqoz", "html_url": "https://github.com/elsimqoz", "followers_url": "https://api.github.com/users/elsimqoz/followers", "following_url": "https://api.github.com/users/elsimqoz/following{/other_user}", "gists_url": "https://api.github.com/users/elsimqoz/gists{/gist_id}", "starred_url": "https://api.github.com/users/elsimqoz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elsimqoz/subscriptions", "organizations_url": "https://api.github.com/users/elsimqoz/orgs", "repos_url": "https://api.github.com/users/elsimqoz/repos", "events_url": "https://api.github.com/users/elsimqoz/events{/privacy}", "received_events_url": "https://api.github.com/users/elsimqoz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-11T13:55:04Z", "updated_at": "2020-08-12T13:27:22Z", "closed_at": "2020-08-12T13:27:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\npython 3.8\r\nfastapi==0.60.1\r\npydantic==1.6.1\r\nstarlette==0.13.6\r\npytest==5.4.3\r\n```\r\n\r\ntest:\r\n```\r\n@pytest.fixture()\r\ndef app():\r\n    return create_app()\r\n\r\n\r\n@pytest.fixture()\r\ndef web_client(app):\r\n    return TestClient(app=app)\r\n\r\n\r\n@pytest.fixture()\r\ndef file():\r\n    f = NamedTemporaryFile(suffix='.csv')\r\n    f.write(b'123;4\\n5;67')\r\n    f.seek(0)\r\n    return f\r\n\r\n\r\ndef test_import(web_client, file):\r\n    files = {'file': open(file.name, 'rb')}\r\n    web_client.post('/import', files=files)\r\n```\r\n\r\nview:\r\n```\r\nimport mimetypes\r\n\r\nfrom fastapi import APIRouter, File, UploadFile\r\n\r\n\r\nrouter = APIRouter()\r\n\r\n\r\n@router.post('/import')\r\ndef import_file(file: UploadFile = File(...)):\r\n    assert mimetypes.guess_type(file.filename)[0] == 'text/csv'  # ok\r\n    assert file.content_type == 'text/csv'  # fail\r\n```\r\nWhy `file.content_type == ''`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/1022", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/1022/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/1022/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/1022/events", "html_url": "https://github.com/encode/starlette/issues/1022", "id": 675541273, "node_id": "MDU6SXNzdWU2NzU1NDEyNzM=", "number": 1022, "title": "\"Task was destroyed but it is pending!\" error when middleware dispatch func discards response from call_next", "user": {"login": "itayperl", "id": 614418, "node_id": "MDQ6VXNlcjYxNDQxOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/614418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itayperl", "html_url": "https://github.com/itayperl", "followers_url": "https://api.github.com/users/itayperl/followers", "following_url": "https://api.github.com/users/itayperl/following{/other_user}", "gists_url": "https://api.github.com/users/itayperl/gists{/gist_id}", "starred_url": "https://api.github.com/users/itayperl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itayperl/subscriptions", "organizations_url": "https://api.github.com/users/itayperl/orgs", "repos_url": "https://api.github.com/users/itayperl/repos", "events_url": "https://api.github.com/users/itayperl/events{/privacy}", "received_events_url": "https://api.github.com/users/itayperl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 974729978, "node_id": "MDU6TGFiZWw5NzQ3Mjk5Nzg=", "url": "https://api.github.com/repos/encode/starlette/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-08-08T15:19:56Z", "updated_at": "2020-08-14T03:53:38Z", "closed_at": "2020-08-14T03:53:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here's a small test case based on FastAPI\r\n```python\r\nfrom fastapi import FastAPI, Request, Response\r\n\r\napp = FastAPI()\r\n\r\n@app.middleware('http')\r\nasync def foo(request: Request, call_next):\r\n    resp = await call_next(request)\r\n    if resp.status_code == 404:\r\n        return Response('Oh no!')\r\n    return resp\r\n\r\n@app.get('/meow')\r\ndef meow():\r\n    return 'Meow!'\r\n```\r\n\r\nCalling a nonexistent endpoint on this server will result in this error log at some point:\r\n```\r\nERROR:    Task was destroyed but it is pending!\r\ntask: <Task pending name='Task-4' coro=<BaseHTTPMiddleware.call_next.<locals>.coro() done, defined at /usr/lib/python3.8/site-packages/starlette/middleware/base.py:36> wait_for=<Future cancelled>>\r\n```\r\n\r\nThe problem is that the response returned from call_next is not used, and the coroutine started in BaseHTTPMiddleware.call_next keeps blocking on `queue.put` until the Task object is GC'd.\r\n\r\nThis seems to be a new issue in 0.13.7 as in previous versions the queue was not limited and didn't block.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/1015", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/1015/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/1015/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/1015/events", "html_url": "https://github.com/encode/starlette/issues/1015", "id": 667568999, "node_id": "MDU6SXNzdWU2Njc1Njg5OTk=", "number": 1015, "title": "AuthenticationMiddleware with custom user class", "user": {"login": "teamhide", "id": 8403122, "node_id": "MDQ6VXNlcjg0MDMxMjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8403122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teamhide", "html_url": "https://github.com/teamhide", "followers_url": "https://api.github.com/users/teamhide/followers", "following_url": "https://api.github.com/users/teamhide/following{/other_user}", "gists_url": "https://api.github.com/users/teamhide/gists{/gist_id}", "starred_url": "https://api.github.com/users/teamhide/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teamhide/subscriptions", "organizations_url": "https://api.github.com/users/teamhide/orgs", "repos_url": "https://api.github.com/users/teamhide/repos", "events_url": "https://api.github.com/users/teamhide/events{/privacy}", "received_events_url": "https://api.github.com/users/teamhide/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-29T05:50:20Z", "updated_at": "2020-08-12T13:30:28Z", "closed_at": "2020-08-12T13:30:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to return not `UnauthenticatedUser` but custom class that I defined.\r\n\r\nAccording to https://www.starlette.io/authentication/#custom-authentication-error-responses, we can use custom authentication middleware.\r\n\r\n```\r\nclass CurrentUser(BaseModel):\r\n    id: int = None\r\n    email: str = None\r\n\r\n\r\nclass BasicAuthBackend(AuthenticationBackend):\r\n    async def authenticate(self, request):\r\n        if \"Authorization\" not in request.headers:\r\n            return\r\n\r\n        auth = request.headers[\"Authorization\"]\r\n        try:\r\n            scheme, credentials = auth.split()\r\n            if scheme.lower() != 'basic':\r\n                return\r\n            decoded = base64.b64decode(credentials).decode(\"ascii\")\r\n        except (ValueError, UnicodeDecodeError, binascii.Error) as exc:\r\n            raise AuthenticationError('Invalid basic auth credentials')\r\n\r\n        username, _, password = decoded.partition(\":\")\r\n        # TODO: You'd want to verify the username and password here.\r\n        return AuthCredentials([\"authenticated\"]), CurrentUser(id=1, email='teamhide@hide.com')  ####### HERE. \r\n```\r\n\r\nAt the very last line, we can return custom user class.\r\n\r\nIn case of success, it doesn't matter.\r\n\r\nIn case of fail, starlette automatically return `UnauthenticatedUser` class.\r\n\r\nWhile more digging it, I found that `UnauthenticatedUser` is related about `AuthenticationMiddleware`.\r\n\r\n```\r\nclass AuthenticationMiddleware:\r\n    def __init__(\r\n        self,\r\n        app: ASGIApp,\r\n        backend: AuthenticationBackend,\r\n        on_error: typing.Callable[\r\n            [HTTPConnection, AuthenticationError], Response\r\n        ] = None,\r\n    ) -> None:\r\n        self.app = app\r\n        self.backend = backend\r\n        self.on_error = (\r\n            on_error if on_error is not None else self.default_on_error\r\n        )  # type: typing.Callable[[HTTPConnection, AuthenticationError], Response]\r\n\r\n    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\r\n        if scope[\"type\"] not in [\"http\", \"websocket\"]:\r\n            await self.app(scope, receive, send)\r\n            return\r\n\r\n        conn = HTTPConnection(scope)\r\n        try:\r\n            auth_result = await self.backend.authenticate(conn)\r\n        except AuthenticationError as exc:\r\n            response = self.on_error(conn, exc)\r\n            if scope[\"type\"] == \"websocket\":\r\n                await send({\"type\": \"websocket.close\", \"code\": 1000})\r\n            else:\r\n                await response(scope, receive, send)\r\n            return\r\n\r\n        if auth_result is None:\r\n            auth_result = AuthCredentials(), UnauthenticatedUser() ####################### HERE\r\n        scope[\"auth\"], scope[\"user\"] = auth_result\r\n        await self.app(scope, receive, send)\r\n```\r\n\r\nYou know that case of fail, `UnauthenticatedUser` is injected into scope[\"user\"].\r\n\r\nI know that overriding `AuthenticationMiddleware`'s `__call__` and registering it to middleware perfectly work.\r\n\r\nex)\r\n```\r\nclass CurrentUser(BaseModel):\r\n    id: int = None\r\n    email: str = None\r\n\r\n\r\nclass AuthenticationMiddleware:\r\n    def __init__(\r\n        self,\r\n        app: ASGIApp,\r\n        backend: AuthenticationBackend,\r\n        on_error: typing.Callable[\r\n            [HTTPConnection, AuthenticationError], Response\r\n        ] = None,\r\n    ) -> None:\r\n        self.app = app\r\n        self.backend = backend\r\n        self.on_error = (\r\n            on_error if on_error is not None else self.default_on_error\r\n        )  # type: typing.Callable[[HTTPConnection, AuthenticationError], Response]\r\n\r\n    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\r\n        if scope[\"type\"] not in [\"http\", \"websocket\"]:\r\n            await self.app(scope, receive, send)\r\n            return\r\n\r\n        conn = HTTPConnection(scope)\r\n        try:\r\n            auth_result = await self.backend.authenticate(conn)\r\n        except AuthenticationError as exc:\r\n            response = self.on_error(conn, exc)\r\n            if scope[\"type\"] == \"websocket\":\r\n                await send({\"type\": \"websocket.close\", \"code\": 1000})\r\n            else:\r\n                await response(scope, receive, send)\r\n            return\r\n\r\n        if auth_result is None:\r\n            auth_result = AuthCredentials(), CurrentUser() ####################### HERE\r\n        scope[\"auth\"], scope[\"user\"] = auth_result\r\n        await self.app(scope, receive, send)\r\n```\r\n\r\nBut I want to know if there's any efficient and simple way to do this\r\n\r\nPlease let me know if anyone knows", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/1008", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/1008/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/1008/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/1008/events", "html_url": "https://github.com/encode/starlette/issues/1008", "id": 664629026, "node_id": "MDU6SXNzdWU2NjQ2MjkwMjY=", "number": 1008, "title": "router.get(\"/?\") no longer works", "user": {"login": "curtiscook", "id": 7005517, "node_id": "MDQ6VXNlcjcwMDU1MTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7005517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/curtiscook", "html_url": "https://github.com/curtiscook", "followers_url": "https://api.github.com/users/curtiscook/followers", "following_url": "https://api.github.com/users/curtiscook/following{/other_user}", "gists_url": "https://api.github.com/users/curtiscook/gists{/gist_id}", "starred_url": "https://api.github.com/users/curtiscook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/curtiscook/subscriptions", "organizations_url": "https://api.github.com/users/curtiscook/orgs", "repos_url": "https://api.github.com/users/curtiscook/repos", "events_url": "https://api.github.com/users/curtiscook/events{/privacy}", "received_events_url": "https://api.github.com/users/curtiscook/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2020-07-23T16:55:59Z", "updated_at": "2020-07-31T08:16:56Z", "closed_at": "2020-07-28T08:46:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think this is related to https://github.com/encode/starlette/pull/932/files\r\n\r\nFormerly you could use router.get(\"/?\") to represent router.get(\"\") & router.get(\"/\"), but now it returns a 404 error as of the latest version\r\n\r\nI'm seeing this in FastApi (mentioned here https://github.com/tiangolo/fastapi/issues/1648 ) ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/1004", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/1004/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/1004/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/1004/events", "html_url": "https://github.com/encode/starlette/issues/1004", "id": 661471663, "node_id": "MDU6SXNzdWU2NjE0NzE2NjM=", "number": 1004, "title": "StaticFiles directory argument should take a PathLike instead of a str", "user": {"login": "kevinastone", "id": 1234915, "node_id": "MDQ6VXNlcjEyMzQ5MTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1234915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinastone", "html_url": "https://github.com/kevinastone", "followers_url": "https://api.github.com/users/kevinastone/followers", "following_url": "https://api.github.com/users/kevinastone/following{/other_user}", "gists_url": "https://api.github.com/users/kevinastone/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinastone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinastone/subscriptions", "organizations_url": "https://api.github.com/users/kevinastone/orgs", "repos_url": "https://api.github.com/users/kevinastone/repos", "events_url": "https://api.github.com/users/kevinastone/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinastone/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-20T07:18:13Z", "updated_at": "2020-08-05T23:04:08Z", "closed_at": "2020-08-05T23:04:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be preferable to allow the `StaticFiles` app to use an `os.PathLike` so you can also provide `pathlib.Path` instances.  I can work on a PR if there's agreement.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/1002", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/1002/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/1002/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/1002/events", "html_url": "https://github.com/encode/starlette/issues/1002", "id": 660861553, "node_id": "MDU6SXNzdWU2NjA4NjE1NTM=", "number": 1002, "title": "StaticFiles return 404", "user": {"login": "indeets-vasily", "id": 34257780, "node_id": "MDQ6VXNlcjM0MjU3Nzgw", "avatar_url": "https://avatars2.githubusercontent.com/u/34257780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/indeets-vasily", "html_url": "https://github.com/indeets-vasily", "followers_url": "https://api.github.com/users/indeets-vasily/followers", "following_url": "https://api.github.com/users/indeets-vasily/following{/other_user}", "gists_url": "https://api.github.com/users/indeets-vasily/gists{/gist_id}", "starred_url": "https://api.github.com/users/indeets-vasily/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/indeets-vasily/subscriptions", "organizations_url": "https://api.github.com/users/indeets-vasily/orgs", "repos_url": "https://api.github.com/users/indeets-vasily/repos", "events_url": "https://api.github.com/users/indeets-vasily/events{/privacy}", "received_events_url": "https://api.github.com/users/indeets-vasily/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-19T14:16:16Z", "updated_at": "2020-07-20T12:38:04Z", "closed_at": "2020-07-20T12:38:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nI use example from the docs:\r\n\r\n```\r\nfrom starlette.applications import Starlette\r\nfrom starlette.routing import Mount\r\nfrom starlette.staticfiles import StaticFiles\r\n\r\nroutes = [\r\n    Mount('/static', app=StaticFiles(directory='static', html=True), name=\"static\"),\r\n]\r\n\r\napp = Starlette(routes=routes)\r\n```\r\n\r\nThe code saved in .py file in a directory which has sub-directory named 'static'.\r\nThat sub-directory has file named 'index.html'.\r\nI run app using uvicorn.\r\n\r\nThe bug:\r\nWhen I access http://localhost:8000/static/index.html the response is 404 even though that file is present.\r\n\r\nI have tried:\r\n* Using absolute path for directory parameter.\r\n* Using html=True in StaticFiles constructor\r\n\r\nThe result is still the same.\r\n\r\nIs there something else that I should add to my app to make it work? The docs leave the impression that this is all I have to do.\r\n\r\nI have Windows OS.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/997", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/997/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/997/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/997/events", "html_url": "https://github.com/encode/starlette/issues/997", "id": 655572288, "node_id": "MDU6SXNzdWU2NTU1NzIyODg=", "number": 997, "title": "WSGI Middleware Error in non-ascii path", "user": {"login": "abersheeran", "id": 25364828, "node_id": "MDQ6VXNlcjI1MzY0ODI4", "avatar_url": "https://avatars3.githubusercontent.com/u/25364828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abersheeran", "html_url": "https://github.com/abersheeran", "followers_url": "https://api.github.com/users/abersheeran/followers", "following_url": "https://api.github.com/users/abersheeran/following{/other_user}", "gists_url": "https://api.github.com/users/abersheeran/gists{/gist_id}", "starred_url": "https://api.github.com/users/abersheeran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abersheeran/subscriptions", "organizations_url": "https://api.github.com/users/abersheeran/orgs", "repos_url": "https://api.github.com/users/abersheeran/repos", "events_url": "https://api.github.com/users/abersheeran/events{/privacy}", "received_events_url": "https://api.github.com/users/abersheeran/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-13T04:31:07Z", "updated_at": "2020-07-15T18:27:18Z", "closed_at": "2020-07-15T18:27:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "![image](https://user-images.githubusercontent.com/25364828/87270540-fdfc5380-c502-11ea-9c54-dff760a1a689.png)\r\nGet error: \r\n![image](https://user-images.githubusercontent.com/25364828/87270591-25532080-c503-11ea-914c-dad8796fa325.png)\r\n\r\n![image](https://user-images.githubusercontent.com/25364828/87270805-dce83280-c503-11ea-96af-ead9ed9bd6f3.png)\r\n\r\nI glanced at the code and the problem is here:\r\n\r\nhttps://github.com/encode/starlette/blob/ced8c350c459f22381ae00064e204b4620aa3d58/starlette/middleware/wsgi.py#L17\r\n\r\nMaybe need to use the following code instead\r\n\r\n```python\r\n\"PATH_INFO\": scope[\"path\"].encode(\"utf8\").decode(\"latin1\"), \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/995", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/995/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/995/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/995/events", "html_url": "https://github.com/encode/starlette/issues/995", "id": 653995137, "node_id": "MDU6SXNzdWU2NTM5OTUxMzc=", "number": 995, "title": "How to use url_for in tests", "user": {"login": "PeterJCLaw", "id": 336212, "node_id": "MDQ6VXNlcjMzNjIxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/336212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterJCLaw", "html_url": "https://github.com/PeterJCLaw", "followers_url": "https://api.github.com/users/PeterJCLaw/followers", "following_url": "https://api.github.com/users/PeterJCLaw/following{/other_user}", "gists_url": "https://api.github.com/users/PeterJCLaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterJCLaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterJCLaw/subscriptions", "organizations_url": "https://api.github.com/users/PeterJCLaw/orgs", "repos_url": "https://api.github.com/users/PeterJCLaw/repos", "events_url": "https://api.github.com/users/PeterJCLaw/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterJCLaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-09T11:43:19Z", "updated_at": "2020-07-10T08:26:24Z", "closed_at": "2020-07-10T08:26:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "From what I can see in the docs, the `url_for` method is only provided as part of an incoming `Request` object. This means that tests need to either create their own lookup mechanism or hard-code the urls they're working with.\r\n\r\nIt would be great if there was a way to use url reversing in tests in order to both support easier creation of placeholdered urls as well as avoiding needing to hard-code urls in tests.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/991", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/991/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/991/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/991/events", "html_url": "https://github.com/encode/starlette/issues/991", "id": 650882163, "node_id": "MDU6SXNzdWU2NTA4ODIxNjM=", "number": 991, "title": "[Feature] Reason for websocket.close", "user": {"login": "Chaostheorie", "id": 42151227, "node_id": "MDQ6VXNlcjQyMTUxMjI3", "avatar_url": "https://avatars3.githubusercontent.com/u/42151227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Chaostheorie", "html_url": "https://github.com/Chaostheorie", "followers_url": "https://api.github.com/users/Chaostheorie/followers", "following_url": "https://api.github.com/users/Chaostheorie/following{/other_user}", "gists_url": "https://api.github.com/users/Chaostheorie/gists{/gist_id}", "starred_url": "https://api.github.com/users/Chaostheorie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Chaostheorie/subscriptions", "organizations_url": "https://api.github.com/users/Chaostheorie/orgs", "repos_url": "https://api.github.com/users/Chaostheorie/repos", "events_url": "https://api.github.com/users/Chaostheorie/events{/privacy}", "received_events_url": "https://api.github.com/users/Chaostheorie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-04T12:21:18Z", "updated_at": "2020-07-06T11:51:54Z", "closed_at": "2020-07-06T11:51:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've recently started actively developing with websockets in starlette. When closing a websocket you can provide a code e.g. 1000, 1008 \u2026 to tell the client the basic reason. But the websocket protocol allows the developer to also give UTF-8-encoded data as a complementary description/ reason. This would be useful in multiple cases such as mentioning the specific violitioan for code 1008 (POLICY VIOLIATION). [Websockets](https://websockets.readthedocs.io/en/stable/api.html?highlight=reason#websockets.protocol.WebSocketCommonProtocol.close) supports this too and their [implementation](https://websockets.readthedocs.io/en/stable/_modules/websockets/protocol.html#WebSocketCommonProtocol.close) could maybe help.\r\n\r\nSpecification: [https://tools.ietf.org/](https://tools.ietf.org/html/rfc6455#section-5.5.1)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/981", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/981/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/981/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/981/events", "html_url": "https://github.com/encode/starlette/issues/981", "id": 644119176, "node_id": "MDU6SXNzdWU2NDQxMTkxNzY=", "number": 981, "title": "Arbitrary path traversal possible with StaticFiles", "user": {"login": "erinpentecost", "id": 7728019, "node_id": "MDQ6VXNlcjc3MjgwMTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/7728019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erinpentecost", "html_url": "https://github.com/erinpentecost", "followers_url": "https://api.github.com/users/erinpentecost/followers", "following_url": "https://api.github.com/users/erinpentecost/following{/other_user}", "gists_url": "https://api.github.com/users/erinpentecost/gists{/gist_id}", "starred_url": "https://api.github.com/users/erinpentecost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erinpentecost/subscriptions", "organizations_url": "https://api.github.com/users/erinpentecost/orgs", "repos_url": "https://api.github.com/users/erinpentecost/repos", "events_url": "https://api.github.com/users/erinpentecost/events{/privacy}", "received_events_url": "https://api.github.com/users/erinpentecost/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-23T20:21:13Z", "updated_at": "2020-07-16T14:18:30Z", "closed_at": "2020-07-16T14:18:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you pass in an absolute path by using an URL formatted like this: http://localhost:5000/staticmount/c%3a%5cwindows%5cwin.ini\r\n\r\nThen you can read any file on the host machine.\r\n\r\nThis is because of the following python behavior:\r\n\r\n```python\r\n>>> dir = \"c:\\workspace\\somepoject\\somepackag\\statics\"\r\n>>> path = \"c:\\windows\\win.ini\"\r\n>>> os.path.join(dir, path)\r\n'c:\\\\windows\\\\win.ini'\r\n```\r\n\r\nSo staticfiles.py needs to be updated by placing in a check for absolute paths inside lookup_path(...).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/974", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/974/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/974/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/974/events", "html_url": "https://github.com/encode/starlette/issues/974", "id": 638930040, "node_id": "MDU6SXNzdWU2Mzg5MzAwNDA=", "number": 974, "title": "TestClient on mac takes exactly 30s for every .get call", "user": {"login": "charlesbaynham", "id": 4397637, "node_id": "MDQ6VXNlcjQzOTc2Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4397637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charlesbaynham", "html_url": "https://github.com/charlesbaynham", "followers_url": "https://api.github.com/users/charlesbaynham/followers", "following_url": "https://api.github.com/users/charlesbaynham/following{/other_user}", "gists_url": "https://api.github.com/users/charlesbaynham/gists{/gist_id}", "starred_url": "https://api.github.com/users/charlesbaynham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charlesbaynham/subscriptions", "organizations_url": "https://api.github.com/users/charlesbaynham/orgs", "repos_url": "https://api.github.com/users/charlesbaynham/repos", "events_url": "https://api.github.com/users/charlesbaynham/events{/privacy}", "received_events_url": "https://api.github.com/users/charlesbaynham/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-15T15:09:44Z", "updated_at": "2020-06-22T19:08:12Z", "closed_at": "2020-06-17T18:50:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I previously opened this issue at FastAPI: https://github.com/tiangolo/fastapi/issues/1567, but traced the problem to Starlette. \r\n\r\nDetails\r\n=====\r\n\r\nOn Mac with new install of Starlette, every call to `TestClient.get()` takes exactly 30s to complete. The response, when it arrives, is correct. \r\n\r\n\r\n### Environment\r\n\r\n* OS: Macbook Pro 10.13.6\r\n* Starlette version: 0.13.4\r\n* Python version: 3.6\r\n\r\n### Example\r\n\r\nCopy and paste the example from the Starlette docs https://www.starlette.io/testclient/ into a brand new venv:\r\n\r\n``` python\r\nfrom starlette.responses import HTMLResponse\r\nfrom starlette.testclient import TestClient\r\n\r\n\r\nasync def app(scope, receive, send):\r\n    assert scope['type'] == 'http'\r\n    response = HTMLResponse('<html><body>Hello, world!</body></html>')\r\n    await response(scope, receive, send)\r\n\r\n\r\ndef test_app():\r\n    client = TestClient(app)\r\n    response = client.get('/')\r\n    assert response.status_code == 200\r\n```\r\n\r\nAlternatively, you can clone the repo at https://github.com/charlesbaynham/fastapi_mwe and use the requirements.txt to duplicate my environment. Running `python test_starlette.py` takes 30s. This repo also contains a cProfile of the test which looks like this:\r\n\r\n<img width=\"1009\" alt=\"image\" src=\"https://user-images.githubusercontent.com/4397637/84674073-67983a80-af22-11ea-881f-6b9a39f2bdab.png\">\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/973", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/973/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/973/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/973/events", "html_url": "https://github.com/encode/starlette/issues/973", "id": 638918882, "node_id": "MDU6SXNzdWU2Mzg5MTg4ODI=", "number": 973, "title": "Get and stop Background Task", "user": {"login": "mikkelam", "id": 4174131, "node_id": "MDQ6VXNlcjQxNzQxMzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4174131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikkelam", "html_url": "https://github.com/mikkelam", "followers_url": "https://api.github.com/users/mikkelam/followers", "following_url": "https://api.github.com/users/mikkelam/following{/other_user}", "gists_url": "https://api.github.com/users/mikkelam/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikkelam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikkelam/subscriptions", "organizations_url": "https://api.github.com/users/mikkelam/orgs", "repos_url": "https://api.github.com/users/mikkelam/repos", "events_url": "https://api.github.com/users/mikkelam/events{/privacy}", "received_events_url": "https://api.github.com/users/mikkelam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-15T14:54:47Z", "updated_at": "2020-06-19T16:31:45Z", "closed_at": "2020-06-19T16:31:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nIs there a way to get a background task and cancel it? I'm not able to figure it out by reading the documentation\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/972", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/972/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/972/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/972/events", "html_url": "https://github.com/encode/starlette/issues/972", "id": 638317253, "node_id": "MDU6SXNzdWU2MzgzMTcyNTM=", "number": 972, "title": "Consider using https://github.com/aio-libs/multidict?", "user": {"login": "abersheeran", "id": 25364828, "node_id": "MDQ6VXNlcjI1MzY0ODI4", "avatar_url": "https://avatars3.githubusercontent.com/u/25364828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abersheeran", "html_url": "https://github.com/abersheeran", "followers_url": "https://api.github.com/users/abersheeran/followers", "following_url": "https://api.github.com/users/abersheeran/following{/other_user}", "gists_url": "https://api.github.com/users/abersheeran/gists{/gist_id}", "starred_url": "https://api.github.com/users/abersheeran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abersheeran/subscriptions", "organizations_url": "https://api.github.com/users/abersheeran/orgs", "repos_url": "https://api.github.com/users/abersheeran/repos", "events_url": "https://api.github.com/users/abersheeran/events{/privacy}", "received_events_url": "https://api.github.com/users/abersheeran/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-14T09:32:26Z", "updated_at": "2020-06-15T08:51:44Z", "closed_at": "2020-06-15T08:49:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider optional use of https://github.com/aio-libs/multidict, just like `python-multipart`.\r\n\r\n@tomchristie What do you think? If you are interested, I think I can implement it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/971", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/971/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/971/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/971/events", "html_url": "https://github.com/encode/starlette/issues/971", "id": 638296214, "node_id": "MDU6SXNzdWU2MzgyOTYyMTQ=", "number": 971, "title": "Consider removing the Middleware class?", "user": {"login": "retnikt", "id": 24581770, "node_id": "MDQ6VXNlcjI0NTgxNzcw", "avatar_url": "https://avatars1.githubusercontent.com/u/24581770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retnikt", "html_url": "https://github.com/retnikt", "followers_url": "https://api.github.com/users/retnikt/followers", "following_url": "https://api.github.com/users/retnikt/following{/other_user}", "gists_url": "https://api.github.com/users/retnikt/gists{/gist_id}", "starred_url": "https://api.github.com/users/retnikt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retnikt/subscriptions", "organizations_url": "https://api.github.com/users/retnikt/orgs", "repos_url": "https://api.github.com/users/retnikt/repos", "events_url": "https://api.github.com/users/retnikt/events{/privacy}", "received_events_url": "https://api.github.com/users/retnikt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-14T06:47:16Z", "updated_at": "2020-08-12T14:13:08Z", "closed_at": "2020-08-12T14:13:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Sorry if this is unwelcome, but I think the `Middleware` class (in `starlette/middleware/__init__`, not `BaseMiddleware`) seems pretty pointless. It is nothing more than a re-invented `namedtuple` storing a `cls`, which could just be any callable, and `options`. Could it be removed, and adding middleware simplified down to closures or other callables instead of several layers of classes?\r\nThis [talk](https://www.youtube.com/watch?v=o9pEzgHorH0&t=180) shows how these abstractions add unnecessary complexity, and Starlette's middleware system seems a pretty good example of \"a class with two methods, one of which is `__init__`\".\r\n\r\nCould this:\r\n```python\r\nclass MyMiddleware:\r\n    def __init__(self, app, foo_option):\r\n        self.app = app\r\n        self.foo_option = foo_option\r\n    async def __call__(self, scope, receive, send):\r\n        # do something with scope_receive, send\r\n        await self.app(scope, receive, send)\r\napp = Starlette(\r\n    middleware=[Middleware(MyMiddleware, foo_option=\"spam\")]\r\n)\r\n```\r\nbe boiled down to:\r\n```python\r\nasync def my_middleware(app):\r\n    async def process(scope, receive, send):\r\n        # do something with scope, receive, send\r\n        await app(scope, receive, send)\r\napp = Starlette(middleware=[my_middleware])\r\n```\r\nor, where options need to be passed at runtime (most of the time they don't, and can be read from the application's config)\r\n```python\r\ndef my_middleware(foo_option):\r\n    async def inner(app):\r\n        async def process(scope, receive, send):\r\n            # do something with scope, receive, send\r\napp = Starlette(middleware=[my_middleware(foo_option=\"spam\")]))\r\n```\r\n\r\nAlso, I think the whole system of building the middleware stack could be removed, since `add_middleware`, `add_exception_handler`, and the `middleware` decorator are already discouraged:\r\n> ```python\r\n> # The following usages are now discouraged in favour of configuration.\r\n> # \u00a0during Starlette.__init__(...)\r\n> ```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/969", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/969/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/969/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/969/events", "html_url": "https://github.com/encode/starlette/issues/969", "id": 637694838, "node_id": "MDU6SXNzdWU2Mzc2OTQ4Mzg=", "number": 969, "title": "Is it okay to use sqlalchemy in async mode without using databases?", "user": {"login": "balukrishnans", "id": 34550740, "node_id": "MDQ6VXNlcjM0NTUwNzQw", "avatar_url": "https://avatars1.githubusercontent.com/u/34550740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/balukrishnans", "html_url": "https://github.com/balukrishnans", "followers_url": "https://api.github.com/users/balukrishnans/followers", "following_url": "https://api.github.com/users/balukrishnans/following{/other_user}", "gists_url": "https://api.github.com/users/balukrishnans/gists{/gist_id}", "starred_url": "https://api.github.com/users/balukrishnans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/balukrishnans/subscriptions", "organizations_url": "https://api.github.com/users/balukrishnans/orgs", "repos_url": "https://api.github.com/users/balukrishnans/repos", "events_url": "https://api.github.com/users/balukrishnans/events{/privacy}", "received_events_url": "https://api.github.com/users/balukrishnans/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-12T11:48:34Z", "updated_at": "2020-06-17T04:59:34Z", "closed_at": "2020-06-17T04:59:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hai friends,\r\nIs it okay to use sqlalchemy in the async mode without using databases?\r\n(need async level operation)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/968", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/968/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/968/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/968/events", "html_url": "https://github.com/encode/starlette/issues/968", "id": 637656609, "node_id": "MDU6SXNzdWU2Mzc2NTY2MDk=", "number": 968, "title": "on_startup async functions are not awaited", "user": {"login": "librehat", "id": 1279432, "node_id": "MDQ6VXNlcjEyNzk0MzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1279432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/librehat", "html_url": "https://github.com/librehat", "followers_url": "https://api.github.com/users/librehat/followers", "following_url": "https://api.github.com/users/librehat/following{/other_user}", "gists_url": "https://api.github.com/users/librehat/gists{/gist_id}", "starred_url": "https://api.github.com/users/librehat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/librehat/subscriptions", "organizations_url": "https://api.github.com/users/librehat/orgs", "repos_url": "https://api.github.com/users/librehat/repos", "events_url": "https://api.github.com/users/librehat/events{/privacy}", "received_events_url": "https://api.github.com/users/librehat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-12T10:35:13Z", "updated_at": "2020-06-12T16:32:34Z", "closed_at": "2020-06-12T16:32:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I may misunderstand how the `Mount` works. But this is a short snippet:\r\n\r\n```python\r\napp = Starlette(\r\n    routes=[\r\n        Mount(\r\n            '/graphql',\r\n            GraphQL(schema.schema, debug=DEBUG_MODE))\r\n        ),\r\n    ],\r\n    on_startup([database.connect]),\r\n    on_shutdown([database.disconnect]),\r\n)\r\n```\r\n\r\nHowever, in the ariadne graphql resolver when i tried to use `database` i got errors complaining `Database Backend is not running` (if i do another `await database.connect()` there then it works, so this suggests that the `database.connect()` was not awaited on starlette startup?\r\n\r\nThe `database` here is also from encode: https://www.encode.io/databases/ \r\n\r\nThe application is started by `uvicorn main:app`\r\n\r\nEdit: Now I tried this:\r\n\r\n```python\r\nasync def test_connect():\r\n    raise Exception(\"Hello\")\r\n\r\n\r\napp = Starlette(\r\n    routes=[\r\n        Mount(\r\n            '/graphql',\r\n            GraphQL(schema.schema, debug=DEBUG_MODE))\r\n        ),\r\n    ],\r\n    on_startup([test_connect]),\r\n    on_shutdown([database.disconnect]),\r\n)\r\n```\r\n\r\nStarting the application and I don't see the exception raised. The application is also running just fine (shouldn't it be stopped?)\r\n\r\nVersion: starlette 0.13.4", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/965", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/965/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/965/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/965/events", "html_url": "https://github.com/encode/starlette/issues/965", "id": 636361618, "node_id": "MDU6SXNzdWU2MzYzNjE2MTg=", "number": 965, "title": "[Question] starlette websocket behavior", "user": {"login": "Chaostheorie", "id": 42151227, "node_id": "MDQ6VXNlcjQyMTUxMjI3", "avatar_url": "https://avatars3.githubusercontent.com/u/42151227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Chaostheorie", "html_url": "https://github.com/Chaostheorie", "followers_url": "https://api.github.com/users/Chaostheorie/followers", "following_url": "https://api.github.com/users/Chaostheorie/following{/other_user}", "gists_url": "https://api.github.com/users/Chaostheorie/gists{/gist_id}", "starred_url": "https://api.github.com/users/Chaostheorie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Chaostheorie/subscriptions", "organizations_url": "https://api.github.com/users/Chaostheorie/orgs", "repos_url": "https://api.github.com/users/Chaostheorie/repos", "events_url": "https://api.github.com/users/Chaostheorie/events{/privacy}", "received_events_url": "https://api.github.com/users/Chaostheorie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-10T15:50:47Z", "updated_at": "2020-08-12T14:39:52Z", "closed_at": "2020-08-12T14:39:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Recently I've started developing an application (game backend server) with starlette and I'm considering using websockets for bidirectional communication. This server has (best case) a running websocket with each player and the websockets are grouped via rooms. This means though that a websocket may be open for around 20-45 minutes. Are starlette websockets able to free the corresponding thread/ worker if an request from the player is awaited?\r\n\r\nThanks in advance,\r\nCobalt", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/962", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/962/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/962/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/962/events", "html_url": "https://github.com/encode/starlette/issues/962", "id": 633355618, "node_id": "MDU6SXNzdWU2MzMzNTU2MTg=", "number": 962, "title": "[Feature Request] Routing with decorators", "user": {"login": "Chaostheorie", "id": 42151227, "node_id": "MDQ6VXNlcjQyMTUxMjI3", "avatar_url": "https://avatars3.githubusercontent.com/u/42151227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Chaostheorie", "html_url": "https://github.com/Chaostheorie", "followers_url": "https://api.github.com/users/Chaostheorie/followers", "following_url": "https://api.github.com/users/Chaostheorie/following{/other_user}", "gists_url": "https://api.github.com/users/Chaostheorie/gists{/gist_id}", "starred_url": "https://api.github.com/users/Chaostheorie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Chaostheorie/subscriptions", "organizations_url": "https://api.github.com/users/Chaostheorie/orgs", "repos_url": "https://api.github.com/users/Chaostheorie/repos", "events_url": "https://api.github.com/users/Chaostheorie/events{/privacy}", "received_events_url": "https://api.github.com/users/Chaostheorie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-07T12:09:25Z", "updated_at": "2020-06-08T13:31:20Z", "closed_at": "2020-06-07T22:25:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have recently started developing an application with starlette. But after working with Flask I kinda missed the routing with decorators. I wondered if it would be possible to create a decorator similar to Flask for routes. Starlette allows to add routes with `Starlette.add_route`. If you combine this with the parameters given in Flask's implementation (args: url, kwargs: method(s)) it shouldn't be impossible. Is there a reason against such a implementation of routing? And if not could this be implemented to make routing easier, please.\r\n\r\nRegards,\r\nCobalt\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/961", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/961/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/961/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/961/events", "html_url": "https://github.com/encode/starlette/issues/961", "id": 631736497, "node_id": "MDU6SXNzdWU2MzE3MzY0OTc=", "number": 961, "title": "Converge {starlette,httpx}.{Request,Response}", "user": {"login": "julien-c", "id": 326577, "node_id": "MDQ6VXNlcjMyNjU3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/326577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/julien-c", "html_url": "https://github.com/julien-c", "followers_url": "https://api.github.com/users/julien-c/followers", "following_url": "https://api.github.com/users/julien-c/following{/other_user}", "gists_url": "https://api.github.com/users/julien-c/gists{/gist_id}", "starred_url": "https://api.github.com/users/julien-c/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/julien-c/subscriptions", "organizations_url": "https://api.github.com/users/julien-c/orgs", "repos_url": "https://api.github.com/users/julien-c/repos", "events_url": "https://api.github.com/users/julien-c/events{/privacy}", "received_events_url": "https://api.github.com/users/julien-c/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-05T16:33:53Z", "updated_at": "2020-06-08T13:13:05Z", "closed_at": "2020-06-08T13:13:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is not really an issue but more of a question/observation.\r\n\r\nI'm using both starlette and [httpx](https://github.com/encode/httpx) to implement a reverse proxy.\r\n\r\nThe classes being subtly different, piping a Starlette request into an httpx request, then piping a httpx response into a Starlette response is doable, but a little tedious:\r\n\r\n```python\r\nasync def proxy_model_forward(request: starlette.requests.Request):\r\n    # ...\r\n    # do some stuff depending on conditions\r\n\r\n    body = await request.body()\r\n    r: httpx.Response = await CLIENT.post(\r\n        endpoint, data=body, headers=request.headers.raw\r\n    )\r\n    headers = dict(r.headers.items())\r\n    return Response(content=r.content, status_code=r.status_code, headers=headers)\r\n\r\n```\r\n\r\nWas any thought given to make classes' APIs a little closer, for instance for header formats?\r\n\r\nThanks for reading.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/960", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/960/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/960/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/960/events", "html_url": "https://github.com/encode/starlette/issues/960", "id": 631337724, "node_id": "MDU6SXNzdWU2MzEzMzc3MjQ=", "number": 960, "title": "Help with 415 Unsupported media type on Graphql Query", "user": {"login": "licht1stein", "id": 35418634, "node_id": "MDQ6VXNlcjM1NDE4NjM0", "avatar_url": "https://avatars2.githubusercontent.com/u/35418634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/licht1stein", "html_url": "https://github.com/licht1stein", "followers_url": "https://api.github.com/users/licht1stein/followers", "following_url": "https://api.github.com/users/licht1stein/following{/other_user}", "gists_url": "https://api.github.com/users/licht1stein/gists{/gist_id}", "starred_url": "https://api.github.com/users/licht1stein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/licht1stein/subscriptions", "organizations_url": "https://api.github.com/users/licht1stein/orgs", "repos_url": "https://api.github.com/users/licht1stein/repos", "events_url": "https://api.github.com/users/licht1stein/events{/privacy}", "received_events_url": "https://api.github.com/users/licht1stein/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-05T06:08:28Z", "updated_at": "2020-06-05T07:06:04Z", "closed_at": "2020-06-05T07:06:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is a starlette based graphql server running on the server side. On the client side is a Next.js app with [apollo-client](https://www.apollographql.com/docs/react/).\r\n\r\nWe use a `useQuery` hook that must pass OAuth login data to the graphql server, where it is processed and a JWT token will be returned if everything is ok.\r\n\r\n**Problem: Getting a HTTP 415 Unsupported media type on every request to login query**\r\n\r\nServer-side code:\r\n```python\r\nlogin_data = graphene.String(\r\n    id=graphene.Int(),\r\n    first_name=String(required=True, name=\"first_name\"),\r\n    last_name=String(required=False, name=\"last_name\"),\r\n    auth_date=Int(required=True, name=\"auth_date\"),\r\n    hash=String(required=True),\r\n    photo_url=String(required=True, name=\"photo_url\"),\r\n    username=String(required=False),\r\n)\r\n\r\nclass Query(graphene.ObjectType):\r\n    login = login_data\r\n    hello = graphene.String()\r\n\r\n    def resolve_login(parent, info, **kwargs):\r\n        res = generate_token(kwargs) # Authentication logic which is tested to work\r\n        return res\r\n\r\n    def resolve_hello(parent, info, **kwargs):\r\n        return 'Hello'\r\n```\r\n\r\nClient-side code:\r\n```javascript\r\nconst HELLO = gql`{hello}`\r\n\r\nconst LOGIN = gql`\r\n    query Login ($id: Int!, $last_name: String, $first_name: String!, $hash: String!, $auth_date: Int!, $username: String, $photo_url: String) {\r\n        login(\r\n            id: $id\r\n            last_name: $last_name,\r\n            first_name: $first_name,\r\n            hash: $hash,\r\n            auth_date: $auth_date,\r\n            username: $username,\r\n            photo_url: $photo_url\r\n        ) {\r\n          token\r\n        }\r\n    }\r\n`\r\n\r\n\r\nexport default function login() {\r\n  const [loginData, setLoginData] = useState({});\r\n  const {loading, error, data} = useQuery(LOGIN, {skip: Object.keys(loginData).length === 0, variables: loginData});\r\n\r\n```\r\n\r\nThe `useQuery` logic is working fine -- requests are only made after I receive login data. Request details below.\r\n\r\nPayload:\r\n```json\r\n{\r\n  \"operationName\": \"Login\",\r\n  \"variables\": {\r\n    \"id\": 111111,\r\n    \"first_name\": \"firstName\",\r\n    \"last_name\": \"lastName\",\r\n    \"username\": \"username\",\r\n    \"photo_url\": \"https://example.com/photo.jpg\",\r\n    \"auth_date\": 1591287901,\r\n    \"hash\": \"b8444...fc8\"\r\n  },\r\n  \"query\": \"query Login($id: Int!, $last_name: String, $first_name: String!, $hash: String!, $auth_date: Int!, $username: String, $photo_url: String) {\\n  login(id: $id, last_name: $last_name, first_name: $first_name, hash: $hash, auth_date: $auth_date, username: $username, photo_url: $photo_url) {\\n    token\\n    __typename\\n  }\\n}\\n\"\r\n}\r\n```\r\n\r\nHeaders:\r\n```\r\nHost: 127.0.0.1:8000\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko/20100101 Firefox/76.0\r\nAccept: */*\r\nAccept-Language: en-US,ru-RU;q=0.8,ru;q=0.5,en;q=0.3\r\nAccept-Encoding: gzip, deflate\r\nContent-Type: text/plain;charset=UTF-8\r\nOrigin: null\r\nContent-Length: 644\r\nDNT: 1\r\nConnection: keep-alive\r\n```\r\n\r\nAt the same time the simple query `HELLO` (defined in code above) resolves fine. What am I doing wrong?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/957", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/957/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/957/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/957/events", "html_url": "https://github.com/encode/starlette/issues/957", "id": 626991490, "node_id": "MDU6SXNzdWU2MjY5OTE0OTA=", "number": 957, "title": "Unable to access info.context['background']", "user": {"login": "austincollinpena", "id": 43731610, "node_id": "MDQ6VXNlcjQzNzMxNjEw", "avatar_url": "https://avatars3.githubusercontent.com/u/43731610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/austincollinpena", "html_url": "https://github.com/austincollinpena", "followers_url": "https://api.github.com/users/austincollinpena/followers", "following_url": "https://api.github.com/users/austincollinpena/following{/other_user}", "gists_url": "https://api.github.com/users/austincollinpena/gists{/gist_id}", "starred_url": "https://api.github.com/users/austincollinpena/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/austincollinpena/subscriptions", "organizations_url": "https://api.github.com/users/austincollinpena/orgs", "repos_url": "https://api.github.com/users/austincollinpena/repos", "events_url": "https://api.github.com/users/austincollinpena/events{/privacy}", "received_events_url": "https://api.github.com/users/austincollinpena/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-29T04:36:02Z", "updated_at": "2020-06-02T16:42:24Z", "closed_at": "2020-06-02T16:42:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm hoping to avoid any use of Celery at the moment. In the docs there are two ways to add background tasks:\r\n\r\nVia Graphene: https://www.starlette.io/graphql/\r\n\r\n\r\n```python\r\nclass Query(graphene.ObjectType):\r\n    user_agent = graphene.String()\r\n\r\n    def resolve_user_agent(self, info):\r\n        \"\"\"\r\n        Return the User-Agent of the incoming request.\r\n        \"\"\"\r\n        user_agent = request.headers.get(\"User-Agent\", \"<unknown>\")\r\n        background = info.context[\"background\"]\r\n        background.add_task(log_user_agent, user_agent=user_agent)\r\n        return user_agent\r\n```\r\n\r\n\r\nVia a JSON response: https://www.starlette.io/background/\r\n```python\r\nasync def signup(request):\r\n    data = await request.json()\r\n    username = data['username']\r\n    email = data['email']\r\n    task = BackgroundTask(send_welcome_email, to_address=email)\r\n    message = {'status': 'Signup successful'}\r\n    return JSONResponse(message, background=task)\r\n```\r\n\r\n\r\nDoes anyone know of a way to add tasks to Starlette's background with Ariadne? I am unable to return a JSONResponse in my resolver, and I do not have access to a info.context[\"background\"]. The only thing I have attached to my context is my request object.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/955", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/955/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/955/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/955/events", "html_url": "https://github.com/encode/starlette/issues/955", "id": 625428362, "node_id": "MDU6SXNzdWU2MjU0MjgzNjI=", "number": 955, "title": "Config class cannot work with reused variables (${VAR_NAME})", "user": {"login": "rappongy", "id": 4213989, "node_id": "MDQ6VXNlcjQyMTM5ODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4213989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rappongy", "html_url": "https://github.com/rappongy", "followers_url": "https://api.github.com/users/rappongy/followers", "following_url": "https://api.github.com/users/rappongy/following{/other_user}", "gists_url": "https://api.github.com/users/rappongy/gists{/gist_id}", "starred_url": "https://api.github.com/users/rappongy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rappongy/subscriptions", "organizations_url": "https://api.github.com/users/rappongy/orgs", "repos_url": "https://api.github.com/users/rappongy/repos", "events_url": "https://api.github.com/users/rappongy/events{/privacy}", "received_events_url": "https://api.github.com/users/rappongy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-27T06:50:49Z", "updated_at": "2020-05-28T04:54:57Z", "closed_at": "2020-05-27T08:59:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Facing issue with env file where variables are reused with syntax `${VAR_NAME}`.\r\n\r\n### .env\r\n```\r\nROOT_HOST=0.0.0.0\r\n\r\nMONGO_HOST=${ROOT_HOST}\r\nMONGO_PORT=27017\r\n\r\nMONGO_URL=${MONGO_HOST}:${MONGO_PORT}\r\n```\r\n### config.py\r\n```\r\nfrom starlette.config import Config\r\n\r\nconfig = Config('.env')\r\n\r\nMONGO_HOST = config('MONGO_HOST', cast=str)\r\n```\r\n\r\n`MONGO_HOST` should be \"0.0.0.0\" but not \"${ROOT_HOST}\" literally.\r\n\r\n## My context\r\nPython 3.6\r\nStarlette 0.13.2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/952", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/952/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/952/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/952/events", "html_url": "https://github.com/encode/starlette/issues/952", "id": 624859938, "node_id": "MDU6SXNzdWU2MjQ4NTk5Mzg=", "number": 952, "title": "Test client support for graphql subcriptions", "user": {"login": "JanoschDeurer", "id": 10299326, "node_id": "MDQ6VXNlcjEwMjk5MzI2", "avatar_url": "https://avatars0.githubusercontent.com/u/10299326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JanoschDeurer", "html_url": "https://github.com/JanoschDeurer", "followers_url": "https://api.github.com/users/JanoschDeurer/followers", "following_url": "https://api.github.com/users/JanoschDeurer/following{/other_user}", "gists_url": "https://api.github.com/users/JanoschDeurer/gists{/gist_id}", "starred_url": "https://api.github.com/users/JanoschDeurer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JanoschDeurer/subscriptions", "organizations_url": "https://api.github.com/users/JanoschDeurer/orgs", "repos_url": "https://api.github.com/users/JanoschDeurer/repos", "events_url": "https://api.github.com/users/JanoschDeurer/events{/privacy}", "received_events_url": "https://api.github.com/users/JanoschDeurer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-26T12:52:43Z", "updated_at": "2020-06-08T12:57:06Z", "closed_at": "2020-06-08T12:57:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Maybe this is just missing in the documentation but I can not figure out how to use the test client for graphql subscriptions. The documentation of the websocket support of the test client (https://www.starlette.io/testclient/) is stating that it\r\n>  Takes the same set of arguments as requests.get().\r\n\r\nHowever in graphql I have to send post requests with payload. Is there a way to do this with the current test client and thereby use it for graphql subscriptions?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/951", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/951/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/951/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/951/events", "html_url": "https://github.com/encode/starlette/issues/951", "id": 623953750, "node_id": "MDU6SXNzdWU2MjM5NTM3NTA=", "number": 951, "title": "UI Progress Bar", "user": {"login": "devsetgo", "id": 16019894, "node_id": "MDQ6VXNlcjE2MDE5ODk0", "avatar_url": "https://avatars3.githubusercontent.com/u/16019894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devsetgo", "html_url": "https://github.com/devsetgo", "followers_url": "https://api.github.com/users/devsetgo/followers", "following_url": "https://api.github.com/users/devsetgo/following{/other_user}", "gists_url": "https://api.github.com/users/devsetgo/gists{/gist_id}", "starred_url": "https://api.github.com/users/devsetgo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devsetgo/subscriptions", "organizations_url": "https://api.github.com/users/devsetgo/orgs", "repos_url": "https://api.github.com/users/devsetgo/repos", "events_url": "https://api.github.com/users/devsetgo/events{/privacy}", "received_events_url": "https://api.github.com/users/devsetgo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-24T21:54:26Z", "updated_at": "2020-05-25T08:11:30Z", "closed_at": "2020-05-25T08:11:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been looking around and so far have not found a solution to add a progress bar to an application I am building.\r\n\r\nI have a simple form that allows a user to input a long list of \"lookups\". I then loop over each request (using httpx) and then provide a final list of values back. This usually takes less than a few seconds, but could also be longer. So I would like to add a simple progress bar on the UI to let the user know it is still running.\r\n\r\nDoes someone have a tip or solution on how they think I could add a progress bar to the UI?\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/946", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/946/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/946/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/946/events", "html_url": "https://github.com/encode/starlette/issues/946", "id": 617902620, "node_id": "MDU6SXNzdWU2MTc5MDI2MjA=", "number": 946, "title": "Consider removing `request.user` from HTTPConnection?", "user": {"login": "abersheeran", "id": 25364828, "node_id": "MDQ6VXNlcjI1MzY0ODI4", "avatar_url": "https://avatars3.githubusercontent.com/u/25364828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abersheeran", "html_url": "https://github.com/abersheeran", "followers_url": "https://api.github.com/users/abersheeran/followers", "following_url": "https://api.github.com/users/abersheeran/following{/other_user}", "gists_url": "https://api.github.com/users/abersheeran/gists{/gist_id}", "starred_url": "https://api.github.com/users/abersheeran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abersheeran/subscriptions", "organizations_url": "https://api.github.com/users/abersheeran/orgs", "repos_url": "https://api.github.com/users/abersheeran/repos", "events_url": "https://api.github.com/users/abersheeran/events{/privacy}", "received_events_url": "https://api.github.com/users/abersheeran/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-14T03:49:01Z", "updated_at": "2020-05-14T07:10:04Z", "closed_at": "2020-05-14T07:10:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "#901 #875 \r\n\r\nPerhaps extension of Request should be allowed instead of built-in `request.user` and the like.\r\nMost of the time, users need their own authentication framework rather than using starlette, which will confuse the type hint. And, they are not used frequently, but there are many issues related to them. Deleting them may allow everyone to focus on the core functions.\r\n\r\n@tomchristie What do you think?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/943", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/943/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/943/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/943/events", "html_url": "https://github.com/encode/starlette/issues/943", "id": 616843425, "node_id": "MDU6SXNzdWU2MTY4NDM0MjU=", "number": 943, "title": "is it possible to limit number of backgroundTask executes concurrently ?", "user": {"login": "icefluo", "id": 51469420, "node_id": "MDQ6VXNlcjUxNDY5NDIw", "avatar_url": "https://avatars3.githubusercontent.com/u/51469420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/icefluo", "html_url": "https://github.com/icefluo", "followers_url": "https://api.github.com/users/icefluo/followers", "following_url": "https://api.github.com/users/icefluo/following{/other_user}", "gists_url": "https://api.github.com/users/icefluo/gists{/gist_id}", "starred_url": "https://api.github.com/users/icefluo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/icefluo/subscriptions", "organizations_url": "https://api.github.com/users/icefluo/orgs", "repos_url": "https://api.github.com/users/icefluo/repos", "events_url": "https://api.github.com/users/icefluo/events{/privacy}", "received_events_url": "https://api.github.com/users/icefluo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-12T17:48:54Z", "updated_at": "2020-05-13T10:22:56Z", "closed_at": "2020-05-13T10:22:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to add more tasks to backgoundtask queue and limit concurrent execution ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/941", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/941/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/941/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/941/events", "html_url": "https://github.com/encode/starlette/issues/941", "id": 616296418, "node_id": "MDU6SXNzdWU2MTYyOTY0MTg=", "number": 941, "title": "RedirectResponse does not accept background argument", "user": {"login": "bartek", "id": 5839, "node_id": "MDQ6VXNlcjU4Mzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/5839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bartek", "html_url": "https://github.com/bartek", "followers_url": "https://api.github.com/users/bartek/followers", "following_url": "https://api.github.com/users/bartek/following{/other_user}", "gists_url": "https://api.github.com/users/bartek/gists{/gist_id}", "starred_url": "https://api.github.com/users/bartek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bartek/subscriptions", "organizations_url": "https://api.github.com/users/bartek/orgs", "repos_url": "https://api.github.com/users/bartek/repos", "events_url": "https://api.github.com/users/bartek/events{/privacy}", "received_events_url": "https://api.github.com/users/bartek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-12T01:44:23Z", "updated_at": "2020-06-26T13:31:51Z", "closed_at": "2020-05-15T07:42:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The [RedirectResponse](https://github.com/encode/starlette/blob/e57fa2a6b1b19dd118c26a21b2f5bd4dbe46c64a/starlette/responses.py#L174) class does not accept the `background` parameter.\r\n\r\nMy use case is I am submitting a form and then doing an `HTTP 303 See Other` ([ref](https://httpstatuses.com/303)), redirecting the user to a page specific to the output of the form. That page allows the user to download the processed data, once the background task completes it.\r\n\r\n\ud83e\udd14 Perhaps this is intentional?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/939", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/939/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/939/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/939/events", "html_url": "https://github.com/encode/starlette/issues/939", "id": 615175221, "node_id": "MDU6SXNzdWU2MTUxNzUyMjE=", "number": 939, "title": "Trigger lifespan shutdown once startup fails", "user": {"login": "krzada", "id": 32573374, "node_id": "MDQ6VXNlcjMyNTczMzc0", "avatar_url": "https://avatars2.githubusercontent.com/u/32573374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krzada", "html_url": "https://github.com/krzada", "followers_url": "https://api.github.com/users/krzada/followers", "following_url": "https://api.github.com/users/krzada/following{/other_user}", "gists_url": "https://api.github.com/users/krzada/gists{/gist_id}", "starred_url": "https://api.github.com/users/krzada/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krzada/subscriptions", "organizations_url": "https://api.github.com/users/krzada/orgs", "repos_url": "https://api.github.com/users/krzada/repos", "events_url": "https://api.github.com/users/krzada/events{/privacy}", "received_events_url": "https://api.github.com/users/krzada/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-09T13:20:29Z", "updated_at": "2020-05-11T13:22:12Z", "closed_at": "2020-05-11T13:22:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, when startup tasks are raising some exceptions, there is only \"lifespan.startup.failed\" message being sent to ASGI to prevent from further processing:\r\n```\r\n        except BaseException:\r\n            if first:\r\n                exc_text = traceback.format_exc()\r\n                await send({\"type\": \"lifespan.startup.failed\", \"message\": exc_text})\r\n            raise\r\n```\r\n\r\nIsn't better to await there shutdown to clear everything up like database connections (disconencting defined within shutdown) for instance?\r\n```\r\n        except BaseException:\r\n            if first:\r\n                exc_text = traceback.format_exc()\r\n                await send({\"type\": \"lifespan.startup.failed\", \"message\": exc_text})\r\n                await self.shutdown() # <----------------\r\n            raise\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/937", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/937/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/937/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/937/events", "html_url": "https://github.com/encode/starlette/issues/937", "id": 615070276, "node_id": "MDU6SXNzdWU2MTUwNzAyNzY=", "number": 937, "title": "get staticfile failed. ", "user": {"login": "mulanyt", "id": 33388227, "node_id": "MDQ6VXNlcjMzMzg4MjI3", "avatar_url": "https://avatars1.githubusercontent.com/u/33388227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mulanyt", "html_url": "https://github.com/mulanyt", "followers_url": "https://api.github.com/users/mulanyt/followers", "following_url": "https://api.github.com/users/mulanyt/following{/other_user}", "gists_url": "https://api.github.com/users/mulanyt/gists{/gist_id}", "starred_url": "https://api.github.com/users/mulanyt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mulanyt/subscriptions", "organizations_url": "https://api.github.com/users/mulanyt/orgs", "repos_url": "https://api.github.com/users/mulanyt/repos", "events_url": "https://api.github.com/users/mulanyt/events{/privacy}", "received_events_url": "https://api.github.com/users/mulanyt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-09T02:19:27Z", "updated_at": "2020-05-11T12:37:57Z", "closed_at": "2020-05-11T12:37:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Following the docs, it seems all right. But if the endpoint that looks like \"/blog/x\", it will gets a 404 error(GET /blog/static/js/jquery.min.js HTTP/1.1 404). i check the file is in /static/js.\r\nThe structure of files as follow:\r\nstatic\r\n----img\r\n--------xx.jpg\r\n----css\r\n--------xx.css\r\n----js\r\n--------jquery.min.js\r\ntemplates\r\n----index.html\r\n----blog.html\r\napp.py\r\n        ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/936", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/936/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/936/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/936/events", "html_url": "https://github.com/encode/starlette/issues/936", "id": 613926273, "node_id": "MDU6SXNzdWU2MTM5MjYyNzM=", "number": 936, "title": "Unsupport Form-style Query", "user": {"login": "abersheeran", "id": 25364828, "node_id": "MDQ6VXNlcjI1MzY0ODI4", "avatar_url": "https://avatars3.githubusercontent.com/u/25364828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abersheeran", "html_url": "https://github.com/abersheeran", "followers_url": "https://api.github.com/users/abersheeran/followers", "following_url": "https://api.github.com/users/abersheeran/following{/other_user}", "gists_url": "https://api.github.com/users/abersheeran/gists{/gist_id}", "starred_url": "https://api.github.com/users/abersheeran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abersheeran/subscriptions", "organizations_url": "https://api.github.com/users/abersheeran/orgs", "repos_url": "https://api.github.com/users/abersheeran/repos", "events_url": "https://api.github.com/users/abersheeran/events{/privacy}", "received_events_url": "https://api.github.com/users/abersheeran/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-05-07T09:55:41Z", "updated_at": "2020-05-11T10:54:07Z", "closed_at": "2020-05-07T10:14:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://tools.ietf.org/html/rfc6570#section-3.2.8\r\n\r\nurl: `http://127.0.0.1:8000/query?name=alice&name=bob`\r\n\r\nI want to get `[\"alice\", \"bob\"]` from `request.query_params[\"name\"]`, but only get `\"bob\"`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/928", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/928/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/928/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/928/events", "html_url": "https://github.com/encode/starlette/issues/928", "id": 611496760, "node_id": "MDU6SXNzdWU2MTE0OTY3NjA=", "number": 928, "title": "Application Startup Never Completes", "user": {"login": "seanaye", "id": 24496822, "node_id": "MDQ6VXNlcjI0NDk2ODIy", "avatar_url": "https://avatars3.githubusercontent.com/u/24496822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanaye", "html_url": "https://github.com/seanaye", "followers_url": "https://api.github.com/users/seanaye/followers", "following_url": "https://api.github.com/users/seanaye/following{/other_user}", "gists_url": "https://api.github.com/users/seanaye/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanaye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanaye/subscriptions", "organizations_url": "https://api.github.com/users/seanaye/orgs", "repos_url": "https://api.github.com/users/seanaye/repos", "events_url": "https://api.github.com/users/seanaye/events{/privacy}", "received_events_url": "https://api.github.com/users/seanaye/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-03T20:12:17Z", "updated_at": "2020-05-03T21:03:51Z", "closed_at": "2020-05-03T21:03:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've recently updated starlette (unsure of which version i came from) to 0.13.4. Now my application will no longer start it simply hangs.\r\n\r\n```python\r\nmiddleware = [\r\n    Middleware(\r\n        CORSMiddleware,\r\n        allow_origins=['http://127.0.0.1:3000', 'http://localhost:3000'],\r\n        allow_methods=['*'],\r\n        allow_headers=['*'],\r\n        allow_credentials=True\r\n    )\r\n]\r\n\r\nAPP = Starlette(\r\n    debug=True,\r\n    on_startup=[\r\n        GINO.initialize,\r\n        lambda: _logger.logger.info('app init')\r\n    ],\r\n    on_shutdown=[GINO.destroy],\r\n    middleware=middleware\r\n)\r\n\r\nAPP.mount('/graphql', GRAPHQLAPP)\r\n```\r\n\r\nthis used to start the app but now the application never logs the startup message it just hangs on `app init`\r\n\r\nif I remove the GINO line it still just logs `app init` then hangs.\r\n\r\nOnce I remove all of the startup functions then the app starts correctly, but this is obviously not a solution.\r\n\r\nApp is running in a docker container with an untouched dockerfile\r\n\r\n`CMD [ \"python\", \"-m\", \"uvicorn\",  \"app:APP\", \"--host\", \"0.0.0.0\", \"--port\", \"5001\", \"--log-level\", \"info\", \"--reload\", \"--reload-dir\", \"/app\"]`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/927", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/927/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/927/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/927/events", "html_url": "https://github.com/encode/starlette/issues/927", "id": 611425702, "node_id": "MDU6SXNzdWU2MTE0MjU3MDI=", "number": 927, "title": "[FR] Ability to change redirect status code in requires decorator", "user": {"login": "oczkers", "id": 642195, "node_id": "MDQ6VXNlcjY0MjE5NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/642195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oczkers", "html_url": "https://github.com/oczkers", "followers_url": "https://api.github.com/users/oczkers/followers", "following_url": "https://api.github.com/users/oczkers/following{/other_user}", "gists_url": "https://api.github.com/users/oczkers/gists{/gist_id}", "starred_url": "https://api.github.com/users/oczkers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oczkers/subscriptions", "organizations_url": "https://api.github.com/users/oczkers/orgs", "repos_url": "https://api.github.com/users/oczkers/repos", "events_url": "https://api.github.com/users/oczkers/events{/privacy}", "received_events_url": "https://api.github.com/users/oczkers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-03T14:26:13Z", "updated_at": "2020-05-04T09:31:50Z", "closed_at": "2020-05-04T09:31:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Looks like status_code is ignored when redirect param is set so every redirect is made with 307. It would be nice if we can set at least 303 status_code that changes posts to get and destroys body.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/926", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/926/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/926/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/926/events", "html_url": "https://github.com/encode/starlette/issues/926", "id": 611263699, "node_id": "MDU6SXNzdWU2MTEyNjM2OTk=", "number": 926, "title": "Provide a public interface to reset a Starlette application", "user": {"login": "Lawouach", "id": 769982, "node_id": "MDQ6VXNlcjc2OTk4Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/769982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lawouach", "html_url": "https://github.com/Lawouach", "followers_url": "https://api.github.com/users/Lawouach/followers", "following_url": "https://api.github.com/users/Lawouach/following{/other_user}", "gists_url": "https://api.github.com/users/Lawouach/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lawouach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lawouach/subscriptions", "organizations_url": "https://api.github.com/users/Lawouach/orgs", "repos_url": "https://api.github.com/users/Lawouach/repos", "events_url": "https://api.github.com/users/Lawouach/events{/privacy}", "received_events_url": "https://api.github.com/users/Lawouach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-02T20:02:31Z", "updated_at": "2020-05-02T20:41:27Z", "closed_at": "2020-05-02T20:22:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI had been struggling with a very odd issue for a long time. I have a fairly long test suite which I have paramaterized so its iterations grows linearly with the number of parameters.\r\n\r\nFor some time, when I extend that list from two elements to three (or more) some of my tests would systematically fail with a \"maximum recursion depth\" error. Always the same tests. But they would never fail when executed on their own.\r\n\r\nInitially I was so puzzled because they failed in odd places until I debugged a bit and found the sesison middleware was in an infinite loop between its send/send_wrapper.\r\n\r\nBut there was nothing that could justify this in the code.\r\n\r\nAfter hours of investigating, I finally found the issue.\r\n\r\nMy routing is made of of various levels of routing endpoint instances to a root level starlette app. However, two legacy apps are also mounted to that root app. Both have their own list of middlewares.\r\n\r\nThose two apps are two regular Starlette app instanciated in their own Python module. The typical:\r\n\r\n```\r\napi = Starlette()\r\n\r\n@api.route(\"/\")\r\nasync def homepage(request):\r\n    return JSONResponse({'hello': 'world'})\r\n```\r\n\r\nWhat I had failed to appreciate is the singleton nature of these apps. Meaning their definition was shared all across my tests.\r\n\r\nIn effect, that led to their middlewares to be never cleared out but kept throughout.\r\n\r\nAs my number of tests grew, I was getting closer to the recursion limit...\r\n\r\nIt took me a long time down the rabbit hole to understand what to do: clear the list of user middlware before starting a new test session so previous middlewares would not be kept.\r\n\r\nHere is an example:\r\n\r\napp.py\r\n```python\r\nfrom starlette.applications import Starlette\r\nfrom starlette.middleware.gzip import GZipMiddleware\r\nfrom starlette.responses import JSONResponse\r\nfrom starlette.routing import Mount\r\n\r\napi = Starlette()\r\n\r\n\r\n@api.route(\"/\")\r\nasync def homepage(request):\r\n    return JSONResponse({'hello': 'world'})\r\n\r\n\r\ndef create_app() -> Starlette:\r\n    api.add_middleware(GZipMiddleware)\r\n    return Starlette(debug=True, routes=[\r\n        Mount('/', app=api)\r\n    ])\r\n```\r\n\r\nconftest.py\r\n```python\r\nfrom .app import create_app\r\n\r\nimport pytest\r\nfrom starlette.applications import Starlette\r\n\r\n\r\n@pytest.fixture(params=[\"english\", \"french\"])\r\ndef app() -> Starlette:\r\n    return create_app()\r\n```\r\n\r\ntest.py\r\n```python\r\nfrom starlette.applications import Starlette\r\n\r\nfrom .app import api\r\n\r\n\r\ndef test_duplicate_middlewares(app: Starlette):\r\n    print(app.user_middleware)\r\n    print(api.user_middleware)\r\n```\r\n\r\n```console\r\n$ pytest.py -s test.py \r\nTest session starts (platform: linux, Python 3.7.5, pytest 5.3.5, pytest-sugar 0.9.2)\r\nrootdir: .\r\nplugins: asyncio-0.10.0, sugar-0.9.2, requests-mock-1.7.0, cov-2.8.1, pylama-7.7.1\r\ncollecting ... []\r\n[Middleware(GZipMiddleware)]\r\n\r\n test.py \u2713                                                                                                                                                                                             50% \u2588\u2588\u2588\u2588\u2588     []\r\n[Middleware(GZipMiddleware), Middleware(GZipMiddleware)]\r\n test.py \u2713\u2713                                                                                                                                                                                           100% \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n\r\nResults (0.04s):\r\n       2 passed\r\n```\r\n\r\nTwo tests, one for each value of the parameter list.\r\n\r\nTo fix this:\r\n\r\n```python\r\nfrom .app import api, create_app\r\n\r\nimport pytest\r\nfrom starlette.applications import Starlette\r\n\r\n\r\n@pytest.fixture(params=[\"english\", \"french\"])\r\ndef app() -> Starlette:\r\n    api.user_middleware = []\r\n    api.middleware_stack = api.build_middleware_stack()\r\n    return create_app()\r\n```\r\n\r\n```console\r\nTest session starts (platform: linux, Python 3.7.5, pytest 5.3.5, pytest-sugar 0.9.2)\r\nrootdir: .\r\nplugins: asyncio-0.10.0, sugar-0.9.2, requests-mock-1.7.0, cov-2.8.1, pylama-7.7.1\r\ncollecting ... []\r\n[Middleware(GZipMiddleware)]\r\n\r\n test.py \u2713                                                                                                                                                                                             50% \u2588\u2588\u2588\u2588\u2588     []\r\n[Middleware(GZipMiddleware)]\r\n test.py \u2713\u2713                                                                                                                                                                                           100% \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n\r\nResults (0.04s):\r\n       2 passed\r\n```\r\n\r\nStrictly speaking the `api.middleware_stack = api.build_middleware_stack()` is not useful in this dummy example but was necessary in more complex setup.\r\n\r\nSo, while I understand the implication of a singleton and the fact, when running, the app will not see this duplication, I would like to suggest an official public `reset app` method on the Starlette interface for testing purpose. Or at least, understand if resetting middlewares as I do is enough.\r\n\r\nThanks,\r\nSylvain", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/917", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/917/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/917/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/917/events", "html_url": "https://github.com/encode/starlette/issues/917", "id": 608213700, "node_id": "MDU6SXNzdWU2MDgyMTM3MDA=", "number": 917, "title": "Did you know Netflix uses Starlette?", "user": {"login": "retnikt", "id": 24581770, "node_id": "MDQ6VXNlcjI0NTgxNzcw", "avatar_url": "https://avatars1.githubusercontent.com/u/24581770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retnikt", "html_url": "https://github.com/retnikt", "followers_url": "https://api.github.com/users/retnikt/followers", "following_url": "https://api.github.com/users/retnikt/following{/other_user}", "gists_url": "https://api.github.com/users/retnikt/gists{/gist_id}", "starred_url": "https://api.github.com/users/retnikt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retnikt/subscriptions", "organizations_url": "https://api.github.com/users/retnikt/orgs", "repos_url": "https://api.github.com/users/retnikt/repos", "events_url": "https://api.github.com/users/retnikt/events{/privacy}", "received_events_url": "https://api.github.com/users/retnikt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-28T10:41:01Z", "updated_at": "2020-04-28T12:35:11Z", "closed_at": "2020-04-28T12:35:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Off-topic, but I recently discovered @Netflix's [Dispatch](https://github.com/Netflix/dispatch), and poking around in the source I discovered that the app is written with (FastAPI and) Starlette! I thought you might like to know so you could use it for promotion. (if you didn't already know they used it)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/915", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/915/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/915/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/915/events", "html_url": "https://github.com/encode/starlette/issues/915", "id": 607939283, "node_id": "MDU6SXNzdWU2MDc5MzkyODM=", "number": 915, "title": "Sample required in docs for periodic timers", "user": {"login": "realsby", "id": 1173351, "node_id": "MDQ6VXNlcjExNzMzNTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1173351?v=4", "gravatar_id": "", "url": "https://api.github.com/users/realsby", "html_url": "https://github.com/realsby", "followers_url": "https://api.github.com/users/realsby/followers", "following_url": "https://api.github.com/users/realsby/following{/other_user}", "gists_url": "https://api.github.com/users/realsby/gists{/gist_id}", "starred_url": "https://api.github.com/users/realsby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/realsby/subscriptions", "organizations_url": "https://api.github.com/users/realsby/orgs", "repos_url": "https://api.github.com/users/realsby/repos", "events_url": "https://api.github.com/users/realsby/events{/privacy}", "received_events_url": "https://api.github.com/users/realsby/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-28T00:30:23Z", "updated_at": "2020-05-04T10:16:06Z", "closed_at": "2020-05-04T10:10:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I saw some hints in this issue https://github.com/encode/starlette/issues/202 , but it's not enough for me to see the big picture. I believe it's very important to have periodic tasks in a framework so if starlette have this feature you should put a sample into the docs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/914", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/914/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/914/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/914/events", "html_url": "https://github.com/encode/starlette/issues/914", "id": 606847145, "node_id": "MDU6SXNzdWU2MDY4NDcxNDU=", "number": 914, "title": "Global configuration inside app", "user": {"login": "rohithkodali", "id": 7373708, "node_id": "MDQ6VXNlcjczNzM3MDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/7373708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohithkodali", "html_url": "https://github.com/rohithkodali", "followers_url": "https://api.github.com/users/rohithkodali/followers", "following_url": "https://api.github.com/users/rohithkodali/following{/other_user}", "gists_url": "https://api.github.com/users/rohithkodali/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohithkodali/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohithkodali/subscriptions", "organizations_url": "https://api.github.com/users/rohithkodali/orgs", "repos_url": "https://api.github.com/users/rohithkodali/repos", "events_url": "https://api.github.com/users/rohithkodali/events{/privacy}", "received_events_url": "https://api.github.com/users/rohithkodali/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-25T20:16:46Z", "updated_at": "2020-04-28T12:39:30Z", "closed_at": "2020-04-28T12:39:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "i'm looking for a way where we store some global values and use them in multiple classes,\r\n\r\ntornado has a similar on tornado.web.Application\r\nhttps://www.tornadoweb.org/en/stable/guide/structure.html#the-application-object\r\n\r\nit can store variables and methods in it, which can be accessible in the entire app, is there anything similar available in starlette.\r\n\r\n\r\nthanks in advance for the help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/910", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/910/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/910/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/910/events", "html_url": "https://github.com/encode/starlette/issues/910", "id": 604843690, "node_id": "MDU6SXNzdWU2MDQ4NDM2OTA=", "number": 910, "title": "New 3th party middleware for OpenTracing.io", "user": {"login": "acidjunk", "id": 685002, "node_id": "MDQ6VXNlcjY4NTAwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/685002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acidjunk", "html_url": "https://github.com/acidjunk", "followers_url": "https://api.github.com/users/acidjunk/followers", "following_url": "https://api.github.com/users/acidjunk/following{/other_user}", "gists_url": "https://api.github.com/users/acidjunk/gists{/gist_id}", "starred_url": "https://api.github.com/users/acidjunk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acidjunk/subscriptions", "organizations_url": "https://api.github.com/users/acidjunk/orgs", "repos_url": "https://api.github.com/users/acidjunk/repos", "events_url": "https://api.github.com/users/acidjunk/events{/privacy}", "received_events_url": "https://api.github.com/users/acidjunk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-22T15:20:34Z", "updated_at": "2020-04-23T08:32:27Z", "closed_at": "2020-04-23T08:32:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Thanks for a great project. Porting some older Flask app to FastAPI/Starlette as we speak.\r\n\r\nAs in some app's we used the tracing functionality of https://github.com/opentracing-contrib/python-flask and there didn't seem to exist an complete implementation for Starlette:\r\n\r\nhttps://github.com/acidjunk/starlette-opentracing and https://pypi.org/project/Starlette-OpenTracing/\r\n\r\nFeel free to close this ticket. I can cook up a PR if you want to add it to the Starlette Docs (section 3th party middleware)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/908", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/908/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/908/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/908/events", "html_url": "https://github.com/encode/starlette/issues/908", "id": 604052907, "node_id": "MDU6SXNzdWU2MDQwNTI5MDc=", "number": 908, "title": "Starlette 0.13.3 hangs with StreamingResponse & httpx client", "user": {"login": "JayH5", "id": 1748643, "node_id": "MDQ6VXNlcjE3NDg2NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1748643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JayH5", "html_url": "https://github.com/JayH5", "followers_url": "https://api.github.com/users/JayH5/followers", "following_url": "https://api.github.com/users/JayH5/following{/other_user}", "gists_url": "https://api.github.com/users/JayH5/gists{/gist_id}", "starred_url": "https://api.github.com/users/JayH5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JayH5/subscriptions", "organizations_url": "https://api.github.com/users/JayH5/orgs", "repos_url": "https://api.github.com/users/JayH5/repos", "events_url": "https://api.github.com/users/JayH5/events{/privacy}", "received_events_url": "https://api.github.com/users/JayH5/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 974729978, "node_id": "MDU6TGFiZWw5NzQ3Mjk5Nzg=", "url": "https://api.github.com/repos/encode/starlette/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-21T14:40:48Z", "updated_at": "2020-05-12T14:00:11Z", "closed_at": "2020-05-12T14:00:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When using a `StreamingResponse` and, by extension, any custom middleware (any subclass of `BaseHTTPMiddleware`) with Starlette 0.13.3, with the async httpx client directly connected to the app (i.e. `httpx.AsyncClient(app=...)`), Starlette responses never complete. This did not happen with Starlette 0.13.2.\r\n\r\n**Minimal-ish test case:**\r\nWith `starlette==0.13.3`, `httpx==0.12.1`, and pytest + pytest-asyncio:\r\n```python\r\nimport httpx\r\nimport pytest\r\nfrom starlette.applications import Starlette\r\nfrom starlette.responses import StreamingResponse\r\nfrom starlette.routing import Route\r\n\r\n\r\n@pytest.fixture\r\ndef app():\r\n    def data():\r\n        yield b\"data\"\r\n\r\n    async def stream(request):\r\n        return StreamingResponse(data())\r\n\r\n    return Starlette(routes=[Route(\"/stream\", stream)])\r\n\r\n\r\n@pytest.fixture\r\nasync def client(app):\r\n    async with httpx.AsyncClient(app=app) as client:\r\n        yield client\r\n\r\n\r\n@pytest.mark.asyncio\r\nasync def test_middleware(client):\r\n    response = await client.get(\"http://example.com/stream\")\r\n    assert response.status_code == 200\r\n```\r\n\r\n**Expected behaviour:**\r\nThe test passes\r\n\r\n**Actual behaviour:**\r\nThe `await client.get()` call never returns/completes.\r\n\r\n**Stacktrace:**\r\nIf you hit ctrl-c while the test is stuck you get a long stacktrace. But the important bits I believe are:\r\n```\r\nFile \"/Users/jamie/.virtualenvs/tempenv-51153646622a/lib/python3.7/site-packages/starlette/responses.py\", line 202, in listen_for_disconnect\r\n    message = await receive()\r\n  File \"/Users/jamie/.virtualenvs/tempenv-51153646622a/lib/python3.7/site-packages/httpx/_dispatch/asgi.py\", line 78, in receive\r\n    body = await request_body_chunks.__anext__()\r\n```\r\n\r\n**Suspected cause:**\r\nStarlette calls both the `receive()` (to check for disconnects) and `send()` (to send the response) concurrently in its `StreamingResponse` type (since #839). It tries to wait for either of those two options to complete (using `asyncio.wait({tasks}, return_when=asyncio.FIRST_COMPLETED)`). Because the ASGI dispatch in httpx is generally effectively synchronous, both `send()` and `receive()` may never return control to the event loop when called which means that if _either_ task that is waited on does not complete, then `asyncio.wait()` will not return and the program will remain stuck in an infinite loop inside the `StreamingResponse.listen_for_disconnect` method.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/907", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/907/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/907/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/907/events", "html_url": "https://github.com/encode/starlette/issues/907", "id": 603166373, "node_id": "MDU6SXNzdWU2MDMxNjYzNzM=", "number": 907, "title": "Is there a preferred way to log web app stats?", "user": {"login": "dulex123", "id": 2333381, "node_id": "MDQ6VXNlcjIzMzMzODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/2333381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dulex123", "html_url": "https://github.com/dulex123", "followers_url": "https://api.github.com/users/dulex123/followers", "following_url": "https://api.github.com/users/dulex123/following{/other_user}", "gists_url": "https://api.github.com/users/dulex123/gists{/gist_id}", "starred_url": "https://api.github.com/users/dulex123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dulex123/subscriptions", "organizations_url": "https://api.github.com/users/dulex123/orgs", "repos_url": "https://api.github.com/users/dulex123/repos", "events_url": "https://api.github.com/users/dulex123/events{/privacy}", "received_events_url": "https://api.github.com/users/dulex123/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-20T11:30:47Z", "updated_at": "2020-04-20T12:27:47Z", "closed_at": "2020-04-20T12:27:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is there a preferred way to log webapp traffic?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/906", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/906/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/906/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/906/events", "html_url": "https://github.com/encode/starlette/issues/906", "id": 603077104, "node_id": "MDU6SXNzdWU2MDMwNzcxMDQ=", "number": 906, "title": "Compliance with ASGI specification.", "user": {"login": "Nimond", "id": 26119994, "node_id": "MDQ6VXNlcjI2MTE5OTk0", "avatar_url": "https://avatars1.githubusercontent.com/u/26119994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nimond", "html_url": "https://github.com/Nimond", "followers_url": "https://api.github.com/users/Nimond/followers", "following_url": "https://api.github.com/users/Nimond/following{/other_user}", "gists_url": "https://api.github.com/users/Nimond/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nimond/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nimond/subscriptions", "organizations_url": "https://api.github.com/users/Nimond/orgs", "repos_url": "https://api.github.com/users/Nimond/repos", "events_url": "https://api.github.com/users/Nimond/events{/privacy}", "received_events_url": "https://api.github.com/users/Nimond/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-20T09:15:53Z", "updated_at": "2020-04-20T10:08:59Z", "closed_at": "2020-04-20T10:08:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I recently started reading ASGI documentation and in the middlewares section I read that middleware should never modify the scope object.\r\n\r\n[docs#middlewares](https://asgi.readthedocs.io/en/latest/specs/main.html#middleware)\r\n \r\n>When middleware is modifying the scope, it should make a copy of the scope object before mutating it and passing it to the inner application, as changes may leak upstream otherwise. \r\n\r\nBut in [session middleware](https://github.com/encode/starlette/blob/master/starlette/middleware/sessions.py#L43):\r\n\r\n```python\r\n    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\r\n        if scope[\"type\"] not in (\"http\", \"websocket\"):  # pragma: no cover\r\n            await self.app(scope, receive, send)\r\n            return\r\n\r\n        connection = HTTPConnection(scope)\r\n        initial_session_was_empty = True\r\n\r\n        if self.session_cookie in connection.cookies:\r\n            data = connection.cookies[self.session_cookie].encode(\"utf-8\")\r\n            try:\r\n                data = self.signer.unsign(data, max_age=self.max_age)\r\n                scope[\"session\"] = json.loads(b64decode(data))\r\n                initial_session_was_empty = False\r\n            except (BadTimeSignature, SignatureExpired):\r\n                scope[\"session\"] = {}\r\n        else:\r\n            scope[\"session\"] = {}\r\n```\r\n\r\nYou are not making a copy of the object.\r\n\r\nAm I misunderstood something?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/898", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/898/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/898/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/898/events", "html_url": "https://github.com/encode/starlette/issues/898", "id": 600031472, "node_id": "MDU6SXNzdWU2MDAwMzE0NzI=", "number": 898, "title": "Consider something more lenient for cookie parsing", "user": {"login": "erewok", "id": 4587833, "node_id": "MDQ6VXNlcjQ1ODc4MzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/4587833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erewok", "html_url": "https://github.com/erewok", "followers_url": "https://api.github.com/users/erewok/followers", "following_url": "https://api.github.com/users/erewok/following{/other_user}", "gists_url": "https://api.github.com/users/erewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/erewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erewok/subscriptions", "organizations_url": "https://api.github.com/users/erewok/orgs", "repos_url": "https://api.github.com/users/erewok/repos", "events_url": "https://api.github.com/users/erewok/events{/privacy}", "received_events_url": "https://api.github.com/users/erewok/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-15T05:28:16Z", "updated_at": "2020-04-23T15:17:39Z", "closed_at": "2020-04-23T15:17:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nI have used Starlette in a handful of small services in the past few months and have been really happy with it. It's a great project. \r\n\r\nLast week I ran into something that I wanted to raise as a potential issue here, because it may be worth considering.\r\n\r\nWe have an application that uses Okta's Sign-In widget for authentication (which is an OpenID Connect thing). Okta does its Oauth2 callback-redirect and they set some cookies, at least one of which is well outside the spec of HTTP cookies. Anyway, in Starlette the `request.cookies` attribute ends up pretty mangled as a result.\r\n\r\nHere's an example of what I'm talking about using the same [cookie-parsing technique in Starlette](https://github.com/encode/starlette/blob/6cb333a978dbb9cd4a06773ead2e9934517fd40c/starlette/requests.py#L88), which relies on Python's standard library module `http.cookies`:\r\n\r\n```python\r\nIn [1]: cookieval = \"\"\"okta-oauth-nonce=validAsciiblabla; okta-oauth-state=validAsciiBlabla; okta-oauth-redirect-params={\"responseType\":\"code\",\"state\":\"somestate\",\r\n   ...: \"nonce\":\"somenonce\",\"scopes\":[\"openid\",\"profile\",\"email\",\"phone\"],\"urls\":{\"issuer\":\"https://subdomain.okta.com/oauth2/authServer\",\"authorizeUrl\":\"https://s\r\n   ...: ubdomain.okta.com/oauth2/authServer/v1/authorize\",\"userinfoUrl\":\"https://subdomain.okta.com/oauth2/authServer/v1/userinfo\"}}; importantCookie=importantValu\r\n   ...: e; sessionCookie=importantSessionValue\"\"\"\r\n\r\nIn [2]: import http.cookies\r\n\r\nIn [3]: cookie = http.cookies.SimpleCookie()\r\n\r\nIn [4]: cookie.load(cookieval)\r\n\r\nIn [5]: list(cookie.items())\r\nOut[5]:\r\n[('okta-oauth-nonce', <Morsel: okta-oauth-nonce=validAsciiblabla>),\r\n ('okta-oauth-state', <Morsel: okta-oauth-state=validAsciiBlabla>)]\r\n```\r\n\r\nNotice in the example above, `cookieval` contains 5 important cookies (including the session cookie set by Starlette's `SessionMiddleware`), but only two are successfully parsed by this method.\r\n\r\nI have seen a lot of wacky stuff thrown into cookies, so it may be a good idea to provide some method to parse them more leniently in the Starlette project.\r\n\r\nAlso, out of curiosity, I took a tour through what Werkzeug is doing and they have some [pretty low-level code](https://github.com/pallets/werkzeug/blob/09a248649069780b4adfb910fb69f6fb304f2ea3/src/werkzeug/_internal.py) for parsing cookies, but it does successfully parse the above:\r\n\r\n\r\n```python\r\nIn [6]: from werkzeug._internal import _cookie_parse_impl\r\n\r\nIn [7]: list(_cookie_parse_impl(cookieval.encode(\"utf-8\")))\r\nOut[7]:\r\n[(b'okta-oauth-nonce', b'validAsciiblabla'),\r\n (b'okta-oauth-state', b'validAsciiBlabla'),\r\n (b'okta-oauth-redirect-params',\r\n  b'{\"responseType\":\"code\",\"state\":\"somestate\",\"nonce\":\"somenonce\",\"scopes\":[\"openid\",\"profile\",\"email\",\"phone\"],\"urls\":{\"issuer\":\"https://subdomain.okta.com/oauth2/authServer\",\"authorizeUrl\":\"https://subdomain.okta.com/oauth2/authServer/v1/authorize\",\"userinfoUrl\":\"https://subdomain.okta.com/oauth2/authServer/v1/userinfo\"}}'),\r\n (b'importantCookie', b'importantValue'),\r\n (b'sessionCookie', b'importantSessionValue')]\r\n``` \r\n\r\nIn short, cookies seem to be one of those things where while there exists a spec, people have been ignoring it for a long time, and so it may be worth parsing them more leniently or offering an option to do so in the project.\r\n\r\nPython's `http.cookies` module even has the following comment:\r\n\r\n> The module formerly strictly applied the parsing rules described in the RFC 2109 and RFC 2068 specifications. It has since been discovered that MSIE 3.0x doesn\u2019t follow the character rules outlined in those specs and also many current day browsers and servers have relaxed parsing rules when comes to Cookie handling. As a result, the parsing rules used are a bit less strict.\r\n\r\nThanks for reading and for working on this project. I would be happy to help contribute back to it if I can.\r\n\r\n----\r\n\r\nFor reference, here's the [RFC 6265 spec](https://tools.ietf.org/html/rfc6265), which obsoletes the older spec referenced by the Python standard library's `http.cookies` module (it actually references an even _older_ spec...).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/897", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/897/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/897/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/897/events", "html_url": "https://github.com/encode/starlette/issues/897", "id": 599069337, "node_id": "MDU6SXNzdWU1OTkwNjkzMzc=", "number": 897, "title": "return response directly in dependency", "user": {"login": "jendy2012", "id": 2418263, "node_id": "MDQ6VXNlcjI0MTgyNjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2418263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jendy2012", "html_url": "https://github.com/jendy2012", "followers_url": "https://api.github.com/users/jendy2012/followers", "following_url": "https://api.github.com/users/jendy2012/following{/other_user}", "gists_url": "https://api.github.com/users/jendy2012/gists{/gist_id}", "starred_url": "https://api.github.com/users/jendy2012/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jendy2012/subscriptions", "organizations_url": "https://api.github.com/users/jendy2012/orgs", "repos_url": "https://api.github.com/users/jendy2012/repos", "events_url": "https://api.github.com/users/jendy2012/events{/privacy}", "received_events_url": "https://api.github.com/users/jendy2012/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-13T18:58:10Z", "updated_at": "2020-04-14T08:47:54Z", "closed_at": "2020-04-14T08:47:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is your feature request related to a problem\r\nYes.\r\nCurrently, fastapi support raise HttpExpection in dependency and return a response struct like this:\r\n{detail: \"error\"}.\r\n\r\nI want to be able to return a self-defined response, but I can't because now I can only return {\"detail\": xxxxx}\r\n\r\nThe solution you would like\r\nFor example, I want to\r\nreturn HttpException(status_code=200, data={\"haha\":\"Hello\", \"code\": 20000}),\r\nand the frontend recieve successful reponse struct like this:\r\n{\r\ndata:{\"haha\":\"Hello\", \"code\": 20000},\r\ncode: 200\r\n}\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/896", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/896/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/896/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/896/events", "html_url": "https://github.com/encode/starlette/issues/896", "id": 598590286, "node_id": "MDU6SXNzdWU1OTg1OTAyODY=", "number": 896, "title": "We need named routes", "user": {"login": "nandoflorestan", "id": 543841, "node_id": "MDQ6VXNlcjU0Mzg0MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/543841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nandoflorestan", "html_url": "https://github.com/nandoflorestan", "followers_url": "https://api.github.com/users/nandoflorestan/followers", "following_url": "https://api.github.com/users/nandoflorestan/following{/other_user}", "gists_url": "https://api.github.com/users/nandoflorestan/gists{/gist_id}", "starred_url": "https://api.github.com/users/nandoflorestan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nandoflorestan/subscriptions", "organizations_url": "https://api.github.com/users/nandoflorestan/orgs", "repos_url": "https://api.github.com/users/nandoflorestan/repos", "events_url": "https://api.github.com/users/nandoflorestan/events{/privacy}", "received_events_url": "https://api.github.com/users/nandoflorestan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-12T23:01:54Z", "updated_at": "2020-04-13T06:32:22Z", "closed_at": "2020-04-13T02:46:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "As far as I can see, Starlette does not support named routes.\r\n\r\nNamed routes are probably the first feature I look for in a web framework.  I trust everyone here is familiar with the reason (basically decoupling URLs from everything else and making URLs easy to change), but if not, here's an explanation:\r\nhttps://stackoverflow.com/a/52231573", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/892", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/892/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/892/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/892/events", "html_url": "https://github.com/encode/starlette/issues/892", "id": 595216465, "node_id": "MDU6SXNzdWU1OTUyMTY0NjU=", "number": 892, "title": "Unable to get request body inside an exception handler, got RuntimeError: Receive channel has not been made available", "user": {"login": "sevaho", "id": 10941956, "node_id": "MDQ6VXNlcjEwOTQxOTU2", "avatar_url": "https://avatars3.githubusercontent.com/u/10941956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sevaho", "html_url": "https://github.com/sevaho", "followers_url": "https://api.github.com/users/sevaho/followers", "following_url": "https://api.github.com/users/sevaho/following{/other_user}", "gists_url": "https://api.github.com/users/sevaho/gists{/gist_id}", "starred_url": "https://api.github.com/users/sevaho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sevaho/subscriptions", "organizations_url": "https://api.github.com/users/sevaho/orgs", "repos_url": "https://api.github.com/users/sevaho/repos", "events_url": "https://api.github.com/users/sevaho/events{/privacy}", "received_events_url": "https://api.github.com/users/sevaho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-06T15:34:36Z", "updated_at": "2020-04-07T05:55:53Z", "closed_at": "2020-04-07T05:55:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello\r\n\r\nI want to get the request body in an exception handler but I am getting an Error. Is this a bug?\r\n\r\nMinimal example\r\n\r\n```python\r\nfrom fastapi import FastAPI\r\nfrom starlette.requests import Request\r\nfrom starlette.responses import UJSONResponse\r\n\r\napp = FastAPI()\r\n\r\n\r\nasync def http_exception_handler(request: Request, exc: Exception) -> UJSONResponse:\r\n    print(await request.body())  # RuntimeError: Receive channel has not been made available\r\n    return UJSONResponse(content={\"msg\": f\"SERVER_ERROR, {exc.args[0]}\", \"code\": 500}, status_code=500)\r\n\r\n\r\napp.add_exception_handler(Exception, http_exception_handler)\r\n\r\n\r\n@app.post(\"/\")\r\nasync def index(request: Request):\r\n    print(await request.body())  # b'{\"a\": \"b\"}'\r\n    raise Exception(\"CATCH ME\")\r\n\r\n\r\n# Run http localhost:8000 some=data\r\n```\r\n\r\n\r\nError:\r\n\r\n```txt\r\nb'{\"a\": \"b\"}'\r\nERROR:    Exception in ASGI application\r\nTraceback (most recent call last):\r\n  File \"/home/sevaho/.local/share/virtualenvs/testje2-JmgYoeLF/lib/python3.8/site-packages/starlette/middleware/errors.py\", line 159, in __call__\r\n    await self.app(scope, receive, _send)\r\n  File \"/home/sevaho/.local/share/virtualenvs/testje2-JmgYoeLF/lib/python3.8/site-packages/starlette/exceptions.py\", line 82, in __call__\r\n    raise exc from None\r\n  File \"/home/sevaho/.local/share/virtualenvs/testje2-JmgYoeLF/lib/python3.8/site-packages/starlette/exceptions.py\", line 71, in __call__\r\n    await self.app(scope, receive, sender)\r\n  File \"/home/sevaho/.local/share/virtualenvs/testje2-JmgYoeLF/lib/python3.8/site-packages/starlette/routing.py\", line 550, in __call__\r\n    await route.handle(scope, receive, send)\r\n  File \"/home/sevaho/.local/share/virtualenvs/testje2-JmgYoeLF/lib/python3.8/site-packages/starlette/routing.py\", line 227, in handle\r\n    await self.app(scope, receive, send)\r\n  File \"/home/sevaho/.local/share/virtualenvs/testje2-JmgYoeLF/lib/python3.8/site-packages/starlette/routing.py\", line 41, in app\r\n    response = await func(request)\r\n  File \"/home/sevaho/.local/share/virtualenvs/testje2-JmgYoeLF/lib/python3.8/site-packages/fastapi/routing.py\", line 196, in app\r\n    raw_response = await run_endpoint_function(\r\n  File \"/home/sevaho/.local/share/virtualenvs/testje2-JmgYoeLF/lib/python3.8/site-packages/fastapi/routing.py\", line 148, in run_endpoint_function\r\n    return await dependant.call(**values)\r\n  File \"./app.py\", line 19, in index\r\n    raise Exception(\"CATCH ME\")\r\nException: CATCH ME\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/sevaho/.local/share/virtualenvs/testje2-JmgYoeLF/lib/python3.8/site-packages/uvicorn/protocols/http/httptools_impl.py\", line 385, in run_asgi\r\n    result = await app(self.scope, self.receive, self.send)\r\n  File \"/home/sevaho/.local/share/virtualenvs/testje2-JmgYoeLF/lib/python3.8/site-packages/uvicorn/middleware/proxy_headers.py\", line 45, in __call__\r\n    return await self.app(scope, receive, send)\r\n  File \"/home/sevaho/.local/share/virtualenvs/testje2-JmgYoeLF/lib/python3.8/site-packages/fastapi/applications.py\", line 149, in __call__\r\n    await super().__call__(scope, receive, send)\r\n  File \"/home/sevaho/.local/share/virtualenvs/testje2-JmgYoeLF/lib/python3.8/site-packages/starlette/applications.py\", line 102, in __call__\r\n    await self.middleware_stack(scope, receive, send)\r\n  File \"/home/sevaho/.local/share/virtualenvs/testje2-JmgYoeLF/lib/python3.8/site-packages/starlette/middleware/errors.py\", line 172, in __call__\r\n    response = await self.handler(request, exc)\r\n  File \"./app.py\", line 9, in http_exception_handler\r\n    print(await request.body())\r\n  File \"/home/sevaho/.local/share/virtualenvs/testje2-JmgYoeLF/lib/python3.8/site-packages/starlette/requests.py\", line 194, in body\r\n    async for chunk in self.stream():\r\n  File \"/home/sevaho/.local/share/virtualenvs/testje2-JmgYoeLF/lib/python3.8/site-packages/starlette/requests.py\", line 179, in stream\r\n    message = await self._receive()\r\n  File \"/home/sevaho/.local/share/virtualenvs/testje2-JmgYoeLF/lib/python3.8/site-packages/starlette/requests.py\", line 142, in empty_receive\r\n    raise RuntimeError(\"Receive channel has not been made available\")\r\nRuntimeError: Receive channel has not been made available\r\nINFO:     127.0.0.1:38798 - \"POST / HTTP/1.1\" 500 Internal Server Error\r\n```\r\n\r\nversions used:\r\n\r\n```pipenv graph\r\nfastapi==0.54.0\r\n  - pydantic [required: >=0.32.2,<2.0.0, installed: 1.4]\r\n  - starlette [required: ==0.13.2, installed: 0.13.2]\r\nuvicorn==0.11.3\r\n  - click [required: ==7.*, installed: 7.1.1]\r\n  - h11 [required: >=0.8,<0.10, installed: 0.9.0]\r\n  - httptools [required: ==0.1.*, installed: 0.1.1]\r\n  - uvloop [required: >=0.14.0, installed: 0.14.0]\r\n  - websockets [required: ==8.*, installed: 8.1]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/887", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/887/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/887/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/887/events", "html_url": "https://github.com/encode/starlette/issues/887", "id": 591692450, "node_id": "MDU6SXNzdWU1OTE2OTI0NTA=", "number": 887, "title": "TypeError: 'NoneType' object is not subscriptable when middleware raises an exception.", "user": {"login": "cjw296", "id": 632049, "node_id": "MDQ6VXNlcjYzMjA0OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/632049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjw296", "html_url": "https://github.com/cjw296", "followers_url": "https://api.github.com/users/cjw296/followers", "following_url": "https://api.github.com/users/cjw296/following{/other_user}", "gists_url": "https://api.github.com/users/cjw296/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjw296/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjw296/subscriptions", "organizations_url": "https://api.github.com/users/cjw296/orgs", "repos_url": "https://api.github.com/users/cjw296/repos", "events_url": "https://api.github.com/users/cjw296/events{/privacy}", "received_events_url": "https://api.github.com/users/cjw296/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-01T07:33:29Z", "updated_at": "2020-04-01T11:50:45Z", "closed_at": "2020-04-01T10:48:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This test:\r\n\r\n```\r\ndef test_middleware_run_during_statup():\r\n    from starlette.applications import Starlette\r\n    from starlette.middleware import Middleware\r\n\r\n    called = []\r\n\r\n    class SampleMiddleware:\r\n        def __init__(self, app):\r\n            self.app = app\r\n\r\n        async def __call__(self, scope, receive, send):\r\n            called.append('called')\r\n            await self.app(scope, receive, send)\r\n\r\n    app = Starlette(\r\n        middleware=[Middleware(SampleMiddleware)],\r\n    )\r\n\r\n    with TestClient(app):\r\n        pass\r\n\r\n    assert called == []\r\n```\r\n\r\n..fails as follows:\r\n```\r\n>       assert called == []\r\nE       AssertionError: assert ['called'] == []\r\n```\r\n\r\nWhy is the middleware being called before any requests have been issues to the test client?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/884", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/884/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/884/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/884/events", "html_url": "https://github.com/encode/starlette/issues/884", "id": 590594831, "node_id": "MDU6SXNzdWU1OTA1OTQ4MzE=", "number": 884, "title": "Add simple CDN example for static files", "user": {"login": "hnykda", "id": 2741256, "node_id": "MDQ6VXNlcjI3NDEyNTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2741256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hnykda", "html_url": "https://github.com/hnykda", "followers_url": "https://api.github.com/users/hnykda/followers", "following_url": "https://api.github.com/users/hnykda/following{/other_user}", "gists_url": "https://api.github.com/users/hnykda/gists{/gist_id}", "starred_url": "https://api.github.com/users/hnykda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hnykda/subscriptions", "organizations_url": "https://api.github.com/users/hnykda/orgs", "repos_url": "https://api.github.com/users/hnykda/repos", "events_url": "https://api.github.com/users/hnykda/events{/privacy}", "received_events_url": "https://api.github.com/users/hnykda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-30T21:04:09Z", "updated_at": "2020-04-01T07:59:18Z", "closed_at": "2020-03-31T10:03:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI am struggling with a simple task: \"serve my static files from CDN (say, public google cloud storage)\". In Django, I would simply do:\r\n```\r\nSTATIC_URL = \"https://googleapis...\"\r\n```\r\n\r\nbut I can't figure out how to deal with this in starlette (I am using fastapi)\r\n\r\n\r\nRelated:\r\n* https://github.com/encode/starlette/issues/843\r\n* https://github.com/encode/starlette/issues/873", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/883", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/883/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/883/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/883/events", "html_url": "https://github.com/encode/starlette/issues/883", "id": 590517608, "node_id": "MDU6SXNzdWU1OTA1MTc2MDg=", "number": 883, "title": "Jinja2Templates, TestClient and middleware are incompatible", "user": {"login": "samuelcolvin", "id": 4039449, "node_id": "MDQ6VXNlcjQwMzk0NDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4039449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samuelcolvin", "html_url": "https://github.com/samuelcolvin", "followers_url": "https://api.github.com/users/samuelcolvin/followers", "following_url": "https://api.github.com/users/samuelcolvin/following{/other_user}", "gists_url": "https://api.github.com/users/samuelcolvin/gists{/gist_id}", "starred_url": "https://api.github.com/users/samuelcolvin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samuelcolvin/subscriptions", "organizations_url": "https://api.github.com/users/samuelcolvin/orgs", "repos_url": "https://api.github.com/users/samuelcolvin/repos", "events_url": "https://api.github.com/users/samuelcolvin/events{/privacy}", "received_events_url": "https://api.github.com/users/samuelcolvin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-30T18:58:14Z", "updated_at": "2020-03-30T21:52:31Z", "closed_at": "2020-03-30T21:52:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "To demonstrate the bug, let's say I run (using starlette `v0.13.2`):\r\n```py\r\nfrom pathlib import Path\r\n\r\nfrom starlette.applications import Starlette\r\nfrom starlette.middleware import Middleware\r\nfrom starlette.middleware.base import BaseHTTPMiddleware\r\nfrom starlette.responses import Response\r\nfrom starlette.routing import Route\r\nfrom starlette.templating import Jinja2Templates\r\nfrom starlette.testclient import TestClient\r\n\r\np = Path('templates')\r\np.mkdir(exist_ok=True)\r\n(p / 'index.html').write_text('<p>1 + 1 = {{ 1 + 1 }}</p>\\n')\r\ntemplates = Jinja2Templates(directory=p)\r\n\r\nasync def view(request):\r\n    # return Response('raw response')  # this works fine\r\n    return templates.TemplateResponse('index.html', {'request': request})\r\n\r\nclass CustomHeaderMiddleware(BaseHTTPMiddleware):\r\n    async def dispatch(self, request, call_next):\r\n        response = await call_next(request)\r\n        response.headers['Custom'] = 'Example'\r\n        return response\r\n\r\napp = Starlette(\r\n    debug=True,\r\n    middleware=[Middleware(CustomHeaderMiddleware)],\r\n    routes=[Route('/', view)],\r\n)\r\n\r\ndef test_app():\r\n    client = TestClient(app)\r\n    response = client.get('/')\r\n    assert response.status_code == 200\r\n    print(f'response text:   {response.text!r}')\r\n    print(f'\"Custom\" header: {response.headers.get(\"Custom\")!r}')\r\n\r\nif __name__ == '__main__':\r\n    print('running tests...')\r\n    test_app()\r\n    print('tests passed')\r\n```\r\n\r\nI get the exception:\r\n\r\n```\r\nFile \".../env/lib/python3.8/site-packages/starlette/middleware/base.py\", line 47, in call_next\r\n    assert message[\"type\"] == \"http.response.start\"\r\n```\r\n<details>\r\n  <summary>Full Trackback</summary>\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"error_example.py\", line 41, in <module>\r\n    test_app()\r\n  File \"error_example.py\", line 34, in test_app\r\n    response = client.get('/')\r\n  File \".../env/lib/python3.8/site-packages/requests/sessions.py\", line 543, in get\r\n    return self.request('GET', url, **kwargs)\r\n  File \".../env/lib/python3.8/site-packages/starlette/testclient.py\", line 413, in request\r\n    return super().request(\r\n  File \".../env/lib/python3.8/site-packages/requests/sessions.py\", line 530, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \".../env/lib/python3.8/site-packages/requests/sessions.py\", line 643, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \".../env/lib/python3.8/site-packages/starlette/testclient.py\", line 243, in send\r\n    raise exc from None\r\n  File \".../env/lib/python3.8/site-packages/starlette/testclient.py\", line 240, in send\r\n    loop.run_until_complete(self.app(scope, receive, send))\r\n  File \"/usr/local/Cellar/python@3.8/3.8.1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py\", line 612, in run_until_complete\r\n    return future.result()\r\n  File \".../env/lib/python3.8/site-packages/starlette/applications.py\", line 102, in __call__\r\n    await self.middleware_stack(scope, receive, send)\r\n  File \".../env/lib/python3.8/site-packages/starlette/middleware/errors.py\", line 181, in __call__\r\n    raise exc from None\r\n  File \".../env/lib/python3.8/site-packages/starlette/middleware/errors.py\", line 159, in __call__\r\n    await self.app(scope, receive, _send)\r\n  File \".../env/lib/python3.8/site-packages/starlette/middleware/base.py\", line 25, in __call__\r\n    response = await self.dispatch_func(request, self.call_next)\r\n  File \"error_example.py\", line 22, in dispatch\r\n    response = await call_next(request)\r\n  File \".../env/lib/python3.8/site-packages/starlette/middleware/base.py\", line 48, in call_next\r\n    assert message[\"type\"] == \"http.response.start\"\r\n```\r\n\r\n</details>\r\n\r\nThe value of `message` is:\r\n```\r\n    {\r\n        'type': 'http.response.template',\r\n        'template': <Template 'index.html'>,\r\n        'context': {\r\n            'request': <starlette.requests.Request object at 0x10a72dc70>,\r\n        },\r\n    }\r\n```\r\n\r\nI don't get the error if:\r\n* I run the server with `uvicorn error_example:app`\r\n* I disable the middleware\r\n* I use a standard `Response`, not `templates.TemplateResponse`\r\n\r\nI assume there's some hook to render the response which is being called after middleware, not before somehow.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/882", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/882/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/882/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/882/events", "html_url": "https://github.com/encode/starlette/issues/882", "id": 590125615, "node_id": "MDU6SXNzdWU1OTAxMjU2MTU=", "number": 882, "title": "Relative path used for Jinja2Templates and StaticFiles", "user": {"login": "wh6b", "id": 4650131, "node_id": "MDQ6VXNlcjQ2NTAxMzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/4650131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wh6b", "html_url": "https://github.com/wh6b", "followers_url": "https://api.github.com/users/wh6b/followers", "following_url": "https://api.github.com/users/wh6b/following{/other_user}", "gists_url": "https://api.github.com/users/wh6b/gists{/gist_id}", "starred_url": "https://api.github.com/users/wh6b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wh6b/subscriptions", "organizations_url": "https://api.github.com/users/wh6b/orgs", "repos_url": "https://api.github.com/users/wh6b/repos", "events_url": "https://api.github.com/users/wh6b/events{/privacy}", "received_events_url": "https://api.github.com/users/wh6b/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-30T09:14:53Z", "updated_at": "2020-03-30T10:03:06Z", "closed_at": "2020-03-30T10:03:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nIs it normal that relative paths used to declare Jinja2Templates(directory='relative/path') and StaticFiles('relative/staticdir') are inherited of current directory from which I start the application and not the starlette application directory ?\r\n\r\nTo fix it i wrote,\r\n```python\r\nparent_dir_path = os.path.dirname(os.path.realpath(__file__))\r\nos.chdir(parent_dir_path)\r\n```\r\nand I can declare relative path from the application directory to be independant of OS current directory \r\nBut is this behavior really wished ?\r\n\r\n(if details needed  I launch starlette webapp inside a shell script with \r\n```bash\r\n$ uvicorn myapp:my_app_Starlette_variable\r\n```\r\nmyapp is the /src/app/app package  and my my_app_Starlette_variable is inside a __init__.py )\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/879", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/879/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/879/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/879/events", "html_url": "https://github.com/encode/starlette/issues/879", "id": 589158062, "node_id": "MDU6SXNzdWU1ODkxNTgwNjI=", "number": 879, "title": "Move app specific attributes from HTTPConnection to a mixin", "user": {"login": "alex-oleshkevich", "id": 635848, "node_id": "MDQ6VXNlcjYzNTg0OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/635848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex-oleshkevich", "html_url": "https://github.com/alex-oleshkevich", "followers_url": "https://api.github.com/users/alex-oleshkevich/followers", "following_url": "https://api.github.com/users/alex-oleshkevich/following{/other_user}", "gists_url": "https://api.github.com/users/alex-oleshkevich/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex-oleshkevich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex-oleshkevich/subscriptions", "organizations_url": "https://api.github.com/users/alex-oleshkevich/orgs", "repos_url": "https://api.github.com/users/alex-oleshkevich/repos", "events_url": "https://api.github.com/users/alex-oleshkevich/events{/privacy}", "received_events_url": "https://api.github.com/users/alex-oleshkevich/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-27T14:06:49Z", "updated_at": "2020-03-27T15:54:23Z", "closed_at": "2020-03-27T15:54:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently HTTPConnection class includes methods like \"user\", \"auth\", \"app\" which depend on Starlette's infrastructure. It needs some middleware to set appropriate keys to the scope.\r\n\r\nI suggest moving `app`, `session`, `auth`, `user` from HTTPConnection class into a separate mixin. Then we can add this mixin to HTTP and WebSocket request classes separately. \r\n\r\nThis will let other frameworks inherit HTTPConnection and add own implementations of these features or keep request API clean if they don't need it.\r\n\r\nIf it makes sense I'll be happy to PR it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/877", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/877/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/877/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/877/events", "html_url": "https://github.com/encode/starlette/issues/877", "id": 588267034, "node_id": "MDU6SXNzdWU1ODgyNjcwMzQ=", "number": 877, "title": "API to parse URLs", "user": {"login": "dneuhaeuser-zalando", "id": 37899626, "node_id": "MDQ6VXNlcjM3ODk5NjI2", "avatar_url": "https://avatars2.githubusercontent.com/u/37899626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dneuhaeuser-zalando", "html_url": "https://github.com/dneuhaeuser-zalando", "followers_url": "https://api.github.com/users/dneuhaeuser-zalando/followers", "following_url": "https://api.github.com/users/dneuhaeuser-zalando/following{/other_user}", "gists_url": "https://api.github.com/users/dneuhaeuser-zalando/gists{/gist_id}", "starred_url": "https://api.github.com/users/dneuhaeuser-zalando/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dneuhaeuser-zalando/subscriptions", "organizations_url": "https://api.github.com/users/dneuhaeuser-zalando/orgs", "repos_url": "https://api.github.com/users/dneuhaeuser-zalando/repos", "events_url": "https://api.github.com/users/dneuhaeuser-zalando/events{/privacy}", "received_events_url": "https://api.github.com/users/dneuhaeuser-zalando/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-26T09:15:13Z", "updated_at": "2020-03-27T15:58:37Z", "closed_at": "2020-03-27T15:58:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be great, to have an API to parse URLs without calling the corresponding endpoint.\r\n\r\nWe'd like to have an API in which resources are referred to by URI instead of some id. This means that we occasionally need to parse those, when they occur in a request body. It would be nice not to have to write our own code for parsing those urls.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/874", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/874/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/874/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/874/events", "html_url": "https://github.com/encode/starlette/issues/874", "id": 585775978, "node_id": "MDU6SXNzdWU1ODU3NzU5Nzg=", "number": 874, "title": "Get response body in Middleware", "user": {"login": "rugleb", "id": 26823697, "node_id": "MDQ6VXNlcjI2ODIzNjk3", "avatar_url": "https://avatars3.githubusercontent.com/u/26823697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rugleb", "html_url": "https://github.com/rugleb", "followers_url": "https://api.github.com/users/rugleb/followers", "following_url": "https://api.github.com/users/rugleb/following{/other_user}", "gists_url": "https://api.github.com/users/rugleb/gists{/gist_id}", "starred_url": "https://api.github.com/users/rugleb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rugleb/subscriptions", "organizations_url": "https://api.github.com/users/rugleb/orgs", "repos_url": "https://api.github.com/users/rugleb/repos", "events_url": "https://api.github.com/users/rugleb/events{/privacy}", "received_events_url": "https://api.github.com/users/rugleb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-22T17:58:43Z", "updated_at": "2020-04-13T09:56:26Z", "closed_at": "2020-04-08T16:13:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "How do I get the response body from the `StreamingResponse` object in middleware?\r\n\r\nSimple example:\r\n```\r\nclass AccessMiddleware(base.BaseHTTPMiddleware):\r\n\r\n    async def dispatch(\r\n        self,\r\n        request: Request,\r\n        handler: base.RequestResponseEndpoint,\r\n    ) -> Response:\r\n        response: StreamingResponse = await handler(request)\r\n\r\n        binary = b''\r\n        async for data in response.body_iterator:\r\n            binary += data\r\n        body = binary.decode()\r\n        \r\n        print(body)\r\n\r\n        return response  # Here body is empty\r\n```\r\nIs it possible to copy the `response.body_iterator` generator?  \r\nWhat is the best way to solve the problem of extracting final data (`response body`) and further post-processing?\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/873", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/873/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/873/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/873/events", "html_url": "https://github.com/encode/starlette/issues/873", "id": 585490483, "node_id": "MDU6SXNzdWU1ODU0OTA0ODM=", "number": 873, "title": "Add support for Google Cloud Storage and AWS S3", "user": {"login": "lorddaedra", "id": 26400787, "node_id": "MDQ6VXNlcjI2NDAwNzg3", "avatar_url": "https://avatars1.githubusercontent.com/u/26400787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lorddaedra", "html_url": "https://github.com/lorddaedra", "followers_url": "https://api.github.com/users/lorddaedra/followers", "following_url": "https://api.github.com/users/lorddaedra/following{/other_user}", "gists_url": "https://api.github.com/users/lorddaedra/gists{/gist_id}", "starred_url": "https://api.github.com/users/lorddaedra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lorddaedra/subscriptions", "organizations_url": "https://api.github.com/users/lorddaedra/orgs", "repos_url": "https://api.github.com/users/lorddaedra/repos", "events_url": "https://api.github.com/users/lorddaedra/events{/privacy}", "received_events_url": "https://api.github.com/users/lorddaedra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-21T12:31:32Z", "updated_at": "2020-03-31T10:04:49Z", "closed_at": "2020-03-31T10:04:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://www.starlette.io/staticfiles/\r\n\r\nIt's looks as good idea to add support for private storage buckets.\r\n\r\nIt can be useful, for example, for creating static pypi repository (via dumb-pypi generator) on google cloud bucket and using Starlette as proxy between Google Cloud Storage bucket and end user (with pip or poetry).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/872", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/872/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/872/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/872/events", "html_url": "https://github.com/encode/starlette/issues/872", "id": 585360653, "node_id": "MDU6SXNzdWU1ODUzNjA2NTM=", "number": 872, "title": "How to create a http request from starlette?", "user": {"login": "dulex123", "id": 2333381, "node_id": "MDQ6VXNlcjIzMzMzODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/2333381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dulex123", "html_url": "https://github.com/dulex123", "followers_url": "https://api.github.com/users/dulex123/followers", "following_url": "https://api.github.com/users/dulex123/following{/other_user}", "gists_url": "https://api.github.com/users/dulex123/gists{/gist_id}", "starred_url": "https://api.github.com/users/dulex123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dulex123/subscriptions", "organizations_url": "https://api.github.com/users/dulex123/orgs", "repos_url": "https://api.github.com/users/dulex123/repos", "events_url": "https://api.github.com/users/dulex123/events{/privacy}", "received_events_url": "https://api.github.com/users/dulex123/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-20T22:34:15Z", "updated_at": "2020-03-21T10:19:19Z", "closed_at": "2020-03-21T10:19:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If I need to hit some external GET api, how do I do it from starlette? Or do I use some other library like requests?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/871", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/871/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/871/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/871/events", "html_url": "https://github.com/encode/starlette/issues/871", "id": 585191668, "node_id": "MDU6SXNzdWU1ODUxOTE2Njg=", "number": 871, "title": "Unexpected disconnect when using asyncio.wait()", "user": {"login": "kmani314", "id": 34562820, "node_id": "MDQ6VXNlcjM0NTYyODIw", "avatar_url": "https://avatars1.githubusercontent.com/u/34562820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmani314", "html_url": "https://github.com/kmani314", "followers_url": "https://api.github.com/users/kmani314/followers", "following_url": "https://api.github.com/users/kmani314/following{/other_user}", "gists_url": "https://api.github.com/users/kmani314/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmani314/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmani314/subscriptions", "organizations_url": "https://api.github.com/users/kmani314/orgs", "repos_url": "https://api.github.com/users/kmani314/repos", "events_url": "https://api.github.com/users/kmani314/events{/privacy}", "received_events_url": "https://api.github.com/users/kmani314/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-20T16:36:24Z", "updated_at": "2020-05-14T07:22:46Z", "closed_at": "2020-05-14T07:22:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to listen for data on a websocket while simultaneously doing some work in another function. \r\n```\r\ndata = await websocket.receive_json()\r\nwhile True:\r\n    try:\r\n        done, pending = await asyncio.wait({eval_worker(data, websocket), websocket.receive_json()}, return_when=asyncio.FIRST_COMPLETED)\r\n        # do stuff with done\r\n    except Exception:\r\n        return\r\n```\r\nIt results in this error: ```\r\nERROR:    Task exception was never retrieved\r\nfuture: <Task finished name='Task-9' coro=<WebSocket.receive_json() done, defined at /***/venv/lib/python3.8/site-packages/starlette/websockets.py:94> exception=WebSocketDisconnect(1000)>\r\nTraceback (most recent call last):\r\n  File \"/***/venv/lib/python3.8/site-packages/starlette/websockets.py\", line 98, in receive_json\r\n    self._raise_on_disconnect(message)\r\n  File \"/***/venv/lib/python3.8/site-packages/starlette/websockets.py\", line 80, in _raise_on_disconnect\r\n    raise WebSocketDisconnect(message[\"code\"])\r\nstarlette.websockets.WebSocketDisconnect: 1000```\r\nI passed the websocket object to the function so that it can send data while it is also listening. I understand that this could be problematic, but even when I don't pass the websocket to the function it results in the same disconnect error.\r\nAny insight?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/866", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/866/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/866/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/866/events", "html_url": "https://github.com/encode/starlette/issues/866", "id": 583516486, "node_id": "MDU6SXNzdWU1ODM1MTY0ODY=", "number": 866, "title": "[bug] Invalid cookie name leads to exception", "user": {"login": "aviramha", "id": 41201924, "node_id": "MDQ6VXNlcjQxMjAxOTI0", "avatar_url": "https://avatars0.githubusercontent.com/u/41201924?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aviramha", "html_url": "https://github.com/aviramha", "followers_url": "https://api.github.com/users/aviramha/followers", "following_url": "https://api.github.com/users/aviramha/following{/other_user}", "gists_url": "https://api.github.com/users/aviramha/gists{/gist_id}", "starred_url": "https://api.github.com/users/aviramha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aviramha/subscriptions", "organizations_url": "https://api.github.com/users/aviramha/orgs", "repos_url": "https://api.github.com/users/aviramha/repos", "events_url": "https://api.github.com/users/aviramha/events{/privacy}", "received_events_url": "https://api.github.com/users/aviramha/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-18T07:11:59Z", "updated_at": "2020-03-21T08:56:02Z", "closed_at": "2020-03-21T08:56:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When handling a request with an invalid cookie name (does not conform to RFC2109) starlette raises an exception. i.e iam/cookiename\r\nThis is because Starlette uses Python's stdlib cookie library, which is very strict.\r\nI do understand the strictness, but in real life scenarios you receive such malformed cookies and I want to handle those requests.\r\nMy suggestion for a solution would be to catch those exceptions and ignore the invalid cookie. \r\n** EDIT **\r\nI just realized stdlib is used for the whole cookie header, hence can't ignore only one cookie.\r\nI'll create a PR for ignoring the whole cookie on such case, but maybe we should create our own Cookie/Morsel class and override the methods to ignore such error in the inbound case?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/865", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/865/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/865/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/865/events", "html_url": "https://github.com/encode/starlette/issues/865", "id": 582800389, "node_id": "MDU6SXNzdWU1ODI4MDAzODk=", "number": 865, "title": "got an unexpected keyword argument 'on_startup", "user": {"login": "rajathedgefinity", "id": 58890175, "node_id": "MDQ6VXNlcjU4ODkwMTc1", "avatar_url": "https://avatars2.githubusercontent.com/u/58890175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rajathedgefinity", "html_url": "https://github.com/rajathedgefinity", "followers_url": "https://api.github.com/users/rajathedgefinity/followers", "following_url": "https://api.github.com/users/rajathedgefinity/following{/other_user}", "gists_url": "https://api.github.com/users/rajathedgefinity/gists{/gist_id}", "starred_url": "https://api.github.com/users/rajathedgefinity/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rajathedgefinity/subscriptions", "organizations_url": "https://api.github.com/users/rajathedgefinity/orgs", "repos_url": "https://api.github.com/users/rajathedgefinity/repos", "events_url": "https://api.github.com/users/rajathedgefinity/events{/privacy}", "received_events_url": "https://api.github.com/users/rajathedgefinity/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-17T07:05:59Z", "updated_at": "2020-03-17T10:33:25Z", "closed_at": "2020-03-17T10:33:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "app = Starlette(debug=True, routes=routes, on_startup = [startup])\r\n\r\ndocumentation says to use on_startup, but it's not available in  app when i see with the help of app.\r\ngot an unexpected keyword argument 'on_startup", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/864", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/864/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/864/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/864/events", "html_url": "https://github.com/encode/starlette/issues/864", "id": 582615694, "node_id": "MDU6SXNzdWU1ODI2MTU2OTQ=", "number": 864, "title": "Is it possible to disable access logging on certain endpoints?", "user": {"login": "taybin", "id": 58964, "node_id": "MDQ6VXNlcjU4OTY0", "avatar_url": "https://avatars2.githubusercontent.com/u/58964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taybin", "html_url": "https://github.com/taybin", "followers_url": "https://api.github.com/users/taybin/followers", "following_url": "https://api.github.com/users/taybin/following{/other_user}", "gists_url": "https://api.github.com/users/taybin/gists{/gist_id}", "starred_url": "https://api.github.com/users/taybin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taybin/subscriptions", "organizations_url": "https://api.github.com/users/taybin/orgs", "repos_url": "https://api.github.com/users/taybin/repos", "events_url": "https://api.github.com/users/taybin/events{/privacy}", "received_events_url": "https://api.github.com/users/taybin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-03-16T21:42:33Z", "updated_at": "2020-07-02T15:32:41Z", "closed_at": "2020-03-16T22:40:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a /health endpoint that is checked every minute and it bloats the logs.  I'd like to turn off that off, but keep logging the accesses to other endpoints (and especially any exceptions).  Is that possible currently?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/863", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/863/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/863/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/863/events", "html_url": "https://github.com/encode/starlette/issues/863", "id": 581763449, "node_id": "MDU6SXNzdWU1ODE3NjM0NDk=", "number": 863, "title": "[QUESTION] Starlette async usage", "user": {"login": "crotaoryx", "id": 45571376, "node_id": "MDQ6VXNlcjQ1NTcxMzc2", "avatar_url": "https://avatars3.githubusercontent.com/u/45571376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crotaoryx", "html_url": "https://github.com/crotaoryx", "followers_url": "https://api.github.com/users/crotaoryx/followers", "following_url": "https://api.github.com/users/crotaoryx/following{/other_user}", "gists_url": "https://api.github.com/users/crotaoryx/gists{/gist_id}", "starred_url": "https://api.github.com/users/crotaoryx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crotaoryx/subscriptions", "organizations_url": "https://api.github.com/users/crotaoryx/orgs", "repos_url": "https://api.github.com/users/crotaoryx/repos", "events_url": "https://api.github.com/users/crotaoryx/events{/privacy}", "received_events_url": "https://api.github.com/users/crotaoryx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-15T17:55:40Z", "updated_at": "2020-03-16T11:14:06Z", "closed_at": "2020-03-16T11:14:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys! I'm sorry for stupid question in advance, but it seems this place has more starlette developers then any other and i hope someone can help me. I'm just beginner with starlette/async python and trying understand how it works. I wrote this simple code:\r\n\r\n```python\r\nfrom starlette.applications import Starlette\r\nfrom starlette.responses import JSONResponse\r\nfrom starlette.routing import Route\r\nfrom datetime import datetime\r\nimport asyncio\r\n\r\n\r\nasync def test():\r\n    await asyncio.sleep(2)\r\n\r\n\r\nasync def page(request):\r\n    check = []\r\n    check.append(str(datetime.now().strftime('%H:%M:%S')))\r\n    await test()\r\n    await test()\r\n    await test()\r\n    await test()\r\n    check.append(str(datetime.now().strftime('%H:%M:%S')))\r\n\r\n    return JSONResponse('---'.join(check))\r\n\r\n\r\napp = Starlette(debug=True, routes=[\r\n    Route('/', page),\r\n])\r\n\r\nif __name__ == \"__main__\":\r\n    import uvicorn\r\n    uvicorn.run(app, port=8000, host='0.0.0.0')\r\n\r\n```\r\n\r\nand how i think this will work - starlette receives request, run \"page\" function and inside i have 4 \"test\" functions with sleep(2). I thought that it will take 2 seconds to complete, but instead of 2 seconds i see 8, like it works as usual sync code.\r\nWhat is my mistake? I'm really appreciate  any help)\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/861", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/861/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/861/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/861/events", "html_url": "https://github.com/encode/starlette/issues/861", "id": 579558073, "node_id": "MDU6SXNzdWU1Nzk1NTgwNzM=", "number": 861, "title": "How is the table created in the database documentation example?", "user": {"login": "gduverger", "id": 93743, "node_id": "MDQ6VXNlcjkzNzQz", "avatar_url": "https://avatars2.githubusercontent.com/u/93743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gduverger", "html_url": "https://github.com/gduverger", "followers_url": "https://api.github.com/users/gduverger/followers", "following_url": "https://api.github.com/users/gduverger/following{/other_user}", "gists_url": "https://api.github.com/users/gduverger/gists{/gist_id}", "starred_url": "https://api.github.com/users/gduverger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gduverger/subscriptions", "organizations_url": "https://api.github.com/users/gduverger/orgs", "repos_url": "https://api.github.com/users/gduverger/repos", "events_url": "https://api.github.com/users/gduverger/events{/privacy}", "received_events_url": "https://api.github.com/users/gduverger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-11T21:33:47Z", "updated_at": "2020-03-16T15:40:52Z", "closed_at": "2020-03-16T15:40:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the database documentation (https://github.com/encode/starlette/blob/master/docs/database.md), I fail to understand where is the table actually created. When I try to reproduce the example (with `sqlite`), I get: `sqlite3.OperationalError: no such table: notes`. I'm probably missing an obvious piece. Help would be greatly appreciated. Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/860", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/860/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/860/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/860/events", "html_url": "https://github.com/encode/starlette/issues/860", "id": 579235689, "node_id": "MDU6SXNzdWU1NzkyMzU2ODk=", "number": 860, "title": "QueryParams support for parameter without value", "user": {"login": "bendikro", "id": 84580, "node_id": "MDQ6VXNlcjg0NTgw", "avatar_url": "https://avatars2.githubusercontent.com/u/84580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bendikro", "html_url": "https://github.com/bendikro", "followers_url": "https://api.github.com/users/bendikro/followers", "following_url": "https://api.github.com/users/bendikro/following{/other_user}", "gists_url": "https://api.github.com/users/bendikro/gists{/gist_id}", "starred_url": "https://api.github.com/users/bendikro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bendikro/subscriptions", "organizations_url": "https://api.github.com/users/bendikro/orgs", "repos_url": "https://api.github.com/users/bendikro/repos", "events_url": "https://api.github.com/users/bendikro/events{/privacy}", "received_events_url": "https://api.github.com/users/bendikro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-11T12:41:27Z", "updated_at": "2020-03-11T13:11:07Z", "closed_at": "2020-03-11T13:11:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "[QueryParams](https://github.com/encode/starlette/blob/852181a5c0aa25c5e14574a21acdb3c10acb7839/starlette/datastructures.py#L380) currently supports only query parameters with a value, however, query parameters without a value are still be valid and should be supported?\r\n\r\n```\r\n#!/usr/bin/env python\r\nfrom starlette.datastructures import QueryParams\r\n\r\nwith_value = QueryParams('param=value')\r\nprint(\"with_value:\", with_value)\r\n\r\nwithout_value = QueryParams('param')\r\nprint(\"without_value:\", without_value)\r\n```\r\nResult:\r\n```\r\nwith_value: param=value\r\nwithout_value:\r\n```\r\n\r\nExpected result:\r\n```\r\nwith_value: param=value\r\nwithout_value: param\r\n```\r\n\r\nAny comments on this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/859", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/859/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/859/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/859/events", "html_url": "https://github.com/encode/starlette/issues/859", "id": 579181454, "node_id": "MDU6SXNzdWU1NzkxODE0NTQ=", "number": 859, "title": "Return a TemplateResponse  with an `url_for` from middleware", "user": {"login": "phineas0fog", "id": 24586217, "node_id": "MDQ6VXNlcjI0NTg2MjE3", "avatar_url": "https://avatars2.githubusercontent.com/u/24586217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phineas0fog", "html_url": "https://github.com/phineas0fog", "followers_url": "https://api.github.com/users/phineas0fog/followers", "following_url": "https://api.github.com/users/phineas0fog/following{/other_user}", "gists_url": "https://api.github.com/users/phineas0fog/gists{/gist_id}", "starred_url": "https://api.github.com/users/phineas0fog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phineas0fog/subscriptions", "organizations_url": "https://api.github.com/users/phineas0fog/orgs", "repos_url": "https://api.github.com/users/phineas0fog/repos", "events_url": "https://api.github.com/users/phineas0fog/events{/privacy}", "received_events_url": "https://api.github.com/users/phineas0fog/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-11T11:04:56Z", "updated_at": "2020-04-30T14:24:32Z", "closed_at": "2020-04-30T14:24:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello all :)\r\n\r\nI want to make a middleware that redirect to the login page if the request has no session (with the session middleware).\r\n\r\nSo I do this:\r\n\r\n```python\r\nclass AuthMiddleware(BaseHTTPMiddleware):\r\n    async def __call__(self, scope, receive, send):\r\n\r\n        request = Request(scope, receive=receive)\r\n\r\n        return templates.TemplateResponse(\"login.html\", {\r\n            \"request\": request,\r\n            \"errormsg\": \"You had to login to continue\"\r\n        })\r\n\r\n```\r\n\r\nBut I got this error: \r\n```\r\n<path_to_venv>/starlette/requests.py\", line 136, in url_for\r\n    router = self.scope[\"router\"]\r\nKeyError: 'router'\r\n```\r\n\r\nSo what I need to do to make the `url_for` working from here ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/857", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/857/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/857/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/857/events", "html_url": "https://github.com/encode/starlette/issues/857", "id": 577040793, "node_id": "MDU6SXNzdWU1NzcwNDA3OTM=", "number": 857, "title": "Content-Type header must be allowed explicitly for CORS but docs say otherwise", "user": {"login": "chbndrhnns", "id": 7534547, "node_id": "MDQ6VXNlcjc1MzQ1NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7534547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chbndrhnns", "html_url": "https://github.com/chbndrhnns", "followers_url": "https://api.github.com/users/chbndrhnns/followers", "following_url": "https://api.github.com/users/chbndrhnns/following{/other_user}", "gists_url": "https://api.github.com/users/chbndrhnns/gists{/gist_id}", "starred_url": "https://api.github.com/users/chbndrhnns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chbndrhnns/subscriptions", "organizations_url": "https://api.github.com/users/chbndrhnns/orgs", "repos_url": "https://api.github.com/users/chbndrhnns/repos", "events_url": "https://api.github.com/users/chbndrhnns/events{/privacy}", "received_events_url": "https://api.github.com/users/chbndrhnns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-06T16:28:44Z", "updated_at": "2020-04-13T15:48:14Z", "closed_at": "2020-04-13T15:48:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to [1], \"The Accept, Accept-Language, Content-Language and Content-Type headers are always allowed for CORS requests.\"\r\n\r\nThis is not the currently implemented behavior according to the test below.\r\n\r\n```python\r\ndef test_cors_always_allow_content_type():\r\n    app = Starlette()\r\n\r\n    app.add_middleware(\r\n        CORSMiddleware,\r\n        allow_origins=[\"https://example.org\"],\r\n        allow_headers=[],\r\n    )\r\n\r\n    @app.route(\"/\")\r\n    def homepage(request):\r\n        return PlainTextResponse(\"Homepage\", status_code=200)\r\n\r\n    client = TestClient(app)\r\n\r\n    # Test pre-flight response\r\n    headers = {\r\n        \"Origin\": \"https://example.org\",\r\n        \"Access-Control-Request-Method\": \"GET\",\r\n        \"Access-Control-Request-Headers\": \"Content-Type\",\r\n    }\r\n    response = client.options(\"/\", headers=headers)\r\n    assert response.status_code == 200\r\n    assert response.text == \"OK\"\r\n    assert response.headers[\"access-control-allow-origin\"] == \"https://example.org\"\r\n    assert response.headers[\"access-control-allow-headers\"] == \"Content-Type\"\r\n```\r\n\r\nThe test fails with\r\n\r\n```\r\n        }\r\n        response = client.options(\"/\", headers=headers)\r\n>       assert response.status_code == 200\r\nE       assert 400 == 200\r\nE        +  where 400 = <Response [400]>.status_code\r\n\r\ntests/middleware/test_cors.py:115: AssertionError\r\n```\r\n\r\n[1] https://www.starlette.io/middleware/#corsmiddleware", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/856", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/856/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/856/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/856/events", "html_url": "https://github.com/encode/starlette/issues/856", "id": 576734842, "node_id": "MDU6SXNzdWU1NzY3MzQ4NDI=", "number": 856, "title": "UJSONResponse and JSONResponse produce different results", "user": {"login": "Spacehug", "id": 18374567, "node_id": "MDQ6VXNlcjE4Mzc0NTY3", "avatar_url": "https://avatars0.githubusercontent.com/u/18374567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Spacehug", "html_url": "https://github.com/Spacehug", "followers_url": "https://api.github.com/users/Spacehug/followers", "following_url": "https://api.github.com/users/Spacehug/following{/other_user}", "gists_url": "https://api.github.com/users/Spacehug/gists{/gist_id}", "starred_url": "https://api.github.com/users/Spacehug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Spacehug/subscriptions", "organizations_url": "https://api.github.com/users/Spacehug/orgs", "repos_url": "https://api.github.com/users/Spacehug/repos", "events_url": "https://api.github.com/users/Spacehug/events{/privacy}", "received_events_url": "https://api.github.com/users/Spacehug/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-03-06T06:53:32Z", "updated_at": "2020-03-09T15:20:49Z", "closed_at": "2020-03-09T15:20:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "UJSONResponse uses `ujson.dumps(content, ensure_ascii=False)`, but default for ujson is to also escape forward slashes. The result is that UJSONResponse and JSONResponse produce different results:\r\n```\r\n>>> import json\r\n>>> import ujson\r\n>>> s = \"https://google.com/\"\r\n>>> print(json.dumps(s))\r\n\"https://google.com/\"\r\n>>> print(ujson.dumps(s))\r\n\"https:\\/\\/google.com\\/\"\r\n```\r\n\r\n`escape_forward_slashes=False` can be added to UJSONResponse to fix that:\r\n```\r\nclass UJSONResponse(JSONResponse):\r\n    media_type = \"application/json\"\r\n\r\n    def render(self, content: typing.Any) -> bytes:\r\n        assert ujson is not None, \"ujson must be installed to use UJSONResponse\"\r\n        return ujson.dumps(content, ensure_ascii=False, escape_forward_slashes=False).encode(\"utf-8\")\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/855", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/855/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/855/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/855/events", "html_url": "https://github.com/encode/starlette/issues/855", "id": 575905702, "node_id": "MDU6SXNzdWU1NzU5MDU3MDI=", "number": 855, "title": "Selective Signing - Session Middleware", "user": {"login": "AndTheDaysGoBy", "id": 11529426, "node_id": "MDQ6VXNlcjExNTI5NDI2", "avatar_url": "https://avatars2.githubusercontent.com/u/11529426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndTheDaysGoBy", "html_url": "https://github.com/AndTheDaysGoBy", "followers_url": "https://api.github.com/users/AndTheDaysGoBy/followers", "following_url": "https://api.github.com/users/AndTheDaysGoBy/following{/other_user}", "gists_url": "https://api.github.com/users/AndTheDaysGoBy/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndTheDaysGoBy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndTheDaysGoBy/subscriptions", "organizations_url": "https://api.github.com/users/AndTheDaysGoBy/orgs", "repos_url": "https://api.github.com/users/AndTheDaysGoBy/repos", "events_url": "https://api.github.com/users/AndTheDaysGoBy/events{/privacy}", "received_events_url": "https://api.github.com/users/AndTheDaysGoBy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-05T00:16:48Z", "updated_at": "2020-03-05T10:28:08Z", "closed_at": "2020-03-05T10:28:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Am I correct in that the session middleware does not allow for selective encryption? I do not think so due to https://github.com/encode/starlette/blob/f9fad62b45380c6a3d0105bdc25d45342caa010b/starlette/middleware/sessions.py#L55 but I though I'd ask.\r\nE.g. I want to return a token and a username to my frontend application, i.e. `request.session = {'username': 'Bob', 'token': 'random'}`. I want my frontend application to be able to render the username on the screen, however, it has no access to this value (since it's encrypted).\r\nI could give my frontend the secret key used by the backend, but that sort of defeats the purpose of signing, in my view. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/851", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/851/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/851/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/851/events", "html_url": "https://github.com/encode/starlette/issues/851", "id": 573467353, "node_id": "MDU6SXNzdWU1NzM0NjczNTM=", "number": 851, "title": "socketio, webrtc and custome message support?", "user": {"login": "benjamin-yin001", "id": 44402456, "node_id": "MDQ6VXNlcjQ0NDAyNDU2", "avatar_url": "https://avatars2.githubusercontent.com/u/44402456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benjamin-yin001", "html_url": "https://github.com/benjamin-yin001", "followers_url": "https://api.github.com/users/benjamin-yin001/followers", "following_url": "https://api.github.com/users/benjamin-yin001/following{/other_user}", "gists_url": "https://api.github.com/users/benjamin-yin001/gists{/gist_id}", "starred_url": "https://api.github.com/users/benjamin-yin001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benjamin-yin001/subscriptions", "organizations_url": "https://api.github.com/users/benjamin-yin001/orgs", "repos_url": "https://api.github.com/users/benjamin-yin001/repos", "events_url": "https://api.github.com/users/benjamin-yin001/events{/privacy}", "received_events_url": "https://api.github.com/users/benjamin-yin001/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-01T02:58:09Z", "updated_at": "2020-03-02T09:59:59Z", "closed_at": "2020-03-02T09:59:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why not make a general message processing framework? like netty in java.\r\nhttp, websocket, webrtc... are all just message format.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/850", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/850/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/850/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/850/events", "html_url": "https://github.com/encode/starlette/issues/850", "id": 573405893, "node_id": "MDU6SXNzdWU1NzM0MDU4OTM=", "number": 850, "title": "Distributing `LICENSE.md` using `data_files` can be problematic.", "user": {"login": "slavaGanzin", "id": 1011721, "node_id": "MDQ6VXNlcjEwMTE3MjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1011721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slavaGanzin", "html_url": "https://github.com/slavaGanzin", "followers_url": "https://api.github.com/users/slavaGanzin/followers", "following_url": "https://api.github.com/users/slavaGanzin/following{/other_user}", "gists_url": "https://api.github.com/users/slavaGanzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/slavaGanzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slavaGanzin/subscriptions", "organizations_url": "https://api.github.com/users/slavaGanzin/orgs", "repos_url": "https://api.github.com/users/slavaGanzin/repos", "events_url": "https://api.github.com/users/slavaGanzin/events{/privacy}", "received_events_url": "https://api.github.com/users/slavaGanzin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-29T20:29:14Z", "updated_at": "2020-04-15T11:57:57Z", "closed_at": "2020-04-15T11:23:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello. While installing in virtualenv I got:\r\n```\r\npip install starlette\r\n\r\nERROR: Could not install packages due to an EnvironmentError: [Errno 13] Permission denied: '/usr/LICENSE.md'\r\nConsider using the `--user` option or check the permissions.\r\n```\r\n\r\nWhy in the hell you should write your license in my /usr? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/846", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/846/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/846/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/846/events", "html_url": "https://github.com/encode/starlette/issues/846", "id": 571630859, "node_id": "MDU6SXNzdWU1NzE2MzA4NTk=", "number": 846, "title": "@requires with @app.route order matters", "user": {"login": "rostrovsky", "id": 13874614, "node_id": "MDQ6VXNlcjEzODc0NjE0", "avatar_url": "https://avatars2.githubusercontent.com/u/13874614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rostrovsky", "html_url": "https://github.com/rostrovsky", "followers_url": "https://api.github.com/users/rostrovsky/followers", "following_url": "https://api.github.com/users/rostrovsky/following{/other_user}", "gists_url": "https://api.github.com/users/rostrovsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rostrovsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rostrovsky/subscriptions", "organizations_url": "https://api.github.com/users/rostrovsky/orgs", "repos_url": "https://api.github.com/users/rostrovsky/repos", "events_url": "https://api.github.com/users/rostrovsky/events{/privacy}", "received_events_url": "https://api.github.com/users/rostrovsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-26T20:13:48Z", "updated_at": "2020-03-04T11:12:47Z", "closed_at": "2020-03-04T11:12:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "When `@requires` decorator is used along with `@app.route`, their order matters. Wrong order causes lack of authorization check.\r\n\r\nI am using Starlette `0.13.2`\r\n\r\n**Works correctly:**\r\n```python\r\n@app.route(\"/data\", methods=[\"GET\"])\r\n@requires(\"authenticated\")\r\nasync def data(request):\r\n    # ...\r\n```\r\n**Doesn't work (allows unauthorized access):**\r\n```python\r\n@requires(\"authenticated\")\r\n@app.route(\"/data\", methods=[\"GET\"])\r\nasync def data(request):\r\n   # ...\r\n```\r\n\r\nI am not sure if this is something that can be easily fixed. If not maybe it should be marked as warning in documentation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/844", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/844/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/844/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/844/events", "html_url": "https://github.com/encode/starlette/issues/844", "id": 569606066, "node_id": "MDU6SXNzdWU1Njk2MDYwNjY=", "number": 844, "title": "Unclear how to add middleware to a subset of routes", "user": {"login": "akdor1154", "id": 6732831, "node_id": "MDQ6VXNlcjY3MzI4MzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/6732831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akdor1154", "html_url": "https://github.com/akdor1154", "followers_url": "https://api.github.com/users/akdor1154/followers", "following_url": "https://api.github.com/users/akdor1154/following{/other_user}", "gists_url": "https://api.github.com/users/akdor1154/gists{/gist_id}", "starred_url": "https://api.github.com/users/akdor1154/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akdor1154/subscriptions", "organizations_url": "https://api.github.com/users/akdor1154/orgs", "repos_url": "https://api.github.com/users/akdor1154/repos", "events_url": "https://api.github.com/users/akdor1154/events{/privacy}", "received_events_url": "https://api.github.com/users/akdor1154/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-24T02:29:17Z", "updated_at": "2020-02-24T10:00:09Z", "closed_at": "2020-02-24T10:00:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Middleware seems to be designed to apply to my app as a whole and not to certain routes.\r\n\r\nUse case 1: I'd like to have CORS behaviour be different depending on which route gets hit (frontend or api). Presently this seems impossible (unless I'm mistaken?)\r\nUse case 2: (you may consider this one to be a bit dodgy): I'd like to write my auth layer as a custom middleware and not using Starlette's Auth system, and I don't want to have to re-implement the @requires system.\r\n\r\nEDIT: Sorry, looks like a dupe of #587 .", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/842", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/842/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/842/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/842/events", "html_url": "https://github.com/encode/starlette/issues/842", "id": 568973070, "node_id": "MDU6SXNzdWU1Njg5NzMwNzA=", "number": 842, "title": "NoMatchFound when including router", "user": {"login": "horseinthesky", "id": 19948672, "node_id": "MDQ6VXNlcjE5OTQ4Njcy", "avatar_url": "https://avatars3.githubusercontent.com/u/19948672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/horseinthesky", "html_url": "https://github.com/horseinthesky", "followers_url": "https://api.github.com/users/horseinthesky/followers", "following_url": "https://api.github.com/users/horseinthesky/following{/other_user}", "gists_url": "https://api.github.com/users/horseinthesky/gists{/gist_id}", "starred_url": "https://api.github.com/users/horseinthesky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/horseinthesky/subscriptions", "organizations_url": "https://api.github.com/users/horseinthesky/orgs", "repos_url": "https://api.github.com/users/horseinthesky/repos", "events_url": "https://api.github.com/users/horseinthesky/events{/privacy}", "received_events_url": "https://api.github.com/users/horseinthesky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-21T14:01:45Z", "updated_at": "2020-02-24T10:41:28Z", "closed_at": "2020-02-24T10:41:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\nI am not sure where the problem is as I've checked #654 and #687 but here is what I have.\r\n\r\nApp entry point:\r\n```\r\nimport uvicorn\r\n\r\nfrom fastapi import FastAPI\r\nfrom api import vlantoggler_api_router\r\nfrom views import vlantoggler_web_router\r\n\r\napp = FastAPI(\r\n    title='Yandex.Cloud Netinfra API',\r\n    description='A bundled API for Yandex.Cloud Netinfra team tools',\r\n)\r\napp.include_router(vlantoggler_api_router,\r\n                   prefix='/vlantoggler/api')\r\napp.include_router(vlantoggler_web_router,\r\n                   prefix='/vlantoggler')\r\n\r\nif __name__ == \"__main__\":\r\n    uvicorn.run(app, loop='uvloop', log_level='debug')\r\n```\r\n\r\nAn API (`fastapi.routing.APIRouter`):\r\n```\r\n...\r\n\r\nvlantoggler_api_router = APIRouter(\r\n    # title='Yandex.Cloud Netinfra API',\r\n    # description='A bundled API for Yandex.Cloud Netinfra team tools',\r\n    routes=[\r\n        APIRoute('/', check, methods=['GET'], tags=['VlanToggler'],\r\n                 name='Get current interface state',\r\n                 # summary='String replaces function name AND name on Swagger API page',\r\n                 description='ToR and Interface names are validated and current interface state is returned',\r\n                 response_description='Successfully got interface state',\r\n                 response_class=JSONResponse,\r\n                 response_model=Success,\r\n                 responses={**get_responses}\r\n                 ),\r\n        APIRoute('/', toggle, methods=['POST'], tags=['VlanToggler'],\r\n                 name='Switch interface state',\r\n                 description='ToR and Interface names are validated and ToR interface is toggled to desired state',\r\n                 response_description='Interface successfully switched',\r\n                 response_class=JSONResponse,\r\n                 response_model=Success,\r\n                 responses={**post_responses},\r\n                 ),\r\n    ],\r\n)\r\n```\r\n\r\nAnd view (`starlette.routing.Router`):\r\n```\r\nvlantoggler_web_router = Router(\r\n    [\r\n        Route('/', home, methods=['GET', 'POST']),\r\n        Mount('/statics', statics, name='static'),\r\n    ],\r\n)\r\n```\r\n\r\nWhen I run the app my API works no issues but `http://localhost:8000/vlantoggler/` raises an `starlette.routing.NoMatchFound`.\r\n\r\nIs there a bug or if I do something wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/840", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/840/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/840/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/840/events", "html_url": "https://github.com/encode/starlette/issues/840", "id": 568517076, "node_id": "MDU6SXNzdWU1Njg1MTcwNzY=", "number": 840, "title": "Return 401 on authentication error", "user": {"login": "Colin-b", "id": 7591933, "node_id": "MDQ6VXNlcjc1OTE5MzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/7591933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Colin-b", "html_url": "https://github.com/Colin-b", "followers_url": "https://api.github.com/users/Colin-b/followers", "following_url": "https://api.github.com/users/Colin-b/following{/other_user}", "gists_url": "https://api.github.com/users/Colin-b/gists{/gist_id}", "starred_url": "https://api.github.com/users/Colin-b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Colin-b/subscriptions", "organizations_url": "https://api.github.com/users/Colin-b/orgs", "repos_url": "https://api.github.com/users/Colin-b/repos", "events_url": "https://api.github.com/users/Colin-b/events{/privacy}", "received_events_url": "https://api.github.com/users/Colin-b/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-20T19:24:11Z", "updated_at": "2020-02-24T09:45:16Z", "closed_at": "2020-02-24T09:45:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Shouldn't the default return code on authentication failure be a 401 instead of a 400? https://github.com/encode/starlette/blob/78f7095d7e254940fe242e72055f3d0d7883b405/starlette/middleware/authentication.py#L52\r\n\r\nUnless this is because you cannot know what to send back in WWW-Authenticate header ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/836", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/836/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/836/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/836/events", "html_url": "https://github.com/encode/starlette/issues/836", "id": 567943937, "node_id": "MDU6SXNzdWU1Njc5NDM5Mzc=", "number": 836, "title": "Is it possible to extract the number of in-flight requests?", "user": {"login": "deliahu", "id": 808475, "node_id": "MDQ6VXNlcjgwODQ3NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/808475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deliahu", "html_url": "https://github.com/deliahu", "followers_url": "https://api.github.com/users/deliahu/followers", "following_url": "https://api.github.com/users/deliahu/following{/other_user}", "gists_url": "https://api.github.com/users/deliahu/gists{/gist_id}", "starred_url": "https://api.github.com/users/deliahu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deliahu/subscriptions", "organizations_url": "https://api.github.com/users/deliahu/orgs", "repos_url": "https://api.github.com/users/deliahu/repos", "events_url": "https://api.github.com/users/deliahu/events{/privacy}", "received_events_url": "https://api.github.com/users/deliahu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-20T00:01:34Z", "updated_at": "2020-02-20T17:48:40Z", "closed_at": "2020-02-20T09:59:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to extract the total number of in-flight requests (i.e. the number of requests that have been received and not yet responded to)?\r\n\r\nIf so, how can it be consumed? E.g. can I create an endpoint like /requests which responds with the number? Or perhaps a cron task which can query the number so I could send it to a stats database?\r\n\r\nFor context, I'd like to trigger autoscaling events based on the number of in-flight requests.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/831", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/831/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/831/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/831/events", "html_url": "https://github.com/encode/starlette/issues/831", "id": 567059434, "node_id": "MDU6SXNzdWU1NjcwNTk0MzQ=", "number": 831, "title": "Authentication Middleware Default Required", "user": {"login": "jimcarreer", "id": 433092, "node_id": "MDQ6VXNlcjQzMzA5Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/433092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimcarreer", "html_url": "https://github.com/jimcarreer", "followers_url": "https://api.github.com/users/jimcarreer/followers", "following_url": "https://api.github.com/users/jimcarreer/following{/other_user}", "gists_url": "https://api.github.com/users/jimcarreer/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimcarreer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimcarreer/subscriptions", "organizations_url": "https://api.github.com/users/jimcarreer/orgs", "repos_url": "https://api.github.com/users/jimcarreer/repos", "events_url": "https://api.github.com/users/jimcarreer/events{/privacy}", "received_events_url": "https://api.github.com/users/jimcarreer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-18T17:53:03Z", "updated_at": "2020-02-19T10:54:55Z", "closed_at": "2020-02-19T10:54:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there anyway I can default all endpoints to require authentication instead of explicitly requiring it on every endpoint?  I mean a use case for most applications is that only a small subset of endpoints **do not** require authentication, and I haven't yet found documentation that lets me say \"by default an endpoint should require authentication, and only when annotated with `@somedecorator` should a  no authentication be allowed\".  This was extremely easy to do in flask.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/830", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/830/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/830/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/830/events", "html_url": "https://github.com/encode/starlette/issues/830", "id": 566532474, "node_id": "MDU6SXNzdWU1NjY1MzI0NzQ=", "number": 830, "title": "Channel to discuss contribution/feature ideas?", "user": {"login": "Kamforka", "id": 16663089, "node_id": "MDQ6VXNlcjE2NjYzMDg5", "avatar_url": "https://avatars2.githubusercontent.com/u/16663089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kamforka", "html_url": "https://github.com/Kamforka", "followers_url": "https://api.github.com/users/Kamforka/followers", "following_url": "https://api.github.com/users/Kamforka/following{/other_user}", "gists_url": "https://api.github.com/users/Kamforka/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kamforka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kamforka/subscriptions", "organizations_url": "https://api.github.com/users/Kamforka/orgs", "repos_url": "https://api.github.com/users/Kamforka/repos", "events_url": "https://api.github.com/users/Kamforka/events{/privacy}", "received_events_url": "https://api.github.com/users/Kamforka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-17T21:52:29Z", "updated_at": "2020-02-19T10:45:17Z", "closed_at": "2020-02-19T10:37:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi folks,\r\n\r\nI'm just interested if there is an official channel to discuss enhancements and new features for starlette other than github issues?\r\n\r\nIs there an already established Slack/Discord/Gitter channel for such purposes?\r\n\r\nIf not then I think it would totally make sense to share PoCs and premature ideas in one of those rather than polluting the threads in here?\r\n\r\nWhat do you think?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/828", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/828/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/828/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/828/events", "html_url": "https://github.com/encode/starlette/issues/828", "id": 566048186, "node_id": "MDU6SXNzdWU1NjYwNDgxODY=", "number": 828, "title": "Set-Cookie header should not be sent every time", "user": {"login": "JokerQyou", "id": 1465267, "node_id": "MDQ6VXNlcjE0NjUyNjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1465267?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JokerQyou", "html_url": "https://github.com/JokerQyou", "followers_url": "https://api.github.com/users/JokerQyou/followers", "following_url": "https://api.github.com/users/JokerQyou/following{/other_user}", "gists_url": "https://api.github.com/users/JokerQyou/gists{/gist_id}", "starred_url": "https://api.github.com/users/JokerQyou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JokerQyou/subscriptions", "organizations_url": "https://api.github.com/users/JokerQyou/orgs", "repos_url": "https://api.github.com/users/JokerQyou/repos", "events_url": "https://api.github.com/users/JokerQyou/events{/privacy}", "received_events_url": "https://api.github.com/users/JokerQyou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-17T04:26:46Z", "updated_at": "2020-02-17T10:26:14Z", "closed_at": "2020-02-17T10:26:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've noticed once the builtin `SessionMiddleware` is used and you've got something stored in session, the `Set-Cookie` header will be included in the response headers every time (related starlette code [here](https://github.com/encode/starlette/blob/5f4fc85541f44013d1ed40fb77eb772db50fe02b/starlette/middleware/sessions.py#L53)), even when the session data is not changed at all.\r\n\r\nI think this header should only be sent back to the client when the session data is modified. As far as I know, Flask is behaving as expected, see their code [here](https://github.com/pallets/flask/blob/200ce9bd39c70a7782ef8ace0338ad71dbdb175d/src/flask/sessions.py#L278).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/824", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/824/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/824/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/824/events", "html_url": "https://github.com/encode/starlette/issues/824", "id": 562229950, "node_id": "MDU6SXNzdWU1NjIyMjk5NTA=", "number": 824, "title": "Question: does starlette work with UDP?", "user": {"login": "kllr", "id": 22686996, "node_id": "MDQ6VXNlcjIyNjg2OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/22686996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kllr", "html_url": "https://github.com/kllr", "followers_url": "https://api.github.com/users/kllr/followers", "following_url": "https://api.github.com/users/kllr/following{/other_user}", "gists_url": "https://api.github.com/users/kllr/gists{/gist_id}", "starred_url": "https://api.github.com/users/kllr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kllr/subscriptions", "organizations_url": "https://api.github.com/users/kllr/orgs", "repos_url": "https://api.github.com/users/kllr/repos", "events_url": "https://api.github.com/users/kllr/events{/privacy}", "received_events_url": "https://api.github.com/users/kllr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-09T19:58:20Z", "updated_at": "2020-02-10T12:26:04Z", "closed_at": "2020-02-10T12:26:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI've got a lot of IoT devices that talk UDP. When a message is received I want to sent the message instantly to active app users using websockets.\r\n\r\nIs there a possibility to get this working with starlette? Anyone experience with this using Starlette?\r\n\r\nkind regards,", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/823", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/823/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/823/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/823/events", "html_url": "https://github.com/encode/starlette/issues/823", "id": 562111633, "node_id": "MDU6SXNzdWU1NjIxMTE2MzM=", "number": 823, "title": "Mount requires trailing '/', while Route does not.", "user": {"login": "jwtrhs", "id": 1475566, "node_id": "MDQ6VXNlcjE0NzU1NjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1475566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwtrhs", "html_url": "https://github.com/jwtrhs", "followers_url": "https://api.github.com/users/jwtrhs/followers", "following_url": "https://api.github.com/users/jwtrhs/following{/other_user}", "gists_url": "https://api.github.com/users/jwtrhs/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwtrhs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwtrhs/subscriptions", "organizations_url": "https://api.github.com/users/jwtrhs/orgs", "repos_url": "https://api.github.com/users/jwtrhs/repos", "events_url": "https://api.github.com/users/jwtrhs/events{/privacy}", "received_events_url": "https://api.github.com/users/jwtrhs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-09T02:43:14Z", "updated_at": "2020-02-10T22:15:12Z", "closed_at": "2020-02-10T12:32:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Mounted subroutes require the trailing `/` to hit their 'root' subroute, whereas regular `Route`s do not.\r\n\r\nE.g.\r\n\r\n```python\r\nfrom starlette.applications import Starlette\r\nfrom starlette.requests import Request\r\nfrom starlette.responses import PlainTextResponse\r\nfrom starlette.routing import Mount, Route\r\n\r\nasync def homepage(request):\r\n    return PlainTextResponse('homepage')\r\n\r\nasync def subroute(request):\r\n    return PlainTextResponse('subroute')\r\n\r\nroutes = [\r\n    Route('/', homepage),\r\n    Mount('/sub', routes=[Route('/', subroute)]),\r\n]\r\n\r\napp = Starlette(debug=True, routes=routes)\r\n```\r\n\r\n`localhost:8000` and `localhost:8000/` both return \"hompage\", whereas `localhost:8000/sub` returns a 307 temp redirect to `localhost:8000/sub/` which then returns \"subroute\".\r\n\r\nSmall issue and not saying either approach is correct, but I guess I would expect both `Mount` and `Route` to behave the same here.\r\n\r\nUsing version 13.1.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/819", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/819/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/819/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/819/events", "html_url": "https://github.com/encode/starlette/issues/819", "id": 561172576, "node_id": "MDU6SXNzdWU1NjExNzI1NzY=", "number": 819, "title": "Maybe the thread pool should no longer be used for reading and writing files?", "user": {"login": "abersheeran", "id": 25364828, "node_id": "MDQ6VXNlcjI1MzY0ODI4", "avatar_url": "https://avatars3.githubusercontent.com/u/25364828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abersheeran", "html_url": "https://github.com/abersheeran", "followers_url": "https://api.github.com/users/abersheeran/followers", "following_url": "https://api.github.com/users/abersheeran/following{/other_user}", "gists_url": "https://api.github.com/users/abersheeran/gists{/gist_id}", "starred_url": "https://api.github.com/users/abersheeran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abersheeran/subscriptions", "organizations_url": "https://api.github.com/users/abersheeran/orgs", "repos_url": "https://api.github.com/users/abersheeran/repos", "events_url": "https://api.github.com/users/abersheeran/events{/privacy}", "received_events_url": "https://api.github.com/users/abersheeran/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-06T17:52:23Z", "updated_at": "2020-05-06T13:52:27Z", "closed_at": "2020-05-06T13:52:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I read performance check in https://github.com/mosquito/aiofile/issues/18. Compared to synchronization overhead, it seems that the overhead of the thread pool is greater, maybe we need some performance tests.\r\n\r\nAnd I noticed that aiofiles has not responded to any questions or requests from the community for ten months, which is dangerous. If you insist on reading and writing files asynchronously, maybe starlette should be switched to aiofile?\r\n\r\nIf there is any need to modify this, I will be happy to do it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/818", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/818/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/818/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/818/events", "html_url": "https://github.com/encode/starlette/issues/818", "id": 560248384, "node_id": "MDU6SXNzdWU1NjAyNDgzODQ=", "number": 818, "title": "How to use TestClient with requests_mock?", "user": {"login": "wadamek65", "id": 36732892, "node_id": "MDQ6VXNlcjM2NzMyODky", "avatar_url": "https://avatars1.githubusercontent.com/u/36732892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wadamek65", "html_url": "https://github.com/wadamek65", "followers_url": "https://api.github.com/users/wadamek65/followers", "following_url": "https://api.github.com/users/wadamek65/following{/other_user}", "gists_url": "https://api.github.com/users/wadamek65/gists{/gist_id}", "starred_url": "https://api.github.com/users/wadamek65/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wadamek65/subscriptions", "organizations_url": "https://api.github.com/users/wadamek65/orgs", "repos_url": "https://api.github.com/users/wadamek65/repos", "events_url": "https://api.github.com/users/wadamek65/events{/privacy}", "received_events_url": "https://api.github.com/users/wadamek65/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-05T09:37:16Z", "updated_at": "2020-02-10T17:04:24Z", "closed_at": "2020-02-10T12:33:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Suppose I have a route in my API that creates an http request to an external resource using `requests` package. When creating a starlette `TestClient`, it creates four adapters for ws, wss, http and https, so that it can handle all requests to the API. This is problematic since if I want to mock a route with `requests_mock.Mocker()` for `requests` to use, all the adapters created by `TestClient` get overwritten and do not get matched anymore resulting in `NoMockAddressError`.\r\n\r\nI want to create a test with a mocked response for the address I use in my tested API route, so that the route actually sends the request, gets the response and returns it. How do I go about using `TestClient` along with `requests_mock.Mocker`? Can I somehow extend `TestClient`'s `http` matchers or should I do it differently? Below is an example of a test that is not working for me:\r\n\r\nqueue.py\r\n```\r\nimport fastapi\r\nimport requests\r\n\r\nrouter = fastapi.APIRouter()\r\n@router.get('/queue/')\r\ndef queue_messages():\r\n    return requests.get('http://test-url/stats').json()\r\n```\r\n\r\nconftest.py\r\n```\r\nimport fastapi\r\nimport pytest\r\nimport starlette.testclient\r\n\r\nfrom source import queue\r\n\r\n@pytest.fixture(scope='function')\r\ndef test_server():\r\n    app = fastapi.FastAPI()\r\n\r\n    app.include_router(queue.router, prefix='/api')\r\n\r\n    return starlette.testclient.TestClient(app)\r\n```\r\n\r\ntest_queue.py\r\n```\r\ndef test_queue_get(requests_mock, test_server):\r\n    stats = { ... }\r\n    requests_mock.get('http://test-url/stats', json=stats)\r\n\r\n    response = test_server.get('/api/queue/')\r\n    assert response.json() == {'messages': 45}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/817", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/817/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/817/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/817/events", "html_url": "https://github.com/encode/starlette/issues/817", "id": 559874234, "node_id": "MDU6SXNzdWU1NTk4NzQyMzQ=", "number": 817, "title": "\"Invalid HTTP request received\" with class-based WebSocketEndpoint ", "user": {"login": "mariaines", "id": 1000661, "node_id": "MDQ6VXNlcjEwMDA2NjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1000661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mariaines", "html_url": "https://github.com/mariaines", "followers_url": "https://api.github.com/users/mariaines/followers", "following_url": "https://api.github.com/users/mariaines/following{/other_user}", "gists_url": "https://api.github.com/users/mariaines/gists{/gist_id}", "starred_url": "https://api.github.com/users/mariaines/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mariaines/subscriptions", "organizations_url": "https://api.github.com/users/mariaines/orgs", "repos_url": "https://api.github.com/users/mariaines/repos", "events_url": "https://api.github.com/users/mariaines/events{/privacy}", "received_events_url": "https://api.github.com/users/mariaines/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-04T17:36:58Z", "updated_at": "2020-02-04T21:19:07Z", "closed_at": "2020-02-04T21:19:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm struggling to get a WebSocketEndpoint up and running. When I try to wscat I see `\"WARNING:  Invalid HTTP request received.\"` in the app logs and get `\"error: Client network socket disconnected before secure TLS connection was established\"` as a response to wscat.\r\n\r\nHere's my app:\r\n```python\r\nfrom starlette.applications import Starlette\r\nfrom starlette.endpoints import WebSocketEndpoint\r\nfrom starlette.routing import Route, WebSocketRoute\r\n\r\nclass WebsocketServer(WebSocketEndpoint):\r\n    encoding = \"bytes\"\r\n\r\n    async def on_connect(self, websocket):\r\n        print(\"on connect\")\r\n\r\n    async def on_receive(self, websocket, data):\r\n        print(\"on receive\")        \r\n\r\n    async def on_disconnect(self, websocket, close_code):\r\n        print(\"on disconnect\")\r\n\r\nroutes = [\r\n    WebSocketRoute(\"/ws\", endpoint=WebsocketServer),\r\n]\r\n\r\napp = Starlette(routes=routes)\r\n```\r\n\r\nThanks in advance for any help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/810", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/810/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/810/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/810/events", "html_url": "https://github.com/encode/starlette/issues/810", "id": 555626800, "node_id": "MDU6SXNzdWU1NTU2MjY4MDA=", "number": 810, "title": "CORSMiddleware is not working", "user": {"login": "defracted", "id": 51153795, "node_id": "MDQ6VXNlcjUxMTUzNzk1", "avatar_url": "https://avatars0.githubusercontent.com/u/51153795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/defracted", "html_url": "https://github.com/defracted", "followers_url": "https://api.github.com/users/defracted/followers", "following_url": "https://api.github.com/users/defracted/following{/other_user}", "gists_url": "https://api.github.com/users/defracted/gists{/gist_id}", "starred_url": "https://api.github.com/users/defracted/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/defracted/subscriptions", "organizations_url": "https://api.github.com/users/defracted/orgs", "repos_url": "https://api.github.com/users/defracted/repos", "events_url": "https://api.github.com/users/defracted/events{/privacy}", "received_events_url": "https://api.github.com/users/defracted/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-27T14:52:22Z", "updated_at": "2020-01-29T10:06:11Z", "closed_at": "2020-01-29T10:06:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "So, I went through documentation and I made this test application, to see if the CORSMiddleware even works. Well, apparently it doesn't work at all, the headers are not being sent and the OPTIONS request still returns 405.\r\n\r\nIs it just me misunderstanding something and if so, what exactly? If it's not just me, then I think something is broken here.\r\n\r\nI would really appreciate some TIP on that, since I rewrote one of my API wrappers to starlette and it doesn't really work, because of cors ;-;\r\n\r\nMy application code\r\n```python\r\nfrom starlette.applications import Starlette\r\nfrom starlette.responses import JSONResponse, PlainTextResponse\r\nfrom starlette.middleware import Middleware\r\nfrom starlette.middleware.cors import CORSMiddleware\r\nfrom starlette.exceptions import HTTPException\r\n\r\n\r\nmiddleware = [\r\n    Middleware(CORSMiddleware, allow_origins=['*'], allow_methods=[\"GET\", \"OPTIONS\"],\r\n               allow_headers=[\"Token\", \"Origin\", \"X-Requested-With\", \"Content-Type\", \"Accept\"])\r\n]\r\n\r\napp = Starlette(middleware=middleware)\r\n\r\n\r\n@app.route('/')\r\nasync def homepage(request):\r\n    return JSONResponse(content={\"message\": \"hi\"})\r\n\r\n\r\n@app.route('/test')\r\nasync def test(request):\r\n    return JSONResponse(content={\"test\": \"the test route\"})\r\n\r\n```\r\n\r\nHere's results of the request to root:\r\n![Postman_e6qkuwYQR2](https://user-images.githubusercontent.com/51153795/73184297-a6755180-4135-11ea-8bae-3a666431d5eb.png)\r\n![image](https://user-images.githubusercontent.com/51153795/73184431-d4f32c80-4135-11ea-91ac-33b85f22f542.png)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/809", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/809/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/809/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/809/events", "html_url": "https://github.com/encode/starlette/issues/809", "id": 554306204, "node_id": "MDU6SXNzdWU1NTQzMDYyMDQ=", "number": 809, "title": "Question, would like to use dashes instead of underscores in some path parameters", "user": {"login": "Subaku", "id": 1900930, "node_id": "MDQ6VXNlcjE5MDA5MzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1900930?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Subaku", "html_url": "https://github.com/Subaku", "followers_url": "https://api.github.com/users/Subaku/followers", "following_url": "https://api.github.com/users/Subaku/following{/other_user}", "gists_url": "https://api.github.com/users/Subaku/gists{/gist_id}", "starred_url": "https://api.github.com/users/Subaku/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Subaku/subscriptions", "organizations_url": "https://api.github.com/users/Subaku/orgs", "repos_url": "https://api.github.com/users/Subaku/repos", "events_url": "https://api.github.com/users/Subaku/events{/privacy}", "received_events_url": "https://api.github.com/users/Subaku/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-23T17:41:52Z", "updated_at": "2020-01-29T10:12:13Z", "closed_at": "2020-01-29T10:12:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Coming over from [this issue](https://github.com/tiangolo/fastapi/issues/909) in the FastAPI repo. I ran into a problem declaring both path and query parameters in my views using dashes as is usually acceptable in urls and APIs. I learned a trick to get around it for query parameters but it looks like the `starlette.routing.PARAM_REGEX` disallows such a thing. Just wondering if there's a valid reason for this? Maybe just convention?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/806", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/806/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/806/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/806/events", "html_url": "https://github.com/encode/starlette/issues/806", "id": 550965753, "node_id": "MDU6SXNzdWU1NTA5NjU3NTM=", "number": 806, "title": "Set status code reactively in StreamingResponses?", "user": {"login": "nathanlcarlson", "id": 22420382, "node_id": "MDQ6VXNlcjIyNDIwMzgy", "avatar_url": "https://avatars2.githubusercontent.com/u/22420382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanlcarlson", "html_url": "https://github.com/nathanlcarlson", "followers_url": "https://api.github.com/users/nathanlcarlson/followers", "following_url": "https://api.github.com/users/nathanlcarlson/following{/other_user}", "gists_url": "https://api.github.com/users/nathanlcarlson/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanlcarlson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanlcarlson/subscriptions", "organizations_url": "https://api.github.com/users/nathanlcarlson/orgs", "repos_url": "https://api.github.com/users/nathanlcarlson/repos", "events_url": "https://api.github.com/users/nathanlcarlson/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanlcarlson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-16T17:59:17Z", "updated_at": "2020-01-27T23:30:32Z", "closed_at": "2020-01-16T18:34:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "If an error occurs during the streaming of the response body is it possible to set the status code to something other than the initially set status code? \r\n\r\nFor example:\r\n```python\r\n@app.route('/a_route')\r\nasync def a_route(request):\r\n  data = await get_some_data()\r\n\r\n  async def streamer(data):\r\n    done = False\r\n    outputs = data['key']\r\n    while not done:\r\n      for output in outputs:\r\n        yield output\r\n      data = await get_more_data()\r\n      outputs = data['key']\r\n      done = len(outputs) == 0\r\n\r\n  return StreamingResponse(streamer(data), status_code=200)\r\n```\r\nErrors could occur in `get_more_data()`, or even in `data['key']` if `'key'` happens to not be present, while streaming, but the response's status code is already set and sent as 200.\r\n\r\nMy understanding is that something similar could occur in a FileResponse as well, if an error occurs while reading from the file.\r\n\r\nIs there simply something incorrect about this usage pattern? I admittedly don't have any suggestions to resolve this.\r\n\r\n`starlette           0.13.0`\r\n\r\nThanks for any help.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/803", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/803/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/803/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/803/events", "html_url": "https://github.com/encode/starlette/issues/803", "id": 550278411, "node_id": "MDU6SXNzdWU1NTAyNzg0MTE=", "number": 803, "title": "Gzip Middleware content-length is incorrect", "user": {"login": "abersheeran", "id": 25364828, "node_id": "MDQ6VXNlcjI1MzY0ODI4", "avatar_url": "https://avatars3.githubusercontent.com/u/25364828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abersheeran", "html_url": "https://github.com/abersheeran", "followers_url": "https://api.github.com/users/abersheeran/followers", "following_url": "https://api.github.com/users/abersheeran/following{/other_user}", "gists_url": "https://api.github.com/users/abersheeran/gists{/gist_id}", "starred_url": "https://api.github.com/users/abersheeran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abersheeran/subscriptions", "organizations_url": "https://api.github.com/users/abersheeran/orgs", "repos_url": "https://api.github.com/users/abersheeran/repos", "events_url": "https://api.github.com/users/abersheeran/events{/privacy}", "received_events_url": "https://api.github.com/users/abersheeran/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-15T16:01:50Z", "updated_at": "2020-01-29T11:15:39Z", "closed_at": "2020-01-29T11:15:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following exception is thrown when I use uvicorn to drive my starlette project. After control variates, I am sure this is caused by Gzip Middleware.\r\n\r\n```\r\n  File \"C:\\Users\\AberS\\Documents\\Github\\index.py\\.venv\\lib\\site-packages\\h11\\_writers.py\", line 102, in send_eom\r\n    raise LocalProtocolError(\"Too little data for declared Content-Length\") \r\nh11._util.LocalProtocolError: Too little data for declared Content-Length\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/802", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/802/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/802/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/802/events", "html_url": "https://github.com/encode/starlette/issues/802", "id": 550053045, "node_id": "MDU6SXNzdWU1NTAwNTMwNDU=", "number": 802, "title": "Back pressure?", "user": {"login": "pawamoy", "id": 3999221, "node_id": "MDQ6VXNlcjM5OTkyMjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/3999221?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pawamoy", "html_url": "https://github.com/pawamoy", "followers_url": "https://api.github.com/users/pawamoy/followers", "following_url": "https://api.github.com/users/pawamoy/following{/other_user}", "gists_url": "https://api.github.com/users/pawamoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/pawamoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pawamoy/subscriptions", "organizations_url": "https://api.github.com/users/pawamoy/orgs", "repos_url": "https://api.github.com/users/pawamoy/repos", "events_url": "https://api.github.com/users/pawamoy/events{/privacy}", "received_events_url": "https://api.github.com/users/pawamoy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-15T09:04:46Z", "updated_at": "2020-06-24T19:02:12Z", "closed_at": "2020-06-24T19:02:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\n\r\nI have opened [this issue about back pressure](https://github.com/tiangolo/fastapi/issues/857) on FastAPI, and @dmontagu agreed that it could be more interesting to discuss it on Starlette instead, so here it is \ud83d\ude42 \r\n\r\nI would like to know if thoughts were put in the design of Starlette to prevent, or help prevent system overloading due to lack of back pressure with async. Here is the direct link to the article https://lucumr.pocoo.org/2020/1/1/async-pressure/\r\n\r\nI think @dmontagu gave a really good answer already, but maybe you (the authors, maintainers and users of Starlette) would like to share more about this! Thanks!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/800", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/800/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/800/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/800/events", "html_url": "https://github.com/encode/starlette/issues/800", "id": 549796223, "node_id": "MDU6SXNzdWU1NDk3OTYyMjM=", "number": 800, "title": "Dangerous example regex for CORS Middleware?", "user": {"login": "josephbuckley", "id": 730408, "node_id": "MDQ6VXNlcjczMDQwOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/730408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josephbuckley", "html_url": "https://github.com/josephbuckley", "followers_url": "https://api.github.com/users/josephbuckley/followers", "following_url": "https://api.github.com/users/josephbuckley/following{/other_user}", "gists_url": "https://api.github.com/users/josephbuckley/gists{/gist_id}", "starred_url": "https://api.github.com/users/josephbuckley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josephbuckley/subscriptions", "organizations_url": "https://api.github.com/users/josephbuckley/orgs", "repos_url": "https://api.github.com/users/josephbuckley/repos", "events_url": "https://api.github.com/users/josephbuckley/events{/privacy}", "received_events_url": "https://api.github.com/users/josephbuckley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-14T20:21:04Z", "updated_at": "2020-01-15T10:55:11Z", "closed_at": "2020-01-15T10:55:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Looking at the docs for CORS Middlware here: https://www.starlette.io/middleware/#corsmiddleware , under the `allow_origin_regex` attribute, the example value is `https://.*\\.example\\.org`.\r\n\r\nHowever, based on the handler code for this at https://github.com/encode/starlette/blob/ab86530eddfcf56e0f7e5ca56f6ab69c15594a7d/starlette/middleware/cors.py#L90 , it appears `https://www.example.org.hacker.com` would pass as a valid origin, right?\r\n\r\nIt seems like the example should be `https://.*\\.example\\.org$`, yes?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/797", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/797/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/797/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/797/events", "html_url": "https://github.com/encode/starlette/issues/797", "id": 549375182, "node_id": "MDU6SXNzdWU1NDkzNzUxODI=", "number": 797, "title": "Resource-traversal routing ", "user": {"login": "jtrakk", "id": 43392409, "node_id": "MDQ6VXNlcjQzMzkyNDA5", "avatar_url": "https://avatars1.githubusercontent.com/u/43392409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtrakk", "html_url": "https://github.com/jtrakk", "followers_url": "https://api.github.com/users/jtrakk/followers", "following_url": "https://api.github.com/users/jtrakk/following{/other_user}", "gists_url": "https://api.github.com/users/jtrakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtrakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtrakk/subscriptions", "organizations_url": "https://api.github.com/users/jtrakk/orgs", "repos_url": "https://api.github.com/users/jtrakk/repos", "events_url": "https://api.github.com/users/jtrakk/events{/privacy}", "received_events_url": "https://api.github.com/users/jtrakk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-14T07:07:22Z", "updated_at": "2020-01-29T11:15:13Z", "closed_at": "2020-01-29T11:15:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm mentioning this feature because I can imagine wanting it in the future, not because I actually need it right now.\r\n\r\nOne of the popular features of [Pyramid](https://pyramid.readthedocs.io/en/latest/index.html) is that it offers, in addition to regular url dispatch, the option of \"traversal\"-based routing. \r\n\r\n> A traversal uses the URL (Universal Resource Locator) to find a resource located in a resource tree, which is a set of nested dictionary-like objects. Traversal is done by using each segment of the path portion of the URL to navigate through the resource tree. You might think of this as looking up files and directories in a file system. Traversal walks down the path until it finds a published resource, analogous to a file system \"directory\" or \"file\". The resource found as the result of a traversal becomes the context of the request. Then, the view lookup subsystem is used to find some view code willing to \"publish\" this resource by generating a response.\r\n\r\nFor example, with \r\n\r\n```py\r\ndef get_root(request):\r\n    return Resource({'a': Resource({'b': Resource({'c': Resource()})})})\r\n```\r\n\r\nNavigating to `/a/b/c` will return the innermost resource. Any object providing `__getitem__` can be used in the route lookup, as the nested `Resource`s are being used here.\r\n\r\nThe Pyramid docs on traversal are extensive:\r\n\r\n\r\n- [Quick example](https://pyramid.readthedocs.io/en/latest/narr/hellotraversal.html)\r\n- [Much ado about traversal](https://pyramid.readthedocs.io/en/latest/narr/muchadoabouttraversal.html)\r\n- [Traversal details](https://pyramid.readthedocs.io/en/latest/narr/traversal.html)\r\n- [Combining Traversal and URL Dispatch](https://pyramid.readthedocs.io/en/latest/narr/hybrid.html)\r\n- [Resources](https://pyramid.readthedocs.io/en/latest/narr/resources.html)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/796", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/796/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/796/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/796/events", "html_url": "https://github.com/encode/starlette/issues/796", "id": 549260847, "node_id": "MDU6SXNzdWU1NDkyNjA4NDc=", "number": 796, "title": "how to use include one template in another template", "user": {"login": "inVisement", "id": 38025828, "node_id": "MDQ6VXNlcjM4MDI1ODI4", "avatar_url": "https://avatars2.githubusercontent.com/u/38025828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inVisement", "html_url": "https://github.com/inVisement", "followers_url": "https://api.github.com/users/inVisement/followers", "following_url": "https://api.github.com/users/inVisement/following{/other_user}", "gists_url": "https://api.github.com/users/inVisement/gists{/gist_id}", "starred_url": "https://api.github.com/users/inVisement/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inVisement/subscriptions", "organizations_url": "https://api.github.com/users/inVisement/orgs", "repos_url": "https://api.github.com/users/inVisement/repos", "events_url": "https://api.github.com/users/inVisement/events{/privacy}", "received_events_url": "https://api.github.com/users/inVisement/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-14T00:28:17Z", "updated_at": "2020-01-29T11:23:28Z", "closed_at": "2020-01-29T11:23:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I could not figure out why {% include \"anotherTemplate.html\" %\" does not work in templates.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/795", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/795/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/795/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/795/events", "html_url": "https://github.com/encode/starlette/issues/795", "id": 549228198, "node_id": "MDU6SXNzdWU1NDkyMjgxOTg=", "number": 795, "title": "[QUESTION] Relative Path", "user": {"login": "victoraugustolls", "id": 7843637, "node_id": "MDQ6VXNlcjc4NDM2Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/7843637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/victoraugustolls", "html_url": "https://github.com/victoraugustolls", "followers_url": "https://api.github.com/users/victoraugustolls/followers", "following_url": "https://api.github.com/users/victoraugustolls/following{/other_user}", "gists_url": "https://api.github.com/users/victoraugustolls/gists{/gist_id}", "starred_url": "https://api.github.com/users/victoraugustolls/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/victoraugustolls/subscriptions", "organizations_url": "https://api.github.com/users/victoraugustolls/orgs", "repos_url": "https://api.github.com/users/victoraugustolls/repos", "events_url": "https://api.github.com/users/victoraugustolls/events{/privacy}", "received_events_url": "https://api.github.com/users/victoraugustolls/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-01-13T22:51:25Z", "updated_at": "2020-01-15T23:11:38Z", "closed_at": "2020-01-14T17:20:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nI looked through the docs but might have missed something.\r\n\r\nIs it possible to extract the relative path from a `Request`?\r\nIf I have a route like `/users/{id}`, I would like to get exactly this value, and not the absolute path with the `id` value.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/794", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/794/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/794/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/794/events", "html_url": "https://github.com/encode/starlette/issues/794", "id": 548904538, "node_id": "MDU6SXNzdWU1NDg5MDQ1Mzg=", "number": 794, "title": "starlette/authentication.py  bug rereport", "user": {"login": "xidianwlc", "id": 4638699, "node_id": "MDQ6VXNlcjQ2Mzg2OTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/4638699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xidianwlc", "html_url": "https://github.com/xidianwlc", "followers_url": "https://api.github.com/users/xidianwlc/followers", "following_url": "https://api.github.com/users/xidianwlc/following{/other_user}", "gists_url": "https://api.github.com/users/xidianwlc/gists{/gist_id}", "starred_url": "https://api.github.com/users/xidianwlc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xidianwlc/subscriptions", "organizations_url": "https://api.github.com/users/xidianwlc/orgs", "repos_url": "https://api.github.com/users/xidianwlc/repos", "events_url": "https://api.github.com/users/xidianwlc/events{/privacy}", "received_events_url": "https://api.github.com/users/xidianwlc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-13T12:40:17Z", "updated_at": "2020-07-16T09:04:11Z", "closed_at": "2020-05-11T12:44:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nrequest = kwargs.get(\"request\", args[idx])\r\n```\r\n\r\nshould change to \r\n\r\n```\r\n# first find request in kwargs\r\nrequest = kwargs.get(\"request\", None)\r\n# second find request in args\r\nif request is None and len(args) > 0:\r\n     request = args[idx]\r\n```\r\n\r\nexception when use decorator requires\r\n\r\nTraceback (most recent call last):\r\n  File \"/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/uvicorn/protocols/http/httptools_impl.py\", line 385, in run_asgi\r\n    result = await app(self.scope, self.receive, self.send)\r\n  File \"/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/uvicorn/middleware/proxy_headers.py\", line 45, in __call__\r\n    return await self.app(scope, receive, send)\r\n  File \"/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/fastapi/applications.py\", line 140, in __call__\r\n    await super().__call__(scope, receive, send)\r\n  File \"/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/applications.py\", line 134, in __call__\r\n    await self.error_middleware(scope, receive, send)\r\n  File \"/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/middleware/errors.py\", line 178, in __call__\r\n    raise exc from None\r\n  File \"/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/middleware/errors.py\", line 156, in __call__\r\n    await self.app(scope, receive, _send)\r\n  File \"/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/middleware/authentication.py\", line 48, in __call__\r\n    await self.app(scope, receive, send)\r\n  File \"/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/middleware/base.py\", line 25, in __call__\r\n    response = await self.dispatch_func(request, self.call_next)\r\n  File \"/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette_exporter/middleware.py\", line 40, in dispatch\r\n    raise e\r\n  File \"/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette_exporter/middleware.py\", line 37, in dispatch\r\n    response = await call_next(request)\r\n  File \"/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/middleware/base.py\", line 45, in call_next\r\n    task.result()\r\n  File \"/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/middleware/base.py\", line 38, in coro\r\n    await self.app(scope, receive, send)\r\n  File \"/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/exceptions.py\", line 73, in __call__\r\n    raise exc from None\r\n  File \"/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/exceptions.py\", line 62, in __call__\r\n    await self.app(scope, receive, sender)\r\n  File \"/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/routing.py\", line 590, in __call__\r\n    await route(scope, receive, send)\r\n  File \"/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/routing.py\", line 208, in __call__\r\n    await self.app(scope, receive, send)\r\n  File \"/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/routing.py\", line 41, in app\r\n    response = await func(request)\r\n  File \"/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/fastapi/routing.py\", line 127, in app\r\n    raw_response = await dependant.call(**values)\r\n  File \"/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/authentication.py\", line 62, in async_wrapper\r\n    request = kwargs.get(\"request\", args[idx])\r\nIndexError: tuple index out of range", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/791", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/791/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/791/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/791/events", "html_url": "https://github.com/encode/starlette/issues/791", "id": 548739723, "node_id": "MDU6SXNzdWU1NDg3Mzk3MjM=", "number": 791, "title": "Response  has no attribute 'raw_headers'", "user": {"login": "hugoren", "id": 15722064, "node_id": "MDQ6VXNlcjE1NzIyMDY0", "avatar_url": "https://avatars2.githubusercontent.com/u/15722064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hugoren", "html_url": "https://github.com/hugoren", "followers_url": "https://api.github.com/users/hugoren/followers", "following_url": "https://api.github.com/users/hugoren/following{/other_user}", "gists_url": "https://api.github.com/users/hugoren/gists{/gist_id}", "starred_url": "https://api.github.com/users/hugoren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hugoren/subscriptions", "organizations_url": "https://api.github.com/users/hugoren/orgs", "repos_url": "https://api.github.com/users/hugoren/repos", "events_url": "https://api.github.com/users/hugoren/events{/privacy}", "received_events_url": "https://api.github.com/users/hugoren/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-13T06:56:54Z", "updated_at": "2020-01-13T09:50:23Z", "closed_at": "2020-01-13T09:50:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "### env\r\npy 3.8.1\r\nstarlette 0.13.0\r\n### my code\r\nfrom starlette.responses import Response\r\nResponse.set_cookie(\"test\", \"boss\")\r\n### exception\r\nAttributeError: 'str' object has no attribute 'raw_headers'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/790", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/790/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/790/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/790/events", "html_url": "https://github.com/encode/starlette/issues/790", "id": 548701451, "node_id": "MDU6SXNzdWU1NDg3MDE0NTE=", "number": 790, "title": "response headers support custom encoding ", "user": {"login": "iamzhangdapao", "id": 25335971, "node_id": "MDQ6VXNlcjI1MzM1OTcx", "avatar_url": "https://avatars0.githubusercontent.com/u/25335971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iamzhangdapao", "html_url": "https://github.com/iamzhangdapao", "followers_url": "https://api.github.com/users/iamzhangdapao/followers", "following_url": "https://api.github.com/users/iamzhangdapao/following{/other_user}", "gists_url": "https://api.github.com/users/iamzhangdapao/gists{/gist_id}", "starred_url": "https://api.github.com/users/iamzhangdapao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iamzhangdapao/subscriptions", "organizations_url": "https://api.github.com/users/iamzhangdapao/orgs", "repos_url": "https://api.github.com/users/iamzhangdapao/repos", "events_url": "https://api.github.com/users/iamzhangdapao/events{/privacy}", "received_events_url": "https://api.github.com/users/iamzhangdapao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-13T04:45:39Z", "updated_at": "2020-08-03T08:19:25Z", "closed_at": "2020-02-17T14:14:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi~ When i try to return a `FileResponse` with Chinese filename, i got such error:\r\n\r\n```\r\nUnicodeEncodeError: 'latin-1' codec can't encode character '\\u6708' in position 32: ordinal not in range(256)\r\n```\r\n\r\nThen i found all header items will be encode with `latin-1`, after i change it manually to `utf-8`, my problem was solved.\r\n\r\ne.g.\r\n\r\n- responses.Response.init_headers, line 63\r\n```python\r\nraw_headers = [\r\n    (k.lower().encode(\"latin-1\"), v.encode(\"latin-1\"))\r\n    for k, v in headers.items()\r\n]\r\n```\r\n\r\nSo may be it should encode with `self.charset` or give a custom parameter so that i can choose encoding to `utf-8`?\r\n\r\nThx for the great project~", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/788", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/788/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/788/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/788/events", "html_url": "https://github.com/encode/starlette/issues/788", "id": 546393202, "node_id": "MDU6SXNzdWU1NDYzOTMyMDI=", "number": 788, "title": "Question: is it better to return an empty {} or raise JSONDecodeError for \"await req.json()\"", "user": {"login": "kemingy", "id": 12974685, "node_id": "MDQ6VXNlcjEyOTc0Njg1", "avatar_url": "https://avatars0.githubusercontent.com/u/12974685?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kemingy", "html_url": "https://github.com/kemingy", "followers_url": "https://api.github.com/users/kemingy/followers", "following_url": "https://api.github.com/users/kemingy/following{/other_user}", "gists_url": "https://api.github.com/users/kemingy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kemingy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kemingy/subscriptions", "organizations_url": "https://api.github.com/users/kemingy/orgs", "repos_url": "https://api.github.com/users/kemingy/repos", "events_url": "https://api.github.com/users/kemingy/events{/privacy}", "received_events_url": "https://api.github.com/users/kemingy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-07T16:52:04Z", "updated_at": "2020-01-08T08:54:54Z", "closed_at": "2020-01-08T02:18:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently, `await request.json()` will raise JSONDecodeError if the HTTP request body is empty. This is due to `json.loads(b'')`.\r\n\r\nIs it better to return an empty `{}` instead of raising a JSONDecodeError?\r\n\r\nI find this when I'm developing the validation tool for starlette([spectree](https://github.com/0b01001001/spectree)). When I'm trying to validate JSON data in the request, it raises this exception. I already fixed it by using `json.loads(await request.body() or '{}')`([detail](https://github.com/0b01001001/spectree/pull/20/commits/15d569f411d1c0b0b746fab65abdacff94286ba3)).\r\n\r\nBut I guess this part should be done by users. So if the users want to get data from the JSON body, they need to `try: await request.json()` or parse the `request.body()`. Otherwise, they may get an exception (although it doesn't affect the service). That seems not very elegant.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/787", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/787/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/787/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/787/events", "html_url": "https://github.com/encode/starlette/issues/787", "id": 546037623, "node_id": "MDU6SXNzdWU1NDYwMzc2MjM=", "number": 787, "title": "Class JSONResponse don't convert datetime?", "user": {"login": "johndiego", "id": 18476845, "node_id": "MDQ6VXNlcjE4NDc2ODQ1", "avatar_url": "https://avatars3.githubusercontent.com/u/18476845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johndiego", "html_url": "https://github.com/johndiego", "followers_url": "https://api.github.com/users/johndiego/followers", "following_url": "https://api.github.com/users/johndiego/following{/other_user}", "gists_url": "https://api.github.com/users/johndiego/gists{/gist_id}", "starred_url": "https://api.github.com/users/johndiego/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johndiego/subscriptions", "organizations_url": "https://api.github.com/users/johndiego/orgs", "repos_url": "https://api.github.com/users/johndiego/repos", "events_url": "https://api.github.com/users/johndiego/events{/privacy}", "received_events_url": "https://api.github.com/users/johndiego/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-07T02:07:51Z", "updated_at": "2020-01-07T13:33:01Z", "closed_at": "2020-01-07T13:33:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nmt_dict = 'id': 1, 'active': True, 'create_': datetime.datetime(2020, 1, 6, 21, 44, 30), 'update_': datetime.datetime(2020, 1, 6, 21, 44, 30), 'admin': True, 'username': 'master', 'password': None}\r\n\r\nCODE\r\n\r\n```\r\nfrom starlette.applications import Starlette\r\nfrom models.base import User\r\nfrom starlette.responses import JSONResponse,Response\r\nfrom starlette.routing import Route\r\nfrom utils.xml import dict2xml\r\nfrom playhouse.shortcuts import model_to_dict, dict_to_model\r\nimport json\r\n\r\n\r\nasync def homepage(request):\r\n    user, obj = User.get_or_create(username='master',admin=True)\r\n    m = model_to_dict(user)\r\n    # bla  = json.dumps(m, indent=4, sort_keys=True, default=str)\r\n    don't work datetime !!!!\r\n\r\n    return JSONResponse(m)\r\n\r\nroutes = [\r\n    Route(\"/\", endpoint=homepage),\r\n]\r\n\r\n\r\napp = Starlette(debug=True, routes=routes)\r\n```\r\n\r\n\r\n```\r\nERROR:    Exception in ASGI application\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.7/site-packages/uvicorn/protocols/http/httptools_impl.py\", line 385, in run_asgi\r\n    result = await app(self.scope, self.receive, self.send)\r\n  File \"/usr/local/lib/python3.7/site-packages/uvicorn/middleware/proxy_headers.py\", line 45, in __call__\r\n    return await self.app(scope, receive, send)\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/applications.py\", line 134, in __call__\r\n    await self.error_middleware(scope, receive, send)\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/middleware/errors.py\", line 178, in __call__\r\n    raise exc from None\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/middleware/errors.py\", line 156, in __call__\r\n    await self.app(scope, receive, _send)\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/exceptions.py\", line 73, in __call__\r\n    raise exc from None\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/exceptions.py\", line 62, in __call__\r\n    await self.app(scope, receive, sender)\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/routing.py\", line 590, in __call__\r\n    await route(scope, receive, send)\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/routing.py\", line 208, in __call__\r\n    await self.app(scope, receive, send)\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/routing.py\", line 41, in app\r\n    response = await func(request)\r\n  File \"./app.py\", line 14, in homepage\r\n    return JSONResponse(m)\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/responses.py\", line 42, in __init__\r\n    self.body = self.render(content)\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/responses.py\", line 151, in render\r\n    separators=(\",\", \":\"),\r\n  File \"/usr/local/lib/python3.7/json/__init__.py\", line 238, in dumps\r\n    **kw).encode(obj)\r\n  File \"/usr/local/lib/python3.7/json/encoder.py\", line 199, in encode\r\n    chunks = self.iterencode(o, _one_shot=True)\r\n  File \"/usr/local/lib/python3.7/json/encoder.py\", line 257, in iterencode\r\n    return _iterencode(o, 0)\r\n  File \"/usr/local/lib/python3.7/json/encoder.py\", line 179, in default\r\n    raise TypeError(f'Object of type {o.__class__.__name__} '\r\nTypeError: Object of type datetime is not JSON serializable\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/786", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/786/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/786/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/786/events", "html_url": "https://github.com/encode/starlette/issues/786", "id": 546029198, "node_id": "MDU6SXNzdWU1NDYwMjkxOTg=", "number": 786, "title": "Graphene doc site error!", "user": {"login": "johndiego", "id": 18476845, "node_id": "MDQ6VXNlcjE4NDc2ODQ1", "avatar_url": "https://avatars3.githubusercontent.com/u/18476845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johndiego", "html_url": "https://github.com/johndiego", "followers_url": "https://api.github.com/users/johndiego/followers", "following_url": "https://api.github.com/users/johndiego/following{/other_user}", "gists_url": "https://api.github.com/users/johndiego/gists{/gist_id}", "starred_url": "https://api.github.com/users/johndiego/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johndiego/subscriptions", "organizations_url": "https://api.github.com/users/johndiego/orgs", "repos_url": "https://api.github.com/users/johndiego/repos", "events_url": "https://api.github.com/users/johndiego/events{/privacy}", "received_events_url": "https://api.github.com/users/johndiego/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-07T01:33:47Z", "updated_at": "2020-01-09T13:39:17Z", "closed_at": "2020-01-09T13:39:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "How solved error\r\nDependencies\r\n\r\n```\r\naiofiles==0.4.0\r\naniso8601==7.0.0\r\ncertifi==2019.11.28\r\ncffi==1.13.2\r\nchardet==3.0.4\r\nClick==7.0\r\ncryptography==2.8\r\ndicttoxml==1.7.4\r\ngraphene==2.1.8\r\ngraphql-core==2.2.1\r\ngraphql-relay==2.0.1\r\nh11==0.9.0\r\nhttptools==0.0.13\r\nidna==2.8\r\njwcrypto==0.6.0\r\npbkdf2==1.3\r\npeewee==3.13.1\r\npeewee-migrations==0.3.18\r\npromise==2.3\r\npsycopg2==2.8.4\r\npycparser==2.19\r\npython-jwt==3.2.5\r\nrequests==2.22.0\r\nRx==1.6.1\r\nsix==1.13.0\r\nstarlette==0.13.0\r\nurllib3==1.25.7\r\nuvicorn==0.11.1\r\nuvloop==0.14.0\r\nwebsockets==8.1\r\nxmltodict==0.12.0\r\n\r\n\r\n\r\n```\r\n\r\n\r\n\r\nMy code\r\n\r\n```\r\nfrom starlette.applications import Starlette\r\nfrom starlette.responses import JSONResponse\r\nfrom starlette.routing import Route\r\nfrom utils.xml import dict2xml\r\nfrom starlette.graphql import GraphQLApp\r\nimport graphene\r\n\r\nclass Query(graphene.ObjectType):\r\n    hello = graphene.String(name=graphene.String(default_value=\"stranger\"))\r\n\r\n    def resolve_hello(self, info, name):\r\n        return \"Hello \" + name\r\n\r\n\r\nroutes = [\r\n    Route('/', GraphQLApp(schema=graphene.Schema(query=Query)))\r\n]\r\n\r\n\r\napp = Starlette(debug=True, routes=routes)\r\n\r\n\r\n```\r\nRUN CODE\r\n \r\n```\r\nuvicorn app:app --host 0 --port 80 --reload\r\n\r\n```\r\n\r\n\r\n```\r\nINFO:     172.19.0.1:41200 - \"POST / HTTP/1.1\" 500 Internal Server Error\r\nERROR:    Exception in ASGI application\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.7/site-packages/uvicorn/protocols/http/httptools_impl.py\", line 385, in run_asgi\r\n    result = await app(self.scope, self.receive, self.send)\r\n  File \"/usr/local/lib/python3.7/site-packages/uvicorn/middleware/proxy_headers.py\", line 45, in __call__\r\n    return await self.app(scope, receive, send)\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/applications.py\", line 134, in __call__\r\n    await self.error_middleware(scope, receive, send)\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/middleware/errors.py\", line 178, in __call__\r\n    raise exc from None\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/middleware/errors.py\", line 156, in __call__\r\n    await self.app(scope, receive, _send)\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/exceptions.py\", line 73, in __call__\r\n    raise exc from None\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/exceptions.py\", line 62, in __call__\r\n    await self.app(scope, receive, sender)\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/routing.py\", line 590, in __call__\r\n    await route(scope, receive, send)\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/routing.py\", line 208, in __call__\r\n    await self.app(scope, receive, send)\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/graphql.py\", line 53, in __call__\r\n    response = await self.handle_graphql(request)\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/graphql.py\", line 107, in handle_graphql\r\n    if result.errors\r\n  File \"/usr/local/lib/python3.7/site-packages/starlette/graphql.py\", line 106, in <listcomp>\r\n    [format_graphql_error(err) for err in result.errors]\r\n  File \"/usr/local/lib/python3.7/site-packages/graphql/error/format_error.py\", line 17, in format_error\r\n    if error.locations is not None:\r\n  File \"/usr/local/lib/python3.7/site-packages/graphql/error/base.py\", line 80, in locations\r\n    source = self.source\r\n  File \"/usr/local/lib/python3.7/site-packages/graphql/error/base.py\", line 54, in source\r\n    node = self.nodes[0]\r\nTypeError: 'ObjectTypeDefinition' object is not subscriptable\r\n\r\n```\r\n\r\nQUERY\r\n```\r\ntype Query {\r\n  hello(name: String = \"stranger\"): String\r\n}\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/775", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/775/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/775/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/775/events", "html_url": "https://github.com/encode/starlette/issues/775", "id": 544994388, "node_id": "MDU6SXNzdWU1NDQ5OTQzODg=", "number": 775, "title": "Where is uploaded file through form request?", "user": {"login": "kouohhashi", "id": 5446294, "node_id": "MDQ6VXNlcjU0NDYyOTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/5446294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kouohhashi", "html_url": "https://github.com/kouohhashi", "followers_url": "https://api.github.com/users/kouohhashi/followers", "following_url": "https://api.github.com/users/kouohhashi/following{/other_user}", "gists_url": "https://api.github.com/users/kouohhashi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kouohhashi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kouohhashi/subscriptions", "organizations_url": "https://api.github.com/users/kouohhashi/orgs", "repos_url": "https://api.github.com/users/kouohhashi/repos", "events_url": "https://api.github.com/users/kouohhashi/events{/privacy}", "received_events_url": "https://api.github.com/users/kouohhashi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-03T13:31:52Z", "updated_at": "2020-06-29T12:04:45Z", "closed_at": "2020-02-17T10:11:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI'm trying to upload audio to my Starlette server but I can not get the path of the audio file.\r\n\r\nIn document I could find how to get original file name and read contents but I could not find how to get file path of temporary file. \r\n\r\n```\r\nform = await request.form()\r\nfilename = form[\"upload_file\"].filename\r\ncontents = await form[\"upload_file\"].read()\r\n```\r\n\r\nOr how can i use write method?\r\nHow can I specify the location to save the data?\r\n\r\nCould you give me a hint?\r\n\r\nThanks in advance.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/773", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/773/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/773/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/773/events", "html_url": "https://github.com/encode/starlette/issues/773", "id": 543585338, "node_id": "MDU6SXNzdWU1NDM1ODUzMzg=", "number": 773, "title": "accessing app state on startup/shutdown handlers", "user": {"login": "zhammer", "id": 6956487, "node_id": "MDQ6VXNlcjY5NTY0ODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6956487?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhammer", "html_url": "https://github.com/zhammer", "followers_url": "https://api.github.com/users/zhammer/followers", "following_url": "https://api.github.com/users/zhammer/following{/other_user}", "gists_url": "https://api.github.com/users/zhammer/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhammer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhammer/subscriptions", "organizations_url": "https://api.github.com/users/zhammer/orgs", "repos_url": "https://api.github.com/users/zhammer/repos", "events_url": "https://api.github.com/users/zhammer/events{/privacy}", "received_events_url": "https://api.github.com/users/zhammer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-12-29T21:50:28Z", "updated_at": "2020-02-24T10:37:53Z", "closed_at": "2020-01-14T13:42:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "i have a starlette app that uses `@app.[route|on_event]` decorators for routing but would like to switch to the recommended `Starlette(routes=..., on_startup=...)`.\r\n\r\none thing i'm confusing about: how can i access app state via startup/shutdown handlers? currently i have the following:\r\n```py\r\nfrom my_middleware import GetDatabaseConnectionMiddleware\r\n\r\napp = Starlette()\r\n# some middleware that gets a connection from app.state.connection_pool\r\n# and adds it to the request's scope\r\napp.add_middleware(GetDatabaseConnectionMiddleware)\r\n\r\n@app.on_event(\"startup\")\r\nasync def startup():\r\n    app.state.connection_pool = await asyncpg.create_pool(\r\n        dsn=DATABASE_URL, min_size=2, max_size=2\r\n    )\r\n```\r\n\r\ni think this is a bit messy but seemed like the most obvious way to set app state in the startup handler. i'm not sure how i'd do the same when app is created after the functions are defined, though. any ideas on how to do this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/763", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/763/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/763/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/763/events", "html_url": "https://github.com/encode/starlette/issues/763", "id": 540071757, "node_id": "MDU6SXNzdWU1NDAwNzE3NTc=", "number": 763, "title": "Proposal: Make the Secret type lazy load the secret", "user": {"login": "blaggacao", "id": 7548295, "node_id": "MDQ6VXNlcjc1NDgyOTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/7548295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blaggacao", "html_url": "https://github.com/blaggacao", "followers_url": "https://api.github.com/users/blaggacao/followers", "following_url": "https://api.github.com/users/blaggacao/following{/other_user}", "gists_url": "https://api.github.com/users/blaggacao/gists{/gist_id}", "starred_url": "https://api.github.com/users/blaggacao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blaggacao/subscriptions", "organizations_url": "https://api.github.com/users/blaggacao/orgs", "repos_url": "https://api.github.com/users/blaggacao/repos", "events_url": "https://api.github.com/users/blaggacao/events{/privacy}", "received_events_url": "https://api.github.com/users/blaggacao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-19T04:37:19Z", "updated_at": "2020-01-29T11:38:56Z", "closed_at": "2020-01-29T11:38:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nclass LazySecret(Secret):\r\n\r\n    def __init__(self, callback):\r\n        self.cb = callback\r\n\r\n    def __str__(self) -> str:\r\n        return self.cb()\r\n```\r\n\r\nIt might give the comfort of hot-cycling secrets within a glass braking strategy", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/762", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/762/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/762/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/762/events", "html_url": "https://github.com/encode/starlette/issues/762", "id": 540048273, "node_id": "MDU6SXNzdWU1NDAwNDgyNzM=", "number": 762, "title": "Global scope accessor", "user": {"login": "blaggacao", "id": 7548295, "node_id": "MDQ6VXNlcjc1NDgyOTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/7548295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blaggacao", "html_url": "https://github.com/blaggacao", "followers_url": "https://api.github.com/users/blaggacao/followers", "following_url": "https://api.github.com/users/blaggacao/following{/other_user}", "gists_url": "https://api.github.com/users/blaggacao/gists{/gist_id}", "starred_url": "https://api.github.com/users/blaggacao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blaggacao/subscriptions", "organizations_url": "https://api.github.com/users/blaggacao/orgs", "repos_url": "https://api.github.com/users/blaggacao/repos", "events_url": "https://api.github.com/users/blaggacao/events{/privacy}", "received_events_url": "https://api.github.com/users/blaggacao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-19T03:14:26Z", "updated_at": "2019-12-19T12:56:19Z", "closed_at": "2019-12-19T12:56:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm pretending to use the Session middleware as backend for a session store implemetation.\r\nThe session store is however lazily loaded deep inside the \"legacy\" framework.\r\n\r\nPatching the session store loader, I need to feed it the scope (or at least the session dict)  out of \"nowhere\".\r\n\r\nSo I thought, maybe the following solution is generic enough to make it a middleware:\r\n```python\r\n\r\nfrom starlette.types import ASGIApp, Receive, Scope, Send\r\n\r\nimport contextvars\r\n\r\nscope = contextvars.ContextVar('scope')\r\n\r\n\r\nclass GlobalScopeAccessorMiddleware:\r\n    \"\"\"\r\n    A middleware class that exports scope to arbitrarily access.\r\n    \"\"\"\r\n\r\n    def __init__(self, app: ASGIApp, ) -> None:\r\n        self.app = app\r\n\r\n    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\r\n        token = scope.set(scope)\r\n        await self.app(scope, receive, send)\r\n        scope.reset(token)\r\n```\r\n```python\r\nfrom starlette.middleware.globalscope import scope\r\n...\r\nscope.get()  # yeah\r\n```\r\n\r\nBetter understanding my motivation, here is the session store property I need to patch and where the self instance is not much of use:\r\n```python\r\nclass Root(object):\r\n    def __init__(self):\r\n        self._loaded = False\r\n\r\n    @lazy_property\r\n    def session_store(self):\r\n        ...\r\n```\r\n\r\nPlease let me know if I should do a PR, should this idea be generic and useful enough...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/760", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/760/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/760/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/760/events", "html_url": "https://github.com/encode/starlette/issues/760", "id": 539594316, "node_id": "MDU6SXNzdWU1Mzk1OTQzMTY=", "number": 760, "title": "Handling Deepobject Query params", "user": {"login": "Origin1227", "id": 56920506, "node_id": "MDQ6VXNlcjU2OTIwNTA2", "avatar_url": "https://avatars0.githubusercontent.com/u/56920506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Origin1227", "html_url": "https://github.com/Origin1227", "followers_url": "https://api.github.com/users/Origin1227/followers", "following_url": "https://api.github.com/users/Origin1227/following{/other_user}", "gists_url": "https://api.github.com/users/Origin1227/gists{/gist_id}", "starred_url": "https://api.github.com/users/Origin1227/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Origin1227/subscriptions", "organizations_url": "https://api.github.com/users/Origin1227/orgs", "repos_url": "https://api.github.com/users/Origin1227/repos", "events_url": "https://api.github.com/users/Origin1227/events{/privacy}", "received_events_url": "https://api.github.com/users/Origin1227/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-18T10:33:01Z", "updated_at": "2019-12-18T10:40:02Z", "closed_at": "2019-12-18T10:40:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,  am working on a project in which i be having urls with query params of the form \r\nhttp://server.com/sample?field[\"email\"]=\"title\" \r\nthat is query parameters of style deepObject ( OpenAPI)\r\nDoes starlette support these type of parameters or is there a way for me to write my own custom deserializer for these\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/starlette/issues/750", "repository_url": "https://api.github.com/repos/encode/starlette", "labels_url": "https://api.github.com/repos/encode/starlette/issues/750/labels{/name}", "comments_url": "https://api.github.com/repos/encode/starlette/issues/750/comments", "events_url": "https://api.github.com/repos/encode/starlette/issues/750/events", "html_url": "https://github.com/encode/starlette/issues/750", "id": 537153071, "node_id": "MDU6SXNzdWU1MzcxNTMwNzE=", "number": 750, "title": "Returning RedirectResponse fails for full URL's if trailing slash is missing", "user": {"login": "chbndrhnns", "id": 7534547, "node_id": "MDQ6VXNlcjc1MzQ1NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7534547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chbndrhnns", "html_url": "https://github.com/chbndrhnns", "followers_url": "https://api.github.com/users/chbndrhnns/followers", "following_url": "https://api.github.com/users/chbndrhnns/following{/other_user}", "gists_url": "https://api.github.com/users/chbndrhnns/gists{/gist_id}", "starred_url": "https://api.github.com/users/chbndrhnns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chbndrhnns/subscriptions", "organizations_url": "https://api.github.com/users/chbndrhnns/orgs", "repos_url": "https://api.github.com/users/chbndrhnns/repos", "events_url": "https://api.github.com/users/chbndrhnns/events{/privacy}", "received_events_url": "https://api.github.com/users/chbndrhnns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-12T18:52:08Z", "updated_at": "2019-12-16T16:46:10Z", "closed_at": "2019-12-16T16:46:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I played with [this](https://github.com/encode/starlette/blob/master/tests/test_responses.py#L60) test case by redirecting to an external URL and it seems to fail when a trailing slash is missing and `allow_redirects` is set to `True` (which is the default).\r\n\r\nThe same is true if you append any path parameter or query parameter to the URL.\r\n\r\nIt fails for starlette 0.12.13 and 0.13.\r\n\r\nThe error I receive is:\r\n\r\n```\r\n            if len(resp.history) >= self.max_redirects:\r\n>               raise TooManyRedirects('Exceeded %s redirects.' % self.max_redirects, response=resp)\r\nE               requests.exceptions.TooManyRedirects: Exceeded 30 redirects.\r\n```\r\n\r\nThis is my test:\r\n\r\n```python\r\ndef test_redirect_response():\r\n    url: str = 'https://github.com'\r\n\r\n    async def app(scope, receive, send):\r\n        if scope[\"path\"] == \"/\":\r\n            response = Response(\"hello, world\", media_type=\"text/plain\")\r\n        else:\r\n            response = RedirectResponse(url=url)\r\n        await response(scope, receive, send)\r\n\r\n    client = TestClient(app)\r\n\r\n    response = client.get(\"/redirect\", allow_redirects=False)\r\n    assert response.status_code == status.HTTP_307_TEMPORARY_REDIRECT\r\n\r\n    response = client.get(\"/redirect\")\r\n    assert response.status_code == status.HTTP_200_OK\r\n\r\n```\r\n\r\nTo me, it seems to be an issue with the TestClient as it actually works when running a server and return a RedirectResponse.", "performed_via_github_app": null, "score": 1.0}]}