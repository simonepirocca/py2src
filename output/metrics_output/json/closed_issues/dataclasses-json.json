{"total_count": 95, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/240", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/240/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/240/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/240/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/240", "id": 666986662, "node_id": "MDU6SXNzdWU2NjY5ODY2NjI=", "number": 240, "title": "to_dict() does not convert enums to strings", "user": {"login": "supermihi", "id": 102419, "node_id": "MDQ6VXNlcjEwMjQxOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/102419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/supermihi", "html_url": "https://github.com/supermihi", "followers_url": "https://api.github.com/users/supermihi/followers", "following_url": "https://api.github.com/users/supermihi/following{/other_user}", "gists_url": "https://api.github.com/users/supermihi/gists{/gist_id}", "starred_url": "https://api.github.com/users/supermihi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/supermihi/subscriptions", "organizations_url": "https://api.github.com/users/supermihi/orgs", "repos_url": "https://api.github.com/users/supermihi/repos", "events_url": "https://api.github.com/users/supermihi/events{/privacy}", "received_events_url": "https://api.github.com/users/supermihi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-28T11:08:30Z", "updated_at": "2020-07-31T11:05:40Z", "closed_at": "2020-07-29T09:36:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "As resolved in #51, python enums can be used with dataclasses-json and I have successfully tried that, using the `to_json()` and `from_json()` methods.\r\n\r\nHowever, with `to_dict()`, enum values appear to be untouched, hence the resulting dictionary is not JSON serializable. I assume that this is *not* the intended behavior, as according to the [API docs](https://lidatong.github.io/dataclasses-json/reference/dataclasses_json/api/#to_dict), `to_dict()` should return a JSON-compatible dict.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/235", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/235/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/235/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/235", "id": 656101947, "node_id": "MDU6SXNzdWU2NTYxMDE5NDc=", "number": 235, "title": "Values present in json output that are not present in dataclass", "user": {"login": "paulalex", "id": 5220245, "node_id": "MDQ6VXNlcjUyMjAyNDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/5220245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulalex", "html_url": "https://github.com/paulalex", "followers_url": "https://api.github.com/users/paulalex/followers", "following_url": "https://api.github.com/users/paulalex/following{/other_user}", "gists_url": "https://api.github.com/users/paulalex/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulalex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulalex/subscriptions", "organizations_url": "https://api.github.com/users/paulalex/orgs", "repos_url": "https://api.github.com/users/paulalex/repos", "events_url": "https://api.github.com/users/paulalex/events{/privacy}", "received_events_url": "https://api.github.com/users/paulalex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-13T20:01:10Z", "updated_at": "2020-07-22T12:50:38Z", "closed_at": "2020-07-22T12:50:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying out this library as coming from java it seems to be a lightweight jackson. However on converting from json and mapping to a data class and then turning the resulting data class back into a json object using `jsons` I see values that I dont want:\r\n\r\n```\r\nfrom_dict: { },\r\nschema: { },\r\ndataclass_json_config: {\r\nundefined: \"EXCLUDE\"\r\n},\r\n```\r\n\r\nWhy are these values present on my data class?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/229", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/229/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/229/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/229", "id": 635627425, "node_id": "MDU6SXNzdWU2MzU2Mjc0MjU=", "number": 229, "title": "removal of encode_json makes functionality impossible to reach", "user": {"login": "RunOrVeith", "id": 12949211, "node_id": "MDQ6VXNlcjEyOTQ5MjEx", "avatar_url": "https://avatars3.githubusercontent.com/u/12949211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RunOrVeith", "html_url": "https://github.com/RunOrVeith", "followers_url": "https://api.github.com/users/RunOrVeith/followers", "following_url": "https://api.github.com/users/RunOrVeith/following{/other_user}", "gists_url": "https://api.github.com/users/RunOrVeith/gists{/gist_id}", "starred_url": "https://api.github.com/users/RunOrVeith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RunOrVeith/subscriptions", "organizations_url": "https://api.github.com/users/RunOrVeith/orgs", "repos_url": "https://api.github.com/users/RunOrVeith/repos", "events_url": "https://api.github.com/users/RunOrVeith/events{/privacy}", "received_events_url": "https://api.github.com/users/RunOrVeith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-09T17:23:44Z", "updated_at": "2020-07-29T09:07:21Z", "closed_at": "2020-07-29T09:07:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Please consider the following example:\r\n\r\n```python\r\nfrom dataclasses import dataclass\r\nfrom enum import Enum\r\n\r\nfrom dataclasses_json import dataclass_json\r\n\r\n\r\nclass Dummy(Enum):\r\n    A = \"a\"\r\n    B = \"b\"\r\n\r\n\r\n@dataclass_json()\r\n@dataclass()\r\nclass EnumResponse:\r\n    which: Dummy\r\n\r\n\r\nobj = EnumResponse(which=Dummy.A)\r\n\r\nprint(obj.to_dict()[\"which\"])\r\n\r\n\r\n\r\n```\r\n\r\nThe issue is in [this commit](https://github.com/lidatong/dataclasses-json/commit/1887d996192048e2721a4b9587824e7f548b2475)\r\nThis now prints `Dummy.A`. Before removal of the parameter, we got `a`, if we used `obj.to_dict(encode_json=True)`.\r\nThis is now impossible to get (unless you do `to_json`, and then `json.loads`, which is not very nice imho).\r\n\r\nIt makes sense to remove passing the argument when inside `to_json`, because the json library does not require it any more.\r\nHowever, I would like to argue to keep the parameter exposed inside `to_dict`.\r\nThe use case here is that we use the dataclasses to build payloads for an API that takes loaded json content (external library).\r\nNow if there is an enum inside, we can no longer use the dataclass.to_dict method to create the payload, since we need to manually case enum values.\r\n\r\n**TLDR**: I  propose to re-expose the `encode_json` parameter inside `to_dict` so that enums can get get converted (and probably things like sets etc. as well).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/226", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/226/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/226/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/226/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/226", "id": 631392316, "node_id": "MDU6SXNzdWU2MzEzOTIzMTY=", "number": 226, "title": "Provide dump and load methods", "user": {"login": "Spenhouet", "id": 7819068, "node_id": "MDQ6VXNlcjc4MTkwNjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7819068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Spenhouet", "html_url": "https://github.com/Spenhouet", "followers_url": "https://api.github.com/users/Spenhouet/followers", "following_url": "https://api.github.com/users/Spenhouet/following{/other_user}", "gists_url": "https://api.github.com/users/Spenhouet/gists{/gist_id}", "starred_url": "https://api.github.com/users/Spenhouet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Spenhouet/subscriptions", "organizations_url": "https://api.github.com/users/Spenhouet/orgs", "repos_url": "https://api.github.com/users/Spenhouet/repos", "events_url": "https://api.github.com/users/Spenhouet/events{/privacy}", "received_events_url": "https://api.github.com/users/Spenhouet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-05T07:56:27Z", "updated_at": "2020-06-05T09:49:18Z", "closed_at": "2020-06-05T09:03:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I wish the dataclass would have integrated dump and load methods to save the data to a JSON file or to load it from a JSON file.\r\n\r\nThis should be relatively easy to add, if this is a welcome feature I could create a pull request.\r\n\r\nThis would dump / save the dataclass to a JSON file:\r\n\r\n    my_dataclass.dump(file_path)\r\n\r\nThis would load and serialize JSON from a file to a dataclass:\r\n\r\n    my_dataclass = MyDataclass.load(file_path)\r\n\r\nGoing by the `to_json` and `from_json` implementation this should be something like this:\r\n\r\n    def dump(self,\r\n             file_path: Union[str, Path],\r\n             *,\r\n             skipkeys: bool = False,\r\n             ensure_ascii: bool = True,\r\n             check_circular: bool = True,\r\n             allow_nan: bool = True,\r\n             indent: Optional[Union[int, str]] = None,\r\n             separators: Tuple[str, str] = None,\r\n             default: Callable = None,\r\n             sort_keys: bool = False,\r\n             **kw) -> None:\r\n        path = Path(file_path)\r\n        with path.open(\"w\") as json_file:\r\n            json.dump(self.to_dict(encode_json=False),\r\n                              json_file,\r\n                              cls=_ExtendedEncoder,\r\n                              skipkeys=skipkeys,\r\n                              ensure_ascii=ensure_ascii,\r\n                              check_circular=check_circular,\r\n                              allow_nan=allow_nan,\r\n                              indent=indent,\r\n                              separators=separators,\r\n                              default=default,\r\n                              sort_keys=sort_keys,\r\n                              **kw)\r\n\r\n    @classmethod\r\n    def load(cls: Type[A],\r\n             file_path: Union[str, Path],\r\n             *,\r\n             parse_float=None,\r\n             parse_int=None,\r\n             parse_constant=None,\r\n             infer_missing=False,\r\n             **kw) -> A:\r\n        path = Path(file_path)\r\n        with path.open(\"r\") as json_file:\r\n            kvs = json.load(json_file,\r\n                             parse_float=parse_float,\r\n                             parse_int=parse_int,\r\n                             parse_constant=parse_constant,\r\n                             **kw)\r\n        return cls.from_dict(kvs, infer_missing=infer_missing)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/220", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/220/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/220/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/220/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/220", "id": 622058813, "node_id": "MDU6SXNzdWU2MjIwNTg4MTM=", "number": 220, "title": "Specifying `letter_case` in decorator overrides `field_name` in individual fields", "user": {"login": "kykosic", "id": 23020003, "node_id": "MDQ6VXNlcjIzMDIwMDAz", "avatar_url": "https://avatars0.githubusercontent.com/u/23020003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kykosic", "html_url": "https://github.com/kykosic", "followers_url": "https://api.github.com/users/kykosic/followers", "following_url": "https://api.github.com/users/kykosic/following{/other_user}", "gists_url": "https://api.github.com/users/kykosic/gists{/gist_id}", "starred_url": "https://api.github.com/users/kykosic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kykosic/subscriptions", "organizations_url": "https://api.github.com/users/kykosic/orgs", "repos_url": "https://api.github.com/users/kykosic/repos", "events_url": "https://api.github.com/users/kykosic/events{/privacy}", "received_events_url": "https://api.github.com/users/kykosic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-20T20:20:12Z", "updated_at": "2020-05-20T20:26:33Z", "closed_at": "2020-05-20T20:26:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, when you specify a decorator with `@datclass_json(letter_case=LetterCase...)` and then define a `field_name` override within the dataclass, it will ignore the `field_name` override and just try to use the `LetterCase` name.\r\n\r\nExample definition:\r\n```python\r\nfrom dataclasses import dataclass, field\r\nfrom dataclasses_json import dataclass_json, config, LetterCase\r\n\r\n@dataclass_json(letter_case=LetterCase.CAMEL)\r\n@dataclass\r\nclass Foo:\r\n    some_field: int\r\n    renamed_field: int = field(metadata=config(field_name=\"originalField\"))\r\n```\r\n\r\nCase 1 (Works):\r\n```python\r\nbody = \"\"\"\r\n{\r\n    \"someField\": 5,\r\n    \"renamedField\": 7\r\n}\r\n\"\"\"\r\n\r\nFoo.from_json(body)\r\n# Foo(some_field=5, renamed_field=7)\r\n```\r\n\r\nCase 2 (Works):\r\n```python\r\nbody = \"\"\"\r\n{\r\n    \"someField\": 5,\r\n    \"renamed_field\": 7\r\n}\r\n\"\"\"\r\n\r\nFoo.from_json(body)\r\n# Foo(some_field=5, renamed_field=7)\r\n```\r\n\r\nCase 3 (Raises KeyError):\r\n```python\r\nbody = \"\"\"\r\n{\r\n    \"someField\": 5,\r\n    \"originalField\": 7\r\n}\r\n\"\"\"\r\n\r\nFoo.from_json(body)\r\n# KeyError: 'renamed_field'\r\n```\r\n\r\nI believe the correct behavior should be that Case 3 parses correctly. The single `field_name` modifier should supersede the class-level `letter_case` modifier.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/219", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/219/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/219/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/219/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/219", "id": 621282534, "node_id": "MDU6SXNzdWU2MjEyODI1MzQ=", "number": 219, "title": "A new release?", "user": {"login": "sumnerevans", "id": 16734772, "node_id": "MDQ6VXNlcjE2NzM0Nzcy", "avatar_url": "https://avatars0.githubusercontent.com/u/16734772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sumnerevans", "html_url": "https://github.com/sumnerevans", "followers_url": "https://api.github.com/users/sumnerevans/followers", "following_url": "https://api.github.com/users/sumnerevans/following{/other_user}", "gists_url": "https://api.github.com/users/sumnerevans/gists{/gist_id}", "starred_url": "https://api.github.com/users/sumnerevans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sumnerevans/subscriptions", "organizations_url": "https://api.github.com/users/sumnerevans/orgs", "repos_url": "https://api.github.com/users/sumnerevans/repos", "events_url": "https://api.github.com/users/sumnerevans/events{/privacy}", "received_events_url": "https://api.github.com/users/sumnerevans/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-19T21:01:51Z", "updated_at": "2020-05-22T01:27:33Z", "closed_at": "2020-05-22T01:27:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've been using `master` for a while because of a bug fix that I made. I'm wondering when you are expecting to release a new version that includes the latest changes?\r\n\r\nI'm using `dataclasses-json` as a dependency for my application, and I don't want to ship a new release until a new version with the latest fixes is on PyPi.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/213", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/213/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/213/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/213/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/213", "id": 609851099, "node_id": "MDU6SXNzdWU2MDk4NTEwOTk=", "number": 213, "title": "Bug in enum test cases: schema can't handle int", "user": {"login": "RunOrVeith", "id": 12949211, "node_id": "MDQ6VXNlcjEyOTQ5MjEx", "avatar_url": "https://avatars3.githubusercontent.com/u/12949211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RunOrVeith", "html_url": "https://github.com/RunOrVeith", "followers_url": "https://api.github.com/users/RunOrVeith/followers", "following_url": "https://api.github.com/users/RunOrVeith/following{/other_user}", "gists_url": "https://api.github.com/users/RunOrVeith/gists{/gist_id}", "starred_url": "https://api.github.com/users/RunOrVeith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RunOrVeith/subscriptions", "organizations_url": "https://api.github.com/users/RunOrVeith/orgs", "repos_url": "https://api.github.com/users/RunOrVeith/repos", "events_url": "https://api.github.com/users/RunOrVeith/events{/privacy}", "received_events_url": "https://api.github.com/users/RunOrVeith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-30T11:30:34Z", "updated_at": "2020-05-22T01:12:38Z", "closed_at": "2020-05-22T01:12:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The tests inside `test_enum.TestValidator` have relied on a wrong operator binding order and thus\r\ntwo cases that are actually not valid marshmallow were tested to be valid.\r\n\r\nThe issue is the following line:\r\n```\r\nassert not res == is_valid\r\n```\r\n`res` here is the output of `schema.validate()`, which returns a dict of validation errors.\r\n\r\nHowever, `not` as lower precedence than `==` ([see here](https://www.programiz.com/python-programming/precedence-associativity)), so the statement was treated as\r\n```\r\nassert not (res == is_valid)\r\n``` \r\nwhich was `True`no matter what, since we compared a dict to a bool.\r\n\r\nAfter fixing the precedence, two test cases fail: `TestValidator.test_data_with_enum` `(1, True)` and `(1.23, True)`, because marshmallow does in fact not allow int enum values (there is a marshmallow_enum in the ecosystem [here](https://github.com/justanr/marshmallow_enum)).\r\n\r\nI will enclose a pull request that tests that these cases are actually `False`.\r\nI found this while implementing a feature that allows enums as dict keys, which I will also link.\r\n@lidatong \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/211", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/211/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/211/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/211/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/211", "id": 608481620, "node_id": "MDU6SXNzdWU2MDg0ODE2MjA=", "number": 211, "title": "support date type", "user": {"login": "MichaelAzimov", "id": 58139104, "node_id": "MDQ6VXNlcjU4MTM5MTA0", "avatar_url": "https://avatars1.githubusercontent.com/u/58139104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MichaelAzimov", "html_url": "https://github.com/MichaelAzimov", "followers_url": "https://api.github.com/users/MichaelAzimov/followers", "following_url": "https://api.github.com/users/MichaelAzimov/following{/other_user}", "gists_url": "https://api.github.com/users/MichaelAzimov/gists{/gist_id}", "starred_url": "https://api.github.com/users/MichaelAzimov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MichaelAzimov/subscriptions", "organizations_url": "https://api.github.com/users/MichaelAzimov/orgs", "repos_url": "https://api.github.com/users/MichaelAzimov/repos", "events_url": "https://api.github.com/users/MichaelAzimov/events{/privacy}", "received_events_url": "https://api.github.com/users/MichaelAzimov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-04-28T17:16:24Z", "updated_at": "2020-06-06T15:23:46Z", "closed_at": "2020-06-06T15:15:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there some sort of default support for date type (like for datetime), and if not would it be useful if I implement one and create a PR?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/205", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/205/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/205/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/205/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/205", "id": 596112241, "node_id": "MDU6SXNzdWU1OTYxMTIyNDE=", "number": 205, "title": "Wrong serialisation due to overrides not working ", "user": {"login": "eliwe", "id": 5405274, "node_id": "MDQ6VXNlcjU0MDUyNzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/5405274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eliwe", "html_url": "https://github.com/eliwe", "followers_url": "https://api.github.com/users/eliwe/followers", "following_url": "https://api.github.com/users/eliwe/following{/other_user}", "gists_url": "https://api.github.com/users/eliwe/gists{/gist_id}", "starred_url": "https://api.github.com/users/eliwe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eliwe/subscriptions", "organizations_url": "https://api.github.com/users/eliwe/orgs", "repos_url": "https://api.github.com/users/eliwe/repos", "events_url": "https://api.github.com/users/eliwe/events{/privacy}", "received_events_url": "https://api.github.com/users/eliwe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-07T19:51:26Z", "updated_at": "2020-04-09T17:25:59Z", "closed_at": "2020-04-09T17:25:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have a dataclass like:\r\n`@dataclass\r\nclass Foo(dataclasses_json.DataClassJsonMixin):\r\n    a: int = field(metadata=dataclasses_json.config(encoder=lambda i: str(i), decoder=lamdba s: int(s)))`\r\n\r\nSometimes the encoedr function is not called when calling to_dict on an instance of Foo.\r\nI failed to write a test program that reproduces this consistently but have a theory.\r\nIn core.py _asdict obj, which is an instance, is passed to _user_overrides_or_exts which expects a class.\r\nThis works correctly as everything used also works on an instances.\r\nBut the function is cached on the id of the object:\r\n`@cached(cache=_user_overrides_cache, key=id)\r\n`\r\nFor classes its a good assumption (most code doesn't generate classes at runtime).\r\nBut for instances this is bad as the id gets reused and the cache can become stale. This can lead the problem I described above as the returned dict will be for a different cls.\r\n\r\nThe fix is to pass the class instead of the instance.\r\n\r\nThanks.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/200", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/200/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/200/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/200", "id": 590511493, "node_id": "MDU6SXNzdWU1OTA1MTE0OTM=", "number": 200, "title": "Omitting fields when serializing", "user": {"login": "arusahni", "id": 139487, "node_id": "MDQ6VXNlcjEzOTQ4Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/139487?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arusahni", "html_url": "https://github.com/arusahni", "followers_url": "https://api.github.com/users/arusahni/followers", "following_url": "https://api.github.com/users/arusahni/following{/other_user}", "gists_url": "https://api.github.com/users/arusahni/gists{/gist_id}", "starred_url": "https://api.github.com/users/arusahni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arusahni/subscriptions", "organizations_url": "https://api.github.com/users/arusahni/orgs", "repos_url": "https://api.github.com/users/arusahni/repos", "events_url": "https://api.github.com/users/arusahni/events{/privacy}", "received_events_url": "https://api.github.com/users/arusahni/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2020-03-30T18:47:52Z", "updated_at": "2020-06-01T09:31:18Z", "closed_at": "2020-05-29T19:48:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is it possible to omit fields when `to_dict` or `to_json` is invoked?  My use-case is I have fields with sensitive information that I only want available to the internal parts of my application, and would like to ensure they're never pushed to my end-users.\r\n\r\nRight now, I'm accomplishing it by overriding `to_dict` as follows:\r\n\r\n```python\r\n@dataclass\r\nclass MyObject(DataClassJsonMixin):\r\n    \"\"\"An object.\"\"\"\r\n\r\n    id_: uuid.UUID = field(metadata=config(field_name=\"id\"))\r\n    name: str\r\n    secret: str\r\n    another_secret: str\r\n\r\n    def to_dict(  # type: ignore[override]\r\n        self, omit_sensitive=True, **kwargs\r\n    ) -> Dict[str, \"dataclasses_json.core.Json\"]:\r\n        \"\"\"Serialize the dataclass, with an optional ability to omit sensitive/internal fields.\"\"\"\r\n        serialized = super().to_dict(**kwargs)\r\n        if omit_sensitive:\r\n            for field_name in list(serialized.keys()):\r\n                if field_name in (\"secret\", \"another_secret\"):\r\n                    del serialized[field_name]\r\n        return serialized\r\n```\r\n\r\nIdeally, this would be something I could define as part of the `field()`.  Is this currently possible with dataclass-json, and, if not, would this be something that you would consider for future functionality?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/195", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/195/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/195/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/195/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/195", "id": 585057362, "node_id": "MDU6SXNzdWU1ODUwNTczNjI=", "number": 195, "title": "timestamps are serialized imprecisely", "user": {"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 909368692, "node_id": "MDU6TGFiZWw5MDkzNjg2OTI=", "url": "https://api.github.com/repos/lidatong/dataclasses-json/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-20T13:06:57Z", "updated_at": "2020-04-02T01:24:52Z", "closed_at": "2020-04-02T01:24:52Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/194", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/194/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/194/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/194/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/194", "id": 582620765, "node_id": "MDU6SXNzdWU1ODI2MjA3NjU=", "number": 194, "title": "Camel case not always being applied", "user": {"login": "eblis", "id": 540188, "node_id": "MDQ6VXNlcjU0MDE4OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/540188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eblis", "html_url": "https://github.com/eblis", "followers_url": "https://api.github.com/users/eblis/followers", "following_url": "https://api.github.com/users/eblis/following{/other_user}", "gists_url": "https://api.github.com/users/eblis/gists{/gist_id}", "starred_url": "https://api.github.com/users/eblis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eblis/subscriptions", "organizations_url": "https://api.github.com/users/eblis/orgs", "repos_url": "https://api.github.com/users/eblis/repos", "events_url": "https://api.github.com/users/eblis/events{/privacy}", "received_events_url": "https://api.github.com/users/eblis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-16T21:53:32Z", "updated_at": "2020-03-26T21:59:56Z", "closed_at": "2020-03-26T21:59:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a weird bug where the camel case JSON format is not always applied, and I can't tell exactly why sometimes it's applied and sometimes it is not.\r\n\r\nI have the following data classes:\r\n```\r\n@dataclass_json(letter_case=LetterCase.CAMEL)\r\n@dataclass()\r\nclass Base():\r\n    pass\r\n\r\n@dataclass\r\nclass Model(Base):\r\n    id: int\r\n    code: str\r\n    name: str\r\n    manufacturer_id: int\r\n\r\n@dataclass\r\nclass Models(Base):\r\n    models: List[Model]\r\n```\r\n\r\nWhen I convert `Models` to JSON a few times I get various results, like this:\r\n```\r\n{\r\n  \"models\": [\r\n    {\r\n      \"id\": 1,\r\n      \"code\": \"modelseries_code_1\",\r\n      \"name\": \"modelseries_name_1\",\r\n      \"manufacturerId\": 1\r\n    },\r\n    {\r\n      \"id\": 11,\r\n      \"code\": \"modelseries_code_11\",\r\n      \"name\": \"modelseries_name_11\",\r\n      \"manufacturer_id\": 11\r\n    },\r\n    {\r\n      \"id\": 12,\r\n      \"code\": \"modelseries_code_12\",\r\n      \"name\": \"modelseries_name_12\",\r\n      \"manufacturerId\": 12\r\n    }\r\n  ]\r\n}\r\n```\r\nThere are 20 entries in total, but only entry 11 is wrong, saying `manufacturer_id` instead of `manufacturerId`.\r\n\r\nI've tried to write a quick test for this in python, calling the `from_json(to_json())` method and seeing if there are any differences, but this doesn't work because both naming styles are accepted, so both `manufacturerId` and `manufacturer_id` work, which is not correct (only the camel case should work) - but this is another bug I think.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/193", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/193/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/193/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/193/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/193", "id": 580393098, "node_id": "MDU6SXNzdWU1ODAzOTMwOTg=", "number": 193, "title": "Datetime without time zone is loaded wrongly [bug]", "user": {"login": "AndreyMZ", "id": 9609370, "node_id": "MDQ6VXNlcjk2MDkzNzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/9609370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreyMZ", "html_url": "https://github.com/AndreyMZ", "followers_url": "https://api.github.com/users/AndreyMZ/followers", "following_url": "https://api.github.com/users/AndreyMZ/following{/other_user}", "gists_url": "https://api.github.com/users/AndreyMZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreyMZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreyMZ/subscriptions", "organizations_url": "https://api.github.com/users/AndreyMZ/orgs", "repos_url": "https://api.github.com/users/AndreyMZ/repos", "events_url": "https://api.github.com/users/AndreyMZ/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreyMZ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-13T06:11:35Z", "updated_at": "2020-06-07T08:57:31Z", "closed_at": "2020-03-20T13:10:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Steps to reproduce\r\nRun the following tests by [pytest](https://pypi.org/project/pytest/) (e.g. with environment variable `TZ=Europe/London`):\r\n~~~py\r\nfrom dataclasses import dataclass\r\nfrom datetime import datetime, timezone\r\n\r\nfrom dataclasses_json import DataClassJsonMixin\r\n\r\n@dataclass\r\nclass Foo(DataClassJsonMixin):\r\n    f: datetime\r\n\r\ndef test_with_tz():\r\n    foo_obj = Foo(f=datetime.now(tz=timezone.utc))\r\n    assert Foo.from_json(foo_obj.to_json()) == foo_obj\r\n\r\ndef test_without_tz():\r\n    foo_obj = Foo(f=datetime.now())\r\n    assert Foo.from_json(foo_obj.to_json()) == foo_obj\r\n~~~\r\n\r\n#### Actual result\r\n`test_with_tz` passed.\r\n`test_without_tz` failed:\r\n~~~\r\nExpected :Foo(f=datetime.datetime(2020, 3, 13, 7, 8, 38, 599463))\r\nActual   :Foo(f=datetime.datetime(2020, 3, 13, 7, 8, 38, 599463, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600), 'ope')))\r\n~~~\r\n\r\n#### Expected result\r\nBoth tests passed.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/192", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/192/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/192/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/192/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/192", "id": 580094344, "node_id": "MDU6SXNzdWU1ODAwOTQzNDQ=", "number": 192, "title": "V 0.4.1 - Custom encoding sometimes fail in unittests", "user": {"login": "sdupere-git", "id": 62113315, "node_id": "MDQ6VXNlcjYyMTEzMzE1", "avatar_url": "https://avatars3.githubusercontent.com/u/62113315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdupere-git", "html_url": "https://github.com/sdupere-git", "followers_url": "https://api.github.com/users/sdupere-git/followers", "following_url": "https://api.github.com/users/sdupere-git/following{/other_user}", "gists_url": "https://api.github.com/users/sdupere-git/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdupere-git/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdupere-git/subscriptions", "organizations_url": "https://api.github.com/users/sdupere-git/orgs", "repos_url": "https://api.github.com/users/sdupere-git/repos", "events_url": "https://api.github.com/users/sdupere-git/events{/privacy}", "received_events_url": "https://api.github.com/users/sdupere-git/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-12T17:22:54Z", "updated_at": "2020-03-13T16:25:54Z", "closed_at": "2020-03-13T16:25:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "We had to revert back to version 0.3.8 since 0.4.1 would have really weird behaviors,\r\n\r\n0.4.1 would sometime do the following:\r\n* Ignore fields with custom encoding and encode fields with their default encoding (datetime becoming float, bytes becoming lists, etc...).\r\n* Fail to find the none-generic constructor of a typing.List (Throws an exception for using a List constructor instead of list)\r\n\r\nThe failures were frequent, but intermittent... In our unit tests, sometime the encoding would work, sometime not...same for the decoding of a List...sometime it would work, sometime not... Did not find a clear reason why it happened.\r\n\r\nRolling back to 0.3.8 fixed everything.\r\n\r\nWe think the issue might be related to the addition of caching.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/186", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/186/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/186/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/186/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/186", "id": 573389669, "node_id": "MDU6SXNzdWU1NzMzODk2Njk=", "number": 186, "title": "TypeError: Object of type date is not JSON serializable", "user": {"login": "trew", "id": 1043828, "node_id": "MDQ6VXNlcjEwNDM4Mjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1043828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trew", "html_url": "https://github.com/trew", "followers_url": "https://api.github.com/users/trew/followers", "following_url": "https://api.github.com/users/trew/following{/other_user}", "gists_url": "https://api.github.com/users/trew/gists{/gist_id}", "starred_url": "https://api.github.com/users/trew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trew/subscriptions", "organizations_url": "https://api.github.com/users/trew/orgs", "repos_url": "https://api.github.com/users/trew/repos", "events_url": "https://api.github.com/users/trew/events{/privacy}", "received_events_url": "https://api.github.com/users/trew/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-29T19:03:22Z", "updated_at": "2020-03-13T11:37:10Z", "closed_at": "2020-03-13T11:37:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Repro test works in 0.4.0 but fails in 0.4.1.\r\n\r\nRemoving the ValueClass and only testing the DateClass works in 0.4.1 though.\r\n\r\n```python\r\nimport datetime\r\nfrom dataclasses import dataclass, field\r\n\r\nfrom dataclasses_json import dataclass_json, config\r\nfrom marshmallow import fields\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass ValueClass:\r\n    value: int\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass DateClass:\r\n    date: datetime.date = field(\r\n        metadata=config(\r\n            encoder=datetime.date.isoformat,\r\n            decoder=datetime.date.fromisoformat,\r\n            mm_field=fields.Date(format='iso')\r\n        )\r\n    )\r\n\r\n\r\ndef test_serialize():\r\n    date = datetime.datetime.fromisoformat('2020-01-02').date()\r\n    serialized_value = ValueClass.to_json(ValueClass(value=1))\r\n    serialized_date = DateClass.to_json(DateClass(date=date))\r\n    assert serialized_value == '{\"value\": 1}'\r\n    assert serialized_date == '{\"date\": \"2020-01-02\"}'\r\n```\r\n\r\nIn 0.4.1 this generates\r\n\r\n```\r\n    def test_serialize():\r\n        date = datetime.datetime.fromisoformat('2020-01-02').date()\r\n        serialized_value = ValueClass.to_json(ValueClass(value=1))\r\n>       serialized_date = DateClass.to_json(DateClass(date=date))\r\n\r\ntests/test_json.py:29:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/python3.8/site-packages/dataclasses_json/api.py:50: in to_json\r\n    return json.dumps(self.to_dict(encode_json=False),\r\n/python3.8/json/__init__.py:234: in dumps\r\n    return cls(\r\n/python3.8/json/encoder.py:199: in encode\r\n    chunks = self.iterencode(o, _one_shot=True)\r\n/python3.8/json/encoder.py:257: in iterencode\r\n    return _iterencode(o, 0)\r\n/python3.8/site-packages/dataclasses_json/core.py:52: in default\r\n    result = json.JSONEncoder.default(self, o)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <dataclasses_json.core._ExtendedEncoder object at 0x110b906d0>, o = datetime.date(2020, 1, 2)\r\n\r\n    def default(self, o):\r\n        \"\"\"Implement this method in a subclass such that it returns\r\n        a serializable object for ``o``, or calls the base implementation\r\n        (to raise a ``TypeError``).\r\n\r\n        For example, to support arbitrary iterators, you could\r\n        implement default like this::\r\n\r\n            def default(self, o):\r\n                try:\r\n                    iterable = iter(o)\r\n                except TypeError:\r\n                    pass\r\n                else:\r\n                    return list(iterable)\r\n                # Let the base class default method raise the TypeError\r\n                return JSONEncoder.default(self, o)\r\n\r\n        \"\"\"\r\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\r\n                        f'is not JSON serializable')\r\nE       TypeError: Object of type date is not JSON serializable\r\n\r\n/python3.8/json/encoder.py:179: TypeError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/179", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/179/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/179/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/179/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/179", "id": 569210992, "node_id": "MDU6SXNzdWU1NjkyMTA5OTI=", "number": 179, "title": "v0.3.7 introduced breaking change - default arg support", "user": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-02-21T22:12:54Z", "updated_at": "2020-02-22T19:04:37Z", "closed_at": "2020-02-22T17:13:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "This code runs fine with v0.3.6, but breaks in v0.3.7 (which is something I would expect of the major version, not patch):\r\n\r\n```python\r\nfrom dataclasses import dataclass\r\nfrom dataclasses_json import dataclass_json\r\n\r\n@dataclass\r\n@dataclass_json\r\nclass MyClass:\r\n    foo: int = 0\r\n\r\nv1 = MyClass()\r\nv2 = MyClass(foo=1)    #  <---  TypeError: MyClass() takes no arguments\r\n```\r\n\r\nTo test, copy/paste the above code after running one of these:\r\n```\r\ndocker run --rm -it python:3.8 sh -c 'pip install -I dataclasses-json==0.3.6 && python'\r\ndocker run --rm -it python:3.8 sh -c 'pip install -I dataclasses-json==0.3.7 && python'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/177", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/177/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/177/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/177/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/177", "id": 565870587, "node_id": "MDU6SXNzdWU1NjU4NzA1ODc=", "number": 177, "title": "A way to enhance json encoder", "user": {"login": "imbolc", "id": 747996, "node_id": "MDQ6VXNlcjc0Nzk5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/747996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imbolc", "html_url": "https://github.com/imbolc", "followers_url": "https://api.github.com/users/imbolc/followers", "following_url": "https://api.github.com/users/imbolc/following{/other_user}", "gists_url": "https://api.github.com/users/imbolc/gists{/gist_id}", "starred_url": "https://api.github.com/users/imbolc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imbolc/subscriptions", "organizations_url": "https://api.github.com/users/imbolc/orgs", "repos_url": "https://api.github.com/users/imbolc/repos", "events_url": "https://api.github.com/users/imbolc/events{/privacy}", "received_events_url": "https://api.github.com/users/imbolc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-02-16T08:34:06Z", "updated_at": "2020-02-22T17:34:28Z", "closed_at": "2020-02-22T17:34:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found the lib can't encode `pahtlib.Path` at the moment. I looked to the code with a hope to find there something like `functools.singledispatch` so I can just register `Path` there. But there's just subclassing of `json.JSONEncoder`. I didn't dig deep into the the code, is there a reason for not using `singledispatch`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/172", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/172/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/172/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/172/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/172", "id": 562068235, "node_id": "MDU6SXNzdWU1NjIwNjgyMzU=", "number": 172, "title": "Deprecation warning due to invalid escape sequences in Python 3.8", "user": {"login": "tirkarthi", "id": 3972343, "node_id": "MDQ6VXNlcjM5NzIzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3972343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirkarthi", "html_url": "https://github.com/tirkarthi", "followers_url": "https://api.github.com/users/tirkarthi/followers", "following_url": "https://api.github.com/users/tirkarthi/following{/other_user}", "gists_url": "https://api.github.com/users/tirkarthi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirkarthi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirkarthi/subscriptions", "organizations_url": "https://api.github.com/users/tirkarthi/orgs", "repos_url": "https://api.github.com/users/tirkarthi/repos", "events_url": "https://api.github.com/users/tirkarthi/events{/privacy}", "received_events_url": "https://api.github.com/users/tirkarthi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-08T19:44:17Z", "updated_at": "2020-02-10T15:27:39Z", "closed_at": "2020-02-10T15:27:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Deprecation warnings are raised due to invalid escape sequences in Python 3.8 . Below is a log of the warnings raised during compiling all the python files. Using raw strings or escaping them will fix this issue.\r\n\r\n```\r\nfind . -iname '*.py'  | xargs -P 4 -I{} python -Wall -m py_compile {}\r\n\r\n./publish.py:5: DeprecationWarning: invalid escape sequence \\d\r\n  version_pattern = '\\d\\.\\d\\.\\d'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/166", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/166/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/166/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/166/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/166", "id": 548157753, "node_id": "MDU6SXNzdWU1NDgxNTc3NTM=", "number": 166, "title": "Can not define optional/any nested type with schema", "user": {"login": "RunOrVeith", "id": 12949211, "node_id": "MDQ6VXNlcjEyOTQ5MjEx", "avatar_url": "https://avatars3.githubusercontent.com/u/12949211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RunOrVeith", "html_url": "https://github.com/RunOrVeith", "followers_url": "https://api.github.com/users/RunOrVeith/followers", "following_url": "https://api.github.com/users/RunOrVeith/following{/other_user}", "gists_url": "https://api.github.com/users/RunOrVeith/gists{/gist_id}", "starred_url": "https://api.github.com/users/RunOrVeith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RunOrVeith/subscriptions", "organizations_url": "https://api.github.com/users/RunOrVeith/orgs", "repos_url": "https://api.github.com/users/RunOrVeith/repos", "events_url": "https://api.github.com/users/RunOrVeith/events{/privacy}", "received_events_url": "https://api.github.com/users/RunOrVeith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-10T15:58:47Z", "updated_at": "2020-02-08T12:31:11Z", "closed_at": "2020-02-08T12:31:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider the following example:\r\n\r\n```python\r\nfrom dataclasses_json import dataclass_json\r\nfrom dataclasses import dataclass\r\nfrom typing import Dict, Any\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass Test:\r\n    x: Dict[str, Any]\r\n\r\nTest.schema().load({\"x\": {\"test\": None})\r\n```\r\n\r\nResults in `marshmallow.exceptions.ValidationError: {'x': defaultdict(<class 'dict'>, {'test': {'value': ['Field may not be null.']}})}`, even though `Any` includes `None` as a valid value.\r\n\r\nThe same happens when you define `x: Dict[str, Optional[Any]]`.\r\n\r\nI am not sure what the desired behavior here is, especially with the fact that [Any is not the same as Optional[Any]](https://github.com/python/mypy/issues/3138).\r\nI have a  solution for both cases in the enclosed pull request\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/163", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/163/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/163/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/163", "id": 540291532, "node_id": "MDU6SXNzdWU1NDAyOTE1MzI=", "number": 163, "title": "Migrate CI to Github Workflow", "user": {"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2019-12-19T12:43:59Z", "updated_at": "2020-02-22T17:17:02Z", "closed_at": "2020-02-22T17:17:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/162", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/162/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/162/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/162/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/162", "id": 539161320, "node_id": "MDU6SXNzdWU1MzkxNjEzMjA=", "number": 162, "title": "Allow dict fields in dataclasses", "user": {"login": "milesgranger", "id": 13764397, "node_id": "MDQ6VXNlcjEzNzY0Mzk3", "avatar_url": "https://avatars2.githubusercontent.com/u/13764397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/milesgranger", "html_url": "https://github.com/milesgranger", "followers_url": "https://api.github.com/users/milesgranger/followers", "following_url": "https://api.github.com/users/milesgranger/following{/other_user}", "gists_url": "https://api.github.com/users/milesgranger/gists{/gist_id}", "starred_url": "https://api.github.com/users/milesgranger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/milesgranger/subscriptions", "organizations_url": "https://api.github.com/users/milesgranger/orgs", "repos_url": "https://api.github.com/users/milesgranger/repos", "events_url": "https://api.github.com/users/milesgranger/events{/privacy}", "received_events_url": "https://api.github.com/users/milesgranger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-17T16:02:37Z", "updated_at": "2019-12-18T05:55:03Z", "closed_at": "2019-12-18T05:55:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hola! \r\n\r\nFirst and foremost, thanks, this seems like a useful lib, it's a shame this isn't supported in Python by default. \r\n\r\nAnyhow, sometimes I find it necessary to support some arbitrary object which doesn't need to be typed/known as part of dataclass. However this doesn't seem to be supported.\r\n\r\n```python\r\n@dataclass_json\r\n@dataclass\r\nclass Foo:\r\n    bar: dict\r\n\r\nf = Foo(dict())\r\nFoo.from_json(f.to_json())\r\n```\r\n\r\nResults in:\r\n```python\r\nAttributeError: type object 'dict' has no attribute '__args__'\r\n```\r\n\r\nAlthough, perhaps I'm doing something wrong. :slightly_smiling_face: ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/161", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/161/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/161/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/161/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/161", "id": 538042254, "node_id": "MDU6SXNzdWU1MzgwNDIyNTQ=", "number": 161, "title": "Clarify differences in usage & code analysis between decorator and mixin", "user": {"login": "synrg", "id": 1204376, "node_id": "MDQ6VXNlcjEyMDQzNzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1204376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/synrg", "html_url": "https://github.com/synrg", "followers_url": "https://api.github.com/users/synrg/followers", "following_url": "https://api.github.com/users/synrg/following{/other_user}", "gists_url": "https://api.github.com/users/synrg/gists{/gist_id}", "starred_url": "https://api.github.com/users/synrg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/synrg/subscriptions", "organizations_url": "https://api.github.com/users/synrg/orgs", "repos_url": "https://api.github.com/users/synrg/repos", "events_url": "https://api.github.com/users/synrg/events{/privacy}", "received_events_url": "https://api.github.com/users/synrg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-15T12:10:13Z", "updated_at": "2020-02-22T17:32:49Z", "closed_at": "2020-02-22T17:32:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please clarify in your documentation the differences in usage & support by code analysis tools (e.g. pylint) between the decorator approach and mixin approach. This is regarding this point in the README:\r\n\r\n> Pick whichever approach suits your taste. The differences in implementation are invisible in usage.\r\n\r\nMy first problem with the decorator was that without `# pylint: disable=no-member` on each `User.from_dict(record)` in my code, pylint complained about `User` not having that member. Switching to the mixin approach solved this.\r\n\r\nIn discussion with another developer, he pointed out that type hinting wouldn't work either with the decorator approach, as untyped decorators are assumed to return the callable with an identical interface. On the other hand, it could be supported with the mixin approach.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/160", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/160/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/160/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/160/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/160", "id": 537882367, "node_id": "MDU6SXNzdWU1Mzc4ODIzNjc=", "number": 160, "title": "field_name not working in combination with letter_case", "user": {"login": "aliebig", "id": 11503097, "node_id": "MDQ6VXNlcjExNTAzMDk3", "avatar_url": "https://avatars0.githubusercontent.com/u/11503097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliebig", "html_url": "https://github.com/aliebig", "followers_url": "https://api.github.com/users/aliebig/followers", "following_url": "https://api.github.com/users/aliebig/following{/other_user}", "gists_url": "https://api.github.com/users/aliebig/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliebig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliebig/subscriptions", "organizations_url": "https://api.github.com/users/aliebig/orgs", "repos_url": "https://api.github.com/users/aliebig/repos", "events_url": "https://api.github.com/users/aliebig/events{/privacy}", "received_events_url": "https://api.github.com/users/aliebig/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-14T08:03:12Z", "updated_at": "2020-04-21T23:49:51Z", "closed_at": "2020-04-21T23:37:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "When combing @dataclass_json(letter_case=LetterCase.CAMEL) with \"field_name\" config, the \"field_name\" configuration has no effect.  \r\n\r\n\r\n## How to reproduce:\r\n### Run the following  code\r\n```python\r\nfrom dataclasses import dataclass, field\r\n\r\nfrom dataclasses_json import dataclass_json, config, LetterCase\r\n\r\n@dataclass\r\n@dataclass_json(letter_case=LetterCase.CAMEL)\r\nclass ExampleClass:\r\n    identifier: str = field(\r\n        metadata=config(\r\n            field_name=\"id\"\r\n        ))\r\n    other_field: str\r\n\r\nprint(ExampleClass(\"id_value\", \"other_value\").to_dict())\r\n\r\n```\r\n### Expected output:\r\n**{'id': 'id_value', 'otherField': 'other_value'}**\r\n\r\n\r\n### Observed output:\r\n**{'identifier': 'id_value', 'otherField': 'other_value'}**\r\nThe effect is the same for other LetterCase values\r\n\r\n\r\n### Environment:\r\npython: 3.8\r\ndataclasses-json: 0.3.6", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/157", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/157/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/157/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/157/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/157", "id": 529831518, "node_id": "MDU6SXNzdWU1Mjk4MzE1MTg=", "number": 157, "title": "Question: How to exclude field from serialization?", "user": {"login": "fgsalomon", "id": 3149695, "node_id": "MDQ6VXNlcjMxNDk2OTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3149695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fgsalomon", "html_url": "https://github.com/fgsalomon", "followers_url": "https://api.github.com/users/fgsalomon/followers", "following_url": "https://api.github.com/users/fgsalomon/following{/other_user}", "gists_url": "https://api.github.com/users/fgsalomon/gists{/gist_id}", "starred_url": "https://api.github.com/users/fgsalomon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fgsalomon/subscriptions", "organizations_url": "https://api.github.com/users/fgsalomon/orgs", "repos_url": "https://api.github.com/users/fgsalomon/repos", "events_url": "https://api.github.com/users/fgsalomon/events{/privacy}", "received_events_url": "https://api.github.com/users/fgsalomon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-28T10:40:09Z", "updated_at": "2019-12-02T10:22:03Z", "closed_at": "2019-12-02T10:22:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have some dataclasses with bytes fields. These fields can be very large and I'd like to avoid seralizing them when calling `.to_json()`. I've tried overriding the field and setting the `encoder` and `decoder` to lambdas that return `None` but that didn't work.\r\n\r\nIs there any way to exclude a field?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/154", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/154/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/154/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/154", "id": 527264727, "node_id": "MDU6SXNzdWU1MjcyNjQ3Mjc=", "number": 154, "title": "globally change default encoder/decoder", "user": {"login": "npgm", "id": 1728509, "node_id": "MDQ6VXNlcjE3Mjg1MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1728509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npgm", "html_url": "https://github.com/npgm", "followers_url": "https://api.github.com/users/npgm/followers", "following_url": "https://api.github.com/users/npgm/following{/other_user}", "gists_url": "https://api.github.com/users/npgm/gists{/gist_id}", "starred_url": "https://api.github.com/users/npgm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npgm/subscriptions", "organizations_url": "https://api.github.com/users/npgm/orgs", "repos_url": "https://api.github.com/users/npgm/repos", "events_url": "https://api.github.com/users/npgm/events{/privacy}", "received_events_url": "https://api.github.com/users/npgm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 909368694, "node_id": "MDU6TGFiZWw5MDkzNjg2OTQ=", "url": "https://api.github.com/repos/lidatong/dataclasses-json/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-22T15:33:44Z", "updated_at": "2020-02-22T17:23:53Z", "closed_at": "2020-02-22T17:23:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Our APIs return and consume iso-formatted datetimes - it would be great if I could globally  change the encoder/decoder for this, instead of having to configure at the per field level. Alternatively, if the @dataclass_json annotation provided type specific encoder/decoder overrides I could create our own internal annotation wrapping dataclass_json with the default config. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/151", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/151/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/151/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/151", "id": 506755275, "node_id": "MDU6SXNzdWU1MDY3NTUyNzU=", "number": 151, "title": "Mark mm fields as required when not is_optional / default.", "user": {"login": "Fraggle", "id": 24419, "node_id": "MDQ6VXNlcjI0NDE5", "avatar_url": "https://avatars1.githubusercontent.com/u/24419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Fraggle", "html_url": "https://github.com/Fraggle", "followers_url": "https://api.github.com/users/Fraggle/followers", "following_url": "https://api.github.com/users/Fraggle/following{/other_user}", "gists_url": "https://api.github.com/users/Fraggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/Fraggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Fraggle/subscriptions", "organizations_url": "https://api.github.com/users/Fraggle/orgs", "repos_url": "https://api.github.com/users/Fraggle/repos", "events_url": "https://api.github.com/users/Fraggle/events{/privacy}", "received_events_url": "https://api.github.com/users/Fraggle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-14T16:26:06Z", "updated_at": "2019-10-15T16:25:53Z", "closed_at": "2019-10-15T16:25:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello & thanks for your work.\r\nI wonder if you could mark the underlying mm field as required if the field has no default value / is not type hinted as `Optional`.\r\n\r\nMy use case is that I use marshmallow-jsonschema to convert the marshmallow schema to jsonschema and the field with defaults are actually marked as having a default value of null which is NOT an accepted value if they are not marked as required false as well, on the opposite, the ones with no defaults are not specified as required and thus accept null (however, it fails when trying to convert to the dataclass).\r\n\r\nI see you have a is_optional method that already check for optional / none, you could just use that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/146", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/146/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/146/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/146/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/146", "id": 499182568, "node_id": "MDU6SXNzdWU0OTkxODI1Njg=", "number": 146, "title": "Possible issue with timestamp serialization", "user": {"login": "stevenbedrick", "id": 51869, "node_id": "MDQ6VXNlcjUxODY5", "avatar_url": "https://avatars0.githubusercontent.com/u/51869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stevenbedrick", "html_url": "https://github.com/stevenbedrick", "followers_url": "https://api.github.com/users/stevenbedrick/followers", "following_url": "https://api.github.com/users/stevenbedrick/following{/other_user}", "gists_url": "https://api.github.com/users/stevenbedrick/gists{/gist_id}", "starred_url": "https://api.github.com/users/stevenbedrick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stevenbedrick/subscriptions", "organizations_url": "https://api.github.com/users/stevenbedrick/orgs", "repos_url": "https://api.github.com/users/stevenbedrick/repos", "events_url": "https://api.github.com/users/stevenbedrick/events{/privacy}", "received_events_url": "https://api.github.com/users/stevenbedrick/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 909368694, "node_id": "MDU6TGFiZWw5MDkzNjg2OTQ=", "url": "https://api.github.com/repos/lidatong/dataclasses-json/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-27T01:08:00Z", "updated_at": "2019-09-28T18:38:41Z", "closed_at": "2019-09-28T18:38:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Apologies if this is a known limitation, but I have run into an issue when using the `.schema().dumps()` functionality. I have encountered an issue with serialization of dataclasses with optional timestamp fields whose value is `None` at the time of serialization. The `.to_json()` method works just fine in this case, but I believe that there is [a bug in line 25 of `dataclasses_json/mm.py`](https://github.com/lidatong/dataclasses-json/blob/03dc2f9bc04c24cfb5d3eded63f6c4176d4779bf/dataclasses_json/mm.py#L25) that is encountering problems when the `value` in question is `None`. \r\n\r\nI have put together a small example script illustrating the issue [here](https://gist.github.com/stevenbedrick/d05970da1a21b60c3cd8fc421d37e90e).\r\n\r\nOne possible fix would just be to add a check for `None` to the `_TimestampField._serialize()` method; from my read of the [calling code in Marshmallow](https://github.com/marshmallow-code/marshmallow/blob/dev/src/marshmallow/fields.py#L325), it looks like it's expecting field-specific serializers to be able to handle `None` values in this sort of situation. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/144", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/144/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/144/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/144", "id": 497321706, "node_id": "MDU6SXNzdWU0OTczMjE3MDY=", "number": 144, "title": "Encoder for bytes field gets incorrect argument value", "user": {"login": "tstehr", "id": 1938293, "node_id": "MDQ6VXNlcjE5MzgyOTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1938293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tstehr", "html_url": "https://github.com/tstehr", "followers_url": "https://api.github.com/users/tstehr/followers", "following_url": "https://api.github.com/users/tstehr/following{/other_user}", "gists_url": "https://api.github.com/users/tstehr/gists{/gist_id}", "starred_url": "https://api.github.com/users/tstehr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tstehr/subscriptions", "organizations_url": "https://api.github.com/users/tstehr/orgs", "repos_url": "https://api.github.com/users/tstehr/repos", "events_url": "https://api.github.com/users/tstehr/events{/privacy}", "received_events_url": "https://api.github.com/users/tstehr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-23T20:51:03Z", "updated_at": "2019-09-28T02:03:04Z", "closed_at": "2019-09-28T02:03:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm trying to build a dataclass with a field of type `bytes` and have it encoded as base64 in JSON. To archive that, I have defined a custom encoder:\r\n\r\n```python\r\n@dataclass_json\r\n@dataclass(frozen=True)\r\nclass TestCase:\r\n    byte_field: bytes = field(metadata=config(\r\n        encoder=lambda val: base64.b64encode(val).decode(),\r\n        mm_field=fields.String()\r\n    ))\r\n\r\nt = TestCase(byte_field=b'abc')\r\nprint(t.to_json())\r\n```\r\n\r\nHowever when executing this the encoder is not called with `b'abc'` as expected, but with `[97, 98, 99]` (the int representation of the bytes) instead.\r\n\r\nI believe this happens because `dataclasses_json.core._asdict` treats the byte string as a collection and converts it to a list of int.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/142", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/142/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/142/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/142", "id": 496856714, "node_id": "MDU6SXNzdWU0OTY4NTY3MTQ=", "number": 142, "title": "generic supported types aren't decoded correctly", "user": {"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2019-09-23T00:59:31Z", "updated_at": "2019-09-23T01:07:18Z", "closed_at": "2019-09-23T01:07:18Z", "author_association": "OWNER", "active_lock_reason": null, "body": "#137 is just one manifestation of the issue", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/137", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/137/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/137/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/137/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/137", "id": 488525980, "node_id": "MDU6SXNzdWU0ODg1MjU5ODA=", "number": 137, "title": "Not parse Optional[Decimal]", "user": {"login": "heckad", "id": 45011689, "node_id": "MDQ6VXNlcjQ1MDExNjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/45011689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heckad", "html_url": "https://github.com/heckad", "followers_url": "https://api.github.com/users/heckad/followers", "following_url": "https://api.github.com/users/heckad/following{/other_user}", "gists_url": "https://api.github.com/users/heckad/gists{/gist_id}", "starred_url": "https://api.github.com/users/heckad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heckad/subscriptions", "organizations_url": "https://api.github.com/users/heckad/orgs", "repos_url": "https://api.github.com/users/heckad/repos", "events_url": "https://api.github.com/users/heckad/events{/privacy}", "received_events_url": "https://api.github.com/users/heckad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-03T10:35:57Z", "updated_at": "2019-09-23T01:13:23Z", "closed_at": "2019-09-23T01:13:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nfrom dataclasses import dataclass\r\nfrom decimal import Decimal\r\nfrom typing import Optional\r\n\r\nfrom dataclasses_json import DataClassJsonMixin\r\n\r\n\r\n@dataclass\r\nclass Price(DataClassJsonMixin):\r\n    price: Optional[Decimal]\r\n\r\n\r\ndef test_simple():\r\n    p = Price(price=Decimal(\"1.2\"))\r\n    np = Price.from_json(p.to_json())\r\n    assert p == np\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/136", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/136/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/136/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/136", "id": 488507912, "node_id": "MDU6SXNzdWU0ODg1MDc5MTI=", "number": 136, "title": "TypeError: make_instance() got an unexpected keyword argument 'many'", "user": {"login": "kkbblzq", "id": 4437979, "node_id": "MDQ6VXNlcjQ0Mzc5Nzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/4437979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kkbblzq", "html_url": "https://github.com/kkbblzq", "followers_url": "https://api.github.com/users/kkbblzq/followers", "following_url": "https://api.github.com/users/kkbblzq/following{/other_user}", "gists_url": "https://api.github.com/users/kkbblzq/gists{/gist_id}", "starred_url": "https://api.github.com/users/kkbblzq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kkbblzq/subscriptions", "organizations_url": "https://api.github.com/users/kkbblzq/orgs", "repos_url": "https://api.github.com/users/kkbblzq/repos", "events_url": "https://api.github.com/users/kkbblzq/events{/privacy}", "received_events_url": "https://api.github.com/users/kkbblzq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-03T09:57:44Z", "updated_at": "2019-09-04T01:01:39Z", "closed_at": "2019-09-04T01:01:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "dataclasses-json==0.3.1\r\nmarshmallow==3.0.1\r\nmarshmallow-enum==1.5.1\r\npython 3.7.3\r\n'''\r\n@dataclass_json\r\n@dataclass\r\nclass Person:\r\n    name: str\r\n    age: int\r\n\r\n\r\nif __name__ == '__main__':\r\n    data = [{'name': 'zs', 'age': 1}, {'name': 'ls', 'age': 2}]\r\n    Person.schema().load(data, many=True)\r\n'''\r\n\r\nraise TypeError \r\nTypeError: make_instance() got an unexpected keyword argument 'many'\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/132", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/132/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/132/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/132", "id": 486353450, "node_id": "MDU6SXNzdWU0ODYzNTM0NTA=", "number": 132, "title": "add mypy support", "user": {"login": "ZeeD", "id": 69095, "node_id": "MDQ6VXNlcjY5MDk1", "avatar_url": "https://avatars3.githubusercontent.com/u/69095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZeeD", "html_url": "https://github.com/ZeeD", "followers_url": "https://api.github.com/users/ZeeD/followers", "following_url": "https://api.github.com/users/ZeeD/following{/other_user}", "gists_url": "https://api.github.com/users/ZeeD/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZeeD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZeeD/subscriptions", "organizations_url": "https://api.github.com/users/ZeeD/orgs", "repos_url": "https://api.github.com/users/ZeeD/repos", "events_url": "https://api.github.com/users/ZeeD/events{/privacy}", "received_events_url": "https://api.github.com/users/ZeeD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 909368694, "node_id": "MDU6TGFiZWw5MDkzNjg2OTQ=", "url": "https://api.github.com/repos/lidatong/dataclasses-json/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-28T12:32:40Z", "updated_at": "2019-08-31T01:13:23Z", "closed_at": "2019-08-31T01:13:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I see there are some type annotations sprinkled in the source.\r\nI think would be useful to add the missing ones and add a PEP561-compatibile mark (adding the py.typed file in the package)\r\n\r\n--\r\nhttps://www.python.org/dev/peps/pep-0561/", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/131", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/131/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/131/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/131", "id": 485641129, "node_id": "MDU6SXNzdWU0ODU2NDExMjk=", "number": 131, "title": "documentation", "user": {"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-27T07:42:03Z", "updated_at": "2019-09-06T03:03:17Z", "closed_at": "2019-09-06T03:03:17Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/130", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/130/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/130/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/130", "id": 485609107, "node_id": "MDU6SXNzdWU0ODU2MDkxMDc=", "number": 130, "title": "Update requirements for marshmallow>=3.0.1", "user": {"login": "y-mironov", "id": 18030141, "node_id": "MDQ6VXNlcjE4MDMwMTQx", "avatar_url": "https://avatars1.githubusercontent.com/u/18030141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y-mironov", "html_url": "https://github.com/y-mironov", "followers_url": "https://api.github.com/users/y-mironov/followers", "following_url": "https://api.github.com/users/y-mironov/following{/other_user}", "gists_url": "https://api.github.com/users/y-mironov/gists{/gist_id}", "starred_url": "https://api.github.com/users/y-mironov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y-mironov/subscriptions", "organizations_url": "https://api.github.com/users/y-mironov/orgs", "repos_url": "https://api.github.com/users/y-mironov/repos", "events_url": "https://api.github.com/users/y-mironov/events{/privacy}", "received_events_url": "https://api.github.com/users/y-mironov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-27T06:26:31Z", "updated_at": "2019-08-31T01:12:31Z", "closed_at": "2019-08-31T01:12:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\u0441ould you update the requirements of marshmallow version to 3.0.1, please ?\r\nhttps://github.com/marshmallow-code/marshmallow/releases/tag/3.0.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/128", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/128/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/128/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/128", "id": 484946743, "node_id": "MDU6SXNzdWU0ODQ5NDY3NDM=", "number": 128, "title": "Remove the need for a separate config decorator", "user": {"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-25T15:58:24Z", "updated_at": "2019-08-26T00:03:45Z", "closed_at": "2019-08-26T00:03:45Z", "author_association": "OWNER", "active_lock_reason": null, "body": "It's annoying to have both `@configured_dataclasses_json` and `@dataclasses_json`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/127", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/127/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/127/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/127", "id": 484588305, "node_id": "MDU6SXNzdWU0ODQ1ODgzMDU=", "number": 127, "title": "Attribute error: 'list' object has no attribute 'items'", "user": {"login": "karambaq", "id": 14233969, "node_id": "MDQ6VXNlcjE0MjMzOTY5", "avatar_url": "https://avatars1.githubusercontent.com/u/14233969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karambaq", "html_url": "https://github.com/karambaq", "followers_url": "https://api.github.com/users/karambaq/followers", "following_url": "https://api.github.com/users/karambaq/following{/other_user}", "gists_url": "https://api.github.com/users/karambaq/gists{/gist_id}", "starred_url": "https://api.github.com/users/karambaq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karambaq/subscriptions", "organizations_url": "https://api.github.com/users/karambaq/orgs", "repos_url": "https://api.github.com/users/karambaq/repos", "events_url": "https://api.github.com/users/karambaq/events{/privacy}", "received_events_url": "https://api.github.com/users/karambaq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-08-23T15:26:59Z", "updated_at": "2019-08-24T13:31:43Z", "closed_at": "2019-08-24T13:21:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Example\r\n## main.py\r\n```\r\nimport json\r\nfrom dataclasses import dataclass, field\r\nfrom dataclasses_json import dataclass_json, config\r\n\r\nfrom typing import List, Dict, Any\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass Coef:\r\n    val: float = field(default=float, metadata=config(field_name=\"C\"))\r\n    cf_type: float = field(default=int, metadata=config(field_name=\"G\"))\r\n    total: float = field(default=float, metadata=config(field_name=\"T\"))\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass QuarterCoefs:\r\n    coefs: List[Coef] = field(default_factory=list,\r\n                              metadata=config(field_name=\"E\"))\r\n    num: str = field(default=\"\", metadata=config(field_name=\"PN\"))\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass Game:\r\n    quarter_coefs: QuarterCoefs = field(default_factory=list,\r\n                                        metadata=config(field_name=\"SG\"))\r\n\r\n\r\nwith open('test.json', 'r') as f:\r\n    match = json.load(f)\r\n\r\ngame_json = json.dumps(match)\r\nm = Game.from_json(game_json)\r\nprint(m)\r\n```\r\n\r\n\r\n## test.json\r\n```\r\n{\r\n    \"SG\": [{\r\n        \"E\": [{\r\n                \"C\": 1.71,\r\n                \"G\": 1,\r\n                \"T\": 1\r\n            },\r\n            {\r\n                \"C\": 9,\r\n                \"G\": 1,\r\n                \"T\": 2\r\n            },\r\n            {\r\n                \"C\": 2.4,\r\n                \"G\": 1,\r\n                \"T\": 3\r\n            }\r\n        ],\r\n        \"PN\": \"2 Quarter\"\r\n    }]\r\n}\r\n```\r\n## Error\r\n```\r\nraceback (most recent call last):\r\n  File \"/Users/peq/code/vk/bball_bot/test.py\", line 35, in <module>\r\n    m = Game.from_json(game_json)\r\n  File \"/usr/local/lib/python3.7/site-packages/dataclasses_json/api.py\", line 110, in from_json\r\n    return cls.from_dict(kvs, infer_missing=infer_missing)\r\n  File \"/usr/local/lib/python3.7/site-packages/dataclasses_json/api.py\", line 117, in from_dict\r\n    return _decode_dataclass(cls, kvs, infer_missing)\r\n  File \"/usr/local/lib/python3.7/site-packages/dataclasses_json/core.py\", line 166, in _decode_dataclass\r\n    infer_missing)\r\n  File \"/usr/local/lib/python3.7/site-packages/dataclasses_json/core.py\", line 109, in _decode_dataclass\r\n    kvs = {decode_names.get(k, k): v for k, v in kvs.items()}\r\nAttributeError: 'list' object has no attribute 'items'\r\n```\r\nWhat I'm doing wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/126", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/126/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/126/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/126", "id": 484463258, "node_id": "MDU6SXNzdWU0ODQ0NjMyNTg=", "number": 126, "title": "Are two decorators needed?", "user": {"login": "revmischa", "id": 245131, "node_id": "MDQ6VXNlcjI0NTEzMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/245131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/revmischa", "html_url": "https://github.com/revmischa", "followers_url": "https://api.github.com/users/revmischa/followers", "following_url": "https://api.github.com/users/revmischa/following{/other_user}", "gists_url": "https://api.github.com/users/revmischa/gists{/gist_id}", "starred_url": "https://api.github.com/users/revmischa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/revmischa/subscriptions", "organizations_url": "https://api.github.com/users/revmischa/orgs", "repos_url": "https://api.github.com/users/revmischa/repos", "events_url": "https://api.github.com/users/revmischa/events{/privacy}", "received_events_url": "https://api.github.com/users/revmischa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-23T10:44:11Z", "updated_at": "2019-08-31T01:13:51Z", "closed_at": "2019-08-31T01:13:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why can't:\r\n```python\r\n@dataclass_json\r\n@dataclass\r\nclass SimpleExample:\r\n    int_field: int\r\n```\r\n\r\nJust be:\r\n```python\r\n@dataclass_json\r\nclass SimpleExample:\r\n    int_field: int\r\n```\r\n\r\nWhat else would it be decorating?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/121", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/121/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/121/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/121", "id": 478120225, "node_id": "MDU6SXNzdWU0NzgxMjAyMjU=", "number": 121, "title": "field_name is not supported with schema", "user": {"login": "Glandos", "id": 297578, "node_id": "MDQ6VXNlcjI5NzU3OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/297578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Glandos", "html_url": "https://github.com/Glandos", "followers_url": "https://api.github.com/users/Glandos/followers", "following_url": "https://api.github.com/users/Glandos/following{/other_user}", "gists_url": "https://api.github.com/users/Glandos/gists{/gist_id}", "starred_url": "https://api.github.com/users/Glandos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Glandos/subscriptions", "organizations_url": "https://api.github.com/users/Glandos/orgs", "repos_url": "https://api.github.com/users/Glandos/repos", "events_url": "https://api.github.com/users/Glandos/events{/privacy}", "received_events_url": "https://api.github.com/users/Glandos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-07T20:17:52Z", "updated_at": "2019-08-11T23:38:18Z", "closed_at": "2019-08-11T23:38:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```ipython\r\nIn [4]: @dataclasses_json.dataclass_json\r\n   ...: @dataclasses.dataclass\r\n   ...: class Person:\r\n   ...:     name: str = dataclasses.field(metadata=dataclasses_json.config(field_name=\"fullname\"))\r\n   ...:     age: int\r\n   ...:     \r\n\r\nIn [5]: p = Person(\"A B\", 23)\r\n\r\nIn [6]: p\r\nOut[6]: Person(name='A B', age=23)\r\n\r\nIn [7]: p.to_dict()\r\nOut[7]: {'fullname': 'A B', 'age': 23}\r\n\r\nIn [8]: d = p.to_dict()\r\n\r\nIn [9]: Person.from_dict(d)\r\nOut[9]: Person(name='A B', age=23)\r\n\r\nIn [10]: Person.schema().load(d)\r\n---------------------------------------------------------------------------\r\nValidationError                           Traceback (most recent call last)\r\n<ipython-input-10-cd95d439489f> in <module>()\r\n----> 1 Person.schema().load(d)\r\n\r\n/home/venv/lib/python3.7/site-packages/marshmallow/schema.py in load(self, data, many, partial, unknown)\r\n    705         return self._do_load(\r\n    706             data, many, partial=partial, unknown=unknown,\r\n--> 707             postprocess=True,\r\n    708         )\r\n    709 \r\n\r\n/home/venv/lib/python3.7/site-packages/marshmallow/schema.py in _do_load(self, data, many, partial, unknown, postprocess)\r\n    865             )\r\n    866             self.handle_error(exc, data)\r\n--> 867             raise exc\r\n    868 \r\n    869         return result\r\n\r\nValidationError: {'fullname': ['Unknown field.']}\r\n```\r\n\r\nIt seems that the schema should use `data_key` from the [marshmallow Field](https://marshmallow.readthedocs.io/en/3.0/api_reference.html#module-marshmallow.fields)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/120", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/120/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/120/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/120", "id": 476280044, "node_id": "MDU6SXNzdWU0NzYyODAwNDQ=", "number": 120, "title": "Pipenv install fails without --pre flag", "user": {"login": "dataframing", "id": 8692129, "node_id": "MDQ6VXNlcjg2OTIxMjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/8692129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dataframing", "html_url": "https://github.com/dataframing", "followers_url": "https://api.github.com/users/dataframing/followers", "following_url": "https://api.github.com/users/dataframing/following{/other_user}", "gists_url": "https://api.github.com/users/dataframing/gists{/gist_id}", "starred_url": "https://api.github.com/users/dataframing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dataframing/subscriptions", "organizations_url": "https://api.github.com/users/dataframing/orgs", "repos_url": "https://api.github.com/users/dataframing/repos", "events_url": "https://api.github.com/users/dataframing/events{/privacy}", "received_events_url": "https://api.github.com/users/dataframing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-02T17:20:06Z", "updated_at": "2019-08-31T01:14:35Z", "closed_at": "2019-08-31T01:14:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nFirst off, thanks for the great library! It's very helpful.\r\n\r\nI was trying to install the package through pipenv, and noticed that the package's fixed dependency on `marshmallow==3.0.0rc6` (from [setup.py](https://github.com/lidatong/dataclasses-json/blob/master/setup.py#L20)) would fail with an odd error message:\r\n\r\n```pytb\r\n$ pipenv install dataclasses-json\r\nInstalling dataclasses-json\u2026\r\n\u2714 Installation Succeeded \r\nPipfile.lock (310670) out of date, updating to (bbaf60)\u2026\r\nLocking [dev-packages] dependencies\u2026\r\nLocking [packages] dependencies\u2026\r\n\u2718 Locking Failed! \r\n[pipenv.exceptions.ResolutionFailure]:       req_dir=requirements_dir\r\n[pipenv.exceptions.ResolutionFailure]:   File \"/usr/local/Cellar/pipenv/2018.11.26_2/libexec/lib/python3.7/site-packages/pipenv/utils.py\", line 726, in resolve_deps\r\n[pipenv.exceptions.ResolutionFailure]:       req_dir=req_dir,\r\n[pipenv.exceptions.ResolutionFailure]:   File \"/usr/local/Cellar/pipenv/2018.11.26_2/libexec/lib/python3.7/site-packages/pipenv/utils.py\", line 480, in actually_resolve_deps\r\n[pipenv.exceptions.ResolutionFailure]:       resolved_tree = resolver.resolve()\r\n[pipenv.exceptions.ResolutionFailure]:   File \"/usr/local/Cellar/pipenv/2018.11.26_2/libexec/lib/python3.7/site-packages/pipenv/utils.py\", line 395, in resolve\r\n[pipenv.exceptions.ResolutionFailure]:       raise ResolutionFailure(message=str(e))\r\n[pipenv.exceptions.ResolutionFailure]:       pipenv.exceptions.ResolutionFailure: ERROR: ERROR: Could not find a version that matches marshmallow==3.0.0rc6,>=2.0.0\r\n[pipenv.exceptions.ResolutionFailure]:       Tried: 0.1.0, 0.1.0, 0.2.0, 0.2.0, 0.2.1, 0.2.1, 0.3.0, 0.3.0, 0.3.1, 0.3.1, 0.4.0, 0.4.0, 0.4.1, 0.4.1, 0.5.0, 0.5.0, 0.5.1, 0.5.1, 0.5.2, 0.5.2, 0.5.3, 0.5.3, 0.5.4, 0.5.4, 0.5.5, 0.5.5, 0.6.0, 0.6.0, 0.7.0, 0.7.0, 1.0.0, 1.0.0, 1.0.1, 1.0.1, 1.1.0, 1.1.0, 1.2.0, 1.2.0, 1.2.1, 1.2.1, 1.2.2, 1.2.2, 1.2.3, 1.2.3, 1.2.4, 1.2.4, 1.2.5, 1.2.5, 1.2.6, 1.2.6, 2.0.0, 2.0.0, 2.1.0, 2.1.0, 2.1.1, 2.1.1, 2.1.2, 2.1.2, 2.1.3, 2.1.3, 2.2.0, 2.2.0, 2.2.1, 2.2.1, 2.3.0, 2.3.0, 2.4.0, 2.4.0, 2.4.1, 2.4.1, 2.4.2, 2.4.2, 2.5.0, 2.5.0, 2.6.0, 2.6.0, 2.6.1, 2.6.1, 2.7.0, 2.7.0, 2.7.1, 2.7.2, 2.7.2, 2.7.3, 2.7.3, 2.8.0, 2.8.0, 2.9.0, 2.9.0, 2.9.1, 2.9.1, 2.10.0, 2.10.0, 2.10.1, 2.10.1, 2.10.2, 2.10.2, 2.10.3, 2.10.3, 2.10.4, 2.10.4, 2.10.5, 2.10.5, 2.11.0, 2.11.0, 2.11.1, 2.11.1, 2.12.0, 2.12.0, 2.12.1, 2.12.1, 2.12.2, 2.12.2, 2.13.0, 2.13.0, 2.13.1, 2.13.1, 2.13.2, 2.13.2, 2.13.3, 2.13.3, 2.13.4, 2.13.4, 2.13.5, 2.13.5, 2.13.6, 2.13.6, 2.14.0, 2.14.0, 2.15.0, 2.15.0, 2.15.1, 2.15.1, 2.15.2, 2.15.2, 2.15.3, 2.15.3, 2.15.4, 2.15.4, 2.15.5, 2.15.5, 2.15.6, 2.15.6, 2.16.0, 2.16.0, 2.16.1, 2.16.1, 2.16.2, 2.16.2, 2.16.3, 2.16.3, 2.17.0, 2.17.0, 2.18.0, 2.18.0, 2.18.1, 2.18.1, 2.19.0, 2.19.0, 2.19.1, 2.19.1, 2.19.2, 2.19.2, 2.19.3, 2.19.3, 2.19.4, 2.19.4, 2.19.5, 2.19.5\r\n[pipenv.exceptions.ResolutionFailure]:       Skipped pre-versions: 1.0.0a0, 1.0.0a0, 2.0.0a1, 2.0.0a1, 2.0.0b1, 2.0.0b1, 2.0.0b2, 2.0.0b2, 2.0.0b3, 2.0.0b3, 2.0.0b4, 2.0.0b4, 2.0.0b5, 2.0.0b5, 2.0.0rc1, 2.0.0rc1, 2.0.0rc2, 2.0.0rc2, 3.0.0a1, 3.0.0a1, 3.0.0b1, 3.0.0b1, 3.0.0b2, 3.0.0b2, 3.0.0b3, 3.0.0b3, 3.0.0b4, 3.0.0b4, 3.0.0b5, 3.0.0b5, 3.0.0b6, 3.0.0b6, 3.0.0b7, 3.0.0b7, 3.0.0b8, 3.0.0b8, 3.0.0b9, 3.0.0b9, 3.0.0b10, 3.0.0b10, 3.0.0b11, 3.0.0b11, 3.0.0b12, 3.0.0b12, 3.0.0b13, 3.0.0b13, 3.0.0b14, 3.0.0b14, 3.0.0b15, 3.0.0b15, 3.0.0b16, 3.0.0b16, 3.0.0b17, 3.0.0b17, 3.0.0b18, 3.0.0b18, 3.0.0b19, 3.0.0b19, 3.0.0b20, 3.0.0b20, 3.0.0rc1, 3.0.0rc1, 3.0.0rc2, 3.0.0rc2, 3.0.0rc3, 3.0.0rc3, 3.0.0rc4, 3.0.0rc4, 3.0.0rc5, 3.0.0rc5, 3.0.0rc6, 3.0.0rc6, 3.0.0rc7, 3.0.0rc7, 3.0.0rc8, 3.0.0rc8, 3.0.0rc9, 3.0.0rc9\r\n[pipenv.exceptions.ResolutionFailure]: Warning: Your dependencies could not be resolved. You likely have a mismatch in your sub-dependencies.\r\n  First try clearing your dependency cache with $ pipenv lock --clear, then try the original command again.\r\n Alternatively, you can use $ pipenv install --skip-lock to bypass this mechanism, then run $ pipenv graph to inspect the situation.\r\n  Hint: try $ pipenv lock --pre if it is a pre-release dependency.\r\nERROR: ERROR: Could not find a version that matches marshmallow==3.0.0rc6,>=2.0.0\r\nTried: 0.1.0, 0.1.0, 0.2.0, 0.2.0, 0.2.1, 0.2.1, 0.3.0, 0.3.0, 0.3.1, 0.3.1, 0.4.0, 0.4.0, 0.4.1, 0.4.1, 0.5.0, 0.5.0, 0.5.1, 0.5.1, 0.5.2, 0.5.2, 0.5.3, 0.5.3, 0.5.4, 0.5.4, 0.5.5, 0.5.5, 0.6.0, 0.6.0, 0.7.0, 0.7.0, 1.0.0, 1.0.0, 1.0.1, 1.0.1, 1.1.0, 1.1.0, 1.2.0, 1.2.0, 1.2.1, 1.2.1, 1.2.2, 1.2.2, 1.2.3, 1.2.3, 1.2.4, 1.2.4, 1.2.5, 1.2.5, 1.2.6, 1.2.6, 2.0.0, 2.0.0, 2.1.0, 2.1.0, 2.1.1, 2.1.1, 2.1.2, 2.1.2, 2.1.3, 2.1.3, 2.2.0, 2.2.0, 2.2.1, 2.2.1, 2.3.0, 2.3.0, 2.4.0, 2.4.0, 2.4.1, 2.4.1, 2.4.2, 2.4.2, 2.5.0, 2.5.0, 2.6.0, 2.6.0, 2.6.1, 2.6.1, 2.7.0, 2.7.0, 2.7.1, 2.7.2, 2.7.2, 2.7.3, 2.7.3, 2.8.0, 2.8.0, 2.9.0, 2.9.0, 2.9.1, 2.9.1, 2.10.0, 2.10.0, 2.10.1, 2.10.1, 2.10.2, 2.10.2, 2.10.3, 2.10.3, 2.10.4, 2.10.4, 2.10.5, 2.10.5, 2.11.0, 2.11.0, 2.11.1, 2.11.1, 2.12.0, 2.12.0, 2.12.1, 2.12.1, 2.12.2, 2.12.2, 2.13.0, 2.13.0, 2.13.1, 2.13.1, 2.13.2, 2.13.2, 2.13.3, 2.13.3, 2.13.4, 2.13.4, 2.13.5, 2.13.5, 2.13.6, 2.13.6, 2.14.0, 2.14.0, 2.15.0, 2.15.0, 2.15.1, 2.15.1, 2.15.2, 2.15.2, 2.15.3, 2.15.3, 2.15.4, 2.15.4, 2.15.5, 2.15.5, 2.15.6, 2.15.6, 2.16.0, 2.16.0, 2.16.1, 2.16.1, 2.16.2, 2.16.2, 2.16.3, 2.16.3, 2.17.0, 2.17.0, 2.18.0, 2.18.0, 2.18.1, 2.18.1, 2.19.0, 2.19.0, 2.19.1, 2.19.1, 2.19.2, 2.19.2, 2.19.3, 2.19.3, 2.19.4, 2.19.4, 2.19.5, 2.19.5\r\nSkipped pre-versions: 1.0.0a0, 1.0.0a0, 2.0.0a1, 2.0.0a1, 2.0.0b1, 2.0.0b1, 2.0.0b2, 2.0.0b2, 2.0.0b3, 2.0.0b3, 2.0.0b4, 2.0.0b4, 2.0.0b5, 2.0.0b5, 2.0.0rc1, 2.0.0rc1, 2.0.0rc2, 2.0.0rc2, 3.0.0a1, 3.0.0a1, 3.0.0b1, 3.0.0b1, 3.0.0b2, 3.0.0b2, 3.0.0b3, 3.0.0b3, 3.0.0b4, 3.0.0b4, 3.0.0b5, 3.0.0b5, 3.0.0b6, 3.0.0b6, 3.0.0b7, 3.0.0b7, 3.0.0b8, 3.0.0b8, 3.0.0b9, 3.0.0b9, 3.0.0b10, 3.0.0b10, 3.0.0b11, 3.0.0b11, 3.0.0b12, 3.0.0b12, 3.0.0b13, 3.0.0b13, 3.0.0b14, 3.0.0b14, 3.0.0b15, 3.0.0b15, 3.0.0b16, 3.0.0b16, 3.0.0b17, 3.0.0b17, 3.0.0b18, 3.0.0b18, 3.0.0b19, 3.0.0b19, 3.0.0b20, 3.0.0b20, 3.0.0rc1, 3.0.0rc1, 3.0.0rc2, 3.0.0rc2, 3.0.0rc3, 3.0.0rc3, 3.0.0rc4, 3.0.0rc4, 3.0.0rc5, 3.0.0rc5, 3.0.0rc6, 3.0.0rc6, 3.0.0rc7, 3.0.0rc7, 3.0.0rc8, 3.0.0rc8, 3.0.0rc9, 3.0.0rc9\r\nThere are incompatible versions in the resolved dependencies.\r\n[pipenv.exceptions.ResolutionFailure]:   File \"/usr/local/Cellar/pipenv/2018.11.26_2/libexec/lib/python3.7/site-packages/pipenv/utils.py\", line 726, in resolve_deps\r\n[pipenv.exceptions.ResolutionFailure]:       req_dir=req_dir,\r\n[pipenv.exceptions.ResolutionFailure]:   File \"/usr/local/Cellar/pipenv/2018.11.26_2/libexec/lib/python3.7/site-packages/pipenv/utils.py\", line 480, in actually_resolve_deps\r\n[pipenv.exceptions.ResolutionFailure]:       resolved_tree = resolver.resolve()\r\n[pipenv.exceptions.ResolutionFailure]:   File \"/usr/local/Cellar/pipenv/2018.11.26_2/libexec/lib/python3.7/site-packages/pipenv/utils.py\", line 395, in resolve\r\n[pipenv.exceptions.ResolutionFailure]:       raise ResolutionFailure(message=str(e))\r\n[pipenv.exceptions.ResolutionFailure]:       pipenv.exceptions.ResolutionFailure: ERROR: ERROR: Could not find a version that matches marshmallow==3.0.0rc6,>=2.0.0\r\n[pipenv.exceptions.ResolutionFailure]:       Tried: 0.1.0, 0.1.0, 0.2.0, 0.2.0, 0.2.1, 0.2.1, 0.3.0, 0.3.0, 0.3.1, 0.3.1, 0.4.0, 0.4.0, 0.4.1, 0.4.1, 0.5.0, 0.5.0, 0.5.1, 0.5.1, 0.5.2, 0.5.2, 0.5.3, 0.5.3, 0.5.4, 0.5.4, 0.5.5, 0.5.5, 0.6.0, 0.6.0, 0.7.0, 0.7.0, 1.0.0, 1.0.0, 1.0.1, 1.0.1, 1.1.0, 1.1.0, 1.2.0, 1.2.0, 1.2.1, 1.2.1, 1.2.2, 1.2.2, 1.2.3, 1.2.3, 1.2.4, 1.2.4, 1.2.5, 1.2.5, 1.2.6, 1.2.6, 2.0.0, 2.0.0, 2.1.0, 2.1.0, 2.1.1, 2.1.1, 2.1.2, 2.1.2, 2.1.3, 2.1.3, 2.2.0, 2.2.0, 2.2.1, 2.2.1, 2.3.0, 2.3.0, 2.4.0, 2.4.0, 2.4.1, 2.4.1, 2.4.2, 2.4.2, 2.5.0, 2.5.0, 2.6.0, 2.6.0, 2.6.1, 2.6.1, 2.7.0, 2.7.0, 2.7.1, 2.7.2, 2.7.2, 2.7.3, 2.7.3, 2.8.0, 2.8.0, 2.9.0, 2.9.0, 2.9.1, 2.9.1, 2.10.0, 2.10.0, 2.10.1, 2.10.1, 2.10.2, 2.10.2, 2.10.3, 2.10.3, 2.10.4, 2.10.4, 2.10.5, 2.10.5, 2.11.0, 2.11.0, 2.11.1, 2.11.1, 2.12.0, 2.12.0, 2.12.1, 2.12.1, 2.12.2, 2.12.2, 2.13.0, 2.13.0, 2.13.1, 2.13.1, 2.13.2, 2.13.2, 2.13.3, 2.13.3, 2.13.4, 2.13.4, 2.13.5, 2.13.5, 2.13.6, 2.13.6, 2.14.0, 2.14.0, 2.15.0, 2.15.0, 2.15.1, 2.15.1, 2.15.2, 2.15.2, 2.15.3, 2.15.3, 2.15.4, 2.15.4, 2.15.5, 2.15.5, 2.15.6, 2.15.6, 2.16.0, 2.16.0, 2.16.1, 2.16.1, 2.16.2, 2.16.2, 2.16.3, 2.16.3, 2.17.0, 2.17.0, 2.18.0, 2.18.0, 2.18.1, 2.18.1, 2.19.0, 2.19.0, 2.19.1, 2.19.1, 2.19.2, 2.19.2, 2.19.3, 2.19.3, 2.19.4, 2.19.4, 2.19.5, 2.19.5\r\n[pipenv.exceptions.ResolutionFailure]:       Skipped pre-versions: 1.0.0a0, 1.0.0a0, 2.0.0a1, 2.0.0a1, 2.0.0b1, 2.0.0b1, 2.0.0b2, 2.0.0b2, 2.0.0b3, 2.0.0b3, 2.0.0b4, 2.0.0b4, 2.0.0b5, 2.0.0b5, 2.0.0rc1, 2.0.0rc1, 2.0.0rc2, 2.0.0rc2, 3.0.0a1, 3.0.0a1, 3.0.0b1, 3.0.0b1, 3.0.0b2, 3.0.0b2, 3.0.0b3, 3.0.0b3, 3.0.0b4, 3.0.0b4, 3.0.0b5, 3.0.0b5, 3.0.0b6, 3.0.0b6, 3.0.0b7, 3.0.0b7, 3.0.0b8, 3.0.0b8, 3.0.0b9, 3.0.0b9, 3.0.0b10, 3.0.0b10, 3.0.0b11, 3.0.0b11, 3.0.0b12, 3.0.0b12, 3.0.0b13, 3.0.0b13, 3.0.0b14, 3.0.0b14, 3.0.0b15, 3.0.0b15, 3.0.0b16, 3.0.0b16, 3.0.0b17, 3.0.0b17, 3.0.0b18, 3.0.0b18, 3.0.0b19, 3.0.0b19, 3.0.0b20, 3.0.0b20, 3.0.0rc1, 3.0.0rc1, 3.0.0rc2, 3.0.0rc2, 3.0.0rc3, 3.0.0rc3, 3.0.0rc4, 3.0.0rc4, 3.0.0rc5, 3.0.0rc5, 3.0.0rc6, 3.0.0rc6, 3.0.0rc7, 3.0.0rc7, 3.0.0rc8, 3.0.0rc8, 3.0.0rc9, 3.0.0rc9\r\n[pipenv.exceptions.ResolutionFailure]: Warning: Your dependencies could not be resolved. You likely have a mismatch in your sub-dependencies.\r\n  First try clearing your dependency cache with $ pipenv lock --clear, then try the original command again.\r\n Alternatively, you can use $ pipenv install --skip-lock to bypass this mechanism, then run $ pipenv graph to inspect the situation.\r\n  Hint: try $ pipenv lock --pre if it is a pre-release dependency.\r\nERROR: ERROR: Could not find a version that matches marshmallow==3.0.0rc6,>=2.0.0\r\nTried: 0.1.0, 0.1.0, 0.2.0, 0.2.0, 0.2.1, 0.2.1, 0.3.0, 0.3.0, 0.3.1, 0.3.1, 0.4.0, 0.4.0, 0.4.1, 0.4.1, 0.5.0, 0.5.0, 0.5.1, 0.5.1, 0.5.2, 0.5.2, 0.5.3, 0.5.3, 0.5.4, 0.5.4, 0.5.5, 0.5.5, 0.6.0, 0.6.0, 0.7.0, 0.7.0, 1.0.0, 1.0.0, 1.0.1, 1.0.1, 1.1.0, 1.1.0, 1.2.0, 1.2.0, 1.2.1, 1.2.1, 1.2.2, 1.2.2, 1.2.3, 1.2.3, 1.2.4, 1.2.4, 1.2.5, 1.2.5, 1.2.6, 1.2.6, 2.0.0, 2.0.0, 2.1.0, 2.1.0, 2.1.1, 2.1.1, 2.1.2, 2.1.2, 2.1.3, 2.1.3, 2.2.0, 2.2.0, 2.2.1, 2.2.1, 2.3.0, 2.3.0, 2.4.0, 2.4.0, 2.4.1, 2.4.1, 2.4.2, 2.4.2, 2.5.0, 2.5.0, 2.6.0, 2.6.0, 2.6.1, 2.6.1, 2.7.0, 2.7.0, 2.7.1, 2.7.2, 2.7.2, 2.7.3, 2.7.3, 2.8.0, 2.8.0, 2.9.0, 2.9.0, 2.9.1, 2.9.1, 2.10.0, 2.10.0, 2.10.1, 2.10.1, 2.10.2, 2.10.2, 2.10.3, 2.10.3, 2.10.4, 2.10.4, 2.10.5, 2.10.5, 2.11.0, 2.11.0, 2.11.1, 2.11.1, 2.12.0, 2.12.0, 2.12.1, 2.12.1, 2.12.2, 2.12.2, 2.13.0, 2.13.0, 2.13.1, 2.13.1, 2.13.2, 2.13.2, 2.13.3, 2.13.3, 2.13.4, 2.13.4, 2.13.5, 2.13.5, 2.13.6, 2.13.6, 2.14.0, 2.14.0, 2.15.0, 2.15.0, 2.15.1, 2.15.1, 2.15.2, 2.15.2, 2.15.3, 2.15.3, 2.15.4, 2.15.4, 2.15.5, 2.15.5, 2.15.6, 2.15.6, 2.16.0, 2.16.0, 2.16.1, 2.16.1, 2.16.2, 2.16.2, 2.16.3, 2.16.3, 2.17.0, 2.17.0, 2.18.0, 2.18.0, 2.18.1, 2.18.1, 2.19.0, 2.19.0, 2.19.1, 2.19.1, 2.19.2, 2.19.2, 2.19.3, 2.19.3, 2.19.4, 2.19.4, 2.19.5, 2.19.5\r\nSkipped pre-versions: 1.0.0a0, 1.0.0a0, 2.0.0a1, 2.0.0a1, 2.0.0b1, 2.0.0b1, 2.0.0b2, 2.0.0b2, 2.0.0b3, 2.0.0b3, 2.0.0b4, 2.0.0b4, 2.0.0b5, 2.0.0b5, 2.0.0rc1, 2.0.0rc1, 2.0.0rc2, 2.0.0rc2, 3.0.0a1, 3.0.0a1, 3.0.0b1, 3.0.0b1, 3.0.0b2, 3.0.0b2, 3.0.0b3, 3.0.0b3, 3.0.0b4, 3.0.0b4, 3.0.0b5, 3.0.0b5, 3.0.0b6, 3.0.0b6, 3.0.0b7, 3.0.0b7, 3.0.0b8, 3.0.0b8, 3.0.0b9, 3.0.0b9, 3.0.0b10, 3.0.0b10, 3.0.0b11, 3.0.0b11, 3.0.0b12, 3.0.0b12, 3.0.0b13, 3.0.0b13, 3.0.0b14, 3.0.0b14, 3.0.0b15, 3.0.0b15, 3.0.0b16, 3.0.0b16, 3.0.0b17, 3.0.0b17, 3.0.0b18, 3.0.0b18, 3.0.0b19, 3.0.0b19, 3.0.0b20, 3.0.0b20, 3.0.0rc1, 3.0.0rc1, 3.0.0rc2, 3.0.0rc2, 3.0.0rc3, 3.0.0rc3, 3.0.0rc4, 3.0.0rc4, 3.0.0rc5, 3.0.0rc5, 3.0.0rc6, 3.0.0rc6, 3.0.0rc7, 3.0.0rc7, 3.0.0rc8, 3.0.0rc8, 3.0.0rc9, 3.0.0rc9\r\nThere are incompatible versions in the resolved dependencies.\r\n```\r\n\r\nAs it turns out, since the `marshmallow` dependency is a release candidate, to properly install and lock through pipenv you have to run the following:\r\n\r\n```pytb\r\n$ pipenv install dataclasses-json --pre\r\nInstalling dataclasses-json\u2026\r\n\u2714 Installation Succeeded \r\nPipfile.lock (310670) out of date, updating to (bbaf60)\u2026\r\nLocking [dev-packages] dependencies\u2026\r\nLocking [packages] dependencies\u2026\r\n\u2714 Success! \r\nUpdated Pipfile.lock (310670)!\r\nInstalling dependencies from Pipfile.lock (310670)\u2026\r\n  \ud83d\udc0d   \u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589 19/19 \u2014 00:00:02\r\nTo activate this project's virtualenv, run pipenv shell.\r\nAlternatively, run a command inside the virtualenv with pipenv run.\r\n```\r\n\r\nI'm not convinced this is unintentional behavior, but it can certainly be a bit confusing (along with the myriad other issues with Python packaging...). Would it make sense to specify a short note in the README like so?\r\n\r\n---\r\n\r\n## Quickstart\r\n\r\n**Pip**: `pip install dataclasses-json`\r\n\r\n**Pipenv**: `pipenv install dataclasses-json --pre`\r\n\r\n---\r\n\r\nRegardless, thank you for your time and efforts!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/118", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/118/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/118/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/118", "id": 473285834, "node_id": "MDU6SXNzdWU0NzMyODU4MzQ=", "number": 118, "title": "Should `.to_dict()` return JSON serializable dict?", "user": {"login": "nazarewk", "id": 3494992, "node_id": "MDQ6VXNlcjM0OTQ5OTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/3494992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nazarewk", "html_url": "https://github.com/nazarewk", "followers_url": "https://api.github.com/users/nazarewk/followers", "following_url": "https://api.github.com/users/nazarewk/following{/other_user}", "gists_url": "https://api.github.com/users/nazarewk/gists{/gist_id}", "starred_url": "https://api.github.com/users/nazarewk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nazarewk/subscriptions", "organizations_url": "https://api.github.com/users/nazarewk/orgs", "repos_url": "https://api.github.com/users/nazarewk/repos", "events_url": "https://api.github.com/users/nazarewk/events{/privacy}", "received_events_url": "https://api.github.com/users/nazarewk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-26T10:16:11Z", "updated_at": "2019-08-08T12:51:07Z", "closed_at": "2019-08-08T12:51:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am wondering if it wouldn't be more consistent for `to_dict()` to return JSON-encodable types, what do you think?\r\n\r\nImplementation is as simple as this:\r\n```python\r\nimport dataclasses_json\r\nfrom dataclasses_json.core import _ExtendedEncoder, Json\r\n\r\ndef default_encoder(value, default=_ExtendedEncoder().default):\r\n    if isinstance(value, Json.__args__):\r\n        return value\r\n    return default(value)\r\n\r\ndef config(*args, **kwargs):\r\n    kwargs.setdefault('encoder', default_encoder)\r\n    return dataclasses_json.config(*args, **kwargs)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/116", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/116/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/116/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/116", "id": 473062306, "node_id": "MDU6SXNzdWU0NzMwNjIzMDY=", "number": 116, "title": "Empty fields while trying to change List field name", "user": {"login": "karambaq", "id": 14233969, "node_id": "MDQ6VXNlcjE0MjMzOTY5", "avatar_url": "https://avatars1.githubusercontent.com/u/14233969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karambaq", "html_url": "https://github.com/karambaq", "followers_url": "https://api.github.com/users/karambaq/followers", "following_url": "https://api.github.com/users/karambaq/following{/other_user}", "gists_url": "https://api.github.com/users/karambaq/gists{/gist_id}", "starred_url": "https://api.github.com/users/karambaq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karambaq/subscriptions", "organizations_url": "https://api.github.com/users/karambaq/orgs", "repos_url": "https://api.github.com/users/karambaq/repos", "events_url": "https://api.github.com/users/karambaq/events{/privacy}", "received_events_url": "https://api.github.com/users/karambaq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-25T20:45:10Z", "updated_at": "2019-09-28T14:27:11Z", "closed_at": "2019-09-28T14:27:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here is a code example\r\n\r\n```\r\nfrom dataclasses import dataclass, field\r\nfrom dataclasses_json import dataclass_json\r\nfrom marshmallow import fields\r\n\r\nfrom typing import List\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass Coef:\r\n    val: float\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass Coefs:\r\n    coefs: List[Coef] = field(default=\"\",\r\n                              metadata={'dataclasses_json': {\r\n                                  'mm_field': fields.List(fields.Float(), data_key=\"E\")}})\r\n\r\n\r\nj = \"\"\"\r\n{\r\n    \"E\": [\r\n        {\r\n            \"val\": 1.32\r\n        },\r\n        {\r\n            \"val\": 2.3\r\n        }\r\n    ]\r\n}\r\n\"\"\".strip()\r\n\r\nprint(Coefs.from_json(j))\r\n\r\n```\r\n\r\nOutput: \r\n\r\n```\r\n  Coefs(coefs=[])\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/115", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/115/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/115/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/115", "id": 472799758, "node_id": "MDU6SXNzdWU0NzI3OTk3NTg=", "number": 115, "title": " I cannot name the field \"from\"", "user": {"login": "kaffein676", "id": 29321443, "node_id": "MDQ6VXNlcjI5MzIxNDQz", "avatar_url": "https://avatars0.githubusercontent.com/u/29321443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaffein676", "html_url": "https://github.com/kaffein676", "followers_url": "https://api.github.com/users/kaffein676/followers", "following_url": "https://api.github.com/users/kaffein676/following{/other_user}", "gists_url": "https://api.github.com/users/kaffein676/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaffein676/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaffein676/subscriptions", "organizations_url": "https://api.github.com/users/kaffein676/orgs", "repos_url": "https://api.github.com/users/kaffein676/repos", "events_url": "https://api.github.com/users/kaffein676/events{/privacy}", "received_events_url": "https://api.github.com/users/kaffein676/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-25T10:56:39Z", "updated_at": "2019-08-02T05:45:24Z", "closed_at": "2019-08-02T05:45:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nclass Direction:\r\n    from: Optional[str]\r\n    to: Optional[str]\r\n```\r\n```\r\nfrom: Optional[str]\r\n        ^\r\nSyntaxError: invalid syntax\r\n```\r\nHow can i avoid this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/114", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/114/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/114/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/114", "id": 472714888, "node_id": "MDU6SXNzdWU0NzI3MTQ4ODg=", "number": 114, "title": "AttributeError: type object 'dict' has no attribute '__args__'", "user": {"login": "jjuu", "id": 9148703, "node_id": "MDQ6VXNlcjkxNDg3MDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/9148703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjuu", "html_url": "https://github.com/jjuu", "followers_url": "https://api.github.com/users/jjuu/followers", "following_url": "https://api.github.com/users/jjuu/following{/other_user}", "gists_url": "https://api.github.com/users/jjuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjuu/subscriptions", "organizations_url": "https://api.github.com/users/jjuu/orgs", "repos_url": "https://api.github.com/users/jjuu/repos", "events_url": "https://api.github.com/users/jjuu/events{/privacy}", "received_events_url": "https://api.github.com/users/jjuu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-25T07:45:32Z", "updated_at": "2019-08-07T01:52:24Z", "closed_at": "2019-08-07T01:52:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n@dataclass_json\r\n@dataclass\r\nclass SampleModel:\r\n    id: str = None\r\n    data_dict: dict = None\r\n\r\ndata = {\r\n        'id': 2,\r\n        'data_dict': {\r\n            'a': 1,\r\n            'b': 'world'\r\n        }\r\n    }\r\n\r\nsm = SampleModel.from_dict(data, infer_missing=True)\r\nprint(sm)\r\n```\r\n\r\nI have dict attribute which I want to change to dict as it is.\r\n\r\n> Traceback (most recent call last):\r\n>   File \"dict_to_dataclass/sample.py\", line 58, in <module>\r\n>     sm = SampleModel.from_dict(data, infer_missing=True)\r\n>   File \"dataclasses_json\\api.py\", line 88, in from_dict\r\n>     return _decode_dataclass(cls, kvs, infer_missing)\r\n>   File \"dataclasses_json\\core.py\", line 161, in _decode_dataclass\r\n>     infer_missing)\r\n>   File \"dataclasses_json\\core.py\", line 200, in _decode_generic\r\n>     k_type, v_type = type_.__args__\r\n> AttributeError: type object 'dict' has no attribute '__args__'\r\n\r\nBut give me an exception.\r\nAny solution?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/112", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/112/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/112/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/112", "id": 470445992, "node_id": "MDU6SXNzdWU0NzA0NDU5OTI=", "number": 112, "title": "Unable to generate recursive schema", "user": {"login": "nathan5280", "id": 28061825, "node_id": "MDQ6VXNlcjI4MDYxODI1", "avatar_url": "https://avatars2.githubusercontent.com/u/28061825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathan5280", "html_url": "https://github.com/nathan5280", "followers_url": "https://api.github.com/users/nathan5280/followers", "following_url": "https://api.github.com/users/nathan5280/following{/other_user}", "gists_url": "https://api.github.com/users/nathan5280/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathan5280/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathan5280/subscriptions", "organizations_url": "https://api.github.com/users/nathan5280/orgs", "repos_url": "https://api.github.com/users/nathan5280/repos", "events_url": "https://api.github.com/users/nathan5280/events{/privacy}", "received_events_url": "https://api.github.com/users/nathan5280/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-19T17:24:36Z", "updated_at": "2019-08-18T21:40:46Z", "closed_at": "2019-08-18T21:40:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I wanted to build a recursive dataclass where a Node contains a sub Node.  It took a bit to get a workaround for the forward reference of the Node class where the annotation for the child node resolved to a class object for Node and not a string 'Node'.  You can see below how I worked that out by manually updating the __annnotation__ on the NodeRecursive class and then applying the dataclass decorator.\r\n\r\nThe problem that I've now run into is that when the schema is generated it just drills down recursively until the interpreter raises a RecursionError.  It looks like we need some way to check in mm.py build_schema(), schema() or built_type() to check if type_ == cls and stop the recursion.  At that point I think we need to add some mm field information so that it knows the field type is \"self\".\r\n\r\nI'm out of time for today, but will get back to this if someone doesn't beat me to it.\r\n\r\nThere is some information in the recursive nesting in the last section of this [page](https://marshmallow.readthedocs.io/en/3.0/nesting.html).\r\n\r\n```python\r\nimport json\r\nfrom dataclasses import dataclass\r\nfrom dataclasses import fields as dc_fields\r\n\r\nfrom dataclasses_json import dataclass_json\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass NodeForwardRef:\r\n    \"\"\"\r\n    Start of the problem at hand.  The node field is of type NodeForwardRef which\r\n    isn't defined yet.  Using a string for the type works fine for annotations\r\n    which are analyzed by tools and not used at runtime.  At some point in the future\r\n    this will be the default behavior.  You can experiment with it by importing\r\n    annotations from __future__\r\n    \"\"\"\r\n    name: str\r\n    node: \"NodeForwardRef\" = None\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass Dummy:\r\n    \"\"\"Any dataclass to use for comparision of recursive and non-recursive definitions.\"\"\"\r\n    name: str\r\n\r\n\r\n@dataclass_json\r\nclass Node:\r\n    \"\"\"\r\n    A class that will be manually annotated and converted to a dataclass.  The node field\r\n    in this class will be annotated to point to a Dummy class.\r\n    \"\"\"\r\n    # Need something in the class to trigger annotations\r\n    name: str\r\n    # Will manually apply the annotation for this field manually along\r\n    # with decorating it as a dataclass.\r\n    node = None\r\n\r\n\r\n@dataclass_json\r\nclass NodeRecursive:\r\n    \"\"\"\r\n    A class that will be manually annotated and converted to a dataclass.  The node field\r\n    in this class will recursively point to another NodeRecursive.\r\n    \"\"\"\r\n    # Need something in the class to trigger annotations\r\n    name: str\r\n    # Will manually apply the annotation for this field manually along\r\n    # with decorating it as a dataclass.\r\n    node = None\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # Create the dataclass that uses a string literal to annotate the node field.\r\n    # This will show that the annotation resovles to a string and not to a class object.\r\n    print(\"\\nNodeForwardRef dataclass:\")\r\n    for field in dc_fields(NodeForwardRef):\r\n        print(\"\\t\", field.name, field.type, type(field.type))\r\n    print(\"\\nNote that the type of the node field is a string not a class.\")\r\n\r\n    # Manually update the annotation on the node field on the Node class to\r\n    # point to a Dummy class and then apply the dataclass decorator.\r\n    # This shows that the annotation on the node field resolve to a class object.\r\n    Node.__annotations__.update(node=Dummy)\r\n    Node = dataclass(Node)\r\n    print(\"\\nNode dataclass:\")\r\n    for field in dc_fields(Node):\r\n        print(\"\\t\", field.name, field.type, type(field.type))\r\n\r\n    node = Node(\"Manual\", Dummy(\"inner\"))\r\n    node_x = NodeForwardRef(\"Decorator\", Node(\"inner\"))\r\n\r\n    # Check to see if the dataclasses_json methods were applied to the Node class from the mixin.\r\n    # I wasn't sure if the dataclasses_json would check to make sure the class was a dataclass or not.\r\n    # It turns out that it doesn't, which was a good thing.\r\n    print(\"\\nMethod difference:\")\r\n    print(\"\\t\", set(dir(Node)) ^ set(dir(NodeForwardRef)))\r\n\r\n    dict_ = Node.schema().dump(node)\r\n    print(\"\\nManually annotated node with dummy node.\")\r\n    print(json.dumps(dict_, indent=2))\r\n\r\n    # Now to the new problem.  The annotations on the NodeRecursive class can be update\r\n    # as they were for the Node with the Dummy class.\r\n    # Unfortunately when the schema is generated for this class it just keeps on going.\r\n    # It looks like we need to do something like mashmallow passing fields.Nested(\"self\", ...)\r\n    # Reference the last section of this page: https://marshmallow.readthedocs.io/en/3.0/nesting.html\r\n    NodeRecursive.__annotations__.update(node=NodeRecursive)\r\n    NodeRecursive = dataclass(NodeRecursive)\r\n    print(\"\\nRecursive Node dataclass:\")\r\n    for field in dc_fields(NodeRecursive):\r\n        print(\"\\t\", field.name, field.type, type(field.type))\r\n\r\n    node = NodeRecursive(\"Recursive - 1 level\", NodeRecursive(\"inner\", None))\r\n    try:\r\n        dict_ = NodeRecursive.schema().dump(node)\r\n        print(\"\\nRecursive - 1 level:\")\r\n        print(json.dumps(dict_, indent=2))\r\n    except RecursionError:\r\n        pass\r\n```  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/110", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/110/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/110/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/110", "id": 470054475, "node_id": "MDU6SXNzdWU0NzAwNTQ0NzU=", "number": 110, "title": "Renaming json fields inside dataclass", "user": {"login": "r-richmond", "id": 9246654, "node_id": "MDQ6VXNlcjkyNDY2NTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/9246654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r-richmond", "html_url": "https://github.com/r-richmond", "followers_url": "https://api.github.com/users/r-richmond/followers", "following_url": "https://api.github.com/users/r-richmond/following{/other_user}", "gists_url": "https://api.github.com/users/r-richmond/gists{/gist_id}", "starred_url": "https://api.github.com/users/r-richmond/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r-richmond/subscriptions", "organizations_url": "https://api.github.com/users/r-richmond/orgs", "repos_url": "https://api.github.com/users/r-richmond/repos", "events_url": "https://api.github.com/users/r-richmond/events{/privacy}", "received_events_url": "https://api.github.com/users/r-richmond/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-18T23:56:49Z", "updated_at": "2019-09-13T13:45:45Z", "closed_at": "2019-09-13T13:45:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm working with an external API and have run into several instances where I'd like to rename a field. I've seen the `LetterCase` options which work great for well formatted field names but how do I handle things like the following? (I looked through the examples & issues but didn't see what I was looking for apologies if I've missed it).\r\n\r\n```python\r\n@dataclass_json\r\n@dataclass\r\nclass SimpleExample:\r\n    int_field: int # should come from int_field\r\n    name: str # should come from nameFieldThatIsbad\r\n\r\nx_str = SimpleExample.from_json('{\"int_Field\": 1, \"nameFieldThatIsbad\": 1}')\r\n```\r\n\r\nNote something like the following would be perfect for my needs.\r\n\r\n*edit added MM field example\r\n\r\n```python\r\n@dataclass_json\r\n@dataclass\r\nclass SimpleExample2:\r\n    int_field: int = field(\r\n        metadata={'dataclasses_json': {\r\n            'source_field': \"int_Field\"\r\n        }}\r\n    )\r\n    name: str = field(\r\n        metadata={'dataclasses_json': {\r\n            'source_field': \"nameFieldThatIsbad\"\r\n        }}\r\n    )\r\n    created_at: datetime = field(\r\n        metadata=config(\r\n            encoder=datetime.isoformat,\r\n            decoder=datetime.fromisoformat,\r\n            mm_field=mm_fields.DateTime(format=\"iso\"),\r\n            source_field=\"CreatedAtTimeStampU\",\r\n        )\r\n    )\r\n\r\nx_str = SimpleExample.from_json('{\"int_Field\": 1, \r\n  \"nameFieldThatIsbad\": 1, \r\n  \"CreatedAtTimeStampU\": \"2019-03-02T23:05:15.084Z\"}')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/108", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/108/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/108/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/108", "id": 467124982, "node_id": "MDU6SXNzdWU0NjcxMjQ5ODI=", "number": 108, "title": "Serializing datetime error", "user": {"login": "guibos", "id": 22233599, "node_id": "MDQ6VXNlcjIyMjMzNTk5", "avatar_url": "https://avatars3.githubusercontent.com/u/22233599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guibos", "html_url": "https://github.com/guibos", "followers_url": "https://api.github.com/users/guibos/followers", "following_url": "https://api.github.com/users/guibos/following{/other_user}", "gists_url": "https://api.github.com/users/guibos/gists{/gist_id}", "starred_url": "https://api.github.com/users/guibos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guibos/subscriptions", "organizations_url": "https://api.github.com/users/guibos/orgs", "repos_url": "https://api.github.com/users/guibos/repos", "events_url": "https://api.github.com/users/guibos/events{/privacy}", "received_events_url": "https://api.github.com/users/guibos/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 909368692, "node_id": "MDU6TGFiZWw5MDkzNjg2OTI=", "url": "https://api.github.com/repos/lidatong/dataclasses-json/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-11T21:53:47Z", "updated_at": "2020-01-03T17:35:58Z", "closed_at": "2019-10-05T14:45:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Nice library!\r\n\r\nI found one problem when I want serialize datetimes:\r\n\r\n```\r\nfrom datetime import datetime\r\nfrom dataclasses import dataclass\r\nfrom typing import Optional\r\n\r\nfrom dataclasses_json import dataclass_json\r\n\r\n\r\n@dataclass\r\n@dataclass_json\r\nclass Test:\r\n    id: Optional[int]\r\n    date: Optional[datetime]\r\n\r\ntest = Test(None, None)\r\n```\r\nIf execute:\r\n```\r\ntest.to_json()\r\n```\r\nworks as expected:\r\n> '{\"id\": null, \"date\": null}'\r\n\r\nBut if  I execute:\r\n```\r\nTest.schema().dump(test)\r\n```\r\nIt returns:\r\n> AttributeError: 'NoneType' object has no attribute 'timestamp'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/107", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/107/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/107/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/107", "id": 465969736, "node_id": "MDU6SXNzdWU0NjU5Njk3MzY=", "number": 107, "title": "Generated schema is inconsistent with `from_json`", "user": {"login": "Glandos", "id": 297578, "node_id": "MDQ6VXNlcjI5NzU3OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/297578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Glandos", "html_url": "https://github.com/Glandos", "followers_url": "https://api.github.com/users/Glandos/followers", "following_url": "https://api.github.com/users/Glandos/following{/other_user}", "gists_url": "https://api.github.com/users/Glandos/gists{/gist_id}", "starred_url": "https://api.github.com/users/Glandos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Glandos/subscriptions", "organizations_url": "https://api.github.com/users/Glandos/orgs", "repos_url": "https://api.github.com/users/Glandos/repos", "events_url": "https://api.github.com/users/Glandos/events{/privacy}", "received_events_url": "https://api.github.com/users/Glandos/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 909368692, "node_id": "MDU6TGFiZWw5MDkzNjg2OTI=", "url": "https://api.github.com/repos/lidatong/dataclasses-json/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-09T20:26:59Z", "updated_at": "2019-07-27T15:46:23Z", "closed_at": "2019-07-27T15:46:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Since #104, the schema generation is broken if we are using letter casing.\r\n\r\nIndeed, in https://github.com/lidatong/dataclasses-json/blob/master/dataclasses_json/mm.py#L240 it will try to use the `mm_field` metadata if there is any existing metadata. However, defining just the casing will end up with an instance of `None`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/103", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/103/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/103/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/103", "id": 464975985, "node_id": "MDU6SXNzdWU0NjQ5NzU5ODU=", "number": 103, "title": "improve config api", "user": {"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 909368696, "node_id": "MDU6TGFiZWw5MDkzNjg2OTY=", "url": "https://api.github.com/repos/lidatong/dataclasses-json/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-07T17:46:15Z", "updated_at": "2019-07-08T15:38:55Z", "closed_at": "2019-07-08T15:38:55Z", "author_association": "OWNER", "active_lock_reason": null, "body": "the config parameters are  **\"ad-hoc\"** when they should be **\"well-defined\"**, i.e. obvious to the user what the params to pass in are without having to resort to docs.\r\n\r\nrather than taking in dict with ad-hoc structure in field metadata, it should formally define the valid config fields.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/102", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/102/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/102/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/102", "id": 464885862, "node_id": "MDU6SXNzdWU0NjQ4ODU4NjI=", "number": 102, "title": "Release 0.2.8 no in PyPi", "user": {"login": "USSX-Hares", "id": 29100587, "node_id": "MDQ6VXNlcjI5MTAwNTg3", "avatar_url": "https://avatars2.githubusercontent.com/u/29100587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/USSX-Hares", "html_url": "https://github.com/USSX-Hares", "followers_url": "https://api.github.com/users/USSX-Hares/followers", "following_url": "https://api.github.com/users/USSX-Hares/following{/other_user}", "gists_url": "https://api.github.com/users/USSX-Hares/gists{/gist_id}", "starred_url": "https://api.github.com/users/USSX-Hares/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/USSX-Hares/subscriptions", "organizations_url": "https://api.github.com/users/USSX-Hares/orgs", "repos_url": "https://api.github.com/users/USSX-Hares/repos", "events_url": "https://api.github.com/users/USSX-Hares/events{/privacy}", "received_events_url": "https://api.github.com/users/USSX-Hares/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-06T19:56:43Z", "updated_at": "2019-07-06T22:56:43Z", "closed_at": "2019-07-06T22:56:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\r\nRelease 0.2.8 was not uploaded to the PyPi\r\nCould you upload it?\r\n\r\n```log\r\n$ python3.7 -m pip install 'dataclasses-json==0.2.8'\r\nCollecting dataclasses-json==0.2.8\r\n  Could not find a version that satisfies the requirement dataclasses-json==0.2.8 (from versions: 0.0.1, 0.0.2, 0.0.3, 0.0.4, 0.0.5, 0.0.6, 0.0.7, 0.0.8, 0.0.9, 0.0.10, 0.0.11, 0.0.12, 0.0.13, 0.0.14, 0.0.15, 0.0.16, 0.0.17, 0.0.18, 0.0.19, 0.0.20, 0.0.21, 0.0.22,\r\n0.0.23, 0.0.24, 0.0.25, 0.1.0, 0.2.0, 0.2.1, 0.2.2, 0.2.3, 0.2.4, 0.2.5, 0.2.6, 0.2.7)\r\nNo matching distribution found for dataclasses-json==0.2.8\r\nYou are using pip version 18.1, however version 19.1.1 is available.\r\nYou should consider upgrading via the 'python -m pip install --upgrade pip' command.\r\n```\r\n![image](https://user-images.githubusercontent.com/29100587/60760649-460baf00-a041-11e9-9812-9fc0290c2935.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/98", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/98/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/98/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/98", "id": 458794917, "node_id": "MDU6SXNzdWU0NTg3OTQ5MTc=", "number": 98, "title": "Feature Request: Support \"camelCase\" and \"snake_case\" manipulations", "user": {"login": "USSX-Hares", "id": 29100587, "node_id": "MDQ6VXNlcjI5MTAwNTg3", "avatar_url": "https://avatars2.githubusercontent.com/u/29100587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/USSX-Hares", "html_url": "https://github.com/USSX-Hares", "followers_url": "https://api.github.com/users/USSX-Hares/followers", "following_url": "https://api.github.com/users/USSX-Hares/following{/other_user}", "gists_url": "https://api.github.com/users/USSX-Hares/gists{/gist_id}", "starred_url": "https://api.github.com/users/USSX-Hares/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/USSX-Hares/subscriptions", "organizations_url": "https://api.github.com/users/USSX-Hares/orgs", "repos_url": "https://api.github.com/users/USSX-Hares/repos", "events_url": "https://api.github.com/users/USSX-Hares/events{/privacy}", "received_events_url": "https://api.github.com/users/USSX-Hares/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 909368696, "node_id": "MDU6TGFiZWw5MDkzNjg2OTY=", "url": "https://api.github.com/repos/lidatong/dataclasses-json/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-06-20T18:03:53Z", "updated_at": "2019-07-09T14:56:52Z", "closed_at": "2019-07-07T18:24:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Problem\r\nIn Python, we use snake_case for class field names.\r\nHowever, most APIs implement camelCase field names, so either unorthodox class field naming or serialized class objects manipulations is/are required.\r\n\r\n### P.S.\r\nHere's my library partially implementing such a feature\r\nhttps://gitlab.com/Hares/camel-case-switcher\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/95", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/95/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/95/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/95", "id": 456504134, "node_id": "MDU6SXNzdWU0NTY1MDQxMzQ=", "number": 95, "title": "Import of dataclasses_json under Python 3.6 raises a TypeError: metaclass conflict", "user": {"login": "jmfarrow", "id": 119180, "node_id": "MDQ6VXNlcjExOTE4MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/119180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmfarrow", "html_url": "https://github.com/jmfarrow", "followers_url": "https://api.github.com/users/jmfarrow/followers", "following_url": "https://api.github.com/users/jmfarrow/following{/other_user}", "gists_url": "https://api.github.com/users/jmfarrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmfarrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmfarrow/subscriptions", "organizations_url": "https://api.github.com/users/jmfarrow/orgs", "repos_url": "https://api.github.com/users/jmfarrow/repos", "events_url": "https://api.github.com/users/jmfarrow/events{/privacy}", "received_events_url": "https://api.github.com/users/jmfarrow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-15T06:03:34Z", "updated_at": "2019-06-17T11:16:56Z", "closed_at": "2019-06-16T15:51:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Importing dataclasses_json 0.2.5 in Python 3.6 throws a metaclass conflict related `TypeError`\r\n\r\n```\r\n$ python3.6\r\nPython 3.6.7 (default, Oct 22 2018, 11:32:17)\r\n[GCC 8.2.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import dataclasses_json\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \".../lib/python3.6/site-packages/dataclasses_json/__init__.py\", line 1, in <module>\r\n    from dataclasses_json.api import (DataClassJsonMixin,\r\n  File \".../lib/python3.6/site-packages/dataclasses_json/api.py\", line 5, in <module>\r\n    from dataclasses_json.mm import build_schema, SchemaHelper, JsonData\r\n  File \".../lib/python3.6/site-packages/dataclasses_json/mm.py\", line 105, in <module>\r\n    class SchemaHelper(Schema, typing.Generic[T]):\r\nTypeError: metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/94", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/94/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/94/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/94", "id": 455470828, "node_id": "MDU6SXNzdWU0NTU0NzA4Mjg=", "number": 94, "title": "ignore unknown properties in nested classes. How to propagate schema config to nested classes?", "user": {"login": "arturstorm", "id": 2835580, "node_id": "MDQ6VXNlcjI4MzU1ODA=", "avatar_url": "https://avatars1.githubusercontent.com/u/2835580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arturstorm", "html_url": "https://github.com/arturstorm", "followers_url": "https://api.github.com/users/arturstorm/followers", "following_url": "https://api.github.com/users/arturstorm/following{/other_user}", "gists_url": "https://api.github.com/users/arturstorm/gists{/gist_id}", "starred_url": "https://api.github.com/users/arturstorm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arturstorm/subscriptions", "organizations_url": "https://api.github.com/users/arturstorm/orgs", "repos_url": "https://api.github.com/users/arturstorm/repos", "events_url": "https://api.github.com/users/arturstorm/events{/privacy}", "received_events_url": "https://api.github.com/users/arturstorm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 909368696, "node_id": "MDU6TGFiZWw5MDkzNjg2OTY=", "url": "https://api.github.com/repos/lidatong/dataclasses-json/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-12T23:39:39Z", "updated_at": "2019-12-19T12:18:15Z", "closed_at": "2019-12-19T12:18:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to ignore unknown properties in nested classes when I parse json with unknown(not mapped) fields.\r\nParsing unknown properties works with `Boss.from_json(boss_json)`. But there a lot of code where It use marshmallow schemas directly like `Boss.schema().loads(boss_json, unknown=\"exclude\")`\r\n\r\nHow can I define classes with `@dataclass_json` to ignore unknown properties in nested schemas by default?  \r\n\r\n```python \r\nfrom dataclasses import dataclass\r\nfrom dataclasses_json import dataclass_json\r\nfrom typing import List\r\n\r\n@dataclass_json\r\n@dataclass(frozen=True)\r\nclass Minion:\r\n    name: str\r\n\r\n\r\n@dataclass_json\r\n@dataclass(frozen=True)\r\nclass Boss:\r\n    minions: List[Minion]\r\n\r\nboss_json = \"\"\"\r\n{\r\n    \"minions\": [\r\n        {\r\n            \"name\": \"evil minion\", \r\n            \"UNKNOWN_PROPERTY\" : \"value\"\r\n        },\r\n        {\r\n            \"name\": \"very evil minion\"\r\n        }\r\n    ],\r\n    \"UNKNOWN_PROPERTY\" : \"value\"\r\n}\r\n\"\"\".strip()\r\nBoss.schema().loads(boss_json, unknown=\"exclude\")\r\n```\r\nRESULT:\r\n`marshmallow.exceptions.ValidationError: {'minions': {0: {'UNKNOWN_PROPERTY': ['Unknown field.']}}}`\r\nExpected:\r\n`Boss(minions=[Minion(name='evil minion'), Minion(name='very evil minion')])`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/91", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/91/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/91/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/91", "id": 453576939, "node_id": "MDU6SXNzdWU0NTM1NzY5Mzk=", "number": 91, "title": "Invalid code example in ReadMe", "user": {"login": "USSX-Hares", "id": 29100587, "node_id": "MDQ6VXNlcjI5MTAwNTg3", "avatar_url": "https://avatars2.githubusercontent.com/u/29100587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/USSX-Hares", "html_url": "https://github.com/USSX-Hares", "followers_url": "https://api.github.com/users/USSX-Hares/followers", "following_url": "https://api.github.com/users/USSX-Hares/following{/other_user}", "gists_url": "https://api.github.com/users/USSX-Hares/gists{/gist_id}", "starred_url": "https://api.github.com/users/USSX-Hares/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/USSX-Hares/subscriptions", "organizations_url": "https://api.github.com/users/USSX-Hares/orgs", "repos_url": "https://api.github.com/users/USSX-Hares/repos", "events_url": "https://api.github.com/users/USSX-Hares/events{/privacy}", "received_events_url": "https://api.github.com/users/USSX-Hares/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-07T15:40:04Z", "updated_at": "2019-06-15T03:45:02Z", "closed_at": "2019-06-15T03:45:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "~~It seems that subclass resolution is broken.~~\r\nThis was fixed with an update to the latest version. However, the following still takes place\r\nI've run code from ReadMe, and it is not working\r\n\r\n### Code from ReadMe\r\n```python\r\n# peter@peterpc:~$ python3.7\r\n# Python 3.7.2 (default, Feb 25 2019, 14:16:03) \r\n# [GCC 5.4.0 20160609] on linux\r\n# Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from dataclasses import dataclass\r\n>>> from dataclasses_json import dataclass_json\r\n>>> import json\r\n>>> from typing import Optional\r\n>>> \r\n>>> @dataclass_json\r\n... @dataclass\r\n... class Student:\r\n...     id: int\r\n...     name: str = 'student'\r\n... \r\n>>> Student.from_json('{\"id\": 1}')  # Student(id=1, name='student')\r\nStudent(id=1, name='student')\r\n>>> \r\n>>> @dataclass_json\r\n... @dataclass\r\n... class Tutor:\r\n...     id: int\r\n...     student: Optional[Student]\r\n... \r\n>>> Tutor.from_json('{\"id\": 1}')  # Tutor(id=1, student=None)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.7/site-packages/dataclasses_json/api.py\", line 60, in from_json\r\n    return _decode_dataclass(cls, kvs, infer_missing)\r\n  File \"/usr/local/lib/python3.7/site-packages/dataclasses_json/core.py\", line 91, in _decode_dataclass\r\n    field_value = kvs[field.name]\r\nKeyError: 'student'\r\n>>> \r\n```\r\n\r\nI am using latest version of package (0.2.4) on python3.7\r\n```bash\r\npeter@peterpc:~$ python3.7 -m pip show dataclasses-json\r\nName: dataclasses-json\r\nVersion: 0.2.4\r\nSummary: Easily serialize dataclasses to and from JSON\r\nHome-page: https://github.com/lidatong/dataclasses-json\r\nAuthor: lidatong\r\nAuthor-email: charles.dt.li@gmail.com\r\nLicense: Unlicense\r\nLocation: /usr/local/lib/python3.7/site-packages\r\nRequires: marshmallow, marshmallow-enum\r\nRequired-by: \r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/88", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/88/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/88/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/88", "id": 450742119, "node_id": "MDU6SXNzdWU0NTA3NDIxMTk=", "number": 88, "title": "Doubt regarding Type Annotation in \"from_json\"", "user": {"login": "harshavardhangsv", "id": 2330917, "node_id": "MDQ6VXNlcjIzMzA5MTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2330917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harshavardhangsv", "html_url": "https://github.com/harshavardhangsv", "followers_url": "https://api.github.com/users/harshavardhangsv/followers", "following_url": "https://api.github.com/users/harshavardhangsv/following{/other_user}", "gists_url": "https://api.github.com/users/harshavardhangsv/gists{/gist_id}", "starred_url": "https://api.github.com/users/harshavardhangsv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harshavardhangsv/subscriptions", "organizations_url": "https://api.github.com/users/harshavardhangsv/orgs", "repos_url": "https://api.github.com/users/harshavardhangsv/repos", "events_url": "https://api.github.com/users/harshavardhangsv/events{/privacy}", "received_events_url": "https://api.github.com/users/harshavardhangsv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-31T11:00:56Z", "updated_at": "2019-06-15T03:45:02Z", "closed_at": "2019-06-15T03:45:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "In api.py, for the class method `from_json` since the input `cls` parameter is class and output is its object. shouldn't it be like this:\r\n\r\n   from typing import Type\r\n\r\n    @classmethod\r\n    def from_json(cls: Type[A],  # A to Type[A]\r\n                  s: str,\r\n                  *,\r\n                  encoding=None,\r\n                  parse_float=None,\r\n                  parse_int=None,\r\n                  parse_constant=None,\r\n                  infer_missing=False,\r\n                  **kw) -> A:\r\n\r\n\r\ncan someone please help me understand this? Thanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/83", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/83/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/83/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/83", "id": 441123117, "node_id": "MDU6SXNzdWU0NDExMjMxMTc=", "number": 83, "title": "Fails to build schema if the class have enum field", "user": {"login": "denisvlah", "id": 12544479, "node_id": "MDQ6VXNlcjEyNTQ0NDc5", "avatar_url": "https://avatars2.githubusercontent.com/u/12544479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvlah", "html_url": "https://github.com/denisvlah", "followers_url": "https://api.github.com/users/denisvlah/followers", "following_url": "https://api.github.com/users/denisvlah/following{/other_user}", "gists_url": "https://api.github.com/users/denisvlah/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvlah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvlah/subscriptions", "organizations_url": "https://api.github.com/users/denisvlah/orgs", "repos_url": "https://api.github.com/users/denisvlah/repos", "events_url": "https://api.github.com/users/denisvlah/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvlah/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 909368692, "node_id": "MDU6TGFiZWw5MDkzNjg2OTI=", "url": "https://api.github.com/repos/lidatong/dataclasses-json/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-07T09:08:53Z", "updated_at": "2019-09-28T14:29:44Z", "closed_at": "2019-09-28T14:29:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Example:\r\n\r\n```\r\nfrom dataclasses import dataclass\r\nfrom enum import Enum\r\nfrom typing import *\r\n\r\nfrom dataclasses_json import dataclass_json\r\n\r\n\r\nclass NodeType(Enum):\r\n    ACTION1 = 'ACTION1'\r\n    ACTION2 = 'ACTION2'\r\n\r\n\r\n@dataclass_json\r\n@dataclass(unsafe_hash=True)\r\nclass Node:\r\n    type: NodeType\r\n\r\nif __name__ == '__main__':\r\n   print(Node.schema())\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/82", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/82/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/82/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/82", "id": 441109799, "node_id": "MDU6SXNzdWU0NDExMDk3OTk=", "number": 82, "title": "Union type deserialize to dict from json", "user": {"login": "denisvlah", "id": 12544479, "node_id": "MDQ6VXNlcjEyNTQ0NDc5", "avatar_url": "https://avatars2.githubusercontent.com/u/12544479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvlah", "html_url": "https://github.com/denisvlah", "followers_url": "https://api.github.com/users/denisvlah/followers", "following_url": "https://api.github.com/users/denisvlah/following{/other_user}", "gists_url": "https://api.github.com/users/denisvlah/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvlah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvlah/subscriptions", "organizations_url": "https://api.github.com/users/denisvlah/orgs", "repos_url": "https://api.github.com/users/denisvlah/repos", "events_url": "https://api.github.com/users/denisvlah/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvlah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-05-07T08:39:16Z", "updated_at": "2020-03-09T11:19:58Z", "closed_at": "2019-06-16T15:55:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "The the Union type on a dataclass cannot be deserialized correctly from json.\r\nExample:\r\n\r\n```\r\nfrom dataclasses import dataclass\r\nfrom dataclasses_json import dataclass_json\r\nfrom typing import *\r\n\r\n\r\n@dataclass_json\r\n@dataclass(unsafe_hash=True)\r\nclass Gofy:\r\n    p1: str\r\n\r\n@dataclass_json\r\n@dataclass(unsafe_hash=True)\r\nclass Foo:\r\n    p2: str\r\n\r\n@dataclass_json\r\n@dataclass(unsafe_hash=True)\r\nclass Agg:\r\n    inst: Union[Gofy, Foo]\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = Agg(inst=Foo(p2='p2'))\r\n    json_str = a.to_json()\r\n    a_restored = Agg.from_json(json_str)\r\n    print(type(a_restored.inst) ) # this will print the dict type\r\n    assert a == a_restored # this check fails\r\n    assert isinstance(a_restored.inst, Foo) # this check fails\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/80", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/80/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/80/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/80", "id": 439461172, "node_id": "MDU6SXNzdWU0Mzk0NjExNzI=", "number": 80, "title": "Field init=False is not ignored when restoring from JSON", "user": {"login": "rakanalh", "id": 195829, "node_id": "MDQ6VXNlcjE5NTgyOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/195829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakanalh", "html_url": "https://github.com/rakanalh", "followers_url": "https://api.github.com/users/rakanalh/followers", "following_url": "https://api.github.com/users/rakanalh/following{/other_user}", "gists_url": "https://api.github.com/users/rakanalh/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakanalh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakanalh/subscriptions", "organizations_url": "https://api.github.com/users/rakanalh/orgs", "repos_url": "https://api.github.com/users/rakanalh/repos", "events_url": "https://api.github.com/users/rakanalh/events{/privacy}", "received_events_url": "https://api.github.com/users/rakanalh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-02T07:38:01Z", "updated_at": "2019-05-06T14:14:32Z", "closed_at": "2019-05-06T14:14:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello\r\n\r\n```\r\nfrom dataclasses import dataclass, field\r\nfrom typing import Optional\r\n\r\nfrom dataclasses_json import DataClassJsonMixin\r\n\r\n\r\n@dataclass\r\nclass A(DataClassJsonMixin):\r\n    field_one: int\r\n    field_two: Optional[int] = field(init=False)\r\n\r\n\r\ndef main():\r\n    a = A(1)\r\n\r\n    json = A.schema().dumps(a)\r\n    a_restored = A.schema().loads(json)\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\nThe following example would fail with the following stacktrace:\r\n```\r\nTraceback (most recent call last):\r\n  File \"dc_json_init.py\", line 21, in <module>\r\n    main()\r\n  File \"dc_json_init.py\", line 17, in main\r\n    a_restored = A.schema().loads(json)\r\n  File \"/home/rakan/.pyenv/versions/playground/lib/python3.7/site-packages/marshmallow/schema.py\", line 737, in loads\r\n    return self.load(data, many=many, partial=partial, unknown=unknown)\r\n  File \"/home/rakan/.pyenv/versions/playground/lib/python3.7/site-packages/marshmallow/schema.py\", line 708, in load\r\n    postprocess=True,\r\n  File \"/home/rakan/.pyenv/versions/playground/lib/python3.7/site-packages/marshmallow/schema.py\", line 857, in _do_load\r\n    original_data=data,\r\n  File \"/home/rakan/.pyenv/versions/playground/lib/python3.7/site-packages/marshmallow/schema.py\", line 1036, in _invoke_load_processors\r\n    data=data, many=many, original_data=original_data,\r\n  File \"/home/rakan/.pyenv/versions/playground/lib/python3.7/site-packages/marshmallow/schema.py\", line 1158, in _invoke_processors\r\n    data = processor(data)\r\n  File \"/home/rakan/.pyenv/versions/playground/lib/python3.7/site-packages/dataclasses_json/mm.py\", line 112, in make_instance\r\n    return _decode_dataclass(cls, kvs, partial)\r\n  File \"/home/rakan/.pyenv/versions/playground/lib/python3.7/site-packages/dataclasses_json/core.py\", line 137, in _decode_dataclass\r\n    return cls(**init_kwargs)\r\nTypeError: __init__() got an unexpected keyword argument 'field_two'\r\n```\r\n\r\nProblem is that the dump'ed JSON contained the `field_two` and it was being used for initializing the instance on restoration.\r\n\r\nPR to resolve this incoming.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/78", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/78/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/78/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/78", "id": 438853496, "node_id": "MDU6SXNzdWU0Mzg4NTM0OTY=", "number": 78, "title": "AttributeError: 'Field' object has no attribute 'Field'", "user": {"login": "rakanalh", "id": 195829, "node_id": "MDQ6VXNlcjE5NTgyOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/195829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakanalh", "html_url": "https://github.com/rakanalh", "followers_url": "https://api.github.com/users/rakanalh/followers", "following_url": "https://api.github.com/users/rakanalh/following{/other_user}", "gists_url": "https://api.github.com/users/rakanalh/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakanalh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakanalh/subscriptions", "organizations_url": "https://api.github.com/users/rakanalh/orgs", "repos_url": "https://api.github.com/users/rakanalh/repos", "events_url": "https://api.github.com/users/rakanalh/events{/privacy}", "received_events_url": "https://api.github.com/users/rakanalh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-30T15:58:00Z", "updated_at": "2019-05-06T14:12:40Z", "closed_at": "2019-05-06T14:12:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nTried the package on a project i am working on and the package was showing this stacktrace:\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/rakan/.pyenv/versions/3.7.0/envs/raiden/lib/python3.7/site-packages/dataclasses_json/api.py\", line 76, in schema\r\n    Schema = build_schema(cls, DataClassJsonMixin, infer_missing, partial)\r\n  File \"/home/rakan/.pyenv/versions/3.7.0/envs/raiden/lib/python3.7/site-packages/dataclasses_json/mm.py\", line 114, in build_schema\r\n    schema_ = schema(cls, mixin, infer_missing)\r\n  File \"/home/rakan/.pyenv/versions/3.7.0/envs/raiden/lib/python3.7/site-packages/dataclasses_json/mm.py\", line 99, in schema\r\n    t = build_type(type_, options, mixin, field, cls)\r\n  File \"/home/rakan/.pyenv/versions/3.7.0/envs/raiden/lib/python3.7/site-packages/dataclasses_json/mm.py\", line 74, in build_type\r\n    return inner(type_, options)\r\n  File \"/home/rakan/.pyenv/versions/3.7.0/envs/raiden/lib/python3.7/site-packages/dataclasses_json/mm.py\", line 73, in inner\r\n    return field.Field(**options)\r\nAttributeError: 'Field' object has no attribute 'Field'\r\n```\r\n\r\nMostly caused by using the wrong package name. PR incoming", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/75", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/75/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/75/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/75", "id": 424679507, "node_id": "MDU6SXNzdWU0MjQ2Nzk1MDc=", "number": 75, "title": "Decoding enums with str mixin fails", "user": {"login": "dpausp", "id": 1965950, "node_id": "MDQ6VXNlcjE5NjU5NTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1965950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpausp", "html_url": "https://github.com/dpausp", "followers_url": "https://api.github.com/users/dpausp/followers", "following_url": "https://api.github.com/users/dpausp/following{/other_user}", "gists_url": "https://api.github.com/users/dpausp/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpausp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpausp/subscriptions", "organizations_url": "https://api.github.com/users/dpausp/orgs", "repos_url": "https://api.github.com/users/dpausp/repos", "events_url": "https://api.github.com/users/dpausp/events{/privacy}", "received_events_url": "https://api.github.com/users/dpausp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-25T00:21:19Z", "updated_at": "2019-04-13T23:01:40Z", "closed_at": "2019-04-13T23:01:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Enums can be defined with mixins, for example:\r\n\r\n~~~python\r\nclass MyStrEnum(str, Enum):\r\n    a = 'aa'\r\n    b = 'bb'\r\n~~~\r\n\r\nDecoding values for that enum fails because `_decode_generic` handles them incorrectly:\r\n\r\n~~~\r\nAttributeError                            Traceback (most recent call last)\r\n\r\n---> 17 ElectionConfig.from_json(jso)\r\n\r\n~/.local/share/virtualenvs/ekklesia-portal-GhysHmkk/lib/python3.7/site-packages/dataclasses_json/api.py in from_json(cls, s, encoding, parse_float, parse_int, parse_constant, infer_missing, **kw)\r\n     60                          parse_constant=parse_constant,\r\n     61                          **kw)\r\n---> 62         return _decode_dataclass(cls, kvs, infer_missing)\r\n     63 \r\n     64     @classmethod\r\n\r\n~/.local/share/virtualenvs/ekklesia-portal-GhysHmkk/lib/python3.7/site-packages/dataclasses_json/core.py in _decode_dataclass(cls, kvs, infer_missing)\r\n    112             init_kwargs[field.name] = _decode_generic(field.type,\r\n    113                                                       field_value,\r\n--> 114                                                       infer_missing)\r\n    115         elif _issubclass_safe(field.type, datetime):\r\n    116             # FIXME this is a hack to deal with mm already decoding\r\n\r\n~/.local/share/virtualenvs/ekklesia-portal-GhysHmkk/lib/python3.7/site-packages/dataclasses_json/core.py in _decode_generic(type_, value, infer_missing)\r\n    149             xs = zip(ks, vs)\r\n    150         else:\r\n--> 151             xs = _decode_items(type_.__args__[0], value, infer_missing)\r\n    152 \r\n    153         # get the constructor if using corresponding generic type in `typing`\r\n\r\n/nix/store/6x7zqpvbj07rx837jjvc9cc62qr56fs8-python3-3.7.2-env/lib/python3.7/enum.py in __getattr__(cls, name)\r\n    342         \"\"\"\r\n    343         if _is_dunder(name):\r\n--> 344             raise AttributeError(name)\r\n    345         try:\r\n    346             return cls._member_map_[name]\r\n\r\nAttributeError: __args__\r\n~~~", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/74", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/74/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/74/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/74", "id": 421773006, "node_id": "MDU6SXNzdWU0MjE3NzMwMDY=", "number": 74, "title": "Support all operations on plain dataclasses through functions", "user": {"login": "rominf", "id": 3449635, "node_id": "MDQ6VXNlcjM0NDk2MzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3449635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rominf", "html_url": "https://github.com/rominf", "followers_url": "https://api.github.com/users/rominf/followers", "following_url": "https://api.github.com/users/rominf/following{/other_user}", "gists_url": "https://api.github.com/users/rominf/gists{/gist_id}", "starred_url": "https://api.github.com/users/rominf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rominf/subscriptions", "organizations_url": "https://api.github.com/users/rominf/orgs", "repos_url": "https://api.github.com/users/rominf/repos", "events_url": "https://api.github.com/users/rominf/events{/privacy}", "received_events_url": "https://api.github.com/users/rominf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-16T05:41:28Z", "updated_at": "2019-09-28T14:28:10Z", "closed_at": "2019-09-28T14:28:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have an existing codebase and don't want to change my dataclasses. I propose to add functions (not methods) like: `to_json`, `from_json`, etc.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/73", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/73/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/73/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/73", "id": 421110484, "node_id": "MDU6SXNzdWU0MjExMTA0ODQ=", "number": 73, "title": "Support for dataclass fields of List[Optional[Repository]]", "user": {"login": "mjmonroe", "id": 9063378, "node_id": "MDQ6VXNlcjkwNjMzNzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/9063378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjmonroe", "html_url": "https://github.com/mjmonroe", "followers_url": "https://api.github.com/users/mjmonroe/followers", "following_url": "https://api.github.com/users/mjmonroe/following{/other_user}", "gists_url": "https://api.github.com/users/mjmonroe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjmonroe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjmonroe/subscriptions", "organizations_url": "https://api.github.com/users/mjmonroe/orgs", "repos_url": "https://api.github.com/users/mjmonroe/repos", "events_url": "https://api.github.com/users/mjmonroe/events{/privacy}", "received_events_url": "https://api.github.com/users/mjmonroe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-14T16:08:05Z", "updated_at": "2019-03-18T14:36:54Z", "closed_at": "2019-03-18T14:36:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Similar to the issue, #58, but in this case `List[Optional[Repository]]` fails with an exception. Here is some sample code. The error occurred with dataclasses-json version 0.2.2\r\n\r\nError\r\n\r\n```\r\n/Users/PC/miniconda3/envs/Flask_async/lib/python3.7/site-packages/dataclasses_json/mm.py:70:\r\n                UserWarning: Unknown type <class 'NoneType'> at Breaks.nodes: typing.List[typing.Union[__main__.Repository, NoneType]]\r\n                It's advised to pass the correct marshmallow type to `mm_field`.\r\n                warnings.warn(f\"Unknown type {type_} at {cls.__name__}.{field.name}: {field.type} \"\r\n        Traceback (most recent call last):\r\n          File \"<input>\", line 1, in <module>\r\n          File \"/Users/PC/miniconda3/envs/Flask_async/lib/python3.7/site-packages/dataclasses_json/api.py\", line 76, in schema\r\n            Schema = build_schema(cls, DataClassJsonMixin, infer_missing, partial)\r\n          File \"/Users/PC/miniconda3/envs/Flask_async/lib/python3.7/site-packages/dataclasses_json/mm.py\", line 113, in build_schema\r\n            schema_ = schema(cls, mixin, infer_missing)\r\n          File \"/Users/PC/miniconda3/envs/Flask_async/lib/python3.7/site-packages/dataclasses_json/mm.py\", line 98, in schema\r\n            t = build_type(type_, options, mixin, field, cls)\r\n          File \"/Users/PC/miniconda3/envs/Flask_async/lib/python3.7/site-packages/dataclasses_json/mm.py\", line 73, in build_type\r\n            return inner(type_, options)\r\n          File \"/Users/PC/miniconda3/envs/Flask_async/lib/python3.7/site-packages/dataclasses_json/mm.py\", line 66, in inner\r\n            args = [inner(a, {}) for a in getattr(type_, '__args__', [])]\r\n          File \"/Users/PC/miniconda3/envs/Flask_async/lib/python3.7/site-packages/dataclasses_json/mm.py\", line 66, in <listcomp>\r\n            args = [inner(a, {}) for a in getattr(type_, '__args__', [])]\r\n          File \"/Users/PC/miniconda3/envs/Flask_async/lib/python3.7/site-packages/dataclasses_json/mm.py\", line 66, in inner\r\n            args = [inner(a, {}) for a in getattr(type_, '__args__', [])]\r\n          File \"/Users/PC/miniconda3/envs/Flask_async/lib/python3.7/site-packages/dataclasses_json/mm.py\", line 66, in <listcomp>\r\n            args = [inner(a, {}) for a in getattr(type_, '__args__', [])]\r\n          File \"/Users/PC/miniconda3/envs/Flask_async/lib/python3.7/site-packages/dataclasses_json/mm.py\", line 72, in inner\r\n            return field.Field(**options)\r\n```\r\n\r\n\r\nCode example:\r\n```\r\nfrom dataclasses import dataclass\r\nfrom dataclasses_json import dataclass_json\r\nfrom typing import List, Optional\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass Repository:\r\n    name: str\r\n    stargazers: str\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass Breaks:\r\n    errors_with_trace = ''\"\r\n    nodes: List[Optional[Repository]]\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass Works:\r\n    nodes: Optional[List[Repository]]\r\n\r\ntry:\r\n    Breaks.schema()\r\nexcept AttributeError as exc:\r\n    print(exc)\r\n\r\nWorks.schema()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/69", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/69/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/69/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/69", "id": 415070350, "node_id": "MDU6SXNzdWU0MTUwNzAzNTA=", "number": 69, "title": "Recursive encoding of dataclasses does not use overrides", "user": {"login": "templed", "id": 1935870, "node_id": "MDQ6VXNlcjE5MzU4NzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1935870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/templed", "html_url": "https://github.com/templed", "followers_url": "https://api.github.com/users/templed/followers", "following_url": "https://api.github.com/users/templed/following{/other_user}", "gists_url": "https://api.github.com/users/templed/gists{/gist_id}", "starred_url": "https://api.github.com/users/templed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/templed/subscriptions", "organizations_url": "https://api.github.com/users/templed/orgs", "repos_url": "https://api.github.com/users/templed/repos", "events_url": "https://api.github.com/users/templed/events{/privacy}", "received_events_url": "https://api.github.com/users/templed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-27T11:10:54Z", "updated_at": "2019-04-13T23:03:14Z", "closed_at": "2019-04-13T23:03:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nWe recently found an issue with the encoding of nested dataclass objects where the nested dataclass has a specific encoder. The problem is that the nested dataclasses's encoder is not used when converting the field value to JSON. A simple example is shown below:\r\n\r\n```python\r\n@dataclass_json\r\n@dataclass\r\nclass Foo:\r\n    dt: datetime.datetime = field(\r\n        metadata={'dataclasses_json': {\r\n            'encoder': dt.datetime.isoformat,\r\n            'decoder': iso8601.parse_date,\r\n            'mm_field': fields.DateTime(format='iso')\r\n        }})\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass FooCtr:\r\n    l: List[Foo]\r\n\r\n\r\nf = Foo.from_json('{\"dt\": \"2019-01-02T12:34:56Z\"}')\r\n\r\nprint(f.to_json())\r\n# {\"dt\": \"2019-01-02T12:34:56+00:00\"}\r\n\r\nfc = FooCtr([f])\r\n\r\nprint(fc.to_json())\r\n# {\"l\": [{\"dt\": 1546432496.0}]}\r\n```\r\n\r\nThe timestamp in the `fc` variable is using the default `datetime` encoder in `core.py` which is to make a timestamp. The reason for this is, and a possible fix is given in a pull request.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/68", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/68/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/68/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/68", "id": 412943771, "node_id": "MDU6SXNzdWU0MTI5NDM3NzE=", "number": 68, "title": "Schema generation is broken", "user": {"login": "Peilonrayz", "id": 5623093, "node_id": "MDQ6VXNlcjU2MjMwOTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5623093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Peilonrayz", "html_url": "https://github.com/Peilonrayz", "followers_url": "https://api.github.com/users/Peilonrayz/followers", "following_url": "https://api.github.com/users/Peilonrayz/following{/other_user}", "gists_url": "https://api.github.com/users/Peilonrayz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Peilonrayz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Peilonrayz/subscriptions", "organizations_url": "https://api.github.com/users/Peilonrayz/orgs", "repos_url": "https://api.github.com/users/Peilonrayz/repos", "events_url": "https://api.github.com/users/Peilonrayz/events{/privacy}", "received_events_url": "https://api.github.com/users/Peilonrayz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-02-21T14:11:38Z", "updated_at": "2019-02-28T16:11:53Z", "closed_at": "2019-02-28T16:11:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": " - #60 comes from a typo in the schema code.\r\n - #58 is due to the code not unwrapping the type `typing.List[__main__.child]` to `list` and so blows up. This is because the code unwraps `Optional` _last_.\r\n - #57 and #65 are because the created schema says minions is of type `Minion` not `List[Minion]`.\r\n - #67 is because `allow_none` isn't passed true if `default` or `Optional` are used.\r\n - Fixing #60 reveals another issue that `marshmallow.fields.List` doesn't take the arguments provided.\r\n - You only create a schema field for values that are:\r\n\r\n    1. Supplied via `mm_field`.\r\n    2. Is of type `DC`, `List[DC]` or `Optional[DC]`. (It unwraps `List` as if it were `Optional`.)\r\n    3. If a default is specified:\r\n\r\n        ```\r\n        test: List[str] = None\r\n        ```\r\n    4. Has the type `datetime`.\r\n\r\nFrom this I can see a couple more issues:\r\n\r\n1. `test: Optional[List[DC]]` doesn't create a field.\r\n2. `test: Optional[List[DC]] = None` errors as it unwraps the `Optional`, but not the `List`.\r\n\r\n    If you move the code to unwrap the `Optional` above the code to work with `list`, then the following error would be raised:\r\n\r\n    ```\r\n    TypeError: Unsupported typing.List[__main__.Relative] detected. Is it a supported JSON type or dataclass_json instance?\r\n    ```\r\n\r\n3. `test: Dict[str, List[str]] = None` is created as a `List[str]`.\r\n4. `test: Dict[int, Dict[int, int]] = None` is created as a `List[int]`.\r\n5. `test: List[List[str]]` raises the same `TypeError` as above.\r\n6. Any working `DC` code doesn't have the correct default set, `field.default` or `field.default_factory`.\r\n7. All code uses `missing` rather than `default`. Meaning `infer_missing` is almost un-needed.\r\n8. No field has it's `allow_none` argument changed. This is _really_ strange since you set `Optional` fields to it when no other is set.\r\n9. A lot of fields aren't created, and so their type is implied when creating the Schema, meaning marshmallow can't accurately verify the output.\r\n\r\n---\r\n\r\nTo fix these you should merge `_overrides`, `_make_nested_fields`, `_make_default_fields` and the `datetime_fields` creation into one function. From this you should then move all the code that creates types into its own recursive function, so you can build _nested_ types.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/67", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/67/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/67/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/67", "id": 412917245, "node_id": "MDU6SXNzdWU0MTI5MTcyNDU=", "number": 67, "title": "schema fails to deserialize fields that are optional ", "user": {"login": "eliwe", "id": 5405274, "node_id": "MDQ6VXNlcjU0MDUyNzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/5405274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eliwe", "html_url": "https://github.com/eliwe", "followers_url": "https://api.github.com/users/eliwe/followers", "following_url": "https://api.github.com/users/eliwe/following{/other_user}", "gists_url": "https://api.github.com/users/eliwe/gists{/gist_id}", "starred_url": "https://api.github.com/users/eliwe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eliwe/subscriptions", "organizations_url": "https://api.github.com/users/eliwe/orgs", "repos_url": "https://api.github.com/users/eliwe/repos", "events_url": "https://api.github.com/users/eliwe/events{/privacy}", "received_events_url": "https://api.github.com/users/eliwe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-21T13:11:49Z", "updated_at": "2019-02-28T15:53:01Z", "closed_at": "2019-02-28T15:53:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "HI,\r\n\r\nschema().loads failed to load Optional fields correctly. It raises: \r\n `marshmallow.exceptions.ValidationError: {'b': ['Field may not be null.']}`\r\n\r\nExample code:\r\n```\r\nfrom typing import Optional\r\nfrom dataclasses import dataclass\r\nfrom dataclasses_json import dataclass_json\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass A:\r\n    a: int\r\n    b: Optional[int]\r\n\r\nprint(A.from_json('{\"a\": 4, \"b\": 5}'))\r\nprint(A.from_json('{\"a\": 4, \"b\": null}'))\r\nprint(A.schema().loads('{\"a\": 4, \"b\": 5}'))\r\nprint(A.schema().loads('{\"a\": 4, \"b\": null}'))\r\n```\r\n\r\nThe last line raises ValidationError.\r\nI am using version 0.2.1.\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/65", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/65/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/65/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/65", "id": 410905944, "node_id": "MDU6SXNzdWU0MTA5MDU5NDQ=", "number": 65, "title": "dump/load gives Invalid input type", "user": {"login": "neggert", "id": 1271014, "node_id": "MDQ6VXNlcjEyNzEwMTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1271014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neggert", "html_url": "https://github.com/neggert", "followers_url": "https://api.github.com/users/neggert/followers", "following_url": "https://api.github.com/users/neggert/following{/other_user}", "gists_url": "https://api.github.com/users/neggert/gists{/gist_id}", "starred_url": "https://api.github.com/users/neggert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neggert/subscriptions", "organizations_url": "https://api.github.com/users/neggert/orgs", "repos_url": "https://api.github.com/users/neggert/repos", "events_url": "https://api.github.com/users/neggert/events{/privacy}", "received_events_url": "https://api.github.com/users/neggert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-15T19:12:34Z", "updated_at": "2019-02-28T15:53:37Z", "closed_at": "2019-02-28T15:53:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using `schema().load()` does not seem to work for classes that contain lists. I can reproduce this even with the Boss/Minion example from the documentation\r\n\r\n```{python}\r\n@dataclass_json\r\n@dataclass(frozen=True)\r\nclass Minion:\r\n    name: str\r\n\r\n\r\n@dataclass_json\r\n@dataclass(frozen=True)\r\nclass Boss:\r\n    minions: List[Minion]\r\n\r\nboss = Boss([Minion('evil minion'), Minion('very evil minion')])\r\nboss_dict = Boss.schema().dump(boss)\r\nBoss.schema().load(boss_dict)\r\n```\r\n\r\n```\r\nmarshmallow.exceptions.ValidationError: {'_schema': ['Invalid input type.']}\r\n```\r\n\r\nFor what it's worth, going all the way to JSON and back seems to work fine:\r\n\r\n```\r\nboss_json = boss.to_json()\r\nBoss.from_json(boss_json)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/62", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/62/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/62/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/62", "id": 408595051, "node_id": "MDU6SXNzdWU0MDg1OTUwNTE=", "number": 62, "title": "Library is not compatible with \"from __future__ import annotations\" (PEP 563)", "user": {"login": "chrahunt", "id": 2312275, "node_id": "MDQ6VXNlcjIzMTIyNzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2312275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrahunt", "html_url": "https://github.com/chrahunt", "followers_url": "https://api.github.com/users/chrahunt/followers", "following_url": "https://api.github.com/users/chrahunt/following{/other_user}", "gists_url": "https://api.github.com/users/chrahunt/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrahunt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrahunt/subscriptions", "organizations_url": "https://api.github.com/users/chrahunt/orgs", "repos_url": "https://api.github.com/users/chrahunt/repos", "events_url": "https://api.github.com/users/chrahunt/events{/privacy}", "received_events_url": "https://api.github.com/users/chrahunt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-10T23:12:41Z", "updated_at": "2019-02-12T01:22:42Z", "closed_at": "2019-02-11T05:23:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "[PEP 563](https://www.python.org/dev/peps/pep-0563/) means that we cannot expect type annotations to actually be class objects. Example code that fails (Python 3.7):\r\n\r\n```python\r\nfrom __future__ import annotations\r\n\r\nfrom dataclasses import dataclass\r\nfrom dataclasses_json import dataclass_json\r\n\r\n\r\n@dataclass\r\nclass T:\r\n    f: str\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass U:\r\n    t: T\r\n\r\nobj = U(T('foo'))\r\nprint(obj)\r\ns = obj.to_json()\r\nprint(s)\r\nobj2 = U.from_json(s)\r\nprint(obj2)\r\n```\r\n\r\nwhich outputs\r\n\r\n```\r\nU(t=T(f='foo'))\r\n{\"t\": {\"f\": \"foo\"}}\r\nU(t={'f': 'foo'})\r\n```\r\n\r\nThe expected behavior is that `t` is of type `T` and not a dict. This works as expected when `from future import __annotations__` is commented out.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/61", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/61/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/61/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/61", "id": 408565581, "node_id": "MDU6SXNzdWU0MDg1NjU1ODE=", "number": 61, "title": "Promote sharing encoding/decoding across multiple dataclasses", "user": {"login": "chrahunt", "id": 2312275, "node_id": "MDQ6VXNlcjIzMTIyNzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2312275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrahunt", "html_url": "https://github.com/chrahunt", "followers_url": "https://api.github.com/users/chrahunt/followers", "following_url": "https://api.github.com/users/chrahunt/following{/other_user}", "gists_url": "https://api.github.com/users/chrahunt/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrahunt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrahunt/subscriptions", "organizations_url": "https://api.github.com/users/chrahunt/orgs", "repos_url": "https://api.github.com/users/chrahunt/repos", "events_url": "https://api.github.com/users/chrahunt/events{/privacy}", "received_events_url": "https://api.github.com/users/chrahunt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 909368696, "node_id": "MDU6TGFiZWw5MDkzNjg2OTY=", "url": "https://api.github.com/repos/lidatong/dataclasses-json/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": {"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-02-10T18:49:12Z", "updated_at": "2020-02-22T17:24:30Z", "closed_at": "2020-02-22T17:24:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Problem\r\n\r\nThe current API only allows providing custom encoder/decoder on a field-by-field basis using metadata. The options for user code are not good:\r\n\r\n1. Repeat metadata for each usage of a custom type\r\n2. Define function for each custom type that returns a `dataclasses.Field` instantiated with the metadata\r\n\r\n1 is obviously not good. 2 leads to more verbose code, e.g.\r\n\r\n```python\r\n@dataclass_json\r\n@dataclass\r\nclass Container:\r\n    d: Data = data_field()\r\n    d2: Data = data_field(default=1)\r\n```\r\n\r\ngiven an implementation like\r\n\r\n```python\r\nfrom dataclasses import dataclass, field\r\nfrom dataclasses_json import dataclass_json\r\n\r\nclass Data:\r\n    ...\r\n\r\ndef data_field(**kwargs):\r\n    metadata = kwargs.setdefault('metadata', {})\r\n    metadata.setdefault('dataclasses_json', {\r\n        'encoder': lambda x: None,\r\n        'decoder': Data,\r\n        'mm_type': None\r\n    })\r\n    return field(**kwargs)\r\n\r\n```\r\n\r\neven in the default case (`d`) we cannot omit the `data_field()`.\r\n\r\n# Desired solution\r\n\r\n1. Encoder/decoder should be trivial to specify in one place per type with little to no boilerplate in user code\r\n2. Fields within a dataclass that would otherwise not need to use `field()` (e.g. `d: dict = field(default_factory=dict)`) should not have to in order to specify encoder/decoder. In the example above it should look like `d: Data` only.\r\n3. It should be possible to override encoding/decoding of a type for the rendering of several classes while still maintaining 1 and 2.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/60", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/60/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/60/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/60", "id": 404340759, "node_id": "MDU6SXNzdWU0MDQzNDA3NTk=", "number": 60, "title": "schema().dumps not working properly with field initializers", "user": {"login": "ropottnik", "id": 26218268, "node_id": "MDQ6VXNlcjI2MjE4MjY4", "avatar_url": "https://avatars2.githubusercontent.com/u/26218268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ropottnik", "html_url": "https://github.com/ropottnik", "followers_url": "https://api.github.com/users/ropottnik/followers", "following_url": "https://api.github.com/users/ropottnik/following{/other_user}", "gists_url": "https://api.github.com/users/ropottnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/ropottnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ropottnik/subscriptions", "organizations_url": "https://api.github.com/users/ropottnik/orgs", "repos_url": "https://api.github.com/users/ropottnik/repos", "events_url": "https://api.github.com/users/ropottnik/events{/privacy}", "received_events_url": "https://api.github.com/users/ropottnik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-29T15:18:12Z", "updated_at": "2019-02-28T15:47:55Z", "closed_at": "2019-02-28T15:47:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider the following dataclass:\r\n```python\r\nfrom typing import List\r\n\r\nfrom dataclasses import dataclass, field\r\nfrom dataclasses_json import dataclass_json\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass Bar:\r\n    foos: List[str] = field(default_factory=list)\r\n```\r\n\r\nusing `Bar.schema().dumps(Bar())` gives me the following error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"dataclass_test.py\", line 20, in <module>\r\n    Bar.schema().dumps(Bar())\r\n  File \"~/.venv/venv/lib/python3.6/site-packages/dataclasses_json/api.py\", line 100, in schema\r\n    infer_missing)\r\n  File \"~/.venv/venv/lib/python3.6/site-packages/dataclasses_json/mm.py\", line 90, in _make_default_fields\r\n    cls)\r\n  File \"~/.venv/venv/lib/python3.6/site-packages/dataclasses_json/mm.py\", line 105, in _make_default_field\r\n    type_arg = type_.___args__[0]\r\nAttributeError: type object 'List' has no attribute '___args__'\r\n\r\nProcess finished with exit code 1\r\n```\r\n\r\nHowever, it works when the type of `foos` is a `List` of another `dataclass_json`, like this:\r\n```python\r\n@dataclass_json\r\n@dataclass\r\nclass Foo:\r\n    one: str\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass Bar:\r\n    foos: List[Foo] = field(default_factory=list)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(Bar.schema().dumps(Bar()))\r\n```\r\n\r\nSo something seems to be off with types and field initializers\r\n\r\nI am using `dataclasses-json==0.2.1`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/59", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/59/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/59/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/59", "id": 402607373, "node_id": "MDU6SXNzdWU0MDI2MDczNzM=", "number": 59, "title": "Support json to dictionary", "user": {"login": "PeterLaudel", "id": 38426989, "node_id": "MDQ6VXNlcjM4NDI2OTg5", "avatar_url": "https://avatars1.githubusercontent.com/u/38426989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterLaudel", "html_url": "https://github.com/PeterLaudel", "followers_url": "https://api.github.com/users/PeterLaudel/followers", "following_url": "https://api.github.com/users/PeterLaudel/following{/other_user}", "gists_url": "https://api.github.com/users/PeterLaudel/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterLaudel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterLaudel/subscriptions", "organizations_url": "https://api.github.com/users/PeterLaudel/orgs", "repos_url": "https://api.github.com/users/PeterLaudel/repos", "events_url": "https://api.github.com/users/PeterLaudel/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterLaudel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-24T09:10:05Z", "updated_at": "2019-02-20T13:56:04Z", "closed_at": "2019-02-20T13:56:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey i really like your dataclass json package. Currently I like to have the feature for remember a json to an dictonary and backwards. An example:\r\n\r\n\r\n```\r\nMinionId = NewType('MinionId', int)\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass Minion:\r\n    minion_id: MinionId\r\n    name: str\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass Datas:\r\n    minions: Dict[MinionId, Minion]\r\n    some_value: int\r\n    some_name: int\r\n```\r\n\r\nFrom the json or to the json:\r\n\r\n```\r\n{\r\n    \"minions\": [\r\n        {\r\n            \"minion_id\": 1,\r\n            \"name\": \"minion1\"\r\n        },\r\n        {\r\n            \"minion_id\": 2,\r\n            \"name\": \"minion2\"\r\n        }\r\n    ],\r\n    \"some_value\": int,\r\n    \"some_name\": int\r\n}\r\n```\r\n\r\nMaybe there is already an solution to fix this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/58", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/58/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/58/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/58", "id": 401951583, "node_id": "MDU6SXNzdWU0MDE5NTE1ODM=", "number": 58, "title": "Support for dataclass fields of type Optional[List[X]]", "user": {"login": "kylegentle", "id": 26047992, "node_id": "MDQ6VXNlcjI2MDQ3OTky", "avatar_url": "https://avatars2.githubusercontent.com/u/26047992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylegentle", "html_url": "https://github.com/kylegentle", "followers_url": "https://api.github.com/users/kylegentle/followers", "following_url": "https://api.github.com/users/kylegentle/following{/other_user}", "gists_url": "https://api.github.com/users/kylegentle/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylegentle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylegentle/subscriptions", "organizations_url": "https://api.github.com/users/kylegentle/orgs", "repos_url": "https://api.github.com/users/kylegentle/repos", "events_url": "https://api.github.com/users/kylegentle/events{/privacy}", "received_events_url": "https://api.github.com/users/kylegentle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-22T21:00:24Z", "updated_at": "2019-02-28T15:54:45Z", "closed_at": "2019-02-28T15:54:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Summary\r\nThe library currently breaks for dataclasses with fields of type Optional[List[X]], returning the following error:\r\n```Traceback (most recent call last):\r\n  File \"dcj_bug/ex.py\", line 66, in <module>\r\n    Adult.schema().loads(test3, many=True)  # Fail\r\n  File \"<home_path>/.cache/pypoetry/virtualenvs/dcj-bug-py3.7/lib/python3.7/site-packages/dataclasses_json/api.py\", line 100, in schema\r\n    infer_missing)\r\n  File \"<home_path>/.cache/pypoetry/virtualenvs/dcj-bug-py3.7/lib/python3.7/site-packages/dataclasses_json/mm.py\", line 86, in _make_default_fields\r\n    cls)\r\n  File \"<home_path>/.cache/pypoetry/virtualenvs/dcj-bug-py3.7/lib/python3.7/site-packages/dataclasses_json/mm.py\", line 103, in _make_default_field\r\n    cons = _type_to_cons[cons_type]\r\nKeyError: typing.List[__main__.Child]\r\n```\r\n\r\nI've attached some code below that demonstrates the issue.\r\n\r\nPlease let me know if there's any information or assistance I can provide; I dug into the code a bit in mm.py where it's breaking, but wasn't able to figure out what the correct logic should be in mm._make_default_field.\r\n\r\n### Example\r\n```python\r\nimport json\r\n\r\nfrom dataclasses import dataclass\r\nfrom typing import Optional, List\r\n\r\nfrom dataclasses_json import DataClassJsonMixin\r\n\r\n\r\n@dataclass\r\nclass Child(DataClassJsonMixin):\r\n    name: str\r\n\r\n\r\n@dataclass\r\nclass Adult(DataClassJsonMixin):\r\n    name: str\r\n    children: Optional[List[Child]] = None\r\n\r\n\r\ntest1 = \"\"\"\r\n{\r\n    \"name\": \"Foo\"\r\n\r\n}\r\n\"\"\".strip()\r\n\r\ntest2 = \"\"\"\r\n{\r\n    \"name\": \"Bar\",\r\n    \"children\": [\r\n        {\r\n            \"name\": \"Baz\"\r\n        },\r\n        {\r\n            \"name\": \"Bat\"\r\n        }\r\n    ]\r\n}\r\n\"\"\".strip()\r\n\r\ntest3 = \"\"\"\r\n[\r\n    {\r\n        \"name\": \"Foo\"\r\n    },\r\n    {\r\n        \"name\": \"Bar\",\r\n        \"children\": [\r\n            {\r\n                \"name\": \"Baz\"\r\n            },\r\n            {\r\n                \"name\": \"Bat\"\r\n            }\r\n        ]\r\n    }\r\n]\r\n\"\"\".strip()\r\n\r\ntest4 = json.loads(test3)\r\n\r\nAdult.from_json(test1)  # OK\r\nAdult.from_json(test2)  # OK\r\n\r\n# Adult.from_json(test3)  # Breaks\r\nAdult.schema().loads(test3, many=True)  # Breaks\r\n# Adult.schema().load(test4, many=True)  # Breaks\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/57", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/57/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/57/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/57", "id": 401125852, "node_id": "MDU6SXNzdWU0MDExMjU4NTI=", "number": 57, "title": "Invalid input type", "user": {"login": "rakanalh", "id": 195829, "node_id": "MDQ6VXNlcjE5NTgyOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/195829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakanalh", "html_url": "https://github.com/rakanalh", "followers_url": "https://api.github.com/users/rakanalh/followers", "following_url": "https://api.github.com/users/rakanalh/following{/other_user}", "gists_url": "https://api.github.com/users/rakanalh/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakanalh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakanalh/subscriptions", "organizations_url": "https://api.github.com/users/rakanalh/orgs", "repos_url": "https://api.github.com/users/rakanalh/repos", "events_url": "https://api.github.com/users/rakanalh/events{/privacy}", "received_events_url": "https://api.github.com/users/rakanalh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-20T18:34:18Z", "updated_at": "2019-03-01T08:32:45Z", "closed_at": "2019-02-28T15:47:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nThe title shows the error i've been having with this library. I've put together a scenario which reproduces the problem:\r\n\r\n```\r\nfrom dataclasses import dataclass\r\nfrom typing import List\r\n\r\nfrom dataclasses_json import dataclass_json\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass Relative:\r\n    name: str\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass Person:\r\n    name: str\r\n    relatives: List[Relative]\r\n\r\n\r\npeople_json = '[{\"name\": \"lidatong\", \"relatives\": [{\"name\": \"relative 1\"}, {\"name\": \"relative 2\"}]}]'\r\nPerson.schema().loads(people_json, many=True)\r\n\r\n```\r\n\r\nThe stacktrace i get is:\r\n```\r\nTraceback (most recent call last):\r\n  File \"main.py\", line 20, in <module>\r\n    Person.schema().loads(people_json, many=True)\r\n  File \"/home/rakan/.pyenv/versions/proj/lib/python3.7/site-packages/marshmallow/schema.py\", line 724, in loads\r\n    return self.load(data, many=many, partial=partial, unknown=unknown)\r\n  File \"/home/rakan/.pyenv/versions/proj/lib/python3.7/site-packages/marshmallow/schema.py\", line 695, in load\r\n    postprocess=True,\r\n  File \"/home/rakan/.pyenv/versions/proj/lib/python3.7/site-packages/marshmallow/schema.py\", line 857, in _do_load\r\n    raise exc\r\nmarshmallow.exceptions.ValidationError: {0: {'relatives': {'_schema': ['Invalid input type.']}}}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/56", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/56/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/56/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/56", "id": 395766906, "node_id": "MDU6SXNzdWUzOTU3NjY5MDY=", "number": 56, "title": "Allow adding custom encoder for certain data types", "user": {"login": "smartnose", "id": 7807664, "node_id": "MDQ6VXNlcjc4MDc2NjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/7807664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smartnose", "html_url": "https://github.com/smartnose", "followers_url": "https://api.github.com/users/smartnose/followers", "following_url": "https://api.github.com/users/smartnose/following{/other_user}", "gists_url": "https://api.github.com/users/smartnose/gists{/gist_id}", "starred_url": "https://api.github.com/users/smartnose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smartnose/subscriptions", "organizations_url": "https://api.github.com/users/smartnose/orgs", "repos_url": "https://api.github.com/users/smartnose/repos", "events_url": "https://api.github.com/users/smartnose/events{/privacy}", "received_events_url": "https://api.github.com/users/smartnose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-03T23:58:27Z", "updated_at": "2019-01-09T03:33:02Z", "closed_at": "2019-01-09T03:33:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to add custom support for a few data types (such as `date`). There doesn't seem to be a clean extension mechanism in `dataclasses-json`. I see that `_ExtendedEncoder` here supports a few types:\r\nhttps://github.com/lidatong/dataclasses-json/blob/master/dataclasses_json/core.py#L17-L31\r\n\r\nHowever, we would like to serialize `date` instead of `datetime`. Also, I would like to customize its format.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/52", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/52/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/52/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/52", "id": 388472929, "node_id": "MDU6SXNzdWUzODg0NzI5Mjk=", "number": 52, "title": "datetime.datetime.fromisoformat Compatibility", "user": {"login": "HappyTreeBeard", "id": 34220817, "node_id": "MDQ6VXNlcjM0MjIwODE3", "avatar_url": "https://avatars3.githubusercontent.com/u/34220817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HappyTreeBeard", "html_url": "https://github.com/HappyTreeBeard", "followers_url": "https://api.github.com/users/HappyTreeBeard/followers", "following_url": "https://api.github.com/users/HappyTreeBeard/following{/other_user}", "gists_url": "https://api.github.com/users/HappyTreeBeard/gists{/gist_id}", "starred_url": "https://api.github.com/users/HappyTreeBeard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HappyTreeBeard/subscriptions", "organizations_url": "https://api.github.com/users/HappyTreeBeard/orgs", "repos_url": "https://api.github.com/users/HappyTreeBeard/repos", "events_url": "https://api.github.com/users/HappyTreeBeard/events{/privacy}", "received_events_url": "https://api.github.com/users/HappyTreeBeard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-07T01:52:33Z", "updated_at": "2019-02-28T16:03:30Z", "closed_at": "2019-02-28T16:03:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The function ```datetime.datetime.fromisoformat(str)``` is [new to Python 3.7](https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat) and ```setup.py``` states ``` python_requires=\">=3.6\"``` The [backports-datetime-fromisoformat](https://pypi.org/project/backports-datetime-fromisoformat/) package on pypi should be added to the package requirements if Python 3.6 is to be supported.\r\n\r\n It looks like the ```fromisoformat``` dependency was added to resolve the [\"0.1.0 datetime handling does not conform to iso 8601\"](https://github.com/lidatong/dataclasses-json/issues/40) ticket. \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/49", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/49/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/49/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/49", "id": 387123932, "node_id": "MDU6SXNzdWUzODcxMjM5MzI=", "number": 49, "title": "Encode default values from dataclass", "user": {"login": "HappyTreeBeard", "id": 34220817, "node_id": "MDQ6VXNlcjM0MjIwODE3", "avatar_url": "https://avatars3.githubusercontent.com/u/34220817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HappyTreeBeard", "html_url": "https://github.com/HappyTreeBeard", "followers_url": "https://api.github.com/users/HappyTreeBeard/followers", "following_url": "https://api.github.com/users/HappyTreeBeard/following{/other_user}", "gists_url": "https://api.github.com/users/HappyTreeBeard/gists{/gist_id}", "starred_url": "https://api.github.com/users/HappyTreeBeard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HappyTreeBeard/subscriptions", "organizations_url": "https://api.github.com/users/HappyTreeBeard/orgs", "repos_url": "https://api.github.com/users/HappyTreeBeard/repos", "events_url": "https://api.github.com/users/HappyTreeBeard/events{/privacy}", "received_events_url": "https://api.github.com/users/HappyTreeBeard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-04T05:13:57Z", "updated_at": "2018-12-06T03:15:22Z", "closed_at": "2018-12-06T03:15:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The [README.md discusses](https://github.com/HappyTreeBeard/dataclasses-json/blob/master/README.md#handle-missing-or-optional-field-values-when-decoding) using default values when decoding JSON but can a dataclass object encode to JSON using default values set by the dataclass constructor? \r\n\r\n```python\r\n\r\nfrom dataclasses import dataclass\r\nfrom dataclasses_json import dataclass_json\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass Person:\r\n    name: str = 'x'\r\n\r\n# Encoding to JSON using default name value\r\nPerson().to_json()  # '{\"name\": \"x\"}'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/48", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/48/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/48/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/48", "id": 384841635, "node_id": "MDU6SXNzdWUzODQ4NDE2MzU=", "number": 48, "title": "License", "user": {"login": "dardevelin", "id": 1424739, "node_id": "MDQ6VXNlcjE0MjQ3Mzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1424739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dardevelin", "html_url": "https://github.com/dardevelin", "followers_url": "https://api.github.com/users/dardevelin/followers", "following_url": "https://api.github.com/users/dardevelin/following{/other_user}", "gists_url": "https://api.github.com/users/dardevelin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dardevelin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dardevelin/subscriptions", "organizations_url": "https://api.github.com/users/dardevelin/orgs", "repos_url": "https://api.github.com/users/dardevelin/repos", "events_url": "https://api.github.com/users/dardevelin/events{/privacy}", "received_events_url": "https://api.github.com/users/dardevelin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-11-27T15:11:18Z", "updated_at": "2019-06-03T15:03:20Z", "closed_at": "2018-12-04T14:16:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi I saw this package in PIP but there is no license listed. Would you be kind enough to add one ? Maybe MIT ? Thanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/47", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/47/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/47/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/47", "id": 383329889, "node_id": "MDU6SXNzdWUzODMzMjk4ODk=", "number": 47, "title": "Support dashes in JSON keys", "user": {"login": "ssheftel", "id": 2941263, "node_id": "MDQ6VXNlcjI5NDEyNjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2941263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssheftel", "html_url": "https://github.com/ssheftel", "followers_url": "https://api.github.com/users/ssheftel/followers", "following_url": "https://api.github.com/users/ssheftel/following{/other_user}", "gists_url": "https://api.github.com/users/ssheftel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssheftel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssheftel/subscriptions", "organizations_url": "https://api.github.com/users/ssheftel/orgs", "repos_url": "https://api.github.com/users/ssheftel/repos", "events_url": "https://api.github.com/users/ssheftel/events{/privacy}", "received_events_url": "https://api.github.com/users/ssheftel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 909368696, "node_id": "MDU6TGFiZWw5MDkzNjg2OTY=", "url": "https://api.github.com/repos/lidatong/dataclasses-json/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-21T23:44:50Z", "updated_at": "2019-09-28T14:29:01Z", "closed_at": "2019-09-28T14:29:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As far as i can tell there is no way to handle json keys with dahes in the name. \r\n\r\n\r\n```\r\nfrom dataclasses import dataclass, field\r\nfrom dataclasses_json import DataClassJsonMixin, dataclass_json\r\nfrom marshmallow import fields\r\n\r\n\r\n@dataclass\r\nclass MyClass(DataClassJsonMixin):\r\n    some_field: str = field(metadata={'dataclasses_json': {\r\n        'mm_field': fields.String(attribute='some-field'),\r\n        'encoder': str,\r\n        'decoder': str\r\n    }})\r\n\r\nprint(MyClass.from_json('{\"some-field\": \"hello world\"}')) # KeyError: 'some_field'\r\n```\r\n\r\napologies if i messed something in the docs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/45", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/45/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/45/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/45", "id": 382554128, "node_id": "MDU6SXNzdWUzODI1NTQxMjg=", "number": 45, "title": "Troubble with boolean fields", "user": {"login": "moreklatring", "id": 37309614, "node_id": "MDQ6VXNlcjM3MzA5NjE0", "avatar_url": "https://avatars0.githubusercontent.com/u/37309614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moreklatring", "html_url": "https://github.com/moreklatring", "followers_url": "https://api.github.com/users/moreklatring/followers", "following_url": "https://api.github.com/users/moreklatring/following{/other_user}", "gists_url": "https://api.github.com/users/moreklatring/gists{/gist_id}", "starred_url": "https://api.github.com/users/moreklatring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moreklatring/subscriptions", "organizations_url": "https://api.github.com/users/moreklatring/orgs", "repos_url": "https://api.github.com/users/moreklatring/repos", "events_url": "https://api.github.com/users/moreklatring/events{/privacy}", "received_events_url": "https://api.github.com/users/moreklatring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-20T08:39:48Z", "updated_at": "2019-01-09T03:05:58Z", "closed_at": "2019-01-09T03:05:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to have some fields excluded, so I am using call  b) below. But it throws an exception for the boolean field. Is this a bug? \r\n\r\n`@dataclass_json\r\n@dataclass\r\nclass Foo:\r\n    bar: bool = False\r\n    zoo: str = \"Exclude me\"\r\n\r\nd = Foo()\r\n\r\n# a)\r\nprint(d.to_json())\r\n\r\n# b)\r\nprint(Foo.schema(exclude=[\"zoo\"]).dumps(d))`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/42", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/42/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/42/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/42", "id": 381877905, "node_id": "MDU6SXNzdWUzODE4Nzc5MDU=", "number": 42, "title": "user-supplied overrides", "user": {"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-17T16:28:16Z", "updated_at": "2018-11-17T16:28:54Z", "closed_at": "2018-11-17T16:28:54Z", "author_association": "OWNER", "active_lock_reason": null, "body": "both #40 #41 raise the usecase of user-supplied overrides.\r\n\r\n- class level overrides: parameterize decorator\r\n- field level overrides: `metadata` field", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/40", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/40/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/40/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/40", "id": 380688576, "node_id": "MDU6SXNzdWUzODA2ODg1NzY=", "number": 40, "title": "0.1.0 datetime handling does not conform to iso 8601", "user": {"login": "korobkov-mindbox", "id": 21083314, "node_id": "MDQ6VXNlcjIxMDgzMzE0", "avatar_url": "https://avatars0.githubusercontent.com/u/21083314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/korobkov-mindbox", "html_url": "https://github.com/korobkov-mindbox", "followers_url": "https://api.github.com/users/korobkov-mindbox/followers", "following_url": "https://api.github.com/users/korobkov-mindbox/following{/other_user}", "gists_url": "https://api.github.com/users/korobkov-mindbox/gists{/gist_id}", "starred_url": "https://api.github.com/users/korobkov-mindbox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/korobkov-mindbox/subscriptions", "organizations_url": "https://api.github.com/users/korobkov-mindbox/orgs", "repos_url": "https://api.github.com/users/korobkov-mindbox/repos", "events_url": "https://api.github.com/users/korobkov-mindbox/events{/privacy}", "received_events_url": "https://api.github.com/users/korobkov-mindbox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-14T13:04:16Z", "updated_at": "2018-11-19T11:33:00Z", "closed_at": "2018-11-18T04:19:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "In JSON serialization [it is generally considered standard](https://stackoverflow.com/questions/10286204/the-right-json-date-format) to use string-like datetime format. For example, .NET Newtonsoft.JSON serializes datetime values as strings: `{\"Now\":\"2018-11-14T15:47:11.881469+03:00\"}`, same as javascript's JSON library.\r\n\r\nPrior to 0.1.0 release it was possible to write our own __post_init__ method to decode such datetime fields:\r\n```\r\n@dataclass_json\r\n@dataclass(frozen=True)\r\nclass ExampleObject:\r\n    SomeDate: datetime\r\n\r\n    def __post_init__(self):\r\n        current_value = self.__dict__['SomeDate']\r\n        if isinstance(current_value, str):\r\n            self.__dict__['SomeDate'] = dateutil.parser.parse(current_value)\r\n```\r\n\r\nRelease 0.1.0 breaks this behaviour and generally makes it impossible to work with commonly-accepted string-like rfc/iso datetime formats by always forcing datetime representation to be int-like due to [this code](https://github.com/lidatong/dataclasses-json/commit/36aca833d070d10c36f6743e1d8d38f67f46bb1b#diff-c9f66dd085ddaa057e97df6fdb0eb6c3R92).\r\n```\r\nTypeError : an integer is required (got type str)\r\nat\r\n...\r\nFile \"api.py\", line 65, in from_json\r\nreturn _decode_dataclass(cls, init_kwargs, infer_missing)\r\nFile \"core.py\", line 69, in _decode_dataclass\r\ninfer_missing)\r\nFile \"core.py\", line 84, in _decode_dataclass\r\ndt = datetime.fromtimestamp(field_value, tz=tz)\r\n```\r\n\r\nAs of now we are forced to use 0.0.25 release, however it would be of great help if we could rely on dataclasses-json to natively handle datetime representations without our own hacks.\r\n\r\nBtw, using string-like representation also has inherent benefit of allowing you to store timezone info in the serialized value, ensuring that encoding->decoding->encoding operation is strictly identity (note that d->e->d still will not be strict identity because serialization format may change, but that is okay as you still keep all timezone-related information)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/32", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/32/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/32/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/32", "id": 377770736, "node_id": "MDU6SXNzdWUzNzc3NzA3MzY=", "number": 32, "title": "Add a `many` option to `DataClassJsonMixin.from_json`", "user": {"login": "Peilonrayz", "id": 5623093, "node_id": "MDQ6VXNlcjU2MjMwOTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5623093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Peilonrayz", "html_url": "https://github.com/Peilonrayz", "followers_url": "https://api.github.com/users/Peilonrayz/followers", "following_url": "https://api.github.com/users/Peilonrayz/following{/other_user}", "gists_url": "https://api.github.com/users/Peilonrayz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Peilonrayz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Peilonrayz/subscriptions", "organizations_url": "https://api.github.com/users/Peilonrayz/orgs", "repos_url": "https://api.github.com/users/Peilonrayz/repos", "events_url": "https://api.github.com/users/Peilonrayz/events{/privacy}", "received_events_url": "https://api.github.com/users/Peilonrayz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-06T09:58:58Z", "updated_at": "2018-11-10T20:06:57Z", "closed_at": "2018-11-10T20:06:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently the only way to get a `List[T]` with your code is with the example:\r\n\r\n>     Person.schema().loads(people_json,` many=True)\r\n\r\nI however can't get this to work with `infer_missing` when my REST endpoints elect to remove the key on optional return values. Since this would change the return type of `from_json` from `A` to `Union[A, List[A]]`, you may want to make a function `from_jsons` instead.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/29", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/29/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/29/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/29", "id": 377164547, "node_id": "MDU6SXNzdWUzNzcxNjQ1NDc=", "number": 29, "title": "coerce_keys option", "user": {"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-04T15:38:37Z", "updated_at": "2019-07-07T18:31:16Z", "closed_at": "2018-11-04T17:08:54Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The [py-to-json conversion table](https://docs.python.org/3/library/json.html#json.JSONEncoder) specifies that dict keys must be of a basic type: `str`, `int`, `float`, `bool` or `None`\r\n\r\nHowever in practical usage, it's quite convenient to have objects as dictionary keys (especially, in lieu of data classes, leveraging the `frozen=True` option). Having the basic type restriction on keys makes encoding unnecessarily boilerplate-y.\r\n\r\nCreating this issue for a potential `coerce_keys` kwarg to add to the public api. This gives the user the option of supplying a function to coerce non-basic type keys into a `str`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/24", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/24/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/24/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/24", "id": 372283639, "node_id": "MDU6SXNzdWUzNzIyODM2Mzk=", "number": 24, "title": "Support for default_factory option", "user": {"login": "yuuki0xff", "id": 7306559, "node_id": "MDQ6VXNlcjczMDY1NTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/7306559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuuki0xff", "html_url": "https://github.com/yuuki0xff", "followers_url": "https://api.github.com/users/yuuki0xff/followers", "following_url": "https://api.github.com/users/yuuki0xff/following{/other_user}", "gists_url": "https://api.github.com/users/yuuki0xff/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuuki0xff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuuki0xff/subscriptions", "organizations_url": "https://api.github.com/users/yuuki0xff/orgs", "repos_url": "https://api.github.com/users/yuuki0xff/repos", "events_url": "https://api.github.com/users/yuuki0xff/events{/privacy}", "received_events_url": "https://api.github.com/users/yuuki0xff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-21T06:14:45Z", "updated_at": "2019-10-11T13:25:59Z", "closed_at": "2018-11-04T17:05:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, `from_json()` method can not decode a dataclass that containing fields with [`default_factory` option](https://docs.python.org/3/library/dataclasses.html#dataclasses.field).  Could you fix this problem?\r\n\r\n```\r\n$ docker run -it python:3.7.0 bash\r\nroot@910ab65b7f15:/# pip install -U ipython\r\nroot@910ab65b7f15:/# pip install git+https://github.com/lidatong/dataclasses-json\r\nroot@910ab65b7f15:/# ipython\r\nPython 3.7.0 (default, Oct 16 2018, 07:10:55)\r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 7.0.1 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: from dataclasses import dataclass, field\r\n   ...: from dataclasses_json import dataclass_json\r\n   ...: from typing import List\r\n   ...: @dataclass_json\r\n   ...: @dataclass\r\n   ...: class Person:\r\n   ...:     name: str\r\n   ...:     friends: List[str] = field(default_factory=list)\r\n   ...:\r\n\r\nIn [2]: Person(name='foo')\r\nOut[2]: Person(name='foo', friends=[])\r\n\r\nIn [3]: Person.from_json('{\"name\": \"foo\"}')\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-3-2d41a7d5bbe5> in <module>\r\n----> 1 Person.from_json('{\"name\": \"foo\"}')\r\n\r\n/usr/local/lib/python3.7/site-packages/dataclasses_json/api.py in from_json(cls, s, encoding, parse_float, parse_int, parse_constant, infer_missing, **kw)\r\n     60                                  parse_constant=parse_constant,\r\n     61                                  **kw)\r\n---> 62         return _decode_dataclass(cls, init_kwargs, infer_missing)\r\n     63\r\n     64     @classmethod\r\n\r\n/usr/local/lib/python3.7/site-packages/dataclasses_json/core.py in _decode_dataclass(cls, kvs, infer_missing)\r\n     24     init_kwargs = {}\r\n     25     for field in fields(cls):\r\n---> 26         field_value = kvs[field.name]\r\n     27         if field_value is None and not _is_optional(field.type):\r\n     28             warning = (f\"value of non-optional type {field.name} detected \"\r\n\r\nKeyError: 'friends'\r\n\r\nIn [4]:\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/23", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/23/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/23/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/23", "id": 372037081, "node_id": "MDU6SXNzdWUzNzIwMzcwODE=", "number": 23, "title": "\"Type[xxx]\" has no attribute \"from_json\"", "user": {"login": "gjcarneiro", "id": 2197096, "node_id": "MDQ6VXNlcjIxOTcwOTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2197096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gjcarneiro", "html_url": "https://github.com/gjcarneiro", "followers_url": "https://api.github.com/users/gjcarneiro/followers", "following_url": "https://api.github.com/users/gjcarneiro/following{/other_user}", "gists_url": "https://api.github.com/users/gjcarneiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/gjcarneiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gjcarneiro/subscriptions", "organizations_url": "https://api.github.com/users/gjcarneiro/orgs", "repos_url": "https://api.github.com/users/gjcarneiro/repos", "events_url": "https://api.github.com/users/gjcarneiro/events{/privacy}", "received_events_url": "https://api.github.com/users/gjcarneiro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-19T16:53:51Z", "updated_at": "2018-11-04T17:08:39Z", "closed_at": "2018-11-04T17:08:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "One of the downsides of @dataclass_json is that mypy doesn't know about the extra `from_json` and `to_json` methods.  Any chance this can be supported, somehow?\r\n\r\nThe docs seem to suggest there is a plugin system in mypy, albeit experimental: https://mypy.readthedocs.io/en/latest/extending_mypy.html#extending-mypy-using-plugins\r\n\r\n```\r\n@dataclass_json\r\n@dataclass\r\nclass BulkApmm:\r\n    id: str\r\n    frequency_ms: int\r\n    pmms: List[Apmm]\r\n\r\n...\r\n\r\n    bulk_apmm = BulkApmm.from_json(await request.text())\r\n\r\nbetslipdisp/views.py:70: error: \"Type[BulkApmm]\" has no attribute \"from_json\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/22", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/22/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/22/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/22", "id": 371617162, "node_id": "MDU6SXNzdWUzNzE2MTcxNjI=", "number": 22, "title": "Does not work with some class fields", "user": {"login": "afonichev", "id": 15726637, "node_id": "MDQ6VXNlcjE1NzI2NjM3", "avatar_url": "https://avatars1.githubusercontent.com/u/15726637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afonichev", "html_url": "https://github.com/afonichev", "followers_url": "https://api.github.com/users/afonichev/followers", "following_url": "https://api.github.com/users/afonichev/following{/other_user}", "gists_url": "https://api.github.com/users/afonichev/gists{/gist_id}", "starred_url": "https://api.github.com/users/afonichev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afonichev/subscriptions", "organizations_url": "https://api.github.com/users/afonichev/orgs", "repos_url": "https://api.github.com/users/afonichev/repos", "events_url": "https://api.github.com/users/afonichev/events{/privacy}", "received_events_url": "https://api.github.com/users/afonichev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-18T16:41:41Z", "updated_at": "2018-12-31T14:49:21Z", "closed_at": "2018-11-04T17:02:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "### 1.json\r\n\r\n```json\r\n{\r\n    \"kind\": \"youtube#searchListResponse\",\r\n    \"etag\": \"\\\"XI7nbFXulYBIpL0ayR_gDh3eu1k/KWWeP6ixot61qGYewP3pbjpukmk\\\"\",\r\n    \"nextPageToken\": \"CDIQAA\",\r\n    \"regionCode\": \"RU\",\r\n    \"pageInfo\": {\r\n        \"totalResults\": 191659,\r\n        \"resultsPerPage\": 50\r\n    },\r\n    \"items\": [\r\n        {\r\n            \"kind\": \"youtube#searchResult\",\r\n            \"etag\": \"\\\"XI7nbFXulYBIpL0ayR_gDh3eu1k/OKEpMDlF7p6035MRuZvZZNd4fQc\\\"\",\r\n            \"id\": {\r\n                \"kind\": \"youtube#video\",\r\n                \"videoId\": \"xTpwkSB-w4Q\"\r\n            },\r\n            \"snippet\": {\r\n                \"publishedAt\": \"2018-10-17T14:50:39.000Z\",\r\n                \"channelId\": \"UCIYF1orTg4nDvv29ORoKXyA\",\r\n                \"title\": \"INSIDE: \\u041a\\u0430\\u043a\\u0430\\u044f \\u043a\\u0440\\u0438\\u043f\\u0442\\u043e\\u0432\\u0430\\u043b\\u044e\\u0442\\u0430 \\u0441\\u0434\\u0435\\u043b\\u0430\\u0435\\u0442 \\u0438\\u043a\\u0441\\u044b \\u043a Bitcoin? l Crypto Miner \\u041f\\u0420\\u0418\\u0425\\u0412\\u0410\\u0422\\u0438\\u0437\\u0438\\u0440\\u043e\\u0432\\u0430\\u043b\\u0438) l \\u041e\\u0442\\u0432\\u0435\\u0442 \\u0445\\u0435\\u0439\\u0442\\u0435\\u0440\\u0430\\u043c\",\r\n                \"description\": \"INSIDE: \\u041a\\u0430\\u043a\\u0430\\u044f \\u043a\\u0440\\u0438\\u043f\\u0442\\u043e\\u0432\\u0430\\u043b\\u044e\\u0442\\u0430 \\u0441\\u0434\\u0435\\u043b\\u0430\\u0435\\u0442 \\u0438\\u043a\\u0441\\u044b \\u043a Bitcoin? l Crypto Miner \\u041f\\u0420\\u0418\\u0425\\u0412\\u0410\\u0422\\u0438\\u0437\\u0438\\u0440\\u043e\\u0432\\u0430\\u043b\\u0438) l \\u041e\\u0442\\u0432\\u0435\\u0442 \\u0445\\u0435\\u0439\\u0442\\u0435\\u0440\\u0430\\u043c WAX https://coinmarketcap.com/currenc...\",\r\n                \"thumbnails\": {\r\n                    \"default\": {\r\n                        \"url\": \"https://i.ytimg.com/vi/xTpwkSB-w4Q/default.jpg\",\r\n                        \"width\": 120,\r\n                        \"height\": 90\r\n                    },\r\n                    \"medium\": {\r\n                        \"url\": \"https://i.ytimg.com/vi/xTpwkSB-w4Q/mqdefault.jpg\",\r\n                        \"width\": 320,\r\n                        \"height\": 180\r\n                    },\r\n                    \"high\": {\r\n                        \"url\": \"https://i.ytimg.com/vi/xTpwkSB-w4Q/hqdefault.jpg\",\r\n                        \"width\": 480,\r\n                        \"height\": 360\r\n                    }\r\n                },\r\n                \"channelTitle\": \"\\u0412\\u043b\\u0430\\u0434\\u0438\\u0441\\u043b\\u0430\\u0432 \\u0421\\u0442\\u0435\\u0448\\u0435\\u043d\\u043a\\u043e \\u043f\\u0440\\u043e \\u041a\\u0440\\u0438\\u043f\\u0442\\u043e\\u0432\\u0430\\u043b\\u044e\\u0442\\u044b \\u0438 \\u041c\\u0430\\u0439\\u043d\\u0438\\u043d\\u0433\",\r\n                \"liveBroadcastContent\": \"none\"\r\n            }\r\n        },\r\n        {\r\n            \"kind\": \"youtube#searchResult\",\r\n            \"etag\": \"\\\"XI7nbFXulYBIpL0ayR_gDh3eu1k/gig54JPD7QLzEONpAED1doF4dSU\\\"\",\r\n            \"id\": {\r\n                \"kind\": \"youtube#video\",\r\n                \"videoId\": \"tc1-V4jh4DE\"\r\n            },\r\n            \"snippet\": {\r\n                \"publishedAt\": \"2017-03-17T17:11:32.000Z\",\r\n                \"channelId\": \"UCjE90zX9e_WukGg4BmDcKTg\",\r\n                \"title\": \"\\u041a\\u0440\\u0438\\u043f\\u0442\\u043e\\u0432\\u0430\\u043b\\u044e\\u0442\\u0430, \\u0447\\u0442\\u043e \\u044d\\u0442\\u043e? \\u0414\\u043e\\u0445\\u043e\\u0434\\u0447\\u0438\\u0432\\u043e \\u0438 \\u044f\\u0441\\u043d\\u043e. \\u0411\\u0443\\u0434\\u0443\\u0449\\u0435\\u0435 blockchain, Bitcoin, Namecoin, Zerocash...\",\r\n                \"description\": \"\\u0427\\u0442\\u043e \\u0442\\u0430\\u043a\\u043e\\u0435 \\u043a\\u0440\\u0438\\u043f\\u0442\\u043e\\u0432\\u0430\\u043b\\u044e\\u0442\\u0430, blockchain \\u0438 \\u0438\\u0445 \\u0431\\u0443\\u0434\\u0443\\u0449\\u0435\\u0435. \\u0414\\u043e\\u0445\\u043e\\u0434\\u0447\\u0438\\u0432\\u043e \\u0438 \\u044f\\u0441\\u043d\\u043e. Bitcoin, Litecoin, Namecoin, Ethereum, Zerocash...\",\r\n                \"thumbnails\": {\r\n                    \"default\": {\r\n                        \"url\": \"https://i.ytimg.com/vi/tc1-V4jh4DE/default.jpg\",\r\n                        \"width\": 120,\r\n                        \"height\": 90\r\n                    },\r\n                    \"medium\": {\r\n                        \"url\": \"https://i.ytimg.com/vi/tc1-V4jh4DE/mqdefault.jpg\",\r\n                        \"width\": 320,\r\n                        \"height\": 180\r\n                    },\r\n                    \"high\": {\r\n                        \"url\": \"https://i.ytimg.com/vi/tc1-V4jh4DE/hqdefault.jpg\",\r\n                        \"width\": 480,\r\n                        \"height\": 360\r\n                    }\r\n                },\r\n                \"channelTitle\": \"SunandreaS\",\r\n                \"liveBroadcastContent\": \"none\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n### test.py\r\n\r\n```python\r\nimport datetime\r\n\r\nfrom dataclasses import dataclass\r\nfrom typing import List\r\nfrom dataclasses_json import dataclass_json\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass YouTubeSearchListItemSnippedThumbnailsThumbnail:\r\n    url: str = ''\r\n    width: int = 0\r\n    height: int = 0\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass YouTubeSearchListItemSnippedThumbnails:\r\n    default: YouTubeSearchListItemSnippedThumbnailsThumbnail = YouTubeSearchListItemSnippedThumbnailsThumbnail\r\n    medium: YouTubeSearchListItemSnippedThumbnailsThumbnail = YouTubeSearchListItemSnippedThumbnailsThumbnail\r\n    high: YouTubeSearchListItemSnippedThumbnailsThumbnail = YouTubeSearchListItemSnippedThumbnailsThumbnail\r\n    standard: YouTubeSearchListItemSnippedThumbnailsThumbnail = YouTubeSearchListItemSnippedThumbnailsThumbnail\r\n    maxres: YouTubeSearchListItemSnippedThumbnailsThumbnail = YouTubeSearchListItemSnippedThumbnailsThumbnail\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass YouTubeSearchListItemSnipped:\r\n    publishedAt: datetime.datetime or None = None\r\n    channelId: str = ''\r\n    title: str = ''\r\n    description: str = ''\r\n    thumbnails: YouTubeSearchListItemSnippedThumbnails = YouTubeSearchListItemSnippedThumbnails\r\n    channelTitle: str = ''\r\n    liveBroadcastContent: str = ''\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass YouTubeSearchListItemId:\r\n    kind: str = ''\r\n    videoId: str = ''\r\n    channelId: str = ''\r\n    playlistId: str = ''\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass YouTubeSearchListItem:\r\n    kind: str = ''\r\n    etag: str = ''\r\n    id: YouTubeSearchListItemId = YouTubeSearchListItemId\r\n    snippet: YouTubeSearchListItemSnipped = YouTubeSearchListItemSnipped\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass YouTubeSearchListPageInfo:\r\n    totalResults: int = 0\r\n    resultsPerPage: int = 0\r\n\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass YouTubeSearchListResponse:\r\n    kind: str = ''\r\n    etag: str = ''\r\n    nextPageToken: str = ''\r\n    prevPageToken: str = ''\r\n    regionCode: str = ''\r\n    pageInfo: YouTubeSearchListPageInfo = YouTubeSearchListPageInfo\r\n    items: List[YouTubeSearchListItem] = List[YouTubeSearchListItem]\r\n\r\n\r\nwith open('1.json', 'r') as file:\r\n    print(YouTubeSearchListResponse.from_json(file.read()))\r\n```\r\n\r\nWhen starting, we get an error **TypeError: Type List cannot be instantiated; use list() instead**.\r\n\r\nComment out **standard** and **maxres** in **YouTubeSearchListItemSnippedThumbnails** and it works.\r\n\r\nIn json there are no these fields, but the server can return json with such fields. https://developers.google.com/youtube/v3/docs/search#resource", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/20", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/20/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/20/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/20", "id": 368948652, "node_id": "MDU6SXNzdWUzNjg5NDg2NTI=", "number": 20, "title": "datetime and/or overriding serializers", "user": {"login": "dodgyville", "id": 13980, "node_id": "MDQ6VXNlcjEzOTgw", "avatar_url": "https://avatars0.githubusercontent.com/u/13980?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dodgyville", "html_url": "https://github.com/dodgyville", "followers_url": "https://api.github.com/users/dodgyville/followers", "following_url": "https://api.github.com/users/dodgyville/following{/other_user}", "gists_url": "https://api.github.com/users/dodgyville/gists{/gist_id}", "starred_url": "https://api.github.com/users/dodgyville/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dodgyville/subscriptions", "organizations_url": "https://api.github.com/users/dodgyville/orgs", "repos_url": "https://api.github.com/users/dodgyville/repos", "events_url": "https://api.github.com/users/dodgyville/events{/privacy}", "received_events_url": "https://api.github.com/users/dodgyville/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-11T04:30:39Z", "updated_at": "2018-10-13T15:05:05Z", "closed_at": "2018-10-13T15:05:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, great library. \r\n\r\nIt works except I can't serialise a datetime object on my dataclass. Is there a way to pass in my own serialiser?\r\n\r\nEDIT: I can pass a fallback function using \"default\" \r\n```\r\ndataclass_obj.to_json(default=json_serial)\r\n\r\ndef json_serial(obj):\r\n    \"\"\"JSON serializer for objects not serializable by default json code\"\"\"\r\n\r\n    if isinstance(obj, (datetime, date)):\r\n        return obj.isoformat()\r\n    raise TypeError (\"Type %s not serializable\" % type(obj))\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/18", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/18/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/18/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/18", "id": 366781338, "node_id": "MDU6SXNzdWUzNjY3ODEzMzg=", "number": 18, "title": "Pipenv gets broken", "user": {"login": "Mulugruntz", "id": 13810199, "node_id": "MDQ6VXNlcjEzODEwMTk5", "avatar_url": "https://avatars0.githubusercontent.com/u/13810199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mulugruntz", "html_url": "https://github.com/Mulugruntz", "followers_url": "https://api.github.com/users/Mulugruntz/followers", "following_url": "https://api.github.com/users/Mulugruntz/following{/other_user}", "gists_url": "https://api.github.com/users/Mulugruntz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mulugruntz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mulugruntz/subscriptions", "organizations_url": "https://api.github.com/users/Mulugruntz/orgs", "repos_url": "https://api.github.com/users/Mulugruntz/repos", "events_url": "https://api.github.com/users/Mulugruntz/events{/privacy}", "received_events_url": "https://api.github.com/users/Mulugruntz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-04T13:08:13Z", "updated_at": "2018-10-13T15:02:03Z", "closed_at": "2018-10-13T15:01:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Pipenv get broken when using `dataclasses-json`.\r\nIn the `setup.py`, replacing `marshmallow>=3.0.0b13` by `marshmallow==3.0.0b13` should make it work.\r\nAnd it's safer anyway (if there's a non-backward compatible version of marshmallow that gets released, it will currently break dataclasses-json.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/17", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/17/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/17/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/17", "id": 365026513, "node_id": "MDU6SXNzdWUzNjUwMjY1MTM=", "number": 17, "title": "When converting to dictionary, nested object is not handled recursively ", "user": {"login": "alexyiu875", "id": 37088207, "node_id": "MDQ6VXNlcjM3MDg4MjA3", "avatar_url": "https://avatars3.githubusercontent.com/u/37088207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexyiu875", "html_url": "https://github.com/alexyiu875", "followers_url": "https://api.github.com/users/alexyiu875/followers", "following_url": "https://api.github.com/users/alexyiu875/following{/other_user}", "gists_url": "https://api.github.com/users/alexyiu875/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexyiu875/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexyiu875/subscriptions", "organizations_url": "https://api.github.com/users/alexyiu875/orgs", "repos_url": "https://api.github.com/users/alexyiu875/repos", "events_url": "https://api.github.com/users/alexyiu875/events{/privacy}", "received_events_url": "https://api.github.com/users/alexyiu875/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-28T20:17:42Z", "updated_at": "2018-10-23T17:30:24Z", "closed_at": "2018-10-23T17:13:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nWhen converting to dictionary, nested object is not handled recursively \r\n\r\nSample Code:\r\n```\r\nfrom dataclasses import dataclass\r\nfrom dataclasses_json import dataclass_json\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass RegionDetails:\r\n    region_name: str\r\n    min_x: int\r\n    min_y: int\r\n    width: int\r\n    height: int\r\n\r\n@dataclass_json\r\n@dataclass\r\nclass FooSetting:\r\n    last_detection_time: int\r\n    region_details: RegionDetails\r\n    foo: int\r\n\r\ndef test_main():\r\n    foo = FooSetting(foo=15345, last_detection_time=1234567,\r\n                     region_details = RegionDetails(height=333, width=555, min_x=10, min_y=10,\r\n                                                             region_name=\"abc\"))\r\n\r\n    print(foo)\r\n    print(FooSetting.schema().dump(foo))\r\n    print(type(FooSetting.schema().dump(foo).get(\"region_details\")))\r\n    print(foo.to_json(indent=4))\r\n\r\ntest_main()\r\n```\r\n\r\nOutput: \r\n```\r\nFooSetting(last_detection_time=1234567, region_details=RegionDetails(region_name='abc', min_x=10, min_y=10, width=555, height=333), foo=15345)\r\n{'region_details': RegionDetails(region_name='abc', min_x=10, min_y=10, width=555, height=333), 'last_detection_time': 1234567, 'foo': 15345}\r\n<class '__main__.RegionDetails'>\r\n{\r\n    \"last_detection_time\": 1234567,\r\n    \"region_details\": {\r\n        \"region_name\": \"abc\",\r\n        \"min_x\": 10,\r\n        \"min_y\": 10,\r\n        \"width\": 555,\r\n        \"height\": 333\r\n    },\r\n    \"foo\": 15345\r\n}\r\n```\r\n\r\nWhen converting this \"FooSetting\" object into a Dictionary, \"region_details\" nested object does not get converting to a Dictionary recursively.  The original \"RegionDetails\" type object shows up under \"region_detalis\" field instead. \r\n\r\nHowever, when serializing it into JSON text, the recursive is done correctly. \r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/13", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/13/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/13/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/13", "id": 358906477, "node_id": "MDU6SXNzdWUzNTg5MDY0Nzc=", "number": 13, "title": "AttributeError: type object 'str' has no attribute '__args__'", "user": {"login": "hasanatkazmi", "id": 399577, "node_id": "MDQ6VXNlcjM5OTU3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/399577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hasanatkazmi", "html_url": "https://github.com/hasanatkazmi", "followers_url": "https://api.github.com/users/hasanatkazmi/followers", "following_url": "https://api.github.com/users/hasanatkazmi/following{/other_user}", "gists_url": "https://api.github.com/users/hasanatkazmi/gists{/gist_id}", "starred_url": "https://api.github.com/users/hasanatkazmi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hasanatkazmi/subscriptions", "organizations_url": "https://api.github.com/users/hasanatkazmi/orgs", "repos_url": "https://api.github.com/users/hasanatkazmi/repos", "events_url": "https://api.github.com/users/hasanatkazmi/events{/privacy}", "received_events_url": "https://api.github.com/users/hasanatkazmi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-11T06:39:33Z", "updated_at": "2018-09-15T15:51:35Z", "closed_at": "2018-09-15T15:51:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a very small snippet: \r\n```\r\n@dataclass_json\r\n@dataclass\r\nclass Test:\r\n    entry: List[str]\r\n\r\nt = Test(entry=[])\r\nt.entry.append('mytest')\r\nt = Test.from_json(t.to_json())\r\n```\r\nbut even this is failing with this traceback:\r\n```\r\n  File \"dc.py\", line 25, in <module>\r\n    t = Test.from_json(t.to_json())\r\n  File \"/private/tmp/testdc/env/lib/python3.7/site-packages/dataclasses_json/api.py\", line 62, in from_json\r\n    return _decode_dataclass(cls, init_kwargs, infer_missing)\r\n  File \"/private/tmp/testdc/env/lib/python3.7/site-packages/dataclasses_json/core.py\", line 47, in _decode_dataclass\r\n    infer_missing)\r\n  File \"/private/tmp/testdc/env/lib/python3.7/site-packages/dataclasses_json/core.py\", line 83, in _decode_generic\r\n    res = _get_type_cons(type_)(xs)\r\n  File \"/private/tmp/testdc/env/lib/python3.7/site-packages/dataclasses_json/core.py\", line 77, in <genexpr>\r\n    xs = (_decode_generic(type_arg, v, infer_missing) for v in value)\r\n  File \"/private/tmp/testdc/env/lib/python3.7/site-packages/dataclasses_json/core.py\", line 73, in _decode_generic\r\n    type_arg = type_.__args__[0]\r\nAttributeError: type object 'str' has no attribute '__args__'\r\n```\r\nThis issue might be duplicate of issue 2.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/12", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/12/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/12/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/12", "id": 357580186, "node_id": "MDU6SXNzdWUzNTc1ODAxODY=", "number": 12, "title": "AttributeError when decoding to Optional[str]?", "user": {"login": "gmolau", "id": 23221000, "node_id": "MDQ6VXNlcjIzMjIxMDAw", "avatar_url": "https://avatars3.githubusercontent.com/u/23221000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gmolau", "html_url": "https://github.com/gmolau", "followers_url": "https://api.github.com/users/gmolau/followers", "following_url": "https://api.github.com/users/gmolau/following{/other_user}", "gists_url": "https://api.github.com/users/gmolau/gists{/gist_id}", "starred_url": "https://api.github.com/users/gmolau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gmolau/subscriptions", "organizations_url": "https://api.github.com/users/gmolau/orgs", "repos_url": "https://api.github.com/users/gmolau/repos", "events_url": "https://api.github.com/users/gmolau/events{/privacy}", "received_events_url": "https://api.github.com/users/gmolau/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-06T09:53:17Z", "updated_at": "2018-09-15T15:51:22Z", "closed_at": "2018-09-15T15:51:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been getting an AttributeError when trying to decode a dict to a dataclass with optional str arguments, i.e. something like:\r\n\r\n```python\r\n@dataclass\r\nclass A:\r\n    a: Optional[str] = None\r\n```\r\n\r\nStepping through this with PDB I've noticed that `_is_supported_generic()` evaluates to `True` for str, causing [this branch](https://github.com/lidatong/dataclasses-json/blob/f89db238150e12f17853649856194586945c8040/dataclasses_json/core.py#L90) in dataclasses_json.core to call `_decode_generic()` with `type_ = str` and then failing on [line 73](https://github.com/lidatong/dataclasses-json/blob/f89db238150e12f17853649856194586945c8040/dataclasses_json/core.py#L73) because `str` has no `__args__` attribute.\r\n\r\nThis example should illustrate the problem more clearly:\r\n\r\n```python\r\nIn [1]: import dataclasses_json, typing\r\n\r\nIn [2]: dataclasses_json.core._decode_generic(typing.Optional[str], 'foo', False)\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-2-ef8bcdf59b9e> in <module>()\r\n----> 1 dataclasses_json.core._decode_generic(typing.Optional[str], 'foo', False)\r\n\r\n<project_dir>/venv/lib/python3.7/site-packages/dataclasses_json/core.py in _decode_generic(type_, value, infer_missing)\r\n     89             res = _decode_dataclass(type_arg, value, infer_missing)\r\n     90         elif _is_supported_generic(type_arg):\r\n---> 91             res = _decode_generic(type_arg, value, infer_missing)\r\n     92         else:\r\n     93             res = value\r\n\r\n<project_dir>/venv/lib/python3.7/site-packages/dataclasses_json/core.py in _decode_generic(type_, value, infer_missing)\r\n     71         # type_arg is a typevar we need to extract the reified type information\r\n     72         # hence the check of `is_dataclass(value)`\r\n---> 73         type_arg = type_.__args__[0]\r\n     74         if is_dataclass(type_arg) or is_dataclass(value):\r\n     75             xs = (_decode_dataclass(type_arg, v, infer_missing) for v in value)\r\n\r\nAttributeError: type object 'str' has no attribute '__args__'\r\n```\r\n\r\nIs this a bug, or am I misunderstanding something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/9", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/9/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/9/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/9", "id": 355635449, "node_id": "MDU6SXNzdWUzNTU2MzU0NDk=", "number": 9, "title": "Infer missing unexpected behavior", "user": {"login": "mazmrini", "id": 15892091, "node_id": "MDQ6VXNlcjE1ODkyMDkx", "avatar_url": "https://avatars3.githubusercontent.com/u/15892091?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mazmrini", "html_url": "https://github.com/mazmrini", "followers_url": "https://api.github.com/users/mazmrini/followers", "following_url": "https://api.github.com/users/mazmrini/following{/other_user}", "gists_url": "https://api.github.com/users/mazmrini/gists{/gist_id}", "starred_url": "https://api.github.com/users/mazmrini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mazmrini/subscriptions", "organizations_url": "https://api.github.com/users/mazmrini/orgs", "repos_url": "https://api.github.com/users/mazmrini/repos", "events_url": "https://api.github.com/users/mazmrini/events{/privacy}", "received_events_url": "https://api.github.com/users/mazmrini/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-30T15:22:39Z", "updated_at": "2018-08-31T03:49:20Z", "closed_at": "2018-08-31T03:49:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, here's the test that should pass :\r\n\r\n```\r\n@dataclass\r\nclass Address(DataClassJsonMixin):\r\n    street: str\r\n    no: int\r\n\r\n\r\n@dataclass\r\nclass Person(DataClassJsonMixin):\r\n    name: str\r\n    address: Address\r\n\r\n\r\nclass TestInferMissingJson(unittest.TestCase):\r\n    # this should be the expected behavior and it is not\r\n    def test_given_no_address_when_from_json_then_address_attribute_is_None(self) -> None:\r\n        json = '{\"name\": \"Bob\"}'\r\n\r\n        result = Person.from_json(json)\r\n \r\n        self.assertIsNone(result.address)\r\n```\r\n\r\nCurrently, it treats it as :\r\n```\r\n{\r\n    'name': 'Bob',\r\n    'address': {\r\n        'no': None,\r\n        'street': None\r\n    }\r\n}\r\n```\r\n\r\nThis can be fixed in `core.py line 67`:\r\n\r\n```\r\ndef _decode_dataclass(cls, kvs, infer_missing):\r\n    kvs = {} if kvs is None and infer_missing else kvs\r\n    missing_fields = {field for field in fields(cls) if field.name not in kvs}\r\n    for field in missing_fields:\r\n        if field.default is not MISSING:\r\n            kvs[field.name] = field.default\r\n        elif infer_missing:\r\n            kvs[field.name] = None\r\n\r\n    init_kwargs = {}\r\n    for field in fields(cls):\r\n        field_value = kvs[field.name]\r\n        if field_value is None: <-------------------------- By adding this --------- \r\n            init_kwargs[field.name] = field_value <-------- By adding this --------- \r\n        elif is_dataclass(field.type): <------------------- By modifying this ------\r\n            init_kwargs[field.name] = _decode_dataclass(field.type,\r\n                                                        field_value,\r\n                                                        infer_missing)\r\n        elif _is_supported_generic(field.type) and field.type != str:\r\n            init_kwargs[field.name] = _decode_generic(field.type,\r\n                                                      field_value,\r\n                                                      infer_missing)\r\n        else:\r\n            init_kwargs[field.name] = field_value\r\n    return cls(**init_kwargs)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/7", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/7/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/7/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/7", "id": 352199726, "node_id": "MDU6SXNzdWUzNTIxOTk3MjY=", "number": 7, "title": "default value ignored when infer_missing=True", "user": {"login": "AlxVan", "id": 15839829, "node_id": "MDQ6VXNlcjE1ODM5ODI5", "avatar_url": "https://avatars2.githubusercontent.com/u/15839829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlxVan", "html_url": "https://github.com/AlxVan", "followers_url": "https://api.github.com/users/AlxVan/followers", "following_url": "https://api.github.com/users/AlxVan/following{/other_user}", "gists_url": "https://api.github.com/users/AlxVan/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlxVan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlxVan/subscriptions", "organizations_url": "https://api.github.com/users/AlxVan/orgs", "repos_url": "https://api.github.com/users/AlxVan/repos", "events_url": "https://api.github.com/users/AlxVan/events{/privacy}", "received_events_url": "https://api.github.com/users/AlxVan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-20T16:03:41Z", "updated_at": "2018-08-26T14:28:07Z", "closed_at": "2018-08-26T14:26:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "When infer_missing is set to True, it by-pass default argument.  \r\nConsider the following code :\r\n\r\n```\r\nimport json\r\nfrom dataclasses import dataclass, field\r\nfrom dataclasses_json import DataClassJsonMixin\r\n\r\n@dataclass()\r\nclass MyObject(DataClassJsonMixin):\r\n    id: str\r\n    name: str\r\n    category: str = field(default=\"my_object\")\r\n\r\n\r\ns1 = MyObject(id=\"12345678-5ef8-49d5-be8b-44fcb6907c16\", name=\"test_me\")\r\nprint(json.dumps(s1.__dict__))\r\n\r\ns2 = MyObject.from_json('{\"id\": \"12345678-5ef8-49d5-be8b-44fcb6907c16\", \"name\": \"test_me\"}', infer_missing=True)\r\nprint(s2.to_json())\r\n```\r\n\r\nResult is :\r\n```\r\n{\"id\": \"12345678-5ef8-49d5-be8b-44fcb6907c16\", \"name\": \"test_me\", \"category\": \"my_object\"}\r\n{\"id\": \"12345678-5ef8-49d5-be8b-44fcb6907c16\", \"name\": \"test_me\", \"category\": null}\r\n```\r\n\r\nThe `category` is replaced by `null`, not by the default value `my_object`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/6", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/6/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/6/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/6", "id": 350863327, "node_id": "MDU6SXNzdWUzNTA4NjMzMjc=", "number": 6, "title": "infer_missing param is not accounted for in nested object", "user": {"login": "EtienneStPierre", "id": 2487486, "node_id": "MDQ6VXNlcjI0ODc0ODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2487486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EtienneStPierre", "html_url": "https://github.com/EtienneStPierre", "followers_url": "https://api.github.com/users/EtienneStPierre/followers", "following_url": "https://api.github.com/users/EtienneStPierre/following{/other_user}", "gists_url": "https://api.github.com/users/EtienneStPierre/gists{/gist_id}", "starred_url": "https://api.github.com/users/EtienneStPierre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EtienneStPierre/subscriptions", "organizations_url": "https://api.github.com/users/EtienneStPierre/orgs", "repos_url": "https://api.github.com/users/EtienneStPierre/repos", "events_url": "https://api.github.com/users/EtienneStPierre/events{/privacy}", "received_events_url": "https://api.github.com/users/EtienneStPierre/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-15T15:51:00Z", "updated_at": "2018-08-26T14:27:31Z", "closed_at": "2018-08-26T14:26:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Nested object are not affected by the infer_missing parameter. Could probably join a pull request for that soon if the issue is accepted. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/5", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/5/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/5/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/5", "id": 349773546, "node_id": "MDU6SXNzdWUzNDk3NzM1NDY=", "number": 5, "title": "Hacky workaround for forward references", "user": {"login": "lidatong", "id": 13275245, "node_id": "MDQ6VXNlcjEzMjc1MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/13275245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lidatong", "html_url": "https://github.com/lidatong", "followers_url": "https://api.github.com/users/lidatong/followers", "following_url": "https://api.github.com/users/lidatong/following{/other_user}", "gists_url": "https://api.github.com/users/lidatong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lidatong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lidatong/subscriptions", "organizations_url": "https://api.github.com/users/lidatong/orgs", "repos_url": "https://api.github.com/users/lidatong/repos", "events_url": "https://api.github.com/users/lidatong/events{/privacy}", "received_events_url": "https://api.github.com/users/lidatong/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 909368699, "node_id": "MDU6TGFiZWw5MDkzNjg2OTk=", "url": "https://api.github.com/repos/lidatong/dataclasses-json/labels/invalid", "name": "invalid", "color": "e4e669", "default": true, "description": "This doesn't seem right"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-12T00:25:00Z", "updated_at": "2018-11-04T17:08:47Z", "closed_at": "2018-11-04T17:08:47Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Currently dataclasses's `fields` helper function returns a type object that is a `str` when fields are forward references rather than an actual `typing` object (I imagine it's due to the chicken-and-egg problem, but they might use better methods in the future to resolve the infinite expansion, e.g make it lazy).\r\n\r\nI'm planning to put in a hacky workaround to do str comparisons against the type names to handle forward references (given there's only a finite, small set of json types).\r\n\r\nIf you think you might have a better solution, feel free to respond to this issue / submit a PR.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/3", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/3/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/3/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/3", "id": 336170817, "node_id": "MDU6SXNzdWUzMzYxNzA4MTc=", "number": 3, "title": "Support for optional dataclass attributes", "user": {"login": "ElmoVanKielmo", "id": 4394881, "node_id": "MDQ6VXNlcjQzOTQ4ODE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4394881?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ElmoVanKielmo", "html_url": "https://github.com/ElmoVanKielmo", "followers_url": "https://api.github.com/users/ElmoVanKielmo/followers", "following_url": "https://api.github.com/users/ElmoVanKielmo/following{/other_user}", "gists_url": "https://api.github.com/users/ElmoVanKielmo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ElmoVanKielmo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ElmoVanKielmo/subscriptions", "organizations_url": "https://api.github.com/users/ElmoVanKielmo/orgs", "repos_url": "https://api.github.com/users/ElmoVanKielmo/repos", "events_url": "https://api.github.com/users/ElmoVanKielmo/events{/privacy}", "received_events_url": "https://api.github.com/users/ElmoVanKielmo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-27T10:31:17Z", "updated_at": "2018-08-11T13:13:37Z", "closed_at": "2018-08-11T13:13:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Good job, but `_decode_dataclass(cls, kvs)` should be aware of optional attributes.  \r\nConsider the following code:\r\n```python\r\nimport typing\r\n\r\nfrom dataclasses import dataclass\r\nfrom dataclasses_json import DataClassJsonMixin\r\n\r\n\r\n@dataclass\r\nclass Foo(DataClassJsonMixin):\r\n    bar: float\r\n    baz: typing.Optional[float]\r\n\r\n\r\nFoo.from_json('{\"bar\": 7.45}')\r\n```\r\nThis throws `KeyError` despite `baz` being optional. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/1", "repository_url": "https://api.github.com/repos/lidatong/dataclasses-json", "labels_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/1/comments", "events_url": "https://api.github.com/repos/lidatong/dataclasses-json/issues/1/events", "html_url": "https://github.com/lidatong/dataclasses-json/issues/1", "id": 321069170, "node_id": "MDU6SXNzdWUzMjEwNjkxNzA=", "number": 1, "title": "Option many=true", "user": {"login": "kislenko-artem", "id": 13413164, "node_id": "MDQ6VXNlcjEzNDEzMTY0", "avatar_url": "https://avatars1.githubusercontent.com/u/13413164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kislenko-artem", "html_url": "https://github.com/kislenko-artem", "followers_url": "https://api.github.com/users/kislenko-artem/followers", "following_url": "https://api.github.com/users/kislenko-artem/following{/other_user}", "gists_url": "https://api.github.com/users/kislenko-artem/gists{/gist_id}", "starred_url": "https://api.github.com/users/kislenko-artem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kislenko-artem/subscriptions", "organizations_url": "https://api.github.com/users/kislenko-artem/orgs", "repos_url": "https://api.github.com/users/kislenko-artem/repos", "events_url": "https://api.github.com/users/kislenko-artem/events{/privacy}", "received_events_url": "https://api.github.com/users/kislenko-artem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-08T07:15:43Z", "updated_at": "2018-06-09T16:25:06Z", "closed_at": "2018-06-09T16:25:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can I parse List not Dictionary? Is there any function? Unfortunately I could not find hints in neither documentation and tests", "performed_via_github_app": null, "score": 1.0}]}