{"total_count": 25, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/43", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/43/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/43/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/43", "id": 650398679, "node_id": "MDU6SXNzdWU2NTAzOTg2Nzk=", "number": 43, "title": "Wheel support for linux aarch64", "user": {"login": "odidev", "id": 40816837, "node_id": "MDQ6VXNlcjQwODE2ODM3", "avatar_url": "https://avatars2.githubusercontent.com/u/40816837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/odidev", "html_url": "https://github.com/odidev", "followers_url": "https://api.github.com/users/odidev/followers", "following_url": "https://api.github.com/users/odidev/following{/other_user}", "gists_url": "https://api.github.com/users/odidev/gists{/gist_id}", "starred_url": "https://api.github.com/users/odidev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/odidev/subscriptions", "organizations_url": "https://api.github.com/users/odidev/orgs", "repos_url": "https://api.github.com/users/odidev/repos", "events_url": "https://api.github.com/users/odidev/events{/privacy}", "received_events_url": "https://api.github.com/users/odidev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-07-03T07:22:06Z", "updated_at": "2020-07-22T16:07:40Z", "closed_at": "2020-07-22T15:39:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Summary**\r\nInstalling lazy-object-proxy on aarch64 via pip using command \"pip3 install lazy-object-proxy\" tries to build wheel from source code\r\n\r\n**Problem description**\r\nlazy-object-proxy don't have wheel for aarch64 on PyPI repository. So, while installing lazy-object-proxy via pip on aarch64, pip builds wheel for same resulting in it takes more time to install lazy-object-proxy. Making wheel available for aarch64 will benefit aarch64 users by minimizing lazy-object-proxy installation time.\r\n\r\n**Expected Output**\r\nPip should be able to download lazy-object-proxy wheel from PyPI repository rather than building it from source code.\r\n\r\n@lazy-object-proxy-team, please let me know if I can help you building wheel/uploading to PyPI repository. I am curious to make lazy-object-proxy wheel available for aarch64. It will be a great opportunity for me to work with you.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/42", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/42/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/42/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/42", "id": 646890227, "node_id": "MDU6SXNzdWU2NDY4OTAyMjc=", "number": 42, "title": "Error when install: the project doesn't specify a build backend", "user": {"login": "suliveevil", "id": 35763237, "node_id": "MDQ6VXNlcjM1NzYzMjM3", "avatar_url": "https://avatars1.githubusercontent.com/u/35763237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suliveevil", "html_url": "https://github.com/suliveevil", "followers_url": "https://api.github.com/users/suliveevil/followers", "following_url": "https://api.github.com/users/suliveevil/following{/other_user}", "gists_url": "https://api.github.com/users/suliveevil/gists{/gist_id}", "starred_url": "https://api.github.com/users/suliveevil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suliveevil/subscriptions", "organizations_url": "https://api.github.com/users/suliveevil/orgs", "repos_url": "https://api.github.com/users/suliveevil/repos", "events_url": "https://api.github.com/users/suliveevil/events{/privacy}", "received_events_url": "https://api.github.com/users/suliveevil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-28T10:31:55Z", "updated_at": "2020-06-28T18:37:09Z", "closed_at": "2020-06-28T18:37:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n![39BC7A6D-7C81-4120-8175-735EA893D39F](https://user-images.githubusercontent.com/35763237/85945033-8ad4d800-b96d-11ea-8741-f3f912ae914c.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/40", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/40/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/40/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/40", "id": 639995177, "node_id": "MDU6SXNzdWU2Mzk5OTUxNzc=", "number": 40, "title": "pip install on 3.8.2 fails", "user": {"login": "QYQSDTC", "id": 15608306, "node_id": "MDQ6VXNlcjE1NjA4MzA2", "avatar_url": "https://avatars2.githubusercontent.com/u/15608306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QYQSDTC", "html_url": "https://github.com/QYQSDTC", "followers_url": "https://api.github.com/users/QYQSDTC/followers", "following_url": "https://api.github.com/users/QYQSDTC/following{/other_user}", "gists_url": "https://api.github.com/users/QYQSDTC/gists{/gist_id}", "starred_url": "https://api.github.com/users/QYQSDTC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QYQSDTC/subscriptions", "organizations_url": "https://api.github.com/users/QYQSDTC/orgs", "repos_url": "https://api.github.com/users/QYQSDTC/repos", "events_url": "https://api.github.com/users/QYQSDTC/events{/privacy}", "received_events_url": "https://api.github.com/users/QYQSDTC/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-16T21:52:14Z", "updated_at": "2020-06-16T23:29:06Z", "closed_at": "2020-06-16T23:29:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I was trying to install, I got this error, but when I switch to 3.7.7, it was installed successfully. My system is macOS 10.15.5.\r\n```\r\n---------------------------------------------\r\npip install -U lazy-object-proxy\r\nCollecting lazy-object-proxy\r\n  Using cached lazy-object-proxy-1.5.0.tar.gz (35 kB)\r\n  Installing build dependencies ... error\r\n  ERROR: Command errored out with exit status 1:\r\n   command: /Users/qianyiqian/.pyenv/versions/3.8.2/bin/python3.8 /Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/site-packages/pip install --ignore-installed --no-user --prefix /private/var/folders/d7/7bg07yps3_15nmjgbvtmjv5m0000gn/T/pip-build-env-aikqnbxi/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- 'setuptools>=30.3.0' wheel 'setuptools_scm>=3.3.1'\r\n       cwd: None\r\n  Complete output (44 lines):\r\n  Traceback (most recent call last):\r\n    File \"/Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/runpy.py\", line 193, in _run_module_as_main\r\n      return _run_code(code, main_globals, None,\r\n    File \"/Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/runpy.py\", line 86, in _run_code\r\n      exec(code, run_globals)\r\n    File \"/Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/site-packages/pip/__main__.py\", line 26, in <module>\r\n      sys.exit(_main())\r\n    File \"/Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/site-packages/pip/_internal/cli/main.py\", line 73, in main\r\n      command = create_command(cmd_name, isolated=(\"--isolated\" in cmd_args))\r\n    File \"/Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/site-packages/pip/_internal/commands/__init__.py\", line 104, in create_command\r\n      module = importlib.import_module(module_path)\r\n    File \"/Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/importlib/__init__.py\", line 127, in import_module\r\n      return _bootstrap._gcd_import(name[level:], package, level)\r\n    File \"<frozen importlib._bootstrap>\", line 1014, in _gcd_import\r\n    File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load\r\n    File \"<frozen importlib._bootstrap>\", line 975, in _find_and_load_unlocked\r\n    File \"<frozen importlib._bootstrap>\", line 671, in _load_unlocked\r\n    File \"<frozen importlib._bootstrap_external>\", line 783, in exec_module\r\n    File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n    File \"/Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/site-packages/pip/_internal/commands/install.py\", line 24, in <module>\r\n      from pip._internal.cli.req_command import RequirementCommand, with_cleanup\r\n    File \"/Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/site-packages/pip/_internal/cli/req_command.py\", line 16, in <module>\r\n      from pip._internal.index.package_finder import PackageFinder\r\n    File \"/Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/site-packages/pip/_internal/index/package_finder.py\", line 21, in <module>\r\n      from pip._internal.index.collector import parse_links\r\n    File \"/Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/site-packages/pip/_internal/index/collector.py\", line 14, in <module>\r\n      from pip._vendor import html5lib, requests\r\n    File \"/Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/site-packages/pip/_vendor/requests/__init__.py\", line 114, in <module>\r\n      from . import utils\r\n    File \"/Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/site-packages/pip/_vendor/requests/utils.py\", line 25, in <module>\r\n      from . import certs\r\n    File \"/Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/site-packages/pip/_vendor/requests/certs.py\", line 15, in <module>\r\n      from pip._vendor.certifi import where\r\n    File \"/Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/site-packages/pip/_vendor/certifi/__init__.py\", line 1, in <module>\r\n      from .core import contents, where\r\n    File \"/Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/site-packages/pip/_vendor/certifi/core.py\", line 12, in <module>\r\n      from importlib.resources import read_text\r\n    File \"/Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/importlib/resources.py\", line 11, in <module>\r\n      from typing import Iterable, Iterator, Optional, Set, Union   # noqa: F401\r\n    File \"/Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/site-packages/typing.py\", line 1357, in <module>\r\n      class Callable(extra=collections_abc.Callable, metaclass=CallableMeta):\r\n    File \"/Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/site-packages/typing.py\", line 1005, in __new__\r\n      self._abc_registry = extra._abc_registry\r\n  AttributeError: type object 'Callable' has no attribute '_abc_registry'\r\n  ----------------------------------------\r\nERROR: Command errored out with exit status 1: /Users/qianyiqian/.pyenv/versions/3.8.2/bin/python3.8 /Users/qianyiqian/.pyenv/versions/3.8.2/lib/python3.8/site-packages/pip install --ignore-installed --no-user --prefix /private/var/folders/d7/7bg07yps3_15nmjgbvtmjv5m0000gn/T/pip-build-env-aikqnbxi/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- 'setuptools>=30.3.0' wheel 'setuptools_scm>=3.3.1' Check the logs for full command output.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/38", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/38/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/38/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/38", "id": 626814469, "node_id": "MDU6SXNzdWU2MjY4MTQ0Njk=", "number": 38, "title": "Any way to circumvent type checking of proxy objects?", "user": {"login": "syfluqs", "id": 1752852, "node_id": "MDQ6VXNlcjE3NTI4NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1752852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syfluqs", "html_url": "https://github.com/syfluqs", "followers_url": "https://api.github.com/users/syfluqs/followers", "following_url": "https://api.github.com/users/syfluqs/following{/other_user}", "gists_url": "https://api.github.com/users/syfluqs/gists{/gist_id}", "starred_url": "https://api.github.com/users/syfluqs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syfluqs/subscriptions", "organizations_url": "https://api.github.com/users/syfluqs/orgs", "repos_url": "https://api.github.com/users/syfluqs/repos", "events_url": "https://api.github.com/users/syfluqs/events{/privacy}", "received_events_url": "https://api.github.com/users/syfluqs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-28T21:06:50Z", "updated_at": "2020-06-05T08:55:40Z", "closed_at": "2020-06-05T08:55:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a function that needs to lazy return file paths, but I can not actually use the file path since several python standard library functions perform explicit type checking on the arguments. So if I do the following:\r\n```python\r\nlazy_path = lazy_object_proxy.Proxy(lambda: '/home/user')                                       \r\nos.path.join(lazy_path, 'dir')\r\n```\r\nIt results in \r\n\r\n\r\n```\r\n/usr/lib/python3.8/posixpath.py in join(a, *p)\r\n     74     will be discarded.  An empty last part will result in a path that\r\n     75     ends with a separator.\"\"\"\r\n---> 76     a = os.fspath(a)\r\n     77     sep = _get_sep(a)\r\n     78     path = a\r\n\r\nTypeError: expected str, bytes or os.PathLike object, not Proxy\r\n```\r\nIs there any way to bypass this behavior, perhaps with monkey patching or so?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/37", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/37/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/37/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/37", "id": 580554049, "node_id": "MDU6SXNzdWU1ODA1NTQwNDk=", "number": 37, "title": "1.4.3: wrong version in generated PKG-INFO?", "user": {"login": "kloczek", "id": 31284574, "node_id": "MDQ6VXNlcjMxMjg0NTc0", "avatar_url": "https://avatars0.githubusercontent.com/u/31284574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kloczek", "html_url": "https://github.com/kloczek", "followers_url": "https://api.github.com/users/kloczek/followers", "following_url": "https://api.github.com/users/kloczek/following{/other_user}", "gists_url": "https://api.github.com/users/kloczek/gists{/gist_id}", "starred_url": "https://api.github.com/users/kloczek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kloczek/subscriptions", "organizations_url": "https://api.github.com/users/kloczek/orgs", "repos_url": "https://api.github.com/users/kloczek/repos", "events_url": "https://api.github.com/users/kloczek/events{/privacy}", "received_events_url": "https://api.github.com/users/kloczek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-03-13T11:55:14Z", "updated_at": "2020-03-13T14:05:33Z", "closed_at": "2020-03-13T14:05:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nMetadata-Version: 1.2\r\nName: lazy-object-proxy\r\nVersion: 0.0.0                                         <<== HERE\r\nSummary: A fast and thorough lazy object proxy.\r\nHome-page: https://github.com/ionelmc/python-lazy-object-proxy\r\nAuthor: Ionel Cristian M\u0103rie\u0219\r\nAuthor-email: contact@ionelmc.ro\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/33", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/33/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/33/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/33", "id": 548682960, "node_id": "MDU6SXNzdWU1NDg2ODI5NjA=", "number": 33, "title": "The latest version of setuptools has not support Python 2", "user": {"login": "vimiix", "id": 15924035, "node_id": "MDQ6VXNlcjE1OTI0MDM1", "avatar_url": "https://avatars1.githubusercontent.com/u/15924035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vimiix", "html_url": "https://github.com/vimiix", "followers_url": "https://api.github.com/users/vimiix/followers", "following_url": "https://api.github.com/users/vimiix/following{/other_user}", "gists_url": "https://api.github.com/users/vimiix/gists{/gist_id}", "starred_url": "https://api.github.com/users/vimiix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vimiix/subscriptions", "organizations_url": "https://api.github.com/users/vimiix/orgs", "repos_url": "https://api.github.com/users/vimiix/repos", "events_url": "https://api.github.com/users/vimiix/events{/privacy}", "received_events_url": "https://api.github.com/users/vimiix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-13T03:30:08Z", "updated_at": "2020-01-15T12:04:23Z", "closed_at": "2020-01-14T12:19:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "REF\uff1ahttps://setuptools.readthedocs.io/en/latest/history.html#v45-0-0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/32", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/32/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/32/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/32", "id": 478572124, "node_id": "MDU6SXNzdWU0Nzg1NzIxMjQ=", "number": 32, "title": "Request for new release to include pyproject.toml", "user": {"login": "ericvw", "id": 1284017, "node_id": "MDQ6VXNlcjEyODQwMTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1284017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvw", "html_url": "https://github.com/ericvw", "followers_url": "https://api.github.com/users/ericvw/followers", "following_url": "https://api.github.com/users/ericvw/following{/other_user}", "gists_url": "https://api.github.com/users/ericvw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvw/subscriptions", "organizations_url": "https://api.github.com/users/ericvw/orgs", "repos_url": "https://api.github.com/users/ericvw/repos", "events_url": "https://api.github.com/users/ericvw/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-08-08T16:25:43Z", "updated_at": "2019-08-21T20:06:35Z", "closed_at": "2019-08-21T20:06:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.  I was wondering if a new release of `lazy-object-proxy` could be cut to include the changes in https://github.com/ionelmc/python-lazy-object-proxy/commit/4e2b00e6e3b2e903e0e0b3f0f207b69678a24c3e?\r\n\r\nThis would greatly simplify using `pip install` when `lazy-object-proxy` to not go through the `setuptools`' `setup_requires` (calling `easy_install`) mechanism. \r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/30", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/30/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/30/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/30", "id": 443254825, "node_id": "MDU6SXNzdWU0NDMyNTQ4MjU=", "number": 30, "title": "setup_requires breaks pip with Python 3.5 on macOS", "user": {"login": "pquentin", "id": 42327, "node_id": "MDQ6VXNlcjQyMzI3", "avatar_url": "https://avatars1.githubusercontent.com/u/42327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pquentin", "html_url": "https://github.com/pquentin", "followers_url": "https://api.github.com/users/pquentin/followers", "following_url": "https://api.github.com/users/pquentin/following{/other_user}", "gists_url": "https://api.github.com/users/pquentin/gists{/gist_id}", "starred_url": "https://api.github.com/users/pquentin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pquentin/subscriptions", "organizations_url": "https://api.github.com/users/pquentin/orgs", "repos_url": "https://api.github.com/users/pquentin/repos", "events_url": "https://api.github.com/users/pquentin/events{/privacy}", "received_events_url": "https://api.github.com/users/pquentin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-05-13T07:53:28Z", "updated_at": "2019-05-14T12:09:53Z", "closed_at": "2019-05-13T07:53:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to mention that [using setup_requires](https://github.com/ionelmc/python-lazy-object-proxy/commit/fdc7797e9947dfe512a21173c2276324e32a9a87) breaks pip with Python 3.5 on macOS because setup_requires dependencies are installed by easy_install, which uses the system OpenSSL, which only supports TLS 1.1 on macOS + Python 3.5. But PyPI only allows TLS 1.2.\r\n\r\nSee https://github.com/urllib3/urllib3/pull/1587#issuecomment-491692837 for more details if you're interested. I don't think this requires an action on your part, but I thought it would be useful to record this here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/29", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/29/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/29/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/29", "id": 442401174, "node_id": "MDU6SXNzdWU0NDI0MDExNzQ=", "number": 29, "title": "pip-installed wheel generates travis spam on macOS", "user": {"login": "fluffy-critter", "id": 347162, "node_id": "MDQ6VXNlcjM0NzE2Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/347162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fluffy-critter", "html_url": "https://github.com/fluffy-critter", "followers_url": "https://api.github.com/users/fluffy-critter/followers", "following_url": "https://api.github.com/users/fluffy-critter/following{/other_user}", "gists_url": "https://api.github.com/users/fluffy-critter/gists{/gist_id}", "starred_url": "https://api.github.com/users/fluffy-critter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fluffy-critter/subscriptions", "organizations_url": "https://api.github.com/users/fluffy-critter/orgs", "repos_url": "https://api.github.com/users/fluffy-critter/repos", "events_url": "https://api.github.com/users/fluffy-critter/events{/privacy}", "received_events_url": "https://api.github.com/users/fluffy-critter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-05-09T19:43:14Z", "updated_at": "2019-05-12T00:19:28Z", "closed_at": "2019-05-12T00:19:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, on some other Python projects (notably pylint), this library is generating spam on standard error at time of exit. For example:\r\n\r\n```\r\n$ pipenv run pylint -f colorized publ\r\n\r\n--------------------------------------------------------------------\r\nYour code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)\r\n\r\nprofiling: /Users/travis/build/ionelmc/python-lazy-object-proxy/build/temp.macosx-10.13-x86_64-3.7/src/lazy_object_proxy/cext.gcda: cannot open: No such file or directory\r\n```\r\n\r\nRelated pylint issue: https://github.com/PyCQA/pylint/issues/2907\r\n\r\nThis happens on macOS 10.14 using lazy-object-proxy v1.4.0; pinning my environment's version to 1.3.1 fixes the issue (workaround found by @wizzl35, see https://github.com/PyCQA/pylint/issues/2907#issuecomment-491001066)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/26", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/26/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/26/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/26", "id": 380354850, "node_id": "MDU6SXNzdWUzODAzNTQ4NTA=", "number": 26, "title": "The function is called on assignment if the assignment is done in an interactive shell", "user": {"login": "KOLANICH", "id": 240344, "node_id": "MDQ6VXNlcjI0MDM0NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/240344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KOLANICH", "html_url": "https://github.com/KOLANICH", "followers_url": "https://api.github.com/users/KOLANICH/followers", "following_url": "https://api.github.com/users/KOLANICH/following{/other_user}", "gists_url": "https://api.github.com/users/KOLANICH/gists{/gist_id}", "starred_url": "https://api.github.com/users/KOLANICH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KOLANICH/subscriptions", "organizations_url": "https://api.github.com/users/KOLANICH/orgs", "repos_url": "https://api.github.com/users/KOLANICH/repos", "events_url": "https://api.github.com/users/KOLANICH/events{/privacy}", "received_events_url": "https://api.github.com/users/KOLANICH/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-11-13T18:05:19Z", "updated_at": "2018-11-16T15:00:45Z", "closed_at": "2018-11-16T15:00:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I set the variable created with lazy_object_proxy it triggers the function.\r\n\r\n```python\r\ndef a():\r\n    print(\"a\")\r\nfrom lazy_object_proxy import Proxy\r\nb=Proxy(a)\r\nb=None # a\r\n```\r\n\r\nIt is not good for some use cases, like lazy importing modules (making importing non-idempotent), and is not good at all, since this is not how python works. It would be nice if you provided a way to disable this behavior.\r\n\r\nThe investigation had showed that in an interactive shell `Proxy_get_class` is called multiple times.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/25", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/25/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/25/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/25", "id": 380243563, "node_id": "MDU6SXNzdWUzODAyNDM1NjM=", "number": 25, "title": "Please add into the faq why this is not possible to achieve with pure python", "user": {"login": "KOLANICH", "id": 240344, "node_id": "MDQ6VXNlcjI0MDM0NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/240344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KOLANICH", "html_url": "https://github.com/KOLANICH", "followers_url": "https://api.github.com/users/KOLANICH/followers", "following_url": "https://api.github.com/users/KOLANICH/following{/other_user}", "gists_url": "https://api.github.com/users/KOLANICH/gists{/gist_id}", "starred_url": "https://api.github.com/users/KOLANICH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KOLANICH/subscriptions", "organizations_url": "https://api.github.com/users/KOLANICH/orgs", "repos_url": "https://api.github.com/users/KOLANICH/repos", "events_url": "https://api.github.com/users/KOLANICH/events{/privacy}", "received_events_url": "https://api.github.com/users/KOLANICH/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-13T14:09:22Z", "updated_at": "2018-11-15T10:00:34Z", "closed_at": "2018-11-15T10:00:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Long ago I have tried to write a similar module but in pure python without any native exts, and have failed. It worked somehow, but not always (and now I don't remember where had it been failing) and googling revealed that it is impossible to hook the needed operations in pure python. So I have started using this module and have written a lib for lazy importing of modules.\r\n\r\nNow I have heard about builtin module loading machinery of python and wanna know if it is suspectable to the same limitations of pure-python approach. But to know it one has to remember the limitations first.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/22", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/22/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/22/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/22", "id": 255364761, "node_id": "MDU6SXNzdWUyNTUzNjQ3NjE=", "number": 22, "title": "Why is this not part of wrapt?", "user": {"login": "traverseda", "id": 2125828, "node_id": "MDQ6VXNlcjIxMjU4Mjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2125828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/traverseda", "html_url": "https://github.com/traverseda", "followers_url": "https://api.github.com/users/traverseda/followers", "following_url": "https://api.github.com/users/traverseda/following{/other_user}", "gists_url": "https://api.github.com/users/traverseda/gists{/gist_id}", "starred_url": "https://api.github.com/users/traverseda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/traverseda/subscriptions", "organizations_url": "https://api.github.com/users/traverseda/orgs", "repos_url": "https://api.github.com/users/traverseda/repos", "events_url": "https://api.github.com/users/traverseda/events{/privacy}", "received_events_url": "https://api.github.com/users/traverseda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-05T18:19:52Z", "updated_at": "2017-09-09T01:38:23Z", "closed_at": "2017-09-06T16:38:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems like this is the kind of thing that would be better as an upstream contribution to wrapt, and not as it's own module.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/20", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/20/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/20/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/20", "id": 237673146, "node_id": "MDU6SXNzdWUyMzc2NzMxNDY=", "number": 20, "title": "Readme example", "user": {"login": "MSeifert04", "id": 14200878, "node_id": "MDQ6VXNlcjE0MjAwODc4", "avatar_url": "https://avatars2.githubusercontent.com/u/14200878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MSeifert04", "html_url": "https://github.com/MSeifert04", "followers_url": "https://api.github.com/users/MSeifert04/followers", "following_url": "https://api.github.com/users/MSeifert04/following{/other_user}", "gists_url": "https://api.github.com/users/MSeifert04/gists{/gist_id}", "starred_url": "https://api.github.com/users/MSeifert04/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MSeifert04/subscriptions", "organizations_url": "https://api.github.com/users/MSeifert04/orgs", "repos_url": "https://api.github.com/users/MSeifert04/repos", "events_url": "https://api.github.com/users/MSeifert04/events{/privacy}", "received_events_url": "https://api.github.com/users/MSeifert04/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-21T21:42:49Z", "updated_at": "2017-06-22T11:31:28Z", "closed_at": "2017-06-22T11:31:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The first example in the documentation first throws an `AttributeError` and when `obj.foobar` is changed to `obj` then it just throws an `NameError`.\r\n\r\nGiven the sparseness of documentation shouldn't the first (and only?) example work and demonstrate what the package is capable of?\r\n\r\nI was thinking about something along the lines of:\r\n\r\n```\r\nimport lazy_object_proxy\r\nimport time\r\n\r\ndef expensive_func():\r\n    print('starting calculation')\r\n    time.sleep(2)  # just as example for a very slow computation\r\n    print('finished calculation')\r\n    # create expensive object\r\n    return 10\r\n\r\nobj = lazy_object_proxy.Proxy(expensive_func)\r\n# function is called only when object is actually used\r\nprint(obj)  # now expensive_func is called\r\n\r\nprint(obj)  # the expensive_func  isn't called but the result is \"remembered\".\r\n```\r\n\r\nIf you want I can put together a PR but I wasn't sure if it needs some discussion beforehand.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/17", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/17/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/17/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/17", "id": 190254663, "node_id": "MDU6SXNzdWUxOTAyNTQ2NjM=", "number": 17, "title": "any document about this module", "user": {"login": "xycloud", "id": 17986201, "node_id": "MDQ6VXNlcjE3OTg2MjAx", "avatar_url": "https://avatars0.githubusercontent.com/u/17986201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xycloud", "html_url": "https://github.com/xycloud", "followers_url": "https://api.github.com/users/xycloud/followers", "following_url": "https://api.github.com/users/xycloud/following{/other_user}", "gists_url": "https://api.github.com/users/xycloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/xycloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xycloud/subscriptions", "organizations_url": "https://api.github.com/users/xycloud/orgs", "repos_url": "https://api.github.com/users/xycloud/repos", "events_url": "https://api.github.com/users/xycloud/events{/privacy}", "received_events_url": "https://api.github.com/users/xycloud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-18T07:36:22Z", "updated_at": "2016-11-18T10:16:41Z", "closed_at": "2016-11-18T10:16:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "any document about how to use this module?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/16", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/16/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/16/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/16", "id": 185548790, "node_id": "MDU6SXNzdWUxODU1NDg3OTA=", "number": 16, "title": "Provide an explanation in the README of why this is better/different than wrapt", "user": {"login": "chadrik", "id": 63251, "node_id": "MDQ6VXNlcjYzMjUx", "avatar_url": "https://avatars1.githubusercontent.com/u/63251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chadrik", "html_url": "https://github.com/chadrik", "followers_url": "https://api.github.com/users/chadrik/followers", "following_url": "https://api.github.com/users/chadrik/following{/other_user}", "gists_url": "https://api.github.com/users/chadrik/gists{/gist_id}", "starred_url": "https://api.github.com/users/chadrik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chadrik/subscriptions", "organizations_url": "https://api.github.com/users/chadrik/orgs", "repos_url": "https://api.github.com/users/chadrik/repos", "events_url": "https://api.github.com/users/chadrik/events{/privacy}", "received_events_url": "https://api.github.com/users/chadrik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-10-27T01:01:37Z", "updated_at": "2016-10-27T09:35:20Z", "closed_at": "2016-10-27T09:35:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Title says it all. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/15", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/15/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/15/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/15", "id": 170588166, "node_id": "MDU6SXNzdWUxNzA1ODgxNjY=", "number": 15, "title": "subclassing Proxy for lazy attribute raises TypeError", "user": {"login": "bagerard", "id": 11854690, "node_id": "MDQ6VXNlcjExODU0Njkw", "avatar_url": "https://avatars0.githubusercontent.com/u/11854690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bagerard", "html_url": "https://github.com/bagerard", "followers_url": "https://api.github.com/users/bagerard/followers", "following_url": "https://api.github.com/users/bagerard/following{/other_user}", "gists_url": "https://api.github.com/users/bagerard/gists{/gist_id}", "starred_url": "https://api.github.com/users/bagerard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bagerard/subscriptions", "organizations_url": "https://api.github.com/users/bagerard/orgs", "repos_url": "https://api.github.com/users/bagerard/repos", "events_url": "https://api.github.com/users/bagerard/events{/privacy}", "received_events_url": "https://api.github.com/users/bagerard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-08-11T07:48:10Z", "updated_at": "2017-09-13T12:24:28Z", "closed_at": "2016-08-11T08:14:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\nI'm trying to subclass Proxy in order to add some attribute that I could access without calling the proxied object.\n\n```\nfrom lazy_object_proxy import Proxy\n\nclass Foo:\n    pass\n\nclass LazyProxy(Proxy):\n    def __init__(self, func, **lazy_attr):\n        Proxy.__init__(self, func)\n        for attr, val in lazy_attr.items():\n            object.__setattr__(self, attr, val)\n\nproxy = LazyProxy(lambda: Foo(), name='bar')  # TypeError: can't apply this __setattr__ to Proxy object\n```\n\nCould you let me know if there is a way to achieve this?\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/14", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/14/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/14/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/14", "id": 146357415, "node_id": "MDU6SXNzdWUxNDYzNTc0MTU=", "number": 14, "title": "Override factory or wrapped instance?", "user": {"login": "Tinche", "id": 1909233, "node_id": "MDQ6VXNlcjE5MDkyMzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1909233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tinche", "html_url": "https://github.com/Tinche", "followers_url": "https://api.github.com/users/Tinche/followers", "following_url": "https://api.github.com/users/Tinche/following{/other_user}", "gists_url": "https://api.github.com/users/Tinche/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tinche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tinche/subscriptions", "organizations_url": "https://api.github.com/users/Tinche/orgs", "repos_url": "https://api.github.com/users/Tinche/repos", "events_url": "https://api.github.com/users/Tinche/events{/privacy}", "received_events_url": "https://api.github.com/users/Tinche/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-04-06T15:53:47Z", "updated_at": "2016-04-06T18:25:56Z", "closed_at": "2016-04-06T18:25:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\n\nthis isn't really a bug report, just a question. Is it possible to override the factory function before the proxy has been called the first time? Main use case would be test fixtures.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/13", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/13/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/13/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/13", "id": 119399533, "node_id": "MDU6SXNzdWUxMTkzOTk1MzM=", "number": 13, "title": "Python 3.5 compatibility", "user": {"login": "sandrotosi", "id": 346648, "node_id": "MDQ6VXNlcjM0NjY0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/346648?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandrotosi", "html_url": "https://github.com/sandrotosi", "followers_url": "https://api.github.com/users/sandrotosi/followers", "following_url": "https://api.github.com/users/sandrotosi/following{/other_user}", "gists_url": "https://api.github.com/users/sandrotosi/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandrotosi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandrotosi/subscriptions", "organizations_url": "https://api.github.com/users/sandrotosi/orgs", "repos_url": "https://api.github.com/users/sandrotosi/repos", "events_url": "https://api.github.com/users/sandrotosi/events{/privacy}", "received_events_url": "https://api.github.com/users/sandrotosi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-30T00:30:19Z", "updated_at": "2015-11-30T01:20:54Z", "closed_at": "2015-11-30T01:20:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! The package doesnt declare compatibility with python 3.5, I'm wondering if it's just missing that tag or it's actually not compatible for real, and so this bug would be to ask for such compat.\n\nThanks\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/12", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/12/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/12/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/12", "id": 113985706, "node_id": "MDU6SXNzdWUxMTM5ODU3MDY=", "number": 12, "title": "Implement a regular (non-lazy) proxy, which lazy proxy inherits from?", "user": {"login": "neRok00", "id": 8054548, "node_id": "MDQ6VXNlcjgwNTQ1NDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8054548?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neRok00", "html_url": "https://github.com/neRok00", "followers_url": "https://api.github.com/users/neRok00/followers", "following_url": "https://api.github.com/users/neRok00/following{/other_user}", "gists_url": "https://api.github.com/users/neRok00/gists{/gist_id}", "starred_url": "https://api.github.com/users/neRok00/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neRok00/subscriptions", "organizations_url": "https://api.github.com/users/neRok00/orgs", "repos_url": "https://api.github.com/users/neRok00/repos", "events_url": "https://api.github.com/users/neRok00/events{/privacy}", "received_events_url": "https://api.github.com/users/neRok00/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-10-29T05:54:48Z", "updated_at": "2015-11-06T06:53:44Z", "closed_at": "2015-11-06T06:53:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was looking for a proxy object, but I don't require the lazy functionality, and this package implements a rather good proxy. I have succeeded with the following code, but it only works with the `slots.Proxy` class, and doesn't seem to with the others. Perhaps it would be a good feature to implement a regular proxy, then the lazy proxy inherits and upgrades it to add the lazy functionality?\n\n```\nfrom lazy_object_proxy.slots import Proxy as LazyProxy\n\nclass RegularProxy(LazyProxy):\n\n    def __init__(self, target):\n        object.__setattr__(self, '__target__', target)\n\n    def __repr__(self):\n        target = object.__getattribute__(self, '__target__')\n        return '<{0} at {1} wrapping {2}>'.format(\n            type(self).__name__, id(self), target\n        )\n```\n\nBTW, I could have called `LazyProxy(lambda: target)`, or have changed the `__init__` above to something like `super().__init__(lambda: target)`, but it just seems like a bunch of extra work having to create and run a lambda function when I don't actually require it.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/9", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/9/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/9/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/9", "id": 94527885, "node_id": "MDU6SXNzdWU5NDUyNzg4NQ==", "number": 9, "title": "isinstance throws a TypeError with proxied objects", "user": {"login": "ceridwen", "id": 8268008, "node_id": "MDQ6VXNlcjgyNjgwMDg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8268008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ceridwen", "html_url": "https://github.com/ceridwen", "followers_url": "https://api.github.com/users/ceridwen/followers", "following_url": "https://api.github.com/users/ceridwen/following{/other_user}", "gists_url": "https://api.github.com/users/ceridwen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ceridwen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ceridwen/subscriptions", "organizations_url": "https://api.github.com/users/ceridwen/orgs", "repos_url": "https://api.github.com/users/ceridwen/repos", "events_url": "https://api.github.com/users/ceridwen/events{/privacy}", "received_events_url": "https://api.github.com/users/ceridwen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-07-12T02:58:23Z", "updated_at": "2015-07-14T02:20:19Z", "closed_at": "2015-07-14T02:20:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a minimal example to recreate the error.\n\n``` python\nPython 3.4.3 (default, Mar 26 2015, 22:03:40) \n[GCC 4.9.2] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import lazy_object_proxy\n>>> class P(lazy_object_proxy.Proxy): pass\n... \n>>> P\n<class '__main__.P'>\n>>> class C: pass\n... \n>>> A = P(C)\n>>> A\n<P at 0x7f0e146237e0 with factory <class '__main__.C'>>\n>>> isinstance(dict, A)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: isinstance() arg 2 must be a type or tuple of types\n```\n\nWith wrapt's ObjectProxy, isinstance correctly returns false rather than throwing a TypeError.\n\n``` python\nPython 3.4.3 (default, Mar 26 2015, 22:03:40) \n[GCC 4.9.2] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import wrapt\n>>> class P(wrapt.ObjectProxy): pass\n... \n>>> P\n<class '__main__.P'>\n>>> class C: pass\n... \n>>> A = P(C)\n>>> A\n<P at 0x7fac07cf2bc8 for type at 0x295fdf8>\n>>> isinstance(dict, A)\nFalse\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/7", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/7/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/7/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/7", "id": 92193729, "node_id": "MDU6SXNzdWU5MjE5MzcyOQ==", "number": 7, "title": "Support for pickling", "user": {"login": "alvinchow86", "id": 5131063, "node_id": "MDQ6VXNlcjUxMzEwNjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/5131063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alvinchow86", "html_url": "https://github.com/alvinchow86", "followers_url": "https://api.github.com/users/alvinchow86/followers", "following_url": "https://api.github.com/users/alvinchow86/following{/other_user}", "gists_url": "https://api.github.com/users/alvinchow86/gists{/gist_id}", "starred_url": "https://api.github.com/users/alvinchow86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alvinchow86/subscriptions", "organizations_url": "https://api.github.com/users/alvinchow86/orgs", "repos_url": "https://api.github.com/users/alvinchow86/repos", "events_url": "https://api.github.com/users/alvinchow86/events{/privacy}", "received_events_url": "https://api.github.com/users/alvinchow86/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-06-30T20:36:07Z", "updated_at": "2015-07-02T20:24:19Z", "closed_at": "2015-07-02T20:23:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I noticed that pickling a `Proxy` class does not always work, depending on what the underlying object is. This is in Python 2.7.\n- Typical classes, strings, integers, floats work OK.\n- datetime returns an error like `can't pickle datetime objects`\n- Decimal returns `a class that defines __slots__ without defining __getstate__ cannot be pickled`\n- dictionaries/lists don't raise an error when pickling, but when unpickled they are empty\n\n``` python\nfrom datetime import datetime\nfrom lazy_object_proxy import Proxy\nimport pickle\n\np = Proxy(lambda: datetime(2015, 1, 2))\npickled = pickle.dumps(p, -1)\nprint pickle.loads(pickled)\n```\n\n``` bash\n...venv/lib/python2.7/copy_reg.pyc in _reduce_ex(self, proto)\n     68     else:\n     69         if base is self.__class__:\n---> 70             raise TypeError, \"can't pickle %s objects\" % base.__name__\n     71         state = base(self)\n     72     args = (self.__class__, base, state)\n\nTypeError: can't pickle datetime objects\n```\n\nFor me. the desired behavior would be to immediately evaluate the wrapped object and pickle that object. After reading a bit on the pickle documentation, I was able to get something to work for all the types I've encountered in my application - basically had to add a `__reduce_ex()__` and `__reduce()__` method on my `Proxy` subclass, with a couple of special cases for certain types. (The more important one was **reduce_ex** as that is called first). If you're interested I could share this code. That said I'm not an expert on Python's pickle functionality and why it seems to be so different for different data types.\n\nJust wanted to bring this up, I'm not sure if this should be something built into the library or left as something for users to implement in their subclasses (maybe with some documentation on how to do this).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/6", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/6/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/6/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/6", "id": 92190678, "node_id": "MDU6SXNzdWU5MjE5MDY3OA==", "number": 6, "title": "Memory leak with C-extension?", "user": {"login": "alvinchow86", "id": 5131063, "node_id": "MDQ6VXNlcjUxMzEwNjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/5131063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alvinchow86", "html_url": "https://github.com/alvinchow86", "followers_url": "https://api.github.com/users/alvinchow86/followers", "following_url": "https://api.github.com/users/alvinchow86/following{/other_user}", "gists_url": "https://api.github.com/users/alvinchow86/gists{/gist_id}", "starred_url": "https://api.github.com/users/alvinchow86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alvinchow86/subscriptions", "organizations_url": "https://api.github.com/users/alvinchow86/orgs", "repos_url": "https://api.github.com/users/alvinchow86/repos", "events_url": "https://api.github.com/users/alvinchow86/events{/privacy}", "received_events_url": "https://api.github.com/users/alvinchow86/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-06-30T20:24:04Z", "updated_at": "2015-07-26T17:45:17Z", "closed_at": "2015-07-02T20:23:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I suspect there might be a memory leak with the C-extension verion of `Proxy`. I have some code (in a Django app) which creates a large number of Proxy objects that point to simple Python objects (larg-ish strings). These objects are placed into a list which is periodically cleared (after they are \"consumed\" by application code), so they should be garbage-allocated. However, I noticed that my Python process started growing continually (from about 300mb to 1gb to 2gb, and so on).\n\nI then switched to the \"simple\" and the \"slots\" Python implementations and the memory issues went away (my process memory usage would fluctuate up and down but remain pretty stable).\n\nWould be happy to provide more details or try to create a test case! (It is also possible I'm doing something wrong in my code)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/3", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/3/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/3/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/3", "id": 60456911, "node_id": "MDU6SXNzdWU2MDQ1NjkxMQ==", "number": 3, "title": "Exceptions from Factory", "user": {"login": "ztane", "id": 704200, "node_id": "MDQ6VXNlcjcwNDIwMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/704200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ztane", "html_url": "https://github.com/ztane", "followers_url": "https://api.github.com/users/ztane/followers", "following_url": "https://api.github.com/users/ztane/following{/other_user}", "gists_url": "https://api.github.com/users/ztane/gists{/gist_id}", "starred_url": "https://api.github.com/users/ztane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ztane/subscriptions", "organizations_url": "https://api.github.com/users/ztane/orgs", "repos_url": "https://api.github.com/users/ztane/repos", "events_url": "https://api.github.com/users/ztane/events{/privacy}", "received_events_url": "https://api.github.com/users/ztane/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-03-10T06:28:01Z", "updated_at": "2015-03-10T14:34:42Z", "closed_at": "2015-03-10T14:34:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "My factory raised an exception by accident; the factory was retried recursively until the recursion limit was hit; maybe an exception should be thrown earlier.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/2", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/2/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/2/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/2", "id": 51371614, "node_id": "MDU6SXNzdWU1MTM3MTYxNA==", "number": 2, "title": "Add testcases for uninitialised proxy", "user": {"login": "ionelmc", "id": 129501, "node_id": "MDQ6VXNlcjEyOTUwMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/129501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ionelmc", "html_url": "https://github.com/ionelmc", "followers_url": "https://api.github.com/users/ionelmc/followers", "following_url": "https://api.github.com/users/ionelmc/following{/other_user}", "gists_url": "https://api.github.com/users/ionelmc/gists{/gist_id}", "starred_url": "https://api.github.com/users/ionelmc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ionelmc/subscriptions", "organizations_url": "https://api.github.com/users/ionelmc/orgs", "repos_url": "https://api.github.com/users/ionelmc/repos", "events_url": "https://api.github.com/users/ionelmc/events{/privacy}", "received_events_url": "https://api.github.com/users/ionelmc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-12-09T00:15:55Z", "updated_at": "2014-12-09T13:25:17Z", "closed_at": "2014-12-09T13:25:17Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Basically test that `Proxy.__new__(Proxy)` doesn't segfault if used and raises ValueError(missing **factory** blabla) instead.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/1", "repository_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy", "labels_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/1/comments", "events_url": "https://api.github.com/repos/ionelmc/python-lazy-object-proxy/issues/1/events", "html_url": "https://github.com/ionelmc/python-lazy-object-proxy/issues/1", "id": 51371474, "node_id": "MDU6SXNzdWU1MTM3MTQ3NA==", "number": 1, "title": "Add benchmarks in test suite", "user": {"login": "ionelmc", "id": 129501, "node_id": "MDQ6VXNlcjEyOTUwMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/129501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ionelmc", "html_url": "https://github.com/ionelmc", "followers_url": "https://api.github.com/users/ionelmc/followers", "following_url": "https://api.github.com/users/ionelmc/following{/other_user}", "gists_url": "https://api.github.com/users/ionelmc/gists{/gist_id}", "starred_url": "https://api.github.com/users/ionelmc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ionelmc/subscriptions", "organizations_url": "https://api.github.com/users/ionelmc/orgs", "repos_url": "https://api.github.com/users/ionelmc/repos", "events_url": "https://api.github.com/users/ionelmc/events{/privacy}", "received_events_url": "https://api.github.com/users/ionelmc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-12-09T00:14:11Z", "updated_at": "2015-04-10T22:59:55Z", "closed_at": "2015-04-10T22:59:55Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Using https://github.com/ionelmc/pytest-benchmark, hehe.\n", "performed_via_github_app": null, "score": 1.0}]}