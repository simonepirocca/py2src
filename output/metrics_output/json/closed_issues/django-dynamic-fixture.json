{"total_count": 54, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/133", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/133/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/133/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/133", "id": 642063114, "node_id": "MDU6SXNzdWU2NDIwNjMxMTQ=", "number": 133, "title": "Support for Generated Columns (Postgres 12) with SearchVectorField", "user": {"login": "spirkaa", "id": 2718761, "node_id": "MDQ6VXNlcjI3MTg3NjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/2718761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spirkaa", "html_url": "https://github.com/spirkaa", "followers_url": "https://api.github.com/users/spirkaa/followers", "following_url": "https://api.github.com/users/spirkaa/following{/other_user}", "gists_url": "https://api.github.com/users/spirkaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/spirkaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spirkaa/subscriptions", "organizations_url": "https://api.github.com/users/spirkaa/orgs", "repos_url": "https://api.github.com/users/spirkaa/repos", "events_url": "https://api.github.com/users/spirkaa/events{/privacy}", "received_events_url": "https://api.github.com/users/spirkaa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-19T15:47:51Z", "updated_at": "2020-06-19T16:29:43Z", "closed_at": "2020-06-19T16:27:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "django==2.2.13\r\ndjango-dynamic-fixture==3.1.0\r\n\r\n[Generated Columns](https://www.postgresql.org/docs/current/ddl-generated-columns.html) are introduced with Postgres 12.\r\n> A generated column cannot be written to directly. In INSERT or UPDATE commands, a value cannot be specified for a generated column, but the keyword DEFAULT may be specified.\r\n\r\nCurrent version of DDF is incompotible with this type of fields, because even with DDF_IGNORE_FIELDS = ['search_vector'] there is instert of None in this field. This field must be excluded altogether from generated SQL or keyword DEFAULT must be used.\r\n\r\n```\r\nargs = ('INSERT INTO \"myapp_organisation\" (\"created\", \"modified\", \"name\", \"search_vector\") VALUES (%s, %s, %s, %s) RETURNING \"...(datetime.datetime(2020, 6, 19, 18, 30, 41, 249585), datetime.dat\r\netime(2020, 6, 19, 18, 30, 41, 249598), 'test', None))`\r\n`django_dynamic_fixture.ddf.BadDataError: ('apps.myapp.models.Organisation', ProgrammingError('cannot insert into column \"search_vector\"\\nDETAIL:  Column \"search_vector\" is a generated column.\\n'))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/122", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/122/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/122/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/122", "id": 554590562, "node_id": "MDU6SXNzdWU1NTQ1OTA1NjI=", "number": 122, "title": "Broken Postgres JSONField", "user": {"login": "andrkhr", "id": 37485893, "node_id": "MDQ6VXNlcjM3NDg1ODkz", "avatar_url": "https://avatars2.githubusercontent.com/u/37485893?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrkhr", "html_url": "https://github.com/andrkhr", "followers_url": "https://api.github.com/users/andrkhr/followers", "following_url": "https://api.github.com/users/andrkhr/following{/other_user}", "gists_url": "https://api.github.com/users/andrkhr/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrkhr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrkhr/subscriptions", "organizations_url": "https://api.github.com/users/andrkhr/orgs", "repos_url": "https://api.github.com/users/andrkhr/repos", "events_url": "https://api.github.com/users/andrkhr/events{/privacy}", "received_events_url": "https://api.github.com/users/andrkhr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-24T07:47:15Z", "updated_at": "2020-03-02T02:40:08Z", "closed_at": "2020-03-02T02:40:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! In version 3 it broke Postgres JSONField :(\r\n\r\nddf 3.0.2\r\n\r\n```python\r\n# model.py\r\nclass Record(models.Model):\r\n    data = JSONField(default=dict)\r\n\r\n# test.py\r\nN(Record, data={'a': 1})\r\n```\r\n\r\ngetting an error\r\n```\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n~/venv/staff.3.8.1/lib/python3.8/site-packages/django_dynamic_fixture/ddf.py in set_data_for_a_field(self, model_class, _DynamicFixture__instance, _DynamicFixture__field, persist_dependencies, **kwargs)\r\n    382             try:\r\n--> 383                 data = self._process_field_with_customized_fixture(__instance, __field, config, persist_dependencies)\r\n    384             except PendingField:\r\n\r\n~/venv/staff.3.8.1/lib/python3.8/site-packages/django_dynamic_fixture/ddf.py in _process_field_with_customized_fixture(self, instance, field, fixture, persist_dependencies)\r\n    320         if isinstance(fixture, DynamicFixture): # DynamicFixture (F)\r\n--> 321             data = self._get_data_from_custom_dynamic_fixture(field, fixture, persist_dependencies)\r\n    322         elif isinstance(fixture, Copier): # Copier (C)\r\n\r\n~/venv/staff.3.8.1/lib/python3.8/site-packages/django_dynamic_fixture/ddf.py in _get_data_from_custom_dynamic_fixture(self, field, fixture, persist_dependencies)\r\n    282         \"return data of a Dynamic Fixture: field=F(...)\"\r\n--> 283         next_model = get_related_model(field)\r\n    284         if persist_dependencies:\r\n\r\n~/venv/staff.3.8.1/lib/python3.8/site-packages/django_dynamic_fixture/django_helper.py in get_related_model(field)\r\n    148 def get_related_model(field):\r\n--> 149     return field.remote_field.model if hasattr(field, 'remote_field') else field.rel.to\r\n    150 \r\n\r\nAttributeError: 'NoneType' object has no attribute 'model'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/121", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/121/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/121/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/121", "id": 553451878, "node_id": "MDU6SXNzdWU1NTM0NTE4Nzg=", "number": 121, "title": "Nullable field with a default should get a value even with DDF_FILL_NULLABLE_FIELDS=False", "user": {"login": "jklaiho", "id": 54501, "node_id": "MDQ6VXNlcjU0NTAx", "avatar_url": "https://avatars0.githubusercontent.com/u/54501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jklaiho", "html_url": "https://github.com/jklaiho", "followers_url": "https://api.github.com/users/jklaiho/followers", "following_url": "https://api.github.com/users/jklaiho/following{/other_user}", "gists_url": "https://api.github.com/users/jklaiho/gists{/gist_id}", "starred_url": "https://api.github.com/users/jklaiho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jklaiho/subscriptions", "organizations_url": "https://api.github.com/users/jklaiho/orgs", "repos_url": "https://api.github.com/users/jklaiho/repos", "events_url": "https://api.github.com/users/jklaiho/events{/privacy}", "received_events_url": "https://api.github.com/users/jklaiho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-22T10:36:47Z", "updated_at": "2020-03-02T02:40:12Z", "closed_at": "2020-03-02T02:40:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "One of the models in our app has a `NullBooleanField` with `default=True`. Back in DDF 2.0.0, it used to reliably get a `True` value when creating instances with `G()` without having that model field explicitly specified.\r\n\r\nTurns out this was not (primarily) due to the default value, but the fact that `DDF_FILL_NULLABLE_FIELDS` used to be `True` by default. We were unaware of this and were very confused when upgrading to DDF 3.0.2 started breaking a whole bunch of tests that relied on the old behavior, until stepping through the logic with `pdb` revealed the culprit:\r\n\r\nhttps://github.com/paulocheque/django-dynamic-fixture/blob/bd253b5ef4e94209dbee5e448710cfc17bd03dad/django_dynamic_fixture/ddf.py#L362-L370\r\n\r\nThe combined \"nullability/should fill nullable fields\" check happens before the default value check, and actually did so in 2.0.0, only working for us thanks to `DDF_FILL_NULLABLE_FIELDS` being `True` back then.\r\n\r\nI set that setting back to `True` in 3.0.2 and it fixed our immediate issue, but it got me thinking: if a field has a default value set, it seems to me that DDF should respect that default before checking for nullability. Having a default value is rather a strong signal from a developer that if left unspecified, this is the value that the field should have. (And that is how it works outside testing when creating objects without specifying values for those fields.) So basically, in the above section of code, the logic on lines 364-365 should be moved after lines 366-370 and modified accordingly.\r\n\r\nThis is a backwards-incompatible change in itself, but since 3.0.0 has other ones and is still young and not widely adopted, I think now would be a great time to do it for 3.0.3.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/120", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/120/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/120/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/120", "id": 548394332, "node_id": "MDU6SXNzdWU1NDgzOTQzMzI=", "number": 120, "title": "Is it required to set ForeignKey relationship explicitly for G?", "user": {"login": "zmrenwu", "id": 13174219, "node_id": "MDQ6VXNlcjEzMTc0MjE5", "avatar_url": "https://avatars2.githubusercontent.com/u/13174219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zmrenwu", "html_url": "https://github.com/zmrenwu", "followers_url": "https://api.github.com/users/zmrenwu/followers", "following_url": "https://api.github.com/users/zmrenwu/following{/other_user}", "gists_url": "https://api.github.com/users/zmrenwu/gists{/gist_id}", "starred_url": "https://api.github.com/users/zmrenwu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zmrenwu/subscriptions", "organizations_url": "https://api.github.com/users/zmrenwu/orgs", "repos_url": "https://api.github.com/users/zmrenwu/repos", "events_url": "https://api.github.com/users/zmrenwu/events{/privacy}", "received_events_url": "https://api.github.com/users/zmrenwu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-01-11T07:20:43Z", "updated_at": "2020-03-02T02:40:18Z", "closed_at": "2020-03-02T02:40:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thank for contributors of this awesome project. Everything works fine before. However, when I upgrade to 3.x, I got IntegrityError when run tests that passed before.\r\n\r\nMy model like this:\r\n```python\r\nclass Category(TimeStampedModel):\r\n    creator = models.ForeignKey(settings.AUTH_USER_MODEL, verbose_name=_('creator'), on_delete=models.CASCADE)\r\n```\r\n\r\nThe test code:\r\n```\r\ndef setUp(self):\r\n    self.category = G(Category)\r\n```\r\n\r\nError reported by pytest:\r\n```\r\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x00000270FF45C558>\r\nquery = 'INSERT INTO \"blog_category\" (\"created\", \"modified\", \"name\", \"title\", \"slug\", \"description\", \"cover\", \"cover_caption\", \"creator_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'\r\nparams = ['2020-01-11 06:32:56.622249', '2020-01-11 06:32:56.622249', 'cate1', '5', '5', '5', ...]\r\n\r\n    def execute(self, query, params=None):\r\n        if params is None:\r\n            return Database.Cursor.execute(self, query)\r\n        query = self.convert_query(query)\r\n>       return Database.Cursor.execute(self, query, params)\r\nE       django_dynamic_fixture.ddf.BadDataError: ('blog.models.Category', IntegrityError('NOT NULL constraint failed: blog_category.creator_id'))\r\n```\r\n\r\nHow could I fix this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/119", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/119/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/119/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/119", "id": 548236040, "node_id": "MDU6SXNzdWU1NDgyMzYwNDA=", "number": 119, "title": "transaction  'atomic' block error", "user": {"login": "uhurusurfa", "id": 13331506, "node_id": "MDQ6VXNlcjEzMzMxNTA2", "avatar_url": "https://avatars1.githubusercontent.com/u/13331506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uhurusurfa", "html_url": "https://github.com/uhurusurfa", "followers_url": "https://api.github.com/users/uhurusurfa/followers", "following_url": "https://api.github.com/users/uhurusurfa/following{/other_user}", "gists_url": "https://api.github.com/users/uhurusurfa/gists{/gist_id}", "starred_url": "https://api.github.com/users/uhurusurfa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uhurusurfa/subscriptions", "organizations_url": "https://api.github.com/users/uhurusurfa/orgs", "repos_url": "https://api.github.com/users/uhurusurfa/repos", "events_url": "https://api.github.com/users/uhurusurfa/events{/privacy}", "received_events_url": "https://api.github.com/users/uhurusurfa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-10T18:52:12Z", "updated_at": "2020-03-08T16:37:06Z", "closed_at": "2020-03-02T02:29:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "My project has been using DDF for almost a year now and has worked great.\r\nJust tried ugrading to 3.* version and this error shown below is thrown.\r\nIt seems to happen with most invocations of the G() constructor  running Django 2.2.8 and Python 3.7.5 (works fine with DDF 2.0.0). Has anyone got any ideas?\r\n\r\n`   create_permission = G(ServicePermission, service=self.service, action=\"create\")\r\n  vi +6    <string>  # get\r\n    \r\n  vi +142  /root/.local/share/virtualenvs/code-_Py8Si6I/lib/python3.7/site-packages/django_dynamic_fixture/__init__.py  # _get\r\n    return d.get(model, lesson=lesson, **kwargs)\r\n  vi +605  /root/.local/share/virtualenvs/code-_Py8Si6I/lib/python3.7/site-packages/django_dynamic_fixture/ddf.py  # get\r\n    six.reraise(BadDataError, BadDataError(get_unique_model_name(model_class), e), sys.exc_info()[2])\r\n  vi +695  /root/.local/share/virtualenvs/code-_Py8Si6I/lib/python3.7/site-packages/six.py  # reraise\r\n    raise value.with_traceback(tb)\r\n  vi +596  /root/.local/share/virtualenvs/code-_Py8Si6I/lib/python3.7/site-packages/django_dynamic_fixture/ddf.py  # get\r\n    self._save_the_instance(instance)\r\n  vi +573  /root/.local/share/virtualenvs/code-_Py8Si6I/lib/python3.7/site-packages/django_dynamic_fixture/ddf.py  # _save_the_instance\r\n    instance.save()\r\n  vi +49   nexus/models/base.py  # save\r\n    super().save(*args, **kwargs)\r\n  vi +741  /root/.local/share/virtualenvs/code-_Py8Si6I/lib/python3.7/site-packages/django/db/models/base.py  # save\r\n    force_update=force_update, update_fields=update_fields)\r\n  vi +779  /root/.local/share/virtualenvs/code-_Py8Si6I/lib/python3.7/site-packages/django/db/models/base.py  # save_base\r\n    force_update, using, update_fields,\r\n  vi +851  /root/.local/share/virtualenvs/code-_Py8Si6I/lib/python3.7/site-packages/django/db/models/base.py  # _save_table\r\n    forced_update)\r\n  vi +900  /root/.local/share/virtualenvs/code-_Py8Si6I/lib/python3.7/site-packages/django/db/models/base.py  # _do_update\r\n    return filtered._update(values) > 0\r\n  vi +760  /root/.local/share/virtualenvs/code-_Py8Si6I/lib/python3.7/site-packages/django/db/models/query.py  # _update\r\n    return query.get_compiler(self.db).execute_sql(CURSOR)\r\n  vi +1462 /root/.local/share/virtualenvs/code-_Py8Si6I/lib/python3.7/site-packages/django/db/models/sql/compiler.py  # execute_sql\r\n    cursor = super().execute_sql(result_type)\r\n  vi +1133 /root/.local/share/virtualenvs/code-_Py8Si6I/lib/python3.7/site-packages/django/db/models/sql/compiler.py  # execute_sql\r\n    cursor.execute(sql, params)\r\n  vi +67   /root/.local/share/virtualenvs/code-_Py8Si6I/lib/python3.7/site-packages/django/db/backends/utils.py  # execute\r\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\r\n  vi +76   /root/.local/share/virtualenvs/code-_Py8Si6I/lib/python3.7/site-packages/django/db/backends/utils.py  # _execute_with_wrappers\r\n    return executor(sql, params, many, context)\r\n  vi +79   /root/.local/share/virtualenvs/code-_Py8Si6I/lib/python3.7/site-packages/django/db/backends/utils.py  # _execute\r\n    self.db.validate_no_broken_transaction()\r\n  vi +438  /root/.local/share/virtualenvs/code-_Py8Si6I/lib/python3.7/site-packages/django/db/backends/base/base.py  # validate_no_broken_transaction\r\n    \"An error occurred in the current transaction. You can't \"\r\ndjango_dynamic_fixture.ddf.BadDataError: ('nexus.models.security.ServicePermission', TransactionManagementError(\"An error occurred in the current transaction. You can't execute queries until the end of the 'atomic' block.\"))`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/116", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/116/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/116/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/116", "id": 547396520, "node_id": "MDU6SXNzdWU1NDczOTY1MjA=", "number": 116, "title": "InvalidConfigurationError when creating an object with a primary key", "user": {"login": "andrkhr", "id": 37485893, "node_id": "MDQ6VXNlcjM3NDg1ODkz", "avatar_url": "https://avatars2.githubusercontent.com/u/37485893?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrkhr", "html_url": "https://github.com/andrkhr", "followers_url": "https://api.github.com/users/andrkhr/followers", "following_url": "https://api.github.com/users/andrkhr/following{/other_user}", "gists_url": "https://api.github.com/users/andrkhr/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrkhr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrkhr/subscriptions", "organizations_url": "https://api.github.com/users/andrkhr/orgs", "repos_url": "https://api.github.com/users/andrkhr/repos", "events_url": "https://api.github.com/users/andrkhr/events{/privacy}", "received_events_url": "https://api.github.com/users/andrkhr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-09T10:42:01Z", "updated_at": "2020-01-10T12:16:39Z", "closed_at": "2020-01-10T12:16:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Tests fall when trying to create objects with a primary key.\r\nSample Models and Test\r\n\r\n```python\r\n# models.py\r\nclass Course(models.Model):\r\n    name = models.CharField(max_length=20)\r\n\r\n\r\nclass Lesson(models.Model):\r\n    name = models.CharField(max_length=20)\r\n\r\n\r\nclass CourseLesson(models.Model):\r\n    course = models.ForeignKey(Course, on_delete=models.CASCADE)\r\n    lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE)\r\n\r\n# test.py\r\ndef test_create_course_lesson():\r\n    course = G(Course)\r\n    lesson = G(Lesson)\r\n\r\n    lesson_course = G(CourseLesson, course=course, lesson=lesson)\r\n\r\n    assert lesson_course.id is not None\r\n```\r\n\r\nI get an error\r\n\r\n```\r\n============================================================================================= FAILURES ==============================================================================================\r\n_____________________________________________________________________________________ test_create_course_lesson _____________________________________________________________________________________\r\n\r\n    def test_create_course_lesson():\r\n        course = G(Course)\r\n        lesson = G(Lesson)\r\n    \r\n>       lesson_course = G(CourseLesson, course=course, lesson=lesson)\r\n\r\nhome/tests.py:10: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n<string>:6: in get\r\n    ???\r\n../env/dj3/lib/python3.8/site-packages/django_dynamic_fixture/__init__.py:142: in _get\r\n    return d.get(model, lesson=lesson, **kwargs)\r\n../env/dj3/lib/python3.8/site-packages/django_dynamic_fixture/ddf.py:585: in get\r\n    instance = self.new(model_class, lesson=lesson, **kwargs)\r\n../env/dj3/lib/python3.8/site-packages/django_dynamic_fixture/ddf.py:477: in new\r\n    configuration = self._configure_params(model_class, lesson, **kwargs)\r\n../env/dj3/lib/python3.8/site-packages/django_dynamic_fixture/ddf.py:457: in _configure_params\r\n    configuration_custom = library.get_configuration(model_class, name=lesson)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <django_dynamic_fixture.ddf.DDFLibrary object at 0x1080f5ee0>, model_class = <class 'home.models.CourseLesson'>, name = <Lesson: Lesson object (1)>\r\n\r\n    def get_configuration(self, model_class, name=None):\r\n        if name is None:\r\n            name = self.DEFAULT_KEY\r\n        # copy is important because this dict will be updated every time in the algorithm.\r\n        config = self.configs.get(model_class, {})\r\n        if name != self.DEFAULT_KEY and name not in config.keys():\r\n>           raise InvalidConfigurationError('There is no lesson for model %s with the name \"%s\"' % (get_unique_model_name(model_class), name))\r\nE           django_dynamic_fixture.ddf.InvalidConfigurationError: There is no lesson for model home.models.CourseLesson with the name \"Lesson object (1)\"\r\n\r\n../env/dj3/lib/python3.8/site-packages/django_dynamic_fixture/ddf.py:221: InvalidConfigurationError\r\n\r\n```\r\ndjango                 3.0.2\r\ndjango-dynamic-fixture 3.0.1\r\npytest                 5.3.2\r\npytest-django          3.7.0\r\n\r\nOn version django-dynamic-fixture 2.0.0 everything works fine\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/96", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/96/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/96/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/96", "id": 474000749, "node_id": "MDU6SXNzdWU0NzQwMDA3NDk=", "number": 96, "title": "Python 3.5: type hints for N() and G() outputs", "user": {"login": "Kern3l", "id": 430658, "node_id": "MDQ6VXNlcjQzMDY1OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/430658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kern3l", "html_url": "https://github.com/Kern3l", "followers_url": "https://api.github.com/users/Kern3l/followers", "following_url": "https://api.github.com/users/Kern3l/following{/other_user}", "gists_url": "https://api.github.com/users/Kern3l/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kern3l/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kern3l/subscriptions", "organizations_url": "https://api.github.com/users/Kern3l/orgs", "repos_url": "https://api.github.com/users/Kern3l/repos", "events_url": "https://api.github.com/users/Kern3l/events{/privacy}", "received_events_url": "https://api.github.com/users/Kern3l/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-29T11:34:52Z", "updated_at": "2020-01-04T01:25:52Z", "closed_at": "2020-01-04T01:25:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\n\r\nI know that the support for new Python is not there yet, so I'm not making it a PR. Instead I put here how it can be achieved to have type hints for `N()` and `G()` functions (super useful for using the lib with an IDE that uses type hints).\r\n\r\nIn `__init__.py`, at the top:\r\n```\r\nimport typing\r\n\r\n(...)\r\n\r\nINSTANCE_TYPE = typing.TypeVar('INSTANCE')\r\n```\r\nThen:\r\n```\r\ndef new(model: typing.Type[INSTANCE_TYPE], shelve=False, n=1, persist_dependencies=True, **kwargs) -> INSTANCE_TYPE:\r\n```\r\n```\r\ndef get(model: typing.Type[INSTANCE_TYPE], shelve=False, n=1, **kwargs) -> INSTANCE_TYPE:\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/95", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/95/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/95/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/95", "id": 358800648, "node_id": "MDU6SXNzdWUzNTg4MDA2NDg=", "number": 95, "title": "Support for django.contrib.postgres.fields.JSONField", "user": {"login": "variable", "id": 558175, "node_id": "MDQ6VXNlcjU1ODE3NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/558175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/variable", "html_url": "https://github.com/variable", "followers_url": "https://api.github.com/users/variable/followers", "following_url": "https://api.github.com/users/variable/following{/other_user}", "gists_url": "https://api.github.com/users/variable/gists{/gist_id}", "starred_url": "https://api.github.com/users/variable/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/variable/subscriptions", "organizations_url": "https://api.github.com/users/variable/orgs", "repos_url": "https://api.github.com/users/variable/repos", "events_url": "https://api.github.com/users/variable/events{/privacy}", "received_events_url": "https://api.github.com/users/variable/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-10T21:24:57Z", "updated_at": "2020-01-04T01:26:47Z", "closed_at": "2020-01-04T01:26:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just wondering if this is in the roadmap supporting this field? Currently I am getting\r\n\r\n`django_dynamic_fixture.ddf.UnsupportedFieldError: core.models.Invoice.raw_data (django.contrib.postgres.fields.jsonb.JSONField)`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/93", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/93/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/93/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/93", "id": 353139972, "node_id": "MDU6SXNzdWUzNTMxMzk5NzI=", "number": 93, "title": "Relation Not Created For Reverse Many To One Managers", "user": {"login": "bisby", "id": 619700, "node_id": "MDQ6VXNlcjYxOTcwMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/619700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bisby", "html_url": "https://github.com/bisby", "followers_url": "https://api.github.com/users/bisby/followers", "following_url": "https://api.github.com/users/bisby/following{/other_user}", "gists_url": "https://api.github.com/users/bisby/gists{/gist_id}", "starred_url": "https://api.github.com/users/bisby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bisby/subscriptions", "organizations_url": "https://api.github.com/users/bisby/orgs", "repos_url": "https://api.github.com/users/bisby/repos", "events_url": "https://api.github.com/users/bisby/events{/privacy}", "received_events_url": "https://api.github.com/users/bisby/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-22T21:53:35Z", "updated_at": "2020-01-04T15:23:30Z", "closed_at": "2020-01-04T15:23:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "With models like such:\r\n```\r\nclass User(models.Model):\r\n   name = models.CharField(max_length=100)\r\n\r\nclass Comment(models.Model):\r\n   text = models.TextField()\r\n   user = models.ForeignKey(User, related_name=\"comments\")\r\n```\r\n\r\nI would hope that I could run `G(User, comments=[F(), F()])` to make a user with a few test comments.\r\n\r\nHowever, this creates a user, but creates no comments.\r\n\r\n`G(Comment, user=F())` creates a comment, and a user.\r\n\r\nThe solution is to do\r\n```\r\nx = G(User)\r\ncomments = [G(Comment), G(Comment)]\r\nx.comments.set(comments)\r\n```\r\n\r\nBut this seems extraneous when F() exists for a reason. Would there be a way to make it so reverse relation managers behave the same way that a regular relation manager works?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/92", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/92/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/92/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/92", "id": 284549169, "node_id": "MDU6SXNzdWUyODQ1NDkxNjk=", "number": 92, "title": "Add support for string as model name in G, N", "user": {"login": "theskumar", "id": 236356, "node_id": "MDQ6VXNlcjIzNjM1Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/236356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theskumar", "html_url": "https://github.com/theskumar", "followers_url": "https://api.github.com/users/theskumar/followers", "following_url": "https://api.github.com/users/theskumar/following{/other_user}", "gists_url": "https://api.github.com/users/theskumar/gists{/gist_id}", "starred_url": "https://api.github.com/users/theskumar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theskumar/subscriptions", "organizations_url": "https://api.github.com/users/theskumar/orgs", "repos_url": "https://api.github.com/users/theskumar/repos", "events_url": "https://api.github.com/users/theskumar/events{/privacy}", "received_events_url": "https://api.github.com/users/theskumar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-26T12:34:03Z", "updated_at": "2020-01-04T01:58:16Z", "closed_at": "2020-01-04T01:58:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using this monkey patched version of `G` that accepts `app_name.ClassName` string format similar to how you would use in `models.ForeignKey()`.\r\n\r\n```python\r\nfrom django_dynamic_fixture import G as __G\r\n\r\ndef G(model, **kwargs):\r\n    \"\"\"Overrides the G to be able to use it with 'app_name.model_name'\r\n    format as well.\r\n\r\n    >>> G('users.User', email=\"mail@examle.com\")\r\n    <User: mail@examle.com>\r\n    >>> G(User, email=\"mail@example.com\")\r\n    <User: mail@examle.com>\r\n    \"\"\"\r\n\r\n    if isinstance(model, str):\r\n        from django.apps import apps\r\n        model = apps.get_model(model)\r\n    return __G(model, **kwargs)\r\n```\r\n\r\nI think it would be a nice backward-compatible add-on to the library itself. @paulocheque thoughts? I'll submit a PR. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/88", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/88/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/88/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/88", "id": 247706401, "node_id": "MDU6SXNzdWUyNDc3MDY0MDE=", "number": 88, "title": "Allow propagation of ignored_fields to automatically generated Foreign Key", "user": {"login": "k4rl85", "id": 7737455, "node_id": "MDQ6VXNlcjc3Mzc0NTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7737455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k4rl85", "html_url": "https://github.com/k4rl85", "followers_url": "https://api.github.com/users/k4rl85/followers", "following_url": "https://api.github.com/users/k4rl85/following{/other_user}", "gists_url": "https://api.github.com/users/k4rl85/gists{/gist_id}", "starred_url": "https://api.github.com/users/k4rl85/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k4rl85/subscriptions", "organizations_url": "https://api.github.com/users/k4rl85/orgs", "repos_url": "https://api.github.com/users/k4rl85/repos", "events_url": "https://api.github.com/users/k4rl85/events{/privacy}", "received_events_url": "https://api.github.com/users/k4rl85/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-08-03T13:28:25Z", "updated_at": "2017-08-07T15:10:25Z", "closed_at": "2017-08-07T15:10:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, i have some problem with the integration  between django-polymorphic and django-dynamic-fixtures.\r\n\r\nThis was talked in different issues and some fix has been done like #85.\r\nThe problem for me is the automatic generation of a foreign key releated to a polymorphic instance.\r\n\r\nThe solution suggested in #85 is to set `DDF_IGNORE_FIELDS = ['*_ptr']` but this solution is ineffective in my case, because the DDF code does not use ignored_fields with an auto generated related object.\r\n\r\nExample:\r\n```\r\n# settings.py\r\nDDF_IGNORE_FIELDS = ['*_ptr']\r\n\r\n# models.py\r\nclass Location(PolymorphicModel):\r\n    objects = PolymorphicManager()\r\n\r\nclass Country(Location):\r\n    name = models.CharField(max_length=200)\r\n\r\nclass Publisher(models.Model):\r\n    country = models.ForeignKey(Country, null=True, blank=True)\r\n\r\n# test.py\r\nfrom django_dynamic_fixture import G\r\n\r\nG(Country)  # <-- no problem\r\nG(Publisher)  # <-- raise Attribution error\r\n```\r\n\r\nThe error generated in 2nd call is caused by the implicit creation of a Country for the Publisher instance.\r\nThe ignored fields are not correctly set for the publisher country because it receive an empty `ignored_fields`.\r\n\r\nI wonder if there is a reason to avoid this propagation, i will prepare a PR to fix it if is not needed.\r\n\r\nCarlo", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/87", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/87/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/87/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/87", "id": 227326029, "node_id": "MDU6SXNzdWUyMjczMjYwMjk=", "number": 87, "title": "Django 1.11.1 GDALException: Could not find the GDAL library", "user": {"login": "vstoykov", "id": 902381, "node_id": "MDQ6VXNlcjkwMjM4MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/902381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vstoykov", "html_url": "https://github.com/vstoykov", "followers_url": "https://api.github.com/users/vstoykov/followers", "following_url": "https://api.github.com/users/vstoykov/following{/other_user}", "gists_url": "https://api.github.com/users/vstoykov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vstoykov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vstoykov/subscriptions", "organizations_url": "https://api.github.com/users/vstoykov/orgs", "repos_url": "https://api.github.com/users/vstoykov/repos", "events_url": "https://api.github.com/users/vstoykov/events{/privacy}", "received_events_url": "https://api.github.com/users/vstoykov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-09T10:52:13Z", "updated_at": "2017-05-10T07:45:49Z", "closed_at": "2017-05-10T07:45:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "From Django 1.11.1 if `django.contrib.gis` is imported it will not fail silently if GDAL is not installed. This will make django-dynamic-fixture to trows errors for projects which does not use `django.contrib.gis` and there is no GDAL isntalled.\r\n\r\n```\r\n    from django_dynamic_fixture import G, F\r\n  File \"/usr/local/lib/python2.7/site-packages/django_dynamic_fixture/__init__.py\", line 10, in <module>\r\n    from django_dynamic_fixture.fixture_algorithms.sequential_fixture import SequentialDataFixture, \\\r\n  File \"/usr/local/lib/python2.7/site-packages/django_dynamic_fixture/fixture_algorithms/sequential_fixture.py\", line 12, in <module>\r\n    from django.contrib.gis.geos import *\r\n  File \"/usr/local/lib/python2.7/site-packages/django/contrib/gis/geos/__init__.py\", line 5, in <module>\r\n    from .collections import (  # NOQA\r\n  File \"/usr/local/lib/python2.7/site-packages/django/contrib/gis/geos/collections.py\", line 11, in <module>\r\n    from django.contrib.gis.geos.geometry import GEOSGeometry, LinearGeometryMixin\r\n  File \"/usr/local/lib/python2.7/site-packages/django/contrib/gis/geos/geometry.py\", line 11, in <module>\r\n    from django.contrib.gis import gdal\r\n  File \"/usr/local/lib/python2.7/site-packages/django/contrib/gis/gdal/__init__.py\", line 28, in <module>\r\n    from django.contrib.gis.gdal.datasource import DataSource\r\n  File \"/usr/local/lib/python2.7/site-packages/django/contrib/gis/gdal/datasource.py\", line 39, in <module>\r\n    from django.contrib.gis.gdal.driver import Driver\r\n  File \"/usr/local/lib/python2.7/site-packages/django/contrib/gis/gdal/driver.py\", line 5, in <module>\r\n    from django.contrib.gis.gdal.prototypes import ds as vcapi, raster as rcapi\r\n  File \"/usr/local/lib/python2.7/site-packages/django/contrib/gis/gdal/prototypes/ds.py\", line 9, in <module>\r\n    from django.contrib.gis.gdal.libgdal import GDAL_VERSION, lgdal\r\n  File \"/usr/local/lib/python2.7/site-packages/django/contrib/gis/gdal/libgdal.py\", line 44, in <module>\r\n    'GDAL_LIBRARY_PATH in your settings.' % '\", \"'.join(lib_names)\r\nGDALException: Could not find the GDAL library (tried \"gdal\", \"GDAL\", \"gdal1.11.0\", \"gdal1.10.0\", \"gdal1.9.0\", \"gdal1.8.0\", \"gdal1.7.0\"). Try setting GDAL_LIBRARY_PATH in your settings.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/84", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/84/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/84/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/84", "id": 209265824, "node_id": "MDU6SXNzdWUyMDkyNjU4MjQ=", "number": 84, "title": "UnsupportedFieldError on django.contrib.postgres.fields.array.ArrayField", "user": {"login": "firehawk895", "id": 7014202, "node_id": "MDQ6VXNlcjcwMTQyMDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/7014202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/firehawk895", "html_url": "https://github.com/firehawk895", "followers_url": "https://api.github.com/users/firehawk895/followers", "following_url": "https://api.github.com/users/firehawk895/following{/other_user}", "gists_url": "https://api.github.com/users/firehawk895/gists{/gist_id}", "starred_url": "https://api.github.com/users/firehawk895/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/firehawk895/subscriptions", "organizations_url": "https://api.github.com/users/firehawk895/orgs", "repos_url": "https://api.github.com/users/firehawk895/repos", "events_url": "https://api.github.com/users/firehawk895/events{/privacy}", "received_events_url": "https://api.github.com/users/firehawk895/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-02-21T20:39:05Z", "updated_at": "2017-04-17T19:20:08Z", "closed_at": "2017-04-17T19:20:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Shouldn't PostgreSQL fields supported out of the box? \r\nPS: thanks for the great library :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/82", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/82/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/82/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/82", "id": 172598167, "node_id": "MDU6SXNzdWUxNzI1OTgxNjc=", "number": 82, "title": "E   NameError: global name 'instance' is not defined", "user": {"login": "saxix", "id": 27282, "node_id": "MDQ6VXNlcjI3Mjgy", "avatar_url": "https://avatars1.githubusercontent.com/u/27282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saxix", "html_url": "https://github.com/saxix", "followers_url": "https://api.github.com/users/saxix/followers", "following_url": "https://api.github.com/users/saxix/following{/other_user}", "gists_url": "https://api.github.com/users/saxix/gists{/gist_id}", "starred_url": "https://api.github.com/users/saxix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saxix/subscriptions", "organizations_url": "https://api.github.com/users/saxix/orgs", "repos_url": "https://api.github.com/users/saxix/repos", "events_url": "https://api.github.com/users/saxix/events{/privacy}", "received_events_url": "https://api.github.com/users/saxix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-23T02:23:16Z", "updated_at": "2016-11-08T04:26:15Z", "closed_at": "2016-11-08T04:25:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "the error is produced in [ddf.py:380](https://github.com/paulocheque/django-dynamic-fixture/blob/master/django_dynamic_fixture/ddf.py#L380)\n\n`getattr(instance, field.name).save(django_file.name, django_file, save=False)`\n\nshould be\n\n`getattr(__instance, __field.name).save(django_file.name, django_file, save=False)`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/81", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/81/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/81/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/81", "id": 170900539, "node_id": "MDU6SXNzdWUxNzA5MDA1Mzk=", "number": 81, "title": "`settings` module has a common name that is likely to conflict with other packages.", "user": {"login": "mrmachine", "id": 51939, "node_id": "MDQ6VXNlcjUxOTM5", "avatar_url": "https://avatars3.githubusercontent.com/u/51939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrmachine", "html_url": "https://github.com/mrmachine", "followers_url": "https://api.github.com/users/mrmachine/followers", "following_url": "https://api.github.com/users/mrmachine/following{/other_user}", "gists_url": "https://api.github.com/users/mrmachine/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrmachine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrmachine/subscriptions", "organizations_url": "https://api.github.com/users/mrmachine/orgs", "repos_url": "https://api.github.com/users/mrmachine/repos", "events_url": "https://api.github.com/users/mrmachine/events{/privacy}", "received_events_url": "https://api.github.com/users/mrmachine/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-08-12T15:43:42Z", "updated_at": "2020-01-04T02:28:56Z", "closed_at": "2020-01-04T02:28:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "My project also has a settings.py, but DDF's is found first when I have installed DDF as editable with `pip install -e ...`\n\nConsider moving this module inside the `django_dynamic_fixture` package to ensure it doesn't conflict with any other packages?\n\n(and I will have to consider moving settings.py in my project, too)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/78", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/78/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/78/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/78", "id": 162788342, "node_id": "MDU6SXNzdWUxNjI3ODgzNDI=", "number": 78, "title": "GEOS \"Point\" expects (longitude, latitude)", "user": {"login": "michaellea", "id": 20194880, "node_id": "MDQ6VXNlcjIwMTk0ODgw", "avatar_url": "https://avatars2.githubusercontent.com/u/20194880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaellea", "html_url": "https://github.com/michaellea", "followers_url": "https://api.github.com/users/michaellea/followers", "following_url": "https://api.github.com/users/michaellea/following{/other_user}", "gists_url": "https://api.github.com/users/michaellea/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaellea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaellea/subscriptions", "organizations_url": "https://api.github.com/users/michaellea/orgs", "repos_url": "https://api.github.com/users/michaellea/repos", "events_url": "https://api.github.com/users/michaellea/events{/privacy}", "received_events_url": "https://api.github.com/users/michaellea/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632688, "node_id": "MDU6TGFiZWwyNjMyNjg4", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-06-28T21:10:48Z", "updated_at": "2017-04-18T00:25:55Z", "closed_at": "2017-04-17T19:20:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "GeoDjango's \"Point\" class expects the constructor arguments to be (longitude, latitude) rather than the more traditional (latitude, longitude). Inverting them results in some unexpected behaviour & validation errors.\n\nFix is likely just to switch the arguments in fixture_algorithms/default_fixture.py:\n\n```\nclass GeoDjangoDataFixture(object):\n    def create_point(self, x=None, y=None):\n        # latitude: [-90,90], longitude: [-180,180]\n        latitude = x or random.randint(-90, 90)\n        longitude = y or random.randint(-180, 180)\n        return Point(longitude, latitude)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/77", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/77/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/77/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/77", "id": 156301677, "node_id": "MDU6SXNzdWUxNTYzMDE2Nzc=", "number": 77, "title": "Please release a new version containing Django 1.9 support", "user": {"login": "gregmuellegger", "id": 88278, "node_id": "MDQ6VXNlcjg4Mjc4", "avatar_url": "https://avatars3.githubusercontent.com/u/88278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gregmuellegger", "html_url": "https://github.com/gregmuellegger", "followers_url": "https://api.github.com/users/gregmuellegger/followers", "following_url": "https://api.github.com/users/gregmuellegger/following{/other_user}", "gists_url": "https://api.github.com/users/gregmuellegger/gists{/gist_id}", "starred_url": "https://api.github.com/users/gregmuellegger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gregmuellegger/subscriptions", "organizations_url": "https://api.github.com/users/gregmuellegger/orgs", "repos_url": "https://api.github.com/users/gregmuellegger/repos", "events_url": "https://api.github.com/users/gregmuellegger/events{/privacy}", "received_events_url": "https://api.github.com/users/gregmuellegger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-05-23T15:16:41Z", "updated_at": "2016-05-23T18:30:36Z", "closed_at": "2016-05-23T18:30:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, django-dynamic-fixture has support for Django 1.9 since the merge of #74.\n\nBut there is no PyPI release yet, I would love to see a new official support so we can finally use this package in a Django 1.9 project.\n\nIs there any chance there will be a new release in the next weeks?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/76", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/76/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/76/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/76", "id": 142342681, "node_id": "MDU6SXNzdWUxNDIzNDI2ODE=", "number": 76, "title": "Bug using SimpleUploadedFile", "user": {"login": "valdergallo", "id": 81618, "node_id": "MDQ6VXNlcjgxNjE4", "avatar_url": "https://avatars2.githubusercontent.com/u/81618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/valdergallo", "html_url": "https://github.com/valdergallo", "followers_url": "https://api.github.com/users/valdergallo/followers", "following_url": "https://api.github.com/users/valdergallo/following{/other_user}", "gists_url": "https://api.github.com/users/valdergallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/valdergallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/valdergallo/subscriptions", "organizations_url": "https://api.github.com/users/valdergallo/orgs", "repos_url": "https://api.github.com/users/valdergallo/repos", "events_url": "https://api.github.com/users/valdergallo/events{/privacy}", "received_events_url": "https://api.github.com/users/valdergallo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632688, "node_id": "MDU6TGFiZWwyNjMyNjg4", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-03-21T13:12:20Z", "updated_at": "2020-01-04T15:16:53Z", "closed_at": "2020-01-04T15:16:53Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Was implemented one new library in django to create tests files called [SimpleUploadedFile](https://docs.djangoproject.com/en/dev/ref/forms/api/#binding-uploaded-files-to-a-form)\n\nThe problem happen when you try send one SimpleUploadedFile to create one file instance. \n\n```\nTraceback (most recent call last):\n  File \"/vagrant/goal_design/tests/test_views.py\", line 24, in test_download_documentation\n    is_last_version=\"true\")\n  File \"/home/vagrant/.virtualenvs/env/local/lib/python2.7/site-packages/django_dynamic_fixture/__init__.py\", line 106, in get\n    return d.get(model, shelve=shelve, **kwargs)\n  File \"/home/vagrant/.virtualenvs/env/local/lib/python2.7/site-packages/django_dynamic_fixture/ddf.py\", line 528, in get\n    instance = self.new(model_class, shelve=shelve, named_shelve=named_shelve, **kwargs)\n  File \"/home/vagrant/.virtualenvs/env/local/lib/python2.7/site-packages/django_dynamic_fixture/ddf.py\", line 455, in new\n    self.set_data_for_a_field(model_class, instance, field, persist_dependencies=persist_dependencies, **configuration)\n  File \"/home/vagrant/.virtualenvs/env/local/lib/python2.7/site-packages/django_dynamic_fixture/ddf.py\", line 372, in set_data_for_a_field\n    if django_file.file.mode != 'rb':\nAttributeError: '_io.BytesIO' object has no attribute 'mode'\n```\n\nAnd in my tests, Im using \n\n```\nfrom django.core.files.uploadedfile import SimpleUploadedFile\n\n\nBASE_FILE = SimpleUploadedFile('test_upload.txt', 'these are the file contents')\nG(DjangoFIleModel, file=BASE_FILE)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/75", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/75/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/75/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/75", "id": 127947445, "node_id": "MDU6SXNzdWUxMjc5NDc0NDU=", "number": 75, "title": "Custom data fixture for specific field on a model", "user": {"login": "zanderle", "id": 5232693, "node_id": "MDQ6VXNlcjUyMzI2OTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5232693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zanderle", "html_url": "https://github.com/zanderle", "followers_url": "https://api.github.com/users/zanderle/followers", "following_url": "https://api.github.com/users/zanderle/following{/other_user}", "gists_url": "https://api.github.com/users/zanderle/gists{/gist_id}", "starred_url": "https://api.github.com/users/zanderle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zanderle/subscriptions", "organizations_url": "https://api.github.com/users/zanderle/orgs", "repos_url": "https://api.github.com/users/zanderle/repos", "events_url": "https://api.github.com/users/zanderle/events{/privacy}", "received_events_url": "https://api.github.com/users/zanderle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632692, "node_id": "MDU6TGFiZWwyNjMyNjky", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-01-21T15:18:17Z", "updated_at": "2016-05-23T16:49:32Z", "closed_at": "2016-05-23T16:49:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I think it would be really useful to be able to define custom data fixtures for specific fields on a model. So for example, say I have a following model\n\n``` python\nclass Book(models.Model):\n    title = models.CharField(max_length=255)\n    number_of_pages = models.IntegerField()\n```\n\nI would want to define special behavior for data generation for field `number_of_pages`, for example data fixture for `number_of_pages` could be random between `[10,100]`. It's different than what already exists in DDF in that it's specific to a model field vs a field in general (http://django-dynamic-fixture.readthedocs.org/en/latest/data_fixtures.html#custom-field-fixture).\nIt would be useful to be able to set something like this.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/68", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/68/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/68/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/68", "id": 95187302, "node_id": "MDU6SXNzdWU5NTE4NzMwMg==", "number": 68, "title": "Deprecation warnings with django 1.8", "user": {"login": "cailloumajor", "id": 8583146, "node_id": "MDQ6VXNlcjg1ODMxNDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/8583146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cailloumajor", "html_url": "https://github.com/cailloumajor", "followers_url": "https://api.github.com/users/cailloumajor/followers", "following_url": "https://api.github.com/users/cailloumajor/following{/other_user}", "gists_url": "https://api.github.com/users/cailloumajor/gists{/gist_id}", "starred_url": "https://api.github.com/users/cailloumajor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cailloumajor/subscriptions", "organizations_url": "https://api.github.com/users/cailloumajor/orgs", "repos_url": "https://api.github.com/users/cailloumajor/repos", "events_url": "https://api.github.com/users/cailloumajor/events{/privacy}", "received_events_url": "https://api.github.com/users/cailloumajor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-07-15T13:07:20Z", "updated_at": "2015-07-20T19:58:50Z", "closed_at": "2015-07-20T19:58:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The old and undocumented Model._meta API will be removed in django 1.10. The Model._meta.get_field_by_name(name) method fires a DeprecationWarning since django 1.8.\nDjango documentation recommends to use new Model._meta.get_field(name) :\nhttps://docs.djangoproject.com/en/1.8/ref/models/meta/#migrating-from-the-old-api\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/67", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/67/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/67/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/67", "id": 91289268, "node_id": "MDU6SXNzdWU5MTI4OTI2OA==", "number": 67, "title": "Set DDF_IGNORE_FIELDS or ignore_fields argument using wild cards", "user": {"login": "rpalacios", "id": 1891144, "node_id": "MDQ6VXNlcjE4OTExNDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1891144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rpalacios", "html_url": "https://github.com/rpalacios", "followers_url": "https://api.github.com/users/rpalacios/followers", "following_url": "https://api.github.com/users/rpalacios/following{/other_user}", "gists_url": "https://api.github.com/users/rpalacios/gists{/gist_id}", "starred_url": "https://api.github.com/users/rpalacios/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rpalacios/subscriptions", "organizations_url": "https://api.github.com/users/rpalacios/orgs", "repos_url": "https://api.github.com/users/rpalacios/repos", "events_url": "https://api.github.com/users/rpalacios/events{/privacy}", "received_events_url": "https://api.github.com/users/rpalacios/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-06-26T16:11:18Z", "updated_at": "2017-02-28T02:44:33Z", "closed_at": "2017-02-28T02:44:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\n\nIt would be nice to set `DDF_IGNORE_FIELDS` or `ignore_fields` argument using wild cards.\n\nYou could want to ignore a set of fields in one or more models.\n\nBy example, when I start using this app on my unit tests, I always get `AttributeError` on polymorphic models. This exception is documented on [django-polymorphic documentation](https://github.com/chrisglass/django_polymorphic/blob/master/docs/admin.rst#polymorphic-inlines). \n\nTo workaorund this, I had to set all fields that ends with \"_ptr\" to be ignored.\n\nIt would be nice to be able to set `DDF_IGNORE_FIELDS = ['*_ptr']`.\n\nJust one suggestion.\n\nBest regards,\nRoger\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/65", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/65/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/65/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/65", "id": 86216971, "node_id": "MDU6SXNzdWU4NjIxNjk3MQ==", "number": 65, "title": "Problem with django-filer", "user": {"login": "Matt-Deacalion", "id": 1128480, "node_id": "MDQ6VXNlcjExMjg0ODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1128480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matt-Deacalion", "html_url": "https://github.com/Matt-Deacalion", "followers_url": "https://api.github.com/users/Matt-Deacalion/followers", "following_url": "https://api.github.com/users/Matt-Deacalion/following{/other_user}", "gists_url": "https://api.github.com/users/Matt-Deacalion/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matt-Deacalion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matt-Deacalion/subscriptions", "organizations_url": "https://api.github.com/users/Matt-Deacalion/orgs", "repos_url": "https://api.github.com/users/Matt-Deacalion/repos", "events_url": "https://api.github.com/users/Matt-Deacalion/events{/privacy}", "received_events_url": "https://api.github.com/users/Matt-Deacalion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632688, "node_id": "MDU6TGFiZWwyNjMyNjg4", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 2632692, "node_id": "MDU6TGFiZWwyNjMyNjky", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-06-08T15:13:46Z", "updated_at": "2020-01-04T15:11:37Z", "closed_at": "2020-01-04T15:11:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running _Django_ **1.8.2** with _django-filer_ **0.9.10** and _django-dynamic-fixture_ **1.8.4**. I have an example model like this:\n\n``` python\nfrom django.db import models\nfrom filer.fields.image import FilerImageField\n\nclass Animal(models.Model):\n    name = models.CharField(max_length=100)\n    picture = FilerImageField(null=True, blank=True)\n```\n\nUsing the get function in my unit tests, like so:\n\n``` python\nG(Animal)\n```\n\nI get this traceback:\n\n``` traceback\nCreating test database for alias 'default'...\nE\n======================================================================\nERROR: test_animal (animals.tests.AnimalTests)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/matt/projects/ddf-bug/animals/tests.py\", line 8, in test_animal\n    instance = G(Animal)\n  File \"/home/matt/...trimed.../django_dynamic_fixture/__init__.py\", line 106, in get\n    return d.get(model, shelve=shelve, **kwargs)\n  File \"/home/matt/...trimed.../django_dynamic_fixture/ddf.py\", line 528, in get\n    instance = self.new(model_class, shelve=shelve, named_shelve=named_shelve, **kwargs)\n  File \"/home/matt/...trimed.../django_dynamic_fixture/ddf.py\", line 455, in new\n    self.set_data_for_a_field(model_class, instance, field, persist_dependencies=persist_dependencies, **configuration)\n  File \"/home/matt/...trimed.../django_dynamic_fixture/ddf.py\", line 366, in set_data_for_a_field\n    data = self._process_field_with_default_fixture(__field, model_class, persist_dependencies)\n  File \"/home/matt/...trimed.../django_dynamic_fixture/ddf.py\", line 351, in _process_field_with_default_fixture\n    data = self._process_foreign_key(model_class, field, persist_dependencies)\n  File \"/home/matt/...trimed.../django_dynamic_fixture/ddf.py\", line 334, in _process_foreign_key\n    data = fixture.get(next_model)\n  File \"/home/matt/...trimed.../django_dynamic_fixture/ddf.py\", line 528, in get\n    instance = self.new(model_class, shelve=shelve, named_shelve=named_shelve, **kwargs)\n  File \"/home/matt/...trimed.../django_dynamic_fixture/ddf.py\", line 455, in new\n    self.set_data_for_a_field(model_class, instance, field, persist_dependencies=persist_dependencies, **configuration)\n  File \"/home/matt/...trimed.../django_dynamic_fixture/ddf.py\", line 383, in set_data_for_a_field\n    setattr(__instance, __field.name, data) # Model.field = data\nAttributeError: can't set attribute\n\n----------------------------------------------------------------------\nRan 1 test in 0.014s\n\nFAILED (errors=1)\nDestroying test database for alias 'default'...\n```\n\nAs a short term fix until I get a chance to look into this more I've added all of the FilerImageField fields I have to `DDF_IGNORE_FIELDS` in my Django settings, i.e.\n\n``` python\nDDF_IGNORE_FIELDS = ['picture',]\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/63", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/63/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/63/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/63", "id": 72369567, "node_id": "MDU6SXNzdWU3MjM2OTU2Nw==", "number": 63, "title": "No support for uuid fields in django 1.8", "user": {"login": "artcz", "id": 126820, "node_id": "MDQ6VXNlcjEyNjgyMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/126820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/artcz", "html_url": "https://github.com/artcz", "followers_url": "https://api.github.com/users/artcz/followers", "following_url": "https://api.github.com/users/artcz/following{/other_user}", "gists_url": "https://api.github.com/users/artcz/gists{/gist_id}", "starred_url": "https://api.github.com/users/artcz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/artcz/subscriptions", "organizations_url": "https://api.github.com/users/artcz/orgs", "repos_url": "https://api.github.com/users/artcz/repos", "events_url": "https://api.github.com/users/artcz/events{/privacy}", "received_events_url": "https://api.github.com/users/artcz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-05-01T06:40:20Z", "updated_at": "2015-06-02T04:25:35Z", "closed_at": "2015-05-26T07:53:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Like in the title,\n\nTrying to `G(ModelName)` with uuid field results in \n\n```\n    raise(UnsupportedFieldError(get_unique_field_name(field)))\nUnsupportedFieldError: apps.testapp.models.SomeModel.uuid_field\n```\n\nSteps to reproduce: \n1) create a model (eg `SomeModel`) with `models.UUIDField` (eg `uuid_field`)\n2) open `./manage.py shell`\n3) do `G(SomeModel)`\n\nThanks,\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/58", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/58/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/58/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/58", "id": 59914191, "node_id": "MDU6SXNzdWU1OTkxNDE5MQ==", "number": 58, "title": "`ForeignKey(null=True)` with no default specified should not be auto filled?", "user": {"login": "mrmachine", "id": 51939, "node_id": "MDQ6VXNlcjUxOTM5", "avatar_url": "https://avatars3.githubusercontent.com/u/51939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrmachine", "html_url": "https://github.com/mrmachine", "followers_url": "https://api.github.com/users/mrmachine/followers", "following_url": "https://api.github.com/users/mrmachine/following{/other_user}", "gists_url": "https://api.github.com/users/mrmachine/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrmachine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrmachine/subscriptions", "organizations_url": "https://api.github.com/users/mrmachine/orgs", "repos_url": "https://api.github.com/users/mrmachine/repos", "events_url": "https://api.github.com/users/mrmachine/events{/privacy}", "received_events_url": "https://api.github.com/users/mrmachine/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632692, "node_id": "MDU6TGFiZWwyNjMyNjky", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-03-05T07:11:24Z", "updated_at": "2015-06-03T01:23:28Z", "closed_at": "2015-06-02T00:59:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a bunch of models with `ForeignKey` fields that can be null and which have no default value specified. DDF always tries to auto fill these fields when I use `G()`. I end up having to constantly do `G(foo=None, ...)` to stop it, or put a redundant `ForeignKey('Foo', default=None, null=True)` in my model.\n\nDDF should only auto fill fields that are required to pass model validation?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/57", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/57/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/57/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/57", "id": 59248830, "node_id": "MDU6SXNzdWU1OTI0ODgzMA==", "number": 57, "title": "DDF_VALIDATE_ARGS should default to DEBUG", "user": {"login": "voidus", "id": 124298, "node_id": "MDQ6VXNlcjEyNDI5OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/124298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/voidus", "html_url": "https://github.com/voidus", "followers_url": "https://api.github.com/users/voidus/followers", "following_url": "https://api.github.com/users/voidus/following{/other_user}", "gists_url": "https://api.github.com/users/voidus/gists{/gist_id}", "starred_url": "https://api.github.com/users/voidus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/voidus/subscriptions", "organizations_url": "https://api.github.com/users/voidus/orgs", "repos_url": "https://api.github.com/users/voidus/repos", "events_url": "https://api.github.com/users/voidus/events{/privacy}", "received_events_url": "https://api.github.com/users/voidus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632692, "node_id": "MDU6TGFiZWwyNjMyNjky", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-02-27T15:15:47Z", "updated_at": "2020-01-04T14:35:29Z", "closed_at": "2020-01-04T14:35:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI just activated DDF_VALIDATE_ARGS in one of my projects and immediately found some bugs. It should probably default to whatever value DEBUG is set to, so that problems can be detected as early as possible.\n\nThe code says that the current default is False for compatibility reasons, but maybe it could be changed it in the next major version?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/56", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/56/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/56/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/56", "id": 55879209, "node_id": "MDU6SXNzdWU1NTg3OTIwOQ==", "number": 56, "title": "BadDataError: IntegrityError", "user": {"login": "learner010", "id": 10337546, "node_id": "MDQ6VXNlcjEwMzM3NTQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/10337546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/learner010", "html_url": "https://github.com/learner010", "followers_url": "https://api.github.com/users/learner010/followers", "following_url": "https://api.github.com/users/learner010/following{/other_user}", "gists_url": "https://api.github.com/users/learner010/gists{/gist_id}", "starred_url": "https://api.github.com/users/learner010/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/learner010/subscriptions", "organizations_url": "https://api.github.com/users/learner010/orgs", "repos_url": "https://api.github.com/users/learner010/repos", "events_url": "https://api.github.com/users/learner010/events{/privacy}", "received_events_url": "https://api.github.com/users/learner010/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632692, "node_id": "MDU6TGFiZWwyNjMyNjky", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-29T10:03:23Z", "updated_at": "2015-06-02T02:33:56Z", "closed_at": "2015-06-02T02:33:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a data fixture which extends `SequentialDataFixture`. The fixture is given below:\n\n``` python\nclass ASequentialDataFixture(SequentialDataFixture):\n   def genericipaddressfield_config(self, field, key):\n        return \"{}.{}.{}\".format(randint(000,999), randint(000,999), randint(000,999))\n```\n\nI have following test code.\n\n``` python\n        tokens = [G(Token, data_fixture = ASequentialDataFixture()).token for count in range(100)]\n```\n\nWhich generates following error.\n\n```\nTraceback (most recent call last):\n  File \"/home/suren/job/ussd/core/tests/test_models.py\", line 33, in test_generates_unique_tokens\n    tokens = [G(Token, data_fixture = ASequentialDataFixture()).token for count in range(100)]\n\n...\n\nBadDataError: ('panel.models.user.User', IntegrityError(1062, \"Duplicate entry 'a1@dynamicfixture.com' for key 'email'\"))\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/55", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/55/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/55/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/55", "id": 55876482, "node_id": "MDU6SXNzdWU1NTg3NjQ4Mg==", "number": 55, "title": "DDFImproperlyConfigured DDF_DEFAULT_DATA_FIXTURE ", "user": {"login": "learner010", "id": 10337546, "node_id": "MDQ6VXNlcjEwMzM3NTQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/10337546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/learner010", "html_url": "https://github.com/learner010", "followers_url": "https://api.github.com/users/learner010/followers", "following_url": "https://api.github.com/users/learner010/following{/other_user}", "gists_url": "https://api.github.com/users/learner010/gists{/gist_id}", "starred_url": "https://api.github.com/users/learner010/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/learner010/subscriptions", "organizations_url": "https://api.github.com/users/learner010/orgs", "repos_url": "https://api.github.com/users/learner010/repos", "events_url": "https://api.github.com/users/learner010/events{/privacy}", "received_events_url": "https://api.github.com/users/learner010/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632692, "node_id": "MDU6TGFiZWwyNjMyNjky", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-29T09:36:56Z", "updated_at": "2020-01-04T14:29:58Z", "closed_at": "2020-01-04T14:29:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "My settings file is at `project_root/settings/client/dev.py` and the fixture file is at `project_root/libs/fixtures.py`'\n\nMy DDF configuration is given below.\n`DDF_DEFAULT_DATA_FIXTURE = 'libs.fixtures.ASequentialDataFixture'`\n\nDuring test I get following error.\n`ERROR: Failure: DDFImproperlyConfigured (DDF_DEFAULT_DATA_FIXTURE (libs.fixtures.ASequentialDataFixture) must be 'sequential', 'static_sequential', 'global_sequential', 'random' or 'path.to.CustomDataFixtureClass'.)`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/54", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/54/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/54/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/54", "id": 55864436, "node_id": "MDU6SXNzdWU1NTg2NDQzNg==", "number": 54, "title": "UnsupportedFieldError on GenericIPAddressField ", "user": {"login": "learner010", "id": 10337546, "node_id": "MDQ6VXNlcjEwMzM3NTQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/10337546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/learner010", "html_url": "https://github.com/learner010", "followers_url": "https://api.github.com/users/learner010/followers", "following_url": "https://api.github.com/users/learner010/following{/other_user}", "gists_url": "https://api.github.com/users/learner010/gists{/gist_id}", "starred_url": "https://api.github.com/users/learner010/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/learner010/subscriptions", "organizations_url": "https://api.github.com/users/learner010/orgs", "repos_url": "https://api.github.com/users/learner010/repos", "events_url": "https://api.github.com/users/learner010/events{/privacy}", "received_events_url": "https://api.github.com/users/learner010/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-01-29T07:04:45Z", "updated_at": "2015-06-02T04:25:40Z", "closed_at": "2015-06-02T02:34:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a GenericIPAddressField in a model.\n\nBelieving django-dynamic-fixture currently doesn't support it. I wrote a fixture for it.\n\n```\nDDF_FIELD_FIXTURES = {\n    'django.db.models.GenericIPAddressField': {'ddf_fixture': lambda: \"{}.{}.{}\".format(randint(000,999), randint(000,999), randint(000,999))},\n}\n```\n\nBut it still complains about it. How to fix this?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/53", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/53/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/53/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/53", "id": 46261569, "node_id": "MDU6SXNzdWU0NjI2MTU2OQ==", "number": 53, "title": "Argument called `instance` can't be passed to object creation with G", "user": {"login": "ilonajulczuk", "id": 2233160, "node_id": "MDQ6VXNlcjIyMzMxNjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/2233160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilonajulczuk", "html_url": "https://github.com/ilonajulczuk", "followers_url": "https://api.github.com/users/ilonajulczuk/followers", "following_url": "https://api.github.com/users/ilonajulczuk/following{/other_user}", "gists_url": "https://api.github.com/users/ilonajulczuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilonajulczuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilonajulczuk/subscriptions", "organizations_url": "https://api.github.com/users/ilonajulczuk/orgs", "repos_url": "https://api.github.com/users/ilonajulczuk/repos", "events_url": "https://api.github.com/users/ilonajulczuk/events{/privacy}", "received_events_url": "https://api.github.com/users/ilonajulczuk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632688, "node_id": "MDU6TGFiZWwyNjMyNjg4", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-10-20T11:38:38Z", "updated_at": "2015-06-02T04:25:52Z", "closed_at": "2014-12-02T18:38:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Argument called `instance` can't be passed to object creation with G.\nI have a class with `instance` field and there is a name collision in   \n\n```\nself.set_data_for_a_field(model_class, instance, field, persist_dependencies=persist_dependencies, **configuration)\n```\n\nWhole traceback:\n\n```\nIn [12]: G(AdminInstanceRole, instance=instance, admin=admin, role=role)\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-12-edd08ece1c23> in <module>()\n----> 1 G(AdminInstanceRole, instance=instance, admin=admin, role=role)\n\n/usr/local/lib/python2.7/dist-packages/django_dynamic_fixture/__init__.pyc in get(model, shelve, n, **kwargs)\n    104     d = fixture(**kwargs)\n    105     if n == 1:\n--> 106         return d.get(model, shelve=shelve, **kwargs)\n    107     instances = []\n    108     for _ in range(n):\n\n/usr/local/lib/python2.7/dist-packages/django_dynamic_fixture/ddf.pyc in get(self, model_class, shelve, named_shelve, **kwargs)\n    514         :named_shelve: restore configuration saved in DDF library with a name.\n    515         \"\"\"\n--> 516         instance = self.new(model_class, shelve=shelve, named_shelve=named_shelve, **kwargs)\n    517         if is_model_abstract(model_class):\n    518             raise InvalidModelError(get_unique_model_name(model_class))\n\n/usr/local/lib/python2.7/dist-packages/django_dynamic_fixture/ddf.pyc in new(self, model_class, shelve, named_shelve, persist_dependencies, **kwargs)\n    441             if is_key_field(field) and 'id' not in configuration: continue\n    442             if field.name in self.ignore_fields: continue\n--> 443             self.set_data_for_a_field(model_class, instance, field, persist_dependencies=persist_dependencies, **configuration)\n    444         number_of_pending_fields = len(self.pending_fields)\n    445         # For Copier fixtures: dealing with pending fields that need to receive values of another fields.\n\nTypeError: set_data_for_a_field() got multiple values for keyword argument 'instance'\n```\n\nThanks.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/52", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/52/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/52/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/52", "id": 45591232, "node_id": "MDU6SXNzdWU0NTU5MTIzMg==", "number": 52, "title": "Can we change persist_dependencies to False by default on N?", "user": {"login": "wesleykendall", "id": 1497710, "node_id": "MDQ6VXNlcjE0OTc3MTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1497710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleykendall", "html_url": "https://github.com/wesleykendall", "followers_url": "https://api.github.com/users/wesleykendall/followers", "following_url": "https://api.github.com/users/wesleykendall/following{/other_user}", "gists_url": "https://api.github.com/users/wesleykendall/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleykendall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleykendall/subscriptions", "organizations_url": "https://api.github.com/users/wesleykendall/orgs", "repos_url": "https://api.github.com/users/wesleykendall/repos", "events_url": "https://api.github.com/users/wesleykendall/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleykendall/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2014-10-12T19:33:57Z", "updated_at": "2020-01-16T23:21:36Z", "closed_at": "2020-01-04T14:49:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "According to https://github.com/paulocheque/django-dynamic-fixture/blob/master/django_dynamic_fixture/__init__.py#L71 and the docs, persist_dependencies is True by default for the N function. Almost 100% of time in our code we have to type persist_dependencies=False, and it's cumbersome to have to manually review code and ensure people aren't accidentally hitting the DB when they instantiate in-memory models.\n\nMy question - can this default behavior be changed? If it's too backwards breaking, can I add an M function that is N with persist_dependencies=False?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/50", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/50/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/50/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/50", "id": 42958637, "node_id": "MDU6SXNzdWU0Mjk1ODYzNw==", "number": 50, "title": "PyPI release", "user": {"login": "hwkns", "id": 746123, "node_id": "MDQ6VXNlcjc0NjEyMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/746123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hwkns", "html_url": "https://github.com/hwkns", "followers_url": "https://api.github.com/users/hwkns/followers", "following_url": "https://api.github.com/users/hwkns/following{/other_user}", "gists_url": "https://api.github.com/users/hwkns/gists{/gist_id}", "starred_url": "https://api.github.com/users/hwkns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hwkns/subscriptions", "organizations_url": "https://api.github.com/users/hwkns/orgs", "repos_url": "https://api.github.com/users/hwkns/repos", "events_url": "https://api.github.com/users/hwkns/events{/privacy}", "received_events_url": "https://api.github.com/users/hwkns/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-09-17T03:02:36Z", "updated_at": "2015-06-02T04:26:01Z", "closed_at": "2014-09-21T09:46:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems the most recent PyPI release (which claims to be Python 3 compatible) is from March, but there have been some essential Python 3 related fixes since then (a couple months ago), with no release.\n\nI have started a project using Django 1.7 and Python 3.4 and would really love to use `django-dynamic-fixture` without having to point my requirements file at a GitHub URL.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/49", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/49/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/49/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/49", "id": 42736120, "node_id": "MDU6SXNzdWU0MjczNjEyMA==", "number": 49, "title": "G() doesn't set data", "user": {"login": "variable", "id": 558175, "node_id": "MDQ6VXNlcjU1ODE3NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/558175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/variable", "html_url": "https://github.com/variable", "followers_url": "https://api.github.com/users/variable/followers", "following_url": "https://api.github.com/users/variable/following{/other_user}", "gists_url": "https://api.github.com/users/variable/gists{/gist_id}", "starred_url": "https://api.github.com/users/variable/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/variable/subscriptions", "organizations_url": "https://api.github.com/users/variable/orgs", "repos_url": "https://api.github.com/users/variable/repos", "events_url": "https://api.github.com/users/variable/events{/privacy}", "received_events_url": "https://api.github.com/users/variable/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-09-15T01:33:51Z", "updated_at": "2014-09-21T09:47:46Z", "closed_at": "2014-09-21T09:47:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "``` python\naccount = G(Account, bank_account='12-3109-0024210-000')\nprint account.bank_account, 111111111\n```\n\nprints  111111111\n\nusing Django 1.7\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/47", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/47/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/47/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/47", "id": 42188994, "node_id": "MDU6SXNzdWU0MjE4ODk5NA==", "number": 47, "title": "Grammar mistakes in docs", "user": {"login": "zanderle", "id": 5232693, "node_id": "MDQ6VXNlcjUyMzI2OTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5232693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zanderle", "html_url": "https://github.com/zanderle", "followers_url": "https://api.github.com/users/zanderle/followers", "following_url": "https://api.github.com/users/zanderle/following{/other_user}", "gists_url": "https://api.github.com/users/zanderle/gists{/gist_id}", "starred_url": "https://api.github.com/users/zanderle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zanderle/subscriptions", "organizations_url": "https://api.github.com/users/zanderle/orgs", "repos_url": "https://api.github.com/users/zanderle/repos", "events_url": "https://api.github.com/users/zanderle/events{/privacy}", "received_events_url": "https://api.github.com/users/zanderle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-09-08T12:01:30Z", "updated_at": "2015-06-02T04:26:07Z", "closed_at": "2014-09-18T20:34:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've noticed many grammar mistakes in the docs. It's not a priority at all, but I can do a pull-request if you want.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/44", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/44/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/44/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/44", "id": 40491096, "node_id": "MDU6SXNzdWU0MDQ5MTA5Ng==", "number": 44, "title": "Any non-Django nose usage prevented when in queries in pythonpath", "user": {"login": "frankier", "id": 299380, "node_id": "MDQ6VXNlcjI5OTM4MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/299380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frankier", "html_url": "https://github.com/frankier", "followers_url": "https://api.github.com/users/frankier/followers", "following_url": "https://api.github.com/users/frankier/following{/other_user}", "gists_url": "https://api.github.com/users/frankier/gists{/gist_id}", "starred_url": "https://api.github.com/users/frankier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frankier/subscriptions", "organizations_url": "https://api.github.com/users/frankier/orgs", "repos_url": "https://api.github.com/users/frankier/repos", "events_url": "https://api.github.com/users/frankier/events{/privacy}", "received_events_url": "https://api.github.com/users/frankier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-08-18T14:02:07Z", "updated_at": "2014-08-21T16:36:33Z", "closed_at": "2014-08-21T16:36:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a result of connection.use_debug_cursor = True in Queries.configure. I think this could probably be moved to beforeTest, or perhaps whether the plugin is enabled could be checked in configure(...)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/41", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/41/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/41/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/41", "id": 32995324, "node_id": "MDU6SXNzdWUzMjk5NTMyNA==", "number": 41, "title": "Does this app work with Django 1.7?", "user": {"login": "humitos", "id": 244656, "node_id": "MDQ6VXNlcjI0NDY1Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/244656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/humitos", "html_url": "https://github.com/humitos", "followers_url": "https://api.github.com/users/humitos/followers", "following_url": "https://api.github.com/users/humitos/following{/other_user}", "gists_url": "https://api.github.com/users/humitos/gists{/gist_id}", "starred_url": "https://api.github.com/users/humitos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/humitos/subscriptions", "organizations_url": "https://api.github.com/users/humitos/orgs", "repos_url": "https://api.github.com/users/humitos/repos", "events_url": "https://api.github.com/users/humitos/events{/privacy}", "received_events_url": "https://api.github.com/users/humitos/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-05-07T15:23:20Z", "updated_at": "2014-09-21T09:47:32Z", "closed_at": "2014-09-21T09:47:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "If not, is there a plan to port it to Django 1.7?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/37", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/37/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/37/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/37", "id": 24762342, "node_id": "MDU6SXNzdWUyNDc2MjM0Mg==", "number": 37, "title": "BinaryField support?", "user": {"login": "smallcode", "id": 1580136, "node_id": "MDQ6VXNlcjE1ODAxMzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1580136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smallcode", "html_url": "https://github.com/smallcode", "followers_url": "https://api.github.com/users/smallcode/followers", "following_url": "https://api.github.com/users/smallcode/following{/other_user}", "gists_url": "https://api.github.com/users/smallcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/smallcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smallcode/subscriptions", "organizations_url": "https://api.github.com/users/smallcode/orgs", "repos_url": "https://api.github.com/users/smallcode/repos", "events_url": "https://api.github.com/users/smallcode/events{/privacy}", "received_events_url": "https://api.github.com/users/smallcode/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-12-25T06:14:11Z", "updated_at": "2014-09-19T18:08:20Z", "closed_at": "2014-09-19T16:55:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\nclass Entity(models.Model):\n    text = models.BinaryField()\n\nG(Entity)  # raise UnsupportedFieldError.\n```\n\nin Django1.6.1\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/36", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/36/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/36/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/36", "id": 23959571, "node_id": "MDU6SXNzdWUyMzk1OTU3MQ==", "number": 36, "title": "Generate model instance that contains custom fields", "user": {"login": "shymonk", "id": 1997991, "node_id": "MDQ6VXNlcjE5OTc5OTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1997991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shymonk", "html_url": "https://github.com/shymonk", "followers_url": "https://api.github.com/users/shymonk/followers", "following_url": "https://api.github.com/users/shymonk/following{/other_user}", "gists_url": "https://api.github.com/users/shymonk/gists{/gist_id}", "starred_url": "https://api.github.com/users/shymonk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shymonk/subscriptions", "organizations_url": "https://api.github.com/users/shymonk/orgs", "repos_url": "https://api.github.com/users/shymonk/repos", "events_url": "https://api.github.com/users/shymonk/events{/privacy}", "received_events_url": "https://api.github.com/users/shymonk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-12-09T13:05:16Z", "updated_at": "2020-01-04T15:15:29Z", "closed_at": "2020-01-04T15:15:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a model contains ListField(custom field) like this:\n\n```\nclass CalendarField(models.TextField):\n     __metaclass__ = models.SubfieldBase \n     ...\n    def to_python(self, value):\n         if isinstance(value, list) or value is None:\n            return value\n         return [int(e) for e in value.split(self.token)]\n\nclass MyModel(models.Model):\n    calendar = CalendarField()\n```\n\nWhen i use G() method to create instance:\n\n```\nm = G(MyModel, calendar=[1, 2, 3])\n```\n\nIt always failed when executing `to_python`. After some debuging , i found that DDF filled calendar field with `\"  \"` instead of `[1, 2, 3]`.\n\nSo, my question is:\nHow to fill custom field in G()? \n\nI have looked over the document and tried several approaches, but they didn't help.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/35", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/35/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/35/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/35", "id": 22281840, "node_id": "MDU6SXNzdWUyMjI4MTg0MA==", "number": 35, "title": "Doesn't work properly with django-hvad for translations", "user": {"login": "qris", "id": 754175, "node_id": "MDQ6VXNlcjc1NDE3NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/754175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qris", "html_url": "https://github.com/qris", "followers_url": "https://api.github.com/users/qris/followers", "following_url": "https://api.github.com/users/qris/following{/other_user}", "gists_url": "https://api.github.com/users/qris/gists{/gist_id}", "starred_url": "https://api.github.com/users/qris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qris/subscriptions", "organizations_url": "https://api.github.com/users/qris/orgs", "repos_url": "https://api.github.com/users/qris/repos", "events_url": "https://api.github.com/users/qris/events{/privacy}", "received_events_url": "https://api.github.com/users/qris/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2013-11-07T17:25:35Z", "updated_at": "2020-01-04T16:40:46Z", "closed_at": "2020-01-04T15:22:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This works with django-hvad, provided that you give values for all required fields:\n\n```\n    item1 = NewsItem.objects.create(title=\"Item One\",\n        publication_date=date.today())\n```\n\nBut this doesn't:\n\n```\n    item2 = G(NewsItem, title=\"Another One\")\n```\n\nBecause the `title` attribute is a translated field. I'm not sure whether the problem is in hvad or DDF. I think it occurs here, in DynamicFixture.new():\n\n```\nfor field in get_fields_from_model(model_class):\n    ...\n    self.set_data_for_a_field(model_class, instance, field, persist_dependencies=persist_dependencies, **configuration)\n```\n\nBecause `get_fields_from_model` doesn't return translated fields (they're not in `model_class._meta.fields` either):\n\n```\n(Pdb) p get_fields_from_model(model_class)\n[<django.db.models.fields.AutoField: id>,\n<django.db.models.fields.DateField: publication_date>,\n<django.db.models.fields.files.ImageField: photo>,\n<django.db.models.fields.CharField: image_caption>, \n<django.db.models.fields.CharField: location>]\n```\n\nThat may be a mistake by `hvad`, but you can actually assign to those fields:\n\n```\n(Pdb) p instance.title\nu''\n(Pdb) instance.title = 'hello'\n(Pdb) p instance.title\n'hello'\n```\n\nso if DynamicFixture would actually assign all supplied kwargs, then it would work with hvad. Additionally it would not ignore supplied values for fields that it doesn't know about, which can lead to subtle errors.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/33", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/33/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/33/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/33", "id": 17847225, "node_id": "MDU6SXNzdWUxNzg0NzIyNQ==", "number": 33, "title": "Set max number of instances per model_class?", "user": {"login": "vishen", "id": 1715545, "node_id": "MDQ6VXNlcjE3MTU1NDU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1715545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishen", "html_url": "https://github.com/vishen", "followers_url": "https://api.github.com/users/vishen/followers", "following_url": "https://api.github.com/users/vishen/following{/other_user}", "gists_url": "https://api.github.com/users/vishen/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishen/subscriptions", "organizations_url": "https://api.github.com/users/vishen/orgs", "repos_url": "https://api.github.com/users/vishen/repos", "events_url": "https://api.github.com/users/vishen/events{/privacy}", "received_events_url": "https://api.github.com/users/vishen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 2632692, "node_id": "MDU6TGFiZWwyNjMyNjky", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-08-09T05:08:15Z", "updated_at": "2020-01-04T14:28:41Z", "closed_at": "2020-01-04T14:28:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need the ability to set the maximum number of instances per model_class, is there a way to do this already? \n\nThe the django project I'm using this for is large and complex with lots of relationships every where and I cannot find an easy way to minimise the creating of many instances per model class.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/31", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/31/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/31/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/31", "id": 17455399, "node_id": "MDU6SXNzdWUxNzQ1NTM5OQ==", "number": 31, "title": "data_fixture='random' doesn't work", "user": {"login": "qris", "id": 754175, "node_id": "MDQ6VXNlcjc1NDE3NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/754175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qris", "html_url": "https://github.com/qris", "followers_url": "https://api.github.com/users/qris/followers", "following_url": "https://api.github.com/users/qris/following{/other_user}", "gists_url": "https://api.github.com/users/qris/gists{/gist_id}", "starred_url": "https://api.github.com/users/qris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qris/subscriptions", "organizations_url": "https://api.github.com/users/qris/orgs", "repos_url": "https://api.github.com/users/qris/repos", "events_url": "https://api.github.com/users/qris/events{/privacy}", "received_events_url": "https://api.github.com/users/qris/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632688, "node_id": "MDU6TGFiZWwyNjMyNjg4", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-07-31T14:46:01Z", "updated_at": "2020-01-04T23:03:32Z", "closed_at": "2020-01-04T23:03:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The docs say you can do:\n\n```\nG(MyModel, data_fixture='random')\n```\n\nBut this doesn't work:\n\n```\nTraceback (most recent call last):\nFile \"/home/installuser/projects/inaspsite/django/website/perireg/tests/accept_reject_application_for_resource_tests.py\", line 213, in test_reapprove_updated_registration_form_loads_with_all_fields_changed\n    new_inst = new(Institution, data_fixture='random')\nFile \"/home/installuser/projects/inaspsite/django/website/.ve/local/lib/python2.7/site-packages/django_dynamic_fixture/__init__.py\", line 79, in new\n    return d.new(model, shelve=shelve, persist_dependencies=persist_dependencies, **kwargs)\nFile \"/home/installuser/projects/inaspsite/django/website/.ve/local/lib/python2.7/site-packages/django_dynamic_fixture/ddf.py\", line 441, in new\n    self.set_data_for_a_field(model_class, instance, field, persist_dependencies=persist_dependencies, **configuration)\nFile \"/home/installuser/projects/inaspsite/django/website/.ve/local/lib/python2.7/site-packages/django_dynamic_fixture/ddf.py\", line 348, in set_data_for_a_field\n    data = self._process_field_with_default_fixture(field, model_class, persist_dependencies)\nFile \"/home/installuser/projects/inaspsite/django/website/.ve/local/lib/python2.7/site-packages/django_dynamic_fixture/ddf.py\", line 335, in _process_field_with_default_fixture\n    data = self.data_fixture.generate_data(field)\nAttributeError: 'str' object has no attribute 'generate_data'\n```\n\nI suspect I should be creating an instance of RandomDataFixture() instead?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/29", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/29/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/29/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/29", "id": 15438032, "node_id": "MDU6SXNzdWUxNTQzODAzMg==", "number": 29, "title": "`get_or_create` and `update_or_create` support?", "user": {"login": "mrmachine", "id": 51939, "node_id": "MDQ6VXNlcjUxOTM5", "avatar_url": "https://avatars3.githubusercontent.com/u/51939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrmachine", "html_url": "https://github.com/mrmachine", "followers_url": "https://api.github.com/users/mrmachine/followers", "following_url": "https://api.github.com/users/mrmachine/following{/other_user}", "gists_url": "https://api.github.com/users/mrmachine/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrmachine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrmachine/subscriptions", "organizations_url": "https://api.github.com/users/mrmachine/orgs", "repos_url": "https://api.github.com/users/mrmachine/repos", "events_url": "https://api.github.com/users/mrmachine/events{/privacy}", "received_events_url": "https://api.github.com/users/mrmachine/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-06-12T07:30:09Z", "updated_at": "2020-01-10T15:05:36Z", "closed_at": "2020-01-05T01:58:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'd like to be able to specify some unique combination of fields to `G` (or `F`) and have DDF try to get the matching object and either update or create... I imagine it working like this:\n\n``` python\n# get by `a` and `b`, or create with `a`, `b` and `c`.\nG(a='abc', b='def', c='ghi', _get=['a', 'b'])\n\n# get by `a` and `b` and update `c`, or create with `a`, `b` and `c`.\nG(a='abc', b='def', c='ghi', _update=['a', 'b'])\n```\n\nI want to use DDF with a custom management function to quickly populate test data to play with interactively (not in a test case).\n\nUsing the default sequential data fixture I quickly run into integrity errors. Using the random data fixture I might avoid them briefly, but still quickly run into problems.\n\nAdding `get_or_create` and `update_or_create` support I could safely re-run my management command any time to create missing or update existing test data.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/28", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/28/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/28/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/28", "id": 15265737, "node_id": "MDU6SXNzdWUxNTI2NTczNw==", "number": 28, "title": "Bug with `__` notation and foreign keys?", "user": {"login": "mrmachine", "id": 51939, "node_id": "MDQ6VXNlcjUxOTM5", "avatar_url": "https://avatars3.githubusercontent.com/u/51939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrmachine", "html_url": "https://github.com/mrmachine", "followers_url": "https://api.github.com/users/mrmachine/followers", "following_url": "https://api.github.com/users/mrmachine/following{/other_user}", "gists_url": "https://api.github.com/users/mrmachine/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrmachine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrmachine/subscriptions", "organizations_url": "https://api.github.com/users/mrmachine/orgs", "repos_url": "https://api.github.com/users/mrmachine/repos", "events_url": "https://api.github.com/users/mrmachine/events{/privacy}", "received_events_url": "https://api.github.com/users/mrmachine/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632688, "node_id": "MDU6TGFiZWwyNjMyNjg4", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-06-07T10:17:43Z", "updated_at": "2020-01-04T14:24:31Z", "closed_at": "2020-01-04T14:24:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have `General`, with a `OneToOneField` to `Pod`, and `Pod.type` can be `['gallery', 'general', ...]`, and `Pod.broadcast` is a `ForeignKey` to `Broadcast`.\n\nIn my tests, first I create `broadcast`, then I want to create `General` (and other objects) and specify that `pod__broadcast=broadcast` and `pod__type='general'` (or other types).\n\nBut DDF  wants to either use \"gallery\" (first option for `Pod.type`) or create new `Broadcast` objects.\n\n``` python\n# I can use __ to set pod__type.\n>>> G(models.General, pod__type='general').pod.type\n'general'\n\n# But if I also set pod__broadcast, DFF re-uses my broadcast, but my specified pod__type is ignored and DFF uses the first option.\n>>> G(models.General, pod__broadcast=broadcast, pod__type='general').pod.type\n'gallery'\n>>> G(models.General, pod__broadcast=broadcast, pod__type='general').pod.broadcast, broadcast\n(<Broadcast: 1-ea6e254fd42; 2>, <Broadcast: 1-ea6e254fd42; 2>)\n\n# If I mix F() with __ notation, I get opposite but equally weird results. pod__type is correct, but a new Broadcast is created.\n>>> G(models.General, pod=F(broadcast=broadcast), pod__type='general').pod.type\n'general'\n>>> G(models.General, pod=F(broadcast=broadcast), pod__type='general').pod.broadcast, broadcast\n(<Broadcast: 12-35ff32184f; 13>, <Broadcast: 1-ea6e254fd42; 2>)\n\n# If I use only F(), it works.\n>>> G(models.General, pod=F(broadcast=broadcast, type='general')).pod.type\n'general'\n>>> G(models.General, pod=F(broadcast=broadcast, type='general')).pod.broadcast, broadcast\n(<Broadcast: 1-ea6e254fd42; 2>, <Broadcast: 1-ea6e254fd42; 2>)\n```\n\nIf mixing `F()` with `__` is not supported, it should raise an error, although having it work would be nice.\n\nHowever, it looks like there is definitely something wrong with `__`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/25", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/25/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/25/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/25", "id": 12571296, "node_id": "MDU6SXNzdWUxMjU3MTI5Ng==", "number": 25, "title": "DDF setup plugin doesn't work when using Buildout", "user": {"login": "michaelmior", "id": 82501, "node_id": "MDQ6VXNlcjgyNTAx", "avatar_url": "https://avatars0.githubusercontent.com/u/82501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelmior", "html_url": "https://github.com/michaelmior", "followers_url": "https://api.github.com/users/michaelmior/followers", "following_url": "https://api.github.com/users/michaelmior/following{/other_user}", "gists_url": "https://api.github.com/users/michaelmior/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelmior/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelmior/subscriptions", "organizations_url": "https://api.github.com/users/michaelmior/orgs", "repos_url": "https://api.github.com/users/michaelmior/repos", "events_url": "https://api.github.com/users/michaelmior/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelmior/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2013-03-28T16:07:59Z", "updated_at": "2015-09-22T18:42:06Z", "closed_at": "2015-09-22T18:42:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "My project currently uses Buildout and I haven't tested with a virtualenv-based project. But I noticed the DDF setup plugin actually imports the `ddf_setup` of the DDF setup plugin since `django-dynamic-fixture` appears first in `sys.path`.\n\nNot quite sure what the best solution is to this yet.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/23", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/23/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/23/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/23", "id": 11315086, "node_id": "MDU6SXNzdWUxMTMxNTA4Ng==", "number": 23, "title": "SECRET_KEY not set", "user": {"login": "michaelmior", "id": 82501, "node_id": "MDQ6VXNlcjgyNTAx", "avatar_url": "https://avatars0.githubusercontent.com/u/82501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelmior", "html_url": "https://github.com/michaelmior", "followers_url": "https://api.github.com/users/michaelmior/followers", "following_url": "https://api.github.com/users/michaelmior/following{/other_user}", "gists_url": "https://api.github.com/users/michaelmior/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelmior/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelmior/subscriptions", "organizations_url": "https://api.github.com/users/michaelmior/orgs", "repos_url": "https://api.github.com/users/michaelmior/repos", "events_url": "https://api.github.com/users/michaelmior/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelmior/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2013-02-23T03:25:51Z", "updated_at": "2013-02-23T15:36:39Z", "closed_at": "2013-02-23T15:36:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I can't run tests without adding a dummy value for `SECRET_KEY` in `settings.py`. Is there something I have configured incorrectly, or is this a bug?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/21", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/21/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/21/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/21", "id": 10340021, "node_id": "MDU6SXNzdWUxMDM0MDAyMQ==", "number": 21, "title": "Remove created files", "user": {"login": "camilonova", "id": 202559, "node_id": "MDQ6VXNlcjIwMjU1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/202559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camilonova", "html_url": "https://github.com/camilonova", "followers_url": "https://api.github.com/users/camilonova/followers", "following_url": "https://api.github.com/users/camilonova/following{/other_user}", "gists_url": "https://api.github.com/users/camilonova/gists{/gist_id}", "starred_url": "https://api.github.com/users/camilonova/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camilonova/subscriptions", "organizations_url": "https://api.github.com/users/camilonova/orgs", "repos_url": "https://api.github.com/users/camilonova/repos", "events_url": "https://api.github.com/users/camilonova/events{/privacy}", "received_events_url": "https://api.github.com/users/camilonova/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2013-01-26T16:49:19Z", "updated_at": "2013-03-02T05:15:52Z", "closed_at": "2013-02-27T23:52:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "If i create a test, and use the dynamic fixture on a model that contains a FileField, it creates a file, and after the test ends the created file is not removed from the file system.\n\nCould you add some way to remove those images?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/20", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/20/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/20/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/20", "id": 10056579, "node_id": "MDU6SXNzdWUxMDA1NjU3OQ==", "number": 20, "title": "If a ForeignKey has a pk as its default value rather than an instance, dynamic fixtures break", "user": {"login": "AndrewIngram", "id": 35227, "node_id": "MDQ6VXNlcjM1MjI3", "avatar_url": "https://avatars1.githubusercontent.com/u/35227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndrewIngram", "html_url": "https://github.com/AndrewIngram", "followers_url": "https://api.github.com/users/AndrewIngram/followers", "following_url": "https://api.github.com/users/AndrewIngram/following{/other_user}", "gists_url": "https://api.github.com/users/AndrewIngram/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndrewIngram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndrewIngram/subscriptions", "organizations_url": "https://api.github.com/users/AndrewIngram/orgs", "repos_url": "https://api.github.com/users/AndrewIngram/repos", "events_url": "https://api.github.com/users/AndrewIngram/events{/privacy}", "received_events_url": "https://api.github.com/users/AndrewIngram/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632689, "node_id": "MDU6TGFiZWwyNjMyNjg5", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}, {"id": 2632693, "node_id": "MDU6TGFiZWwyNjMyNjkz", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-01-17T12:23:52Z", "updated_at": "2013-04-24T03:28:48Z", "closed_at": "2013-01-17T15:29:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a model like this (heavily simplified):\n\n```\nclass City(models.Model):\n    currency = models.ForeignKey('payment.Currency', default=2)\n```\n\nIf I try to create a city fixture using `G(City)`, it fails because it attempts to assign 2 as the value of currency, rather than the instance of `Currency` with primary key 2\n\nI think the solution is alter `_process_field_with_default_fixture` to return the foreign key's model if there's a default value that's not an instance or callable.\n\nAdmittedly, using defaults on relationship fields is a yucky, which we'll hopefully remove in the long run, but we'd like to be able to use DDF before then.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/15", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/15/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/15/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/15", "id": 7987371, "node_id": "MDU6SXNzdWU3OTg3Mzcx", "number": 15, "title": "Changing value of auto_now_add and _auto_now on field", "user": {"login": "ephess", "id": 685593, "node_id": "MDQ6VXNlcjY4NTU5Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/685593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ephess", "html_url": "https://github.com/ephess", "followers_url": "https://api.github.com/users/ephess/followers", "following_url": "https://api.github.com/users/ephess/following{/other_user}", "gists_url": "https://api.github.com/users/ephess/gists{/gist_id}", "starred_url": "https://api.github.com/users/ephess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ephess/subscriptions", "organizations_url": "https://api.github.com/users/ephess/orgs", "repos_url": "https://api.github.com/users/ephess/repos", "events_url": "https://api.github.com/users/ephess/events{/privacy}", "received_events_url": "https://api.github.com/users/ephess/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632688, "node_id": "MDU6TGFiZWwyNjMyNjg4", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2012-10-31T01:52:13Z", "updated_at": "2014-07-22T11:10:05Z", "closed_at": "2012-12-30T20:15:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "My tests started failing today due to a database consistency error on a datetime field when trying to instantiate a model. After a bit of debugging I noticed that the auto_now_add attribute on this field was changing from True to False at some point in the code.\n\nI managed to track it down to get() call for the model, after a bit of digging I found the following function which seems to be the culprit:\n\nhttps://github.com/paulocheque/django-dynamic-fixture/blob/master/django_dynamic_fixture/ddf.py#L265\n\nIs there any reason for this? Seems like this would completely break most models that run through it with auto_now_add or auto_now set.\n\n(Thanks for the great project by the way, code is so much cleaner (was using Model.objects.create() before :( )\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/12", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/12/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/12/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/12", "id": 7304773, "node_id": "MDU6SXNzdWU3MzA0Nzcz", "number": 12, "title": "Problem with ManyToManyField", "user": {"login": "kajic", "id": 228296, "node_id": "MDQ6VXNlcjIyODI5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/228296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kajic", "html_url": "https://github.com/kajic", "followers_url": "https://api.github.com/users/kajic/followers", "following_url": "https://api.github.com/users/kajic/following{/other_user}", "gists_url": "https://api.github.com/users/kajic/gists{/gist_id}", "starred_url": "https://api.github.com/users/kajic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kajic/subscriptions", "organizations_url": "https://api.github.com/users/kajic/orgs", "repos_url": "https://api.github.com/users/kajic/repos", "events_url": "https://api.github.com/users/kajic/events{/privacy}", "received_events_url": "https://api.github.com/users/kajic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2012-10-02T20:34:04Z", "updated_at": "2012-10-04T16:39:07Z", "closed_at": "2012-10-04T00:43:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Having added a ManyToManyField to a model (MyModel) I am suddenly starting to get these kind of errors:\n\n> > > G(MyModel)\n> > > { instance is printed here ... }\n> > > AttributeError: 'MyModel' object has no attribute 'id'\n\nThe error message itself isn't very helpful, do you have any idea what is going on?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/11", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/11/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/11/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/11", "id": 6977363, "node_id": "MDU6SXNzdWU2OTc3MzYz", "number": 11, "title": "Improve Documentation about setUp and tearDown for tests", "user": {"login": "infyloop", "id": 888499, "node_id": "MDQ6VXNlcjg4ODQ5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/888499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/infyloop", "html_url": "https://github.com/infyloop", "followers_url": "https://api.github.com/users/infyloop/followers", "following_url": "https://api.github.com/users/infyloop/following{/other_user}", "gists_url": "https://api.github.com/users/infyloop/gists{/gist_id}", "starred_url": "https://api.github.com/users/infyloop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/infyloop/subscriptions", "organizations_url": "https://api.github.com/users/infyloop/orgs", "repos_url": "https://api.github.com/users/infyloop/repos", "events_url": "https://api.github.com/users/infyloop/events{/privacy}", "received_events_url": "https://api.github.com/users/infyloop/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632692, "node_id": "MDU6TGFiZWwyNjMyNjky", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2012-09-19T09:45:51Z", "updated_at": "2012-12-30T17:49:42Z", "closed_at": "2012-12-30T17:49:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently the documentation does not talk of how setUp and tearDown methods for classes work. \nIf possible, include optimization of setUp and tearDown as well. \n\nA simple example would be as follows:\n\n```\nclass BookModelTest(TestCase):\n\n     def setUp(self):\n          self.author = G(Author)\n          self.book = G(Book, author=[author])\n\n     def test_book_creation(self):\n          book_in_db = Book.objects.all()\n          self.assertEquals(book_in_db.count(), 1)\n          first_book = book_in_db[0]\n          self.assertEquals(first_book.name, self.book.name)\n          self.assertEquals(list(first_book.author), [self.author])\n\nclass Author(models.Model):\n\n     name = models.CharField(max_length=100)\n\nclass Book(models.Model):\n\n     name = models.CharField(max_length=100)\n     author = models.ManyToManyField(Author)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/10", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/10/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/10/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/10", "id": 6868807, "node_id": "MDU6SXNzdWU2ODY4ODA3", "number": 10, "title": "Creating files for ImageField and FileField fields", "user": {"login": "saippuakauppias", "id": 945306, "node_id": "MDQ6VXNlcjk0NTMwNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/945306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saippuakauppias", "html_url": "https://github.com/saippuakauppias", "followers_url": "https://api.github.com/users/saippuakauppias/followers", "following_url": "https://api.github.com/users/saippuakauppias/following{/other_user}", "gists_url": "https://api.github.com/users/saippuakauppias/gists{/gist_id}", "starred_url": "https://api.github.com/users/saippuakauppias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saippuakauppias/subscriptions", "organizations_url": "https://api.github.com/users/saippuakauppias/orgs", "repos_url": "https://api.github.com/users/saippuakauppias/repos", "events_url": "https://api.github.com/users/saippuakauppias/events{/privacy}", "received_events_url": "https://api.github.com/users/saippuakauppias/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2012-09-14T06:46:43Z", "updated_at": "2020-01-04T15:17:37Z", "closed_at": "2020-01-04T15:17:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm writing custom fixture class for creating uploaded files. But this code must  be in a package.\n\n``` python\nimport os\n\nfrom django.conf import settings\nfrom django.core.files import images, File\n\nfrom django_dynamic_fixture.\\\n    fixture_algorithms.sequential_fixture import SequentialDataFixture\n\n\nimage_path = os.path.join(settings.PROJECT_ROOT, 'static', 'images',\n                          'logo.png')\n\n\nclass FixedFilesFixture(SequentialDataFixture):\n\n    def filepathfield_config(self, field, key):\n        return image_path\n\n    def filefield_config(self, field, key):\n        with open(image_path, 'rb+') as fh:\n            return File(fh)\n\n    def imagefield_config(self, field, key):\n        with open(image_path, 'rb+') as fh:\n            return images.ImageFile(fh)\n\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/8", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/8/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/8/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/8", "id": 6714803, "node_id": "MDU6SXNzdWU2NzE0ODAz", "number": 8, "title": "UnsupportedFieldError: PointField [geoDjango]", "user": {"login": "zvictor", "id": 181076, "node_id": "MDQ6VXNlcjE4MTA3Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/181076?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zvictor", "html_url": "https://github.com/zvictor", "followers_url": "https://api.github.com/users/zvictor/followers", "following_url": "https://api.github.com/users/zvictor/following{/other_user}", "gists_url": "https://api.github.com/users/zvictor/gists{/gist_id}", "starred_url": "https://api.github.com/users/zvictor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zvictor/subscriptions", "organizations_url": "https://api.github.com/users/zvictor/orgs", "repos_url": "https://api.github.com/users/zvictor/repos", "events_url": "https://api.github.com/users/zvictor/events{/privacy}", "received_events_url": "https://api.github.com/users/zvictor/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632690, "node_id": "MDU6TGFiZWwyNjMyNjkw", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2012-09-07T14:06:25Z", "updated_at": "2015-05-26T07:54:05Z", "closed_at": "2015-05-26T07:54:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\n\nI realized that DDF has no compatibility with `geodjango`, more specifically with `django.contrib.gis.db.models.fields.PointField`.\nI am interested in implement it, but I don't know how to start. How can we deal with `geodjango` requirement, and how am I supposed to test the implementation? Any ideas how can we do it?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/7", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/7/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/7/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/7", "id": 6251108, "node_id": "MDU6SXNzdWU2MjUxMTA4", "number": 7, "title": "null=True, blank=True fields are given values unless default=None", "user": {"login": "tobych", "id": 175174, "node_id": "MDQ6VXNlcjE3NTE3NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/175174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobych", "html_url": "https://github.com/tobych", "followers_url": "https://api.github.com/users/tobych/followers", "following_url": "https://api.github.com/users/tobych/following{/other_user}", "gists_url": "https://api.github.com/users/tobych/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobych/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobych/subscriptions", "organizations_url": "https://api.github.com/users/tobych/orgs", "repos_url": "https://api.github.com/users/tobych/repos", "events_url": "https://api.github.com/users/tobych/events{/privacy}", "received_events_url": "https://api.github.com/users/tobych/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632692, "node_id": "MDU6TGFiZWwyNjMyNjky", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2012-08-15T21:10:13Z", "updated_at": "2012-09-08T03:43:05Z", "closed_at": "2012-09-08T03:43:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a model with this field:\n\n``` python\nreset_timestamp = models.DateTimeField(null=True, blank=True)\n```\n\nTo my surprise, DDF sets this field with a date when instantiating the model. I was expecting it to leave it blank, because it can be, and that's what Django would do, even though it doesn't explicitly set `default=None`. I had to do that to avoid this happening:\n\n``` python\nreset_timestamp = models.DateTimeField(null=True, blank=True, default=None)\n```\n\nIs this supposed to be happening? Should I be including explicit defaults in all my nullable fields?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/5", "repository_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture", "labels_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/5/comments", "events_url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/issues/5/events", "html_url": "https://github.com/paulocheque/django-dynamic-fixture/issues/5", "id": 6250344, "node_id": "MDU6SXNzdWU2MjUwMzQ0", "number": 5, "title": "Object creation fails if a ForeignKey field has an ID as default", "user": {"login": "tobych", "id": 175174, "node_id": "MDQ6VXNlcjE3NTE3NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/175174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobych", "html_url": "https://github.com/tobych", "followers_url": "https://api.github.com/users/tobych/followers", "following_url": "https://api.github.com/users/tobych/following{/other_user}", "gists_url": "https://api.github.com/users/tobych/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobych/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobych/subscriptions", "organizations_url": "https://api.github.com/users/tobych/orgs", "repos_url": "https://api.github.com/users/tobych/repos", "events_url": "https://api.github.com/users/tobych/events{/privacy}", "received_events_url": "https://api.github.com/users/tobych/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2632693, "node_id": "MDU6TGFiZWwyNjMyNjkz", "url": "https://api.github.com/repos/paulocheque/django-dynamic-fixture/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2012-08-15T20:38:50Z", "updated_at": "2013-04-24T15:22:44Z", "closed_at": "2012-12-30T18:12:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using f5784b, and I've a model with this field:\n\n``` python\nGENERIC_BUNNY_ID = 8\n# ...\nbunny_type = models.ForeignKey(BunnyType, default=GENERIC_BUNNY_ID)\n```\n\nWhen I try to instantiate this using G, I get:\n\n```\nFile \"/usr/local/lib/python2.6/dist-packages/django_dynamic_fixture-1.6.3-py2.6.egg/django_dynamic_fixture/ddf.py\", line 370, in set_data_for_a_field\n    setattr(instance, field.name, data) # Model.field = data\n  File \"/usr/local/lib/python2.6/dist-packages/django/db/models/fields/related.py\", line 331, in __set__\n    self.field.name, self.field.rel.to._meta.object_name))\nValueError: Cannot assign \"8\": \"Asset.category\" must be a \"Category\" instance.\n```\n\nI've not looked super long at the code, but I'll submit a pull request for code that's got it working for me.\n\nToby\n", "performed_via_github_app": null, "score": 1.0}]}