{"total_count": 906, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/pallets/click/issues/1657", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1657/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1657/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1657/events", "html_url": "https://github.com/pallets/click/issues/1657", "id": 683047477, "node_id": "MDU6SXNzdWU2ODMwNDc0Nzc=", "number": 1657, "title": "click.Table sort rows by values in a column", "user": {"login": "dileepkr", "id": 22859625, "node_id": "MDQ6VXNlcjIyODU5NjI1", "avatar_url": "https://avatars3.githubusercontent.com/u/22859625?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dileepkr", "html_url": "https://github.com/dileepkr", "followers_url": "https://api.github.com/users/dileepkr/followers", "following_url": "https://api.github.com/users/dileepkr/following{/other_user}", "gists_url": "https://api.github.com/users/dileepkr/gists{/gist_id}", "starred_url": "https://api.github.com/users/dileepkr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dileepkr/subscriptions", "organizations_url": "https://api.github.com/users/dileepkr/orgs", "repos_url": "https://api.github.com/users/dileepkr/repos", "events_url": "https://api.github.com/users/dileepkr/events{/privacy}", "received_events_url": "https://api.github.com/users/dileepkr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-20T19:36:51Z", "updated_at": "2020-08-20T20:36:22Z", "closed_at": "2020-08-20T20:36:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nIn click.Table is there a way to specify sorting order of rows based on a specific column?\r\n\r\ncurrently i don't see any row ordering in my table\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1655", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1655/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1655/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1655/events", "html_url": "https://github.com/pallets/click/issues/1655", "id": 682542367, "node_id": "MDU6SXNzdWU2ODI1NDIzNjc=", "number": 1655, "title": "Date ParamType", "user": {"login": "enricobarzetti", "id": 7615875, "node_id": "MDQ6VXNlcjc2MTU4NzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/7615875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/enricobarzetti", "html_url": "https://github.com/enricobarzetti", "followers_url": "https://api.github.com/users/enricobarzetti/followers", "following_url": "https://api.github.com/users/enricobarzetti/following{/other_user}", "gists_url": "https://api.github.com/users/enricobarzetti/gists{/gist_id}", "starred_url": "https://api.github.com/users/enricobarzetti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/enricobarzetti/subscriptions", "organizations_url": "https://api.github.com/users/enricobarzetti/orgs", "repos_url": "https://api.github.com/users/enricobarzetti/repos", "events_url": "https://api.github.com/users/enricobarzetti/events{/privacy}", "received_events_url": "https://api.github.com/users/enricobarzetti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-20T08:55:05Z", "updated_at": "2020-08-20T20:05:35Z", "closed_at": "2020-08-20T11:41:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Similar to DateTime there should be a Date parameter type\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1654", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1654/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1654/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1654/events", "html_url": "https://github.com/pallets/click/issues/1654", "id": 681597563, "node_id": "MDU6SXNzdWU2ODE1OTc1NjM=", "number": 1654, "title": "Support default subcommand in a group", "user": {"login": "saroad2", "id": 19425795, "node_id": "MDQ6VXNlcjE5NDI1Nzk1", "avatar_url": "https://avatars0.githubusercontent.com/u/19425795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saroad2", "html_url": "https://github.com/saroad2", "followers_url": "https://api.github.com/users/saroad2/followers", "following_url": "https://api.github.com/users/saroad2/following{/other_user}", "gists_url": "https://api.github.com/users/saroad2/gists{/gist_id}", "starred_url": "https://api.github.com/users/saroad2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saroad2/subscriptions", "organizations_url": "https://api.github.com/users/saroad2/orgs", "repos_url": "https://api.github.com/users/saroad2/repos", "events_url": "https://api.github.com/users/saroad2/events{/privacy}", "received_events_url": "https://api.github.com/users/saroad2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-19T06:57:52Z", "updated_at": "2020-08-19T12:56:28Z", "closed_at": "2020-08-19T12:39:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "One should be able to specify a subcommand in a group to be the default command.\r\n\r\nConsider the following CLI code:\r\n```python\r\nimport click\r\n\r\n\r\n@click.group(invoke_without_command=True)\r\n@click.pass_context\r\ndef greet(ctx: click.Context):\r\n    if ctx.invoked_subcommand is None:\r\n        click.echo(\"Somebody?\")\r\n\r\n\r\n@greet.command()\r\n@click.pass_context\r\n@click.argument(\"name\", type=str)\r\ndef hello(ctx, name):\r\n    click.echo(f\"Hello {name}, how are you?\")\r\n\r\n\r\n@greet.command()\r\n@click.pass_context\r\n@click.argument(\"name\", type=str)\r\ndef hola(ctx, name):\r\n    click.echo(f\"Hola {name}, comos tas?\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    greet()\r\n```\r\n\r\nHere are a few running examples:\r\n```\r\n>> greet hello Danny\r\nHello Danny, how are you?\r\n>> greet hola Alejandro\r\nHola Alejandro, comos tas?\r\n```\r\n\r\nI want to be able to run `greet Danny` and it will take `hello` as the default command.\r\n\r\nHere's an API suggestion:\r\n```python\r\nimport click\r\n\r\n\r\n@click.group(invoke_without_command=True)\r\n@click.pass_context\r\ndef greet(ctx: click.Context):\r\n    if ctx.invoked_subcommand is None:\r\n        click.echo(\"Somebody?\")\r\n\r\n\r\n@greet.command(default_command=True)  # <- specify default command here\r\n@click.pass_context\r\n@click.argument(\"name\", type=str)\r\ndef hello(ctx, name):\r\n    click.echo(f\"Hello {name}, how are you?\")\r\n\r\n\r\n@greet.command()\r\n@click.pass_context\r\n@click.argument(\"name\", type=str)\r\ndef hola(ctx, name):\r\n    click.echo(f\"Hola {name}, comos tas?\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    greet()\r\n```\r\n\r\nAt the moment I can achieve this effect using `click.MultiCommand`, but I think that this scenario is common enough to be handled in *Click*'s decorators.\r\n\r\nPlease let me know if you approve of this idea, and if you do -- I will go ahead implementing it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1653", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1653/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1653/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1653/events", "html_url": "https://github.com/pallets/click/issues/1653", "id": 681530928, "node_id": "MDU6SXNzdWU2ODE1MzA5Mjg=", "number": 1653, "title": "Help user decide which options to set when env vars are involved", "user": {"login": "schollii", "id": 2598808, "node_id": "MDQ6VXNlcjI1OTg4MDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2598808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schollii", "html_url": "https://github.com/schollii", "followers_url": "https://api.github.com/users/schollii/followers", "following_url": "https://api.github.com/users/schollii/following{/other_user}", "gists_url": "https://api.github.com/users/schollii/gists{/gist_id}", "starred_url": "https://api.github.com/users/schollii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schollii/subscriptions", "organizations_url": "https://api.github.com/users/schollii/orgs", "repos_url": "https://api.github.com/users/schollii/repos", "events_url": "https://api.github.com/users/schollii/events{/privacy}", "received_events_url": "https://api.github.com/users/schollii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-19T04:09:35Z", "updated_at": "2020-08-20T11:19:19Z", "closed_at": "2020-08-19T05:34:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "When a user requests a command's help docs, they often want to know which options they need to provide on the command line. They base this decision on what will happen if they do NOT specify the option. The `--help` should help the user make that decision taking into account environment variables. Explicit is better than implicit. \r\n\r\nCurrently the output of the help command does not indicate whether an environment variable will be used, nor the value that the option will get from this env var (if it applies), if the option is not given on the command line.\r\n\r\nThe following code uses all 4 combinations of default values and env vars, both of which are critical in deciding whether an option needs to be given on command line: \r\n```\r\nimport click\r\n\r\n@click.command('example')\r\n@click.option('--aaa')\r\n@click.option('--bbb', default='my-default-val', show_default=True)\r\n@click.option('--ccc', envvar='SOME_ENV_VAR', show_default=True)\r\n@click.option('--ddd', default='my-default-val', envvar='SOME_ENV_VAR', show_default=True)\r\ndef cmd_mycommand(aaa, bbb, ccc, ddd):\r\n    \"\"\"some help\"\"\"\r\n    print('aaa', aaa)\r\n    print('bbb', bbb)\r\n    print('ccc', ccc)\r\n    print('ddd', ddd)\r\n\r\ncmd_mycommand()\r\n```\r\n\r\nFor a user to decide which options they need, the help should inform them of which env vars are tied to a command's options. This is easily automated. Here is an example of output of `--help` that would do this, for the above example:\r\n```\r\n$ SOME_ENV_VAR=other-default-var python ../test.py --help\r\nUsage: test.py [OPTIONS]\r\n\r\n  some help\r\n\r\nOptions:\r\n  --aaa TEXT\r\n  --bbb TEXT  [default: my-default-val]\r\n  --ccc TEXT  [default: other-default-val (from SOME_ENV_VAR)]\r\n  --ddd TEXT  [default: other-default-val (without SOME_ENV_VAR set: my-default-val)]\r\n  --help      Show this message and exit.\r\n```\r\nIn the above \"default\" could be replaced by \"fallback\" value, \"if not specified\", whatever, the above output is just one of many ways of wording and structuring the information. \r\n\r\nI'd be happy to submit a proof of concept of this via a PR. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1652", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1652/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1652/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1652/events", "html_url": "https://github.com/pallets/click/issues/1652", "id": 681211728, "node_id": "MDU6SXNzdWU2ODEyMTE3Mjg=", "number": 1652, "title": "if default given, it should be shown in the help", "user": {"login": "schollii", "id": 2598808, "node_id": "MDQ6VXNlcjI1OTg4MDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2598808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schollii", "html_url": "https://github.com/schollii", "followers_url": "https://api.github.com/users/schollii/followers", "following_url": "https://api.github.com/users/schollii/following{/other_user}", "gists_url": "https://api.github.com/users/schollii/gists{/gist_id}", "starred_url": "https://api.github.com/users/schollii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schollii/subscriptions", "organizations_url": "https://api.github.com/users/schollii/orgs", "repos_url": "https://api.github.com/users/schollii/repos", "events_url": "https://api.github.com/users/schollii/events{/privacy}", "received_events_url": "https://api.github.com/users/schollii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-18T17:30:22Z", "updated_at": "2020-08-18T17:58:45Z", "closed_at": "2020-08-18T17:58:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThis issue tracker is a tool to address bugs in Click itself.\r\nPlease use the #pocoo IRC channel on freenode, the Discord server or\r\nStack Overflow for general questions about using Flask or issues\r\nnot related to Click.\r\n\r\nIf you'd like to report a bug in Click, fill out the template below. Provide\r\nany extra information that may be useful / related to your problem.\r\nIdeally, create an [MCVE](https://stackoverflow.com/help/mcve), which helps us\r\nunderstand the problem and helps check that it is not caused by something in\r\nyour code.\r\n-->\r\n\r\n\r\n### Expected Behavior\r\n\r\nIf I specifiy a default in an option that is different from the \"default default\", it's probably because the \"default default\" is not adequate, so I should see it in the --help output, without having to write \"show_default=True\". I understand that if default is *not* given, or matches the default default, then show_default can default to false. \r\n\r\nBut there's nothing wrong with stating the obvious either: although most people expect defaults to be 0/None/False (falsy), it's not BAD to show it in the help, even if it is a default default and is \"obvious\". Whenever I use --help on an app, I never think \"duh that default value is obvious, why do they bother showing it\", but I often think \"gosh I wish they had stated that the default was None (or ABC or whatever) because it actually was not obvious\". \r\n\r\n\r\n### Actual Behavior\r\n\r\nYou have to specify show_default=True for it to become visible if default if default is not the default default. When have you ever seen a CLI not show \"non-null\" defaults (ie defaults other than 0/None/False are always visible). The show_default=True should be implied if the default given does not match the \"default default\"\r\n\r\n### Environment\r\n\r\n* Python version: 3.7\r\n* Click version: 7.1.2\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1651", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1651/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1651/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1651/events", "html_url": "https://github.com/pallets/click/issues/1651", "id": 681170497, "node_id": "MDU6SXNzdWU2ODExNzA0OTc=", "number": 1651, "title": "wrong default shown when envvar set on an option and show_default=True", "user": {"login": "schollii", "id": 2598808, "node_id": "MDQ6VXNlcjI1OTg4MDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2598808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schollii", "html_url": "https://github.com/schollii", "followers_url": "https://api.github.com/users/schollii/followers", "following_url": "https://api.github.com/users/schollii/following{/other_user}", "gists_url": "https://api.github.com/users/schollii/gists{/gist_id}", "starred_url": "https://api.github.com/users/schollii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schollii/subscriptions", "organizations_url": "https://api.github.com/users/schollii/orgs", "repos_url": "https://api.github.com/users/schollii/repos", "events_url": "https://api.github.com/users/schollii/events{/privacy}", "received_events_url": "https://api.github.com/users/schollii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-18T16:20:38Z", "updated_at": "2020-08-18T19:03:39Z", "closed_at": "2020-08-18T16:38:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I started using the `envvar` arg of click.option() only recently. It behaves as expected with regards to default values, but not (IMHO) for help string. Sample code: \r\n```\r\nimport click\r\n\r\n@click.command('example')\r\n@click.option('--aaa')\r\n@click.option('--bbb', default='my-default-val', show_default=True)\r\n@click.option('--ccc', envvar='SOME_ENV_VAR', show_default=True)\r\n@click.option('--ddd', default='my-default-val', envvar='SOME_ENV_VAR', show_default=True)\r\ndef cmd_mycommand(aaa, bbb, ccc, ddd):\r\n    \"\"\"some help\"\"\"\r\n    print('aaa', aaa)\r\n    print('bbb', bbb)\r\n    print('ccc', ccc)\r\n    print('ddd', ddd)\r\n\r\ncmd_mycommand()\r\n```\r\nWhen `SOME_ENV_VAR` is *not* set, this produces the following output: \r\n```\r\n$ python ../test.py \r\naaa None\r\nbbb my-default-val\r\nccc None\r\nddd my-default-val\r\n```\r\nwhich is consistent with the output of --help: \r\n```\r\n$ python ../test.py --help\r\nUsage: test.py [OPTIONS]\r\n\r\n  some help\r\n\r\nOptions:\r\n  --aaa TEXT\r\n  --bbb TEXT  [default: my-default-val]\r\n  --ccc TEXT\r\n  --ddd TEXT  [default: my-default-val]\r\n  --help      Show this message and exit.\r\n```\r\n\r\n### Expected Behavior\r\n\r\nWhen  `SOME_ENV_VAR` is set to something, the default value is the value of that env var, which is what I expect:\r\n```\r\n$ SOME_ENV_VAR=other-default=var python ../test.py \r\naaa None\r\nbbb my-default-val\r\nccc other-default=var\r\nddd other-default=var\r\n```\r\nBut therefore I would also expect to see this reflected in the --help output, something like this: \r\n```\r\n$ SOME_ENV_VAR=other-default=var python ../test.py --help\r\nUsage: test.py [OPTIONS]\r\n\r\n  some help\r\n\r\nOptions:\r\n  --aaa TEXT\r\n  --bbb TEXT  [default: my-default-val]\r\n  --ccc TEXT  [default: other-default-val]\r\n  --ddd TEXT  [default: other-default-val]\r\n  --help      Show this message and exit.\r\n```\r\nFurther I would expect the help string to say something about the default value being controlled by an env var. Example: \r\n```\r\n$ SOME_ENV_VAR=other-default=var python ../test.py --help\r\nUsage: test.py [OPTIONS]\r\n\r\n  some help\r\n\r\nOptions:\r\n  --aaa TEXT\r\n  --bbb TEXT  [default: my-default-val]\r\n  --ccc TEXT  [default (from SOME_ENV_VAR): other-default-val]\r\n  --ddd TEXT  [default (from SOME_ENV_VAR): other-default-val]\r\n  --help      Show this message and exit.\r\n```\r\n\r\n### Actual Behavior\r\n\r\nWhen `envvar` is used, \r\n- I see the same help output whether or not the env var is set. The help output is inconsistent with the actual default (and correct) values that click used. \r\n- There is no indication in the help string that the default value used by click is controlled by an env var\r\n\r\n\r\n### Environment\r\n\r\n* Python version: 3.7\r\n* Click version: 7.1.2\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1648", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1648/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1648/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1648/events", "html_url": "https://github.com/pallets/click/issues/1648", "id": 679851513, "node_id": "MDU6SXNzdWU2Nzk4NTE1MTM=", "number": 1648, "title": "Progress bar does not display until after the first item is complete", "user": {"login": "max-sixty", "id": 5635139, "node_id": "MDQ6VXNlcjU2MzUxMzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/max-sixty", "html_url": "https://github.com/max-sixty", "followers_url": "https://api.github.com/users/max-sixty/followers", "following_url": "https://api.github.com/users/max-sixty/following{/other_user}", "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}", "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions", "organizations_url": "https://api.github.com/users/max-sixty/orgs", "repos_url": "https://api.github.com/users/max-sixty/repos", "events_url": "https://api.github.com/users/max-sixty/events{/privacy}", "received_events_url": "https://api.github.com/users/max-sixty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2202112629, "node_id": "MDU6TGFiZWwyMjAyMTEyNjI5", "url": "https://api.github.com/repos/pallets/click/labels/f:progress%20bar", "name": "f:progress bar", "color": "e0647b", "default": false, "description": "feature: progress bar"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-16T23:46:12Z", "updated_at": "2020-08-17T02:28:59Z", "closed_at": "2020-08-16T23:56:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Take this example:\r\n```python\r\n    with click.progressbar(length=6, label=\"Doing something\") as bar:\r\n        for thing in [3, 2, 1]:\r\n            time.sleep(thing)\r\n            bar.update(thing)\r\n```\r\n\r\nThis shows nothing until three seconds, at which point it shows:\r\n```\r\nDoing something  [##################------------------]   50%  00:00:03\r\n```\r\n\r\nWould it be reasonable for it to display a `0%` at first? \r\nThis is mostly an issue with a small number of items which take a long time.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1644", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1644/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1644/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1644/events", "html_url": "https://github.com/pallets/click/issues/1644", "id": 678496554, "node_id": "MDU6SXNzdWU2Nzg0OTY1NTQ=", "number": 1644, "title": "multi commands // collecting all parameters at one place", "user": {"login": "aabramovrepo", "id": 17107812, "node_id": "MDQ6VXNlcjE3MTA3ODEy", "avatar_url": "https://avatars1.githubusercontent.com/u/17107812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aabramovrepo", "html_url": "https://github.com/aabramovrepo", "followers_url": "https://api.github.com/users/aabramovrepo/followers", "following_url": "https://api.github.com/users/aabramovrepo/following{/other_user}", "gists_url": "https://api.github.com/users/aabramovrepo/gists{/gist_id}", "starred_url": "https://api.github.com/users/aabramovrepo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aabramovrepo/subscriptions", "organizations_url": "https://api.github.com/users/aabramovrepo/orgs", "repos_url": "https://api.github.com/users/aabramovrepo/repos", "events_url": "https://api.github.com/users/aabramovrepo/events{/privacy}", "received_events_url": "https://api.github.com/users/aabramovrepo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-13T14:46:40Z", "updated_at": "2020-08-13T14:49:25Z", "closed_at": "2020-08-13T14:49:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi All,\r\n\r\n   I have a question with respect to multi commands. Here is my code:\r\n\r\n```\r\nimport click\r\n\r\n@click.group()\r\n@click.pass_context\r\n@click.option('--main-option', '-o', default='a',\r\n              type=click.Choice(['a', 'b', 'c']))\r\ndef main(ctx: click.core.Context, main_option: str) -> None:\r\n    ctx.ensure_object(dict)\r\n    for name, value in locals().items():\r\n        if not isinstance(value, click.core.Context):\r\n            ctx.obj[name] = value\r\n\r\n\r\n@main.command('a-command')\r\n@click.option('--a-option', '-a', default='aa',\r\n              type=click.Choice(['aa', 'ab', 'ac']))\r\n@click.pass_context\r\ndef command_a(ctx: click.core.Context, a_option: str) -> None:\r\n    ctx.ensure_object(dict)\r\n    for name, value in locals().items():\r\n        if not isinstance(value, click.core.Context):\r\n            ctx.obj[name] = value\r\n    run(ctx)\r\n\r\n\r\n@main.command('b-command')\r\n@click.option('--b-option', '-b', default='ba',\r\n              type=click.Choice(['ba', 'bb', 'bc']))\r\n@click.pass_context\r\ndef command_b(ctx: click.core.Context, b_option: str) -> None:\r\n    ctx.ensure_object(dict)\r\n    for name, value in locals().items():\r\n        if not isinstance(value, click.core.Context):\r\n            ctx.obj[name] = value\r\n    run(ctx)\r\n\r\n\r\ndef run(ctx: click.core.Context) -> None:\r\n    # run code using all parameters\r\n    pass\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n\r\n```\r\n\r\nis there any possibility to avoid the explicit call of `run` function from each sub command? The `run` function is going to call my application with the parameters from `ctx`. Is there a better way to collect all parameters at one place?\r\n\r\nThanks in advance!\r\n\r\nBest,\r\nAlexey", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1643", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1643/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1643/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1643/events", "html_url": "https://github.com/pallets/click/issues/1643", "id": 678213029, "node_id": "MDU6SXNzdWU2NzgyMTMwMjk=", "number": 1643, "title": "Better TypeError/AttributeError Messages", "user": {"login": "Schizo", "id": 38006, "node_id": "MDQ6VXNlcjM4MDA2", "avatar_url": "https://avatars2.githubusercontent.com/u/38006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Schizo", "html_url": "https://github.com/Schizo", "followers_url": "https://api.github.com/users/Schizo/followers", "following_url": "https://api.github.com/users/Schizo/following{/other_user}", "gists_url": "https://api.github.com/users/Schizo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Schizo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Schizo/subscriptions", "organizations_url": "https://api.github.com/users/Schizo/orgs", "repos_url": "https://api.github.com/users/Schizo/repos", "events_url": "https://api.github.com/users/Schizo/events{/privacy}", "received_events_url": "https://api.github.com/users/Schizo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-13T07:19:15Z", "updated_at": "2020-08-13T13:48:35Z", "closed_at": "2020-08-13T13:48:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nEverytime I do something wrong with click, it is not very obvious at the first glance where a problem happened.\r\n-->\r\n\r\n<!--\r\nHere are two examples:\r\n\r\nAn easy one is if you accidentally set a default value for  `is_flag` option.\r\n@click.option('-t', 'test', is_flag=True, default=0)\r\n>>> int object has no attribute lower\r\n\r\nAnother one is, if you use camelCase\r\n`@click.option('-t', 'myTest', is_flag=True)`\r\n\r\n>>> got an unexpected keyword argument 'mytest'\r\n-->\r\n\r\nI like click, but those little things just sometimes come out of the blue. \r\nThanks a lot", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1639", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1639/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1639/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1639/events", "html_url": "https://github.com/pallets/click/issues/1639", "id": 672334683, "node_id": "MDU6SXNzdWU2NzIzMzQ2ODM=", "number": 1639, "title": "Tab Completion Executes Callback", "user": {"login": "fortmcas", "id": 51302645, "node_id": "MDQ6VXNlcjUxMzAyNjQ1", "avatar_url": "https://avatars2.githubusercontent.com/u/51302645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fortmcas", "html_url": "https://github.com/fortmcas", "followers_url": "https://api.github.com/users/fortmcas/followers", "following_url": "https://api.github.com/users/fortmcas/following{/other_user}", "gists_url": "https://api.github.com/users/fortmcas/gists{/gist_id}", "starred_url": "https://api.github.com/users/fortmcas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fortmcas/subscriptions", "organizations_url": "https://api.github.com/users/fortmcas/orgs", "repos_url": "https://api.github.com/users/fortmcas/repos", "events_url": "https://api.github.com/users/fortmcas/events{/privacy}", "received_events_url": "https://api.github.com/users/fortmcas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-03T20:49:37Z", "updated_at": "2020-08-03T20:53:52Z", "closed_at": "2020-08-03T20:53:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "**This issue tracker is a tool to address bugs in Click itself.\r\nPlease use the #pocoo IRC channel on freenode, the Discord server or\r\nStack Overflow for general questions about using Flask or issues\r\nnot related to Click.**\r\n\r\nIf you'd like to report a bug in Click, fill out the template below. Provide\r\nany extra information that may be useful / related to your problem.\r\nIdeally, create an [MCVE](https://stackoverflow.com/help/mcve), which helps us\r\nunderstand the problem and helps check that it is not caused by something in\r\nyour code.\r\n\r\n---\r\n\r\n### Expected Behavior\r\n\r\nTab completing a command using click should simply autocomplete the text in window, not execute the callback until the command as a whole is executed.\r\n\r\n```python\r\n@click.option(\r\n    '--password',\r\n    is_flag=True,\r\n    type=bool,\r\n    default=False,\r\n    help='Password option',\r\n    callback=prompt_password,\r\n    hide_input=True,\r\n)\r\n```\r\n\r\n### Actual Behavior\r\n\r\nCallback executes and prompts for password in-line after tab complete\r\n\r\n```pytb\r\nN/A\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.5\r\n* Click version: click-shell==1.0\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1637", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1637/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1637/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1637/events", "html_url": "https://github.com/pallets/click/issues/1637", "id": 671106112, "node_id": "MDU6SXNzdWU2NzExMDYxMTI=", "number": 1637, "title": "Feature: adding utility/command example in help", "user": {"login": "aniketgm", "id": 14215698, "node_id": "MDQ6VXNlcjE0MjE1Njk4", "avatar_url": "https://avatars0.githubusercontent.com/u/14215698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aniketgm", "html_url": "https://github.com/aniketgm", "followers_url": "https://api.github.com/users/aniketgm/followers", "following_url": "https://api.github.com/users/aniketgm/following{/other_user}", "gists_url": "https://api.github.com/users/aniketgm/gists{/gist_id}", "starred_url": "https://api.github.com/users/aniketgm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aniketgm/subscriptions", "organizations_url": "https://api.github.com/users/aniketgm/orgs", "repos_url": "https://api.github.com/users/aniketgm/repos", "events_url": "https://api.github.com/users/aniketgm/events{/privacy}", "received_events_url": "https://api.github.com/users/aniketgm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-01T18:53:05Z", "updated_at": "2020-08-01T18:56:31Z", "closed_at": "2020-08-01T18:56:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to add a utility/command example in help. OR a Examples section in command help. For example, let's say, I created a command: sayHello, which takes an argument NAME.\r\n\r\n---\r\n### Expectation\r\n\r\nSo, when I say,\r\n\r\n`sayHello --help\r\n`\r\n\r\nIt shall display something like,\r\n\r\n```\r\nUsage: sayHello [OPTIONS] NAME\r\n\r\nOptions:\r\n  --help Show this message and exit.\r\n\r\nExamples:\r\n  sayHello Aniket\r\n  Output: Hello, Aniket     ## This output things can be optional, to show what would happen, is that example is run\r\n```\r\n\r\nI searched the documentation and couldn't find any text on how to do this. Not sure if this feature is available ? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1633", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1633/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1633/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1633/events", "html_url": "https://github.com/pallets/click/issues/1633", "id": 666706850, "node_id": "MDU6SXNzdWU2NjY3MDY4NTA=", "number": 1633, "title": "security scanner reports use of tempfile.mkstemp() in _termui_impl.py", "user": {"login": "mohanbabubb", "id": 3842000, "node_id": "MDQ6VXNlcjM4NDIwMDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/3842000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mohanbabubb", "html_url": "https://github.com/mohanbabubb", "followers_url": "https://api.github.com/users/mohanbabubb/followers", "following_url": "https://api.github.com/users/mohanbabubb/following{/other_user}", "gists_url": "https://api.github.com/users/mohanbabubb/gists{/gist_id}", "starred_url": "https://api.github.com/users/mohanbabubb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mohanbabubb/subscriptions", "organizations_url": "https://api.github.com/users/mohanbabubb/orgs", "repos_url": "https://api.github.com/users/mohanbabubb/repos", "events_url": "https://api.github.com/users/mohanbabubb/events{/privacy}", "received_events_url": "https://api.github.com/users/mohanbabubb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-28T02:37:12Z", "updated_at": "2020-08-04T02:58:23Z", "closed_at": "2020-07-28T02:55:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I ran a security scanner on my project, it returned the following report:\r\n\r\n> Click Toolkit for Python contains a flaw in the `tempfile.mkstemp()` function of `_termui_impl.py` as the program creates temporary files insecurely. It is possible for a local attacker to use a symlink attack against a file to cause the program to unexpectedly grant elevated privileges to the attacker.\r\n\r\nIt looks like this might be addressed by #947.\r\n\r\n### Environment\r\n\r\n* Python version: any version\r\n* Click version: 2.0 \u2264 Version \u2264 7.1.2 \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1629", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1629/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1629/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1629/events", "html_url": "https://github.com/pallets/click/issues/1629", "id": 659654459, "node_id": "MDU6SXNzdWU2NTk2NTQ0NTk=", "number": 1629, "title": "BOOL should accept \"on\" and \"off\"", "user": {"login": "jwodder", "id": 98207, "node_id": "MDQ6VXNlcjk4MjA3", "avatar_url": "https://avatars1.githubusercontent.com/u/98207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwodder", "html_url": "https://github.com/jwodder", "followers_url": "https://api.github.com/users/jwodder/followers", "following_url": "https://api.github.com/users/jwodder/following{/other_user}", "gists_url": "https://api.github.com/users/jwodder/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwodder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwodder/subscriptions", "organizations_url": "https://api.github.com/users/jwodder/orgs", "repos_url": "https://api.github.com/users/jwodder/repos", "events_url": "https://api.github.com/users/jwodder/events{/privacy}", "received_events_url": "https://api.github.com/users/jwodder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-17T21:34:16Z", "updated_at": "2020-08-05T14:38:08Z", "closed_at": "2020-08-05T14:38:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The `BOOL` parameter type should accept & convert the strings \"on\" and \"off\".  With this change, `BOOL` would support all of the boolean strings that `configparser` supports.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1626", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1626/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1626/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1626/events", "html_url": "https://github.com/pallets/click/issues/1626", "id": 655121592, "node_id": "MDU6SXNzdWU2NTUxMjE1OTI=", "number": 1626, "title": "Inconsistncy with raising a click.UsageError with bad subcommand names", "user": {"login": "Dylan-Brotherston", "id": 22044664, "node_id": "MDQ6VXNlcjIyMDQ0NjY0", "avatar_url": "https://avatars3.githubusercontent.com/u/22044664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-Brotherston", "html_url": "https://github.com/Dylan-Brotherston", "followers_url": "https://api.github.com/users/Dylan-Brotherston/followers", "following_url": "https://api.github.com/users/Dylan-Brotherston/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-Brotherston/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-Brotherston/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-Brotherston/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-Brotherston/orgs", "repos_url": "https://api.github.com/users/Dylan-Brotherston/repos", "events_url": "https://api.github.com/users/Dylan-Brotherston/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-Brotherston/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-11T03:06:23Z", "updated_at": "2020-07-12T16:00:21Z", "closed_at": "2020-07-12T16:00:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "When a subcommand isn't given to a `click.group` no exception is generated, instead the program exits.\r\nWhen a non-existent subcommand is given to a `click.group` a `click.UsageError` is generated.\r\nBecause of this even with `standalone_mode=False` it is impossible to internally handle this error, eg to display a custom error.\r\n\r\n\r\n### Expected Behavior\r\n\r\n```python\r\n@click.group()\r\ndef cli():\r\n    pass\r\n\r\n@cli.command()\r\ndef subcommand1():\r\n        pass\r\n\r\n@cli.command()\r\ndef subcommand2():\r\n        pass\r\n\r\nif __name__ == \"__main__\":\r\n        try:\r\n                cli(standalone_mode=False)\r\n        except click.UsageError as e:\r\n                print(e.format_message())\r\n                # $ ./prog subcommand3\r\n                # No such command 'subcommand3'.\r\n                # $ ./prog\r\n                # No command given, possible commands (subcommand1 subcommand2)\r\n```\r\n\r\n### Actual Behavior\r\n\r\n```python\r\n@click.group()\r\ndef cli():\r\n    pass\r\n\r\n@cli.command()\r\ndef subcommand1():\r\n        pass\r\n\r\n@cli.command()\r\ndef subcommand2():\r\n        pass\r\n\r\nif __name__ == \"__main__\":\r\n        try:\r\n                cli(standalone_mode=False)\r\n        except click.UsageError as e:\r\n                print(e.format_message())\r\n                # $ ./prog subcommand3\r\n                # No such command 'subcommand3'.\r\n                # $ ./prog\r\n                # $ # No exception, process exit.\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.8\r\n* Click version: 7.1.2\r\n\r\nAt [`core.py:1243`](https://github.com/pallets/click/blob/228ca13778af1c2b1fe20191804dfacb09b8586a/src/click/core.py#L1243) click calls `ctx.exit()`\r\n\r\n## Proposed Solution\r\n\r\nOne possible patch would be as follows\r\n```patch\r\n@@ -1240,4 +1240,3 @@\r\n     def parse_args(self, ctx, args):\r\n         if not args and self.no_args_is_help and not ctx.resilient_parsing:\r\n-            echo(ctx.get_help(), color=ctx.color)\r\n-            ctx.exit()\r\n+            raise UsageError(f\"No command given, possible commands ({' '.join(list(ctx.command.commands.keys()))})\", self)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1625", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1625/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1625/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1625/events", "html_url": "https://github.com/pallets/click/issues/1625", "id": 655033278, "node_id": "MDU6SXNzdWU2NTUwMzMyNzg=", "number": 1625, "title": "click.argument ignores default value of None", "user": {"login": "sammko", "id": 703905, "node_id": "MDQ6VXNlcjcwMzkwNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/703905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sammko", "html_url": "https://github.com/sammko", "followers_url": "https://api.github.com/users/sammko/followers", "following_url": "https://api.github.com/users/sammko/following{/other_user}", "gists_url": "https://api.github.com/users/sammko/gists{/gist_id}", "starred_url": "https://api.github.com/users/sammko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sammko/subscriptions", "organizations_url": "https://api.github.com/users/sammko/orgs", "repos_url": "https://api.github.com/users/sammko/repos", "events_url": "https://api.github.com/users/sammko/events{/privacy}", "received_events_url": "https://api.github.com/users/sammko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-10T20:59:38Z", "updated_at": "2020-07-11T21:44:07Z", "closed_at": "2020-07-10T21:06:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nThe `click.argument` decorator should be able to distinguish a `default=None` parameter from not specifying a default value at all.\r\n\r\n```python\r\n@click.command()\r\n@click.argument(\"arg\", default=None)\r\ndef cmd(arg):\r\n    print(arg)\r\n```\r\n```\r\n\u03bb py c.py\r\nNone\r\n```\r\n### Actual Behavior\r\n\r\nThe `default=None` parameter is ignored.\r\n\r\n```\r\n\u03bb py c.py \r\nUsage: c.py [OPTIONS] ARG\r\nTry 'c.py --help' for help.\r\n\r\nError: Missing argument 'ARG'.\r\n```\r\n\r\n### Workaround\r\n\r\nUse a different value, which is guaranteed not to appear as legitimate user input e.g. of a different type, or a sentinel object.\r\n\r\n```python\r\n_sentinel = object()\r\n\r\n@click.command()\r\n@click.argument(\"arg\", default=_sentinel)\r\ndef cmd(arg):\r\n    if arg is _sentinel:\r\n        arg = None\r\n    print(arg)\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: any\r\n* Click version: 7.1.2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1624", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1624/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1624/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1624/events", "html_url": "https://github.com/pallets/click/issues/1624", "id": 655012165, "node_id": "MDU6SXNzdWU2NTUwMTIxNjU=", "number": 1624, "title": "click.argument cannot handle negative numbers", "user": {"login": "CloudNiner", "id": 1818302, "node_id": "MDQ6VXNlcjE4MTgzMDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1818302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CloudNiner", "html_url": "https://github.com/CloudNiner", "followers_url": "https://api.github.com/users/CloudNiner/followers", "following_url": "https://api.github.com/users/CloudNiner/following{/other_user}", "gists_url": "https://api.github.com/users/CloudNiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/CloudNiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CloudNiner/subscriptions", "organizations_url": "https://api.github.com/users/CloudNiner/orgs", "repos_url": "https://api.github.com/users/CloudNiner/repos", "events_url": "https://api.github.com/users/CloudNiner/events{/privacy}", "received_events_url": "https://api.github.com/users/CloudNiner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2180257270, "node_id": "MDU6TGFiZWwyMTgwMjU3Mjcw", "url": "https://api.github.com/repos/pallets/click/labels/f:parameters", "name": "f:parameters", "color": "e0647b", "default": false, "description": "feature: input parameter types"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-10T20:14:07Z", "updated_at": "2020-07-13T12:45:26Z", "closed_at": "2020-07-10T20:39:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nI should be able to pass a negative number to a `click.argument`. I get the same error below if I attempt to parse a negative number as `type=str` or `type=float`. `click.option` works as expected. \r\n\r\n```python\r\nimport click\r\n\r\n\r\n@click.command()\r\n@click.argument(\"num\", type=int)\r\ndef main(num):\r\n    print(num)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n```\r\n\r\n### Actual Behavior\r\n\r\nTell us what happens instead.\r\n\r\n```pytb\r\n> python click_test.py -4\r\nUsage: click_test.py [OPTIONS] NUM\r\nTry 'click_test.py --help' for help.\r\n\r\nError: no such option: -4\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.7\r\n* Click version: 7.1.2\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1616", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1616/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1616/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1616/events", "html_url": "https://github.com/pallets/click/issues/1616", "id": 648399102, "node_id": "MDU6SXNzdWU2NDgzOTkxMDI=", "number": 1616, "title": "Workaround for pipeable arguments", "user": {"login": "taranlu-houzz", "id": 52425255, "node_id": "MDQ6VXNlcjUyNDI1MjU1", "avatar_url": "https://avatars3.githubusercontent.com/u/52425255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taranlu-houzz", "html_url": "https://github.com/taranlu-houzz", "followers_url": "https://api.github.com/users/taranlu-houzz/followers", "following_url": "https://api.github.com/users/taranlu-houzz/following{/other_user}", "gists_url": "https://api.github.com/users/taranlu-houzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/taranlu-houzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taranlu-houzz/subscriptions", "organizations_url": "https://api.github.com/users/taranlu-houzz/orgs", "repos_url": "https://api.github.com/users/taranlu-houzz/repos", "events_url": "https://api.github.com/users/taranlu-houzz/events{/privacy}", "received_events_url": "https://api.github.com/users/taranlu-houzz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-30T18:23:20Z", "updated_at": "2020-06-30T18:59:10Z", "closed_at": "2020-06-30T18:36:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I realize this has been addressed before in #1202 and #1144. I'd like to throw in a possible workaround, since allowing for basic pipe usage seems like something that should be a fundamental part of any Unix tool IMO. I feel like something like this could be really useful as a quick setting/option:\r\n\r\n```python\r\n#!/usr/bin/env python3\r\n\r\n\"\"\"my_tool.py\r\n\"\"\"\r\n\r\nimport sys\r\n\r\nimport click\r\n\r\n\r\n# Gather data from stdin in case using a pipe\r\nif not sys.stdin.isatty():\r\n    sys.argv += sys.stdin.read().split()\r\n\r\n\r\n@click.command()\r\n@click.argument(\"arg_1\")\r\ndef cli(arg_1):\r\n    print(arg_1)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    cli()\r\n```\r\n\r\nI'm guessing that there are probably drawbacks that I am not aware of, but so far, this works for me for implementing basic piping functionality.\r\n\r\n### Expected Behavior\r\n\r\nI feel like it should be possible to do this:\r\n```sh\r\n> echo \"test\" | my_tool\r\ntest\r\n\r\n>\r\n```\r\n\r\n### Actual Behavior\r\n\r\nTrying to do this without the `sys.stdin.isatty` workaround results in:\r\n```sh\r\nError: Missing argument 'ARG_1'.\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.7\r\n* Click version: 7.1.2\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1612", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1612/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1612/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1612/events", "html_url": "https://github.com/pallets/click/issues/1612", "id": 648088602, "node_id": "MDU6SXNzdWU2NDgwODg2MDI=", "number": 1612, "title": "@click.command() decorator does not preserve __name__ attribute", "user": {"login": "taranlu-houzz", "id": 52425255, "node_id": "MDQ6VXNlcjUyNDI1MjU1", "avatar_url": "https://avatars3.githubusercontent.com/u/52425255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taranlu-houzz", "html_url": "https://github.com/taranlu-houzz", "followers_url": "https://api.github.com/users/taranlu-houzz/followers", "following_url": "https://api.github.com/users/taranlu-houzz/following{/other_user}", "gists_url": "https://api.github.com/users/taranlu-houzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/taranlu-houzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taranlu-houzz/subscriptions", "organizations_url": "https://api.github.com/users/taranlu-houzz/orgs", "repos_url": "https://api.github.com/users/taranlu-houzz/repos", "events_url": "https://api.github.com/users/taranlu-houzz/events{/privacy}", "received_events_url": "https://api.github.com/users/taranlu-houzz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-30T11:15:09Z", "updated_at": "2020-08-13T20:35:09Z", "closed_at": "2020-08-13T20:34:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nI have some code that uses the `__name__` attribute. I would expect the decorator to preserve this value on the decorated function that it produces. I can see that a new `name` attribute is added, but this is a modified name that has underscores replaced with dashes.\r\n\r\n```python\r\nimport click\r\n\r\ndef test_func_1():\r\n    print(\"test_1\")\r\n\r\n@click.command()\r\ndef test_func_2():\r\n    print(\"test_2\")\r\n\r\ndir(test_func). # This will list __name__\r\nprint(test_func.__name__).  # This will print \"test_func\"\r\n\r\ndir(test_func_2)  # This will not list __name__\r\nprint(test_func_2.__name__). # This will raise an AttributeError\r\n```\r\n\r\n### Actual Behavior\r\n\r\nThe `__name__` attribute is missing on the decorated function that is produced.\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.7\r\n* Click version: 7.1.2\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1603", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1603/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1603/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1603/events", "html_url": "https://github.com/pallets/click/issues/1603", "id": 645637626, "node_id": "MDU6SXNzdWU2NDU2Mzc2MjY=", "number": 1603, "title": "detection of program name when run with `python -m`", "user": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "kbanc", "id": 23411333, "node_id": "MDQ6VXNlcjIzNDExMzMz", "avatar_url": "https://avatars2.githubusercontent.com/u/23411333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kbanc", "html_url": "https://github.com/kbanc", "followers_url": "https://api.github.com/users/kbanc/followers", "following_url": "https://api.github.com/users/kbanc/following{/other_user}", "gists_url": "https://api.github.com/users/kbanc/gists{/gist_id}", "starred_url": "https://api.github.com/users/kbanc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kbanc/subscriptions", "organizations_url": "https://api.github.com/users/kbanc/orgs", "repos_url": "https://api.github.com/users/kbanc/repos", "events_url": "https://api.github.com/users/kbanc/events{/privacy}", "received_events_url": "https://api.github.com/users/kbanc/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "kbanc", "id": 23411333, "node_id": "MDQ6VXNlcjIzNDExMzMz", "avatar_url": "https://avatars2.githubusercontent.com/u/23411333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kbanc", "html_url": "https://github.com/kbanc", "followers_url": "https://api.github.com/users/kbanc/followers", "following_url": "https://api.github.com/users/kbanc/following{/other_user}", "gists_url": "https://api.github.com/users/kbanc/gists{/gist_id}", "starred_url": "https://api.github.com/users/kbanc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kbanc/subscriptions", "organizations_url": "https://api.github.com/users/kbanc/orgs", "repos_url": "https://api.github.com/users/kbanc/repos", "events_url": "https://api.github.com/users/kbanc/events{/privacy}", "received_events_url": "https://api.github.com/users/kbanc/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/pallets/click/milestones/5", "html_url": "https://github.com/pallets/click/milestone/5", "labels_url": "https://api.github.com/repos/pallets/click/milestones/5/labels", "id": 3655024, "node_id": "MDk6TWlsZXN0b25lMzY1NTAyNA==", "number": 5, "title": "8.0.0", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 8, "closed_issues": 58, "state": "open", "created_at": "2018-09-14T14:59:44Z", "updated_at": "2020-08-17T04:43:11Z", "due_on": null, "closed_at": null}, "comments": 5, "created_at": "2020-06-25T15:04:14Z", "updated_at": "2020-08-06T03:27:36Z", "closed_at": "2020-08-06T03:27:36Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The program name (referred to as `prog_name` or `info_name`) is the name Click uses in usage help text. If it's not specified, Click tries to detect it by looking at `sys.argv[0]`.\r\n\r\nhttps://github.com/pallets/click/blob/dfb842d95a7c146d8fe8140c8100065410d95c4d/src/click/core.py#L797-L800\r\n\r\nThis works when the CLI is run as a script, either directly, or indirectly as an entry point, or as a module when the program is a single file, but fails when the program is a package and run with `python -m`. In that case, Python converts the `-m name` to the Python file within the package that would be executed. (The use of `__file__` there is also incorrect, as that will always point to `click/core.py`. There should never be a case where `sys.argv` is empty. `make_str` is probably not needed either.)\r\n\r\nThis leads to the following names:\r\n\r\n* `python example.py`, executing a script directly - `example.py`\r\n* `python -m example`, the single file module `example.py` - `example.py`\r\n* `python -m example`, a package like `example/__main__.py` - `__main__.py`\r\n* `python -m example.cli`, a submodule like `example/cli.py` - `cli.py`\r\n* `example`, an entry point, with any of the layouts above - `example`\r\n\r\nWhat's usually expected is that executing a script will print the Python file name (`example.py`), executing an entry point will print the entry point name (`example`), and executing a module or package will print the Python command (`python -m example`, `python -m example.cli`)\r\n\r\nThis leads to projects that expect to be run as either an entry point or `-m` writing their own wrapper around the CLI to control what name gets used. For example, Flask uses a wrapper that the entry point will call with no args, while `__main__.py` or `__name__ == \"__main__\"` will pass `as_module=True`.\r\n\r\n```python\r\ndef main(as_module=False):\r\n    cli.main(prog_name=\"python -m flask\" if as_module else None)\r\n```\r\n\r\nUnfortunately, detecting whether `python -m` was used is really, really complicated. Luckily, I did the work already in Werkzeug's reloader: https://github.com/pallets/werkzeug/blob/102bcda52176db448d383a9ef1ccf7e406a379eb/src/werkzeug/_reloader.py#L59. It won't be quite the same in Click because we're not concerned with the exact path to the `python` command or script file, or with arguments, but that should be a good start. Write a function `detect_program_name()` to detect this and call it in place of the existing code.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1600", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1600/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1600/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1600/events", "html_url": "https://github.com/pallets/click/issues/1600", "id": 643723496, "node_id": "MDU6SXNzdWU2NDM3MjM0OTY=", "number": 1600, "title": "command theme support for click (feature request)", "user": {"login": "frog-o", "id": 47947111, "node_id": "MDQ6VXNlcjQ3OTQ3MTEx", "avatar_url": "https://avatars2.githubusercontent.com/u/47947111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frog-o", "html_url": "https://github.com/frog-o", "followers_url": "https://api.github.com/users/frog-o/followers", "following_url": "https://api.github.com/users/frog-o/following{/other_user}", "gists_url": "https://api.github.com/users/frog-o/gists{/gist_id}", "starred_url": "https://api.github.com/users/frog-o/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frog-o/subscriptions", "organizations_url": "https://api.github.com/users/frog-o/orgs", "repos_url": "https://api.github.com/users/frog-o/repos", "events_url": "https://api.github.com/users/frog-o/events{/privacy}", "received_events_url": "https://api.github.com/users/frog-o/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-23T10:27:32Z", "updated_at": "2020-06-23T12:59:01Z", "closed_at": "2020-06-23T12:59:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to be able re-theme the commands.  If some one dose not like how you organize you commands and sub-commands or just don't like the name of the commands, I would like them to be able to change them by loading a tom file specify the default location of the command name and then where thety want it to be and named.  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1599", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1599/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1599/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1599/events", "html_url": "https://github.com/pallets/click/issues/1599", "id": 643325672, "node_id": "MDU6SXNzdWU2NDMzMjU2NzI=", "number": 1599, "title": "\"Name Your Options\" docs incorrect", "user": {"login": "HunterMcGushion", "id": 11300915, "node_id": "MDQ6VXNlcjExMzAwOTE1", "avatar_url": "https://avatars2.githubusercontent.com/u/11300915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HunterMcGushion", "html_url": "https://github.com/HunterMcGushion", "followers_url": "https://api.github.com/users/HunterMcGushion/followers", "following_url": "https://api.github.com/users/HunterMcGushion/following{/other_user}", "gists_url": "https://api.github.com/users/HunterMcGushion/gists{/gist_id}", "starred_url": "https://api.github.com/users/HunterMcGushion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HunterMcGushion/subscriptions", "organizations_url": "https://api.github.com/users/HunterMcGushion/orgs", "repos_url": "https://api.github.com/users/HunterMcGushion/repos", "events_url": "https://api.github.com/users/HunterMcGushion/events{/privacy}", "received_events_url": "https://api.github.com/users/HunterMcGushion/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-22T20:00:34Z", "updated_at": "2020-06-23T18:50:23Z", "closed_at": "2020-06-23T15:41:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all, I love Click, and I want to thank you for taking the time to build and maintain such a fantastic library!\r\n\r\n### Problem\r\nThe [Name Your Options](https://click.palletsprojects.com/en/7.x/options/#name-your-options) documentation seems to be incorrect. The second point in choosing an option's name says, \r\n\r\n> 2. If there is at least one name prefixed with two dashes, the first one given is used as the name.\r\n\r\nHowever, it seems that instead of the first double-dash-prefixed option, the last is used as the name.\r\n\r\nAt the bottom of the \"Name Your Options\" section, bulleted examples showing how names are chosen are given. The second to last bullet point is as follows:\r\n\r\n> \"--f\", \"--foo-bar\", the name is f\r\n\r\nThis is not what happens, as can be seen from the below snippet that recreates this example.\r\n\r\n### Expected Behavior\r\n\r\nAccording to the docs linked above, executing the below snippet...\r\n\r\n```python\r\nimport click\r\n\r\n@click.command()\r\n@click.option(\r\n    \"--f\",\r\n    \"--foo-bar\",\r\n)\r\ndef execute(**kwargs):\r\n    print(kwargs)\r\n\r\nif __name__ == \"__main__\":\r\n    execute()\r\n```\r\n\r\n... should print out...\r\n```\r\n{'f': None}\r\n```\r\n\r\n### Actual Behavior\r\n\r\nInstead the following is printed:\r\n\r\n```\r\n{'foo_bar': None}\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.6.6\r\n* Click version: 6.7\r\n\r\n---\r\n\r\nPersonally, I think that using the first double-dash-prefixed option (as the docs state) makes the most sense. As someone who has never contributed to Click (so take this with a grain of salt), it looks like [`src.click.core.Option._parse_decls`](https://github.com/pallets/click/blob/master/src/click/core.py#L1821) might need to be updated to be brought in line with the docs. I'd be happy to take a look and submit a PR if you're open to it. If you'd instead prefer to change the docs to reflect the actual behavior, I'd also be happy to make a PR. \r\n\r\nThanks for your time and for making such an awesome library! \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1596", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1596/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1596/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1596/events", "html_url": "https://github.com/pallets/click/issues/1596", "id": 642537777, "node_id": "MDU6SXNzdWU2NDI1Mzc3Nzc=", "number": 1596, "title": "get help (-h) for a sub command of a group with arguments ", "user": {"login": "bitranox", "id": 8355239, "node_id": "MDQ6VXNlcjgzNTUyMzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/8355239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitranox", "html_url": "https://github.com/bitranox", "followers_url": "https://api.github.com/users/bitranox/followers", "following_url": "https://api.github.com/users/bitranox/following{/other_user}", "gists_url": "https://api.github.com/users/bitranox/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitranox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitranox/subscriptions", "organizations_url": "https://api.github.com/users/bitranox/orgs", "repos_url": "https://api.github.com/users/bitranox/repos", "events_url": "https://api.github.com/users/bitranox/events{/privacy}", "received_events_url": "https://api.github.com/users/bitranox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-21T10:35:49Z", "updated_at": "2020-06-21T14:01:31Z", "closed_at": "2020-06-21T14:01:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior:\r\n\r\nif You have a group with arguments, and You want to get help for a sub-command, \r\nYou must not ask to fill in the arguments for the group. \r\nThat prevents me to create an automated documentation for all the commandline options of a program.\r\nThis forces the User to put in arguments for the group (what he might not be able to state correctly, because those arguments are checked for instance if the file is existing, etc ...) in order to get help for the sub-command.\r\n\r\n```python\r\n# EXT\r\nimport click\r\n\r\n# CONSTANTS\r\nCLICK_CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])\r\nCLICK_CONTEXT_SETTINGS_NO_HELP = dict(help_option_names=[])\r\n\r\n\r\n@click.group(help='some help', context_settings=CLICK_CONTEXT_SETTINGS)\r\n@click.version_option(version='1.1.1',\r\n                      prog_name='program name',\r\n                      message='{} version %(version)s'.format('cli command'))\r\ndef cli_main() -> None:             # pragma: no cover\r\n    pass                            # pragma: no cover\r\n\r\n\r\n# command1 without arguments and options\r\n@cli_main.command('command1', context_settings=CLICK_CONTEXT_SETTINGS_NO_HELP)\r\ndef cli_command1() -> None:         # pragma: no cover\r\n    \"\"\" command1 without arguments and options \"\"\"\r\n    pass\r\n\r\n# command4 with arguments, options and sub_command\r\n# groups must not have arguments or we can not parse them\r\n# because to get help for the sub command we need to put :\r\n# program command4 arg1 arg2 command5 -h\r\n# and we dont know the correct type of arg1, arg2 at parsing time\r\n\r\n@cli_main.group('command4', context_settings=CLICK_CONTEXT_SETTINGS)\r\n@click.argument('argument1')\r\n@click.argument('argument2')\r\n@click.option('-a', '--a_option', is_flag=True)             # no help here\r\n@click.option('-b', '--b_option', type=int, default=-1, help='help for b_option')\r\n@click.option('-c', '--c_option', help='help for c_option')\r\ndef cli_command4(argument1: str, argument2: str, a_option: bool, b_option: int, c_option: str) -> None:\r\n    \"\"\"command4 with arguments, options and sub_command\"\"\"\r\n    pass                            # pragma: no cover\r\n\r\n\r\n# command5, sub_command of command4 with arguments, options\r\n@cli_command4.command('command5', context_settings=CLICK_CONTEXT_SETTINGS)\r\n@click.argument('argument1')\r\n@click.argument('argument2')\r\n@click.option('-a', '--a_option', is_flag=True)             # no help here\r\n@click.option('-b', '--b_option', type=int, default=-1, help='help for b_option')\r\n@click.option('-c', '--c_option', help='help for c_option')\r\ndef cli_command5(argument1: str, argument2: str, a_option: bool, b_option: int, c_option: str) -> None:\r\n    \"\"\"command5, sub_command of command4 with arguments, options\"\"\"\r\n    pass                            # pragma: no cover\r\n\r\n\r\n# entry point if main\r\nif __name__ == '__main__':\r\n    cli_main()\r\n\r\n\r\n```\r\n\r\n### Actual Behavior\r\nif You want to get help for command5 You need to put : \r\n\r\n```\r\n# You need to put (current behaviour):\r\n$> cli_program command4 arg1 arg2 command5 -h\r\n\r\n# You should be able to put (expected behaviour):\r\n$> cli_program command4 command5 -h\r\n\r\n```\r\nfurthermore, it seems the stated error is wrong: \r\n```\r\n$> cli_program command4 command5 -h\r\n\r\nUsage: test_cli_help.py command4 [OPTIONS] ARGUMENT1 ARGUMENT2 COMMAND\r\n                                 [ARGS]...\r\nTry 'test_cli_help.py command4 -h' for help.\r\n\r\nError: Missing command.    # shouldnt this be \"Missing argument.\" ???\r\n```\r\nYou probably dont want (or can not) fill arg1, arg2 because arg1, arg2 might be files what needs to be present, and so on ... \r\nI guess You need to skip to check for the presence of arguments of the group, if the help option is detected, as You do it for the normal click.command\r\n\r\n* Click version: latest\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1592", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1592/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1592/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1592/events", "html_url": "https://github.com/pallets/click/issues/1592", "id": 640134078, "node_id": "MDU6SXNzdWU2NDAxMzQwNzg=", "number": 1592, "title": "Question: How do you remove the f-strings in the wheel on Pypi?", "user": {"login": "andy-maier", "id": 8939758, "node_id": "MDQ6VXNlcjg5Mzk3NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/8939758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-maier", "html_url": "https://github.com/andy-maier", "followers_url": "https://api.github.com/users/andy-maier/followers", "following_url": "https://api.github.com/users/andy-maier/following{/other_user}", "gists_url": "https://api.github.com/users/andy-maier/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-maier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-maier/subscriptions", "organizations_url": "https://api.github.com/users/andy-maier/orgs", "repos_url": "https://api.github.com/users/andy-maier/repos", "events_url": "https://api.github.com/users/andy-maier/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-maier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-17T04:36:43Z", "updated_at": "2020-06-17T04:54:27Z", "closed_at": "2020-06-17T04:54:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I ran into an install issue with click on Python 2.7 when installing it as editable from the repo's working directory. I then found that it uses f-strings, which explains the behavior.\r\n\r\nThe source files in the wheel archive on Pypi however do not have the f-strings; that seems to have been converted from the repo source.\r\n\r\nI am aware of the pre-commit hook in click that does a pyupgrade, which creates f-strings, but this is the opposite direction.\r\n\r\nTwo questions on that:\r\n1. How do you create the weehl that gets uploaded to Pypi, such that its source does not have the f-strings?\r\n2. The setup.cfg has `python_requires = >= 3.6`, but on Pypi, the latest version is indicated as `Python >=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*`. How is that done?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1590", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1590/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1590/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1590/events", "html_url": "https://github.com/pallets/click/issues/1590", "id": 640098885, "node_id": "MDU6SXNzdWU2NDAwOTg4ODU=", "number": 1590, "title": "click.echo() raises UnsupportedOperation on Windows when using pytest capsys", "user": {"login": "andy-maier", "id": 8939758, "node_id": "MDQ6VXNlcjg5Mzk3NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/8939758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-maier", "html_url": "https://github.com/andy-maier", "followers_url": "https://api.github.com/users/andy-maier/followers", "following_url": "https://api.github.com/users/andy-maier/following{/other_user}", "gists_url": "https://api.github.com/users/andy-maier/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-maier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-maier/subscriptions", "organizations_url": "https://api.github.com/users/andy-maier/orgs", "repos_url": "https://api.github.com/users/andy-maier/repos", "events_url": "https://api.github.com/users/andy-maier/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-maier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/click/milestones/5", "html_url": "https://github.com/pallets/click/milestone/5", "labels_url": "https://api.github.com/repos/pallets/click/milestones/5/labels", "id": 3655024, "node_id": "MDk6TWlsZXN0b25lMzY1NTAyNA==", "number": 5, "title": "8.0.0", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 8, "closed_issues": 58, "state": "open", "created_at": "2018-09-14T14:59:44Z", "updated_at": "2020-08-17T04:43:11Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2020-06-17T02:49:51Z", "updated_at": "2020-06-26T01:17:16Z", "closed_at": "2020-06-26T01:17:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Actual behavior\r\n\r\nWhen using `click.echo()` in a test function that uses the pytest `capsys` fixture, it raises `UnsupportedOperation` on Windows. It runs fine on Linux and macOS.\r\n\r\nHere is a complete test module `tests/unit/test_error_click.py` that reproduces the issue:\r\n```\r\nimport click\r\nimport pytest\r\n\r\ndef myfunc():\r\n    \"\"\"Function to be tested\"\"\"\r\n    click.echo('bla')\r\n\r\ndef test_myfunc(capsys):\r\n    myfunc()\r\n    stdout, stderr = capsys.readouterr()\r\n    assert stdout == 'bla\\n'\r\n```\r\n\r\nHere is the failure on Windows (using Python 2.7):\r\n```\r\n$ pytest tests\r\n. . .\r\n_________________________________ test_myfunc _________________________________\r\ncapsys = <_pytest.capture.CaptureFixture object at 0x04865830>\r\n    def test_myfunc(capsys):\r\n>       myfunc()\r\ntests\\unit\\test_error_click.py:15: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\ntests\\unit\\test_error_click.py:11: in myfunc\r\n    click.echo('bla')\r\n.tox\\win64_py27_32\\lib\\site-packages\\click\\utils.py:230: in echo\r\n    file = _default_text_stdout()\r\n.tox\\win64_py27_32\\lib\\site-packages\\click\\_compat.py:760: in func\r\n    rv = wrapper_func()\r\n.tox\\win64_py27_32\\lib\\site-packages\\click\\_compat.py:256: in get_text_stdout\r\n    rv = _get_windows_console_stream(sys.stdout, encoding, errors)\r\n.tox\\win64_py27_32\\lib\\site-packages\\click\\_winconsole.py:356: in _get_windows_console_stream\r\n    and _is_console(f)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nf = <_pytest.compat.CaptureIO object at 0x049156F0>\r\n    def _is_console(f):\r\n        if not hasattr(f, \"fileno\"):\r\n            return False\r\n    \r\n        try:\r\n>           fileno = f.fileno()\r\nE           UnsupportedOperation: fileno\r\n.tox\\win64_py27_32\\lib\\site-packages\\click\\_winconsole.py:343: UnsupportedOperation\r\n```\r\n\r\nThis is from this Appveyor run on Python 2.7: https://ci.appveyor.com/project/KSchopmeyer/pywbemtools/builds/33566529/job/j22nqi2rq10f7uk2#L1463\r\n\r\nIt also happens on Python 3.8: https://ci.appveyor.com/project/KSchopmeyer/pywbemtools/builds/33566529/job/0mo646j7ck1yidhs#L1473\r\n\r\n### Expected behavior\r\n\r\nThis should succeed on Windows as it does on Linux and macOS.\r\n\r\n### Possible solutions\r\n\r\nI think `UnsupportedOperation` should be tolerated in the call to `f.fileno()` in `_winconsole._is_console()`. This seems to be done in other people's code calling fileno(), too:  https://www.programcreek.com/python/example/17474/io.UnsupportedOperation\r\n\r\n### Environment\r\n\r\n* Python version: 2.7, 3.8\r\n* Click version: 7.1.2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1588", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1588/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1588/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1588/events", "html_url": "https://github.com/pallets/click/issues/1588", "id": 639750517, "node_id": "MDU6SXNzdWU2Mzk3NTA1MTc=", "number": 1588, "title": "when @click.option('-s', '--string-to-echo') used , by mistake if i give -string-to-echo it will consider the option as -s and followed by the value passed to it. is there validation for options as well?", "user": {"login": "girishprabhu7", "id": 67012389, "node_id": "MDQ6VXNlcjY3MDEyMzg5", "avatar_url": "https://avatars0.githubusercontent.com/u/67012389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/girishprabhu7", "html_url": "https://github.com/girishprabhu7", "followers_url": "https://api.github.com/users/girishprabhu7/followers", "following_url": "https://api.github.com/users/girishprabhu7/following{/other_user}", "gists_url": "https://api.github.com/users/girishprabhu7/gists{/gist_id}", "starred_url": "https://api.github.com/users/girishprabhu7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/girishprabhu7/subscriptions", "organizations_url": "https://api.github.com/users/girishprabhu7/orgs", "repos_url": "https://api.github.com/users/girishprabhu7/repos", "events_url": "https://api.github.com/users/girishprabhu7/events{/privacy}", "received_events_url": "https://api.github.com/users/girishprabhu7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-16T15:08:50Z", "updated_at": "2020-06-22T13:48:30Z", "closed_at": "2020-06-22T13:48:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\n@click.command()\r\n@click.option('-s', '--string-to-echo')\r\ndef echo(string_to_echo):\r\n    click.echo(string_to_echo)\r\n```\r\n\r\n```\r\n> python test.py -string-to-echo\r\n  tring-to-echo\r\n```\r\n\r\nexpectation:\r\nError: no such option:  -string-to-echo\r\n\r\n```\r\n> python test.py -sassdf\r\nassdf\r\n```\r\n\r\noption does not need space separator for value to be passed  \r\n\r\nexpectation:\r\nError: no such option:  -sassdf\r\n\r\n### Environment\r\n\r\n* Python version: 2.7\r\n* Click version:  7.1.2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1578", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1578/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1578/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1578/events", "html_url": "https://github.com/pallets/click/issues/1578", "id": 635445347, "node_id": "MDU6SXNzdWU2MzU0NDUzNDc=", "number": 1578, "title": "Is there a way to use wildcard arguments when using CliRunner", "user": {"login": "dhhagan", "id": 4370504, "node_id": "MDQ6VXNlcjQzNzA1MDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4370504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhhagan", "html_url": "https://github.com/dhhagan", "followers_url": "https://api.github.com/users/dhhagan/followers", "following_url": "https://api.github.com/users/dhhagan/following{/other_user}", "gists_url": "https://api.github.com/users/dhhagan/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhhagan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhhagan/subscriptions", "organizations_url": "https://api.github.com/users/dhhagan/orgs", "repos_url": "https://api.github.com/users/dhhagan/repos", "events_url": "https://api.github.com/users/dhhagan/events{/privacy}", "received_events_url": "https://api.github.com/users/dhhagan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-09T13:44:27Z", "updated_at": "2020-06-09T13:51:29Z", "closed_at": "2020-06-09T13:51:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n### Expected Behavior\r\n\r\nIf given a wildcard argument when testing using CliRunner, the wildcard is not expanded and instead is sent as a string.\r\n\r\n```python\r\n@click.command(\"concat\")\r\n@click.argument(\"files\", nargs=-1, type=click.Path())\r\n@click.option(\"-o\", \"--output\", default=\"output.csv\", help=\"The filepath where you would like to save the file\", type=str)\r\n@click.option(\"-v\", \"--verbose\", is_flag=True, help=\"Enable verbose mode (debugging)\")\r\ndef concat(files, output, verbose, **kwargs):\r\n    \"\"\"Concatenate FILES together.\r\n    \"\"\"\r\n    for f in files:\r\n        click.echo(f)\r\n\r\n```\r\n\r\n\r\n### Test Code\r\n\r\n```python\r\nclass SetupTestCase(unittest.TestCase):\r\n    def setUp(self):\r\n        self.test_files_dir = os.path.join(os.getcwd(), \"tests/files\")\r\n\r\n    def tearDown(self):\r\n        pass\r\n\r\n    def test_concat_files(self):\r\n        runner = CliRunner()\r\n        result = runner.invoke(concat, [os.path.join(self.test_files_dir, \"*.csv\")])\r\n\r\n```\r\n\r\n### Actual Behavior\r\n\r\nInstead of printing out all csv files in the directory, it prints out `<path-to-directory>/*.csv` as a string which raises an error with the unittest because it expects a valid filepath (i.e. without the wildcard). Is there a way to test wildcards using CliRunner?\r\n\r\n### Environment\r\n\r\n* Python version: 3.6.10\r\n* Click version: 7.1.2\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1570", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1570/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1570/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1570/events", "html_url": "https://github.com/pallets/click/issues/1570", "id": 628477555, "node_id": "MDU6SXNzdWU2Mjg0Nzc1NTU=", "number": 1570, "title": "Undefined behaviour when ctx.obj is renamed ctx.args", "user": {"login": "ashwinvis", "id": 9155111, "node_id": "MDQ6VXNlcjkxNTUxMTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/9155111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashwinvis", "html_url": "https://github.com/ashwinvis", "followers_url": "https://api.github.com/users/ashwinvis/followers", "following_url": "https://api.github.com/users/ashwinvis/following{/other_user}", "gists_url": "https://api.github.com/users/ashwinvis/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashwinvis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashwinvis/subscriptions", "organizations_url": "https://api.github.com/users/ashwinvis/orgs", "repos_url": "https://api.github.com/users/ashwinvis/repos", "events_url": "https://api.github.com/users/ashwinvis/events{/privacy}", "received_events_url": "https://api.github.com/users/ashwinvis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-01T14:23:03Z", "updated_at": "2020-06-01T15:52:02Z", "closed_at": "2020-06-01T14:47:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was trying to implement the `pass_context` feature as given in:\r\n\r\n> https://click.palletsprojects.com/en/7.x/commands/#nested-handling-and-contexts\r\n\r\nand I renamed the `obj` dictionary attribute of context with `args`. \r\n\r\n### Expected Behavior\r\nI expected it to work smoothly or throw an error at least.\r\n\r\n```python\r\nimport click\r\n\r\n\r\n@click.group()\r\n@click.option('--debug/--no-debug', default=False)\r\n@click.pass_context\r\ndef cli(ctx, debug):\r\n    ctx.ensure_object(dict)\r\n    ctx.args['DEBUG'] = debug\r\n\r\n\r\n@cli.command()\r\n@click.pass_context\r\ndef sync(ctx):\r\n    click.echo('Debug is %s' % (ctx.args['DEBUG'] and 'on' or 'off'))\r\n\r\n\r\nif __name__ == '__main__':\r\n    cli(args={})\r\n```\r\n\r\nHere is the traceback if I used `argv` instead:\r\n\r\n```pytb\r\n$ python mycli.py sync\r\n...\r\n  File \"/usr/lib/python3.8/site-packages/click/core.py\", line 698, in make_context\r\n    ctx = Context(self, info_name=info_name, parent=parent, **extra)\r\nTypeError: __init__() got an unexpected keyword argument 'argv'\r\n```\r\n\r\nIdeally, it should throw such an error or something more meaningful. \r\n\r\n### Actual Behavior\r\n\r\nNo error at all. It simply displays the help message, and thus it was hard to debug.\r\n\r\n```pytb\r\n$ python mycli.py sync\r\nUsage: mycli.py [OPTIONS] COMMAND [ARGS]...\r\n\r\nOptions:\r\n  --debug / --no-debug\r\n  --help                Show this message and exit.\r\n\r\nCommands:\r\n  sync\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.8.3\r\n* Click version: 7.1.2\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1569", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1569/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1569/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1569/events", "html_url": "https://github.com/pallets/click/issues/1569", "id": 627951009, "node_id": "MDU6SXNzdWU2Mjc5NTEwMDk=", "number": 1569, "title": "Possible bug with CliRunner.invoke (Click testing)", "user": {"login": "staticdev", "id": 1446633, "node_id": "MDQ6VXNlcjE0NDY2MzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1446633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/staticdev", "html_url": "https://github.com/staticdev", "followers_url": "https://api.github.com/users/staticdev/followers", "following_url": "https://api.github.com/users/staticdev/following{/other_user}", "gists_url": "https://api.github.com/users/staticdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/staticdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/staticdev/subscriptions", "organizations_url": "https://api.github.com/users/staticdev/orgs", "repos_url": "https://api.github.com/users/staticdev/repos", "events_url": "https://api.github.com/users/staticdev/events{/privacy}", "received_events_url": "https://api.github.com/users/staticdev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-31T12:12:49Z", "updated_at": "2020-07-07T00:48:59Z", "closed_at": "2020-07-07T00:48:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nInvoke main() method.\r\n\r\n```python\r\n# console.py\r\nimport click\r\n\r\n@click.command()\r\n@click.version_option()\r\n@click.argument(\"filepath\", type=click.Path(exists=True), default=\".\")\r\n@click.option(\r\n    \"-m\",\r\n    \"--max-size\",\r\n    type=int,\r\n    help=\"Max size in megabytes.\",\r\n    default=20,\r\n    show_default=True,\r\n)\r\ndef main(filepath: str, max_size: int) -> None:\r\n    max_size_bytes = max_size * 1024 * 1024  # convert to MB\r\n    if filepath.endswith(\".pdf\"):\r\n        print(\"success\")\r\n    else:\r\n        print(max_size_bytes)\r\n\r\n# test_console.py\r\nfrom unittest.mock import Mock\r\n\r\nimport click.testing\r\nimport pytest\r\nfrom pytest_mock import MockFixture\r\n\r\nfrom pdf_split_tool import console\r\n\r\n@pytest.fixture\r\ndef runner() -> click.testing.CliRunner:\r\n    \"\"\"Fixture for invoking command-line interfaces.\"\"\"\r\n    return click.testing.CliRunner()\r\n\r\n@pytest.fixture\r\ndef mock_pdf_splitter_pdfsplitter(mocker: MockFixture) -> Mock:\r\n    \"\"\"Fixture for mocking pdf_splitter.PdfSplitter.\"\"\"\r\n    return mocker.patch(\"pdf_split_tool.pdf_splitter.PdfSplitter\", autospec=True)\r\n\r\ndef test_main_uses_specified_filepath(\r\n    runner: click.testing.CliRunner,\r\n    mock_pdf_splitter_pdfsplitter: Mock, \r\n) -> None:\r\n    \"\"\"It uses the specified filepath.\"\"\"\r\n    result = runner.invoke(console.main, [\"test.pdf\"])\r\n    assert result.exit_code == 0\r\n```\r\n\r\n### Actual Behavior\r\n\r\nConsole returns 2, and function is not being called on debugger.\r\n\r\n### Environment\r\n\r\n* Python version: 3.8.2\r\n* Click version: 7.1.2\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1567", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1567/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1567/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1567/events", "html_url": "https://github.com/pallets/click/issues/1567", "id": 627474335, "node_id": "MDU6SXNzdWU2Mjc0NzQzMzU=", "number": 1567, "title": "AttributeError in BoolParamType when using ctx.default_map for configuration", "user": {"login": "ichard26", "id": 63936253, "node_id": "MDQ6VXNlcjYzOTM2MjUz", "avatar_url": "https://avatars3.githubusercontent.com/u/63936253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ichard26", "html_url": "https://github.com/ichard26", "followers_url": "https://api.github.com/users/ichard26/followers", "following_url": "https://api.github.com/users/ichard26/following{/other_user}", "gists_url": "https://api.github.com/users/ichard26/gists{/gist_id}", "starred_url": "https://api.github.com/users/ichard26/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ichard26/subscriptions", "organizations_url": "https://api.github.com/users/ichard26/orgs", "repos_url": "https://api.github.com/users/ichard26/repos", "events_url": "https://api.github.com/users/ichard26/events{/privacy}", "received_events_url": "https://api.github.com/users/ichard26/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-29T19:01:17Z", "updated_at": "2020-06-03T21:48:07Z", "closed_at": "2020-06-03T21:48:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello `Click`. I am a contributor of [Black](https://github.com/psf/black), which is a Python code formatter that is heavily opinionated. This might not be a bug and this might actually be a duplicate of #1553. I am just reraising the same issue with more details and information.\r\n\r\n---\r\n\r\nBlack supports reading configuration from a `pyproject.toml` file. The CLI has a `--config` option to pass the path to the `pyproject.toml` file. This option has a callback to a `read_pyproject_toml` function which takes the filepath (or looks for it automatically if it wasn't explicitly given) and reads the Black configuration from the file. Once having read the configuration. Black injects them into `ctx.default_map`. This works really nicely to have a tiered configuration system where CLI arguments override configuration from a `pyproject.toml` file.\r\n\r\nBelow is a minimal example of the code causing the `AttributeError`.\r\n\r\n```python\r\nimport click\r\n\r\n\r\ndef read_pyproject_toml(ctx, param, value):\r\n    \"\"\"Inject Black configuration from \"pyproject.toml\" into defaults in `ctx`.\"\"\"\r\n    # Let's just pretend that a pyproject.toml file was found and read\r\n    values = {\"skip_string_normalization\": 1}\r\n    ctx.default_map = values\r\n\r\n\r\n@click.command()\r\n@click.option(\r\n    \"-S\",\r\n    \"--skip-string-normalization\",\r\n    is_flag=True,\r\n    help=\"Don't normalize string quotes or prefixes.\",\r\n)\r\n@click.option(\r\n    \"--config\",\r\n    is_eager=True,\r\n    callback=read_pyproject_toml,\r\n    help=\"Read configuration from PATH.\",\r\n)\r\ndef main(skip_string_normalization: bool):\r\n    pass\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n\r\n```\r\n\r\n### Actual Behavior\r\n\r\nThe problem is that when `Click` passes the argument to the main function it first converts the argument to a `bool`. That conversion fails with an exception in the `Click` core. \r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"attributeerror.py\", line 29, in <module>\r\n    main()\r\n  File \"/home/richard-26/.local/lib/python3.8/site-packages/click/core.py\", line 764, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"/home/richard-26/.local/lib/python3.8/site-packages/click/core.py\", line 716, in main\r\n    with self.make_context(prog_name, args, **extra) as ctx:\r\n  File \"/home/richard-26/.local/lib/python3.8/site-packages/click/core.py\", line 641, in make_context\r\n    self.parse_args(ctx, args)\r\n  File \"/home/richard-26/.local/lib/python3.8/site-packages/click/core.py\", line 940, in parse_args\r\n    value, args = param.handle_parse_result(ctx, opts, args)\r\n  File \"/home/richard-26/.local/lib/python3.8/site-packages/click/core.py\", line 1469, in handle_parse_result\r\n    value = self.full_process_value(ctx, value)\r\n  File \"/home/richard-26/.local/lib/python3.8/site-packages/click/core.py\", line 1790, in full_process_value\r\n    return Parameter.full_process_value(self, ctx, value)\r\n  File \"/home/richard-26/.local/lib/python3.8/site-packages/click/core.py\", line 1438, in full_process_value\r\n    value = self.process_value(ctx, value)\r\n  File \"/home/richard-26/.local/lib/python3.8/site-packages/click/core.py\", line 1428, in process_value\r\n    return self.type_cast_value(ctx, value)\r\n  File \"/home/richard-26/.local/lib/python3.8/site-packages/click/core.py\", line 1417, in type_cast_value\r\n    return _convert(value, (self.nargs != 1) + bool(self.multiple))\r\n  File \"/home/richard-26/.local/lib/python3.8/site-packages/click/core.py\", line 1415, in _convert\r\n    return self.type(value, self, ctx)\r\n  File \"/home/richard-26/.local/lib/python3.8/site-packages/click/types.py\", line 39, in __call__\r\n    return self.convert(value, param, ctx)\r\n  File \"/home/richard-26/.local/lib/python3.8/site-packages/click/types.py\", line 350, in convert\r\n    value = value.lower()\r\nAttributeError: 'int' object has no attribute 'lower'\r\n```\r\n\r\n### Expected Behavior\r\n\r\nIdeally `Click` would display a helpful error message to the user instead of causing an `AttributeError` exception. Something like this:\r\n\r\n```console\r\nrichard-26@ubuntu-laptop:~/programming/black$ python attributeerror.py \r\nUsage: attributeerror.py [OPTIONS]\r\nTry \"attributeerror.py --help\" for help.\r\n\r\nError: Invalid value for \"-S\" / \"--skip-string-normalization\": 0 is not a valid boolean\r\n```\r\n\r\nExcept, then that raises the issue that a string version of a number being indistinguishable from its `int` or `float` version... `Click` could display a [specialized error message](https://github.com/psf/black/issues/1458#issuecomment-634356229) for integers like `The number 0 is not a valid boolean`, but IMO that's a bit overkill and would become a slippery slope.\r\n\r\n### Alternative Solution\r\n\r\n`BoolParamType` could accept `1` and `0` as a valid boolean since `\"1\"` and `\"0\"` are already accepted as boolean. \r\n\r\nhttps://github.com/pallets/click/blob/da7bf34eb286b3371215b0ae35e0ed1e3781619a/src/click/types.py#L390-L393\r\n\r\nAlthough, this would be a backward-incompatible change. \r\n\r\n---\r\n\r\nIn the end. this is kinda a problem since the exception's traceback points to the `Click` core. Black has an issue reported with the same exception -> https://github.com/psf/black/issues/1458. The exception isn't understandable to users as it looks like something is wrong with `Click` when their Black configuration is just wrong.\r\n\r\nRegardless, thank you for taking the time to read this (possibly worthless) bug report. And for maintaining this great package. Black and many of my personal projects use `Click` as their CLI toolkit. If I am missing any information about Black's use case or something else, please feel free to ask!\r\n\r\n### Environment\r\n\r\n* Python version: `Python 3.8.1`\r\n* OS version: `Ubuntu 18.04.4 LTS`\r\n* Click version: `7.1.1`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1565", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1565/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1565/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1565/events", "html_url": "https://github.com/pallets/click/issues/1565", "id": 627123289, "node_id": "MDU6SXNzdWU2MjcxMjMyODk=", "number": 1565, "title": "show_default in group's context_settings not propagated to subcommands", "user": {"login": "achimnol", "id": 555156, "node_id": "MDQ6VXNlcjU1NTE1Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/555156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/achimnol", "html_url": "https://github.com/achimnol", "followers_url": "https://api.github.com/users/achimnol/followers", "following_url": "https://api.github.com/users/achimnol/following{/other_user}", "gists_url": "https://api.github.com/users/achimnol/gists{/gist_id}", "starred_url": "https://api.github.com/users/achimnol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/achimnol/subscriptions", "organizations_url": "https://api.github.com/users/achimnol/orgs", "repos_url": "https://api.github.com/users/achimnol/repos", "events_url": "https://api.github.com/users/achimnol/events{/privacy}", "received_events_url": "https://api.github.com/users/achimnol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/click/milestones/5", "html_url": "https://github.com/pallets/click/milestone/5", "labels_url": "https://api.github.com/repos/pallets/click/milestones/5/labels", "id": 3655024, "node_id": "MDk6TWlsZXN0b25lMzY1NTAyNA==", "number": 5, "title": "8.0.0", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 8, "closed_issues": 58, "state": "open", "created_at": "2018-09-14T14:59:44Z", "updated_at": "2020-08-17T04:43:11Z", "due_on": null, "closed_at": null}, "comments": 0, "created_at": "2020-05-29T09:14:10Z", "updated_at": "2020-08-13T21:32:56Z", "closed_at": "2020-08-13T21:32:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\n#1018 and #1225 seems to have fixed supporting a global `show_default` option via context settings, but in Click 7.1.2, it doesn't cover my use case yet.\r\n\r\nI thought the following should work with 7.1+:\r\n\r\n```python\r\nimport click\r\n\r\n@click.group(context_settings={\r\n    'show_default': True,\r\n    'help_option_names': ['-x', '--xhelp'],\r\n})\r\n@click.pass_context\r\ndef main(ctx):\r\n    print('==== main ====')\r\n    print(ctx.show_default)\r\n    print(ctx.help_option_names)\r\n\r\n@main.command()\r\n@click.option('-v', '--value', type=int, default=123, help='some value')\r\n@click.pass_context\r\ndef do(ctx, value):\r\n    print('==== do ====')\r\n    print(ctx.show_default)\r\n    print(ctx.help_option_names)\r\n    print('----')\r\n    print(value)\r\n\r\nmain()\r\n```\r\n\r\n```console\r\n$ python test-click.py -x\r\nUsage: test-click.py [OPTIONS] COMMAND [ARGS]...\r\n\r\nOptions:\r\n  -x, --xhelp  Show this message and exit.  [default: False]\r\n\r\nCommands:\r\n  do\r\n\r\n$ python test-click.py do -x\r\n==== main ====\r\nTrue\r\n['-x', '--xhelp']\r\nUsage: test-click.py do [OPTIONS]\r\n\r\nOptions:\r\n  -v, --value INTEGER  some value  [default: 123]\r\n  -x, --xhelp          Show this message and exit.\r\n\r\n$ python test-click.py do\r\n==== main ====\r\nTrue\r\n['-x', '--xhelp']\r\n==== do ====\r\nTrue\r\n['-x', '--xhelp']\r\n----\r\n123\r\n```\r\n\r\n### Actual Behavior\r\n\r\nBut the current implementation seems to loose the value of `show_default` when \"going into\" subcommands.\r\n\r\n```console\r\n$ python test-click.py -x\r\nUsage: test-click.py [OPTIONS] COMMAND [ARGS]...\r\n\r\nOptions:\r\n  -x, --xhelp  Show this message and exit.  [default: False]\r\n\r\nCommands:\r\n  do\r\n\r\n$ python test-click.py do -x\r\n==== main ====\r\nTrue\r\n['-x', '--xhelp']\r\nUsage: test-click.py do [OPTIONS]\r\n\r\nOptions:\r\n  -v, --value INTEGER  some value\r\n  -x, --xhelp          Show this message and exit.\r\n\r\n$ python test-click.py do\r\n==== main ====\r\nTrue\r\n['-x', '--xhelp']\r\n==== do ====\r\nNone\r\n['-x', '--xhelp']\r\n----\r\n123\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.8.3\r\n* Click version: 7.1.2\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1559", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1559/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1559/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1559/events", "html_url": "https://github.com/pallets/click/issues/1559", "id": 623653722, "node_id": "MDU6SXNzdWU2MjM2NTM3MjI=", "number": 1559, "title": "Extra empty line added for options with long description", "user": {"login": "psss", "id": 2803150, "node_id": "MDQ6VXNlcjI4MDMxNTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2803150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psss", "html_url": "https://github.com/psss", "followers_url": "https://api.github.com/users/psss/followers", "following_url": "https://api.github.com/users/psss/following{/other_user}", "gists_url": "https://api.github.com/users/psss/gists{/gist_id}", "starred_url": "https://api.github.com/users/psss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psss/subscriptions", "organizations_url": "https://api.github.com/users/psss/orgs", "repos_url": "https://api.github.com/users/psss/repos", "events_url": "https://api.github.com/users/psss/events{/privacy}", "received_events_url": "https://api.github.com/users/psss/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-23T12:48:16Z", "updated_at": "2020-06-16T20:23:16Z", "closed_at": "2020-05-23T13:37:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since version `7.1` there seems to be an extra empty line added after each option with longer description which has to be wrapped. Works nice with `7.0`.\r\n\r\n### Reproducer\r\n\r\n```python\r\nimport click\r\n\r\n@click.command()\r\n@click.option(\r\n    '-v', '--verbose', is_flag=True, multiple=True,\r\n    help='Please, show more details. Use multiple times to raise verbosity.')\r\n@click.option(\r\n    '-d', '--debug', is_flag=True, multiple=True,\r\n    help='Provide debugging information. Repeat to see more details.')\r\ndef show(verbose, debug):\r\n    \"\"\" Show something \"\"\"\r\n    print(f\"verbose: {verbose}\\ndebug: {debug}\")\r\n\r\nif __name__ == '__main__':\r\n    show()\r\n```\r\n\r\n### Expected Behavior\r\n\r\nThere should be no empty lines between option descriptions.\r\n\r\n```\r\nOptions:\r\n  -v, --verbose  Please, show more details. Use multiple times to raise\r\n                 verbosity.\r\n  -d, --debug    Provide debugging information. Repeat to see more details.\r\n  --help         Show this message and exit.\r\n```\r\n\r\n### Actual Behavior\r\n\r\nExtra lines after the `verbose` option.\r\n\r\n```\r\nOptions:\r\n  -v, --verbose  Please, show more details. Use multiple times to raise\r\n                 verbosity.\r\n\r\n  -d, --debug    Provide debugging information. Repeat to see more details.\r\n  --help         Show this message and exit.\r\n\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.8.2\r\n* Click version: 7.1.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1557", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1557/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1557/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1557/events", "html_url": "https://github.com/pallets/click/issues/1557", "id": 623393720, "node_id": "MDU6SXNzdWU2MjMzOTM3MjA=", "number": 1557, "title": "click.launch(wait=True) does not appear to work", "user": {"login": "leducvin", "id": 22982038, "node_id": "MDQ6VXNlcjIyOTgyMDM4", "avatar_url": "https://avatars2.githubusercontent.com/u/22982038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leducvin", "html_url": "https://github.com/leducvin", "followers_url": "https://api.github.com/users/leducvin/followers", "following_url": "https://api.github.com/users/leducvin/following{/other_user}", "gists_url": "https://api.github.com/users/leducvin/gists{/gist_id}", "starred_url": "https://api.github.com/users/leducvin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leducvin/subscriptions", "organizations_url": "https://api.github.com/users/leducvin/orgs", "repos_url": "https://api.github.com/users/leducvin/repos", "events_url": "https://api.github.com/users/leducvin/events{/privacy}", "received_events_url": "https://api.github.com/users/leducvin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 104560051, "node_id": "MDU6TGFiZWwxMDQ1NjAwNTE=", "url": "https://api.github.com/repos/pallets/click/labels/docs", "name": "docs", "color": "207de5", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-22T18:07:48Z", "updated_at": "2020-08-14T17:09:54Z", "closed_at": "2020-08-14T17:09:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nWhen calling `click.launch(wait=True)`, if I interpret the documentation correctly, `click.launch(wait=True)` should wait (block) for the user to close the launched program.\r\n\r\nFrom https://click.palletsprojects.com/en/7.x/api/#click.launch:\r\n> wait \u2013 waits for the program to stop.\r\n\r\nIn fact, whatever the value of `wait`, the behavior does not change.\r\n\r\nWhat I'm trying to accomplish is to generate a temp file in my CLI app, let the user look at it using `click.launch`, then have the temp file deleted once the viewing program is closed.\r\n\r\n```python\r\n# test.py\r\n# Assume exisiting ./test.txt file\r\n\r\nimport click\r\n \r\n@click.command()\r\ndef main():\r\n    print('Entering main.')\r\n    click.launch('./test.txt', wait=True)\r\n    print('Leaving main.')\r\n \r\nif __name__ == '__main__':\r\n     main()\r\n```\r\n\r\n```\r\n> python test.py\r\n> Entering main.\r\n(file opens in program)\r\n(user closes program)\r\n> Leaving main.\r\n```\r\n\r\n### Actual Behavior\r\n```\r\n> python test.py\r\n> Entering main.\r\n> Leaving main.\r\n(file opens in program)\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.5 (default, Nov  7 2019, 10:50:52) \r\n* Click version: 7.1.2\r\n\r\nHad a look in the source. I'm on linux, so xdg-open is being called, and that never blocks. click always returns `0` if `wait == False`, and the return code of xdg-open if `wait == True`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1556", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1556/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1556/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1556/events", "html_url": "https://github.com/pallets/click/issues/1556", "id": 621475915, "node_id": "MDU6SXNzdWU2MjE0NzU5MTU=", "number": 1556, "title": "Progressbar do not advance with `.next()` call", "user": {"login": "georgexsh", "id": 32751, "node_id": "MDQ6VXNlcjMyNzUx", "avatar_url": "https://avatars3.githubusercontent.com/u/32751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/georgexsh", "html_url": "https://github.com/georgexsh", "followers_url": "https://api.github.com/users/georgexsh/followers", "following_url": "https://api.github.com/users/georgexsh/following{/other_user}", "gists_url": "https://api.github.com/users/georgexsh/gists{/gist_id}", "starred_url": "https://api.github.com/users/georgexsh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/georgexsh/subscriptions", "organizations_url": "https://api.github.com/users/georgexsh/orgs", "repos_url": "https://api.github.com/users/georgexsh/repos", "events_url": "https://api.github.com/users/georgexsh/events{/privacy}", "received_events_url": "https://api.github.com/users/georgexsh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2020-05-20T05:40:39Z", "updated_at": "2020-06-09T04:10:55Z", "closed_at": "2020-06-04T19:10:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nwith the following code:\r\n\r\n```\r\nimport time\r\nimport click\r\n\r\nlst = list(range(10))\r\nwith click.progressbar(lst) as bar:\r\n    for i in lst:\r\n        next(bar)\r\n        time.sleep(0.2)\r\n```\r\nbar just don't advance, related to https://github.com/pallets/click/issues/1125.\r\n\r\n### Actual Behavior\r\n\r\nworks fine with click-6.7. \r\n\r\n### Environment\r\n\r\n* Python version: 3.8.2 on macOS\r\n* Click version: 7.1.2\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1554", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1554/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1554/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1554/events", "html_url": "https://github.com/pallets/click/issues/1554", "id": 618562979, "node_id": "MDU6SXNzdWU2MTg1NjI5Nzk=", "number": 1554, "title": "Is there a way to list all available subcommands in a Click-based application?", "user": {"login": "jleveque", "id": 3300381, "node_id": "MDQ6VXNlcjMzMDAzODE=", "avatar_url": "https://avatars1.githubusercontent.com/u/3300381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jleveque", "html_url": "https://github.com/jleveque", "followers_url": "https://api.github.com/users/jleveque/followers", "following_url": "https://api.github.com/users/jleveque/following{/other_user}", "gists_url": "https://api.github.com/users/jleveque/gists{/gist_id}", "starred_url": "https://api.github.com/users/jleveque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jleveque/subscriptions", "organizations_url": "https://api.github.com/users/jleveque/orgs", "repos_url": "https://api.github.com/users/jleveque/repos", "events_url": "https://api.github.com/users/jleveque/events{/privacy}", "received_events_url": "https://api.github.com/users/jleveque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-14T22:02:58Z", "updated_at": "2020-05-15T04:57:54Z", "closed_at": "2020-05-15T04:57:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "The title says it all. I'm curious if there is a way to easily list all available subcommands in a Click-based application? This is not for the end user, as they will use the help menus to navigate, but more for development/documentation/testing purposes. Thanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1553", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1553/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1553/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1553/events", "html_url": "https://github.com/pallets/click/issues/1553", "id": 616761036, "node_id": "MDU6SXNzdWU2MTY3NjEwMzY=", "number": 1553, "title": "AttributeError: 'int' object has no attribute 'lower'", "user": {"login": "DavidKatz-il", "id": 41651296, "node_id": "MDQ6VXNlcjQxNjUxMjk2", "avatar_url": "https://avatars0.githubusercontent.com/u/41651296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DavidKatz-il", "html_url": "https://github.com/DavidKatz-il", "followers_url": "https://api.github.com/users/DavidKatz-il/followers", "following_url": "https://api.github.com/users/DavidKatz-il/following{/other_user}", "gists_url": "https://api.github.com/users/DavidKatz-il/gists{/gist_id}", "starred_url": "https://api.github.com/users/DavidKatz-il/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DavidKatz-il/subscriptions", "organizations_url": "https://api.github.com/users/DavidKatz-il/orgs", "repos_url": "https://api.github.com/users/DavidKatz-il/repos", "events_url": "https://api.github.com/users/DavidKatz-il/events{/privacy}", "received_events_url": "https://api.github.com/users/DavidKatz-il/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-12T15:43:08Z", "updated_at": "2020-05-13T13:31:25Z", "closed_at": "2020-05-13T13:31:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,  \r\n\r\nWhen i run the following code:   `click.types.BOOL(1)`    i get this error: \r\n>AttributeError: 'int' object has no attribute 'lower'  \r\n\r\nThe simple solution is to change  `value = value.lower()` to  \r\n```\r\nif not isinstance(value, (int, str)):  \r\n    raise TypeError(\"value must be a string or integer\")  \r\nvalue = str(value).lower()\r\n```\r\n[in the 'BoolParamType' class](https://github.com/pallets/click/blob/master/src/click/types.py#L389)\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.6\r\n* Click version: 7.1.2\r\n  \r\n  \r\nI will be happy to submit a PR.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1552", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1552/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1552/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1552/events", "html_url": "https://github.com/pallets/click/issues/1552", "id": 616516545, "node_id": "MDU6SXNzdWU2MTY1MTY1NDU=", "number": 1552, "title": "Inconsistent support of help keyword for @click.argument", "user": {"login": "holongate", "id": 7782359, "node_id": "MDQ6VXNlcjc3ODIzNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7782359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/holongate", "html_url": "https://github.com/holongate", "followers_url": "https://api.github.com/users/holongate/followers", "following_url": "https://api.github.com/users/holongate/following{/other_user}", "gists_url": "https://api.github.com/users/holongate/gists{/gist_id}", "starred_url": "https://api.github.com/users/holongate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/holongate/subscriptions", "organizations_url": "https://api.github.com/users/holongate/orgs", "repos_url": "https://api.github.com/users/holongate/repos", "events_url": "https://api.github.com/users/holongate/events{/privacy}", "received_events_url": "https://api.github.com/users/holongate/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-12T09:46:25Z", "updated_at": "2020-05-12T12:57:41Z", "closed_at": "2020-05-12T12:57:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't think of any rationale for not having some help on command arguments, as this is the most basic requirement of such cli library.\r\nSo I hope I misused / did not understand how this library works.\r\n\r\n---\r\n### Expected Behavior\r\nWhen a command is decorated with @click.argument that contain a \"help\", an exception \"unexpected keyword help\" is raised.\r\n\r\nNote that @click.option does accept the 'help' argument and the documentation says:\r\n\r\nFor @argument:\r\n\r\nclick.argument(*param_decls, **attrs)\r\nAttaches an argument to the command. All positional arguments are passed as parameter declarations to Argument; all keyword arguments are forwarded unchanged (except cls). This is equivalent to creating an Argument instance manually and attaching it to the Command.params list.\r\n\r\nand:\r\n\r\nclass click.Argument(param_decls, required=None, **attrs)\r\nArguments are positional parameters to a command. They generally provide fewer features than options but can have infinite nargs and are required by default.\r\n\r\nAll parameters are passed onwards to the parameter constructor.\r\n\r\nFor @option:\r\n\r\nclick.option(*param_decls, **attrs)\r\nAttaches an option to the command. All positional arguments are passed as parameter declarations to Option; all keyword arguments are forwarded unchanged (except cls). This is equivalent to creating an Option instance manually and attaching it to the Command.params list.\r\n\r\nclass click.Option(param_decls=None, show_default=False, prompt=False, confirmation_prompt=False, hide_input=False, is_flag=None, flag_value=None, multiple=False, count=False, allow_from_autoenv=True, type=None, **help=None**, hidden=False, show_choices=True, show_envvar=False, **attrs)\r\nOptions are usually optional values on the command line and have **some extra features that arguments don\u2019t have**.\r\n\r\n**The documentaiton is ambiguous, and there is no reason that help strings are limited to optional arguments. This functionality should be at the Parameter level and automatically inherited**\r\n\r\n```python\r\nimport click\r\n\r\n@click.command(name=\"cli\")\r\n@click.argument(\"test\", help=\"A helper for test argument\")\r\ndef myfunc(test):\r\n  pass\r\n\r\nmyfunc()\r\n```\r\n\r\n### Actual Behavior\r\n\r\nError unexpected \"help\" keyword argument\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"/home/chris/.conda/envs/pe/lib/python3.6/site-packages/IPython/core/interactiveshell.py\", line 3331, in run_code\r\n    exec(code_obj, self.user_global_ns, self.user_ns)\r\n  File \"<ipython-input-3-c99a68152a86>\", line 2, in <module>\r\n    @click.argument(\"test\", help=\"A helper for test argument\")\r\n  File \"/home/chris/.conda/envs/pe/lib/python3.6/site-packages/click/decorators.py\", line 168, in decorator\r\n    _param_memo(f, ArgumentClass(param_decls, **attrs))\r\n  File \"/home/chris/.conda/envs/pe/lib/python3.6/site-packages/click/core.py\", line 1984, in __init__\r\n    Parameter.__init__(self, param_decls, required=required, **attrs)\r\nTypeError: __init__() got an unexpected keyword argument 'help'\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.6\r\n* Click version: 7.1.2 (build pyh9f0ad1d_0 on conda-forge)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1550", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1550/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1550/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1550/events", "html_url": "https://github.com/pallets/click/issues/1550", "id": 615280104, "node_id": "MDU6SXNzdWU2MTUyODAxMDQ=", "number": 1550, "title": "Bug when setting options_metavar as empty in the Command class", "user": {"login": "yo-main", "id": 40139584, "node_id": "MDQ6VXNlcjQwMTM5NTg0", "avatar_url": "https://avatars1.githubusercontent.com/u/40139584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yo-main", "html_url": "https://github.com/yo-main", "followers_url": "https://api.github.com/users/yo-main/followers", "following_url": "https://api.github.com/users/yo-main/following{/other_user}", "gists_url": "https://api.github.com/users/yo-main/gists{/gist_id}", "starred_url": "https://api.github.com/users/yo-main/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yo-main/subscriptions", "organizations_url": "https://api.github.com/users/yo-main/orgs", "repos_url": "https://api.github.com/users/yo-main/repos", "events_url": "https://api.github.com/users/yo-main/events{/privacy}", "received_events_url": "https://api.github.com/users/yo-main/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-09T23:30:18Z", "updated_at": "2020-05-09T23:40:18Z", "closed_at": "2020-05-09T23:40:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have encountered an issue when using a Command object without any options.\r\nAs I wanted to prevent the '[OPTION]' from appearing in the Usage line, I tried to set the options_metavar parameter to None but got an exception.\r\n\r\nI also tried to set it as an empty string rather than None, there's no exception then but the behavior isn't perfect neither as it prints a double space in the Usage row (the double space is between the filename and the argument)\r\n\r\nHere's a code snippet to reproduce the issue with None\r\n\r\n```python\r\n@click.command(\"foo\", options_metavar=None)\r\n@click.argument(\"bar\")\r\ndef cli():\r\n    pass\r\n```\r\n\r\n### Expected Behavior\r\nRunning the above, I expected to see\r\n```bash\r\n$ python foobar.py --help\r\nUsage: foobar.py BAR\r\n\r\nOptions:\r\n  --help  Show this message and exit.\r\n```\r\n\r\n### Actual Behavior\r\nAn error is raised as the formatter was expecting a string instead of a None.\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"foobar.py\", line 8, in <module>\r\n    cli()\r\n  File \"/home/romain/projects/apps/myprss/.venv/lib/python3.7/site-packages/click/core.py\", line 829, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"/home/romain/projects/apps/myprss/.venv/lib/python3.7/site-packages/click/core.py\", line 781, in main\r\n    with self.make_context(prog_name, args, **extra) as ctx:\r\n  File \"/home/romain/projects/apps/myprss/.venv/lib/python3.7/site-packages/click/core.py\", line 700, in make_context\r\n    self.parse_args(ctx, args)\r\n  File \"/home/romain/projects/apps/myprss/.venv/lib/python3.7/site-packages/click/core.py\", line 1048, in parse_args\r\n    value, args = param.handle_parse_result(ctx, opts, args)\r\n  File \"/home/romain/projects/apps/myprss/.venv/lib/python3.7/site-packages/click/core.py\", line 1630, in handle_parse_result\r\n    value = invoke_param_callback(self.callback, ctx, self, value)\r\n  File \"/home/romain/projects/apps/myprss/.venv/lib/python3.7/site-packages/click/core.py\", line 123, in invoke_param_callback\r\n    return callback(ctx, param, value)\r\n  File \"/home/romain/projects/apps/myprss/.venv/lib/python3.7/site-packages/click/core.py\", line 950, in show_help\r\n    echo(ctx.get_help(), color=ctx.color)\r\n  File \"/home/romain/projects/apps/myprss/.venv/lib/python3.7/site-packages/click/core.py\", line 570, in get_help\r\n    return self.command.get_help(self)\r\n  File \"/home/romain/projects/apps/myprss/.venv/lib/python3.7/site-packages/click/core.py\", line 975, in get_help\r\n    self.format_help(ctx, formatter)\r\n  File \"/home/romain/projects/apps/myprss/.venv/lib/python3.7/site-packages/click/core.py\", line 1001, in format_help\r\n    self.format_usage(ctx, formatter)\r\n  File \"/home/romain/projects/apps/myprss/.venv/lib/python3.7/site-packages/click/core.py\", line 923, in format_usage\r\n    formatter.write_usage(ctx.command_path, \" \".join(pieces))\r\nTypeError: sequence item 0: expected str instance, NoneType found\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.4\r\n* Click version: 7.1.2\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1547", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1547/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1547/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1547/events", "html_url": "https://github.com/pallets/click/issues/1547", "id": 613221738, "node_id": "MDU6SXNzdWU2MTMyMjE3Mzg=", "number": 1547, "title": "Testing global exception handling with CliRunner", "user": {"login": "StopMotionCuber", "id": 16007727, "node_id": "MDQ6VXNlcjE2MDA3NzI3", "avatar_url": "https://avatars0.githubusercontent.com/u/16007727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StopMotionCuber", "html_url": "https://github.com/StopMotionCuber", "followers_url": "https://api.github.com/users/StopMotionCuber/followers", "following_url": "https://api.github.com/users/StopMotionCuber/following{/other_user}", "gists_url": "https://api.github.com/users/StopMotionCuber/gists{/gist_id}", "starred_url": "https://api.github.com/users/StopMotionCuber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StopMotionCuber/subscriptions", "organizations_url": "https://api.github.com/users/StopMotionCuber/orgs", "repos_url": "https://api.github.com/users/StopMotionCuber/repos", "events_url": "https://api.github.com/users/StopMotionCuber/events{/privacy}", "received_events_url": "https://api.github.com/users/StopMotionCuber/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-06T10:42:31Z", "updated_at": "2020-05-06T13:52:38Z", "closed_at": "2020-05-06T13:52:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello everyone,\r\n\r\nI'm having an issue with testing my click application that has a custom exception handler with click.\r\nI would like to use the CliRunner to test custom exception handling with click.\r\nTherefore I'm using a setup similar to the one found below.\r\n\r\nExecute this script below with the parameter `action` (e.g. `python3 script_name.py action`) to reproduce this error.\r\n\r\nAlso I'd like to ask if this is the correct way to handle global exceptions. For me it does not make sense to handle the error in each subcommand, when there is e.g. a connection error to the server, which will always be handled the same way.\r\n\r\n### Expected Behavior\r\n\r\nThe Exception will be handled by the global handler in both cases, leading to a stdout of \r\n```\r\nExecuting manually:\r\nException was catched by application\r\nExecuting with CliRunner:\r\nException was catched by application\r\n```\r\n\r\nMinimal example:\r\n```python3\r\nimport click\r\nfrom click.testing import CliRunner\r\n\r\n\r\nclass ExampleError(Exception):\r\n    pass\r\n\r\n\r\nclass GlobalExceptionHandler(click.Group):\r\n    def __call__(self, *args, **kwargs):\r\n        try:\r\n            return self.main(*args, **kwargs)\r\n        except ExampleError:\r\n            print(\"Exception was catched by application\")\r\n\r\n\r\n@click.group(cls=GlobalExceptionHandler)\r\ndef cli():\r\n    pass\r\n\r\n\r\n@cli.command(short_help=\"Upload a Dockerfile or Folder to Database\")\r\ndef action():\r\n    raise ExampleError()\r\n\r\n\r\n# Manual running\r\ndef main_1():\r\n    cli()\r\n\r\n\r\n# Option 2\r\ndef main_2():\r\n    runner = CliRunner()\r\n    runner.invoke(cli, [\"action\"])\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Executing manually:\")\r\n    main_1()\r\n    print(\"Executing with CliRunner:\")\r\n    main_2()\r\n```\r\n\r\n### Actual Behavior\r\n\r\nTell us what happens instead.\r\n\r\nThe Exception is handled when manually executing, but not when ran with `CliRunner`.\r\n```\r\nExecuting manually:\r\nException was catched by application\r\nExecuting with CliRunner:\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.8\r\n* Click version: 7.1.2\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1545", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1545/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1545/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1545/events", "html_url": "https://github.com/pallets/click/issues/1545", "id": 610244297, "node_id": "MDU6SXNzdWU2MTAyNDQyOTc=", "number": 1545, "title": "Search page in hosted docs is not working", "user": {"login": "atugushev", "id": 7377671, "node_id": "MDQ6VXNlcjczNzc2NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/7377671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atugushev", "html_url": "https://github.com/atugushev", "followers_url": "https://api.github.com/users/atugushev/followers", "following_url": "https://api.github.com/users/atugushev/following{/other_user}", "gists_url": "https://api.github.com/users/atugushev/gists{/gist_id}", "starred_url": "https://api.github.com/users/atugushev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atugushev/subscriptions", "organizations_url": "https://api.github.com/users/atugushev/orgs", "repos_url": "https://api.github.com/users/atugushev/repos", "events_url": "https://api.github.com/users/atugushev/events{/privacy}", "received_events_url": "https://api.github.com/users/atugushev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-30T17:07:08Z", "updated_at": "2020-04-30T17:10:55Z", "closed_at": "2020-04-30T17:10:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Try to click on something in \"Search Results\".\r\nhttps://click.palletsprojects.com/en/7.x/search/?q=isolated_filesystem", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1544", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1544/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1544/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1544/events", "html_url": "https://github.com/pallets/click/issues/1544", "id": 608942679, "node_id": "MDU6SXNzdWU2MDg5NDI2Nzk=", "number": 1544, "title": "documentation broken redirects", "user": {"login": "ssbarnea", "id": 102495, "node_id": "MDQ6VXNlcjEwMjQ5NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/102495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssbarnea", "html_url": "https://github.com/ssbarnea", "followers_url": "https://api.github.com/users/ssbarnea/followers", "following_url": "https://api.github.com/users/ssbarnea/following{/other_user}", "gists_url": "https://api.github.com/users/ssbarnea/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssbarnea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssbarnea/subscriptions", "organizations_url": "https://api.github.com/users/ssbarnea/orgs", "repos_url": "https://api.github.com/users/ssbarnea/repos", "events_url": "https://api.github.com/users/ssbarnea/events{/privacy}", "received_events_url": "https://api.github.com/users/ssbarnea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-29T10:24:06Z", "updated_at": "2020-04-29T12:17:53Z", "closed_at": "2020-04-29T12:17:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Try to load https://click.palletsprojects.com/en/7.x/api.html?highlight=group#click.group which is the first suggestion when searching for \"group\" on https://click.palletsprojects.com/en/7.x/search/?q=group\r\n\r\nWhat you will endup with is an endless redirect:\r\n![](https://sbarnea.com/ss/Screen-Shot-2020-04-29-11-23-41.92.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1542", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1542/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1542/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1542/events", "html_url": "https://github.com/pallets/click/issues/1542", "id": 607469953, "node_id": "MDU6SXNzdWU2MDc0Njk5NTM=", "number": 1542, "title": "Feature request: localization support", "user": {"login": "joernheissler", "id": 865592, "node_id": "MDQ6VXNlcjg2NTU5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/865592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joernheissler", "html_url": "https://github.com/joernheissler", "followers_url": "https://api.github.com/users/joernheissler/followers", "following_url": "https://api.github.com/users/joernheissler/following{/other_user}", "gists_url": "https://api.github.com/users/joernheissler/gists{/gist_id}", "starred_url": "https://api.github.com/users/joernheissler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joernheissler/subscriptions", "organizations_url": "https://api.github.com/users/joernheissler/orgs", "repos_url": "https://api.github.com/users/joernheissler/repos", "events_url": "https://api.github.com/users/joernheissler/events{/privacy}", "received_events_url": "https://api.github.com/users/joernheissler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-27T11:29:22Z", "updated_at": "2020-04-27T13:46:53Z", "closed_at": "2020-04-27T13:46:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\n\r\nAre there any plans to add localization support?\r\n\r\nI.e. all help/usage texts that a click application displays to the user should be in the user's preferred language.\r\n\r\nAs click heavily relies on docstrings, this won't work:\r\n\r\n```python3\r\n@click.command\r\ndef foo():\r\n    _(\"\"\"localized help text\"\"\")\r\n    pass\r\n```\r\n\r\nCheers", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1541", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1541/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1541/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1541/events", "html_url": "https://github.com/pallets/click/issues/1541", "id": 607317223, "node_id": "MDU6SXNzdWU2MDczMTcyMjM=", "number": 1541, "title": "api.html page is missing from the online documentation", "user": {"login": "asweigart", "id": 52220, "node_id": "MDQ6VXNlcjUyMjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/52220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asweigart", "html_url": "https://github.com/asweigart", "followers_url": "https://api.github.com/users/asweigart/followers", "following_url": "https://api.github.com/users/asweigart/following{/other_user}", "gists_url": "https://api.github.com/users/asweigart/gists{/gist_id}", "starred_url": "https://api.github.com/users/asweigart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asweigart/subscriptions", "organizations_url": "https://api.github.com/users/asweigart/orgs", "repos_url": "https://api.github.com/users/asweigart/repos", "events_url": "https://api.github.com/users/asweigart/events{/privacy}", "received_events_url": "https://api.github.com/users/asweigart/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-27T07:45:32Z", "updated_at": "2020-04-27T13:48:36Z", "closed_at": "2020-04-27T13:48:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "The api.html page for the online documentation at https://click.palletsprojects.com/en/7.x/api.html is missing. I discovered this by searching for the echo() function in the sidebar's search bar, and followed a link which ended with a 404.\r\n\r\nI'm not sure if other pages are also missing as well, but I haven't found any.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1539", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1539/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1539/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1539/events", "html_url": "https://github.com/pallets/click/issues/1539", "id": 606282753, "node_id": "MDU6SXNzdWU2MDYyODI3NTM=", "number": 1539, "title": "TypeError: fileno() takes 0 positional arguments but 1 was given", "user": {"login": "Chr1st-oo", "id": 44025870, "node_id": "MDQ6VXNlcjQ0MDI1ODcw", "avatar_url": "https://avatars0.githubusercontent.com/u/44025870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Chr1st-oo", "html_url": "https://github.com/Chr1st-oo", "followers_url": "https://api.github.com/users/Chr1st-oo/followers", "following_url": "https://api.github.com/users/Chr1st-oo/following{/other_user}", "gists_url": "https://api.github.com/users/Chr1st-oo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Chr1st-oo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Chr1st-oo/subscriptions", "organizations_url": "https://api.github.com/users/Chr1st-oo/orgs", "repos_url": "https://api.github.com/users/Chr1st-oo/repos", "events_url": "https://api.github.com/users/Chr1st-oo/events{/privacy}", "received_events_url": "https://api.github.com/users/Chr1st-oo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-24T12:38:52Z", "updated_at": "2020-04-25T10:29:01Z", "closed_at": "2020-04-25T10:29:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nMy CLI should work correctly when installed outside its development venv. These are some of the commands that produces the error.\r\n\r\n```bash\r\nmycli\r\n```\r\n\r\n```bash\r\nmycli commandthatusesecho\r\n```\r\n\r\n```bash\r\nmycli --help\r\n```\r\n\r\n### Actual Behavior\r\n\r\nInstead it produces this kind of error when the CLI is being called in the terminal. It works well on commands that doesn't use ```click.echo()```.\r\n\r\n#### My Project Structure\r\n\r\n```\r\nmy_package\\\r\n\t__init__.py\r\n\tcli.py\r\n\tmy_module.py\r\n\tmy_other_module.py\r\nsetup.py\r\n```\r\n\r\n### cli.py\r\n\r\n```python\r\nimport click\r\nfrom click import echo, types\r\n\r\n@click.group()\r\ndef cli():\r\n    \"\"\"My CLI\"\"\"\r\n    pass\r\n\r\n@cli.command()\r\ndef commandthatusesecho():\r\n    echo(\"Bad\")\r\n    \r\n@cli.command()\r\ndef workingcommand():\r\n    print(\"Good\")\r\n```\r\n\r\n#### setup.py\r\n\r\n```python\r\nimport setuptools\r\n\r\nsetuptools.setup(\r\n\tname=\"my_package\",\r\n    version=\"version\",\r\n    packages=setuptools.find_packages(),\r\n    include_package_data=True,\r\n    install_requires=[\r\n        \"click\",\r\n        \"other_dependency\"\r\n    ],\r\n    entry_points=\"\"\"\r\n    \t[console_scripts]\r\n    \tmycli=my_package.cli:cli\r\n    \"\"\"\r\n)\r\n```\r\n\r\n\r\n\r\n#### The Error\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\desktop\\AppData\\Local\\Programs\\Python\\Python38\\Scripts\\pydeezer-script.py\", line 11, in <module>\r\n    load_entry_point('py-deezer', 'console_scripts', 'pydeezer')()\r\n  File \"c:\\users\\desktop\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\click\\core.py\", line 829, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"c:\\users\\desktop\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\click\\core.py\", line 781, in main\r\n    with self.make_context(prog_name, args, **extra) as ctx:\r\n  File \"c:\\users\\desktop\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\click\\core.py\", line 700, in make_cont\r\next\r\n    self.parse_args(ctx, args)\r\n  File \"c:\\users\\desktop\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\click\\core.py\", line 1209, in parse_ar\r\ngs\r\n    echo(ctx.get_help(), color=ctx.color)\r\n  File \"c:\\users\\desktop\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\click\\utils.py\", line 230, in echo\r\n    file = _default_text_stdout()\r\n  File \"c:\\users\\desktop\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\click\\_compat.py\", line 764, in func\r\n    rv = wrapper_func()\r\n  File \"c:\\users\\desktop\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\click\\_compat.py\", line 459, in get_te\r\nxt_stdout\r\n    rv = _get_windows_console_stream(sys.stdout, encoding, errors)\r\n  File \"c:\\users\\desktop\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\click\\_winconsole.py\", line 356, in _g\r\net_windows_console_stream\r\n    and _is_console(f)\r\n  File \"c:\\users\\desktop\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\click\\_winconsole.py\", line 343, in _i\r\ns_console\r\n    fileno = f.fileno()\r\nTypeError: fileno() takes 0 positional arguments but 1 was given\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: Python 3.8.2\r\n* Click version: 7.1.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1538", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1538/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1538/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1538/events", "html_url": "https://github.com/pallets/click/issues/1538", "id": 606019156, "node_id": "MDU6SXNzdWU2MDYwMTkxNTY=", "number": 1538, "title": "Improvement for show_default showing in case of a flag the name instead of True/False", "user": {"login": "Nachtfeuer", "id": 11331611, "node_id": "MDQ6VXNlcjExMzMxNjEx", "avatar_url": "https://avatars0.githubusercontent.com/u/11331611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nachtfeuer", "html_url": "https://github.com/Nachtfeuer", "followers_url": "https://api.github.com/users/Nachtfeuer/followers", "following_url": "https://api.github.com/users/Nachtfeuer/following{/other_user}", "gists_url": "https://api.github.com/users/Nachtfeuer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nachtfeuer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nachtfeuer/subscriptions", "organizations_url": "https://api.github.com/users/Nachtfeuer/orgs", "repos_url": "https://api.github.com/users/Nachtfeuer/repos", "events_url": "https://api.github.com/users/Nachtfeuer/events{/privacy}", "received_events_url": "https://api.github.com/users/Nachtfeuer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2202111823, "node_id": "MDU6TGFiZWwyMjAyMTExODIz", "url": "https://api.github.com/repos/pallets/click/labels/f:help", "name": "f:help", "color": "e0647b", "default": false, "description": "feature: help text"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/click/milestones/5", "html_url": "https://github.com/pallets/click/milestone/5", "labels_url": "https://api.github.com/repos/pallets/click/milestones/5/labels", "id": 3655024, "node_id": "MDk6TWlsZXN0b25lMzY1NTAyNA==", "number": 5, "title": "8.0.0", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 8, "closed_issues": 58, "state": "open", "created_at": "2018-09-14T14:59:44Z", "updated_at": "2020-08-17T04:43:11Z", "due_on": null, "closed_at": null}, "comments": 0, "created_at": "2020-04-24T03:50:36Z", "updated_at": "2020-08-07T14:54:02Z", "closed_at": "2020-08-07T14:54:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "First to say: It's not a bug ... it's (in my opinion) a reasonable improvement.\r\n\r\n### Expected Behavior\r\n\r\nThat's how the boolean flag is configured:\r\n\r\n```python\r\n@click.option('--cache/--no-cache', default=False, show_default=True,\r\n              help=\"Enable/Diable the cache.\")\r\n```\r\nUsing the --help you see following (just the line of interest):\r\n\r\n```\r\n--cache / --no-cache        Enable/Diable the cache.  [default: False]\r\n```\r\n\r\nbut preferable woud be:\r\n\r\n```\r\n--cache / --no-cache        Enable/Diable the cache.  [default: no-cache]\r\n```\r\n\r\nIt's clear to me that this works for --cache/--no-cache like flags only.\r\n\r\n### Actual Behavior\r\n\r\nThe output is as documented by the API the default **value** (*not the name*) which is for a boolean True or False.\r\n\r\n### Environment\r\n\r\n* Python version: 3.8.1\r\n* Click version: 7.0\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1536", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1536/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1536/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1536/events", "html_url": "https://github.com/pallets/click/issues/1536", "id": 604113845, "node_id": "MDU6SXNzdWU2MDQxMTM4NDU=", "number": 1536, "title": "[console_scripts] is not recognized using windows store version of python", "user": {"login": "grantka", "id": 62441195, "node_id": "MDQ6VXNlcjYyNDQxMTk1", "avatar_url": "https://avatars1.githubusercontent.com/u/62441195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grantka", "html_url": "https://github.com/grantka", "followers_url": "https://api.github.com/users/grantka/followers", "following_url": "https://api.github.com/users/grantka/following{/other_user}", "gists_url": "https://api.github.com/users/grantka/gists{/gist_id}", "starred_url": "https://api.github.com/users/grantka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grantka/subscriptions", "organizations_url": "https://api.github.com/users/grantka/orgs", "repos_url": "https://api.github.com/users/grantka/repos", "events_url": "https://api.github.com/users/grantka/events{/privacy}", "received_events_url": "https://api.github.com/users/grantka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-21T16:30:13Z", "updated_at": "2020-04-21T16:37:33Z", "closed_at": "2020-04-21T16:37:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\nI am using python as installed from the [windows store](https://www.microsoft.com/en-us/p/python-38/9mssztt1n39l)\r\nMy project is set up as recommended in [help docs](https://click.palletsprojects.com/en/7.x/setuptools/#setuptools-integration)\r\n\r\n\r\n```\r\nsetup.py\r\nmypackage/\r\n    __init__.py\r\n    scripts/\r\n        __init__.py\r\n        myscript.py\r\n```\r\n\r\n```python\r\nfrom setuptools import setup\r\n\r\nsetup(\r\n    name='myscript',\r\n    version='0.1',\r\n    py_modules=['myscript'],\r\n    install_requires=[\r\n        'Click',\r\n    ],\r\n    entry_points='''\r\n        [console_scripts]\r\n        myscript=mypackage.scripts.myscript:cli\r\n    ''',\r\n)\r\n```\r\n\r\n### Actual Behavior\r\nThe install looks like it goes through successfully and I can see my package in `pip list` but trying to run `myscript` results in `myscript is not recognized as an internal or external command,\r\noperable program or batch file` \r\n\r\nWhen I install it with python downloaded via chocolatey or from the python website it works as expected.\r\n\r\n### Environment\r\n\r\n* Python version: 3.8.2\r\n* Click version: 7.1.1\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1533", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1533/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1533/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1533/events", "html_url": "https://github.com/pallets/click/issues/1533", "id": 603131429, "node_id": "MDU6SXNzdWU2MDMxMzE0Mjk=", "number": 1533, "title": "[Testing] Passing env through invoke() does not work", "user": {"login": "LucasVanHaaren", "id": 29121316, "node_id": "MDQ6VXNlcjI5MTIxMzE2", "avatar_url": "https://avatars0.githubusercontent.com/u/29121316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LucasVanHaaren", "html_url": "https://github.com/LucasVanHaaren", "followers_url": "https://api.github.com/users/LucasVanHaaren/followers", "following_url": "https://api.github.com/users/LucasVanHaaren/following{/other_user}", "gists_url": "https://api.github.com/users/LucasVanHaaren/gists{/gist_id}", "starred_url": "https://api.github.com/users/LucasVanHaaren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LucasVanHaaren/subscriptions", "organizations_url": "https://api.github.com/users/LucasVanHaaren/orgs", "repos_url": "https://api.github.com/users/LucasVanHaaren/repos", "events_url": "https://api.github.com/users/LucasVanHaaren/events{/privacy}", "received_events_url": "https://api.github.com/users/LucasVanHaaren/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-04-20T10:35:06Z", "updated_at": "2020-07-02T22:44:24Z", "closed_at": "2020-06-30T18:39:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Explanation\r\n\r\nI'm building a multi-commands cli with persistent configuration stored in `~/.config/myapp`\r\nEach time cli runs, it parses this file and passes it to context to be available to sub-commands.\r\nThe init command builds and writes configuration on disk.\r\nFor testing I want to use [isolated_filesystem()](https://click.palletsprojects.com/en/7.x/api/#click.testing.CliRunner.isolated_filesystem) and write config on it, using [invoke()](https://click.palletsprojects.com/en/7.x/api/#click.testing.CliRunner.invoke) with env var.\r\n\r\n_src/config.py_\r\n```python\r\nif 'TMP_DIR' in environ:\r\n    CONFIG_DIRECTORY = Path(environ['TMP_DIR'])\r\nelse:\r\n    CONFIG_DIRECTORY = Path.home().joinpath(\".config/myapp\")\r\n\r\nCONFIG_FILE = CONFIG_DIRECTORY.joinpath(\"config.json\")\r\n```\r\n\r\n_test/init_test.py_\r\n```python\r\ndef test_init(runner):\r\n    with runner.isolated_filesystem() as fs:\r\n        # Adding config location to env\r\n        env = environ.copy()\r\n        env['TMP_DIR'] = fs\r\n        # Running init cmd with env\r\n        res = runner.invoke(cli, ['--verbose', 'init', '.'], env=env)\r\n        assert res.exit_code == 0\r\n        assert fs in res.output\r\n```\r\n\r\n### Expected Behavior\r\n\r\nInit command should exit successfully and print to stdout the directory where config file was created like this: \r\n\r\n`working directory initialized in /tmp/tmplmw_fea6`\r\n\r\n### Actual Behavior\r\n\r\n`TMP_DIR` env is not passed to init command, so config is loaded from `~/.config/myapp` even in testing.\r\n\r\n\r\n### Environment\r\nI use virtualenv with: \r\n* Python version: 3.6.9\r\n* Click version: 7.1.1\r\n* Pytest version: 5.4.1\r\n\r\n\r\nThank you in advance :smile:", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1528", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1528/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1528/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1528/events", "html_url": "https://github.com/pallets/click/issues/1528", "id": 602250026, "node_id": "MDU6SXNzdWU2MDIyNTAwMjY=", "number": 1528, "title": "Colored sys.error", "user": {"login": "staticdev", "id": 1446633, "node_id": "MDQ6VXNlcjE0NDY2MzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1446633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/staticdev", "html_url": "https://github.com/staticdev", "followers_url": "https://api.github.com/users/staticdev/followers", "following_url": "https://api.github.com/users/staticdev/following{/other_user}", "gists_url": "https://api.github.com/users/staticdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/staticdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/staticdev/subscriptions", "organizations_url": "https://api.github.com/users/staticdev/orgs", "repos_url": "https://api.github.com/users/staticdev/repos", "events_url": "https://api.github.com/users/staticdev/events{/privacy}", "received_events_url": "https://api.github.com/users/staticdev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-17T21:43:47Z", "updated_at": "2020-04-17T23:41:25Z", "closed_at": "2020-04-17T22:18:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "**This issue tracker is a tool to address bugs in Click itself.\r\nPlease use the #pocoo IRC channel on freenode, the Discord server or\r\nStack Overflow for general questions about using Flask or issues\r\nnot related to Click.**\r\n\r\nIf you'd like to report a bug in Click, fill out the template below. Provide\r\nany extra information that may be useful / related to your problem.\r\nIdeally, create an [MCVE](https://stackoverflow.com/help/mcve), which helps us\r\nunderstand the problem and helps check that it is not caused by something in\r\nyour code.\r\n\r\n---\r\n\r\n### Expected Behavior\r\n\r\nI want a way to configure the color of messages for sys.errors inside click to be red.\r\n\r\nSuppose two simple modules:\r\n\r\n```python\r\n# console.py\r\nimport click\r\n@click.command()\r\ndef main() -> None:\r\n    result = calculations.sum(1, \"a\")\r\n    click.secho(\"The result is{}\".format(result), fg=\"blue\")\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\n```python\r\n# calculations.py\r\nimport sys\r\ndef sum(x: int, y: int) -> int:\r\n    try:\r\n        return x + y\r\n    except:\r\n        sys.exit(\"Error!\")\r\n```\r\n\r\nIs there a way to print error in red?\r\n\r\n### Actual Behavior\r\n\r\nNon-colored system errors (no traceback).\r\n\r\n### Environment\r\n\r\n* Python version: 3.8.2\r\n* Click version: 7.1.1\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1527", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1527/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1527/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1527/events", "html_url": "https://github.com/pallets/click/issues/1527", "id": 601716870, "node_id": "MDU6SXNzdWU2MDE3MTY4NzA=", "number": 1527, "title": "Using click to have defaults based on other flags?", "user": {"login": "dvirginz", "id": 31047807, "node_id": "MDQ6VXNlcjMxMDQ3ODA3", "avatar_url": "https://avatars2.githubusercontent.com/u/31047807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvirginz", "html_url": "https://github.com/dvirginz", "followers_url": "https://api.github.com/users/dvirginz/followers", "following_url": "https://api.github.com/users/dvirginz/following{/other_user}", "gists_url": "https://api.github.com/users/dvirginz/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvirginz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvirginz/subscriptions", "organizations_url": "https://api.github.com/users/dvirginz/orgs", "repos_url": "https://api.github.com/users/dvirginz/repos", "events_url": "https://api.github.com/users/dvirginz/events{/privacy}", "received_events_url": "https://api.github.com/users/dvirginz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-17T05:41:56Z", "updated_at": "2020-04-17T14:07:36Z", "closed_at": "2020-04-17T14:07:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Suppose you have 3 datasets, each with a different set of optimal parameters(e.g batch_size,lr).<br>\r\nI'm looking for a way to somehow:<br>\r\n\r\n```\r\nparser.add_argument('dataset',type=str,default='D1',\r\nchoices=['D1', 'D2'])\r\nparser.add_argument('batch_size',type=int,\r\ndefault='128 if dataset=D1 else '64')\r\n```\r\n\r\nI found workarounds like setting the default only to D1 and changing it after the parsing if D2 was chosen, but then I don't get the true default value in the -h output.\r\n\r\nHere is an attempt I did with click, which didn't succeed \r\n```\r\nimport click\r\n\r\nDATASET = None\r\ndef parse_dataset(ctx, param, value):\r\n    DATASET = value\r\n\r\n@click.command()\r\n@click.option('--task',  default='graph',callback=parse_dataset,  \r\n              expose_value=True, is_eager=True)\r\n@click.option('--batchsize',  default=128 if DATASET == 'graph' else 64,\r\n              help='batch_size')\r\ndef main(batch_size):\r\n  print(batch_size)\r\n\r\n\r\nif __name__ == '__main__':\r\n  main()\r\n```\r\n\r\nDoing so, I received the following error:\r\n```\r\n(general) ~\\aaa\\PycharmProjects\\laplace_pool_final>python argparse.py\r\n\r\nTraceback (most recent call last):\r\n  File \"argparse.py\", line 17, in <module>\r\n    main()\r\n  File \"~\\aaa\\Anaconda3\\envs\\general\\lib\\site-packages\\click\\core.py\", line 829, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"~\\aaa\\Anaconda3\\envs\\general\\lib\\site-packages\\click\\core.py\", line 782, in main\r\n    rv = self.invoke(ctx)\r\n  File \"~\\aaa\\Anaconda3\\envs\\general\\lib\\site-packages\\click\\core.py\", line 1066, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n  File \"~\\aaa\\Anaconda3\\envs\\general\\lib\\site-packages\\click\\core.py\", line 610, in invoke\r\n    return callback(*args, **kwargs)\r\nTypeError: main() got an unexpected keyword argument 'task'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1525", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1525/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1525/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1525/events", "html_url": "https://github.com/pallets/click/issues/1525", "id": 599756807, "node_id": "MDU6SXNzdWU1OTk3NTY4MDc=", "number": 1525, "title": "Show range values for IntRange option --help", "user": {"login": "grantka", "id": 62441195, "node_id": "MDQ6VXNlcjYyNDQxMTk1", "avatar_url": "https://avatars1.githubusercontent.com/u/62441195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grantka", "html_url": "https://github.com/grantka", "followers_url": "https://api.github.com/users/grantka/followers", "following_url": "https://api.github.com/users/grantka/following{/other_user}", "gists_url": "https://api.github.com/users/grantka/gists{/gist_id}", "starred_url": "https://api.github.com/users/grantka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grantka/subscriptions", "organizations_url": "https://api.github.com/users/grantka/orgs", "repos_url": "https://api.github.com/users/grantka/repos", "events_url": "https://api.github.com/users/grantka/events{/privacy}", "received_events_url": "https://api.github.com/users/grantka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/click/milestones/5", "html_url": "https://github.com/pallets/click/milestone/5", "labels_url": "https://api.github.com/repos/pallets/click/milestones/5/labels", "id": 3655024, "node_id": "MDk6TWlsZXN0b25lMzY1NTAyNA==", "number": 5, "title": "8.0.0", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 8, "closed_issues": 58, "state": "open", "created_at": "2018-09-14T14:59:44Z", "updated_at": "2020-08-17T04:43:11Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2020-04-14T17:59:49Z", "updated_at": "2020-07-01T17:17:35Z", "closed_at": "2020-07-01T17:17:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nSimilar to the `show_defaults=True` parameter, options that have type IntRange should print the expected range values in the help text\r\n\r\n```python\r\n@click.option('-c', '--count', required=True, type=click.IntRange(1, 100, show_range=True))\r\ndef set_count(count)\r\n   pass\r\n```\r\n```\r\n>>> mycli set-count --help\r\nUsage: mycli set-count [OPTIONS]\r\n\r\n  Set the target count\r\n\r\nOptions:\r\n  -c, --count INTEGER RANGE  [1-100 inclusive, required]\r\n```\r\n\r\n### Actual Behavior\r\n\r\n```\r\n   -c, --count INTEGER RANGE  [required]\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.3\r\n* Click version: 7.0\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1523", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1523/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1523/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1523/events", "html_url": "https://github.com/pallets/click/issues/1523", "id": 598309816, "node_id": "MDU6SXNzdWU1OTgzMDk4MTY=", "number": 1523, "title": "objects.inv of click documentation moved?", "user": {"login": "ltalirz", "id": 1053245, "node_id": "MDQ6VXNlcjEwNTMyNDU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1053245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltalirz", "html_url": "https://github.com/ltalirz", "followers_url": "https://api.github.com/users/ltalirz/followers", "following_url": "https://api.github.com/users/ltalirz/following{/other_user}", "gists_url": "https://api.github.com/users/ltalirz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltalirz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltalirz/subscriptions", "organizations_url": "https://api.github.com/users/ltalirz/orgs", "repos_url": "https://api.github.com/users/ltalirz/repos", "events_url": "https://api.github.com/users/ltalirz/events{/privacy}", "received_events_url": "https://api.github.com/users/ltalirz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-11T17:08:49Z", "updated_at": "2020-04-27T15:05:13Z", "closed_at": "2020-04-27T15:05:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "[`aiida-core`](https://github.com/aiidateam/aiida-core) is an avid `click` user and we've been taking advantage of the [`intersphinx`](https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html) extension to link the documentation of `aiida-core` to the one of `click`, where appropriate.\r\n\r\nThis works using the `objects.inv` file generated by sphinx, which used to be hosted at\r\nhttps://click.palletsprojects.com/objects.inv\r\n\r\nHowever, this link no longer seems to work - has this file moved?\r\n\r\n![Screenshot 2020-04-11 at 19 08 02](https://user-images.githubusercontent.com/1053245/79050064-ce9a2a00-7c27-11ea-97f6-cd872bdf0689.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1522", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1522/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1522/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1522/events", "html_url": "https://github.com/pallets/click/issues/1522", "id": 597989630, "node_id": "MDU6SXNzdWU1OTc5ODk2MzA=", "number": 1522, "title": "can't set context_settings with chain=true", "user": {"login": "tbenst", "id": 863327, "node_id": "MDQ6VXNlcjg2MzMyNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/863327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbenst", "html_url": "https://github.com/tbenst", "followers_url": "https://api.github.com/users/tbenst/followers", "following_url": "https://api.github.com/users/tbenst/following{/other_user}", "gists_url": "https://api.github.com/users/tbenst/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbenst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbenst/subscriptions", "organizations_url": "https://api.github.com/users/tbenst/orgs", "repos_url": "https://api.github.com/users/tbenst/repos", "events_url": "https://api.github.com/users/tbenst/events{/privacy}", "received_events_url": "https://api.github.com/users/tbenst/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2139750530, "node_id": "MDU6TGFiZWwyMTM5NzUwNTMw", "url": "https://api.github.com/repos/pallets/click/labels/f:chain", "name": "f:chain", "color": "e0647b", "default": false, "description": "feature: chained commands"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-10T16:59:22Z", "updated_at": "2020-08-13T18:43:17Z", "closed_at": "2020-08-13T18:18:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "`@click.group(chain=True)` cannot be combined with `@click.command(context_settings=CONTEXT_SETTINGS)`.\r\n\r\n---\r\n\r\n### Expected Behavior\r\n\r\nI should see `Error: No such command \"test\".`\r\n\r\nSuppose we name the following script `debug`, and we invoke using `debug test`. This works:\r\n```python\r\n#!/usr/bin/env python\r\nimport click\r\n\r\nCONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])\r\n@click.group(chain=True)\r\n@click.pass_context\r\n@click.command(context_settings=CONTEXT_SETTINGS)\r\ndef main(ctx):\r\n    print(\"hi\")\r\n    \r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\nAlso works:\r\n```python\r\n#!/usr/bin/env python\r\nimport click\r\n\r\nCONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])\r\n@click.group()\r\n@click.command(context_settings=CONTEXT_SETTINGS)\r\ndef main():\r\n    print(\"hi\")\r\n    \r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n### Actual Behavior\r\nBoth, however, fail if we instead do `@click.group(chain=True)`. The error messages are confusing. In case (1): `TypeError: 'Context' object is not iterable`. For (2): `TypeError: Attempted to convert a callback into a command twice.`\r\n\r\n### Environment\r\n\r\n* Python version: 3.7\r\n* Click version: 7.0\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1520", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1520/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1520/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1520/events", "html_url": "https://github.com/pallets/click/issues/1520", "id": 591986701, "node_id": "MDU6SXNzdWU1OTE5ODY3MDE=", "number": 1520, "title": "Possible regression in 7.1: click.edit() no longer accepts Path objects for filename", "user": {"login": "samueldg", "id": 4542383, "node_id": "MDQ6VXNlcjQ1NDIzODM=", "avatar_url": "https://avatars0.githubusercontent.com/u/4542383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueldg", "html_url": "https://github.com/samueldg", "followers_url": "https://api.github.com/users/samueldg/followers", "following_url": "https://api.github.com/users/samueldg/following{/other_user}", "gists_url": "https://api.github.com/users/samueldg/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueldg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueldg/subscriptions", "organizations_url": "https://api.github.com/users/samueldg/orgs", "repos_url": "https://api.github.com/users/samueldg/repos", "events_url": "https://api.github.com/users/samueldg/events{/privacy}", "received_events_url": "https://api.github.com/users/samueldg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/click/milestones/8", "html_url": "https://github.com/pallets/click/milestone/8", "labels_url": "https://api.github.com/repos/pallets/click/milestones/8/labels", "id": 5304202, "node_id": "MDk6TWlsZXN0b25lNTMwNDIwMg==", "number": 8, "title": "7.1.2", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "closed", "created_at": "2020-04-13T18:02:29Z", "updated_at": "2020-04-27T21:50:22Z", "due_on": null, "closed_at": "2020-04-27T21:50:22Z"}, "comments": 2, "created_at": "2020-04-01T15:03:52Z", "updated_at": "2020-04-27T20:23:26Z", "closed_at": "2020-04-20T16:27:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nIn click 7.0, you could pass a [`pathlib.Path`](https://docs.python.org/3/library/pathlib.html#pathlib.Path) object as `click.edit()`'s `filename` parameter. In 7.1 this fails with a `TypeError`\r\n\r\nTo reproduce, create a `regression.py` file like so:\r\n\r\n```py\r\nimport click\r\nfrom pathlib import Path\r\nclick.edit(filename=Path('here.txt'))\r\n```\r\n\r\nWith 7.0:\r\n\r\n```\r\n$ pip install 'click==7.0'\r\n$ python regression.py\r\nPress ENTER or type command to continue\r\n```\r\n\r\n(editor is actually launched)\r\n\r\n### Actual Behavior\r\n\r\nWith 7.1:\r\n\r\n```\r\n$ pip install 'click==7.1'\r\n$ python regression.py\r\nTraceback (most recent call last):\r\n  File \"regression.py\", line 4, in <module>\r\n    click.edit(filename=Path('here.txt'))\r\n  File \"/Users/samuel/workspace/tmp/click-regression/.venv/lib/python3.7/site-packages/click/termui.py\", line 588, in edit\r\n    editor.edit_file(filename)\r\n  File \"/Users/samuel/workspace/tmp/click-regression/.venv/lib/python3.7/site-packages/click/_termui_impl.py\", line 466, in edit_file\r\n    \"{} {}\".format(shlex_quote(editor), shlex_quote(filename)),\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/shlex.py\", line 319, in quote\r\n    if _find_unsafe(s) is None:\r\nTypeError: expected string or bytes-like object\r\n```\r\n\r\nAlthough the ability to use `Path` wasn't documented explicitly, it seems desirable from a compatibility perspective.\r\n\r\n### Environment\r\n\r\n* Python version: Python 3.7.7\r\n* Click version: 7.1\r\n\r\n### Other\r\n\r\nBased on the traceback, looks like it could be related to https://github.com/pallets/click/pull/1470\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1516", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1516/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1516/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1516/events", "html_url": "https://github.com/pallets/click/issues/1516", "id": 590129343, "node_id": "MDU6SXNzdWU1OTAxMjkzNDM=", "number": 1516, "title": "@click didn't work with collections.defaultdict(list) properly", "user": {"login": "wd", "id": 58177, "node_id": "MDQ6VXNlcjU4MTc3", "avatar_url": "https://avatars0.githubusercontent.com/u/58177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wd", "html_url": "https://github.com/wd", "followers_url": "https://api.github.com/users/wd/followers", "following_url": "https://api.github.com/users/wd/following{/other_user}", "gists_url": "https://api.github.com/users/wd/gists{/gist_id}", "starred_url": "https://api.github.com/users/wd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wd/subscriptions", "organizations_url": "https://api.github.com/users/wd/orgs", "repos_url": "https://api.github.com/users/wd/repos", "events_url": "https://api.github.com/users/wd/events{/privacy}", "received_events_url": "https://api.github.com/users/wd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-30T09:20:08Z", "updated_at": "2020-03-30T09:49:31Z", "closed_at": "2020-03-30T09:49:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n```python\r\nfrom collections import defaultdict\r\nimport click\r\n\r\n@click.group()\r\n@click.pass_context\r\ndef cli(ctx):\r\n    print('cli init')\r\n\r\n\r\n@cli.group()\r\n@click.pass_context\r\ndef debian(ctx):\r\n    print('in debian')\r\n\r\n\r\n@debian.command()\r\ndef list():\r\n    print('list')\r\n    cc = defaultdict(list)\r\n    cc[0]\r\n\r\ncli()\r\n```\r\n\r\nExpected output:\r\n```\r\n$ python t.py debian list\r\ncli init\r\nin debian\r\nlist\r\n```\r\n\r\n\r\n### Actual Behavior\r\n\r\noutput\r\n```\r\n$ python t.py debian list\r\ncli init\r\nin debian\r\nlist\r\nUsage: t.py [OPTIONS]\r\nTry 't.py --help' for help.\r\n\r\nError: Got unexpected extra arguments (debian list)\r\n```\r\nI have tried to add `import pdb; pdb.set_trace()` to the codes and tried to see what's happen, the stack traces are here:\r\n```\r\ncli init\r\nin debian\r\nlist\r\n> /Users/wd/work/utils/t.py(21)list()\r\n-> cc[0]\r\n(Pdb) s\r\n--Call--\r\n> /usr/local/Caskroom/miniconda/base/envs/infra/lib/python3.7/site-packages/click/core.py(827)__call__()\r\n-> def __call__(self, *args, **kwargs):\r\n(Pdb) s\r\n> /usr/local/Caskroom/miniconda/base/envs/infra/lib/python3.7/site-packages/click/core.py(829)__call__()\r\n-> return self.main(*args, **kwargs)\r\n(Pdb) s\r\n--Call--\r\n> /usr/local/Caskroom/miniconda/base/envs/infra/lib/python3.7/site-packages/click/core.py(716)main()\r\n-> def main(\r\n(Pdb) s\r\n> /usr/local/Caskroom/miniconda/base/envs/infra/lib/python3.7/site-packages/click/core.py(759)main()\r\n-> if not PY2:\r\n(Pdb) s\r\n> /usr/local/Caskroom/miniconda/base/envs/infra/lib/python3.7/site-packages/click/core.py(760)main()\r\n-> _verify_python3_env()\r\n(Pdb) c\r\nUsage: t.py [OPTIONS]\r\nTry 't.py --help' for help.\r\n\r\nError: Got unexpected extra arguments (debian list)\r\n```\r\n\r\nWhy the `cc[0]` caused a call to `click/core.py(827)__call__()` ?\r\n\r\n\r\n### Environment\r\n\r\n* Python version: Python 3.7.6 (default, Jan  8 2020, 13:42:34)\r\n* Click version: click  7.1.1\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1514", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1514/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1514/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1514/events", "html_url": "https://github.com/pallets/click/issues/1514", "id": 589671205, "node_id": "MDU6SXNzdWU1ODk2NzEyMDU=", "number": 1514, "title": "echo_via_pager broken on Windows in 7.1", "user": {"login": "Chadiaw", "id": 19695253, "node_id": "MDQ6VXNlcjE5Njk1MjUz", "avatar_url": "https://avatars0.githubusercontent.com/u/19695253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Chadiaw", "html_url": "https://github.com/Chadiaw", "followers_url": "https://api.github.com/users/Chadiaw/followers", "following_url": "https://api.github.com/users/Chadiaw/following{/other_user}", "gists_url": "https://api.github.com/users/Chadiaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Chadiaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Chadiaw/subscriptions", "organizations_url": "https://api.github.com/users/Chadiaw/orgs", "repos_url": "https://api.github.com/users/Chadiaw/repos", "events_url": "https://api.github.com/users/Chadiaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Chadiaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/click/milestones/8", "html_url": "https://github.com/pallets/click/milestone/8", "labels_url": "https://api.github.com/repos/pallets/click/milestones/8/labels", "id": 5304202, "node_id": "MDk6TWlsZXN0b25lNTMwNDIwMg==", "number": 8, "title": "7.1.2", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "closed", "created_at": "2020-04-13T18:02:29Z", "updated_at": "2020-04-27T21:50:22Z", "due_on": null, "closed_at": "2020-04-27T21:50:22Z"}, "comments": 6, "created_at": "2020-03-28T22:22:21Z", "updated_at": "2020-04-27T21:06:39Z", "closed_at": "2020-04-27T19:52:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Calls to `click.echo_via_pager` are failing on Windows since upgrading to 7.1 \r\n\r\n### Expected behavior (7.0)\r\n```\r\nPython 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 22:22:05) [MSC v.1916 64 bit (AMD64)] on win32\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import click\r\n>>> click.__version__\r\n'7.0'\r\n>>> text = [f\"hello {i} \\n\" for i in range(1000)]\r\n>>> click.echo_via_pager(text)\r\nhello 0\r\nhello 1\r\nhello 2\r\nhello 3\r\nhello 4\r\n-- MORE --\r\n```\r\n\r\n### Actual behavior (7.1)\r\n```\r\nPython 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 23:11:46) [MSC v.1916 64 bit (AMD64)] on win32\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import click\r\n>>> click.__version__\r\n'7.1.1'\r\n>>> text = [f\"hello {i} \\n\" for i in range(1000)]\r\n>>> click.echo_via_pager(text)\r\nThe system cannot find the file specified.\r\n>>>\r\n```\r\n\r\n## Notes\r\n- Only seems broken on Windows: tested with Ubuntu WSL and click 7.1, works as expected\r\n\r\n\r\n### Environment\r\n\r\n* Python version: 3.7, 3.8 (same results)\r\n* Click version: 7.1.1\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1513", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1513/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1513/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1513/events", "html_url": "https://github.com/pallets/click/issues/1513", "id": 589278675, "node_id": "MDU6SXNzdWU1ODkyNzg2NzU=", "number": 1513, "title": "Search on click website does not function.", "user": {"login": "tokuchan", "id": 1869319, "node_id": "MDQ6VXNlcjE4NjkzMTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1869319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tokuchan", "html_url": "https://github.com/tokuchan", "followers_url": "https://api.github.com/users/tokuchan/followers", "following_url": "https://api.github.com/users/tokuchan/following{/other_user}", "gists_url": "https://api.github.com/users/tokuchan/gists{/gist_id}", "starred_url": "https://api.github.com/users/tokuchan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tokuchan/subscriptions", "organizations_url": "https://api.github.com/users/tokuchan/orgs", "repos_url": "https://api.github.com/users/tokuchan/repos", "events_url": "https://api.github.com/users/tokuchan/events{/privacy}", "received_events_url": "https://api.github.com/users/tokuchan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 94769817, "node_id": "MDU6TGFiZWw5NDc2OTgxNw==", "url": "https://api.github.com/repos/pallets/click/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 104560051, "node_id": "MDU6TGFiZWwxMDQ1NjAwNTE=", "url": "https://api.github.com/repos/pallets/click/labels/docs", "name": "docs", "color": "207de5", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-27T17:09:36Z", "updated_at": "2020-06-23T17:45:08Z", "closed_at": "2020-06-23T17:45:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I didn't know where to report this issue, so here it is!\r\n\r\n---\r\n\r\n### Expected Behavior\r\n\r\nWhen I search for, say \"option\" on the website, by entering \"option\" into the search box and clicking \"Go\", the search results page includes relevant results.\r\n\r\n### Actual Behavior\r\n\r\nThe search results page provides almost no functional links. Instead, the vast majority, if not all results are \"Page not found\".\r\n\r\nhttps://click.palletsprojects.com/en/7.x/search/?q=option\r\nhttps://click.palletsprojects.com/en/7.x/options.html?highlight=option\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1512", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1512/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1512/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1512/events", "html_url": "https://github.com/pallets/click/issues/1512", "id": 588507827, "node_id": "MDU6SXNzdWU1ODg1MDc4Mjc=", "number": 1512, "title": "Atomic writes throw an error when writing to docker mounted file", "user": {"login": "mikegedelman", "id": 1373713, "node_id": "MDQ6VXNlcjEzNzM3MTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1373713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikegedelman", "html_url": "https://github.com/mikegedelman", "followers_url": "https://api.github.com/users/mikegedelman/followers", "following_url": "https://api.github.com/users/mikegedelman/following{/other_user}", "gists_url": "https://api.github.com/users/mikegedelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikegedelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikegedelman/subscriptions", "organizations_url": "https://api.github.com/users/mikegedelman/orgs", "repos_url": "https://api.github.com/users/mikegedelman/repos", "events_url": "https://api.github.com/users/mikegedelman/events{/privacy}", "received_events_url": "https://api.github.com/users/mikegedelman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-26T15:27:05Z", "updated_at": "2020-06-08T17:24:57Z", "closed_at": "2020-06-08T05:32:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Expected Behavior\r\n\r\nClick should write to the file normally without throwing an error.\r\n\r\n```python\r\nimport click\r\n\r\n# out.txt is a file mounted directly in docker (ie, only it is mounted, not its parent directory)\r\n# like this: docker run -v `pwd`/out.txt:/work/out.txt click-err\r\ndef main():\r\n    f = click.open_file(\"out.txt\", \"w\", atomic=True)\r\n    f.write(\"test\")\r\n    f.close()\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nThis repository sets up the whole scenario in docker and reproduces the issue\r\nhttps://github.com/mikegedelman/click-atomic-write-error\r\n\r\nI also verified that writing to these files using stdlib functions works normally.\r\n\r\n### Actual Behavior\r\n\r\nClick thows this error when calling f.close()\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"/work/main.py\", line 11, in <module>\r\n    main()\r\n  File \"/work/main.py\", line 7, in main\r\n    f.close()\r\n  File \"/usr/local/lib/python3.7/site-packages/click/_compat.py\", line 619, in close\r\n    _replace(self._tmp_filename, self._real_filename)\r\nOSError: [Errno 16] Device or resource busy: '.__atomic-writee31adfb9' -> '/work/out.txt'\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.3\r\n* Click version: 7.1.1\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1511", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1511/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1511/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1511/events", "html_url": "https://github.com/pallets/click/issues/1511", "id": 588417589, "node_id": "MDU6SXNzdWU1ODg0MTc1ODk=", "number": 1511, "title": "Documentation for checking if '-' has been passed to File param", "user": {"login": "guludo", "id": 6026123, "node_id": "MDQ6VXNlcjYwMjYxMjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6026123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guludo", "html_url": "https://github.com/guludo", "followers_url": "https://api.github.com/users/guludo/followers", "following_url": "https://api.github.com/users/guludo/following{/other_user}", "gists_url": "https://api.github.com/users/guludo/gists{/gist_id}", "starred_url": "https://api.github.com/users/guludo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guludo/subscriptions", "organizations_url": "https://api.github.com/users/guludo/orgs", "repos_url": "https://api.github.com/users/guludo/repos", "events_url": "https://api.github.com/users/guludo/events{/privacy}", "received_events_url": "https://api.github.com/users/guludo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 104560051, "node_id": "MDU6TGFiZWwxMDQ1NjAwNTE=", "url": "https://api.github.com/repos/pallets/click/labels/docs", "name": "docs", "color": "207de5", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-26T13:23:08Z", "updated_at": "2020-08-14T22:35:20Z", "closed_at": "2020-08-14T17:46:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nThis is not a bug report, but rather a documentation question. Parameters of type `File` interpret `-` as stdin or stdout depending on the mode. My question is: how to check if `-` has been passed to my parameter?\r\n\r\nWith the current version installed in my environment, I checked that the following works:\r\n\r\n```python\r\n@click.command()\r\n@click.argument('f', type=click.File())\r\ndef command(f):\r\n    if f == sys.stdin:\r\n        click.echo('input is stdin')\r\n```\r\n\r\nHowever, as there are other ways of opening stdin (instead of using `sys.stdin` directly) and the documentation does not guarantee that the value of the parameter will be `sys.stdin` for the `\"-\"` input, I'm not sure if this code is safe regarding future releases of Click.\r\n\r\n### Environment\r\n\r\n* Python version: 3.8.2\r\n* Click version: 7.1.1\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1510", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1510/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1510/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1510/events", "html_url": "https://github.com/pallets/click/issues/1510", "id": 588012181, "node_id": "MDU6SXNzdWU1ODgwMTIxODE=", "number": 1510, "title": "Feature request: get cache dir", "user": {"login": "SeanDS", "id": 5225190, "node_id": "MDQ6VXNlcjUyMjUxOTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/5225190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SeanDS", "html_url": "https://github.com/SeanDS", "followers_url": "https://api.github.com/users/SeanDS/followers", "following_url": "https://api.github.com/users/SeanDS/following{/other_user}", "gists_url": "https://api.github.com/users/SeanDS/gists{/gist_id}", "starred_url": "https://api.github.com/users/SeanDS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SeanDS/subscriptions", "organizations_url": "https://api.github.com/users/SeanDS/orgs", "repos_url": "https://api.github.com/users/SeanDS/repos", "events_url": "https://api.github.com/users/SeanDS/events{/privacy}", "received_events_url": "https://api.github.com/users/SeanDS/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-25T21:49:49Z", "updated_at": "2020-06-10T15:31:09Z", "closed_at": "2020-06-10T15:31:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice if there were, alongside `get_app_dir` for config files, a `get_cache_dir` for temporary caches. The [`appdirs`](https://pypi.org/project/appdirs/) package provides this behaviour in a cross-platform way and it would be nice if Click could do so too.\r\n\r\nI could attempt a pull request if the developers think this is worth adding - please let me know.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1509", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1509/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1509/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1509/events", "html_url": "https://github.com/pallets/click/issues/1509", "id": 585888414, "node_id": "MDU6SXNzdWU1ODU4ODg0MTQ=", "number": 1509, "title": "Any way to ignore unknown commands?", "user": {"login": "kylepollina", "id": 13981456, "node_id": "MDQ6VXNlcjEzOTgxNDU2", "avatar_url": "https://avatars2.githubusercontent.com/u/13981456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylepollina", "html_url": "https://github.com/kylepollina", "followers_url": "https://api.github.com/users/kylepollina/followers", "following_url": "https://api.github.com/users/kylepollina/following{/other_user}", "gists_url": "https://api.github.com/users/kylepollina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylepollina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylepollina/subscriptions", "organizations_url": "https://api.github.com/users/kylepollina/orgs", "repos_url": "https://api.github.com/users/kylepollina/repos", "events_url": "https://api.github.com/users/kylepollina/events{/privacy}", "received_events_url": "https://api.github.com/users/kylepollina/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-23T02:45:16Z", "updated_at": "2020-03-25T20:56:50Z", "closed_at": "2020-03-25T20:56:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Click v7.0\r\n\r\nI'm trying to write a wrapper for git for my own purposes. I'm new to using click, so correct me if I'm doing this the wrong way. \r\n\r\nMy goal is to have special sub commands do specific functionalities, and if the argument is not a special sub command, default to running git with the given arguments.\r\n\r\nI have something like this\r\n\r\n```python\r\nimport click\r\n\r\n@click.group(\r\n    invoke_without_command=True,\r\n    context_settings = {'ignore_unknown_options': True, 'allow_extra_args': True}\r\n)\r\n@click.pass_context\r\ndef cli(ctx):\r\n    if not ctx.invoked_subcommand:\r\n        # run git with given arguments instead\r\n        ...\r\n\r\n@cli.command()\r\ndef special_command():\r\n    # do some special functionality\r\n```\r\n\r\nWhat I want is when I run the cli with arguments/commands that isn't the special command, to run git with those arguments. But the cli gives me a `Error: No such command ...` if I give it any command other than the special command. Is this possible? Or am I doing this the wrong way?\r\n\r\nI also want to add that I'm running this through setuptools and the entry point is `cli`\r\n\r\nExample: My git wrapper is called `cli`\r\n\r\n`cli special_command` will run the special command\r\n\r\n`cli status` will run `git status`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1507", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1507/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1507/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1507/events", "html_url": "https://github.com/pallets/click/issues/1507", "id": 585358562, "node_id": "MDU6SXNzdWU1ODUzNTg1NjI=", "number": 1507, "title": "Mark commands as deprecated", "user": {"login": "raman325", "id": 7243222, "node_id": "MDQ6VXNlcjcyNDMyMjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/7243222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raman325", "html_url": "https://github.com/raman325", "followers_url": "https://api.github.com/users/raman325/followers", "following_url": "https://api.github.com/users/raman325/following{/other_user}", "gists_url": "https://api.github.com/users/raman325/gists{/gist_id}", "starred_url": "https://api.github.com/users/raman325/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raman325/subscriptions", "organizations_url": "https://api.github.com/users/raman325/orgs", "repos_url": "https://api.github.com/users/raman325/repos", "events_url": "https://api.github.com/users/raman325/events{/privacy}", "received_events_url": "https://api.github.com/users/raman325/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-20T22:28:03Z", "updated_at": "2020-06-10T15:34:12Z", "closed_at": "2020-06-10T15:34:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is more of a proposal than a request, so feel free to close this as won't implement, but it would be great to have a `Command` subclass/decorator to handle deprecated commands. The thought is that I could decorate my deprecated command and include a Callable parameter that represents the command that is replacing it. The value of having a decorator like this is that Click could standardize deprecation logic in help messaging and in command calls to state the deprecation notice and to provide the alternate command.\r\n\r\nWhen searching for a solution to this problem, I came across this SO post which details how to subclass `Option` and `Command` for a similar use case: https://stackoverflow.com/questions/50366719/correct-way-to-deprecate-parameter-alias-in-click\r\n\r\nI am happy to look into this approach if it is the preferred way to address such a problem, but wanted to mention it here first. Thanks for the consideration!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1506", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1506/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1506/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1506/events", "html_url": "https://github.com/pallets/click/issues/1506", "id": 584063886, "node_id": "MDU6SXNzdWU1ODQwNjM4ODY=", "number": 1506, "title": "Shell completion for command groups", "user": {"login": "SamSchott", "id": 20974290, "node_id": "MDQ6VXNlcjIwOTc0Mjkw", "avatar_url": "https://avatars3.githubusercontent.com/u/20974290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SamSchott", "html_url": "https://github.com/SamSchott", "followers_url": "https://api.github.com/users/SamSchott/followers", "following_url": "https://api.github.com/users/SamSchott/following{/other_user}", "gists_url": "https://api.github.com/users/SamSchott/gists{/gist_id}", "starred_url": "https://api.github.com/users/SamSchott/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SamSchott/subscriptions", "organizations_url": "https://api.github.com/users/SamSchott/orgs", "repos_url": "https://api.github.com/users/SamSchott/repos", "events_url": "https://api.github.com/users/SamSchott/events{/privacy}", "received_events_url": "https://api.github.com/users/SamSchott/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-18T23:31:22Z", "updated_at": "2020-03-18T23:41:50Z", "closed_at": "2020-03-18T23:41:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nShell tab completion works perfectly well for regular commands but does not seem to work for sub-commands which are part of a group. This is the case at least for zsh on macOS. But maybe this is the intended behaviour?\r\n\r\n### Actual Behavior\r\n\r\nTab completion does not work for commands which are part of a group.\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.6\r\n* Click version: 7.1.1\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1505", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1505/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1505/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1505/events", "html_url": "https://github.com/pallets/click/issues/1505", "id": 581804240, "node_id": "MDU6SXNzdWU1ODE4MDQyNDA=", "number": 1505, "title": "Order of commands in help is unreliable in Python <3.6", "user": {"login": "andy-maier", "id": 8939758, "node_id": "MDQ6VXNlcjg5Mzk3NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/8939758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-maier", "html_url": "https://github.com/andy-maier", "followers_url": "https://api.github.com/users/andy-maier/followers", "following_url": "https://api.github.com/users/andy-maier/following{/other_user}", "gists_url": "https://api.github.com/users/andy-maier/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-maier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-maier/subscriptions", "organizations_url": "https://api.github.com/users/andy-maier/orgs", "repos_url": "https://api.github.com/users/andy-maier/repos", "events_url": "https://api.github.com/users/andy-maier/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-maier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-15T19:59:48Z", "updated_at": "2020-03-16T07:44:21Z", "closed_at": "2020-03-15T20:28:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nThe order in which commands are shown in the help should be reliable across Python versions.\r\n\r\n### Actual Behavior\r\n\r\nFor Python >= 3.6, the order shown in the help text is the order in which the commands are added to the group. That is how it should be.\r\n\r\nFor Python <3.6, the order shown in the help text is not the order in which the commands are added to the group, and appears to be unpredictable (but pretty much repeatable).\r\n\r\nThe unpredictability and the changes across Python versions make it hard for users of Click to define testcases for the produced help.\r\n\r\nAnalysis shows that the use of a standard dictionary is the reason for this behavior. The standard Python dicttionaty became order-preserving with Python 3.6. We could show that replacing the `dict` in the following code with `OrderedDict` (minimally for Python < 3.6) solves the issue:\r\n\r\nIn `click/core.py`:\r\n```\r\nclass Group(MultiCommand):\r\n    . . .\r\n\r\n    def __init__(self, name=None, commands=None, **attrs):\r\n        MultiCommand.__init__(self, name, **attrs)\r\n        #: the registered subcommands by their exported names.\r\n        self.commands = commands or {}     # <- Use of standard Python dict causes the issue\r\n        # self.commands = commands or collections.OrderedDict  # <- Addresses the issue\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 2.7, 3.4, and higher\r\n* Click version: 7.1.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1502", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1502/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1502/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1502/events", "html_url": "https://github.com/pallets/click/issues/1502", "id": 581317238, "node_id": "MDU6SXNzdWU1ODEzMTcyMzg=", "number": 1502, "title": "wrap_text() produces premature line break", "user": {"login": "andy-maier", "id": 8939758, "node_id": "MDQ6VXNlcjg5Mzk3NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/8939758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-maier", "html_url": "https://github.com/andy-maier", "followers_url": "https://api.github.com/users/andy-maier/followers", "following_url": "https://api.github.com/users/andy-maier/following{/other_user}", "gists_url": "https://api.github.com/users/andy-maier/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-maier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-maier/subscriptions", "organizations_url": "https://api.github.com/users/andy-maier/orgs", "repos_url": "https://api.github.com/users/andy-maier/repos", "events_url": "https://api.github.com/users/andy-maier/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-maier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-14T18:26:15Z", "updated_at": "2020-04-13T18:03:35Z", "closed_at": "2020-04-13T18:03:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "---\r\n\r\n### Expected Behavior\r\n\r\n`click.wrap_text(..., preserve_paragraphs=False)` should not produce the unmotivated premature line break shown below, but instead break as specified by the width.\r\n\r\n```\r\n$ python -c \"import click; print(repr(click.wrap_text('line A1\\nline A2\\n', width=12)))\"\r\n'line A1\\nline A2'\r\n```\r\n\r\n### Actual Behavior\r\n\r\n```\r\n$ python -c \"import click; print(repr(click.wrap_text('line A1\\nline A2\\n', width=12)))\"\r\n'line A1\\nline\\nA2'\r\n```\r\nThe second line got broken as if the character counting to determine the wrap position had ignored the line end after the first line. If the width gets varied, the second line does not get broken up to 11, and starting with 12 the extra break gets inserted.\r\n\r\n### Environment\r\n\r\n* Python version: 2.7 on MacOS, but happens also on Python 3\r\n* Click version: master as of today (7.1.1+)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1501", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1501/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1501/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1501/events", "html_url": "https://github.com/pallets/click/issues/1501", "id": 581139425, "node_id": "MDU6SXNzdWU1ODExMzk0MjU=", "number": 1501, "title": "Launch/OpenUrl API is broken on Windows with 7.1+", "user": {"login": "ivankravets", "id": 1760209, "node_id": "MDQ6VXNlcjE3NjAyMDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1760209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivankravets", "html_url": "https://github.com/ivankravets", "followers_url": "https://api.github.com/users/ivankravets/followers", "following_url": "https://api.github.com/users/ivankravets/following{/other_user}", "gists_url": "https://api.github.com/users/ivankravets/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivankravets/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivankravets/subscriptions", "organizations_url": "https://api.github.com/users/ivankravets/orgs", "repos_url": "https://api.github.com/users/ivankravets/repos", "events_url": "https://api.github.com/users/ivankravets/events{/privacy}", "received_events_url": "https://api.github.com/users/ivankravets/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 94769817, "node_id": "MDU6TGFiZWw5NDc2OTgxNw==", "url": "https://api.github.com/repos/pallets/click/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/click/milestones/8", "html_url": "https://github.com/pallets/click/milestone/8", "labels_url": "https://api.github.com/repos/pallets/click/milestones/8/labels", "id": 5304202, "node_id": "MDk6TWlsZXN0b25lNTMwNDIwMg==", "number": 8, "title": "7.1.2", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "closed", "created_at": "2020-04-13T18:02:29Z", "updated_at": "2020-04-27T21:50:22Z", "due_on": null, "closed_at": "2020-04-27T21:50:22Z"}, "comments": 2, "created_at": "2020-03-14T10:09:52Z", "updated_at": "2020-04-27T21:06:56Z", "closed_at": "2020-04-27T21:06:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\n`click.launch()` API is broken with 7.1 on Windows. We are going to have a quick release of @PlatformIO and lock Click to <7.1. Something is going wrong with Click last time.\r\n\r\n```\r\n>>> import click\r\n>>> click.__version___\r\n>>> 7.1.1\r\n>>> click.launch(\"https://github.com?click_7_1=is_broken\")\r\n>>> The system cannot find the file 'https://github.com?click_7_1=is_broken'\r\n>>> 1\r\n```\r\n\r\n### Actual Behavior\r\n\r\nEverything works on Click < 7.1. See changes:\r\n\r\n- https://github.com/pallets/click/blob/7.0/click/_termui_impl.py#L503\r\n- https://github.com/pallets/click/blob/master/src/click/_termui_impl.py#L560\r\n\r\n### Environment\r\n\r\n* Python version: No matter\r\n* Click version: 7.1+\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1500", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1500/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1500/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1500/events", "html_url": "https://github.com/pallets/click/issues/1500", "id": 581097386, "node_id": "MDU6SXNzdWU1ODEwOTczODY=", "number": 1500, "title": "Click showing \"invalid command name XXX\" but partially working anyway", "user": {"login": "Legorooj", "id": 50370070, "node_id": "MDQ6VXNlcjUwMzcwMDcw", "avatar_url": "https://avatars2.githubusercontent.com/u/50370070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Legorooj", "html_url": "https://github.com/Legorooj", "followers_url": "https://api.github.com/users/Legorooj/followers", "following_url": "https://api.github.com/users/Legorooj/following{/other_user}", "gists_url": "https://api.github.com/users/Legorooj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Legorooj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Legorooj/subscriptions", "organizations_url": "https://api.github.com/users/Legorooj/orgs", "repos_url": "https://api.github.com/users/Legorooj/repos", "events_url": "https://api.github.com/users/Legorooj/events{/privacy}", "received_events_url": "https://api.github.com/users/Legorooj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-03-14T08:03:05Z", "updated_at": "2020-03-15T06:55:14Z", "closed_at": "2020-03-15T06:55:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nMy project structure is something like:\r\n\r\n```\r\n- sloth.py  # CLI alias file for local testing - when installed with setup.py it'll use setuptools.console_scripts\r\n- sloth  # This is the library `sloth` I'm importing from.\r\n  - __main__.py  # This is the file `sloth.py` imports from; there are of course other files in the directory. \r\n```\r\n\r\nA full \"working\" copy can be found on the `add_cli` branch of the `sloth` repo, [here](https://github.com/fluffykoalas/sloth/tree/add_cli). Please note the `sloth` library is in dev and `pip install sloth-speedtest` hasn't actually been setup yet, despite what the README (and docs) say.\r\n\r\nWhat I expect to happen:\r\n```\r\n(venv) D:\\FluffyKoalas\\Sloth>sloth.py speedtest-file setup.py\r\nLoading python file D:\\FluffyKoalas\\Sloth\\sloth.py\r\nRunning file...\r\nD:\\FluffyKoalas\\Sloth\\sloth.py took 0.0039980411529541016 seconds to run\r\n```\r\nIf you run the `sloth.__main__` file (`python __main__.py`), this is actually the output - I just added the cmd prompt line.\r\n\r\n### Actual Behavior\r\n\r\n```\r\n(venv) D:\\FluffyKoalas\\Sloth>sloth.py speedtest-file setup.py\r\nLoading python file setup.py\r\nRunning file...\r\ninvalid command name 'speedtest-file'\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.1\r\n* Click version: 7.1.1\r\n* OS: Windows (CPython)\r\n\r\n\r\nNow this may not be a bug, but it very much looks like one.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1499", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1499/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1499/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1499/events", "html_url": "https://github.com/pallets/click/issues/1499", "id": 579486735, "node_id": "MDU6SXNzdWU1Nzk0ODY3MzU=", "number": 1499, "title": "Changes introduced to string quoting in responses", "user": {"login": "kriolyth", "id": 2059973, "node_id": "MDQ6VXNlcjIwNTk5NzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/2059973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kriolyth", "html_url": "https://github.com/kriolyth", "followers_url": "https://api.github.com/users/kriolyth/followers", "following_url": "https://api.github.com/users/kriolyth/following{/other_user}", "gists_url": "https://api.github.com/users/kriolyth/gists{/gist_id}", "starred_url": "https://api.github.com/users/kriolyth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kriolyth/subscriptions", "organizations_url": "https://api.github.com/users/kriolyth/orgs", "repos_url": "https://api.github.com/users/kriolyth/repos", "events_url": "https://api.github.com/users/kriolyth/events{/privacy}", "received_events_url": "https://api.github.com/users/kriolyth/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 104560051, "node_id": "MDU6TGFiZWwxMDQ1NjAwNTE=", "url": "https://api.github.com/repos/pallets/click/labels/docs", "name": "docs", "color": "207de5", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-03-11T19:13:18Z", "updated_at": "2020-06-11T16:56:59Z", "closed_at": "2020-06-11T16:47:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all, thank you for maintaining this wonderful project!\r\n\r\nWe've been running CI tests on our product that uses click, and tests for command-line [stumbled](https://gitlab.com/tessia-project/tessia/-/jobs/467901400#L478) upon a change in output representation [introduced](https://github.com/pallets/click/commit/718485be48263056e7036ea9a60ce11b47e2fc26#diff-fb2a32ceb27b1c3d30b386fbae56f34eR9) in \"manual cleanup\" commit.\r\n\r\nI do not see this as an issue in click, but it took some time to find the origin, and so I suggest to mention effects of this change in documentation or changelog.\r\n\r\nThank you!\r\n\r\n---\r\n\r\n### Expected Behavior\r\n\r\nPreviously a missing option string was displayed with double-quotes:\r\n\r\n```\r\nError: Missing option \"--os\".\r\n```\r\n\r\n### Actual Behavior\r\n\r\nNow a missing option string is displayed with single-quotes, as per repr() implementation:\r\n\r\n```\r\nError: Missing option '--os'.\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.8\r\n* Click version: 7.1.1\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1498", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1498/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1498/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1498/events", "html_url": "https://github.com/pallets/click/issues/1498", "id": 579172969, "node_id": "MDU6SXNzdWU1NzkxNzI5Njk=", "number": 1498, "title": "Support for NO_COLOR proposal", "user": {"login": "seebi", "id": 510452, "node_id": "MDQ6VXNlcjUxMDQ1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/510452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seebi", "html_url": "https://github.com/seebi", "followers_url": "https://api.github.com/users/seebi/followers", "following_url": "https://api.github.com/users/seebi/following{/other_user}", "gists_url": "https://api.github.com/users/seebi/gists{/gist_id}", "starred_url": "https://api.github.com/users/seebi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seebi/subscriptions", "organizations_url": "https://api.github.com/users/seebi/orgs", "repos_url": "https://api.github.com/users/seebi/repos", "events_url": "https://api.github.com/users/seebi/events{/privacy}", "received_events_url": "https://api.github.com/users/seebi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-11T10:50:42Z", "updated_at": "2020-04-13T18:14:01Z", "closed_at": "2020-04-13T18:11:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nAs described at https://no-color.org/, setting NO_COLOR to any value should disable color output at all.\r\n\r\n### Actual Behavior\r\n\r\nEvery application need its own solution for color disabling.\r\n\r\nI think this behavior should be added to Click itself because its a reasonable default.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1495", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1495/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1495/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1495/events", "html_url": "https://github.com/pallets/click/issues/1495", "id": 578083065, "node_id": "MDU6SXNzdWU1NzgwODMwNjU=", "number": 1495, "title": "ClickException message goes to stdout instead of stderr with version 7.1", "user": {"login": "greschd", "id": 5692808, "node_id": "MDQ6VXNlcjU2OTI4MDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5692808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/greschd", "html_url": "https://github.com/greschd", "followers_url": "https://api.github.com/users/greschd/followers", "following_url": "https://api.github.com/users/greschd/following{/other_user}", "gists_url": "https://api.github.com/users/greschd/gists{/gist_id}", "starred_url": "https://api.github.com/users/greschd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/greschd/subscriptions", "organizations_url": "https://api.github.com/users/greschd/orgs", "repos_url": "https://api.github.com/users/greschd/repos", "events_url": "https://api.github.com/users/greschd/events{/privacy}", "received_events_url": "https://api.github.com/users/greschd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 94769817, "node_id": "MDU6TGFiZWw5NDc2OTgxNw==", "url": "https://api.github.com/repos/pallets/click/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/click/milestones/7", "html_url": "https://github.com/pallets/click/milestone/7", "labels_url": "https://api.github.com/repos/pallets/click/milestones/7/labels", "id": 5183756, "node_id": "MDk6TWlsZXN0b25lNTE4Mzc1Ng==", "number": 7, "title": "7.1.1", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 2, "state": "closed", "created_at": "2020-03-09T18:06:25Z", "updated_at": "2020-03-09T18:51:27Z", "due_on": null, "closed_at": "2020-03-09T18:51:27Z"}, "comments": 5, "created_at": "2020-03-09T17:49:05Z", "updated_at": "2020-03-09T18:52:00Z", "closed_at": "2020-03-09T18:42:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks a lot for ``click`` - absolutely fantastic project. \r\n\r\nI've noticed the following change when upgrading to 7.1, and am not sure if it's intentional or not:\r\n\r\n### Expected Behavior\r\n\r\nWhen raising ``click.ClickException``, the corresponding ``Error: <message>`` goes to ``stderr`` using click version 7.0.\r\n\r\nMinimal reproducing code:\r\n\r\n```python\r\nimport click\r\n\r\n@click.command()\r\ndef run():\r\n    raise click.ClickException('exception message')\r\n\r\nif __name__ == '__main__':\r\n    run()\r\n```\r\n```bash\r\npython <filename>.py 1> stdout 2> stderr\r\n```\r\n\r\n### Actual Behavior\r\n\r\nWith version 7.1, the ``Error: exception message`` ends up in ``stdout`` instead of ``stderr``.\r\n\r\n### Environment\r\n\r\n* Python version: Python 3.7.5\r\n* Click version: 7.1\r\n* OS: Ubuntu 18.04 [through WSL1]\r\n* Shell: GNU bash, version 4.4.20\r\n\r\n### Additional comments\r\n\r\nAs mentioned above I'm not sure if this is an intended change, but I couldn't find any mention on the [Changelog](https://click.palletsprojects.com/en/7.x/changelog/#version-7-1), and [this part](https://click.palletsprojects.com/en/7.x/exceptions/#which-exceptions-exist) of the docs still referes to ``show`` being printed to ``stderr``.\r\n\r\nHappy to do some more digging if this happens only on my system.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1494", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1494/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1494/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1494/events", "html_url": "https://github.com/pallets/click/issues/1494", "id": 578053380, "node_id": "MDU6SXNzdWU1NzgwNTMzODA=", "number": 1494, "title": "Exception raised by ClickRunner with 7.1", "user": {"login": "hoefling", "id": 4455652, "node_id": "MDQ6VXNlcjQ0NTU2NTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4455652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hoefling", "html_url": "https://github.com/hoefling", "followers_url": "https://api.github.com/users/hoefling/followers", "following_url": "https://api.github.com/users/hoefling/following{/other_user}", "gists_url": "https://api.github.com/users/hoefling/gists{/gist_id}", "starred_url": "https://api.github.com/users/hoefling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hoefling/subscriptions", "organizations_url": "https://api.github.com/users/hoefling/orgs", "repos_url": "https://api.github.com/users/hoefling/repos", "events_url": "https://api.github.com/users/hoefling/events{/privacy}", "received_events_url": "https://api.github.com/users/hoefling/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-09T17:00:38Z", "updated_at": "2020-03-09T17:54:05Z", "closed_at": "2020-03-09T17:40:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "My CI just pulled the 7.1 and the tests that use `mix_stderr=True` started to fail. Example to reproduce, pulled from [Testing](https://click.palletsprojects.com/en/7.x/testing/):\r\n\r\n```python\r\n# hello.py\r\n\r\nimport click\r\n\r\n@click.command()\r\n@click.argument('name')\r\ndef hello(name):\r\n   click.echo('Hello %s!' % name)\r\n\r\n\r\nif __name__ == '__main__':\r\n    hello()\r\n```\r\nTest:\r\n\r\n```python\r\n# test_hello.py\r\n\r\nfrom click.testing import CliRunner\r\nfrom hello import hello\r\n\r\ndef test_hello():\r\n    runner = CliRunner()\r\n    result = runner.invoke(hello, [\"fizz\"], mix_stderr=True, catch_exceptions=False)\r\n```\r\n\r\n`pytest` output:\r\n\r\n```\r\n$ pytest\r\n=============================================================================================== test session starts ===============================================================================================\r\nplatform linux -- Python 3.6.10, pytest-5.3.5, py-1.8.1, pluggy-0.13.1\r\nrootdir: /tmp/spam\r\ncollected 1 item                                                                                                                                                                                                  \r\n\r\ntest_hello.py F                                                                                                                                                                                             [100%]\r\n\r\n==================================================================================================== FAILURES =====================================================================================================\r\n___________________________________________________________________________________________________ test_hello ____________________________________________________________________________________________________\r\n\r\n    def test_hello():\r\n        runner = CliRunner()\r\n>       result = runner.invoke(hello, [\"fizz\"], mix_stderr=True, catch_exceptions=False)\r\n\r\ntest_hello.py:6: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n../foo/lib64/python3.6/site-packages/click/testing.py:329: in invoke\r\n    cli.main(args=args or (), prog_name=prog_name, **extra)\r\n../foo/lib64/python3.6/site-packages/click/core.py:781: in main\r\n    with self.make_context(prog_name, args, **extra) as ctx:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <Command hello>, info_name = 'hello', args = ['fizz'], parent = None, extra = {'mix_stderr': True}\r\n\r\n    def make_context(self, info_name, args, parent=None, **extra):\r\n        \"\"\"This function when given an info name and arguments will kick\r\n        off the parsing and create a new :class:`Context`.  It does not\r\n        invoke the actual command callback though.\r\n    \r\n        :param info_name: the info name for this invokation.  Generally this\r\n                          is the most descriptive name for the script or\r\n                          command.  For the toplevel script it's usually\r\n                          the name of the script, for commands below it it's\r\n                          the name of the script.\r\n        :param args: the arguments to parse as list of strings.\r\n        :param parent: the parent context if available.\r\n        :param extra: extra keyword arguments forwarded to the context\r\n                      constructor.\r\n        \"\"\"\r\n        for key, value in iteritems(self.context_settings):\r\n            if key not in extra:\r\n                extra[key] = value\r\n>       ctx = Context(self, info_name=info_name, parent=parent, **extra)\r\nE       TypeError: __init__() got an unexpected keyword argument 'mix_stderr'\r\n\r\n../foo/lib64/python3.6/site-packages/click/core.py:698: TypeError\r\n================================================================================================ 1 failed in 0.07s ================================================================================================\r\n```\r\nThe example works with 7.0 though, so the temporary workaround is to blacklist the 7.1 in the dependencies list.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1491", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1491/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1491/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1491/events", "html_url": "https://github.com/pallets/click/issues/1491", "id": 577693440, "node_id": "MDU6SXNzdWU1Nzc2OTM0NDA=", "number": 1491, "title": "Support equivalent of nargs=?", "user": {"login": "frostming", "id": 16336606, "node_id": "MDQ6VXNlcjE2MzM2NjA2", "avatar_url": "https://avatars3.githubusercontent.com/u/16336606?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frostming", "html_url": "https://github.com/frostming", "followers_url": "https://api.github.com/users/frostming/followers", "following_url": "https://api.github.com/users/frostming/following{/other_user}", "gists_url": "https://api.github.com/users/frostming/gists{/gist_id}", "starred_url": "https://api.github.com/users/frostming/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frostming/subscriptions", "organizations_url": "https://api.github.com/users/frostming/orgs", "repos_url": "https://api.github.com/users/frostming/repos", "events_url": "https://api.github.com/users/frostming/events{/privacy}", "received_events_url": "https://api.github.com/users/frostming/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-09T06:48:43Z", "updated_at": "2020-03-09T19:59:16Z", "closed_at": "2020-03-09T19:59:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "**This issue tracker is a tool to address bugs in Click itself.\r\nPlease use the #pocoo IRC channel on freenode, the Discord server or\r\nStack Overflow for general questions about using Flask or issues\r\nnot related to Click.**\r\n\r\nIf you'd like to report a bug in Click, fill out the template below. Provide\r\nany extra information that may be useful / related to your problem.\r\nIdeally, create an [MCVE](https://stackoverflow.com/help/mcve), which helps us\r\nunderstand the problem and helps check that it is not caused by something in\r\nyour code.\r\n\r\n---\r\n\r\n### Expected Behavior\r\n\r\n`nargs='?'` argument of `click.Option` will consume zero or one value, if possible.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1488", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1488/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1488/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1488/events", "html_url": "https://github.com/pallets/click/issues/1488", "id": 577203792, "node_id": "MDU6SXNzdWU1NzcyMDM3OTI=", "number": 1488, "title": "Don't use pkg_resources for --version", "user": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 933952159, "node_id": "MDU6TGFiZWw5MzM5NTIxNTk=", "url": "https://api.github.com/repos/pallets/click/labels/good%20first%20issue", "name": "good first issue", "color": "fbca04", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/click/milestones/5", "html_url": "https://github.com/pallets/click/milestone/5", "labels_url": "https://api.github.com/repos/pallets/click/milestones/5/labels", "id": 3655024, "node_id": "MDk6TWlsZXN0b25lMzY1NTAyNA==", "number": 5, "title": "8.0.0", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 8, "closed_issues": 58, "state": "open", "created_at": "2018-09-14T14:59:44Z", "updated_at": "2020-08-17T04:43:11Z", "due_on": null, "closed_at": null}, "comments": 0, "created_at": "2020-03-06T22:13:47Z", "updated_at": "2020-07-01T17:12:02Z", "closed_at": "2020-07-01T17:12:02Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The `--version` option uses pkg_resources to get the version information from the distribution metadata. Use [importlib_metadata](https://pypi.org/project/importlib-metadata/) instead, but don't make it a dependency. When creating the decorator, issue a warning if a `version` is not given and importlib_metadata is not installed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1487", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1487/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1487/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1487/events", "html_url": "https://github.com/pallets/click/issues/1487", "id": 576448953, "node_id": "MDU6SXNzdWU1NzY0NDg5NTM=", "number": 1487, "title": "Regarding the availability of features related to ParameterSource", "user": {"login": "jyscao", "id": 12605746, "node_id": "MDQ6VXNlcjEyNjA1NzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/12605746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyscao", "html_url": "https://github.com/jyscao", "followers_url": "https://api.github.com/users/jyscao/followers", "following_url": "https://api.github.com/users/jyscao/following{/other_user}", "gists_url": "https://api.github.com/users/jyscao/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyscao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyscao/subscriptions", "organizations_url": "https://api.github.com/users/jyscao/orgs", "repos_url": "https://api.github.com/users/jyscao/repos", "events_url": "https://api.github.com/users/jyscao/events{/privacy}", "received_events_url": "https://api.github.com/users/jyscao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-05T18:28:20Z", "updated_at": "2020-03-05T18:40:12Z", "closed_at": "2020-03-05T18:40:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nBe able to use something like the following callback for an option parameter:\r\n\r\n```python\r\ndef process_xmin_args(ctx, param, xmin_args):\r\n    print(ctx.get_parameter_source(param.name))\r\n```\r\n\r\n### Actual Behavior\r\n\r\nGet `AttributeError: 'Context' object has no attribute 'get_parameter_source'`\r\n\r\n### Environment\r\n\r\n* Python version: 3.8.1\r\n* Click version: 7.0\r\n\r\nI have the head of the source cloned, so I do see that methods for `Context` like `set_parameter_source` and `get_parameter_source` are in the codebase as of around June of 2019, however these are not yet in the latest 7.0 release. So guess I'm just wondering approximately when the next release will be, which presumably will include this among other new feature additions.\r\n\r\n(apologies if this question sounds impatient and pushy, not my intention at all, just curious)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1486", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1486/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1486/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1486/events", "html_url": "https://github.com/pallets/click/issues/1486", "id": 576393316, "node_id": "MDU6SXNzdWU1NzYzOTMzMTY=", "number": 1486, "title": "Not specifying a group's command exits with code 0", "user": {"login": "plannigan", "id": 18636401, "node_id": "MDQ6VXNlcjE4NjM2NDAx", "avatar_url": "https://avatars0.githubusercontent.com/u/18636401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/plannigan", "html_url": "https://github.com/plannigan", "followers_url": "https://api.github.com/users/plannigan/followers", "following_url": "https://api.github.com/users/plannigan/following{/other_user}", "gists_url": "https://api.github.com/users/plannigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/plannigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/plannigan/subscriptions", "organizations_url": "https://api.github.com/users/plannigan/orgs", "repos_url": "https://api.github.com/users/plannigan/repos", "events_url": "https://api.github.com/users/plannigan/events{/privacy}", "received_events_url": "https://api.github.com/users/plannigan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/click/milestones/9", "html_url": "https://github.com/pallets/click/milestone/9", "labels_url": "https://api.github.com/repos/pallets/click/milestones/9/labels", "id": 5770892, "node_id": "MDk6TWlsZXN0b25lNTc3MDg5Mg==", "number": 9, "title": "9.0.0", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 1, "state": "open", "created_at": "2020-08-13T20:24:18Z", "updated_at": "2020-08-13T20:40:50Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2020-03-05T16:51:47Z", "updated_at": "2020-08-13T20:25:29Z", "closed_at": "2020-08-13T16:21:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "When a group is created with multiple commands, but the script is called without any commands, the exit code is 0. It looks like [this line](https://github.com/pallets/click/blob/466d0add86f48502db9c02c32e30287d39ab866b/click/core.py#L1028) just needs to be changed to have an exit code. But it's not clear if `ctx.fail()` should be used instead.\r\n\r\n### Example Code\r\n\r\n```python\r\nimport click\r\n\r\n@click.group()\r\ndef cli():\r\n    print(\"in group\")\r\n\r\n@cli.command()\r\ndef foo():\r\n    print(\"foo\")\r\n\r\n@cli.command()\r\ndef bar():\r\n    print(\"bar\")\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"before group\")\r\n    cli()\r\n```\r\n\r\n### Expected Behavior\r\n\r\nA non-zero exit code.\r\n\r\n### Actual Behavior\r\n\r\n```shell\r\n$ python click_poc.py \r\nbefore group\r\nUsage: click_poc.py [OPTIONS] COMMAND [ARGS]...\r\n\r\nOptions:\r\n  --help  Show this message and exit.\r\n\r\nCommands:\r\n  bar\r\n  foo\r\n$ echo $?\r\n0\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: Python 3.8.0\r\n* Click version: Click==7.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1475", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1475/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1475/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1475/events", "html_url": "https://github.com/pallets/click/issues/1475", "id": 568881312, "node_id": "MDU6SXNzdWU1Njg4ODEzMTI=", "number": 1475, "title": "Required arguments are omitted from command help synopsis", "user": {"login": "smurfix", "id": 236571, "node_id": "MDQ6VXNlcjIzNjU3MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/236571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smurfix", "html_url": "https://github.com/smurfix", "followers_url": "https://api.github.com/users/smurfix/followers", "following_url": "https://api.github.com/users/smurfix/following{/other_user}", "gists_url": "https://api.github.com/users/smurfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/smurfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smurfix/subscriptions", "organizations_url": "https://api.github.com/users/smurfix/orgs", "repos_url": "https://api.github.com/users/smurfix/repos", "events_url": "https://api.github.com/users/smurfix/events{/privacy}", "received_events_url": "https://api.github.com/users/smurfix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2202111823, "node_id": "MDU6TGFiZWwyMjAyMTExODIz", "url": "https://api.github.com/repos/pallets/click/labels/f:help", "name": "f:help", "color": "e0647b", "default": false, "description": "feature: help text"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/click/milestones/5", "html_url": "https://github.com/pallets/click/milestone/5", "labels_url": "https://api.github.com/repos/pallets/click/milestones/5/labels", "id": 3655024, "node_id": "MDk6TWlsZXN0b25lMzY1NTAyNA==", "number": 5, "title": "8.0.0", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 8, "closed_issues": 58, "state": "open", "created_at": "2018-09-14T14:59:44Z", "updated_at": "2020-08-17T04:43:11Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2020-02-21T10:50:30Z", "updated_at": "2020-08-06T12:32:46Z", "closed_at": "2020-08-06T12:32:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a `@click.group` that requires an argument.\r\n\r\nThe help text of the group itself correctly says `Usage: p.py [OPTIONS] NAME COMMAND [ARGS]...`. However, the help text of the subcommand omits `NAME` which confuses my users.\r\n\r\nExample code:\r\n\r\n```python\r\n#!/usr/bin/python3\r\n\r\nimport click\r\n\r\n@click.group()\r\n@click.argument(\"name\")\r\n@click.pass_context\r\ndef main(ctx, name):\r\n    ctx.obj = dict(name=name)\r\n\r\n@main.command()\r\n@click.pass_obj\r\ndef cmd(obj):\r\n    print(\"Running CMD for %s\" % (obj['name']))\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nOutput:\r\n```\r\n$ python3 /tmp/p.py test cmd \r\nRunning CMD for test\r\n$ python3 /tmp/p.py --help\r\nUsage: p.py [OPTIONS] NAME COMMAND [ARGS]...\r\n\r\nOptions:\r\n  --help  Show this message and exit.\r\n\r\nCommands:\r\n  cmd\r\n$ python3 /tmp/p.py test cmd --help\r\nUsage: p.py cmd [OPTIONS]\r\n\r\nOptions:\r\n  --help  Show this message and exit.\r\n$ \r\n```\r\n\r\nI would expect the latter output to be\r\n```\r\nUsage: p.py NAME cmd [OPTIONS]\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.any\r\n* Click version: 7.0\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1474", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1474/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1474/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1474/events", "html_url": "https://github.com/pallets/click/issues/1474", "id": 568613797, "node_id": "MDU6SXNzdWU1Njg2MTM3OTc=", "number": 1474, "title": "click group subcommand does not work with zip function", "user": {"login": "sdevang", "id": 11915431, "node_id": "MDQ6VXNlcjExOTE1NDMx", "avatar_url": "https://avatars3.githubusercontent.com/u/11915431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdevang", "html_url": "https://github.com/sdevang", "followers_url": "https://api.github.com/users/sdevang/followers", "following_url": "https://api.github.com/users/sdevang/following{/other_user}", "gists_url": "https://api.github.com/users/sdevang/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdevang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdevang/subscriptions", "organizations_url": "https://api.github.com/users/sdevang/orgs", "repos_url": "https://api.github.com/users/sdevang/repos", "events_url": "https://api.github.com/users/sdevang/events{/privacy}", "received_events_url": "https://api.github.com/users/sdevang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-20T22:28:41Z", "updated_at": "2020-02-20T22:41:58Z", "closed_at": "2020-02-20T22:41:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "---\r\n\r\n### Expected Behavior\r\n\r\nI have a small python code to list ec2 instances running in my account. The python code works fine in ipython/python repl however when I put it inside a click command, it fails.\r\n\r\n```python\r\nimport click\r\nimport boto3\r\nimport texttable as tt\r\nimport pdb\r\n\r\n@click.group()\r\ndef ec2():\r\n    \"\"\"Manage AWS EC2 resources\"\"\"\r\n    pass\r\n\r\n@ec2.group()\r\ndef list():\r\n    pass\r\n\r\n@list.command()\r\ndef instances():\r\n    client = boto3.client('ec2')\r\n    response = client.describe_instances()\r\n    InstanceIds = []\r\n    InstanceTypes = []\r\n    for reservation in response[\"Reservations\"]:\r\n        for index, instance in enumerate(reservation[\"Instances\"]):\r\n            InstanceIds.append(reservation[\"Instances\"][index][\"InstanceId\"])\r\n            InstanceTypes.append(\r\n                reservation[\"Instances\"][index][\"InstanceType\"])\r\n    tab = tt.Texttable()\r\n    headings = ['InstanceId', 'InstanceType']\r\n    tab.header(headings)\r\n    for row in list(zip(InstanceIds, InstanceTypes)):\r\n        print(row)\r\n        tab.add_row(row)\r\n    s = tab.draw()\r\n    click.echo(s)\r\n```\r\n\r\n### Actual Behavior\r\n\r\nWhen I run the cli, the following happens. using PDB I have verified that it fails on line 32.\r\n\r\n```bash\r\n# cli ec2 list instances\r\nUsage: cli [OPTIONS] COMMAND [ARGS]...\r\n\r\nOptions:\r\n  --help  Show this message and exit.\r\n\r\nCommands:\r\n  instances\r\n```\r\n###  Troubleshooting Data\r\n```bash\r\n(Pdb) print(InstanceIds)\r\n['i-0f9123d28gcd93422', 'i-0d1a82e3cdde3271b']\r\n(Pdb) print(InstanceTypes)\r\n['t3.large', 't2.micro']\r\n> /root/projects/cli/commands/ec2.py(32)instances()\r\n-> for row in list(zip(InstanceIds, InstanceTypes)):\r\n(Pdb) \r\nUsage: cli [OPTIONS] COMMAND [ARGS]...\r\n\r\nOptions:\r\n  --help  Show this message and exit.\r\n\r\nCommands:\r\n  instances\r\nSystemExit: 0\r\n```\r\n### Environment\r\n\r\nMac\r\nUbuntu\r\n\r\n* Python version: 3.6/3.7\r\n* Click version:7.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1472", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1472/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1472/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1472/events", "html_url": "https://github.com/pallets/click/issues/1472", "id": 567154395, "node_id": "MDU6SXNzdWU1NjcxNTQzOTU=", "number": 1472, "title": "Click functions are ignored by pdoc3", "user": {"login": "inhumantsar", "id": 494253, "node_id": "MDQ6VXNlcjQ5NDI1Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/494253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inhumantsar", "html_url": "https://github.com/inhumantsar", "followers_url": "https://api.github.com/users/inhumantsar/followers", "following_url": "https://api.github.com/users/inhumantsar/following{/other_user}", "gists_url": "https://api.github.com/users/inhumantsar/gists{/gist_id}", "starred_url": "https://api.github.com/users/inhumantsar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inhumantsar/subscriptions", "organizations_url": "https://api.github.com/users/inhumantsar/orgs", "repos_url": "https://api.github.com/users/inhumantsar/repos", "events_url": "https://api.github.com/users/inhumantsar/events{/privacy}", "received_events_url": "https://api.github.com/users/inhumantsar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-18T20:59:32Z", "updated_at": "2020-08-13T20:39:35Z", "closed_at": "2020-08-13T20:38:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure if this is a Click issue or a pdoc3 issue. It came up when running pdoc3 against our CLI project using [Click 7](https://click.palletsprojects.com/en/7.x/). Figured I'd report the issue to both projects just in case.\r\n\r\n### Expected Behavior\r\n\r\nAssuming we have a python package with one module containing the code below:\r\n\r\n```python\r\nimport click\r\n\r\ndef testdeco(func):\r\n    def wrapper(x):\r\n        print('in deco')\r\n        func(x)\r\n    return wrapper\r\n\r\n@click.command()\r\n@click.option('-s', '--some-arg', 'somearg')\r\ndef somefunc(somearg):\r\n    \"\"\"some func docstring\"\"\"\r\n    print('foo')\r\n\r\n@testdeco\r\ndef decofunc(n):\r\n    print(n)\r\n\r\ndef otherfunc():\r\n    \"\"\"other func docstring\"\"\"\r\n    print('bar')\r\n\r\n```\r\n\r\nI'd expect pdoc3 to generate relevant docs for `somefunc()`\r\n\r\n### Actual Behavior\r\n\r\n![image](https://user-images.githubusercontent.com/494253/74777362-f17b1400-525e-11ea-828a-f0f01a17e540.png)\r\n\r\n### Additional info\r\n\r\n```\r\nClick==7.0\r\nMako==1.1.1\r\nMarkdown==3.2.1\r\nMarkupSafe==1.1.1\r\npdoc3==0.7.4\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1471", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1471/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1471/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1471/events", "html_url": "https://github.com/pallets/click/issues/1471", "id": 566139646, "node_id": "MDU6SXNzdWU1NjYxMzk2NDY=", "number": 1471, "title": "Minimum working example touch does not work.", "user": {"login": "etienne-monier", "id": 32652388, "node_id": "MDQ6VXNlcjMyNjUyMzg4", "avatar_url": "https://avatars1.githubusercontent.com/u/32652388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etienne-monier", "html_url": "https://github.com/etienne-monier", "followers_url": "https://api.github.com/users/etienne-monier/followers", "following_url": "https://api.github.com/users/etienne-monier/following{/other_user}", "gists_url": "https://api.github.com/users/etienne-monier/gists{/gist_id}", "starred_url": "https://api.github.com/users/etienne-monier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etienne-monier/subscriptions", "organizations_url": "https://api.github.com/users/etienne-monier/orgs", "repos_url": "https://api.github.com/users/etienne-monier/repos", "events_url": "https://api.github.com/users/etienne-monier/events{/privacy}", "received_events_url": "https://api.github.com/users/etienne-monier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-17T08:38:53Z", "updated_at": "2020-02-17T08:41:13Z", "closed_at": "2020-02-17T08:40:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\n**Problem**\r\nI've tested the first MWE of the [argument page](https://click.palletsprojects.com/en/7.x/arguments/), but this does not work.\r\n\r\n**Version**\r\n I use Click 7.0\r\n\r\n**Why this does not work**\r\n\r\nHere is the file:\r\n```\r\nimport click\r\n\r\n@click.command()\r\n@click.argument('filename')\r\ndef touch(filename):\r\n    \"\"\"Print FILENAME if the file exists.\"\"\"\r\n    click.echo(filename)\r\n```\r\n\r\nAnd here is the result.\r\n```\r\n$ python touch.py --help\r\n$ python touch.py test.png\r\n```\r\nNothing is displayed. I've tried this code:\r\n\r\n```\r\nimport click\r\n\r\n@click.command()\r\n@click.argument('filename')\r\ndef touch(filename):\r\n    \"\"\"Print FILENAME if the file exists.\"\"\"\r\n    click.echo(filename)\r\n\r\nif __name__=='__main__':\r\n    touch('test.png')\r\n```\r\n\r\nAnd here is the result:\r\n```\r\n$ python touch.py --help \r\nUsage: touch.py [OPTIONS] FILENAME\r\nTry \"touch.py --help\" for help.\r\n\r\nError: Got unexpected extra arguments (e s t . p n g)\r\n$ python touch.py test.png\r\nUsage: touch.py [OPTIONS] FILENAME\r\nTry \"touch.py --help\" for help.\r\n\r\nError: Got unexpected extra arguments (e s t . p n g)\r\n```\r\n\r\nSomething's going wrong here ...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1466", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1466/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1466/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1466/events", "html_url": "https://github.com/pallets/click/issues/1466", "id": 561149876, "node_id": "MDU6SXNzdWU1NjExNDk4NzY=", "number": 1466, "title": "take defaults and types from keyword arguments", "user": {"login": "tmbdev", "id": 333887, "node_id": "MDQ6VXNlcjMzMzg4Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/333887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmbdev", "html_url": "https://github.com/tmbdev", "followers_url": "https://api.github.com/users/tmbdev/followers", "following_url": "https://api.github.com/users/tmbdev/following{/other_user}", "gists_url": "https://api.github.com/users/tmbdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmbdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmbdev/subscriptions", "organizations_url": "https://api.github.com/users/tmbdev/orgs", "repos_url": "https://api.github.com/users/tmbdev/repos", "events_url": "https://api.github.com/users/tmbdev/events{/privacy}", "received_events_url": "https://api.github.com/users/tmbdev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-06T17:08:33Z", "updated_at": "2020-02-09T18:26:12Z", "closed_at": "2020-02-06T19:43:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider the following little program:\r\n\r\n```Python\r\nimport click                                                                    \r\n                                                                                \r\n@click.command()                                                                \r\n#@click.option(\"--arg\")  #(1)                                                       \r\n@click.option(\"--arg\", default=17)  #(2)\r\ndef command(arg=19):                                                            \r\n    print(arg, type(arg))                                                       \r\n                                                                                \r\nif __name__=='__main__':                                                        \r\n    command()   \r\n```\r\n\r\nHere, if using declaration (1), passing an argument with `--arg` will result in the passing of a string argument. On the other hand, declaration (2) overrides the default and forces the programmer to repeat defaults.\r\n\r\nIt would seem to be nicer behavior if `@click.option` used reflection to get the default value from keyword arguments, removing the need for duplication of the default and avoiding potential type inconsistencies.\r\n\r\n(Perhaps to avoid backwards incompatibility where people rely on the odd current behavior, the fix could use a slight variant, say, `@click.opt`. When used with `default=`, it would just behave as the current options.)\r\n\r\n```Python\r\nimport click                                                                    \r\n                                                                                \r\n@click.command()\r\n@click.opt(\"--arg\", help=\"defaults to '19' of type 'int'\")\r\ndef command(arg=19):\r\n    print(arg, type(arg))\r\n     \r\nif __name__=='__main__':\r\n    command()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1465", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1465/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1465/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1465/events", "html_url": "https://github.com/pallets/click/issues/1465", "id": 559908438, "node_id": "MDU6SXNzdWU1NTk5MDg0Mzg=", "number": 1465, "title": "Duplicate Boolean flag options \"--foo/--foo\" are not detected (defaults to False)", "user": {"login": "ramses0", "id": 110406, "node_id": "MDQ6VXNlcjExMDQwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/110406?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramses0", "html_url": "https://github.com/ramses0", "followers_url": "https://api.github.com/users/ramses0/followers", "following_url": "https://api.github.com/users/ramses0/following{/other_user}", "gists_url": "https://api.github.com/users/ramses0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramses0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramses0/subscriptions", "organizations_url": "https://api.github.com/users/ramses0/orgs", "repos_url": "https://api.github.com/users/ramses0/repos", "events_url": "https://api.github.com/users/ramses0/events{/privacy}", "received_events_url": "https://api.github.com/users/ramses0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 933952159, "node_id": "MDU6TGFiZWw5MzM5NTIxNTk=", "url": "https://api.github.com/repos/pallets/click/labels/good%20first%20issue", "name": "good first issue", "color": "fbca04", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/click/milestones/5", "html_url": "https://github.com/pallets/click/milestone/5", "labels_url": "https://api.github.com/repos/pallets/click/milestones/5/labels", "id": 3655024, "node_id": "MDk6TWlsZXN0b25lMzY1NTAyNA==", "number": 5, "title": "8.0.0", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 8, "closed_issues": 58, "state": "open", "created_at": "2018-09-14T14:59:44Z", "updated_at": "2020-08-17T04:43:11Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2020-02-04T18:45:42Z", "updated_at": "2020-06-25T04:56:10Z", "closed_at": "2020-06-25T04:56:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I ran into an issue where I had the code:\r\n\r\n    @click.option( \"--print-verbose-info/--print-verbose-info\", help=\"...\", default=False )\r\n\r\n...and running `cli.py --print-verbose-info` was apparently defaulting over to the `False` value.  Totally my mistake (it should have been `--no-print-verbose-info`), but it'd be nice to get a warning/error for boolean values which match exactly (ie: cannot be set to true).\r\n\r\nIt was kindof tricky to diagnose b/c I assumed that the `--print-verbose-info` that I was passing on the CLI was triggering the `True` path, not the `False` path, and usually Click option parsing is pretty bulletproof so it took a while to find that copy/paste problem.\r\n\r\nThis would be a `good-first-issue`, I'm submitting it now more as a reminder to maybe follow-up on it and figure out the appropriate P.R.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1464", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1464/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1464/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1464/events", "html_url": "https://github.com/pallets/click/issues/1464", "id": 558251848, "node_id": "MDU6SXNzdWU1NTgyNTE4NDg=", "number": 1464, "title": "app_name and prog_name are both used for the same thing", "user": {"login": "bkreider", "id": 1699478, "node_id": "MDQ6VXNlcjE2OTk0Nzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1699478?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkreider", "html_url": "https://github.com/bkreider", "followers_url": "https://api.github.com/users/bkreider/followers", "following_url": "https://api.github.com/users/bkreider/following{/other_user}", "gists_url": "https://api.github.com/users/bkreider/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkreider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkreider/subscriptions", "organizations_url": "https://api.github.com/users/bkreider/orgs", "repos_url": "https://api.github.com/users/bkreider/repos", "events_url": "https://api.github.com/users/bkreider/events{/privacy}", "received_events_url": "https://api.github.com/users/bkreider/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-31T17:02:42Z", "updated_at": "2020-01-31T18:07:45Z", "closed_at": "2020-01-31T18:07:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "A minor issue, but maybe standardize on one name instead of both app_name and prog_name?\r\n\r\n * `click.get_app_dir(app_name...)`\r\n * `click.version_option(...)`: \"prog_name \u2013 the name of the program (defaults to autodetection)\"", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1461", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1461/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1461/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1461/events", "html_url": "https://github.com/pallets/click/issues/1461", "id": 556520911, "node_id": "MDU6SXNzdWU1NTY1MjA5MTE=", "number": 1461, "title": "Force tool filename in --help output", "user": {"login": "darkvertex", "id": 941331, "node_id": "MDQ6VXNlcjk0MTMzMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/941331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darkvertex", "html_url": "https://github.com/darkvertex", "followers_url": "https://api.github.com/users/darkvertex/followers", "following_url": "https://api.github.com/users/darkvertex/following{/other_user}", "gists_url": "https://api.github.com/users/darkvertex/gists{/gist_id}", "starred_url": "https://api.github.com/users/darkvertex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darkvertex/subscriptions", "organizations_url": "https://api.github.com/users/darkvertex/orgs", "repos_url": "https://api.github.com/users/darkvertex/repos", "events_url": "https://api.github.com/users/darkvertex/events{/privacy}", "received_events_url": "https://api.github.com/users/darkvertex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-28T22:37:20Z", "updated_at": "2020-01-29T19:45:40Z", "closed_at": "2020-01-28T22:50:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a case where I have a little entrypoint bash script:\r\n\r\nA file called `mytool`:\r\n```\r\n#!/usr/bin/env bash\r\npython3 -m mymodule.cli \"$@\"\r\n```\r\n\r\nAnd all my Click-based CLI stuff happens in my module's cli.py file.\r\n\r\nHowever, when I run `mytool --help` I get:\r\n\r\n```\r\n$ mytool --help\r\nUsage: cli.py [OPTIONS] COMMAND [ARGS]...\r\n```\r\n\r\nHow do I force another string instead of \"cli.py\"? I vaguely recall that there is a way, but I scoured the docs to no avail. :thinking:\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1460", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1460/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1460/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1460/events", "html_url": "https://github.com/pallets/click/issues/1460", "id": 556499377, "node_id": "MDU6SXNzdWU1NTY0OTkzNzc=", "number": 1460, "title": "click.prompt(type=int, hide_input=True) outputs rejected input", "user": {"login": "altendky", "id": 543719, "node_id": "MDQ6VXNlcjU0MzcxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/543719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/altendky", "html_url": "https://github.com/altendky", "followers_url": "https://api.github.com/users/altendky/followers", "following_url": "https://api.github.com/users/altendky/following{/other_user}", "gists_url": "https://api.github.com/users/altendky/gists{/gist_id}", "starred_url": "https://api.github.com/users/altendky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/altendky/subscriptions", "organizations_url": "https://api.github.com/users/altendky/orgs", "repos_url": "https://api.github.com/users/altendky/repos", "events_url": "https://api.github.com/users/altendky/events{/privacy}", "received_events_url": "https://api.github.com/users/altendky/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 933952159, "node_id": "MDU6TGFiZWw5MzM5NTIxNTk=", "url": "https://api.github.com/repos/pallets/click/labels/good%20first%20issue", "name": "good first issue", "color": "fbca04", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/click/milestones/5", "html_url": "https://github.com/pallets/click/milestone/5", "labels_url": "https://api.github.com/repos/pallets/click/milestones/5/labels", "id": 3655024, "node_id": "MDk6TWlsZXN0b25lMzY1NTAyNA==", "number": 5, "title": "8.0.0", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 8, "closed_issues": 58, "state": "open", "created_at": "2018-09-14T14:59:44Z", "updated_at": "2020-08-17T04:43:11Z", "due_on": null, "closed_at": null}, "comments": 4, "created_at": "2020-01-28T22:04:32Z", "updated_at": "2020-06-24T23:01:12Z", "closed_at": "2020-06-24T23:01:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Despite asking `click.prompt()` to hide input it will still outputs the input if it rejects it.  I get the same behavior for `7.0` from PyPI, `7.x` from Git, and `master` from Git.\r\n\r\n```bash\r\naltendky@p1:~$ venv/bin/python -c 'import click; click.prompt(\"prompt\", type=int, hide_input=True)'\r\nprompt: \r\nError: wait...  i get to see this? is not a valid integer\r\nprompt:\r\n```\r\n\r\nIf you specify a type (let's say you are inputting a numeric pin) then the same can happen with `click.password_option()`.\r\n\r\n```python3\r\nimport click\r\n\r\n\r\n@click.command()\r\n@click.password_option(type=int)\r\ndef cli(password):\r\n    pass\r\n\r\n\r\ncli()\r\n```\r\n\r\n```bash\r\naltendky@p1:~$ venv/bin/python x.py\r\nPassword: \r\nError: lkjsaf is not a valid integer\r\nPassword:\r\n```\r\n\r\nThe workaround for `click.prompt()` anyways I guess is to not specify a type and to implement the rejection manually.\r\n\r\nIf there is agreement that this is an issue that should be fixed then I can try to put together a PR for it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1458", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1458/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1458/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1458/events", "html_url": "https://github.com/pallets/click/issues/1458", "id": 552539638, "node_id": "MDU6SXNzdWU1NTI1Mzk2Mzg=", "number": 1458, "title": "color output is not working in command prompt on windows", "user": {"login": "mkinney", "id": 2219838, "node_id": "MDQ6VXNlcjIyMTk4Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2219838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkinney", "html_url": "https://github.com/mkinney", "followers_url": "https://api.github.com/users/mkinney/followers", "following_url": "https://api.github.com/users/mkinney/following{/other_user}", "gists_url": "https://api.github.com/users/mkinney/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkinney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkinney/subscriptions", "organizations_url": "https://api.github.com/users/mkinney/orgs", "repos_url": "https://api.github.com/users/mkinney/repos", "events_url": "https://api.github.com/users/mkinney/events{/privacy}", "received_events_url": "https://api.github.com/users/mkinney/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-20T22:46:38Z", "updated_at": "2020-01-20T23:04:50Z", "closed_at": "2020-01-20T23:04:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I do not get color output when I run from windows, I get escape sequences:\r\n\r\n```\r\nPS C:\\Users\\vagrant> cd one\r\nPS C:\\Users\\vagrant\\one> virtualenv.exe venv\r\nUsing base prefix 'c:\\\\users\\\\vagrant\\\\appdata\\\\local\\\\programs\\\\python\\\\python37'\r\nNew python executable in C:\\Users\\vagrant\\one\\venv\\Scripts\\python.exe\r\nInstalling setuptools, pip, wheel...\r\ndone.\r\nPS C:\\Users\\vagrant\\one> .\\venv\\Scripts\\activate\r\n(venv) PS C:\\Users\\vagrant\\one> pip install click\r\nCollecting click\r\n  Using cached https://files.pythonhosted.org/packages/fa/37/45185cb5abbc30d7257104c434fe0b07e5a195a6847506c074527aa599ec/Click-7.0-py2.py3-none-any.whl\r\nInstalling collected packages: click\r\nSuccessfully installed click-7.0\r\n(venv) PS C:\\Users\\vagrant\\one> cp ..\\mike.py .\r\n(venv) PS C:\\Users\\vagrant\\one> type mike.py\r\nimport click\r\n\r\nprint(click.style('hello', 'yellow'))\r\n(venv) PS C:\\Users\\vagrant\\one> python mike.py\r\n\u001b[33mhello\u001b[0m\r\n```\r\n\r\n<img width=\"345\" alt=\"Screen Shot 2020-01-20 at 2 46 10 PM\" src=\"https://user-images.githubusercontent.com/2219838/72762206-a2748d00-3b93-11ea-9abf-11aad8be1ecb.png\">\r\n\r\nAny ideas?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1457", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1457/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1457/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1457/events", "html_url": "https://github.com/pallets/click/issues/1457", "id": 551805625, "node_id": "MDU6SXNzdWU1NTE4MDU2MjU=", "number": 1457, "title": "Problem capturing output from csv.writer(stdout,...)", "user": {"login": "hartzell", "id": 312978, "node_id": "MDQ6VXNlcjMxMjk3OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/312978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hartzell", "html_url": "https://github.com/hartzell", "followers_url": "https://api.github.com/users/hartzell/followers", "following_url": "https://api.github.com/users/hartzell/following{/other_user}", "gists_url": "https://api.github.com/users/hartzell/gists{/gist_id}", "starred_url": "https://api.github.com/users/hartzell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hartzell/subscriptions", "organizations_url": "https://api.github.com/users/hartzell/orgs", "repos_url": "https://api.github.com/users/hartzell/repos", "events_url": "https://api.github.com/users/hartzell/events{/privacy}", "received_events_url": "https://api.github.com/users/hartzell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-18T18:28:04Z", "updated_at": "2020-01-18T18:45:54Z", "closed_at": "2020-01-18T18:45:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm working on a CLI application built using click and tested w/ pytest.\r\n\r\nOne of the subcommands generates output via something like this:\r\n\r\n```python\r\n    tsv_writer = csv.writer(stdout, delimiter='\\t')\r\n    for query in queries.queries:\r\n        genome_location = tm.lift(query.transcript_name, query.pos)\r\n        tsv_writer.writerow([\r\n            query.transcript_name,\r\n            query.pos,\r\n            genome_location[0],\r\n            genome_location[1],\r\n        ])\r\n```\r\n\r\nWhen I invoke it in a test case like so:\r\n\r\n```python\r\n    result = runner.invoke(main, ['lift', '--mf', mf, '--qf', qf])\r\n    with open('sample_data/exhaustive_result.tsv') as the_file:\r\n        expected = the_file.read()\r\n        assert result.output == expected\r\n```\r\n\r\nI find that `result.output` is empty.\r\n\r\nThe CLI works from the command line.\r\n\r\nI've read through #371 and suspect I am in the same boat as [olgabot described in her comment](https://github.com/pallets/click/issues/371#issuecomment-323888625), having issues with how/where/when pytest and click are swapping around the `std{out,err}` filehandles, but I'm unable to find a correct approach that works.\r\n\r\nHere's a minimal-ish example of what I've tried based on #371:\r\n\r\n```python\r\n# -*- coding: utf-8 -*-\r\n\r\nimport csv\r\n\r\nfrom sys import stdout\r\n\r\nimport click\r\nfrom click.testing import CliRunner\r\n\r\n\r\n@click.command()\r\ndef cli_output():\r\n    tsv_writer = csv.writer(stdout, delimiter='\\t')\r\n    tsv_writer.writerow([0, 1, 2, 3])\r\n\r\n\r\ndef test_csv_writer_click():\r\n    runner = CliRunner()\r\n    result = runner.invoke(cli_output, mix_stderr=True)\r\n    assert result.output == '0\\t1\\t2\\t3'\r\n\r\n\r\ndef test_csv_writer_capfd(capfd):\r\n    runner = CliRunner()\r\n    result = runner.invoke(cli_output, mix_stderr=True)\r\n    output = capfd.readouterr()\r\n    # this also fails\r\n    # assert output.out == '0\\t1\\t2\\t3'\r\n    assert output[0] == '0\\t1\\t2\\t3'\r\n```\r\n\r\nI think I understand how `capfd()` works, e.g. [this example, modified from the pytest docs](https://docs.pytest.org/en/latest/capture.html#accessing-captured-output-from-a-test-function) works when I run it as `pytest tests/test_cli/test_capfd.py`:\r\n\r\n\r\n```python\r\n# -*- coding: utf-8 -*-\r\n\r\nimport sys\r\n\r\n\r\ndef test_myoutput(capfd):  # or use \"capfd\" for fd-level\r\n    print(\"hello\")\r\n    sys.stderr.write(\"world\\n\")\r\n    captured = capfd.readouterr()\r\n    assert captured.out == \"hello\\n\"\r\n    assert captured.err == \"world\\n\"\r\n    print(\"next\")\r\n    captured = capfd.readouterr()\r\n    assert captured.out == \"next\\n\"\r\n```\r\n\r\n**BUT**, I can't seem to get anything to work when I get click involved.  Here's a test case, built from an example in #371, that tries several different approaches:\r\n\r\n```python\r\n# -*- coding: utf-8 -*-\r\n\r\nfrom sys import stderr\r\n\r\nimport click\r\nfrom click.testing import CliRunner\r\n\r\n\r\ndef test_print_case():\r\n\r\n    @click.command()\r\n    def cli_output():\r\n        # This causes failures in the first invocation, result.output\r\n        # only contains '1'\r\n        print(1)\r\n        print(2, file=stderr)\r\n\r\n    runner = CliRunner()\r\n    result = runner.invoke(cli_output, mix_stderr=True)\r\n    assert result.output == '1\\n2\\n'\r\n\r\n    runner = CliRunner()\r\n    result = runner.invoke(cli_output, mix_stderr=False)\r\n    assert result.stdout == '1\\n'\r\n    assert result.stderr == '2\\n'\r\n\r\n\r\ndef test_echo_case():\r\n\r\n    @click.command()\r\n    def cli_output():\r\n        # This causes failures in the second invocation, result.stdout\r\n        # contains the mixed output\r\n        click.echo(1)\r\n        click.echo(2, err=True)\r\n\r\n    runner = CliRunner()\r\n    result = runner.invoke(cli_output, mix_stderr=True)\r\n    assert result.output == '1\\n2\\n'\r\n\r\n    runner = CliRunner()\r\n    result = runner.invoke(cli_output, mix_stderr=False)\r\n    assert result.stdout == '1\\n'\r\n    assert result.stderr == '2\\n'\r\n\r\n\r\ndef test_capfd(capfd):\r\n\r\n    @click.command()\r\n    def cli_output():\r\n        # This causes failures in the second invocation, result.stdout\r\n        # contains the mixed output\r\n        click.echo(1)\r\n        click.echo(2, err=True)\r\n\r\n    runner = CliRunner()\r\n    result = runner.invoke(cli_output, mix_stderr=True)\r\n    captured = capfd.readouterr()\r\n    assert captured[0] == '1\\n2\\n'\r\n\r\n    runner = CliRunner()\r\n    result = runner.invoke(cli_output, mix_stderr=False)\r\n    captured = capfd.readouterr()\r\n    assert captured[0] == '1\\n'\r\n    assert captured[1] == '2\\n'\r\n```\r\n\r\nHere's the failure I see:\r\n\r\n```console\r\n$ pytest tests/test_cli/test_blort.py\r\n============================================ test session starts =============================================\r\nplatform darwin -- Python 3.7.5, pytest-5.3.2, py-1.8.1, pluggy-0.13.1\r\nUsing --randomly-seed=1579370299\r\nrootdir: /Users/hartzell/tmp/nvta-homework, inifile: setup.cfg\r\nplugins: randomly-3.2.1, cov-2.8.1\r\ncollected 3 items\r\n\r\ntests/test_cli/test_blort.py FFF                                                                       [100%]Coverage.py warning: No data was collected. (no-data-collected)\r\n\r\n\r\n================================================== FAILURES ==================================================\r\n_______________________________________________ test_echo_case _______________________________________________\r\ntests/test_cli/test_blort.py:43: in test_echo_case\r\n    assert result.stdout == '1\\n'\r\nE   AssertionError: assert '1\\n2\\n' == '1\\n'\r\nE       1\r\nE     - 2\r\n______________________________________________ test_print_case _______________________________________________\r\ntests/test_cli/test_blort.py:20: in test_print_case\r\n    assert result.output == '1\\n2\\n'\r\nE   AssertionError: assert '1\\n' == '1\\n2\\n'\r\nE       1\r\nE     + 2\r\n-------------------------------------------- Captured stderr call --------------------------------------------\r\n2\r\n_________________________________________________ test_capfd _________________________________________________\r\ntests/test_cli/test_blort.py:59: in test_capfd\r\n    assert captured[0] == '1\\n2\\n'\r\nE   AssertionError: assert '' == '1\\n2\\n'\r\nE     + 1\r\nE     + 2\r\n\r\n---------- coverage: platform darwin, python 3.7.5-final-0 -----------\r\nName                                   Stmts   Miss Branch BrPart  Cover\r\n------------------------------------------------------------------------\r\nnvta_homework/cli.py                      13     13      2      0     0%\r\nnvta_homework/main.py                      8      8      0      0     0%\r\nnvta_homework/queries.py                  17     17      4      0     0%\r\nnvta_homework/transcript_mappings.py      54     54     20      0     0%\r\n------------------------------------------------------------------------\r\nTOTAL                                     92     92     26      0     0%\r\n\r\n1 file skipped due to complete coverage.\r\nCoverage HTML written to dir htmlcov\r\n\r\nFAIL Required test coverage of 100% not reached. Total coverage: 0.00%\r\n============================================= 3 failed in 0.18s ==============================================\r\n```\r\n\r\nI'm hoping someone can point me in a useful direction.\r\n\r\n**Thanks!**", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1456", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1456/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1456/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1456/events", "html_url": "https://github.com/pallets/click/issues/1456", "id": 551794640, "node_id": "MDU6SXNzdWU1NTE3OTQ2NDA=", "number": 1456, "title": "Using inspect and type annotations [New Feature]", "user": {"login": "tianhuil", "id": 1906321, "node_id": "MDQ6VXNlcjE5MDYzMjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1906321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tianhuil", "html_url": "https://github.com/tianhuil", "followers_url": "https://api.github.com/users/tianhuil/followers", "following_url": "https://api.github.com/users/tianhuil/following{/other_user}", "gists_url": "https://api.github.com/users/tianhuil/gists{/gist_id}", "starred_url": "https://api.github.com/users/tianhuil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tianhuil/subscriptions", "organizations_url": "https://api.github.com/users/tianhuil/orgs", "repos_url": "https://api.github.com/users/tianhuil/repos", "events_url": "https://api.github.com/users/tianhuil/events{/privacy}", "received_events_url": "https://api.github.com/users/tianhuil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-18T16:55:43Z", "updated_at": "2020-01-18T20:19:28Z", "closed_at": "2020-01-18T17:05:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi -- this project looks like what I've been trying to find for a while.\r\n\r\nOne suggestion: rather than using decorators to specify arguments, consider using Python 3 type annotations and `inspect.getfullargspec` to get the argument names, types, and default values.  You can then more succinctly describe a click command.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1453", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1453/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1453/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1453/events", "html_url": "https://github.com/pallets/click/issues/1453", "id": 549169818, "node_id": "MDU6SXNzdWU1NDkxNjk4MTg=", "number": 1453, "title": "is there a nice way to test click auto-completion functions?", "user": {"login": "seebi", "id": 510452, "node_id": "MDQ6VXNlcjUxMDQ1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/510452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seebi", "html_url": "https://github.com/seebi", "followers_url": "https://api.github.com/users/seebi/followers", "following_url": "https://api.github.com/users/seebi/following{/other_user}", "gists_url": "https://api.github.com/users/seebi/gists{/gist_id}", "starred_url": "https://api.github.com/users/seebi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seebi/subscriptions", "organizations_url": "https://api.github.com/users/seebi/orgs", "repos_url": "https://api.github.com/users/seebi/repos", "events_url": "https://api.github.com/users/seebi/events{/privacy}", "received_events_url": "https://api.github.com/users/seebi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-13T20:41:56Z", "updated_at": "2020-02-27T17:12:24Z", "closed_at": "2020-01-14T13:48:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "The current documentation is blank about this.\r\nIs there maybe an example somewhere?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1452", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1452/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1452/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1452/events", "html_url": "https://github.com/pallets/click/issues/1452", "id": 548618532, "node_id": "MDU6SXNzdWU1NDg2MTg1MzI=", "number": 1452, "title": "Nested commands - extra argument", "user": {"login": "Zethson", "id": 21954664, "node_id": "MDQ6VXNlcjIxOTU0NjY0", "avatar_url": "https://avatars3.githubusercontent.com/u/21954664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zethson", "html_url": "https://github.com/Zethson", "followers_url": "https://api.github.com/users/Zethson/followers", "following_url": "https://api.github.com/users/Zethson/following{/other_user}", "gists_url": "https://api.github.com/users/Zethson/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zethson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zethson/subscriptions", "organizations_url": "https://api.github.com/users/Zethson/orgs", "repos_url": "https://api.github.com/users/Zethson/repos", "events_url": "https://api.github.com/users/Zethson/events{/privacy}", "received_events_url": "https://api.github.com/users/Zethson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-12T19:55:15Z", "updated_at": "2020-01-12T20:11:20Z", "closed_at": "2020-01-12T20:01:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n#!/usr/bin/env python\r\n\r\nimport click\r\n\r\n\r\n@click.group(invoke_without_command=True)\r\n@click.pass_context\r\ndef cli(ctx):\r\n    if ctx.invoked_subcommand is None:\r\n        click.echo('I was invoked without subcommand')\r\n    else:\r\n        click.echo('I am about to invoke %s' % ctx.invoked_subcommand)\r\n\r\n\r\n@cli.command()\r\n@click.option('--test',\r\n              prompt='SYNC ME BABY ONE MORE TIME')\r\ndef sync(test):\r\n    click.echo(test)\r\n    second_level()\r\n\r\n\r\n@click.command()\r\ndef second_level():\r\n    print(\"wtf\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    cli()\r\n```\r\n\r\nresults in \r\n\r\n```\r\ncli_minimal_working_example.py sync\r\nI am about to invoke sync\r\nSYNC ME BABY ONE MORE TIME: asd\r\nasd\r\nUsage: cli_minimal_working_example.py [OPTIONS]\r\nTry \"cli_minimal_working_example.py --help\" for help.\r\n\r\nError: Got unexpected extra argument (sync)\r\n```\r\n\r\nMy expection would be that I could continue the command chain with the second_level . \r\n\r\nHow can I achieve this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1450", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1450/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1450/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1450/events", "html_url": "https://github.com/pallets/click/issues/1450", "id": 544299635, "node_id": "MDU6SXNzdWU1NDQyOTk2MzU=", "number": 1450, "title": "Jump back into calling function", "user": {"login": "Zethson", "id": 21954664, "node_id": "MDQ6VXNlcjIxOTU0NjY0", "avatar_url": "https://avatars3.githubusercontent.com/u/21954664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zethson", "html_url": "https://github.com/Zethson", "followers_url": "https://api.github.com/users/Zethson/followers", "following_url": "https://api.github.com/users/Zethson/following{/other_user}", "gists_url": "https://api.github.com/users/Zethson/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zethson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zethson/subscriptions", "organizations_url": "https://api.github.com/users/Zethson/orgs", "repos_url": "https://api.github.com/users/Zethson/repos", "events_url": "https://api.github.com/users/Zethson/events{/privacy}", "received_events_url": "https://api.github.com/users/Zethson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-01T01:58:25Z", "updated_at": "2020-01-12T21:06:44Z", "closed_at": "2020-01-01T02:35:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear developers,\r\n\r\nI would like to use a function that may look like:\r\n```\r\n@click.command()\r\n@click.option('--language',\r\n              type=click.Choice(['python', 'c++', 'kotlin'], case_sensitive=False),\r\n              prompt=\"Choose between the following options:\")\r\ndef handle_cli(language):\r\n    do_something\r\n\r\n    cli_options()\r\n\r\n    do_something_else\r\n```\r\n\r\nAs you can see cli_options() is called.\r\n\r\n```\r\n@click.command()\r\n@click.option('--parameter')\r\ndef cli_options(parameter):\r\n    do_something\r\n```\r\n\r\nMy issue is that 'do_something_else' is never called, since cli_options returns exitcode 0 and terminates the program. How can I force it to jump back into the original calling function?\r\nI could make some hacks work with exit codes, but this is really not the way it should be done.\r\n\r\nThank you very much and happy new year!\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1449", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1449/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1449/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1449/events", "html_url": "https://github.com/pallets/click/issues/1449", "id": 543738049, "node_id": "MDU6SXNzdWU1NDM3MzgwNDk=", "number": 1449, "title": "Show help for all commands [feature request]", "user": {"login": "alphapapa", "id": 601365, "node_id": "MDQ6VXNlcjYwMTM2NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/601365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alphapapa", "html_url": "https://github.com/alphapapa", "followers_url": "https://api.github.com/users/alphapapa/followers", "following_url": "https://api.github.com/users/alphapapa/following{/other_user}", "gists_url": "https://api.github.com/users/alphapapa/gists{/gist_id}", "starred_url": "https://api.github.com/users/alphapapa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alphapapa/subscriptions", "organizations_url": "https://api.github.com/users/alphapapa/orgs", "repos_url": "https://api.github.com/users/alphapapa/repos", "events_url": "https://api.github.com/users/alphapapa/events{/privacy}", "received_events_url": "https://api.github.com/users/alphapapa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-12-30T05:08:11Z", "updated_at": "2020-06-10T15:31:22Z", "closed_at": "2020-06-10T15:31:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "To get an overview of a program's usage, it would be helpful to print help for all commands at once rather than having to run, e.g. `script.py command1 --help`, `script.py command2 --help`, etc.  \r\n\r\nThis feature is important because the default top-level help doesn't indicate which commands have options, so it doesn't give a good overview of the program's functionality.\r\n\r\nI looked through all of the issues, open and closed, and the closest I could find to asking for this feature is #1176.  It points to [this SE answer](https://stackoverflow.com/a/58018765/712624):\r\n\r\n```python\r\ndef recursive_help(cmd, parent=None):\r\n    ctx = click.core.Context(cmd, info_name=cmd.name, parent=parent)\r\n    print(cmd.get_help(ctx))\r\n    print()\r\n    commands = getattr(cmd, 'commands', {})\r\n    for sub in commands.values():\r\n        recursive_help(sub, ctx)\r\n\r\n# Used like:\r\n@cli.command()\r\ndef dumphelp():\r\n    recursive_help(cli)\r\n```\r\nIt produces output like:\r\n```\r\n$ rubbish.py all-help\r\nUsage: cli [OPTIONS] COMMAND [ARGS]...\r\n\r\nOptions:\r\n  -v, --verbose\r\n  --help         Show this message and exit.\r\n\r\nCommands:\r\n  all-help\r\n  empty     Empty files from trash bin.\r\n  list      Print list of items in trash bin.\r\n  orphans   List or empty orphaned trash files.\r\n  restore   Restore paths from trash bin to original...\r\n  trash     Move paths to trash bin.\r\n\r\nUsage: cli restore [OPTIONS] [PATHS]...\r\n\r\n  Restore paths from trash bin to original location, or to TO when given.\r\n\r\nOptions:\r\n  --to PATH  When given, restore to this directory instead of original\r\n             location\r\n  --help     Show this message and exit.\r\n\r\nUsage: cli trash [OPTIONS] [PATHS]...\r\n\r\n  Move paths to trash bin.\r\n\r\nOptions:\r\n  --help  Show this message and exit.\r\n```\r\nIt seems like a good proof of concept.  Ideally, the output would be more like:\r\n```\r\n$ rubbish.py --help -v\r\nUsage: rubbish.py [OPTIONS] COMMAND [ARGS]...\r\n\r\nOptions:\r\n  -v, --verbose\r\n  --help         Show this message and exit.\r\n\r\nCommands:\r\n  empty     Empty files from trash bin.\r\n  list      Print list of items in trash bin.\r\n  orphans   List or empty orphaned trash files.\r\n  restore   Restore paths from trash bin to original...\r\n  trash     Move paths to trash bin.\r\n\r\nCommand: restore [OPTIONS] [PATHS]...\r\n\r\n  Restore paths from trash bin to original location, or to TO when given.\r\n\r\n  Options:\r\n    --to PATH  When given, restore to this directory instead of original\r\n               location\r\n    --help     Show this message and exit.\r\n\r\nCommand: trash [OPTIONS] [PATHS]...\r\n\r\n  Move paths to trash bin.\r\n\r\n  Options:\r\n    --help  Show this message and exit.\r\n```\r\nThanks for Click!  It makes writing Python CLI very pleasant.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1447", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1447/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1447/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1447/events", "html_url": "https://github.com/pallets/click/issues/1447", "id": 540386493, "node_id": "MDU6SXNzdWU1NDAzODY0OTM=", "number": 1447, "title": "Message on KeyboardInterrupt handling", "user": {"login": "daskol", "id": 9336514, "node_id": "MDQ6VXNlcjkzMzY1MTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/9336514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daskol", "html_url": "https://github.com/daskol", "followers_url": "https://api.github.com/users/daskol/followers", "following_url": "https://api.github.com/users/daskol/following{/other_user}", "gists_url": "https://api.github.com/users/daskol/gists{/gist_id}", "starred_url": "https://api.github.com/users/daskol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daskol/subscriptions", "organizations_url": "https://api.github.com/users/daskol/orgs", "repos_url": "https://api.github.com/users/daskol/repos", "events_url": "https://api.github.com/users/daskol/events{/privacy}", "received_events_url": "https://api.github.com/users/daskol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-19T15:31:45Z", "updated_at": "2020-01-02T14:05:47Z", "closed_at": "2020-01-02T14:05:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to change [this message](https://github.com/pallets/click/blob/master/click/core.py#L823) to something much less misleading? I have spent two days on debugging C extension since I think there is memory leackage in the extension or internal assertion in CPython or libc. I would preffer to see `Interrupted!` instead of `Aborted!`. Another point is that the original message hints to `SIGABRT` but `SIGINT`. This is a bit annoying too.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1446", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1446/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1446/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1446/events", "html_url": "https://github.com/pallets/click/issues/1446", "id": 540323088, "node_id": "MDU6SXNzdWU1NDAzMjMwODg=", "number": 1446, "title": "Use difflib for potential suggestions in cli error messages", "user": {"login": "tirkarthi", "id": 3972343, "node_id": "MDQ6VXNlcjM5NzIzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3972343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirkarthi", "html_url": "https://github.com/tirkarthi", "followers_url": "https://api.github.com/users/tirkarthi/followers", "following_url": "https://api.github.com/users/tirkarthi/following{/other_user}", "gists_url": "https://api.github.com/users/tirkarthi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirkarthi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirkarthi/subscriptions", "organizations_url": "https://api.github.com/users/tirkarthi/orgs", "repos_url": "https://api.github.com/users/tirkarthi/repos", "events_url": "https://api.github.com/users/tirkarthi/events{/privacy}", "received_events_url": "https://api.github.com/users/tirkarthi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2202111823, "node_id": "MDU6TGFiZWwyMjAyMTExODIz", "url": "https://api.github.com/repos/pallets/click/labels/f:help", "name": "f:help", "color": "e0647b", "default": false, "description": "feature: help text"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/click/milestones/5", "html_url": "https://github.com/pallets/click/milestone/5", "labels_url": "https://api.github.com/repos/pallets/click/milestones/5/labels", "id": 3655024, "node_id": "MDk6TWlsZXN0b25lMzY1NTAyNA==", "number": 5, "title": "8.0.0", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 8, "closed_issues": 58, "state": "open", "created_at": "2018-09-14T14:59:44Z", "updated_at": "2020-08-17T04:43:11Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2019-12-19T13:44:41Z", "updated_at": "2020-08-14T16:31:03Z", "closed_at": "2020-08-14T16:31:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently click only does startswith match at https://github.com/pallets/click/blob/6c454c88b76f7a0be396dba72513bd316cd141e6/click/parser.py#L328-L329 so a typo like using `--boun` suggests `--bount` but using `--bound` doesn't make any suggestions. Using [difflib.get_close_matches](https://docs.python.org/3/library/difflib.html#difflib.get_close_matches) could get better suggestions and nearest matches.\r\n\r\nSample implementation : https://github.com/tirkarthi/click/tree/difflib-suggestions\r\n\r\n```python\r\nimport click\r\n\r\n@click.option(\"--count\")\r\n@click.option(\"--bount\")\r\n@click.command()\r\ndef cli(count, bount):\r\n    click.echo(f\"count = {count}, bount = {bount}\")\r\n\r\nif __name__ == \"__main__\":\r\n    cli()\r\n```\r\n\r\n```shell\r\npython sample.py --boun 1 \r\nUsage: sample.py [OPTIONS]\r\nTry \"sample.py --help\" for help.\r\n\r\nError: no such option: --boun  Did you mean --bount?\r\n```\r\n\r\n```shell\r\npython sample.py --bound 1\r\nUsage: sample.py [OPTIONS]\r\nTry \"sample.py --help\" for help.\r\n\r\nError: no such option: --bound\r\n```\r\n\r\nUsing `--bound` with `difflib.get_close_matches`\r\n\r\n```shell\r\npython sample.py --bound 1\r\nUsage: sample.py [OPTIONS]\r\nTry \"sample.py --help\" for help.\r\n\r\nError: no such option: --bound  (Possible options: --bount, --count)\r\n```\r\n\r\nUsing `--counter` with `difflib.get_close_matches`\r\n\r\n```shell\r\npython sample.py --counter 1\r\nUsage: sample.py [OPTIONS]\r\nTry \"sample.py --help\" for help.\r\n\r\nError: no such option: --counter  (Possible options: --count, --bount)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1444", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1444/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1444/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1444/events", "html_url": "https://github.com/pallets/click/issues/1444", "id": 539275592, "node_id": "MDU6SXNzdWU1MzkyNzU1OTI=", "number": 1444, "title": "Cannot rewrite threading.excepthook when running my app with click", "user": {"login": "saleh-old", "id": 13378447, "node_id": "MDQ6VXNlcjEzMzc4NDQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/13378447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleh-old", "html_url": "https://github.com/saleh-old", "followers_url": "https://api.github.com/users/saleh-old/followers", "following_url": "https://api.github.com/users/saleh-old/following{/other_user}", "gists_url": "https://api.github.com/users/saleh-old/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleh-old/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleh-old/subscriptions", "organizations_url": "https://api.github.com/users/saleh-old/orgs", "repos_url": "https://api.github.com/users/saleh-old/repos", "events_url": "https://api.github.com/users/saleh-old/events{/privacy}", "received_events_url": "https://api.github.com/users/saleh-old/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-17T19:50:08Z", "updated_at": "2020-01-01T16:47:20Z", "closed_at": "2020-01-01T16:47:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to rewrite the default `threading.excepthook` for my app for Python 3.8:\r\n\r\n```py\r\nimport threading, sys\r\n\r\ndef hook(args):\r\n    if args.exc_type == SystemExit:\r\n        return\r\n    print('=' * 30)\r\n    sys.excepthook(args.exc_type, args.exc_value, args.exc_traceback)\r\n\r\nthreading.excepthook = hook\r\n```\r\n\r\nIt works when I run the app without click like this:\r\n\r\n```py\r\nif __name__ == '__main__':\r\n    my_fun(False, False, False)\r\n```\r\n\r\nBut when I use click to run it, it doesn't work:\r\n\r\n```py\r\n# create a Click group\r\n@click.group()\r\ndef cli():\r\n    pass\r\n\r\n@cli.command()\r\n@click.option('--debug/--no-debug', default=False)\r\n@click.option('--dev/--no-dev', default=False)\r\n@click.option('--fee/--no-fee', default=True)\r\ndef my_fun(debug=False, dev=False, fee=False):\r\n    # the code inside my_fun\r\n```\r\n\r\nAny idea why using click breaks it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1443", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1443/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1443/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1443/events", "html_url": "https://github.com/pallets/click/issues/1443", "id": 538335207, "node_id": "MDU6SXNzdWU1MzgzMzUyMDc=", "number": 1443, "title": "Question: subcommands of subcommands", "user": {"login": "seebi", "id": 510452, "node_id": "MDQ6VXNlcjUxMDQ1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/510452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seebi", "html_url": "https://github.com/seebi", "followers_url": "https://api.github.com/users/seebi/followers", "following_url": "https://api.github.com/users/seebi/following{/other_user}", "gists_url": "https://api.github.com/users/seebi/gists{/gist_id}", "starred_url": "https://api.github.com/users/seebi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seebi/subscriptions", "organizations_url": "https://api.github.com/users/seebi/orgs", "repos_url": "https://api.github.com/users/seebi/repos", "events_url": "https://api.github.com/users/seebi/events{/privacy}", "received_events_url": "https://api.github.com/users/seebi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-16T10:52:50Z", "updated_at": "2019-12-16T16:25:48Z", "closed_at": "2019-12-16T14:34:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a question regarding if its possible or not:\r\n\r\nI am currently planning a bigger CLI and would like to know if there is a way to have a 2 level cli interface such as:\r\n\r\n> cli typeX commands_for_typeX\r\n\r\nso as an example \r\n\r\n> cli graph export --options\r\n> cli graph delete --options\r\n> cli graph import --options\r\n\r\nand similar to another resource type:\r\n> cli space export --options\r\n> cli space delete --options\r\n> cli space import --options\r\n\r\nI looked into the example but was not aware of such a structure.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1441", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1441/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1441/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1441/events", "html_url": "https://github.com/pallets/click/issues/1441", "id": 536638700, "node_id": "MDU6SXNzdWU1MzY2Mzg3MDA=", "number": 1441, "title": "Handling signals while using CliRunner", "user": {"login": "butuzov", "id": 651824, "node_id": "MDQ6VXNlcjY1MTgyNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/651824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/butuzov", "html_url": "https://github.com/butuzov", "followers_url": "https://api.github.com/users/butuzov/followers", "following_url": "https://api.github.com/users/butuzov/following{/other_user}", "gists_url": "https://api.github.com/users/butuzov/gists{/gist_id}", "starred_url": "https://api.github.com/users/butuzov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/butuzov/subscriptions", "organizations_url": "https://api.github.com/users/butuzov/orgs", "repos_url": "https://api.github.com/users/butuzov/repos", "events_url": "https://api.github.com/users/butuzov/events{/privacy}", "received_events_url": "https://api.github.com/users/butuzov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-11T22:02:13Z", "updated_at": "2019-12-12T16:27:07Z", "closed_at": "2019-12-11T22:37:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I wonder is there an easy way to implement sending signals to CliRunner for the process while it invoked?\r\n\r\nupdate:\r\nI have answered this question at [stackoverflow](https://stackoverflow.com/questions/59294401)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1440", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1440/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1440/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1440/events", "html_url": "https://github.com/pallets/click/issues/1440", "id": 536338669, "node_id": "MDU6SXNzdWU1MzYzMzg2Njk=", "number": 1440, "title": "Determine if called by another command", "user": {"login": "schollii", "id": 2598808, "node_id": "MDQ6VXNlcjI1OTg4MDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2598808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schollii", "html_url": "https://github.com/schollii", "followers_url": "https://api.github.com/users/schollii/followers", "following_url": "https://api.github.com/users/schollii/following{/other_user}", "gists_url": "https://api.github.com/users/schollii/gists{/gist_id}", "starred_url": "https://api.github.com/users/schollii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schollii/subscriptions", "organizations_url": "https://api.github.com/users/schollii/orgs", "repos_url": "https://api.github.com/users/schollii/repos", "events_url": "https://api.github.com/users/schollii/events{/privacy}", "received_events_url": "https://api.github.com/users/schollii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-11T12:27:54Z", "updated_at": "2020-08-09T17:22:21Z", "closed_at": "2020-08-09T17:22:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "So with current behavior of click, my command has to check whether it is being called directly or from another command, in order to do the right thing: return a value if called from other command, raise `click.ClickException` if called directly. Doesn't make much sense IMO but ok, per #747 that's the way it is.\r\n\r\nSo what is a robust way to check this? I can't find anything in ctx that jumps out. There is no \"is_invoked\" property/method. One difference I found between the 2 types of invocations is that if command is called directly, then `ctx.parent.invoked_subcommand` is itself, whereas if it is called via `ctx.invoke`, this property is `None`. But is this defined behavior or could this change in the future?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1439", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1439/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1439/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1439/events", "html_url": "https://github.com/pallets/click/issues/1439", "id": 535571750, "node_id": "MDU6SXNzdWU1MzU1NzE3NTA=", "number": 1439, "title": "Feature Request: Allow `click.launch()` to specify the application to launch the url", "user": {"login": "ravsimar-sodhi", "id": 25057577, "node_id": "MDQ6VXNlcjI1MDU3NTc3", "avatar_url": "https://avatars0.githubusercontent.com/u/25057577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ravsimar-sodhi", "html_url": "https://github.com/ravsimar-sodhi", "followers_url": "https://api.github.com/users/ravsimar-sodhi/followers", "following_url": "https://api.github.com/users/ravsimar-sodhi/following{/other_user}", "gists_url": "https://api.github.com/users/ravsimar-sodhi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ravsimar-sodhi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ravsimar-sodhi/subscriptions", "organizations_url": "https://api.github.com/users/ravsimar-sodhi/orgs", "repos_url": "https://api.github.com/users/ravsimar-sodhi/repos", "events_url": "https://api.github.com/users/ravsimar-sodhi/events{/privacy}", "received_events_url": "https://api.github.com/users/ravsimar-sodhi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-10T08:29:44Z", "updated_at": "2019-12-10T14:28:35Z", "closed_at": "2019-12-10T14:28:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, `click.launch()` uses `xdg-open` to launch applications (On Linux). This is not always desirable, for example, I'd like to open a file with a specific PDF viewer which is not the default. \r\n\r\nLooking at the code, launch() further calls the `open_url` method. Is it possible to add another argument to the method specifying which application to use to open the URL? I'd be willing to contribute if this seems useful to others as well.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1438", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1438/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1438/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1438/events", "html_url": "https://github.com/pallets/click/issues/1438", "id": 533665853, "node_id": "MDU6SXNzdWU1MzM2NjU4NTM=", "number": 1438, "title": "Bug in invoke() method: mix_stderr argument does nothing", "user": {"login": "amaciel81", "id": 32267854, "node_id": "MDQ6VXNlcjMyMjY3ODU0", "avatar_url": "https://avatars3.githubusercontent.com/u/32267854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amaciel81", "html_url": "https://github.com/amaciel81", "followers_url": "https://api.github.com/users/amaciel81/followers", "following_url": "https://api.github.com/users/amaciel81/following{/other_user}", "gists_url": "https://api.github.com/users/amaciel81/gists{/gist_id}", "starred_url": "https://api.github.com/users/amaciel81/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amaciel81/subscriptions", "organizations_url": "https://api.github.com/users/amaciel81/orgs", "repos_url": "https://api.github.com/users/amaciel81/repos", "events_url": "https://api.github.com/users/amaciel81/events{/privacy}", "received_events_url": "https://api.github.com/users/amaciel81/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-05T23:56:25Z", "updated_at": "2019-12-10T19:25:12Z", "closed_at": "2019-12-10T19:25:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nThe method `invoke()` on the class `CliRunner` has the argument `mix_stderr` that is actually not doing anything:\r\n\r\nhttps://github.com/pallets/click/blob/6944450c5331f2d652d342650b6d9b3b52404baa/click/testing.py#L281\r\n\r\nAlso, it seems the documentation includes the argument but is missing the description: http://click.palletsprojects.com/en/7.x/api/#testing.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1437", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1437/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1437/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1437/events", "html_url": "https://github.com/pallets/click/issues/1437", "id": 533444413, "node_id": "MDU6SXNzdWU1MzM0NDQ0MTM=", "number": 1437, "title": "Current working directory of CliRunner.invoke", "user": {"login": "danilobellini", "id": 2096474, "node_id": "MDQ6VXNlcjIwOTY0NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2096474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danilobellini", "html_url": "https://github.com/danilobellini", "followers_url": "https://api.github.com/users/danilobellini/followers", "following_url": "https://api.github.com/users/danilobellini/following{/other_user}", "gists_url": "https://api.github.com/users/danilobellini/gists{/gist_id}", "starred_url": "https://api.github.com/users/danilobellini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danilobellini/subscriptions", "organizations_url": "https://api.github.com/users/danilobellini/orgs", "repos_url": "https://api.github.com/users/danilobellini/repos", "events_url": "https://api.github.com/users/danilobellini/events{/privacy}", "received_events_url": "https://api.github.com/users/danilobellini/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-05T16:04:10Z", "updated_at": "2019-12-05T16:13:30Z", "closed_at": "2019-12-05T16:13:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found no way to control the \"current working directory\" when calling `click.testing.CliRunner.invoke` inside tests, and I think that it can be a keyword parameter (accepting a string or a `pathlib.Path` object) of either `CliRunner.invoke` or `CliRunner.__init__`.\r\n\r\n```python\r\nrunner = CliRunner()\r\nresult = runner.invoke(main, [\"filename.ext\"], cwd=Path(__file__).parent)\r\n```\r\n\r\nI can try to create something like a context manager or a fixture (for setup/teardown) that sets it (e.g. with `os.chdir`, like what happens in `CliRunner.isolated_filesystem`) before calling the test, getting back to the previous working directory after running that specific test, however that will make it quite difficult to run tests in multiple threads at once, unless everything can be done from the same single current working directory.\r\n\r\nPerhaps `CliRunner.isolated_filesystem` should include some note in its docstring telling that it must not be called more than once at the same time (multi-thread or concurrently/async) in a single process.\r\n\r\nI need something like that because the current working directory is part of the result of the application I'm trying to test.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1436", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1436/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1436/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1436/events", "html_url": "https://github.com/pallets/click/issues/1436", "id": 532740883, "node_id": "MDU6SXNzdWU1MzI3NDA4ODM=", "number": 1436, "title": "Choice options do not get normalized for case", "user": {"login": "beowulfenator", "id": 5413344, "node_id": "MDQ6VXNlcjU0MTMzNDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/5413344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beowulfenator", "html_url": "https://github.com/beowulfenator", "followers_url": "https://api.github.com/users/beowulfenator/followers", "following_url": "https://api.github.com/users/beowulfenator/following{/other_user}", "gists_url": "https://api.github.com/users/beowulfenator/gists{/gist_id}", "starred_url": "https://api.github.com/users/beowulfenator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beowulfenator/subscriptions", "organizations_url": "https://api.github.com/users/beowulfenator/orgs", "repos_url": "https://api.github.com/users/beowulfenator/repos", "events_url": "https://api.github.com/users/beowulfenator/events{/privacy}", "received_events_url": "https://api.github.com/users/beowulfenator/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-04T15:00:50Z", "updated_at": "2019-12-04T15:24:11Z", "closed_at": "2019-12-04T15:24:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the [options doc page](https://click.palletsprojects.com/en/7.x/options/#choice-options) there's an example of case normalization of choice options. I've created the file `digest.py` with the following contents:\r\n\r\n```\r\nimport click\r\n\r\n\r\n@click.command()\r\n@click.option('--hash-type',\r\n              type=click.Choice(['MD5', 'SHA1'], case_sensitive=False))\r\ndef digest(hash_type):\r\n    click.echo(hash_type)\r\n\r\nif __name__ == \"__main__\":\r\n    digest()\r\n```\r\n\r\nThe only difference from the example in the docs is that I'm not using setup Setuptools.\r\n\r\nSo I am running my command like this: `python digest.py --hash-type=md5`. According to the docs I should see `MD5`, the originally passed choice. In reality I am getting `md5`. Am I doing something wrong, or is this a bug?\r\n\r\nClick version is 7.0.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/click/issues/1435", "repository_url": "https://api.github.com/repos/pallets/click", "labels_url": "https://api.github.com/repos/pallets/click/issues/1435/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/click/issues/1435/comments", "events_url": "https://api.github.com/repos/pallets/click/issues/1435/events", "html_url": "https://github.com/pallets/click/issues/1435", "id": 532318798, "node_id": "MDU6SXNzdWU1MzIzMTg3OTg=", "number": 1435, "title": "`CliRunner.invoke` takes `mix_stderr` which does nothing", "user": {"login": "adamtheturtle", "id": 797801, "node_id": "MDQ6VXNlcjc5NzgwMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/797801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamtheturtle", "html_url": "https://github.com/adamtheturtle", "followers_url": "https://api.github.com/users/adamtheturtle/followers", "following_url": "https://api.github.com/users/adamtheturtle/following{/other_user}", "gists_url": "https://api.github.com/users/adamtheturtle/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamtheturtle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamtheturtle/subscriptions", "organizations_url": "https://api.github.com/users/adamtheturtle/orgs", "repos_url": "https://api.github.com/users/adamtheturtle/repos", "events_url": "https://api.github.com/users/adamtheturtle/events{/privacy}", "received_events_url": "https://api.github.com/users/adamtheturtle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/click/milestones/4", "html_url": "https://github.com/pallets/click/milestone/4", "labels_url": "https://api.github.com/repos/pallets/click/milestones/4/labels", "id": 3655023, "node_id": "MDk6TWlsZXN0b25lMzY1NTAyMw==", "number": 4, "title": "7.1", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 85, "state": "closed", "created_at": "2018-09-14T14:59:39Z", "updated_at": "2020-03-09T15:22:28Z", "due_on": null, "closed_at": "2020-03-09T15:22:28Z"}, "comments": 10, "created_at": "2019-12-03T22:48:15Z", "updated_at": "2020-02-17T01:22:20Z", "closed_at": "2020-02-17T01:22:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`mix_stderr` is a parameter of `CliRunner.invoke`.\r\nThis is not documented in the docstring as a `:param`.\r\nSimply reading the code (which I did after trying this and seeing no output) shows that this parameter is not used.\r\n\r\n`mix_stderr` works on `CliRunner.__init__`.\r\n\r\nThe `mix_stderr` parameter should be removed, or changed to work and get documented.", "performed_via_github_app": null, "score": 1.0}]}